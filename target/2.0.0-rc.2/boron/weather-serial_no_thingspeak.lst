
c:/Users/BtX/Downloads/weather-serial_no_thingspeak/target/2.0.0-rc.2/boron/weather-serial_no_thingspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c470  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000e0490  000e0490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000e0498  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000248  2003bf88  000e049c  0002bf88  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002620  2003c1d0  2003c1d0  0003c1d0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000e06e4  000e06e4  000306e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000e070c  000e070c  0003070c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   002e84ff  00000000  00000000  00030710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0002a322  00000000  00000000  00318c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00043af8  00000000  00000000  00342f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003660  00000000  00000000  00386a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000abb0  00000000  00000000  0038a089  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00051a4f  00000000  00000000  00394c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006d83d  00000000  00000000  003e6688  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0011ea4b  00000000  00000000  00453ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000a730  00000000  00000000  00572910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f009 fcc9 	bl	dd9c8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f009 fcd1 	bl	dd9e4 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003bf88 	.word	0x2003bf88
   d404c:	000e049c 	.word	0x000e049c
   d4050:	2003c1d0 	.word	0x2003c1d0
   d4054:	2003c1d0 	.word	0x2003c1d0
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 fbe9 	bl	da838 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000e045c 	.word	0x000e045c
   d4080:	000e0488 	.word	0x000e0488

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bd0e 	b.w	d4aa4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fbb7 	bl	d47fc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 bb93 	b.w	da7bc <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f005 bba9 	b.w	d97ec <malloc>

000d409a <_Znaj>:
   d409a:	f005 bba7 	b.w	d97ec <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f005 bbad 	b.w	d97fc <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b2:	6810      	ldr	r0, [r2, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40b6:	4770      	bx	lr

000d40b8 <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   d40b8:	4770      	bx	lr
	...

000d40bc <_Z18capturePollSensorsv>:
}

void capturePollSensors()
{
  // Set the flag to poll the sensors
  readyToCapturePollSensors = true;
   d40bc:	4b01      	ldr	r3, [pc, #4]	; (d40c4 <_Z18capturePollSensorsv+0x8>)
   d40be:	2201      	movs	r2, #1
   d40c0:	701a      	strb	r2, [r3, #0]
}
   d40c2:	4770      	bx	lr
   d40c4:	2003c4b8 	.word	0x2003c4b8

000d40c8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	4718      	bx	r3

000d40cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40cc:	2a01      	cmp	r2, #1
   d40ce:	d003      	beq.n	d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40d0:	2a02      	cmp	r2, #2
   d40d2:	d003      	beq.n	d40dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40d4:	2000      	movs	r0, #0
   d40d6:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40d8:	6001      	str	r1, [r0, #0]
	      break;
   d40da:	e7fb      	b.n	d40d4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40dc:	680b      	ldr	r3, [r1, #0]
   d40de:	6003      	str	r3, [r0, #0]
	}
   d40e0:	e7f8      	b.n	d40d4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40e2 <_ZN5SdFatD1Ev>:
//==============================================================================
/**
 * \class SdFat
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFileSystem<SdSpiCard> {
   d40e2:	4770      	bx	lr

000d40e4 <__tcf_0>:
String i2cNames[] =
   d40e4:	b538      	push	{r3, r4, r5, lr}
   d40e6:	4d04      	ldr	r5, [pc, #16]	; (d40f8 <__tcf_0+0x14>)
   d40e8:	2407      	movs	r4, #7
   d40ea:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   d40ee:	f005 fdf3 	bl	d9cd8 <_ZN6StringD1Ev>
   d40f2:	3c01      	subs	r4, #1
   d40f4:	d2f9      	bcs.n	d40ea <__tcf_0+0x6>
   d40f6:	bd38      	pop	{r3, r4, r5, pc}
   d40f8:	2003c2a0 	.word	0x2003c2a0

000d40fc <_ZN7IoTNodeD1Ev>:
 * @brief Main IoT Node class.
 * Includes functions to manage external power. Read the state of the battery charger.
 * Send a "tickle" to reset the watchdog timer and control GPIO on the IO headers. 
 * 
 */
class IoTNode
   d40fc:	b510      	push	{r4, lr}
   d40fe:	4604      	mov	r4, r0
   d4100:	f005 fdea 	bl	d9cd8 <_ZN6StringD1Ev>
   d4104:	4620      	mov	r0, r4
   d4106:	bd10      	pop	{r4, pc}

000d4108 <_Z22getResetAndSendSensorsv>:

void getResetAndSendSensors()
{
   d4108:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d410a:	f005 f8cf 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
  // Set the flag to read and send data.
  // Has to be done out of this Timer thread
  timeToNextSendMS = millis();
   d410e:	4b03      	ldr	r3, [pc, #12]	; (d411c <_Z22getResetAndSendSensorsv+0x14>)
   d4110:	6018      	str	r0, [r3, #0]
  readyToGetResetAndSendSensors = true;
   d4112:	4b03      	ldr	r3, [pc, #12]	; (d4120 <_Z22getResetAndSendSensorsv+0x18>)
   d4114:	2201      	movs	r2, #1
   d4116:	701a      	strb	r2, [r3, #0]
}
   d4118:	bd08      	pop	{r3, pc}
   d411a:	bf00      	nop
   d411c:	2003e030 	.word	0x2003e030
   d4120:	2003c4b9 	.word	0x2003c4b9

000d4124 <_ZN14WeatherSensors15handleRainEventEv>:
      }

      lastAnemoneterEvent = timeAnemometerEvent; // set up for next event
    }

    void handleRainEvent() {
   d4124:	b510      	push	{r4, lr}
   d4126:	4604      	mov	r4, r0
   d4128:	f005 f8c0 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
      // Count rain gauge bucket tips as they occur
      // Activated by the magnet and reed switch in the rain gauge, attached to input D2
      unsigned int timeRainEvent = millis(); // grab current time

      // ignore switch-bounce glitches less than 10mS after initial edge
      if(timeRainEvent - lastRainEvent < 10) {
   d412c:	f241 6264 	movw	r2, #5732	; 0x1664
   d4130:	58a3      	ldr	r3, [r4, r2]
   d4132:	1ac3      	subs	r3, r0, r3
   d4134:	2b09      	cmp	r3, #9
   d4136:	d905      	bls.n	d4144 <_ZN14WeatherSensors15handleRainEventEv+0x20>
        return;
      }
      rainEventCount++; //Increase this minute's amount of rain
   d4138:	f504 51b3 	add.w	r1, r4, #5728	; 0x1660
   d413c:	680b      	ldr	r3, [r1, #0]
   d413e:	3301      	adds	r3, #1
   d4140:	600b      	str	r3, [r1, #0]
      lastRainEvent = timeRainEvent; // set up for next event
   d4142:	50a0      	str	r0, [r4, r2]
    }
   d4144:	bd10      	pop	{r4, pc}

000d4146 <_ZN14WeatherSensors21handleAnemometerEventEv>:
    void handleAnemometerEvent() {
   d4146:	b538      	push	{r3, r4, r5, lr}
   d4148:	4604      	mov	r4, r0
   d414a:	f005 f8af 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
      if(lastAnemoneterEvent != 0) {
   d414e:	f504 51b4 	add.w	r1, r4, #5760	; 0x1680
   d4152:	680b      	ldr	r3, [r1, #0]
   d4154:	b193      	cbz	r3, d417c <_ZN14WeatherSensors21handleAnemometerEventEv+0x36>
          unsigned int period = timeAnemometerEvent - lastAnemoneterEvent;
   d4156:	1ac3      	subs	r3, r0, r3
          if(period < 10) {
   d4158:	2b09      	cmp	r3, #9
   d415a:	d910      	bls.n	d417e <_ZN14WeatherSensors21handleAnemometerEventEv+0x38>
          if(period < GustPeriod) {
   d415c:	f241 627c 	movw	r2, #5756	; 0x167c
   d4160:	58a5      	ldr	r5, [r4, r2]
   d4162:	429d      	cmp	r5, r3
              GustPeriod = period;
   d4164:	bf88      	it	hi
   d4166:	50a3      	strhi	r3, [r4, r2]
          AnemoneterPeriodTotal += period;
   d4168:	f241 6574 	movw	r5, #5748	; 0x1674
   d416c:	5962      	ldr	r2, [r4, r5]
   d416e:	4413      	add	r3, r2
   d4170:	5163      	str	r3, [r4, r5]
          AnemoneterPeriodReadingCount++;
   d4172:	f241 6278 	movw	r2, #5752	; 0x1678
   d4176:	58a3      	ldr	r3, [r4, r2]
   d4178:	3301      	adds	r3, #1
   d417a:	50a3      	str	r3, [r4, r2]
      lastAnemoneterEvent = timeAnemometerEvent; // set up for next event
   d417c:	6008      	str	r0, [r1, #0]
    }
   d417e:	bd38      	pop	{r3, r4, r5, pc}

000d4180 <_ZN14WeatherSensorsD1Ev>:
class WeatherSensors
   d4180:	b510      	push	{r4, lr}
   d4182:	4604      	mov	r4, r0
   d4184:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
   d4188:	3004      	adds	r0, #4
   d418a:	f005 fda5 	bl	d9cd8 <_ZN6StringD1Ev>
   d418e:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d4192:	f004 ffb2 	bl	d90fa <_ZN13RunningMedianD1Ev>
   d4196:	f104 000a 	add.w	r0, r4, #10
   d419a:	f004 ffae 	bl	d90fa <_ZN13RunningMedianD1Ev>
   d419e:	4620      	mov	r0, r4
   d41a0:	bd10      	pop	{r4, pc}

000d41a2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d41a2:	b510      	push	{r4, lr}
  }
   d41a4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d41a6:	4604      	mov	r4, r0
  }
   d41a8:	f007 fa59 	bl	db65e <_ZdlPvj>
   d41ac:	4620      	mov	r0, r4
   d41ae:	bd10      	pop	{r4, pc}

000d41b0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41b0:	6943      	ldr	r3, [r0, #20]
   d41b2:	b113      	cbz	r3, d41ba <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41b4:	6983      	ldr	r3, [r0, #24]
   d41b6:	300c      	adds	r0, #12
   d41b8:	4718      	bx	r3
            callback();
        }
    }
   d41ba:	4770      	bx	lr

000d41bc <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d41bc:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41be:	2100      	movs	r1, #0
   d41c0:	4604      	mov	r4, r0
   d41c2:	4608      	mov	r0, r1
   d41c4:	f005 f89a 	bl	d92fc <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41c8:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d41ca:	4620      	mov	r0, r4
   d41cc:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d41ce:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d41d0:	f005 f8ac 	bl	d932c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d41d4:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d41d6:	b10c      	cbz	r4, d41dc <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d41d8:	2301      	movs	r3, #1
   d41da:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41dc:	2100      	movs	r1, #0
   d41de:	2001      	movs	r0, #1
   d41e0:	f005 f88c 	bl	d92fc <os_thread_scheduling>
            }
        }
        if (t) {
   d41e4:	b12c      	cbz	r4, d41f2 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d41e6:	6823      	ldr	r3, [r4, #0]
   d41e8:	4620      	mov	r0, r4
   d41ea:	689b      	ldr	r3, [r3, #8]
   d41ec:	4798      	blx	r3
            t->running = false;
   d41ee:	2300      	movs	r3, #0
   d41f0:	7123      	strb	r3, [r4, #4]
        }
    }
   d41f2:	b002      	add	sp, #8
   d41f4:	bd10      	pop	{r4, pc}

000d41f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM14WeatherSensorsFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d41f6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d41f8:	b538      	push	{r3, r4, r5, lr}
   d41fa:	4604      	mov	r4, r0
	  switch (__op)
   d41fc:	d007      	beq.n	d420e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM14WeatherSensorsFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x18>
   d41fe:	2a03      	cmp	r2, #3
   d4200:	d011      	beq.n	d4226 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM14WeatherSensorsFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x30>
   d4202:	2a01      	cmp	r2, #1
   d4204:	d101      	bne.n	d420a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM14WeatherSensorsFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4206:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d4208:	6023      	str	r3, [r4, #0]
	}
   d420a:	2000      	movs	r0, #0
   d420c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d420e:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d4210:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4212:	f7ff ff40 	bl	d4096 <_Znwj>
   d4216:	4603      	mov	r3, r0
   d4218:	2800      	cmp	r0, #0
   d421a:	d0f5      	beq.n	d4208 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM14WeatherSensorsFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
   d421c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4220:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4224:	e7f0      	b.n	d4208 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM14WeatherSensorsFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d4226:	6800      	ldr	r0, [r0, #0]
   d4228:	2800      	cmp	r0, #0
   d422a:	d0ee      	beq.n	d420a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM14WeatherSensorsFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
   d422c:	210c      	movs	r1, #12
   d422e:	f007 fa16 	bl	db65e <_ZdlPvj>
   d4232:	e7ea      	b.n	d420a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM14WeatherSensorsFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

000d4234 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14WeatherSensorsFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4234:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   d4236:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d4238:	685a      	ldr	r2, [r3, #4]
   d423a:	6899      	ldr	r1, [r3, #8]
   d423c:	681b      	ldr	r3, [r3, #0]
   d423e:	1054      	asrs	r4, r2, #1
   d4240:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d4244:	07d2      	lsls	r2, r2, #31
   d4246:	bf48      	it	mi
   d4248:	590a      	ldrmi	r2, [r1, r4]
      }
   d424a:	f85d 4b04 	ldr.w	r4, [sp], #4
   d424e:	bf48      	it	mi
   d4250:	58d3      	ldrmi	r3, [r2, r3]
   d4252:	4718      	bx	r3

000d4254 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   d4254:	b510      	push	{r4, lr}
   d4256:	4b05      	ldr	r3, [pc, #20]	; (d426c <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   d4258:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   d425a:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   d425c:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   d425e:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   d4262:	f005 f9d3 	bl	d960c <led_set_status_active>
}
   d4266:	4620      	mov	r0, r4
   d4268:	bd10      	pop	{r4, pc}
   d426a:	bf00      	nop
   d426c:	000df730 	.word	0x000df730

000d4270 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   d4270:	b510      	push	{r4, lr}
   d4272:	4604      	mov	r4, r0
}
   d4274:	f7ff ffee 	bl	d4254 <_ZN8particle9LEDStatusD1Ev>
   d4278:	4620      	mov	r0, r4
   d427a:	2120      	movs	r1, #32
   d427c:	f007 f9ef 	bl	db65e <_ZdlPvj>
   d4280:	4620      	mov	r0, r4
   d4282:	bd10      	pop	{r4, pc}

000d4284 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4284:	b40e      	push	{r1, r2, r3}
   d4286:	b503      	push	{r0, r1, lr}
   d4288:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d428a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d428c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4290:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4292:	f006 f82c 	bl	da2ee <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4296:	b002      	add	sp, #8
   d4298:	f85d eb04 	ldr.w	lr, [sp], #4
   d429c:	b003      	add	sp, #12
   d429e:	4770      	bx	lr

000d42a0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d42a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d42a2:	4604      	mov	r4, r0
   d42a4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d42a6:	7922      	ldrb	r2, [r4, #4]
   d42a8:	68a3      	ldr	r3, [r4, #8]
   d42aa:	b132      	cbz	r2, d42ba <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d42ac:	b9a3      	cbnz	r3, d42d8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d42ae:	490b      	ldr	r1, [pc, #44]	; (d42dc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d42b0:	b002      	add	sp, #8
   d42b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d42b6:	f005 bf01 	b.w	da0bc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42ba:	4a09      	ldr	r2, [pc, #36]	; (d42e0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d42bc:	7b26      	ldrb	r6, [r4, #12]
   d42be:	4d09      	ldr	r5, [pc, #36]	; (d42e4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d42c0:	4909      	ldr	r1, [pc, #36]	; (d42e8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d42c2:	7b64      	ldrb	r4, [r4, #13]
   d42c4:	2e01      	cmp	r6, #1
   d42c6:	bf18      	it	ne
   d42c8:	4629      	movne	r1, r5
   d42ca:	e9cd 1400 	strd	r1, r4, [sp]
   d42ce:	4907      	ldr	r1, [pc, #28]	; (d42ec <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d42d0:	f7ff ffd8 	bl	d4284 <_ZN5Print6printfEPKcz>
  }
   d42d4:	b002      	add	sp, #8
   d42d6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42d8:	4a05      	ldr	r2, [pc, #20]	; (d42f0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d42da:	e7ef      	b.n	d42bc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d42dc:	000df491 	.word	0x000df491
   d42e0:	000dff9b 	.word	0x000dff9b
   d42e4:	000df48d 	.word	0x000df48d
   d42e8:	000df489 	.word	0x000df489
   d42ec:	000df4a7 	.word	0x000df4a7
   d42f0:	000df480 	.word	0x000df480

000d42f4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d42f4:	2200      	movs	r2, #0
   d42f6:	6840      	ldr	r0, [r0, #4]
   d42f8:	4611      	mov	r1, r2
   d42fa:	f005 ba07 	b.w	d970c <network_ready>

000d42fe <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d42fe:	b510      	push	{r4, lr}
      if (_M_manager)
   d4300:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4302:	4604      	mov	r4, r0
      if (_M_manager)
   d4304:	b113      	cbz	r3, d430c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4306:	2203      	movs	r2, #3
   d4308:	4601      	mov	r1, r0
   d430a:	4798      	blx	r3
    }
   d430c:	4620      	mov	r0, r4
   d430e:	bd10      	pop	{r4, pc}

000d4310 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4310:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4312:	468c      	mov	ip, r1
   d4314:	2500      	movs	r5, #0
   d4316:	4914      	ldr	r1, [pc, #80]	; (d4368 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   d4318:	7105      	strb	r5, [r0, #4]
   d431a:	4604      	mov	r4, r0
   d431c:	6085      	str	r5, [r0, #8]
   d431e:	6001      	str	r1, [r0, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4320:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4324:	b085      	sub	sp, #20
   d4326:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4328:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d432c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4330:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4334:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4338:	e897 0003 	ldmia.w	r7, {r0, r1}
   d433c:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4340:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4342:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d4344:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4346:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4348:	6095      	str	r5, [r2, #8]
   d434a:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d434c:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d434e:	e9cd 3500 	strd	r3, r5, [sp]
   d4352:	4a06      	ldr	r2, [pc, #24]	; (d436c <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d4354:	4623      	mov	r3, r4
   d4356:	4661      	mov	r1, ip
   d4358:	f104 0008 	add.w	r0, r4, #8
   d435c:	f004 ffd6 	bl	d930c <os_timer_create>
    }
   d4360:	4620      	mov	r0, r4
   d4362:	b005      	add	sp, #20
   d4364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4366:	bf00      	nop
   d4368:	000df71c 	.word	0x000df71c
   d436c:	000d41bd 	.word	0x000d41bd

000d4370 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d4370:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4372:	6880      	ldr	r0, [r0, #8]
   d4374:	2300      	movs	r3, #0
   d4376:	b138      	cbz	r0, d4388 <_ZN5Timer5_stopEjb+0x18>
   d4378:	e9cd 1300 	strd	r1, r3, [sp]
   d437c:	2102      	movs	r1, #2
   d437e:	f004 ffdd 	bl	d933c <os_timer_change>
   d4382:	fab0 f080 	clz	r0, r0
   d4386:	0940      	lsrs	r0, r0, #5
    }
   d4388:	b003      	add	sp, #12
   d438a:	f85d fb04 	ldr.w	pc, [sp], #4

000d438e <_ZN5Timer5startEj>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   d438e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4390:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4392:	2200      	movs	r2, #0
    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4394:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4396:	4611      	mov	r1, r2
   d4398:	f7ff ffea 	bl	d4370 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d439c:	68a8      	ldr	r0, [r5, #8]
   d439e:	2300      	movs	r3, #0
   d43a0:	b140      	cbz	r0, d43b4 <_ZN5Timer5startEj+0x26>
   d43a2:	e9cd 4300 	strd	r4, r3, [sp]
   d43a6:	461a      	mov	r2, r3
   d43a8:	4619      	mov	r1, r3
   d43aa:	f004 ffc7 	bl	d933c <os_timer_change>
   d43ae:	fab0 f080 	clz	r0, r0
   d43b2:	0940      	lsrs	r0, r0, #5
    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43b4:	b003      	add	sp, #12
   d43b6:	bd30      	pop	{r4, r5, pc}

000d43b8 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d43b8:	b538      	push	{r3, r4, r5, lr}
   d43ba:	4b10      	ldr	r3, [pc, #64]	; (d43fc <_ZN5TimerD1Ev+0x44>)
   d43bc:	6003      	str	r3, [r0, #0]
        if (handle) {
   d43be:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d43c0:	4604      	mov	r4, r0
        if (handle) {
   d43c2:	b1a3      	cbz	r3, d43ee <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d43c8:	2200      	movs	r2, #0
   d43ca:	f7ff ffd1 	bl	d4370 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d43ce:	68a0      	ldr	r0, [r4, #8]
   d43d0:	2100      	movs	r1, #0
   d43d2:	f004 ffcb 	bl	d936c <os_timer_set_id>
            while (running) {
   d43d6:	7923      	ldrb	r3, [r4, #4]
   d43d8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d43dc:	b113      	cbz	r3, d43e4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d43de:	f004 ff85 	bl	d92ec <os_thread_yield>
            while (running) {
   d43e2:	e7f8      	b.n	d43d6 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d43e4:	68a0      	ldr	r0, [r4, #8]
   d43e6:	4629      	mov	r1, r5
   d43e8:	f004 ff98 	bl	d931c <os_timer_destroy>
            handle = nullptr;
   d43ec:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d43ee:	f104 000c 	add.w	r0, r4, #12
   d43f2:	f7ff ff84 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
    }
   d43f6:	4620      	mov	r0, r4
   d43f8:	bd38      	pop	{r3, r4, r5, pc}
   d43fa:	bf00      	nop
   d43fc:	000df71c 	.word	0x000df71c

000d4400 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4400:	b510      	push	{r4, lr}
   d4402:	4604      	mov	r4, r0
    }
   d4404:	f7ff ffd8 	bl	d43b8 <_ZN5TimerD1Ev>
   d4408:	4620      	mov	r0, r4
   d440a:	211c      	movs	r1, #28
   d440c:	f007 f927 	bl	db65e <_ZdlPvj>
   d4410:	4620      	mov	r0, r4
   d4412:	bd10      	pop	{r4, pc}

000d4414 <_Z15checkI2CDevicesv>:
{
   d4414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4418:	4f4d      	ldr	r7, [pc, #308]	; (d4550 <_Z15checkI2CDevicesv+0x13c>)
   d441a:	f8df b148 	ldr.w	fp, [pc, #328]	; d4564 <_Z15checkI2CDevicesv+0x150>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d441e:	f8df 8148 	ldr.w	r8, [pc, #328]	; d4568 <_Z15checkI2CDevicesv+0x154>
   d4422:	b08d      	sub	sp, #52	; 0x34
   d4424:	2500      	movs	r5, #0
  bool result = true;
   d4426:	2401      	movs	r4, #1
  for (size_t i; i<i2cLength; ++i)
   d4428:	2d08      	cmp	r5, #8
   d442a:	f000 808d 	beq.w	d4548 <_Z15checkI2CDevicesv+0x134>
    address = i2cAddr[i];
   d442e:	4b49      	ldr	r3, [pc, #292]	; (d4554 <_Z15checkI2CDevicesv+0x140>)
   d4430:	5cee      	ldrb	r6, [r5, r3]
    Wire.beginTransmission(address);
   d4432:	f007 f8e7 	bl	db604 <_Z19__fetch_global_Wirev>
   d4436:	4631      	mov	r1, r6
   d4438:	f006 ff7c 	bl	db334 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d443c:	f007 f8e2 	bl	db604 <_Z19__fetch_global_Wirev>
   d4440:	f006 ff83 	bl	db34a <_ZN7TwoWire15endTransmissionEv>
    if (!error==0)
   d4444:	eb0b 1905 	add.w	r9, fp, r5, lsl #4
   d4448:	bb88      	cbnz	r0, d44ae <_Z15checkI2CDevicesv+0x9a>
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
   d444a:	f006 fd91 	bl	daf70 <_Z16_fetch_usbserialv>
   d444e:	4641      	mov	r1, r8
   d4450:	4682      	mov	sl, r0
   d4452:	4668      	mov	r0, sp
   d4454:	f005 fc8b 	bl	d9d6e <_ZN6StringC1EPKc>
   d4458:	4649      	mov	r1, r9
   d445a:	4668      	mov	r0, sp
   d445c:	f005 fd67 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d4460:	493d      	ldr	r1, [pc, #244]	; (d4558 <_Z15checkI2CDevicesv+0x144>)
   d4462:	f005 fd70 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d4466:	493d      	ldr	r1, [pc, #244]	; (d455c <_Z15checkI2CDevicesv+0x148>)
   d4468:	f005 fd6d 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d446c:	2210      	movs	r2, #16
   d446e:	4681      	mov	r9, r0
   d4470:	4631      	mov	r1, r6
   d4472:	eb0d 0002 	add.w	r0, sp, r2
   d4476:	f005 fcf0 	bl	d9e5a <_ZN6StringC1Ehh>
   d447a:	a904      	add	r1, sp, #16
   d447c:	4648      	mov	r0, r9
   d447e:	f005 fd56 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d4482:	4601      	mov	r1, r0
   d4484:	a808      	add	r0, sp, #32
   d4486:	f005 fcb2 	bl	d9dee <_ZN6StringC1ERKS_>
   d448a:	9908      	ldr	r1, [sp, #32]
   d448c:	4650      	mov	r0, sl
   d448e:	f005 fe2c 	bl	da0ea <_ZN5Print7printlnEPKc>
   d4492:	a808      	add	r0, sp, #32
   d4494:	f005 fc20 	bl	d9cd8 <_ZN6StringD1Ev>
   d4498:	a804      	add	r0, sp, #16
   d449a:	f005 fc1d 	bl	d9cd8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d449e:	4668      	mov	r0, sp
   d44a0:	f005 fc1a 	bl	d9cd8 <_ZN6StringD1Ev>
      i2cExists[i]=true;
   d44a4:	2301      	movs	r3, #1
   d44a6:	703b      	strb	r3, [r7, #0]
  for (size_t i; i<i2cLength; ++i)
   d44a8:	3501      	adds	r5, #1
   d44aa:	3701      	adds	r7, #1
   d44ac:	e7bc      	b.n	d4428 <_Z15checkI2CDevicesv+0x14>
      delay(10);
   d44ae:	200a      	movs	r0, #10
   d44b0:	f006 f938 	bl	da724 <delay>
      Wire.beginTransmission(address);
   d44b4:	f007 f8a6 	bl	db604 <_Z19__fetch_global_Wirev>
   d44b8:	4631      	mov	r1, r6
   d44ba:	f006 ff3b 	bl	db334 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d44be:	f007 f8a1 	bl	db604 <_Z19__fetch_global_Wirev>
   d44c2:	f006 ff42 	bl	db34a <_ZN7TwoWire15endTransmissionEv>
    if (!error==0)
   d44c6:	2800      	cmp	r0, #0
   d44c8:	d0bf      	beq.n	d444a <_Z15checkI2CDevicesv+0x36>
      Wire.reset();
   d44ca:	f007 f89b 	bl	db604 <_Z19__fetch_global_Wirev>
   d44ce:	f006 ff43 	bl	db358 <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d44d2:	f007 f897 	bl	db604 <_Z19__fetch_global_Wirev>
   d44d6:	4631      	mov	r1, r6
   d44d8:	f006 ff2c 	bl	db334 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d44dc:	f007 f892 	bl	db604 <_Z19__fetch_global_Wirev>
   d44e0:	f006 ff33 	bl	db34a <_ZN7TwoWire15endTransmissionEv>
    if (error == 0)
   d44e4:	2800      	cmp	r0, #0
   d44e6:	d0b0      	beq.n	d444a <_Z15checkI2CDevicesv+0x36>
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " NOT at"+" address:0x"+String(address, HEX)));
   d44e8:	f006 fd42 	bl	daf70 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d44ec:	4641      	mov	r1, r8
   d44ee:	4604      	mov	r4, r0
   d44f0:	4668      	mov	r0, sp
   d44f2:	f005 fc3c 	bl	d9d6e <_ZN6StringC1EPKc>
   d44f6:	4649      	mov	r1, r9
   d44f8:	4668      	mov	r0, sp
   d44fa:	f005 fd18 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d44fe:	4918      	ldr	r1, [pc, #96]	; (d4560 <_Z15checkI2CDevicesv+0x14c>)
   d4500:	f005 fd21 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d4504:	4915      	ldr	r1, [pc, #84]	; (d455c <_Z15checkI2CDevicesv+0x148>)
   d4506:	f005 fd1e 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d450a:	2210      	movs	r2, #16
   d450c:	4681      	mov	r9, r0
   d450e:	4631      	mov	r1, r6
   d4510:	eb0d 0002 	add.w	r0, sp, r2
   d4514:	f005 fca1 	bl	d9e5a <_ZN6StringC1Ehh>
   d4518:	a904      	add	r1, sp, #16
   d451a:	4648      	mov	r0, r9
   d451c:	f005 fd07 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d4520:	4601      	mov	r1, r0
   d4522:	a808      	add	r0, sp, #32
   d4524:	f005 fc63 	bl	d9dee <_ZN6StringC1ERKS_>
   d4528:	9908      	ldr	r1, [sp, #32]
   d452a:	4620      	mov	r0, r4
   d452c:	f005 fddd 	bl	da0ea <_ZN5Print7printlnEPKc>
   d4530:	a808      	add	r0, sp, #32
   d4532:	f005 fbd1 	bl	d9cd8 <_ZN6StringD1Ev>
   d4536:	a804      	add	r0, sp, #16
   d4538:	f005 fbce 	bl	d9cd8 <_ZN6StringD1Ev>
      i2cExists[i]=false;
   d453c:	2400      	movs	r4, #0
class StringSumHelper : public String
   d453e:	4668      	mov	r0, sp
   d4540:	f005 fbca 	bl	d9cd8 <_ZN6StringD1Ev>
   d4544:	703c      	strb	r4, [r7, #0]
      result = false;
   d4546:	e7af      	b.n	d44a8 <_Z15checkI2CDevicesv+0x94>
}
   d4548:	4620      	mov	r0, r4
   d454a:	b00d      	add	sp, #52	; 0x34
   d454c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4550:	2003c298 	.word	0x2003c298
   d4554:	2003bf88 	.word	0x2003bf88
   d4558:	000df4dc 	.word	0x000df4dc
   d455c:	000df4cc 	.word	0x000df4cc
   d4560:	000df4d8 	.word	0x000df4d8
   d4564:	2003c2a0 	.word	0x2003c2a0
   d4568:	000df4c4 	.word	0x000df4c4

000d456c <_Z8printI2Ci>:
{
   d456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4570:	4d21      	ldr	r5, [pc, #132]	; (d45f8 <_Z8printI2Ci+0x8c>)
	StringSumHelper(const char *p) : String(p) {}
   d4572:	f8df 908c 	ldr.w	r9, [pc, #140]	; d4600 <_Z8printI2Ci+0x94>
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));
   d4576:	f8df a08c 	ldr.w	sl, [pc, #140]	; d4604 <_Z8printI2Ci+0x98>
   d457a:	f8df b08c 	ldr.w	fp, [pc, #140]	; d4608 <_Z8printI2Ci+0x9c>
{
   d457e:	b08d      	sub	sp, #52	; 0x34
   d4580:	4606      	mov	r6, r0
    for (int i=0; i<i2cLength; i++)
   d4582:	2400      	movs	r4, #0
          if (i2cAddr[i] == inx)
   d4584:	f815 3b01 	ldrb.w	r3, [r5], #1
   d4588:	42b3      	cmp	r3, r6
   d458a:	d12e      	bne.n	d45ea <_Z8printI2Ci+0x7e>
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));
   d458c:	f006 fcf0 	bl	daf70 <_Z16_fetch_usbserialv>
   d4590:	4649      	mov	r1, r9
   d4592:	4607      	mov	r7, r0
   d4594:	4668      	mov	r0, sp
   d4596:	f005 fbea 	bl	d9d6e <_ZN6StringC1EPKc>
   d459a:	eb0a 1104 	add.w	r1, sl, r4, lsl #4
   d459e:	4668      	mov	r0, sp
   d45a0:	f005 fcc5 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d45a4:	4659      	mov	r1, fp
   d45a6:	f005 fcce 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d45aa:	4914      	ldr	r1, [pc, #80]	; (d45fc <_Z8printI2Ci+0x90>)
   d45ac:	f005 fccb 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d45b0:	2210      	movs	r2, #16
   d45b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   d45b6:	4680      	mov	r8, r0
   d45b8:	eb0d 0002 	add.w	r0, sp, r2
   d45bc:	f005 fc4d 	bl	d9e5a <_ZN6StringC1Ehh>
   d45c0:	a904      	add	r1, sp, #16
   d45c2:	4640      	mov	r0, r8
   d45c4:	f005 fcb3 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d45c8:	4601      	mov	r1, r0
   d45ca:	a808      	add	r0, sp, #32
   d45cc:	f005 fc0f 	bl	d9dee <_ZN6StringC1ERKS_>
   d45d0:	9908      	ldr	r1, [sp, #32]
   d45d2:	4638      	mov	r0, r7
   d45d4:	f005 fd89 	bl	da0ea <_ZN5Print7printlnEPKc>
   d45d8:	a808      	add	r0, sp, #32
   d45da:	f005 fb7d 	bl	d9cd8 <_ZN6StringD1Ev>
   d45de:	a804      	add	r0, sp, #16
   d45e0:	f005 fb7a 	bl	d9cd8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d45e4:	4668      	mov	r0, sp
   d45e6:	f005 fb77 	bl	d9cd8 <_ZN6StringD1Ev>
    for (int i=0; i<i2cLength; i++)
   d45ea:	3401      	adds	r4, #1
   d45ec:	2c08      	cmp	r4, #8
   d45ee:	d1c9      	bne.n	d4584 <_Z8printI2Ci+0x18>
}
   d45f0:	b00d      	add	sp, #52	; 0x34
   d45f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d45f6:	bf00      	nop
   d45f8:	2003bf88 	.word	0x2003bf88
   d45fc:	000df4cc 	.word	0x000df4cc
   d4600:	000df4c4 	.word	0x000df4c4
   d4604:	2003c2a0 	.word	0x2003c2a0
   d4608:	000df4dc 	.word	0x000df4dc

000d460c <_Z7scanI2Cv>:
{
   d460c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DEBUG_PRINTLN("Scanning...");
   d4610:	f006 fcae 	bl	daf70 <_Z16_fetch_usbserialv>
   d4614:	491e      	ldr	r1, [pc, #120]	; (d4690 <_Z7scanI2Cv+0x84>)
      DEBUG_PRINT("Unknown error at address 0x");
   d4616:	4f1f      	ldr	r7, [pc, #124]	; (d4694 <_Z7scanI2Cv+0x88>)
        DEBUG_PRINT("0");
   d4618:	f8df 8084 	ldr.w	r8, [pc, #132]	; d46a0 <_Z7scanI2Cv+0x94>
  DEBUG_PRINTLN("Scanning...");
   d461c:	f005 fd65 	bl	da0ea <_ZN5Print7printlnEPKc>
   d4620:	2401      	movs	r4, #1
  nDevices = 0;
   d4622:	2500      	movs	r5, #0
    Wire.beginTransmission(address);
   d4624:	f006 ffee 	bl	db604 <_Z19__fetch_global_Wirev>
   d4628:	b2e1      	uxtb	r1, r4
   d462a:	f006 fe83 	bl	db334 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d462e:	f006 ffe9 	bl	db604 <_Z19__fetch_global_Wirev>
   d4632:	f006 fe8a 	bl	db34a <_ZN7TwoWire15endTransmissionEv>
    if (error == 0)
   d4636:	b970      	cbnz	r0, d4656 <_Z7scanI2Cv+0x4a>
      printI2C(address);
   d4638:	4620      	mov	r0, r4
   d463a:	f7ff ff97 	bl	d456c <_Z8printI2Ci>
      nDevices++;
   d463e:	3501      	adds	r5, #1
  for(address = 1; address < 127; address++ )
   d4640:	3401      	adds	r4, #1
   d4642:	2c7f      	cmp	r4, #127	; 0x7f
   d4644:	d1ee      	bne.n	d4624 <_Z7scanI2Cv+0x18>
  if (nDevices == 0)
   d4646:	b9fd      	cbnz	r5, d4688 <_Z7scanI2Cv+0x7c>
    DEBUG_PRINTLN("No I2C devices found\n");
   d4648:	f006 fc92 	bl	daf70 <_Z16_fetch_usbserialv>
   d464c:	4912      	ldr	r1, [pc, #72]	; (d4698 <_Z7scanI2Cv+0x8c>)
}
   d464e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    DEBUG_PRINTLN("done\n");
   d4652:	f005 bd4a 	b.w	da0ea <_ZN5Print7printlnEPKc>
    else if (error==4)
   d4656:	2804      	cmp	r0, #4
   d4658:	d1f2      	bne.n	d4640 <_Z7scanI2Cv+0x34>
      DEBUG_PRINT("Unknown error at address 0x");
   d465a:	f006 fc89 	bl	daf70 <_Z16_fetch_usbserialv>
   d465e:	4639      	mov	r1, r7
   d4660:	f005 fd2c 	bl	da0bc <_ZN5Print5printEPKc>
      if (address<16)
   d4664:	2c0f      	cmp	r4, #15
   d4666:	d804      	bhi.n	d4672 <_Z7scanI2Cv+0x66>
        DEBUG_PRINT("0");
   d4668:	f006 fc82 	bl	daf70 <_Z16_fetch_usbserialv>
   d466c:	4641      	mov	r1, r8
   d466e:	f005 fd25 	bl	da0bc <_ZN5Print5printEPKc>
      DEBUG_PRINTLN(address,HEX);
   d4672:	f006 fc7d 	bl	daf70 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4676:	2210      	movs	r2, #16
   d4678:	4606      	mov	r6, r0
   d467a:	4621      	mov	r1, r4
   d467c:	f005 fd41 	bl	da102 <_ZN5Print11printNumberEmh>
        n += println();
   d4680:	4630      	mov	r0, r6
   d4682:	f005 fd26 	bl	da0d2 <_ZN5Print7printlnEv>
        return n;
   d4686:	e7db      	b.n	d4640 <_Z7scanI2Cv+0x34>
    DEBUG_PRINTLN("done\n");
   d4688:	f006 fc72 	bl	daf70 <_Z16_fetch_usbserialv>
   d468c:	4903      	ldr	r1, [pc, #12]	; (d469c <_Z7scanI2Cv+0x90>)
   d468e:	e7de      	b.n	d464e <_Z7scanI2Cv+0x42>
   d4690:	000df4e0 	.word	0x000df4e0
   d4694:	000df4ec 	.word	0x000df4ec
   d4698:	000df50a 	.word	0x000df50a
   d469c:	000df520 	.word	0x000df520
   d46a0:	000df508 	.word	0x000df508

000d46a4 <_Z7connectv>:
{
   d46a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool cellready=Cellular.ready();
   d46a8:	4d41      	ldr	r5, [pc, #260]	; (d47b0 <_Z7connectv+0x10c>)
   d46aa:	4628      	mov	r0, r5
   d46ac:	f7ff fe22 	bl	d42f4 <_ZN5spark13CellularClass5readyEv>
  if (!cellready)
   d46b0:	4604      	mov	r4, r0
   d46b2:	2800      	cmp	r0, #0
   d46b4:	d15c      	bne.n	d4770 <_Z7connectv+0xcc>
    DEBUG_PRINTLN("Attempting to connect cellular...");
   d46b6:	f006 fc5b 	bl	daf70 <_Z16_fetch_usbserialv>
   d46ba:	493e      	ldr	r1, [pc, #248]	; (d47b4 <_Z7connectv+0x110>)
   d46bc:	f005 fd15 	bl	da0ea <_ZN5Print7printlnEPKc>
        network_on(*this, 0, 0, NULL);
   d46c0:	6868      	ldr	r0, [r5, #4]
   d46c2:	4623      	mov	r3, r4
   d46c4:	4622      	mov	r2, r4
   d46c6:	4621      	mov	r1, r4
   d46c8:	f005 f828 	bl	d971c <network_on>
        network_connect(*this, flags, 0, NULL);
   d46cc:	6868      	ldr	r0, [r5, #4]
   d46ce:	4623      	mov	r3, r4
   d46d0:	4622      	mov	r2, r4
   d46d2:	4621      	mov	r1, r4
   d46d4:	f005 f802 	bl	d96dc <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46d8:	4620      	mov	r0, r4
   d46da:	f004 fdf7 	bl	d92cc <hal_timer_millis>
   d46de:	4682      	mov	sl, r0
   d46e0:	2000      	movs	r0, #0
   d46e2:	f004 fdf3 	bl	d92cc <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d46e6:	ebb0 080a 	subs.w	r8, r0, sl
        while (_while() && !_condition()) {
   d46ea:	4a33      	ldr	r2, [pc, #204]	; (d47b8 <_Z7connectv+0x114>)
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d46ec:	eb61 0904 	sbc.w	r9, r1, r4
        while (_while() && !_condition()) {
   d46f0:	2300      	movs	r3, #0
   d46f2:	454b      	cmp	r3, r9
   d46f4:	bf08      	it	eq
   d46f6:	4542      	cmpeq	r2, r8
   d46f8:	d306      	bcc.n	d4708 <_Z7connectv+0x64>
    waitFor(Cellular.ready,180000);
   d46fa:	4628      	mov	r0, r5
   d46fc:	f7ff fdfa 	bl	d42f4 <_ZN5spark13CellularClass5readyEv>
   d4700:	b910      	cbnz	r0, d4708 <_Z7connectv+0x64>
            spark_process();
   d4702:	f005 f843 	bl	d978c <spark_process>
        while (_while() && !_condition()) {
   d4706:	e7eb      	b.n	d46e0 <_Z7connectv+0x3c>
   d4708:	4829      	ldr	r0, [pc, #164]	; (d47b0 <_Z7connectv+0x10c>)
   d470a:	f7ff fdf3 	bl	d42f4 <_ZN5spark13CellularClass5readyEv>
    if (!Cellular.ready())
   d470e:	4828      	ldr	r0, [pc, #160]	; (d47b0 <_Z7connectv+0x10c>)
   d4710:	f7ff fdf0 	bl	d42f4 <_ZN5spark13CellularClass5readyEv>
   d4714:	b948      	cbnz	r0, d472a <_Z7connectv+0x86>
    DEBUG_PRINTLN("Cellular not ready - resetting");
   d4716:	f006 fc2b 	bl	daf70 <_Z16_fetch_usbserialv>
   d471a:	4928      	ldr	r1, [pc, #160]	; (d47bc <_Z7connectv+0x118>)
   d471c:	f005 fce5 	bl	da0ea <_ZN5Print7printlnEPKc>
    delay(200);
   d4720:	20c8      	movs	r0, #200	; 0xc8
   d4722:	f005 ffff 	bl	da724 <delay>
    System.reset();
   d4726:	f005 f9ff 	bl	d9b28 <_ZN11SystemClass5resetEv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d472a:	f005 f83f 	bl	d97ac <spark_cloud_flag_connected>
  if (!partconnected)
   d472e:	4604      	mov	r4, r0
   d4730:	bba8      	cbnz	r0, d479e <_Z7connectv+0xfa>
    DEBUG_PRINTLN("Attempting to connect to Particle...");
   d4732:	f006 fc1d 	bl	daf70 <_Z16_fetch_usbserialv>
   d4736:	4922      	ldr	r1, [pc, #136]	; (d47c0 <_Z7connectv+0x11c>)
   d4738:	f005 fcd7 	bl	da0ea <_ZN5Print7printlnEPKc>
        spark_cloud_flag_connect();
   d473c:	f005 f82e 	bl	d979c <spark_cloud_flag_connect>
        return hal_timer_millis(nullptr);
   d4740:	4620      	mov	r0, r4
   d4742:	f004 fdc3 	bl	d92cc <hal_timer_millis>
        while (_while() && !_condition()) {
   d4746:	f64e 285f 	movw	r8, #59999	; 0xea5f
        return hal_timer_millis(nullptr);
   d474a:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d474c:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4750:	2000      	movs	r0, #0
   d4752:	f004 fdbb 	bl	d92cc <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4756:	1b46      	subs	r6, r0, r5
   d4758:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d475c:	45b9      	cmp	r9, r7
   d475e:	bf08      	it	eq
   d4760:	45b0      	cmpeq	r8, r6
   d4762:	d30b      	bcc.n	d477c <_Z7connectv+0xd8>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4764:	f005 f822 	bl	d97ac <spark_cloud_flag_connected>
   d4768:	b940      	cbnz	r0, d477c <_Z7connectv+0xd8>
            spark_process();
   d476a:	f005 f80f 	bl	d978c <spark_process>
        while (_while() && !_condition()) {
   d476e:	e7ef      	b.n	d4750 <_Z7connectv+0xac>
    DEBUG_PRINTLN("Cellular ready");
   d4770:	f006 fbfe 	bl	daf70 <_Z16_fetch_usbserialv>
   d4774:	4913      	ldr	r1, [pc, #76]	; (d47c4 <_Z7connectv+0x120>)
   d4776:	f005 fcb8 	bl	da0ea <_ZN5Print7printlnEPKc>
   d477a:	e7d6      	b.n	d472a <_Z7connectv+0x86>
   d477c:	f005 f816 	bl	d97ac <spark_cloud_flag_connected>
   d4780:	f005 f814 	bl	d97ac <spark_cloud_flag_connected>
    if (!Particle.connected())
   d4784:	b990      	cbnz	r0, d47ac <_Z7connectv+0x108>
      DEBUG_PRINTLN("Particle not connected - resetting");
   d4786:	f006 fbf3 	bl	daf70 <_Z16_fetch_usbserialv>
   d478a:	490f      	ldr	r1, [pc, #60]	; (d47c8 <_Z7connectv+0x124>)
   d478c:	f005 fcad 	bl	da0ea <_ZN5Print7printlnEPKc>
      delay(200);
   d4790:	20c8      	movs	r0, #200	; 0xc8
   d4792:	f005 ffc7 	bl	da724 <delay>
}
   d4796:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      System.reset();
   d479a:	f005 b9c5 	b.w	d9b28 <_ZN11SystemClass5resetEv>
    DEBUG_PRINTLN("Particle connected");
   d479e:	f006 fbe7 	bl	daf70 <_Z16_fetch_usbserialv>
}
   d47a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    DEBUG_PRINTLN("Particle connected");
   d47a6:	4909      	ldr	r1, [pc, #36]	; (d47cc <_Z7connectv+0x128>)
   d47a8:	f005 bc9f 	b.w	da0ea <_ZN5Print7printlnEPKc>
}
   d47ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d47b0:	2003e648 	.word	0x2003e648
   d47b4:	000df526 	.word	0x000df526
   d47b8:	0002bf1f 	.word	0x0002bf1f
   d47bc:	000df548 	.word	0x000df548
   d47c0:	000df576 	.word	0x000df576
   d47c4:	000df567 	.word	0x000df567
   d47c8:	000df59b 	.word	0x000df59b
   d47cc:	000df5be 	.word	0x000df5be

000d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47d0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d47d2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d47d4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d47d6:	b17c      	cbz	r4, d47f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d47d8:	6863      	ldr	r3, [r4, #4]
   d47da:	3b01      	subs	r3, #1
   d47dc:	6063      	str	r3, [r4, #4]
   d47de:	b95b      	cbnz	r3, d47f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d47e0:	6823      	ldr	r3, [r4, #0]
   d47e2:	4620      	mov	r0, r4
   d47e4:	689b      	ldr	r3, [r3, #8]
   d47e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d47e8:	68a3      	ldr	r3, [r4, #8]
   d47ea:	3b01      	subs	r3, #1
   d47ec:	60a3      	str	r3, [r4, #8]
   d47ee:	b91b      	cbnz	r3, d47f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d47f0:	6823      	ldr	r3, [r4, #0]
   d47f2:	4620      	mov	r0, r4
   d47f4:	68db      	ldr	r3, [r3, #12]
   d47f6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d47f8:	4628      	mov	r0, r5
   d47fa:	bd38      	pop	{r3, r4, r5, pc}

000d47fc <loop>:
void loop() {
   d47fc:	b570      	push	{r4, r5, r6, lr}
  if (readyToGetResetAndSendSensors)
   d47fe:	4c5d      	ldr	r4, [pc, #372]	; (d4974 <loop+0x178>)
   d4800:	7823      	ldrb	r3, [r4, #0]
void loop() {
   d4802:	b0a2      	sub	sp, #136	; 0x88
  if (readyToGetResetAndSendSensors)
   d4804:	2b00      	cmp	r3, #0
   d4806:	f000 808f 	beq.w	d4928 <loop+0x12c>
    sensors.getAndResetAllSensors();
   d480a:	485b      	ldr	r0, [pc, #364]	; (d4978 <loop+0x17c>)
    if (tickleWD)
   d480c:	4d5b      	ldr	r5, [pc, #364]	; (d497c <loop+0x180>)
    sensors.getAndResetAllSensors();
   d480e:	f004 f883 	bl	d8918 <_ZN14WeatherSensors21getAndResetAllSensorsEv>
    String currentCsvData = sensors.sensorReadingsToCsvUS();
   d4812:	4959      	ldr	r1, [pc, #356]	; (d4978 <loop+0x17c>)
   d4814:	a802      	add	r0, sp, #8
   d4816:	f003 ff27 	bl	d8668 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv>
    printToSd.println(currentCsvData);
   d481a:	9902      	ldr	r1, [sp, #8]
   d481c:	4858      	ldr	r0, [pc, #352]	; (d4980 <loop+0x184>)
   d481e:	f005 fc64 	bl	da0ea <_ZN5Print7printlnEPKc>
    DEBUG_PRINTLN(currentCsvData);
   d4822:	f006 fba5 	bl	daf70 <_Z16_fetch_usbserialv>
   d4826:	9902      	ldr	r1, [sp, #8]
   d4828:	f005 fc5f 	bl	da0ea <_ZN5Print7printlnEPKc>
    if (tickleWD)
   d482c:	782b      	ldrb	r3, [r5, #0]
    readyToGetResetAndSendSensors = false;
   d482e:	2600      	movs	r6, #0
   d4830:	7026      	strb	r6, [r4, #0]
    if (tickleWD)
   d4832:	b11b      	cbz	r3, d483c <loop+0x40>
      node.tickleWatchdog();
   d4834:	4853      	ldr	r0, [pc, #332]	; (d4984 <loop+0x188>)
   d4836:	f000 fce7 	bl	d5208 <_ZN7IoTNode14tickleWatchdogEv>
      tickleWD = false;
   d483a:	702e      	strb	r6, [r5, #0]
    readyToGetResetAndSendSensors = false;
   d483c:	2300      	movs	r3, #0
   d483e:	7023      	strb	r3, [r4, #0]
    String(config.testCheck)+"|"+
   d4840:	4c51      	ldr	r4, [pc, #324]	; (d4988 <loop+0x18c>)
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
   d4842:	f006 fb95 	bl	daf70 <_Z16_fetch_usbserialv>
   d4846:	4951      	ldr	r1, [pc, #324]	; (d498c <loop+0x190>)
   d4848:	f005 fc4f 	bl	da0ea <_ZN5Print7printlnEPKc>
    String(config.testCheck)+"|"+
   d484c:	220a      	movs	r2, #10
   d484e:	6821      	ldr	r1, [r4, #0]
   d4850:	a806      	add	r0, sp, #24
   d4852:	f005 fb14 	bl	d9e7e <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   d4856:	a906      	add	r1, sp, #24
   d4858:	a80a      	add	r0, sp, #40	; 0x28
   d485a:	f005 fac8 	bl	d9dee <_ZN6StringC1ERKS_>
   d485e:	494c      	ldr	r1, [pc, #304]	; (d4990 <loop+0x194>)
   d4860:	a80a      	add	r0, sp, #40	; 0x28
   d4862:	f005 fb70 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
    String(config.unitType)+"|"+
   d4866:	7921      	ldrb	r1, [r4, #4]
    String(config.testCheck)+"|"+
   d4868:	4605      	mov	r5, r0
    String(config.unitType)+"|"+
   d486a:	a80e      	add	r0, sp, #56	; 0x38
   d486c:	f005 fae4 	bl	d9e38 <_ZN6StringC1Ec>
   d4870:	a90e      	add	r1, sp, #56	; 0x38
   d4872:	4628      	mov	r0, r5
   d4874:	f005 fb5b 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d4878:	4945      	ldr	r1, [pc, #276]	; (d4990 <loop+0x194>)
   d487a:	f005 fb64 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
    String(config.firmwareVersion)+"|"+
   d487e:	220a      	movs	r2, #10
    String(config.unitType)+"|"+
   d4880:	4605      	mov	r5, r0
    String(config.firmwareVersion)+"|"+
   d4882:	68a1      	ldr	r1, [r4, #8]
   d4884:	a812      	add	r0, sp, #72	; 0x48
   d4886:	f005 fafa 	bl	d9e7e <_ZN6StringC1Eih>
   d488a:	a912      	add	r1, sp, #72	; 0x48
   d488c:	4628      	mov	r0, r5
   d488e:	f005 fb4e 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d4892:	493f      	ldr	r1, [pc, #252]	; (d4990 <loop+0x194>)
   d4894:	f005 fb57 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
    String(config.particleTimeout)+"|"+
   d4898:	220a      	movs	r2, #10
    String(config.firmwareVersion)+"|"+
   d489a:	4605      	mov	r5, r0
    String(config.particleTimeout)+"|"+
   d489c:	68e1      	ldr	r1, [r4, #12]
   d489e:	a816      	add	r0, sp, #88	; 0x58
   d48a0:	f005 faed 	bl	d9e7e <_ZN6StringC1Eih>
   d48a4:	a916      	add	r1, sp, #88	; 0x58
   d48a6:	4628      	mov	r0, r5
   d48a8:	f005 fb41 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d48ac:	4938      	ldr	r1, [pc, #224]	; (d4990 <loop+0x194>)
   d48ae:	f005 fb4a 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
    String(config.latitude)+"|"+
   d48b2:	ed94 0a04 	vldr	s0, [r4, #16]
    String(config.particleTimeout)+"|"+
   d48b6:	4605      	mov	r5, r0
    String(config.latitude)+"|"+
   d48b8:	2106      	movs	r1, #6
   d48ba:	a81a      	add	r0, sp, #104	; 0x68
   d48bc:	f005 fb06 	bl	d9ecc <_ZN6StringC1Efi>
   d48c0:	a91a      	add	r1, sp, #104	; 0x68
   d48c2:	4628      	mov	r0, r5
   d48c4:	f005 fb33 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d48c8:	4931      	ldr	r1, [pc, #196]	; (d4990 <loop+0x194>)
   d48ca:	f005 fb3c 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
    String(config.longitude)+"|"+
   d48ce:	ed94 0a05 	vldr	s0, [r4, #20]
    String(config.latitude)+"|"+
   d48d2:	4605      	mov	r5, r0
    String(config.longitude)+"|"+
   d48d4:	2106      	movs	r1, #6
   d48d6:	a81e      	add	r0, sp, #120	; 0x78
   d48d8:	f005 faf8 	bl	d9ecc <_ZN6StringC1Efi>
   d48dc:	a91e      	add	r1, sp, #120	; 0x78
   d48de:	4628      	mov	r0, r5
   d48e0:	f005 fb25 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d48e4:	492a      	ldr	r1, [pc, #168]	; (d4990 <loop+0x194>)
   d48e6:	f005 fb2e 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
    i2cDevices;
   d48ea:	492a      	ldr	r1, [pc, #168]	; (d4994 <loop+0x198>)
   d48ec:	f005 fb1f 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d48f0:	4601      	mov	r1, r0
   d48f2:	4829      	ldr	r0, [pc, #164]	; (d4998 <loop+0x19c>)
   d48f4:	f005 fa6c 	bl	d9dd0 <_ZN6StringaSERKS_>
    String(config.longitude)+"|"+
   d48f8:	a81e      	add	r0, sp, #120	; 0x78
   d48fa:	f005 f9ed 	bl	d9cd8 <_ZN6StringD1Ev>
    String(config.latitude)+"|"+
   d48fe:	a81a      	add	r0, sp, #104	; 0x68
   d4900:	f005 f9ea 	bl	d9cd8 <_ZN6StringD1Ev>
    String(config.particleTimeout)+"|"+
   d4904:	a816      	add	r0, sp, #88	; 0x58
   d4906:	f005 f9e7 	bl	d9cd8 <_ZN6StringD1Ev>
    String(config.firmwareVersion)+"|"+
   d490a:	a812      	add	r0, sp, #72	; 0x48
   d490c:	f005 f9e4 	bl	d9cd8 <_ZN6StringD1Ev>
    String(config.unitType)+"|"+
   d4910:	a80e      	add	r0, sp, #56	; 0x38
   d4912:	f005 f9e1 	bl	d9cd8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4916:	a80a      	add	r0, sp, #40	; 0x28
   d4918:	f005 f9de 	bl	d9cd8 <_ZN6StringD1Ev>
    String(config.testCheck)+"|"+
   d491c:	a806      	add	r0, sp, #24
   d491e:	f005 f9db 	bl	d9cd8 <_ZN6StringD1Ev>
    String currentCsvData = sensors.sensorReadingsToCsvUS();
   d4922:	a802      	add	r0, sp, #8
   d4924:	f005 f9d8 	bl	d9cd8 <_ZN6StringD1Ev>
  if (readyToCapturePollSensors)
   d4928:	4c1c      	ldr	r4, [pc, #112]	; (d499c <loop+0x1a0>)
   d492a:	7823      	ldrb	r3, [r4, #0]
   d492c:	b1db      	cbz	r3, d4966 <loop+0x16a>
    sensors.captureTempHumidityPressure();
   d492e:	4812      	ldr	r0, [pc, #72]	; (d4978 <loop+0x17c>)
   d4930:	f003 fd8e 	bl	d8450 <_ZN14WeatherSensors27captureTempHumidityPressureEv>
    sensors.captureWindVane();
   d4934:	4810      	ldr	r0, [pc, #64]	; (d4978 <loop+0x17c>)
   d4936:	f003 fd47 	bl	d83c8 <_ZN14WeatherSensors15captureWindVaneEv>
    sensors.captureBatteryVoltage();
   d493a:	480f      	ldr	r0, [pc, #60]	; (d4978 <loop+0x17c>)
   d493c:	f003 fbdc 	bl	d80f8 <_ZN14WeatherSensors21captureBatteryVoltageEv>
    readyToCapturePollSensors = false;
   d4940:	4b17      	ldr	r3, [pc, #92]	; (d49a0 <loop+0x1a4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4942:	4918      	ldr	r1, [pc, #96]	; (d49a4 <loop+0x1a8>)
   d4944:	781b      	ldrb	r3, [r3, #0]
   d4946:	2200      	movs	r2, #0
   d4948:	7022      	strb	r2, [r4, #0]
   d494a:	a81e      	add	r0, sp, #120	; 0x78
   d494c:	f88d 3000 	strb.w	r3, [sp]
   d4950:	233c      	movs	r3, #60	; 0x3c
   d4952:	f006 f8c9 	bl	daae8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4956:	a81f      	add	r0, sp, #124	; 0x7c
   d4958:	f7ff ff3a 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG_PRINTLN("capture");
   d495c:	f006 fb08 	bl	daf70 <_Z16_fetch_usbserialv>
   d4960:	4911      	ldr	r1, [pc, #68]	; (d49a8 <loop+0x1ac>)
   d4962:	f005 fbc2 	bl	da0ea <_ZN5Print7printlnEPKc>
  if (resetDevice)
   d4966:	4b11      	ldr	r3, [pc, #68]	; (d49ac <loop+0x1b0>)
   d4968:	781b      	ldrb	r3, [r3, #0]
   d496a:	b10b      	cbz	r3, d4970 <loop+0x174>
    System.reset();
   d496c:	f005 f8dc 	bl	d9b28 <_ZN11SystemClass5resetEv>
}
   d4970:	b022      	add	sp, #136	; 0x88
   d4972:	bd70      	pop	{r4, r5, r6, pc}
   d4974:	2003c4b9 	.word	0x2003c4b9
   d4978:	2003c974 	.word	0x2003c974
   d497c:	2003e02c 	.word	0x2003e02c
   d4980:	2003c384 	.word	0x2003c384
   d4984:	2003c320 	.word	0x2003c320
   d4988:	2003c1e4 	.word	0x2003c1e4
   d498c:	000df5d1 	.word	0x000df5d1
   d4990:	000df5ef 	.word	0x000df5ef
   d4994:	2003c288 	.word	0x2003c288
   d4998:	2003c238 	.word	0x2003c238
   d499c:	2003c4b8 	.word	0x2003c4b8
   d49a0:	2003c1e0 	.word	0x2003c1e0
   d49a4:	000df5f1 	.word	0x000df5f1
   d49a8:	000df603 	.word	0x000df603
   d49ac:	2003c4ba 	.word	0x2003c4ba

000d49b0 <_Z7syncRTCv>:

bool syncRTC()
{
   d49b0:	b570      	push	{r4, r5, r6, lr}
   d49b2:	b094      	sub	sp, #80	; 0x50
   d49b4:	f004 fc7a 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d49b8:	4d31      	ldr	r5, [pc, #196]	; (d4a80 <_Z7syncRTCv+0xd0>)

    do
    {
      Particle.process();
      delay(100);
    } while (Time.now() < 1465823822 && millis()-syncTimer<500);
   d49ba:	4e32      	ldr	r6, [pc, #200]	; (d4a84 <_Z7syncRTCv+0xd4>)
   d49bc:	4604      	mov	r4, r0
		return HAL_Timer_Get_Milli_Seconds();
   d49be:	f004 fc75 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d49c2:	6028      	str	r0, [r5, #0]
    		spark_process();
   d49c4:	f004 fee2 	bl	d978c <spark_process>
      delay(100);
   d49c8:	2064      	movs	r0, #100	; 0x64
   d49ca:	f005 feab 	bl	da724 <delay>
    } while (Time.now() < 1465823822 && millis()-syncTimer<500);
   d49ce:	f005 fe4a 	bl	da666 <_ZN9TimeClass3nowEv>
   d49d2:	42b0      	cmp	r0, r6
   d49d4:	dc05      	bgt.n	d49e2 <_Z7syncRTCv+0x32>
   d49d6:	f004 fc69 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
   d49da:	1b03      	subs	r3, r0, r4
   d49dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   d49e0:	d3ed      	bcc.n	d49be <_Z7syncRTCv+0xe>

    if (Time.now() > 1465823822)
   d49e2:	f005 fe40 	bl	da666 <_ZN9TimeClass3nowEv>
   d49e6:	4b28      	ldr	r3, [pc, #160]	; (d4a88 <_Z7syncRTCv+0xd8>)
   d49e8:	4298      	cmp	r0, r3
   d49ea:	dc40      	bgt.n	d4a6e <_Z7syncRTCv+0xbe>
    }

    if (!sync)
    {
        #ifdef DEBUG
        Particle.publish("Time NOT synced",String(Time.format(syncNow, TIME_FORMAT_ISO8601_FULL)+"  "+Time.format(node.unixTime(), TIME_FORMAT_ISO8601_FULL)),PRIVATE);
   d49ec:	4d27      	ldr	r5, [pc, #156]	; (d4a8c <_Z7syncRTCv+0xdc>)
   d49ee:	4928      	ldr	r1, [pc, #160]	; (d4a90 <_Z7syncRTCv+0xe0>)
   d49f0:	682b      	ldr	r3, [r5, #0]
   d49f2:	9300      	str	r3, [sp, #0]
   d49f4:	2200      	movs	r2, #0
   d49f6:	4613      	mov	r3, r2
   d49f8:	a804      	add	r0, sp, #16
   d49fa:	f005 fdd5 	bl	da5a8 <_ZN9TimeClass6formatExPKc>
	StringSumHelper(const String &s) : String(s) {}
   d49fe:	a904      	add	r1, sp, #16
   d4a00:	a808      	add	r0, sp, #32
   d4a02:	f005 f9f4 	bl	d9dee <_ZN6StringC1ERKS_>
   d4a06:	4923      	ldr	r1, [pc, #140]	; (d4a94 <_Z7syncRTCv+0xe4>)
   d4a08:	a808      	add	r0, sp, #32
   d4a0a:	f005 fa9c 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d4a0e:	4604      	mov	r4, r0
   d4a10:	4821      	ldr	r0, [pc, #132]	; (d4a98 <_Z7syncRTCv+0xe8>)
   d4a12:	f000 fc0d 	bl	d5230 <_ZN7IoTNode8unixTimeEv>
   d4a16:	682b      	ldr	r3, [r5, #0]
   d4a18:	491d      	ldr	r1, [pc, #116]	; (d4a90 <_Z7syncRTCv+0xe0>)
   d4a1a:	9300      	str	r3, [sp, #0]
   d4a1c:	4602      	mov	r2, r0
   d4a1e:	2300      	movs	r3, #0
   d4a20:	a80c      	add	r0, sp, #48	; 0x30
   d4a22:	f005 fdc1 	bl	da5a8 <_ZN9TimeClass6formatExPKc>
   d4a26:	a90c      	add	r1, sp, #48	; 0x30
   d4a28:	4620      	mov	r0, r4
   d4a2a:	f005 fa80 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d4a2e:	4601      	mov	r1, r0
   d4a30:	a810      	add	r0, sp, #64	; 0x40
   d4a32:	f005 f9dc 	bl	d9dee <_ZN6StringC1ERKS_>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4a36:	4b19      	ldr	r3, [pc, #100]	; (d4a9c <_Z7syncRTCv+0xec>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4a38:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4a3a:	781b      	ldrb	r3, [r3, #0]
   d4a3c:	4918      	ldr	r1, [pc, #96]	; (d4aa0 <_Z7syncRTCv+0xf0>)
   d4a3e:	f88d 3000 	strb.w	r3, [sp]
   d4a42:	a802      	add	r0, sp, #8
   d4a44:	233c      	movs	r3, #60	; 0x3c
   d4a46:	f006 f84f 	bl	daae8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4a4a:	a803      	add	r0, sp, #12
   d4a4c:	f7ff fec0 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a50:	a810      	add	r0, sp, #64	; 0x40
   d4a52:	f005 f941 	bl	d9cd8 <_ZN6StringD1Ev>
   d4a56:	a80c      	add	r0, sp, #48	; 0x30
   d4a58:	f005 f93e 	bl	d9cd8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4a5c:	a808      	add	r0, sp, #32
   d4a5e:	f005 f93b 	bl	d9cd8 <_ZN6StringD1Ev>
   d4a62:	a804      	add	r0, sp, #16
   d4a64:	f005 f938 	bl	d9cd8 <_ZN6StringD1Ev>
    bool sync = false;
   d4a68:	2000      	movs	r0, #0
        #endif
    }
    return sync;
}
   d4a6a:	b014      	add	sp, #80	; 0x50
   d4a6c:	bd70      	pop	{r4, r5, r6, pc}
        syncNow = Time.now();//put time into memory
   d4a6e:	f005 fdfa 	bl	da666 <_ZN9TimeClass3nowEv>
   d4a72:	4601      	mov	r1, r0
        node.setUnixTime(syncNow);
   d4a74:	4808      	ldr	r0, [pc, #32]	; (d4a98 <_Z7syncRTCv+0xe8>)
   d4a76:	f000 fbe1 	bl	d523c <_ZN7IoTNode11setUnixTimeEm>
        sync = true;
   d4a7a:	2001      	movs	r0, #1
   d4a7c:	e7f5      	b.n	d4a6a <_Z7syncRTCv+0xba>
   d4a7e:	bf00      	nop
   d4a80:	2003e7a0 	.word	0x2003e7a0
   d4a84:	575eb24d 	.word	0x575eb24d
   d4a88:	575eb24e 	.word	0x575eb24e
   d4a8c:	2003bf94 	.word	0x2003bf94
   d4a90:	2003e540 	.word	0x2003e540
   d4a94:	000df9ad 	.word	0x000df9ad
   d4a98:	2003c320 	.word	0x2003c320
   d4a9c:	2003c1e0 	.word	0x2003c1e0
   d4aa0:	000df60b 	.word	0x000df60b

000d4aa4 <setup>:
void setup() {
   d4aa4:	b530      	push	{r4, r5, lr}
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4aa6:	4944      	ldr	r1, [pc, #272]	; (d4bb8 <setup+0x114>)
   d4aa8:	4844      	ldr	r0, [pc, #272]	; (d4bbc <setup+0x118>)
   d4aaa:	b085      	sub	sp, #20
   d4aac:	2300      	movs	r3, #0
   d4aae:	2202      	movs	r2, #2
   d4ab0:	f004 fe64 	bl	d977c <spark_variable>
        spark_variable_t extra = {};
   d4ab4:	2500      	movs	r5, #0
        extra.size = sizeof(extra);
   d4ab6:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d4ab8:	9501      	str	r5, [sp, #4]
        extra.size = sizeof(extra);
   d4aba:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
   d4abe:	4b40      	ldr	r3, [pc, #256]	; (d4bc0 <setup+0x11c>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4ac0:	4940      	ldr	r1, [pc, #256]	; (d4bc4 <setup+0x120>)
        extra.update = update_string_variable;
   d4ac2:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4ac4:	2204      	movs	r2, #4
   d4ac6:	ab01      	add	r3, sp, #4
   d4ac8:	483f      	ldr	r0, [pc, #252]	; (d4bc8 <setup+0x124>)
        spark_variable_t extra = {};
   d4aca:	9503      	str	r5, [sp, #12]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4acc:	f004 fe56 	bl	d977c <spark_variable>
  Serial.begin(115200);
   d4ad0:	f006 fa4e 	bl	daf70 <_Z16_fetch_usbserialv>
   d4ad4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4ad8:	f006 fa3e 	bl	daf58 <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   d4adc:	f006 fb7c 	bl	db1d8 <_Z22__fetch_global_Serial1v>
   d4ae0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4ae4:	f006 fb74 	bl	db1d0 <_ZN11USARTSerial5beginEm>
  node.begin();
   d4ae8:	4838      	ldr	r0, [pc, #224]	; (d4bcc <setup+0x128>)
   d4aea:	f000 fbc9 	bl	d5280 <_ZN7IoTNode5beginEv>
  node.setPowerON(EXT3V3,true);
   d4aee:	4837      	ldr	r0, [pc, #220]	; (d4bcc <setup+0x128>)
   d4af0:	2201      	movs	r2, #1
   d4af2:	2102      	movs	r1, #2
   d4af4:	f000 fb82 	bl	d51fc <_ZN7IoTNode10setPowerONE9powerNameb>
  node.setPowerON(EXT5V,true);
   d4af8:	2201      	movs	r2, #1
   d4afa:	2103      	movs	r1, #3
   d4afc:	4833      	ldr	r0, [pc, #204]	; (d4bcc <setup+0x128>)
   d4afe:	f000 fb7d 	bl	d51fc <_ZN7IoTNode10setPowerONE9powerNameb>
  delay(5000);
   d4b02:	f241 3088 	movw	r0, #5000	; 0x1388
   d4b06:	f005 fe0d 	bl	da724 <delay>
  checkI2CDevices();
   d4b0a:	f7ff fc83 	bl	d4414 <_Z15checkI2CDevicesv>
  scanI2C();
   d4b0e:	f7ff fd7d 	bl	d460c <_Z7scanI2Cv>
  if (!node.ok())
   d4b12:	482e      	ldr	r0, [pc, #184]	; (d4bcc <setup+0x128>)
   d4b14:	f000 fb3a 	bl	d518c <_ZN7IoTNode2okEv>
   d4b18:	4604      	mov	r4, r0
   d4b1a:	b9d0      	cbnz	r0, d4b52 <setup+0xae>
    DEBUG_PRINTLN("Plug the device into the IoT Node");
   d4b1c:	f006 fa28 	bl	daf70 <_Z16_fetch_usbserialv>
   d4b20:	492b      	ldr	r1, [pc, #172]	; (d4bd0 <setup+0x12c>)
   d4b22:	f005 fae2 	bl	da0ea <_ZN5Print7printlnEPKc>
    deviceStatus="Device is not plugged into the IoTNode";
   d4b26:	492b      	ldr	r1, [pc, #172]	; (d4bd4 <setup+0x130>)
   d4b28:	4826      	ldr	r0, [pc, #152]	; (d4bc4 <setup+0x120>)
   d4b2a:	f005 f973 	bl	d9e14 <_ZN6StringaSEPKc>
    led_set_status_active(&d_, active, nullptr);
   d4b2e:	4622      	mov	r2, r4
   d4b30:	2101      	movs	r1, #1
   d4b32:	4829      	ldr	r0, [pc, #164]	; (d4bd8 <setup+0x134>)
   d4b34:	f004 fd6a 	bl	d960c <led_set_status_active>
    DEBUG_PRINTLN("Resetting in 10 seconds");
   d4b38:	f006 fa1a 	bl	daf70 <_Z16_fetch_usbserialv>
   d4b3c:	4927      	ldr	r1, [pc, #156]	; (d4bdc <setup+0x138>)
   d4b3e:	f005 fad4 	bl	da0ea <_ZN5Print7printlnEPKc>
    delay(10000);
   d4b42:	f242 7010 	movw	r0, #10000	; 0x2710
   d4b46:	f005 fded 	bl	da724 <delay>
    System.reset();
   d4b4a:	f004 ffed 	bl	d9b28 <_ZN11SystemClass5resetEv>
}
   d4b4e:	b005      	add	sp, #20
   d4b50:	bd30      	pop	{r4, r5, pc}
    framConfig.read(0, (uint8_t*)&config);
   d4b52:	4c23      	ldr	r4, [pc, #140]	; (d4be0 <setup+0x13c>)
    connect();
   d4b54:	f7ff fda6 	bl	d46a4 <_Z7connectv>
    framConfig.read(0, (uint8_t*)&config);
   d4b58:	4622      	mov	r2, r4
   d4b5a:	4822      	ldr	r0, [pc, #136]	; (d4be4 <setup+0x140>)
   d4b5c:	4629      	mov	r1, r5
   d4b5e:	f000 fcae 	bl	d54be <_ZN9framArray4readEmPh>
    if (config.testCheck != firstRunTest)
   d4b62:	4b21      	ldr	r3, [pc, #132]	; (d4be8 <setup+0x144>)
   d4b64:	6822      	ldr	r2, [r4, #0]
   d4b66:	429a      	cmp	r2, r3
   d4b68:	d008      	beq.n	d4b7c <setup+0xd8>
        config.testCheck = firstRunTest;
   d4b6a:	6023      	str	r3, [r4, #0]
        framConfig.write(0, (uint8_t*)&config);     
   d4b6c:	481d      	ldr	r0, [pc, #116]	; (d4be4 <setup+0x140>)
        config.particleTimeout = 20000;
   d4b6e:	f644 6320 	movw	r3, #20000	; 0x4e20
        framConfig.write(0, (uint8_t*)&config);     
   d4b72:	4622      	mov	r2, r4
   d4b74:	4629      	mov	r1, r5
        config.particleTimeout = 20000;
   d4b76:	60e3      	str	r3, [r4, #12]
        framConfig.write(0, (uint8_t*)&config);     
   d4b78:	f000 fc90 	bl	d549c <_ZN9framArray5writeEmPh>
      if (syncRTC())
   d4b7c:	f7ff ff18 	bl	d49b0 <_Z7syncRTCv>
   d4b80:	b1a8      	cbz	r0, d4bae <setup+0x10a>
        DEBUG_PRINTLN("RTC sync'ed with cloud");
   d4b82:	f006 f9f5 	bl	daf70 <_Z16_fetch_usbserialv>
   d4b86:	4919      	ldr	r1, [pc, #100]	; (d4bec <setup+0x148>)
        DEBUG_PRINTLN("RTC not sync'ed with cloud");
   d4b88:	f005 faaf 	bl	da0ea <_ZN5Print7printlnEPKc>
      dataRing.initialize();
   d4b8c:	4818      	ldr	r0, [pc, #96]	; (d4bf0 <setup+0x14c>)
   d4b8e:	f000 fcc1 	bl	d5514 <_ZN8framRing10initializeEv>
      sensors.begin();
   d4b92:	4818      	ldr	r0, [pc, #96]	; (d4bf4 <setup+0x150>)
   d4b94:	f003 ffe2 	bl	d8b5c <_ZN14WeatherSensors5beginEv>
      pollSensorTimer.start();
   d4b98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4b9c:	4816      	ldr	r0, [pc, #88]	; (d4bf8 <setup+0x154>)
   d4b9e:	f7ff fbf6 	bl	d438e <_ZN5Timer5startEj>
      sensorSendTimer.start();  
   d4ba2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4ba6:	4815      	ldr	r0, [pc, #84]	; (d4bfc <setup+0x158>)
   d4ba8:	f7ff fbf1 	bl	d438e <_ZN5Timer5startEj>
}
   d4bac:	e7cf      	b.n	d4b4e <setup+0xaa>
        DEBUG_PRINTLN("RTC not sync'ed with cloud");
   d4bae:	f006 f9df 	bl	daf70 <_Z16_fetch_usbserialv>
   d4bb2:	4913      	ldr	r1, [pc, #76]	; (d4c00 <setup+0x15c>)
   d4bb4:	e7e8      	b.n	d4b88 <setup+0xe4>
   d4bb6:	bf00      	nop
   d4bb8:	000df73c 	.word	0x000df73c
   d4bbc:	000df61b 	.word	0x000df61b
   d4bc0:	000d40b3 	.word	0x000d40b3
   d4bc4:	2003c238 	.word	0x2003c238
   d4bc8:	000df623 	.word	0x000df623
   d4bcc:	2003c320 	.word	0x2003c320
   d4bd0:	000df630 	.word	0x000df630
   d4bd4:	000df652 	.word	0x000df652
   d4bd8:	2003c24c 	.word	0x2003c24c
   d4bdc:	000df679 	.word	0x000df679
   d4be0:	2003c1e4 	.word	0x2003c1e4
   d4be4:	2003c268 	.word	0x2003c268
   d4be8:	00111f4c 	.word	0x00111f4c
   d4bec:	000df691 	.word	0x000df691
   d4bf0:	2003c1fc 	.word	0x2003c1fc
   d4bf4:	2003c974 	.word	0x2003c974
   d4bf8:	2003c368 	.word	0x2003c368
   d4bfc:	2003c958 	.word	0x2003c958
   d4c00:	000df6a8 	.word	0x000df6a8

000d4c04 <_Z9unpluggedv>:

void unplugged()
{
   d4c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4c06:	4b0a      	ldr	r3, [pc, #40]	; (d4c30 <_Z9unpluggedv+0x2c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4c08:	4c0a      	ldr	r4, [pc, #40]	; (d4c34 <_Z9unpluggedv+0x30>)
   d4c0a:	781b      	ldrb	r3, [r3, #0]
   d4c0c:	490a      	ldr	r1, [pc, #40]	; (d4c38 <_Z9unpluggedv+0x34>)
   d4c0e:	f88d 3000 	strb.w	r3, [sp]
   d4c12:	4622      	mov	r2, r4
   d4c14:	233c      	movs	r3, #60	; 0x3c
   d4c16:	a802      	add	r0, sp, #8
   d4c18:	f005 ff66 	bl	daae8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4c1c:	a803      	add	r0, sp, #12
   d4c1e:	f7ff fdd7 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  #ifdef IOTDEBUG
  Particle.publish("Unplugged","Plug the device into the IoT Node",PRIVATE);
  DEBUG_PRINTLN("Plug the device into the IoT Node");
   d4c22:	f006 f9a5 	bl	daf70 <_Z16_fetch_usbserialv>
   d4c26:	4621      	mov	r1, r4
   d4c28:	f005 fa5f 	bl	da0ea <_ZN5Print7printlnEPKc>
  #endif

   d4c2c:	b004      	add	sp, #16
   d4c2e:	bd10      	pop	{r4, pc}
   d4c30:	2003c1e0 	.word	0x2003c1e0
   d4c34:	000df630 	.word	0x000df630
   d4c38:	000df6c3 	.word	0x000df6c3

000d4c3c <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   d4c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c3e:	b08d      	sub	sp, #52	; 0x34
   d4c40:	ad02      	add	r5, sp, #8
   d4c42:	e885 0006 	stmia.w	r5, {r1, r2}
   d4c46:	4606      	mov	r6, r0
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4c48:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4c4c:	ac05      	add	r4, sp, #20
   d4c4e:	e884 0005 	stmia.w	r4, {r0, r2}
   d4c52:	461f      	mov	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c54:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d4c56:	2300      	movs	r3, #0
   d4c58:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c5a:	f7ff fa1c 	bl	d4096 <_Znwj>
   d4c5e:	4602      	mov	r2, r0
   d4c60:	b120      	cbz	r0, d4c6c <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x30>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d4c62:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4c66:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c6a:	6097      	str	r7, [r2, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d4c6c:	4b0b      	ldr	r3, [pc, #44]	; (d4c9c <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x60>)
   d4c6e:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   d4c70:	4b0b      	ldr	r3, [pc, #44]	; (d4ca0 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x64>)
   d4c72:	930a      	str	r3, [sp, #40]	; 0x28
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d4c74:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c78:	9208      	str	r2, [sp, #32]
   d4c7a:	9300      	str	r3, [sp, #0]
   d4c7c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   d4c80:	f99d 304c 	ldrsb.w	r3, [sp, #76]	; 0x4c
   d4c84:	a908      	add	r1, sp, #32
   d4c86:	4630      	mov	r0, r6
   d4c88:	f006 f9d0 	bl	db02c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
   d4c8c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d4c8e:	a808      	add	r0, sp, #32
   d4c90:	f7ff fb35 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
}
   d4c94:	4620      	mov	r0, r4
   d4c96:	b00d      	add	sp, #52	; 0x34
   d4c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c9a:	bf00      	nop
   d4c9c:	000d4235 	.word	0x000d4235
   d4ca0:	000d41f7 	.word	0x000d41f7

000d4ca4 <_GLOBAL__sub_I_sd>:
   d4ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   d4ca8:	4bba      	ldr	r3, [pc, #744]	; (d4f94 <_GLOBAL__sub_I_sd+0x2f0>)
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4caa:	4cbb      	ldr	r4, [pc, #748]	; (d4f98 <_GLOBAL__sub_I_sd+0x2f4>)
  {
   d4cac:	4dbb      	ldr	r5, [pc, #748]	; (d4f9c <_GLOBAL__sub_I_sd+0x2f8>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4cae:	4ebc      	ldr	r6, [pc, #752]	; (d4fa0 <_GLOBAL__sub_I_sd+0x2fc>)
   d4cb0:	f8c4 5470 	str.w	r5, [r4, #1136]	; 0x470
   d4cb4:	2200      	movs	r2, #0
   d4cb6:	2101      	movs	r1, #1
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4cb8:	2064      	movs	r0, #100	; 0x64
   d4cba:	7019      	strb	r1, [r3, #0]
   d4cbc:	71e2      	strb	r2, [r4, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4cbe:	f8a4 243c 	strh.w	r2, [r4, #1084]	; 0x43c
   d4cc2:	f884 0460 	strb.w	r0, [r4, #1120]	; 0x460
   d4cc6:	f884 246a 	strb.w	r2, [r4, #1130]	; 0x46a
   d4cca:	f884 1474 	strb.w	r1, [r4, #1140]	; 0x474
   d4cce:	f8c4 2478 	str.w	r2, [r4, #1144]	; 0x478
   d4cd2:	f8a4 247c 	strh.w	r2, [r4, #1148]	; 0x47c
   d4cd6:	7831      	ldrb	r1, [r6, #0]
   d4cd8:	f3bf 8f5b 	dmb	ish
   d4cdc:	f011 0101 	ands.w	r1, r1, #1
   d4ce0:	b08d      	sub	sp, #52	; 0x34
   d4ce2:	d10b      	bne.n	d4cfc <_GLOBAL__sub_I_sd+0x58>
   d4ce4:	4630      	mov	r0, r6
   d4ce6:	9105      	str	r1, [sp, #20]
   d4ce8:	f7ff f9db 	bl	d40a2 <__cxa_guard_acquire>
   d4cec:	9905      	ldr	r1, [sp, #20]
   d4cee:	b128      	cbz	r0, d4cfc <_GLOBAL__sub_I_sd+0x58>
   d4cf0:	48ac      	ldr	r0, [pc, #688]	; (d4fa4 <_GLOBAL__sub_I_sd+0x300>)
   d4cf2:	f004 fe3f 	bl	d9974 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4cf6:	4630      	mov	r0, r6
   d4cf8:	f7ff f9d8 	bl	d40ac <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4cfc:	4ba9      	ldr	r3, [pc, #676]	; (d4fa4 <_GLOBAL__sub_I_sd+0x300>)
   d4cfe:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
SdFat sd;
   d4d02:	4aa9      	ldr	r2, [pc, #676]	; (d4fa8 <_GLOBAL__sub_I_sd+0x304>)
SdCardPrintHandler printToSd(sd, SD_CHIP_SELECT, SPI_FULL_SPEED);
   d4d04:	4ca9      	ldr	r4, [pc, #676]	; (d4fac <_GLOBAL__sub_I_sd+0x308>)
SdFat sd;
   d4d06:	49aa      	ldr	r1, [pc, #680]	; (d4fb0 <_GLOBAL__sub_I_sd+0x30c>)
   d4d08:	48a3      	ldr	r0, [pc, #652]	; (d4f98 <_GLOBAL__sub_I_sd+0x2f4>)
	    _M_invoker = &_My_handler::_M_invoke;
   d4d0a:	f8df 936c 	ldr.w	r9, [pc, #876]	; d5078 <_GLOBAL__sub_I_sd+0x3d4>
   d4d0e:	f006 fca1 	bl	db654 <__aeabi_atexit>
SdCardPrintHandler printToSd(sd, SD_CHIP_SELECT, SPI_FULL_SPEED);
   d4d12:	ae08      	add	r6, sp, #32
      dataMode_{dataMode}
   d4d14:	4ba7      	ldr	r3, [pc, #668]	; (d4fb4 <_GLOBAL__sub_I_sd+0x310>)
   d4d16:	9508      	str	r5, [sp, #32]
   d4d18:	2701      	movs	r7, #1
   d4d1a:	2500      	movs	r5, #0
   d4d1c:	930a      	str	r3, [sp, #40]	; 0x28
   d4d1e:	499e      	ldr	r1, [pc, #632]	; (d4f98 <_GLOBAL__sub_I_sd+0x2f4>)
   d4d20:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   d4d24:	4633      	mov	r3, r6
   d4d26:	2202      	movs	r2, #2
   d4d28:	4620      	mov	r0, r4
   d4d2a:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
   d4d2e:	f000 fc83 	bl	d5638 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE>
   d4d32:	4a9d      	ldr	r2, [pc, #628]	; (d4fa8 <_GLOBAL__sub_I_sd+0x304>)
   d4d34:	49a0      	ldr	r1, [pc, #640]	; (d4fb8 <_GLOBAL__sub_I_sd+0x314>)
   d4d36:	4620      	mov	r0, r4
   d4d38:	f006 fc8c 	bl	db654 <__aeabi_atexit>
	 * The maximum number of log files to keep is enforced at startup, when a SD card is inserted, and when
	 * the current log file is full.
	 *
	 * @param value Number of files to kee. Values are 1 <= num <= 999999 (size_t)
	 */
	inline SdCardPrintHandler &withMaxFilesToKeep(size_t value) { maxFilesToKeep = value; return *this; };
   d4d3c:	f640 33b8 	movw	r3, #3000	; 0xbb8
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d4d40:	462a      	mov	r2, r5
   d4d42:	2114      	movs	r1, #20
   d4d44:	2003      	movs	r0, #3
   d4d46:	62a3      	str	r3, [r4, #40]	; 0x28
   d4d48:	f004 fca2 	bl	d9690 <led_pattern_period>
   d4d4c:	f04f 081e 	mov.w	r8, #30
   d4d50:	4603      	mov	r3, r0
   d4d52:	f8cd 8000 	str.w	r8, [sp]
   d4d56:	9701      	str	r7, [sp, #4]
   d4d58:	2203      	movs	r2, #3
   d4d5a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   d4d5e:	4897      	ldr	r0, [pc, #604]	; (d4fbc <_GLOBAL__sub_I_sd+0x318>)
	    _M_manager = &_My_handler::_M_manager;
   d4d60:	4c97      	ldr	r4, [pc, #604]	; (d4fc0 <_GLOBAL__sub_I_sd+0x31c>)
   d4d62:	f004 fddf 	bl	d9924 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
LEDStatus fadeRed(RGB_COLOR_RED, LED_PATTERN_FADE, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d4d66:	4a90      	ldr	r2, [pc, #576]	; (d4fa8 <_GLOBAL__sub_I_sd+0x304>)
   d4d68:	4996      	ldr	r1, [pc, #600]	; (d4fc4 <_GLOBAL__sub_I_sd+0x320>)
   d4d6a:	4894      	ldr	r0, [pc, #592]	; (d4fbc <_GLOBAL__sub_I_sd+0x318>)
   d4d6c:	f006 fc72 	bl	db654 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4d70:	4629      	mov	r1, r5
   d4d72:	4638      	mov	r0, r7
   d4d74:	f004 fc6c 	bl	d9650 <system_thread_set_state>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4d78:	4b93      	ldr	r3, [pc, #588]	; (d4fc8 <_GLOBAL__sub_I_sd+0x324>)
   d4d7a:	9308      	str	r3, [sp, #32]
Timer pollSensorTimer(SENSOR_POLL_TIME_MS, capturePollSensors);
   d4d7c:	4632      	mov	r2, r6
   d4d7e:	462b      	mov	r3, r5
   d4d80:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d4d84:	4891      	ldr	r0, [pc, #580]	; (d4fcc <_GLOBAL__sub_I_sd+0x328>)
	    _M_invoker = &_My_handler::_M_invoke;
   d4d86:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
   d4d8a:	940a      	str	r4, [sp, #40]	; 0x28
   d4d8c:	f7ff fac0 	bl	d4310 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d4d90:	4630      	mov	r0, r6
   d4d92:	f7ff fab4 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
   d4d96:	4a84      	ldr	r2, [pc, #528]	; (d4fa8 <_GLOBAL__sub_I_sd+0x304>)
   d4d98:	498d      	ldr	r1, [pc, #564]	; (d4fd0 <_GLOBAL__sub_I_sd+0x32c>)
   d4d9a:	488c      	ldr	r0, [pc, #560]	; (d4fcc <_GLOBAL__sub_I_sd+0x328>)
   d4d9c:	f006 fc5a 	bl	db654 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4da0:	4b8c      	ldr	r3, [pc, #560]	; (d4fd4 <_GLOBAL__sub_I_sd+0x330>)
   d4da2:	9308      	str	r3, [sp, #32]
Timer sensorSendTimer(SENSOR_SEND_TIME_MS, getResetAndSendSensors);
   d4da4:	4632      	mov	r2, r6
   d4da6:	462b      	mov	r3, r5
   d4da8:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4dac:	488a      	ldr	r0, [pc, #552]	; (d4fd8 <_GLOBAL__sub_I_sd+0x334>)
	    _M_manager = &_My_handler::_M_manager;
   d4dae:	e9cd 490a 	strd	r4, r9, [sp, #40]	; 0x28
   d4db2:	f7ff faad 	bl	d4310 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d4db6:	4630      	mov	r0, r6
   d4db8:	f7ff faa1 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
   d4dbc:	4a7a      	ldr	r2, [pc, #488]	; (d4fa8 <_GLOBAL__sub_I_sd+0x304>)
   d4dbe:	4984      	ldr	r1, [pc, #528]	; (d4fd0 <_GLOBAL__sub_I_sd+0x32c>)
   d4dc0:	4885      	ldr	r0, [pc, #532]	; (d4fd8 <_GLOBAL__sub_I_sd+0x334>)
   d4dc2:	f006 fc47 	bl	db654 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4dc6:	4b85      	ldr	r3, [pc, #532]	; (d4fdc <_GLOBAL__sub_I_sd+0x338>)
   d4dc8:	9308      	str	r3, [sp, #32]
Timer unpluggedTimer(5000,unplugged);
   d4dca:	4632      	mov	r2, r6
   d4dcc:	462b      	mov	r3, r5
   d4dce:	f241 3188 	movw	r1, #5000	; 0x1388
   d4dd2:	4883      	ldr	r0, [pc, #524]	; (d4fe0 <_GLOBAL__sub_I_sd+0x33c>)
	    _M_manager = &_My_handler::_M_manager;
   d4dd4:	e9cd 490a 	strd	r4, r9, [sp, #40]	; 0x28
    WeatherSensors() : airTempKMedian(30), relativeHumidtyMedian(30), node()
   d4dd8:	4c82      	ldr	r4, [pc, #520]	; (d4fe4 <_GLOBAL__sub_I_sd+0x340>)
   d4dda:	f7ff fa99 	bl	d4310 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   d4dde:	4630      	mov	r0, r6
   d4de0:	f7ff fa8d 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
   d4de4:	4a70      	ldr	r2, [pc, #448]	; (d4fa8 <_GLOBAL__sub_I_sd+0x304>)
   d4de6:	497a      	ldr	r1, [pc, #488]	; (d4fd0 <_GLOBAL__sub_I_sd+0x32c>)
   d4de8:	487d      	ldr	r0, [pc, #500]	; (d4fe0 <_GLOBAL__sub_I_sd+0x33c>)
   d4dea:	f006 fc33 	bl	db654 <__aeabi_atexit>
   d4dee:	4620      	mov	r0, r4
   d4df0:	f001 f99f 	bl	d6132 <_ZN15Adafruit_AM2315C1Ev>
   d4df4:	f104 0008 	add.w	r0, r4, #8
   d4df8:	f003 f82a 	bl	d7e50 <_ZN9MPL3115A2C1Ev>
   d4dfc:	4641      	mov	r1, r8
   d4dfe:	f104 000a 	add.w	r0, r4, #10
   d4e02:	f004 f98a 	bl	d911a <_ZN13RunningMedianC1Et>
   d4e06:	4641      	mov	r1, r8
   d4e08:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d4e0c:	f004 f985 	bl	d911a <_ZN13RunningMedianC1Et>
   d4e10:	4875      	ldr	r0, [pc, #468]	; (d4fe8 <_GLOBAL__sub_I_sd+0x344>)
   d4e12:	f000 f9ab 	bl	d516c <_ZN7IoTNodeC1Ev>
   d4e16:	f241 685c 	movw	r8, #5724	; 0x165c
   d4e1a:	f640 211f 	movw	r1, #2591	; 0xa1f
   d4e1e:	4873      	ldr	r0, [pc, #460]	; (d4fec <_GLOBAL__sub_I_sd+0x348>)
   d4e20:	f001 f816 	bl	d5e50 <_ZN16Adafruit_TSL2591C1El>
   d4e24:	2304      	movs	r3, #4
   d4e26:	f844 3008 	str.w	r3, [r4, r8]
   d4e2a:	f504 53b3 	add.w	r3, r4, #5728	; 0x1660
   d4e2e:	4a70      	ldr	r2, [pc, #448]	; (d4ff0 <_GLOBAL__sub_I_sd+0x34c>)
   d4e30:	609a      	str	r2, [r3, #8]
   d4e32:	4a70      	ldr	r2, [pc, #448]	; (d4ff4 <_GLOBAL__sub_I_sd+0x350>)
   d4e34:	601d      	str	r5, [r3, #0]
   d4e36:	611a      	str	r2, [r3, #16]
   d4e38:	f241 6374 	movw	r3, #5748	; 0x1674
   d4e3c:	f04f 39ff 	mov.w	r9, #4294967295
   d4e40:	50e5      	str	r5, [r4, r3]
   d4e42:	f241 6378 	movw	r3, #5752	; 0x1678
   d4e46:	2211      	movs	r2, #17
   d4e48:	50e5      	str	r5, [r4, r3]
   d4e4a:	f241 637c 	movw	r3, #5756	; 0x167c
   d4e4e:	f241 6a6c 	movw	sl, #5740	; 0x166c
   d4e52:	f844 9003 	str.w	r9, [r4, r3]
   d4e56:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d4e5a:	2003      	movs	r0, #3
   d4e5c:	601d      	str	r5, [r3, #0]
   d4e5e:	f241 6384 	movw	r3, #5764	; 0x1684
   d4e62:	f844 000a 	str.w	r0, [r4, sl]
   d4e66:	50e2      	str	r2, [r4, r3]
   d4e68:	4a63      	ldr	r2, [pc, #396]	; (d4ff8 <_GLOBAL__sub_I_sd+0x354>)
   d4e6a:	2300      	movs	r3, #0
   d4e6c:	6013      	str	r3, [r2, #0]
   d4e6e:	6053      	str	r3, [r2, #4]
   d4e70:	f241 6290 	movw	r2, #5776	; 0x1690
      pinMode(AnemometerPin, INPUT_PULLUP);
   d4e74:	2102      	movs	r1, #2
    WeatherSensors() : airTempKMedian(30), relativeHumidtyMedian(30), node()
   d4e76:	50a5      	str	r5, [r4, r2]
   d4e78:	4a60      	ldr	r2, [pc, #384]	; (d4ffc <_GLOBAL__sub_I_sd+0x358>)
   d4e7a:	6013      	str	r3, [r2, #0]
   d4e7c:	f241 6298 	movw	r2, #5784	; 0x1698
      attachInterrupt(AnemometerPin, &WeatherSensors::handleAnemometerEvent, this, FALLING);
   d4e80:	f04f 0b02 	mov.w	fp, #2
    WeatherSensors() : airTempKMedian(30), relativeHumidtyMedian(30), node()
   d4e84:	50a5      	str	r5, [r4, r2]
   d4e86:	4a5e      	ldr	r2, [pc, #376]	; (d5000 <_GLOBAL__sub_I_sd+0x35c>)
   d4e88:	6013      	str	r3, [r2, #0]
   d4e8a:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
   d4e8e:	6015      	str	r5, [r2, #0]
   d4e90:	6053      	str	r3, [r2, #4]
   d4e92:	f241 62a8 	movw	r2, #5800	; 0x16a8
   d4e96:	50a5      	str	r5, [r4, r2]
   d4e98:	4a5a      	ldr	r2, [pc, #360]	; (d5004 <_GLOBAL__sub_I_sd+0x360>)
   d4e9a:	6013      	str	r3, [r2, #0]
   d4e9c:	6053      	str	r3, [r2, #4]
   d4e9e:	f241 63b4 	movw	r3, #5812	; 0x16b4
   d4ea2:	50e5      	str	r5, [r4, r3]
      pinMode(AnemometerPin, INPUT_PULLUP);
   d4ea4:	f006 fb54 	bl	db550 <pinMode>
      attachInterrupt(AnemometerPin, &WeatherSensors::handleAnemometerEvent, this, FALLING);
   d4ea8:	4b57      	ldr	r3, [pc, #348]	; (d5008 <_GLOBAL__sub_I_sd+0x364>)
   d4eaa:	f8cd b000 	str.w	fp, [sp]
   d4eae:	e9cd 3508 	strd	r3, r5, [sp, #32]
   d4eb2:	e9cd 9501 	strd	r9, r5, [sp, #4]
   d4eb6:	4623      	mov	r3, r4
   d4eb8:	e896 0006 	ldmia.w	r6, {r1, r2}
   d4ebc:	f834 000a 	ldrh.w	r0, [r4, sl]
   d4ec0:	f7ff febc 	bl	d4c3c <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>
      pinMode(RainPin, INPUT_PULLUP);
   d4ec4:	f834 0008 	ldrh.w	r0, [r4, r8]
   d4ec8:	4659      	mov	r1, fp
   d4eca:	f006 fb41 	bl	db550 <pinMode>
      attachInterrupt(RainPin, &WeatherSensors::handleRainEvent, this, FALLING);
   d4ece:	e9cd 9501 	strd	r9, r5, [sp, #4]
   d4ed2:	4b4e      	ldr	r3, [pc, #312]	; (d500c <_GLOBAL__sub_I_sd+0x368>)
   d4ed4:	f8cd b000 	str.w	fp, [sp]
   d4ed8:	e9cd 3506 	strd	r3, r5, [sp, #24]
   d4edc:	462a      	mov	r2, r5
   d4ede:	4623      	mov	r3, r4
   d4ee0:	494a      	ldr	r1, [pc, #296]	; (d500c <_GLOBAL__sub_I_sd+0x368>)
   d4ee2:	f834 0008 	ldrh.w	r0, [r4, r8]
   d4ee6:	f7ff fea9 	bl	d4c3c <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>
WeatherSensors sensors; //Interrupts for anemometer and rain bucket
   d4eea:	4a2f      	ldr	r2, [pc, #188]	; (d4fa8 <_GLOBAL__sub_I_sd+0x304>)
   d4eec:	4948      	ldr	r1, [pc, #288]	; (d5010 <_GLOBAL__sub_I_sd+0x36c>)
   d4eee:	4620      	mov	r0, r4
   d4ef0:	f006 fbb0 	bl	db654 <__aeabi_atexit>
IoTNode node;
   d4ef4:	4847      	ldr	r0, [pc, #284]	; (d5014 <_GLOBAL__sub_I_sd+0x370>)
   d4ef6:	f000 f939 	bl	d516c <_ZN7IoTNodeC1Ev>
   d4efa:	4a2b      	ldr	r2, [pc, #172]	; (d4fa8 <_GLOBAL__sub_I_sd+0x304>)
   d4efc:	4946      	ldr	r1, [pc, #280]	; (d5018 <_GLOBAL__sub_I_sd+0x374>)
   d4efe:	4845      	ldr	r0, [pc, #276]	; (d5014 <_GLOBAL__sub_I_sd+0x370>)
   d4f00:	f006 fba8 	bl	db654 <__aeabi_atexit>
framArray framConfig = node.makeFramArray(1, sizeof(config));
   d4f04:	463a      	mov	r2, r7
   d4f06:	4943      	ldr	r1, [pc, #268]	; (d5014 <_GLOBAL__sub_I_sd+0x370>)
   d4f08:	4844      	ldr	r0, [pc, #272]	; (d501c <_GLOBAL__sub_I_sd+0x378>)
   d4f0a:	2318      	movs	r3, #24
   d4f0c:	f000 fabb 	bl	d5486 <_ZN7IoTNode13makeFramArrayEmh>
framRing dataRing = node.makeFramRing(300, sizeof(sensorReadings));
   d4f10:	2318      	movs	r3, #24
   d4f12:	f44f 7296 	mov.w	r2, #300	; 0x12c
   d4f16:	493f      	ldr	r1, [pc, #252]	; (d5014 <_GLOBAL__sub_I_sd+0x370>)
   d4f18:	4841      	ldr	r0, [pc, #260]	; (d5020 <_GLOBAL__sub_I_sd+0x37c>)
   d4f1a:	f000 faf0 	bl	d54fe <_ZN7IoTNode12makeFramRingEmh>
String deviceStatus;
   d4f1e:	4941      	ldr	r1, [pc, #260]	; (d5024 <_GLOBAL__sub_I_sd+0x380>)
   d4f20:	4841      	ldr	r0, [pc, #260]	; (d5028 <_GLOBAL__sub_I_sd+0x384>)
   d4f22:	f004 ff24 	bl	d9d6e <_ZN6StringC1EPKc>
   d4f26:	4a20      	ldr	r2, [pc, #128]	; (d4fa8 <_GLOBAL__sub_I_sd+0x304>)
   d4f28:	4940      	ldr	r1, [pc, #256]	; (d502c <_GLOBAL__sub_I_sd+0x388>)
   d4f2a:	483f      	ldr	r0, [pc, #252]	; (d5028 <_GLOBAL__sub_I_sd+0x384>)
   d4f2c:	f006 fb92 	bl	db654 <__aeabi_atexit>
String i2cDevices;
   d4f30:	493c      	ldr	r1, [pc, #240]	; (d5024 <_GLOBAL__sub_I_sd+0x380>)
   d4f32:	483f      	ldr	r0, [pc, #252]	; (d5030 <_GLOBAL__sub_I_sd+0x38c>)
   d4f34:	f004 ff1b 	bl	d9d6e <_ZN6StringC1EPKc>
   d4f38:	4a1b      	ldr	r2, [pc, #108]	; (d4fa8 <_GLOBAL__sub_I_sd+0x304>)
   d4f3a:	493c      	ldr	r1, [pc, #240]	; (d502c <_GLOBAL__sub_I_sd+0x388>)
   d4f3c:	483c      	ldr	r0, [pc, #240]	; (d5030 <_GLOBAL__sub_I_sd+0x38c>)
   d4f3e:	f006 fb89 	bl	db654 <__aeabi_atexit>
};
   d4f42:	493c      	ldr	r1, [pc, #240]	; (d5034 <_GLOBAL__sub_I_sd+0x390>)
   d4f44:	483c      	ldr	r0, [pc, #240]	; (d5038 <_GLOBAL__sub_I_sd+0x394>)
   d4f46:	f004 ff12 	bl	d9d6e <_ZN6StringC1EPKc>
   d4f4a:	493c      	ldr	r1, [pc, #240]	; (d503c <_GLOBAL__sub_I_sd+0x398>)
   d4f4c:	483c      	ldr	r0, [pc, #240]	; (d5040 <_GLOBAL__sub_I_sd+0x39c>)
   d4f4e:	f004 ff0e 	bl	d9d6e <_ZN6StringC1EPKc>
   d4f52:	493c      	ldr	r1, [pc, #240]	; (d5044 <_GLOBAL__sub_I_sd+0x3a0>)
   d4f54:	483c      	ldr	r0, [pc, #240]	; (d5048 <_GLOBAL__sub_I_sd+0x3a4>)
   d4f56:	f004 ff0a 	bl	d9d6e <_ZN6StringC1EPKc>
   d4f5a:	493c      	ldr	r1, [pc, #240]	; (d504c <_GLOBAL__sub_I_sd+0x3a8>)
   d4f5c:	483c      	ldr	r0, [pc, #240]	; (d5050 <_GLOBAL__sub_I_sd+0x3ac>)
   d4f5e:	f004 ff06 	bl	d9d6e <_ZN6StringC1EPKc>
   d4f62:	493c      	ldr	r1, [pc, #240]	; (d5054 <_GLOBAL__sub_I_sd+0x3b0>)
   d4f64:	483c      	ldr	r0, [pc, #240]	; (d5058 <_GLOBAL__sub_I_sd+0x3b4>)
   d4f66:	f004 ff02 	bl	d9d6e <_ZN6StringC1EPKc>
   d4f6a:	493c      	ldr	r1, [pc, #240]	; (d505c <_GLOBAL__sub_I_sd+0x3b8>)
   d4f6c:	483c      	ldr	r0, [pc, #240]	; (d5060 <_GLOBAL__sub_I_sd+0x3bc>)
   d4f6e:	f004 fefe 	bl	d9d6e <_ZN6StringC1EPKc>
   d4f72:	493c      	ldr	r1, [pc, #240]	; (d5064 <_GLOBAL__sub_I_sd+0x3c0>)
   d4f74:	483c      	ldr	r0, [pc, #240]	; (d5068 <_GLOBAL__sub_I_sd+0x3c4>)
   d4f76:	f004 fefa 	bl	d9d6e <_ZN6StringC1EPKc>
   d4f7a:	493c      	ldr	r1, [pc, #240]	; (d506c <_GLOBAL__sub_I_sd+0x3c8>)
   d4f7c:	483c      	ldr	r0, [pc, #240]	; (d5070 <_GLOBAL__sub_I_sd+0x3cc>)
   d4f7e:	f004 fef6 	bl	d9d6e <_ZN6StringC1EPKc>
String i2cNames[] =
   d4f82:	4a09      	ldr	r2, [pc, #36]	; (d4fa8 <_GLOBAL__sub_I_sd+0x304>)
   d4f84:	493b      	ldr	r1, [pc, #236]	; (d5074 <_GLOBAL__sub_I_sd+0x3d0>)
   d4f86:	4628      	mov	r0, r5
   d4f88:	f006 fb64 	bl	db654 <__aeabi_atexit>
   d4f8c:	b00d      	add	sp, #52	; 0x34
   d4f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4f92:	bf00      	nop
   d4f94:	2003c1e0 	.word	0x2003c1e0
   d4f98:	2003c4bc 	.word	0x2003c4bc
   d4f9c:	000df708 	.word	0x000df708
   d4fa0:	2003c1d4 	.word	0x2003c1d4
   d4fa4:	2003c1d8 	.word	0x2003c1d8
   d4fa8:	2003c1d0 	.word	0x2003c1d0
   d4fac:	2003c384 	.word	0x2003c384
   d4fb0:	000d40e3 	.word	0x000d40e3
   d4fb4:	02faf080 	.word	0x02faf080
   d4fb8:	000d574d 	.word	0x000d574d
   d4fbc:	2003c248 	.word	0x2003c248
   d4fc0:	000d40cd 	.word	0x000d40cd
   d4fc4:	000d4255 	.word	0x000d4255
   d4fc8:	000d40bd 	.word	0x000d40bd
   d4fcc:	2003c368 	.word	0x2003c368
   d4fd0:	000d43b9 	.word	0x000d43b9
   d4fd4:	000d4109 	.word	0x000d4109
   d4fd8:	2003c958 	.word	0x2003c958
   d4fdc:	000d4c05 	.word	0x000d4c05
   d4fe0:	2003e034 	.word	0x2003e034
   d4fe4:	2003c974 	.word	0x2003c974
   d4fe8:	2003df78 	.word	0x2003df78
   d4fec:	2003dfc0 	.word	0x2003dfc0
   d4ff0:	3c343958 	.word	0x3c343958
   d4ff4:	3fbef9db 	.word	0x3fbef9db
   d4ff8:	2003dffc 	.word	0x2003dffc
   d4ffc:	2003e008 	.word	0x2003e008
   d5000:	2003e010 	.word	0x2003e010
   d5004:	2003e020 	.word	0x2003e020
   d5008:	000d4147 	.word	0x000d4147
   d500c:	000d4125 	.word	0x000d4125
   d5010:	000d4181 	.word	0x000d4181
   d5014:	2003c320 	.word	0x2003c320
   d5018:	000d40fd 	.word	0x000d40fd
   d501c:	2003c268 	.word	0x2003c268
   d5020:	2003c1fc 	.word	0x2003c1fc
   d5024:	000dff9b 	.word	0x000dff9b
   d5028:	2003c238 	.word	0x2003c238
   d502c:	000d9cd9 	.word	0x000d9cd9
   d5030:	2003c288 	.word	0x2003c288
   d5034:	000df6cd 	.word	0x000df6cd
   d5038:	2003c2a0 	.word	0x2003c2a0
   d503c:	000df6d1 	.word	0x000df6d1
   d5040:	2003c2b0 	.word	0x2003c2b0
   d5044:	000df6d5 	.word	0x000df6d5
   d5048:	2003c2c0 	.word	0x2003c2c0
   d504c:	000df6e0 	.word	0x000df6e0
   d5050:	2003c2d0 	.word	0x2003c2d0
   d5054:	000df6e4 	.word	0x000df6e4
   d5058:	2003c2e0 	.word	0x2003c2e0
   d505c:	000df6e9 	.word	0x000df6e9
   d5060:	2003c2f0 	.word	0x2003c2f0
   d5064:	000df6f0 	.word	0x000df6f0
   d5068:	2003c300 	.word	0x2003c300
   d506c:	000df6f8 	.word	0x000df6f8
   d5070:	2003c310 	.word	0x2003c310
   d5074:	000d40e5 	.word	0x000d40e5
   d5078:	000d40c9 	.word	0x000d40c9

000d507c <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d507c:	7c03      	ldrb	r3, [r0, #16]
   d507e:	f013 0308 	ands.w	r3, r3, #8
   d5082:	bf1e      	ittt	ne
   d5084:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d5086:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d5088:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d508a:	2b00      	cmp	r3, #0
  }
   d508c:	bfac      	ite	ge
   d508e:	4618      	movge	r0, r3
   d5090:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d5094:	4770      	bx	lr

000d5096 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d5096:	4770      	bx	lr

000d5098 <_ZN4FileD0Ev>:
   d5098:	b510      	push	{r4, lr}
   d509a:	2134      	movs	r1, #52	; 0x34
   d509c:	4604      	mov	r4, r0
   d509e:	f006 fade 	bl	db65e <_ZdlPvj>
   d50a2:	4620      	mov	r0, r4
   d50a4:	bd10      	pop	{r4, pc}

000d50a6 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d50a6:	3010      	adds	r0, #16
   d50a8:	f001 bf68 	b.w	d6f7c <_ZN7FatFile4syncEv>

000d50ac <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d50ac:	3010      	adds	r0, #16
   d50ae:	f001 be46 	b.w	d6d3e <_ZN7FatFile4peekEv>

000d50b2 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d50b2:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d50b4:	2201      	movs	r2, #1
   d50b6:	f10d 0107 	add.w	r1, sp, #7
   d50ba:	3010      	adds	r0, #16
   d50bc:	f001 fd91 	bl	d6be2 <_ZN7FatFile4readEPvj>
   d50c0:	2801      	cmp	r0, #1
   d50c2:	bf0c      	ite	eq
   d50c4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d50c8:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d50cc:	b003      	add	sp, #12
   d50ce:	f85d fb04 	ldr.w	pc, [sp], #4

000d50d2 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d50d2:	3010      	adds	r0, #16
   d50d4:	f002 b8be 	b.w	d7254 <_ZN7FatFile5writeEPKvj>

000d50d8 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d50d8:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d50da:	2201      	movs	r2, #1
   d50dc:	f88d 1007 	strb.w	r1, [sp, #7]
   d50e0:	3010      	adds	r0, #16
   d50e2:	f10d 0107 	add.w	r1, sp, #7
   d50e6:	f002 f8b5 	bl	d7254 <_ZN7FatFile5writeEPKvj>
  }
   d50ea:	b003      	add	sp, #12
   d50ec:	f85d fb04 	ldr.w	pc, [sp], #4

000d50f0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d50f0:	b530      	push	{r4, r5, lr}
   d50f2:	b085      	sub	sp, #20
class SPISettings : public Printable {
   d50f4:	4b1b      	ldr	r3, [pc, #108]	; (d5164 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   d50f6:	9300      	str	r3, [sp, #0]
   d50f8:	7913      	ldrb	r3, [r2, #4]
   d50fa:	f88d 3004 	strb.w	r3, [sp, #4]
   d50fe:	6893      	ldr	r3, [r2, #8]
   d5100:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5102:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d5106:	8993      	ldrh	r3, [r2, #12]
   d5108:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d510c:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d510e:	460a      	mov	r2, r1
   d5110:	466b      	mov	r3, sp
   d5112:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d5116:	4628      	mov	r0, r5
   d5118:	f002 fbd4 	bl	d78c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d511c:	b910      	cbnz	r0, d5124 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   d511e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d5120:	b005      	add	sp, #20
   d5122:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d5124:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d5126:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   d512a:	4628      	mov	r0, r5
   d512c:	f001 ff5c 	bl	d6fe8 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d5130:	2101      	movs	r1, #1
   d5132:	4620      	mov	r0, r4
   d5134:	f002 fa74 	bl	d7620 <_ZN9FatVolume4initEh>
   d5138:	4601      	mov	r1, r0
   d513a:	b168      	cbz	r0, d5158 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d513c:	4621      	mov	r1, r4
   d513e:	4628      	mov	r0, r5
   d5140:	f001 fd36 	bl	d6bb0 <_ZN7FatFile8openRootEP9FatVolume>
   d5144:	2800      	cmp	r0, #0
   d5146:	d0ea      	beq.n	d511e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   d5148:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d514c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5150:	d0e5      	beq.n	d511e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   d5152:	4b05      	ldr	r3, [pc, #20]	; (d5168 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   d5154:	601d      	str	r5, [r3, #0]
    return true;
   d5156:	e7e3      	b.n	d5120 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   d5158:	4620      	mov	r0, r4
   d515a:	f002 fa61 	bl	d7620 <_ZN9FatVolume4initEh>
   d515e:	2800      	cmp	r0, #0
   d5160:	d1ec      	bne.n	d513c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   d5162:	e7dc      	b.n	d511e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   d5164:	000df708 	.word	0x000df708
   d5168:	2003e514 	.word	0x2003e514

000d516c <_ZN7IoTNodeC1Ev>:
// Create FRAM instances
#define PART_NUMBER MB85RC256V


// Constructor
IoTNode::IoTNode() : myFram(PART_NUMBER)
   d516c:	b510      	push	{r4, lr}
   d516e:	4906      	ldr	r1, [pc, #24]	; (d5188 <_ZN7IoTNodeC1Ev+0x1c>)
   d5170:	4604      	mov	r4, r0
   d5172:	f004 fdfc 	bl	d9d6e <_ZN6StringC1EPKc>
   d5176:	2363      	movs	r3, #99	; 0x63
   d5178:	7423      	strb	r3, [r4, #16]
   d517a:	2105      	movs	r1, #5
   d517c:	f104 0014 	add.w	r0, r4, #20
   d5180:	f003 fe2c 	bl	d8ddc <_ZN7FramI2CC1E14framPartNumber>
{

}
   d5184:	4620      	mov	r0, r4
   d5186:	bd10      	pop	{r4, pc}
   d5188:	000dff9b 	.word	0x000dff9b

000d518c <_ZN7IoTNode2okEv>:

}

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool IoTNode::ok()
{
   d518c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // "RTC MCP79412",
  // "Expander MCP23018",
  // "RTC EEPROM",
  // "ADC MCP3221",
  // "FRAM M85RC256V",
  byte i2cAd[]=
   d518e:	4b1a      	ldr	r3, [pc, #104]	; (d51f8 <_ZN7IoTNode2okEv+0x6c>)
   d5190:	6818      	ldr	r0, [r3, #0]
   d5192:	791b      	ldrb	r3, [r3, #4]
   d5194:	f88d 3004 	strb.w	r3, [sp, #4]
   d5198:	9000      	str	r0, [sp, #0]
      0x20, //32
      0x57, //87
      0x4D, //77
      0x50 //80
  };
  if (!Wire.isEnabled())
   d519a:	f006 fa33 	bl	db604 <_Z19__fetch_global_Wirev>
   d519e:	f006 f8d7 	bl	db350 <_ZN7TwoWire9isEnabledEv>
   d51a2:	b918      	cbnz	r0, d51ac <_ZN7IoTNode2okEv+0x20>
  {
    Wire.begin();
   d51a4:	f006 fa2e 	bl	db604 <_Z19__fetch_global_Wirev>
   d51a8:	f006 f892 	bl	db2d0 <_ZN7TwoWire5beginEv>
   d51ac:	466c      	mov	r4, sp
{
   d51ae:	2500      	movs	r5, #0
  for (int i=0; i<5; ++i)
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAd[i];
   d51b0:	f814 6b01 	ldrb.w	r6, [r4], #1
    Wire.beginTransmission(address);
   d51b4:	f006 fa26 	bl	db604 <_Z19__fetch_global_Wirev>
   d51b8:	4631      	mov	r1, r6
   d51ba:	f006 f8bb 	bl	db334 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d51be:	f006 fa21 	bl	db604 <_Z19__fetch_global_Wirev>
   d51c2:	f006 f8c2 	bl	db34a <_ZN7TwoWire15endTransmissionEv>

    // Try again if there is an error
    if (!error==0)
   d51c6:	b920      	cbnz	r0, d51d2 <_ZN7IoTNode2okEv+0x46>
  for (int i=0; i<5; ++i)
   d51c8:	3501      	adds	r5, #1
   d51ca:	2d05      	cmp	r5, #5
   d51cc:	d1f0      	bne.n	d51b0 <_ZN7IoTNode2okEv+0x24>
  bool result = true;
   d51ce:	2001      	movs	r0, #1
   d51d0:	e00f      	b.n	d51f2 <_ZN7IoTNode2okEv+0x66>
    {
      Wire.reset();
   d51d2:	f006 fa17 	bl	db604 <_Z19__fetch_global_Wirev>
   d51d6:	f006 f8bf 	bl	db358 <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d51da:	f006 fa13 	bl	db604 <_Z19__fetch_global_Wirev>
   d51de:	4631      	mov	r1, r6
   d51e0:	f006 f8a8 	bl	db334 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d51e4:	f006 fa0e 	bl	db604 <_Z19__fetch_global_Wirev>
   d51e8:	f006 f8af 	bl	db34a <_ZN7TwoWire15endTransmissionEv>
    }
 
    // Return false if there is an error
    if (!error == 0)
   d51ec:	2800      	cmp	r0, #0
   d51ee:	d0eb      	beq.n	d51c8 <_ZN7IoTNode2okEv+0x3c>
    {
      result = false;
   d51f0:	2000      	movs	r0, #0
      break;
    }
  }
  return result;
}
   d51f2:	b002      	add	sp, #8
   d51f4:	bd70      	pop	{r4, r5, r6, pc}
   d51f6:	bf00      	nop
   d51f8:	000df740 	.word	0x000df740

000d51fc <_ZN7IoTNode10setPowerONE9powerNameb>:
// valid powerNames are INT5V, INT12V, EXT3V3, EXT5V, EXT12V
// Note that v1.1 of the Sentient Things IoT Node includes onboard regulators
// for EXT3V3 and EXT5V
void IoTNode::setPowerON(powerName pwrName, bool state)
{
  expand.digitalWrite(pwrName, state);
   d51fc:	4801      	ldr	r0, [pc, #4]	; (d5204 <_ZN7IoTNode10setPowerONE9powerNameb+0x8>)
   d51fe:	f002 bdff 	b.w	d7e00 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d5202:	bf00      	nop
   d5204:	2003e4d4 	.word	0x2003e4d4

000d5208 <_ZN7IoTNode14tickleWatchdogEv>:
// Note that the WATCHDOG switch must be set to On
// for the watchdog reset to be connected
// See documentation for setting up the watchdog delay
// using the dip switch on the IoT Node board
void IoTNode::tickleWatchdog()
{
   d5208:	b510      	push	{r4, lr}
  expand.digitalWrite(5,true);
   d520a:	4c08      	ldr	r4, [pc, #32]	; (d522c <_ZN7IoTNode14tickleWatchdogEv+0x24>)
   d520c:	2201      	movs	r2, #1
   d520e:	2105      	movs	r1, #5
   d5210:	4620      	mov	r0, r4
   d5212:	f002 fdf5 	bl	d7e00 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
  //delayMicroseconds(100);
  delay(50);
   d5216:	2032      	movs	r0, #50	; 0x32
   d5218:	f005 fa84 	bl	da724 <delay>
  expand.digitalWrite(5,false);
   d521c:	4620      	mov	r0, r4
   d521e:	2200      	movs	r2, #0
}
   d5220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  expand.digitalWrite(5,false);
   d5224:	2105      	movs	r1, #5
   d5226:	f002 bdeb 	b.w	d7e00 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d522a:	bf00      	nop
   d522c:	2003e4d4 	.word	0x2003e4d4

000d5230 <_ZN7IoTNode8unixTimeEv>:
}


uint32_t IoTNode::unixTime()
{
  return rtc.rtcNow();
   d5230:	4801      	ldr	r0, [pc, #4]	; (d5238 <_ZN7IoTNode8unixTimeEv+0x8>)
   d5232:	f000 bdab 	b.w	d5d8c <_ZN8MCP7941x6rtcNowEv>
   d5236:	bf00      	nop
   d5238:	2003e50c 	.word	0x2003e50c

000d523c <_ZN7IoTNode11setUnixTimeEm>:
}

void IoTNode::setUnixTime(uint32_t unixtime)
{
  rtc.setUnixTime(unixtime);
   d523c:	4801      	ldr	r0, [pc, #4]	; (d5244 <_ZN7IoTNode11setUnixTimeEm+0x8>)
   d523e:	f000 bd54 	b.w	d5cea <_ZN8MCP7941x11setUnixTimeEm>
   d5242:	bf00      	nop
   d5244:	2003e50c 	.word	0x2003e50c

000d5248 <_ZN7IoTNode15array_to_stringEPhjPc>:


// Private

void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
   d5248:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (unsigned int i = 0; i < len; i++)
   d524a:	2000      	movs	r0, #0
    {
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
        buffer[i*2+1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
   d524c:	1c5f      	adds	r7, r3, #1
    for (unsigned int i = 0; i < len; i++)
   d524e:	4290      	cmp	r0, r2
   d5250:	d011      	beq.n	d5276 <_ZN7IoTNode15array_to_stringEPhjPc+0x2e>
        byte nib1 = (array[i] >> 4) & 0x0F;
   d5252:	5c0e      	ldrb	r6, [r1, r0]
        byte nib2 = (array[i] >> 0) & 0x0F;
   d5254:	f006 040f 	and.w	r4, r6, #15
        byte nib1 = (array[i] >> 4) & 0x0F;
   d5258:	0935      	lsrs	r5, r6, #4
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
   d525a:	2e9f      	cmp	r6, #159	; 0x9f
   d525c:	bf94      	ite	ls
   d525e:	3530      	addls	r5, #48	; 0x30
   d5260:	3537      	addhi	r5, #55	; 0x37
        buffer[i*2+1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
   d5262:	2c09      	cmp	r4, #9
   d5264:	bf94      	ite	ls
   d5266:	3430      	addls	r4, #48	; 0x30
   d5268:	3437      	addhi	r4, #55	; 0x37
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
   d526a:	f803 5010 	strb.w	r5, [r3, r0, lsl #1]
        buffer[i*2+1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
   d526e:	f807 4010 	strb.w	r4, [r7, r0, lsl #1]
    for (unsigned int i = 0; i < len; i++)
   d5272:	3001      	adds	r0, #1
   d5274:	e7eb      	b.n	d524e <_ZN7IoTNode15array_to_stringEPhjPc+0x6>
    }
    buffer[len*2] = '\0';
   d5276:	2200      	movs	r2, #0
   d5278:	f803 2010 	strb.w	r2, [r3, r0, lsl #1]
}
   d527c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5280 <_ZN7IoTNode5beginEv>:
{
   d5280:	b530      	push	{r4, r5, lr}
   d5282:	b08d      	sub	sp, #52	; 0x34
   d5284:	4605      	mov	r5, r0
  if (!Wire.isEnabled())
   d5286:	f006 f9bd 	bl	db604 <_Z19__fetch_global_Wirev>
   d528a:	f006 f861 	bl	db350 <_ZN7TwoWire9isEnabledEv>
   d528e:	b918      	cbnz	r0, d5298 <_ZN7IoTNode5beginEv+0x18>
    Wire.begin();
   d5290:	f006 f9b8 	bl	db604 <_Z19__fetch_global_Wirev>
   d5294:	f006 f81c 	bl	db2d0 <_ZN7TwoWire5beginEv>
  delay(20);
   d5298:	2014      	movs	r0, #20
   d529a:	f005 fa43 	bl	da724 <delay>
  Wire.beginTransmission(address);
   d529e:	f006 f9b1 	bl	db604 <_Z19__fetch_global_Wirev>
   d52a2:	2120      	movs	r1, #32
   d52a4:	f006 f846 	bl	db334 <_ZN7TwoWire17beginTransmissionEh>
  error = Wire.endTransmission();
   d52a8:	f006 f9ac 	bl	db604 <_Z19__fetch_global_Wirev>
   d52ac:	f006 f84d 	bl	db34a <_ZN7TwoWire15endTransmissionEv>
  if (!error==0)
   d52b0:	2800      	cmp	r0, #0
   d52b2:	f000 80d3 	beq.w	d545c <_ZN7IoTNode5beginEv+0x1dc>
    Wire.reset();
   d52b6:	f006 f9a5 	bl	db604 <_Z19__fetch_global_Wirev>
   d52ba:	f006 f84d 	bl	db358 <_ZN7TwoWire5resetEv>
    Wire.beginTransmission(address);
   d52be:	f006 f9a1 	bl	db604 <_Z19__fetch_global_Wirev>
   d52c2:	2120      	movs	r1, #32
   d52c4:	f006 f836 	bl	db334 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d52c8:	f006 f99c 	bl	db604 <_Z19__fetch_global_Wirev>
   d52cc:	f006 f83d 	bl	db34a <_ZN7TwoWire15endTransmissionEv>
  if (!error == 0)
   d52d0:	fab0 f480 	clz	r4, r0
   d52d4:	0964      	lsrs	r4, r4, #5
  expand.begin();
   d52d6:	4862      	ldr	r0, [pc, #392]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d52d8:	f002 fd83 	bl	d7de2 <_ZN17Adafruit_MCP230175beginEv>
  expand.pinMode(0,OUTPUT);
   d52dc:	4860      	ldr	r0, [pc, #384]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d52de:	2201      	movs	r2, #1
   d52e0:	2100      	movs	r1, #0
   d52e2:	f002 fd81 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(1,OUTPUT);
   d52e6:	2201      	movs	r2, #1
   d52e8:	4611      	mov	r1, r2
   d52ea:	485d      	ldr	r0, [pc, #372]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d52ec:	f002 fd7c 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(2,OUTPUT);
   d52f0:	485b      	ldr	r0, [pc, #364]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d52f2:	2201      	movs	r2, #1
   d52f4:	2102      	movs	r1, #2
   d52f6:	f002 fd77 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(3,OUTPUT);
   d52fa:	4859      	ldr	r0, [pc, #356]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d52fc:	2201      	movs	r2, #1
   d52fe:	2103      	movs	r1, #3
   d5300:	f002 fd72 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(4,OUTPUT);
   d5304:	4856      	ldr	r0, [pc, #344]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d5306:	2201      	movs	r2, #1
   d5308:	2104      	movs	r1, #4
   d530a:	f002 fd6d 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(5,OUTPUT);
   d530e:	4854      	ldr	r0, [pc, #336]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d5310:	2201      	movs	r2, #1
   d5312:	2105      	movs	r1, #5
   d5314:	f002 fd68 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(6,INPUT);
   d5318:	4851      	ldr	r0, [pc, #324]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d531a:	2200      	movs	r2, #0
   d531c:	2106      	movs	r1, #6
   d531e:	f002 fd63 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(7,OUTPUT);
   d5322:	484f      	ldr	r0, [pc, #316]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d5324:	2201      	movs	r2, #1
   d5326:	2107      	movs	r1, #7
   d5328:	f002 fd5e 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(8,INPUT);
   d532c:	484c      	ldr	r0, [pc, #304]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d532e:	2200      	movs	r2, #0
   d5330:	2108      	movs	r1, #8
   d5332:	f002 fd59 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(9,INPUT);
   d5336:	484a      	ldr	r0, [pc, #296]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d5338:	2200      	movs	r2, #0
   d533a:	2109      	movs	r1, #9
   d533c:	f002 fd54 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(10,INPUT);
   d5340:	4847      	ldr	r0, [pc, #284]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d5342:	2200      	movs	r2, #0
   d5344:	210a      	movs	r1, #10
   d5346:	f002 fd4f 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(11,INPUT);
   d534a:	4845      	ldr	r0, [pc, #276]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d534c:	2200      	movs	r2, #0
   d534e:	210b      	movs	r1, #11
   d5350:	f002 fd4a 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(12,INPUT);
   d5354:	4842      	ldr	r0, [pc, #264]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d5356:	2200      	movs	r2, #0
   d5358:	210c      	movs	r1, #12
   d535a:	f002 fd45 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(13,INPUT);
   d535e:	4840      	ldr	r0, [pc, #256]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d5360:	2200      	movs	r2, #0
   d5362:	210d      	movs	r1, #13
   d5364:	f002 fd40 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(14,INPUT);
   d5368:	483d      	ldr	r0, [pc, #244]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d536a:	2200      	movs	r2, #0
   d536c:	210e      	movs	r1, #14
   d536e:	f002 fd3b 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(15,INPUT);
   d5372:	483b      	ldr	r0, [pc, #236]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d5374:	2200      	movs	r2, #0
   d5376:	210f      	movs	r1, #15
   d5378:	f002 fd36 	bl	d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pullUp(0,HIGH);
   d537c:	4838      	ldr	r0, [pc, #224]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d537e:	2201      	movs	r2, #1
   d5380:	2100      	movs	r1, #0
   d5382:	f002 fd5c 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(1,HIGH);
   d5386:	2201      	movs	r2, #1
   d5388:	4611      	mov	r1, r2
   d538a:	4835      	ldr	r0, [pc, #212]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d538c:	f002 fd57 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(2,HIGH);
   d5390:	4833      	ldr	r0, [pc, #204]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d5392:	2201      	movs	r2, #1
   d5394:	2102      	movs	r1, #2
   d5396:	f002 fd52 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(3,HIGH);
   d539a:	4831      	ldr	r0, [pc, #196]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d539c:	2201      	movs	r2, #1
   d539e:	2103      	movs	r1, #3
   d53a0:	f002 fd4d 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(4,HIGH);
   d53a4:	482e      	ldr	r0, [pc, #184]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d53a6:	2201      	movs	r2, #1
   d53a8:	2104      	movs	r1, #4
   d53aa:	f002 fd48 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(5,HIGH);
   d53ae:	482c      	ldr	r0, [pc, #176]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d53b0:	2201      	movs	r2, #1
   d53b2:	2105      	movs	r1, #5
   d53b4:	f002 fd43 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(6,HIGH);
   d53b8:	4829      	ldr	r0, [pc, #164]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d53ba:	2201      	movs	r2, #1
   d53bc:	2106      	movs	r1, #6
   d53be:	f002 fd3e 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(7,HIGH);
   d53c2:	4827      	ldr	r0, [pc, #156]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d53c4:	2201      	movs	r2, #1
   d53c6:	2107      	movs	r1, #7
   d53c8:	f002 fd39 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(8,HIGH);
   d53cc:	4824      	ldr	r0, [pc, #144]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d53ce:	2201      	movs	r2, #1
   d53d0:	2108      	movs	r1, #8
   d53d2:	f002 fd34 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(9,HIGH);
   d53d6:	4822      	ldr	r0, [pc, #136]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d53d8:	2201      	movs	r2, #1
   d53da:	2109      	movs	r1, #9
   d53dc:	f002 fd2f 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(10,HIGH);
   d53e0:	481f      	ldr	r0, [pc, #124]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d53e2:	2201      	movs	r2, #1
   d53e4:	210a      	movs	r1, #10
   d53e6:	f002 fd2a 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(11,HIGH); 
   d53ea:	481d      	ldr	r0, [pc, #116]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d53ec:	2201      	movs	r2, #1
   d53ee:	210b      	movs	r1, #11
   d53f0:	f002 fd25 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(12,HIGH);
   d53f4:	481a      	ldr	r0, [pc, #104]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d53f6:	2201      	movs	r2, #1
   d53f8:	210c      	movs	r1, #12
   d53fa:	f002 fd20 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(13,HIGH);
   d53fe:	4818      	ldr	r0, [pc, #96]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d5400:	2201      	movs	r2, #1
   d5402:	210d      	movs	r1, #13
   d5404:	f002 fd1b 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(14,HIGH);
   d5408:	4815      	ldr	r0, [pc, #84]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d540a:	2201      	movs	r2, #1
   d540c:	210e      	movs	r1, #14
   d540e:	f002 fd16 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(15,HIGH);
   d5412:	4813      	ldr	r0, [pc, #76]	; (d5460 <_ZN7IoTNode5beginEv+0x1e0>)
   d5414:	2201      	movs	r2, #1
   d5416:	210f      	movs	r1, #15
   d5418:	f002 fd11 	bl	d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>
  byte nodeHex[8] = "";
   d541c:	2100      	movs	r1, #0
  char nodeHexStr[17] = "";
   d541e:	220d      	movs	r2, #13
   d5420:	a808      	add	r0, sp, #32
  byte nodeHex[8] = "";
   d5422:	e9cd 1101 	strd	r1, r1, [sp, #4]
  char nodeHexStr[17] = "";
   d5426:	9107      	str	r1, [sp, #28]
   d5428:	f008 fadc 	bl	dd9e4 <memset>
  rtc.getMacAddress(nodeHex);
   d542c:	a901      	add	r1, sp, #4
   d542e:	480d      	ldr	r0, [pc, #52]	; (d5464 <_ZN7IoTNode5beginEv+0x1e4>)
   d5430:	f000 fb20 	bl	d5a74 <_ZN8MCP7941x13getMacAddressEPh>
  array_to_string(nodeHex, 8, nodeHexStr);
   d5434:	ab07      	add	r3, sp, #28
   d5436:	2208      	movs	r2, #8
   d5438:	a901      	add	r1, sp, #4
   d543a:	4628      	mov	r0, r5
   d543c:	f7ff ff04 	bl	d5248 <_ZN7IoTNode15array_to_stringEPhjPc>
  nodeID = String(nodeHexStr);
   d5440:	a907      	add	r1, sp, #28
   d5442:	a803      	add	r0, sp, #12
   d5444:	f004 fc93 	bl	d9d6e <_ZN6StringC1EPKc>
   d5448:	a903      	add	r1, sp, #12
   d544a:	4628      	mov	r0, r5
   d544c:	f004 fcda 	bl	d9e04 <_ZN6StringaSEOS_>
   d5450:	a803      	add	r0, sp, #12
   d5452:	f004 fc41 	bl	d9cd8 <_ZN6StringD1Ev>
}
   d5456:	4620      	mov	r0, r4
   d5458:	b00d      	add	sp, #52	; 0x34
   d545a:	bd30      	pop	{r4, r5, pc}
  bool result = true;
   d545c:	2401      	movs	r4, #1
   d545e:	e73a      	b.n	d52d6 <_ZN7IoTNode5beginEv+0x56>
   d5460:	2003e4d4 	.word	0x2003e4d4
   d5464:	2003e50c 	.word	0x2003e50c

000d5468 <_ZN9framArrayC1ER7FramI2CmhR10framResult>:
}

//////////////////

// Fram Array Constructor
framArray::framArray(FramI2C& fram, uint32_t numberOfElements, byte sizeOfElement, framResult& result):
   d5468:	b513      	push	{r0, r1, r4, lr}
   d546a:	4604      	mov	r4, r0
   d546c:	9804      	ldr	r0, [sp, #16]
  _numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), myFram(fram), myResult(result),
  myArray(fram, _numberOfElements, _sizeOfElement, result)
   d546e:	9000      	str	r0, [sp, #0]
   d5470:	e9c4 1002 	strd	r1, r0, [r4, #8]
   d5474:	6022      	str	r2, [r4, #0]
   d5476:	7123      	strb	r3, [r4, #4]
   d5478:	f104 0010 	add.w	r0, r4, #16
   d547c:	f003 fda0 	bl	d8fc0 <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult>
{

}
   d5480:	4620      	mov	r0, r4
   d5482:	b002      	add	sp, #8
   d5484:	bd10      	pop	{r4, pc}

000d5486 <_ZN7IoTNode13makeFramArrayEmh>:

framArray IoTNode::makeFramArray(uint32_t numberOfElements, byte sizeOfElement)
{
   d5486:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return framArray(myFram, numberOfElements,sizeOfElement, myResult);
   d5488:	f101 0510 	add.w	r5, r1, #16
   d548c:	9500      	str	r5, [sp, #0]
   d548e:	3114      	adds	r1, #20
{
   d5490:	4604      	mov	r4, r0
  return framArray(myFram, numberOfElements,sizeOfElement, myResult);
   d5492:	f7ff ffe9 	bl	d5468 <_ZN9framArrayC1ER7FramI2CmhR10framResult>
}
   d5496:	4620      	mov	r0, r4
   d5498:	b003      	add	sp, #12
   d549a:	bd30      	pop	{r4, r5, pc}

000d549c <_ZN9framArray5writeEmPh>:

bool framArray::write(uint32_t index, byte *buffer)
{
   d549c:	b507      	push	{r0, r1, r2, lr}
  framResult checkResult = framUnknownError;
   d549e:	2363      	movs	r3, #99	; 0x63
   d54a0:	f88d 3007 	strb.w	r3, [sp, #7]
  myArray.writeElement(index, buffer, checkResult);
   d54a4:	3010      	adds	r0, #16
   d54a6:	f10d 0307 	add.w	r3, sp, #7
   d54aa:	f003 fdb5 	bl	d9018 <_ZN12FramI2CArray12writeElementEmPhR10framResult>
  if (checkResult==framOK)
   d54ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
  else
  {
    return false;
  }
  
}
   d54b2:	fab0 f080 	clz	r0, r0
   d54b6:	0940      	lsrs	r0, r0, #5
   d54b8:	b003      	add	sp, #12
   d54ba:	f85d fb04 	ldr.w	pc, [sp], #4

000d54be <_ZN9framArray4readEmPh>:

bool framArray::read(uint32_t index, byte *buffer)
{
   d54be:	b507      	push	{r0, r1, r2, lr}
  framResult checkResult = framUnknownError;
   d54c0:	2363      	movs	r3, #99	; 0x63
   d54c2:	f88d 3007 	strb.w	r3, [sp, #7]
  myArray.readElement(index, buffer, checkResult);
   d54c6:	3010      	adds	r0, #16
   d54c8:	f10d 0307 	add.w	r3, sp, #7
   d54cc:	f003 fd8e 	bl	d8fec <_ZN12FramI2CArray11readElementEmPhR10framResult>
  if (checkResult==framOK)
   d54d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
  else
  {
    return false;
  }
  
}
   d54d4:	fab0 f080 	clz	r0, r0
   d54d8:	0940      	lsrs	r0, r0, #5
   d54da:	b003      	add	sp, #12
   d54dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d54e0 <_ZN8framRingC1ER7FramI2CmhR10framResult>:


//////////////////

// Fram Ring Array Constructor
framRing::framRing(FramI2C& fram, uint32_t numberOfElements, byte sizeOfElement, framResult& result):
   d54e0:	b513      	push	{r0, r1, r4, lr}
   d54e2:	4604      	mov	r4, r0
   d54e4:	9804      	ldr	r0, [sp, #16]
  _numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), myFram(fram), myResult(result),
  myRing(fram, _numberOfElements, _sizeOfElement, result)
   d54e6:	9000      	str	r0, [sp, #0]
   d54e8:	e9c4 1002 	strd	r1, r0, [r4, #8]
   d54ec:	6022      	str	r2, [r4, #0]
   d54ee:	7123      	strb	r3, [r4, #4]
   d54f0:	f104 0010 	add.w	r0, r4, #16
   d54f4:	f003 fda6 	bl	d9044 <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult>
{

}
   d54f8:	4620      	mov	r0, r4
   d54fa:	b002      	add	sp, #8
   d54fc:	bd10      	pop	{r4, pc}

000d54fe <_ZN7IoTNode12makeFramRingEmh>:

framRing IoTNode::makeFramRing(uint32_t numberOfElements, byte sizeOfElement)
{
   d54fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return framRing(myFram, numberOfElements,sizeOfElement, myResult);
   d5500:	f101 0510 	add.w	r5, r1, #16
   d5504:	9500      	str	r5, [sp, #0]
   d5506:	3114      	adds	r1, #20
{
   d5508:	4604      	mov	r4, r0
  return framRing(myFram, numberOfElements,sizeOfElement, myResult);
   d550a:	f7ff ffe9 	bl	d54e0 <_ZN8framRingC1ER7FramI2CmhR10framResult>
}
   d550e:	4620      	mov	r0, r4
   d5510:	b003      	add	sp, #12
   d5512:	bd30      	pop	{r4, r5, pc}

000d5514 <_ZN8framRing10initializeEv>:

void framRing::initialize()
{
  myRing.initialize();
   d5514:	3010      	adds	r0, #16
   d5516:	f003 bdcd 	b.w	d90b4 <_ZN14Ring_FramArray10initializeEv>
	...

000d551c <_GLOBAL__sub_I_expand>:
}

bool framRing::isFull()
{
  return myRing.isFull();
}
   d551c:	b537      	push	{r0, r1, r2, r4, r5, lr}
MCP7941x rtc = MCP7941x();
   d551e:	4820      	ldr	r0, [pc, #128]	; (d55a0 <_GLOBAL__sub_I_expand+0x84>)
   d5520:	4d20      	ldr	r5, [pc, #128]	; (d55a4 <_GLOBAL__sub_I_expand+0x88>)
   d5522:	f000 faa6 	bl	d5a72 <_ZN8MCP7941xC1Ev>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5526:	4820      	ldr	r0, [pc, #128]	; (d55a8 <_GLOBAL__sub_I_expand+0x8c>)
File myFile;
   d5528:	4a20      	ldr	r2, [pc, #128]	; (d55ac <_GLOBAL__sub_I_expand+0x90>)
   d552a:	4921      	ldr	r1, [pc, #132]	; (d55b0 <_GLOBAL__sub_I_expand+0x94>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d552c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5530:	2400      	movs	r4, #0
   d5532:	6083      	str	r3, [r0, #8]
  File() {}
   d5534:	4b1f      	ldr	r3, [pc, #124]	; (d55b4 <_GLOBAL__sub_I_expand+0x98>)
   d5536:	8204      	strh	r4, [r0, #16]
    Print() : write_error(0) {}
   d5538:	6044      	str	r4, [r0, #4]
   d553a:	6003      	str	r3, [r0, #0]
   d553c:	f006 f88a 	bl	db654 <__aeabi_atexit>
   d5540:	4b1d      	ldr	r3, [pc, #116]	; (d55b8 <_GLOBAL__sub_I_expand+0x9c>)
   d5542:	2264      	movs	r2, #100	; 0x64
   d5544:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
   d5548:	4a1c      	ldr	r2, [pc, #112]	; (d55bc <_GLOBAL__sub_I_expand+0xa0>)
   d554a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d554e:	2201      	movs	r2, #1
   d5550:	71dc      	strb	r4, [r3, #7]
   d5552:	f8a3 443c 	strh.w	r4, [r3, #1084]	; 0x43c
   d5556:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d555a:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d555e:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   d5562:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
   d5566:	7829      	ldrb	r1, [r5, #0]
   d5568:	f3bf 8f5b 	dmb	ish
   d556c:	4011      	ands	r1, r2
   d556e:	461c      	mov	r4, r3
   d5570:	d10b      	bne.n	d558a <_GLOBAL__sub_I_expand+0x6e>
   d5572:	4628      	mov	r0, r5
   d5574:	9101      	str	r1, [sp, #4]
   d5576:	f7fe fd94 	bl	d40a2 <__cxa_guard_acquire>
   d557a:	9901      	ldr	r1, [sp, #4]
   d557c:	b128      	cbz	r0, d558a <_GLOBAL__sub_I_expand+0x6e>
   d557e:	4810      	ldr	r0, [pc, #64]	; (d55c0 <_GLOBAL__sub_I_expand+0xa4>)
   d5580:	f004 f9f8 	bl	d9974 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5584:	4628      	mov	r0, r5
   d5586:	f7fe fd91 	bl	d40ac <__cxa_guard_release>
   d558a:	4b0d      	ldr	r3, [pc, #52]	; (d55c0 <_GLOBAL__sub_I_expand+0xa4>)
SdFat SD;
   d558c:	4a07      	ldr	r2, [pc, #28]	; (d55ac <_GLOBAL__sub_I_expand+0x90>)
   d558e:	490d      	ldr	r1, [pc, #52]	; (d55c4 <_GLOBAL__sub_I_expand+0xa8>)
   d5590:	4809      	ldr	r0, [pc, #36]	; (d55b8 <_GLOBAL__sub_I_expand+0x9c>)
   d5592:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
}
   d5596:	b003      	add	sp, #12
   d5598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
SdFat SD;
   d559c:	f006 b85a 	b.w	db654 <__aeabi_atexit>
   d55a0:	2003e50c 	.word	0x2003e50c
   d55a4:	2003c1d4 	.word	0x2003c1d4
   d55a8:	2003e4d8 	.word	0x2003e4d8
   d55ac:	2003c1d0 	.word	0x2003c1d0
   d55b0:	000d5097 	.word	0x000d5097
   d55b4:	000df750 	.word	0x000df750
   d55b8:	2003e050 	.word	0x2003e050
   d55bc:	000df708 	.word	0x000df708
   d55c0:	2003c1d8 	.word	0x2003c1d8
   d55c4:	000d40e3 	.word	0x000d40e3

000d55c8 <_ZN18SdCardPrintHandler16dateTimeCallbackEPtS0_>:
	// Start over at beginning of buffer
	bufOffset = 0;
}

// [static]
void SdCardPrintHandler::dateTimeCallback(uint16_t* date, uint16_t* time) {
   d55c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55ca:	460e      	mov	r6, r1
   d55cc:	4605      	mov	r5, r0
	*date = FAT_DATE(Time.year(), Time.month(), Time.day());
   d55ce:	f005 f893 	bl	da6f8 <_ZN9TimeClass4yearEv>
   d55d2:	4604      	mov	r4, r0
   d55d4:	f005 f888 	bl	da6e8 <_ZN9TimeClass5monthEv>
   d55d8:	4607      	mov	r7, r0
   d55da:	f005 f879 	bl	da6d0 <_ZN9TimeClass3dayEv>
 * \param[in] day [1,31]
 *
 * \return Packed date for dir_t entry.
 */
static inline uint16_t FAT_DATE(uint16_t year, uint8_t month, uint8_t day) {
  return (year - 1980) << 9 | month << 5 | day;
   d55de:	017f      	lsls	r7, r7, #5
   d55e0:	b2c3      	uxtb	r3, r0
   d55e2:	b2a4      	uxth	r4, r4
   d55e4:	f407 57ff 	and.w	r7, r7, #8160	; 0x1fe0
   d55e8:	f2a4 74bc 	subw	r4, r4, #1980	; 0x7bc
   d55ec:	433b      	orrs	r3, r7
   d55ee:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
   d55f2:	802b      	strh	r3, [r5, #0]
	*time = FAT_TIME(Time.hour(), Time.minute(), Time.second());
   d55f4:	f005 f848 	bl	da688 <_ZN9TimeClass4hourEv>
   d55f8:	4604      	mov	r4, r0
   d55fa:	f005 f851 	bl	da6a0 <_ZN9TimeClass6minuteEv>
   d55fe:	4605      	mov	r5, r0
   d5600:	f005 f85a 	bl	da6b8 <_ZN9TimeClass6secondEv>
 * \param[in] second [0,59]
 *
 * \return Packed time for dir_t entry.
 */
static inline uint16_t FAT_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour << 11 | minute << 5 | second >> 1;
   d5604:	02e4      	lsls	r4, r4, #11
   d5606:	016d      	lsls	r5, r5, #5
   d5608:	f404 24ff 	and.w	r4, r4, #522240	; 0x7f800
   d560c:	f405 55ff 	and.w	r5, r5, #8160	; 0x1fe0
   d5610:	432c      	orrs	r4, r5
   d5612:	f3c0 0046 	ubfx	r0, r0, #1, #7
   d5616:	4304      	orrs	r4, r0
   d5618:	8034      	strh	r4, [r6, #0]
}
   d561a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d561c <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d561c:	b40e      	push	{r1, r2, r3}
   d561e:	b503      	push	{r0, r1, lr}
   d5620:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   d5622:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5624:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d5628:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d562a:	f004 fe60 	bl	da2ee <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d562e:	b002      	add	sp, #8
   d5630:	f85d eb04 	ldr.w	lr, [sp], #4
   d5634:	b003      	add	sp, #12
   d5636:	4770      	bx	lr

000d5638 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE>:
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
   d5638:	b570      	push	{r4, r5, r6, lr}
   d563a:	7302      	strb	r2, [r0, #12]
class SPISettings : public Printable {
   d563c:	4a16      	ldr	r2, [pc, #88]	; (d5698 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE+0x60>)
   d563e:	6102      	str	r2, [r0, #16]
   d5640:	791a      	ldrb	r2, [r3, #4]
   d5642:	7502      	strb	r2, [r0, #20]
   d5644:	689a      	ldr	r2, [r3, #8]
   d5646:	899b      	ldrh	r3, [r3, #12]
   d5648:	6182      	str	r2, [r0, #24]
   d564a:	8383      	strh	r3, [r0, #28]
   d564c:	4a13      	ldr	r2, [pc, #76]	; (d569c <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE+0x64>)
   d564e:	4b14      	ldr	r3, [pc, #80]	; (d56a0 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE+0x68>)
   d5650:	6203      	str	r3, [r0, #32]
   d5652:	230a      	movs	r3, #10
   d5654:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
   d5658:	f242 7310 	movw	r3, #10000	; 0x2710
   d565c:	62c3      	str	r3, [r0, #44]	; 0x2c
   d565e:	2301      	movs	r3, #1
    Print() : write_error(0) {}
   d5660:	2500      	movs	r5, #0
   d5662:	4e10      	ldr	r6, [pc, #64]	; (d56a4 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle11SPISettingsE+0x6c>)
   d5664:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
   d5668:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
   d566c:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc

	  _Rb_tree_impl()
	    _GLIBCXX_NOEXCEPT_IF(
		is_nothrow_default_constructible<_Node_allocator>::value
		&& is_nothrow_default_constructible<_Base_key_compare>::value )
	  : _Node_allocator()
   d5670:	f500 738e 	add.w	r3, r0, #284	; 0x11c
   d5674:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
      _M_header._M_left = &_M_header;
   d5678:	e9c0 5348 	strd	r5, r3, [r0, #288]	; 0x120
      _M_node_count = 0;
   d567c:	e9c0 354a 	strd	r3, r5, [r0, #296]	; 0x128
   d5680:	6045      	str	r5, [r0, #4]
   d5682:	6006      	str	r6, [r0, #0]
   d5684:	6081      	str	r1, [r0, #8]
   d5686:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
   d568a:	f8a0 50f4 	strh.w	r5, [r0, #244]	; 0xf4
      _M_header._M_color = _S_red;
   d568e:	f880 511c 	strb.w	r5, [r0, #284]	; 0x11c
   d5692:	f8c0 5130 	str.w	r5, [r0, #304]	; 0x130
}
   d5696:	bd70      	pop	{r4, r5, r6, pc}
   d5698:	000df708 	.word	0x000df708
   d569c:	000f4240 	.word	0x000f4240
   d56a0:	000df770 	.word	0x000df770
   d56a4:	000df80c 	.word	0x000df80c

000d56a8 <_ZN18SdCardPrintHandler7getNameEi>:
const char *SdCardPrintHandler::getName(int num) {
   d56a8:	b510      	push	{r4, lr}
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
   d56aa:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
const char *SdCardPrintHandler::getName(int num) {
   d56ae:	460b      	mov	r3, r1
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
   d56b0:	4a03      	ldr	r2, [pc, #12]	; (d56c0 <_ZN18SdCardPrintHandler7getNameEi+0x18>)
   d56b2:	210c      	movs	r1, #12
   d56b4:	4620      	mov	r0, r4
   d56b6:	f004 f8c1 	bl	d983c <snprintf>
}
   d56ba:	4620      	mov	r0, r4
   d56bc:	bd10      	pop	{r4, pc}
   d56be:	bf00      	nop
   d56c0:	000df775 	.word	0x000df775

000d56c4 <_ZN18SdCardPrintHandler13checkMaxFilesEv>:
void SdCardPrintHandler::checkMaxFiles() {
   d56c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		DEBUG_NORMAL(("removing old log file %s", name));
   d56c8:	f8df 905c 	ldr.w	r9, [pc, #92]	; d5728 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x64>
       *  element in the %set.  Iteration is done in ascending order according
       *  to the keys.
       */
      iterator
      begin() const _GLIBCXX_NOEXCEPT
      { return _M_t.begin(); }
   d56cc:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
void SdCardPrintHandler::checkMaxFiles() {
   d56d0:	4604      	mov	r4, r0
		FatFile::remove(&logsDir, name);
   d56d2:	f100 08d0 	add.w	r8, r0, #208	; 0xd0
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   d56d6:	f500 778e 	add.w	r7, r0, #284	; 0x11c
	while(fileNums.size() > maxFilesToKeep) {
   d56da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d56dc:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   d56e0:	429a      	cmp	r2, r3
   d56e2:	d21f      	bcs.n	d5724 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x60>
		const char *name = getName(*it);
   d56e4:	6929      	ldr	r1, [r5, #16]
   d56e6:	4620      	mov	r0, r4
   d56e8:	f7ff ffde 	bl	d56a8 <_ZN18SdCardPrintHandler7getNameEi>
   d56ec:	4606      	mov	r6, r0
		DEBUG_NORMAL(("removing old log file %s", name));
   d56ee:	f005 fc3f 	bl	daf70 <_Z16_fetch_usbserialv>
   d56f2:	4632      	mov	r2, r6
   d56f4:	4649      	mov	r1, r9
   d56f6:	f7ff ff91 	bl	d561c <_ZN5Print8printlnfEPKcz>
		FatFile::remove(&logsDir, name);
   d56fa:	4631      	mov	r1, r6
   d56fc:	4640      	mov	r0, r8
   d56fe:	f001 fcc7 	bl	d7090 <_ZN7FatFile6removeEPS_PKc>
	_M_node = _Rb_tree_increment(_M_node);
   d5702:	4628      	mov	r0, r5
   d5704:	f005 fff0 	bl	db6e8 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
				(const_cast<_Base_ptr>(__position._M_node),
   d5708:	4639      	mov	r1, r7
	_M_node = _Rb_tree_increment(_M_node);
   d570a:	4606      	mov	r6, r0
				(const_cast<_Base_ptr>(__position._M_node),
   d570c:	4628      	mov	r0, r5
   d570e:	f006 f85c 	bl	db7ca <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5712:	f7fe fcc4 	bl	d409e <_ZdlPv>
      _M_drop_node(__y);
      --_M_impl._M_node_count;
   d5716:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   d571a:	3b01      	subs	r3, #1
   d571c:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
		it = fileNums.erase(it);
   d5720:	4635      	mov	r5, r6
	while(fileNums.size() > maxFilesToKeep) {
   d5722:	e7da      	b.n	d56da <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x16>
}
   d5724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5728:	000df77e 	.word	0x000df77e

000d572c <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d572c:	b570      	push	{r4, r5, r6, lr}
   d572e:	4605      	mov	r5, r0
   d5730:	460c      	mov	r4, r1
      while (__x != 0)
   d5732:	b14c      	cbz	r4, d5748 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x1c>
	  _M_erase(_S_right(__x));
   d5734:	68e1      	ldr	r1, [r4, #12]
   d5736:	4628      	mov	r0, r5
   d5738:	f7ff fff8 	bl	d572c <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>
	  _Link_type __y = _S_left(__x);
   d573c:	68a6      	ldr	r6, [r4, #8]
   d573e:	4620      	mov	r0, r4
   d5740:	f7fe fcad 	bl	d409e <_ZdlPv>
	  __x = __y;
   d5744:	4634      	mov	r4, r6
      while (__x != 0)
   d5746:	e7f4      	b.n	d5732 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x6>
    }
   d5748:	bd70      	pop	{r4, r5, r6, pc}
	...

000d574c <_ZN18SdCardPrintHandlerD1Ev>:
SdCardPrintHandler::~SdCardPrintHandler() {
   d574c:	b510      	push	{r4, lr}
   d574e:	4b05      	ldr	r3, [pc, #20]	; (d5764 <_ZN18SdCardPrintHandlerD1Ev+0x18>)
      { _M_erase(_M_begin()); }
   d5750:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
   d5754:	6003      	str	r3, [r0, #0]
   d5756:	4604      	mov	r4, r0
   d5758:	f500 708c 	add.w	r0, r0, #280	; 0x118
   d575c:	f7ff ffe6 	bl	d572c <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>
}
   d5760:	4620      	mov	r0, r4
   d5762:	bd10      	pop	{r4, pc}
   d5764:	000df80c 	.word	0x000df80c

000d5768 <_ZN18SdCardPrintHandlerD0Ev>:
SdCardPrintHandler::~SdCardPrintHandler() {
   d5768:	b510      	push	{r4, lr}
   d576a:	4604      	mov	r4, r0
}
   d576c:	f7ff ffee 	bl	d574c <_ZN18SdCardPrintHandlerD1Ev>
   d5770:	4620      	mov	r0, r4
   d5772:	f44f 719a 	mov.w	r1, #308	; 0x134
   d5776:	f005 ff72 	bl	db65e <_ZdlPvj>
   d577a:	4620      	mov	r0, r4
   d577c:	bd10      	pop	{r4, pc}

000d577e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d577e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5782:	4617      	mov	r7, r2
      { return &this->_M_impl._M_header; }
   d5784:	f101 0a04 	add.w	sl, r1, #4
      _Link_type __x = _M_begin();
   d5788:	688a      	ldr	r2, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d578a:	4604      	mov	r4, r0
   d578c:	460e      	mov	r6, r1
      { return &this->_M_impl._M_header; }
   d578e:	4655      	mov	r5, sl
      bool __comp = true;
   d5790:	2301      	movs	r3, #1
      while (__x != 0)
   d5792:	b15a      	cbz	r2, d57ac <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x2e>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d5794:	6839      	ldr	r1, [r7, #0]
   d5796:	6913      	ldr	r3, [r2, #16]
   d5798:	4299      	cmp	r1, r3
   d579a:	bfb4      	ite	lt
   d579c:	6891      	ldrlt	r1, [r2, #8]
   d579e:	68d1      	ldrge	r1, [r2, #12]
   d57a0:	4615      	mov	r5, r2
   d57a2:	bfb4      	ite	lt
   d57a4:	2301      	movlt	r3, #1
   d57a6:	2300      	movge	r3, #0
   d57a8:	460a      	mov	r2, r1
   d57aa:	e7f2      	b.n	d5792 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x14>
      if (__comp)
   d57ac:	b17b      	cbz	r3, d57ce <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x50>
	  if (__j == begin())
   d57ae:	68f3      	ldr	r3, [r6, #12]
   d57b0:	42ab      	cmp	r3, r5
   d57b2:	d029      	beq.n	d5808 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x8a>
	_M_node = _Rb_tree_decrement(_M_node);
   d57b4:	4628      	mov	r0, r5
   d57b6:	f005 ffaa 	bl	db70e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d57ba:	6902      	ldr	r2, [r0, #16]
   d57bc:	683b      	ldr	r3, [r7, #0]
   d57be:	429a      	cmp	r2, r3
   d57c0:	db22      	blt.n	d5808 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x8a>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d57c2:	6020      	str	r0, [r4, #0]
   d57c4:	2300      	movs	r3, #0
   d57c6:	7123      	strb	r3, [r4, #4]
    }
   d57c8:	4620      	mov	r0, r4
   d57ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d57ce:	4628      	mov	r0, r5
   d57d0:	e7f3      	b.n	d57ba <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x3c>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
   d57d2:	683a      	ldr	r2, [r7, #0]
   d57d4:	692b      	ldr	r3, [r5, #16]
   d57d6:	429a      	cmp	r2, r3
   d57d8:	bfac      	ite	ge
   d57da:	f04f 0900 	movge.w	r9, #0
   d57de:	f04f 0901 	movlt.w	r9, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d57e2:	2014      	movs	r0, #20
   d57e4:	f7fe fc57 	bl	d4096 <_Znwj>
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d57e8:	683b      	ldr	r3, [r7, #0]
   d57ea:	6103      	str	r3, [r0, #16]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d57ec:	4680      	mov	r8, r0
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d57ee:	4653      	mov	r3, sl
   d57f0:	4601      	mov	r1, r0
   d57f2:	462a      	mov	r2, r5
   d57f4:	4648      	mov	r0, r9
   d57f6:	f005 ff8c 	bl	db712 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
   d57fa:	6973      	ldr	r3, [r6, #20]
   d57fc:	f8c4 8000 	str.w	r8, [r4]
   d5800:	3301      	adds	r3, #1
   d5802:	6173      	str	r3, [r6, #20]
   d5804:	2301      	movs	r3, #1
   d5806:	e7de      	b.n	d57c6 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x48>
	bool __insert_left = (__x != 0 || __p == _M_end()
   d5808:	45aa      	cmp	sl, r5
   d580a:	d1e2      	bne.n	d57d2 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x54>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
   d580c:	f04f 0901 	mov.w	r9, #1
   d5810:	e7e7      	b.n	d57e2 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x64>

000d5812 <_ZN18SdCardPrintHandler11openLogFileEv>:
bool SdCardPrintHandler::openLogFile() {
   d5812:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const char *name = getName(lastFileNum);
   d5814:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
bool SdCardPrintHandler::openLogFile() {
   d5818:	4604      	mov	r4, r0
	const char *name = getName(lastFileNum);
   d581a:	f7ff ff45 	bl	d56a8 <_ZN18SdCardPrintHandler7getNameEi>
	if (curLogFile.open(&logsDir, name, O_RDWR | O_APPEND | O_CREAT)) {
   d581e:	f240 230a 	movw	r3, #522	; 0x20a
	const char *name = getName(lastFileNum);
   d5822:	4602      	mov	r2, r0
	if (curLogFile.open(&logsDir, name, O_RDWR | O_APPEND | O_CREAT)) {
   d5824:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
   d5828:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   d582c:	f001 fbe3 	bl	d6ff6 <_ZN7FatFile4openEPS_PKci>
   d5830:	4605      	mov	r5, r0
   d5832:	b130      	cbz	r0, d5842 <_ZN18SdCardPrintHandler11openLogFileEv+0x30>
       *  Insertion requires logarithmic time.
       */
      std::pair<iterator, bool>
      insert(const value_type& __x)
      {
	std::pair<typename _Rep_type::iterator, bool> __p =
   d5834:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   d5838:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d583c:	4668      	mov	r0, sp
   d583e:	f7ff ff9e 	bl	d577e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
}
   d5842:	4628      	mov	r0, r5
   d5844:	b003      	add	sp, #12
   d5846:	bd30      	pop	{r4, r5, pc}

000d5848 <_ZN18SdCardPrintHandler8scanCardEv>:
void SdCardPrintHandler::scanCard() {
   d5848:	b530      	push	{r4, r5, lr}
	needsScanCard = false;
   d584a:	2300      	movs	r3, #0
   d584c:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
	if (!lastBeginResult) {
   d5850:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
void SdCardPrintHandler::scanCard() {
   d5854:	b09d      	sub	sp, #116	; 0x74
   d5856:	4604      	mov	r4, r0
	if (!lastBeginResult) {
   d5858:	bb03      	cbnz	r3, d589c <_ZN18SdCardPrintHandler8scanCardEv+0x54>
    m_dateTime = dateTime;
   d585a:	4b43      	ldr	r3, [pc, #268]	; (d5968 <_ZN18SdCardPrintHandler8scanCardEv+0x120>)
   d585c:	4a43      	ldr	r2, [pc, #268]	; (d596c <_ZN18SdCardPrintHandler8scanCardEv+0x124>)
		pinMode(csPin, OUTPUT);
   d585e:	7b00      	ldrb	r0, [r0, #12]
   d5860:	601a      	str	r2, [r3, #0]
   d5862:	2101      	movs	r1, #1
   d5864:	f005 fe74 	bl	db550 <pinMode>
   d5868:	4b41      	ldr	r3, [pc, #260]	; (d5970 <_ZN18SdCardPrintHandler8scanCardEv+0x128>)
   d586a:	930c      	str	r3, [sp, #48]	; 0x30
   d586c:	7d23      	ldrb	r3, [r4, #20]
   d586e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d5872:	69a3      	ldr	r3, [r4, #24]
   d5874:	930e      	str	r3, [sp, #56]	; 0x38
		lastBeginResult = sd.begin(csPin, spiSettings);
   d5876:	7b21      	ldrb	r1, [r4, #12]
   d5878:	8ba3      	ldrh	r3, [r4, #28]
   d587a:	68a0      	ldr	r0, [r4, #8]
   d587c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   d5880:	aa0c      	add	r2, sp, #48	; 0x30
   d5882:	f7ff fc35 	bl	d50f0 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   d5886:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
		if (!lastBeginResult) {
   d588a:	b938      	cbnz	r0, d589c <_ZN18SdCardPrintHandler8scanCardEv+0x54>
		needsScanCard = true;
   d588c:	2301      	movs	r3, #1
   d588e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   d5892:	f003 fd0b 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
		lastCardCheck = millis();
   d5896:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
   d589a:	e05d      	b.n	d5958 <_ZN18SdCardPrintHandler8scanCardEv+0x110>
	if (logsDirName != NULL && !sd.exists(logsDirName)) {
   d589c:	6a22      	ldr	r2, [r4, #32]
   d589e:	b302      	cbz	r2, d58e2 <_ZN18SdCardPrintHandler8scanCardEv+0x9a>
   d58a0:	68a1      	ldr	r1, [r4, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d58a2:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   d58a4:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d58a8:	a80c      	add	r0, sp, #48	; 0x30
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d58aa:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    return file.open(this, path, O_RDONLY);
   d58ae:	f001 fba2 	bl	d6ff6 <_ZN7FatFile4openEPS_PKci>
   d58b2:	4605      	mov	r5, r0
   d58b4:	b9a8      	cbnz	r0, d58e2 <_ZN18SdCardPrintHandler8scanCardEv+0x9a>
		DEBUG_NORMAL(("creating logs dir %s", logsDirName));
   d58b6:	f005 fb5b 	bl	daf70 <_Z16_fetch_usbserialv>
   d58ba:	6a22      	ldr	r2, [r4, #32]
   d58bc:	492d      	ldr	r1, [pc, #180]	; (d5974 <_ZN18SdCardPrintHandler8scanCardEv+0x12c>)
   d58be:	f7ff fead 	bl	d561c <_ZN5Print8printlnfEPKcz>
		if (!sd.mkdir(logsDirName)) {
   d58c2:	68a1      	ldr	r1, [r4, #8]
    return sub.mkdir(vwd(), path, pFlag);
   d58c4:	6a22      	ldr	r2, [r4, #32]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d58c6:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
   d58ca:	2301      	movs	r3, #1
   d58cc:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d58d0:	a80c      	add	r0, sp, #48	; 0x30
   d58d2:	f001 fc6e 	bl	d71b2 <_ZN7FatFile5mkdirEPS_PKcb>
   d58d6:	b920      	cbnz	r0, d58e2 <_ZN18SdCardPrintHandler8scanCardEv+0x9a>
			DEBUG_NORMAL(("mkdir failed"));
   d58d8:	f005 fb4a 	bl	daf70 <_Z16_fetch_usbserialv>
   d58dc:	4926      	ldr	r1, [pc, #152]	; (d5978 <_ZN18SdCardPrintHandler8scanCardEv+0x130>)
   d58de:	f7ff fe9d 	bl	d561c <_ZN5Print8printlnfEPKcz>
    return &m_vwd;
   d58e2:	68a1      	ldr	r1, [r4, #8]
	if (logsDir.open(sd.vwd(), logsDirName, O_READ)) {
   d58e4:	6a22      	ldr	r2, [r4, #32]
   d58e6:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   d58ea:	2300      	movs	r3, #0
   d58ec:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d58f0:	4628      	mov	r0, r5
   d58f2:	f001 fb80 	bl	d6ff6 <_ZN7FatFile4openEPS_PKci>
   d58f6:	b388      	cbz	r0, d595c <_ZN18SdCardPrintHandler8scanCardEv+0x114>
    seekSet(0);
   d58f8:	2100      	movs	r1, #0
   d58fa:	4628      	mov	r0, r5
   d58fc:	f001 fa51 	bl	d6da2 <_ZN7FatFile7seekSetEm>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5900:	2300      	movs	r3, #0
   d5902:	f8ad 300c 	strh.w	r3, [sp, #12]
		while (tempFile.openNext(&logsDir, O_READ)) {
   d5906:	2200      	movs	r2, #0
   d5908:	4629      	mov	r1, r5
   d590a:	a803      	add	r0, sp, #12
   d590c:	f001 faf9 	bl	d6f02 <_ZN7FatFile8openNextEPS_i>
   d5910:	b1d0      	cbz	r0, d5948 <_ZN18SdCardPrintHandler8scanCardEv+0x100>
			tempFile.getName(name, sizeof(name));
   d5912:	2240      	movs	r2, #64	; 0x40
   d5914:	a90c      	add	r1, sp, #48	; 0x30
   d5916:	a803      	add	r0, sp, #12
   d5918:	f000 fcd0 	bl	d62bc <_ZN7FatFile7getNameEPcj>
			int num = atoi(name);
   d591c:	a80c      	add	r0, sp, #48	; 0x30
   d591e:	f007 ff39 	bl	dd794 <atoi>
   d5922:	9000      	str	r0, [sp, #0]
			if (num != 0) {
   d5924:	b160      	cbz	r0, d5940 <_ZN18SdCardPrintHandler8scanCardEv+0xf8>
   d5926:	466a      	mov	r2, sp
   d5928:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d592c:	a801      	add	r0, sp, #4
   d592e:	f7ff ff26 	bl	d577e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
				if (num > lastFileNum) {
   d5932:	9b00      	ldr	r3, [sp, #0]
   d5934:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   d5938:	429a      	cmp	r2, r3
					lastFileNum = num;
   d593a:	bfb8      	it	lt
   d593c:	f8c4 30cc 	strlt.w	r3, [r4, #204]	; 0xcc
			tempFile.close();
   d5940:	a803      	add	r0, sp, #12
   d5942:	f001 fb51 	bl	d6fe8 <_ZN7FatFile5closeEv>
		while (tempFile.openNext(&logsDir, O_READ)) {
   d5946:	e7de      	b.n	d5906 <_ZN18SdCardPrintHandler8scanCardEv+0xbe>
		checkMaxFiles();
   d5948:	4620      	mov	r0, r4
   d594a:	f7ff febb 	bl	d56c4 <_ZN18SdCardPrintHandler13checkMaxFilesEv>
		if (!openLogFile()) {
   d594e:	4620      	mov	r0, r4
   d5950:	f7ff ff5f 	bl	d5812 <_ZN18SdCardPrintHandler11openLogFileEv>
   d5954:	2800      	cmp	r0, #0
   d5956:	d099      	beq.n	d588c <_ZN18SdCardPrintHandler8scanCardEv+0x44>
}
   d5958:	b01d      	add	sp, #116	; 0x74
   d595a:	bd30      	pop	{r4, r5, pc}
		DEBUG_NORMAL(("failed to open logs dir"));
   d595c:	f005 fb08 	bl	daf70 <_Z16_fetch_usbserialv>
   d5960:	4906      	ldr	r1, [pc, #24]	; (d597c <_ZN18SdCardPrintHandler8scanCardEv+0x134>)
   d5962:	f7ff fe5b 	bl	d561c <_ZN5Print8printlnfEPKcz>
   d5966:	e791      	b.n	d588c <_ZN18SdCardPrintHandler8scanCardEv+0x44>
   d5968:	2003e510 	.word	0x2003e510
   d596c:	000d55c9 	.word	0x000d55c9
   d5970:	000df708 	.word	0x000df708
   d5974:	000df797 	.word	0x000df797
   d5978:	000df7ac 	.word	0x000df7ac
   d597c:	000df7b9 	.word	0x000df7b9

000d5980 <_ZN18SdCardPrintHandler8writeBufEv>:
void SdCardPrintHandler::writeBuf() {
   d5980:	b538      	push	{r3, r4, r5, lr}
   d5982:	4604      	mov	r4, r0
	if (writeToStream) {
   d5984:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d5986:	b128      	cbz	r0, d5994 <_ZN18SdCardPrintHandler8writeBufEv+0x14>
		writeToStream->write(buf, bufOffset);
   d5988:	6803      	ldr	r3, [r0, #0]
   d598a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d598c:	68db      	ldr	r3, [r3, #12]
   d598e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d5992:	4798      	blx	r3
	if (needsScanCard) {
   d5994:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   d5998:	b12b      	cbz	r3, d59a6 <_ZN18SdCardPrintHandler8writeBufEv+0x26>
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
   d599a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d599e:	bbab      	cbnz	r3, d5a0c <_ZN18SdCardPrintHandler8writeBufEv+0x8c>
			scanCard();
   d59a0:	4620      	mov	r0, r4
   d59a2:	f7ff ff51 	bl	d5848 <_ZN18SdCardPrintHandler8scanCardEv>
	if (lastBeginResult) {
   d59a6:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
   d59aa:	b363      	cbz	r3, d5a06 <_ZN18SdCardPrintHandler8writeBufEv+0x86>
		if (curLogFile.isOpen()) {
   d59ac:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   d59b0:	b34b      	cbz	r3, d5a06 <_ZN18SdCardPrintHandler8writeBufEv+0x86>
			if (curLogFile.write(buf, bufOffset) > 0) {
   d59b2:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
   d59b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d59b8:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d59bc:	4628      	mov	r0, r5
   d59be:	f001 fc49 	bl	d7254 <_ZN7FatFile5writeEPKvj>
   d59c2:	2800      	cmp	r0, #0
   d59c4:	dd2b      	ble.n	d5a1e <_ZN18SdCardPrintHandler8writeBufEv+0x9e>
				if (syncEveryEntry) {
   d59c6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d59ca:	b113      	cbz	r3, d59d2 <_ZN18SdCardPrintHandler8writeBufEv+0x52>
					curLogFile.sync();
   d59cc:	4628      	mov	r0, r5
   d59ce:	f001 fad5 	bl	d6f7c <_ZN7FatFile4syncEv>
				if (curLogFile.fileSize() > desiredFileSize) {
   d59d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d59d4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d59d8:	429a      	cmp	r2, r3
   d59da:	d214      	bcs.n	d5a06 <_ZN18SdCardPrintHandler8writeBufEv+0x86>
					curLogFile.close();
   d59dc:	4628      	mov	r0, r5
   d59de:	f001 fb03 	bl	d6fe8 <_ZN7FatFile5closeEv>
					lastFileNum++;
   d59e2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d59e6:	3301      	adds	r3, #1
   d59e8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
					DEBUG_NORMAL(("creating new log file %04d", lastFileNum));
   d59ec:	f005 fac0 	bl	daf70 <_Z16_fetch_usbserialv>
   d59f0:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   d59f4:	4913      	ldr	r1, [pc, #76]	; (d5a44 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>)
   d59f6:	f7ff fe11 	bl	d561c <_ZN5Print8printlnfEPKcz>
					openLogFile();
   d59fa:	4620      	mov	r0, r4
   d59fc:	f7ff ff09 	bl	d5812 <_ZN18SdCardPrintHandler11openLogFileEv>
					checkMaxFiles();
   d5a00:	4620      	mov	r0, r4
   d5a02:	f7ff fe5f 	bl	d56c4 <_ZN18SdCardPrintHandler13checkMaxFilesEv>
	bufOffset = 0;
   d5a06:	2300      	movs	r3, #0
   d5a08:	63a3      	str	r3, [r4, #56]	; 0x38
}
   d5a0a:	bd38      	pop	{r3, r4, r5, pc}
   d5a0c:	f003 fc4e 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
   d5a10:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d5a14:	1ac0      	subs	r0, r0, r3
   d5a16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5a18:	4298      	cmp	r0, r3
   d5a1a:	d2c1      	bcs.n	d59a0 <_ZN18SdCardPrintHandler8writeBufEv+0x20>
   d5a1c:	e7c3      	b.n	d59a6 <_ZN18SdCardPrintHandler8writeBufEv+0x26>
				DEBUG_NORMAL(("write to sd card failed"));
   d5a1e:	f005 faa7 	bl	daf70 <_Z16_fetch_usbserialv>
   d5a22:	4909      	ldr	r1, [pc, #36]	; (d5a48 <_ZN18SdCardPrintHandler8writeBufEv+0xc8>)
   d5a24:	f7ff fdfa 	bl	d561c <_ZN5Print8printlnfEPKcz>
				curLogFile.close();
   d5a28:	4628      	mov	r0, r5
   d5a2a:	f001 fadd 	bl	d6fe8 <_ZN7FatFile5closeEv>
				logsDir.close();
   d5a2e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d5a32:	f001 fad9 	bl	d6fe8 <_ZN7FatFile5closeEv>
				needsScanCard = true;
   d5a36:	2301      	movs	r3, #1
   d5a38:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
				lastCardCheck = 0;
   d5a3c:	2300      	movs	r3, #0
   d5a3e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   d5a42:	e7e0      	b.n	d5a06 <_ZN18SdCardPrintHandler8writeBufEv+0x86>
   d5a44:	000df7d1 	.word	0x000df7d1
   d5a48:	000df7ec 	.word	0x000df7ec

000d5a4c <_ZN18SdCardPrintHandler5writeEh>:
size_t SdCardPrintHandler::write(uint8_t c) {
   d5a4c:	b508      	push	{r3, lr}
	buf[bufOffset++] = c;
   d5a4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d5a50:	1c5a      	adds	r2, r3, #1
   d5a52:	4403      	add	r3, r0
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d5a54:	2a7f      	cmp	r2, #127	; 0x7f
	buf[bufOffset++] = c;
   d5a56:	6382      	str	r2, [r0, #56]	; 0x38
   d5a58:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d5a5c:	d801      	bhi.n	d5a62 <_ZN18SdCardPrintHandler5writeEh+0x16>
   d5a5e:	290a      	cmp	r1, #10
   d5a60:	d101      	bne.n	d5a66 <_ZN18SdCardPrintHandler5writeEh+0x1a>
		writeBuf();
   d5a62:	f7ff ff8d 	bl	d5980 <_ZN18SdCardPrintHandler8writeBufEv>
}
   d5a66:	2001      	movs	r0, #1
   d5a68:	bd08      	pop	{r3, pc}

000d5a6a <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5a6a:	6803      	ldr	r3, [r0, #0]
   d5a6c:	b2c9      	uxtb	r1, r1
   d5a6e:	689b      	ldr	r3, [r3, #8]
   d5a70:	4718      	bx	r3

000d5a72 <_ZN8MCP7941xC1Ev>:
  //  Wire.setSpeed(400000);
  // Initialize the I2C bus if not already enabled
  // if (!Wire.isEnabled()) {
  //     Wire.begin();
  // }
}
   d5a72:	4770      	bx	lr

000d5a74 <_ZN8MCP7941x13getMacAddressEPh>:
}


// Function to read the mac address from the eeprom:
void MCP7941x::getMacAddress(byte *mac_address)
{
   d5a74:	b538      	push	{r3, r4, r5, lr}
   d5a76:	460c      	mov	r4, r1
  Wire.beginTransmission(MCP7941x_EEPROM_I2C_ADDR);
   d5a78:	f005 fdc4 	bl	db604 <_Z19__fetch_global_Wirev>
   d5a7c:	2157      	movs	r1, #87	; 0x57
   d5a7e:	f005 fc5d 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
  WireSend(MAC_LOCATION);
   d5a82:	f005 fdbf 	bl	db604 <_Z19__fetch_global_Wirev>
   d5a86:	21f2      	movs	r1, #242	; 0xf2
   d5a88:	f7ff ffef 	bl	d5a6a <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d5a8c:	f005 fdba 	bl	db604 <_Z19__fetch_global_Wirev>
   d5a90:	f005 fc5b 	bl	db34a <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(MCP7941x_EEPROM_I2C_ADDR, 6);
   d5a94:	f005 fdb6 	bl	db604 <_Z19__fetch_global_Wirev>
   d5a98:	2206      	movs	r2, #6
   d5a9a:	2157      	movs	r1, #87	; 0x57
   d5a9c:	f005 fc47 	bl	db32e <_ZN7TwoWire11requestFromEhj>

  for( int i=0; i<6; i++ )
   d5aa0:	1e65      	subs	r5, r4, #1
   d5aa2:	3405      	adds	r4, #5
  {
    mac_address[i] = WireReceive();
   d5aa4:	f005 fdae 	bl	db604 <_Z19__fetch_global_Wirev>
   d5aa8:	6803      	ldr	r3, [r0, #0]
   d5aaa:	695b      	ldr	r3, [r3, #20]
   d5aac:	4798      	blx	r3
   d5aae:	f805 0f01 	strb.w	r0, [r5, #1]!
  for( int i=0; i<6; i++ )
   d5ab2:	42a5      	cmp	r5, r4
   d5ab4:	d1f6      	bne.n	d5aa4 <_ZN8MCP7941x13getMacAddressEPh+0x30>
  }
}
   d5ab6:	bd38      	pop	{r3, r4, r5, pc}

000d5ab8 <_ZN8MCP7941x11setDateTimeEhhhhhhh>:
  byte hr,          // 1-23
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
   d5ab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5abc:	461e      	mov	r6, r3
   d5abe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   d5ac2:	9301      	str	r3, [sp, #4]
   d5ac4:	4617      	mov	r7, r2
   d5ac6:	460d      	mov	r5, r1
   d5ac8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5acc:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   d5ad0:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
  WITH_LOCK(Wire) {
   d5ad4:	f005 fd96 	bl	db604 <_Z19__fetch_global_Wirev>
   d5ad8:	4682      	mov	sl, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5ada:	f005 fc42 	bl	db362 <_ZN7TwoWire4lockEv>
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5ade:	f005 fd91 	bl	db604 <_Z19__fetch_global_Wirev>
   d5ae2:	216f      	movs	r1, #111	; 0x6f
  return ( (val/10*16) + (val%10) );
   d5ae4:	240a      	movs	r4, #10
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5ae6:	f005 fc29 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5aea:	f005 fd8b 	bl	db604 <_Z19__fetch_global_Wirev>
   d5aee:	2100      	movs	r1, #0
   d5af0:	f7ff ffbb 	bl	d5a6a <_ZN7TwoWire5writeEi>

    WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d5af4:	f005 fd86 	bl	db604 <_Z19__fetch_global_Wirev>
  return ( (val/10*16) + (val%10) );
   d5af8:	fbb5 f2f4 	udiv	r2, r5, r4
   d5afc:	fb04 5112 	mls	r1, r4, r2, r5
   d5b00:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   d5b04:	b2cd      	uxtb	r5, r1
    WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d5b06:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d5b0a:	f7ff ffae 	bl	d5a6a <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   d5b0e:	f005 fd79 	bl	db604 <_Z19__fetch_global_Wirev>
  return ( (val/10*16) + (val%10) );
   d5b12:	fbb7 f1f4 	udiv	r1, r7, r4
   d5b16:	fb04 7711 	mls	r7, r4, r1, r7
   d5b1a:	eb07 1101 	add.w	r1, r7, r1, lsl #4
    WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   d5b1e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d5b22:	f7ff ffa2 	bl	d5a6a <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   d5b26:	f005 fd6d 	bl	db604 <_Z19__fetch_global_Wirev>
  return ( (val/10*16) + (val%10) );
   d5b2a:	fbb6 f1f4 	udiv	r1, r6, r4
   d5b2e:	fb04 6611 	mls	r6, r4, r1, r6
   d5b32:	eb06 1101 	add.w	r1, r6, r1, lsl #4
    WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   d5b36:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d5b3a:	f7ff ff96 	bl	d5a6a <_ZN7TwoWire5writeEi>
    WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   d5b3e:	f005 fd61 	bl	db604 <_Z19__fetch_global_Wirev>
  return ( (val/10*16) + (val%10) );
   d5b42:	9b01      	ldr	r3, [sp, #4]
   d5b44:	fbb3 f1f4 	udiv	r1, r3, r4
   d5b48:	fb04 3111 	mls	r1, r4, r1, r3
    WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   d5b4c:	f001 0107 	and.w	r1, r1, #7
   d5b50:	f041 0108 	orr.w	r1, r1, #8
   d5b54:	f7ff ff89 	bl	d5a6a <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   d5b58:	f005 fd54 	bl	db604 <_Z19__fetch_global_Wirev>
  return ( (val/10*16) + (val%10) );
   d5b5c:	fbb9 f1f4 	udiv	r1, r9, r4
   d5b60:	fb04 9911 	mls	r9, r4, r1, r9
   d5b64:	eb09 1101 	add.w	r1, r9, r1, lsl #4
    WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   d5b68:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d5b6c:	f7ff ff7d 	bl	d5a6a <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   d5b70:	f005 fd48 	bl	db604 <_Z19__fetch_global_Wirev>
  return ( (val/10*16) + (val%10) );
   d5b74:	fbb8 f1f4 	udiv	r1, r8, r4
   d5b78:	fb04 8811 	mls	r8, r4, r1, r8
   d5b7c:	eb08 1101 	add.w	r1, r8, r1, lsl #4
    WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   d5b80:	f001 011f 	and.w	r1, r1, #31
   d5b84:	f7ff ff71 	bl	d5a6a <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(yr));                       // set the yr (11111111)
   d5b88:	f005 fd3c 	bl	db604 <_Z19__fetch_global_Wirev>
  return ( (val/10*16) + (val%10) );
   d5b8c:	fbbb f1f4 	udiv	r1, fp, r4
    WireSend(decToBcd(yr));                       // set the yr (11111111)
   d5b90:	6803      	ldr	r3, [r0, #0]
  return ( (val/10*16) + (val%10) );
   d5b92:	fb04 b411 	mls	r4, r4, r1, fp
   d5b96:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    WireSend(decToBcd(yr));                       // set the yr (11111111)
   d5b9a:	689b      	ldr	r3, [r3, #8]
   d5b9c:	b2c9      	uxtb	r1, r1
   d5b9e:	4798      	blx	r3

    Wire.endTransmission();
   d5ba0:	f005 fd30 	bl	db604 <_Z19__fetch_global_Wirev>
   d5ba4:	f005 fbd1 	bl	db34a <_ZN7TwoWire15endTransmissionEv>

    // Start Clock:
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5ba8:	f005 fd2c 	bl	db604 <_Z19__fetch_global_Wirev>
   d5bac:	216f      	movs	r1, #111	; 0x6f
   d5bae:	f005 fbc5 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5bb2:	f005 fd27 	bl	db604 <_Z19__fetch_global_Wirev>
   d5bb6:	2100      	movs	r1, #0
   d5bb8:	f7ff ff57 	bl	d5a6a <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
   d5bbc:	f005 fd22 	bl	db604 <_Z19__fetch_global_Wirev>
   d5bc0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5bc4:	f7ff ff51 	bl	d5a6a <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5bc8:	f005 fd1c 	bl	db604 <_Z19__fetch_global_Wirev>
   d5bcc:	f005 fbbd 	bl	db34a <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5bd0:	4650      	mov	r0, sl
  }

// Serial.print("Set time: ");
// Serial.println(String(yr)+":"+String(mnth)+":"+String(dyofMnth)+":"+String(dyofWk)+":"+String(hr)+":"+String(min)+":"+String(sec));

}
   d5bd2:	b003      	add	sp, #12
   d5bd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5bd8:	f005 bbcc 	b.w	db374 <_ZN7TwoWire6unlockEv>

000d5bdc <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>:
  byte *hr,
  byte *dyofWk,
  byte *dyofMnth,
  byte *mnth,
  byte *yr)
{
   d5bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5be0:	4698      	mov	r8, r3
   d5be2:	4692      	mov	sl, r2
   d5be4:	468b      	mov	fp, r1
   d5be6:	e9dd 970a 	ldrd	r9, r7, [sp, #40]	; 0x28
   d5bea:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
  WITH_LOCK(Wire) {
   d5bee:	f005 fd09 	bl	db604 <_Z19__fetch_global_Wirev>
   d5bf2:	4604      	mov	r4, r0
      { _M_device.lock(); }
   d5bf4:	f005 fbb5 	bl	db362 <_ZN7TwoWire4lockEv>
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5bf8:	f005 fd04 	bl	db604 <_Z19__fetch_global_Wirev>
   d5bfc:	216f      	movs	r1, #111	; 0x6f
   d5bfe:	f005 fb9d 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5c02:	f005 fcff 	bl	db604 <_Z19__fetch_global_Wirev>
   d5c06:	2100      	movs	r1, #0
   d5c08:	f7ff ff2f 	bl	d5a6a <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5c0c:	f005 fcfa 	bl	db604 <_Z19__fetch_global_Wirev>
   d5c10:	f005 fb9b 	bl	db34a <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(MCP7941x_RTC_I2C_ADDR, 7);
   d5c14:	f005 fcf6 	bl	db604 <_Z19__fetch_global_Wirev>
   d5c18:	216f      	movs	r1, #111	; 0x6f
   d5c1a:	2207      	movs	r2, #7
   d5c1c:	f005 fb87 	bl	db32e <_ZN7TwoWire11requestFromEhj>

    // A few of these need masks because certain bits are control bits
    *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d5c20:	f005 fcf0 	bl	db604 <_Z19__fetch_global_Wirev>
   d5c24:	6803      	ldr	r3, [r0, #0]
   d5c26:	695b      	ldr	r3, [r3, #20]
   d5c28:	4798      	blx	r3
  return ( (val/16*10) + (val%16) );
   d5c2a:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d5c2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5c32:	f000 000f 	and.w	r0, r0, #15
   d5c36:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d5c3a:	f88b 0000 	strb.w	r0, [fp]
    *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d5c3e:	f005 fce1 	bl	db604 <_Z19__fetch_global_Wirev>
   d5c42:	6803      	ldr	r3, [r0, #0]
   d5c44:	695b      	ldr	r3, [r3, #20]
   d5c46:	4798      	blx	r3
  return ( (val/16*10) + (val%16) );
   d5c48:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d5c4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5c50:	f000 000f 	and.w	r0, r0, #15
   d5c54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d5c58:	f88a 0000 	strb.w	r0, [sl]
    *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d5c5c:	f005 fcd2 	bl	db604 <_Z19__fetch_global_Wirev>
   d5c60:	6803      	ldr	r3, [r0, #0]
   d5c62:	695b      	ldr	r3, [r3, #20]
   d5c64:	4798      	blx	r3
  return ( (val/16*10) + (val%16) );
   d5c66:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d5c6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5c6e:	f000 000f 	and.w	r0, r0, #15
   d5c72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d5c76:	f888 0000 	strb.w	r0, [r8]
    *dyofWk  = bcdToDec(WireReceive() & 0x07);  // 01111111
   d5c7a:	f005 fcc3 	bl	db604 <_Z19__fetch_global_Wirev>
   d5c7e:	6803      	ldr	r3, [r0, #0]
   d5c80:	695b      	ldr	r3, [r3, #20]
   d5c82:	4798      	blx	r3
   d5c84:	f000 0007 	and.w	r0, r0, #7
   d5c88:	f889 0000 	strb.w	r0, [r9]
    *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d5c8c:	f005 fcba 	bl	db604 <_Z19__fetch_global_Wirev>
   d5c90:	6803      	ldr	r3, [r0, #0]
   d5c92:	695b      	ldr	r3, [r3, #20]
   d5c94:	4798      	blx	r3
  return ( (val/16*10) + (val%16) );
   d5c96:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d5c9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5c9e:	f000 000f 	and.w	r0, r0, #15
   d5ca2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d5ca6:	7038      	strb	r0, [r7, #0]
    *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   d5ca8:	f005 fcac 	bl	db604 <_Z19__fetch_global_Wirev>
   d5cac:	6803      	ldr	r3, [r0, #0]
   d5cae:	695b      	ldr	r3, [r3, #20]
   d5cb0:	4798      	blx	r3
  return ( (val/16*10) + (val%16) );
   d5cb2:	f3c0 1300 	ubfx	r3, r0, #4, #1
   d5cb6:	009a      	lsls	r2, r3, #2
   d5cb8:	441a      	add	r2, r3
   d5cba:	f000 030f 	and.w	r3, r0, #15
   d5cbe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   d5cc2:	7033      	strb	r3, [r6, #0]
    *yr       = bcdToDec(WireReceive());         // 11111111
   d5cc4:	f005 fc9e 	bl	db604 <_Z19__fetch_global_Wirev>
   d5cc8:	6803      	ldr	r3, [r0, #0]
   d5cca:	695b      	ldr	r3, [r3, #20]
   d5ccc:	4798      	blx	r3
  return ( (val/16*10) + (val%16) );
   d5cce:	f3c0 1303 	ubfx	r3, r0, #4, #4
   d5cd2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d5cd6:	f000 030f 	and.w	r3, r0, #15
   d5cda:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    *yr       = bcdToDec(WireReceive());         // 11111111
   d5cde:	702b      	strb	r3, [r5, #0]
      { _M_device.unlock(); }
   d5ce0:	4620      	mov	r0, r4
  }
}
   d5ce2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ce6:	f005 bb45 	b.w	db374 <_ZN7TwoWire6unlockEv>

000d5cea <_ZN8MCP7941x11setUnixTimeEm>:
}

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d5cea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  byte sec = (byte)Time.second(unixTime);
   d5cee:	2500      	movs	r5, #0
{
   d5cf0:	b08f      	sub	sp, #60	; 0x3c
   d5cf2:	460c      	mov	r4, r1
   d5cf4:	4681      	mov	r9, r0
  byte sec = (byte)Time.second(unixTime);
   d5cf6:	4608      	mov	r0, r1
   d5cf8:	4629      	mov	r1, r5
   d5cfa:	f004 fb85 	bl	da408 <_ZN9TimeClass6secondEx>
  byte min= (byte)Time.minute(unixTime);
   d5cfe:	4629      	mov	r1, r5
  byte sec = (byte)Time.second(unixTime);
   d5d00:	4682      	mov	sl, r0
  byte min= (byte)Time.minute(unixTime);
   d5d02:	4620      	mov	r0, r4
   d5d04:	f004 fb78 	bl	da3f8 <_ZN9TimeClass6minuteEx>
  byte hr= (byte)Time.hour(unixTime);
   d5d08:	4629      	mov	r1, r5
  byte min= (byte)Time.minute(unixTime);
   d5d0a:	4683      	mov	fp, r0
  byte hr= (byte)Time.hour(unixTime);
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	f004 fb6b 	bl	da3e8 <_ZN9TimeClass4hourEx>
  byte dyofWk= (byte)Time.weekday(unixTime);
   d5d12:	4629      	mov	r1, r5
  byte hr= (byte)Time.hour(unixTime);
   d5d14:	9005      	str	r0, [sp, #20]
  byte dyofWk= (byte)Time.weekday(unixTime);
   d5d16:	4620      	mov	r0, r4
   d5d18:	f004 fb86 	bl	da428 <_ZN9TimeClass7weekdayEx>
  byte dyofMnth= (byte)Time.day(unixTime);
   d5d1c:	4629      	mov	r1, r5
  byte dyofWk= (byte)Time.weekday(unixTime);
   d5d1e:	4606      	mov	r6, r0
  byte dyofMnth= (byte)Time.day(unixTime);
   d5d20:	4620      	mov	r0, r4
   d5d22:	f004 fb79 	bl	da418 <_ZN9TimeClass3dayEx>
  byte mnth= (byte)Time.month(unixTime);
   d5d26:	4629      	mov	r1, r5
  byte dyofMnth= (byte)Time.day(unixTime);
   d5d28:	4607      	mov	r7, r0
  byte mnth= (byte)Time.month(unixTime);
   d5d2a:	4620      	mov	r0, r4
   d5d2c:	f004 fb86 	bl	da43c <_ZN9TimeClass5monthEx>
  String yrString = String(Time.year(unixTime));
   d5d30:	4629      	mov	r1, r5
  byte mnth= (byte)Time.month(unixTime);
   d5d32:	4680      	mov	r8, r0
  String yrString = String(Time.year(unixTime));
   d5d34:	4620      	mov	r0, r4
   d5d36:	f004 fb8b 	bl	da450 <_ZN9TimeClass4yearEx>
   d5d3a:	220a      	movs	r2, #10
   d5d3c:	4601      	mov	r1, r0
   d5d3e:	a806      	add	r0, sp, #24
   d5d40:	f004 f89d 	bl	d9e7e <_ZN6StringC1Eih>
  byte yr = (byte) yrString.substring(2).toInt();
   d5d44:	a906      	add	r1, sp, #24
   d5d46:	2202      	movs	r2, #2
   d5d48:	a80a      	add	r0, sp, #40	; 0x28
   d5d4a:	f004 f949 	bl	d9fe0 <_ZNK6String9substringEj>
   d5d4e:	a80a      	add	r0, sp, #40	; 0x28
   d5d50:	f004 f94d 	bl	d9fee <_ZNK6String5toIntEv>
   d5d54:	4604      	mov	r4, r0
   d5d56:	a80a      	add	r0, sp, #40	; 0x28
   d5d58:	f003 ffbe 	bl	d9cd8 <_ZN6StringD1Ev>

  
  setDateTime(
   d5d5c:	9b05      	ldr	r3, [sp, #20]
   d5d5e:	fa5f f088 	uxtb.w	r0, r8
   d5d62:	b2e4      	uxtb	r4, r4
   d5d64:	b2ff      	uxtb	r7, r7
   d5d66:	b2f6      	uxtb	r6, r6
   d5d68:	9002      	str	r0, [sp, #8]
   d5d6a:	b2db      	uxtb	r3, r3
   d5d6c:	fa5f f28b 	uxtb.w	r2, fp
   d5d70:	fa5f f18a 	uxtb.w	r1, sl
   d5d74:	4648      	mov	r0, r9
   d5d76:	9403      	str	r4, [sp, #12]
   d5d78:	9701      	str	r7, [sp, #4]
   d5d7a:	9600      	str	r6, [sp, #0]
   d5d7c:	f7ff fe9c 	bl	d5ab8 <_ZN8MCP7941x11setDateTimeEhhhhhhh>
  String yrString = String(Time.year(unixTime));
   d5d80:	a806      	add	r0, sp, #24
   d5d82:	f003 ffa9 	bl	d9cd8 <_ZN6StringD1Ev>
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
}
   d5d86:	b00f      	add	sp, #60	; 0x3c
   d5d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5d8c <_ZN8MCP7941x6rtcNowEv>:

//gets unix as defined by the external RTC
// Note that since the MCP7941 only stores years 0-99
// we assume time from 2000 onwards.
// Only works to year 2037!
uint32_t MCP7941x::rtcNow(){
   d5d8c:	b500      	push	{lr}
   d5d8e:	b091      	sub	sp, #68	; 0x44
  byte dyofMnth;
  byte mnth;
  byte yr;

  //get the Date and time as bytes
  getDateTime(&sec,
   d5d90:	f10d 031b 	add.w	r3, sp, #27
   d5d94:	9303      	str	r3, [sp, #12]
   d5d96:	f10d 031a 	add.w	r3, sp, #26
   d5d9a:	9302      	str	r3, [sp, #8]
   d5d9c:	f10d 0319 	add.w	r3, sp, #25
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	ab06      	add	r3, sp, #24
   d5da4:	9300      	str	r3, [sp, #0]
   d5da6:	f10d 0216 	add.w	r2, sp, #22
   d5daa:	f10d 0317 	add.w	r3, sp, #23
   d5dae:	f10d 0115 	add.w	r1, sp, #21
   d5db2:	f7ff ff13 	bl	d5bdc <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>
		  &dyofMnth,
		  &mnth,
		  &yr);

  // Deal with mktime 2038 bug
  if (yr>37)
   d5db6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d5dba:	2b25      	cmp	r3, #37	; 0x25
  {
    yr = 0;
   d5dbc:	bf84      	itt	hi
   d5dbe:	2300      	movhi	r3, #0
   d5dc0:	f88d 301b 	strbhi.w	r3, [sp, #27]
  }

  //declare variable
  struct tm tm;
  tm.tm_sec = (sec);
   d5dc4:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d5dc8:	9307      	str	r3, [sp, #28]
  tm.tm_min = (min);
   d5dca:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d5dce:	9308      	str	r3, [sp, #32]
  tm.tm_hour = (hr);
   d5dd0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d5dd4:	9309      	str	r3, [sp, #36]	; 0x24
  tm.tm_mday = (dyofMnth);
   d5dd6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d5dda:	930a      	str	r3, [sp, #40]	; 0x28
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
   d5ddc:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d5de0:	3b01      	subs	r3, #1
   d5de2:	930b      	str	r3, [sp, #44]	; 0x2c
  tm.tm_year = yr + 100; // The number of years since 1900 (by definition of tm)
   d5de4:	f89d 301b 	ldrb.w	r3, [sp, #27]

  time_t moment = mktime(&tm);//create epoc time_t object
   d5de8:	a807      	add	r0, sp, #28
  tm.tm_year = yr + 100; // The number of years since 1900 (by definition of tm)
   d5dea:	3364      	adds	r3, #100	; 0x64
   d5dec:	930c      	str	r3, [sp, #48]	; 0x30
  time_t moment = mktime(&tm);//create epoc time_t object
   d5dee:	f007 fed9 	bl	ddba4 <mktime>

  return uint32_t(moment);
}
   d5df2:	b011      	add	sp, #68	; 0x44
   d5df4:	f85d fb04 	ldr.w	pc, [sp], #4

000d5df8 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d5df8:	4770      	bx	lr

000d5dfa <_ZN16Adafruit_TSL2591D1Ev>:
/**************************************************************************/
/*! 
    @brief  Class that stores state and functions for interacting with TSL2591 Light Sensor
*/
/**************************************************************************/
class Adafruit_TSL2591 : public Adafruit_Sensor
   d5dfa:	4770      	bx	lr

000d5dfc <_ZN16Adafruit_TSL25919getSensorEP8sensor_t>:
    @brief  Gets the overall sensor_t data including the type, range and resulution
    @param  sensor Pointer to Adafruit_Sensor sensor_t object that will be filled with sensor type data
*/
/**************************************************************************/
void Adafruit_TSL2591::getSensor(sensor_t *sensor)
{
   d5dfc:	460b      	mov	r3, r1
   d5dfe:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d5e00:	2228      	movs	r2, #40	; 0x28
{
   d5e02:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d5e04:	2100      	movs	r1, #0
   d5e06:	4618      	mov	r0, r3
   d5e08:	f007 fdec 	bl	dd9e4 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
   d5e0c:	4909      	ldr	r1, [pc, #36]	; (d5e34 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x38>)
   d5e0e:	220b      	movs	r2, #11
   d5e10:	f008 fe46 	bl	deaa0 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5e14:	2200      	movs	r2, #0
  sensor->version     = 1;
   d5e16:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5e18:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d5e1a:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id   = _sensorID;
   d5e1c:	68a1      	ldr	r1, [r4, #8]
  sensor->type        = SENSOR_TYPE_LIGHT;
  sensor->min_delay   = 0;
   d5e1e:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->max_value   = 88000.0;
   d5e20:	4a05      	ldr	r2, [pc, #20]	; (d5e38 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x3c>)
   d5e22:	6182      	str	r2, [r0, #24]
  sensor->min_value   = 0.0;
   d5e24:	2200      	movs	r2, #0
  sensor->sensor_id   = _sensorID;
   d5e26:	6101      	str	r1, [r0, #16]
  sensor->min_value   = 0.0;
   d5e28:	61c2      	str	r2, [r0, #28]
  sensor->type        = SENSOR_TYPE_LIGHT;
   d5e2a:	2105      	movs	r1, #5
  sensor->resolution  = 0.001;
   d5e2c:	4a03      	ldr	r2, [pc, #12]	; (d5e3c <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x40>)
  sensor->type        = SENSOR_TYPE_LIGHT;
   d5e2e:	6141      	str	r1, [r0, #20]
  sensor->resolution  = 0.001;
   d5e30:	6202      	str	r2, [r0, #32]
}
   d5e32:	bd10      	pop	{r4, pc}
   d5e34:	000df6f8 	.word	0x000df6f8
   d5e38:	47abe000 	.word	0x47abe000
   d5e3c:	3a83126f 	.word	0x3a83126f

000d5e40 <_ZN16Adafruit_TSL2591D0Ev>:
   d5e40:	b510      	push	{r4, lr}
   d5e42:	2110      	movs	r1, #16
   d5e44:	4604      	mov	r4, r0
   d5e46:	f005 fc0a 	bl	db65e <_ZdlPvj>
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	bd10      	pop	{r4, pc}
	...

000d5e50 <_ZN16Adafruit_TSL2591C1El>:
Adafruit_TSL2591::Adafruit_TSL2591(int32_t sensorID)
   d5e50:	4a04      	ldr	r2, [pc, #16]	; (d5e64 <_ZN16Adafruit_TSL2591C1El+0x14>)
   d5e52:	6002      	str	r2, [r0, #0]
  _initialized = false;
   d5e54:	2200      	movs	r2, #0
   d5e56:	7302      	strb	r2, [r0, #12]
  _integration = TSL2591_INTEGRATIONTIME_100MS;
   d5e58:	7142      	strb	r2, [r0, #5]
  _gain        = TSL2591_GAIN_MED;
   d5e5a:	2210      	movs	r2, #16
   d5e5c:	7182      	strb	r2, [r0, #6]
  _sensorID    = sensorID;
   d5e5e:	6081      	str	r1, [r0, #8]
}
   d5e60:	4770      	bx	lr
   d5e62:	bf00      	nop
   d5e64:	000df838 	.word	0x000df838

000d5e68 <_ZN16Adafruit_TSL25917getGainEv>:
}
   d5e68:	7980      	ldrb	r0, [r0, #6]
   d5e6a:	4770      	bx	lr

000d5e6c <_ZN16Adafruit_TSL25919getTimingEv>:
}
   d5e6c:	7940      	ldrb	r0, [r0, #5]
   d5e6e:	4770      	bx	lr

000d5e70 <_ZN16Adafruit_TSL259112calculateLuxEtt>:
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
   d5e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5e74:	4299      	cmp	r1, r3
{
   d5e76:	b510      	push	{r4, lr}
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
   d5e78:	d039      	beq.n	d5eee <_ZN16Adafruit_TSL259112calculateLuxEtt+0x7e>
   d5e7a:	429a      	cmp	r2, r3
   d5e7c:	d037      	beq.n	d5eee <_ZN16Adafruit_TSL259112calculateLuxEtt+0x7e>
  switch (_integration)
   d5e7e:	7943      	ldrb	r3, [r0, #5]
   d5e80:	3b01      	subs	r3, #1
   d5e82:	b2db      	uxtb	r3, r3
   d5e84:	2b04      	cmp	r3, #4
   d5e86:	bf97      	itett	ls
   d5e88:	4c1a      	ldrls	r4, [pc, #104]	; (d5ef4 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x84>)
   d5e8a:	eddf 5a1b 	vldrhi	s11, [pc, #108]	; d5ef8 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x88>
   d5e8e:	eb04 0383 	addls.w	r3, r4, r3, lsl #2
   d5e92:	edd3 5a00 	vldrls	s11, [r3]
  switch (_gain)
   d5e96:	7983      	ldrb	r3, [r0, #6]
   d5e98:	2b20      	cmp	r3, #32
   d5e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   d5e9e:	d020      	beq.n	d5ee2 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x72>
   d5ea0:	2b30      	cmp	r3, #48	; 0x30
   d5ea2:	d021      	beq.n	d5ee8 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x78>
   d5ea4:	2b10      	cmp	r3, #16
   d5ea6:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
   d5eaa:	bf18      	it	ne
   d5eac:	eeb0 6a66 	vmovne.f32	s12, s13
  lux = ( ((float)ch0 - (float)ch1 )) * (1.0F - ((float)ch1/(float)ch0) ) / cpl;
   d5eb0:	ee07 1a90 	vmov	s15, r1
   d5eb4:	ee07 2a10 	vmov	s14, r2
   d5eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d5ebc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  cpl = (atime * again) / TSL2591_LUX_DF;
   d5ec0:	ee25 6a86 	vmul.f32	s12, s11, s12
  lux = ( ((float)ch0 - (float)ch1 )) * (1.0F - ((float)ch1/(float)ch0) ) / cpl;
   d5ec4:	ee87 5a27 	vdiv.f32	s10, s14, s15
   d5ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d5ecc:	ee76 6ac5 	vsub.f32	s13, s13, s10
   d5ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
  cpl = (atime * again) / TSL2591_LUX_DF;
   d5ed4:	eddf 6a09 	vldr	s13, [pc, #36]	; d5efc <_ZN16Adafruit_TSL259112calculateLuxEtt+0x8c>
   d5ed8:	ee86 7a26 	vdiv.f32	s14, s12, s13
  lux = ( ((float)ch0 - (float)ch1 )) * (1.0F - ((float)ch1/(float)ch0) ) / cpl;
   d5edc:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d5ee0:	bd10      	pop	{r4, pc}
      again = 428.0F;
   d5ee2:	ed9f 6a07 	vldr	s12, [pc, #28]	; d5f00 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x90>
   d5ee6:	e7e3      	b.n	d5eb0 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x40>
      again = 9876.0F;
   d5ee8:	ed9f 6a06 	vldr	s12, [pc, #24]	; d5f04 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x94>
   d5eec:	e7e0      	b.n	d5eb0 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x40>
    return 0;
   d5eee:	ed9f 0a06 	vldr	s0, [pc, #24]	; d5f08 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x98>
   d5ef2:	e7f5      	b.n	d5ee0 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x70>
   d5ef4:	000df81c 	.word	0x000df81c
   d5ef8:	42c80000 	.word	0x42c80000
   d5efc:	43cc0000 	.word	0x43cc0000
   d5f00:	43d60000 	.word	0x43d60000
   d5f04:	461a5000 	.word	0x461a5000
   d5f08:	00000000 	.word	0x00000000

000d5f0c <_ZN16Adafruit_TSL25915read8Eh>:
/*******************************************************/


uint8_t Adafruit_TSL2591::read8(uint8_t reg)
{
   d5f0c:	b510      	push	{r4, lr}
   d5f0e:	460c      	mov	r4, r1
  uint8_t x;

  Wire.beginTransmission(TSL2591_ADDR);
   d5f10:	f005 fb78 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f14:	2129      	movs	r1, #41	; 0x29
   d5f16:	f005 fa11 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d5f1a:	f005 fb73 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f1e:	6803      	ldr	r3, [r0, #0]
   d5f20:	4621      	mov	r1, r4
   d5f22:	689b      	ldr	r3, [r3, #8]
   d5f24:	4798      	blx	r3
  Wire.endTransmission();
   d5f26:	f005 fb6d 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f2a:	f005 fa0e 	bl	db34a <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(TSL2591_ADDR, 1);
   d5f2e:	f005 fb69 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f32:	2201      	movs	r2, #1
   d5f34:	2129      	movs	r1, #41	; 0x29
   d5f36:	f005 f9fa 	bl	db32e <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
   d5f3a:	f005 fb63 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f3e:	6803      	ldr	r3, [r0, #0]
   d5f40:	695b      	ldr	r3, [r3, #20]
   d5f42:	4798      	blx	r3

  return x;
}
   d5f44:	b2c0      	uxtb	r0, r0
   d5f46:	bd10      	pop	{r4, pc}

000d5f48 <_ZN16Adafruit_TSL25916read16Eh>:

uint16_t Adafruit_TSL2591::read16(uint8_t reg)
{
   d5f48:	b510      	push	{r4, lr}
   d5f4a:	460c      	mov	r4, r1
  uint16_t x;
  uint16_t t;

  Wire.beginTransmission(TSL2591_ADDR);
   d5f4c:	f005 fb5a 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f50:	2129      	movs	r1, #41	; 0x29
   d5f52:	f005 f9f3 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d5f56:	f005 fb55 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f5a:	6803      	ldr	r3, [r0, #0]
   d5f5c:	4621      	mov	r1, r4
   d5f5e:	689b      	ldr	r3, [r3, #8]
   d5f60:	4798      	blx	r3
  Wire.endTransmission();
   d5f62:	f005 fb4f 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f66:	f005 f9f0 	bl	db34a <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(TSL2591_ADDR, 2);
   d5f6a:	f005 fb4b 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f6e:	2202      	movs	r2, #2
   d5f70:	2129      	movs	r1, #41	; 0x29
   d5f72:	f005 f9dc 	bl	db32e <_ZN7TwoWire11requestFromEhj>
  t = Wire.read();
   d5f76:	f005 fb45 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f7a:	6803      	ldr	r3, [r0, #0]
   d5f7c:	695b      	ldr	r3, [r3, #20]
   d5f7e:	4798      	blx	r3
   d5f80:	4604      	mov	r4, r0
  x = Wire.read();
   d5f82:	f005 fb3f 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f86:	6803      	ldr	r3, [r0, #0]
   d5f88:	695b      	ldr	r3, [r3, #20]
   d5f8a:	4798      	blx	r3

  x <<= 8;
  x |= t;
   d5f8c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
  return x;
}
   d5f90:	b280      	uxth	r0, r0
   d5f92:	bd10      	pop	{r4, pc}

000d5f94 <_ZN16Adafruit_TSL25916write8Ehh>:

void Adafruit_TSL2591::write8 (uint8_t reg, uint8_t value)
{
   d5f94:	b538      	push	{r3, r4, r5, lr}
   d5f96:	4614      	mov	r4, r2
   d5f98:	460d      	mov	r5, r1
  Wire.beginTransmission(TSL2591_ADDR);
   d5f9a:	f005 fb33 	bl	db604 <_Z19__fetch_global_Wirev>
   d5f9e:	2129      	movs	r1, #41	; 0x29
   d5fa0:	f005 f9cc 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d5fa4:	f005 fb2e 	bl	db604 <_Z19__fetch_global_Wirev>
   d5fa8:	6803      	ldr	r3, [r0, #0]
   d5faa:	4629      	mov	r1, r5
   d5fac:	689b      	ldr	r3, [r3, #8]
   d5fae:	4798      	blx	r3
  Wire.write(value);
   d5fb0:	f005 fb28 	bl	db604 <_Z19__fetch_global_Wirev>
   d5fb4:	6803      	ldr	r3, [r0, #0]
   d5fb6:	4621      	mov	r1, r4
   d5fb8:	689b      	ldr	r3, [r3, #8]
   d5fba:	4798      	blx	r3
  Wire.endTransmission();
   d5fbc:	f005 fb22 	bl	db604 <_Z19__fetch_global_Wirev>
}
   d5fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();
   d5fc4:	f005 b9c1 	b.w	db34a <_ZN7TwoWire15endTransmissionEv>

000d5fc8 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>:
{
   d5fc8:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d5fca:	7b03      	ldrb	r3, [r0, #12]
{
   d5fcc:	4604      	mov	r4, r0
   d5fce:	460d      	mov	r5, r1
  if (!_initialized) {
   d5fd0:	b173      	cbz	r3, d5ff0 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0x28>
  enable();
   d5fd2:	4620      	mov	r0, r4
   d5fd4:	f000 f82e 	bl	d6034 <_ZN16Adafruit_TSL25916enableEv>
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d5fd8:	79a2      	ldrb	r2, [r4, #6]
  _integration = integration;
   d5fda:	7165      	strb	r5, [r4, #5]
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d5fdc:	4620      	mov	r0, r4
   d5fde:	432a      	orrs	r2, r5
   d5fe0:	21a1      	movs	r1, #161	; 0xa1
   d5fe2:	f7ff ffd7 	bl	d5f94 <_ZN16Adafruit_TSL25916write8Ehh>
  disable();
   d5fe6:	4620      	mov	r0, r4
}
   d5fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  disable();
   d5fec:	f000 b832 	b.w	d6054 <_ZN16Adafruit_TSL25917disableEv>
    if (!begin()) {
   d5ff0:	f000 f803 	bl	d5ffa <_ZN16Adafruit_TSL25915beginEv>
   d5ff4:	2800      	cmp	r0, #0
   d5ff6:	d1ec      	bne.n	d5fd2 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0xa>
}
   d5ff8:	bd38      	pop	{r3, r4, r5, pc}

000d5ffa <_ZN16Adafruit_TSL25915beginEv>:
{
   d5ffa:	b538      	push	{r3, r4, r5, lr}
   d5ffc:	4604      	mov	r4, r0
  Wire.begin();
   d5ffe:	f005 fb01 	bl	db604 <_Z19__fetch_global_Wirev>
   d6002:	f005 f965 	bl	db2d0 <_ZN7TwoWire5beginEv>
  uint8_t id = read8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_DEVICE_ID);
   d6006:	21b2      	movs	r1, #178	; 0xb2
   d6008:	4620      	mov	r0, r4
   d600a:	f7ff ff7f 	bl	d5f0c <_ZN16Adafruit_TSL25915read8Eh>
  if (id != 0x50 ) {
   d600e:	2850      	cmp	r0, #80	; 0x50
   d6010:	d10e      	bne.n	d6030 <_ZN16Adafruit_TSL25915beginEv+0x36>
  _initialized = true;
   d6012:	2501      	movs	r5, #1
  setTiming(_integration);
   d6014:	7961      	ldrb	r1, [r4, #5]
  _initialized = true;
   d6016:	7325      	strb	r5, [r4, #12]
  setTiming(_integration);
   d6018:	4620      	mov	r0, r4
   d601a:	f7ff ffd5 	bl	d5fc8 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>
  setGain(_gain);
   d601e:	79a1      	ldrb	r1, [r4, #6]
   d6020:	4620      	mov	r0, r4
   d6022:	f000 f827 	bl	d6074 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>
  disable();
   d6026:	4620      	mov	r0, r4
   d6028:	f000 f814 	bl	d6054 <_ZN16Adafruit_TSL25917disableEv>
   d602c:	4628      	mov	r0, r5
}
   d602e:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d6030:	2000      	movs	r0, #0
   d6032:	e7fc      	b.n	d602e <_ZN16Adafruit_TSL25915beginEv+0x34>

000d6034 <_ZN16Adafruit_TSL25916enableEv>:
{
   d6034:	b510      	push	{r4, lr}
  if (!_initialized)
   d6036:	7b03      	ldrb	r3, [r0, #12]
{
   d6038:	4604      	mov	r4, r0
  if (!_initialized)
   d603a:	b133      	cbz	r3, d604a <_ZN16Adafruit_TSL25916enableEv+0x16>
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
   d603c:	4620      	mov	r0, r4
   d603e:	2293      	movs	r2, #147	; 0x93
}
   d6040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
   d6044:	21a0      	movs	r1, #160	; 0xa0
   d6046:	f7ff bfa5 	b.w	d5f94 <_ZN16Adafruit_TSL25916write8Ehh>
    if (!begin())
   d604a:	f7ff ffd6 	bl	d5ffa <_ZN16Adafruit_TSL25915beginEv>
   d604e:	2800      	cmp	r0, #0
   d6050:	d1f4      	bne.n	d603c <_ZN16Adafruit_TSL25916enableEv+0x8>
}
   d6052:	bd10      	pop	{r4, pc}

000d6054 <_ZN16Adafruit_TSL25917disableEv>:
{
   d6054:	b510      	push	{r4, lr}
  if (!_initialized) {
   d6056:	7b03      	ldrb	r3, [r0, #12]
{
   d6058:	4604      	mov	r4, r0
  if (!_initialized) {
   d605a:	b133      	cbz	r3, d606a <_ZN16Adafruit_TSL25917disableEv+0x16>
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
   d605c:	4620      	mov	r0, r4
   d605e:	2200      	movs	r2, #0
}
   d6060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
   d6064:	21a0      	movs	r1, #160	; 0xa0
   d6066:	f7ff bf95 	b.w	d5f94 <_ZN16Adafruit_TSL25916write8Ehh>
    if (!begin()) {
   d606a:	f7ff ffc6 	bl	d5ffa <_ZN16Adafruit_TSL25915beginEv>
   d606e:	2800      	cmp	r0, #0
   d6070:	d1f4      	bne.n	d605c <_ZN16Adafruit_TSL25917disableEv+0x8>
}
   d6072:	bd10      	pop	{r4, pc}

000d6074 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>:
{
   d6074:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d6076:	7b03      	ldrb	r3, [r0, #12]
{
   d6078:	4604      	mov	r4, r0
   d607a:	460d      	mov	r5, r1
  if (!_initialized) {
   d607c:	b173      	cbz	r3, d609c <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0x28>
  enable();
   d607e:	4620      	mov	r0, r4
   d6080:	f7ff ffd8 	bl	d6034 <_ZN16Adafruit_TSL25916enableEv>
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d6084:	7962      	ldrb	r2, [r4, #5]
  _gain = gain;
   d6086:	71a5      	strb	r5, [r4, #6]
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d6088:	4620      	mov	r0, r4
   d608a:	432a      	orrs	r2, r5
   d608c:	21a1      	movs	r1, #161	; 0xa1
   d608e:	f7ff ff81 	bl	d5f94 <_ZN16Adafruit_TSL25916write8Ehh>
  disable();
   d6092:	4620      	mov	r0, r4
}
   d6094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  disable();
   d6098:	f7ff bfdc 	b.w	d6054 <_ZN16Adafruit_TSL25917disableEv>
    if (!begin()) {
   d609c:	f7ff ffad 	bl	d5ffa <_ZN16Adafruit_TSL25915beginEv>
   d60a0:	2800      	cmp	r0, #0
   d60a2:	d1ec      	bne.n	d607e <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0xa>
}
   d60a4:	bd38      	pop	{r3, r4, r5, pc}

000d60a6 <_ZN16Adafruit_TSL259117getFullLuminosityEv>:
{
   d60a6:	b570      	push	{r4, r5, r6, lr}
  if (!_initialized) {
   d60a8:	7b03      	ldrb	r3, [r0, #12]
{
   d60aa:	4606      	mov	r6, r0
  if (!_initialized) {
   d60ac:	b1d3      	cbz	r3, d60e4 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x3e>
  enable();
   d60ae:	4630      	mov	r0, r6
   d60b0:	f7ff ffc0 	bl	d6034 <_ZN16Adafruit_TSL25916enableEv>
   d60b4:	2400      	movs	r4, #0
    delay(120);
   d60b6:	2078      	movs	r0, #120	; 0x78
   d60b8:	f004 fb34 	bl	da724 <delay>
  for (uint8_t d=0; d<=_integration; d++)
   d60bc:	3401      	adds	r4, #1
   d60be:	7972      	ldrb	r2, [r6, #5]
   d60c0:	b2e3      	uxtb	r3, r4
   d60c2:	429a      	cmp	r2, r3
   d60c4:	d2f7      	bcs.n	d60b6 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x10>
  y |= read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN0_LOW);
   d60c6:	21b4      	movs	r1, #180	; 0xb4
   d60c8:	4630      	mov	r0, r6
   d60ca:	f7ff ff3d 	bl	d5f48 <_ZN16Adafruit_TSL25916read16Eh>
  x = read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN1_LOW);
   d60ce:	21b6      	movs	r1, #182	; 0xb6
  y |= read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN0_LOW);
   d60d0:	b285      	uxth	r5, r0
  x = read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN1_LOW);
   d60d2:	4630      	mov	r0, r6
   d60d4:	f7ff ff38 	bl	d5f48 <_ZN16Adafruit_TSL25916read16Eh>
  x |= y;
   d60d8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  disable();
   d60dc:	4630      	mov	r0, r6
   d60de:	f7ff ffb9 	bl	d6054 <_ZN16Adafruit_TSL25917disableEv>
  return x;
   d60e2:	e004      	b.n	d60ee <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x48>
    if (!begin()) {
   d60e4:	f7ff ff89 	bl	d5ffa <_ZN16Adafruit_TSL25915beginEv>
   d60e8:	2800      	cmp	r0, #0
   d60ea:	d1e0      	bne.n	d60ae <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x8>
      return 0;
   d60ec:	4605      	mov	r5, r0
}
   d60ee:	4628      	mov	r0, r5
   d60f0:	bd70      	pop	{r4, r5, r6, pc}

000d60f2 <_ZN16Adafruit_TSL25918getEventEP15sensors_event_t>:
{
   d60f2:	b570      	push	{r4, r5, r6, lr}
   d60f4:	4605      	mov	r5, r0
   d60f6:	460c      	mov	r4, r1
  uint32_t lum = getFullLuminosity();
   d60f8:	f7ff ffd5 	bl	d60a6 <_ZN16Adafruit_TSL259117getFullLuminosityEv>
  lum = getFullLuminosity();
   d60fc:	4628      	mov	r0, r5
   d60fe:	f7ff ffd2 	bl	d60a6 <_ZN16Adafruit_TSL259117getFullLuminosityEv>
  memset(event, 0, sizeof(sensors_event_t));
   d6102:	2220      	movs	r2, #32
  lum = getFullLuminosity();
   d6104:	4606      	mov	r6, r0
  memset(event, 0, sizeof(sensors_event_t));
   d6106:	2100      	movs	r1, #0
   d6108:	1d20      	adds	r0, r4, #4
   d610a:	f007 fc6b 	bl	dd9e4 <memset>
  event->version   = sizeof(sensors_event_t);
   d610e:	2324      	movs	r3, #36	; 0x24
   d6110:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d6112:	68ab      	ldr	r3, [r5, #8]
   d6114:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_LIGHT;
   d6116:	2305      	movs	r3, #5
   d6118:	60a3      	str	r3, [r4, #8]
   d611a:	f003 f8c7 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
  event->light = calculateLux(full, ir);
   d611e:	0c32      	lsrs	r2, r6, #16
  event->timestamp = millis();
   d6120:	6120      	str	r0, [r4, #16]
  event->light = calculateLux(full, ir);
   d6122:	b2b1      	uxth	r1, r6
   d6124:	4628      	mov	r0, r5
   d6126:	f7ff fea3 	bl	d5e70 <_ZN16Adafruit_TSL259112calculateLuxEtt>
}
   d612a:	2001      	movs	r0, #1
  event->light = calculateLux(full, ir);
   d612c:	ed84 0a05 	vstr	s0, [r4, #20]
}
   d6130:	bd70      	pop	{r4, r5, r6, pc}

000d6132 <_ZN15Adafruit_AM2315C1Ev>:
  #include <util/delay.h>
#endif


Adafruit_AM2315::Adafruit_AM2315() {
}
   d6132:	4770      	bx	lr

000d6134 <_ZN15Adafruit_AM23158readDataEv>:

   // try to read data, as a test
  return readData();
}

bool Adafruit_AM2315::readData(void) {
   d6134:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6136:	4605      	mov	r5, r0
  uint8_t reply[10];

  // Wake up the sensor
  Wire.beginTransmission(AM2315_I2CADDR);
   d6138:	f005 fa64 	bl	db604 <_Z19__fetch_global_Wirev>
   d613c:	215c      	movs	r1, #92	; 0x5c
   d613e:	f005 f8fd 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
  delay(2);
   d6142:	2002      	movs	r0, #2
   d6144:	f004 faee 	bl	da724 <delay>
  Wire.endTransmission();
   d6148:	f005 fa5c 	bl	db604 <_Z19__fetch_global_Wirev>
   d614c:	f005 f8fd 	bl	db34a <_ZN7TwoWire15endTransmissionEv>

  // OK lets ready!
  Wire.beginTransmission(AM2315_I2CADDR);
   d6150:	f005 fa58 	bl	db604 <_Z19__fetch_global_Wirev>
   d6154:	215c      	movs	r1, #92	; 0x5c
   d6156:	f005 f8f1 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(AM2315_READREG);
   d615a:	f005 fa53 	bl	db604 <_Z19__fetch_global_Wirev>
   d615e:	2103      	movs	r1, #3
   d6160:	f7ff fc83 	bl	d5a6a <_ZN7TwoWire5writeEi>
  Wire.write(0x00);  // start at address 0x0
   d6164:	f005 fa4e 	bl	db604 <_Z19__fetch_global_Wirev>
   d6168:	2100      	movs	r1, #0
   d616a:	f7ff fc7e 	bl	d5a6a <_ZN7TwoWire5writeEi>
  Wire.write(4);  // request 4 bytes data
   d616e:	f005 fa49 	bl	db604 <_Z19__fetch_global_Wirev>
   d6172:	2104      	movs	r1, #4
   d6174:	f7ff fc79 	bl	d5a6a <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d6178:	f005 fa44 	bl	db604 <_Z19__fetch_global_Wirev>
   d617c:	f005 f8e5 	bl	db34a <_ZN7TwoWire15endTransmissionEv>

  delay(10); // add delay between request and actual read!
   d6180:	200a      	movs	r0, #10
   d6182:	f004 facf 	bl	da724 <delay>

  Wire.requestFrom(AM2315_I2CADDR, 8);
   d6186:	f005 fa3d 	bl	db604 <_Z19__fetch_global_Wirev>
   d618a:	2208      	movs	r2, #8
   d618c:	215c      	movs	r1, #92	; 0x5c
   d618e:	f005 f8ce 	bl	db32e <_ZN7TwoWire11requestFromEhj>
  for (uint8_t i=0; i<8; i++) {
   d6192:	ae01      	add	r6, sp, #4
  Wire.requestFrom(AM2315_I2CADDR, 8);
   d6194:	2408      	movs	r4, #8
    reply[i] = Wire.read();
   d6196:	f005 fa35 	bl	db604 <_Z19__fetch_global_Wirev>
   d619a:	6803      	ldr	r3, [r0, #0]
   d619c:	695b      	ldr	r3, [r3, #20]
   d619e:	4798      	blx	r3
   d61a0:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<8; i++) {
   d61a2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    reply[i] = Wire.read();
   d61a6:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<8; i++) {
   d61aa:	d1f4      	bne.n	d6196 <_ZN15Adafruit_AM23158readDataEv+0x62>
    //Serial.println(reply[i], HEX);
  }

  if (reply[0] != AM2315_READREG) return false;
   d61ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d61b0:	2b03      	cmp	r3, #3
   d61b2:	d135      	bne.n	d6220 <_ZN15Adafruit_AM23158readDataEv+0xec>
  if (reply[1] != 4) return false; // bytes req'd
   d61b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d61b8:	2b04      	cmp	r3, #4
   d61ba:	d131      	bne.n	d6220 <_ZN15Adafruit_AM23158readDataEv+0xec>

  humidity = reply[2];
   d61bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
  humidity *= 256;
  humidity += reply[3];
   d61c0:	ed9f 6a18 	vldr	s12, [pc, #96]	; d6224 <_ZN15Adafruit_AM23158readDataEv+0xf0>
  humidity = reply[2];
   d61c4:	ee07 3a10 	vmov	s14, r3
  humidity += reply[3];
   d61c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d61cc:	ee07 3a90 	vmov	s15, r3
  humidity = reply[2];
   d61d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  humidity += reply[3];
   d61d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  humidity /= 10;
   d61d8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
  humidity += reply[3];
   d61dc:	eee7 7a06 	vfma.f32	s15, s14, s12
  //Serial.print("H"); Serial.println(humidity);

  temp = reply[4] & 0x7F;
   d61e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d61e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
  humidity /= 10;
   d61e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  temp += reply[5];
  temp /= 10;
  //Serial.print("T"); Serial.println(temp);

  // change sign
  if (reply[4] >> 7) temp = -temp;
   d61ec:	09db      	lsrs	r3, r3, #7

  return true;
   d61ee:	f04f 0001 	mov.w	r0, #1
  humidity /= 10;
   d61f2:	ed85 7a00 	vstr	s14, [r5]
  temp = reply[4] & 0x7F;
   d61f6:	ee07 2a10 	vmov	s14, r2
  temp += reply[5];
   d61fa:	f89d 2009 	ldrb.w	r2, [sp, #9]
   d61fe:	ee07 2a90 	vmov	s15, r2
  temp = reply[4] & 0x7F;
   d6202:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  temp += reply[5];
   d6206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d620a:	eee7 7a06 	vfma.f32	s15, s14, s12
  temp /= 10;
   d620e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  if (reply[4] >> 7) temp = -temp;
   d6212:	bf18      	it	ne
   d6214:	eeb1 7a47 	vnegne.f32	s14, s14
   d6218:	ed85 7a01 	vstr	s14, [r5, #4]
}
   d621c:	b004      	add	sp, #16
   d621e:	bd70      	pop	{r4, r5, r6, pc}
  if (reply[0] != AM2315_READREG) return false;
   d6220:	4620      	mov	r0, r4
   d6222:	e7fb      	b.n	d621c <_ZN15Adafruit_AM23158readDataEv+0xe8>
   d6224:	43800000 	.word	0x43800000

000d6228 <_ZN15Adafruit_AM23155beginEv>:
bool Adafruit_AM2315::begin(void) {
   d6228:	b510      	push	{r4, lr}
   d622a:	4604      	mov	r4, r0
  Wire.begin();
   d622c:	f005 f9ea 	bl	db604 <_Z19__fetch_global_Wirev>
   d6230:	f005 f84e 	bl	db2d0 <_ZN7TwoWire5beginEv>
  return readData();
   d6234:	4620      	mov	r0, r4
}
   d6236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return readData();
   d623a:	f7ff bf7b 	b.w	d6134 <_ZN15Adafruit_AM23158readDataEv>

000d623e <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_>:
 * If you want to obtain both temperature and humidity when you sample the sensor, be aware that calling
 * readTemperature() and readHumidity() in rapid succession may swamp the sensor and result in invalid
 * readingings (the AM2315 manual advisess that continuous samples must be at least 2 seconds apart).
 * Calling this method avoids the double I2C request.
 */
bool Adafruit_AM2315::readTemperatureAndHumidity(float &t, float &h) {
   d623e:	b570      	push	{r4, r5, r6, lr}
   d6240:	4604      	mov	r4, r0
   d6242:	460e      	mov	r6, r1
   d6244:	4615      	mov	r5, r2
    if (!readData()) return false;
   d6246:	f7ff ff75 	bl	d6134 <_ZN15Adafruit_AM23158readDataEv>
   d624a:	b118      	cbz	r0, d6254 <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_+0x16>

    t = temp;
   d624c:	6863      	ldr	r3, [r4, #4]
   d624e:	6033      	str	r3, [r6, #0]
    h = humidity;
   d6250:	6823      	ldr	r3, [r4, #0]
   d6252:	602b      	str	r3, [r5, #0]

    return true;
}
   d6254:	bd70      	pop	{r4, r5, r6, pc}

000d6256 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d6256:	b510      	push	{r4, lr}
   d6258:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d625a:	3024      	adds	r0, #36	; 0x24
   d625c:	f001 f8d2 	bl	d7404 <_ZN8FatCache4syncEv>
   d6260:	b128      	cbz	r0, d626e <_ZN9FatVolume9cacheSyncEv+0x18>
   d6262:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d6266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d626a:	f001 b8cb 	b.w	d7404 <_ZN8FatCache4syncEv>
  }
   d626e:	bd10      	pop	{r4, pc}

000d6270 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6270:	1e41      	subs	r1, r0, #1
   d6272:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   d6276:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6278:	0842      	lsrs	r2, r0, #1
   d627a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   d627e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6282:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6286:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6288:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   d628a:	d1f5      	bne.n	d6278 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
   d628c:	4770      	bx	lr

000d628e <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d628e:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d6290:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   d6292:	4604      	mov	r4, r0
   d6294:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d6296:	b923      	cbnz	r3, d62a2 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d6298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   d629c:	6889      	ldr	r1, [r1, #8]
   d629e:	f000 bc87 	b.w	d6bb0 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   d62a2:	2224      	movs	r2, #36	; 0x24
   d62a4:	2100      	movs	r1, #0
   d62a6:	f007 fb9d 	bl	dd9e4 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d62aa:	2310      	movs	r3, #16
  m_flags = F_READ;
   d62ac:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   d62ae:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d62b0:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d62b2:	68ab      	ldr	r3, [r5, #8]
   d62b4:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d62b6:	68eb      	ldr	r3, [r5, #12]
   d62b8:	6223      	str	r3, [r4, #32]
}
   d62ba:	bd38      	pop	{r3, r4, r5, pc}

000d62bc <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   d62bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d62c0:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   d62c2:	7803      	ldrb	r3, [r0, #0]
   d62c4:	2700      	movs	r7, #0
bool FatFile::getName(char* name, size_t size) {
   d62c6:	4683      	mov	fp, r0
   d62c8:	460d      	mov	r5, r1
   d62ca:	4616      	mov	r6, r2
   d62cc:	f8ad 700c 	strh.w	r7, [sp, #12]
  if (!isOpen() || size < 13) {
   d62d0:	2b00      	cmp	r3, #0
   d62d2:	d072      	beq.n	d63ba <_ZN7FatFile7getNameEPcj+0xfe>
   d62d4:	2a0c      	cmp	r2, #12
   d62d6:	d970      	bls.n	d63ba <_ZN7FatFile7getNameEPcj+0xfe>
  if (!isLFN()) {
   d62d8:	78c3      	ldrb	r3, [r0, #3]
   d62da:	b933      	cbnz	r3, d62ea <_ZN7FatFile7getNameEPcj+0x2e>
    return getSFN(name);
   d62dc:	f000 fbce 	bl	d6a7c <_ZN7FatFile6getSFNEPc>
   d62e0:	4604      	mov	r4, r0
}
   d62e2:	4620      	mov	r0, r4
   d62e4:	b00d      	add	sp, #52	; 0x34
   d62e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   d62ea:	4601      	mov	r1, r0
   d62ec:	a803      	add	r0, sp, #12
   d62ee:	f7ff ffce 	bl	d628e <_ZN7FatFile11openClusterEPS_>
   d62f2:	2800      	cmp	r0, #0
   d62f4:	d061      	beq.n	d63ba <_ZN7FatFile7getNameEPcj+0xfe>
  name[n - 1] = 0;
   d62f6:	19ab      	adds	r3, r5, r6
   d62f8:	f04f 0901 	mov.w	r9, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d62fc:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   d6300:	9301      	str	r3, [sp, #4]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d6302:	f89b 2003 	ldrb.w	r2, [fp, #3]
   d6306:	fa5f f889 	uxtb.w	r8, r9
   d630a:	4542      	cmp	r2, r8
   d630c:	d355      	bcc.n	d63ba <_ZN7FatFile7getNameEPcj+0xfe>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d630e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
   d6312:	eba1 0109 	sub.w	r1, r1, r9
   d6316:	0149      	lsls	r1, r1, #5
   d6318:	a803      	add	r0, sp, #12
   d631a:	f000 fd42 	bl	d6da2 <_ZN7FatFile7seekSetEm>
   d631e:	4604      	mov	r4, r0
   d6320:	2800      	cmp	r0, #0
   d6322:	d04a      	beq.n	d63ba <_ZN7FatFile7getNameEPcj+0xfe>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6324:	2100      	movs	r1, #0
   d6326:	a803      	add	r0, sp, #12
   d6328:	f000 fd1c 	bl	d6d64 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d632c:	2800      	cmp	r0, #0
   d632e:	d044      	beq.n	d63ba <_ZN7FatFile7getNameEPcj+0xfe>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   d6330:	7ac2      	ldrb	r2, [r0, #11]
   d6332:	2a0f      	cmp	r2, #15
   d6334:	d141      	bne.n	d63ba <_ZN7FatFile7getNameEPcj+0xfe>
    if (ord != (ldir->ord & 0X1F)) {
   d6336:	7802      	ldrb	r2, [r0, #0]
   d6338:	f002 021f 	and.w	r2, r2, #31
   d633c:	4542      	cmp	r2, r8
   d633e:	d13c      	bne.n	d63ba <_ZN7FatFile7getNameEPcj+0xfe>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6340:	f109 32ff 	add.w	r2, r9, #4294967295
   d6344:	fb0a f202 	mul.w	r2, sl, r2
  for (i = 0; i < 13; i++) {
   d6348:	eb05 0e02 	add.w	lr, r5, r2
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d634c:	2100      	movs	r1, #0
  if (i < LDIR_NAME1_DIM) {
   d634e:	2904      	cmp	r1, #4
   d6350:	fa5f fc81 	uxtb.w	ip, r1
   d6354:	d820      	bhi.n	d6398 <_ZN7FatFile7getNameEPcj+0xdc>
    return ldir->name1[i];
   d6356:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
   d635a:	f8bc 3001 	ldrh.w	r3, [ip, #1]
    if (c == 0 || k >= n) {
   d635e:	b163      	cbz	r3, d637a <_ZN7FatFile7getNameEPcj+0xbe>
   d6360:	4296      	cmp	r6, r2
   d6362:	d910      	bls.n	d6386 <_ZN7FatFile7getNameEPcj+0xca>
    name[k++] = c >= 0X7F ? '?' : c;
   d6364:	2b7f      	cmp	r3, #127	; 0x7f
   d6366:	f101 0101 	add.w	r1, r1, #1
   d636a:	bf28      	it	cs
   d636c:	233f      	movcs	r3, #63	; 0x3f
  for (i = 0; i < 13; i++) {
   d636e:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   d6370:	f80e 3b01 	strb.w	r3, [lr], #1
   d6374:	f102 0201 	add.w	r2, r2, #1
  for (i = 0; i < 13; i++) {
   d6378:	d1e9      	bne.n	d634e <_ZN7FatFile7getNameEPcj+0x92>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   d637a:	4296      	cmp	r6, r2
   d637c:	d903      	bls.n	d6386 <_ZN7FatFile7getNameEPcj+0xca>
   d637e:	7801      	ldrb	r1, [r0, #0]
   d6380:	0649      	lsls	r1, r1, #25
    name[k] = 0;
   d6382:	bf48      	it	mi
   d6384:	54af      	strbmi	r7, [r5, r2]
  name[n - 1] = 0;
   d6386:	9b01      	ldr	r3, [sp, #4]
   d6388:	f803 7c01 	strb.w	r7, [r3, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d638c:	7802      	ldrb	r2, [r0, #0]
   d638e:	0653      	lsls	r3, r2, #25
   d6390:	f109 0901 	add.w	r9, r9, #1
   d6394:	d5b5      	bpl.n	d6302 <_ZN7FatFile7getNameEPcj+0x46>
   d6396:	e7a4      	b.n	d62e2 <_ZN7FatFile7getNameEPcj+0x26>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6398:	f1bc 0f0a 	cmp.w	ip, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d639c:	bf95      	itete	ls
   d639e:	f101 3cff 	addls.w	ip, r1, #4294967295
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d63a2:	f101 0c01 	addhi.w	ip, r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d63a6:	eb00 0c4c 	addls.w	ip, r0, ip, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d63aa:	eb00 0c4c 	addhi.w	ip, r0, ip, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d63ae:	bf94      	ite	ls
   d63b0:	f8bc 3006 	ldrhls.w	r3, [ip, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d63b4:	f8bc 3004 	ldrhhi.w	r3, [ip, #4]
   d63b8:	e7d1      	b.n	d635e <_ZN7FatFile7getNameEPcj+0xa2>
  name[0] = 0;
   d63ba:	2400      	movs	r4, #0
   d63bc:	702c      	strb	r4, [r5, #0]
  return false;
   d63be:	e790      	b.n	d62e2 <_ZN7FatFile7getNameEPcj+0x26>

000d63c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d63c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d63c4:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d63c6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d63ca:	2b20      	cmp	r3, #32
   d63cc:	d0fa      	beq.n	d63c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d63ce:	4d6b      	ldr	r5, [pc, #428]	; (d657c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
    path++;
  }
  fname->lfn = path;
   d63d0:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   d63d2:	2400      	movs	r4, #0
    c = path[len];
   d63d4:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   d63d6:	b1c3      	cbz	r3, d640a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   d63d8:	2b2f      	cmp	r3, #47	; 0x2f
   d63da:	d016      	beq.n	d640a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d63dc:	2b5c      	cmp	r3, #92	; 0x5c
   d63de:	d102      	bne.n	d63e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d63e0:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   d63e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d63e6:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   d63ea:	b2c0      	uxtb	r0, r0
   d63ec:	281d      	cmp	r0, #29
   d63ee:	d803      	bhi.n	d63f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   d63f0:	fa25 f000 	lsr.w	r0, r5, r0
   d63f4:	07c0      	lsls	r0, r0, #31
   d63f6:	d4f3      	bmi.n	d63e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d63f8:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   d63fc:	283c      	cmp	r0, #60	; 0x3c
   d63fe:	d0ef      	beq.n	d63e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   d6400:	3b20      	subs	r3, #32
   d6402:	2b5e      	cmp	r3, #94	; 0x5e
   d6404:	d8ec      	bhi.n	d63e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   d6406:	3401      	adds	r4, #1
    c = path[len];
   d6408:	e7e4      	b.n	d63d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   d640a:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   d640c:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d640e:	4607      	mov	r7, r0
   d6410:	f810 5b01 	ldrb.w	r5, [r0], #1
   d6414:	2d20      	cmp	r5, #32
   d6416:	d0fa      	beq.n	d640e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   d6418:	2d2f      	cmp	r5, #47	; 0x2f
   d641a:	d0f8      	beq.n	d640e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   d641c:	6017      	str	r7, [r2, #0]
  while (len) {
   d641e:	b14c      	cbz	r4, d6434 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   d6420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6424:	2a2e      	cmp	r2, #46	; 0x2e
   d6426:	d001      	beq.n	d642c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   d6428:	2a20      	cmp	r2, #32
   d642a:	d101      	bne.n	d6430 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   d642c:	3c01      	subs	r4, #1
  while (len) {
   d642e:	e7f6      	b.n	d641e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   d6430:	2cff      	cmp	r4, #255	; 0xff
   d6432:	dcd5      	bgt.n	d63e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  fname->len = len;
   d6434:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
   d6436:	f101 030d 	add.w	r3, r1, #13
   d643a:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
   d643e:	2020      	movs	r0, #32
   d6440:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
   d6444:	4293      	cmp	r3, r2
   d6446:	d1fb      	bne.n	d6440 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6448:	f04f 0800 	mov.w	r8, #0
   d644c:	f816 3008 	ldrb.w	r3, [r6, r8]
   d6450:	2b2e      	cmp	r3, #46	; 0x2e
   d6452:	d001      	beq.n	d6458 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6454:	2b20      	cmp	r3, #32
   d6456:	d102      	bne.n	d645e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
   d6458:	f108 0801 	add.w	r8, r8, #1
   d645c:	e7f6      	b.n	d644c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
   d645e:	fab8 f088 	clz	r0, r8
   d6462:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6464:	1e65      	subs	r5, r4, #1
   d6466:	1c6b      	adds	r3, r5, #1
   d6468:	d002      	beq.n	d6470 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
   d646a:	5d73      	ldrb	r3, [r6, r5]
   d646c:	2b2e      	cmp	r3, #46	; 0x2e
   d646e:	d114      	bne.n	d649a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6470:	f04f 0900 	mov.w	r9, #0
   d6474:	2707      	movs	r7, #7
   d6476:	464a      	mov	r2, r9
   d6478:	46ca      	mov	sl, r9
   d647a:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   d647e:	45a0      	cmp	r8, r4
   d6480:	da69      	bge.n	d6556 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
   d6482:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   d6486:	2b20      	cmp	r3, #32
   d6488:	d003      	beq.n	d6492 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
   d648a:	2b2e      	cmp	r3, #46	; 0x2e
   d648c:	d107      	bne.n	d649e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d648e:	45a8      	cmp	r8, r5
   d6490:	d012      	beq.n	d64b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
   d6492:	2000      	movs	r0, #0
  for (; si < len; si++) {
   d6494:	f108 0801 	add.w	r8, r8, #1
   d6498:	e7f1      	b.n	d647e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d649a:	3d01      	subs	r5, #1
   d649c:	e7e3      	b.n	d6466 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
   d649e:	2b22      	cmp	r3, #34	; 0x22
   d64a0:	d008      	beq.n	d64b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   d64a2:	2b7c      	cmp	r3, #124	; 0x7c
   d64a4:	d006      	beq.n	d64b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d64a6:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d64aa:	f1bc 0f05 	cmp.w	ip, #5
   d64ae:	d80b      	bhi.n	d64c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d64b0:	2b2d      	cmp	r3, #45	; 0x2d
   d64b2:	d013      	beq.n	d64dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
   d64b4:	45a8      	cmp	r8, r5
   d64b6:	d15c      	bne.n	d6572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
   d64b8:	2f0a      	cmp	r7, #10
   d64ba:	d04b      	beq.n	d6554 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d64bc:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d64be:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d64c0:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d64c2:	f04f 0e10 	mov.w	lr, #16
   d64c6:	e7e5      	b.n	d6494 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
   d64c8:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d64cc:	f1bc 0f05 	cmp.w	ip, #5
   d64d0:	d9f0      	bls.n	d64b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
   d64d2:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d64d6:	f1bc 0f02 	cmp.w	ip, #2
   d64da:	d9eb      	bls.n	d64b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
   d64dc:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d64e0:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d64e4:	d8e6      	bhi.n	d64b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
   d64e6:	45a8      	cmp	r8, r5
   d64e8:	d0e6      	beq.n	d64b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
   d64ea:	42ba      	cmp	r2, r7
   d64ec:	d830      	bhi.n	d6550 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
   d64ee:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d64f2:	f1bc 0f19 	cmp.w	ip, #25
   d64f6:	d81a      	bhi.n	d652e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
   d64f8:	3b20      	subs	r3, #32
        lc |= bit;
   d64fa:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   d64fe:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6500:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   d6504:	f102 0c01 	add.w	ip, r2, #1
   d6508:	fa5f fc8c 	uxtb.w	ip, ip
   d650c:	440a      	add	r2, r1
      if (i < 7) {
   d650e:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   d6512:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   d6514:	d801      	bhi.n	d651a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
   d6516:	f881 c00c 	strb.w	ip, [r1, #12]
   d651a:	4662      	mov	r2, ip
   d651c:	e7ba      	b.n	d6494 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
   d651e:	45a8      	cmp	r8, r5
   d6520:	dc18      	bgt.n	d6554 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6522:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6524:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6526:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6528:	f04f 0e10 	mov.w	lr, #16
   d652c:	e7b1      	b.n	d6492 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
   d652e:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6532:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6536:	bf98      	it	ls
   d6538:	ea4e 0a0a 	orrls.w	sl, lr, sl
   d653c:	e7e2      	b.n	d6504 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->sfn[fname->seqPos] = '~';
   d653e:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6540:	2001      	movs	r0, #1
   d6542:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6544:	4419      	add	r1, r3
   d6546:	237e      	movs	r3, #126	; 0x7e
   d6548:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d654a:	2331      	movs	r3, #49	; 0x31
   d654c:	738b      	strb	r3, [r1, #14]
   d654e:	e748      	b.n	d63e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   d6550:	2f0a      	cmp	r7, #10
   d6552:	d1e4      	bne.n	d651e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
   d6554:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   d6556:	7b4b      	ldrb	r3, [r1, #13]
   d6558:	2b20      	cmp	r3, #32
   d655a:	f43f af41 	beq.w	d63e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   d655e:	2800      	cmp	r0, #0
   d6560:	d0ed      	beq.n	d653e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6562:	ea1a 0f09 	tst.w	sl, r9
   d6566:	bf18      	it	ne
   d6568:	f04f 0902 	movne.w	r9, #2
   d656c:	f881 9000 	strb.w	r9, [r1]
   d6570:	e737      	b.n	d63e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   d6572:	42ba      	cmp	r2, r7
   d6574:	d8ec      	bhi.n	d6550 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
   d6576:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
   d6578:	2000      	movs	r0, #0
   d657a:	e7c3      	b.n	d6504 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
   d657c:	31000101 	.word	0x31000101

000d6580 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6584:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6586:	2300      	movs	r3, #0
   d6588:	f8ad 3004 	strh.w	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d658c:	7803      	ldrb	r3, [r0, #0]
   d658e:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   d6590:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6592:	d50a      	bpl.n	d65aa <_ZN7FatFile6removeEv+0x2a>
   d6594:	7883      	ldrb	r3, [r0, #2]
   d6596:	079a      	lsls	r2, r3, #30
   d6598:	d507      	bpl.n	d65aa <_ZN7FatFile6removeEv+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d659a:	6a01      	ldr	r1, [r0, #32]
   d659c:	b939      	cbnz	r1, d65ae <_ZN7FatFile6removeEv+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d659e:	2101      	movs	r1, #1
   d65a0:	4620      	mov	r0, r4
   d65a2:	f000 facb 	bl	d6b3c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d65a6:	4605      	mov	r5, r0
   d65a8:	b938      	cbnz	r0, d65ba <_ZN7FatFile6removeEv+0x3a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d65aa:	2000      	movs	r0, #0
   d65ac:	e048      	b.n	d6640 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d65ae:	6880      	ldr	r0, [r0, #8]
   d65b0:	f001 f819 	bl	d75e6 <_ZN9FatVolume9freeChainEm>
   d65b4:	2800      	cmp	r0, #0
   d65b6:	d1f2      	bne.n	d659e <_ZN7FatFile6removeEv+0x1e>
   d65b8:	e7f7      	b.n	d65aa <_ZN7FatFile6removeEv+0x2a>
  chksum = lfnChecksum(dir->name);
   d65ba:	f7ff fe59 	bl	d6270 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   d65be:	26e5      	movs	r6, #229	; 0xe5
   d65c0:	702e      	strb	r6, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   d65c2:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   d65c4:	4607      	mov	r7, r0
  m_attr = FILE_ATTR_CLOSED;
   d65c6:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   d65c8:	68a0      	ldr	r0, [r4, #8]
   d65ca:	f7ff fe44 	bl	d6256 <_ZN9FatVolume9cacheSyncEv>
   d65ce:	2800      	cmp	r0, #0
   d65d0:	d0eb      	beq.n	d65aa <_ZN7FatFile6removeEv+0x2a>
  if (!isLFN()) {
   d65d2:	78e3      	ldrb	r3, [r4, #3]
   d65d4:	2b00      	cmp	r3, #0
   d65d6:	d033      	beq.n	d6640 <_ZN7FatFile6removeEv+0xc0>
  if (!dirFile.openCluster(this)) {
   d65d8:	4621      	mov	r1, r4
   d65da:	a801      	add	r0, sp, #4
   d65dc:	f7ff fe57 	bl	d628e <_ZN7FatFile11openClusterEPS_>
   d65e0:	2800      	cmp	r0, #0
   d65e2:	d0e2      	beq.n	d65aa <_ZN7FatFile6removeEv+0x2a>
   d65e4:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d65e6:	78e3      	ldrb	r3, [r4, #3]
   d65e8:	fa5f f885 	uxtb.w	r8, r5
   d65ec:	4543      	cmp	r3, r8
   d65ee:	d3dc      	bcc.n	d65aa <_ZN7FatFile6removeEv+0x2a>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d65f0:	88a1      	ldrh	r1, [r4, #4]
   d65f2:	1b49      	subs	r1, r1, r5
   d65f4:	0149      	lsls	r1, r1, #5
   d65f6:	a801      	add	r0, sp, #4
   d65f8:	f000 fbd3 	bl	d6da2 <_ZN7FatFile7seekSetEm>
   d65fc:	2800      	cmp	r0, #0
   d65fe:	d0d4      	beq.n	d65aa <_ZN7FatFile6removeEv+0x2a>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6600:	2100      	movs	r1, #0
   d6602:	a801      	add	r0, sp, #4
   d6604:	f000 fbae 	bl	d6d64 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6608:	2800      	cmp	r0, #0
   d660a:	d0ce      	beq.n	d65aa <_ZN7FatFile6removeEv+0x2a>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d660c:	7ac3      	ldrb	r3, [r0, #11]
   d660e:	2b0f      	cmp	r3, #15
   d6610:	d1cb      	bne.n	d65aa <_ZN7FatFile6removeEv+0x2a>
        ord != (ldir->ord & 0X1F) ||
   d6612:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6614:	f002 031f 	and.w	r3, r2, #31
   d6618:	4543      	cmp	r3, r8
   d661a:	d1c6      	bne.n	d65aa <_ZN7FatFile6removeEv+0x2a>
        ord != (ldir->ord & 0X1F) ||
   d661c:	7b43      	ldrb	r3, [r0, #13]
   d661e:	42bb      	cmp	r3, r7
   d6620:	d1c3      	bne.n	d65aa <_ZN7FatFile6removeEv+0x2a>
    ldir->ord = DIR_NAME_DELETED;
   d6622:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d6624:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   d6626:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d662a:	f043 0301 	orr.w	r3, r3, #1
   d662e:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d6632:	0653      	lsls	r3, r2, #25
   d6634:	f105 0501 	add.w	r5, r5, #1
   d6638:	d5d5      	bpl.n	d65e6 <_ZN7FatFile6removeEv+0x66>
      if (!m_vol->cacheSync()) {
   d663a:	68a0      	ldr	r0, [r4, #8]
   d663c:	f7ff fe0b 	bl	d6256 <_ZN9FatVolume9cacheSyncEv>
}
   d6640:	b00a      	add	sp, #40	; 0x28
   d6642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6646 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6646:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d664a:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d664e:	4606      	mov	r6, r0
   d6650:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   d6652:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6654:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6656:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d665a:	6861      	ldr	r1, [r4, #4]
   d665c:	68a2      	ldr	r2, [r4, #8]
   d665e:	186b      	adds	r3, r5, r1
   d6660:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6662:	4411      	add	r1, r2
   d6664:	4291      	cmp	r1, r2
   d6666:	d006      	beq.n	d6676 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   d6668:	f812 0b01 	ldrb.w	r0, [r2], #1
   d666c:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6670:	4043      	eors	r3, r0
   d6672:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6674:	e7f6      	b.n	d6664 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   d6676:	f1b9 0f03 	cmp.w	r9, #3
   d667a:	bf28      	it	cs
   d667c:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6680:	f109 0204 	add.w	r2, r9, #4
   d6684:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6686:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d668a:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d668c:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d668e:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6690:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6692:	bf94      	ite	ls
   d6694:	3130      	addls	r1, #48	; 0x30
   d6696:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6698:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d669a:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d669c:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d66a0:	d1f1      	bne.n	d6686 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   d66a2:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   d66a6:	2100      	movs	r1, #0
   d66a8:	735f      	strb	r7, [r3, #13]
   d66aa:	4630      	mov	r0, r6
   d66ac:	f000 fb79 	bl	d6da2 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   d66b0:	2101      	movs	r1, #1
   d66b2:	4630      	mov	r0, r6
   d66b4:	f000 fb56 	bl	d6d64 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d66b8:	4601      	mov	r1, r0
   d66ba:	b928      	cbnz	r0, d66c8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d66bc:	7870      	ldrb	r0, [r6, #1]
   d66be:	fab0 f080 	clz	r0, r0
   d66c2:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   d66c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   d66c8:	7803      	ldrb	r3, [r0, #0]
   d66ca:	b16b      	cbz	r3, d66e8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d66cc:	7ac3      	ldrb	r3, [r0, #11]
   d66ce:	071b      	lsls	r3, r3, #28
   d66d0:	d4ee      	bmi.n	d66b0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d66d2:	220b      	movs	r2, #11
   d66d4:	4640      	mov	r0, r8
   d66d6:	f007 f969 	bl	dd9ac <memcmp>
   d66da:	2800      	cmp	r0, #0
   d66dc:	d1e8      	bne.n	d66b0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   d66de:	3501      	adds	r5, #1
   d66e0:	b2ad      	uxth	r5, r5
   d66e2:	2d64      	cmp	r5, #100	; 0x64
   d66e4:	d1b9      	bne.n	d665a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   d66e6:	e7ed      	b.n	d66c4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   d66e8:	2001      	movs	r0, #1
   d66ea:	e7eb      	b.n	d66c4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>

000d66ec <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d66ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d66f0:	ed2d 8b02 	vpush	{d8}
   d66f4:	b089      	sub	sp, #36	; 0x24
   d66f6:	460d      	mov	r5, r1
   d66f8:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
   d66fa:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d66fc:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   d66fe:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6702:	4690      	mov	r8, r2
  if (!dirFile->isDir() || isOpen()) {
   d6704:	d105      	bne.n	d6712 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   d6706:	2000      	movs	r0, #0
}
   d6708:	b009      	add	sp, #36	; 0x24
   d670a:	ecbd 8b02 	vpop	{d8}
   d670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
   d6712:	9b06      	ldr	r3, [sp, #24]
   d6714:	781b      	ldrb	r3, [r3, #0]
   d6716:	2b00      	cmp	r3, #0
   d6718:	d1f5      	bne.n	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   d671a:	6853      	ldr	r3, [r2, #4]
   d671c:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d671e:	7813      	ldrb	r3, [r2, #0]
   d6720:	0799      	lsls	r1, r3, #30
   d6722:	bf1c      	itt	ne
   d6724:	9b04      	ldrne	r3, [sp, #16]
   d6726:	f103 070c 	addne.w	r7, r3, #12
   d672a:	f04f 0100 	mov.w	r1, #0
   d672e:	bf18      	it	ne
   d6730:	230d      	movne	r3, #13
   d6732:	4628      	mov	r0, r5
   d6734:	bf1d      	ittte	ne
   d6736:	fbb7 f7f3 	udivne	r7, r7, r3
   d673a:	3701      	addne	r7, #1
   d673c:	b2ff      	uxtbne	r7, r7
   d673e:	2701      	moveq	r7, #1
   d6740:	f000 fb2f 	bl	d6da2 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6744:	f108 020d 	add.w	r2, r8, #13
  }
   d6748:	2300      	movs	r3, #0
   d674a:	ee08 2a10 	vmov	s16, r2
   d674e:	469b      	mov	fp, r3
   d6750:	461c      	mov	r4, r3
   d6752:	461e      	mov	r6, r3
   d6754:	9303      	str	r3, [sp, #12]
   d6756:	469a      	mov	sl, r3
    curIndex = dirFile->m_curPosition/32;
   d6758:	696a      	ldr	r2, [r5, #20]
   d675a:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d675c:	2101      	movs	r1, #1
   d675e:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   d6760:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6764:	f000 fafe 	bl	d6d64 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6768:	9b07      	ldr	r3, [sp, #28]
   d676a:	2800      	cmp	r0, #0
   d676c:	d16e      	bne.n	d684c <_ZN7FatFile4openEPS_P7fname_ti+0x160>
      if (dirFile->getError()) {
   d676e:	786b      	ldrb	r3, [r5, #1]
   d6770:	2b00      	cmp	r3, #0
   d6772:	d1c8      	bne.n	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6774:	9b05      	ldr	r3, [sp, #20]
   d6776:	059a      	lsls	r2, r3, #22
   d6778:	d5c5      	bpl.n	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   d677a:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   d677e:	3b01      	subs	r3, #1
   d6780:	2b01      	cmp	r3, #1
   d6782:	d8c0      	bhi.n	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   d6784:	9b03      	ldr	r3, [sp, #12]
   d6786:	2c00      	cmp	r4, #0
   d6788:	bf08      	it	eq
   d678a:	464b      	moveq	r3, r9
   d678c:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
   d678e:	42bc      	cmp	r4, r7
   d6790:	f0c0 8103 	bcc.w	d699a <_ZN7FatFile4openEPS_P7fname_ti+0x2ae>
  if (fnameFound) {
   d6794:	f1ba 0f00 	cmp.w	sl, #0
   d6798:	f040 811b 	bne.w	d69d2 <_ZN7FatFile4openEPS_P7fname_ti+0x2e6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d679c:	9b03      	ldr	r3, [sp, #12]
   d679e:	4628      	mov	r0, r5
   d67a0:	0159      	lsls	r1, r3, #5
   d67a2:	f000 fafe 	bl	d6da2 <_ZN7FatFile7seekSetEm>
   d67a6:	2800      	cmp	r0, #0
   d67a8:	d0ad      	beq.n	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   d67aa:	3f01      	subs	r7, #1
   d67ac:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d67b0:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d67b2:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   d67b6:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d67b8:	2e00      	cmp	r6, #0
   d67ba:	f000 8121 	beq.w	d6a00 <_ZN7FatFile4openEPS_P7fname_ti+0x314>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d67be:	2100      	movs	r1, #0
   d67c0:	4628      	mov	r0, r5
   d67c2:	f000 facf 	bl	d6d64 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d67c6:	4604      	mov	r4, r0
   d67c8:	2800      	cmp	r0, #0
   d67ca:	d09c      	beq.n	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   d67cc:	68aa      	ldr	r2, [r5, #8]
   d67ce:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d67d2:	4556      	cmp	r6, sl
   d67d4:	f043 0301 	orr.w	r3, r3, #1
   d67d8:	bf0c      	ite	eq
   d67da:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   d67de:	46b3      	movne	fp, r6
   d67e0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d67e4:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d67e8:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
   d67ea:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d67ee:	f108 000d 	add.w	r0, r8, #13
   d67f2:	f7ff fd3d 	bl	d6270 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d67f6:	f00b 0b1f 	and.w	fp, fp, #31
    ldir->chksum = lfnChecksum(fname->sfn);
   d67fa:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   d67fc:	f884 901a 	strb.w	r9, [r4, #26]
   d6800:	f884 901b 	strb.w	r9, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6804:	f10b 3bff 	add.w	fp, fp, #4294967295
   d6808:	220d      	movs	r2, #13
    lfnPutName(ldir, fname->lfn, len);
   d680a:	f8d8 c008 	ldr.w	ip, [r8, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d680e:	fb02 f20b 	mul.w	r2, r2, fp
   d6812:	2300      	movs	r3, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6814:	9904      	ldr	r1, [sp, #16]
   d6816:	4291      	cmp	r1, r2
   d6818:	f240 80e3 	bls.w	d69e2 <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
   d681c:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
   d6820:	2b04      	cmp	r3, #4
   d6822:	fa5f fe83 	uxtb.w	lr, r3
   d6826:	f103 0001 	add.w	r0, r3, #1
   d682a:	f200 80e0 	bhi.w	d69ee <_ZN7FatFile4openEPS_P7fname_ti+0x302>
    ldir->name1[i] = c;
   d682e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d6832:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6836:	280d      	cmp	r0, #13
   d6838:	f102 0201 	add.w	r2, r2, #1
   d683c:	4603      	mov	r3, r0
   d683e:	d1e9      	bne.n	d6814 <_ZN7FatFile4openEPS_P7fname_ti+0x128>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6840:	3e01      	subs	r6, #1
   d6842:	b2f6      	uxtb	r6, r6
   d6844:	e7b8      	b.n	d67b8 <_ZN7FatFile4openEPS_P7fname_ti+0xcc>
        fnameFound = true;
   d6846:	f04f 0a01 	mov.w	sl, #1
   d684a:	e785      	b.n	d6758 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d684c:	7802      	ldrb	r2, [r0, #0]
   d684e:	2ae5      	cmp	r2, #229	; 0xe5
   d6850:	d000      	beq.n	d6854 <_ZN7FatFile4openEPS_P7fname_ti+0x168>
   d6852:	b97a      	cbnz	r2, d6874 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
   d6854:	9903      	ldr	r1, [sp, #12]
   d6856:	2c00      	cmp	r4, #0
   d6858:	bf08      	it	eq
   d685a:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
   d685c:	42bc      	cmp	r4, r7
        freeFound++;
   d685e:	bf38      	it	cc
   d6860:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
   d6862:	9103      	str	r1, [sp, #12]
        freeFound++;
   d6864:	bf38      	it	cc
   d6866:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   d6868:	2a00      	cmp	r2, #0
   d686a:	d083      	beq.n	d6774 <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d686c:	2ae5      	cmp	r2, #229	; 0xe5
   d686e:	d104      	bne.n	d687a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
      lfnOrd = 0;
   d6870:	2600      	movs	r6, #0
   d6872:	e771      	b.n	d6758 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   d6874:	42bc      	cmp	r4, r7
   d6876:	bf38      	it	cc
   d6878:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d687a:	2a2e      	cmp	r2, #46	; 0x2e
   d687c:	d0f8      	beq.n	d6870 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d687e:	7ac1      	ldrb	r1, [r0, #11]
   d6880:	290f      	cmp	r1, #15
   d6882:	d15d      	bne.n	d6940 <_ZN7FatFile4openEPS_P7fname_ti+0x254>
      if (!lfnOrd) {
   d6884:	bb3e      	cbnz	r6, d68d6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6886:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   d688a:	f43f af65 	beq.w	d6758 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   d688e:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   d6892:	7b43      	ldrb	r3, [r0, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   d6894:	46b3      	mov	fp, r6
      size_t k = 13*(ord - 1);
   d6896:	f10b 32ff 	add.w	r2, fp, #4294967295
   d689a:	f04f 0e0d 	mov.w	lr, #13
   d689e:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
   d68a2:	9a04      	ldr	r2, [sp, #16]
   d68a4:	4572      	cmp	r2, lr
   d68a6:	d9e3      	bls.n	d6870 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d68a8:	eba2 020e 	sub.w	r2, r2, lr
   d68ac:	9207      	str	r2, [sp, #28]
   d68ae:	f04f 0c00 	mov.w	ip, #0
  if (i < LDIR_NAME1_DIM) {
   d68b2:	f1bc 0f04 	cmp.w	ip, #4
   d68b6:	eb0c 090e 	add.w	r9, ip, lr
   d68ba:	fa5f f28c 	uxtb.w	r2, ip
   d68be:	d814      	bhi.n	d68ea <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
    return ldir->name1[i];
   d68c0:	eb00 024c 	add.w	r2, r0, ip, lsl #1
   d68c4:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
   d68c8:	9907      	ldr	r1, [sp, #28]
   d68ca:	458c      	cmp	ip, r1
   d68cc:	d11b      	bne.n	d6906 <_ZN7FatFile4openEPS_P7fname_ti+0x21a>
            lfnOrd = 0;
   d68ce:	2a00      	cmp	r2, #0
   d68d0:	bf18      	it	ne
   d68d2:	2600      	movne	r6, #0
   d68d4:	e740      	b.n	d6758 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d68d6:	f10b 3bff 	add.w	fp, fp, #4294967295
   d68da:	fa5f fb8b 	uxtb.w	fp, fp
   d68de:	455a      	cmp	r2, fp
   d68e0:	d1c6      	bne.n	d6870 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d68e2:	7b42      	ldrb	r2, [r0, #13]
   d68e4:	429a      	cmp	r2, r3
   d68e6:	d0d6      	beq.n	d6896 <_ZN7FatFile4openEPS_P7fname_ti+0x1aa>
   d68e8:	e7c2      	b.n	d6870 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d68ea:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d68ec:	bf95      	itete	ls
   d68ee:	f10c 32ff 	addls.w	r2, ip, #4294967295
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d68f2:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d68f6:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d68fa:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d68fe:	bf94      	ite	ls
   d6900:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6902:	8892      	ldrhhi	r2, [r2, #4]
   d6904:	e7e0      	b.n	d68c8 <_ZN7FatFile4openEPS_P7fname_ti+0x1dc>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6906:	2aff      	cmp	r2, #255	; 0xff
   d6908:	d8b2      	bhi.n	d6870 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d690a:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d690c:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6910:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6912:	f8d8 1008 	ldr.w	r1, [r8, #8]
   d6916:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d691a:	bf98      	it	ls
   d691c:	3220      	addls	r2, #32
   d691e:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
   d6922:	bf98      	it	ls
   d6924:	b2d2      	uxtbls	r2, r2
   d6926:	f1b9 0f19 	cmp.w	r9, #25
   d692a:	bf9c      	itt	ls
   d692c:	3120      	addls	r1, #32
   d692e:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6930:	4291      	cmp	r1, r2
   d6932:	d19d      	bne.n	d6870 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
   d6934:	f10c 0c01 	add.w	ip, ip, #1
   d6938:	f1bc 0f0d 	cmp.w	ip, #13
   d693c:	d1b9      	bne.n	d68b2 <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
   d693e:	e70b      	b.n	d6758 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6940:	070a      	lsls	r2, r1, #28
   d6942:	d495      	bmi.n	d6870 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
   d6944:	b166      	cbz	r6, d6960 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d6946:	f1bb 0f01 	cmp.w	fp, #1
   d694a:	9303      	str	r3, [sp, #12]
   d694c:	f47f aedb 	bne.w	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d6950:	f7ff fc8e 	bl	d6270 <_ZN7FatFile11lfnChecksumEPh>
   d6954:	9b03      	ldr	r3, [sp, #12]
   d6956:	4298      	cmp	r0, r3
   d6958:	f47f aed5 	bne.w	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d695c:	46b2      	mov	sl, r6
   d695e:	e00f      	b.n	d6980 <_ZN7FatFile4openEPS_P7fname_ti+0x294>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6960:	ee18 1a10 	vmov	r1, s16
   d6964:	220b      	movs	r2, #11
   d6966:	9307      	str	r3, [sp, #28]
   d6968:	f007 f820 	bl	dd9ac <memcmp>
   d696c:	9b07      	ldr	r3, [sp, #28]
   d696e:	2800      	cmp	r0, #0
   d6970:	f47f aef2 	bne.w	d6758 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6974:	f898 a000 	ldrb.w	sl, [r8]
   d6978:	f01a 0a01 	ands.w	sl, sl, #1
   d697c:	f47f af63 	bne.w	d6846 <_ZN7FatFile4openEPS_P7fname_ti+0x15a>
  if (oflag & O_EXCL) {
   d6980:	9b05      	ldr	r3, [sp, #20]
   d6982:	0519      	lsls	r1, r3, #20
   d6984:	f53f aebf 	bmi.w	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6988:	9b05      	ldr	r3, [sp, #20]
   d698a:	9806      	ldr	r0, [sp, #24]
   d698c:	f8cd a000 	str.w	sl, [sp]
   d6990:	464a      	mov	r2, r9
   d6992:	4629      	mov	r1, r5
   d6994:	f000 fa48 	bl	d6e28 <_ZN7FatFile15openCachedEntryEPS_tih>
   d6998:	e6b6      	b.n	d6708 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   d699a:	2100      	movs	r1, #0
   d699c:	4628      	mov	r0, r5
   d699e:	f000 f9e1 	bl	d6d64 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d69a2:	b998      	cbnz	r0, d69cc <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
      if (dirFile->getError()) {
   d69a4:	786b      	ldrb	r3, [r5, #1]
   d69a6:	2b00      	cmp	r3, #0
   d69a8:	f47f aead 	bne.w	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   d69ac:	4628      	mov	r0, r5
   d69ae:	f000 f887 	bl	d6ac0 <_ZN7FatFile13addDirClusterEv>
   d69b2:	2800      	cmp	r0, #0
   d69b4:	f43f aea7 	beq.w	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d69b8:	68ab      	ldr	r3, [r5, #8]
   d69ba:	791b      	ldrb	r3, [r3, #4]
   d69bc:	2b01      	cmp	r3, #1
   d69be:	f63f aee9 	bhi.w	d6794 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound += 16;
   d69c2:	3410      	adds	r4, #16
   d69c4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d69c6:	42a7      	cmp	r7, r4
   d69c8:	d8f0      	bhi.n	d69ac <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
   d69ca:	e6e3      	b.n	d6794 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   d69cc:	3401      	adds	r4, #1
   d69ce:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d69d0:	e6dd      	b.n	d678e <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   d69d2:	4641      	mov	r1, r8
   d69d4:	4628      	mov	r0, r5
   d69d6:	f7ff fe36 	bl	d6646 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d69da:	2800      	cmp	r0, #0
   d69dc:	f47f aede 	bne.w	d679c <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   d69e0:	e691      	b.n	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d69e2:	bf14      	ite	ne
   d69e4:	f04f 31ff 	movne.w	r1, #4294967295
   d69e8:	2100      	moveq	r1, #0
   d69ea:	b289      	uxth	r1, r1
   d69ec:	e718      	b.n	d6820 <_ZN7FatFile4openEPS_P7fname_ti+0x134>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d69ee:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d69f2:	bf94      	ite	ls
   d69f4:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d69f8:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
   d69fc:	8099      	strh	r1, [r3, #4]
   d69fe:	e71a      	b.n	d6836 <_ZN7FatFile4openEPS_P7fname_ti+0x14a>
  dir = dirFile->readDirCache();
   d6a00:	4631      	mov	r1, r6
   d6a02:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   d6a04:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
   d6a06:	f000 f9ad 	bl	d6d64 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6a0a:	4604      	mov	r4, r0
   d6a0c:	2800      	cmp	r0, #0
   d6a0e:	f43f ae7a 	beq.w	d6706 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   d6a12:	2220      	movs	r2, #32
   d6a14:	4631      	mov	r1, r6
   d6a16:	f006 ffe5 	bl	dd9e4 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6a1a:	4643      	mov	r3, r8
   d6a1c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6a20:	6022      	str	r2, [r4, #0]
   d6a22:	685a      	ldr	r2, [r3, #4]
   d6a24:	6062      	str	r2, [r4, #4]
   d6a26:	891a      	ldrh	r2, [r3, #8]
   d6a28:	8122      	strh	r2, [r4, #8]
   d6a2a:	7a9b      	ldrb	r3, [r3, #10]
   d6a2c:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6a2e:	f898 3000 	ldrb.w	r3, [r8]
   d6a32:	f003 0318 	and.w	r3, r3, #24
   d6a36:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   d6a38:	4b0f      	ldr	r3, [pc, #60]	; (d6a78 <_ZN7FatFile4openEPS_P7fname_ti+0x38c>)
   d6a3a:	681b      	ldr	r3, [r3, #0]
   d6a3c:	b19b      	cbz	r3, d6a66 <_ZN7FatFile4openEPS_P7fname_ti+0x37a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6a3e:	f104 010e 	add.w	r1, r4, #14
   d6a42:	f104 0010 	add.w	r0, r4, #16
   d6a46:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   d6a48:	8a23      	ldrh	r3, [r4, #16]
   d6a4a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   d6a4c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   d6a4e:	89e3      	ldrh	r3, [r4, #14]
   d6a50:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   d6a52:	68aa      	ldr	r2, [r5, #8]
   d6a54:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6a58:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   d6a5c:	f3c7 194f 	ubfx	r9, r7, #5, #16
   d6a60:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   d6a64:	e790      	b.n	d6988 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
    dir->creationDate = FAT_DEFAULT_DATE;
   d6a66:	2321      	movs	r3, #33	; 0x21
   d6a68:	7423      	strb	r3, [r4, #16]
   d6a6a:	2328      	movs	r3, #40	; 0x28
   d6a6c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6a6e:	2308      	movs	r3, #8
   d6a70:	73a6      	strb	r6, [r4, #14]
   d6a72:	73e3      	strb	r3, [r4, #15]
   d6a74:	e7e8      	b.n	d6a48 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
   d6a76:	bf00      	nop
   d6a78:	2003e510 	.word	0x2003e510

000d6a7c <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d6a7c:	b510      	push	{r4, lr}
   d6a7e:	460c      	mov	r4, r1
  dir_t* dir;
  if (!isOpen()) {
   d6a80:	7801      	ldrb	r1, [r0, #0]
   d6a82:	b909      	cbnz	r1, d6a88 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d6a84:	2000      	movs	r0, #0
}
   d6a86:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   d6a88:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d6a8c:	d005      	beq.n	d6a9a <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   d6a8e:	232f      	movs	r3, #47	; 0x2f
   d6a90:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d6a92:	2300      	movs	r3, #0
   d6a94:	7063      	strb	r3, [r4, #1]
  return true;
   d6a96:	2001      	movs	r0, #1
   d6a98:	e7f5      	b.n	d6a86 <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d6a9a:	f000 f84f 	bl	d6b3c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6a9e:	2800      	cmp	r0, #0
   d6aa0:	d0f0      	beq.n	d6a84 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   d6aa2:	4621      	mov	r1, r4
   d6aa4:	f000 f859 	bl	d6b5a <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   d6aa8:	e7f5      	b.n	d6a96 <_ZN7FatFile6getSFNEPc+0x1a>

000d6aaa <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6aaa:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6aac:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d6aae:	f043 0304 	orr.w	r3, r3, #4
   d6ab2:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6ab4:	f100 0210 	add.w	r2, r0, #16
   d6ab8:	6880      	ldr	r0, [r0, #8]
   d6aba:	f000 bd59 	b.w	d7570 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d6ac0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6ac4:	7801      	ldrb	r1, [r0, #0]
   d6ac6:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   d6aca:	4604      	mov	r4, r0
  if (isRootFixed()) {
   d6acc:	d003      	beq.n	d6ad6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d6ace:	2600      	movs	r6, #0
}
   d6ad0:	4630      	mov	r0, r6
   d6ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   d6ad6:	6942      	ldr	r2, [r0, #20]
   d6ad8:	4b17      	ldr	r3, [pc, #92]	; (d6b38 <_ZN7FatFile13addDirClusterEv+0x78>)
   d6ada:	429a      	cmp	r2, r3
   d6adc:	d2f7      	bcs.n	d6ace <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   d6ade:	f7ff ffe4 	bl	d6aaa <_ZN7FatFile10addClusterEv>
   d6ae2:	4606      	mov	r6, r0
   d6ae4:	2800      	cmp	r0, #0
   d6ae6:	d0f2      	beq.n	d6ace <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6ae8:	6921      	ldr	r1, [r4, #16]
   d6aea:	68a0      	ldr	r0, [r4, #8]
   d6aec:	f000 fcd5 	bl	d749a <_ZNK9FatVolume17clusterFirstBlockEm>
   d6af0:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   d6af2:	68a0      	ldr	r0, [r4, #8]
   d6af4:	2205      	movs	r2, #5
   d6af6:	4639      	mov	r1, r7
   d6af8:	3024      	adds	r0, #36	; 0x24
   d6afa:	f000 fcab 	bl	d7454 <_ZN8FatCache4readEmh>
  if (!pc) {
   d6afe:	4680      	mov	r8, r0
   d6b00:	2800      	cmp	r0, #0
   d6b02:	d0e4      	beq.n	d6ace <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   d6b04:	4629      	mov	r1, r5
   d6b06:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6b0a:	f006 ff6b 	bl	dd9e4 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6b0e:	2501      	movs	r5, #1
   d6b10:	68a3      	ldr	r3, [r4, #8]
   d6b12:	791a      	ldrb	r2, [r3, #4]
   d6b14:	42aa      	cmp	r2, r5
   d6b16:	d909      	bls.n	d6b2c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   d6b18:	6818      	ldr	r0, [r3, #0]
   d6b1a:	4642      	mov	r2, r8
   d6b1c:	19e9      	adds	r1, r5, r7
   d6b1e:	f001 f802 	bl	d7b26 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6b22:	2800      	cmp	r0, #0
   d6b24:	d0d3      	beq.n	d6ace <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6b26:	3501      	adds	r5, #1
   d6b28:	b2ed      	uxtb	r5, r5
   d6b2a:	e7f1      	b.n	d6b10 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d6b2c:	6963      	ldr	r3, [r4, #20]
   d6b2e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d6b32:	6163      	str	r3, [r4, #20]
  return true;
   d6b34:	e7cc      	b.n	d6ad0 <_ZN7FatFile13addDirClusterEv+0x10>
   d6b36:	bf00      	nop
   d6b38:	001ffe00 	.word	0x001ffe00

000d6b3c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d6b3c:	b510      	push	{r4, lr}
   d6b3e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   d6b40:	6880      	ldr	r0, [r0, #8]
   d6b42:	460a      	mov	r2, r1
   d6b44:	3024      	adds	r0, #36	; 0x24
   d6b46:	69a1      	ldr	r1, [r4, #24]
   d6b48:	f000 fc84 	bl	d7454 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d6b4c:	b120      	cbz	r0, d6b58 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d6b4e:	88a3      	ldrh	r3, [r4, #4]
   d6b50:	f003 030f 	and.w	r3, r3, #15
   d6b54:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d6b58:	bd10      	pop	{r4, pc}

000d6b5a <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d6b5a:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d6b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b5e:	4604      	mov	r4, r0
   d6b60:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   d6b62:	2608      	movs	r6, #8
  uint8_t j = 0;
   d6b64:	4618      	mov	r0, r3
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6b66:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   d6b68:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6b6c:	2a20      	cmp	r2, #32
   d6b6e:	d018      	beq.n	d6ba2 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   d6b70:	2b08      	cmp	r3, #8
      name[j++] = '.';
   d6b72:	bf02      	ittt	eq
   d6b74:	540f      	strbeq	r7, [r1, r0]
   d6b76:	1c42      	addeq	r2, r0, #1
   d6b78:	b2d0      	uxtbeq	r0, r2
    }
    char c = dir->name[i];
   d6b7a:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6b7c:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   d6b80:	bf08      	it	eq
   d6b82:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6b84:	f1bc 0f19 	cmp.w	ip, #25
   d6b88:	d806      	bhi.n	d6b98 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   d6b8a:	f894 c00c 	ldrb.w	ip, [r4, #12]
   d6b8e:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   d6b92:	bf1c      	itt	ne
   d6b94:	3220      	addne	r2, #32
   d6b96:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d6b98:	f100 0c01 	add.w	ip, r0, #1
   d6b9c:	540a      	strb	r2, [r1, r0]
   d6b9e:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   d6ba2:	3301      	adds	r3, #1
   d6ba4:	b2db      	uxtb	r3, r3
   d6ba6:	2b0b      	cmp	r3, #11
   d6ba8:	d1de      	bne.n	d6b68 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  }
  name[j] = 0;
   d6baa:	2300      	movs	r3, #0
   d6bac:	540b      	strb	r3, [r1, r0]
  return j;
}
   d6bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6bb0 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6bb0:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d6bb2:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d6bb4:	4605      	mov	r5, r0
   d6bb6:	460e      	mov	r6, r1
  if (isOpen()) {
   d6bb8:	b94c      	cbnz	r4, d6bce <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d6bba:	2224      	movs	r2, #36	; 0x24
   d6bbc:	4621      	mov	r1, r4
   d6bbe:	f006 ff11 	bl	dd9e4 <memset>

  m_vol = vol;
   d6bc2:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d6bc4:	79f3      	ldrb	r3, [r6, #7]
   d6bc6:	2b10      	cmp	r3, #16
   d6bc8:	d003      	beq.n	d6bd2 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d6bca:	2b20      	cmp	r3, #32
   d6bcc:	d007      	beq.n	d6bde <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d6bce:	2000      	movs	r0, #0
   d6bd0:	e004      	b.n	d6bdc <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d6bd2:	2320      	movs	r3, #32
  m_flags = F_READ;
   d6bd4:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d6bd6:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d6bd8:	70ac      	strb	r4, [r5, #2]
  return true;
   d6bda:	4620      	mov	r0, r4
}
   d6bdc:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d6bde:	2340      	movs	r3, #64	; 0x40
   d6be0:	e7f8      	b.n	d6bd4 <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d6be2 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d6be2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d6be6:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d6be8:	4604      	mov	r4, r0
   d6bea:	4688      	mov	r8, r1
   d6bec:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d6bee:	2b00      	cmp	r3, #0
   d6bf0:	d05d      	beq.n	d6cae <_ZN7FatFile4readEPvj+0xcc>
   d6bf2:	7882      	ldrb	r2, [r0, #2]
   d6bf4:	07d1      	lsls	r1, r2, #31
   d6bf6:	d55a      	bpl.n	d6cae <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d6bf8:	071a      	lsls	r2, r3, #28
   d6bfa:	d52d      	bpl.n	d6c58 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d6bfc:	69c3      	ldr	r3, [r0, #28]
   d6bfe:	6942      	ldr	r2, [r0, #20]
   d6c00:	1a9b      	subs	r3, r3, r2
   d6c02:	429d      	cmp	r5, r3
   d6c04:	bf28      	it	cs
   d6c06:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d6c08:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d6c0a:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6c0e:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d6c12:	2e00      	cmp	r6, #0
   d6c14:	f000 808f 	beq.w	d6d36 <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d6c18:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d6c1a:	6963      	ldr	r3, [r4, #20]
   d6c1c:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d6c1e:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d6c20:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d6c24:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d6c28:	d51f      	bpl.n	d6c6a <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d6c2a:	6a00      	ldr	r0, [r0, #32]
   d6c2c:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6c2e:	68a0      	ldr	r0, [r4, #8]
   d6c30:	f1ba 0f00 	cmp.w	sl, #0
   d6c34:	d142      	bne.n	d6cbc <_ZN7FatFile4readEPvj+0xda>
   d6c36:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6c3a:	d33f      	bcc.n	d6cbc <_ZN7FatFile4readEPvj+0xda>
    return m_cache.lbn();
   d6c3c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6c3e:	4299      	cmp	r1, r3
   d6c40:	d03c      	beq.n	d6cbc <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d6c42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6c46:	d252      	bcs.n	d6cee <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d6c48:	6800      	ldr	r0, [r0, #0]
   d6c4a:	4642      	mov	r2, r8
   d6c4c:	f000 fee2 	bl	d7a14 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6c50:	b368      	cbz	r0, d6cae <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d6c52:	f44f 7700 	mov.w	r7, #512	; 0x200
   d6c56:	e044      	b.n	d6ce2 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d6c58:	069b      	lsls	r3, r3, #26
   d6c5a:	d5d5      	bpl.n	d6c08 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6c5c:	6883      	ldr	r3, [r0, #8]
   d6c5e:	891a      	ldrh	r2, [r3, #8]
   d6c60:	6943      	ldr	r3, [r0, #20]
   d6c62:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d6c66:	b29b      	uxth	r3, r3
   d6c68:	e7cb      	b.n	d6c02 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6c6a:	f890 9005 	ldrb.w	r9, [r0, #5]
   d6c6e:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d6c72:	f1ba 0f00 	cmp.w	sl, #0
   d6c76:	d108      	bne.n	d6c8a <_ZN7FatFile4readEPvj+0xa8>
   d6c78:	f1b9 0f00 	cmp.w	r9, #0
   d6c7c:	d105      	bne.n	d6c8a <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d6c7e:	b95b      	cbnz	r3, d6c98 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6c80:	0651      	lsls	r1, r2, #25
   d6c82:	bf4c      	ite	mi
   d6c84:	6a03      	ldrmi	r3, [r0, #32]
   d6c86:	6a23      	ldrpl	r3, [r4, #32]
   d6c88:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6c8a:	6921      	ldr	r1, [r4, #16]
   d6c8c:	68a0      	ldr	r0, [r4, #8]
   d6c8e:	f000 fc04 	bl	d749a <_ZNK9FatVolume17clusterFirstBlockEm>
   d6c92:	eb09 0100 	add.w	r1, r9, r0
   d6c96:	e7ca      	b.n	d6c2e <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6c98:	6921      	ldr	r1, [r4, #16]
   d6c9a:	465a      	mov	r2, fp
   d6c9c:	f000 fc03 	bl	d74a6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d6ca0:	2800      	cmp	r0, #0
   d6ca2:	db04      	blt.n	d6cae <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d6ca4:	d1f1      	bne.n	d6c8a <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d6ca6:	7823      	ldrb	r3, [r4, #0]
   d6ca8:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6cac:	d143      	bne.n	d6d36 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d6cae:	7863      	ldrb	r3, [r4, #1]
   d6cb0:	f043 0302 	orr.w	r3, r3, #2
   d6cb4:	7063      	strb	r3, [r4, #1]
  return -1;
   d6cb6:	f04f 30ff 	mov.w	r0, #4294967295
   d6cba:	e03d      	b.n	d6d38 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d6cbc:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d6cc0:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d6cc2:	f04f 0200 	mov.w	r2, #0
   d6cc6:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d6cca:	bf28      	it	cs
   d6ccc:	4637      	movcs	r7, r6
   d6cce:	f000 fbc1 	bl	d7454 <_ZN8FatCache4readEmh>
      if (!pc) {
   d6cd2:	2800      	cmp	r0, #0
   d6cd4:	d0eb      	beq.n	d6cae <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d6cd6:	eb00 010a 	add.w	r1, r0, sl
   d6cda:	463a      	mov	r2, r7
   d6cdc:	4640      	mov	r0, r8
   d6cde:	f006 fe73 	bl	dd9c8 <memcpy>
    m_curPosition += n;
   d6ce2:	6963      	ldr	r3, [r4, #20]
   d6ce4:	443b      	add	r3, r7
    dst += n;
   d6ce6:	44b8      	add	r8, r7
    m_curPosition += n;
   d6ce8:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6cea:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d6cec:	e791      	b.n	d6c12 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d6cee:	7822      	ldrb	r2, [r4, #0]
   d6cf0:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d6cf2:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d6cf6:	d406      	bmi.n	d6d06 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d6cf8:	7902      	ldrb	r2, [r0, #4]
   d6cfa:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d6cfe:	b2d2      	uxtb	r2, r2
   d6d00:	4592      	cmp	sl, r2
   d6d02:	bf28      	it	cs
   d6d04:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6d06:	4299      	cmp	r1, r3
      n = 512*nb;
   d6d08:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6d0c:	d208      	bcs.n	d6d20 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d6d0e:	68a0      	ldr	r0, [r4, #8]
   d6d10:	4653      	mov	r3, sl
   d6d12:	6800      	ldr	r0, [r0, #0]
   d6d14:	4642      	mov	r2, r8
   d6d16:	f000 fec5 	bl	d7aa4 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6d1a:	2800      	cmp	r0, #0
   d6d1c:	d1e1      	bne.n	d6ce2 <_ZN7FatFile4readEPvj+0x100>
   d6d1e:	e7c6      	b.n	d6cae <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6d20:	4453      	add	r3, sl
   d6d22:	428b      	cmp	r3, r1
   d6d24:	d9f3      	bls.n	d6d0e <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d6d26:	3024      	adds	r0, #36	; 0x24
   d6d28:	9101      	str	r1, [sp, #4]
   d6d2a:	f000 fb6b 	bl	d7404 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d6d2e:	9901      	ldr	r1, [sp, #4]
   d6d30:	2800      	cmp	r0, #0
   d6d32:	d1ec      	bne.n	d6d0e <_ZN7FatFile4readEPvj+0x12c>
   d6d34:	e7bb      	b.n	d6cae <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d6d36:	1ba8      	subs	r0, r5, r6
}
   d6d38:	b003      	add	sp, #12
   d6d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6d3e <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d6d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d6d40:	2201      	movs	r2, #1
   d6d42:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d6d46:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d6d4a:	4604      	mov	r4, r0
   d6d4c:	f7ff ff49 	bl	d6be2 <_ZN7FatFile4readEPvj>
   d6d50:	2801      	cmp	r0, #1
   d6d52:	bf0a      	itet	eq
   d6d54:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d6d58:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d6d5c:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d6d60:	b002      	add	sp, #8
   d6d62:	bd70      	pop	{r4, r5, r6, pc}

000d6d64 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6d66:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   d6d68:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6d6c:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6d6e:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   d6d72:	d000      	beq.n	d6d76 <_ZN7FatFile12readDirCacheEb+0x12>
   d6d74:	b999      	cbnz	r1, d6d9e <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   d6d76:	2201      	movs	r2, #1
   d6d78:	f10d 0107 	add.w	r1, sp, #7
   d6d7c:	4620      	mov	r0, r4
   d6d7e:	f7ff ff30 	bl	d6be2 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   d6d82:	b240      	sxtb	r0, r0
   d6d84:	2801      	cmp	r0, #1
   d6d86:	d002      	beq.n	d6d8e <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   d6d88:	2000      	movs	r0, #0
}
   d6d8a:	b003      	add	sp, #12
   d6d8c:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   d6d8e:	6963      	ldr	r3, [r4, #20]
   d6d90:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   d6d92:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   d6d94:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   d6d96:	3030      	adds	r0, #48	; 0x30
   d6d98:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   d6d9c:	e7f5      	b.n	d6d8a <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   d6d9e:	3320      	adds	r3, #32
   d6da0:	e7f7      	b.n	d6d92 <_ZN7FatFile12readDirCacheEb+0x2e>

000d6da2 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d6da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d6da6:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d6da8:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d6daa:	4604      	mov	r4, r0
   d6dac:	460d      	mov	r5, r1
  if (!isOpen()) {
   d6dae:	b162      	cbz	r2, d6dca <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d6db0:	6940      	ldr	r0, [r0, #20]
   d6db2:	4288      	cmp	r0, r1
   d6db4:	d002      	beq.n	d6dbc <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d6db6:	b919      	cbnz	r1, d6dc0 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d6db8:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d6dba:	6165      	str	r5, [r4, #20]
    return true;
   d6dbc:	2001      	movs	r0, #1
   d6dbe:	e006      	b.n	d6dce <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d6dc0:	0716      	lsls	r6, r2, #28
   d6dc2:	d506      	bpl.n	d6dd2 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d6dc4:	69e3      	ldr	r3, [r4, #28]
   d6dc6:	428b      	cmp	r3, r1
   d6dc8:	d20b      	bcs.n	d6de2 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d6dca:	6127      	str	r7, [r4, #16]
  return false;
   d6dcc:	2000      	movs	r0, #0
}
   d6dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d6dd2:	0691      	lsls	r1, r2, #26
   d6dd4:	d505      	bpl.n	d6de2 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d6dd6:	68a3      	ldr	r3, [r4, #8]
   d6dd8:	891b      	ldrh	r3, [r3, #8]
   d6dda:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d6dde:	d9ec      	bls.n	d6dba <_ZN7FatFile7seekSetEm+0x18>
   d6de0:	e7f3      	b.n	d6dca <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6de2:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d6de6:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d6dea:	1e43      	subs	r3, r0, #1
   d6dec:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6df0:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6df2:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6df4:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d6df6:	42b3      	cmp	r3, r6
   d6df8:	d800      	bhi.n	d6dfc <_ZN7FatFile7seekSetEm+0x5a>
   d6dfa:	b998      	cbnz	r0, d6e24 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6dfc:	0653      	lsls	r3, r2, #25
   d6dfe:	bf4c      	ite	mi
   d6e00:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d6e04:	6a23      	ldrpl	r3, [r4, #32]
   d6e06:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6e08:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d6e0c:	2e00      	cmp	r6, #0
   d6e0e:	d0d4      	beq.n	d6dba <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6e10:	6921      	ldr	r1, [r4, #16]
   d6e12:	68a0      	ldr	r0, [r4, #8]
   d6e14:	4642      	mov	r2, r8
   d6e16:	f000 fb46 	bl	d74a6 <_ZN9FatVolume6fatGetEmPm>
   d6e1a:	2800      	cmp	r0, #0
   d6e1c:	f106 36ff 	add.w	r6, r6, #4294967295
   d6e20:	dcf4      	bgt.n	d6e0c <_ZN7FatFile7seekSetEm+0x6a>
   d6e22:	e7d2      	b.n	d6dca <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d6e24:	1af6      	subs	r6, r6, r3
   d6e26:	e7ef      	b.n	d6e08 <_ZN7FatFile7seekSetEm+0x66>

000d6e28 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   d6e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e2a:	460f      	mov	r7, r1
   d6e2c:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
   d6e2e:	2100      	movs	r1, #0
   d6e30:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   d6e32:	4604      	mov	r4, r0
   d6e34:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
   d6e36:	f006 fdd5 	bl	dd9e4 <memset>
  m_vol = dirFile->m_vol;
   d6e3a:	68b8      	ldr	r0, [r7, #8]
   d6e3c:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   d6e3e:	80a6      	strh	r6, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6e40:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d6e44:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
   d6e48:	6a3b      	ldr	r3, [r7, #32]
   d6e4a:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6e4c:	0171      	lsls	r1, r6, #5
   d6e4e:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6e52:	7af3      	ldrb	r3, [r6, #11]
   d6e54:	071f      	lsls	r7, r3, #28
   d6e56:	d446      	bmi.n	d6ee6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d6e58:	1843      	adds	r3, r0, r1
   d6e5a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6e5e:	f003 0317 	and.w	r3, r3, #23
   d6e62:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d6e64:	7af2      	ldrb	r2, [r6, #11]
   d6e66:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
   d6e6a:	bf04      	itt	eq
   d6e6c:	f043 0308 	orreq.w	r3, r3, #8
   d6e70:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   d6e72:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6e76:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   d6e78:	f005 0303 	and.w	r3, r5, #3
   d6e7c:	2b01      	cmp	r3, #1
   d6e7e:	d02c      	beq.n	d6eda <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
   d6e80:	2b02      	cmp	r3, #2
   d6e82:	d028      	beq.n	d6ed6 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
   d6e84:	bb7b      	cbnz	r3, d6ee6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
   d6e86:	056a      	lsls	r2, r5, #21
   d6e88:	d42d      	bmi.n	d6ee6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
   d6e8a:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   d6e8c:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   d6e8e:	78a2      	ldrb	r2, [r4, #2]
   d6e90:	0793      	lsls	r3, r2, #30
   d6e92:	d504      	bpl.n	d6e9e <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
   d6e94:	7823      	ldrb	r3, [r4, #0]
   d6e96:	06df      	lsls	r7, r3, #27
   d6e98:	d425      	bmi.n	d6ee6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
   d6e9a:	07de      	lsls	r6, r3, #31
   d6e9c:	d423      	bmi.n	d6ee6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6e9e:	11ab      	asrs	r3, r5, #6
   d6ea0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d6ea4:	f005 0608 	and.w	r6, r5, #8
   d6ea8:	4333      	orrs	r3, r6
   d6eaa:	4313      	orrs	r3, r2
   d6eac:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
   d6eae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   d6eb0:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6eb2:	1843      	adds	r3, r0, r1
   d6eb4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   d6eb8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6ebc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   d6ec0:	056a      	lsls	r2, r5, #21
   d6ec2:	d513      	bpl.n	d6eec <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6ec4:	b959      	cbnz	r1, d6ede <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
   d6ec6:	78a3      	ldrb	r3, [r4, #2]
   d6ec8:	f043 0304 	orr.w	r3, r3, #4
   d6ecc:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6ece:	046b      	lsls	r3, r5, #17
   d6ed0:	d410      	bmi.n	d6ef4 <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
   d6ed2:	2001      	movs	r0, #1
}
   d6ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   d6ed6:	2303      	movs	r3, #3
   d6ed8:	e7d8      	b.n	d6e8c <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
   d6eda:	2302      	movs	r3, #2
   d6edc:	e7d6      	b.n	d6e8c <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6ede:	f000 fb82 	bl	d75e6 <_ZN9FatVolume9freeChainEm>
   d6ee2:	2800      	cmp	r0, #0
   d6ee4:	d1ef      	bne.n	d6ec6 <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
   d6ee6:	2000      	movs	r0, #0
   d6ee8:	7020      	strb	r0, [r4, #0]
  return false;
   d6eea:	e7f3      	b.n	d6ed4 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
   d6eec:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d6eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6ef0:	61e3      	str	r3, [r4, #28]
   d6ef2:	e7ec      	b.n	d6ece <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6ef4:	69e1      	ldr	r1, [r4, #28]
   d6ef6:	4620      	mov	r0, r4
   d6ef8:	f7ff ff53 	bl	d6da2 <_ZN7FatFile7seekSetEm>
   d6efc:	2800      	cmp	r0, #0
   d6efe:	d1e8      	bne.n	d6ed2 <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
   d6f00:	e7f1      	b.n	d6ee6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>

000d6f02 <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6f02:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6f06:	7803      	ldrb	r3, [r0, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6f08:	4607      	mov	r7, r0
   d6f0a:	460d      	mov	r5, r1
   d6f0c:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6f0e:	bb53      	cbnz	r3, d6f66 <_ZN7FatFile8openNextEPS_i+0x64>
   d6f10:	780b      	ldrb	r3, [r1, #0]
   d6f12:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6f16:	d026      	beq.n	d6f66 <_ZN7FatFile8openNextEPS_i+0x64>
   d6f18:	694c      	ldr	r4, [r1, #20]
   d6f1a:	f014 041f 	ands.w	r4, r4, #31
   d6f1e:	d122      	bne.n	d6f66 <_ZN7FatFile8openNextEPS_i+0x64>
   d6f20:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   d6f22:	2100      	movs	r1, #0
   d6f24:	4628      	mov	r0, r5
    index = dirFile->curPosition()/32;
   d6f26:	f8d5 9014 	ldr.w	r9, [r5, #20]
    dir_t* dir = dirFile->readDirCache();
   d6f2a:	f7ff ff1b 	bl	d6d64 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6f2e:	b1d0      	cbz	r0, d6f66 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   d6f30:	7806      	ldrb	r6, [r0, #0]
   d6f32:	b1c6      	cbz	r6, d6f66 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6f34:	2e2e      	cmp	r6, #46	; 0x2e
   d6f36:	d010      	beq.n	d6f5a <_ZN7FatFile8openNextEPS_i+0x58>
   d6f38:	2ee5      	cmp	r6, #229	; 0xe5
   d6f3a:	d00e      	beq.n	d6f5a <_ZN7FatFile8openNextEPS_i+0x58>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6f3c:	7ac3      	ldrb	r3, [r0, #11]
   d6f3e:	071a      	lsls	r2, r3, #28
   d6f40:	d413      	bmi.n	d6f6a <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d6f42:	b964      	cbnz	r4, d6f5e <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d6f44:	9400      	str	r4, [sp, #0]
   d6f46:	4653      	mov	r3, sl
   d6f48:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d6f4c:	4629      	mov	r1, r5
   d6f4e:	4638      	mov	r0, r7
   d6f50:	f7ff ff6a 	bl	d6e28 <_ZN7FatFile15openCachedEntryEPS_tih>
}
   d6f54:	b002      	add	sp, #8
   d6f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   d6f5a:	2400      	movs	r4, #0
   d6f5c:	e7e1      	b.n	d6f22 <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d6f5e:	f7ff f987 	bl	d6270 <_ZN7FatFile11lfnChecksumEPh>
   d6f62:	4540      	cmp	r0, r8
   d6f64:	d0ee      	beq.n	d6f44 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   d6f66:	2000      	movs	r0, #0
   d6f68:	e7f4      	b.n	d6f54 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6f6a:	2b0f      	cmp	r3, #15
   d6f6c:	d1f5      	bne.n	d6f5a <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d6f6e:	0673      	lsls	r3, r6, #25
   d6f70:	d5d7      	bpl.n	d6f22 <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   d6f72:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   d6f76:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   d6f7a:	e7d2      	b.n	d6f22 <_ZN7FatFile8openNextEPS_i+0x20>

000d6f7c <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6f7c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d6f7e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d6f80:	4604      	mov	r4, r0
  if (!isOpen()) {
   d6f82:	b90b      	cbnz	r3, d6f88 <_ZN7FatFile4syncEv+0xc>
    return true;
   d6f84:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d6f86:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6f88:	7883      	ldrb	r3, [r0, #2]
   d6f8a:	075a      	lsls	r2, r3, #29
   d6f8c:	d523      	bpl.n	d6fd6 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6f8e:	2101      	movs	r1, #1
   d6f90:	f7ff fdd4 	bl	d6b3c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6f94:	4605      	mov	r5, r0
   d6f96:	b928      	cbnz	r0, d6fa4 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d6f98:	7863      	ldrb	r3, [r4, #1]
   d6f9a:	f043 0301 	orr.w	r3, r3, #1
   d6f9e:	7063      	strb	r3, [r4, #1]
  return false;
   d6fa0:	2000      	movs	r0, #0
   d6fa2:	e7f0      	b.n	d6f86 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6fa4:	7803      	ldrb	r3, [r0, #0]
   d6fa6:	2be5      	cmp	r3, #229	; 0xe5
   d6fa8:	d0f6      	beq.n	d6f98 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d6faa:	7823      	ldrb	r3, [r4, #0]
   d6fac:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d6fae:	bf44      	itt	mi
   d6fb0:	69e3      	ldrmi	r3, [r4, #28]
   d6fb2:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d6fb4:	8c23      	ldrh	r3, [r4, #32]
   d6fb6:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6fb8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6fba:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d6fbc:	4b09      	ldr	r3, [pc, #36]	; (d6fe4 <_ZN7FatFile4syncEv+0x68>)
   d6fbe:	681b      	ldr	r3, [r3, #0]
   d6fc0:	b12b      	cbz	r3, d6fce <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d6fc2:	f100 0116 	add.w	r1, r0, #22
   d6fc6:	3018      	adds	r0, #24
   d6fc8:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6fca:	8b2b      	ldrh	r3, [r5, #24]
   d6fcc:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d6fce:	78a3      	ldrb	r3, [r4, #2]
   d6fd0:	f023 0304 	bic.w	r3, r3, #4
   d6fd4:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d6fd6:	68a0      	ldr	r0, [r4, #8]
   d6fd8:	f7ff f93d 	bl	d6256 <_ZN9FatVolume9cacheSyncEv>
   d6fdc:	2800      	cmp	r0, #0
   d6fde:	d0db      	beq.n	d6f98 <_ZN7FatFile4syncEv+0x1c>
   d6fe0:	e7d0      	b.n	d6f84 <_ZN7FatFile4syncEv+0x8>
   d6fe2:	bf00      	nop
   d6fe4:	2003e510 	.word	0x2003e510

000d6fe8 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d6fe8:	b510      	push	{r4, lr}
   d6fea:	4604      	mov	r4, r0
  bool rtn = sync();
   d6fec:	f7ff ffc6 	bl	d6f7c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6ff0:	2300      	movs	r3, #0
   d6ff2:	7023      	strb	r3, [r4, #0]
}
   d6ff4:	bd10      	pop	{r4, pc}

000d6ff6 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ff8:	b093      	sub	sp, #76	; 0x4c
   d6ffa:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6ffc:	2300      	movs	r3, #0
   d6ffe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   d7002:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d7004:	9201      	str	r2, [sp, #4]
   d7006:	4606      	mov	r6, r0
   d7008:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   d700a:	b113      	cbz	r3, d7012 <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
   d700c:	2000      	movs	r0, #0
}
   d700e:	b013      	add	sp, #76	; 0x4c
   d7010:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   d7012:	780b      	ldrb	r3, [r1, #0]
   d7014:	f013 0f70 	tst.w	r3, #112	; 0x70
   d7018:	d0f8      	beq.n	d700c <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
   d701a:	7813      	ldrb	r3, [r2, #0]
   d701c:	2b2f      	cmp	r3, #47	; 0x2f
   d701e:	d112      	bne.n	d7046 <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
   d7020:	9a01      	ldr	r2, [sp, #4]
   d7022:	7813      	ldrb	r3, [r2, #0]
   d7024:	2b2f      	cmp	r3, #47	; 0x2f
   d7026:	d102      	bne.n	d702e <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
   d7028:	3201      	adds	r2, #1
   d702a:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d702c:	e7f8      	b.n	d7020 <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
   d702e:	68a1      	ldr	r1, [r4, #8]
   d7030:	b91b      	cbnz	r3, d703a <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
   d7032:	4630      	mov	r0, r6
   d7034:	f7ff fdbc 	bl	d6bb0 <_ZN7FatFile8openRootEP9FatVolume>
   d7038:	e7e9      	b.n	d700e <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d703a:	a809      	add	r0, sp, #36	; 0x24
   d703c:	f7ff fdb8 	bl	d6bb0 <_ZN7FatFile8openRootEP9FatVolume>
   d7040:	2800      	cmp	r0, #0
   d7042:	d0e3      	beq.n	d700c <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
   d7044:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d7046:	9801      	ldr	r0, [sp, #4]
   d7048:	aa01      	add	r2, sp, #4
   d704a:	a903      	add	r1, sp, #12
   d704c:	f7ff f9b8 	bl	d63c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d7050:	2800      	cmp	r0, #0
   d7052:	d0db      	beq.n	d700c <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
   d7054:	9b01      	ldr	r3, [sp, #4]
   d7056:	781b      	ldrb	r3, [r3, #0]
   d7058:	b19b      	cbz	r3, d7082 <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
   d705a:	2300      	movs	r3, #0
   d705c:	aa03      	add	r2, sp, #12
   d705e:	4621      	mov	r1, r4
   d7060:	4630      	mov	r0, r6
   d7062:	f7ff fb43 	bl	d66ec <_ZN7FatFile4openEPS_P7fname_ti>
   d7066:	2800      	cmp	r0, #0
   d7068:	d0d0      	beq.n	d700c <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
   d706a:	4635      	mov	r5, r6
   d706c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d706e:	ac09      	add	r4, sp, #36	; 0x24
   d7070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7076:	682b      	ldr	r3, [r5, #0]
   d7078:	6023      	str	r3, [r4, #0]
    close();
   d707a:	4630      	mov	r0, r6
   d707c:	f7ff ffb4 	bl	d6fe8 <_ZN7FatFile5closeEv>
  while (1) {
   d7080:	e7e0      	b.n	d7044 <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
   d7082:	463b      	mov	r3, r7
   d7084:	aa03      	add	r2, sp, #12
   d7086:	4621      	mov	r1, r4
   d7088:	4630      	mov	r0, r6
   d708a:	f7ff fb2f 	bl	d66ec <_ZN7FatFile4openEPS_P7fname_ti>
   d708e:	e7be      	b.n	d700e <_ZN7FatFile4openEPS_PKci+0x18>

000d7090 <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d7090:	b500      	push	{lr}
   d7092:	b08b      	sub	sp, #44	; 0x2c
   d7094:	2300      	movs	r3, #0
   d7096:	460a      	mov	r2, r1
   d7098:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   d709c:	4601      	mov	r1, r0
   d709e:	2301      	movs	r3, #1
   d70a0:	a801      	add	r0, sp, #4
   d70a2:	f7ff ffa8 	bl	d6ff6 <_ZN7FatFile4openEPS_PKci>
   d70a6:	b110      	cbz	r0, d70ae <_ZN7FatFile6removeEPS_PKc+0x1e>
  return file.remove();
   d70a8:	a801      	add	r0, sp, #4
   d70aa:	f7ff fa69 	bl	d6580 <_ZN7FatFile6removeEv>
}
   d70ae:	b00b      	add	sp, #44	; 0x2c
   d70b0:	f85d fb04 	ldr.w	pc, [sp], #4

000d70b4 <_ZN7FatFile5mkdirEPS_P7fname_t>:
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d70b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!parent->isDir()) {
   d70b8:	780b      	ldrb	r3, [r1, #0]
   d70ba:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d70be:	b088      	sub	sp, #32
   d70c0:	4604      	mov	r4, r0
   d70c2:	460e      	mov	r6, r1
  if (!parent->isDir()) {
   d70c4:	d103      	bne.n	d70ce <_ZN7FatFile5mkdirEPS_P7fname_t+0x1a>
  return false;
   d70c6:	2000      	movs	r0, #0
}
   d70c8:	b008      	add	sp, #32
   d70ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
   d70ce:	f640 2302 	movw	r3, #2562	; 0xa02
   d70d2:	f7ff fb0b 	bl	d66ec <_ZN7FatFile4openEPS_P7fname_ti>
   d70d6:	2800      	cmp	r0, #0
   d70d8:	d0f5      	beq.n	d70c6 <_ZN7FatFile5mkdirEPS_P7fname_t+0x12>
  m_flags = F_READ;
   d70da:	2701      	movs	r7, #1
  m_attr = FILE_ATTR_SUBDIR;
   d70dc:	2510      	movs	r5, #16
  m_flags = F_READ;
   d70de:	70a7      	strb	r7, [r4, #2]
  m_attr = FILE_ATTR_SUBDIR;
   d70e0:	7025      	strb	r5, [r4, #0]
  if (!addDirCluster()) {
   d70e2:	4620      	mov	r0, r4
   d70e4:	f7ff fcec 	bl	d6ac0 <_ZN7FatFile13addDirClusterEv>
   d70e8:	2800      	cmp	r0, #0
   d70ea:	d0ec      	beq.n	d70c6 <_ZN7FatFile5mkdirEPS_P7fname_t+0x12>
  m_firstCluster = m_curCluster;
   d70ec:	6923      	ldr	r3, [r4, #16]
   d70ee:	6223      	str	r3, [r4, #32]
    seekSet(0);
   d70f0:	2100      	movs	r1, #0
   d70f2:	4620      	mov	r0, r4
   d70f4:	f7ff fe55 	bl	d6da2 <_ZN7FatFile7seekSetEm>
  if (!sync()) {
   d70f8:	4620      	mov	r0, r4
   d70fa:	f7ff ff3f 	bl	d6f7c <_ZN7FatFile4syncEv>
   d70fe:	2800      	cmp	r0, #0
   d7100:	d0e1      	beq.n	d70c6 <_ZN7FatFile5mkdirEPS_P7fname_t+0x12>
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d7102:	4639      	mov	r1, r7
   d7104:	4620      	mov	r0, r4
   d7106:	f7ff fd19 	bl	d6b3c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d710a:	4603      	mov	r3, r0
   d710c:	2800      	cmp	r0, #0
   d710e:	d0da      	beq.n	d70c6 <_ZN7FatFile5mkdirEPS_P7fname_t+0x12>
  memcpy(&dot, dir, sizeof(dot));
   d7110:	466f      	mov	r7, sp
  dir->attributes = DIR_ATT_DIRECTORY;
   d7112:	72c5      	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
   d7114:	4602      	mov	r2, r0
   d7116:	f100 0e20 	add.w	lr, r0, #32
   d711a:	463d      	mov	r5, r7
   d711c:	6810      	ldr	r0, [r2, #0]
   d711e:	6851      	ldr	r1, [r2, #4]
   d7120:	46bc      	mov	ip, r7
   d7122:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d7126:	3208      	adds	r2, #8
   d7128:	4572      	cmp	r2, lr
   d712a:	4667      	mov	r7, ip
   d712c:	d1f6      	bne.n	d711c <_ZN7FatFile5mkdirEPS_P7fname_t+0x68>
   d712e:	f8b3 8014 	ldrh.w	r8, [r3, #20]
   d7132:	8b5f      	ldrh	r7, [r3, #26]
    dot.name[i] = ' ';
   d7134:	2220      	movs	r2, #32
  memcpy(&dot, dir, sizeof(dot));
   d7136:	2301      	movs	r3, #1
    dot.name[i] = ' ';
   d7138:	54ea      	strb	r2, [r5, r3]
  for (uint8_t i = 1; i < 11; i++) {
   d713a:	3301      	adds	r3, #1
   d713c:	2b0b      	cmp	r3, #11
   d713e:	d1fb      	bne.n	d7138 <_ZN7FatFile5mkdirEPS_P7fname_t+0x84>
  block = m_vol->clusterFirstBlock(m_firstCluster);
   d7140:	6a21      	ldr	r1, [r4, #32]
   d7142:	68a0      	ldr	r0, [r4, #8]
   d7144:	f000 f9a9 	bl	d749a <_ZNK9FatVolume17clusterFirstBlockEm>
   d7148:	4601      	mov	r1, r0
    return m_cache.read(blockNumber, options);
   d714a:	68a0      	ldr	r0, [r4, #8]
   d714c:	2201      	movs	r2, #1
   d714e:	3024      	adds	r0, #36	; 0x24
   d7150:	f000 f980 	bl	d7454 <_ZN8FatCache4readEmh>
  if (!pc) {
   d7154:	4603      	mov	r3, r0
   d7156:	2800      	cmp	r0, #0
   d7158:	d0b5      	beq.n	d70c6 <_ZN7FatFile5mkdirEPS_P7fname_t+0x12>
  memcpy(&pc->dir[0], &dot, sizeof(dot));
   d715a:	222e      	movs	r2, #46	; 0x2e
   d715c:	f8ad 701a 	strh.w	r7, [sp, #26]
   d7160:	f88d 2000 	strb.w	r2, [sp]
   d7164:	f8ad 8014 	strh.w	r8, [sp, #20]
   d7168:	46ac      	mov	ip, r5
   d716a:	4607      	mov	r7, r0
   d716c:	f10d 0e20 	add.w	lr, sp, #32
   d7170:	4662      	mov	r2, ip
   d7172:	ca03      	ldmia	r2!, {r0, r1}
   d7174:	4572      	cmp	r2, lr
   d7176:	6038      	str	r0, [r7, #0]
   d7178:	6079      	str	r1, [r7, #4]
   d717a:	4694      	mov	ip, r2
   d717c:	f107 0708 	add.w	r7, r7, #8
   d7180:	d1f6      	bne.n	d7170 <_ZN7FatFile5mkdirEPS_P7fname_t+0xbc>
  dot.name[1] = '.';
   d7182:	222e      	movs	r2, #46	; 0x2e
   d7184:	f88d 2001 	strb.w	r2, [sp, #1]
  dot.firstClusterLow = parent->m_firstCluster & 0XFFFF;
   d7188:	6a32      	ldr	r2, [r6, #32]
   d718a:	f8ad 201a 	strh.w	r2, [sp, #26]
  dot.firstClusterHigh = parent->m_firstCluster >> 16;
   d718e:	0c11      	lsrs	r1, r2, #16
   d7190:	f8ad 1014 	strh.w	r1, [sp, #20]
  memcpy(&pc->dir[1], &dot, sizeof(dot));
   d7194:	3320      	adds	r3, #32
   d7196:	ae08      	add	r6, sp, #32
   d7198:	462a      	mov	r2, r5
   d719a:	ca03      	ldmia	r2!, {r0, r1}
   d719c:	42b2      	cmp	r2, r6
   d719e:	6018      	str	r0, [r3, #0]
   d71a0:	6059      	str	r1, [r3, #4]
   d71a2:	4615      	mov	r5, r2
   d71a4:	f103 0308 	add.w	r3, r3, #8
   d71a8:	d1f6      	bne.n	d7198 <_ZN7FatFile5mkdirEPS_P7fname_t+0xe4>
  return m_vol->cacheSync();
   d71aa:	68a0      	ldr	r0, [r4, #8]
   d71ac:	f7ff f853 	bl	d6256 <_ZN9FatVolume9cacheSyncEv>
   d71b0:	e78a      	b.n	d70c8 <_ZN7FatFile5mkdirEPS_P7fname_t+0x14>

000d71b2 <_ZN7FatFile5mkdirEPS_PKcb>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d71b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d71b4:	b093      	sub	sp, #76	; 0x4c
   d71b6:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d71b8:	2300      	movs	r3, #0
   d71ba:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !parent->isDir()) {
   d71be:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d71c0:	9201      	str	r2, [sp, #4]
   d71c2:	4606      	mov	r6, r0
   d71c4:	460c      	mov	r4, r1
  if (isOpen() || !parent->isDir()) {
   d71c6:	b113      	cbz	r3, d71ce <_ZN7FatFile5mkdirEPS_PKcb+0x1c>
  return false;
   d71c8:	2000      	movs	r0, #0
}
   d71ca:	b013      	add	sp, #76	; 0x4c
   d71cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
   d71ce:	780b      	ldrb	r3, [r1, #0]
   d71d0:	f013 0f70 	tst.w	r3, #112	; 0x70
   d71d4:	d0f8      	beq.n	d71c8 <_ZN7FatFile5mkdirEPS_PKcb+0x16>
  if (isDirSeparator(*path)) {
   d71d6:	7813      	ldrb	r3, [r2, #0]
   d71d8:	2b2f      	cmp	r3, #47	; 0x2f
   d71da:	d10d      	bne.n	d71f8 <_ZN7FatFile5mkdirEPS_PKcb+0x46>
    while (isDirSeparator(*path)) {
   d71dc:	9a01      	ldr	r2, [sp, #4]
   d71de:	7813      	ldrb	r3, [r2, #0]
   d71e0:	2b2f      	cmp	r3, #47	; 0x2f
   d71e2:	d102      	bne.n	d71ea <_ZN7FatFile5mkdirEPS_PKcb+0x38>
      path++;
   d71e4:	3201      	adds	r2, #1
   d71e6:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d71e8:	e7f8      	b.n	d71dc <_ZN7FatFile5mkdirEPS_PKcb+0x2a>
    if (!tmpDir.openRoot(parent->m_vol)) {
   d71ea:	68a1      	ldr	r1, [r4, #8]
   d71ec:	a809      	add	r0, sp, #36	; 0x24
   d71ee:	f7ff fcdf 	bl	d6bb0 <_ZN7FatFile8openRootEP9FatVolume>
   d71f2:	2800      	cmp	r0, #0
   d71f4:	d0e8      	beq.n	d71c8 <_ZN7FatFile5mkdirEPS_PKcb+0x16>
    parent = &tmpDir;
   d71f6:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d71f8:	9801      	ldr	r0, [sp, #4]
   d71fa:	aa01      	add	r2, sp, #4
   d71fc:	a903      	add	r1, sp, #12
   d71fe:	f7ff f8df 	bl	d63c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d7202:	2800      	cmp	r0, #0
   d7204:	d0e0      	beq.n	d71c8 <_ZN7FatFile5mkdirEPS_PKcb+0x16>
    if (!*path) {
   d7206:	9b01      	ldr	r3, [sp, #4]
   d7208:	781b      	ldrb	r3, [r3, #0]
   d720a:	b1e3      	cbz	r3, d7246 <_ZN7FatFile5mkdirEPS_PKcb+0x94>
    if (!open(parent, &fname, O_RDONLY)) {
   d720c:	2300      	movs	r3, #0
   d720e:	aa03      	add	r2, sp, #12
   d7210:	4621      	mov	r1, r4
   d7212:	4630      	mov	r0, r6
   d7214:	f7ff fa6a 	bl	d66ec <_ZN7FatFile4openEPS_P7fname_ti>
   d7218:	b158      	cbz	r0, d7232 <_ZN7FatFile5mkdirEPS_PKcb+0x80>
    tmpDir = *this;
   d721a:	4635      	mov	r5, r6
   d721c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d721e:	ac09      	add	r4, sp, #36	; 0x24
   d7220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7226:	682b      	ldr	r3, [r5, #0]
   d7228:	6023      	str	r3, [r4, #0]
    close();
   d722a:	4630      	mov	r0, r6
   d722c:	f7ff fedc 	bl	d6fe8 <_ZN7FatFile5closeEv>
  while (1) {
   d7230:	e7e1      	b.n	d71f6 <_ZN7FatFile5mkdirEPS_PKcb+0x44>
      if (!pFlag || !mkdir(parent, &fname)) {
   d7232:	2f00      	cmp	r7, #0
   d7234:	d0c8      	beq.n	d71c8 <_ZN7FatFile5mkdirEPS_PKcb+0x16>
   d7236:	aa03      	add	r2, sp, #12
   d7238:	4621      	mov	r1, r4
   d723a:	4630      	mov	r0, r6
   d723c:	f7ff ff3a 	bl	d70b4 <_ZN7FatFile5mkdirEPS_P7fname_t>
   d7240:	2800      	cmp	r0, #0
   d7242:	d1ea      	bne.n	d721a <_ZN7FatFile5mkdirEPS_PKcb+0x68>
   d7244:	e7c0      	b.n	d71c8 <_ZN7FatFile5mkdirEPS_PKcb+0x16>
  return mkdir(parent, &fname);
   d7246:	aa03      	add	r2, sp, #12
   d7248:	4621      	mov	r1, r4
   d724a:	4630      	mov	r0, r6
   d724c:	f7ff ff32 	bl	d70b4 <_ZN7FatFile5mkdirEPS_P7fname_t>
   d7250:	e7bb      	b.n	d71ca <_ZN7FatFile5mkdirEPS_PKcb+0x18>
	...

000d7254 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d7254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7258:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d725a:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d725c:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d725e:	4604      	mov	r4, r0
   d7260:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7262:	d55b      	bpl.n	d731c <_ZN7FatFile5writeEPKvj+0xc8>
   d7264:	7883      	ldrb	r3, [r0, #2]
   d7266:	079a      	lsls	r2, r3, #30
   d7268:	d558      	bpl.n	d731c <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d726a:	071b      	lsls	r3, r3, #28
   d726c:	d451      	bmi.n	d7312 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d726e:	6963      	ldr	r3, [r4, #20]
   d7270:	43db      	mvns	r3, r3
   d7272:	42bb      	cmp	r3, r7
   d7274:	d352      	bcc.n	d731c <_ZN7FatFile5writeEPKvj+0xc8>
   d7276:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7278:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d727c:	6966      	ldr	r6, [r4, #20]
   d727e:	f1b8 0f00 	cmp.w	r8, #0
   d7282:	f000 8091 	beq.w	d73a8 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d7286:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d7288:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d728a:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d728e:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d7292:	d10e      	bne.n	d72b2 <_ZN7FatFile5writeEPKvj+0x5e>
   d7294:	b96d      	cbnz	r5, d72b2 <_ZN7FatFile5writeEPKvj+0x5e>
   d7296:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d7298:	2900      	cmp	r1, #0
   d729a:	d046      	beq.n	d732a <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d729c:	4652      	mov	r2, sl
   d729e:	f000 f902 	bl	d74a6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d72a2:	2800      	cmp	r0, #0
   d72a4:	db3a      	blt.n	d731c <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d72a6:	d104      	bne.n	d72b2 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d72a8:	4620      	mov	r0, r4
   d72aa:	f7ff fbfe 	bl	d6aaa <_ZN7FatFile10addClusterEv>
   d72ae:	2800      	cmp	r0, #0
   d72b0:	d034      	beq.n	d731c <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d72b2:	6921      	ldr	r1, [r4, #16]
   d72b4:	68a0      	ldr	r0, [r4, #8]
   d72b6:	f000 f8f0 	bl	d749a <_ZNK9FatVolume17clusterFirstBlockEm>
   d72ba:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d72bc:	68a0      	ldr	r0, [r4, #8]
   d72be:	b915      	cbnz	r5, d72c6 <_ZN7FatFile5writeEPKvj+0x72>
   d72c0:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d72c4:	d23f      	bcs.n	d7346 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d72c6:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d72ca:	4546      	cmp	r6, r8
   d72cc:	bf28      	it	cs
   d72ce:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d72d0:	2d00      	cmp	r5, #0
   d72d2:	d136      	bne.n	d7342 <_ZN7FatFile5writeEPKvj+0xee>
   d72d4:	6962      	ldr	r2, [r4, #20]
   d72d6:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d72d8:	429a      	cmp	r2, r3
   d72da:	bf34      	ite	cc
   d72dc:	2201      	movcc	r2, #1
   d72de:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d72e0:	3024      	adds	r0, #36	; 0x24
   d72e2:	f000 f8b7 	bl	d7454 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d72e6:	b1c8      	cbz	r0, d731c <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d72e8:	4428      	add	r0, r5
   d72ea:	4632      	mov	r2, r6
   d72ec:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d72ee:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d72f0:	f006 fb6a 	bl	dd9c8 <memcpy>
      if (512 == (n + blockOffset)) {
   d72f4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d72f8:	d104      	bne.n	d7304 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d72fa:	68a0      	ldr	r0, [r4, #8]
   d72fc:	3024      	adds	r0, #36	; 0x24
   d72fe:	f000 f881 	bl	d7404 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d7302:	b158      	cbz	r0, d731c <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d7304:	6963      	ldr	r3, [r4, #20]
   d7306:	4433      	add	r3, r6
   d7308:	6163      	str	r3, [r4, #20]
    src += n;
   d730a:	44b1      	add	r9, r6
    nToWrite -= n;
   d730c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d7310:	e7b4      	b.n	d727c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d7312:	69c1      	ldr	r1, [r0, #28]
   d7314:	f7ff fd45 	bl	d6da2 <_ZN7FatFile7seekSetEm>
   d7318:	2800      	cmp	r0, #0
   d731a:	d1a8      	bne.n	d726e <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d731c:	7863      	ldrb	r3, [r4, #1]
   d731e:	f043 0301 	orr.w	r3, r3, #1
   d7322:	7063      	strb	r3, [r4, #1]
  return -1;
   d7324:	f04f 30ff 	mov.w	r0, #4294967295
   d7328:	e050      	b.n	d73cc <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d732a:	6a23      	ldr	r3, [r4, #32]
   d732c:	b93b      	cbnz	r3, d733e <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d732e:	4620      	mov	r0, r4
   d7330:	f7ff fbbb 	bl	d6aaa <_ZN7FatFile10addClusterEv>
   d7334:	2800      	cmp	r0, #0
   d7336:	d0f1      	beq.n	d731c <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d7338:	6923      	ldr	r3, [r4, #16]
   d733a:	6223      	str	r3, [r4, #32]
   d733c:	e7b9      	b.n	d72b2 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d733e:	6123      	str	r3, [r4, #16]
   d7340:	e7b7      	b.n	d72b2 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d7342:	2201      	movs	r2, #1
   d7344:	e7cc      	b.n	d72e0 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d7346:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d734a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d734c:	d31b      	bcc.n	d7386 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d734e:	f890 c004 	ldrb.w	ip, [r0, #4]
   d7352:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d7356:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d7358:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d735c:	4573      	cmp	r3, lr
   d735e:	bf28      	it	cs
   d7360:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7362:	4291      	cmp	r1, r2
      n = 512*nb;
   d7364:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7368:	d307      	bcc.n	d737a <_ZN7FatFile5writeEPKvj+0x126>
   d736a:	441a      	add	r2, r3
   d736c:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d736e:	bf82      	ittt	hi
   d7370:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   d7374:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7378:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d737a:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d737c:	464a      	mov	r2, r9
   d737e:	6828      	ldr	r0, [r5, #0]
   d7380:	f000 fc47 	bl	d7c12 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d7384:	e7bd      	b.n	d7302 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d7386:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d7388:	bf02      	ittt	eq
   d738a:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   d738e:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7392:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d7394:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d7396:	464a      	mov	r2, r9
   d7398:	6818      	ldr	r0, [r3, #0]
   d739a:	f000 fbc4 	bl	d7b26 <_ZN9SdSpiCard10writeBlockEmPKh>
   d739e:	2800      	cmp	r0, #0
   d73a0:	d0bc      	beq.n	d731c <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d73a2:	f44f 7600 	mov.w	r6, #512	; 0x200
   d73a6:	e7ad      	b.n	d7304 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d73a8:	69e2      	ldr	r2, [r4, #28]
   d73aa:	78a3      	ldrb	r3, [r4, #2]
   d73ac:	42b2      	cmp	r2, r6
   d73ae:	d204      	bcs.n	d73ba <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d73b0:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d73b2:	f043 0304 	orr.w	r3, r3, #4
   d73b6:	70a3      	strb	r3, [r4, #2]
   d73b8:	e003      	b.n	d73c2 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d73ba:	4a08      	ldr	r2, [pc, #32]	; (d73dc <_ZN7FatFile5writeEPKvj+0x188>)
   d73bc:	6812      	ldr	r2, [r2, #0]
   d73be:	2a00      	cmp	r2, #0
   d73c0:	d1f7      	bne.n	d73b2 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d73c2:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d73c6:	2b00      	cmp	r3, #0
   d73c8:	db02      	blt.n	d73d0 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d73ca:	4638      	mov	r0, r7
}
   d73cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d73d0:	4620      	mov	r0, r4
   d73d2:	f7ff fdd3 	bl	d6f7c <_ZN7FatFile4syncEv>
   d73d6:	2800      	cmp	r0, #0
   d73d8:	d1f7      	bne.n	d73ca <_ZN7FatFile5writeEPKvj+0x176>
   d73da:	e79f      	b.n	d731c <_ZN7FatFile5writeEPKvj+0xc8>
   d73dc:	2003e510 	.word	0x2003e510

000d73e0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d73e0:	b513      	push	{r0, r1, r4, lr}
   d73e2:	4604      	mov	r4, r0
    }
   d73e4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d73e6:	b159      	cbz	r1, d7400 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d73e8:	9101      	str	r1, [sp, #4]
   d73ea:	f007 fb3f 	bl	dea6c <strlen>
   d73ee:	6823      	ldr	r3, [r4, #0]
   d73f0:	9901      	ldr	r1, [sp, #4]
   d73f2:	68db      	ldr	r3, [r3, #12]
   d73f4:	4602      	mov	r2, r0
   d73f6:	4620      	mov	r0, r4
    }
   d73f8:	b002      	add	sp, #8
   d73fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d73fe:	4718      	bx	r3
    }
   d7400:	b002      	add	sp, #8
   d7402:	bd10      	pop	{r4, pc}

000d7404 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7404:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d7406:	7803      	ldrb	r3, [r0, #0]
   d7408:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d740a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d740c:	d520      	bpl.n	d7450 <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d740e:	6843      	ldr	r3, [r0, #4]
   d7410:	6881      	ldr	r1, [r0, #8]
   d7412:	f100 020c 	add.w	r2, r0, #12
   d7416:	6818      	ldr	r0, [r3, #0]
   d7418:	9201      	str	r2, [sp, #4]
   d741a:	f000 fb84 	bl	d7b26 <_ZN9SdSpiCard10writeBlockEmPKh>
   d741e:	9a01      	ldr	r2, [sp, #4]
   d7420:	4605      	mov	r5, r0
   d7422:	b918      	cbnz	r0, d742c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d7424:	2500      	movs	r5, #0
}
   d7426:	4628      	mov	r0, r5
   d7428:	b003      	add	sp, #12
   d742a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d742c:	7823      	ldrb	r3, [r4, #0]
   d742e:	079b      	lsls	r3, r3, #30
   d7430:	d404      	bmi.n	d743c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d7432:	7823      	ldrb	r3, [r4, #0]
   d7434:	f023 0301 	bic.w	r3, r3, #1
   d7438:	7023      	strb	r3, [r4, #0]
   d743a:	e7f4      	b.n	d7426 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d743c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d7440:	6919      	ldr	r1, [r3, #16]
   d7442:	4401      	add	r1, r0
   d7444:	6818      	ldr	r0, [r3, #0]
   d7446:	f000 fb6e 	bl	d7b26 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d744a:	2800      	cmp	r0, #0
   d744c:	d1f1      	bne.n	d7432 <_ZN8FatCache4syncEv+0x2e>
   d744e:	e7e9      	b.n	d7424 <_ZN8FatCache4syncEv+0x20>
  return true;
   d7450:	2501      	movs	r5, #1
   d7452:	e7e8      	b.n	d7426 <_ZN8FatCache4syncEv+0x22>

000d7454 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7454:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d7456:	6883      	ldr	r3, [r0, #8]
   d7458:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d745a:	4604      	mov	r4, r0
   d745c:	460e      	mov	r6, r1
   d745e:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d7460:	d009      	beq.n	d7476 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d7462:	f7ff ffcf 	bl	d7404 <_ZN8FatCache4syncEv>
   d7466:	b908      	cbnz	r0, d746c <_ZN8FatCache4readEmh+0x18>
  return 0;
   d7468:	2000      	movs	r0, #0
}
   d746a:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d746c:	076b      	lsls	r3, r5, #29
   d746e:	d50a      	bpl.n	d7486 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d7470:	2300      	movs	r3, #0
   d7472:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7474:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d7476:	7822      	ldrb	r2, [r4, #0]
   d7478:	f005 0503 	and.w	r5, r5, #3
   d747c:	4620      	mov	r0, r4
   d747e:	4315      	orrs	r5, r2
   d7480:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d7484:	e7f1      	b.n	d746a <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d7486:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d7488:	f104 020c 	add.w	r2, r4, #12
   d748c:	6818      	ldr	r0, [r3, #0]
   d748e:	4631      	mov	r1, r6
   d7490:	f000 fac0 	bl	d7a14 <_ZN9SdSpiCard9readBlockEmPh>
   d7494:	2800      	cmp	r0, #0
   d7496:	d1eb      	bne.n	d7470 <_ZN8FatCache4readEmh+0x1c>
   d7498:	e7e6      	b.n	d7468 <_ZN8FatCache4readEmh+0x14>

000d749a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d749a:	7983      	ldrb	r3, [r0, #6]
   d749c:	6940      	ldr	r0, [r0, #20]
   d749e:	3902      	subs	r1, #2
   d74a0:	4099      	lsls	r1, r3
}
   d74a2:	4408      	add	r0, r1
   d74a4:	4770      	bx	lr

000d74a6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d74a6:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d74a8:	b570      	push	{r4, r5, r6, lr}
   d74aa:	4605      	mov	r5, r0
   d74ac:	460c      	mov	r4, r1
   d74ae:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d74b0:	d802      	bhi.n	d74b8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d74b2:	f04f 30ff 	mov.w	r0, #4294967295
}
   d74b6:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d74b8:	69c3      	ldr	r3, [r0, #28]
   d74ba:	428b      	cmp	r3, r1
   d74bc:	d3f9      	bcc.n	d74b2 <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d74be:	79c3      	ldrb	r3, [r0, #7]
   d74c0:	2b20      	cmp	r3, #32
   d74c2:	d116      	bne.n	d74f2 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d74c4:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d74c6:	2202      	movs	r2, #2
   d74c8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d74cc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d74d0:	f7ff ffc0 	bl	d7454 <_ZN8FatCache4readEmh>
    if (!pc) {
   d74d4:	2800      	cmp	r0, #0
   d74d6:	d0ec      	beq.n	d74b2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d74d8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d74dc:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d74e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d74e4:	69ea      	ldr	r2, [r5, #28]
   d74e6:	429a      	cmp	r2, r3
  *value = next;
   d74e8:	bf26      	itte	cs
   d74ea:	6033      	strcs	r3, [r6, #0]
  return 1;
   d74ec:	2001      	movcs	r0, #1
    return 0;
   d74ee:	2000      	movcc	r0, #0
   d74f0:	e7e1      	b.n	d74b6 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d74f2:	2b10      	cmp	r3, #16
   d74f4:	d1dd      	bne.n	d74b2 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d74f6:	6983      	ldr	r3, [r0, #24]
   d74f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d74fc:	2202      	movs	r2, #2
   d74fe:	4419      	add	r1, r3
   d7500:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7504:	f7ff ffa6 	bl	d7454 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7508:	2800      	cmp	r0, #0
   d750a:	d0d2      	beq.n	d74b2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d750c:	b2e4      	uxtb	r4, r4
   d750e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d7512:	e7e7      	b.n	d74e4 <_ZN9FatVolume6fatGetEmPm+0x3e>

000d7514 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7514:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d7516:	b538      	push	{r3, r4, r5, lr}
   d7518:	460c      	mov	r4, r1
   d751a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d751c:	d801      	bhi.n	d7522 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d751e:	2000      	movs	r0, #0
}
   d7520:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d7522:	69c3      	ldr	r3, [r0, #28]
   d7524:	428b      	cmp	r3, r1
   d7526:	d3fa      	bcc.n	d751e <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d7528:	79c3      	ldrb	r3, [r0, #7]
   d752a:	2b20      	cmp	r3, #32
   d752c:	d10f      	bne.n	d754e <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d752e:	6981      	ldr	r1, [r0, #24]
   d7530:	2203      	movs	r2, #3
   d7532:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7536:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d753a:	f7ff ff8b 	bl	d7454 <_ZN8FatCache4readEmh>
    if (!pc) {
   d753e:	2800      	cmp	r0, #0
   d7540:	d0ed      	beq.n	d751e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d7542:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7546:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d754a:	2001      	movs	r0, #1
   d754c:	e7e8      	b.n	d7520 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d754e:	2b10      	cmp	r3, #16
   d7550:	d1e5      	bne.n	d751e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d7552:	6983      	ldr	r3, [r0, #24]
   d7554:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7558:	2203      	movs	r2, #3
   d755a:	4419      	add	r1, r3
   d755c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7560:	f7ff ff78 	bl	d7454 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7564:	2800      	cmp	r0, #0
   d7566:	d0da      	beq.n	d751e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d7568:	b2e4      	uxtb	r4, r4
   d756a:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d756e:	e7ec      	b.n	d754a <_ZN9FatVolume6fatPutEmm+0x36>

000d7570 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7570:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d7574:	68c4      	ldr	r4, [r0, #12]
   d7576:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7578:	4605      	mov	r5, r0
   d757a:	460e      	mov	r6, r1
   d757c:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d757e:	d301      	bcc.n	d7584 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d7580:	2701      	movs	r7, #1
   d7582:	e001      	b.n	d7588 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d7584:	460c      	mov	r4, r1
    setStart = false;
   d7586:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d7588:	69eb      	ldr	r3, [r5, #28]
    find++;
   d758a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d758c:	42a3      	cmp	r3, r4
   d758e:	d202      	bcs.n	d7596 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d7590:	b9c7      	cbnz	r7, d75c4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d7592:	68ec      	ldr	r4, [r5, #12]
   d7594:	e7f4      	b.n	d7580 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d7596:	42a6      	cmp	r6, r4
   d7598:	d014      	beq.n	d75c4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d759a:	aa01      	add	r2, sp, #4
   d759c:	4621      	mov	r1, r4
   d759e:	4628      	mov	r0, r5
   d75a0:	f7ff ff81 	bl	d74a6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d75a4:	2800      	cmp	r0, #0
   d75a6:	db0d      	blt.n	d75c4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d75a8:	d0ee      	beq.n	d7588 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d75aa:	9b01      	ldr	r3, [sp, #4]
   d75ac:	2b00      	cmp	r3, #0
   d75ae:	d1eb      	bne.n	d7588 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d75b0:	b107      	cbz	r7, d75b4 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d75b2:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d75b4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d75b8:	4621      	mov	r1, r4
   d75ba:	4628      	mov	r0, r5
   d75bc:	f7ff ffaa 	bl	d7514 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d75c0:	4607      	mov	r7, r0
   d75c2:	b920      	cbnz	r0, d75ce <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d75c4:	2700      	movs	r7, #0
}
   d75c6:	4638      	mov	r0, r7
   d75c8:	b002      	add	sp, #8
   d75ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d75ce:	b916      	cbnz	r6, d75d6 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d75d0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d75d4:	e7f7      	b.n	d75c6 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d75d6:	4622      	mov	r2, r4
   d75d8:	4631      	mov	r1, r6
   d75da:	4628      	mov	r0, r5
   d75dc:	f7ff ff9a 	bl	d7514 <_ZN9FatVolume6fatPutEmm>
   d75e0:	2800      	cmp	r0, #0
   d75e2:	d1f5      	bne.n	d75d0 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d75e4:	e7ee      	b.n	d75c4 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d75e6 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d75e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d75e8:	4605      	mov	r5, r0
   d75ea:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d75ec:	aa01      	add	r2, sp, #4
   d75ee:	4621      	mov	r1, r4
   d75f0:	4628      	mov	r0, r5
   d75f2:	f7ff ff58 	bl	d74a6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d75f6:	1e06      	subs	r6, r0, #0
   d75f8:	db10      	blt.n	d761c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d75fa:	2200      	movs	r2, #0
   d75fc:	4621      	mov	r1, r4
   d75fe:	4628      	mov	r0, r5
   d7600:	f7ff ff88 	bl	d7514 <_ZN9FatVolume6fatPutEmm>
   d7604:	b150      	cbz	r0, d761c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d7606:	68eb      	ldr	r3, [r5, #12]
   d7608:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   d760a:	bf24      	itt	cs
   d760c:	f104 34ff 	addcs.w	r4, r4, #4294967295
   d7610:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   d7612:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   d7614:	2e00      	cmp	r6, #0
   d7616:	d1e9      	bne.n	d75ec <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d7618:	b002      	add	sp, #8
   d761a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d761c:	2000      	movs	r0, #0
   d761e:	e7fb      	b.n	d7618 <_ZN9FatVolume9freeChainEm+0x32>

000d7620 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d7620:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d7622:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d7624:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d7626:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d7628:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   d762c:	4604      	mov	r4, r0
  m_fatType = 0;
   d762e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d7630:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d7634:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d7636:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d763a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d763c:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d7640:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d7644:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d7648:	460d      	mov	r5, r1
   d764a:	b1b9      	cbz	r1, d767c <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d764c:	2904      	cmp	r1, #4
   d764e:	d901      	bls.n	d7654 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7650:	2000      	movs	r0, #0
}
   d7652:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d7654:	4611      	mov	r1, r2
   d7656:	4630      	mov	r0, r6
   d7658:	f7ff fefc 	bl	d7454 <_ZN8FatCache4readEmh>
    if (!pc) {
   d765c:	2800      	cmp	r0, #0
   d765e:	d0f7      	beq.n	d7650 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d7660:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d7664:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d7668:	065b      	lsls	r3, r3, #25
   d766a:	d1f1      	bne.n	d7650 <_ZN9FatVolume4initEh+0x30>
   d766c:	f105 011b 	add.w	r1, r5, #27
   d7670:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d7674:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d7678:	2d00      	cmp	r5, #0
   d767a:	d0e9      	beq.n	d7650 <_ZN9FatVolume4initEh+0x30>
   d767c:	2200      	movs	r2, #0
   d767e:	4629      	mov	r1, r5
   d7680:	4630      	mov	r0, r6
   d7682:	f7ff fee7 	bl	d7454 <_ZN8FatCache4readEmh>
  if (!pc) {
   d7686:	2800      	cmp	r0, #0
   d7688:	d0e2      	beq.n	d7650 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d768a:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d768e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d7692:	d1dd      	bne.n	d7650 <_ZN9FatVolume4initEh+0x30>
   d7694:	7c03      	ldrb	r3, [r0, #16]
   d7696:	2b02      	cmp	r3, #2
   d7698:	d1da      	bne.n	d7650 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d769a:	89c3      	ldrh	r3, [r0, #14]
   d769c:	2b00      	cmp	r3, #0
   d769e:	d0d7      	beq.n	d7650 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d76a0:	7b41      	ldrb	r1, [r0, #13]
   d76a2:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d76a4:	1e4b      	subs	r3, r1, #1
   d76a6:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d76a8:	2300      	movs	r3, #0
   d76aa:	71a3      	strb	r3, [r4, #6]
   d76ac:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d76ae:	2301      	movs	r3, #1
   d76b0:	4299      	cmp	r1, r3
   d76b2:	d007      	beq.n	d76c4 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d76b4:	3e01      	subs	r6, #1
   d76b6:	d0cb      	beq.n	d7650 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d76b8:	79a2      	ldrb	r2, [r4, #6]
   d76ba:	005b      	lsls	r3, r3, #1
   d76bc:	3201      	adds	r2, #1
   d76be:	b2db      	uxtb	r3, r3
   d76c0:	71a2      	strb	r2, [r4, #6]
   d76c2:	e7f5      	b.n	d76b0 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d76c4:	8ac1      	ldrh	r1, [r0, #22]
   d76c6:	b901      	cbnz	r1, d76ca <_ZN9FatVolume4initEh+0xaa>
   d76c8:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d76ca:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d76cc:	89c3      	ldrh	r3, [r0, #14]
   d76ce:	442b      	add	r3, r5
   d76d0:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d76d2:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d76d6:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d76d8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d76dc:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d76de:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d76e2:	0149      	lsls	r1, r1, #5
   d76e4:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d76e8:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d76ec:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d76ee:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d76f2:	b902      	cbnz	r2, d76f6 <_ZN9FatVolume4initEh+0xd6>
   d76f4:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d76f6:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d76f8:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d76fa:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d76fc:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d76fe:	1c4b      	adds	r3, r1, #1
   d7700:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d7702:	f640 73f4 	movw	r3, #4084	; 0xff4
   d7706:	4299      	cmp	r1, r3
   d7708:	d802      	bhi.n	d7710 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d770a:	230c      	movs	r3, #12
   d770c:	71e3      	strb	r3, [r4, #7]
   d770e:	e79f      	b.n	d7650 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d7710:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d7714:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d7716:	bf85      	ittet	hi
   d7718:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d771a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d771c:	2310      	movls	r3, #16
    m_fatType = 32;
   d771e:	2320      	movhi	r3, #32
   d7720:	71e3      	strb	r3, [r4, #7]
  return true;
   d7722:	2001      	movs	r0, #1
   d7724:	e795      	b.n	d7652 <_ZN9FatVolume4initEh+0x32>
	...

000d7728 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7728:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d772a:	4e0e      	ldr	r6, [pc, #56]	; (d7764 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d772c:	460d      	mov	r5, r1
   d772e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d7730:	f001 fdb4 	bl	d929c <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7734:	6833      	ldr	r3, [r6, #0]
   d7736:	1ac0      	subs	r0, r0, r3
   d7738:	4b0b      	ldr	r3, [pc, #44]	; (d7768 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d773a:	4298      	cmp	r0, r3
   d773c:	d908      	bls.n	d7750 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return HAL_Timer_Get_Milli_Seconds();
   d773e:	f001 fdb5 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d7742:	4b0a      	ldr	r3, [pc, #40]	; (d776c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7744:	6018      	str	r0, [r3, #0]
    		spark_process();
   d7746:	f002 f821 	bl	d978c <spark_process>
   d774a:	f001 fda7 	bl	d929c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d774e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7750:	f001 fdac 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7754:	b280      	uxth	r0, r0
   d7756:	1b40      	subs	r0, r0, r5
}
   d7758:	42a0      	cmp	r0, r4
   d775a:	bfd4      	ite	le
   d775c:	2000      	movle	r0, #0
   d775e:	2001      	movgt	r0, #1
   d7760:	bd70      	pop	{r4, r5, r6, pc}
   d7762:	bf00      	nop
   d7764:	2003e518 	.word	0x2003e518
   d7768:	000186a0 	.word	0x000186a0
   d776c:	2003e7a0 	.word	0x2003e7a0

000d7770 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7770:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d7772:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d7774:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d7776:	b94d      	cbnz	r5, d778c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7778:	6840      	ldr	r0, [r0, #4]
   d777a:	f000 fa6b 	bl	d7c54 <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d777e:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d7780:	4629      	mov	r1, r5
   d7782:	7d18      	ldrb	r0, [r3, #20]
   d7784:	f003 fef5 	bl	db572 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7788:	2301      	movs	r3, #1
   d778a:	7223      	strb	r3, [r4, #8]
  }
}
   d778c:	bd38      	pop	{r3, r4, r5, pc}

000d778e <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d778e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7790:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d7792:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7794:	b16b      	cbz	r3, d77b2 <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d7796:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
   d7798:	2101      	movs	r1, #1
   d779a:	7d18      	ldrb	r0, [r3, #20]
   d779c:	f003 fee9 	bl	db572 <digitalWrite>
     m_spiDriver->send(data);
   d77a0:	6860      	ldr	r0, [r4, #4]
   d77a2:	21ff      	movs	r1, #255	; 0xff
   d77a4:	f000 fa88 	bl	d7cb8 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d77a8:	6860      	ldr	r0, [r4, #4]
   d77aa:	f000 fa67 	bl	d7c7c <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d77ae:	2300      	movs	r3, #0
   d77b0:	7223      	strb	r3, [r4, #8]
  }
}
   d77b2:	bd10      	pop	{r4, pc}

000d77b4 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d77b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77b6:	4604      	mov	r4, r0
   d77b8:	460d      	mov	r5, r1
   d77ba:	4616      	mov	r6, r2
   d77bc:	f001 fd76 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d77c0:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d77c2:	6860      	ldr	r0, [r4, #4]
   d77c4:	f000 fa5d 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d77c8:	28ff      	cmp	r0, #255	; 0xff
   d77ca:	7260      	strb	r0, [r4, #9]
   d77cc:	d10e      	bne.n	d77ec <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d77ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d77d2:	4639      	mov	r1, r7
   d77d4:	4620      	mov	r0, r4
   d77d6:	f7ff ffa7 	bl	d7728 <_ZN9SdSpiCard10isTimedOutEtt>
   d77da:	2800      	cmp	r0, #0
   d77dc:	d0f1      	beq.n	d77c2 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d77de:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d77e0:	4620      	mov	r0, r4
   d77e2:	7023      	strb	r3, [r4, #0]
   d77e4:	f7ff ffd3 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d77e8:	2000      	movs	r0, #0
}
   d77ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d77ec:	28fe      	cmp	r0, #254	; 0xfe
   d77ee:	d001      	beq.n	d77f4 <_ZN9SdSpiCard8readDataEPhj+0x40>
   d77f0:	2350      	movs	r3, #80	; 0x50
   d77f2:	e7f5      	b.n	d77e0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d77f4:	6860      	ldr	r0, [r4, #4]
   d77f6:	4632      	mov	r2, r6
   d77f8:	4629      	mov	r1, r5
   d77fa:	f000 fa47 	bl	d7c8c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d77fe:	7260      	strb	r0, [r4, #9]
   d7800:	b108      	cbz	r0, d7806 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d7802:	2360      	movs	r3, #96	; 0x60
   d7804:	e7ec      	b.n	d77e0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d7806:	6860      	ldr	r0, [r4, #4]
   d7808:	f000 fa3b 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
   d780c:	6860      	ldr	r0, [r4, #4]
   d780e:	f000 fa38 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
   d7812:	2001      	movs	r0, #1
   d7814:	e7e9      	b.n	d77ea <_ZN9SdSpiCard8readDataEPhj+0x36>

000d7816 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7816:	b570      	push	{r4, r5, r6, lr}
   d7818:	4604      	mov	r4, r0
   d781a:	460e      	mov	r6, r1
   d781c:	f001 fd46 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
   d7820:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d7822:	4632      	mov	r2, r6
   d7824:	4629      	mov	r1, r5
   d7826:	4620      	mov	r0, r4
   d7828:	f7ff ff7e 	bl	d7728 <_ZN9SdSpiCard10isTimedOutEtt>
   d782c:	b930      	cbnz	r0, d783c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d782e:	6860      	ldr	r0, [r4, #4]
   d7830:	f000 fa27 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7834:	28ff      	cmp	r0, #255	; 0xff
   d7836:	d1f4      	bne.n	d7822 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7838:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d783a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d783c:	2000      	movs	r0, #0
   d783e:	e7fc      	b.n	d783a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d7840 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d7842:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7844:	9201      	str	r2, [sp, #4]
   d7846:	4604      	mov	r4, r0
   d7848:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d784a:	b90b      	cbnz	r3, d7850 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d784c:	f7ff ff90 	bl	d7770 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d7850:	b125      	cbz	r5, d785c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d7852:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7856:	4620      	mov	r0, r4
   d7858:	f7ff ffdd 	bl	d7816 <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d785c:	6860      	ldr	r0, [r4, #4]
   d785e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7862:	f000 fa29 	bl	d7cb8 <_ZN14SdSpiAltDriver4sendEh>
   d7866:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d7868:	af01      	add	r7, sp, #4
   d786a:	5db9      	ldrb	r1, [r7, r6]
   d786c:	6860      	ldr	r0, [r4, #4]
   d786e:	f000 fa23 	bl	d7cb8 <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d7872:	3e01      	subs	r6, #1
   d7874:	d2f9      	bcs.n	d786a <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d7876:	2d00      	cmp	r5, #0
   d7878:	6860      	ldr	r0, [r4, #4]
   d787a:	bf0c      	ite	eq
   d787c:	2195      	moveq	r1, #149	; 0x95
   d787e:	2187      	movne	r1, #135	; 0x87
   d7880:	f000 fa1a 	bl	d7cb8 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d7884:	6860      	ldr	r0, [r4, #4]
   d7886:	f000 f9fc 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
   d788a:	250b      	movs	r5, #11
   d788c:	6860      	ldr	r0, [r4, #4]
   d788e:	f000 f9f8 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7892:	0603      	lsls	r3, r0, #24
   d7894:	7260      	strb	r0, [r4, #9]
   d7896:	d503      	bpl.n	d78a0 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d7898:	3d01      	subs	r5, #1
   d789a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d789e:	d1f5      	bne.n	d788c <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d78a0:	b003      	add	sp, #12
   d78a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d78a4 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d78a4:	b570      	push	{r4, r5, r6, lr}
   d78a6:	4604      	mov	r4, r0
   d78a8:	460d      	mov	r5, r1
   d78aa:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d78ac:	2137      	movs	r1, #55	; 0x37
   d78ae:	2200      	movs	r2, #0
   d78b0:	f7ff ffc6 	bl	d7840 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d78b4:	4632      	mov	r2, r6
   d78b6:	4629      	mov	r1, r5
   d78b8:	4620      	mov	r0, r4
  }
   d78ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d78be:	f7ff bfbf 	b.w	d7840 <_ZN9SdSpiCard11cardCommandEhm>
	...

000d78c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d78c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d78c8:	2500      	movs	r5, #0
   d78ca:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d78cc:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d78ce:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d78d0:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d78d2:	4604      	mov	r4, r0
   d78d4:	4690      	mov	r8, r2
   d78d6:	461e      	mov	r6, r3
   d78d8:	f001 fce8 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d78dc:	4641      	mov	r1, r8
   d78de:	4607      	mov	r7, r0
   d78e0:	6860      	ldr	r0, [r4, #4]
   d78e2:	f000 f9bb 	bl	d7c5c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d78e6:	6863      	ldr	r3, [r4, #4]
   d78e8:	4a49      	ldr	r2, [pc, #292]	; (d7a10 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d78ea:	721d      	strb	r5, [r3, #8]
   d78ec:	2501      	movs	r5, #1
   d78ee:	60da      	str	r2, [r3, #12]
   d78f0:	821d      	strh	r5, [r3, #16]
  spiStart();
   d78f2:	4620      	mov	r0, r4
   d78f4:	f7ff ff3c 	bl	d7770 <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d78f8:	6863      	ldr	r3, [r4, #4]
   d78fa:	4629      	mov	r1, r5
   d78fc:	7d18      	ldrb	r0, [r3, #20]
   d78fe:	f003 fe38 	bl	db572 <digitalWrite>
   d7902:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d7904:	6860      	ldr	r0, [r4, #4]
   d7906:	21ff      	movs	r1, #255	; 0xff
   d7908:	3d01      	subs	r5, #1
   d790a:	f000 f9d5 	bl	d7cb8 <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d790e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7912:	d1f7      	bne.n	d7904 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d7914:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d7916:	4629      	mov	r1, r5
   d7918:	7d18      	ldrb	r0, [r3, #20]
   d791a:	f003 fe2a 	bl	db572 <digitalWrite>
  }
   d791e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d7920:	2200      	movs	r2, #0
   d7922:	4611      	mov	r1, r2
   d7924:	4620      	mov	r0, r4
   d7926:	f7ff ff8b 	bl	d7840 <_ZN9SdSpiCard11cardCommandEhm>
   d792a:	2801      	cmp	r0, #1
   d792c:	4680      	mov	r8, r0
   d792e:	d018      	beq.n	d7962 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d7930:	3d01      	subs	r5, #1
   d7932:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7936:	d107      	bne.n	d7948 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d7938:	2320      	movs	r3, #32
  spiStop();
   d793a:	4620      	mov	r0, r4
   d793c:	7023      	strb	r3, [r4, #0]
   d793e:	f7ff ff26 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7942:	2000      	movs	r0, #0
}
   d7944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d7948:	6860      	ldr	r0, [r4, #4]
   d794a:	21fd      	movs	r1, #253	; 0xfd
   d794c:	f000 f9b4 	bl	d7cb8 <_ZN14SdSpiAltDriver4sendEh>
   d7950:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d7954:	6860      	ldr	r0, [r4, #4]
   d7956:	f000 f994 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d795a:	f1b8 0801 	subs.w	r8, r8, #1
   d795e:	d1f9      	bne.n	d7954 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d7960:	e7de      	b.n	d7920 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7962:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7966:	2108      	movs	r1, #8
   d7968:	4620      	mov	r0, r4
   d796a:	f7ff ff69 	bl	d7840 <_ZN9SdSpiCard11cardCommandEhm>
   d796e:	2805      	cmp	r0, #5
   d7970:	d114      	bne.n	d799c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d7972:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7976:	2500      	movs	r5, #0
   d7978:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d797a:	462a      	mov	r2, r5
   d797c:	2129      	movs	r1, #41	; 0x29
   d797e:	4620      	mov	r0, r4
   d7980:	f7ff ff90 	bl	d78a4 <_ZN9SdSpiCard8cardAcmdEhm>
   d7984:	4602      	mov	r2, r0
   d7986:	b1d8      	cbz	r0, d79c0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7988:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d798c:	4639      	mov	r1, r7
   d798e:	4620      	mov	r0, r4
   d7990:	f7ff feca 	bl	d7728 <_ZN9SdSpiCard10isTimedOutEtt>
   d7994:	2800      	cmp	r0, #0
   d7996:	d0f0      	beq.n	d797a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d7998:	2343      	movs	r3, #67	; 0x43
   d799a:	e7ce      	b.n	d793a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d799c:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d799e:	6860      	ldr	r0, [r4, #4]
   d79a0:	f000 f96f 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
   d79a4:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d79a6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d79aa:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d79ac:	d1f7      	bne.n	d799e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d79ae:	28aa      	cmp	r0, #170	; 0xaa
   d79b0:	d104      	bne.n	d79bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d79b2:	2302      	movs	r3, #2
   d79b4:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d79b6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d79ba:	e7dd      	b.n	d7978 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d79bc:	2325      	movs	r3, #37	; 0x25
   d79be:	e7bc      	b.n	d793a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d79c0:	7aa3      	ldrb	r3, [r4, #10]
   d79c2:	2b02      	cmp	r3, #2
   d79c4:	d118      	bne.n	d79f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d79c6:	213a      	movs	r1, #58	; 0x3a
   d79c8:	4620      	mov	r0, r4
   d79ca:	f7ff ff39 	bl	d7840 <_ZN9SdSpiCard11cardCommandEhm>
   d79ce:	b108      	cbz	r0, d79d4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d79d0:	2337      	movs	r3, #55	; 0x37
   d79d2:	e7b2      	b.n	d793a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d79d4:	6860      	ldr	r0, [r4, #4]
   d79d6:	f000 f954 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d79da:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d79de:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d79e0:	bf04      	itt	eq
   d79e2:	2303      	moveq	r3, #3
   d79e4:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d79e6:	6860      	ldr	r0, [r4, #4]
   d79e8:	f000 f94b 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
   d79ec:	6860      	ldr	r0, [r4, #4]
   d79ee:	f000 f948 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
   d79f2:	6860      	ldr	r0, [r4, #4]
   d79f4:	f000 f945 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d79f8:	4620      	mov	r0, r4
   d79fa:	f7ff fec8 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d79fe:	6863      	ldr	r3, [r4, #4]
   d7a00:	7930      	ldrb	r0, [r6, #4]
   d7a02:	68b1      	ldr	r1, [r6, #8]
   d7a04:	89b2      	ldrh	r2, [r6, #12]
   d7a06:	821a      	strh	r2, [r3, #16]
   d7a08:	7218      	strb	r0, [r3, #8]
   d7a0a:	60d9      	str	r1, [r3, #12]
  return true;
   d7a0c:	2001      	movs	r0, #1
   d7a0e:	e799      	b.n	d7944 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d7a10:	0003d090 	.word	0x0003d090

000d7a14 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7a14:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d7a16:	7a83      	ldrb	r3, [r0, #10]
   d7a18:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7a1a:	bf18      	it	ne
   d7a1c:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7a1e:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d7a20:	460a      	mov	r2, r1
   d7a22:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7a24:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d7a26:	f7ff ff0b 	bl	d7840 <_ZN9SdSpiCard11cardCommandEhm>
   d7a2a:	b130      	cbz	r0, d7a3a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d7a2c:	2330      	movs	r3, #48	; 0x30
   d7a2e:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7a30:	4620      	mov	r0, r4
   d7a32:	f7ff feac 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a36:	2500      	movs	r5, #0
   d7a38:	e00b      	b.n	d7a52 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d7a3a:	4629      	mov	r1, r5
   d7a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7a40:	4620      	mov	r0, r4
   d7a42:	f7ff feb7 	bl	d77b4 <_ZN9SdSpiCard8readDataEPhj>
   d7a46:	4605      	mov	r5, r0
   d7a48:	2800      	cmp	r0, #0
   d7a4a:	d0f1      	beq.n	d7a30 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d7a4c:	4620      	mov	r0, r4
   d7a4e:	f7ff fe9e 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
}
   d7a52:	4628      	mov	r0, r5
   d7a54:	bd38      	pop	{r3, r4, r5, pc}

000d7a56 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7a56:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d7a58:	7a83      	ldrb	r3, [r0, #10]
   d7a5a:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7a5c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d7a5e:	bf18      	it	ne
   d7a60:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d7a62:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7a64:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d7a66:	f7ff feeb 	bl	d7840 <_ZN9SdSpiCard11cardCommandEhm>
   d7a6a:	b130      	cbz	r0, d7a7a <_ZN9SdSpiCard9readStartEm+0x24>
   d7a6c:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d7a6e:	4620      	mov	r0, r4
   d7a70:	7023      	strb	r3, [r4, #0]
   d7a72:	f7ff fe8c 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a76:	2000      	movs	r0, #0
}
   d7a78:	bd10      	pop	{r4, pc}
  return true;
   d7a7a:	2001      	movs	r0, #1
   d7a7c:	e7fc      	b.n	d7a78 <_ZN9SdSpiCard9readStartEm+0x22>

000d7a7e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d7a7e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d7a80:	2200      	movs	r2, #0
   d7a82:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d7a84:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d7a86:	f7ff fedb 	bl	d7840 <_ZN9SdSpiCard11cardCommandEhm>
   d7a8a:	b130      	cbz	r0, d7a9a <_ZN9SdSpiCard8readStopEv+0x1c>
   d7a8c:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d7a8e:	4620      	mov	r0, r4
   d7a90:	7023      	strb	r3, [r4, #0]
   d7a92:	f7ff fe7c 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a96:	2000      	movs	r0, #0
}
   d7a98:	bd10      	pop	{r4, pc}
  spiStop();
   d7a9a:	4620      	mov	r0, r4
   d7a9c:	f7ff fe77 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7aa0:	2001      	movs	r0, #1
   d7aa2:	e7f9      	b.n	d7a98 <_ZN9SdSpiCard8readStopEv+0x1a>

000d7aa4 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7aa6:	4604      	mov	r4, r0
   d7aa8:	4616      	mov	r6, r2
   d7aaa:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7aac:	f7ff ffd3 	bl	d7a56 <_ZN9SdSpiCard9readStartEm>
   d7ab0:	b168      	cbz	r0, d7ace <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d7ab2:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d7ab4:	b2ab      	uxth	r3, r5
   d7ab6:	42bb      	cmp	r3, r7
   d7ab8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d7abc:	d209      	bcs.n	d7ad2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d7abe:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7ac2:	4620      	mov	r0, r4
   d7ac4:	f7ff fe76 	bl	d77b4 <_ZN9SdSpiCard8readDataEPhj>
   d7ac8:	3501      	adds	r5, #1
   d7aca:	2800      	cmp	r0, #0
   d7acc:	d1f2      	bne.n	d7ab4 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d7ace:	2000      	movs	r0, #0
   d7ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d7ad2:	4620      	mov	r0, r4
}
   d7ad4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d7ad8:	f7ff bfd1 	b.w	d7a7e <_ZN9SdSpiCard8readStopEv>

000d7adc <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d7adc:	b538      	push	{r3, r4, r5, lr}
   d7ade:	4604      	mov	r4, r0
   d7ae0:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d7ae2:	6840      	ldr	r0, [r0, #4]
   d7ae4:	f000 f8e8 	bl	d7cb8 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d7ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7aec:	6860      	ldr	r0, [r4, #4]
   d7aee:	4629      	mov	r1, r5
   d7af0:	f000 f8e6 	bl	d7cc0 <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d7af4:	6860      	ldr	r0, [r4, #4]
   d7af6:	21ff      	movs	r1, #255	; 0xff
   d7af8:	f000 f8de 	bl	d7cb8 <_ZN14SdSpiAltDriver4sendEh>
   d7afc:	6860      	ldr	r0, [r4, #4]
   d7afe:	21ff      	movs	r1, #255	; 0xff
   d7b00:	f000 f8da 	bl	d7cb8 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d7b04:	6860      	ldr	r0, [r4, #4]
   d7b06:	f000 f8bc 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7b0a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d7b0c:	f000 001f 	and.w	r0, r0, #31
   d7b10:	2805      	cmp	r0, #5
   d7b12:	d006      	beq.n	d7b22 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d7b14:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7b16:	4620      	mov	r0, r4
   d7b18:	7023      	strb	r3, [r4, #0]
   d7b1a:	f7ff fe38 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7b1e:	2000      	movs	r0, #0
}
   d7b20:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d7b22:	2001      	movs	r0, #1
   d7b24:	e7fc      	b.n	d7b20 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d7b26 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7b26:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d7b28:	7a83      	ldrb	r3, [r0, #10]
   d7b2a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7b2c:	bf18      	it	ne
   d7b2e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7b30:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d7b32:	460a      	mov	r2, r1
   d7b34:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7b36:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d7b38:	f7ff fe82 	bl	d7840 <_ZN9SdSpiCard11cardCommandEhm>
   d7b3c:	4606      	mov	r6, r0
   d7b3e:	b130      	cbz	r0, d7b4e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d7b40:	2332      	movs	r3, #50	; 0x32
   d7b42:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7b44:	4620      	mov	r0, r4
   d7b46:	f7ff fe22 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7b4a:	2500      	movs	r5, #0
   d7b4c:	e01f      	b.n	d7b8e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d7b4e:	462a      	mov	r2, r5
   d7b50:	21fe      	movs	r1, #254	; 0xfe
   d7b52:	4620      	mov	r0, r4
   d7b54:	f7ff ffc2 	bl	d7adc <_ZN9SdSpiCard9writeDataEhPKh>
   d7b58:	2800      	cmp	r0, #0
   d7b5a:	d0f3      	beq.n	d7b44 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7b5c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7b60:	4620      	mov	r0, r4
   d7b62:	f7ff fe58 	bl	d7816 <_ZN9SdSpiCard11waitNotBusyEt>
   d7b66:	4605      	mov	r5, r0
   d7b68:	b908      	cbnz	r0, d7b6e <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d7b6a:	235a      	movs	r3, #90	; 0x5a
   d7b6c:	e7e9      	b.n	d7b42 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7b6e:	4632      	mov	r2, r6
   d7b70:	210d      	movs	r1, #13
   d7b72:	4620      	mov	r0, r4
   d7b74:	f7ff fe64 	bl	d7840 <_ZN9SdSpiCard11cardCommandEhm>
   d7b78:	b108      	cbz	r0, d7b7e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d7b7a:	2329      	movs	r3, #41	; 0x29
   d7b7c:	e7e1      	b.n	d7b42 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d7b7e:	6860      	ldr	r0, [r4, #4]
   d7b80:	f000 f87f 	bl	d7c82 <_ZN14SdSpiAltDriver7receiveEv>
   d7b84:	2800      	cmp	r0, #0
   d7b86:	d1f8      	bne.n	d7b7a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d7b88:	4620      	mov	r0, r4
   d7b8a:	f7ff fe00 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
}
   d7b8e:	4628      	mov	r0, r5
   d7b90:	bd70      	pop	{r4, r5, r6, pc}

000d7b92 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d7b92:	b513      	push	{r0, r1, r4, lr}
   d7b94:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7b96:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d7b9a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7b9c:	f7ff fe3b 	bl	d7816 <_ZN9SdSpiCard11waitNotBusyEt>
   d7ba0:	9a01      	ldr	r2, [sp, #4]
   d7ba2:	b930      	cbnz	r0, d7bb2 <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d7ba4:	235b      	movs	r3, #91	; 0x5b
   d7ba6:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7ba8:	4620      	mov	r0, r4
   d7baa:	f7ff fdf0 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7bae:	2000      	movs	r0, #0
   d7bb0:	e005      	b.n	d7bbe <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7bb2:	21fc      	movs	r1, #252	; 0xfc
   d7bb4:	4620      	mov	r0, r4
   d7bb6:	f7ff ff91 	bl	d7adc <_ZN9SdSpiCard9writeDataEhPKh>
   d7bba:	2800      	cmp	r0, #0
   d7bbc:	d0f4      	beq.n	d7ba8 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d7bbe:	b002      	add	sp, #8
   d7bc0:	bd10      	pop	{r4, pc}

000d7bc2 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7bc2:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7bc4:	7a83      	ldrb	r3, [r0, #10]
   d7bc6:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7bc8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d7bca:	bf18      	it	ne
   d7bcc:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7bce:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7bd0:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d7bd2:	f7ff fe35 	bl	d7840 <_ZN9SdSpiCard11cardCommandEhm>
   d7bd6:	b130      	cbz	r0, d7be6 <_ZN9SdSpiCard10writeStartEm+0x24>
   d7bd8:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7bda:	4620      	mov	r0, r4
   d7bdc:	7023      	strb	r3, [r4, #0]
   d7bde:	f7ff fdd6 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7be2:	2000      	movs	r0, #0
}
   d7be4:	bd10      	pop	{r4, pc}
  return true;
   d7be6:	2001      	movs	r0, #1
   d7be8:	e7fc      	b.n	d7be4 <_ZN9SdSpiCard10writeStartEm+0x22>

000d7bea <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7bea:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7bec:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d7bf0:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7bf2:	f7ff fe10 	bl	d7816 <_ZN9SdSpiCard11waitNotBusyEt>
   d7bf6:	4605      	mov	r5, r0
   d7bf8:	b930      	cbnz	r0, d7c08 <_ZN9SdSpiCard9writeStopEv+0x1e>
   d7bfa:	2356      	movs	r3, #86	; 0x56
   d7bfc:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d7bfe:	4620      	mov	r0, r4
   d7c00:	f7ff fdc5 	bl	d778e <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d7c04:	4628      	mov	r0, r5
   d7c06:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d7c08:	6860      	ldr	r0, [r4, #4]
   d7c0a:	21fd      	movs	r1, #253	; 0xfd
   d7c0c:	f000 f854 	bl	d7cb8 <_ZN14SdSpiAltDriver4sendEh>
   d7c10:	e7f5      	b.n	d7bfe <_ZN9SdSpiCard9writeStopEv+0x14>

000d7c12 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c14:	4604      	mov	r4, r0
   d7c16:	4616      	mov	r6, r2
   d7c18:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7c1a:	f7ff ffd2 	bl	d7bc2 <_ZN9SdSpiCard10writeStartEm>
   d7c1e:	b170      	cbz	r0, d7c3e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7c20:	2500      	movs	r5, #0
   d7c22:	42bd      	cmp	r5, r7
   d7c24:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d7c28:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d7c2a:	d004      	beq.n	d7c36 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7c2c:	f7ff ffb1 	bl	d7b92 <_ZN9SdSpiCard9writeDataEPKh>
   d7c30:	b128      	cbz	r0, d7c3e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7c32:	3501      	adds	r5, #1
   d7c34:	e7f5      	b.n	d7c22 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d7c36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d7c3a:	f7ff bfd6 	b.w	d7bea <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d7c3e:	4620      	mov	r0, r4
   d7c40:	f7ff fda5 	bl	d778e <_ZN9SdSpiCard7spiStopEv>
}
   d7c44:	2000      	movs	r0, #0
   d7c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c48 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7c48:	4b01      	ldr	r3, [pc, #4]	; (d7c50 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7c4a:	2201      	movs	r2, #1
   d7c4c:	701a      	strb	r2, [r3, #0]
}
   d7c4e:	4770      	bx	lr
   d7c50:	2003e51c 	.word	0x2003e51c

000d7c54 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7c54:	1d01      	adds	r1, r0, #4
   d7c56:	6800      	ldr	r0, [r0, #0]
   d7c58:	f001 bec0 	b.w	d99dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d7c5c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7c5c:	b510      	push	{r4, lr}
   d7c5e:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7c60:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7c62:	6800      	ldr	r0, [r0, #0]
   d7c64:	f001 fe90 	bl	d9988 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7c68:	7d20      	ldrb	r0, [r4, #20]
   d7c6a:	2101      	movs	r1, #1
   d7c6c:	f003 fc70 	bl	db550 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7c70:	7d20      	ldrb	r0, [r4, #20]
   d7c72:	2101      	movs	r1, #1
}
   d7c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d7c78:	f003 bc7b 	b.w	db572 <digitalWrite>

000d7c7c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7c7c:	6800      	ldr	r0, [r0, #0]
   d7c7e:	f001 be94 	b.w	d99aa <_ZN8SPIClass14endTransactionEv>

000d7c82 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7c82:	6800      	ldr	r0, [r0, #0]
   d7c84:	21ff      	movs	r1, #255	; 0xff
   d7c86:	f001 bf17 	b.w	d9ab8 <_ZN8SPIClass8transferEh>
	...

000d7c8c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7c8e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7c90:	4a07      	ldr	r2, [pc, #28]	; (d7cb0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7c92:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7c94:	2500      	movs	r5, #0
   d7c96:	4c07      	ldr	r4, [pc, #28]	; (d7cb4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7c98:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7c9a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7c9c:	460a      	mov	r2, r1
   d7c9e:	4629      	mov	r1, r5
   d7ca0:	f001 ff10 	bl	d9ac4 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7ca4:	7823      	ldrb	r3, [r4, #0]
   d7ca6:	2b00      	cmp	r3, #0
   d7ca8:	d0fc      	beq.n	d7ca4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d7caa:	2000      	movs	r0, #0
   d7cac:	b003      	add	sp, #12
   d7cae:	bd30      	pop	{r4, r5, pc}
   d7cb0:	000d7c49 	.word	0x000d7c49
   d7cb4:	2003e51c 	.word	0x2003e51c

000d7cb8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7cb8:	6800      	ldr	r0, [r0, #0]
   d7cba:	f001 befd 	b.w	d9ab8 <_ZN8SPIClass8transferEh>
	...

000d7cc0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7cc2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7cc4:	4a06      	ldr	r2, [pc, #24]	; (d7ce0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7cc6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7cc8:	2500      	movs	r5, #0
   d7cca:	4c06      	ldr	r4, [pc, #24]	; (d7ce4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7ccc:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7cce:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7cd0:	462a      	mov	r2, r5
   d7cd2:	f001 fef7 	bl	d9ac4 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d7cd6:	7823      	ldrb	r3, [r4, #0]
   d7cd8:	2b00      	cmp	r3, #0
   d7cda:	d0fc      	beq.n	d7cd6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7cdc:	b003      	add	sp, #12
   d7cde:	bd30      	pop	{r4, r5, pc}
   d7ce0:	000d7c49 	.word	0x000d7c49
   d7ce4:	2003e51c 	.word	0x2003e51c

000d7ce8 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d7ce8:	b507      	push	{r0, r1, r2, lr}
   d7cea:	9001      	str	r0, [sp, #4]
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d7cec:	f003 fc8a 	bl	db604 <_Z19__fetch_global_Wirev>
   d7cf0:	6803      	ldr	r3, [r0, #0]
   d7cf2:	9901      	ldr	r1, [sp, #4]
   d7cf4:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d7cf6:	b003      	add	sp, #12
   d7cf8:	f85d eb04 	ldr.w	lr, [sp], #4
	Wire.write((uint8_t) x);
   d7cfc:	4718      	bx	r3

000d7cfe <_ZL8wirerecvv>:

static inline uint8_t wirerecv(void) {
   d7cfe:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d7d00:	f003 fc80 	bl	db604 <_Z19__fetch_global_Wirev>
   d7d04:	6803      	ldr	r3, [r0, #0]
   d7d06:	695b      	ldr	r3, [r3, #20]
   d7d08:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d7d0a:	b2c0      	uxtb	r0, r0
   d7d0c:	bd08      	pop	{r3, pc}

000d7d0e <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d7d0e:	b538      	push	{r3, r4, r5, lr}
   d7d10:	4604      	mov	r4, r0
   d7d12:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d7d14:	f003 fc76 	bl	db604 <_Z19__fetch_global_Wirev>
   d7d18:	7821      	ldrb	r1, [r4, #0]
   d7d1a:	f041 0120 	orr.w	r1, r1, #32
   d7d1e:	f003 fb0d 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d7d22:	4628      	mov	r0, r5
   d7d24:	f7ff ffe0 	bl	d7ce8 <_ZL8wiresendh>
	Wire.endTransmission();
   d7d28:	f003 fc6c 	bl	db604 <_Z19__fetch_global_Wirev>
   d7d2c:	f003 fb0d 	bl	db34a <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d7d30:	f003 fc68 	bl	db604 <_Z19__fetch_global_Wirev>
   d7d34:	7821      	ldrb	r1, [r4, #0]
   d7d36:	2201      	movs	r2, #1
   d7d38:	f041 0120 	orr.w	r1, r1, #32
   d7d3c:	f003 faf7 	bl	db32e <_ZN7TwoWire11requestFromEhj>
	return wirerecv();
}
   d7d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return wirerecv();
   d7d44:	f7ff bfdb 	b.w	d7cfe <_ZL8wirerecvv>

000d7d48 <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d7d48:	b570      	push	{r4, r5, r6, lr}
   d7d4a:	4606      	mov	r6, r0
   d7d4c:	4614      	mov	r4, r2
   d7d4e:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d7d50:	f003 fc58 	bl	db604 <_Z19__fetch_global_Wirev>
   d7d54:	7831      	ldrb	r1, [r6, #0]
   d7d56:	f041 0120 	orr.w	r1, r1, #32
   d7d5a:	f003 faef 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d7d5e:	4628      	mov	r0, r5
   d7d60:	f7ff ffc2 	bl	d7ce8 <_ZL8wiresendh>
	wiresend(regValue);
   d7d64:	4620      	mov	r0, r4
   d7d66:	f7ff ffbf 	bl	d7ce8 <_ZL8wiresendh>
	Wire.endTransmission();
   d7d6a:	f003 fc4b 	bl	db604 <_Z19__fetch_global_Wirev>
}
   d7d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Wire.endTransmission();
   d7d72:	f003 baea 	b.w	db34a <_ZN7TwoWire15endTransmissionEv>

000d7d76 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d7d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7d78:	4616      	mov	r6, r2
   d7d7a:	f89d 2018 	ldrb.w	r2, [sp, #24]
   d7d7e:	460c      	mov	r4, r1
	return(pin<8) ?portAaddr:portBaddr;
   d7d80:	2907      	cmp	r1, #7
   d7d82:	bf94      	ite	ls
   d7d84:	4619      	movls	r1, r3
   d7d86:	4611      	movhi	r1, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d7d88:	9101      	str	r1, [sp, #4]
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d7d8a:	4605      	mov	r5, r0
	regValue = readRegister(regAddr);
   d7d8c:	f7ff ffbf 	bl	d7d0e <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d7d90:	f004 0207 	and.w	r2, r4, #7
   d7d94:	2401      	movs	r4, #1
   d7d96:	4094      	lsls	r4, r2
   d7d98:	9901      	ldr	r1, [sp, #4]
   d7d9a:	b2e4      	uxtb	r4, r4
   d7d9c:	b146      	cbz	r6, d7db0 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x3a>
   d7d9e:	ea40 0204 	orr.w	r2, r0, r4
   d7da2:	b2d2      	uxtb	r2, r2

	writeRegister(regAddr,regValue);
   d7da4:	4628      	mov	r0, r5
}
   d7da6:	b002      	add	sp, #8
   d7da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	writeRegister(regAddr,regValue);
   d7dac:	f7ff bfcc 	b.w	d7d48 <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	bitWrite(regValue,bit,pValue);
   d7db0:	ea20 0204 	bic.w	r2, r0, r4
   d7db4:	e7f5      	b.n	d7da2 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2c>

000d7db6 <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d7db6:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d7db8:	2907      	cmp	r1, #7
   d7dba:	bf28      	it	cs
   d7dbc:	2107      	movcs	r1, #7
   d7dbe:	7001      	strb	r1, [r0, #0]
void Adafruit_MCP23017::begin(uint8_t addr) {
   d7dc0:	4604      	mov	r4, r0

	Wire.begin();
   d7dc2:	f003 fc1f 	bl	db604 <_Z19__fetch_global_Wirev>
   d7dc6:	f003 fa83 	bl	db2d0 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d7dca:	4620      	mov	r0, r4
   d7dcc:	22ff      	movs	r2, #255	; 0xff
   d7dce:	2100      	movs	r1, #0
   d7dd0:	f7ff ffba 	bl	d7d48 <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d7dd4:	4620      	mov	r0, r4
   d7dd6:	22ff      	movs	r2, #255	; 0xff
}
   d7dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(MCP23017_IODIRB,0xff);
   d7ddc:	2101      	movs	r1, #1
   d7dde:	f7ff bfb3 	b.w	d7d48 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d7de2 <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d7de2:	2100      	movs	r1, #0
   d7de4:	f7ff bfe7 	b.w	d7db6 <_ZN17Adafruit_MCP230175beginEh>

000d7de8 <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d7de8:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d7dea:	2301      	movs	r3, #1
   d7dec:	fab2 f282 	clz	r2, r2
   d7df0:	9300      	str	r3, [sp, #0]
   d7df2:	0952      	lsrs	r2, r2, #5
   d7df4:	2300      	movs	r3, #0
   d7df6:	f7ff ffbe 	bl	d7d76 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d7dfa:	b003      	add	sp, #12
   d7dfc:	f85d fb04 	ldr.w	pc, [sp], #4

000d7e00 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:
	return(pin<8) ?portAaddr:portBaddr;
   d7e00:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d7e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return pin%8;
   d7e04:	f001 0707 	and.w	r7, r1, #7
void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d7e08:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d7e0a:	bf34      	ite	cc
   d7e0c:	2114      	movcc	r1, #20
   d7e0e:	2115      	movcs	r1, #21
void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d7e10:	4605      	mov	r5, r0
   d7e12:	4616      	mov	r6, r2
	gpio = readRegister(regAddr);
   d7e14:	f7ff ff7b 	bl	d7d0e <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d7e18:	2301      	movs	r3, #1
   d7e1a:	40bb      	lsls	r3, r7
   d7e1c:	b2db      	uxtb	r3, r3
   d7e1e:	b15e      	cbz	r6, d7e38 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x38>
   d7e20:	ea40 0203 	orr.w	r2, r0, r3
	return(pin<8) ?portAaddr:portBaddr;
   d7e24:	2c08      	cmp	r4, #8

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d7e26:	4628      	mov	r0, r5
	bitWrite(gpio,bit,d);
   d7e28:	b2d2      	uxtb	r2, r2
}
   d7e2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	writeRegister(regAddr,gpio);
   d7e2e:	bf34      	ite	cc
   d7e30:	2112      	movcc	r1, #18
   d7e32:	2113      	movcs	r1, #19
   d7e34:	f7ff bf88 	b.w	d7d48 <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	bitWrite(gpio,bit,d);
   d7e38:	ea20 0203 	bic.w	r2, r0, r3
   d7e3c:	e7f2      	b.n	d7e24 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x24>

000d7e3e <_ZN17Adafruit_MCP230176pullUpEhh>:

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d7e3e:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d7e40:	230d      	movs	r3, #13
   d7e42:	9300      	str	r3, [sp, #0]
   d7e44:	230c      	movs	r3, #12
   d7e46:	f7ff ff96 	bl	d7d76 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d7e4a:	b003      	add	sp, #12
   d7e4c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7e50 <_ZN9MPL3115A2C1Ev>:
#include "SparkFun_MPL3115A2.h"

MPL3115A2::MPL3115A2()
{
  //Set initial values for private vars
}
   d7e50:	4770      	bx	lr

000d7e52 <_ZN9MPL3115A28IIC_ReadEh>:
}


// These are the two I2C functions in this sketch.
byte MPL3115A2::IIC_Read(byte regAddr)
{
   d7e52:	b510      	push	{r4, lr}
   d7e54:	460c      	mov	r4, r1
  // This function reads one byte over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
   d7e56:	f003 fbd5 	bl	db604 <_Z19__fetch_global_Wirev>
   d7e5a:	2160      	movs	r1, #96	; 0x60
   d7e5c:	f003 fa6e 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);  // Address of CTRL_REG1
   d7e60:	f003 fbd0 	bl	db604 <_Z19__fetch_global_Wirev>
   d7e64:	6803      	ldr	r3, [r0, #0]
   d7e66:	4621      	mov	r1, r4
   d7e68:	689b      	ldr	r3, [r3, #8]
   d7e6a:	4798      	blx	r3
  Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   d7e6c:	f003 fbca 	bl	db604 <_Z19__fetch_global_Wirev>
   d7e70:	2100      	movs	r1, #0
   d7e72:	f003 fa66 	bl	db342 <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPL3115A2_ADDRESS, 1); // Request the data...
   d7e76:	f003 fbc5 	bl	db604 <_Z19__fetch_global_Wirev>
   d7e7a:	2201      	movs	r2, #1
   d7e7c:	2160      	movs	r1, #96	; 0x60
   d7e7e:	f003 fa56 	bl	db32e <_ZN7TwoWire11requestFromEhj>
  return Wire.read();
   d7e82:	f003 fbbf 	bl	db604 <_Z19__fetch_global_Wirev>
   d7e86:	6803      	ldr	r3, [r0, #0]
   d7e88:	695b      	ldr	r3, [r3, #20]
   d7e8a:	4798      	blx	r3
}
   d7e8c:	b2c0      	uxtb	r0, r0
   d7e8e:	bd10      	pop	{r4, pc}

000d7e90 <_ZN9MPL3115A25beginEv>:
{
   d7e90:	b510      	push	{r4, lr}
   d7e92:	4604      	mov	r4, r0
  Wire.begin();
   d7e94:	f003 fbb6 	bl	db604 <_Z19__fetch_global_Wirev>
   d7e98:	f003 fa1a 	bl	db2d0 <_ZN7TwoWire5beginEv>
  uint8_t identify = IIC_Read(WHO_AM_I );
   d7e9c:	210c      	movs	r1, #12
   d7e9e:	4620      	mov	r0, r4
   d7ea0:	f7ff ffd7 	bl	d7e52 <_ZN9MPL3115A28IIC_ReadEh>
}
   d7ea4:	f1a0 03c4 	sub.w	r3, r0, #196	; 0xc4
   d7ea8:	4258      	negs	r0, r3
   d7eaa:	4158      	adcs	r0, r3
   d7eac:	bd10      	pop	{r4, pc}

000d7eae <_ZN9MPL3115A29IIC_WriteEhh>:

void MPL3115A2::IIC_Write(byte regAddr, byte value)
{
   d7eae:	b538      	push	{r3, r4, r5, lr}
   d7eb0:	4614      	mov	r4, r2
   d7eb2:	460d      	mov	r5, r1
  // This function writes one byto over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
   d7eb4:	f003 fba6 	bl	db604 <_Z19__fetch_global_Wirev>
   d7eb8:	2160      	movs	r1, #96	; 0x60
   d7eba:	f003 fa3f 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);
   d7ebe:	f003 fba1 	bl	db604 <_Z19__fetch_global_Wirev>
   d7ec2:	6803      	ldr	r3, [r0, #0]
   d7ec4:	4629      	mov	r1, r5
   d7ec6:	689b      	ldr	r3, [r3, #8]
   d7ec8:	4798      	blx	r3
  Wire.write(value);
   d7eca:	f003 fb9b 	bl	db604 <_Z19__fetch_global_Wirev>
   d7ece:	6803      	ldr	r3, [r0, #0]
   d7ed0:	4621      	mov	r1, r4
   d7ed2:	689b      	ldr	r3, [r3, #8]
   d7ed4:	4798      	blx	r3
  Wire.endTransmission(true);
   d7ed6:	f003 fb95 	bl	db604 <_Z19__fetch_global_Wirev>
}
   d7eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission(true);
   d7ede:	2101      	movs	r1, #1
   d7ee0:	f003 ba2f 	b.w	db342 <_ZN7TwoWire15endTransmissionEh>

000d7ee4 <_ZN9MPL3115A216setModeBarometerEv>:
{
   d7ee4:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7ee6:	2126      	movs	r1, #38	; 0x26
{
   d7ee8:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7eea:	f7ff ffb2 	bl	d7e52 <_ZN9MPL3115A28IIC_ReadEh>
  IIC_Write(CTRL_REG1, tempSetting);
   d7eee:	2126      	movs	r1, #38	; 0x26
   d7ef0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d7ef4:	4620      	mov	r0, r4
}
   d7ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IIC_Write(CTRL_REG1, tempSetting);
   d7efa:	f7ff bfd8 	b.w	d7eae <_ZN9MPL3115A29IIC_WriteEhh>

000d7efe <_ZN9MPL3115A217setOversampleRateEh>:
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
   d7efe:	2907      	cmp	r1, #7
   d7f00:	bf28      	it	cs
   d7f02:	2107      	movcs	r1, #7
{
   d7f04:	b538      	push	{r3, r4, r5, lr}
   d7f06:	460d      	mov	r5, r1
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7f08:	2126      	movs	r1, #38	; 0x26
{
   d7f0a:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7f0c:	f7ff ffa1 	bl	d7e52 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= 0b11000111; //Clear out old OS bits
   d7f10:	f000 02c7 	and.w	r2, r0, #199	; 0xc7
  tempSetting |= sampleRate; //Mask in new OS bits
   d7f14:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
  IIC_Write(CTRL_REG1, tempSetting);
   d7f18:	4620      	mov	r0, r4
   d7f1a:	b2d2      	uxtb	r2, r2
}
   d7f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IIC_Write(CTRL_REG1, tempSetting);
   d7f20:	2126      	movs	r1, #38	; 0x26
   d7f22:	f7ff bfc4 	b.w	d7eae <_ZN9MPL3115A29IIC_WriteEhh>

000d7f26 <_ZN9MPL3115A216enableEventFlagsEv>:
  IIC_Write(PT_DATA_CFG, 0x07); // Enable all three pressure and temp event flags
   d7f26:	2207      	movs	r2, #7
   d7f28:	2113      	movs	r1, #19
   d7f2a:	f7ff bfc0 	b.w	d7eae <_ZN9MPL3115A29IIC_WriteEhh>

000d7f2e <_ZN9MPL3115A213toggleOneShotEv>:
{
   d7f2e:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7f30:	2126      	movs	r1, #38	; 0x26
{
   d7f32:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7f34:	f7ff ff8d 	bl	d7e52 <_ZN9MPL3115A28IIC_ReadEh>
  IIC_Write(CTRL_REG1, tempSetting);
   d7f38:	2126      	movs	r1, #38	; 0x26
   d7f3a:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
   d7f3e:	4620      	mov	r0, r4
   d7f40:	f7ff ffb5 	bl	d7eae <_ZN9MPL3115A29IIC_WriteEhh>
  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
   d7f44:	2126      	movs	r1, #38	; 0x26
   d7f46:	4620      	mov	r0, r4
   d7f48:	f7ff ff83 	bl	d7e52 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting |= (1<<1); //Set OST bit
   d7f4c:	f040 0002 	orr.w	r0, r0, #2
  IIC_Write(CTRL_REG1, tempSetting);
   d7f50:	b2c2      	uxtb	r2, r0
   d7f52:	2126      	movs	r1, #38	; 0x26
   d7f54:	4620      	mov	r0, r4
}
   d7f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IIC_Write(CTRL_REG1, tempSetting);
   d7f5a:	f7ff bfa8 	b.w	d7eae <_ZN9MPL3115A29IIC_WriteEhh>
	...

000d7f60 <_ZN9MPL3115A212readPressureEv>:
{
   d7f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d7f62:	2100      	movs	r1, #0
{
   d7f64:	4607      	mov	r7, r0
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d7f66:	f7ff ff74 	bl	d7e52 <_ZN9MPL3115A28IIC_ReadEh>
	while(IIC_Read(STATUS) & (1<<2) == 0)
   d7f6a:	2100      	movs	r1, #0
   d7f6c:	4638      	mov	r0, r7
   d7f6e:	f7ff ff70 	bl	d7e52 <_ZN9MPL3115A28IIC_ReadEh>
	Wire.beginTransmission(MPL3115A2_ADDRESS);
   d7f72:	f003 fb47 	bl	db604 <_Z19__fetch_global_Wirev>
   d7f76:	2160      	movs	r1, #96	; 0x60
   d7f78:	f003 f9e0 	bl	db33c <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(OUT_P_MSB);  // Address of data to get
   d7f7c:	f003 fb42 	bl	db604 <_Z19__fetch_global_Wirev>
   d7f80:	2101      	movs	r1, #1
   d7f82:	f7fd fd72 	bl	d5a6a <_ZN7TwoWire5writeEi>
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   d7f86:	f003 fb3d 	bl	db604 <_Z19__fetch_global_Wirev>
   d7f8a:	2100      	movs	r1, #0
   d7f8c:	f003 f9d9 	bl	db342 <_ZN7TwoWire15endTransmissionEh>
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 3) != 3) { // Request three bytes
   d7f90:	f003 fb38 	bl	db604 <_Z19__fetch_global_Wirev>
   d7f94:	2203      	movs	r2, #3
   d7f96:	2160      	movs	r1, #96	; 0x60
   d7f98:	f003 f9c9 	bl	db32e <_ZN7TwoWire11requestFromEhj>
   d7f9c:	2803      	cmp	r0, #3
   d7f9e:	d12b      	bne.n	d7ff8 <_ZN9MPL3115A212readPressureEv+0x98>
	msb = Wire.read();
   d7fa0:	f003 fb30 	bl	db604 <_Z19__fetch_global_Wirev>
   d7fa4:	6803      	ldr	r3, [r0, #0]
   d7fa6:	695b      	ldr	r3, [r3, #20]
   d7fa8:	4798      	blx	r3
   d7faa:	4604      	mov	r4, r0
	csb = Wire.read();
   d7fac:	f003 fb2a 	bl	db604 <_Z19__fetch_global_Wirev>
   d7fb0:	6803      	ldr	r3, [r0, #0]
   d7fb2:	695b      	ldr	r3, [r3, #20]
   d7fb4:	4798      	blx	r3
   d7fb6:	4606      	mov	r6, r0
	lsb = Wire.read();
   d7fb8:	f003 fb24 	bl	db604 <_Z19__fetch_global_Wirev>
   d7fbc:	6803      	ldr	r3, [r0, #0]
   d7fbe:	695b      	ldr	r3, [r3, #20]
   d7fc0:	4798      	blx	r3
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   d7fc2:	0424      	lsls	r4, r4, #16
   d7fc4:	0236      	lsls	r6, r6, #8
   d7fc6:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   d7fca:	b2b6      	uxth	r6, r6
	lsb = Wire.read();
   d7fcc:	b2c5      	uxtb	r5, r0
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   d7fce:	4334      	orrs	r4, r6
   d7fd0:	432c      	orrs	r4, r5
	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d7fd2:	4638      	mov	r0, r7
   d7fd4:	f7ff ffab 	bl	d7f2e <_ZN9MPL3115A213toggleOneShotEv>
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction
   d7fd8:	f3c5 1501 	ubfx	r5, r5, #4, #2
	pressure_whole >>= 6; //Pressure is an 18 bit number with 2 bits of decimal. Get rid of decimal portion.
   d7fdc:	11a3      	asrs	r3, r4, #6
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction
   d7fde:	ee07 5a90 	vmov	s15, r5
	pressure_whole >>= 6; //Pressure is an 18 bit number with 2 bits of decimal. Get rid of decimal portion.
   d7fe2:	ee00 3a10 	vmov	s0, r3
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction
   d7fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float pressure = (float)pressure_whole + pressure_decimal;
   d7fea:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d7fee:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   d7ff2:	eea7 0a87 	vfma.f32	s0, s15, s14
}
   d7ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -999;
   d7ff8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d8000 <_ZN9MPL3115A212readPressureEv+0xa0>
   d7ffc:	e7fb      	b.n	d7ff6 <_ZN9MPL3115A212readPressureEv+0x96>
   d7ffe:	bf00      	nop
   d8000:	c479c000 	.word	0xc479c000

000d8004 <_ZN10CloudClass7publishEPKcS1_.isra.0>:
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d8004:	b513      	push	{r0, r1, r4, lr}
   d8006:	4b05      	ldr	r3, [pc, #20]	; (d801c <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d8008:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d800a:	f88d 3000 	strb.w	r3, [sp]
   d800e:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d8010:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d8012:	f002 fd69 	bl	daae8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d8016:	4620      	mov	r0, r4
   d8018:	b002      	add	sp, #8
   d801a:	bd10      	pop	{r4, pc}
   d801c:	2003e51d 	.word	0x2003e51d

000d8020 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf>:
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   d8020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8024:	ed2d 8b02 	vpush	{d8}
    if(AnemoneterPeriodReadingCount == 0)
   d8028:	f241 6a78 	movw	sl, #5752	; 0x1678
{
   d802c:	4604      	mov	r4, r0
    if(AnemoneterPeriodReadingCount == 0)
   d802e:	f850 300a 	ldr.w	r3, [r0, sl]
{
   d8032:	460d      	mov	r5, r1
    if(AnemoneterPeriodReadingCount == 0)
   d8034:	b94b      	cbnz	r3, d804a <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0x2a>
    {
        *gustMPH = 0.0;
   d8036:	ed9f 8a2d 	vldr	s16, [pc, #180]	; d80ec <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xcc>
   d803a:	ed81 8a00 	vstr	s16, [r1]
    AnemoneterPeriodTotal = 0;
    AnemoneterPeriodReadingCount = 0;
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
    GustPeriod = UINT_MAX;
    return result;
}
   d803e:	eeb0 0a48 	vmov.f32	s0, s16
   d8042:	ecbd 8b02 	vpop	{d8}
   d8046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
   d804a:	f500 53b3 	add.w	r3, r0, #5728	; 0x1660
   d804e:	f241 6b74 	movw	fp, #5748	; 0x1674
   d8052:	6918      	ldr	r0, [r3, #16]
   d8054:	f004 fe3e 	bl	dccd4 <__aeabi_f2d>
   d8058:	2200      	movs	r2, #0
   d805a:	4b25      	ldr	r3, [pc, #148]	; (d80f0 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xd0>)
   d805c:	f004 fe92 	bl	dcd84 <__aeabi_dmul>
   d8060:	4606      	mov	r6, r0
   d8062:	f854 000a 	ldr.w	r0, [r4, sl]
   d8066:	ee07 0a90 	vmov	s15, r0
   d806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d806e:	460f      	mov	r7, r1
   d8070:	ee17 0a90 	vmov	r0, s15
   d8074:	eb04 030b 	add.w	r3, r4, fp
   d8078:	ed93 8a00 	vldr	s16, [r3]
   d807c:	f004 fe2a 	bl	dccd4 <__aeabi_f2d>
   d8080:	4632      	mov	r2, r6
   d8082:	463b      	mov	r3, r7
   d8084:	f004 fe7e 	bl	dcd84 <__aeabi_dmul>
   d8088:	eef8 7a48 	vcvt.f32.u32	s15, s16
   d808c:	4680      	mov	r8, r0
   d808e:	ee17 0a90 	vmov	r0, s15
   d8092:	4689      	mov	r9, r1
   d8094:	f004 fe1e 	bl	dccd4 <__aeabi_f2d>
   d8098:	4602      	mov	r2, r0
   d809a:	460b      	mov	r3, r1
   d809c:	4640      	mov	r0, r8
   d809e:	4649      	mov	r1, r9
   d80a0:	f004 ff9a 	bl	dcfd8 <__aeabi_ddiv>
   d80a4:	f005 f966 	bl	dd374 <__aeabi_d2f>
    AnemoneterPeriodTotal = 0;
   d80a8:	2300      	movs	r3, #0
   d80aa:	f844 300b 	str.w	r3, [r4, fp]
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d80ae:	f241 687c 	movw	r8, #5756	; 0x167c
    AnemoneterPeriodReadingCount = 0;
   d80b2:	f844 300a 	str.w	r3, [r4, sl]
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
   d80b6:	ee08 0a10 	vmov	s16, r0
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d80ba:	f854 0008 	ldr.w	r0, [r4, r8]
   d80be:	ee07 0a90 	vmov	s15, r0
   d80c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d80c6:	ee17 0a90 	vmov	r0, s15
   d80ca:	f004 fe03 	bl	dccd4 <__aeabi_f2d>
   d80ce:	460b      	mov	r3, r1
   d80d0:	4602      	mov	r2, r0
   d80d2:	4639      	mov	r1, r7
   d80d4:	4630      	mov	r0, r6
   d80d6:	f004 ff7f 	bl	dcfd8 <__aeabi_ddiv>
   d80da:	f005 f94b 	bl	dd374 <__aeabi_d2f>
    GustPeriod = UINT_MAX;
   d80de:	f04f 33ff 	mov.w	r3, #4294967295
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d80e2:	6028      	str	r0, [r5, #0]
    GustPeriod = UINT_MAX;
   d80e4:	f844 3008 	str.w	r3, [r4, r8]
    return result;
   d80e8:	e7a9      	b.n	d803e <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0x1e>
   d80ea:	bf00      	nop
   d80ec:	00000000 	.word	0x00000000
   d80f0:	408f4000 	.word	0x408f4000
   d80f4:	00000000 	.word	0x00000000

000d80f8 <_ZN14WeatherSensors21captureBatteryVoltageEv>:

void WeatherSensors::captureBatteryVoltage()
{
   d80f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d80fa:	4604      	mov	r4, r0
  unsigned int rawVoltage = 0;
  Wire.requestFrom(0x4D, 2);
   d80fc:	f003 fa82 	bl	db604 <_Z19__fetch_global_Wirev>
   d8100:	2202      	movs	r2, #2
   d8102:	214d      	movs	r1, #77	; 0x4d
   d8104:	f003 f913 	bl	db32e <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() == 2)
   d8108:	f003 fa7c 	bl	db604 <_Z19__fetch_global_Wirev>
   d810c:	6803      	ldr	r3, [r0, #0]
   d810e:	691b      	ldr	r3, [r3, #16]
   d8110:	4798      	blx	r3
   d8112:	2802      	cmp	r0, #2
   d8114:	d132      	bne.n	d817c <_ZN14WeatherSensors21captureBatteryVoltageEv+0x84>
  {
    rawVoltage = (Wire.read() << 8) | (Wire.read());
   d8116:	f003 fa75 	bl	db604 <_Z19__fetch_global_Wirev>
   d811a:	6803      	ldr	r3, [r0, #0]
   d811c:	695b      	ldr	r3, [r3, #20]
   d811e:	4798      	blx	r3
   d8120:	4606      	mov	r6, r0
   d8122:	f003 fa6f 	bl	db604 <_Z19__fetch_global_Wirev>
   d8126:	6803      	ldr	r3, [r0, #0]
   d8128:	695b      	ldr	r3, [r3, #20]
   d812a:	4798      	blx	r3
   d812c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    batVoltageTotal += (float)(rawVoltage)/4096.0*13.64; // 3.3*(4.7+1.5)/1.5
   d8130:	ee07 0a90 	vmov	s15, r0
   d8134:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d8138:	f504 55b5 	add.w	r5, r4, #5792	; 0x16a0
   d813c:	ee17 0a90 	vmov	r0, s15
   d8140:	f004 fdc8 	bl	dccd4 <__aeabi_f2d>
   d8144:	4b10      	ldr	r3, [pc, #64]	; (d8188 <_ZN14WeatherSensors21captureBatteryVoltageEv+0x90>)
   d8146:	2200      	movs	r2, #0
   d8148:	f004 fe1c 	bl	dcd84 <__aeabi_dmul>
   d814c:	a30c      	add	r3, pc, #48	; (adr r3, d8180 <_ZN14WeatherSensors21captureBatteryVoltageEv+0x88>)
   d814e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8152:	f004 fe17 	bl	dcd84 <__aeabi_dmul>
   d8156:	4606      	mov	r6, r0
   d8158:	6928      	ldr	r0, [r5, #16]
   d815a:	460f      	mov	r7, r1
   d815c:	f004 fdba 	bl	dccd4 <__aeabi_f2d>
   d8160:	4602      	mov	r2, r0
   d8162:	460b      	mov	r3, r1
   d8164:	4630      	mov	r0, r6
   d8166:	4639      	mov	r1, r7
   d8168:	f004 fc56 	bl	dca18 <__adddf3>
   d816c:	f005 f902 	bl	dd374 <__aeabi_d2f>
    batVoltageCount ++;
   d8170:	f241 62b4 	movw	r2, #5812	; 0x16b4
    batVoltageTotal += (float)(rawVoltage)/4096.0*13.64; // 3.3*(4.7+1.5)/1.5
   d8174:	6128      	str	r0, [r5, #16]
    batVoltageCount ++;
   d8176:	58a3      	ldr	r3, [r4, r2]
   d8178:	3301      	adds	r3, #1
   d817a:	50a3      	str	r3, [r4, r2]
  }  
}
   d817c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d817e:	bf00      	nop
   d8180:	147ae148 	.word	0x147ae148
   d8184:	402b47ae 	.word	0x402b47ae
   d8188:	3f300000 	.word	0x3f300000

000d818c <_ZN14WeatherSensors20getAndResetBatteryMVEv>:

uint16_t WeatherSensors::getAndResetBatteryMV()
{
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d818c:	f241 62b4 	movw	r2, #5812	; 0x16b4
   d8190:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
   d8194:	5881      	ldr	r1, [r0, r2]
   d8196:	edd3 6a04 	vldr	s13, [r3, #16]
   d819a:	ee07 1a90 	vmov	s15, r1
   d819e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 batVoltageTotal = 0;
   d81a2:	2100      	movs	r1, #0
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d81a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 batVoltageTotal = 0;
   d81a8:	6119      	str	r1, [r3, #16]
 batVoltageCount = 0;
   d81aa:	2300      	movs	r3, #0
   d81ac:	5083      	str	r3, [r0, r2]
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d81ae:	ed9f 7a05 	vldr	s14, [pc, #20]	; d81c4 <_ZN14WeatherSensors20getAndResetBatteryMVEv+0x38>
   d81b2:	ee67 7a87 	vmul.f32	s15, s15, s14
   d81b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 return result;
}
   d81ba:	ee17 3a90 	vmov	r3, s15
   d81be:	b298      	uxth	r0, r3
   d81c0:	4770      	bx	lr
   d81c2:	bf00      	nop
   d81c4:	447a0000 	.word	0x447a0000

000d81c8 <_ZN14WeatherSensors21getAndResetRainInchesEv>:
}*/


float WeatherSensors::getAndResetRainInches()
{
    float result = RainScaleInches * float(rainEventCount);
   d81c8:	f500 53b3 	add.w	r3, r0, #5728	; 0x1660
   d81cc:	ed93 0a00 	vldr	s0, [r3]
   d81d0:	edd3 7a02 	vldr	s15, [r3, #8]
   d81d4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    rainEventCount = 0;
   d81d8:	2200      	movs	r2, #0
    return result;
}
   d81da:	ee20 0a27 	vmul.f32	s0, s0, s15
    rainEventCount = 0;
   d81de:	601a      	str	r2, [r3, #0]
}
   d81e0:	4770      	bx	lr
   d81e2:	0000      	movs	r0, r0
   d81e4:	0000      	movs	r0, r0
	...

000d81e8 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv>:
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   d81e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(windVaneReadingCount == 0) {
   d81ea:	f241 6790 	movw	r7, #5776	; 0x1690
{
   d81ee:	ed2d 8b02 	vpush	{d8}
    if(windVaneReadingCount == 0) {
   d81f2:	59c3      	ldr	r3, [r0, r7]
   d81f4:	ed9f 8a26 	vldr	s16, [pc, #152]	; d8290 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xa8>
{
   d81f8:	4604      	mov	r4, r0
    if(windVaneReadingCount == 0) {
   d81fa:	2b00      	cmp	r3, #0
   d81fc:	d03e      	beq.n	d827c <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x94>
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   d81fe:	ee07 3a90 	vmov	s15, r3
   d8202:	f500 56b4 	add.w	r6, r0, #5760	; 0x1680
   d8206:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d820a:	ed96 7a02 	vldr	s14, [r6, #8]
   d820e:	eec7 8a27 	vdiv.f32	s17, s14, s15
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
   d8212:	ed96 7a03 	vldr	s14, [r6, #12]
   d8216:	ee87 0a27 	vdiv.f32	s0, s14, s15
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
   d821a:	ee80 0a28 	vdiv.f32	s0, s0, s17
   d821e:	f003 fc3b 	bl	dba98 <atanf>
   d8222:	ee10 0a10 	vmov	r0, s0
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   d8226:	f004 fd55 	bl	dccd4 <__aeabi_f2d>
   d822a:	4b1a      	ldr	r3, [pc, #104]	; (d8294 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xac>)
   d822c:	2200      	movs	r2, #0
   d822e:	f004 fda9 	bl	dcd84 <__aeabi_dmul>
   d8232:	a315      	add	r3, pc, #84	; (adr r3, d8288 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xa0>)
   d8234:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8238:	f004 fece 	bl	dcfd8 <__aeabi_ddiv>
   d823c:	f005 f89a 	bl	dd374 <__aeabi_d2f>
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   d8240:	eef4 8ac8 	vcmpe.f32	s17, s16
   d8244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   d8248:	ee00 0a10 	vmov	s0, r0
    if(avgCos < 0) result += 180.0;
   d824c:	bf48      	it	mi
   d824e:	eddf 7a12 	vldrmi	s15, [pc, #72]	; d8298 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb0>
    windVaneCosTotal = 0.0;
   d8252:	ed86 8a02 	vstr	s16, [r6, #8]
    if(avgCos < 0) result += 180.0;
   d8256:	bf48      	it	mi
   d8258:	ee30 0a27 	vaddmi.f32	s0, s0, s15
    windVaneReadingCount = 0;
   d825c:	2300      	movs	r3, #0
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;
   d825e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d8262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    windVaneSinTotal = 0.0;
   d8266:	ed86 8a03 	vstr	s16, [r6, #12]
    windVaneReadingCount = 0;
   d826a:	51e3      	str	r3, [r4, r7]
    if(result < 0) result += 360.0;
   d826c:	d503      	bpl.n	d8276 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x8e>
   d826e:	eddf 7a0b 	vldr	s15, [pc, #44]	; d829c <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb4>
   d8272:	ee30 0a27 	vadd.f32	s0, s0, s15

   return result;
}
   d8276:	ecbd 8b02 	vpop	{d8}
   d827a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
   d827c:	eeb0 0a48 	vmov.f32	s0, s16
   d8280:	e7f9      	b.n	d8276 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x8e>
   d8282:	bf00      	nop
   d8284:	f3af 8000 	nop.w
   d8288:	f01b866e 	.word	0xf01b866e
   d828c:	400921f9 	.word	0x400921f9
   d8290:	00000000 	.word	0x00000000
   d8294:	40668000 	.word	0x40668000
   d8298:	43340000 	.word	0x43340000
   d829c:	43b40000 	.word	0x43b40000

000d82a0 <_ZN14WeatherSensors20lookupRadiansFromRawEj>:

float WeatherSensors::lookupRadiansFromRaw(unsigned int analogRaw)
{
//Serial.println(analogRaw);
    // The mechanism for reading the weathervane isn't arbitrary, but effectively, we just need to look up which of the 16 positions we're in.
    if(analogRaw >= 2200 && analogRaw < 2400) return (3.14);//South
   d82a0:	f6a1 0398 	subw	r3, r1, #2200	; 0x898
   d82a4:	2bc7      	cmp	r3, #199	; 0xc7
   d82a6:	d942      	bls.n	d832e <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x8e>
    if(analogRaw >= 2100 && analogRaw < 2200) return (3.53);//SSW
   d82a8:	f6a1 0334 	subw	r3, r1, #2100	; 0x834
   d82ac:	2b63      	cmp	r3, #99	; 0x63
   d82ae:	d941      	bls.n	d8334 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x94>
    if(analogRaw >= 3200 && analogRaw < 3299) return (3.93);//SW
   d82b0:	f5a1 6348 	sub.w	r3, r1, #3200	; 0xc80
   d82b4:	2b62      	cmp	r3, #98	; 0x62
   d82b6:	d940      	bls.n	d833a <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x9a>
    if(analogRaw >= 3100 && analogRaw < 3200) return (4.32);//WSW
   d82b8:	f6a1 431c 	subw	r3, r1, #3100	; 0xc1c
   d82bc:	2b63      	cmp	r3, #99	; 0x63
   d82be:	d93f      	bls.n	d8340 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xa0>
    if(analogRaw >= 3890 && analogRaw < 3999) return (4.71);//West
   d82c0:	f6a1 7332 	subw	r3, r1, #3890	; 0xf32
   d82c4:	2b6c      	cmp	r3, #108	; 0x6c
   d82c6:	d93e      	bls.n	d8346 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xa6>
    if(analogRaw >= 3700 && analogRaw < 3780) return (5.11);//WNW
   d82c8:	f6a1 6374 	subw	r3, r1, #3700	; 0xe74
   d82cc:	2b4f      	cmp	r3, #79	; 0x4f
   d82ce:	d93d      	bls.n	d834c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xac>
    if(analogRaw >= 3780 && analogRaw < 3890) return (5.50);//NW
   d82d0:	f6a1 63c4 	subw	r3, r1, #3780	; 0xec4
   d82d4:	2b6d      	cmp	r3, #109	; 0x6d
   d82d6:	d93c      	bls.n	d8352 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xb2>
    if(analogRaw >= 3400 && analogRaw < 3500) return (5.89);//NNW
   d82d8:	f6a1 5348 	subw	r3, r1, #3400	; 0xd48
   d82dc:	2b63      	cmp	r3, #99	; 0x63
   d82de:	d93b      	bls.n	d8358 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xb8>
    if(analogRaw >= 3570 && analogRaw < 3700) return (0.00);//North
   d82e0:	f6a1 53f2 	subw	r3, r1, #3570	; 0xdf2
   d82e4:	2b81      	cmp	r3, #129	; 0x81
   d82e6:	d93a      	bls.n	d835e <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xbe>
    if(analogRaw >= 2600 && analogRaw < 2700) return (0.39);//NNE
   d82e8:	f6a1 2328 	subw	r3, r1, #2600	; 0xa28
   d82ec:	2b63      	cmp	r3, #99	; 0x63
   d82ee:	d939      	bls.n	d8364 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xc4>
    if(analogRaw >= 2750 && analogRaw < 2850) return (0.79);//NE
   d82f0:	f6a1 23be 	subw	r3, r1, #2750	; 0xabe
   d82f4:	2b63      	cmp	r3, #99	; 0x63
   d82f6:	d938      	bls.n	d836a <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xca>
    if(analogRaw >= 1510 && analogRaw < 1580) return (1.18);//ENE
   d82f8:	f2a1 53e6 	subw	r3, r1, #1510	; 0x5e6
   d82fc:	2b45      	cmp	r3, #69	; 0x45
   d82fe:	d937      	bls.n	d8370 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xd0>
    if(analogRaw >= 1580 && analogRaw < 1650) return (1.57);//East
   d8300:	f2a1 632c 	subw	r3, r1, #1580	; 0x62c
   d8304:	2b45      	cmp	r3, #69	; 0x45
   d8306:	d936      	bls.n	d8376 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xd6>
    if(analogRaw >= 1470 && analogRaw < 1510) return (1.96);//ESE
   d8308:	f2a1 53be 	subw	r3, r1, #1470	; 0x5be
   d830c:	2b27      	cmp	r3, #39	; 0x27
   d830e:	d935      	bls.n	d837c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xdc>
    if(analogRaw >= 1900 && analogRaw < 2000) return (2.36);//SE
   d8310:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
   d8314:	2b63      	cmp	r3, #99	; 0x63
   d8316:	d934      	bls.n	d8382 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xe2>
    if(analogRaw >= 1700 && analogRaw < 1750) return (2.74);//SSE
   d8318:	f2a1 61a4 	subw	r1, r1, #1700	; 0x6a4
    if(analogRaw > 4000) return(-1); // Open circuit?  Probably means the sensor is not connected
   // Particle.publish("error", String::format("Got %d from Windvane.",analogRaw), 60 , PRIVATE);
    return -1;
   d831c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; d8388 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xe8>
   d8320:	2932      	cmp	r1, #50	; 0x32
   d8322:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d8326:	bf28      	it	cs
   d8328:	eeb0 0a67 	vmovcs.f32	s0, s15
   d832c:	4770      	bx	lr
    if(analogRaw >= 2200 && analogRaw < 2400) return (3.14);//South
   d832e:	ed9f 0a17 	vldr	s0, [pc, #92]	; d838c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xec>
   d8332:	4770      	bx	lr
    if(analogRaw >= 2100 && analogRaw < 2200) return (3.53);//SSW
   d8334:	ed9f 0a16 	vldr	s0, [pc, #88]	; d8390 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf0>
   d8338:	4770      	bx	lr
    if(analogRaw >= 3200 && analogRaw < 3299) return (3.93);//SW
   d833a:	ed9f 0a16 	vldr	s0, [pc, #88]	; d8394 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf4>
   d833e:	4770      	bx	lr
    if(analogRaw >= 3100 && analogRaw < 3200) return (4.32);//WSW
   d8340:	ed9f 0a15 	vldr	s0, [pc, #84]	; d8398 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf8>
   d8344:	4770      	bx	lr
    if(analogRaw >= 3890 && analogRaw < 3999) return (4.71);//West
   d8346:	ed9f 0a15 	vldr	s0, [pc, #84]	; d839c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xfc>
   d834a:	4770      	bx	lr
    if(analogRaw >= 3700 && analogRaw < 3780) return (5.11);//WNW
   d834c:	ed9f 0a14 	vldr	s0, [pc, #80]	; d83a0 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x100>
   d8350:	4770      	bx	lr
    if(analogRaw >= 3780 && analogRaw < 3890) return (5.50);//NW
   d8352:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
   d8356:	4770      	bx	lr
    if(analogRaw >= 3400 && analogRaw < 3500) return (5.89);//NNW
   d8358:	ed9f 0a12 	vldr	s0, [pc, #72]	; d83a4 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x104>
   d835c:	4770      	bx	lr
    if(analogRaw >= 3570 && analogRaw < 3700) return (0.00);//North
   d835e:	ed9f 0a12 	vldr	s0, [pc, #72]	; d83a8 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x108>
   d8362:	4770      	bx	lr
    if(analogRaw >= 2600 && analogRaw < 2700) return (0.39);//NNE
   d8364:	ed9f 0a11 	vldr	s0, [pc, #68]	; d83ac <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x10c>
   d8368:	4770      	bx	lr
    if(analogRaw >= 2750 && analogRaw < 2850) return (0.79);//NE
   d836a:	ed9f 0a11 	vldr	s0, [pc, #68]	; d83b0 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x110>
   d836e:	4770      	bx	lr
    if(analogRaw >= 1510 && analogRaw < 1580) return (1.18);//ENE
   d8370:	ed9f 0a10 	vldr	s0, [pc, #64]	; d83b4 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x114>
   d8374:	4770      	bx	lr
    if(analogRaw >= 1580 && analogRaw < 1650) return (1.57);//East
   d8376:	ed9f 0a10 	vldr	s0, [pc, #64]	; d83b8 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x118>
   d837a:	4770      	bx	lr
    if(analogRaw >= 1470 && analogRaw < 1510) return (1.96);//ESE
   d837c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; d83bc <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x11c>
   d8380:	4770      	bx	lr
    if(analogRaw >= 1900 && analogRaw < 2000) return (2.36);//SE
   d8382:	ed9f 0a0f 	vldr	s0, [pc, #60]	; d83c0 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x120>
}
   d8386:	4770      	bx	lr
   d8388:	402f5c29 	.word	0x402f5c29
   d838c:	4048f5c3 	.word	0x4048f5c3
   d8390:	4061eb85 	.word	0x4061eb85
   d8394:	407b851f 	.word	0x407b851f
   d8398:	408a3d71 	.word	0x408a3d71
   d839c:	4096b852 	.word	0x4096b852
   d83a0:	40a3851f 	.word	0x40a3851f
   d83a4:	40bc7ae1 	.word	0x40bc7ae1
   d83a8:	00000000 	.word	0x00000000
   d83ac:	3ec7ae14 	.word	0x3ec7ae14
   d83b0:	3f4a3d71 	.word	0x3f4a3d71
   d83b4:	3f970a3d 	.word	0x3f970a3d
   d83b8:	3fc8f5c3 	.word	0x3fc8f5c3
   d83bc:	3ffae148 	.word	0x3ffae148
   d83c0:	40170a3d 	.word	0x40170a3d
   d83c4:	00000000 	.word	0x00000000

000d83c8 <_ZN14WeatherSensors15captureWindVaneEv>:
void WeatherSensors::captureWindVane() {
   d83c8:	b510      	push	{r4, lr}
   d83ca:	ed2d 8b02 	vpush	{d8}
    unsigned int windVaneRaw = analogRead(WindVanePin);
   d83ce:	f241 6384 	movw	r3, #5764	; 0x1684
void WeatherSensors::captureWindVane() {
   d83d2:	4604      	mov	r4, r0
    unsigned int windVaneRaw = analogRead(WindVanePin);
   d83d4:	5ac0      	ldrh	r0, [r0, r3]
   d83d6:	f003 f8e5 	bl	db5a4 <analogRead>
   d83da:	4601      	mov	r1, r0
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
   d83dc:	4620      	mov	r0, r4
   d83de:	f7ff ff5f 	bl	d82a0 <_ZN14WeatherSensors20lookupRadiansFromRawEj>
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
   d83e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d83e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
   d83ea:	eeb0 8a40 	vmov.f32	s16, s0
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
   d83ee:	dd26      	ble.n	d843e <_ZN14WeatherSensors15captureWindVaneEv+0x76>
   d83f0:	ee10 0a10 	vmov	r0, s0
   d83f4:	f004 fc6e 	bl	dccd4 <__aeabi_f2d>
   d83f8:	a313      	add	r3, pc, #76	; (adr r3, d8448 <_ZN14WeatherSensors15captureWindVaneEv+0x80>)
   d83fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83fe:	f004 ff33 	bl	dd268 <__aeabi_dcmplt>
   d8402:	b1e0      	cbz	r0, d843e <_ZN14WeatherSensors15captureWindVaneEv+0x76>
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
   d8404:	eeb0 0a48 	vmov.f32	s0, s16
   d8408:	f003 fc64 	bl	dbcd4 <cosf>
        windVaneCosTotal += cos(windVaneRadians);
   d840c:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d8410:	edd3 7a02 	vldr	s15, [r3, #8]
   d8414:	ee37 0a80 	vadd.f32	s0, s15, s0
   d8418:	ed83 0a02 	vstr	s0, [r3, #8]
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
   d841c:	eeb0 0a48 	vmov.f32	s0, s16
   d8420:	f003 fca8 	bl	dbd74 <sinf>
        windVaneSinTotal += sin(windVaneRadians);
   d8424:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d8428:	edd3 7a03 	vldr	s15, [r3, #12]
   d842c:	ee37 0a80 	vadd.f32	s0, s15, s0
        windVaneReadingCount++;
   d8430:	f241 6290 	movw	r2, #5776	; 0x1690
        windVaneSinTotal += sin(windVaneRadians);
   d8434:	ed83 0a03 	vstr	s0, [r3, #12]
        windVaneReadingCount++;
   d8438:	58a3      	ldr	r3, [r4, r2]
   d843a:	3301      	adds	r3, #1
   d843c:	50a3      	str	r3, [r4, r2]
}
   d843e:	ecbd 8b02 	vpop	{d8}
   d8442:	bd10      	pop	{r4, pc}
   d8444:	f3af 8000 	nop.w
   d8448:	f80dc337 	.word	0xf80dc337
   d844c:	401890fc 	.word	0x401890fc

000d8450 <_ZN14WeatherSensors27captureTempHumidityPressureEv>:

/// end Wind vane

void WeatherSensors::captureTempHumidityPressure() {
   d8450:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d8452:	466a      	mov	r2, sp
   d8454:	a901      	add	r1, sp, #4
void WeatherSensors::captureTempHumidityPressure() {
   d8456:	4604      	mov	r4, r0
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d8458:	f7fd fef1 	bl	d623e <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_>

  uint16_t tempKx10 = uint16_t(tempC*10)+2732;
   d845c:	eddd 7a01 	vldr	s15, [sp, #4]
   d8460:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d8464:	ee67 7a87 	vmul.f32	s15, s15, s14
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d8468:	4605      	mov	r5, r0
  uint16_t tempKx10 = uint16_t(tempC*10)+2732;
   d846a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  airTempKMedian.add(tempKx10);
   d846e:	f104 000a 	add.w	r0, r4, #10
  uint16_t tempKx10 = uint16_t(tempC*10)+2732;
   d8472:	ee17 1a90 	vmov	r1, s15
   d8476:	f601 21ac 	addw	r1, r1, #2732	; 0xaac
  airTempKMedian.add(tempKx10);
   d847a:	b289      	uxth	r1, r1
   d847c:	f000 fe5e 	bl	d913c <_ZN13RunningMedian3addEt>

  relativeHumidtyMedian.add(humidityRH);
   d8480:	eddd 7a00 	vldr	s15, [sp]
   d8484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d8488:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d848c:	ee17 3a90 	vmov	r3, s15
   d8490:	b299      	uxth	r1, r3
   d8492:	f000 fe53 	bl	d913c <_ZN13RunningMedian3addEt>

if (validTH){
   d8496:	2d00      	cmp	r5, #0
   d8498:	d048      	beq.n	d852c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xdc>
    //If the result is reasonable, add it to the running mean
    if(humidityRH > 0 && humidityRH < 105) // It's theoretically possible to get supersaturation humidity levels over 100%
   d849a:	ed9d 7a00 	vldr	s14, [sp]
   d849e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d84a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d84a6:	dd13      	ble.n	d84d0 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x80>
   d84a8:	eddf 7a31 	vldr	s15, [pc, #196]	; d8570 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x120>
   d84ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d84b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d84b4:	d50c      	bpl.n	d84d0 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x80>
    {
        // Add the observation to the running sum, and increment the number of observations
        humidityRHTotal += humidityRH;
   d84b6:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d84ba:	edd3 7a05 	vldr	s15, [r3, #20]
   d84be:	ee77 7a87 	vadd.f32	s15, s15, s14
        humidityRHReadingCount++;
   d84c2:	f241 6298 	movw	r2, #5784	; 0x1698
        humidityRHTotal += humidityRH;
   d84c6:	edc3 7a05 	vstr	s15, [r3, #20]
        humidityRHReadingCount++;
   d84ca:	58a3      	ldr	r3, [r4, r2]
   d84cc:	3301      	adds	r3, #1
   d84ce:	50a3      	str	r3, [r4, r2]
    }


    tempF = (tempC * 9.0) / 5.0 + 32.0;
   d84d0:	9801      	ldr	r0, [sp, #4]
   d84d2:	f004 fbff 	bl	dccd4 <__aeabi_f2d>
   d84d6:	4b27      	ldr	r3, [pc, #156]	; (d8574 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x124>)
   d84d8:	2200      	movs	r2, #0
   d84da:	f004 fc53 	bl	dcd84 <__aeabi_dmul>
   d84de:	4b26      	ldr	r3, [pc, #152]	; (d8578 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x128>)
   d84e0:	2200      	movs	r2, #0
   d84e2:	f004 fd79 	bl	dcfd8 <__aeabi_ddiv>
   d84e6:	4b25      	ldr	r3, [pc, #148]	; (d857c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x12c>)
   d84e8:	2200      	movs	r2, #0
   d84ea:	f004 fa95 	bl	dca18 <__adddf3>
   d84ee:	f004 ff41 	bl	dd374 <__aeabi_d2f>
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
   d84f2:	ed9f 7a23 	vldr	s14, [pc, #140]	; d8580 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x130>
    tempF = (tempC * 9.0) / 5.0 + 32.0;
   d84f6:	ee07 0a90 	vmov	s15, r0
    if(tempF > -50 && tempF < 150)
   d84fa:	eef4 7ac7 	vcmpe.f32	s15, s14
   d84fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8502:	dd13      	ble.n	d852c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xdc>
   d8504:	ed9f 7a1f 	vldr	s14, [pc, #124]	; d8584 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x134>
   d8508:	eef4 7ac7 	vcmpe.f32	s15, s14
   d850c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8510:	d50c      	bpl.n	d852c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xdc>
    {
        // Add the observation to the running sum, and increment the number of observations
        tempFTotal += tempF;
   d8512:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d8516:	ed93 7a07 	vldr	s14, [r3, #28]
   d851a:	ee77 7a27 	vadd.f32	s15, s14, s15
        tempFReadingCount++;
   d851e:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
        tempFTotal += tempF;
   d8522:	edc3 7a07 	vstr	s15, [r3, #28]
        tempFReadingCount++;
   d8526:	6813      	ldr	r3, [r2, #0]
   d8528:	3301      	adds	r3, #1
   d852a:	6013      	str	r3, [r2, #0]
    }
  }
  //Measure Pressure from the MPL3115A2
  float pressurePascals = barom.readPressure();
   d852c:	f104 0008 	add.w	r0, r4, #8
   d8530:	f7ff fd16 	bl	d7f60 <_ZN9MPL3115A212readPressureEv>

  //If the result is reasonable, add it to the running mean
  // What's reasonable? http://findanswers.noaa.gov/noaa.answers/consumer/kbdetail.asp?kbid=544
  if(pressurePascals > 80000 && pressurePascals < 110000)
   d8534:	eddf 7a14 	vldr	s15, [pc, #80]	; d8588 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x138>
   d8538:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d853c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8540:	dd13      	ble.n	d856a <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x11a>
   d8542:	eddf 7a12 	vldr	s15, [pc, #72]	; d858c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x13c>
   d8546:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d854a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d854e:	d50c      	bpl.n	d856a <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x11a>
  {
      // Add the observation to the running sum, and increment the number of observations
      pressurePascalsTotal += pressurePascals;
   d8550:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
   d8554:	edd3 7a01 	vldr	s15, [r3, #4]
   d8558:	ee37 0a80 	vadd.f32	s0, s15, s0
      pressurePascalsReadingCount++;
   d855c:	f241 62a8 	movw	r2, #5800	; 0x16a8
      pressurePascalsTotal += pressurePascals;
   d8560:	ed83 0a01 	vstr	s0, [r3, #4]
      pressurePascalsReadingCount++;
   d8564:	58a3      	ldr	r3, [r4, r2]
   d8566:	3301      	adds	r3, #1
   d8568:	50a3      	str	r3, [r4, r2]
  }
  return;
}
   d856a:	b003      	add	sp, #12
   d856c:	bd30      	pop	{r4, r5, pc}
   d856e:	bf00      	nop
   d8570:	42d20000 	.word	0x42d20000
   d8574:	40220000 	.word	0x40220000
   d8578:	40140000 	.word	0x40140000
   d857c:	40400000 	.word	0x40400000
   d8580:	c2480000 	.word	0xc2480000
   d8584:	43160000 	.word	0x43160000
   d8588:	479c4000 	.word	0x479c4000
   d858c:	47d6d800 	.word	0x47d6d800

000d8590 <_ZN14WeatherSensors16getAndResetTempFEv>:
  }
}

float WeatherSensors::getAndResetTempF()
{
    if(tempFReadingCount == 0) {
   d8590:	f500 52b5 	add.w	r2, r0, #5792	; 0x16a0
   d8594:	ed9f 7a0a 	vldr	s14, [pc, #40]	; d85c0 <_ZN14WeatherSensors16getAndResetTempFEv+0x30>
   d8598:	6813      	ldr	r3, [r2, #0]
   d859a:	b173      	cbz	r3, d85ba <_ZN14WeatherSensors16getAndResetTempFEv+0x2a>
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
   d859c:	ee07 3a90 	vmov	s15, r3
   d85a0:	f500 50b4 	add.w	r0, r0, #5760	; 0x1680
   d85a4:	edd0 6a07 	vldr	s13, [r0, #28]
    tempFTotal = 0.0;
   d85a8:	ed80 7a07 	vstr	s14, [r0, #28]
    float result = tempFTotal/float(tempFReadingCount);
   d85ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    tempFReadingCount = 0;
   d85b0:	2300      	movs	r3, #0
    float result = tempFTotal/float(tempFReadingCount);
   d85b2:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    tempFReadingCount = 0;
   d85b6:	6013      	str	r3, [r2, #0]
    return result;
   d85b8:	4770      	bx	lr
        return 0;
   d85ba:	eeb0 0a47 	vmov.f32	s0, s14
}
   d85be:	4770      	bx	lr
   d85c0:	00000000 	.word	0x00000000

000d85c4 <_ZN14WeatherSensors26getAndResetPressurePascalsEv>:
}


float WeatherSensors::getAndResetPressurePascals()
{
    if(pressurePascalsReadingCount == 0) {
   d85c4:	f241 61a8 	movw	r1, #5800	; 0x16a8
   d85c8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; d85f4 <_ZN14WeatherSensors26getAndResetPressurePascalsEv+0x30>
   d85cc:	5842      	ldr	r2, [r0, r1]
   d85ce:	b172      	cbz	r2, d85ee <_ZN14WeatherSensors26getAndResetPressurePascalsEv+0x2a>
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
   d85d0:	ee07 2a90 	vmov	s15, r2
   d85d4:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
   d85d8:	edd3 6a01 	vldr	s13, [r3, #4]
    pressurePascalsTotal = 0.0;
   d85dc:	ed83 7a01 	vstr	s14, [r3, #4]
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
   d85e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pressurePascalsReadingCount = 0;
   d85e4:	2300      	movs	r3, #0
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
   d85e6:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    pressurePascalsReadingCount = 0;
   d85ea:	5043      	str	r3, [r0, r1]
    return result;
   d85ec:	4770      	bx	lr
        return 0;
   d85ee:	eeb0 0a47 	vmov.f32	s0, s14
}
   d85f2:	4770      	bx	lr
   d85f4:	00000000 	.word	0x00000000

000d85f8 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>:

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   d85f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d85fa:	4604      	mov	r4, r0
   d85fc:	4610      	mov	r0, r2
    int str_len = ss.length() + 1;
   d85fe:	6892      	ldr	r2, [r2, #8]
String WeatherSensors::minimiseNumericString(String ss, int n) {
   d8600:	461e      	mov	r6, r3
    char s[str_len];
   d8602:	f102 0308 	add.w	r3, r2, #8
   d8606:	f023 0307 	bic.w	r3, r3, #7
String WeatherSensors::minimiseNumericString(String ss, int n) {
   d860a:	af00      	add	r7, sp, #0
    char s[str_len];
   d860c:	ebad 0d03 	sub.w	sp, sp, r3
		{getBytes((unsigned char *)buf, bufsize, index);}
   d8610:	3201      	adds	r2, #1
   d8612:	2300      	movs	r3, #0
   d8614:	4669      	mov	r1, sp
   d8616:	f001 fcab 	bl	d9f70 <_ZNK6String8getBytesEPhjj>

    //Serial.println(s);
    char *p;
    int count;

    p = strchr (s,'.');         // Find decimal point, if any.
   d861a:	212e      	movs	r1, #46	; 0x2e
   d861c:	4668      	mov	r0, sp
   d861e:	f005 fc8b 	bl	ddf38 <strchr>
    char s[str_len];
   d8622:	466d      	mov	r5, sp
    if (p != NULL) {
   d8624:	4602      	mov	r2, r0
   d8626:	b1b0      	cbz	r0, d8656 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x5e>
        count = n;              // Adjust for more or less decimals.
        while (count >= 0) {    // Maximum decimals allowed.
   d8628:	4406      	add	r6, r0
   d862a:	1ab1      	subs	r1, r6, r2
   d862c:	2900      	cmp	r1, #0
   d862e:	4613      	mov	r3, r2
   d8630:	db03      	blt.n	d863a <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x42>
             count--;
             if (*p == '\0')    // If there's less than desired.
   d8632:	7819      	ldrb	r1, [r3, #0]
   d8634:	3201      	adds	r2, #1
   d8636:	2900      	cmp	r1, #0
   d8638:	d1f7      	bne.n	d862a <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x32>
                 break;
             p++;               // Next character.
        }

        *p-- = '\0';            // Truncate string.
   d863a:	2200      	movs	r2, #0
   d863c:	f803 2901 	strb.w	r2, [r3], #-1
   d8640:	4618      	mov	r0, r3
        while (*p == '0')       // Remove trailing zeros.
   d8642:	f813 1901 	ldrb.w	r1, [r3], #-1
   d8646:	2930      	cmp	r1, #48	; 0x30
   d8648:	d101      	bne.n	d864e <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x56>
            *p-- = '\0';
   d864a:	705a      	strb	r2, [r3, #1]
        while (*p == '0')       // Remove trailing zeros.
   d864c:	e7f8      	b.n	d8640 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x48>

        if (*p == '.') {        // If all decimals were zeros, remove ".".
   d864e:	292e      	cmp	r1, #46	; 0x2e
            *p = '\0';
   d8650:	bf04      	itt	eq
   d8652:	2300      	moveq	r3, #0
   d8654:	7003      	strbeq	r3, [r0, #0]
        }
    }
    return String(s);
   d8656:	4629      	mov	r1, r5
   d8658:	4620      	mov	r0, r4
   d865a:	f001 fb88 	bl	d9d6e <_ZN6StringC1EPKc>
}
   d865e:	4620      	mov	r0, r4
   d8660:	46bd      	mov	sp, r7
   d8662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8664:	0000      	movs	r0, r0
	...

000d8668 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv>:
{
   d8668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  String(sensorReadings.unixTime)+
   d866c:	4ca0      	ldr	r4, [pc, #640]	; (d88f0 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x288>)
  ","+
   d866e:	4ea1      	ldr	r6, [pc, #644]	; (d88f4 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x28c>)
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
   d8670:	f8df a29c 	ldr.w	sl, [pc, #668]	; d8910 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a8>
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   d8674:	f8df 929c 	ldr.w	r9, [pc, #668]	; d8914 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2ac>
{
   d8678:	b0c0      	sub	sp, #256	; 0x100
   d867a:	460d      	mov	r5, r1
   d867c:	4607      	mov	r7, r0
  String(sensorReadings.unixTime)+
   d867e:	220a      	movs	r2, #10
   d8680:	6821      	ldr	r1, [r4, #0]
   d8682:	4668      	mov	r0, sp
   d8684:	f001 fc0e 	bl	d9ea4 <_ZN6StringC1Emh>
	StringSumHelper(const String &s) : String(s) {}
   d8688:	4669      	mov	r1, sp
   d868a:	a804      	add	r0, sp, #16
   d868c:	f001 fbaf 	bl	d9dee <_ZN6StringC1ERKS_>
  ","+
   d8690:	4631      	mov	r1, r6
   d8692:	a804      	add	r0, sp, #16
   d8694:	f001 fc57 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
  String(sensorReadings.windDegrees)+
   d8698:	220a      	movs	r2, #10
   d869a:	88a1      	ldrh	r1, [r4, #4]
  ","+
   d869c:	4680      	mov	r8, r0
  String(sensorReadings.windDegrees)+
   d869e:	a808      	add	r0, sp, #32
   d86a0:	f001 fbed 	bl	d9e7e <_ZN6StringC1Eih>
   d86a4:	a908      	add	r1, sp, #32
   d86a6:	4640      	mov	r0, r8
   d86a8:	f001 fc41 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
  ","+
   d86ac:	4631      	mov	r1, r6
   d86ae:	f001 fc4a 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d86b2:	4680      	mov	r8, r0
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
   d86b4:	88e0      	ldrh	r0, [r4, #6]
   d86b6:	ee07 0a90 	vmov	s15, r0
   d86ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d86be:	ee17 0a90 	vmov	r0, s15
   d86c2:	f004 fb07 	bl	dccd4 <__aeabi_f2d>
   d86c6:	a384      	add	r3, pc, #528	; (adr r3, d88d8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x270>)
   d86c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d86cc:	f004 fc84 	bl	dcfd8 <__aeabi_ddiv>
   d86d0:	4602      	mov	r2, r0
   d86d2:	460b      	mov	r3, r1
   d86d4:	a80c      	add	r0, sp, #48	; 0x30
   d86d6:	4651      	mov	r1, sl
   d86d8:	f001 fc8e 	bl	d9ff8 <_ZN6String6formatEPKcz>
   d86dc:	2301      	movs	r3, #1
   d86de:	aa0c      	add	r2, sp, #48	; 0x30
   d86e0:	4629      	mov	r1, r5
   d86e2:	a810      	add	r0, sp, #64	; 0x40
   d86e4:	f7ff ff88 	bl	d85f8 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d86e8:	a910      	add	r1, sp, #64	; 0x40
   d86ea:	4640      	mov	r0, r8
   d86ec:	f001 fc1f 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
  ","+
   d86f0:	4631      	mov	r1, r6
   d86f2:	f001 fc28 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
  String(sensorReadings.humid)+
   d86f6:	220a      	movs	r2, #10
   d86f8:	7a21      	ldrb	r1, [r4, #8]
  ","+
   d86fa:	4680      	mov	r8, r0
  String(sensorReadings.humid)+
   d86fc:	a814      	add	r0, sp, #80	; 0x50
   d86fe:	f001 fbac 	bl	d9e5a <_ZN6StringC1Ehh>
   d8702:	a914      	add	r1, sp, #80	; 0x50
   d8704:	4640      	mov	r0, r8
   d8706:	f001 fc12 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
  ","+
   d870a:	4631      	mov	r1, r6
   d870c:	f001 fc1b 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d8710:	4680      	mov	r8, r0
  minimiseNumericString(String::format("%.1f",(((float)sensorReadings.airTempKx10-2731.5)*9.0/50.0+32.0)),1)+
   d8712:	8960      	ldrh	r0, [r4, #10]
   d8714:	ee07 0a90 	vmov	s15, r0
   d8718:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d871c:	ee17 0a90 	vmov	r0, s15
   d8720:	f004 fad8 	bl	dccd4 <__aeabi_f2d>
   d8724:	a36e      	add	r3, pc, #440	; (adr r3, d88e0 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x278>)
   d8726:	e9d3 2300 	ldrd	r2, r3, [r3]
   d872a:	f004 f973 	bl	dca14 <__aeabi_dsub>
   d872e:	4b72      	ldr	r3, [pc, #456]	; (d88f8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x290>)
   d8730:	2200      	movs	r2, #0
   d8732:	f004 fb27 	bl	dcd84 <__aeabi_dmul>
   d8736:	4b71      	ldr	r3, [pc, #452]	; (d88fc <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x294>)
   d8738:	2200      	movs	r2, #0
   d873a:	f004 fc4d 	bl	dcfd8 <__aeabi_ddiv>
   d873e:	4b70      	ldr	r3, [pc, #448]	; (d8900 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x298>)
   d8740:	2200      	movs	r2, #0
   d8742:	f004 f969 	bl	dca18 <__adddf3>
   d8746:	4602      	mov	r2, r0
   d8748:	460b      	mov	r3, r1
   d874a:	a818      	add	r0, sp, #96	; 0x60
   d874c:	4651      	mov	r1, sl
   d874e:	f001 fc53 	bl	d9ff8 <_ZN6String6formatEPKcz>
   d8752:	aa18      	add	r2, sp, #96	; 0x60
   d8754:	2301      	movs	r3, #1
   d8756:	4629      	mov	r1, r5
   d8758:	a81c      	add	r0, sp, #112	; 0x70
   d875a:	f7ff ff4d 	bl	d85f8 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d875e:	a91c      	add	r1, sp, #112	; 0x70
   d8760:	4640      	mov	r0, r8
   d8762:	f001 fbe4 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
  ","+
   d8766:	4631      	mov	r1, r6
   d8768:	f001 fbed 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   d876c:	89a3      	ldrh	r3, [r4, #12]
   d876e:	ed9f 7a65 	vldr	s14, [pc, #404]	; d8904 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x29c>
   d8772:	ee07 3a90 	vmov	s15, r3
   d8776:	eef8 7a67 	vcvt.f32.u32	s15, s15
  ","+
   d877a:	4680      	mov	r8, r0
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   d877c:	eec7 7a87 	vdiv.f32	s15, s15, s14
   d8780:	ee17 0a90 	vmov	r0, s15
   d8784:	f004 faa6 	bl	dccd4 <__aeabi_f2d>
   d8788:	4602      	mov	r2, r0
   d878a:	460b      	mov	r3, r1
   d878c:	a820      	add	r0, sp, #128	; 0x80
   d878e:	4649      	mov	r1, r9
   d8790:	f001 fc32 	bl	d9ff8 <_ZN6String6formatEPKcz>
   d8794:	aa20      	add	r2, sp, #128	; 0x80
   d8796:	2303      	movs	r3, #3
   d8798:	4629      	mov	r1, r5
   d879a:	a824      	add	r0, sp, #144	; 0x90
   d879c:	f7ff ff2c 	bl	d85f8 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d87a0:	a924      	add	r1, sp, #144	; 0x90
   d87a2:	4640      	mov	r0, r8
   d87a4:	f001 fbc3 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
  ","+
   d87a8:	4631      	mov	r1, r6
   d87aa:	f001 fbcc 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d87ae:	4680      	mov	r8, r0
  minimiseNumericString(String::format("%.2f",(float)sensorReadings.barometerhPa/338.6389),2)+
   d87b0:	6920      	ldr	r0, [r4, #16]
   d87b2:	f004 fa8f 	bl	dccd4 <__aeabi_f2d>
   d87b6:	a34c      	add	r3, pc, #304	; (adr r3, d88e8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x280>)
   d87b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87bc:	f004 fc0c 	bl	dcfd8 <__aeabi_ddiv>
   d87c0:	4602      	mov	r2, r0
   d87c2:	460b      	mov	r3, r1
   d87c4:	a828      	add	r0, sp, #160	; 0xa0
   d87c6:	4950      	ldr	r1, [pc, #320]	; (d8908 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a0>)
   d87c8:	f001 fc16 	bl	d9ff8 <_ZN6String6formatEPKcz>
   d87cc:	aa28      	add	r2, sp, #160	; 0xa0
   d87ce:	2302      	movs	r3, #2
   d87d0:	4629      	mov	r1, r5
   d87d2:	a82c      	add	r0, sp, #176	; 0xb0
   d87d4:	f7ff ff10 	bl	d85f8 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d87d8:	a92c      	add	r1, sp, #176	; 0xb0
   d87da:	4640      	mov	r0, r8
   d87dc:	f001 fba7 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
  ","+
   d87e0:	4631      	mov	r1, r6
   d87e2:	f001 fbb0 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d87e6:	4680      	mov	r8, r0
  minimiseNumericString(String::format("%.1f",(float)(sensorReadings.gust_metersph/1609.34)),1)+
   d87e8:	8aa0      	ldrh	r0, [r4, #20]
   d87ea:	f004 fa61 	bl	dccb0 <__aeabi_i2d>
   d87ee:	a33a      	add	r3, pc, #232	; (adr r3, d88d8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x270>)
   d87f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87f4:	f004 fbf0 	bl	dcfd8 <__aeabi_ddiv>
   d87f8:	f004 fdbc 	bl	dd374 <__aeabi_d2f>
   d87fc:	f004 fa6a 	bl	dccd4 <__aeabi_f2d>
   d8800:	4602      	mov	r2, r0
   d8802:	460b      	mov	r3, r1
   d8804:	a830      	add	r0, sp, #192	; 0xc0
   d8806:	4651      	mov	r1, sl
   d8808:	f001 fbf6 	bl	d9ff8 <_ZN6String6formatEPKcz>
   d880c:	aa30      	add	r2, sp, #192	; 0xc0
   d880e:	2301      	movs	r3, #1
   d8810:	4629      	mov	r1, r5
   d8812:	a834      	add	r0, sp, #208	; 0xd0
   d8814:	f7ff fef0 	bl	d85f8 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d8818:	a934      	add	r1, sp, #208	; 0xd0
   d881a:	4640      	mov	r0, r8
   d881c:	f001 fb87 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
  ","+
   d8820:	4631      	mov	r1, r6
   d8822:	f001 fb90 	bl	d9f46 <_ZplRK15StringSumHelperPKc>
   d8826:	4606      	mov	r6, r0
  minimiseNumericString(String::format("%.3f",(float)sensorReadings.millivolts/1000.0),3); // replace with voltage/lux
   d8828:	8ae0      	ldrh	r0, [r4, #22]
   d882a:	ee07 0a90 	vmov	s15, r0
   d882e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d8832:	ee17 0a90 	vmov	r0, s15
   d8836:	f004 fa4d 	bl	dccd4 <__aeabi_f2d>
   d883a:	4b34      	ldr	r3, [pc, #208]	; (d890c <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a4>)
   d883c:	2200      	movs	r2, #0
   d883e:	f004 fbcb 	bl	dcfd8 <__aeabi_ddiv>
   d8842:	4602      	mov	r2, r0
   d8844:	460b      	mov	r3, r1
   d8846:	a838      	add	r0, sp, #224	; 0xe0
   d8848:	4649      	mov	r1, r9
   d884a:	f001 fbd5 	bl	d9ff8 <_ZN6String6formatEPKcz>
   d884e:	2303      	movs	r3, #3
   d8850:	aa38      	add	r2, sp, #224	; 0xe0
   d8852:	4629      	mov	r1, r5
   d8854:	a83c      	add	r0, sp, #240	; 0xf0
   d8856:	f7ff fecf 	bl	d85f8 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d885a:	a93c      	add	r1, sp, #240	; 0xf0
   d885c:	4630      	mov	r0, r6
   d885e:	f001 fb66 	bl	d9f2e <_ZplRK15StringSumHelperRK6String>
   d8862:	4601      	mov	r1, r0
   d8864:	4638      	mov	r0, r7
   d8866:	f001 fac2 	bl	d9dee <_ZN6StringC1ERKS_>
   d886a:	a83c      	add	r0, sp, #240	; 0xf0
   d886c:	f001 fa34 	bl	d9cd8 <_ZN6StringD1Ev>
   d8870:	a838      	add	r0, sp, #224	; 0xe0
   d8872:	f001 fa31 	bl	d9cd8 <_ZN6StringD1Ev>
  minimiseNumericString(String::format("%.1f",(float)(sensorReadings.gust_metersph/1609.34)),1)+
   d8876:	a834      	add	r0, sp, #208	; 0xd0
   d8878:	f001 fa2e 	bl	d9cd8 <_ZN6StringD1Ev>
   d887c:	a830      	add	r0, sp, #192	; 0xc0
   d887e:	f001 fa2b 	bl	d9cd8 <_ZN6StringD1Ev>
  minimiseNumericString(String::format("%.2f",(float)sensorReadings.barometerhPa/338.6389),2)+
   d8882:	a82c      	add	r0, sp, #176	; 0xb0
   d8884:	f001 fa28 	bl	d9cd8 <_ZN6StringD1Ev>
   d8888:	a828      	add	r0, sp, #160	; 0xa0
   d888a:	f001 fa25 	bl	d9cd8 <_ZN6StringD1Ev>
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   d888e:	a824      	add	r0, sp, #144	; 0x90
   d8890:	f001 fa22 	bl	d9cd8 <_ZN6StringD1Ev>
   d8894:	a820      	add	r0, sp, #128	; 0x80
   d8896:	f001 fa1f 	bl	d9cd8 <_ZN6StringD1Ev>
  minimiseNumericString(String::format("%.1f",(((float)sensorReadings.airTempKx10-2731.5)*9.0/50.0+32.0)),1)+
   d889a:	a81c      	add	r0, sp, #112	; 0x70
   d889c:	f001 fa1c 	bl	d9cd8 <_ZN6StringD1Ev>
   d88a0:	a818      	add	r0, sp, #96	; 0x60
   d88a2:	f001 fa19 	bl	d9cd8 <_ZN6StringD1Ev>
  String(sensorReadings.humid)+
   d88a6:	a814      	add	r0, sp, #80	; 0x50
   d88a8:	f001 fa16 	bl	d9cd8 <_ZN6StringD1Ev>
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
   d88ac:	a810      	add	r0, sp, #64	; 0x40
   d88ae:	f001 fa13 	bl	d9cd8 <_ZN6StringD1Ev>
   d88b2:	a80c      	add	r0, sp, #48	; 0x30
   d88b4:	f001 fa10 	bl	d9cd8 <_ZN6StringD1Ev>
  String(sensorReadings.windDegrees)+
   d88b8:	a808      	add	r0, sp, #32
   d88ba:	f001 fa0d 	bl	d9cd8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d88be:	a804      	add	r0, sp, #16
   d88c0:	f001 fa0a 	bl	d9cd8 <_ZN6StringD1Ev>
  String(sensorReadings.unixTime)+
   d88c4:	4668      	mov	r0, sp
   d88c6:	f001 fa07 	bl	d9cd8 <_ZN6StringD1Ev>
}
   d88ca:	4638      	mov	r0, r7
   d88cc:	b040      	add	sp, #256	; 0x100
   d88ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d88d2:	bf00      	nop
   d88d4:	f3af 8000 	nop.w
   d88d8:	28f5c28f 	.word	0x28f5c28f
   d88dc:	4099255c 	.word	0x4099255c
   d88e0:	00000000 	.word	0x00000000
   d88e4:	40a55700 	.word	0x40a55700
   d88e8:	ef34d6a1 	.word	0xef34d6a1
   d88ec:	40752a38 	.word	0x40752a38
   d88f0:	2003c940 	.word	0x2003c940
   d88f4:	000df84c 	.word	0x000df84c
   d88f8:	40220000 	.word	0x40220000
   d88fc:	40490000 	.word	0x40490000
   d8900:	40400000 	.word	0x40400000
   d8904:	46c67000 	.word	0x46c67000
   d8908:	000df858 	.word	0x000df858
   d890c:	408f4000 	.word	0x408f4000
   d8910:	000df84e 	.word	0x000df84e
   d8914:	000df853 	.word	0x000df853

000d8918 <_ZN14WeatherSensors21getAndResetAllSensorsEv>:
{
   d8918:	b530      	push	{r4, r5, lr}
   d891a:	4604      	mov	r4, r0
  uint32_t timeRTC = node.unixTime();
   d891c:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
{
   d8920:	b089      	sub	sp, #36	; 0x24
  uint32_t timeRTC = node.unixTime();
   d8922:	3004      	adds	r0, #4
   d8924:	f7fc fc84 	bl	d5230 <_ZN7IoTNode8unixTimeEv>
  sensorReadings.unixTime = timeRTC;
   d8928:	4d7d      	ldr	r5, [pc, #500]	; (d8b20 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x208>)
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
   d892a:	a901      	add	r1, sp, #4
  sensorReadings.unixTime = timeRTC;
   d892c:	6028      	str	r0, [r5, #0]
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
   d892e:	4620      	mov	r0, r4
   d8930:	f7ff fb76 	bl	d8020 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf>
   d8934:	ee10 0a10 	vmov	r0, s0
  sensorReadings.wind_metersph = (uint16_t) ceil(windMPH * 1609.34)/0.62137;
   d8938:	f004 f9cc 	bl	dccd4 <__aeabi_f2d>
   d893c:	a370      	add	r3, pc, #448	; (adr r3, d8b00 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x1e8>)
   d893e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8942:	f004 fa1f 	bl	dcd84 <__aeabi_dmul>
   d8946:	ec41 0b10 	vmov	d0, r0, r1
   d894a:	f003 f825 	bl	db998 <ceil>
   d894e:	ec51 0b10 	vmov	r0, r1, d0
   d8952:	f004 fcef 	bl	dd334 <__aeabi_d2uiz>
   d8956:	b280      	uxth	r0, r0
   d8958:	f004 f9aa 	bl	dccb0 <__aeabi_i2d>
   d895c:	a36a      	add	r3, pc, #424	; (adr r3, d8b08 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x1f0>)
   d895e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8962:	f004 fb39 	bl	dcfd8 <__aeabi_ddiv>
   d8966:	f004 fce5 	bl	dd334 <__aeabi_d2uiz>
  Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
   d896a:	220a      	movs	r2, #10
  sensorReadings.wind_metersph = (uint16_t) ceil(windMPH * 1609.34)/0.62137;
   d896c:	b281      	uxth	r1, r0
  Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
   d896e:	a804      	add	r0, sp, #16
  sensorReadings.wind_metersph = (uint16_t) ceil(windMPH * 1609.34)/0.62137;
   d8970:	80e9      	strh	r1, [r5, #6]
  Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
   d8972:	f001 fa84 	bl	d9e7e <_ZN6StringC1Eih>
   d8976:	9a04      	ldr	r2, [sp, #16]
   d8978:	496a      	ldr	r1, [pc, #424]	; (d8b24 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x20c>)
   d897a:	a802      	add	r0, sp, #8
   d897c:	f7ff fb42 	bl	d8004 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d8980:	a803      	add	r0, sp, #12
   d8982:	f7fb ff25 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8986:	a804      	add	r0, sp, #16
   d8988:	f001 f9a6 	bl	d9cd8 <_ZN6StringD1Ev>
  float rainInches = getAndResetRainInches();
   d898c:	4620      	mov	r0, r4
   d898e:	f7ff fc1b 	bl	d81c8 <_ZN14WeatherSensors21getAndResetRainInchesEv>
  { return __builtin_ceilf(__x); }
   d8992:	eddf 7a65 	vldr	s15, [pc, #404]	; d8b28 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x210>
   d8996:	ee20 0a27 	vmul.f32	s0, s0, s15
   d899a:	f003 f955 	bl	dbc48 <ceilf>
  sensorReadings.rainmmx1000 = (uint16_t) ceil(rainInches * 25400)/0.39370;
   d899e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
   d89a2:	ee10 3a10 	vmov	r3, s0
   d89a6:	b298      	uxth	r0, r3
   d89a8:	f004 f982 	bl	dccb0 <__aeabi_i2d>
   d89ac:	a358      	add	r3, pc, #352	; (adr r3, d8b10 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x1f8>)
   d89ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89b2:	f004 fb11 	bl	dcfd8 <__aeabi_ddiv>
   d89b6:	f004 fcbd 	bl	dd334 <__aeabi_d2uiz>
  Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
   d89ba:	220a      	movs	r2, #10
  sensorReadings.rainmmx1000 = (uint16_t) ceil(rainInches * 25400)/0.39370;
   d89bc:	b281      	uxth	r1, r0
  Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
   d89be:	a804      	add	r0, sp, #16
  sensorReadings.rainmmx1000 = (uint16_t) ceil(rainInches * 25400)/0.39370;
   d89c0:	81a9      	strh	r1, [r5, #12]
  Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
   d89c2:	f001 fa5c 	bl	d9e7e <_ZN6StringC1Eih>
   d89c6:	9a04      	ldr	r2, [sp, #16]
   d89c8:	4958      	ldr	r1, [pc, #352]	; (d8b2c <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x214>)
   d89ca:	a802      	add	r0, sp, #8
   d89cc:	f7ff fb1a 	bl	d8004 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d89d0:	a803      	add	r0, sp, #12
   d89d2:	f7fb fefd 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d89d6:	a804      	add	r0, sp, #16
   d89d8:	f001 f97e 	bl	d9cd8 <_ZN6StringD1Ev>
  float windDegrees = getAndResetWindVaneDegrees();
   d89dc:	4620      	mov	r0, r4
   d89de:	f7ff fc03 	bl	d81e8 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv>
   d89e2:	f003 f931 	bl	dbc48 <ceilf>
  sensorReadings.windDegrees = (uint16_t) ceil(windDegrees);
   d89e6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
  Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
   d89ea:	220a      	movs	r2, #10
  sensorReadings.windDegrees = (uint16_t) ceil(windDegrees);
   d89ec:	ee10 3a10 	vmov	r3, s0
  Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
   d89f0:	a804      	add	r0, sp, #16
  sensorReadings.windDegrees = (uint16_t) ceil(windDegrees);
   d89f2:	b299      	uxth	r1, r3
   d89f4:	80a9      	strh	r1, [r5, #4]
  Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
   d89f6:	f001 fa42 	bl	d9e7e <_ZN6StringC1Eih>
   d89fa:	9a04      	ldr	r2, [sp, #16]
   d89fc:	494c      	ldr	r1, [pc, #304]	; (d8b30 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x218>)
   d89fe:	a802      	add	r0, sp, #8
   d8a00:	f7ff fb00 	bl	d8004 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d8a04:	a803      	add	r0, sp, #12
   d8a06:	f7fb fee3 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a0a:	a804      	add	r0, sp, #16
   d8a0c:	f001 f964 	bl	d9cd8 <_ZN6StringD1Ev>
  float airTempF = getAndResetTempF();
   d8a10:	4620      	mov	r0, r4
   d8a12:	f7ff fdbd 	bl	d8590 <_ZN14WeatherSensors16getAndResetTempFEv>
   d8a16:	ee10 0a10 	vmov	r0, s0
  sensorReadings.airTempKx10 = (uint16_t) ceil((airTempF-32.0)*50.0/9.0 + 2731.5);
   d8a1a:	f004 f95b 	bl	dccd4 <__aeabi_f2d>
   d8a1e:	4b45      	ldr	r3, [pc, #276]	; (d8b34 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x21c>)
   d8a20:	2200      	movs	r2, #0
   d8a22:	f003 fff7 	bl	dca14 <__aeabi_dsub>
   d8a26:	4b44      	ldr	r3, [pc, #272]	; (d8b38 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x220>)
   d8a28:	2200      	movs	r2, #0
   d8a2a:	f004 f9ab 	bl	dcd84 <__aeabi_dmul>
   d8a2e:	4b43      	ldr	r3, [pc, #268]	; (d8b3c <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x224>)
   d8a30:	2200      	movs	r2, #0
   d8a32:	f004 fad1 	bl	dcfd8 <__aeabi_ddiv>
   d8a36:	a338      	add	r3, pc, #224	; (adr r3, d8b18 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x200>)
   d8a38:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a3c:	f003 ffec 	bl	dca18 <__adddf3>
   d8a40:	ec41 0b10 	vmov	d0, r0, r1
   d8a44:	f002 ffa8 	bl	db998 <ceil>
   d8a48:	ec51 0b10 	vmov	r0, r1, d0
   d8a4c:	f004 fc72 	bl	dd334 <__aeabi_d2uiz>
  Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
   d8a50:	220a      	movs	r2, #10
  sensorReadings.airTempKx10 = (uint16_t) ceil((airTempF-32.0)*50.0/9.0 + 2731.5);
   d8a52:	b281      	uxth	r1, r0
  Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
   d8a54:	a804      	add	r0, sp, #16
  sensorReadings.airTempKx10 = (uint16_t) ceil((airTempF-32.0)*50.0/9.0 + 2731.5);
   d8a56:	8169      	strh	r1, [r5, #10]
  Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
   d8a58:	f001 fa11 	bl	d9e7e <_ZN6StringC1Eih>
   d8a5c:	9a04      	ldr	r2, [sp, #16]
   d8a5e:	4938      	ldr	r1, [pc, #224]	; (d8b40 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x228>)
   d8a60:	a802      	add	r0, sp, #8
   d8a62:	f7ff facf 	bl	d8004 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d8a66:	a803      	add	r0, sp, #12
   d8a68:	f7fb feb2 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a6c:	a804      	add	r0, sp, #16
   d8a6e:	f001 f933 	bl	d9cd8 <_ZN6StringD1Ev>
  uint16_t humidityRH = relativeHumidtyMedian.getMedian();
   d8a72:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d8a76:	f000 fba4 	bl	d91c2 <_ZN13RunningMedian9getMedianEv>
  Particle.publish("Humedad", String(sensorReadings.humid));
   d8a7a:	220a      	movs	r2, #10
  sensorReadings.humid =(uint8_t) ceil(humidityRH);
   d8a7c:	b2c1      	uxtb	r1, r0
  Particle.publish("Humedad", String(sensorReadings.humid));
   d8a7e:	a804      	add	r0, sp, #16
  sensorReadings.humid =(uint8_t) ceil(humidityRH);
   d8a80:	7229      	strb	r1, [r5, #8]
  Particle.publish("Humedad", String(sensorReadings.humid));
   d8a82:	f001 f9ea 	bl	d9e5a <_ZN6StringC1Ehh>
   d8a86:	9a04      	ldr	r2, [sp, #16]
   d8a88:	492e      	ldr	r1, [pc, #184]	; (d8b44 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x22c>)
   d8a8a:	a802      	add	r0, sp, #8
   d8a8c:	f7ff faba 	bl	d8004 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d8a90:	a803      	add	r0, sp, #12
   d8a92:	f7fb fe9d 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a96:	a804      	add	r0, sp, #16
   d8a98:	f001 f91e 	bl	d9cd8 <_ZN6StringD1Ev>
  float pressure = getAndResetPressurePascals();
   d8a9c:	4620      	mov	r0, r4
   d8a9e:	f7ff fd91 	bl	d85c4 <_ZN14WeatherSensors26getAndResetPressurePascalsEv>
  sensorReadings.barometerhPa = pressure/10.0;
   d8aa2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d8aa6:	eec0 7a07 	vdiv.f32	s15, s0, s14
  Particle.publish("Presion", String(sensorReadings.barometerhPa));
   d8aaa:	2106      	movs	r1, #6
   d8aac:	a804      	add	r0, sp, #16
   d8aae:	eeb0 0a67 	vmov.f32	s0, s15
  sensorReadings.barometerhPa = pressure/10.0;
   d8ab2:	edc5 7a04 	vstr	s15, [r5, #16]
  Particle.publish("Presion", String(sensorReadings.barometerhPa));
   d8ab6:	f001 fa09 	bl	d9ecc <_ZN6StringC1Efi>
   d8aba:	9a04      	ldr	r2, [sp, #16]
   d8abc:	4922      	ldr	r1, [pc, #136]	; (d8b48 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x230>)
   d8abe:	a802      	add	r0, sp, #8
   d8ac0:	f7ff faa0 	bl	d8004 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d8ac4:	a803      	add	r0, sp, #12
   d8ac6:	f7fb fe83 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8aca:	a804      	add	r0, sp, #16
   d8acc:	f001 f904 	bl	d9cd8 <_ZN6StringD1Ev>
  sensorReadings.millivolts=getAndResetBatteryMV();
   d8ad0:	4620      	mov	r0, r4
   d8ad2:	f7ff fb5b 	bl	d818c <_ZN14WeatherSensors20getAndResetBatteryMVEv>
  Particle.publish("Bateria", String( sensorReadings.millivolts));
   d8ad6:	220a      	movs	r2, #10
  sensorReadings.millivolts=getAndResetBatteryMV();
   d8ad8:	4601      	mov	r1, r0
   d8ada:	82e8      	strh	r0, [r5, #22]
  Particle.publish("Bateria", String( sensorReadings.millivolts));
   d8adc:	a804      	add	r0, sp, #16
   d8ade:	f001 f9ce 	bl	d9e7e <_ZN6StringC1Eih>
   d8ae2:	9a04      	ldr	r2, [sp, #16]
   d8ae4:	4919      	ldr	r1, [pc, #100]	; (d8b4c <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x234>)
   d8ae6:	a802      	add	r0, sp, #8
   d8ae8:	f7ff fa8c 	bl	d8004 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d8aec:	a803      	add	r0, sp, #12
   d8aee:	f7fb fe6f 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8af2:	a804      	add	r0, sp, #16
   d8af4:	f001 f8f0 	bl	d9cd8 <_ZN6StringD1Ev>
}
   d8af8:	b009      	add	sp, #36	; 0x24
   d8afa:	bd30      	pop	{r4, r5, pc}
   d8afc:	f3af 8000 	nop.w
   d8b00:	28f5c28f 	.word	0x28f5c28f
   d8b04:	4099255c 	.word	0x4099255c
   d8b08:	5696e58a 	.word	0x5696e58a
   d8b0c:	3fe3e243 	.word	0x3fe3e243
   d8b10:	7c1bda51 	.word	0x7c1bda51
   d8b14:	3fd93261 	.word	0x3fd93261
   d8b18:	00000000 	.word	0x00000000
   d8b1c:	40a55700 	.word	0x40a55700
   d8b20:	2003c940 	.word	0x2003c940
   d8b24:	000df85d 	.word	0x000df85d
   d8b28:	46c67000 	.word	0x46c67000
   d8b2c:	000df873 	.word	0x000df873
   d8b30:	000df886 	.word	0x000df886
   d8b34:	40400000 	.word	0x40400000
   d8b38:	40490000 	.word	0x40490000
   d8b3c:	40220000 	.word	0x40220000
   d8b40:	000df89b 	.word	0x000df89b
   d8b44:	000df8a7 	.word	0x000df8a7
   d8b48:	000df8af 	.word	0x000df8af
   d8b4c:	000df8b7 	.word	0x000df8b7

000d8b50 <_GLOBAL__sub_I__ZN14WeatherSensors5beginEv>:
   d8b50:	4b01      	ldr	r3, [pc, #4]	; (d8b58 <_GLOBAL__sub_I__ZN14WeatherSensors5beginEv+0x8>)
   d8b52:	2200      	movs	r2, #0
   d8b54:	701a      	strb	r2, [r3, #0]
}
   d8b56:	4770      	bx	lr
   d8b58:	2003e51d 	.word	0x2003e51d

000d8b5c <_ZN14WeatherSensors5beginEv>:
  AnemoneterPeriodTotal = 0;
   d8b5c:	f241 6274 	movw	r2, #5748	; 0x1674
   d8b60:	2300      	movs	r3, #0
{
   d8b62:	b570      	push	{r4, r5, r6, lr}
  AnemoneterPeriodTotal = 0;
   d8b64:	5083      	str	r3, [r0, r2]
  AnemoneterPeriodReadingCount = 0;
   d8b66:	f241 6278 	movw	r2, #5752	; 0x1678
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   d8b6a:	f04f 31ff 	mov.w	r1, #4294967295
  AnemoneterPeriodReadingCount = 0;
   d8b6e:	5083      	str	r3, [r0, r2]
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   d8b70:	f241 627c 	movw	r2, #5756	; 0x167c
  barom.begin();
   d8b74:	f100 0508 	add.w	r5, r0, #8
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   d8b78:	5081      	str	r1, [r0, r2]
  lastAnemoneterEvent = 0;
   d8b7a:	f500 52b4 	add.w	r2, r0, #5760	; 0x1680
{
   d8b7e:	b08a      	sub	sp, #40	; 0x28
  lastAnemoneterEvent = 0;
   d8b80:	6013      	str	r3, [r2, #0]
{
   d8b82:	4604      	mov	r4, r0
  barom.begin();
   d8b84:	4628      	mov	r0, r5
   d8b86:	f7ff f983 	bl	d7e90 <_ZN9MPL3115A25beginEv>
  barom.setModeBarometer();
   d8b8a:	4628      	mov	r0, r5
   d8b8c:	f7ff f9aa 	bl	d7ee4 <_ZN9MPL3115A216setModeBarometerEv>
  barom.setOversampleRate(7);
   d8b90:	2107      	movs	r1, #7
   d8b92:	4628      	mov	r0, r5
   d8b94:	f7ff f9b3 	bl	d7efe <_ZN9MPL3115A217setOversampleRateEh>
  barom.enableEventFlags();
   d8b98:	4628      	mov	r0, r5
   d8b9a:	f7ff f9c4 	bl	d7f26 <_ZN9MPL3115A216enableEventFlagsEv>
  am2315.begin();
   d8b9e:	4620      	mov	r0, r4
   d8ba0:	f7fd fb42 	bl	d6228 <_ZN15Adafruit_AM23155beginEv>
  if (tsl.begin()) 
   d8ba4:	f504 54b2 	add.w	r4, r4, #5696	; 0x1640
  Serial.begin(9600);
   d8ba8:	f002 f9e2 	bl	daf70 <_Z16_fetch_usbserialv>
   d8bac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d8bb0:	f002 f9d2 	bl	daf58 <_ZN9USBSerial5beginEl>
  if (tsl.begin()) 
   d8bb4:	340c      	adds	r4, #12
  Serial.println(F("Starting Adafruit TSL2591 Test!"));
   d8bb6:	f002 f9db 	bl	daf70 <_Z16_fetch_usbserialv>
   d8bba:	4975      	ldr	r1, [pc, #468]	; (d8d90 <_ZN14WeatherSensors5beginEv+0x234>)
   d8bbc:	f001 fa9f 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
  if (tsl.begin()) 
   d8bc0:	4620      	mov	r0, r4
   d8bc2:	f7fd fa1a 	bl	d5ffa <_ZN16Adafruit_TSL25915beginEv>
   d8bc6:	2800      	cmp	r0, #0
   d8bc8:	f000 80c5 	beq.w	d8d56 <_ZN14WeatherSensors5beginEv+0x1fa>
    Serial.println(F("Found a TSL2591 sensor"));
   d8bcc:	f002 f9d0 	bl	daf70 <_Z16_fetch_usbserialv>
   d8bd0:	4970      	ldr	r1, [pc, #448]	; (d8d94 <_ZN14WeatherSensors5beginEv+0x238>)
    Serial.println(F("No sensor found ... check your wiring?"));
   d8bd2:	f001 fa94 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
  tsl.getSensor(&sensor);
   d8bd6:	4669      	mov	r1, sp
   d8bd8:	4620      	mov	r0, r4
   d8bda:	f7fd f90f 	bl	d5dfc <_ZN16Adafruit_TSL25919getSensorEP8sensor_t>
  Serial.println(F("------------------------------------"));
   d8bde:	f002 f9c7 	bl	daf70 <_Z16_fetch_usbserialv>
   d8be2:	496d      	ldr	r1, [pc, #436]	; (d8d98 <_ZN14WeatherSensors5beginEv+0x23c>)
   d8be4:	f001 fa8b 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Sensor:       ")); Serial.println(sensor.name);
   d8be8:	f002 f9c2 	bl	daf70 <_Z16_fetch_usbserialv>
   d8bec:	496b      	ldr	r1, [pc, #428]	; (d8d9c <_ZN14WeatherSensors5beginEv+0x240>)
   d8bee:	f001 fa6c 	bl	da0ca <_ZN5Print5printEPK19__FlashStringHelper>
   d8bf2:	f002 f9bd 	bl	daf70 <_Z16_fetch_usbserialv>
   d8bf6:	4669      	mov	r1, sp
   d8bf8:	f001 fa77 	bl	da0ea <_ZN5Print7printlnEPKc>
  Serial.print  (F("Driver Ver:   ")); Serial.println(sensor.version);
   d8bfc:	f002 f9b8 	bl	daf70 <_Z16_fetch_usbserialv>
   d8c00:	4967      	ldr	r1, [pc, #412]	; (d8da0 <_ZN14WeatherSensors5beginEv+0x244>)
   d8c02:	f001 fa62 	bl	da0ca <_ZN5Print5printEPK19__FlashStringHelper>
   d8c06:	f002 f9b3 	bl	daf70 <_Z16_fetch_usbserialv>
   d8c0a:	9d03      	ldr	r5, [sp, #12]
        if (n < 0 && base == 10) {
   d8c0c:	2d00      	cmp	r5, #0
   d8c0e:	4606      	mov	r6, r0
   d8c10:	f280 80a5 	bge.w	d8d5e <_ZN14WeatherSensors5beginEv+0x202>
            t = print('-');
   d8c14:	212d      	movs	r1, #45	; 0x2d
   d8c16:	f001 fa55 	bl	da0c4 <_ZN5Print5printEc>
            val = -n;
   d8c1a:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d8c1c:	220a      	movs	r2, #10
   d8c1e:	4630      	mov	r0, r6
   d8c20:	f001 fa6f 	bl	da102 <_ZN5Print11printNumberEmh>
        n += println();
   d8c24:	4630      	mov	r0, r6
   d8c26:	f001 fa54 	bl	da0d2 <_ZN5Print7printlnEv>
  Serial.print  (F("Unique ID:    ")); Serial.println(sensor.sensor_id);
   d8c2a:	f002 f9a1 	bl	daf70 <_Z16_fetch_usbserialv>
   d8c2e:	495d      	ldr	r1, [pc, #372]	; (d8da4 <_ZN14WeatherSensors5beginEv+0x248>)
   d8c30:	f001 fa4b 	bl	da0ca <_ZN5Print5printEPK19__FlashStringHelper>
   d8c34:	f002 f99c 	bl	daf70 <_Z16_fetch_usbserialv>
   d8c38:	9d04      	ldr	r5, [sp, #16]
        if (n < 0 && base == 10) {
   d8c3a:	2d00      	cmp	r5, #0
   d8c3c:	4606      	mov	r6, r0
   d8c3e:	f280 8090 	bge.w	d8d62 <_ZN14WeatherSensors5beginEv+0x206>
            t = print('-');
   d8c42:	212d      	movs	r1, #45	; 0x2d
   d8c44:	f001 fa3e 	bl	da0c4 <_ZN5Print5printEc>
            val = -n;
   d8c48:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d8c4a:	220a      	movs	r2, #10
   d8c4c:	4630      	mov	r0, r6
   d8c4e:	f001 fa58 	bl	da102 <_ZN5Print11printNumberEmh>
        n += println();
   d8c52:	4630      	mov	r0, r6
   d8c54:	f001 fa3d 	bl	da0d2 <_ZN5Print7printlnEv>
  Serial.print  (F("Max Value:    ")); Serial.print(sensor.max_value); Serial.println(F(" lux"));
   d8c58:	f002 f98a 	bl	daf70 <_Z16_fetch_usbserialv>
   d8c5c:	4952      	ldr	r1, [pc, #328]	; (d8da8 <_ZN14WeatherSensors5beginEv+0x24c>)
   d8c5e:	f001 fa34 	bl	da0ca <_ZN5Print5printEPK19__FlashStringHelper>
   d8c62:	f002 f985 	bl	daf70 <_Z16_fetch_usbserialv>
   d8c66:	ed9d 0a06 	vldr	s0, [sp, #24]
   d8c6a:	2102      	movs	r1, #2
   d8c6c:	f001 fb30 	bl	da2d0 <_ZN5Print5printEfi>
   d8c70:	f002 f97e 	bl	daf70 <_Z16_fetch_usbserialv>
   d8c74:	494d      	ldr	r1, [pc, #308]	; (d8dac <_ZN14WeatherSensors5beginEv+0x250>)
   d8c76:	f001 fa42 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Min Value:    ")); Serial.print(sensor.min_value); Serial.println(F(" lux"));
   d8c7a:	f002 f979 	bl	daf70 <_Z16_fetch_usbserialv>
   d8c7e:	494c      	ldr	r1, [pc, #304]	; (d8db0 <_ZN14WeatherSensors5beginEv+0x254>)
   d8c80:	f001 fa23 	bl	da0ca <_ZN5Print5printEPK19__FlashStringHelper>
   d8c84:	f002 f974 	bl	daf70 <_Z16_fetch_usbserialv>
   d8c88:	ed9d 0a07 	vldr	s0, [sp, #28]
   d8c8c:	2102      	movs	r1, #2
   d8c8e:	f001 fb1f 	bl	da2d0 <_ZN5Print5printEfi>
   d8c92:	f002 f96d 	bl	daf70 <_Z16_fetch_usbserialv>
   d8c96:	4945      	ldr	r1, [pc, #276]	; (d8dac <_ZN14WeatherSensors5beginEv+0x250>)
   d8c98:	f001 fa31 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Resolution:   ")); Serial.print(sensor.resolution, 4); Serial.println(F(" lux"));  
   d8c9c:	f002 f968 	bl	daf70 <_Z16_fetch_usbserialv>
   d8ca0:	4944      	ldr	r1, [pc, #272]	; (d8db4 <_ZN14WeatherSensors5beginEv+0x258>)
   d8ca2:	f001 fa12 	bl	da0ca <_ZN5Print5printEPK19__FlashStringHelper>
   d8ca6:	f002 f963 	bl	daf70 <_Z16_fetch_usbserialv>
   d8caa:	ed9d 0a08 	vldr	s0, [sp, #32]
   d8cae:	2104      	movs	r1, #4
   d8cb0:	f001 fb0e 	bl	da2d0 <_ZN5Print5printEfi>
   d8cb4:	f002 f95c 	bl	daf70 <_Z16_fetch_usbserialv>
   d8cb8:	493c      	ldr	r1, [pc, #240]	; (d8dac <_ZN14WeatherSensors5beginEv+0x250>)
   d8cba:	f001 fa20 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("------------------------------------"));
   d8cbe:	f002 f957 	bl	daf70 <_Z16_fetch_usbserialv>
   d8cc2:	4935      	ldr	r1, [pc, #212]	; (d8d98 <_ZN14WeatherSensors5beginEv+0x23c>)
   d8cc4:	f001 fa1b 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F(""));
   d8cc8:	f002 f952 	bl	daf70 <_Z16_fetch_usbserialv>
   d8ccc:	493a      	ldr	r1, [pc, #232]	; (d8db8 <_ZN14WeatherSensors5beginEv+0x25c>)
   d8cce:	f001 fa16 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
  delay(500);
   d8cd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d8cd6:	f001 fd25 	bl	da724 <delay>
  tsl.setGain(TSL2591_GAIN_MED);      // 25x gain
   d8cda:	2110      	movs	r1, #16
   d8cdc:	4620      	mov	r0, r4
   d8cde:	f7fd f9c9 	bl	d6074 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>
  tsl.setTiming(TSL2591_INTEGRATIONTIME_300MS);
   d8ce2:	2102      	movs	r1, #2
   d8ce4:	4620      	mov	r0, r4
   d8ce6:	f7fd f96f 	bl	d5fc8 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>
  Serial.println(F("------------------------------------"));
   d8cea:	f002 f941 	bl	daf70 <_Z16_fetch_usbserialv>
   d8cee:	492a      	ldr	r1, [pc, #168]	; (d8d98 <_ZN14WeatherSensors5beginEv+0x23c>)
   d8cf0:	f001 fa05 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Gain:         "));
   d8cf4:	f002 f93c 	bl	daf70 <_Z16_fetch_usbserialv>
   d8cf8:	4930      	ldr	r1, [pc, #192]	; (d8dbc <_ZN14WeatherSensors5beginEv+0x260>)
   d8cfa:	f001 f9e6 	bl	da0ca <_ZN5Print5printEPK19__FlashStringHelper>
  tsl2591Gain_t gain = tsl.getGain();
   d8cfe:	4620      	mov	r0, r4
   d8d00:	f7fd f8b2 	bl	d5e68 <_ZN16Adafruit_TSL25917getGainEv>
  switch(gain)
   d8d04:	2820      	cmp	r0, #32
   d8d06:	d03e      	beq.n	d8d86 <_ZN14WeatherSensors5beginEv+0x22a>
   d8d08:	d82d      	bhi.n	d8d66 <_ZN14WeatherSensors5beginEv+0x20a>
   d8d0a:	b390      	cbz	r0, d8d72 <_ZN14WeatherSensors5beginEv+0x216>
   d8d0c:	2810      	cmp	r0, #16
   d8d0e:	d036      	beq.n	d8d7e <_ZN14WeatherSensors5beginEv+0x222>
  Serial.print  (F("Timing:       "));
   d8d10:	f002 f92e 	bl	daf70 <_Z16_fetch_usbserialv>
   d8d14:	492a      	ldr	r1, [pc, #168]	; (d8dc0 <_ZN14WeatherSensors5beginEv+0x264>)
   d8d16:	f001 f9d8 	bl	da0ca <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((tsl.getTiming() + 1) * 100, DEC); 
   d8d1a:	f002 f929 	bl	daf70 <_Z16_fetch_usbserialv>
   d8d1e:	4605      	mov	r5, r0
   d8d20:	4620      	mov	r0, r4
   d8d22:	f7fd f8a3 	bl	d5e6c <_ZN16Adafruit_TSL25919getTimingEv>
   d8d26:	2164      	movs	r1, #100	; 0x64
        return printNumber(val, base) + t;
   d8d28:	220a      	movs	r2, #10
   d8d2a:	fb00 1101 	mla	r1, r0, r1, r1
   d8d2e:	4628      	mov	r0, r5
   d8d30:	f001 f9e7 	bl	da102 <_ZN5Print11printNumberEmh>
  Serial.println(F(" ms"));
   d8d34:	f002 f91c 	bl	daf70 <_Z16_fetch_usbserialv>
   d8d38:	4922      	ldr	r1, [pc, #136]	; (d8dc4 <_ZN14WeatherSensors5beginEv+0x268>)
   d8d3a:	f001 f9e0 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("------------------------------------"));
   d8d3e:	f002 f917 	bl	daf70 <_Z16_fetch_usbserialv>
   d8d42:	4915      	ldr	r1, [pc, #84]	; (d8d98 <_ZN14WeatherSensors5beginEv+0x23c>)
   d8d44:	f001 f9db 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F(""));
   d8d48:	f002 f912 	bl	daf70 <_Z16_fetch_usbserialv>
   d8d4c:	491a      	ldr	r1, [pc, #104]	; (d8db8 <_ZN14WeatherSensors5beginEv+0x25c>)
   d8d4e:	f001 f9d6 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   d8d52:	b00a      	add	sp, #40	; 0x28
   d8d54:	bd70      	pop	{r4, r5, r6, pc}
    Serial.println(F("No sensor found ... check your wiring?"));
   d8d56:	f002 f90b 	bl	daf70 <_Z16_fetch_usbserialv>
   d8d5a:	491b      	ldr	r1, [pc, #108]	; (d8dc8 <_ZN14WeatherSensors5beginEv+0x26c>)
   d8d5c:	e739      	b.n	d8bd2 <_ZN14WeatherSensors5beginEv+0x76>
            val = n;
   d8d5e:	4629      	mov	r1, r5
   d8d60:	e75c      	b.n	d8c1c <_ZN14WeatherSensors5beginEv+0xc0>
   d8d62:	4629      	mov	r1, r5
   d8d64:	e771      	b.n	d8c4a <_ZN14WeatherSensors5beginEv+0xee>
  switch(gain)
   d8d66:	2830      	cmp	r0, #48	; 0x30
   d8d68:	d1d2      	bne.n	d8d10 <_ZN14WeatherSensors5beginEv+0x1b4>
      Serial.println(F("9876x (Max)"));
   d8d6a:	f002 f901 	bl	daf70 <_Z16_fetch_usbserialv>
   d8d6e:	4917      	ldr	r1, [pc, #92]	; (d8dcc <_ZN14WeatherSensors5beginEv+0x270>)
   d8d70:	e002      	b.n	d8d78 <_ZN14WeatherSensors5beginEv+0x21c>
      Serial.println(F("1x (Low)"));
   d8d72:	f002 f8fd 	bl	daf70 <_Z16_fetch_usbserialv>
   d8d76:	4916      	ldr	r1, [pc, #88]	; (d8dd0 <_ZN14WeatherSensors5beginEv+0x274>)
      Serial.println(F("9876x (Max)"));
   d8d78:	f001 f9c1 	bl	da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>
      break;
   d8d7c:	e7c8      	b.n	d8d10 <_ZN14WeatherSensors5beginEv+0x1b4>
      Serial.println(F("25x (Medium)"));
   d8d7e:	f002 f8f7 	bl	daf70 <_Z16_fetch_usbserialv>
   d8d82:	4914      	ldr	r1, [pc, #80]	; (d8dd4 <_ZN14WeatherSensors5beginEv+0x278>)
   d8d84:	e7f8      	b.n	d8d78 <_ZN14WeatherSensors5beginEv+0x21c>
      Serial.println(F("428x (High)"));
   d8d86:	f002 f8f3 	bl	daf70 <_Z16_fetch_usbserialv>
   d8d8a:	4913      	ldr	r1, [pc, #76]	; (d8dd8 <_ZN14WeatherSensors5beginEv+0x27c>)
   d8d8c:	e7f4      	b.n	d8d78 <_ZN14WeatherSensors5beginEv+0x21c>
   d8d8e:	bf00      	nop
   d8d90:	000df8bf 	.word	0x000df8bf
   d8d94:	000df8df 	.word	0x000df8df
   d8d98:	000df91d 	.word	0x000df91d
   d8d9c:	000df942 	.word	0x000df942
   d8da0:	000df951 	.word	0x000df951
   d8da4:	000df960 	.word	0x000df960
   d8da8:	000df96f 	.word	0x000df96f
   d8dac:	000df97e 	.word	0x000df97e
   d8db0:	000df983 	.word	0x000df983
   d8db4:	000df992 	.word	0x000df992
   d8db8:	000dff9b 	.word	0x000dff9b
   d8dbc:	000df9a1 	.word	0x000df9a1
   d8dc0:	000df9de 	.word	0x000df9de
   d8dc4:	000df9ed 	.word	0x000df9ed
   d8dc8:	000df8f6 	.word	0x000df8f6
   d8dcc:	000df9d2 	.word	0x000df9d2
   d8dd0:	000df9b0 	.word	0x000df9b0
   d8dd4:	000df9b9 	.word	0x000df9b9
   d8dd8:	000df9c6 	.word	0x000df9c6

000d8ddc <_ZN7FramI2CC1E14framPartNumber>:
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   d8ddc:	2250      	movs	r2, #80	; 0x50
   d8dde:	b510      	push	{r4, lr}
   d8de0:	7042      	strb	r2, [r0, #1]
{
//	_topAddressForPartNumber[MB85RC16]		= 0x0007FFUL;
	_topAddressForPartNumber[MB85RC64]		= 0x001FFFUL;
	_topAddressForPartNumber[MB85RC128A]	= 0x003FFFUL;
   d8de2:	f641 74ff 	movw	r4, #8191	; 0x1fff
   d8de6:	f643 72ff 	movw	r2, #16383	; 0x3fff
   d8dea:	e9c0 4201 	strd	r4, r2, [r0, #4]
	_topAddressForPartNumber[MB85RC128B]	= 0x003FFFUL;
   d8dee:	60c2      	str	r2, [r0, #12]
	_topAddressForPartNumber[MB85RC256A]	= 0x007FFFUL;
   d8df0:	f647 72ff 	movw	r2, #32767	; 0x7fff
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
   d8df4:	e9c0 2204 	strd	r2, r2, [r0, #16]
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
   d8df8:	6182      	str	r2, [r0, #24]
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
   d8dfa:	f64f 7cff 	movw	ip, #65535	; 0xffff
   d8dfe:	2200      	movs	r2, #0
   d8e00:	e9c0 c207 	strd	ip, r2, [r0, #28]
FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   d8e04:	7001      	strb	r1, [r0, #0]
	_bottomAddress = _baseAddress + _maxBufferSize;
   d8e06:	2480      	movs	r4, #128	; 0x80
	_topAddress = _topAddressForPartNumber[_partNumber];
   d8e08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	_bottomAddress = _baseAddress + _maxBufferSize;
   d8e0c:	6244      	str	r4, [r0, #36]	; 0x24
	_topAddress = _topAddressForPartNumber[_partNumber];
   d8e0e:	684a      	ldr	r2, [r1, #4]
   d8e10:	6282      	str	r2, [r0, #40]	; 0x28
	_numberOfBuffers = (_topAddress - _bottomAddress + 1) / _maxBufferSize;
   d8e12:	3a7f      	subs	r2, #127	; 0x7f
   d8e14:	09d2      	lsrs	r2, r2, #7
	_nextFreeByte = _bottomAddress;
   d8e16:	e9c0 240b 	strd	r2, r4, [r0, #44]	; 0x2c
}
   d8e1a:	bd10      	pop	{r4, pc}

000d8e1c <_ZN7FramI2C11_readMemoryEmhPh>:
//
// PLATFORM SPECIFIC, LOW LEVEL METHODS
//

void FramI2C::_readMemory(uint32_t address, uint8_t numberOfBytes, uint8_t *buffer)
{
   d8e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8e20:	4615      	mov	r5, r2
   d8e22:	461c      	mov	r4, r3
   d8e24:	460f      	mov	r7, r1
   d8e26:	4606      	mov	r6, r0
	WITH_LOCK(Wire)
   d8e28:	f002 fbec 	bl	db604 <_Z19__fetch_global_Wirev>
   d8e2c:	4680      	mov	r8, r0
      { _M_device.lock(); }
   d8e2e:	f002 fa98 	bl	db362 <_ZN7TwoWire4lockEv>
	{
		uint16_t framAddr = (uint16_t)address;
		// Address only correct for 64 through 512 kbit devices
		Wire.beginTransmission(framI2CAddress);
   d8e32:	f002 fbe7 	bl	db604 <_Z19__fetch_global_Wirev>
   d8e36:	7871      	ldrb	r1, [r6, #1]
   d8e38:	f002 fa7c 	bl	db334 <_ZN7TwoWire17beginTransmissionEh>

		Wire.write(framAddr >> 8);
   d8e3c:	f002 fbe2 	bl	db604 <_Z19__fetch_global_Wirev>
   d8e40:	f3c7 2107 	ubfx	r1, r7, #8, #8
   d8e44:	f7fc fe11 	bl	d5a6a <_ZN7TwoWire5writeEi>
		Wire.write(framAddr & 0xFF);
   d8e48:	f002 fbdc 	bl	db604 <_Z19__fetch_global_Wirev>
   d8e4c:	b2f9      	uxtb	r1, r7
   d8e4e:	f7fc fe0c 	bl	d5a6a <_ZN7TwoWire5writeEi>

		Wire.endTransmission();
   d8e52:	f002 fbd7 	bl	db604 <_Z19__fetch_global_Wirev>
   d8e56:	f002 fa78 	bl	db34a <_ZN7TwoWire15endTransmissionEv>

		// Maximum request size of 32 bytes
		Wire.requestFrom(framI2CAddress, (uint8_t)numberOfBytes);
   d8e5a:	f002 fbd3 	bl	db604 <_Z19__fetch_global_Wirev>
   d8e5e:	462a      	mov	r2, r5
   d8e60:	7871      	ldrb	r1, [r6, #1]
   d8e62:	f002 fa64 	bl	db32e <_ZN7TwoWire11requestFromEhj>
		for (byte i=0; i < numberOfBytes; i++) {
   d8e66:	4425      	add	r5, r4
   d8e68:	42a5      	cmp	r5, r4
   d8e6a:	d007      	beq.n	d8e7c <_ZN7FramI2C11_readMemoryEmhPh+0x60>
			buffer[i] = Wire.read();
   d8e6c:	f002 fbca 	bl	db604 <_Z19__fetch_global_Wirev>
   d8e70:	6803      	ldr	r3, [r0, #0]
   d8e72:	695b      	ldr	r3, [r3, #20]
   d8e74:	4798      	blx	r3
   d8e76:	f804 0b01 	strb.w	r0, [r4], #1
		for (byte i=0; i < numberOfBytes; i++) {
   d8e7a:	e7f5      	b.n	d8e68 <_ZN7FramI2C11_readMemoryEmhPh+0x4c>
		}
		Wire.endTransmission();
   d8e7c:	f002 fbc2 	bl	db604 <_Z19__fetch_global_Wirev>
   d8e80:	f002 fa63 	bl	db34a <_ZN7TwoWire15endTransmissionEv>
      { _M_device.unlock(); }
   d8e84:	4640      	mov	r0, r8
	}
}
   d8e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8e8a:	f002 ba73 	b.w	db374 <_ZN7TwoWire6unlockEv>

000d8e8e <_ZN7FramI2C12_writeMemoryEmhPh>:


void FramI2C::_writeMemory(uint32_t address, uint8_t numberOfBytes, uint8_t *buffer)
{
   d8e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8e92:	4615      	mov	r5, r2
   d8e94:	461c      	mov	r4, r3
   d8e96:	460e      	mov	r6, r1
   d8e98:	4680      	mov	r8, r0
	WITH_LOCK(Wire)
   d8e9a:	f002 fbb3 	bl	db604 <_Z19__fetch_global_Wirev>
   d8e9e:	4607      	mov	r7, r0
      { _M_device.lock(); }
   d8ea0:	f002 fa5f 	bl	db362 <_ZN7TwoWire4lockEv>
	{	
		uint16_t framAddr = (uint16_t)address;
		// Address only correct for 64 through 512 kbit devices

		Wire.beginTransmission(framI2CAddress);
   d8ea4:	f002 fbae 	bl	db604 <_Z19__fetch_global_Wirev>
   d8ea8:	f898 1001 	ldrb.w	r1, [r8, #1]
   d8eac:	f002 fa42 	bl	db334 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(framAddr >> 8);
   d8eb0:	f002 fba8 	bl	db604 <_Z19__fetch_global_Wirev>
   d8eb4:	f3c6 2107 	ubfx	r1, r6, #8, #8
   d8eb8:	f7fc fdd7 	bl	d5a6a <_ZN7TwoWire5writeEi>
		Wire.write(framAddr & 0xFF);
   d8ebc:	f002 fba2 	bl	db604 <_Z19__fetch_global_Wirev>
   d8ec0:	b2f1      	uxtb	r1, r6
   d8ec2:	f7fc fdd2 	bl	d5a6a <_ZN7TwoWire5writeEi>


		for (uint8_t i=0; i < numberOfBytes; i++) {
   d8ec6:	4425      	add	r5, r4
   d8ec8:	42a5      	cmp	r5, r4
   d8eca:	d007      	beq.n	d8edc <_ZN7FramI2C12_writeMemoryEmhPh+0x4e>
			Wire.write(buffer[i]);
   d8ecc:	f002 fb9a 	bl	db604 <_Z19__fetch_global_Wirev>
   d8ed0:	6803      	ldr	r3, [r0, #0]
   d8ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8ed6:	689b      	ldr	r3, [r3, #8]
   d8ed8:	4798      	blx	r3
		for (uint8_t i=0; i < numberOfBytes; i++) {
   d8eda:	e7f5      	b.n	d8ec8 <_ZN7FramI2C12_writeMemoryEmhPh+0x3a>
		}
		Wire.endTransmission();
   d8edc:	f002 fb92 	bl	db604 <_Z19__fetch_global_Wirev>
   d8ee0:	f002 fa33 	bl	db34a <_ZN7TwoWire15endTransmissionEv>
      { _M_device.unlock(); }
   d8ee4:	4638      	mov	r0, r7
	}
}
   d8ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8eea:	f002 ba43 	b.w	db374 <_ZN7TwoWire6unlockEv>

000d8eee <_ZN7FramI2C4readEmjPh>:
  read((uint32_t) _baseAddress, (unsigned int) _maxBufferSize, buffer);
}


framResult FramI2C::read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   d8eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8ef0:	4606      	mov	r6, r0
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   d8ef2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8ef4:	4288      	cmp	r0, r1
   d8ef6:	d81e      	bhi.n	d8f36 <_ZN7FramI2C4readEmjPh+0x48>
   d8ef8:	6ab4      	ldr	r4, [r6, #40]	; 0x28
   d8efa:	428c      	cmp	r4, r1
   d8efc:	d31b      	bcc.n	d8f36 <_ZN7FramI2C4readEmjPh+0x48>
	{
		return framBadStartAddress;
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
   d8efe:	1e50      	subs	r0, r2, #1
   d8f00:	287f      	cmp	r0, #127	; 0x7f
   d8f02:	d81a      	bhi.n	d8f3a <_ZN7FramI2C4readEmjPh+0x4c>
	{
		return framBadNumberOfBytes;
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
   d8f04:	4408      	add	r0, r1
   d8f06:	4284      	cmp	r4, r0
   d8f08:	d319      	bcc.n	d8f3e <_ZN7FramI2C4readEmjPh+0x50>
   d8f0a:	4614      	mov	r4, r2
   d8f0c:	189f      	adds	r7, r3, r2
   d8f0e:	188d      	adds	r5, r1, r2
// Read in 30 byte blocks due to wire requestFrom() limit
  const uint8_t blockSize = 30;
  byte* buf = buffer;
  uint32_t address = startAddress;

  while (numberOfBytes >= blockSize)
   d8f10:	2c1d      	cmp	r4, #29
   d8f12:	eba7 0304 	sub.w	r3, r7, r4
   d8f16:	eba5 0104 	sub.w	r1, r5, r4
   d8f1a:	d905      	bls.n	d8f28 <_ZN7FramI2C4readEmjPh+0x3a>
  {
		_readMemory(address, blockSize, buf);
   d8f1c:	221e      	movs	r2, #30
   d8f1e:	4630      	mov	r0, r6
   d8f20:	f7ff ff7c 	bl	d8e1c <_ZN7FramI2C11_readMemoryEmhPh>
	  address += blockSize;
		buf += blockSize;
	  numberOfBytes -= blockSize;
   d8f24:	3c1e      	subs	r4, #30
  while (numberOfBytes >= blockSize)
   d8f26:	e7f3      	b.n	d8f10 <_ZN7FramI2C4readEmjPh+0x22>
  }
  if (numberOfBytes > 0)
   d8f28:	b15c      	cbz	r4, d8f42 <_ZN7FramI2C4readEmjPh+0x54>
  {
    _readMemory(address, numberOfBytes, buf);
   d8f2a:	4630      	mov	r0, r6
   d8f2c:	b2e2      	uxtb	r2, r4
   d8f2e:	f7ff ff75 	bl	d8e1c <_ZN7FramI2C11_readMemoryEmhPh>
   d8f32:	2000      	movs	r0, #0
  }
	return framOK;
}
   d8f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return framBadStartAddress;
   d8f36:	2001      	movs	r0, #1
   d8f38:	e7fc      	b.n	d8f34 <_ZN7FramI2C4readEmjPh+0x46>
		return framBadNumberOfBytes;
   d8f3a:	2002      	movs	r0, #2
   d8f3c:	e7fa      	b.n	d8f34 <_ZN7FramI2C4readEmjPh+0x46>
		return framBadFinishAddress;
   d8f3e:	2003      	movs	r0, #3
   d8f40:	e7f8      	b.n	d8f34 <_ZN7FramI2C4readEmjPh+0x46>
   d8f42:	4620      	mov	r0, r4
   d8f44:	e7f6      	b.n	d8f34 <_ZN7FramI2C4readEmjPh+0x46>

000d8f46 <_ZN7FramI2C5writeEmjPh>:


framResult FramI2C::write(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   d8f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f48:	4606      	mov	r6, r0
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   d8f4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8f4c:	4288      	cmp	r0, r1
   d8f4e:	d81e      	bhi.n	d8f8e <_ZN7FramI2C5writeEmjPh+0x48>
   d8f50:	6ab4      	ldr	r4, [r6, #40]	; 0x28
   d8f52:	428c      	cmp	r4, r1
   d8f54:	d31b      	bcc.n	d8f8e <_ZN7FramI2C5writeEmjPh+0x48>
	{
		return framBadStartAddress;
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
   d8f56:	1e50      	subs	r0, r2, #1
   d8f58:	287f      	cmp	r0, #127	; 0x7f
   d8f5a:	d81a      	bhi.n	d8f92 <_ZN7FramI2C5writeEmjPh+0x4c>
	{
		return framBadNumberOfBytes;
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
   d8f5c:	4408      	add	r0, r1
   d8f5e:	4284      	cmp	r4, r0
   d8f60:	d319      	bcc.n	d8f96 <_ZN7FramI2C5writeEmjPh+0x50>
   d8f62:	4614      	mov	r4, r2
   d8f64:	189f      	adds	r7, r3, r2
   d8f66:	188d      	adds	r5, r1, r2
	// Write in 32 byte blocks due to wire limit
	  const uint8_t blockSize = 30;
	  byte* buf = buffer;
	  uint32_t address = startAddress;

	  while (numberOfBytes >= blockSize)
   d8f68:	2c1d      	cmp	r4, #29
   d8f6a:	eba7 0304 	sub.w	r3, r7, r4
   d8f6e:	eba5 0104 	sub.w	r1, r5, r4
   d8f72:	d905      	bls.n	d8f80 <_ZN7FramI2C5writeEmjPh+0x3a>
	  {
			_writeMemory(address, blockSize, buf);
   d8f74:	221e      	movs	r2, #30
   d8f76:	4630      	mov	r0, r6
   d8f78:	f7ff ff89 	bl	d8e8e <_ZN7FramI2C12_writeMemoryEmhPh>
		  address += blockSize;
			buf += blockSize;
		  numberOfBytes -= blockSize;
   d8f7c:	3c1e      	subs	r4, #30
	  while (numberOfBytes >= blockSize)
   d8f7e:	e7f3      	b.n	d8f68 <_ZN7FramI2C5writeEmjPh+0x22>
	  }
	  if (numberOfBytes > 0)
   d8f80:	b15c      	cbz	r4, d8f9a <_ZN7FramI2C5writeEmjPh+0x54>
	  {
	    _writeMemory(address, numberOfBytes, buf);
   d8f82:	4630      	mov	r0, r6
   d8f84:	b2e2      	uxtb	r2, r4
   d8f86:	f7ff ff82 	bl	d8e8e <_ZN7FramI2C12_writeMemoryEmhPh>
   d8f8a:	2000      	movs	r0, #0
	  }

	return framOK;
}
   d8f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return framBadStartAddress;
   d8f8e:	2001      	movs	r0, #1
   d8f90:	e7fc      	b.n	d8f8c <_ZN7FramI2C5writeEmjPh+0x46>
		return framBadNumberOfBytes;
   d8f92:	2002      	movs	r0, #2
   d8f94:	e7fa      	b.n	d8f8c <_ZN7FramI2C5writeEmjPh+0x46>
		return framBadFinishAddress;
   d8f96:	2003      	movs	r0, #3
   d8f98:	e7f8      	b.n	d8f8c <_ZN7FramI2C5writeEmjPh+0x46>
   d8f9a:	4620      	mov	r0, r4
   d8f9c:	e7f6      	b.n	d8f8c <_ZN7FramI2C5writeEmjPh+0x46>

000d8f9e <_ZN7FramI2C14allocateMemoryEmR10framResult>:


uint32_t FramI2C::allocateMemory(uint32_t numberOfBytes, framResult& result)
{
   d8f9e:	b510      	push	{r4, lr}

	if ((_nextFreeByte + numberOfBytes) < _topAddress)
   d8fa0:	6b04      	ldr	r4, [r0, #48]	; 0x30
   d8fa2:	6a83      	ldr	r3, [r0, #40]	; 0x28
   d8fa4:	4421      	add	r1, r4
   d8fa6:	4299      	cmp	r1, r3
	{
		uint16_t base = _nextFreeByte;
		_nextFreeByte += numberOfBytes;
   d8fa8:	bf38      	it	cc
   d8faa:	6301      	strcc	r1, [r0, #48]	; 0x30
   d8fac:	f04f 0300 	mov.w	r3, #0
		result = framOK;
		return base;
	}
	else
	{
		result = framBadFinishAddress;
   d8fb0:	bf2d      	iteet	cs
   d8fb2:	2103      	movcs	r1, #3
		result = framOK;
   d8fb4:	7013      	strbcc	r3, [r2, #0]
		return base;
   d8fb6:	b2a0      	uxthcc	r0, r4
		result = framBadFinishAddress;
   d8fb8:	7011      	strbcs	r1, [r2, #0]
		return 0;
   d8fba:	bf28      	it	cs
   d8fbc:	4618      	movcs	r0, r3
	}
}
   d8fbe:	bd10      	pop	{r4, pc}

000d8fc0 <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult>:
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d8fc0:	b510      	push	{r4, lr}
   d8fc2:	4604      	mov	r4, r0
	// Returns result code

	// Validations:
	//		_sizeOfElement <= _bufferSize

	if (_sizeOfElement < _f.getMaxBufferSize())
   d8fc4:	f013 0f80 	tst.w	r3, #128	; 0x80
FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d8fc8:	4608      	mov	r0, r1
   d8fca:	4611      	mov	r1, r2
		_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   d8fcc:	6021      	str	r1, [r4, #0]
FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d8fce:	9a02      	ldr	r2, [sp, #8]
		_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   d8fd0:	7123      	strb	r3, [r4, #4]
   d8fd2:	60e0      	str	r0, [r4, #12]
	if (_sizeOfElement < _f.getMaxBufferSize())
   d8fd4:	d105      	bne.n	d8fe2 <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult+0x22>
	{
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement, result);
   d8fd6:	4359      	muls	r1, r3
   d8fd8:	f7ff ffe1 	bl	d8f9e <_ZN7FramI2C14allocateMemoryEmR10framResult>
   d8fdc:	60a0      	str	r0, [r4, #8]
	else
	{
		result = framArrayElementTooBig;
		_startAddress = 0;
	}
}
   d8fde:	4620      	mov	r0, r4
   d8fe0:	bd10      	pop	{r4, pc}
		result = framArrayElementTooBig;
   d8fe2:	2304      	movs	r3, #4
   d8fe4:	7013      	strb	r3, [r2, #0]
		_startAddress = 0;
   d8fe6:	2300      	movs	r3, #0
   d8fe8:	60a3      	str	r3, [r4, #8]
   d8fea:	e7f8      	b.n	d8fde <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult+0x1e>

000d8fec <_ZN12FramI2CArray11readElementEmPhR10framResult>:


void FramI2CArray::readElement(uint32_t index, byte *buffer, framResult &result)
{
   d8fec:	b570      	push	{r4, r5, r6, lr}

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   d8fee:	6886      	ldr	r6, [r0, #8]
{
   d8ff0:	4615      	mov	r5, r2
   d8ff2:	461c      	mov	r4, r3
	if (_startAddress == 0)
   d8ff4:	b916      	cbnz	r6, d8ffc <_ZN12FramI2CArray11readElementEmPhR10framResult+0x10>
	{
		result = framBadArrayStartAddress;
   d8ff6:	2306      	movs	r3, #6
	}
	else if (index >= _numberOfElements)
	{
		result = framBadArrayIndex;
   d8ff8:	7023      	strb	r3, [r4, #0]
	}
	else
	{
		result = _f.read(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
	}
}
   d8ffa:	bd70      	pop	{r4, r5, r6, pc}
	else if (index >= _numberOfElements)
   d8ffc:	6803      	ldr	r3, [r0, #0]
   d8ffe:	428b      	cmp	r3, r1
   d9000:	d801      	bhi.n	d9006 <_ZN12FramI2CArray11readElementEmPhR10framResult+0x1a>
		result = framBadArrayIndex;
   d9002:	2305      	movs	r3, #5
   d9004:	e7f8      	b.n	d8ff8 <_ZN12FramI2CArray11readElementEmPhR10framResult+0xc>
		result = _f.read(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
   d9006:	7902      	ldrb	r2, [r0, #4]
   d9008:	68c0      	ldr	r0, [r0, #12]
   d900a:	462b      	mov	r3, r5
   d900c:	fb01 6102 	mla	r1, r1, r2, r6
   d9010:	f7ff ff6d 	bl	d8eee <_ZN7FramI2C4readEmjPh>
   d9014:	7020      	strb	r0, [r4, #0]
}
   d9016:	e7f0      	b.n	d8ffa <_ZN12FramI2CArray11readElementEmPhR10framResult+0xe>

000d9018 <_ZN12FramI2CArray12writeElementEmPhR10framResult>:



void FramI2CArray::writeElement(uint32_t index, byte *buffer, framResult &result)
{
   d9018:	b570      	push	{r4, r5, r6, lr}

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   d901a:	6886      	ldr	r6, [r0, #8]
{
   d901c:	4615      	mov	r5, r2
   d901e:	461c      	mov	r4, r3
	if (_startAddress == 0)
   d9020:	b916      	cbnz	r6, d9028 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0x10>
	{
		result = framBadArrayStartAddress;
   d9022:	2306      	movs	r3, #6
	}
	else if (index >= _numberOfElements)
	{
		result = framBadArrayIndex;
   d9024:	7023      	strb	r3, [r4, #0]
	}
	else
	{
		result = _f.write(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
	}
}
   d9026:	bd70      	pop	{r4, r5, r6, pc}
	else if (index >= _numberOfElements)
   d9028:	6803      	ldr	r3, [r0, #0]
   d902a:	428b      	cmp	r3, r1
   d902c:	d801      	bhi.n	d9032 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0x1a>
		result = framBadArrayIndex;
   d902e:	2305      	movs	r3, #5
   d9030:	e7f8      	b.n	d9024 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0xc>
		result = _f.write(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
   d9032:	7902      	ldrb	r2, [r0, #4]
   d9034:	68c0      	ldr	r0, [r0, #12]
   d9036:	462b      	mov	r3, r5
   d9038:	fb01 6102 	mla	r1, r1, r2, r6
   d903c:	f7ff ff83 	bl	d8f46 <_ZN7FramI2C5writeEmjPh>
   d9040:	7020      	strb	r0, [r4, #0]
}
   d9042:	e7f0      	b.n	d9026 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0xe>

000d9044 <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult>:
	{
		return (uint32_t)(x+b);
	}
}

Ring_FramArray::Ring_FramArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d9044:	b538      	push	{r3, r4, r5, lr}
   d9046:	4604      	mov	r4, r0
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
{
	if (_sizeOfElement < _f.getMaxBufferSize())
   d9048:	061d      	lsls	r5, r3, #24
Ring_FramArray::Ring_FramArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d904a:	4608      	mov	r0, r1
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   d904c:	6022      	str	r2, [r4, #0]
Ring_FramArray::Ring_FramArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d904e:	9904      	ldr	r1, [sp, #16]
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   d9050:	7123      	strb	r3, [r4, #4]
   d9052:	60e0      	str	r0, [r4, #12]
	if (_sizeOfElement < _f.getMaxBufferSize())
   d9054:	d40d      	bmi.n	d9072 <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult+0x2e>
	{
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
   d9056:	1c55      	adds	r5, r2, #1
   d9058:	6025      	str	r5, [r4, #0]
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   d905a:	435d      	muls	r5, r3
   d905c:	460a      	mov	r2, r1
   d905e:	f105 010c 	add.w	r1, r5, #12
   d9062:	f7ff ff9c 	bl	d8f9e <_ZN7FramI2C14allocateMemoryEmR10framResult>
	return _nextFreeByte;
   d9066:	68e3      	ldr	r3, [r4, #12]
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   d9068:	60a0      	str	r0, [r4, #8]
	return _nextFreeByte;
   d906a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		_ringEndAddress = _f.getNextFreeByte();
   d906c:	61a3      	str	r3, [r4, #24]
		// Add checks in the other functions to use start address
		_startAddress = 0;
		// _tailAddress = 0;
		// _headAddress = 0;
	}
}
   d906e:	4620      	mov	r0, r4
   d9070:	bd38      	pop	{r3, r4, r5, pc}
		result = framArrayElementTooBig;
   d9072:	2304      	movs	r3, #4
   d9074:	700b      	strb	r3, [r1, #0]
		_startAddress = 0;
   d9076:	2300      	movs	r3, #0
   d9078:	60a3      	str	r3, [r4, #8]
   d907a:	e7f8      	b.n	d906e <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult+0x2a>

000d907c <_ZN14Ring_FramArray11setPointersEv>:
	}
}

void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
   d907c:	6883      	ldr	r3, [r0, #8]
   d907e:	b16b      	cbz	r3, d909c <_ZN14Ring_FramArray11setPointersEv+0x20>
	{
		_pointers.head = _headAddress;
		_pointers.tail = _tailAddress;
   d9080:	6902      	ldr	r2, [r0, #16]
		_pointers.head = _headAddress;
   d9082:	6943      	ldr	r3, [r0, #20]
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   d9084:	6a81      	ldr	r1, [r0, #40]	; 0x28
		_pointers.head = _headAddress;
   d9086:	6243      	str	r3, [r0, #36]	; 0x24
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   d9088:	4413      	add	r3, r2
		_pointers.tail = _tailAddress;
   d908a:	6202      	str	r2, [r0, #32]
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   d908c:	185a      	adds	r2, r3, r1
   d908e:	4603      	mov	r3, r0
   d9090:	f843 2f1c 	str.w	r2, [r3, #28]!
		// Save pointers to fram
		_f.write(_pointersAddress, sizeof(_pointers),(uint8_t*)&_pointers);
   d9094:	220c      	movs	r2, #12
   d9096:	68c0      	ldr	r0, [r0, #12]
   d9098:	f7ff bf55 	b.w	d8f46 <_ZN7FramI2C5writeEmjPh>
	}
}
   d909c:	4770      	bx	lr

000d909e <_ZN14Ring_FramArray11getPointersEv>:

void Ring_FramArray::getPointers()
{
_pointers.tail=99;
_pointers.head=100;
   d909e:	2263      	movs	r2, #99	; 0x63
   d90a0:	2364      	movs	r3, #100	; 0x64
   d90a2:	e9c0 2308 	strd	r2, r3, [r0, #32]

framResult checkresult;
	//read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
	checkresult = _f.read(_pointersAddress, sizeof(_pointers), (uint8_t*)&_pointers);
   d90a6:	6a81      	ldr	r1, [r0, #40]	; 0x28
   d90a8:	f100 031c 	add.w	r3, r0, #28
   d90ac:	220c      	movs	r2, #12
   d90ae:	68c0      	ldr	r0, [r0, #12]
   d90b0:	f7ff bf1d 	b.w	d8eee <_ZN7FramI2C4readEmjPh>

000d90b4 <_ZN14Ring_FramArray10initializeEv>:
{
   d90b4:	b510      	push	{r4, lr}
   d90b6:	4604      	mov	r4, r0
		if (!Wire.isEnabled())
   d90b8:	f002 faa4 	bl	db604 <_Z19__fetch_global_Wirev>
   d90bc:	f002 f948 	bl	db350 <_ZN7TwoWire9isEnabledEv>
   d90c0:	b918      	cbnz	r0, d90ca <_ZN14Ring_FramArray10initializeEv+0x16>
			Wire.begin();
   d90c2:	f002 fa9f 	bl	db604 <_Z19__fetch_global_Wirev>
   d90c6:	f002 f903 	bl	db2d0 <_ZN7TwoWire5beginEv>
		_pointersAddress = _ringEndAddress - (uint32_t)sizeof(_pointers);
   d90ca:	69a3      	ldr	r3, [r4, #24]
   d90cc:	3b0c      	subs	r3, #12
   d90ce:	62a3      	str	r3, [r4, #40]	; 0x28
		getPointers();
   d90d0:	4620      	mov	r0, r4
   d90d2:	f7ff ffe4 	bl	d909e <_ZN14Ring_FramArray11getPointersEv>
		uint32_t check = _pointersAddress + _pointers.tail + _pointers.head;
   d90d6:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
   d90da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (check==_pointers.pointerCheck)
   d90dc:	69e0      	ldr	r0, [r4, #28]
		uint32_t check = _pointersAddress + _pointers.tail + _pointers.head;
   d90de:	440b      	add	r3, r1
   d90e0:	4413      	add	r3, r2
		if (check==_pointers.pointerCheck)
   d90e2:	4298      	cmp	r0, r3
			_tailAddress = 0;
   d90e4:	bf16      	itet	ne
   d90e6:	2300      	movne	r3, #0
			_headAddress = _pointers.head;
   d90e8:	e9c4 1204 	strdeq	r1, r2, [r4, #16]
			_headAddress = 0;			
   d90ec:	e9c4 3304 	strdne	r3, r3, [r4, #16]
		setPointers();
   d90f0:	4620      	mov	r0, r4
}
   d90f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		setPointers();
   d90f6:	f7ff bfc1 	b.w	d907c <_ZN14Ring_FramArray11setPointersEv>

000d90fa <_ZN13RunningMedianD1Ev>:
{
#ifdef RUNNING_MEDIAN_USE_MALLOC
  free(_ar);
  free(_p);
#endif
}
   d90fa:	4770      	bx	lr

000d90fc <_ZN13RunningMedian5clearEv>:

// resets all counters
void RunningMedian::clear()
{
  _cnt = 0;
   d90fc:	2300      	movs	r3, #0
  _idx = 0;
  _sorted = false;
  for (uint16_t i = 0; i < _size; i++) _p[i] = i;
   d90fe:	8841      	ldrh	r1, [r0, #2]
  _cnt = 0;
   d9100:	8083      	strh	r3, [r0, #4]
  _idx = 0;
   d9102:	80c3      	strh	r3, [r0, #6]
  _sorted = false;
   d9104:	7003      	strb	r3, [r0, #0]
  for (uint16_t i = 0; i < _size; i++) _p[i] = i;
   d9106:	f200 5082 	addw	r0, r0, #1410	; 0x582
   d910a:	b29a      	uxth	r2, r3
   d910c:	4291      	cmp	r1, r2
   d910e:	d903      	bls.n	d9118 <_ZN13RunningMedian5clearEv+0x1c>
   d9110:	f820 2b02 	strh.w	r2, [r0], #2
   d9114:	3301      	adds	r3, #1
   d9116:	e7f8      	b.n	d910a <_ZN13RunningMedian5clearEv+0xe>
}
   d9118:	4770      	bx	lr

000d911a <_ZN13RunningMedianC1Et>:
RunningMedian::RunningMedian(const uint16_t size)
   d911a:	b507      	push	{r0, r1, r2, lr}
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d911c:	b161      	cbz	r1, d9138 <_ZN13RunningMedianC1Et+0x1e>
   d911e:	f240 23bd 	movw	r3, #701	; 0x2bd
   d9122:	4299      	cmp	r1, r3
   d9124:	bfa8      	it	ge
   d9126:	4619      	movge	r1, r3
  _size = constrain(size, MEDIAN_MIN_SIZE, MEDIAN_MAX_SIZE);
   d9128:	8041      	strh	r1, [r0, #2]
  clear();
   d912a:	9001      	str	r0, [sp, #4]
   d912c:	f7ff ffe6 	bl	d90fc <_ZN13RunningMedian5clearEv>
}
   d9130:	9801      	ldr	r0, [sp, #4]
   d9132:	b003      	add	sp, #12
   d9134:	f85d fb04 	ldr.w	pc, [sp], #4
   d9138:	2101      	movs	r1, #1
   d913a:	e7f5      	b.n	d9128 <_ZN13RunningMedianC1Et+0xe>

000d913c <_ZN13RunningMedian3addEt>:

// adds a new value to the data-set
// or overwrites the oldest if full.
void RunningMedian::add(uint16_t value)
{
  _ar[_idx++] = value;
   d913c:	88c2      	ldrh	r2, [r0, #6]
   d913e:	1c53      	adds	r3, r2, #1
   d9140:	3204      	adds	r2, #4
   d9142:	b29b      	uxth	r3, r3
   d9144:	80c3      	strh	r3, [r0, #6]
   d9146:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  if (_idx >= _size) _idx = 0; // wrap around
   d914a:	8842      	ldrh	r2, [r0, #2]
   d914c:	4293      	cmp	r3, r2
   d914e:	bf24      	itt	cs
   d9150:	2300      	movcs	r3, #0
   d9152:	80c3      	strhcs	r3, [r0, #6]
  if (_cnt < _size) _cnt++;
   d9154:	8883      	ldrh	r3, [r0, #4]
   d9156:	429a      	cmp	r2, r3
   d9158:	bf84      	itt	hi
   d915a:	3301      	addhi	r3, #1
   d915c:	8083      	strhhi	r3, [r0, #4]
  _sorted = false;
   d915e:	2300      	movs	r3, #0
   d9160:	7003      	strb	r3, [r0, #0]
}
   d9162:	4770      	bx	lr

000d9164 <_ZN13RunningMedian4sortEv>:
#endif

void RunningMedian::sort()
{
  // bubble sort with flag
  for (uint16_t i = 0; i < _cnt-1; i++)
   d9164:	f8b0 c004 	ldrh.w	ip, [r0, #4]
{
   d9168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (uint16_t i = 0; i < _cnt-1; i++)
   d916c:	f10c 3eff 	add.w	lr, ip, #4294967295
   d9170:	2600      	movs	r6, #0
   d9172:	b2b2      	uxth	r2, r6
   d9174:	4572      	cmp	r2, lr
   d9176:	da20      	bge.n	d91ba <_ZN13RunningMedian4sortEv+0x56>
  {
    bool flag = true;
    for (uint16_t j = 1; j < _cnt-i; j++)
   d9178:	2301      	movs	r3, #1
    bool flag = true;
   d917a:	461f      	mov	r7, r3
    for (uint16_t j = 1; j < _cnt-i; j++)
   d917c:	ebac 0502 	sub.w	r5, ip, r2
   d9180:	42ab      	cmp	r3, r5
   d9182:	da17      	bge.n	d91b4 <_ZN13RunningMedian4sortEv+0x50>
    {
      if (_ar[_p[j-1]] > _ar[_p[j]])
   d9184:	eb00 0243 	add.w	r2, r0, r3, lsl #1
    for (uint16_t j = 1; j < _cnt-i; j++)
   d9188:	3301      	adds	r3, #1
      if (_ar[_p[j-1]] > _ar[_p[j]])
   d918a:	f8b2 1580 	ldrh.w	r1, [r2, #1408]	; 0x580
   d918e:	f8b2 4582 	ldrh.w	r4, [r2, #1410]	; 0x582
   d9192:	f101 0904 	add.w	r9, r1, #4
   d9196:	f104 0804 	add.w	r8, r4, #4
   d919a:	f830 9019 	ldrh.w	r9, [r0, r9, lsl #1]
   d919e:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
   d91a2:	45c1      	cmp	r9, r8
      {
        uint16_t t = _p[j-1];
        _p[j-1] = _p[j];
   d91a4:	bf82      	ittt	hi
   d91a6:	f8a2 4580 	strhhi.w	r4, [r2, #1408]	; 0x580
        _p[j] = t;
   d91aa:	f8a2 1582 	strhhi.w	r1, [r2, #1410]	; 0x582
        flag = false;
   d91ae:	2700      	movhi	r7, #0
    for (uint16_t j = 1; j < _cnt-i; j++)
   d91b0:	b29b      	uxth	r3, r3
   d91b2:	e7e5      	b.n	d9180 <_ZN13RunningMedian4sortEv+0x1c>
      }
    }
    if (flag) break;
   d91b4:	3601      	adds	r6, #1
   d91b6:	2f00      	cmp	r7, #0
   d91b8:	d0db      	beq.n	d9172 <_ZN13RunningMedian4sortEv+0xe>
  }
  _sorted = true;
   d91ba:	2301      	movs	r3, #1
   d91bc:	7003      	strb	r3, [r0, #0]
}
   d91be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d91c2 <_ZN13RunningMedian9getMedianEv>:
{
   d91c2:	b510      	push	{r4, lr}
  if (_cnt == 0) return NAN;
   d91c4:	8883      	ldrh	r3, [r0, #4]
{
   d91c6:	4604      	mov	r4, r0
  if (_cnt == 0) return NAN;
   d91c8:	b1b3      	cbz	r3, d91f8 <_ZN13RunningMedian9getMedianEv+0x36>
  if (_sorted == false) sort();
   d91ca:	7803      	ldrb	r3, [r0, #0]
   d91cc:	b90b      	cbnz	r3, d91d2 <_ZN13RunningMedian9getMedianEv+0x10>
   d91ce:	f7ff ffc9 	bl	d9164 <_ZN13RunningMedian4sortEv>
  if (_cnt & 0x01) return _ar[_p[_cnt/2]];
   d91d2:	88a1      	ldrh	r1, [r4, #4]
   d91d4:	084a      	lsrs	r2, r1, #1
   d91d6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   d91da:	07c9      	lsls	r1, r1, #31
   d91dc:	f8b2 3582 	ldrh.w	r3, [r2, #1410]	; 0x582
   d91e0:	f103 0304 	add.w	r3, r3, #4
   d91e4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   d91e8:	d406      	bmi.n	d91f8 <_ZN13RunningMedian9getMedianEv+0x36>
  else return (_ar[_p[_cnt/2]] + _ar[_p[_cnt/2 - 1]]) / 2;
   d91ea:	f8b2 2580 	ldrh.w	r2, [r2, #1408]	; 0x580
   d91ee:	3204      	adds	r2, #4
   d91f0:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
   d91f4:	4413      	add	r3, r2
   d91f6:	085b      	lsrs	r3, r3, #1
}
   d91f8:	4618      	mov	r0, r3
   d91fa:	bd10      	pop	{r4, pc}

000d91fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d91fc:	b508      	push	{r3, lr}
   d91fe:	4b02      	ldr	r3, [pc, #8]	; (d9208 <netdb_freeaddrinfo+0xc>)
   d9200:	681b      	ldr	r3, [r3, #0]
   d9202:	689b      	ldr	r3, [r3, #8]
   d9204:	9301      	str	r3, [sp, #4]
   d9206:	bd08      	pop	{r3, pc}
   d9208:	00030268 	.word	0x00030268

000d920c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d920c:	b508      	push	{r3, lr}
   d920e:	4b02      	ldr	r3, [pc, #8]	; (d9218 <netdb_getaddrinfo+0xc>)
   d9210:	681b      	ldr	r3, [r3, #0]
   d9212:	68db      	ldr	r3, [r3, #12]
   d9214:	9301      	str	r3, [sp, #4]
   d9216:	bd08      	pop	{r3, pc}
   d9218:	00030268 	.word	0x00030268

000d921c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d921c:	b508      	push	{r3, lr}
   d921e:	4b02      	ldr	r3, [pc, #8]	; (d9228 <HAL_Validate_Pin_Function+0xc>)
   d9220:	681b      	ldr	r3, [r3, #0]
   d9222:	685b      	ldr	r3, [r3, #4]
   d9224:	9301      	str	r3, [sp, #4]
   d9226:	bd08      	pop	{r3, pc}
   d9228:	0003022c 	.word	0x0003022c

000d922c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d922c:	b508      	push	{r3, lr}
   d922e:	4b02      	ldr	r3, [pc, #8]	; (d9238 <HAL_Pin_Mode+0xc>)
   d9230:	681b      	ldr	r3, [r3, #0]
   d9232:	689b      	ldr	r3, [r3, #8]
   d9234:	9301      	str	r3, [sp, #4]
   d9236:	bd08      	pop	{r3, pc}
   d9238:	0003022c 	.word	0x0003022c

000d923c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d923c:	b508      	push	{r3, lr}
   d923e:	4b02      	ldr	r3, [pc, #8]	; (d9248 <HAL_Get_Pin_Mode+0xc>)
   d9240:	681b      	ldr	r3, [r3, #0]
   d9242:	68db      	ldr	r3, [r3, #12]
   d9244:	9301      	str	r3, [sp, #4]
   d9246:	bd08      	pop	{r3, pc}
   d9248:	0003022c 	.word	0x0003022c

000d924c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d924c:	b508      	push	{r3, lr}
   d924e:	4b02      	ldr	r3, [pc, #8]	; (d9258 <HAL_GPIO_Write+0xc>)
   d9250:	681b      	ldr	r3, [r3, #0]
   d9252:	691b      	ldr	r3, [r3, #16]
   d9254:	9301      	str	r3, [sp, #4]
   d9256:	bd08      	pop	{r3, pc}
   d9258:	0003022c 	.word	0x0003022c

000d925c <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d925c:	b508      	push	{r3, lr}
   d925e:	4b02      	ldr	r3, [pc, #8]	; (d9268 <HAL_Interrupts_Attach+0xc>)
   d9260:	681b      	ldr	r3, [r3, #0]
   d9262:	699b      	ldr	r3, [r3, #24]
   d9264:	9301      	str	r3, [sp, #4]
   d9266:	bd08      	pop	{r3, pc}
   d9268:	0003022c 	.word	0x0003022c

000d926c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d926c:	b508      	push	{r3, lr}
   d926e:	4b02      	ldr	r3, [pc, #8]	; (d9278 <HAL_Interrupts_Detach+0xc>)
   d9270:	681b      	ldr	r3, [r3, #0]
   d9272:	69db      	ldr	r3, [r3, #28]
   d9274:	9301      	str	r3, [sp, #4]
   d9276:	bd08      	pop	{r3, pc}
   d9278:	0003022c 	.word	0x0003022c

000d927c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d927c:	b508      	push	{r3, lr}
   d927e:	4b02      	ldr	r3, [pc, #8]	; (d9288 <hal_adc_read+0xc>)
   d9280:	681b      	ldr	r3, [r3, #0]
   d9282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9284:	9301      	str	r3, [sp, #4]
   d9286:	bd08      	pop	{r3, pc}
   d9288:	0003022c 	.word	0x0003022c

000d928c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d928c:	b508      	push	{r3, lr}
   d928e:	4b02      	ldr	r3, [pc, #8]	; (d9298 <HAL_RNG_GetRandomNumber+0xc>)
   d9290:	681b      	ldr	r3, [r3, #0]
   d9292:	685b      	ldr	r3, [r3, #4]
   d9294:	9301      	str	r3, [sp, #4]
   d9296:	bd08      	pop	{r3, pc}
   d9298:	00030218 	.word	0x00030218

000d929c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d929c:	b508      	push	{r3, lr}
   d929e:	4b02      	ldr	r3, [pc, #8]	; (d92a8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d92a0:	681b      	ldr	r3, [r3, #0]
   d92a2:	691b      	ldr	r3, [r3, #16]
   d92a4:	9301      	str	r3, [sp, #4]
   d92a6:	bd08      	pop	{r3, pc}
   d92a8:	00030218 	.word	0x00030218

000d92ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d92ac:	b508      	push	{r3, lr}
   d92ae:	4b02      	ldr	r3, [pc, #8]	; (d92b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d92b0:	681b      	ldr	r3, [r3, #0]
   d92b2:	695b      	ldr	r3, [r3, #20]
   d92b4:	9301      	str	r3, [sp, #4]
   d92b6:	bd08      	pop	{r3, pc}
   d92b8:	00030218 	.word	0x00030218

000d92bc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d92bc:	b508      	push	{r3, lr}
   d92be:	4b02      	ldr	r3, [pc, #8]	; (d92c8 <hal_rtc_time_is_valid+0xc>)
   d92c0:	681b      	ldr	r3, [r3, #0]
   d92c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d92c4:	9301      	str	r3, [sp, #4]
   d92c6:	bd08      	pop	{r3, pc}
   d92c8:	00030218 	.word	0x00030218

000d92cc <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d92cc:	b508      	push	{r3, lr}
   d92ce:	4b02      	ldr	r3, [pc, #8]	; (d92d8 <hal_timer_millis+0xc>)
   d92d0:	681b      	ldr	r3, [r3, #0]
   d92d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d92d4:	9301      	str	r3, [sp, #4]
   d92d6:	bd08      	pop	{r3, pc}
   d92d8:	00030218 	.word	0x00030218

000d92dc <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d92dc:	b508      	push	{r3, lr}
   d92de:	4b02      	ldr	r3, [pc, #8]	; (d92e8 <hal_rtc_get_time+0xc>)
   d92e0:	681b      	ldr	r3, [r3, #0]
   d92e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d92e4:	9301      	str	r3, [sp, #4]
   d92e6:	bd08      	pop	{r3, pc}
   d92e8:	00030218 	.word	0x00030218

000d92ec <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d92ec:	b508      	push	{r3, lr}
   d92ee:	4b02      	ldr	r3, [pc, #8]	; (d92f8 <os_thread_yield+0xc>)
   d92f0:	681b      	ldr	r3, [r3, #0]
   d92f2:	68db      	ldr	r3, [r3, #12]
   d92f4:	9301      	str	r3, [sp, #4]
   d92f6:	bd08      	pop	{r3, pc}
   d92f8:	00030248 	.word	0x00030248

000d92fc <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d92fc:	b508      	push	{r3, lr}
   d92fe:	4b02      	ldr	r3, [pc, #8]	; (d9308 <os_thread_scheduling+0xc>)
   d9300:	681b      	ldr	r3, [r3, #0]
   d9302:	69db      	ldr	r3, [r3, #28]
   d9304:	9301      	str	r3, [sp, #4]
   d9306:	bd08      	pop	{r3, pc}
   d9308:	00030248 	.word	0x00030248

000d930c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d930c:	b508      	push	{r3, lr}
   d930e:	4b02      	ldr	r3, [pc, #8]	; (d9318 <os_timer_create+0xc>)
   d9310:	681b      	ldr	r3, [r3, #0]
   d9312:	6a1b      	ldr	r3, [r3, #32]
   d9314:	9301      	str	r3, [sp, #4]
   d9316:	bd08      	pop	{r3, pc}
   d9318:	00030248 	.word	0x00030248

000d931c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d931c:	b508      	push	{r3, lr}
   d931e:	4b02      	ldr	r3, [pc, #8]	; (d9328 <os_timer_destroy+0xc>)
   d9320:	681b      	ldr	r3, [r3, #0]
   d9322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9324:	9301      	str	r3, [sp, #4]
   d9326:	bd08      	pop	{r3, pc}
   d9328:	00030248 	.word	0x00030248

000d932c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d932c:	b508      	push	{r3, lr}
   d932e:	4b02      	ldr	r3, [pc, #8]	; (d9338 <os_timer_get_id+0xc>)
   d9330:	681b      	ldr	r3, [r3, #0]
   d9332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9334:	9301      	str	r3, [sp, #4]
   d9336:	bd08      	pop	{r3, pc}
   d9338:	00030248 	.word	0x00030248

000d933c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d933c:	b508      	push	{r3, lr}
   d933e:	4b02      	ldr	r3, [pc, #8]	; (d9348 <os_timer_change+0xc>)
   d9340:	681b      	ldr	r3, [r3, #0]
   d9342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9344:	9301      	str	r3, [sp, #4]
   d9346:	bd08      	pop	{r3, pc}
   d9348:	00030248 	.word	0x00030248

000d934c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d934c:	b508      	push	{r3, lr}
   d934e:	4b02      	ldr	r3, [pc, #8]	; (d9358 <os_mutex_recursive_create+0xc>)
   d9350:	681b      	ldr	r3, [r3, #0]
   d9352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9354:	9301      	str	r3, [sp, #4]
   d9356:	bd08      	pop	{r3, pc}
   d9358:	00030248 	.word	0x00030248

000d935c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d935c:	b508      	push	{r3, lr}
   d935e:	4b02      	ldr	r3, [pc, #8]	; (d9368 <os_mutex_recursive_destroy+0xc>)
   d9360:	681b      	ldr	r3, [r3, #0]
   d9362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9364:	9301      	str	r3, [sp, #4]
   d9366:	bd08      	pop	{r3, pc}
   d9368:	00030248 	.word	0x00030248

000d936c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d936c:	b508      	push	{r3, lr}
   d936e:	4b02      	ldr	r3, [pc, #8]	; (d9378 <os_timer_set_id+0xc>)
   d9370:	681b      	ldr	r3, [r3, #0]
   d9372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d9374:	9301      	str	r3, [sp, #4]
   d9376:	bd08      	pop	{r3, pc}
   d9378:	00030248 	.word	0x00030248

000d937c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d937c:	b508      	push	{r3, lr}
   d937e:	4b02      	ldr	r3, [pc, #8]	; (d9388 <inet_inet_ntop+0xc>)
   d9380:	681b      	ldr	r3, [r3, #0]
   d9382:	695b      	ldr	r3, [r3, #20]
   d9384:	9301      	str	r3, [sp, #4]
   d9386:	bd08      	pop	{r3, pc}
   d9388:	00030264 	.word	0x00030264

000d938c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d938c:	b508      	push	{r3, lr}
   d938e:	4b02      	ldr	r3, [pc, #8]	; (d9398 <hal_usart_init+0xc>)
   d9390:	681b      	ldr	r3, [r3, #0]
   d9392:	681b      	ldr	r3, [r3, #0]
   d9394:	9301      	str	r3, [sp, #4]
   d9396:	bd08      	pop	{r3, pc}
   d9398:	0003023c 	.word	0x0003023c

000d939c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d939c:	b508      	push	{r3, lr}
   d939e:	4b02      	ldr	r3, [pc, #8]	; (d93a8 <hal_usart_write+0xc>)
   d93a0:	681b      	ldr	r3, [r3, #0]
   d93a2:	68db      	ldr	r3, [r3, #12]
   d93a4:	9301      	str	r3, [sp, #4]
   d93a6:	bd08      	pop	{r3, pc}
   d93a8:	0003023c 	.word	0x0003023c

000d93ac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d93ac:	b508      	push	{r3, lr}
   d93ae:	4b02      	ldr	r3, [pc, #8]	; (d93b8 <hal_usart_available+0xc>)
   d93b0:	681b      	ldr	r3, [r3, #0]
   d93b2:	691b      	ldr	r3, [r3, #16]
   d93b4:	9301      	str	r3, [sp, #4]
   d93b6:	bd08      	pop	{r3, pc}
   d93b8:	0003023c 	.word	0x0003023c

000d93bc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d93bc:	b508      	push	{r3, lr}
   d93be:	4b02      	ldr	r3, [pc, #8]	; (d93c8 <hal_usart_read+0xc>)
   d93c0:	681b      	ldr	r3, [r3, #0]
   d93c2:	695b      	ldr	r3, [r3, #20]
   d93c4:	9301      	str	r3, [sp, #4]
   d93c6:	bd08      	pop	{r3, pc}
   d93c8:	0003023c 	.word	0x0003023c

000d93cc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d93cc:	b508      	push	{r3, lr}
   d93ce:	4b02      	ldr	r3, [pc, #8]	; (d93d8 <hal_usart_peek+0xc>)
   d93d0:	681b      	ldr	r3, [r3, #0]
   d93d2:	699b      	ldr	r3, [r3, #24]
   d93d4:	9301      	str	r3, [sp, #4]
   d93d6:	bd08      	pop	{r3, pc}
   d93d8:	0003023c 	.word	0x0003023c

000d93dc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d93dc:	b508      	push	{r3, lr}
   d93de:	4b02      	ldr	r3, [pc, #8]	; (d93e8 <hal_usart_flush+0xc>)
   d93e0:	681b      	ldr	r3, [r3, #0]
   d93e2:	69db      	ldr	r3, [r3, #28]
   d93e4:	9301      	str	r3, [sp, #4]
   d93e6:	bd08      	pop	{r3, pc}
   d93e8:	0003023c 	.word	0x0003023c

000d93ec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d93ec:	b508      	push	{r3, lr}
   d93ee:	4b02      	ldr	r3, [pc, #8]	; (d93f8 <hal_usart_is_enabled+0xc>)
   d93f0:	681b      	ldr	r3, [r3, #0]
   d93f2:	6a1b      	ldr	r3, [r3, #32]
   d93f4:	9301      	str	r3, [sp, #4]
   d93f6:	bd08      	pop	{r3, pc}
   d93f8:	0003023c 	.word	0x0003023c

000d93fc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d93fc:	b508      	push	{r3, lr}
   d93fe:	4b02      	ldr	r3, [pc, #8]	; (d9408 <hal_usart_available_data_for_write+0xc>)
   d9400:	681b      	ldr	r3, [r3, #0]
   d9402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9404:	9301      	str	r3, [sp, #4]
   d9406:	bd08      	pop	{r3, pc}
   d9408:	0003023c 	.word	0x0003023c

000d940c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d940c:	b508      	push	{r3, lr}
   d940e:	4b02      	ldr	r3, [pc, #8]	; (d9418 <hal_usart_begin_config+0xc>)
   d9410:	681b      	ldr	r3, [r3, #0]
   d9412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9414:	9301      	str	r3, [sp, #4]
   d9416:	bd08      	pop	{r3, pc}
   d9418:	0003023c 	.word	0x0003023c

000d941c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d941c:	b508      	push	{r3, lr}
   d941e:	4b02      	ldr	r3, [pc, #8]	; (d9428 <hal_i2c_begin+0xc>)
   d9420:	681b      	ldr	r3, [r3, #0]
   d9422:	68db      	ldr	r3, [r3, #12]
   d9424:	9301      	str	r3, [sp, #4]
   d9426:	bd08      	pop	{r3, pc}
   d9428:	00030228 	.word	0x00030228

000d942c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d942c:	b508      	push	{r3, lr}
   d942e:	4b02      	ldr	r3, [pc, #8]	; (d9438 <hal_i2c_begin_transmission+0xc>)
   d9430:	681b      	ldr	r3, [r3, #0]
   d9432:	699b      	ldr	r3, [r3, #24]
   d9434:	9301      	str	r3, [sp, #4]
   d9436:	bd08      	pop	{r3, pc}
   d9438:	00030228 	.word	0x00030228

000d943c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d943c:	b508      	push	{r3, lr}
   d943e:	4b02      	ldr	r3, [pc, #8]	; (d9448 <hal_i2c_end_transmission+0xc>)
   d9440:	681b      	ldr	r3, [r3, #0]
   d9442:	69db      	ldr	r3, [r3, #28]
   d9444:	9301      	str	r3, [sp, #4]
   d9446:	bd08      	pop	{r3, pc}
   d9448:	00030228 	.word	0x00030228

000d944c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d944c:	b508      	push	{r3, lr}
   d944e:	4b02      	ldr	r3, [pc, #8]	; (d9458 <hal_i2c_write+0xc>)
   d9450:	681b      	ldr	r3, [r3, #0]
   d9452:	6a1b      	ldr	r3, [r3, #32]
   d9454:	9301      	str	r3, [sp, #4]
   d9456:	bd08      	pop	{r3, pc}
   d9458:	00030228 	.word	0x00030228

000d945c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d945c:	b508      	push	{r3, lr}
   d945e:	4b02      	ldr	r3, [pc, #8]	; (d9468 <hal_i2c_available+0xc>)
   d9460:	681b      	ldr	r3, [r3, #0]
   d9462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9464:	9301      	str	r3, [sp, #4]
   d9466:	bd08      	pop	{r3, pc}
   d9468:	00030228 	.word	0x00030228

000d946c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d946c:	b508      	push	{r3, lr}
   d946e:	4b02      	ldr	r3, [pc, #8]	; (d9478 <hal_i2c_read+0xc>)
   d9470:	681b      	ldr	r3, [r3, #0]
   d9472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9474:	9301      	str	r3, [sp, #4]
   d9476:	bd08      	pop	{r3, pc}
   d9478:	00030228 	.word	0x00030228

000d947c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d947c:	b508      	push	{r3, lr}
   d947e:	4b02      	ldr	r3, [pc, #8]	; (d9488 <hal_i2c_peek+0xc>)
   d9480:	681b      	ldr	r3, [r3, #0]
   d9482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9484:	9301      	str	r3, [sp, #4]
   d9486:	bd08      	pop	{r3, pc}
   d9488:	00030228 	.word	0x00030228

000d948c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d948c:	b508      	push	{r3, lr}
   d948e:	4b02      	ldr	r3, [pc, #8]	; (d9498 <hal_i2c_flush+0xc>)
   d9490:	681b      	ldr	r3, [r3, #0]
   d9492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9494:	9301      	str	r3, [sp, #4]
   d9496:	bd08      	pop	{r3, pc}
   d9498:	00030228 	.word	0x00030228

000d949c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d949c:	b508      	push	{r3, lr}
   d949e:	4b02      	ldr	r3, [pc, #8]	; (d94a8 <hal_i2c_is_enabled+0xc>)
   d94a0:	681b      	ldr	r3, [r3, #0]
   d94a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d94a4:	9301      	str	r3, [sp, #4]
   d94a6:	bd08      	pop	{r3, pc}
   d94a8:	00030228 	.word	0x00030228

000d94ac <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d94ac:	b508      	push	{r3, lr}
   d94ae:	4b02      	ldr	r3, [pc, #8]	; (d94b8 <hal_i2c_init+0xc>)
   d94b0:	681b      	ldr	r3, [r3, #0]
   d94b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d94b4:	9301      	str	r3, [sp, #4]
   d94b6:	bd08      	pop	{r3, pc}
   d94b8:	00030228 	.word	0x00030228

000d94bc <hal_i2c_reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
   d94bc:	b508      	push	{r3, lr}
   d94be:	4b02      	ldr	r3, [pc, #8]	; (d94c8 <hal_i2c_reset+0xc>)
   d94c0:	681b      	ldr	r3, [r3, #0]
   d94c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d94c4:	9301      	str	r3, [sp, #4]
   d94c6:	bd08      	pop	{r3, pc}
   d94c8:	00030228 	.word	0x00030228

000d94cc <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d94cc:	b508      	push	{r3, lr}
   d94ce:	4b02      	ldr	r3, [pc, #8]	; (d94d8 <hal_i2c_lock+0xc>)
   d94d0:	681b      	ldr	r3, [r3, #0]
   d94d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d94d4:	9301      	str	r3, [sp, #4]
   d94d6:	bd08      	pop	{r3, pc}
   d94d8:	00030228 	.word	0x00030228

000d94dc <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d94dc:	b508      	push	{r3, lr}
   d94de:	4b02      	ldr	r3, [pc, #8]	; (d94e8 <hal_i2c_unlock+0xc>)
   d94e0:	681b      	ldr	r3, [r3, #0]
   d94e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d94e4:	9301      	str	r3, [sp, #4]
   d94e6:	bd08      	pop	{r3, pc}
   d94e8:	00030228 	.word	0x00030228

000d94ec <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d94ec:	b508      	push	{r3, lr}
   d94ee:	4b02      	ldr	r3, [pc, #8]	; (d94f8 <hal_i2c_request_ex+0xc>)
   d94f0:	681b      	ldr	r3, [r3, #0]
   d94f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d94f4:	9301      	str	r3, [sp, #4]
   d94f6:	bd08      	pop	{r3, pc}
   d94f8:	00030228 	.word	0x00030228

000d94fc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d94fc:	b508      	push	{r3, lr}
   d94fe:	4b02      	ldr	r3, [pc, #8]	; (d9508 <hal_spi_begin+0xc>)
   d9500:	681b      	ldr	r3, [r3, #0]
   d9502:	681b      	ldr	r3, [r3, #0]
   d9504:	9301      	str	r3, [sp, #4]
   d9506:	bd08      	pop	{r3, pc}
   d9508:	00030230 	.word	0x00030230

000d950c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d950c:	b508      	push	{r3, lr}
   d950e:	4b02      	ldr	r3, [pc, #8]	; (d9518 <hal_spi_transfer+0xc>)
   d9510:	681b      	ldr	r3, [r3, #0]
   d9512:	695b      	ldr	r3, [r3, #20]
   d9514:	9301      	str	r3, [sp, #4]
   d9516:	bd08      	pop	{r3, pc}
   d9518:	00030230 	.word	0x00030230

000d951c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d951c:	b508      	push	{r3, lr}
   d951e:	4b02      	ldr	r3, [pc, #8]	; (d9528 <hal_spi_init+0xc>)
   d9520:	681b      	ldr	r3, [r3, #0]
   d9522:	69db      	ldr	r3, [r3, #28]
   d9524:	9301      	str	r3, [sp, #4]
   d9526:	bd08      	pop	{r3, pc}
   d9528:	00030230 	.word	0x00030230

000d952c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d952c:	b508      	push	{r3, lr}
   d952e:	4b02      	ldr	r3, [pc, #8]	; (d9538 <hal_spi_is_enabled+0xc>)
   d9530:	681b      	ldr	r3, [r3, #0]
   d9532:	6a1b      	ldr	r3, [r3, #32]
   d9534:	9301      	str	r3, [sp, #4]
   d9536:	bd08      	pop	{r3, pc}
   d9538:	00030230 	.word	0x00030230

000d953c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d953c:	b508      	push	{r3, lr}
   d953e:	4b02      	ldr	r3, [pc, #8]	; (d9548 <hal_spi_info+0xc>)
   d9540:	681b      	ldr	r3, [r3, #0]
   d9542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9544:	9301      	str	r3, [sp, #4]
   d9546:	bd08      	pop	{r3, pc}
   d9548:	00030230 	.word	0x00030230

000d954c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d954c:	b508      	push	{r3, lr}
   d954e:	4b02      	ldr	r3, [pc, #8]	; (d9558 <hal_spi_transfer_dma+0xc>)
   d9550:	681b      	ldr	r3, [r3, #0]
   d9552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9554:	9301      	str	r3, [sp, #4]
   d9556:	bd08      	pop	{r3, pc}
   d9558:	00030230 	.word	0x00030230

000d955c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d955c:	b508      	push	{r3, lr}
   d955e:	4b02      	ldr	r3, [pc, #8]	; (d9568 <hal_spi_transfer_dma_status+0xc>)
   d9560:	681b      	ldr	r3, [r3, #0]
   d9562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d9564:	9301      	str	r3, [sp, #4]
   d9566:	bd08      	pop	{r3, pc}
   d9568:	00030230 	.word	0x00030230

000d956c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d956c:	b508      	push	{r3, lr}
   d956e:	4b02      	ldr	r3, [pc, #8]	; (d9578 <hal_spi_set_settings+0xc>)
   d9570:	681b      	ldr	r3, [r3, #0]
   d9572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d9574:	9301      	str	r3, [sp, #4]
   d9576:	bd08      	pop	{r3, pc}
   d9578:	00030230 	.word	0x00030230

000d957c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d957c:	b508      	push	{r3, lr}
   d957e:	4b02      	ldr	r3, [pc, #8]	; (d9588 <hal_spi_acquire+0xc>)
   d9580:	681b      	ldr	r3, [r3, #0]
   d9582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9584:	9301      	str	r3, [sp, #4]
   d9586:	bd08      	pop	{r3, pc}
   d9588:	00030230 	.word	0x00030230

000d958c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d958c:	b508      	push	{r3, lr}
   d958e:	4b02      	ldr	r3, [pc, #8]	; (d9598 <hal_spi_release+0xc>)
   d9590:	681b      	ldr	r3, [r3, #0]
   d9592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9594:	9301      	str	r3, [sp, #4]
   d9596:	bd08      	pop	{r3, pc}
   d9598:	00030230 	.word	0x00030230

000d959c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d959c:	b508      	push	{r3, lr}
   d959e:	4b02      	ldr	r3, [pc, #8]	; (d95a8 <HAL_USB_USART_Init+0xc>)
   d95a0:	681b      	ldr	r3, [r3, #0]
   d95a2:	681b      	ldr	r3, [r3, #0]
   d95a4:	9301      	str	r3, [sp, #4]
   d95a6:	bd08      	pop	{r3, pc}
   d95a8:	0003024c 	.word	0x0003024c

000d95ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d95ac:	b508      	push	{r3, lr}
   d95ae:	4b02      	ldr	r3, [pc, #8]	; (d95b8 <HAL_USB_USART_Begin+0xc>)
   d95b0:	681b      	ldr	r3, [r3, #0]
   d95b2:	685b      	ldr	r3, [r3, #4]
   d95b4:	9301      	str	r3, [sp, #4]
   d95b6:	bd08      	pop	{r3, pc}
   d95b8:	0003024c 	.word	0x0003024c

000d95bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d95bc:	b508      	push	{r3, lr}
   d95be:	4b02      	ldr	r3, [pc, #8]	; (d95c8 <HAL_USB_USART_Available_Data+0xc>)
   d95c0:	681b      	ldr	r3, [r3, #0]
   d95c2:	691b      	ldr	r3, [r3, #16]
   d95c4:	9301      	str	r3, [sp, #4]
   d95c6:	bd08      	pop	{r3, pc}
   d95c8:	0003024c 	.word	0x0003024c

000d95cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d95cc:	b508      	push	{r3, lr}
   d95ce:	4b02      	ldr	r3, [pc, #8]	; (d95d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d95d0:	681b      	ldr	r3, [r3, #0]
   d95d2:	695b      	ldr	r3, [r3, #20]
   d95d4:	9301      	str	r3, [sp, #4]
   d95d6:	bd08      	pop	{r3, pc}
   d95d8:	0003024c 	.word	0x0003024c

000d95dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d95dc:	b508      	push	{r3, lr}
   d95de:	4b02      	ldr	r3, [pc, #8]	; (d95e8 <HAL_USB_USART_Receive_Data+0xc>)
   d95e0:	681b      	ldr	r3, [r3, #0]
   d95e2:	699b      	ldr	r3, [r3, #24]
   d95e4:	9301      	str	r3, [sp, #4]
   d95e6:	bd08      	pop	{r3, pc}
   d95e8:	0003024c 	.word	0x0003024c

000d95ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d95ec:	b508      	push	{r3, lr}
   d95ee:	4b02      	ldr	r3, [pc, #8]	; (d95f8 <HAL_USB_USART_Send_Data+0xc>)
   d95f0:	681b      	ldr	r3, [r3, #0]
   d95f2:	69db      	ldr	r3, [r3, #28]
   d95f4:	9301      	str	r3, [sp, #4]
   d95f6:	bd08      	pop	{r3, pc}
   d95f8:	0003024c 	.word	0x0003024c

000d95fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d95fc:	b508      	push	{r3, lr}
   d95fe:	4b02      	ldr	r3, [pc, #8]	; (d9608 <HAL_USB_USART_Flush_Data+0xc>)
   d9600:	681b      	ldr	r3, [r3, #0]
   d9602:	6a1b      	ldr	r3, [r3, #32]
   d9604:	9301      	str	r3, [sp, #4]
   d9606:	bd08      	pop	{r3, pc}
   d9608:	0003024c 	.word	0x0003024c

000d960c <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   d960c:	b508      	push	{r3, lr}
   d960e:	4b03      	ldr	r3, [pc, #12]	; (d961c <led_set_status_active+0x10>)
   d9610:	681b      	ldr	r3, [r3, #0]
   d9612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9616:	9301      	str	r3, [sp, #4]
   d9618:	bd08      	pop	{r3, pc}
   d961a:	0000      	.short	0x0000
   d961c:	00030260 	.word	0x00030260

000d9620 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d9620:	b508      	push	{r3, lr}
   d9622:	4b02      	ldr	r3, [pc, #8]	; (d962c <system_mode+0xc>)
   d9624:	681b      	ldr	r3, [r3, #0]
   d9626:	681b      	ldr	r3, [r3, #0]
   d9628:	9301      	str	r3, [sp, #4]
   d962a:	bd08      	pop	{r3, pc}
   d962c:	00030220 	.word	0x00030220

000d9630 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d9630:	b508      	push	{r3, lr}
   d9632:	4b02      	ldr	r3, [pc, #8]	; (d963c <set_system_mode+0xc>)
   d9634:	681b      	ldr	r3, [r3, #0]
   d9636:	685b      	ldr	r3, [r3, #4]
   d9638:	9301      	str	r3, [sp, #4]
   d963a:	bd08      	pop	{r3, pc}
   d963c:	00030220 	.word	0x00030220

000d9640 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d9640:	b508      	push	{r3, lr}
   d9642:	4b02      	ldr	r3, [pc, #8]	; (d964c <system_delay_ms+0xc>)
   d9644:	681b      	ldr	r3, [r3, #0]
   d9646:	695b      	ldr	r3, [r3, #20]
   d9648:	9301      	str	r3, [sp, #4]
   d964a:	bd08      	pop	{r3, pc}
   d964c:	00030220 	.word	0x00030220

000d9650 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d9650:	b508      	push	{r3, lr}
   d9652:	4b02      	ldr	r3, [pc, #8]	; (d965c <system_thread_set_state+0xc>)
   d9654:	681b      	ldr	r3, [r3, #0]
   d9656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9658:	9301      	str	r3, [sp, #4]
   d965a:	bd08      	pop	{r3, pc}
   d965c:	00030220 	.word	0x00030220

000d9660 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d9660:	b508      	push	{r3, lr}
   d9662:	4b02      	ldr	r3, [pc, #8]	; (d966c <application_thread_current+0xc>)
   d9664:	681b      	ldr	r3, [r3, #0]
   d9666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9668:	9301      	str	r3, [sp, #4]
   d966a:	bd08      	pop	{r3, pc}
   d966c:	00030220 	.word	0x00030220

000d9670 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d9670:	b508      	push	{r3, lr}
   d9672:	4b02      	ldr	r3, [pc, #8]	; (d967c <application_thread_invoke+0xc>)
   d9674:	681b      	ldr	r3, [r3, #0]
   d9676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d9678:	9301      	str	r3, [sp, #4]
   d967a:	bd08      	pop	{r3, pc}
   d967c:	00030220 	.word	0x00030220

000d9680 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d9680:	b508      	push	{r3, lr}
   d9682:	4b02      	ldr	r3, [pc, #8]	; (d968c <system_thread_get_state+0xc>)
   d9684:	681b      	ldr	r3, [r3, #0]
   d9686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d9688:	9301      	str	r3, [sp, #4]
   d968a:	bd08      	pop	{r3, pc}
   d968c:	00030220 	.word	0x00030220

000d9690 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   d9690:	b508      	push	{r3, lr}
   d9692:	4b02      	ldr	r3, [pc, #8]	; (d969c <led_pattern_period+0xc>)
   d9694:	681b      	ldr	r3, [r3, #0]
   d9696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d9698:	9301      	str	r3, [sp, #4]
   d969a:	bd08      	pop	{r3, pc}
   d969c:	00030220 	.word	0x00030220

000d96a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d96a0:	b508      	push	{r3, lr}
   d96a2:	4b03      	ldr	r3, [pc, #12]	; (d96b0 <system_ctrl_set_app_request_handler+0x10>)
   d96a4:	681b      	ldr	r3, [r3, #0]
   d96a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d96aa:	9301      	str	r3, [sp, #4]
   d96ac:	bd08      	pop	{r3, pc}
   d96ae:	0000      	.short	0x0000
   d96b0:	00030220 	.word	0x00030220

000d96b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d96b4:	b508      	push	{r3, lr}
   d96b6:	4b03      	ldr	r3, [pc, #12]	; (d96c4 <system_ctrl_set_result+0x10>)
   d96b8:	681b      	ldr	r3, [r3, #0]
   d96ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d96be:	9301      	str	r3, [sp, #4]
   d96c0:	bd08      	pop	{r3, pc}
   d96c2:	0000      	.short	0x0000
   d96c4:	00030220 	.word	0x00030220

000d96c8 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d96c8:	b508      	push	{r3, lr}
   d96ca:	4b03      	ldr	r3, [pc, #12]	; (d96d8 <system_reset+0x10>)
   d96cc:	681b      	ldr	r3, [r3, #0]
   d96ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d96d2:	9301      	str	r3, [sp, #4]
   d96d4:	bd08      	pop	{r3, pc}
   d96d6:	0000      	.short	0x0000
   d96d8:	00030220 	.word	0x00030220

000d96dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d96dc:	b508      	push	{r3, lr}
   d96de:	4b02      	ldr	r3, [pc, #8]	; (d96e8 <network_connect+0xc>)
   d96e0:	681b      	ldr	r3, [r3, #0]
   d96e2:	685b      	ldr	r3, [r3, #4]
   d96e4:	9301      	str	r3, [sp, #4]
   d96e6:	bd08      	pop	{r3, pc}
   d96e8:	00030240 	.word	0x00030240

000d96ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d96ec:	b508      	push	{r3, lr}
   d96ee:	4b02      	ldr	r3, [pc, #8]	; (d96f8 <network_connecting+0xc>)
   d96f0:	681b      	ldr	r3, [r3, #0]
   d96f2:	689b      	ldr	r3, [r3, #8]
   d96f4:	9301      	str	r3, [sp, #4]
   d96f6:	bd08      	pop	{r3, pc}
   d96f8:	00030240 	.word	0x00030240

000d96fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d96fc:	b508      	push	{r3, lr}
   d96fe:	4b02      	ldr	r3, [pc, #8]	; (d9708 <network_disconnect+0xc>)
   d9700:	681b      	ldr	r3, [r3, #0]
   d9702:	68db      	ldr	r3, [r3, #12]
   d9704:	9301      	str	r3, [sp, #4]
   d9706:	bd08      	pop	{r3, pc}
   d9708:	00030240 	.word	0x00030240

000d970c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d970c:	b508      	push	{r3, lr}
   d970e:	4b02      	ldr	r3, [pc, #8]	; (d9718 <network_ready+0xc>)
   d9710:	681b      	ldr	r3, [r3, #0]
   d9712:	691b      	ldr	r3, [r3, #16]
   d9714:	9301      	str	r3, [sp, #4]
   d9716:	bd08      	pop	{r3, pc}
   d9718:	00030240 	.word	0x00030240

000d971c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d971c:	b508      	push	{r3, lr}
   d971e:	4b02      	ldr	r3, [pc, #8]	; (d9728 <network_on+0xc>)
   d9720:	681b      	ldr	r3, [r3, #0]
   d9722:	695b      	ldr	r3, [r3, #20]
   d9724:	9301      	str	r3, [sp, #4]
   d9726:	bd08      	pop	{r3, pc}
   d9728:	00030240 	.word	0x00030240

000d972c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d972c:	b508      	push	{r3, lr}
   d972e:	4b02      	ldr	r3, [pc, #8]	; (d9738 <network_off+0xc>)
   d9730:	681b      	ldr	r3, [r3, #0]
   d9732:	699b      	ldr	r3, [r3, #24]
   d9734:	9301      	str	r3, [sp, #4]
   d9736:	bd08      	pop	{r3, pc}
   d9738:	00030240 	.word	0x00030240

000d973c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d973c:	b508      	push	{r3, lr}
   d973e:	4b02      	ldr	r3, [pc, #8]	; (d9748 <network_listen+0xc>)
   d9740:	681b      	ldr	r3, [r3, #0]
   d9742:	69db      	ldr	r3, [r3, #28]
   d9744:	9301      	str	r3, [sp, #4]
   d9746:	bd08      	pop	{r3, pc}
   d9748:	00030240 	.word	0x00030240

000d974c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d974c:	b508      	push	{r3, lr}
   d974e:	4b02      	ldr	r3, [pc, #8]	; (d9758 <network_listening+0xc>)
   d9750:	681b      	ldr	r3, [r3, #0]
   d9752:	6a1b      	ldr	r3, [r3, #32]
   d9754:	9301      	str	r3, [sp, #4]
   d9756:	bd08      	pop	{r3, pc}
   d9758:	00030240 	.word	0x00030240

000d975c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d975c:	b508      	push	{r3, lr}
   d975e:	4b02      	ldr	r3, [pc, #8]	; (d9768 <network_set_listen_timeout+0xc>)
   d9760:	681b      	ldr	r3, [r3, #0]
   d9762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9764:	9301      	str	r3, [sp, #4]
   d9766:	bd08      	pop	{r3, pc}
   d9768:	00030240 	.word	0x00030240

000d976c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d976c:	b508      	push	{r3, lr}
   d976e:	4b02      	ldr	r3, [pc, #8]	; (d9778 <network_get_listen_timeout+0xc>)
   d9770:	681b      	ldr	r3, [r3, #0]
   d9772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d9774:	9301      	str	r3, [sp, #4]
   d9776:	bd08      	pop	{r3, pc}
   d9778:	00030240 	.word	0x00030240

000d977c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d977c:	b508      	push	{r3, lr}
   d977e:	4b02      	ldr	r3, [pc, #8]	; (d9788 <spark_variable+0xc>)
   d9780:	681b      	ldr	r3, [r3, #0]
   d9782:	681b      	ldr	r3, [r3, #0]
   d9784:	9301      	str	r3, [sp, #4]
   d9786:	bd08      	pop	{r3, pc}
   d9788:	00030244 	.word	0x00030244

000d978c <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d978c:	b508      	push	{r3, lr}
   d978e:	4b02      	ldr	r3, [pc, #8]	; (d9798 <spark_process+0xc>)
   d9790:	681b      	ldr	r3, [r3, #0]
   d9792:	689b      	ldr	r3, [r3, #8]
   d9794:	9301      	str	r3, [sp, #4]
   d9796:	bd08      	pop	{r3, pc}
   d9798:	00030244 	.word	0x00030244

000d979c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d979c:	b508      	push	{r3, lr}
   d979e:	4b02      	ldr	r3, [pc, #8]	; (d97a8 <spark_cloud_flag_connect+0xc>)
   d97a0:	681b      	ldr	r3, [r3, #0]
   d97a2:	68db      	ldr	r3, [r3, #12]
   d97a4:	9301      	str	r3, [sp, #4]
   d97a6:	bd08      	pop	{r3, pc}
   d97a8:	00030244 	.word	0x00030244

000d97ac <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d97ac:	b508      	push	{r3, lr}
   d97ae:	4b02      	ldr	r3, [pc, #8]	; (d97b8 <spark_cloud_flag_connected+0xc>)
   d97b0:	681b      	ldr	r3, [r3, #0]
   d97b2:	695b      	ldr	r3, [r3, #20]
   d97b4:	9301      	str	r3, [sp, #4]
   d97b6:	bd08      	pop	{r3, pc}
   d97b8:	00030244 	.word	0x00030244

000d97bc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d97bc:	b508      	push	{r3, lr}
   d97be:	4b02      	ldr	r3, [pc, #8]	; (d97c8 <spark_send_event+0xc>)
   d97c0:	681b      	ldr	r3, [r3, #0]
   d97c2:	6a1b      	ldr	r3, [r3, #32]
   d97c4:	9301      	str	r3, [sp, #4]
   d97c6:	bd08      	pop	{r3, pc}
   d97c8:	00030244 	.word	0x00030244

000d97cc <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d97cc:	b508      	push	{r3, lr}
   d97ce:	4b02      	ldr	r3, [pc, #8]	; (d97d8 <spark_sync_time_pending+0xc>)
   d97d0:	681b      	ldr	r3, [r3, #0]
   d97d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d97d4:	9301      	str	r3, [sp, #4]
   d97d6:	bd08      	pop	{r3, pc}
   d97d8:	00030244 	.word	0x00030244

000d97dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d97dc:	b508      	push	{r3, lr}
   d97de:	4b02      	ldr	r3, [pc, #8]	; (d97e8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d97e0:	681b      	ldr	r3, [r3, #0]
   d97e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d97e4:	9301      	str	r3, [sp, #4]
   d97e6:	bd08      	pop	{r3, pc}
   d97e8:	00030244 	.word	0x00030244

000d97ec <malloc>:
#include "newlib_impure.h"
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d97ec:	b508      	push	{r3, lr}
   d97ee:	4b02      	ldr	r3, [pc, #8]	; (d97f8 <malloc+0xc>)
   d97f0:	681b      	ldr	r3, [r3, #0]
   d97f2:	681b      	ldr	r3, [r3, #0]
   d97f4:	9301      	str	r3, [sp, #4]
   d97f6:	bd08      	pop	{r3, pc}
   d97f8:	0003021c 	.word	0x0003021c

000d97fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d97fc:	b508      	push	{r3, lr}
   d97fe:	4b02      	ldr	r3, [pc, #8]	; (d9808 <free+0xc>)
   d9800:	681b      	ldr	r3, [r3, #0]
   d9802:	685b      	ldr	r3, [r3, #4]
   d9804:	9301      	str	r3, [sp, #4]
   d9806:	bd08      	pop	{r3, pc}
   d9808:	0003021c 	.word	0x0003021c

000d980c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d980c:	b508      	push	{r3, lr}
   d980e:	4b02      	ldr	r3, [pc, #8]	; (d9818 <realloc+0xc>)
   d9810:	681b      	ldr	r3, [r3, #0]
   d9812:	689b      	ldr	r3, [r3, #8]
   d9814:	9301      	str	r3, [sp, #4]
   d9816:	bd08      	pop	{r3, pc}
   d9818:	0003021c 	.word	0x0003021c

000d981c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d981c:	b508      	push	{r3, lr}
   d981e:	4b02      	ldr	r3, [pc, #8]	; (d9828 <siprintf+0xc>)
   d9820:	681b      	ldr	r3, [r3, #0]
   d9822:	691b      	ldr	r3, [r3, #16]
   d9824:	9301      	str	r3, [sp, #4]
   d9826:	bd08      	pop	{r3, pc}
   d9828:	0003021c 	.word	0x0003021c

000d982c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d982c:	b508      	push	{r3, lr}
   d982e:	4b02      	ldr	r3, [pc, #8]	; (d9838 <siscanf+0xc>)
   d9830:	681b      	ldr	r3, [r3, #0]
   d9832:	699b      	ldr	r3, [r3, #24]
   d9834:	9301      	str	r3, [sp, #4]
   d9836:	bd08      	pop	{r3, pc}
   d9838:	0003021c 	.word	0x0003021c

000d983c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d983c:	b508      	push	{r3, lr}
   d983e:	4b02      	ldr	r3, [pc, #8]	; (d9848 <snprintf+0xc>)
   d9840:	681b      	ldr	r3, [r3, #0]
   d9842:	69db      	ldr	r3, [r3, #28]
   d9844:	9301      	str	r3, [sp, #4]
   d9846:	bd08      	pop	{r3, pc}
   d9848:	0003021c 	.word	0x0003021c

000d984c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d984c:	b508      	push	{r3, lr}
   d984e:	4b02      	ldr	r3, [pc, #8]	; (d9858 <sniprintf+0xc>)
   d9850:	681b      	ldr	r3, [r3, #0]
   d9852:	6a1b      	ldr	r3, [r3, #32]
   d9854:	9301      	str	r3, [sp, #4]
   d9856:	bd08      	pop	{r3, pc}
   d9858:	0003021c 	.word	0x0003021c

000d985c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d985c:	b508      	push	{r3, lr}
   d985e:	4b02      	ldr	r3, [pc, #8]	; (d9868 <vsnprintf+0xc>)
   d9860:	681b      	ldr	r3, [r3, #0]
   d9862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9864:	9301      	str	r3, [sp, #4]
   d9866:	bd08      	pop	{r3, pc}
   d9868:	0003021c 	.word	0x0003021c

000d986c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d986c:	b508      	push	{r3, lr}
   d986e:	4b02      	ldr	r3, [pc, #8]	; (d9878 <abort+0xc>)
   d9870:	681b      	ldr	r3, [r3, #0]
   d9872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9874:	9301      	str	r3, [sp, #4]
   d9876:	bd08      	pop	{r3, pc}
   d9878:	0003021c 	.word	0x0003021c

000d987c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d987c:	b508      	push	{r3, lr}
   d987e:	4b02      	ldr	r3, [pc, #8]	; (d9888 <_malloc_r+0xc>)
   d9880:	681b      	ldr	r3, [r3, #0]
   d9882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9884:	9301      	str	r3, [sp, #4]
   d9886:	bd08      	pop	{r3, pc}
   d9888:	0003021c 	.word	0x0003021c

000d988c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d988c:	b508      	push	{r3, lr}
   d988e:	4b02      	ldr	r3, [pc, #8]	; (d9898 <newlib_impure_ptr_callback+0xc>)
   d9890:	681b      	ldr	r3, [r3, #0]
   d9892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9894:	9301      	str	r3, [sp, #4]
   d9896:	bd08      	pop	{r3, pc}
   d9898:	0003021c 	.word	0x0003021c

000d989c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d989c:	2200      	movs	r2, #0
   d989e:	6840      	ldr	r0, [r0, #4]
   d98a0:	4611      	mov	r1, r2
   d98a2:	f7ff bf53 	b.w	d974c <network_listening>

000d98a6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d98a6:	2200      	movs	r2, #0
   d98a8:	6840      	ldr	r0, [r0, #4]
   d98aa:	4611      	mov	r1, r2
   d98ac:	f7ff bf5e 	b.w	d976c <network_get_listen_timeout>

000d98b0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d98b0:	6840      	ldr	r0, [r0, #4]
   d98b2:	2200      	movs	r2, #0
   d98b4:	f7ff bf52 	b.w	d975c <network_set_listen_timeout>

000d98b8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d98b8:	6840      	ldr	r0, [r0, #4]
   d98ba:	2200      	movs	r2, #0
   d98bc:	f081 0101 	eor.w	r1, r1, #1
   d98c0:	f7ff bf3c 	b.w	d973c <network_listen>

000d98c4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d98c4:	2300      	movs	r3, #0
   d98c6:	6840      	ldr	r0, [r0, #4]
   d98c8:	461a      	mov	r2, r3
   d98ca:	4619      	mov	r1, r3
   d98cc:	f7ff bf2e 	b.w	d972c <network_off>

000d98d0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d98d0:	2300      	movs	r3, #0
   d98d2:	6840      	ldr	r0, [r0, #4]
   d98d4:	461a      	mov	r2, r3
   d98d6:	4619      	mov	r1, r3
   d98d8:	f7ff bf20 	b.w	d971c <network_on>

000d98dc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d98dc:	2200      	movs	r2, #0
   d98de:	6840      	ldr	r0, [r0, #4]
   d98e0:	4611      	mov	r1, r2
   d98e2:	f7ff bf13 	b.w	d970c <network_ready>

000d98e6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d98e6:	2200      	movs	r2, #0
   d98e8:	6840      	ldr	r0, [r0, #4]
   d98ea:	4611      	mov	r1, r2
   d98ec:	f7ff befe 	b.w	d96ec <network_connecting>

000d98f0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d98f0:	6840      	ldr	r0, [r0, #4]
   d98f2:	2200      	movs	r2, #0
   d98f4:	2102      	movs	r1, #2
   d98f6:	f7ff bf01 	b.w	d96fc <network_disconnect>

000d98fa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d98fa:	2300      	movs	r3, #0
   d98fc:	6840      	ldr	r0, [r0, #4]
   d98fe:	461a      	mov	r2, r3
   d9900:	f7ff beec 	b.w	d96dc <network_connect>

000d9904 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d9904:	4b02      	ldr	r3, [pc, #8]	; (d9910 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9906:	2203      	movs	r2, #3
   d9908:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d990a:	4a02      	ldr	r2, [pc, #8]	; (d9914 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d990c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d990e:	4770      	bx	lr
   d9910:	2003e520 	.word	0x2003e520
   d9914:	000df9fc 	.word	0x000df9fc

000d9918 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d9918:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   d991a:	460b      	mov	r3, r1
    s->update(ticks);
   d991c:	6892      	ldr	r2, [r2, #8]
   d991e:	4601      	mov	r1, r0
   d9920:	4618      	mov	r0, r3
   d9922:	4710      	bx	r2

000d9924 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   d9924:	b570      	push	{r4, r5, r6, lr}
   d9926:	4c0e      	ldr	r4, [pc, #56]	; (d9960 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   d9928:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   d992a:	2500      	movs	r5, #0
   d992c:	241c      	movs	r4, #28
   d992e:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d9932:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d9936:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   d993a:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d993c:	f004 0403 	and.w	r4, r4, #3
   d9940:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   d9944:	b2e4      	uxtb	r4, r4
   d9946:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   d9948:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   d994a:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   d994c:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d994e:	7c42      	ldrb	r2, [r0, #17]
   d9950:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   d9952:	bf0a      	itet	eq
   d9954:	4b03      	ldreq	r3, [pc, #12]	; (d9964 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   d9956:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   d9958:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   d995c:	bd70      	pop	{r4, r5, r6, pc}
   d995e:	bf00      	nop
   d9960:	000df730 	.word	0x000df730
   d9964:	000d9919 	.word	0x000d9919

000d9968 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d9968:	2100      	movs	r1, #0
   d996a:	f7ff be07 	b.w	d957c <hal_spi_acquire>

000d996e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d996e:	2100      	movs	r1, #0
   d9970:	f7ff be0c 	b.w	d958c <hal_spi_release>

000d9974 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9974:	b510      	push	{r4, lr}
   d9976:	4604      	mov	r4, r0
   d9978:	4608      	mov	r0, r1
{
    _spi = spi;
   d997a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d997c:	f7ff fdce 	bl	d951c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9980:	2300      	movs	r3, #0
   d9982:	6063      	str	r3, [r4, #4]
}
   d9984:	4620      	mov	r0, r4
   d9986:	bd10      	pop	{r4, pc}

000d9988 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d9988:	b510      	push	{r4, lr}
   d998a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d998c:	7800      	ldrb	r0, [r0, #0]
   d998e:	f7ff ffeb 	bl	d9968 <_ZN8SPIClass4lockEv.isra.0>
   d9992:	b948      	cbnz	r0, d99a8 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d9994:	7820      	ldrb	r0, [r4, #0]
   d9996:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d999a:	f7ff fdaf 	bl	d94fc <hal_spi_begin>
        unlock();
   d999e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d99a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d99a4:	f7ff bfe3 	b.w	d996e <_ZN8SPIClass6unlockEv.isra.0>
}
   d99a8:	bd10      	pop	{r4, pc}

000d99aa <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d99aa:	7800      	ldrb	r0, [r0, #0]
   d99ac:	f7ff bfdf 	b.w	d996e <_ZN8SPIClass6unlockEv.isra.0>

000d99b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d99b0:	0840      	lsrs	r0, r0, #1
{
   d99b2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d99b4:	6018      	str	r0, [r3, #0]
   d99b6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d99b8:	6818      	ldr	r0, [r3, #0]
   d99ba:	4288      	cmp	r0, r1
   d99bc:	b2e5      	uxtb	r5, r4
   d99be:	d906      	bls.n	d99ce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d99c0:	3401      	adds	r4, #1
   d99c2:	2c08      	cmp	r4, #8
   d99c4:	d002      	beq.n	d99cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d99c6:	0840      	lsrs	r0, r0, #1
   d99c8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d99ca:	e7f5      	b.n	d99b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d99cc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d99ce:	4b02      	ldr	r3, [pc, #8]	; (d99d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d99d0:	5d5b      	ldrb	r3, [r3, r5]
   d99d2:	7013      	strb	r3, [r2, #0]
}
   d99d4:	bd30      	pop	{r4, r5, pc}
   d99d6:	bf00      	nop
   d99d8:	000dfa28 	.word	0x000dfa28

000d99dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d99dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d99e0:	4606      	mov	r6, r0
   d99e2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d99e4:	7800      	ldrb	r0, [r0, #0]
{
   d99e6:	460d      	mov	r5, r1
    CHECK(lock());
   d99e8:	f7ff ffbe 	bl	d9968 <_ZN8SPIClass4lockEv.isra.0>
   d99ec:	2800      	cmp	r0, #0
   d99ee:	db1b      	blt.n	d9a28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d99f0:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d99f2:	2214      	movs	r2, #20
   d99f4:	2100      	movs	r1, #0
   d99f6:	a809      	add	r0, sp, #36	; 0x24
   d99f8:	f003 fff4 	bl	dd9e4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d99fc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d99fe:	2200      	movs	r2, #0
   d9a00:	a909      	add	r1, sp, #36	; 0x24
   d9a02:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d9a04:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d9a08:	f7ff fd98 	bl	d953c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d9a0c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d9a10:	b113      	cbz	r3, d9a18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d9a12:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d9a16:	b154      	cbz	r4, d9a2e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d9a18:	2700      	movs	r7, #0
   d9a1a:	46b9      	mov	r9, r7
   d9a1c:	46b8      	mov	r8, r7
   d9a1e:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d9a20:	792b      	ldrb	r3, [r5, #4]
   d9a22:	b15c      	cbz	r4, d9a3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d9a24:	b1c3      	cbz	r3, d9a58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d9a26:	2000      	movs	r0, #0
}
   d9a28:	b00f      	add	sp, #60	; 0x3c
   d9a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d9a2e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9a32:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9a36:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d9a3a:	e7f1      	b.n	d9a20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d9a3c:	2b00      	cmp	r3, #0
   d9a3e:	d135      	bne.n	d9aac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d9a40:	68ab      	ldr	r3, [r5, #8]
   d9a42:	4543      	cmp	r3, r8
   d9a44:	d108      	bne.n	d9a58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d9a46:	f88d 9020 	strb.w	r9, [sp, #32]
   d9a4a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9a4e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9a52:	89ab      	ldrh	r3, [r5, #12]
   d9a54:	429a      	cmp	r2, r3
   d9a56:	d0e6      	beq.n	d9a26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d9a58:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9a5a:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d9a5c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9a60:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9a62:	ab04      	add	r3, sp, #16
   d9a64:	f10d 020f 	add.w	r2, sp, #15
   d9a68:	f7ff ffa2 	bl	d99b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9a6c:	7929      	ldrb	r1, [r5, #4]
   d9a6e:	b984      	cbnz	r4, d9a92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d9a70:	b989      	cbnz	r1, d9a96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9a72:	68ab      	ldr	r3, [r5, #8]
   d9a74:	4543      	cmp	r3, r8
   d9a76:	d30e      	bcc.n	d9a96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d9a78:	f88d 9020 	strb.w	r9, [sp, #32]
   d9a7c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9a80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9a84:	89ab      	ldrh	r3, [r5, #12]
   d9a86:	429a      	cmp	r2, r3
   d9a88:	d105      	bne.n	d9a96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9a8a:	9b04      	ldr	r3, [sp, #16]
   d9a8c:	4543      	cmp	r3, r8
   d9a8e:	d102      	bne.n	d9a96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9a90:	e7c9      	b.n	d9a26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d9a92:	2900      	cmp	r1, #0
   d9a94:	d1f9      	bne.n	d9a8a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d9a96:	2300      	movs	r3, #0
   d9a98:	9301      	str	r3, [sp, #4]
   d9a9a:	7b6b      	ldrb	r3, [r5, #13]
   d9a9c:	9300      	str	r3, [sp, #0]
   d9a9e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9aa2:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9aa4:	7830      	ldrb	r0, [r6, #0]
   d9aa6:	f7ff fd61 	bl	d956c <hal_spi_set_settings>
   d9aaa:	e7bc      	b.n	d9a26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9aac:	e9cd 4400 	strd	r4, r4, [sp]
   d9ab0:	4623      	mov	r3, r4
   d9ab2:	4622      	mov	r2, r4
   d9ab4:	2101      	movs	r1, #1
   d9ab6:	e7f5      	b.n	d9aa4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9ab8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9ab8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d9aba:	7800      	ldrb	r0, [r0, #0]
   d9abc:	f7ff fd26 	bl	d950c <hal_spi_transfer>
}
   d9ac0:	b2c0      	uxtb	r0, r0
   d9ac2:	bd08      	pop	{r3, pc}

000d9ac4 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d9ac4:	b530      	push	{r4, r5, lr}
   d9ac6:	b087      	sub	sp, #28
   d9ac8:	4604      	mov	r4, r0
   d9aca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9acc:	9500      	str	r5, [sp, #0]
   d9ace:	7800      	ldrb	r0, [r0, #0]
   d9ad0:	f7ff fd3c 	bl	d954c <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d9ad4:	b93d      	cbnz	r5, d9ae6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d9ad6:	7820      	ldrb	r0, [r4, #0]
   d9ad8:	a902      	add	r1, sp, #8
   d9ada:	f7ff fd3f 	bl	d955c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d9ade:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d9ae2:	07db      	lsls	r3, r3, #31
   d9ae4:	d4f7      	bmi.n	d9ad6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d9ae6:	b007      	add	sp, #28
   d9ae8:	bd30      	pop	{r4, r5, pc}

000d9aea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d9aea:	b510      	push	{r4, lr}
   d9aec:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d9aee:	6800      	ldr	r0, [r0, #0]
   d9af0:	b118      	cbz	r0, d9afa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d9af2:	f7ff fe83 	bl	d97fc <free>
            wakeupSource_ = nullptr;
   d9af6:	2300      	movs	r3, #0
   d9af8:	6023      	str	r3, [r4, #0]
        }
    }
   d9afa:	bd10      	pop	{r4, pc}

000d9afc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d9afc:	b510      	push	{r4, lr}
   d9afe:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d9b00:	f7ff fff3 	bl	d9aea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d9b04:	4620      	mov	r0, r4
   d9b06:	bd10      	pop	{r4, pc}

000d9b08 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d9b08:	b507      	push	{r0, r1, r2, lr}
   d9b0a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d9b0c:	2100      	movs	r1, #0
{
   d9b0e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d9b10:	9100      	str	r1, [sp, #0]
   d9b12:	2001      	movs	r0, #1
   d9b14:	218c      	movs	r1, #140	; 0x8c
   d9b16:	f7ff fdd7 	bl	d96c8 <system_reset>
}
   d9b1a:	b003      	add	sp, #12
   d9b1c:	f85d fb04 	ldr.w	pc, [sp], #4

000d9b20 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d9b20:	4601      	mov	r1, r0
    reset(0, flags);
   d9b22:	2000      	movs	r0, #0
   d9b24:	f7ff bff0 	b.w	d9b08 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d9b28 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d9b28:	2000      	movs	r0, #0
   d9b2a:	f7ff bff9 	b.w	d9b20 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d9b30 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9b30:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d9b32:	4b09      	ldr	r3, [pc, #36]	; (d9b58 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d9b34:	4c09      	ldr	r4, [pc, #36]	; (d9b5c <_GLOBAL__sub_I_System+0x2c>)
   d9b36:	2202      	movs	r2, #2
   d9b38:	2000      	movs	r0, #0
   d9b3a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d9b3c:	4b08      	ldr	r3, [pc, #32]	; (d9b60 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d9b3e:	6020      	str	r0, [r4, #0]
   d9b40:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d9b42:	71a0      	strb	r0, [r4, #6]
   d9b44:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9b46:	f7ff fd73 	bl	d9630 <set_system_mode>
SystemClass System;
   d9b4a:	4620      	mov	r0, r4
   d9b4c:	4a05      	ldr	r2, [pc, #20]	; (d9b64 <_GLOBAL__sub_I_System+0x34>)
   d9b4e:	4906      	ldr	r1, [pc, #24]	; (d9b68 <_GLOBAL__sub_I_System+0x38>)
   d9b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d9b54:	f001 bd7e 	b.w	db654 <__aeabi_atexit>
   d9b58:	2003e534 	.word	0x2003e534
   d9b5c:	2003e528 	.word	0x2003e528
   d9b60:	ffff0000 	.word	0xffff0000
   d9b64:	2003c1d0 	.word	0x2003c1d0
   d9b68:	000d9afd 	.word	0x000d9afd

000d9b6c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d9b6c:	b510      	push	{r4, lr}
   d9b6e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9b70:	f004 ff7c 	bl	dea6c <strlen>
   d9b74:	3801      	subs	r0, #1
   d9b76:	1823      	adds	r3, r4, r0
   d9b78:	4620      	mov	r0, r4
	while(i<j){
   d9b7a:	4283      	cmp	r3, r0
   d9b7c:	d906      	bls.n	d9b8c <_Z11str_reversePc+0x20>
		c = *i;
   d9b7e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d9b80:	7819      	ldrb	r1, [r3, #0]
   d9b82:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d9b86:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d9b8a:	e7f6      	b.n	d9b7a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d9b8c:	bd10      	pop	{r4, pc}

000d9b8e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9b8e:	b570      	push	{r4, r5, r6, lr}
   d9b90:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d9b92:	1e91      	subs	r1, r2, #2
   d9b94:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9b96:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d9b98:	d822      	bhi.n	d9be0 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d9b9a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d9b9c:	b16d      	cbz	r5, d9bba <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d9b9e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d9ba2:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d9ba6:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d9ba8:	2d09      	cmp	r5, #9
                *ptr += '0';
   d9baa:	bf94      	ite	ls
   d9bac:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d9bae:	3157      	addhi	r1, #87	; 0x57
   d9bb0:	b2c9      	uxtb	r1, r1
   d9bb2:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d9bb6:	4635      	mov	r5, r6
	while(a){
   d9bb8:	e7f0      	b.n	d9b9c <ultoa+0xe>
   d9bba:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d9bbc:	4423      	add	r3, r4
            *ptr++ = '0';
   d9bbe:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d9bc0:	4293      	cmp	r3, r2
   d9bc2:	d902      	bls.n	d9bca <ultoa+0x3c>
            *ptr++ = '0';
   d9bc4:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d9bc8:	e7fa      	b.n	d9bc0 <ultoa+0x32>
   d9bca:	1a1a      	subs	r2, r3, r0
   d9bcc:	4283      	cmp	r3, r0
   d9bce:	bf38      	it	cc
   d9bd0:	2200      	movcc	r2, #0

	*ptr = '\0';
   d9bd2:	2300      	movs	r3, #0
   d9bd4:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d9bd6:	4620      	mov	r0, r4
   d9bd8:	f7ff ffc8 	bl	d9b6c <_Z11str_reversePc>
	return buffer;
   d9bdc:	4620      	mov	r0, r4
}
   d9bde:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d9be0:	2000      	movs	r0, #0
   d9be2:	e7fc      	b.n	d9bde <ultoa+0x50>

000d9be4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9be4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d9be6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9be8:	460c      	mov	r4, r1
   d9bea:	4615      	mov	r5, r2
	if(a<0){
   d9bec:	da0e      	bge.n	d9c0c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d9bf2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9bf6:	bf14      	ite	ne
   d9bf8:	4258      	negne	r0, r3
   d9bfa:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d9bfc:	2301      	movs	r3, #1
		*buffer = '-';
   d9bfe:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d9c00:	462a      	mov	r2, r5
   d9c02:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d9c04:	f7ff ffc3 	bl	d9b8e <ultoa>
	}
	return buffer;
}
   d9c08:	4620      	mov	r0, r4
   d9c0a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d9c0c:	2301      	movs	r3, #1
   d9c0e:	e7f9      	b.n	d9c04 <itoa+0x20>

000d9c10 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d9c10:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d9c12:	2301      	movs	r3, #1
   d9c14:	f7ff ffbb 	bl	d9b8e <ultoa>
}
   d9c18:	bd08      	pop	{r3, pc}
	...

000d9c1c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d9c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9c20:	ec57 6b10 	vmov	r6, r7, d0
   d9c24:	4680      	mov	r8, r0
   d9c26:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d9c28:	ee10 0a10 	vmov	r0, s0
   d9c2c:	2200      	movs	r2, #0
   d9c2e:	2300      	movs	r3, #0
   d9c30:	4639      	mov	r1, r7
   d9c32:	f003 fb19 	bl	dd268 <__aeabi_dcmplt>
   d9c36:	b128      	cbz	r0, d9c44 <_Z4dtoadhPc+0x28>
        val = -val;
   d9c38:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9c3c:	461f      	mov	r7, r3
        *sout++ = '-';
   d9c3e:	232d      	movs	r3, #45	; 0x2d
   d9c40:	f804 3b01 	strb.w	r3, [r4], #1
   d9c44:	2300      	movs	r3, #0
    }
    long scale = 1;
   d9c46:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d9c4a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d9c4c:	b2d9      	uxtb	r1, r3
   d9c4e:	4588      	cmp	r8, r1
   d9c50:	d903      	bls.n	d9c5a <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d9c52:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d9c56:	3301      	adds	r3, #1
   d9c58:	e7f8      	b.n	d9c4c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d9c5a:	4648      	mov	r0, r9
   d9c5c:	f003 f828 	bl	dccb0 <__aeabi_i2d>
   d9c60:	4632      	mov	r2, r6
   d9c62:	463b      	mov	r3, r7
   d9c64:	f003 f88e 	bl	dcd84 <__aeabi_dmul>
   d9c68:	4606      	mov	r6, r0
   d9c6a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d9c6c:	f003 fbea 	bl	dd444 <__aeabi_d2ulz>
   d9c70:	4605      	mov	r5, r0
   d9c72:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d9c74:	f003 f850 	bl	dcd18 <__aeabi_ul2d>
   d9c78:	4602      	mov	r2, r0
   d9c7a:	460b      	mov	r3, r1
   d9c7c:	4630      	mov	r0, r6
   d9c7e:	4639      	mov	r1, r7
   d9c80:	f002 fec8 	bl	dca14 <__aeabi_dsub>
   d9c84:	4b13      	ldr	r3, [pc, #76]	; (d9cd4 <_Z4dtoadhPc+0xb8>)
   d9c86:	2200      	movs	r2, #0
   d9c88:	f003 fb02 	bl	dd290 <__aeabi_dcmpge>
   d9c8c:	b110      	cbz	r0, d9c94 <_Z4dtoadhPc+0x78>
        fixed++;
   d9c8e:	3501      	adds	r5, #1
   d9c90:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d9c94:	464a      	mov	r2, r9
   d9c96:	4628      	mov	r0, r5
   d9c98:	17d3      	asrs	r3, r2, #31
   d9c9a:	4651      	mov	r1, sl
   d9c9c:	f003 fbba 	bl	dd414 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d9ca0:	2301      	movs	r3, #1
   d9ca2:	4615      	mov	r5, r2
   d9ca4:	4621      	mov	r1, r4
   d9ca6:	220a      	movs	r2, #10
   d9ca8:	f7ff ff71 	bl	d9b8e <ultoa>
    if (prec) {
   d9cac:	f1b8 0f00 	cmp.w	r8, #0
   d9cb0:	d00d      	beq.n	d9cce <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d9cb2:	4620      	mov	r0, r4
   d9cb4:	f004 feda 	bl	dea6c <strlen>
        *sout++ = '.';
   d9cb8:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d9cba:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d9cbc:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d9cbe:	220a      	movs	r2, #10
   d9cc0:	4643      	mov	r3, r8
   d9cc2:	4628      	mov	r0, r5
   d9cc4:	3101      	adds	r1, #1
    }
}
   d9cc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d9cca:	f7ff bf60 	b.w	d9b8e <ultoa>
}
   d9cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9cd2:	bf00      	nop
   d9cd4:	3fe00000 	.word	0x3fe00000

000d9cd8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9cd8:	b510      	push	{r4, lr}
   d9cda:	4604      	mov	r4, r0
{
	free(buffer);
   d9cdc:	6800      	ldr	r0, [r0, #0]
   d9cde:	f7ff fd8d 	bl	d97fc <free>
}
   d9ce2:	4620      	mov	r0, r4
   d9ce4:	bd10      	pop	{r4, pc}

000d9ce6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9ce6:	b510      	push	{r4, lr}
   d9ce8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9cea:	6800      	ldr	r0, [r0, #0]
   d9cec:	b108      	cbz	r0, d9cf2 <_ZN6String10invalidateEv+0xc>
   d9cee:	f7ff fd85 	bl	d97fc <free>
	buffer = NULL;
   d9cf2:	2300      	movs	r3, #0
	capacity = len = 0;
   d9cf4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9cf8:	6023      	str	r3, [r4, #0]
}
   d9cfa:	bd10      	pop	{r4, pc}

000d9cfc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9cfc:	b538      	push	{r3, r4, r5, lr}
   d9cfe:	4604      	mov	r4, r0
   d9d00:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9d02:	6800      	ldr	r0, [r0, #0]
   d9d04:	3101      	adds	r1, #1
   d9d06:	f7ff fd81 	bl	d980c <realloc>
	if (newbuffer) {
   d9d0a:	b110      	cbz	r0, d9d12 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9d0c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9d10:	2001      	movs	r0, #1
	}
	return 0;
}
   d9d12:	bd38      	pop	{r3, r4, r5, pc}

000d9d14 <_ZN6String7reserveEj>:
{
   d9d14:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9d16:	6803      	ldr	r3, [r0, #0]
{
   d9d18:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9d1a:	b123      	cbz	r3, d9d26 <_ZN6String7reserveEj+0x12>
   d9d1c:	6843      	ldr	r3, [r0, #4]
   d9d1e:	428b      	cmp	r3, r1
   d9d20:	d301      	bcc.n	d9d26 <_ZN6String7reserveEj+0x12>
   d9d22:	2001      	movs	r0, #1
}
   d9d24:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9d26:	4620      	mov	r0, r4
   d9d28:	f7ff ffe8 	bl	d9cfc <_ZN6String12changeBufferEj>
   d9d2c:	2800      	cmp	r0, #0
   d9d2e:	d0f9      	beq.n	d9d24 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d9d30:	68a3      	ldr	r3, [r4, #8]
   d9d32:	2b00      	cmp	r3, #0
   d9d34:	d1f5      	bne.n	d9d22 <_ZN6String7reserveEj+0xe>
   d9d36:	6822      	ldr	r2, [r4, #0]
   d9d38:	7013      	strb	r3, [r2, #0]
   d9d3a:	e7f2      	b.n	d9d22 <_ZN6String7reserveEj+0xe>

000d9d3c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9d3e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9d40:	4611      	mov	r1, r2
   d9d42:	9201      	str	r2, [sp, #4]
{
   d9d44:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9d46:	f7ff ffe5 	bl	d9d14 <_ZN6String7reserveEj>
   d9d4a:	9a01      	ldr	r2, [sp, #4]
   d9d4c:	b928      	cbnz	r0, d9d5a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9d4e:	4620      	mov	r0, r4
   d9d50:	f7ff ffc9 	bl	d9ce6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9d54:	4620      	mov	r0, r4
   d9d56:	b003      	add	sp, #12
   d9d58:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9d5a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9d5c:	4629      	mov	r1, r5
   d9d5e:	6820      	ldr	r0, [r4, #0]
   d9d60:	f003 fe32 	bl	dd9c8 <memcpy>
	buffer[len] = 0;
   d9d64:	6822      	ldr	r2, [r4, #0]
   d9d66:	68a3      	ldr	r3, [r4, #8]
   d9d68:	2100      	movs	r1, #0
   d9d6a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9d6c:	e7f2      	b.n	d9d54 <_ZN6String4copyEPKcj+0x18>

000d9d6e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9d6e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9d70:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d9d72:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9d76:	4604      	mov	r4, r0
	len = 0;
   d9d78:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9d7a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9d7c:	b141      	cbz	r1, d9d90 <_ZN6StringC1EPKc+0x22>
   d9d7e:	4608      	mov	r0, r1
   d9d80:	9101      	str	r1, [sp, #4]
   d9d82:	f004 fe73 	bl	dea6c <strlen>
   d9d86:	9901      	ldr	r1, [sp, #4]
   d9d88:	4602      	mov	r2, r0
   d9d8a:	4620      	mov	r0, r4
   d9d8c:	f7ff ffd6 	bl	d9d3c <_ZN6String4copyEPKcj>
}
   d9d90:	4620      	mov	r0, r4
   d9d92:	b002      	add	sp, #8
   d9d94:	bd10      	pop	{r4, pc}

000d9d96 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9d96:	b538      	push	{r3, r4, r5, lr}
   d9d98:	4605      	mov	r5, r0
	if (buffer) {
   d9d9a:	6800      	ldr	r0, [r0, #0]
{
   d9d9c:	460c      	mov	r4, r1
	if (buffer) {
   d9d9e:	b168      	cbz	r0, d9dbc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d9da0:	686a      	ldr	r2, [r5, #4]
   d9da2:	688b      	ldr	r3, [r1, #8]
   d9da4:	429a      	cmp	r2, r3
   d9da6:	d307      	bcc.n	d9db8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d9da8:	6809      	ldr	r1, [r1, #0]
   d9daa:	f004 f8dc 	bl	ddf66 <strcpy>
			len = rhs.len;
   d9dae:	68a3      	ldr	r3, [r4, #8]
   d9db0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9db2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d9db4:	60a3      	str	r3, [r4, #8]
}
   d9db6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d9db8:	f7ff fd20 	bl	d97fc <free>
	buffer = rhs.buffer;
   d9dbc:	6823      	ldr	r3, [r4, #0]
   d9dbe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9dc0:	6863      	ldr	r3, [r4, #4]
   d9dc2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9dc4:	68a3      	ldr	r3, [r4, #8]
   d9dc6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9dc8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d9dca:	e9c4 3300 	strd	r3, r3, [r4]
   d9dce:	e7f1      	b.n	d9db4 <_ZN6String4moveERS_+0x1e>

000d9dd0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9dd0:	4288      	cmp	r0, r1
{
   d9dd2:	b510      	push	{r4, lr}
   d9dd4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9dd6:	d005      	beq.n	d9de4 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9dd8:	680b      	ldr	r3, [r1, #0]
   d9dda:	b12b      	cbz	r3, d9de8 <_ZN6StringaSERKS_+0x18>
   d9ddc:	688a      	ldr	r2, [r1, #8]
   d9dde:	4619      	mov	r1, r3
   d9de0:	f7ff ffac 	bl	d9d3c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9de4:	4620      	mov	r0, r4
   d9de6:	bd10      	pop	{r4, pc}
	else invalidate();
   d9de8:	f7ff ff7d 	bl	d9ce6 <_ZN6String10invalidateEv>
   d9dec:	e7fa      	b.n	d9de4 <_ZN6StringaSERKS_+0x14>

000d9dee <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9dee:	b510      	push	{r4, lr}
	buffer = NULL;
   d9df0:	2300      	movs	r3, #0
String::String(const String &value)
   d9df2:	4604      	mov	r4, r0
	capacity = 0;
   d9df4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9df8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9dfa:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9dfc:	f7ff ffe8 	bl	d9dd0 <_ZN6StringaSERKS_>
}
   d9e00:	4620      	mov	r0, r4
   d9e02:	bd10      	pop	{r4, pc}

000d9e04 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9e04:	4288      	cmp	r0, r1
{
   d9e06:	b510      	push	{r4, lr}
   d9e08:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d9e0a:	d001      	beq.n	d9e10 <_ZN6StringaSEOS_+0xc>
   d9e0c:	f7ff ffc3 	bl	d9d96 <_ZN6String4moveERS_>
	return *this;
}
   d9e10:	4620      	mov	r0, r4
   d9e12:	bd10      	pop	{r4, pc}

000d9e14 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9e14:	b513      	push	{r0, r1, r4, lr}
   d9e16:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9e18:	b159      	cbz	r1, d9e32 <_ZN6StringaSEPKc+0x1e>
   d9e1a:	4608      	mov	r0, r1
   d9e1c:	9101      	str	r1, [sp, #4]
   d9e1e:	f004 fe25 	bl	dea6c <strlen>
   d9e22:	9901      	ldr	r1, [sp, #4]
   d9e24:	4602      	mov	r2, r0
   d9e26:	4620      	mov	r0, r4
   d9e28:	f7ff ff88 	bl	d9d3c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9e2c:	4620      	mov	r0, r4
   d9e2e:	b002      	add	sp, #8
   d9e30:	bd10      	pop	{r4, pc}
	else invalidate();
   d9e32:	f7ff ff58 	bl	d9ce6 <_ZN6String10invalidateEv>
   d9e36:	e7f9      	b.n	d9e2c <_ZN6StringaSEPKc+0x18>

000d9e38 <_ZN6StringC1Ec>:
String::String(char c)
   d9e38:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d9e3a:	2300      	movs	r3, #0
	buf[0] = c;
   d9e3c:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d9e40:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9e44:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9e46:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d9e48:	a901      	add	r1, sp, #4
String::String(char c)
   d9e4a:	4604      	mov	r4, r0
	buf[1] = 0;
   d9e4c:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d9e50:	f7ff ffe0 	bl	d9e14 <_ZN6StringaSEPKc>
}
   d9e54:	4620      	mov	r0, r4
   d9e56:	b002      	add	sp, #8
   d9e58:	bd10      	pop	{r4, pc}

000d9e5a <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   d9e5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9e5c:	4604      	mov	r4, r0
	buffer = NULL;
   d9e5e:	2300      	movs	r3, #0
	capacity = 0;
   d9e60:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d9e64:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9e66:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   d9e68:	4608      	mov	r0, r1
	utoa(value, buf, base);
   d9e6a:	a901      	add	r1, sp, #4
   d9e6c:	f7ff fed0 	bl	d9c10 <utoa>
	*this = buf;
   d9e70:	a901      	add	r1, sp, #4
   d9e72:	4620      	mov	r0, r4
   d9e74:	f7ff ffce 	bl	d9e14 <_ZN6StringaSEPKc>
}
   d9e78:	4620      	mov	r0, r4
   d9e7a:	b004      	add	sp, #16
   d9e7c:	bd10      	pop	{r4, pc}

000d9e7e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d9e7e:	b510      	push	{r4, lr}
   d9e80:	4604      	mov	r4, r0
   d9e82:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d9e84:	2300      	movs	r3, #0
	capacity = 0;
   d9e86:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d9e8a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9e8c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d9e8e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d9e90:	a901      	add	r1, sp, #4
   d9e92:	f7ff fea7 	bl	d9be4 <itoa>
	*this = buf;
   d9e96:	a901      	add	r1, sp, #4
   d9e98:	4620      	mov	r0, r4
   d9e9a:	f7ff ffbb 	bl	d9e14 <_ZN6StringaSEPKc>
}
   d9e9e:	4620      	mov	r0, r4
   d9ea0:	b00a      	add	sp, #40	; 0x28
   d9ea2:	bd10      	pop	{r4, pc}

000d9ea4 <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
   d9ea4:	b510      	push	{r4, lr}
   d9ea6:	4604      	mov	r4, r0
   d9ea8:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d9eaa:	2300      	movs	r3, #0
	capacity = 0;
   d9eac:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d9eb0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9eb2:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
   d9eb4:	4608      	mov	r0, r1
	ultoa(value, buf, base);
   d9eb6:	2301      	movs	r3, #1
   d9eb8:	a901      	add	r1, sp, #4
   d9eba:	f7ff fe68 	bl	d9b8e <ultoa>
	*this = buf;
   d9ebe:	a901      	add	r1, sp, #4
   d9ec0:	4620      	mov	r0, r4
   d9ec2:	f7ff ffa7 	bl	d9e14 <_ZN6StringaSEPKc>
}
   d9ec6:	4620      	mov	r0, r4
   d9ec8:	b00a      	add	sp, #40	; 0x28
   d9eca:	bd10      	pop	{r4, pc}

000d9ecc <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d9ecc:	b530      	push	{r4, r5, lr}
   d9ece:	4604      	mov	r4, r0
	buffer = NULL;
   d9ed0:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d9ed2:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d9ed4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d9ed8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9eda:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d9edc:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d9ee0:	b2cd      	uxtb	r5, r1
   d9ee2:	f002 fef7 	bl	dccd4 <__aeabi_f2d>
   d9ee6:	ec41 0b10 	vmov	d0, r0, r1
   d9eea:	a901      	add	r1, sp, #4
   d9eec:	4628      	mov	r0, r5
   d9eee:	f7ff fe95 	bl	d9c1c <_Z4dtoadhPc>
        *this = buf;
   d9ef2:	a901      	add	r1, sp, #4
   d9ef4:	4620      	mov	r0, r4
   d9ef6:	f7ff ff8d 	bl	d9e14 <_ZN6StringaSEPKc>
}
   d9efa:	4620      	mov	r0, r4
   d9efc:	b00b      	add	sp, #44	; 0x2c
   d9efe:	bd30      	pop	{r4, r5, pc}

000d9f00 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d9f00:	b570      	push	{r4, r5, r6, lr}
   d9f02:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d9f04:	460e      	mov	r6, r1
   d9f06:	b909      	cbnz	r1, d9f0c <_ZN6String6concatEPKcj+0xc>
   d9f08:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9f0a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9f0c:	b16a      	cbz	r2, d9f2a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d9f0e:	6884      	ldr	r4, [r0, #8]
   d9f10:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d9f12:	4621      	mov	r1, r4
   d9f14:	f7ff fefe 	bl	d9d14 <_ZN6String7reserveEj>
   d9f18:	2800      	cmp	r0, #0
   d9f1a:	d0f5      	beq.n	d9f08 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9f1c:	6828      	ldr	r0, [r5, #0]
   d9f1e:	68ab      	ldr	r3, [r5, #8]
   d9f20:	4631      	mov	r1, r6
   d9f22:	4418      	add	r0, r3
   d9f24:	f004 f81f 	bl	ddf66 <strcpy>
	len = newlen;
   d9f28:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d9f2a:	2001      	movs	r0, #1
   d9f2c:	e7ed      	b.n	d9f0a <_ZN6String6concatEPKcj+0xa>

000d9f2e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d9f2e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9f30:	688a      	ldr	r2, [r1, #8]
   d9f32:	6809      	ldr	r1, [r1, #0]
{
   d9f34:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9f36:	f7ff ffe3 	bl	d9f00 <_ZN6String6concatEPKcj>
   d9f3a:	b910      	cbnz	r0, d9f42 <_ZplRK15StringSumHelperRK6String+0x14>
   d9f3c:	4620      	mov	r0, r4
   d9f3e:	f7ff fed2 	bl	d9ce6 <_ZN6String10invalidateEv>
	return a;
}
   d9f42:	4620      	mov	r0, r4
   d9f44:	bd10      	pop	{r4, pc}

000d9f46 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d9f46:	b513      	push	{r0, r1, r4, lr}
   d9f48:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9f4a:	b929      	cbnz	r1, d9f58 <_ZplRK15StringSumHelperPKc+0x12>
   d9f4c:	4620      	mov	r0, r4
   d9f4e:	f7ff feca 	bl	d9ce6 <_ZN6String10invalidateEv>
	return a;
}
   d9f52:	4620      	mov	r0, r4
   d9f54:	b002      	add	sp, #8
   d9f56:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9f58:	4608      	mov	r0, r1
   d9f5a:	9101      	str	r1, [sp, #4]
   d9f5c:	f004 fd86 	bl	dea6c <strlen>
   d9f60:	9901      	ldr	r1, [sp, #4]
   d9f62:	4602      	mov	r2, r0
   d9f64:	4620      	mov	r0, r4
   d9f66:	f7ff ffcb 	bl	d9f00 <_ZN6String6concatEPKcj>
   d9f6a:	2800      	cmp	r0, #0
   d9f6c:	d0ee      	beq.n	d9f4c <_ZplRK15StringSumHelperPKc+0x6>
   d9f6e:	e7f0      	b.n	d9f52 <_ZplRK15StringSumHelperPKc+0xc>

000d9f70 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d9f70:	b558      	push	{r3, r4, r6, lr}
   d9f72:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d9f74:	b12a      	cbz	r2, d9f82 <_ZNK6String8getBytesEPhjj+0x12>
   d9f76:	b121      	cbz	r1, d9f82 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d9f78:	6884      	ldr	r4, [r0, #8]
   d9f7a:	429c      	cmp	r4, r3
   d9f7c:	d802      	bhi.n	d9f84 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d9f7e:	2300      	movs	r3, #0
   d9f80:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d9f82:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d9f84:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d9f86:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d9f88:	6801      	ldr	r1, [r0, #0]
   d9f8a:	4294      	cmp	r4, r2
   d9f8c:	bf28      	it	cs
   d9f8e:	4614      	movcs	r4, r2
   d9f90:	4419      	add	r1, r3
   d9f92:	4622      	mov	r2, r4
   d9f94:	4630      	mov	r0, r6
   d9f96:	f004 fd83 	bl	deaa0 <strncpy>
	buf[n] = 0;
   d9f9a:	2300      	movs	r3, #0
   d9f9c:	5533      	strb	r3, [r6, r4]
   d9f9e:	e7f0      	b.n	d9f82 <_ZNK6String8getBytesEPhjj+0x12>

000d9fa0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d9fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d9fa2:	429a      	cmp	r2, r3
{
   d9fa4:	460f      	mov	r7, r1
   d9fa6:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d9fa8:	490c      	ldr	r1, [pc, #48]	; (d9fdc <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d9faa:	bf88      	it	hi
   d9fac:	4613      	movhi	r3, r2
{
   d9fae:	4614      	mov	r4, r2
   d9fb0:	4606      	mov	r6, r0
	if (left > right) {
   d9fb2:	bf84      	itt	hi
   d9fb4:	462c      	movhi	r4, r5
   d9fb6:	461d      	movhi	r5, r3
	String out;
   d9fb8:	f7ff fed9 	bl	d9d6e <_ZN6StringC1EPKc>
	if (left > len) return out;
   d9fbc:	68ba      	ldr	r2, [r7, #8]
   d9fbe:	42a2      	cmp	r2, r4
   d9fc0:	d30a      	bcc.n	d9fd8 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d9fc2:	6839      	ldr	r1, [r7, #0]
   d9fc4:	42aa      	cmp	r2, r5
   d9fc6:	bf94      	ite	ls
   d9fc8:	ebc4 0202 	rsbls	r2, r4, r2
   d9fcc:	ebc4 0205 	rsbhi	r2, r4, r5
   d9fd0:	4421      	add	r1, r4
   d9fd2:	4630      	mov	r0, r6
   d9fd4:	f7ff feb2 	bl	d9d3c <_ZN6String4copyEPKcj>
	return out;
}
   d9fd8:	4630      	mov	r0, r6
   d9fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9fdc:	000dff9b 	.word	0x000dff9b

000d9fe0 <_ZNK6String9substringEj>:
{
   d9fe0:	b510      	push	{r4, lr}
   d9fe2:	4604      	mov	r4, r0
	return substring(left, len);
   d9fe4:	688b      	ldr	r3, [r1, #8]
   d9fe6:	f7ff ffdb 	bl	d9fa0 <_ZNK6String9substringEjj>
}
   d9fea:	4620      	mov	r0, r4
   d9fec:	bd10      	pop	{r4, pc}

000d9fee <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d9fee:	6800      	ldr	r0, [r0, #0]
   d9ff0:	b108      	cbz	r0, d9ff6 <_ZNK6String5toIntEv+0x8>
   d9ff2:	f003 bbd3 	b.w	dd79c <atol>
	return 0;
}
   d9ff6:	4770      	bx	lr

000d9ff8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d9ff8:	b40e      	push	{r1, r2, r3}
   d9ffa:	b570      	push	{r4, r5, r6, lr}
   d9ffc:	b087      	sub	sp, #28
   d9ffe:	ad0b      	add	r5, sp, #44	; 0x2c
   da000:	4604      	mov	r4, r0
   da002:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da006:	9201      	str	r2, [sp, #4]
   da008:	462b      	mov	r3, r5
   da00a:	2105      	movs	r1, #5
   da00c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   da00e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da010:	f7ff fc24 	bl	d985c <vsnprintf>
    va_end(marker);

    String result;
   da014:	490b      	ldr	r1, [pc, #44]	; (da044 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da016:	4606      	mov	r6, r0
    String result;
   da018:	4620      	mov	r0, r4
   da01a:	f7ff fea8 	bl	d9d6e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   da01e:	4631      	mov	r1, r6
   da020:	4620      	mov	r0, r4
   da022:	f7ff fe77 	bl	d9d14 <_ZN6String7reserveEj>
    if (result.buffer) {
   da026:	6820      	ldr	r0, [r4, #0]
   da028:	b130      	cbz	r0, da038 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da02a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   da02c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da02e:	462b      	mov	r3, r5
   da030:	1c71      	adds	r1, r6, #1
   da032:	f7ff fc13 	bl	d985c <vsnprintf>
        va_end(marker);
        result.len = n;
   da036:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   da038:	4620      	mov	r0, r4
   da03a:	b007      	add	sp, #28
   da03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da040:	b003      	add	sp, #12
   da042:	4770      	bx	lr
   da044:	000dff9b 	.word	0x000dff9b

000da048 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   da048:	b510      	push	{r4, lr}
   da04a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da04c:	6800      	ldr	r0, [r0, #0]
   da04e:	b108      	cbz	r0, da054 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   da050:	f7ff f984 	bl	d935c <os_mutex_recursive_destroy>
    }
   da054:	4620      	mov	r0, r4
   da056:	bd10      	pop	{r4, pc}

000da058 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   da058:	680b      	ldr	r3, [r1, #0]
   da05a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   da05c:	b113      	cbz	r3, da064 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   da05e:	685a      	ldr	r2, [r3, #4]
   da060:	3201      	adds	r2, #1
   da062:	605a      	str	r2, [r3, #4]
      }
   da064:	4770      	bx	lr
	...

000da068 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   da068:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   da06a:	4c06      	ldr	r4, [pc, #24]	; (da084 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   da06c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   da06e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   da070:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   da072:	f7ff f96b 	bl	d934c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   da076:	4620      	mov	r0, r4
   da078:	4a03      	ldr	r2, [pc, #12]	; (da088 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   da07a:	4904      	ldr	r1, [pc, #16]	; (da08c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   da07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   da080:	f001 bae8 	b.w	db654 <__aeabi_atexit>
   da084:	2003e538 	.word	0x2003e538
   da088:	2003c1d0 	.word	0x2003c1d0
   da08c:	000da049 	.word	0x000da049

000da090 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da092:	4606      	mov	r6, r0
   da094:	460d      	mov	r5, r1
  size_t n = 0;
   da096:	188f      	adds	r7, r1, r2
   da098:	2400      	movs	r4, #0
  while (size--) {
   da09a:	42bd      	cmp	r5, r7
   da09c:	d00c      	beq.n	da0b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da09e:	6833      	ldr	r3, [r6, #0]
   da0a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   da0a4:	689b      	ldr	r3, [r3, #8]
   da0a6:	4630      	mov	r0, r6
   da0a8:	4798      	blx	r3
     if (chunk>=0)
   da0aa:	1e03      	subs	r3, r0, #0
   da0ac:	db01      	blt.n	da0b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da0ae:	441c      	add	r4, r3
  while (size--) {
   da0b0:	e7f3      	b.n	da09a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da0b2:	2c00      	cmp	r4, #0
   da0b4:	bf08      	it	eq
   da0b6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   da0b8:	4620      	mov	r0, r4
   da0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da0bc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   da0bc:	b508      	push	{r3, lr}
  return write(str);
   da0be:	f7fd f98f 	bl	d73e0 <_ZN5Print5writeEPKc>
}
   da0c2:	bd08      	pop	{r3, pc}

000da0c4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   da0c4:	6803      	ldr	r3, [r0, #0]
   da0c6:	689b      	ldr	r3, [r3, #8]
   da0c8:	4718      	bx	r3

000da0ca <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   da0ca:	b508      	push	{r3, lr}
  return write(str);
   da0cc:	f7fd f988 	bl	d73e0 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   da0d0:	bd08      	pop	{r3, pc}

000da0d2 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   da0d2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da0d4:	210d      	movs	r1, #13
{
   da0d6:	4605      	mov	r5, r0
  size_t n = print('\r');
   da0d8:	f7ff fff4 	bl	da0c4 <_ZN5Print5printEc>
  n += print('\n');
   da0dc:	210a      	movs	r1, #10
  size_t n = print('\r');
   da0de:	4604      	mov	r4, r0
  n += print('\n');
   da0e0:	4628      	mov	r0, r5
   da0e2:	f7ff ffef 	bl	da0c4 <_ZN5Print5printEc>
  return n;
}
   da0e6:	4420      	add	r0, r4
   da0e8:	bd38      	pop	{r3, r4, r5, pc}

000da0ea <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   da0ea:	b538      	push	{r3, r4, r5, lr}
   da0ec:	4605      	mov	r5, r0
  return write(str);
   da0ee:	f7fd f977 	bl	d73e0 <_ZN5Print5writeEPKc>
   da0f2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   da0f4:	4628      	mov	r0, r5
   da0f6:	f7ff ffec 	bl	da0d2 <_ZN5Print7printlnEv>
  return n;
}
   da0fa:	4420      	add	r0, r4
   da0fc:	bd38      	pop	{r3, r4, r5, pc}

000da0fe <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   da0fe:	f7ff bff4 	b.w	da0ea <_ZN5Print7printlnEPKc>

000da102 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da102:	b530      	push	{r4, r5, lr}
   da104:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da106:	2300      	movs	r3, #0
   da108:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da10c:	2a01      	cmp	r2, #1
   da10e:	bf98      	it	ls
   da110:	220a      	movls	r2, #10
   da112:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   da114:	460d      	mov	r5, r1
   da116:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   da11a:	fb01 5312 	mls	r3, r1, r2, r5
   da11e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da122:	2b09      	cmp	r3, #9
   da124:	bf94      	ite	ls
   da126:	3330      	addls	r3, #48	; 0x30
   da128:	3337      	addhi	r3, #55	; 0x37
   da12a:	b2db      	uxtb	r3, r3
  } while(n);
   da12c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da12e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   da132:	d9ef      	bls.n	da114 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   da134:	4621      	mov	r1, r4
   da136:	f7fd f953 	bl	d73e0 <_ZN5Print5writeEPKc>
}
   da13a:	b00b      	add	sp, #44	; 0x2c
   da13c:	bd30      	pop	{r4, r5, pc}
	...

000da140 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   da140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da144:	ec55 4b10 	vmov	r4, r5, d0
   da148:	4606      	mov	r6, r0
   da14a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   da14c:	ee10 2a10 	vmov	r2, s0
   da150:	ee10 0a10 	vmov	r0, s0
   da154:	462b      	mov	r3, r5
   da156:	4629      	mov	r1, r5
   da158:	f003 f8ae 	bl	dd2b8 <__aeabi_dcmpun>
   da15c:	b140      	cbz	r0, da170 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   da15e:	4953      	ldr	r1, [pc, #332]	; (da2ac <_ZN5Print10printFloatEdh+0x16c>)
   da160:	4630      	mov	r0, r6
   da162:	f7fd f93d 	bl	d73e0 <_ZN5Print5writeEPKc>
   da166:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   da168:	4650      	mov	r0, sl
   da16a:	b003      	add	sp, #12
   da16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   da170:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   da174:	4b4e      	ldr	r3, [pc, #312]	; (da2b0 <_ZN5Print10printFloatEdh+0x170>)
   da176:	f04f 32ff 	mov.w	r2, #4294967295
   da17a:	4620      	mov	r0, r4
   da17c:	4649      	mov	r1, r9
   da17e:	f003 f89b 	bl	dd2b8 <__aeabi_dcmpun>
   da182:	b948      	cbnz	r0, da198 <_ZN5Print10printFloatEdh+0x58>
   da184:	4b4a      	ldr	r3, [pc, #296]	; (da2b0 <_ZN5Print10printFloatEdh+0x170>)
   da186:	f04f 32ff 	mov.w	r2, #4294967295
   da18a:	4620      	mov	r0, r4
   da18c:	4649      	mov	r1, r9
   da18e:	f003 f875 	bl	dd27c <__aeabi_dcmple>
   da192:	b908      	cbnz	r0, da198 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   da194:	4947      	ldr	r1, [pc, #284]	; (da2b4 <_ZN5Print10printFloatEdh+0x174>)
   da196:	e7e3      	b.n	da160 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   da198:	4b47      	ldr	r3, [pc, #284]	; (da2b8 <_ZN5Print10printFloatEdh+0x178>)
   da19a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da19e:	4620      	mov	r0, r4
   da1a0:	4629      	mov	r1, r5
   da1a2:	f003 f87f 	bl	dd2a4 <__aeabi_dcmpgt>
   da1a6:	b108      	cbz	r0, da1ac <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   da1a8:	4944      	ldr	r1, [pc, #272]	; (da2bc <_ZN5Print10printFloatEdh+0x17c>)
   da1aa:	e7d9      	b.n	da160 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   da1ac:	4b44      	ldr	r3, [pc, #272]	; (da2c0 <_ZN5Print10printFloatEdh+0x180>)
   da1ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da1b2:	4620      	mov	r0, r4
   da1b4:	4629      	mov	r1, r5
   da1b6:	f003 f857 	bl	dd268 <__aeabi_dcmplt>
   da1ba:	2800      	cmp	r0, #0
   da1bc:	d1f4      	bne.n	da1a8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   da1be:	2200      	movs	r2, #0
   da1c0:	2300      	movs	r3, #0
   da1c2:	4620      	mov	r0, r4
   da1c4:	4629      	mov	r1, r5
   da1c6:	f003 f84f 	bl	dd268 <__aeabi_dcmplt>
   da1ca:	b1d0      	cbz	r0, da202 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   da1cc:	212d      	movs	r1, #45	; 0x2d
   da1ce:	4630      	mov	r0, r6
   da1d0:	f7ff ff78 	bl	da0c4 <_ZN5Print5printEc>
     number = -number;
   da1d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   da1d8:	4682      	mov	sl, r0
     number = -number;
   da1da:	461d      	mov	r5, r3
  double rounding = 0.5;
   da1dc:	4939      	ldr	r1, [pc, #228]	; (da2c4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   da1de:	f8df 90ec 	ldr.w	r9, [pc, #236]	; da2cc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   da1e2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   da1e6:	2000      	movs	r0, #0
    rounding /= 10.0;
   da1e8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   da1ec:	fa5f f38b 	uxtb.w	r3, fp
   da1f0:	429f      	cmp	r7, r3
   da1f2:	d908      	bls.n	da206 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   da1f4:	4642      	mov	r2, r8
   da1f6:	464b      	mov	r3, r9
   da1f8:	f002 feee 	bl	dcfd8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   da1fc:	f10b 0b01 	add.w	fp, fp, #1
   da200:	e7f4      	b.n	da1ec <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   da202:	4682      	mov	sl, r0
   da204:	e7ea      	b.n	da1dc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   da206:	4622      	mov	r2, r4
   da208:	462b      	mov	r3, r5
   da20a:	f002 fc05 	bl	dca18 <__adddf3>
   da20e:	460d      	mov	r5, r1
   da210:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   da212:	f003 f88f 	bl	dd334 <__aeabi_d2uiz>
   da216:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   da218:	f002 fd3a 	bl	dcc90 <__aeabi_ui2d>
   da21c:	4602      	mov	r2, r0
   da21e:	460b      	mov	r3, r1
   da220:	4620      	mov	r0, r4
   da222:	4629      	mov	r1, r5
   da224:	f002 fbf6 	bl	dca14 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   da228:	220a      	movs	r2, #10
   da22a:	4604      	mov	r4, r0
   da22c:	460d      	mov	r5, r1
   da22e:	4630      	mov	r0, r6
   da230:	4641      	mov	r1, r8
   da232:	f7ff ff66 	bl	da102 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   da236:	4482      	add	sl, r0
  if (digits > 0) {
   da238:	b127      	cbz	r7, da244 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   da23a:	4923      	ldr	r1, [pc, #140]	; (da2c8 <_ZN5Print10printFloatEdh+0x188>)
   da23c:	4630      	mov	r0, r6
   da23e:	f7fd f8cf 	bl	d73e0 <_ZN5Print5writeEPKc>
    n += print(".");
   da242:	4482      	add	sl, r0
    remainder *= 10.0;
   da244:	f8df 9084 	ldr.w	r9, [pc, #132]	; da2cc <_ZN5Print10printFloatEdh+0x18c>
   da248:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   da24c:	3f01      	subs	r7, #1
   da24e:	b2ff      	uxtb	r7, r7
   da250:	2fff      	cmp	r7, #255	; 0xff
   da252:	d089      	beq.n	da168 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   da254:	4642      	mov	r2, r8
   da256:	464b      	mov	r3, r9
   da258:	4620      	mov	r0, r4
   da25a:	4629      	mov	r1, r5
   da25c:	f002 fd92 	bl	dcd84 <__aeabi_dmul>
   da260:	4604      	mov	r4, r0
   da262:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   da264:	f003 f83e 	bl	dd2e4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   da268:	f1b0 0b00 	subs.w	fp, r0, #0
   da26c:	da1a      	bge.n	da2a4 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   da26e:	212d      	movs	r1, #45	; 0x2d
   da270:	4630      	mov	r0, r6
   da272:	f7ff ff27 	bl	da0c4 <_ZN5Print5printEc>
            val = -n;
   da276:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   da27a:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   da27c:	220a      	movs	r2, #10
   da27e:	4630      	mov	r0, r6
   da280:	9301      	str	r3, [sp, #4]
   da282:	f7ff ff3e 	bl	da102 <_ZN5Print11printNumberEmh>
   da286:	9b01      	ldr	r3, [sp, #4]
   da288:	4418      	add	r0, r3
    n += print(toPrint);
   da28a:	4482      	add	sl, r0
    remainder -= toPrint;
   da28c:	4658      	mov	r0, fp
   da28e:	f002 fd0f 	bl	dccb0 <__aeabi_i2d>
   da292:	4602      	mov	r2, r0
   da294:	460b      	mov	r3, r1
   da296:	4620      	mov	r0, r4
   da298:	4629      	mov	r1, r5
   da29a:	f002 fbbb 	bl	dca14 <__aeabi_dsub>
   da29e:	4604      	mov	r4, r0
   da2a0:	460d      	mov	r5, r1
  while (digits-- > 0)
   da2a2:	e7d3      	b.n	da24c <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   da2a4:	4659      	mov	r1, fp
        size_t t = 0;
   da2a6:	2300      	movs	r3, #0
   da2a8:	e7e8      	b.n	da27c <_ZN5Print10printFloatEdh+0x13c>
   da2aa:	bf00      	nop
   da2ac:	000dfa30 	.word	0x000dfa30
   da2b0:	7fefffff 	.word	0x7fefffff
   da2b4:	000dfa34 	.word	0x000dfa34
   da2b8:	41efffff 	.word	0x41efffff
   da2bc:	000dfa38 	.word	0x000dfa38
   da2c0:	c1efffff 	.word	0xc1efffff
   da2c4:	3fe00000 	.word	0x3fe00000
   da2c8:	000df599 	.word	0x000df599
   da2cc:	40240000 	.word	0x40240000

000da2d0 <_ZN5Print5printEfi>:
{
   da2d0:	b538      	push	{r3, r4, r5, lr}
   da2d2:	4604      	mov	r4, r0
   da2d4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   da2d8:	b2cd      	uxtb	r5, r1
   da2da:	f002 fcfb 	bl	dccd4 <__aeabi_f2d>
   da2de:	ec41 0b10 	vmov	d0, r0, r1
   da2e2:	4629      	mov	r1, r5
   da2e4:	4620      	mov	r0, r4
}
   da2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   da2ea:	f7ff bf29 	b.w	da140 <_ZN5Print10printFloatEdh>

000da2ee <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   da2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da2f2:	b086      	sub	sp, #24
   da2f4:	af00      	add	r7, sp, #0
   da2f6:	4605      	mov	r5, r0
   da2f8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   da2fa:	1d38      	adds	r0, r7, #4
   da2fc:	2114      	movs	r1, #20
{
   da2fe:	4614      	mov	r4, r2
    va_copy(args2, args);
   da300:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   da302:	f7ff faab 	bl	d985c <vsnprintf>

    if (n<bufsize)
   da306:	2813      	cmp	r0, #19
   da308:	d80e      	bhi.n	da328 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   da30a:	1d39      	adds	r1, r7, #4
   da30c:	4628      	mov	r0, r5
   da30e:	f7fd f867 	bl	d73e0 <_ZN5Print5writeEPKc>
   da312:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   da314:	b11e      	cbz	r6, da31e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   da316:	4628      	mov	r0, r5
   da318:	f7ff fedb 	bl	da0d2 <_ZN5Print7printlnEv>
   da31c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   da31e:	4620      	mov	r0, r4
   da320:	3718      	adds	r7, #24
   da322:	46bd      	mov	sp, r7
   da324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   da328:	f100 0308 	add.w	r3, r0, #8
   da32c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   da330:	46e8      	mov	r8, sp
        char bigger[n+1];
   da332:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   da336:	4622      	mov	r2, r4
   da338:	1c41      	adds	r1, r0, #1
   da33a:	683b      	ldr	r3, [r7, #0]
   da33c:	4668      	mov	r0, sp
   da33e:	f7ff fa8d 	bl	d985c <vsnprintf>
  return write(str);
   da342:	4669      	mov	r1, sp
   da344:	4628      	mov	r0, r5
   da346:	f7fd f84b 	bl	d73e0 <_ZN5Print5writeEPKc>
   da34a:	4604      	mov	r4, r0
   da34c:	46c5      	mov	sp, r8
   da34e:	e7e1      	b.n	da314 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000da350 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   da350:	4b01      	ldr	r3, [pc, #4]	; (da358 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da352:	4a02      	ldr	r2, [pc, #8]	; (da35c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da354:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   da356:	4770      	bx	lr
   da358:	2003e53c 	.word	0x2003e53c
   da35c:	000dfa3c 	.word	0x000dfa3c

000da360 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   da364:	4a15      	ldr	r2, [pc, #84]	; (da3bc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da366:	f8df 8060 	ldr.w	r8, [pc, #96]	; da3c8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   da36a:	e9d2 3200 	ldrd	r3, r2, [r2]
   da36e:	18c0      	adds	r0, r0, r3
   da370:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   da374:	4a12      	ldr	r2, [pc, #72]	; (da3c0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   da376:	e9d2 3200 	ldrd	r3, r2, [r2]
   da37a:	18c6      	adds	r6, r0, r3
   da37c:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   da380:	e9d8 2300 	ldrd	r2, r3, [r8]
   da384:	42bb      	cmp	r3, r7
   da386:	bf08      	it	eq
   da388:	42b2      	cmpeq	r2, r6
{
   da38a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   da38c:	d013      	beq.n	da3b6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   da38e:	a903      	add	r1, sp, #12
   da390:	4668      	mov	r0, sp
   da392:	e9cd 6700 	strd	r6, r7, [sp]
   da396:	f003 fa13 	bl	dd7c0 <localtime_r>
	calendar_time.tm_year += 1900;
   da39a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da39c:	4d09      	ldr	r5, [pc, #36]	; (da3c4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   da39e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da3a2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   da3a4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da3a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da3a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da3aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da3ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da3ae:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da3b2:	6823      	ldr	r3, [r4, #0]
   da3b4:	602b      	str	r3, [r5, #0]
    }
}
   da3b6:	b00c      	add	sp, #48	; 0x30
   da3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da3bc:	2003e578 	.word	0x2003e578
   da3c0:	2003e570 	.word	0x2003e570
   da3c4:	2003e548 	.word	0x2003e548
   da3c8:	2003e580 	.word	0x2003e580

000da3cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   da3cc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   da3ce:	2000      	movs	r0, #0
   da3d0:	f7ff f9fc 	bl	d97cc <spark_sync_time_pending>
   da3d4:	b128      	cbz	r0, da3e2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   da3d6:	f7ff f9e9 	bl	d97ac <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   da3da:	f080 0001 	eor.w	r0, r0, #1
   da3de:	b2c0      	uxtb	r0, r0
    }
   da3e0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da3e2:	2001      	movs	r0, #1
   da3e4:	e7fc      	b.n	da3e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000da3e8 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   da3e8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da3ea:	f7ff ffb9 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   da3ee:	4b01      	ldr	r3, [pc, #4]	; (da3f4 <_ZN9TimeClass4hourEx+0xc>)
   da3f0:	6898      	ldr	r0, [r3, #8]
   da3f2:	bd08      	pop	{r3, pc}
   da3f4:	2003e548 	.word	0x2003e548

000da3f8 <_ZN9TimeClass6minuteEx>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   da3f8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da3fa:	f7ff ffb1 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_min;
}
   da3fe:	4b01      	ldr	r3, [pc, #4]	; (da404 <_ZN9TimeClass6minuteEx+0xc>)
   da400:	6858      	ldr	r0, [r3, #4]
   da402:	bd08      	pop	{r3, pc}
   da404:	2003e548 	.word	0x2003e548

000da408 <_ZN9TimeClass6secondEx>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   da408:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da40a:	f7ff ffa9 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_sec;
}
   da40e:	4b01      	ldr	r3, [pc, #4]	; (da414 <_ZN9TimeClass6secondEx+0xc>)
   da410:	6818      	ldr	r0, [r3, #0]
   da412:	bd08      	pop	{r3, pc}
   da414:	2003e548 	.word	0x2003e548

000da418 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   da418:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da41a:	f7ff ffa1 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   da41e:	4b01      	ldr	r3, [pc, #4]	; (da424 <_ZN9TimeClass3dayEx+0xc>)
   da420:	68d8      	ldr	r0, [r3, #12]
   da422:	bd08      	pop	{r3, pc}
   da424:	2003e548 	.word	0x2003e548

000da428 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   da428:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da42a:	f7ff ff99 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   da42e:	4b02      	ldr	r3, [pc, #8]	; (da438 <_ZN9TimeClass7weekdayEx+0x10>)
   da430:	6998      	ldr	r0, [r3, #24]
}
   da432:	3001      	adds	r0, #1
   da434:	bd08      	pop	{r3, pc}
   da436:	bf00      	nop
   da438:	2003e548 	.word	0x2003e548

000da43c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   da43c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da43e:	f7ff ff8f 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   da442:	4b02      	ldr	r3, [pc, #8]	; (da44c <_ZN9TimeClass5monthEx+0x10>)
   da444:	6918      	ldr	r0, [r3, #16]
}
   da446:	3001      	adds	r0, #1
   da448:	bd08      	pop	{r3, pc}
   da44a:	bf00      	nop
   da44c:	2003e548 	.word	0x2003e548

000da450 <_ZN9TimeClass4yearEx>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   da450:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da452:	f7ff ff85 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_year;
}
   da456:	4b01      	ldr	r3, [pc, #4]	; (da45c <_ZN9TimeClass4yearEx+0xc>)
   da458:	6958      	ldr	r0, [r3, #20]
   da45a:	bd08      	pop	{r3, pc}
   da45c:	2003e548 	.word	0x2003e548

000da460 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da460:	b530      	push	{r4, r5, lr}
   da462:	4604      	mov	r4, r0
    t += time_zone_cache;
   da464:	4818      	ldr	r0, [pc, #96]	; (da4c8 <_ZN9TimeClass7timeStrEx+0x68>)
   da466:	e9d0 1000 	ldrd	r1, r0, [r0]
   da46a:	1852      	adds	r2, r2, r1
   da46c:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   da470:	4816      	ldr	r0, [pc, #88]	; (da4cc <_ZN9TimeClass7timeStrEx+0x6c>)
   da472:	e9d0 1000 	ldrd	r1, r0, [r0]
   da476:	1852      	adds	r2, r2, r1
{
   da478:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   da47a:	eb40 0303 	adc.w	r3, r0, r3
   da47e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   da482:	2224      	movs	r2, #36	; 0x24
   da484:	eb0d 0002 	add.w	r0, sp, r2
   da488:	2100      	movs	r1, #0
   da48a:	f003 faab 	bl	dd9e4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   da48e:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   da490:	a909      	add	r1, sp, #36	; 0x24
   da492:	4668      	mov	r0, sp
   da494:	f003 f994 	bl	dd7c0 <localtime_r>
    char ascstr[26] = {};
   da498:	2216      	movs	r2, #22
   da49a:	4629      	mov	r1, r5
   da49c:	a803      	add	r0, sp, #12
   da49e:	9502      	str	r5, [sp, #8]
   da4a0:	f003 faa0 	bl	dd9e4 <memset>
    asctime_r(&calendar_time, ascstr);
   da4a4:	a902      	add	r1, sp, #8
   da4a6:	a809      	add	r0, sp, #36	; 0x24
   da4a8:	f003 f94e 	bl	dd748 <asctime_r>
    int len = strlen(ascstr);
   da4ac:	a802      	add	r0, sp, #8
   da4ae:	f004 fadd 	bl	dea6c <strlen>
    ascstr[len-1] = 0; // remove final newline
   da4b2:	ab12      	add	r3, sp, #72	; 0x48
   da4b4:	4418      	add	r0, r3
    return String(ascstr);
   da4b6:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   da4b8:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   da4bc:	4620      	mov	r0, r4
   da4be:	f7ff fc56 	bl	d9d6e <_ZN6StringC1EPKc>
}
   da4c2:	4620      	mov	r0, r4
   da4c4:	b013      	add	sp, #76	; 0x4c
   da4c6:	bd30      	pop	{r4, r5, pc}
   da4c8:	2003e578 	.word	0x2003e578
   da4cc:	2003e570 	.word	0x2003e570

000da4d0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da4d4:	b0a5      	sub	sp, #148	; 0x94
   da4d6:	4607      	mov	r7, r0
   da4d8:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da4da:	a814      	add	r0, sp, #80	; 0x50
{
   da4dc:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da4de:	223f      	movs	r2, #63	; 0x3f
{
   da4e0:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da4e2:	f004 fadd 	bl	deaa0 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da4e6:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da4e8:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da4ea:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da4ee:	f004 fabd 	bl	dea6c <strlen>
   da4f2:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da4f4:	bb5d      	cbnz	r5, da54e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   da4f6:	492a      	ldr	r1, [pc, #168]	; (da5a0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   da4f8:	a803      	add	r0, sp, #12
   da4fa:	f003 fd34 	bl	ddf66 <strcpy>
   da4fe:	ae14      	add	r6, sp, #80	; 0x50
{
   da500:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da502:	f104 3bff 	add.w	fp, r4, #4294967295
   da506:	45ab      	cmp	fp, r5
   da508:	d936      	bls.n	da578 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da50a:	46b1      	mov	r9, r6
   da50c:	f105 0a01 	add.w	sl, r5, #1
   da510:	f819 3b01 	ldrb.w	r3, [r9], #1
   da514:	2b25      	cmp	r3, #37	; 0x25
   da516:	d117      	bne.n	da548 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   da518:	7873      	ldrb	r3, [r6, #1]
   da51a:	2b7a      	cmp	r3, #122	; 0x7a
   da51c:	d114      	bne.n	da548 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   da51e:	a803      	add	r0, sp, #12
   da520:	f004 faa4 	bl	dea6c <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da524:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   da526:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da528:	1828      	adds	r0, r5, r0
   da52a:	4418      	add	r0, r3
   da52c:	ebab 0205 	sub.w	r2, fp, r5
   da530:	1cb1      	adds	r1, r6, #2
   da532:	f003 fa49 	bl	dd9c8 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da536:	4622      	mov	r2, r4
   da538:	a903      	add	r1, sp, #12
   da53a:	4630      	mov	r0, r6
   da53c:	f003 fa44 	bl	dd9c8 <memcpy>
            len = strlen(format_str);
   da540:	a814      	add	r0, sp, #80	; 0x50
   da542:	f004 fa93 	bl	dea6c <strlen>
   da546:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   da548:	464e      	mov	r6, r9
   da54a:	4655      	mov	r5, sl
   da54c:	e7d9      	b.n	da502 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da54e:	213c      	movs	r1, #60	; 0x3c
   da550:	fb95 f3f1 	sdiv	r3, r5, r1
   da554:	2b00      	cmp	r3, #0
   da556:	bfb8      	it	lt
   da558:	425b      	neglt	r3, r3
   da55a:	fbb3 f2f1 	udiv	r2, r3, r1
   da55e:	fb01 3312 	mls	r3, r1, r2, r3
   da562:	9300      	str	r3, [sp, #0]
   da564:	4a0f      	ldr	r2, [pc, #60]	; (da5a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   da566:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da56a:	2110      	movs	r1, #16
   da56c:	a803      	add	r0, sp, #12
   da56e:	fb95 f3f3 	sdiv	r3, r5, r3
   da572:	f7ff f963 	bl	d983c <snprintf>
   da576:	e7c2      	b.n	da4fe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   da578:	2100      	movs	r1, #0
   da57a:	222e      	movs	r2, #46	; 0x2e
   da57c:	a808      	add	r0, sp, #32
   da57e:	9107      	str	r1, [sp, #28]
   da580:	f003 fa30 	bl	dd9e4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   da584:	4643      	mov	r3, r8
   da586:	aa14      	add	r2, sp, #80	; 0x50
   da588:	2132      	movs	r1, #50	; 0x32
   da58a:	a807      	add	r0, sp, #28
   da58c:	f004 fa64 	bl	dea58 <strftime>
    return String(buf);
   da590:	a907      	add	r1, sp, #28
   da592:	4638      	mov	r0, r7
   da594:	f7ff fbeb 	bl	d9d6e <_ZN6StringC1EPKc>
}
   da598:	4638      	mov	r0, r7
   da59a:	b025      	add	sp, #148	; 0x94
   da59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da5a0:	000e0319 	.word	0x000e0319
   da5a4:	000dfa40 	.word	0x000dfa40

000da5a8 <_ZN9TimeClass6formatExPKc>:
{
   da5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   da5aa:	b08d      	sub	sp, #52	; 0x34
   da5ac:	e9cd 2300 	strd	r2, r3, [sp]
   da5b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
   da5b2:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   da5b4:	b915      	cbnz	r5, da5bc <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   da5b6:	4b19      	ldr	r3, [pc, #100]	; (da61c <_ZN9TimeClass6formatExPKc+0x74>)
   da5b8:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   da5ba:	b12d      	cbz	r5, da5c8 <_ZN9TimeClass6formatExPKc+0x20>
   da5bc:	4b18      	ldr	r3, [pc, #96]	; (da620 <_ZN9TimeClass6formatExPKc+0x78>)
   da5be:	4628      	mov	r0, r5
   da5c0:	6819      	ldr	r1, [r3, #0]
   da5c2:	f003 fcc6 	bl	ddf52 <strcmp>
   da5c6:	b938      	cbnz	r0, da5d8 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   da5c8:	e9dd 2300 	ldrd	r2, r3, [sp]
   da5cc:	4620      	mov	r0, r4
   da5ce:	f7ff ff47 	bl	da460 <_ZN9TimeClass7timeStrEx>
}
   da5d2:	4620      	mov	r0, r4
   da5d4:	b00d      	add	sp, #52	; 0x34
   da5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   da5d8:	4e12      	ldr	r6, [pc, #72]	; (da624 <_ZN9TimeClass6formatExPKc+0x7c>)
   da5da:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   da5dc:	4f12      	ldr	r7, [pc, #72]	; (da628 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   da5de:	e9d6 3200 	ldrd	r3, r2, [r6]
   da5e2:	185b      	adds	r3, r3, r1
   da5e4:	9901      	ldr	r1, [sp, #4]
   da5e6:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   da5ea:	e9d7 0100 	ldrd	r0, r1, [r7]
   da5ee:	181b      	adds	r3, r3, r0
   da5f0:	eb41 0202 	adc.w	r2, r1, r2
   da5f4:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   da5f8:	2100      	movs	r1, #0
   da5fa:	2224      	movs	r2, #36	; 0x24
   da5fc:	a803      	add	r0, sp, #12
   da5fe:	f003 f9f1 	bl	dd9e4 <memset>
    localtime_r(&t, &calendar_time);
   da602:	a903      	add	r1, sp, #12
   da604:	4668      	mov	r0, sp
   da606:	f003 f8db 	bl	dd7c0 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da60a:	6832      	ldr	r2, [r6, #0]
   da60c:	683b      	ldr	r3, [r7, #0]
   da60e:	a903      	add	r1, sp, #12
   da610:	4413      	add	r3, r2
   da612:	4620      	mov	r0, r4
   da614:	462a      	mov	r2, r5
   da616:	f7ff ff5b 	bl	da4d0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   da61a:	e7da      	b.n	da5d2 <_ZN9TimeClass6formatExPKc+0x2a>
   da61c:	2003e544 	.word	0x2003e544
   da620:	2003bf90 	.word	0x2003bf90
   da624:	2003e578 	.word	0x2003e578
   da628:	2003e570 	.word	0x2003e570

000da62c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   da62c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   da62e:	2000      	movs	r0, #0
   da630:	f7fe fe44 	bl	d92bc <hal_rtc_time_is_valid>
    if (rtcstate)
   da634:	4604      	mov	r4, r0
   da636:	b9a0      	cbnz	r0, da662 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da638:	f7fe fff2 	bl	d9620 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da63c:	2801      	cmp	r0, #1
   da63e:	d110      	bne.n	da662 <_ZN9TimeClass7isValidEv+0x36>
   da640:	4620      	mov	r0, r4
   da642:	f7ff f81d 	bl	d9680 <system_thread_get_state>
   da646:	b960      	cbnz	r0, da662 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   da648:	f7ff fec0 	bl	da3cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da64c:	b910      	cbnz	r0, da654 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   da64e:	f7ff f89d 	bl	d978c <spark_process>
        while (_while() && !_condition()) {
   da652:	e7f9      	b.n	da648 <_ZN9TimeClass7isValidEv+0x1c>
   da654:	f7ff feba 	bl	da3cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   da658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   da65c:	2000      	movs	r0, #0
   da65e:	f7fe be2d 	b.w	d92bc <hal_rtc_time_is_valid>
}
   da662:	4620      	mov	r0, r4
   da664:	bd10      	pop	{r4, pc}

000da666 <_ZN9TimeClass3nowEv>:
{
   da666:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   da668:	f7ff ffe0 	bl	da62c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   da66c:	2210      	movs	r2, #16
   da66e:	2100      	movs	r1, #0
   da670:	4668      	mov	r0, sp
   da672:	f003 f9b7 	bl	dd9e4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   da676:	2100      	movs	r1, #0
   da678:	4668      	mov	r0, sp
   da67a:	f7fe fe2f 	bl	d92dc <hal_rtc_get_time>
}
   da67e:	9800      	ldr	r0, [sp, #0]
   da680:	b005      	add	sp, #20
   da682:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da688 <_ZN9TimeClass4hourEv>:
{
   da688:	b508      	push	{r3, lr}
	return hour(now());
   da68a:	f7ff ffec 	bl	da666 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da68e:	17c1      	asrs	r1, r0, #31
   da690:	f7ff fe66 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
}
   da694:	4b01      	ldr	r3, [pc, #4]	; (da69c <_ZN9TimeClass4hourEv+0x14>)
   da696:	6898      	ldr	r0, [r3, #8]
   da698:	bd08      	pop	{r3, pc}
   da69a:	bf00      	nop
   da69c:	2003e548 	.word	0x2003e548

000da6a0 <_ZN9TimeClass6minuteEv>:
{
   da6a0:	b508      	push	{r3, lr}
	return minute(now());
   da6a2:	f7ff ffe0 	bl	da666 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da6a6:	17c1      	asrs	r1, r0, #31
   da6a8:	f7ff fe5a 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
}
   da6ac:	4b01      	ldr	r3, [pc, #4]	; (da6b4 <_ZN9TimeClass6minuteEv+0x14>)
   da6ae:	6858      	ldr	r0, [r3, #4]
   da6b0:	bd08      	pop	{r3, pc}
   da6b2:	bf00      	nop
   da6b4:	2003e548 	.word	0x2003e548

000da6b8 <_ZN9TimeClass6secondEv>:
{
   da6b8:	b508      	push	{r3, lr}
	return second(now());
   da6ba:	f7ff ffd4 	bl	da666 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da6be:	17c1      	asrs	r1, r0, #31
   da6c0:	f7ff fe4e 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
}
   da6c4:	4b01      	ldr	r3, [pc, #4]	; (da6cc <_ZN9TimeClass6secondEv+0x14>)
   da6c6:	6818      	ldr	r0, [r3, #0]
   da6c8:	bd08      	pop	{r3, pc}
   da6ca:	bf00      	nop
   da6cc:	2003e548 	.word	0x2003e548

000da6d0 <_ZN9TimeClass3dayEv>:
{
   da6d0:	b508      	push	{r3, lr}
	return day(now());
   da6d2:	f7ff ffc8 	bl	da666 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da6d6:	17c1      	asrs	r1, r0, #31
   da6d8:	f7ff fe42 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
}
   da6dc:	4b01      	ldr	r3, [pc, #4]	; (da6e4 <_ZN9TimeClass3dayEv+0x14>)
   da6de:	68d8      	ldr	r0, [r3, #12]
   da6e0:	bd08      	pop	{r3, pc}
   da6e2:	bf00      	nop
   da6e4:	2003e548 	.word	0x2003e548

000da6e8 <_ZN9TimeClass5monthEv>:
{
   da6e8:	b508      	push	{r3, lr}
	return month(now());
   da6ea:	f7ff ffbc 	bl	da666 <_ZN9TimeClass3nowEv>
}
   da6ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   da6f2:	17c1      	asrs	r1, r0, #31
   da6f4:	f7ff bea2 	b.w	da43c <_ZN9TimeClass5monthEx>

000da6f8 <_ZN9TimeClass4yearEv>:
{
   da6f8:	b508      	push	{r3, lr}
	return year(now());
   da6fa:	f7ff ffb4 	bl	da666 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da6fe:	17c1      	asrs	r1, r0, #31
   da700:	f7ff fe2e 	bl	da360 <_ZL22Refresh_UnixTime_Cachex>
}
   da704:	4b01      	ldr	r3, [pc, #4]	; (da70c <_ZN9TimeClass4yearEv+0x14>)
   da706:	6958      	ldr	r0, [r3, #20]
   da708:	bd08      	pop	{r3, pc}
   da70a:	bf00      	nop
   da70c:	2003e548 	.word	0x2003e548

000da710 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da710:	4b02      	ldr	r3, [pc, #8]	; (da71c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da712:	681a      	ldr	r2, [r3, #0]
   da714:	4b02      	ldr	r3, [pc, #8]	; (da720 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da716:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   da718:	4770      	bx	lr
   da71a:	bf00      	nop
   da71c:	2003bf90 	.word	0x2003bf90
   da720:	2003e544 	.word	0x2003e544

000da724 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   da724:	2100      	movs	r1, #0
   da726:	f7fe bf8b 	b.w	d9640 <system_delay_ms>

000da72a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   da72a:	b510      	push	{r4, lr}
   da72c:	4604      	mov	r4, r0
   da72e:	f7f9 fde6 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
   da732:	4620      	mov	r0, r4
   da734:	bd10      	pop	{r4, pc}

000da736 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   da736:	b513      	push	{r0, r1, r4, lr}
   da738:	460b      	mov	r3, r1
   da73a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da73c:	e9d0 0100 	ldrd	r0, r1, [r0]
   da740:	466c      	mov	r4, sp
   da742:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   da746:	e893 0003 	ldmia.w	r3, {r0, r1}
   da74a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   da74e:	e894 0003 	ldmia.w	r4, {r0, r1}
   da752:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   da756:	b002      	add	sp, #8
   da758:	bd10      	pop	{r4, pc}
	...

000da75c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   da75c:	4803      	ldr	r0, [pc, #12]	; (da76c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   da75e:	4a04      	ldr	r2, [pc, #16]	; (da770 <_GLOBAL__sub_I_RGB+0x14>)
   da760:	4904      	ldr	r1, [pc, #16]	; (da774 <_GLOBAL__sub_I_RGB+0x18>)
   da762:	2300      	movs	r3, #0
   da764:	6083      	str	r3, [r0, #8]
   da766:	f000 bf75 	b.w	db654 <__aeabi_atexit>
   da76a:	bf00      	nop
   da76c:	2003e588 	.word	0x2003e588
   da770:	2003c1d0 	.word	0x2003c1d0
   da774:	000da72b 	.word	0x000da72b

000da778 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   da778:	4b01      	ldr	r3, [pc, #4]	; (da780 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   da77a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   da77c:	4770      	bx	lr
   da77e:	bf00      	nop
   da780:	2003bf98 	.word	0x2003bf98

000da784 <serialEventRun>:
{
   da784:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da786:	4b0b      	ldr	r3, [pc, #44]	; (da7b4 <serialEventRun+0x30>)
   da788:	b143      	cbz	r3, da79c <serialEventRun+0x18>
   da78a:	f000 fbf1 	bl	daf70 <_Z16_fetch_usbserialv>
   da78e:	6803      	ldr	r3, [r0, #0]
   da790:	691b      	ldr	r3, [r3, #16]
   da792:	4798      	blx	r3
   da794:	2800      	cmp	r0, #0
   da796:	dd01      	ble.n	da79c <serialEventRun+0x18>
        serialEvent();
   da798:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   da79c:	4b06      	ldr	r3, [pc, #24]	; (da7b8 <serialEventRun+0x34>)
   da79e:	b143      	cbz	r3, da7b2 <serialEventRun+0x2e>
   da7a0:	f000 fd1a 	bl	db1d8 <_Z22__fetch_global_Serial1v>
   da7a4:	6803      	ldr	r3, [r0, #0]
   da7a6:	691b      	ldr	r3, [r3, #16]
   da7a8:	4798      	blx	r3
   da7aa:	2800      	cmp	r0, #0
   da7ac:	dd01      	ble.n	da7b2 <serialEventRun+0x2e>
        serialEvent1();
   da7ae:	f3af 8000 	nop.w
}
   da7b2:	bd08      	pop	{r3, pc}
	...

000da7bc <_post_loop>:
{
   da7bc:	b508      	push	{r3, lr}
	serialEventRun();
   da7be:	f7ff ffe1 	bl	da784 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da7c2:	f7fe fd73 	bl	d92ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da7c6:	4b01      	ldr	r3, [pc, #4]	; (da7cc <_post_loop+0x10>)
   da7c8:	6018      	str	r0, [r3, #0]
}
   da7ca:	bd08      	pop	{r3, pc}
   da7cc:	2003e7a0 	.word	0x2003e7a0

000da7d0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da7d0:	4802      	ldr	r0, [pc, #8]	; (da7dc <_Z33system_initialize_user_backup_ramv+0xc>)
   da7d2:	4a03      	ldr	r2, [pc, #12]	; (da7e0 <_Z33system_initialize_user_backup_ramv+0x10>)
   da7d4:	4903      	ldr	r1, [pc, #12]	; (da7e4 <_Z33system_initialize_user_backup_ramv+0x14>)
   da7d6:	1a12      	subs	r2, r2, r0
   da7d8:	f003 b8f6 	b.w	dd9c8 <memcpy>
   da7dc:	2003f400 	.word	0x2003f400
   da7e0:	2003f404 	.word	0x2003f404
   da7e4:	000e0498 	.word	0x000e0498

000da7e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da7e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da7ea:	2300      	movs	r3, #0
   da7ec:	9300      	str	r3, [sp, #0]
   da7ee:	461a      	mov	r2, r3
   da7f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da7f4:	f7fe ff5e 	bl	d96b4 <system_ctrl_set_result>
}
   da7f8:	b003      	add	sp, #12
   da7fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da800 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   da800:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da802:	8843      	ldrh	r3, [r0, #2]
   da804:	2b0a      	cmp	r3, #10
   da806:	d008      	beq.n	da81a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da808:	2b50      	cmp	r3, #80	; 0x50
   da80a:	d10b      	bne.n	da824 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   da80c:	4b09      	ldr	r3, [pc, #36]	; (da834 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da80e:	681b      	ldr	r3, [r3, #0]
   da810:	b14b      	cbz	r3, da826 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   da812:	b003      	add	sp, #12
   da814:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   da818:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   da81a:	f7ff ffe5 	bl	da7e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   da81e:	b003      	add	sp, #12
   da820:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da824:	2300      	movs	r3, #0
   da826:	9300      	str	r3, [sp, #0]
   da828:	461a      	mov	r2, r3
   da82a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da82e:	f7fe ff41 	bl	d96b4 <system_ctrl_set_result>
}
   da832:	e7f4      	b.n	da81e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   da834:	2003e59c 	.word	0x2003e59c

000da838 <module_user_init_hook>:
{
   da838:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da83a:	4c12      	ldr	r4, [pc, #72]	; (da884 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da83c:	4812      	ldr	r0, [pc, #72]	; (da888 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da83e:	4d13      	ldr	r5, [pc, #76]	; (da88c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da840:	2100      	movs	r1, #0
   da842:	f7ff f823 	bl	d988c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da846:	6823      	ldr	r3, [r4, #0]
   da848:	42ab      	cmp	r3, r5
   da84a:	4b11      	ldr	r3, [pc, #68]	; (da890 <module_user_init_hook+0x58>)
   da84c:	bf0c      	ite	eq
   da84e:	2201      	moveq	r2, #1
   da850:	2200      	movne	r2, #0
   da852:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da854:	d002      	beq.n	da85c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   da856:	f7ff ffbb 	bl	da7d0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   da85a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da85c:	f7fe fd16 	bl	d928c <HAL_RNG_GetRandomNumber>
   da860:	4604      	mov	r4, r0
    srand(seed);
   da862:	f003 fb45 	bl	ddef0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da866:	4b0b      	ldr	r3, [pc, #44]	; (da894 <module_user_init_hook+0x5c>)
   da868:	b113      	cbz	r3, da870 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   da86a:	4620      	mov	r0, r4
   da86c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da870:	2100      	movs	r1, #0
   da872:	4808      	ldr	r0, [pc, #32]	; (da894 <module_user_init_hook+0x5c>)
   da874:	f7fe ffb2 	bl	d97dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   da878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da87c:	4806      	ldr	r0, [pc, #24]	; (da898 <module_user_init_hook+0x60>)
   da87e:	2100      	movs	r1, #0
   da880:	f7fe bf0e 	b.w	d96a0 <system_ctrl_set_app_request_handler>
   da884:	2003f400 	.word	0x2003f400
   da888:	000da779 	.word	0x000da779
   da88c:	9a271c1e 	.word	0x9a271c1e
   da890:	2003e598 	.word	0x2003e598
   da894:	00000000 	.word	0x00000000
   da898:	000da801 	.word	0x000da801

000da89c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da89c:	4770      	bx	lr

000da89e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   da89e:	2000      	movs	r0, #0
   da8a0:	4770      	bx	lr

000da8a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da8a2:	b510      	push	{r4, lr}
   da8a4:	2110      	movs	r1, #16
   da8a6:	4604      	mov	r4, r0
   da8a8:	f000 fed9 	bl	db65e <_ZdlPvj>
   da8ac:	4620      	mov	r0, r4
   da8ae:	bd10      	pop	{r4, pc}

000da8b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   da8b0:	b508      	push	{r3, lr}
      { delete this; }
   da8b2:	f7ff fff6 	bl	da8a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   da8b6:	bd08      	pop	{r3, pc}

000da8b8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   da8b8:	b530      	push	{r4, r5, lr}
        type_(type) {
   da8ba:	2200      	movs	r2, #0
   da8bc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   da8c0:	6002      	str	r2, [r0, #0]
   da8c2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   da8c4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   da8c6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   da8c8:	680c      	ldr	r4, [r1, #0]
   da8ca:	8085      	strh	r5, [r0, #4]
   da8cc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da8ce:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   da8d0:	bd30      	pop	{r4, r5, pc}

000da8d2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   da8d2:	b510      	push	{r4, lr}
   da8d4:	4604      	mov	r4, r0
    free((void*)msg_);
   da8d6:	6800      	ldr	r0, [r0, #0]
   da8d8:	f7fe ff90 	bl	d97fc <free>
}
   da8dc:	4620      	mov	r0, r4
   da8de:	bd10      	pop	{r4, pc}

000da8e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   da8e0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   da8e2:	68c4      	ldr	r4, [r0, #12]
   da8e4:	b1f4      	cbz	r4, da924 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   da8e6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   da8e8:	2b02      	cmp	r3, #2
   da8ea:	d103      	bne.n	da8f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   da8ec:	f104 000c 	add.w	r0, r4, #12
   da8f0:	f7ff ffef 	bl	da8d2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   da8f4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   da8f6:	b135      	cbz	r5, da906 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   da8f8:	4628      	mov	r0, r5
   da8fa:	f7f9 fd00 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
   da8fe:	2110      	movs	r1, #16
   da900:	4628      	mov	r0, r5
   da902:	f000 feac 	bl	db65e <_ZdlPvj>
   da906:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   da908:	b135      	cbz	r5, da918 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   da90a:	4628      	mov	r0, r5
   da90c:	f7f9 fcf7 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
   da910:	2110      	movs	r1, #16
   da912:	4628      	mov	r0, r5
   da914:	f000 fea3 	bl	db65e <_ZdlPvj>
   da918:	4620      	mov	r0, r4
   da91a:	2114      	movs	r1, #20
   da91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da920:	f000 be9d 	b.w	db65e <_ZdlPvj>
   da924:	bd38      	pop	{r3, r4, r5, pc}

000da926 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   da926:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da928:	460e      	mov	r6, r1
   da92a:	4604      	mov	r4, r0
   da92c:	f856 3b04 	ldr.w	r3, [r6], #4
   da930:	9300      	str	r3, [sp, #0]
   da932:	460d      	mov	r5, r1
   da934:	a801      	add	r0, sp, #4
   da936:	4631      	mov	r1, r6
   da938:	f7ff fb8e 	bl	da058 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   da93c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   da93e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   da940:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   da942:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   da944:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   da946:	2300      	movs	r3, #0
   da948:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   da94a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   da94c:	f7f9 ff40 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da950:	4630      	mov	r0, r6
   da952:	f7f9 ff3d 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   da956:	4628      	mov	r0, r5
   da958:	2108      	movs	r1, #8
   da95a:	f000 fe80 	bl	db65e <_ZdlPvj>
        return p;
    }
   da95e:	4620      	mov	r0, r4
   da960:	b002      	add	sp, #8
   da962:	bd70      	pop	{r4, r5, r6, pc}

000da964 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   da964:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   da966:	b510      	push	{r4, lr}
      if (_M_empty())
   da968:	b90a      	cbnz	r2, da96e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   da96a:	f001 f812 	bl	db992 <_ZSt25__throw_bad_function_callv>
    }
   da96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da972:	68c3      	ldr	r3, [r0, #12]
   da974:	4718      	bx	r3

000da976 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da976:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   da978:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   da97a:	f100 0110 	add.w	r1, r0, #16
   da97e:	f7ff fff1 	bl	da964 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   da982:	bd08      	pop	{r3, pc}

000da984 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   da984:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   da986:	b510      	push	{r4, lr}
      if (_M_empty())
   da988:	b90a      	cbnz	r2, da98e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   da98a:	f001 f802 	bl	db992 <_ZSt25__throw_bad_function_callv>
    }
   da98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da992:	68c3      	ldr	r3, [r0, #12]
   da994:	4718      	bx	r3

000da996 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da996:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   da998:	6800      	ldr	r0, [r0, #0]
   da99a:	f100 0110 	add.w	r1, r0, #16
   da99e:	f7ff fff1 	bl	da984 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   da9a2:	bd08      	pop	{r3, pc}

000da9a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   da9a4:	b538      	push	{r3, r4, r5, lr}
   da9a6:	2300      	movs	r3, #0
   da9a8:	4604      	mov	r4, r0
   da9aa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da9ac:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   da9ae:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da9b0:	f7f9 fb71 	bl	d4096 <_Znwj>
   da9b4:	b128      	cbz	r0, da9c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   da9b6:	2301      	movs	r3, #1
   da9b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   da9bc:	4b02      	ldr	r3, [pc, #8]	; (da9c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   da9be:	6003      	str	r3, [r0, #0]
   da9c0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da9c2:	6020      	str	r0, [r4, #0]
	}
   da9c4:	4620      	mov	r0, r4
   da9c6:	bd38      	pop	{r3, r4, r5, pc}
   da9c8:	000dfa70 	.word	0x000dfa70

000da9cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   da9cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da9ce:	2300      	movs	r3, #0
   da9d0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da9d2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da9d4:	4604      	mov	r4, r0
   da9d6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da9d8:	b12b      	cbz	r3, da9e6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da9da:	2202      	movs	r2, #2
   da9dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da9de:	68eb      	ldr	r3, [r5, #12]
   da9e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da9e2:	68ab      	ldr	r3, [r5, #8]
   da9e4:	60a3      	str	r3, [r4, #8]
    }
   da9e6:	4620      	mov	r0, r4
   da9e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000da9ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   da9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   da9ee:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   da9f0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   da9f2:	4668      	mov	r0, sp
   da9f4:	f7ff ff60 	bl	da8b8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   da9f8:	f04f 0302 	mov.w	r3, #2
   da9fc:	e8d4 2f4f 	ldrexb	r2, [r4]
   daa00:	2a00      	cmp	r2, #0
   daa02:	d103      	bne.n	daa0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   daa04:	e8c4 3f41 	strexb	r1, r3, [r4]
   daa08:	2900      	cmp	r1, #0
   daa0a:	d1f7      	bne.n	da9fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   daa0c:	d125      	bne.n	daa5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   daa0e:	f104 050c 	add.w	r5, r4, #12
   daa12:	4669      	mov	r1, sp
   daa14:	4628      	mov	r0, r5
   daa16:	f7ff ff4f 	bl	da8b8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   daa1a:	f3bf 8f5b 	dmb	ish
   daa1e:	2301      	movs	r3, #1
   daa20:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   daa22:	2000      	movs	r0, #0
   daa24:	f104 0308 	add.w	r3, r4, #8
   daa28:	f3bf 8f5b 	dmb	ish
   daa2c:	e853 6f00 	ldrex	r6, [r3]
   daa30:	e843 0200 	strex	r2, r0, [r3]
   daa34:	2a00      	cmp	r2, #0
   daa36:	d1f9      	bne.n	daa2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   daa38:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   daa3c:	b16e      	cbz	r6, daa5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   daa3e:	f7fe fe0f 	bl	d9660 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   daa42:	b178      	cbz	r0, daa64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   daa44:	4629      	mov	r1, r5
   daa46:	4630      	mov	r0, r6
   daa48:	f7ff ff8c 	bl	da964 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   daa4c:	4630      	mov	r0, r6
   daa4e:	f7f9 fc56 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   daa52:	2110      	movs	r1, #16
   daa54:	4630      	mov	r0, r6
   daa56:	f000 fe02 	bl	db65e <_ZdlPvj>
        p_->setError(std::move(error));
   daa5a:	4668      	mov	r0, sp
   daa5c:	f7ff ff39 	bl	da8d2 <_ZN8particle5ErrorD1Ev>
    }
   daa60:	b009      	add	sp, #36	; 0x24
   daa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   daa64:	4631      	mov	r1, r6
   daa66:	a802      	add	r0, sp, #8
   daa68:	f7ff ffb0 	bl	da9cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   daa6c:	68e0      	ldr	r0, [r4, #12]
   daa6e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   daa72:	b108      	cbz	r0, daa78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   daa74:	f003 fa80 	bl	ddf78 <strdup>
        type_(type) {
   daa78:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   daa7a:	2010      	movs	r0, #16
   daa7c:	f8ad 501c 	strh.w	r5, [sp, #28]
   daa80:	f7f9 fb09 	bl	d4096 <_Znwj>
   daa84:	4605      	mov	r5, r0
   daa86:	b1e8      	cbz	r0, daac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   daa88:	2700      	movs	r7, #0
   daa8a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daa8c:	2018      	movs	r0, #24
   daa8e:	f7f9 fb02 	bl	d4096 <_Znwj>
   daa92:	4604      	mov	r4, r0
   daa94:	b188      	cbz	r0, daaba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   daa96:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   daa98:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   daa9a:	a802      	add	r0, sp, #8
   daa9c:	f7ff fe4b 	bl	da736 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daaa0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   daaa2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   daaa4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daaa6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   daaa8:	9204      	str	r2, [sp, #16]
   daaaa:	a906      	add	r1, sp, #24
   daaac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   daaae:	60e3      	str	r3, [r4, #12]
   daab0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   daab4:	9205      	str	r2, [sp, #20]
   daab6:	f7ff feff 	bl	da8b8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   daaba:	4b08      	ldr	r3, [pc, #32]	; (daadc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   daabc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   daabe:	4b08      	ldr	r3, [pc, #32]	; (daae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daac0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   daac2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   daac4:	a806      	add	r0, sp, #24
   daac6:	f7ff ff04 	bl	da8d2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   daaca:	a802      	add	r0, sp, #8
   daacc:	f7f9 fc17 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   daad0:	2200      	movs	r2, #0
   daad2:	4629      	mov	r1, r5
   daad4:	4803      	ldr	r0, [pc, #12]	; (daae4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   daad6:	f7fe fdcb 	bl	d9670 <application_thread_invoke>
   daada:	e7b7      	b.n	daa4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   daadc:	000da977 	.word	0x000da977
   daae0:	000dac0d 	.word	0x000dac0d
   daae4:	000db22d 	.word	0x000db22d

000daae8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   daae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daaec:	b08a      	sub	sp, #40	; 0x28
   daaee:	4605      	mov	r5, r0
   daaf0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   daaf4:	460c      	mov	r4, r1
   daaf6:	4617      	mov	r7, r2
   daaf8:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   daafa:	f7fe fe57 	bl	d97ac <spark_cloud_flag_connected>
   daafe:	ae07      	add	r6, sp, #28
    if (!connected()) {
   dab00:	4682      	mov	sl, r0
   dab02:	bb38      	cbnz	r0, dab54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   dab04:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dab08:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dab0a:	a905      	add	r1, sp, #20
   dab0c:	4630      	mov	r0, r6
   dab0e:	f8ad 3018 	strh.w	r3, [sp, #24]
   dab12:	f7ff fed1 	bl	da8b8 <_ZN8particle5ErrorC1EOS0_>
   dab16:	2014      	movs	r0, #20
   dab18:	f7f9 fabd 	bl	d4096 <_Znwj>
   dab1c:	4604      	mov	r4, r0
   dab1e:	b148      	cbz	r0, dab34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dab20:	2302      	movs	r3, #2
   dab22:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dab24:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dab26:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dab2a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   dab2c:	4631      	mov	r1, r6
   dab2e:	300c      	adds	r0, #12
   dab30:	f7ff fec2 	bl	da8b8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dab34:	4628      	mov	r0, r5
	: __shared_count(__p)
   dab36:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dab38:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   dab3c:	f7ff ff32 	bl	da9a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dab40:	4630      	mov	r0, r6
   dab42:	f7ff fec6 	bl	da8d2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dab46:	a805      	add	r0, sp, #20
   dab48:	f7ff fec3 	bl	da8d2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   dab4c:	4628      	mov	r0, r5
   dab4e:	b00a      	add	sp, #40	; 0x28
   dab50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dab54:	230c      	movs	r3, #12
   dab56:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dab5a:	2014      	movs	r0, #20
   dab5c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   dab60:	9307      	str	r3, [sp, #28]
   dab62:	f7f9 fa98 	bl	d4096 <_Znwj>
   dab66:	4601      	mov	r1, r0
   dab68:	b128      	cbz	r0, dab76 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dab6a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   dab6e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dab72:	f880 a001 	strb.w	sl, [r0, #1]
   dab76:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dab78:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   dab7a:	f7ff ff13 	bl	da9a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   dab7e:	4b22      	ldr	r3, [pc, #136]	; (dac08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   dab80:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dab82:	2008      	movs	r0, #8
   dab84:	f7f9 fa87 	bl	d4096 <_Znwj>
   dab88:	4682      	mov	sl, r0
   dab8a:	b128      	cbz	r0, dab98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dab8c:	9b03      	ldr	r3, [sp, #12]
   dab8e:	f840 3b04 	str.w	r3, [r0], #4
   dab92:	a904      	add	r1, sp, #16
   dab94:	f7ff fa60 	bl	da058 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dab98:	9600      	str	r6, [sp, #0]
   dab9a:	fa5f f389 	uxtb.w	r3, r9
   dab9e:	4642      	mov	r2, r8
   daba0:	4639      	mov	r1, r7
   daba2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   daba4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   daba8:	f7fe fe08 	bl	d97bc <spark_send_event>
   dabac:	b9b8      	cbnz	r0, dabde <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   dabae:	9b03      	ldr	r3, [sp, #12]
   dabb0:	785b      	ldrb	r3, [r3, #1]
   dabb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dabb6:	b993      	cbnz	r3, dabde <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   dabb8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   dabbc:	a905      	add	r1, sp, #20
   dabbe:	a803      	add	r0, sp, #12
   dabc0:	9205      	str	r2, [sp, #20]
   dabc2:	f8ad 3018 	strh.w	r3, [sp, #24]
   dabc6:	f7ff ff11 	bl	da9ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dabca:	a805      	add	r0, sp, #20
   dabcc:	f7ff fe81 	bl	da8d2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dabd0:	a805      	add	r0, sp, #20
   dabd2:	9909      	ldr	r1, [sp, #36]	; 0x24
   dabd4:	f7ff fea7 	bl	da926 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   dabd8:	a806      	add	r0, sp, #24
   dabda:	f7f9 fdf9 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dabde:	9b03      	ldr	r3, [sp, #12]
   dabe0:	9305      	str	r3, [sp, #20]
   dabe2:	a904      	add	r1, sp, #16
   dabe4:	a806      	add	r0, sp, #24
   dabe6:	f7ff fa37 	bl	da058 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   dabea:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dabec:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   dabee:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   dabf0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   dabf2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   dabf4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   dabf6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   dabf8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   dabfa:	f7f9 fde9 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dabfe:	a804      	add	r0, sp, #16
   dac00:	f7f9 fde6 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   dac04:	e7a2      	b.n	dab4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   dac06:	bf00      	nop
   dac08:	000dacd1 	.word	0x000dacd1

000dac0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   dac0c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dac0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dac10:	4605      	mov	r5, r0
	  switch (__op)
   dac12:	d007      	beq.n	dac24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   dac14:	2a03      	cmp	r2, #3
   dac16:	d018      	beq.n	dac4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   dac18:	2a01      	cmp	r2, #1
   dac1a:	d101      	bne.n	dac20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dac1c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dac1e:	6003      	str	r3, [r0, #0]
	}
   dac20:	2000      	movs	r0, #0
   dac22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dac24:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   dac26:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   dac28:	f7f9 fa35 	bl	d4096 <_Znwj>
   dac2c:	4604      	mov	r4, r0
   dac2e:	b150      	cbz	r0, dac46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
   dac30:	4631      	mov	r1, r6
   dac32:	f7ff fecb 	bl	da9cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   dac36:	6930      	ldr	r0, [r6, #16]
   dac38:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dac3c:	b108      	cbz	r0, dac42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   dac3e:	f003 f99b 	bl	ddf78 <strdup>
        type_(type) {
   dac42:	6120      	str	r0, [r4, #16]
   dac44:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   dac46:	602c      	str	r4, [r5, #0]
	}
   dac48:	e7ea      	b.n	dac20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dac4a:	6804      	ldr	r4, [r0, #0]
   dac4c:	2c00      	cmp	r4, #0
   dac4e:	d0e7      	beq.n	dac20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   dac50:	f104 0010 	add.w	r0, r4, #16
   dac54:	f7ff fe3d 	bl	da8d2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   dac58:	4620      	mov	r0, r4
   dac5a:	f7f9 fb50 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dac5e:	2118      	movs	r1, #24
   dac60:	4620      	mov	r0, r4
   dac62:	f000 fcfc 	bl	db65e <_ZdlPvj>
   dac66:	e7db      	b.n	dac20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000dac68 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   dac68:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   dac6a:	2300      	movs	r3, #0
   dac6c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   dac6e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   dac70:	4604      	mov	r4, r0
   dac72:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   dac74:	b12b      	cbz	r3, dac82 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dac76:	2202      	movs	r2, #2
   dac78:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dac7a:	68eb      	ldr	r3, [r5, #12]
   dac7c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dac7e:	68ab      	ldr	r3, [r5, #8]
   dac80:	60a3      	str	r3, [r4, #8]
    }
   dac82:	4620      	mov	r0, r4
   dac84:	bd38      	pop	{r3, r4, r5, pc}

000dac86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   dac86:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dac88:	b570      	push	{r4, r5, r6, lr}
   dac8a:	4604      	mov	r4, r0
	  switch (__op)
   dac8c:	d007      	beq.n	dac9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   dac8e:	2a03      	cmp	r2, #3
   dac90:	d012      	beq.n	dacb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   dac92:	2a01      	cmp	r2, #1
   dac94:	d101      	bne.n	dac9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dac96:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dac98:	6003      	str	r3, [r0, #0]
	}
   dac9a:	2000      	movs	r0, #0
   dac9c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dac9e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   daca0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   daca2:	f7f9 f9f8 	bl	d4096 <_Znwj>
   daca6:	4605      	mov	r5, r0
   daca8:	b120      	cbz	r0, dacb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   dacaa:	4631      	mov	r1, r6
   dacac:	f7ff ffdc 	bl	dac68 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dacb0:	7c33      	ldrb	r3, [r6, #16]
   dacb2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   dacb4:	6025      	str	r5, [r4, #0]
	}
   dacb6:	e7f0      	b.n	dac9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dacb8:	6804      	ldr	r4, [r0, #0]
   dacba:	2c00      	cmp	r4, #0
   dacbc:	d0ed      	beq.n	dac9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   dacbe:	4620      	mov	r0, r4
   dacc0:	f7f9 fb1d 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dacc4:	2114      	movs	r1, #20
   dacc6:	4620      	mov	r0, r4
   dacc8:	f000 fcc9 	bl	db65e <_ZdlPvj>
   daccc:	e7e5      	b.n	dac9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000dacd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dacd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dacd2:	b089      	sub	sp, #36	; 0x24
   dacd4:	4604      	mov	r4, r0
   dacd6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dacd8:	a801      	add	r0, sp, #4
   dacda:	4611      	mov	r1, r2
   dacdc:	f7ff fe23 	bl	da926 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dace0:	b1a4      	cbz	r4, dad0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   dace2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dace4:	b11d      	cbz	r5, dacee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   dace6:	4628      	mov	r0, r5
   dace8:	f003 f946 	bl	ddf78 <strdup>
   dacec:	4605      	mov	r5, r0
   dacee:	a801      	add	r0, sp, #4
   dacf0:	a903      	add	r1, sp, #12
        type_(type) {
   dacf2:	9503      	str	r5, [sp, #12]
   dacf4:	f8ad 4010 	strh.w	r4, [sp, #16]
   dacf8:	f7ff fe78 	bl	da9ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dacfc:	a803      	add	r0, sp, #12
   dacfe:	f7ff fde8 	bl	da8d2 <_ZN8particle5ErrorD1Ev>
   dad02:	a802      	add	r0, sp, #8
   dad04:	f7f9 fd64 	bl	d47d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dad08:	b009      	add	sp, #36	; 0x24
   dad0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dad0c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   dad0e:	2301      	movs	r3, #1
   dad10:	e8d5 2f4f 	ldrexb	r2, [r5]
   dad14:	2a00      	cmp	r2, #0
   dad16:	d103      	bne.n	dad20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   dad18:	e8c5 3f41 	strexb	r1, r3, [r5]
   dad1c:	2900      	cmp	r1, #0
   dad1e:	d1f7      	bne.n	dad10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   dad20:	d1ef      	bne.n	dad02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   dad22:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   dad24:	f3bf 8f5b 	dmb	ish
   dad28:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   dad2a:	1d2b      	adds	r3, r5, #4
   dad2c:	f3bf 8f5b 	dmb	ish
   dad30:	e853 6f00 	ldrex	r6, [r3]
   dad34:	e843 4200 	strex	r2, r4, [r3]
   dad38:	2a00      	cmp	r2, #0
   dad3a:	d1f9      	bne.n	dad30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   dad3c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   dad40:	2e00      	cmp	r6, #0
   dad42:	d0de      	beq.n	dad02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   dad44:	4620      	mov	r0, r4
   dad46:	f7fe fc8b 	bl	d9660 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   dad4a:	4607      	mov	r7, r0
   dad4c:	b160      	cbz	r0, dad68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dad4e:	f105 010c 	add.w	r1, r5, #12
   dad52:	4630      	mov	r0, r6
   dad54:	f7ff fe16 	bl	da984 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   dad58:	4630      	mov	r0, r6
   dad5a:	f7f9 fad0 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   dad5e:	2110      	movs	r1, #16
   dad60:	4630      	mov	r0, r6
   dad62:	f000 fc7c 	bl	db65e <_ZdlPvj>
   dad66:	e7cc      	b.n	dad02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dad68:	4631      	mov	r1, r6
   dad6a:	a803      	add	r0, sp, #12
   dad6c:	f7ff ff7c 	bl	dac68 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dad70:	7b2b      	ldrb	r3, [r5, #12]
   dad72:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dad76:	2010      	movs	r0, #16
   dad78:	f7f9 f98d 	bl	d4096 <_Znwj>
   dad7c:	4605      	mov	r5, r0
   dad7e:	b1d0      	cbz	r0, dadb6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   dad80:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dad82:	2014      	movs	r0, #20
   dad84:	f7f9 f987 	bl	d4096 <_Znwj>
   dad88:	4604      	mov	r4, r0
   dad8a:	b178      	cbz	r0, dadac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   dad8c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dad8e:	4601      	mov	r1, r0
   dad90:	a803      	add	r0, sp, #12
   dad92:	f7ff fcd0 	bl	da736 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dad96:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dad98:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dad9a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dad9c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   dad9e:	9205      	str	r2, [sp, #20]
   dada0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dada2:	60e3      	str	r3, [r4, #12]
   dada4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   dada8:	9206      	str	r2, [sp, #24]
   dadaa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   dadac:	4b06      	ldr	r3, [pc, #24]	; (dadc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   dadae:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dadb0:	4b06      	ldr	r3, [pc, #24]	; (dadcc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dadb2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   dadb4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   dadb6:	a803      	add	r0, sp, #12
   dadb8:	f7f9 faa1 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dadbc:	2200      	movs	r2, #0
   dadbe:	4629      	mov	r1, r5
   dadc0:	4803      	ldr	r0, [pc, #12]	; (dadd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   dadc2:	f7fe fc55 	bl	d9670 <application_thread_invoke>
   dadc6:	e7c7      	b.n	dad58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   dadc8:	000da997 	.word	0x000da997
   dadcc:	000dac87 	.word	0x000dac87
   dadd0:	000db22d 	.word	0x000db22d

000dadd4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dadd4:	4770      	bx	lr

000dadd6 <_ZN9IPAddressD0Ev>:
   dadd6:	b510      	push	{r4, lr}
   dadd8:	2118      	movs	r1, #24
   dadda:	4604      	mov	r4, r0
   daddc:	f000 fc3f 	bl	db65e <_ZdlPvj>
   dade0:	4620      	mov	r0, r4
   dade2:	bd10      	pop	{r4, pc}

000dade4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dade4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dade6:	7d03      	ldrb	r3, [r0, #20]
   dade8:	2b06      	cmp	r3, #6
{
   dadea:	b08d      	sub	sp, #52	; 0x34
   dadec:	460e      	mov	r6, r1
   dadee:	f100 0704 	add.w	r7, r0, #4
   dadf2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   dadf6:	d012      	beq.n	dae1e <_ZNK9IPAddress7printToER5Print+0x3a>
   dadf8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   dadfc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dae00:	220a      	movs	r2, #10
   dae02:	4630      	mov	r0, r6
   dae04:	f7ff f97d 	bl	da102 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dae08:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dae0a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   dae0c:	d019      	beq.n	dae42 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   dae0e:	2c00      	cmp	r4, #0
   dae10:	d0f4      	beq.n	dadfc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   dae12:	212e      	movs	r1, #46	; 0x2e
   dae14:	4630      	mov	r0, r6
   dae16:	f7ff f955 	bl	da0c4 <_ZN5Print5printEc>
   dae1a:	4404      	add	r4, r0
   dae1c:	e7ee      	b.n	dadfc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dae1e:	232f      	movs	r3, #47	; 0x2f
   dae20:	466a      	mov	r2, sp
   dae22:	4639      	mov	r1, r7
   dae24:	200a      	movs	r0, #10
		buf[0] = 0;
   dae26:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dae2a:	f7fe faa7 	bl	d937c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   dae2e:	4668      	mov	r0, sp
   dae30:	f003 fe1c 	bl	dea6c <strlen>
   dae34:	6833      	ldr	r3, [r6, #0]
   dae36:	4602      	mov	r2, r0
   dae38:	68db      	ldr	r3, [r3, #12]
   dae3a:	4669      	mov	r1, sp
   dae3c:	4630      	mov	r0, r6
   dae3e:	4798      	blx	r3
   dae40:	4604      	mov	r4, r0
    }
    return n;
}
   dae42:	4620      	mov	r0, r4
   dae44:	b00d      	add	sp, #52	; 0x34
   dae46:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dae48 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   dae48:	b510      	push	{r4, lr}
   dae4a:	4b05      	ldr	r3, [pc, #20]	; (dae60 <_ZN9IPAddressC1Ev+0x18>)
   dae4c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dae4e:	2211      	movs	r2, #17
   dae50:	f840 3b04 	str.w	r3, [r0], #4
   dae54:	2100      	movs	r1, #0
   dae56:	f002 fdc5 	bl	dd9e4 <memset>
}
   dae5a:	4620      	mov	r0, r4
   dae5c:	bd10      	pop	{r4, pc}
   dae5e:	bf00      	nop
   dae60:	000dfa8c 	.word	0x000dfa8c

000dae64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   dae64:	4603      	mov	r3, r0
   dae66:	4a07      	ldr	r2, [pc, #28]	; (dae84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dae68:	b510      	push	{r4, lr}
   dae6a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   dae6e:	f101 0210 	add.w	r2, r1, #16
   dae72:	f851 4b04 	ldr.w	r4, [r1], #4
   dae76:	f843 4b04 	str.w	r4, [r3], #4
   dae7a:	4291      	cmp	r1, r2
   dae7c:	d1f9      	bne.n	dae72 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dae7e:	780a      	ldrb	r2, [r1, #0]
   dae80:	701a      	strb	r2, [r3, #0]
}
   dae82:	bd10      	pop	{r4, pc}
   dae84:	000dfa8c 	.word	0x000dfa8c

000dae88 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   dae88:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dae8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dae8e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dae92:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dae96:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   dae9a:	2304      	movs	r3, #4
   dae9c:	6041      	str	r1, [r0, #4]
   dae9e:	7503      	strb	r3, [r0, #20]
}
   daea0:	bd10      	pop	{r4, pc}

000daea2 <_ZN9IPAddressaSEPKh>:
{
   daea2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   daea4:	78cb      	ldrb	r3, [r1, #3]
   daea6:	9300      	str	r3, [sp, #0]
   daea8:	788b      	ldrb	r3, [r1, #2]
   daeaa:	784a      	ldrb	r2, [r1, #1]
   daeac:	7809      	ldrb	r1, [r1, #0]
   daeae:	f7ff ffeb 	bl	dae88 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   daeb2:	b002      	add	sp, #8
   daeb4:	bd10      	pop	{r4, pc}

000daeb6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   daeb6:	7441      	strb	r1, [r0, #17]
}
   daeb8:	4770      	bx	lr

000daeba <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   daeba:	4770      	bx	lr

000daebc <_ZN9USBSerial4readEv>:
{
   daebc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   daebe:	2100      	movs	r1, #0
   daec0:	7c00      	ldrb	r0, [r0, #16]
   daec2:	f7fe fb8b 	bl	d95dc <HAL_USB_USART_Receive_Data>
}
   daec6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   daeca:	bd08      	pop	{r3, pc}

000daecc <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   daecc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   daece:	2101      	movs	r1, #1
   daed0:	7c00      	ldrb	r0, [r0, #16]
   daed2:	f7fe fb83 	bl	d95dc <HAL_USB_USART_Receive_Data>
}
   daed6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   daeda:	bd08      	pop	{r3, pc}

000daedc <_ZN9USBSerial17availableForWriteEv>:
{
   daedc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   daede:	7c00      	ldrb	r0, [r0, #16]
   daee0:	f7fe fb74 	bl	d95cc <HAL_USB_USART_Available_Data_For_Write>
}
   daee4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   daee8:	bd08      	pop	{r3, pc}

000daeea <_ZN9USBSerial9availableEv>:
{
   daeea:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   daeec:	7c00      	ldrb	r0, [r0, #16]
   daeee:	f7fe fb65 	bl	d95bc <HAL_USB_USART_Available_Data>
}
   daef2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   daef6:	bd08      	pop	{r3, pc}

000daef8 <_ZN9USBSerial5writeEh>:
{
   daef8:	b513      	push	{r0, r1, r4, lr}
   daefa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   daefc:	7c00      	ldrb	r0, [r0, #16]
{
   daefe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   daf00:	f7fe fb64 	bl	d95cc <HAL_USB_USART_Available_Data_For_Write>
   daf04:	2800      	cmp	r0, #0
   daf06:	9901      	ldr	r1, [sp, #4]
   daf08:	dc01      	bgt.n	daf0e <_ZN9USBSerial5writeEh+0x16>
   daf0a:	7c60      	ldrb	r0, [r4, #17]
   daf0c:	b120      	cbz	r0, daf18 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   daf0e:	7c20      	ldrb	r0, [r4, #16]
   daf10:	f7fe fb6c 	bl	d95ec <HAL_USB_USART_Send_Data>
   daf14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   daf18:	b002      	add	sp, #8
   daf1a:	bd10      	pop	{r4, pc}

000daf1c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   daf1c:	7c00      	ldrb	r0, [r0, #16]
   daf1e:	f7fe bb6d 	b.w	d95fc <HAL_USB_USART_Flush_Data>

000daf22 <_ZN9USBSerialD0Ev>:
   daf22:	b510      	push	{r4, lr}
   daf24:	2114      	movs	r1, #20
   daf26:	4604      	mov	r4, r0
   daf28:	f000 fb99 	bl	db65e <_ZdlPvj>
   daf2c:	4620      	mov	r0, r4
   daf2e:	bd10      	pop	{r4, pc}

000daf30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   daf30:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   daf32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   daf36:	4604      	mov	r4, r0
   daf38:	4608      	mov	r0, r1
   daf3a:	2100      	movs	r1, #0
   daf3c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   daf40:	4b04      	ldr	r3, [pc, #16]	; (daf54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   daf42:	6023      	str	r3, [r4, #0]
  _blocking = true;
   daf44:	2301      	movs	r3, #1
  _serial = serial;
   daf46:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   daf48:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   daf4a:	4611      	mov	r1, r2
   daf4c:	f7fe fb26 	bl	d959c <HAL_USB_USART_Init>
}
   daf50:	4620      	mov	r0, r4
   daf52:	bd10      	pop	{r4, pc}
   daf54:	000dfaa0 	.word	0x000dfaa0

000daf58 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   daf58:	7c00      	ldrb	r0, [r0, #16]
   daf5a:	2200      	movs	r2, #0
   daf5c:	f7fe bb26 	b.w	d95ac <HAL_USB_USART_Begin>

000daf60 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   daf60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   daf62:	2214      	movs	r2, #20
{
   daf64:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   daf66:	2100      	movs	r1, #0
   daf68:	f002 fd3c 	bl	dd9e4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   daf6c:	4620      	mov	r0, r4
   daf6e:	bd10      	pop	{r4, pc}

000daf70 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   daf70:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   daf72:	4c10      	ldr	r4, [pc, #64]	; (dafb4 <_Z16_fetch_usbserialv+0x44>)
{
   daf74:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   daf76:	a803      	add	r0, sp, #12
   daf78:	f7ff fff2 	bl	daf60 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   daf7c:	7821      	ldrb	r1, [r4, #0]
   daf7e:	f3bf 8f5b 	dmb	ish
   daf82:	f011 0101 	ands.w	r1, r1, #1
   daf86:	d111      	bne.n	dafac <_Z16_fetch_usbserialv+0x3c>
   daf88:	4620      	mov	r0, r4
   daf8a:	9101      	str	r1, [sp, #4]
   daf8c:	f7f9 f889 	bl	d40a2 <__cxa_guard_acquire>
   daf90:	9901      	ldr	r1, [sp, #4]
   daf92:	b158      	cbz	r0, dafac <_Z16_fetch_usbserialv+0x3c>
   daf94:	aa03      	add	r2, sp, #12
   daf96:	4808      	ldr	r0, [pc, #32]	; (dafb8 <_Z16_fetch_usbserialv+0x48>)
   daf98:	f7ff ffca 	bl	daf30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   daf9c:	4620      	mov	r0, r4
   daf9e:	f7f9 f885 	bl	d40ac <__cxa_guard_release>
   dafa2:	4a06      	ldr	r2, [pc, #24]	; (dafbc <_Z16_fetch_usbserialv+0x4c>)
   dafa4:	4906      	ldr	r1, [pc, #24]	; (dafc0 <_Z16_fetch_usbserialv+0x50>)
   dafa6:	4804      	ldr	r0, [pc, #16]	; (dafb8 <_Z16_fetch_usbserialv+0x48>)
   dafa8:	f000 fb54 	bl	db654 <__aeabi_atexit>
	return _usbserial;
}
   dafac:	4802      	ldr	r0, [pc, #8]	; (dafb8 <_Z16_fetch_usbserialv+0x48>)
   dafae:	b008      	add	sp, #32
   dafb0:	bd10      	pop	{r4, pc}
   dafb2:	bf00      	nop
   dafb4:	2003e5a0 	.word	0x2003e5a0
   dafb8:	2003e5a4 	.word	0x2003e5a4
   dafbc:	2003c1d0 	.word	0x2003c1d0
   dafc0:	000daebb 	.word	0x000daebb

000dafc4 <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
   dafc4:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   dafc6:	b510      	push	{r4, lr}
   dafc8:	b90a      	cbnz	r2, dafce <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   dafca:	f000 fce2 	bl	db992 <_ZSt25__throw_bad_function_callv>
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   dafce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dafd2:	68c3      	ldr	r3, [r0, #12]
   dafd4:	4718      	bx	r3

000dafd6 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   dafd6:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   dafd8:	2300      	movs	r3, #0
   dafda:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   dafdc:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   dafde:	4604      	mov	r4, r0
   dafe0:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   dafe2:	b12b      	cbz	r3, daff0 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dafe4:	2202      	movs	r2, #2
   dafe6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dafe8:	68eb      	ldr	r3, [r5, #12]
   dafea:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dafec:	68ab      	ldr	r3, [r5, #8]
   dafee:	60a3      	str	r3, [r4, #8]
    }
   daff0:	4620      	mov	r0, r4
   daff2:	bd38      	pop	{r3, r4, r5, pc}

000daff4 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
   daff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   daff6:	4d0c      	ldr	r5, [pc, #48]	; (db028 <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
   daff8:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
{
   daffc:	4606      	mov	r6, r0
   daffe:	460f      	mov	r7, r1
    delete handlers[pin];
   db000:	b134      	cbz	r4, db010 <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
   db002:	4620      	mov	r0, r4
   db004:	f7f9 f97b 	bl	d42fe <_ZNSt14_Function_baseD1Ev>
   db008:	2110      	movs	r1, #16
   db00a:	4620      	mov	r0, r4
   db00c:	f000 fb27 	bl	db65e <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   db010:	2010      	movs	r0, #16
   db012:	f7f9 f840 	bl	d4096 <_Znwj>
   db016:	4604      	mov	r4, r0
   db018:	b110      	cbz	r0, db020 <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
   db01a:	4639      	mov	r1, r7
   db01c:	f7ff ffdb 	bl	dafd6 <_ZNSt8functionIFvvEEC1ERKS1_>
   db020:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
}
   db024:	4620      	mov	r0, r4
   db026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db028:	2003e5b8 	.word	0x2003e5b8

000db02c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   db02c:	b5f0      	push	{r4, r5, r6, r7, lr}
   db02e:	b087      	sub	sp, #28
   db030:	4605      	mov	r5, r0
   db032:	9103      	str	r1, [sp, #12]
   db034:	4617      	mov	r7, r2
   db036:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   db038:	f7fe f918 	bl	d926c <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   db03c:	9903      	ldr	r1, [sp, #12]
   db03e:	4628      	mov	r0, r5
   db040:	f7ff ffd8 	bl	daff4 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   db044:	4604      	mov	r4, r0
   db046:	b1e8      	cbz	r0, db084 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {0};
   db048:	2100      	movs	r1, #0
  if (priority >= 0) {
   db04a:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db04c:	f04f 0304 	mov.w	r3, #4
        HAL_InterruptExtraConfiguration extra = {0};
   db050:	f8ad 1015 	strh.w	r1, [sp, #21]
   db054:	f88d 1017 	strb.w	r1, [sp, #23]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db058:	f88d 3014 	strb.w	r3, [sp, #20]
    return &extra;
   db05c:	bfa2      	ittt	ge
   db05e:	a905      	addge	r1, sp, #20
    extra.IRQChannelSubPriority = subpriority;
   db060:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
   db064:	f88d 3016 	strbge.w	r3, [sp, #22]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db068:	9100      	str	r1, [sp, #0]
   db06a:	4602      	mov	r2, r0
   db06c:	4907      	ldr	r1, [pc, #28]	; (db08c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   db06e:	bfa8      	it	ge
   db070:	f88d 6015 	strbge.w	r6, [sp, #21]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db074:	463b      	mov	r3, r7
   db076:	4628      	mov	r0, r5
   db078:	f7fe f8f0 	bl	d925c <HAL_Interrupts_Attach>
   db07c:	b110      	cbz	r0, db084 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
   db07e:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
   db080:	b007      	add	sp, #28
   db082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
   db084:	1e20      	subs	r0, r4, #0
   db086:	bf18      	it	ne
   db088:	2001      	movne	r0, #1
   db08a:	e7f9      	b.n	db080 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
   db08c:	000dafc5 	.word	0x000dafc5

000db090 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db090:	2200      	movs	r2, #0
   db092:	6840      	ldr	r0, [r0, #4]
   db094:	4611      	mov	r1, r2
   db096:	f7fe bb59 	b.w	d974c <network_listening>

000db09a <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   db09a:	2200      	movs	r2, #0
   db09c:	6840      	ldr	r0, [r0, #4]
   db09e:	4611      	mov	r1, r2
   db0a0:	f7fe bb64 	b.w	d976c <network_get_listen_timeout>

000db0a4 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   db0a4:	6840      	ldr	r0, [r0, #4]
   db0a6:	2200      	movs	r2, #0
   db0a8:	f7fe bb58 	b.w	d975c <network_set_listen_timeout>

000db0ac <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   db0ac:	6840      	ldr	r0, [r0, #4]
   db0ae:	2200      	movs	r2, #0
   db0b0:	f081 0101 	eor.w	r1, r1, #1
   db0b4:	f7fe bb42 	b.w	d973c <network_listen>

000db0b8 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   db0b8:	2300      	movs	r3, #0
   db0ba:	6840      	ldr	r0, [r0, #4]
   db0bc:	461a      	mov	r2, r3
   db0be:	4619      	mov	r1, r3
   db0c0:	f7fe bb34 	b.w	d972c <network_off>

000db0c4 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   db0c4:	2300      	movs	r3, #0
   db0c6:	6840      	ldr	r0, [r0, #4]
   db0c8:	461a      	mov	r2, r3
   db0ca:	4619      	mov	r1, r3
   db0cc:	f7fe bb26 	b.w	d971c <network_on>

000db0d0 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   db0d0:	2200      	movs	r2, #0
   db0d2:	6840      	ldr	r0, [r0, #4]
   db0d4:	4611      	mov	r1, r2
   db0d6:	f7fe bb09 	b.w	d96ec <network_connecting>

000db0da <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db0da:	6840      	ldr	r0, [r0, #4]
   db0dc:	2200      	movs	r2, #0
   db0de:	2102      	movs	r1, #2
   db0e0:	f7fe bb0c 	b.w	d96fc <network_disconnect>

000db0e4 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   db0e4:	2300      	movs	r3, #0
   db0e6:	6840      	ldr	r0, [r0, #4]
   db0e8:	461a      	mov	r2, r3
   db0ea:	f7fe baf7 	b.w	d96dc <network_connect>
	...

000db0f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   db0f0:	4b08      	ldr	r3, [pc, #32]	; (db114 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   db0f2:	b510      	push	{r4, lr}
   db0f4:	2428      	movs	r4, #40	; 0x28
   db0f6:	4622      	mov	r2, r4
   db0f8:	4618      	mov	r0, r3
   db0fa:	2100      	movs	r1, #0
   db0fc:	f002 fc72 	bl	dd9e4 <memset>
   db100:	4b05      	ldr	r3, [pc, #20]	; (db118 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   db102:	8004      	strh	r4, [r0, #0]
        cid = -1;
   db104:	f04f 32ff 	mov.w	r2, #4294967295
   db108:	6042      	str	r2, [r0, #4]
   db10a:	2204      	movs	r2, #4
   db10c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   db10e:	4a03      	ldr	r2, [pc, #12]	; (db11c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   db110:	601a      	str	r2, [r3, #0]
   db112:	bd10      	pop	{r4, pc}
   db114:	2003e650 	.word	0x2003e650
   db118:	2003e648 	.word	0x2003e648
   db11c:	000dfad0 	.word	0x000dfad0

000db120 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   db120:	4770      	bx	lr

000db122 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db122:	7441      	strb	r1, [r0, #17]
}
   db124:	4770      	bx	lr

000db126 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   db126:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   db128:	7c00      	ldrb	r0, [r0, #16]
   db12a:	f7fe f967 	bl	d93fc <hal_usart_available_data_for_write>
}
   db12e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db132:	bd08      	pop	{r3, pc}

000db134 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   db134:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   db136:	7c00      	ldrb	r0, [r0, #16]
   db138:	f7fe f938 	bl	d93ac <hal_usart_available>
}
   db13c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db140:	bd08      	pop	{r3, pc}

000db142 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   db142:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   db144:	7c00      	ldrb	r0, [r0, #16]
   db146:	f7fe f941 	bl	d93cc <hal_usart_peek>
}
   db14a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db14e:	bd08      	pop	{r3, pc}

000db150 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   db150:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   db152:	7c00      	ldrb	r0, [r0, #16]
   db154:	f7fe f932 	bl	d93bc <hal_usart_read>
}
   db158:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db15c:	bd08      	pop	{r3, pc}

000db15e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   db15e:	7c00      	ldrb	r0, [r0, #16]
   db160:	f7fe b93c 	b.w	d93dc <hal_usart_flush>

000db164 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db164:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db166:	7c45      	ldrb	r5, [r0, #17]
{
   db168:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db16a:	b12d      	cbz	r5, db178 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   db16c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db16e:	b003      	add	sp, #12
   db170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   db174:	f7fe b912 	b.w	d939c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db178:	7c00      	ldrb	r0, [r0, #16]
   db17a:	9101      	str	r1, [sp, #4]
   db17c:	f7fe f93e 	bl	d93fc <hal_usart_available_data_for_write>
   db180:	2800      	cmp	r0, #0
   db182:	9901      	ldr	r1, [sp, #4]
   db184:	dcf2      	bgt.n	db16c <_ZN11USARTSerial5writeEh+0x8>
}
   db186:	4628      	mov	r0, r5
   db188:	b003      	add	sp, #12
   db18a:	bd30      	pop	{r4, r5, pc}

000db18c <_ZN11USARTSerialD0Ev>:
   db18c:	b510      	push	{r4, lr}
   db18e:	2114      	movs	r1, #20
   db190:	4604      	mov	r4, r0
   db192:	f000 fa64 	bl	db65e <_ZdlPvj>
   db196:	4620      	mov	r0, r4
   db198:	bd10      	pop	{r4, pc}
	...

000db19c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   db19c:	b510      	push	{r4, lr}
   db19e:	f04f 0c00 	mov.w	ip, #0
   db1a2:	4604      	mov	r4, r0
   db1a4:	4608      	mov	r0, r1
   db1a6:	4611      	mov	r1, r2
   db1a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db1ac:	e9c4 c201 	strd	ip, r2, [r4, #4]
   db1b0:	4a04      	ldr	r2, [pc, #16]	; (db1c4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   db1b2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   db1b4:	2201      	movs	r2, #1
  _serial = serial;
   db1b6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db1b8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   db1ba:	461a      	mov	r2, r3
   db1bc:	f7fe f8e6 	bl	d938c <hal_usart_init>
}
   db1c0:	4620      	mov	r0, r4
   db1c2:	bd10      	pop	{r4, pc}
   db1c4:	000dfb04 	.word	0x000dfb04

000db1c8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   db1c8:	7c00      	ldrb	r0, [r0, #16]
   db1ca:	2300      	movs	r3, #0
   db1cc:	f7fe b91e 	b.w	d940c <hal_usart_begin_config>

000db1d0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   db1d0:	2200      	movs	r2, #0
   db1d2:	f7ff bff9 	b.w	db1c8 <_ZN11USARTSerial5beginEmm>
	...

000db1d8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db1d8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db1da:	4c0e      	ldr	r4, [pc, #56]	; (db214 <_Z22__fetch_global_Serial1v+0x3c>)
   db1dc:	7821      	ldrb	r1, [r4, #0]
   db1de:	f3bf 8f5b 	dmb	ish
   db1e2:	f011 0101 	ands.w	r1, r1, #1
   db1e6:	d112      	bne.n	db20e <_Z22__fetch_global_Serial1v+0x36>
   db1e8:	4620      	mov	r0, r4
   db1ea:	9101      	str	r1, [sp, #4]
   db1ec:	f7f8 ff59 	bl	d40a2 <__cxa_guard_acquire>
   db1f0:	9901      	ldr	r1, [sp, #4]
   db1f2:	b160      	cbz	r0, db20e <_Z22__fetch_global_Serial1v+0x36>
   db1f4:	4a08      	ldr	r2, [pc, #32]	; (db218 <_Z22__fetch_global_Serial1v+0x40>)
   db1f6:	4b09      	ldr	r3, [pc, #36]	; (db21c <_Z22__fetch_global_Serial1v+0x44>)
   db1f8:	4809      	ldr	r0, [pc, #36]	; (db220 <_Z22__fetch_global_Serial1v+0x48>)
   db1fa:	f7ff ffcf 	bl	db19c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   db1fe:	4620      	mov	r0, r4
   db200:	f7f8 ff54 	bl	d40ac <__cxa_guard_release>
   db204:	4a07      	ldr	r2, [pc, #28]	; (db224 <_Z22__fetch_global_Serial1v+0x4c>)
   db206:	4908      	ldr	r1, [pc, #32]	; (db228 <_Z22__fetch_global_Serial1v+0x50>)
   db208:	4805      	ldr	r0, [pc, #20]	; (db220 <_Z22__fetch_global_Serial1v+0x48>)
   db20a:	f000 fa23 	bl	db654 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db20e:	4804      	ldr	r0, [pc, #16]	; (db220 <_Z22__fetch_global_Serial1v+0x48>)
   db210:	b002      	add	sp, #8
   db212:	bd10      	pop	{r4, pc}
   db214:	2003e678 	.word	0x2003e678
   db218:	2003e67c 	.word	0x2003e67c
   db21c:	2003e700 	.word	0x2003e700
   db220:	2003e784 	.word	0x2003e784
   db224:	2003c1d0 	.word	0x2003c1d0
   db228:	000db121 	.word	0x000db121

000db22c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   db22c:	b510      	push	{r4, lr}
      if (_M_empty())
   db22e:	6883      	ldr	r3, [r0, #8]
   db230:	4604      	mov	r4, r0
   db232:	b90b      	cbnz	r3, db238 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   db234:	f000 fbad 	bl	db992 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db238:	68c3      	ldr	r3, [r0, #12]
   db23a:	4798      	blx	r3
      if (_M_manager)
   db23c:	68a3      	ldr	r3, [r4, #8]
   db23e:	b11b      	cbz	r3, db248 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db240:	2203      	movs	r2, #3
   db242:	4621      	mov	r1, r4
   db244:	4620      	mov	r0, r4
   db246:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   db248:	4620      	mov	r0, r4
   db24a:	2110      	movs	r1, #16
}
   db24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   db250:	f000 ba05 	b.w	db65e <_ZdlPvj>

000db254 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   db254:	4770      	bx	lr

000db256 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   db256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db258:	4606      	mov	r6, r0
   db25a:	4615      	mov	r5, r2
   db25c:	460c      	mov	r4, r1
   db25e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db260:	42bc      	cmp	r4, r7
   db262:	d006      	beq.n	db272 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   db264:	6833      	ldr	r3, [r6, #0]
   db266:	f814 1b01 	ldrb.w	r1, [r4], #1
   db26a:	689b      	ldr	r3, [r3, #8]
   db26c:	4630      	mov	r0, r6
   db26e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   db270:	e7f6      	b.n	db260 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   db272:	4628      	mov	r0, r5
   db274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db276 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   db276:	7c00      	ldrb	r0, [r0, #16]
   db278:	2200      	movs	r2, #0
   db27a:	f7fe b8e7 	b.w	d944c <hal_i2c_write>

000db27e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   db27e:	7c00      	ldrb	r0, [r0, #16]
   db280:	2100      	movs	r1, #0
   db282:	f7fe b8eb 	b.w	d945c <hal_i2c_available>

000db286 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   db286:	7c00      	ldrb	r0, [r0, #16]
   db288:	2100      	movs	r1, #0
   db28a:	f7fe b8ef 	b.w	d946c <hal_i2c_read>

000db28e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   db28e:	7c00      	ldrb	r0, [r0, #16]
   db290:	2100      	movs	r1, #0
   db292:	f7fe b8f3 	b.w	d947c <hal_i2c_peek>

000db296 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   db296:	7c00      	ldrb	r0, [r0, #16]
   db298:	2100      	movs	r1, #0
   db29a:	f7fe b8f7 	b.w	d948c <hal_i2c_flush>

000db29e <_ZN7TwoWireD0Ev>:
   db29e:	b510      	push	{r4, lr}
   db2a0:	2114      	movs	r1, #20
   db2a2:	4604      	mov	r4, r0
   db2a4:	f000 f9db 	bl	db65e <_ZdlPvj>
   db2a8:	4620      	mov	r0, r4
   db2aa:	bd10      	pop	{r4, pc}

000db2ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   db2ac:	b510      	push	{r4, lr}
   db2ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db2b2:	4604      	mov	r4, r0
   db2b4:	4608      	mov	r0, r1
   db2b6:	2100      	movs	r1, #0
   db2b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db2bc:	4b03      	ldr	r3, [pc, #12]	; (db2cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   db2be:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   db2c0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   db2c2:	4611      	mov	r1, r2
   db2c4:	f7fe f8f2 	bl	d94ac <hal_i2c_init>
}
   db2c8:	4620      	mov	r0, r4
   db2ca:	bd10      	pop	{r4, pc}
   db2cc:	000dfb34 	.word	0x000dfb34

000db2d0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   db2d0:	2300      	movs	r3, #0
   db2d2:	7c00      	ldrb	r0, [r0, #16]
   db2d4:	461a      	mov	r2, r3
   db2d6:	4619      	mov	r1, r3
   db2d8:	f7fe b8a0 	b.w	d941c <hal_i2c_begin>

000db2dc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   db2dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   db2de:	2200      	movs	r2, #0
   db2e0:	2314      	movs	r3, #20
   db2e2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   db2e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   db2ea:	780b      	ldrb	r3, [r1, #0]
   db2ec:	f88d 3008 	strb.w	r3, [sp, #8]
   db2f0:	684b      	ldr	r3, [r1, #4]
   db2f2:	9303      	str	r3, [sp, #12]
   db2f4:	68cb      	ldr	r3, [r1, #12]
   db2f6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   db2f8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   db2fa:	7a0b      	ldrb	r3, [r1, #8]
   db2fc:	9305      	str	r3, [sp, #20]
   db2fe:	a901      	add	r1, sp, #4
   db300:	f7fe f8f4 	bl	d94ec <hal_i2c_request_ex>
}
   db304:	b007      	add	sp, #28
   db306:	f85d fb04 	ldr.w	pc, [sp], #4

000db30a <_ZN7TwoWire11requestFromEhjh>:
{
   db30a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   db30c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db30e:	f88d 1000 	strb.w	r1, [sp]
   db312:	f04f 0164 	mov.w	r1, #100	; 0x64
   db316:	9103      	str	r1, [sp, #12]
   db318:	bf18      	it	ne
   db31a:	2301      	movne	r3, #1
   db31c:	4669      	mov	r1, sp
    size_ = size;
   db31e:	9201      	str	r2, [sp, #4]
   db320:	f88d 3008 	strb.w	r3, [sp, #8]
   db324:	f7ff ffda 	bl	db2dc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   db328:	b005      	add	sp, #20
   db32a:	f85d fb04 	ldr.w	pc, [sp], #4

000db32e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   db32e:	2301      	movs	r3, #1
   db330:	f7ff bfeb 	b.w	db30a <_ZN7TwoWire11requestFromEhjh>

000db334 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   db334:	7c00      	ldrb	r0, [r0, #16]
   db336:	2200      	movs	r2, #0
   db338:	f7fe b878 	b.w	d942c <hal_i2c_begin_transmission>

000db33c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   db33c:	b2c9      	uxtb	r1, r1
   db33e:	f7ff bff9 	b.w	db334 <_ZN7TwoWire17beginTransmissionEh>

000db342 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   db342:	7c00      	ldrb	r0, [r0, #16]
   db344:	2200      	movs	r2, #0
   db346:	f7fe b879 	b.w	d943c <hal_i2c_end_transmission>

000db34a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   db34a:	2101      	movs	r1, #1
   db34c:	f7ff bff9 	b.w	db342 <_ZN7TwoWire15endTransmissionEh>

000db350 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   db350:	7c00      	ldrb	r0, [r0, #16]
   db352:	2100      	movs	r1, #0
   db354:	f7fe b8a2 	b.w	d949c <hal_i2c_is_enabled>

000db358 <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  hal_i2c_reset(_i2c, 0, NULL);
   db358:	2200      	movs	r2, #0
   db35a:	7c00      	ldrb	r0, [r0, #16]
   db35c:	4611      	mov	r1, r2
   db35e:	f7fe b8ad 	b.w	d94bc <hal_i2c_reset>

000db362 <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
   db362:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   db364:	2100      	movs	r1, #0
   db366:	7c00      	ldrb	r0, [r0, #16]
   db368:	f7fe f8b0 	bl	d94cc <hal_i2c_lock>
}
   db36c:	fab0 f080 	clz	r0, r0
   db370:	0940      	lsrs	r0, r0, #5
   db372:	bd08      	pop	{r3, pc}

000db374 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   db374:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   db376:	2100      	movs	r1, #0
   db378:	7c00      	ldrb	r0, [r0, #16]
   db37a:	f7fe f8af 	bl	d94dc <hal_i2c_unlock>
}
   db37e:	fab0 f080 	clz	r0, r0
   db382:	0940      	lsrs	r0, r0, #5
   db384:	bd08      	pop	{r3, pc}

000db386 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   db386:	2300      	movs	r3, #0
   db388:	6840      	ldr	r0, [r0, #4]
   db38a:	461a      	mov	r2, r3
   db38c:	f7fe b9a6 	b.w	d96dc <network_connect>

000db390 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   db390:	6840      	ldr	r0, [r0, #4]
   db392:	2200      	movs	r2, #0
   db394:	2102      	movs	r1, #2
   db396:	f7fe b9b1 	b.w	d96fc <network_disconnect>

000db39a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   db39a:	2200      	movs	r2, #0
   db39c:	6840      	ldr	r0, [r0, #4]
   db39e:	4611      	mov	r1, r2
   db3a0:	f7fe b9a4 	b.w	d96ec <network_connecting>

000db3a4 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   db3a4:	2200      	movs	r2, #0
   db3a6:	6840      	ldr	r0, [r0, #4]
   db3a8:	4611      	mov	r1, r2
   db3aa:	f7fe b9af 	b.w	d970c <network_ready>

000db3ae <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   db3ae:	2300      	movs	r3, #0
   db3b0:	6840      	ldr	r0, [r0, #4]
   db3b2:	461a      	mov	r2, r3
   db3b4:	4619      	mov	r1, r3
   db3b6:	f7fe b9b1 	b.w	d971c <network_on>

000db3ba <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   db3ba:	2300      	movs	r3, #0
   db3bc:	6840      	ldr	r0, [r0, #4]
   db3be:	461a      	mov	r2, r3
   db3c0:	4619      	mov	r1, r3
   db3c2:	f7fe b9b3 	b.w	d972c <network_off>

000db3c6 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   db3c6:	6840      	ldr	r0, [r0, #4]
   db3c8:	2200      	movs	r2, #0
   db3ca:	f081 0101 	eor.w	r1, r1, #1
   db3ce:	f7fe b9b5 	b.w	d973c <network_listen>

000db3d2 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   db3d2:	6840      	ldr	r0, [r0, #4]
   db3d4:	2200      	movs	r2, #0
   db3d6:	f7fe b9c1 	b.w	d975c <network_set_listen_timeout>

000db3da <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   db3da:	2200      	movs	r2, #0
   db3dc:	6840      	ldr	r0, [r0, #4]
   db3de:	4611      	mov	r1, r2
   db3e0:	f7fe b9c4 	b.w	d976c <network_get_listen_timeout>

000db3e4 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   db3e4:	2200      	movs	r2, #0
   db3e6:	6840      	ldr	r0, [r0, #4]
   db3e8:	4611      	mov	r1, r2
   db3ea:	f7fe b9af 	b.w	d974c <network_listening>

000db3ee <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   db3ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db3f2:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   db3f4:	b095      	sub	sp, #84	; 0x54
   db3f6:	4616      	mov	r6, r2
   db3f8:	460d      	mov	r5, r1
   db3fa:	4607      	mov	r7, r0
    IPAddress addr;
   db3fc:	f7ff fd24 	bl	dae48 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   db400:	4621      	mov	r1, r4
   db402:	2218      	movs	r2, #24
   db404:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   db406:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   db408:	f002 faec 	bl	dd9e4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   db40c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   db40e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   db412:	4621      	mov	r1, r4
   db414:	466b      	mov	r3, sp
   db416:	aa0c      	add	r2, sp, #48	; 0x30
   db418:	4630      	mov	r0, r6
   db41a:	f7fd fef7 	bl	d920c <netdb_getaddrinfo>
    if (!r) {
   db41e:	4604      	mov	r4, r0
   db420:	2800      	cmp	r0, #0
   db422:	d146      	bne.n	db4b2 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db424:	4602      	mov	r2, r0
   db426:	2101      	movs	r1, #1
   db428:	6868      	ldr	r0, [r5, #4]
   db42a:	f7fe f96f 	bl	d970c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db42e:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db430:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db432:	4622      	mov	r2, r4
   db434:	6868      	ldr	r0, [r5, #4]
   db436:	f7fe f969 	bl	d970c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db43a:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db43c:	4681      	mov	r9, r0
        bool ok = false;
   db43e:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db440:	2e00      	cmp	r6, #0
   db442:	d036      	beq.n	db4b2 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   db444:	2900      	cmp	r1, #0
   db446:	d134      	bne.n	db4b2 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   db448:	6873      	ldr	r3, [r6, #4]
   db44a:	2b02      	cmp	r3, #2
   db44c:	d003      	beq.n	db456 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   db44e:	2b0a      	cmp	r3, #10
   db450:	d00b      	beq.n	db46a <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db452:	69f6      	ldr	r6, [r6, #28]
   db454:	e7f4      	b.n	db440 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   db456:	f1b8 0f00 	cmp.w	r8, #0
   db45a:	d004      	beq.n	db466 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   db45c:	6971      	ldr	r1, [r6, #20]
   db45e:	4638      	mov	r0, r7
   db460:	3104      	adds	r1, #4
   db462:	f7ff fd1e 	bl	daea2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   db466:	4641      	mov	r1, r8
   db468:	e7f3      	b.n	db452 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   db46a:	f1b9 0f00 	cmp.w	r9, #0
   db46e:	d101      	bne.n	db474 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   db470:	4649      	mov	r1, r9
   db472:	e7ee      	b.n	db452 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   db474:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   db476:	2210      	movs	r2, #16
   db478:	a801      	add	r0, sp, #4
   db47a:	f002 fab3 	bl	dd9e4 <memset>
                    a.v = 6;
   db47e:	2306      	movs	r3, #6
   db480:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   db484:	ad01      	add	r5, sp, #4
   db486:	f104 0308 	add.w	r3, r4, #8
   db48a:	3418      	adds	r4, #24
   db48c:	6818      	ldr	r0, [r3, #0]
   db48e:	6859      	ldr	r1, [r3, #4]
   db490:	462a      	mov	r2, r5
   db492:	c203      	stmia	r2!, {r0, r1}
   db494:	3308      	adds	r3, #8
   db496:	42a3      	cmp	r3, r4
   db498:	4615      	mov	r5, r2
   db49a:	d1f7      	bne.n	db48c <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   db49c:	a901      	add	r1, sp, #4
   db49e:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   db4a0:	ad07      	add	r5, sp, #28
   db4a2:	f7ff fcdf 	bl	dae64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db4a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db4a8:	1d3c      	adds	r4, r7, #4
   db4aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db4ac:	682b      	ldr	r3, [r5, #0]
   db4ae:	7023      	strb	r3, [r4, #0]
   db4b0:	e7de      	b.n	db470 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   db4b2:	9800      	ldr	r0, [sp, #0]
   db4b4:	f7fd fea2 	bl	d91fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   db4b8:	4638      	mov	r0, r7
   db4ba:	b015      	add	sp, #84	; 0x54
   db4bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db4c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   db4c0:	4b02      	ldr	r3, [pc, #8]	; (db4cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   db4c2:	4a03      	ldr	r2, [pc, #12]	; (db4d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   db4c4:	601a      	str	r2, [r3, #0]
   db4c6:	2200      	movs	r2, #0
   db4c8:	605a      	str	r2, [r3, #4]

} // spark
   db4ca:	4770      	bx	lr
   db4cc:	2003e798 	.word	0x2003e798
   db4d0:	000dfb5c 	.word	0x000dfb5c

000db4d4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   db4d4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   db4d6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   db4d8:	d902      	bls.n	db4e0 <pinAvailable+0xc>
    return false;
   db4da:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   db4dc:	b002      	add	sp, #8
   db4de:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   db4e0:	f1a0 030b 	sub.w	r3, r0, #11
   db4e4:	2b02      	cmp	r3, #2
   db4e6:	d81a      	bhi.n	db51e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db4e8:	4c17      	ldr	r4, [pc, #92]	; (db548 <pinAvailable+0x74>)
   db4ea:	7821      	ldrb	r1, [r4, #0]
   db4ec:	f3bf 8f5b 	dmb	ish
   db4f0:	f011 0101 	ands.w	r1, r1, #1
   db4f4:	d10b      	bne.n	db50e <pinAvailable+0x3a>
   db4f6:	4620      	mov	r0, r4
   db4f8:	9101      	str	r1, [sp, #4]
   db4fa:	f7f8 fdd2 	bl	d40a2 <__cxa_guard_acquire>
   db4fe:	9901      	ldr	r1, [sp, #4]
   db500:	b128      	cbz	r0, db50e <pinAvailable+0x3a>
   db502:	4812      	ldr	r0, [pc, #72]	; (db54c <pinAvailable+0x78>)
   db504:	f7fe fa36 	bl	d9974 <_ZN8SPIClassC1E19hal_spi_interface_t>
   db508:	4620      	mov	r0, r4
   db50a:	f7f8 fdcf 	bl	d40ac <__cxa_guard_release>
   db50e:	4b0f      	ldr	r3, [pc, #60]	; (db54c <pinAvailable+0x78>)
   db510:	7818      	ldrb	r0, [r3, #0]
   db512:	f7fe f80b 	bl	d952c <hal_spi_is_enabled>
   db516:	2800      	cmp	r0, #0
   db518:	d1df      	bne.n	db4da <pinAvailable+0x6>
  return true; // 'pin' is available
   db51a:	2001      	movs	r0, #1
   db51c:	e7de      	b.n	db4dc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   db51e:	2801      	cmp	r0, #1
   db520:	d809      	bhi.n	db536 <pinAvailable+0x62>
   db522:	f000 f86f 	bl	db604 <_Z19__fetch_global_Wirev>
   db526:	2100      	movs	r1, #0
   db528:	7c00      	ldrb	r0, [r0, #16]
   db52a:	f7fd ffb7 	bl	d949c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   db52e:	f080 0001 	eor.w	r0, r0, #1
   db532:	b2c0      	uxtb	r0, r0
   db534:	e7d2      	b.n	db4dc <pinAvailable+0x8>
   db536:	3809      	subs	r0, #9
   db538:	2801      	cmp	r0, #1
   db53a:	d8ee      	bhi.n	db51a <pinAvailable+0x46>
   db53c:	f7ff fe4c 	bl	db1d8 <_Z22__fetch_global_Serial1v>
   db540:	7c00      	ldrb	r0, [r0, #16]
   db542:	f7fd ff53 	bl	d93ec <hal_usart_is_enabled>
   db546:	e7f2      	b.n	db52e <pinAvailable+0x5a>
   db548:	2003c1d4 	.word	0x2003c1d4
   db54c:	2003c1d8 	.word	0x2003c1d8

000db550 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db550:	2823      	cmp	r0, #35	; 0x23
{
   db552:	b538      	push	{r3, r4, r5, lr}
   db554:	4604      	mov	r4, r0
   db556:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db558:	d80a      	bhi.n	db570 <pinMode+0x20>
   db55a:	29ff      	cmp	r1, #255	; 0xff
   db55c:	d008      	beq.n	db570 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   db55e:	f7ff ffb9 	bl	db4d4 <pinAvailable>
   db562:	b128      	cbz	r0, db570 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   db564:	4629      	mov	r1, r5
   db566:	4620      	mov	r0, r4
}
   db568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   db56c:	f7fd be5e 	b.w	d922c <HAL_Pin_Mode>
}
   db570:	bd38      	pop	{r3, r4, r5, pc}

000db572 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db572:	b538      	push	{r3, r4, r5, lr}
   db574:	4604      	mov	r4, r0
   db576:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db578:	f7fd fe60 	bl	d923c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db57c:	28ff      	cmp	r0, #255	; 0xff
   db57e:	d010      	beq.n	db5a2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   db580:	2806      	cmp	r0, #6
   db582:	d804      	bhi.n	db58e <digitalWrite+0x1c>
   db584:	234d      	movs	r3, #77	; 0x4d
   db586:	fa23 f000 	lsr.w	r0, r3, r0
   db58a:	07c3      	lsls	r3, r0, #31
   db58c:	d409      	bmi.n	db5a2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db58e:	4620      	mov	r0, r4
   db590:	f7ff ffa0 	bl	db4d4 <pinAvailable>
   db594:	b128      	cbz	r0, db5a2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db596:	4629      	mov	r1, r5
   db598:	4620      	mov	r0, r4
}
   db59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   db59e:	f7fd be55 	b.w	d924c <HAL_GPIO_Write>
}
   db5a2:	bd38      	pop	{r3, r4, r5, pc}

000db5a4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   db5a4:	280d      	cmp	r0, #13
{
   db5a6:	b510      	push	{r4, lr}
   db5a8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   db5aa:	bf9c      	itt	ls
   db5ac:	340e      	addls	r4, #14
   db5ae:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db5b0:	4620      	mov	r0, r4
   db5b2:	f7ff ff8f 	bl	db4d4 <pinAvailable>
   db5b6:	b150      	cbz	r0, db5ce <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   db5b8:	2103      	movs	r1, #3
   db5ba:	4620      	mov	r0, r4
   db5bc:	f7fd fe2e 	bl	d921c <HAL_Validate_Pin_Function>
   db5c0:	2803      	cmp	r0, #3
   db5c2:	d104      	bne.n	db5ce <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   db5c4:	4620      	mov	r0, r4
}
   db5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   db5ca:	f7fd be57 	b.w	d927c <hal_adc_read>
}
   db5ce:	2000      	movs	r0, #0
   db5d0:	bd10      	pop	{r4, pc}
	...

000db5d4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   db5d4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   db5d6:	2300      	movs	r3, #0
   db5d8:	2520      	movs	r5, #32
   db5da:	8043      	strh	r3, [r0, #2]
   db5dc:	2314      	movs	r3, #20
{
   db5de:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   db5e0:	8003      	strh	r3, [r0, #0]
   db5e2:	6085      	str	r5, [r0, #8]
   db5e4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db5e6:	4906      	ldr	r1, [pc, #24]	; (db600 <_Z17acquireWireBufferv+0x2c>)
   db5e8:	4628      	mov	r0, r5
   db5ea:	f000 f83a 	bl	db662 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db5ee:	4904      	ldr	r1, [pc, #16]	; (db600 <_Z17acquireWireBufferv+0x2c>)
	};
   db5f0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db5f2:	4628      	mov	r0, r5
   db5f4:	f000 f835 	bl	db662 <_ZnajRKSt9nothrow_t>
	};
   db5f8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   db5fa:	4620      	mov	r0, r4
   db5fc:	bd38      	pop	{r3, r4, r5, pc}
   db5fe:	bf00      	nop
   db600:	000dfb88 	.word	0x000dfb88

000db604 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   db604:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db606:	4d0f      	ldr	r5, [pc, #60]	; (db644 <_Z19__fetch_global_Wirev+0x40>)
   db608:	7829      	ldrb	r1, [r5, #0]
   db60a:	f3bf 8f5b 	dmb	ish
   db60e:	f011 0401 	ands.w	r4, r1, #1
{
   db612:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db614:	d113      	bne.n	db63e <_Z19__fetch_global_Wirev+0x3a>
   db616:	4628      	mov	r0, r5
   db618:	f7f8 fd43 	bl	d40a2 <__cxa_guard_acquire>
   db61c:	b178      	cbz	r0, db63e <_Z19__fetch_global_Wirev+0x3a>
   db61e:	a801      	add	r0, sp, #4
   db620:	f7ff ffd8 	bl	db5d4 <_Z17acquireWireBufferv>
   db624:	aa01      	add	r2, sp, #4
   db626:	4621      	mov	r1, r4
   db628:	4807      	ldr	r0, [pc, #28]	; (db648 <_Z19__fetch_global_Wirev+0x44>)
   db62a:	f7ff fe3f 	bl	db2ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db62e:	4628      	mov	r0, r5
   db630:	f7f8 fd3c 	bl	d40ac <__cxa_guard_release>
   db634:	4a05      	ldr	r2, [pc, #20]	; (db64c <_Z19__fetch_global_Wirev+0x48>)
   db636:	4906      	ldr	r1, [pc, #24]	; (db650 <_Z19__fetch_global_Wirev+0x4c>)
   db638:	4803      	ldr	r0, [pc, #12]	; (db648 <_Z19__fetch_global_Wirev+0x44>)
   db63a:	f000 f80b 	bl	db654 <__aeabi_atexit>
	return wire;
}
   db63e:	4802      	ldr	r0, [pc, #8]	; (db648 <_Z19__fetch_global_Wirev+0x44>)
   db640:	b007      	add	sp, #28
   db642:	bd30      	pop	{r4, r5, pc}
   db644:	2003e7a4 	.word	0x2003e7a4
   db648:	2003e7a8 	.word	0x2003e7a8
   db64c:	2003c1d0 	.word	0x2003c1d0
   db650:	000db255 	.word	0x000db255

000db654 <__aeabi_atexit>:
   db654:	460b      	mov	r3, r1
   db656:	4601      	mov	r1, r0
   db658:	4618      	mov	r0, r3
   db65a:	f002 b8a3 	b.w	dd7a4 <__cxa_atexit>

000db65e <_ZdlPvj>:
   db65e:	f7f8 bd1e 	b.w	d409e <_ZdlPv>

000db662 <_ZnajRKSt9nothrow_t>:
   db662:	f7f8 bd1a 	b.w	d409a <_Znaj>

000db666 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   db666:	68c3      	ldr	r3, [r0, #12]
   db668:	689a      	ldr	r2, [r3, #8]
   db66a:	60c2      	str	r2, [r0, #12]
   db66c:	b510      	push	{r4, lr}
   db66e:	b102      	cbz	r2, db672 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   db670:	6050      	str	r0, [r2, #4]
   db672:	6842      	ldr	r2, [r0, #4]
   db674:	605a      	str	r2, [r3, #4]
   db676:	680c      	ldr	r4, [r1, #0]
   db678:	4284      	cmp	r4, r0
   db67a:	d103      	bne.n	db684 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   db67c:	600b      	str	r3, [r1, #0]
   db67e:	6098      	str	r0, [r3, #8]
   db680:	6043      	str	r3, [r0, #4]
   db682:	bd10      	pop	{r4, pc}
   db684:	6891      	ldr	r1, [r2, #8]
   db686:	4281      	cmp	r1, r0
   db688:	bf0c      	ite	eq
   db68a:	6093      	streq	r3, [r2, #8]
   db68c:	60d3      	strne	r3, [r2, #12]
   db68e:	e7f6      	b.n	db67e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000db690 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   db690:	6883      	ldr	r3, [r0, #8]
   db692:	68da      	ldr	r2, [r3, #12]
   db694:	6082      	str	r2, [r0, #8]
   db696:	b510      	push	{r4, lr}
   db698:	b102      	cbz	r2, db69c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   db69a:	6050      	str	r0, [r2, #4]
   db69c:	6842      	ldr	r2, [r0, #4]
   db69e:	605a      	str	r2, [r3, #4]
   db6a0:	680c      	ldr	r4, [r1, #0]
   db6a2:	4284      	cmp	r4, r0
   db6a4:	d103      	bne.n	db6ae <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   db6a6:	600b      	str	r3, [r1, #0]
   db6a8:	60d8      	str	r0, [r3, #12]
   db6aa:	6043      	str	r3, [r0, #4]
   db6ac:	bd10      	pop	{r4, pc}
   db6ae:	68d1      	ldr	r1, [r2, #12]
   db6b0:	4281      	cmp	r1, r0
   db6b2:	bf0c      	ite	eq
   db6b4:	60d3      	streq	r3, [r2, #12]
   db6b6:	6093      	strne	r3, [r2, #8]
   db6b8:	e7f6      	b.n	db6a8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000db6ba <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db6ba:	7803      	ldrb	r3, [r0, #0]
   db6bc:	b933      	cbnz	r3, db6cc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   db6be:	6843      	ldr	r3, [r0, #4]
   db6c0:	685b      	ldr	r3, [r3, #4]
   db6c2:	4283      	cmp	r3, r0
   db6c4:	d102      	bne.n	db6cc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   db6c6:	68db      	ldr	r3, [r3, #12]
   db6c8:	4618      	mov	r0, r3
   db6ca:	4770      	bx	lr
   db6cc:	6882      	ldr	r2, [r0, #8]
   db6ce:	b122      	cbz	r2, db6da <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   db6d0:	4613      	mov	r3, r2
   db6d2:	68d2      	ldr	r2, [r2, #12]
   db6d4:	2a00      	cmp	r2, #0
   db6d6:	d1fb      	bne.n	db6d0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   db6d8:	e7f6      	b.n	db6c8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   db6da:	6843      	ldr	r3, [r0, #4]
   db6dc:	689a      	ldr	r2, [r3, #8]
   db6de:	4282      	cmp	r2, r0
   db6e0:	d1f2      	bne.n	db6c8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   db6e2:	4618      	mov	r0, r3
   db6e4:	685b      	ldr	r3, [r3, #4]
   db6e6:	e7f9      	b.n	db6dc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000db6e8 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
   db6e8:	68c3      	ldr	r3, [r0, #12]
   db6ea:	b123      	cbz	r3, db6f6 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0xe>
   db6ec:	4618      	mov	r0, r3
   db6ee:	689b      	ldr	r3, [r3, #8]
   db6f0:	2b00      	cmp	r3, #0
   db6f2:	d1fb      	bne.n	db6ec <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x4>
   db6f4:	4770      	bx	lr
   db6f6:	6843      	ldr	r3, [r0, #4]
   db6f8:	68da      	ldr	r2, [r3, #12]
   db6fa:	4282      	cmp	r2, r0
   db6fc:	d102      	bne.n	db704 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x1c>
   db6fe:	4618      	mov	r0, r3
   db700:	685b      	ldr	r3, [r3, #4]
   db702:	e7f9      	b.n	db6f8 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x10>
   db704:	68c2      	ldr	r2, [r0, #12]
   db706:	4293      	cmp	r3, r2
   db708:	bf18      	it	ne
   db70a:	4618      	movne	r0, r3
   db70c:	4770      	bx	lr

000db70e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db70e:	f7ff bfd4 	b.w	db6ba <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000db712 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   db712:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db716:	461e      	mov	r6, r3
   db718:	f103 0804 	add.w	r8, r3, #4
   db71c:	2300      	movs	r3, #0
   db71e:	e9c1 3302 	strd	r3, r3, [r1, #8]
   db722:	460c      	mov	r4, r1
   db724:	604a      	str	r2, [r1, #4]
   db726:	700b      	strb	r3, [r1, #0]
   db728:	b300      	cbz	r0, db76c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   db72a:	4296      	cmp	r6, r2
   db72c:	6091      	str	r1, [r2, #8]
   db72e:	d118      	bne.n	db762 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   db730:	6071      	str	r1, [r6, #4]
   db732:	60f4      	str	r4, [r6, #12]
   db734:	2701      	movs	r7, #1
   db736:	f04f 0900 	mov.w	r9, #0
   db73a:	6873      	ldr	r3, [r6, #4]
   db73c:	42a3      	cmp	r3, r4
   db73e:	d03f      	beq.n	db7c0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   db740:	6860      	ldr	r0, [r4, #4]
   db742:	7802      	ldrb	r2, [r0, #0]
   db744:	2a00      	cmp	r2, #0
   db746:	d13c      	bne.n	db7c2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
   db748:	6845      	ldr	r5, [r0, #4]
   db74a:	68ab      	ldr	r3, [r5, #8]
   db74c:	4298      	cmp	r0, r3
   db74e:	d123      	bne.n	db798 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   db750:	68eb      	ldr	r3, [r5, #12]
   db752:	b183      	cbz	r3, db776 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   db754:	781a      	ldrb	r2, [r3, #0]
   db756:	b972      	cbnz	r2, db776 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   db758:	7007      	strb	r7, [r0, #0]
   db75a:	701f      	strb	r7, [r3, #0]
   db75c:	702a      	strb	r2, [r5, #0]
   db75e:	462c      	mov	r4, r5
   db760:	e7eb      	b.n	db73a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   db762:	68b3      	ldr	r3, [r6, #8]
   db764:	4293      	cmp	r3, r2
   db766:	d1e5      	bne.n	db734 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db768:	60b1      	str	r1, [r6, #8]
   db76a:	e7e3      	b.n	db734 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db76c:	60d1      	str	r1, [r2, #12]
   db76e:	68f3      	ldr	r3, [r6, #12]
   db770:	4293      	cmp	r3, r2
   db772:	d1df      	bne.n	db734 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db774:	e7dd      	b.n	db732 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   db776:	68c3      	ldr	r3, [r0, #12]
   db778:	42a3      	cmp	r3, r4
   db77a:	d103      	bne.n	db784 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   db77c:	4641      	mov	r1, r8
   db77e:	f7ff ff72 	bl	db666 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db782:	4604      	mov	r4, r0
   db784:	6863      	ldr	r3, [r4, #4]
   db786:	4641      	mov	r1, r8
   db788:	701f      	strb	r7, [r3, #0]
   db78a:	4628      	mov	r0, r5
   db78c:	f885 9000 	strb.w	r9, [r5]
   db790:	f7ff ff7e 	bl	db690 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db794:	4625      	mov	r5, r4
   db796:	e7e2      	b.n	db75e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   db798:	b113      	cbz	r3, db7a0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   db79a:	781a      	ldrb	r2, [r3, #0]
   db79c:	2a00      	cmp	r2, #0
   db79e:	d0db      	beq.n	db758 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   db7a0:	6883      	ldr	r3, [r0, #8]
   db7a2:	42a3      	cmp	r3, r4
   db7a4:	d103      	bne.n	db7ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   db7a6:	4641      	mov	r1, r8
   db7a8:	f7ff ff72 	bl	db690 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db7ac:	4604      	mov	r4, r0
   db7ae:	6863      	ldr	r3, [r4, #4]
   db7b0:	4641      	mov	r1, r8
   db7b2:	701f      	strb	r7, [r3, #0]
   db7b4:	4628      	mov	r0, r5
   db7b6:	f885 9000 	strb.w	r9, [r5]
   db7ba:	f7ff ff54 	bl	db666 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db7be:	e7e9      	b.n	db794 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   db7c0:	4623      	mov	r3, r4
   db7c2:	2201      	movs	r2, #1
   db7c4:	701a      	strb	r2, [r3, #0]
   db7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db7ca <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
   db7ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db7ce:	460f      	mov	r7, r1
   db7d0:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
   db7d4:	4604      	mov	r4, r0
   db7d6:	2e00      	cmp	r6, #0
   db7d8:	d03e      	beq.n	db858 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
   db7da:	2900      	cmp	r1, #0
   db7dc:	d03d      	beq.n	db85a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   db7de:	460a      	mov	r2, r1
   db7e0:	4613      	mov	r3, r2
   db7e2:	6892      	ldr	r2, [r2, #8]
   db7e4:	2a00      	cmp	r2, #0
   db7e6:	d1fb      	bne.n	db7e0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
   db7e8:	42a3      	cmp	r3, r4
   db7ea:	68da      	ldr	r2, [r3, #12]
   db7ec:	d04b      	beq.n	db886 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
   db7ee:	4299      	cmp	r1, r3
   db7f0:	6073      	str	r3, [r6, #4]
   db7f2:	609e      	str	r6, [r3, #8]
   db7f4:	d027      	beq.n	db846 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
   db7f6:	685d      	ldr	r5, [r3, #4]
   db7f8:	b102      	cbz	r2, db7fc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
   db7fa:	6055      	str	r5, [r2, #4]
   db7fc:	6858      	ldr	r0, [r3, #4]
   db7fe:	6082      	str	r2, [r0, #8]
   db800:	60d9      	str	r1, [r3, #12]
   db802:	68e1      	ldr	r1, [r4, #12]
   db804:	604b      	str	r3, [r1, #4]
   db806:	6879      	ldr	r1, [r7, #4]
   db808:	42a1      	cmp	r1, r4
   db80a:	d11e      	bne.n	db84a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
   db80c:	607b      	str	r3, [r7, #4]
   db80e:	6861      	ldr	r1, [r4, #4]
   db810:	7820      	ldrb	r0, [r4, #0]
   db812:	6059      	str	r1, [r3, #4]
   db814:	7819      	ldrb	r1, [r3, #0]
   db816:	7018      	strb	r0, [r3, #0]
   db818:	4616      	mov	r6, r2
   db81a:	7021      	strb	r1, [r4, #0]
   db81c:	7823      	ldrb	r3, [r4, #0]
   db81e:	b173      	cbz	r3, db83e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
   db820:	1d39      	adds	r1, r7, #4
   db822:	f04f 0800 	mov.w	r8, #0
   db826:	f04f 0901 	mov.w	r9, #1
   db82a:	687b      	ldr	r3, [r7, #4]
   db82c:	42b3      	cmp	r3, r6
   db82e:	d07b      	beq.n	db928 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>
   db830:	2e00      	cmp	r6, #0
   db832:	d03f      	beq.n	db8b4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
   db834:	7833      	ldrb	r3, [r6, #0]
   db836:	2b01      	cmp	r3, #1
   db838:	d03c      	beq.n	db8b4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
   db83a:	2301      	movs	r3, #1
   db83c:	7033      	strb	r3, [r6, #0]
   db83e:	4620      	mov	r0, r4
   db840:	b003      	add	sp, #12
   db842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db846:	461d      	mov	r5, r3
   db848:	e7dd      	b.n	db806 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
   db84a:	6861      	ldr	r1, [r4, #4]
   db84c:	6888      	ldr	r0, [r1, #8]
   db84e:	42a0      	cmp	r0, r4
   db850:	bf0c      	ite	eq
   db852:	608b      	streq	r3, [r1, #8]
   db854:	60cb      	strne	r3, [r1, #12]
   db856:	e7da      	b.n	db80e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
   db858:	460e      	mov	r6, r1
   db85a:	6865      	ldr	r5, [r4, #4]
   db85c:	b106      	cbz	r6, db860 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
   db85e:	6075      	str	r5, [r6, #4]
   db860:	687b      	ldr	r3, [r7, #4]
   db862:	42a3      	cmp	r3, r4
   db864:	d111      	bne.n	db88a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
   db866:	607e      	str	r6, [r7, #4]
   db868:	68bb      	ldr	r3, [r7, #8]
   db86a:	42a3      	cmp	r3, r4
   db86c:	d103      	bne.n	db876 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   db86e:	68e3      	ldr	r3, [r4, #12]
   db870:	b993      	cbnz	r3, db898 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
   db872:	6863      	ldr	r3, [r4, #4]
   db874:	60bb      	str	r3, [r7, #8]
   db876:	68fb      	ldr	r3, [r7, #12]
   db878:	42a3      	cmp	r3, r4
   db87a:	d1cf      	bne.n	db81c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   db87c:	68a3      	ldr	r3, [r4, #8]
   db87e:	b993      	cbnz	r3, db8a6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   db880:	6863      	ldr	r3, [r4, #4]
   db882:	60fb      	str	r3, [r7, #12]
   db884:	e7ca      	b.n	db81c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   db886:	4616      	mov	r6, r2
   db888:	e7e7      	b.n	db85a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   db88a:	6863      	ldr	r3, [r4, #4]
   db88c:	689a      	ldr	r2, [r3, #8]
   db88e:	42a2      	cmp	r2, r4
   db890:	bf0c      	ite	eq
   db892:	609e      	streq	r6, [r3, #8]
   db894:	60de      	strne	r6, [r3, #12]
   db896:	e7e7      	b.n	db868 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
   db898:	4633      	mov	r3, r6
   db89a:	461a      	mov	r2, r3
   db89c:	689b      	ldr	r3, [r3, #8]
   db89e:	2b00      	cmp	r3, #0
   db8a0:	d1fb      	bne.n	db89a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
   db8a2:	60ba      	str	r2, [r7, #8]
   db8a4:	e7e7      	b.n	db876 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   db8a6:	4633      	mov	r3, r6
   db8a8:	461a      	mov	r2, r3
   db8aa:	68db      	ldr	r3, [r3, #12]
   db8ac:	2b00      	cmp	r3, #0
   db8ae:	d1fb      	bne.n	db8a8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
   db8b0:	60fa      	str	r2, [r7, #12]
   db8b2:	e7b3      	b.n	db81c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
   db8b4:	68a8      	ldr	r0, [r5, #8]
   db8b6:	42b0      	cmp	r0, r6
   db8b8:	d139      	bne.n	db92e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   db8ba:	68e8      	ldr	r0, [r5, #12]
   db8bc:	7803      	ldrb	r3, [r0, #0]
   db8be:	b943      	cbnz	r3, db8d2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x108>
   db8c0:	f880 9000 	strb.w	r9, [r0]
   db8c4:	4628      	mov	r0, r5
   db8c6:	702b      	strb	r3, [r5, #0]
   db8c8:	9101      	str	r1, [sp, #4]
   db8ca:	f7ff fecc 	bl	db666 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db8ce:	68e8      	ldr	r0, [r5, #12]
   db8d0:	9901      	ldr	r1, [sp, #4]
   db8d2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   db8d6:	b122      	cbz	r2, db8e2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x118>
   db8d8:	f892 c000 	ldrb.w	ip, [r2]
   db8dc:	f1bc 0f01 	cmp.w	ip, #1
   db8e0:	d10b      	bne.n	db8fa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
   db8e2:	b123      	cbz	r3, db8ee <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   db8e4:	f893 c000 	ldrb.w	ip, [r3]
   db8e8:	f1bc 0f01 	cmp.w	ip, #1
   db8ec:	d105      	bne.n	db8fa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
   db8ee:	686b      	ldr	r3, [r5, #4]
   db8f0:	f880 8000 	strb.w	r8, [r0]
   db8f4:	462e      	mov	r6, r5
   db8f6:	461d      	mov	r5, r3
   db8f8:	e797      	b.n	db82a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x60>
   db8fa:	b113      	cbz	r3, db902 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x138>
   db8fc:	781b      	ldrb	r3, [r3, #0]
   db8fe:	2b01      	cmp	r3, #1
   db900:	d108      	bne.n	db914 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14a>
   db902:	2301      	movs	r3, #1
   db904:	7013      	strb	r3, [r2, #0]
   db906:	2300      	movs	r3, #0
   db908:	7003      	strb	r3, [r0, #0]
   db90a:	9101      	str	r1, [sp, #4]
   db90c:	f7ff fec0 	bl	db690 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db910:	68e8      	ldr	r0, [r5, #12]
   db912:	9901      	ldr	r1, [sp, #4]
   db914:	782b      	ldrb	r3, [r5, #0]
   db916:	7003      	strb	r3, [r0, #0]
   db918:	68c3      	ldr	r3, [r0, #12]
   db91a:	2201      	movs	r2, #1
   db91c:	702a      	strb	r2, [r5, #0]
   db91e:	b103      	cbz	r3, db922 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x158>
   db920:	701a      	strb	r2, [r3, #0]
   db922:	4628      	mov	r0, r5
   db924:	f7ff fe9f 	bl	db666 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db928:	2e00      	cmp	r6, #0
   db92a:	d186      	bne.n	db83a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x70>
   db92c:	e787      	b.n	db83e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
   db92e:	7803      	ldrb	r3, [r0, #0]
   db930:	b943      	cbnz	r3, db944 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
   db932:	f880 9000 	strb.w	r9, [r0]
   db936:	4628      	mov	r0, r5
   db938:	702b      	strb	r3, [r5, #0]
   db93a:	9101      	str	r1, [sp, #4]
   db93c:	f7ff fea8 	bl	db690 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db940:	68a8      	ldr	r0, [r5, #8]
   db942:	9901      	ldr	r1, [sp, #4]
   db944:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   db948:	b122      	cbz	r2, db954 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18a>
   db94a:	f892 c000 	ldrb.w	ip, [r2]
   db94e:	f1bc 0f01 	cmp.w	ip, #1
   db952:	d106      	bne.n	db962 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x198>
   db954:	2b00      	cmp	r3, #0
   db956:	d0ca      	beq.n	db8ee <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   db958:	f893 c000 	ldrb.w	ip, [r3]
   db95c:	f1bc 0f01 	cmp.w	ip, #1
   db960:	d0c5      	beq.n	db8ee <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   db962:	b113      	cbz	r3, db96a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a0>
   db964:	781b      	ldrb	r3, [r3, #0]
   db966:	2b01      	cmp	r3, #1
   db968:	d108      	bne.n	db97c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1b2>
   db96a:	2301      	movs	r3, #1
   db96c:	7013      	strb	r3, [r2, #0]
   db96e:	2300      	movs	r3, #0
   db970:	7003      	strb	r3, [r0, #0]
   db972:	9101      	str	r1, [sp, #4]
   db974:	f7ff fe77 	bl	db666 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db978:	68a8      	ldr	r0, [r5, #8]
   db97a:	9901      	ldr	r1, [sp, #4]
   db97c:	782b      	ldrb	r3, [r5, #0]
   db97e:	7003      	strb	r3, [r0, #0]
   db980:	6883      	ldr	r3, [r0, #8]
   db982:	2201      	movs	r2, #1
   db984:	702a      	strb	r2, [r5, #0]
   db986:	b103      	cbz	r3, db98a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c0>
   db988:	701a      	strb	r2, [r3, #0]
   db98a:	4628      	mov	r0, r5
   db98c:	f7ff fe80 	bl	db690 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db990:	e7ca      	b.n	db928 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>

000db992 <_ZSt25__throw_bad_function_callv>:
   db992:	b508      	push	{r3, lr}
   db994:	f7fd ff6a 	bl	d986c <abort>

000db998 <ceil>:
   db998:	ec51 0b10 	vmov	r0, r1, d0
   db99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db99e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   db9a2:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   db9a6:	2d13      	cmp	r5, #19
   db9a8:	ee10 6a10 	vmov	r6, s0
   db9ac:	460c      	mov	r4, r1
   db9ae:	dc32      	bgt.n	dba16 <ceil+0x7e>
   db9b0:	2d00      	cmp	r5, #0
   db9b2:	db1e      	blt.n	db9f2 <ceil+0x5a>
   db9b4:	4f36      	ldr	r7, [pc, #216]	; (dba90 <ceil+0xf8>)
   db9b6:	412f      	asrs	r7, r5
   db9b8:	ea01 0307 	and.w	r3, r1, r7
   db9bc:	4303      	orrs	r3, r0
   db9be:	d02f      	beq.n	dba20 <ceil+0x88>
   db9c0:	a331      	add	r3, pc, #196	; (adr r3, dba88 <ceil+0xf0>)
   db9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9c6:	f001 f827 	bl	dca18 <__adddf3>
   db9ca:	2200      	movs	r2, #0
   db9cc:	2300      	movs	r3, #0
   db9ce:	f001 fc69 	bl	dd2a4 <__aeabi_dcmpgt>
   db9d2:	b148      	cbz	r0, db9e8 <ceil+0x50>
   db9d4:	2c00      	cmp	r4, #0
   db9d6:	dd04      	ble.n	db9e2 <ceil+0x4a>
   db9d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   db9dc:	fa43 f505 	asr.w	r5, r3, r5
   db9e0:	442c      	add	r4, r5
   db9e2:	ea24 0407 	bic.w	r4, r4, r7
   db9e6:	2600      	movs	r6, #0
   db9e8:	4623      	mov	r3, r4
   db9ea:	4632      	mov	r2, r6
   db9ec:	ec43 2b10 	vmov	d0, r2, r3
   db9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db9f2:	a325      	add	r3, pc, #148	; (adr r3, dba88 <ceil+0xf0>)
   db9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9f8:	f001 f80e 	bl	dca18 <__adddf3>
   db9fc:	2200      	movs	r2, #0
   db9fe:	2300      	movs	r3, #0
   dba00:	f001 fc50 	bl	dd2a4 <__aeabi_dcmpgt>
   dba04:	2800      	cmp	r0, #0
   dba06:	d0ef      	beq.n	db9e8 <ceil+0x50>
   dba08:	2c00      	cmp	r4, #0
   dba0a:	db39      	blt.n	dba80 <ceil+0xe8>
   dba0c:	4326      	orrs	r6, r4
   dba0e:	d033      	beq.n	dba78 <ceil+0xe0>
   dba10:	4c20      	ldr	r4, [pc, #128]	; (dba94 <ceil+0xfc>)
   dba12:	2600      	movs	r6, #0
   dba14:	e7e8      	b.n	db9e8 <ceil+0x50>
   dba16:	2d33      	cmp	r5, #51	; 0x33
   dba18:	dd05      	ble.n	dba26 <ceil+0x8e>
   dba1a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dba1e:	d023      	beq.n	dba68 <ceil+0xd0>
   dba20:	ec41 0b10 	vmov	d0, r0, r1
   dba24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dba26:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dba2a:	f04f 37ff 	mov.w	r7, #4294967295
   dba2e:	40df      	lsrs	r7, r3
   dba30:	4207      	tst	r7, r0
   dba32:	d0f5      	beq.n	dba20 <ceil+0x88>
   dba34:	a314      	add	r3, pc, #80	; (adr r3, dba88 <ceil+0xf0>)
   dba36:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba3a:	f000 ffed 	bl	dca18 <__adddf3>
   dba3e:	2200      	movs	r2, #0
   dba40:	2300      	movs	r3, #0
   dba42:	f001 fc2f 	bl	dd2a4 <__aeabi_dcmpgt>
   dba46:	2800      	cmp	r0, #0
   dba48:	d0ce      	beq.n	db9e8 <ceil+0x50>
   dba4a:	2c00      	cmp	r4, #0
   dba4c:	dd09      	ble.n	dba62 <ceil+0xca>
   dba4e:	2d14      	cmp	r5, #20
   dba50:	d014      	beq.n	dba7c <ceil+0xe4>
   dba52:	2301      	movs	r3, #1
   dba54:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dba58:	fa03 f505 	lsl.w	r5, r3, r5
   dba5c:	19ae      	adds	r6, r5, r6
   dba5e:	bf28      	it	cs
   dba60:	18e4      	addcs	r4, r4, r3
   dba62:	ea26 0607 	bic.w	r6, r6, r7
   dba66:	e7bf      	b.n	db9e8 <ceil+0x50>
   dba68:	ee10 2a10 	vmov	r2, s0
   dba6c:	460b      	mov	r3, r1
   dba6e:	f000 ffd3 	bl	dca18 <__adddf3>
   dba72:	ec41 0b10 	vmov	d0, r0, r1
   dba76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dba78:	4634      	mov	r4, r6
   dba7a:	e7b5      	b.n	db9e8 <ceil+0x50>
   dba7c:	3401      	adds	r4, #1
   dba7e:	e7f0      	b.n	dba62 <ceil+0xca>
   dba80:	2600      	movs	r6, #0
   dba82:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   dba86:	e7af      	b.n	db9e8 <ceil+0x50>
   dba88:	8800759c 	.word	0x8800759c
   dba8c:	7e37e43c 	.word	0x7e37e43c
   dba90:	000fffff 	.word	0x000fffff
   dba94:	3ff00000 	.word	0x3ff00000

000dba98 <atanf>:
   dba98:	b538      	push	{r3, r4, r5, lr}
   dba9a:	ee10 5a10 	vmov	r5, s0
   dba9e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   dbaa2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   dbaa6:	eef0 7a40 	vmov.f32	s15, s0
   dbaaa:	db0b      	blt.n	dbac4 <atanf+0x2c>
   dbaac:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   dbab0:	dc59      	bgt.n	dbb66 <atanf+0xce>
   dbab2:	eddf 7a52 	vldr	s15, [pc, #328]	; dbbfc <atanf+0x164>
   dbab6:	ed9f 0a52 	vldr	s0, [pc, #328]	; dbc00 <atanf+0x168>
   dbaba:	2d00      	cmp	r5, #0
   dbabc:	bfc8      	it	gt
   dbabe:	eeb0 0a67 	vmovgt.f32	s0, s15
   dbac2:	bd38      	pop	{r3, r4, r5, pc}
   dbac4:	4b4f      	ldr	r3, [pc, #316]	; (dbc04 <atanf+0x16c>)
   dbac6:	429c      	cmp	r4, r3
   dbac8:	dc5c      	bgt.n	dbb84 <atanf+0xec>
   dbaca:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   dbace:	db4d      	blt.n	dbb6c <atanf+0xd4>
   dbad0:	f04f 33ff 	mov.w	r3, #4294967295
   dbad4:	ee27 6aa7 	vmul.f32	s12, s15, s15
   dbad8:	ed9f 1a4b 	vldr	s2, [pc, #300]	; dbc08 <atanf+0x170>
   dbadc:	ed9f 2a4b 	vldr	s4, [pc, #300]	; dbc0c <atanf+0x174>
   dbae0:	ed9f 3a4b 	vldr	s6, [pc, #300]	; dbc10 <atanf+0x178>
   dbae4:	eddf 1a4b 	vldr	s3, [pc, #300]	; dbc14 <atanf+0x17c>
   dbae8:	eddf 2a4b 	vldr	s5, [pc, #300]	; dbc18 <atanf+0x180>
   dbaec:	ed9f 4a4b 	vldr	s8, [pc, #300]	; dbc1c <atanf+0x184>
   dbaf0:	eddf 3a4b 	vldr	s7, [pc, #300]	; dbc20 <atanf+0x188>
   dbaf4:	ed9f 5a4b 	vldr	s10, [pc, #300]	; dbc24 <atanf+0x18c>
   dbaf8:	eddf 4a4b 	vldr	s9, [pc, #300]	; dbc28 <atanf+0x190>
   dbafc:	eddf 6a4b 	vldr	s13, [pc, #300]	; dbc2c <atanf+0x194>
   dbb00:	eddf 5a4b 	vldr	s11, [pc, #300]	; dbc30 <atanf+0x198>
   dbb04:	ee26 7a06 	vmul.f32	s14, s12, s12
   dbb08:	1c5a      	adds	r2, r3, #1
   dbb0a:	eea7 2a01 	vfma.f32	s4, s14, s2
   dbb0e:	eee7 2a21 	vfma.f32	s5, s14, s3
   dbb12:	eea2 3a07 	vfma.f32	s6, s4, s14
   dbb16:	eee2 3a87 	vfma.f32	s7, s5, s14
   dbb1a:	eea3 4a07 	vfma.f32	s8, s6, s14
   dbb1e:	eee3 4a87 	vfma.f32	s9, s7, s14
   dbb22:	eea4 5a07 	vfma.f32	s10, s8, s14
   dbb26:	eee4 5a87 	vfma.f32	s11, s9, s14
   dbb2a:	eee5 6a07 	vfma.f32	s13, s10, s14
   dbb2e:	ee25 7a87 	vmul.f32	s14, s11, s14
   dbb32:	ee66 6a86 	vmul.f32	s13, s13, s12
   dbb36:	d03a      	beq.n	dbbae <atanf+0x116>
   dbb38:	493e      	ldr	r1, [pc, #248]	; (dbc34 <atanf+0x19c>)
   dbb3a:	4a3f      	ldr	r2, [pc, #252]	; (dbc38 <atanf+0x1a0>)
   dbb3c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   dbb40:	ee76 6a87 	vadd.f32	s13, s13, s14
   dbb44:	ed91 0a00 	vldr	s0, [r1]
   dbb48:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   dbb4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dbb50:	2d00      	cmp	r5, #0
   dbb52:	ed93 7a00 	vldr	s14, [r3]
   dbb56:	ee70 7a67 	vsub.f32	s15, s0, s15
   dbb5a:	ee37 0a67 	vsub.f32	s0, s14, s15
   dbb5e:	dab0      	bge.n	dbac2 <atanf+0x2a>
   dbb60:	eeb1 0a40 	vneg.f32	s0, s0
   dbb64:	bd38      	pop	{r3, r4, r5, pc}
   dbb66:	ee30 0a00 	vadd.f32	s0, s0, s0
   dbb6a:	bd38      	pop	{r3, r4, r5, pc}
   dbb6c:	ed9f 7a33 	vldr	s14, [pc, #204]	; dbc3c <atanf+0x1a4>
   dbb70:	ee30 7a07 	vadd.f32	s14, s0, s14
   dbb74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   dbb78:	eeb4 7ae6 	vcmpe.f32	s14, s13
   dbb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbb80:	dda6      	ble.n	dbad0 <atanf+0x38>
   dbb82:	bd38      	pop	{r3, r4, r5, pc}
   dbb84:	f000 f8ee 	bl	dbd64 <fabsf>
   dbb88:	4b2d      	ldr	r3, [pc, #180]	; (dbc40 <atanf+0x1a8>)
   dbb8a:	429c      	cmp	r4, r3
   dbb8c:	dc16      	bgt.n	dbbbc <atanf+0x124>
   dbb8e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   dbb92:	429c      	cmp	r4, r3
   dbb94:	dc27      	bgt.n	dbbe6 <atanf+0x14e>
   dbb96:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   dbb9a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dbb9e:	eea0 7a27 	vfma.f32	s14, s0, s15
   dbba2:	2300      	movs	r3, #0
   dbba4:	ee30 0a27 	vadd.f32	s0, s0, s15
   dbba8:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dbbac:	e792      	b.n	dbad4 <atanf+0x3c>
   dbbae:	ee76 6a87 	vadd.f32	s13, s13, s14
   dbbb2:	eee6 7ae7 	vfms.f32	s15, s13, s15
   dbbb6:	eeb0 0a67 	vmov.f32	s0, s15
   dbbba:	bd38      	pop	{r3, r4, r5, pc}
   dbbbc:	4b21      	ldr	r3, [pc, #132]	; (dbc44 <atanf+0x1ac>)
   dbbbe:	429c      	cmp	r4, r3
   dbbc0:	dc0b      	bgt.n	dbbda <atanf+0x142>
   dbbc2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   dbbc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   dbbca:	eea0 7a27 	vfma.f32	s14, s0, s15
   dbbce:	2302      	movs	r3, #2
   dbbd0:	ee30 0a67 	vsub.f32	s0, s0, s15
   dbbd4:	eec0 7a07 	vdiv.f32	s15, s0, s14
   dbbd8:	e77c      	b.n	dbad4 <atanf+0x3c>
   dbbda:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   dbbde:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dbbe2:	2303      	movs	r3, #3
   dbbe4:	e776      	b.n	dbad4 <atanf+0x3c>
   dbbe6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   dbbea:	ee30 7a67 	vsub.f32	s14, s0, s15
   dbbee:	ee30 0a27 	vadd.f32	s0, s0, s15
   dbbf2:	2301      	movs	r3, #1
   dbbf4:	eec7 7a00 	vdiv.f32	s15, s14, s0
   dbbf8:	e76c      	b.n	dbad4 <atanf+0x3c>
   dbbfa:	bf00      	nop
   dbbfc:	3fc90fdb 	.word	0x3fc90fdb
   dbc00:	bfc90fdb 	.word	0xbfc90fdb
   dbc04:	3edfffff 	.word	0x3edfffff
   dbc08:	3c8569d7 	.word	0x3c8569d7
   dbc0c:	3d4bda59 	.word	0x3d4bda59
   dbc10:	3d886b35 	.word	0x3d886b35
   dbc14:	bd15a221 	.word	0xbd15a221
   dbc18:	bd6ef16b 	.word	0xbd6ef16b
   dbc1c:	3dba2e6e 	.word	0x3dba2e6e
   dbc20:	bd9d8795 	.word	0xbd9d8795
   dbc24:	3e124925 	.word	0x3e124925
   dbc28:	bde38e38 	.word	0xbde38e38
   dbc2c:	3eaaaaab 	.word	0x3eaaaaab
   dbc30:	be4ccccd 	.word	0xbe4ccccd
   dbc34:	000dfb9c 	.word	0x000dfb9c
   dbc38:	000dfb8c 	.word	0x000dfb8c
   dbc3c:	7149f2ca 	.word	0x7149f2ca
   dbc40:	3f97ffff 	.word	0x3f97ffff
   dbc44:	401bffff 	.word	0x401bffff

000dbc48 <ceilf>:
   dbc48:	ee10 2a10 	vmov	r2, s0
   dbc4c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   dbc50:	3b7f      	subs	r3, #127	; 0x7f
   dbc52:	2b16      	cmp	r3, #22
   dbc54:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   dbc58:	dc1a      	bgt.n	dbc90 <ceilf+0x48>
   dbc5a:	2b00      	cmp	r3, #0
   dbc5c:	db21      	blt.n	dbca2 <ceilf+0x5a>
   dbc5e:	491a      	ldr	r1, [pc, #104]	; (dbcc8 <ceilf+0x80>)
   dbc60:	4119      	asrs	r1, r3
   dbc62:	420a      	tst	r2, r1
   dbc64:	d01c      	beq.n	dbca0 <ceilf+0x58>
   dbc66:	eddf 7a19 	vldr	s15, [pc, #100]	; dbccc <ceilf+0x84>
   dbc6a:	ee70 7a27 	vadd.f32	s15, s0, s15
   dbc6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dbc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbc76:	dd13      	ble.n	dbca0 <ceilf+0x58>
   dbc78:	2a00      	cmp	r2, #0
   dbc7a:	dd04      	ble.n	dbc86 <ceilf+0x3e>
   dbc7c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   dbc80:	fa40 f303 	asr.w	r3, r0, r3
   dbc84:	441a      	add	r2, r3
   dbc86:	ea22 0301 	bic.w	r3, r2, r1
   dbc8a:	ee00 3a10 	vmov	s0, r3
   dbc8e:	4770      	bx	lr
   dbc90:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   dbc94:	d304      	bcc.n	dbca0 <ceilf+0x58>
   dbc96:	ee30 0a00 	vadd.f32	s0, s0, s0
   dbc9a:	4770      	bx	lr
   dbc9c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; dbcd0 <ceilf+0x88>
   dbca0:	4770      	bx	lr
   dbca2:	eddf 7a0a 	vldr	s15, [pc, #40]	; dbccc <ceilf+0x84>
   dbca6:	ee70 7a27 	vadd.f32	s15, s0, s15
   dbcaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dbcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbcb2:	ddf5      	ble.n	dbca0 <ceilf+0x58>
   dbcb4:	2a00      	cmp	r2, #0
   dbcb6:	dbf1      	blt.n	dbc9c <ceilf+0x54>
   dbcb8:	2900      	cmp	r1, #0
   dbcba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   dbcbe:	bf18      	it	ne
   dbcc0:	eeb0 0a67 	vmovne.f32	s0, s15
   dbcc4:	4770      	bx	lr
   dbcc6:	bf00      	nop
   dbcc8:	007fffff 	.word	0x007fffff
   dbccc:	7149f2ca 	.word	0x7149f2ca
   dbcd0:	80000000 	.word	0x80000000

000dbcd4 <cosf>:
   dbcd4:	b500      	push	{lr}
   dbcd6:	ee10 3a10 	vmov	r3, s0
   dbcda:	4a20      	ldr	r2, [pc, #128]	; (dbd5c <cosf+0x88>)
   dbcdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dbce0:	4293      	cmp	r3, r2
   dbce2:	b083      	sub	sp, #12
   dbce4:	dd19      	ble.n	dbd1a <cosf+0x46>
   dbce6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   dbcea:	db04      	blt.n	dbcf6 <cosf+0x22>
   dbcec:	ee30 0a40 	vsub.f32	s0, s0, s0
   dbcf0:	b003      	add	sp, #12
   dbcf2:	f85d fb04 	ldr.w	pc, [sp], #4
   dbcf6:	4668      	mov	r0, sp
   dbcf8:	f000 f886 	bl	dbe08 <__ieee754_rem_pio2f>
   dbcfc:	f000 0003 	and.w	r0, r0, #3
   dbd00:	2801      	cmp	r0, #1
   dbd02:	d011      	beq.n	dbd28 <cosf+0x54>
   dbd04:	2802      	cmp	r0, #2
   dbd06:	d01f      	beq.n	dbd48 <cosf+0x74>
   dbd08:	b1b8      	cbz	r0, dbd3a <cosf+0x66>
   dbd0a:	eddd 0a01 	vldr	s1, [sp, #4]
   dbd0e:	ed9d 0a00 	vldr	s0, [sp]
   dbd12:	2001      	movs	r0, #1
   dbd14:	f000 fd7a 	bl	dc80c <__kernel_sinf>
   dbd18:	e7ea      	b.n	dbcf0 <cosf+0x1c>
   dbd1a:	eddf 0a11 	vldr	s1, [pc, #68]	; dbd60 <cosf+0x8c>
   dbd1e:	f000 f9bd 	bl	dc09c <__kernel_cosf>
   dbd22:	b003      	add	sp, #12
   dbd24:	f85d fb04 	ldr.w	pc, [sp], #4
   dbd28:	eddd 0a01 	vldr	s1, [sp, #4]
   dbd2c:	ed9d 0a00 	vldr	s0, [sp]
   dbd30:	f000 fd6c 	bl	dc80c <__kernel_sinf>
   dbd34:	eeb1 0a40 	vneg.f32	s0, s0
   dbd38:	e7da      	b.n	dbcf0 <cosf+0x1c>
   dbd3a:	eddd 0a01 	vldr	s1, [sp, #4]
   dbd3e:	ed9d 0a00 	vldr	s0, [sp]
   dbd42:	f000 f9ab 	bl	dc09c <__kernel_cosf>
   dbd46:	e7d3      	b.n	dbcf0 <cosf+0x1c>
   dbd48:	eddd 0a01 	vldr	s1, [sp, #4]
   dbd4c:	ed9d 0a00 	vldr	s0, [sp]
   dbd50:	f000 f9a4 	bl	dc09c <__kernel_cosf>
   dbd54:	eeb1 0a40 	vneg.f32	s0, s0
   dbd58:	e7ca      	b.n	dbcf0 <cosf+0x1c>
   dbd5a:	bf00      	nop
   dbd5c:	3f490fd8 	.word	0x3f490fd8
   dbd60:	00000000 	.word	0x00000000

000dbd64 <fabsf>:
   dbd64:	ee10 3a10 	vmov	r3, s0
   dbd68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dbd6c:	ee00 3a10 	vmov	s0, r3
   dbd70:	4770      	bx	lr
   dbd72:	bf00      	nop

000dbd74 <sinf>:
   dbd74:	b500      	push	{lr}
   dbd76:	ee10 3a10 	vmov	r3, s0
   dbd7a:	4a21      	ldr	r2, [pc, #132]	; (dbe00 <sinf+0x8c>)
   dbd7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dbd80:	4293      	cmp	r3, r2
   dbd82:	b083      	sub	sp, #12
   dbd84:	dd1a      	ble.n	dbdbc <sinf+0x48>
   dbd86:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   dbd8a:	db04      	blt.n	dbd96 <sinf+0x22>
   dbd8c:	ee30 0a40 	vsub.f32	s0, s0, s0
   dbd90:	b003      	add	sp, #12
   dbd92:	f85d fb04 	ldr.w	pc, [sp], #4
   dbd96:	4668      	mov	r0, sp
   dbd98:	f000 f836 	bl	dbe08 <__ieee754_rem_pio2f>
   dbd9c:	f000 0003 	and.w	r0, r0, #3
   dbda0:	2801      	cmp	r0, #1
   dbda2:	d013      	beq.n	dbdcc <sinf+0x58>
   dbda4:	2802      	cmp	r0, #2
   dbda6:	d020      	beq.n	dbdea <sinf+0x76>
   dbda8:	b1b8      	cbz	r0, dbdda <sinf+0x66>
   dbdaa:	eddd 0a01 	vldr	s1, [sp, #4]
   dbdae:	ed9d 0a00 	vldr	s0, [sp]
   dbdb2:	f000 f973 	bl	dc09c <__kernel_cosf>
   dbdb6:	eeb1 0a40 	vneg.f32	s0, s0
   dbdba:	e7e9      	b.n	dbd90 <sinf+0x1c>
   dbdbc:	eddf 0a11 	vldr	s1, [pc, #68]	; dbe04 <sinf+0x90>
   dbdc0:	2000      	movs	r0, #0
   dbdc2:	f000 fd23 	bl	dc80c <__kernel_sinf>
   dbdc6:	b003      	add	sp, #12
   dbdc8:	f85d fb04 	ldr.w	pc, [sp], #4
   dbdcc:	eddd 0a01 	vldr	s1, [sp, #4]
   dbdd0:	ed9d 0a00 	vldr	s0, [sp]
   dbdd4:	f000 f962 	bl	dc09c <__kernel_cosf>
   dbdd8:	e7da      	b.n	dbd90 <sinf+0x1c>
   dbdda:	eddd 0a01 	vldr	s1, [sp, #4]
   dbdde:	ed9d 0a00 	vldr	s0, [sp]
   dbde2:	2001      	movs	r0, #1
   dbde4:	f000 fd12 	bl	dc80c <__kernel_sinf>
   dbde8:	e7d2      	b.n	dbd90 <sinf+0x1c>
   dbdea:	eddd 0a01 	vldr	s1, [sp, #4]
   dbdee:	ed9d 0a00 	vldr	s0, [sp]
   dbdf2:	2001      	movs	r0, #1
   dbdf4:	f000 fd0a 	bl	dc80c <__kernel_sinf>
   dbdf8:	eeb1 0a40 	vneg.f32	s0, s0
   dbdfc:	e7c8      	b.n	dbd90 <sinf+0x1c>
   dbdfe:	bf00      	nop
   dbe00:	3f490fd8 	.word	0x3f490fd8
   dbe04:	00000000 	.word	0x00000000

000dbe08 <__ieee754_rem_pio2f>:
   dbe08:	b570      	push	{r4, r5, r6, lr}
   dbe0a:	ee10 3a10 	vmov	r3, s0
   dbe0e:	4a95      	ldr	r2, [pc, #596]	; (dc064 <__ieee754_rem_pio2f+0x25c>)
   dbe10:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   dbe14:	4294      	cmp	r4, r2
   dbe16:	b086      	sub	sp, #24
   dbe18:	4605      	mov	r5, r0
   dbe1a:	dd68      	ble.n	dbeee <__ieee754_rem_pio2f+0xe6>
   dbe1c:	4a92      	ldr	r2, [pc, #584]	; (dc068 <__ieee754_rem_pio2f+0x260>)
   dbe1e:	4294      	cmp	r4, r2
   dbe20:	ee10 6a10 	vmov	r6, s0
   dbe24:	dc1a      	bgt.n	dbe5c <__ieee754_rem_pio2f+0x54>
   dbe26:	2b00      	cmp	r3, #0
   dbe28:	eddf 7a90 	vldr	s15, [pc, #576]	; dc06c <__ieee754_rem_pio2f+0x264>
   dbe2c:	4a90      	ldr	r2, [pc, #576]	; (dc070 <__ieee754_rem_pio2f+0x268>)
   dbe2e:	f024 040f 	bic.w	r4, r4, #15
   dbe32:	f340 80f1 	ble.w	dc018 <__ieee754_rem_pio2f+0x210>
   dbe36:	4294      	cmp	r4, r2
   dbe38:	ee70 7a67 	vsub.f32	s15, s0, s15
   dbe3c:	d066      	beq.n	dbf0c <__ieee754_rem_pio2f+0x104>
   dbe3e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; dc074 <__ieee754_rem_pio2f+0x26c>
   dbe42:	ee77 6ac7 	vsub.f32	s13, s15, s14
   dbe46:	2001      	movs	r0, #1
   dbe48:	ee77 7ae6 	vsub.f32	s15, s15, s13
   dbe4c:	edc5 6a00 	vstr	s13, [r5]
   dbe50:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dbe54:	edc5 7a01 	vstr	s15, [r5, #4]
   dbe58:	b006      	add	sp, #24
   dbe5a:	bd70      	pop	{r4, r5, r6, pc}
   dbe5c:	4a86      	ldr	r2, [pc, #536]	; (dc078 <__ieee754_rem_pio2f+0x270>)
   dbe5e:	4294      	cmp	r4, r2
   dbe60:	dd67      	ble.n	dbf32 <__ieee754_rem_pio2f+0x12a>
   dbe62:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   dbe66:	da49      	bge.n	dbefc <__ieee754_rem_pio2f+0xf4>
   dbe68:	15e2      	asrs	r2, r4, #23
   dbe6a:	3a86      	subs	r2, #134	; 0x86
   dbe6c:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   dbe70:	ee07 3a90 	vmov	s15, r3
   dbe74:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   dbe78:	eddf 6a80 	vldr	s13, [pc, #512]	; dc07c <__ieee754_rem_pio2f+0x274>
   dbe7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   dbe80:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dbe84:	ed8d 7a03 	vstr	s14, [sp, #12]
   dbe88:	ee67 7aa6 	vmul.f32	s15, s15, s13
   dbe8c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   dbe90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   dbe94:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dbe98:	ed8d 7a04 	vstr	s14, [sp, #16]
   dbe9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   dbea0:	eef5 7a40 	vcmp.f32	s15, #0.0
   dbea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbea8:	edcd 7a05 	vstr	s15, [sp, #20]
   dbeac:	f040 80a3 	bne.w	dbff6 <__ieee754_rem_pio2f+0x1ee>
   dbeb0:	eeb5 7a40 	vcmp.f32	s14, #0.0
   dbeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbeb8:	bf14      	ite	ne
   dbeba:	2302      	movne	r3, #2
   dbebc:	2301      	moveq	r3, #1
   dbebe:	4970      	ldr	r1, [pc, #448]	; (dc080 <__ieee754_rem_pio2f+0x278>)
   dbec0:	9101      	str	r1, [sp, #4]
   dbec2:	2102      	movs	r1, #2
   dbec4:	9100      	str	r1, [sp, #0]
   dbec6:	a803      	add	r0, sp, #12
   dbec8:	4629      	mov	r1, r5
   dbeca:	f000 f969 	bl	dc1a0 <__kernel_rem_pio2f>
   dbece:	2e00      	cmp	r6, #0
   dbed0:	dac2      	bge.n	dbe58 <__ieee754_rem_pio2f+0x50>
   dbed2:	ed95 7a00 	vldr	s14, [r5]
   dbed6:	edd5 7a01 	vldr	s15, [r5, #4]
   dbeda:	eeb1 7a47 	vneg.f32	s14, s14
   dbede:	eef1 7a67 	vneg.f32	s15, s15
   dbee2:	4240      	negs	r0, r0
   dbee4:	ed85 7a00 	vstr	s14, [r5]
   dbee8:	edc5 7a01 	vstr	s15, [r5, #4]
   dbeec:	e7b4      	b.n	dbe58 <__ieee754_rem_pio2f+0x50>
   dbeee:	2200      	movs	r2, #0
   dbef0:	ed85 0a00 	vstr	s0, [r5]
   dbef4:	6042      	str	r2, [r0, #4]
   dbef6:	2000      	movs	r0, #0
   dbef8:	b006      	add	sp, #24
   dbefa:	bd70      	pop	{r4, r5, r6, pc}
   dbefc:	ee70 7a40 	vsub.f32	s15, s0, s0
   dbf00:	2000      	movs	r0, #0
   dbf02:	edc5 7a01 	vstr	s15, [r5, #4]
   dbf06:	edc5 7a00 	vstr	s15, [r5]
   dbf0a:	e7a5      	b.n	dbe58 <__ieee754_rem_pio2f+0x50>
   dbf0c:	eddf 6a5d 	vldr	s13, [pc, #372]	; dc084 <__ieee754_rem_pio2f+0x27c>
   dbf10:	ed9f 7a5d 	vldr	s14, [pc, #372]	; dc088 <__ieee754_rem_pio2f+0x280>
   dbf14:	ee77 7ae6 	vsub.f32	s15, s15, s13
   dbf18:	2001      	movs	r0, #1
   dbf1a:	ee77 6ac7 	vsub.f32	s13, s15, s14
   dbf1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
   dbf22:	edc5 6a00 	vstr	s13, [r5]
   dbf26:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dbf2a:	edc5 7a01 	vstr	s15, [r5, #4]
   dbf2e:	b006      	add	sp, #24
   dbf30:	bd70      	pop	{r4, r5, r6, pc}
   dbf32:	f7ff ff17 	bl	dbd64 <fabsf>
   dbf36:	eddf 6a55 	vldr	s13, [pc, #340]	; dc08c <__ieee754_rem_pio2f+0x284>
   dbf3a:	ed9f 6a4c 	vldr	s12, [pc, #304]	; dc06c <__ieee754_rem_pio2f+0x264>
   dbf3e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; dc074 <__ieee754_rem_pio2f+0x26c>
   dbf42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   dbf46:	eee0 7a26 	vfma.f32	s15, s0, s13
   dbf4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   dbf4e:	ee17 0a90 	vmov	r0, s15
   dbf52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   dbf56:	281f      	cmp	r0, #31
   dbf58:	eea6 0ac6 	vfms.f32	s0, s13, s12
   dbf5c:	ee66 7a87 	vmul.f32	s15, s13, s14
   dbf60:	eeb1 6a66 	vneg.f32	s12, s13
   dbf64:	dc1e      	bgt.n	dbfa4 <__ieee754_rem_pio2f+0x19c>
   dbf66:	4a4a      	ldr	r2, [pc, #296]	; (dc090 <__ieee754_rem_pio2f+0x288>)
   dbf68:	1e41      	subs	r1, r0, #1
   dbf6a:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   dbf6e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   dbf72:	4293      	cmp	r3, r2
   dbf74:	d016      	beq.n	dbfa4 <__ieee754_rem_pio2f+0x19c>
   dbf76:	ee30 7a67 	vsub.f32	s14, s0, s15
   dbf7a:	ed85 7a00 	vstr	s14, [r5]
   dbf7e:	ee30 0a47 	vsub.f32	s0, s0, s14
   dbf82:	2e00      	cmp	r6, #0
   dbf84:	ee30 0a67 	vsub.f32	s0, s0, s15
   dbf88:	ed85 0a01 	vstr	s0, [r5, #4]
   dbf8c:	f6bf af64 	bge.w	dbe58 <__ieee754_rem_pio2f+0x50>
   dbf90:	eeb1 7a47 	vneg.f32	s14, s14
   dbf94:	eeb1 0a40 	vneg.f32	s0, s0
   dbf98:	ed85 7a00 	vstr	s14, [r5]
   dbf9c:	ed85 0a01 	vstr	s0, [r5, #4]
   dbfa0:	4240      	negs	r0, r0
   dbfa2:	e759      	b.n	dbe58 <__ieee754_rem_pio2f+0x50>
   dbfa4:	ee30 7a67 	vsub.f32	s14, s0, s15
   dbfa8:	15e2      	asrs	r2, r4, #23
   dbfaa:	ee17 3a10 	vmov	r3, s14
   dbfae:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   dbfb2:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   dbfb6:	2c08      	cmp	r4, #8
   dbfb8:	dddf      	ble.n	dbf7a <__ieee754_rem_pio2f+0x172>
   dbfba:	eddf 7a32 	vldr	s15, [pc, #200]	; dc084 <__ieee754_rem_pio2f+0x27c>
   dbfbe:	ed9f 7a32 	vldr	s14, [pc, #200]	; dc088 <__ieee754_rem_pio2f+0x280>
   dbfc2:	eef0 5a40 	vmov.f32	s11, s0
   dbfc6:	eee6 5a27 	vfma.f32	s11, s12, s15
   dbfca:	ee30 0a65 	vsub.f32	s0, s0, s11
   dbfce:	eea6 0a27 	vfma.f32	s0, s12, s15
   dbfd2:	eef0 7a40 	vmov.f32	s15, s0
   dbfd6:	eed6 7a87 	vfnms.f32	s15, s13, s14
   dbfda:	ee35 7ae7 	vsub.f32	s14, s11, s15
   dbfde:	ee17 3a10 	vmov	r3, s14
   dbfe2:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   dbfe6:	1ad2      	subs	r2, r2, r3
   dbfe8:	2a19      	cmp	r2, #25
   dbfea:	dc06      	bgt.n	dbffa <__ieee754_rem_pio2f+0x1f2>
   dbfec:	ed85 7a00 	vstr	s14, [r5]
   dbff0:	eeb0 0a65 	vmov.f32	s0, s11
   dbff4:	e7c3      	b.n	dbf7e <__ieee754_rem_pio2f+0x176>
   dbff6:	2303      	movs	r3, #3
   dbff8:	e761      	b.n	dbebe <__ieee754_rem_pio2f+0xb6>
   dbffa:	ed9f 7a26 	vldr	s14, [pc, #152]	; dc094 <__ieee754_rem_pio2f+0x28c>
   dbffe:	ed9f 5a26 	vldr	s10, [pc, #152]	; dc098 <__ieee754_rem_pio2f+0x290>
   dc002:	eeb0 0a65 	vmov.f32	s0, s11
   dc006:	eea6 0a07 	vfma.f32	s0, s12, s14
   dc00a:	ee75 7ac0 	vsub.f32	s15, s11, s0
   dc00e:	eee6 7a07 	vfma.f32	s15, s12, s14
   dc012:	eed6 7a85 	vfnms.f32	s15, s13, s10
   dc016:	e7ae      	b.n	dbf76 <__ieee754_rem_pio2f+0x16e>
   dc018:	4294      	cmp	r4, r2
   dc01a:	ee70 7a27 	vadd.f32	s15, s0, s15
   dc01e:	d00e      	beq.n	dc03e <__ieee754_rem_pio2f+0x236>
   dc020:	ed9f 7a14 	vldr	s14, [pc, #80]	; dc074 <__ieee754_rem_pio2f+0x26c>
   dc024:	ee77 6a87 	vadd.f32	s13, s15, s14
   dc028:	f04f 30ff 	mov.w	r0, #4294967295
   dc02c:	ee77 7ae6 	vsub.f32	s15, s15, s13
   dc030:	edc5 6a00 	vstr	s13, [r5]
   dc034:	ee77 7a87 	vadd.f32	s15, s15, s14
   dc038:	edc5 7a01 	vstr	s15, [r5, #4]
   dc03c:	e70c      	b.n	dbe58 <__ieee754_rem_pio2f+0x50>
   dc03e:	eddf 6a11 	vldr	s13, [pc, #68]	; dc084 <__ieee754_rem_pio2f+0x27c>
   dc042:	ed9f 7a11 	vldr	s14, [pc, #68]	; dc088 <__ieee754_rem_pio2f+0x280>
   dc046:	ee77 7aa6 	vadd.f32	s15, s15, s13
   dc04a:	f04f 30ff 	mov.w	r0, #4294967295
   dc04e:	ee77 6a87 	vadd.f32	s13, s15, s14
   dc052:	ee77 7ae6 	vsub.f32	s15, s15, s13
   dc056:	edc5 6a00 	vstr	s13, [r5]
   dc05a:	ee77 7a87 	vadd.f32	s15, s15, s14
   dc05e:	edc5 7a01 	vstr	s15, [r5, #4]
   dc062:	e6f9      	b.n	dbe58 <__ieee754_rem_pio2f+0x50>
   dc064:	3f490fd8 	.word	0x3f490fd8
   dc068:	4016cbe3 	.word	0x4016cbe3
   dc06c:	3fc90f80 	.word	0x3fc90f80
   dc070:	3fc90fd0 	.word	0x3fc90fd0
   dc074:	37354443 	.word	0x37354443
   dc078:	43490f80 	.word	0x43490f80
   dc07c:	43800000 	.word	0x43800000
   dc080:	000dfc2c 	.word	0x000dfc2c
   dc084:	37354400 	.word	0x37354400
   dc088:	2e85a308 	.word	0x2e85a308
   dc08c:	3f22f984 	.word	0x3f22f984
   dc090:	000dfbac 	.word	0x000dfbac
   dc094:	2e85a300 	.word	0x2e85a300
   dc098:	248d3132 	.word	0x248d3132

000dc09c <__kernel_cosf>:
   dc09c:	ee10 3a10 	vmov	r3, s0
   dc0a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dc0a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   dc0a8:	da2c      	bge.n	dc104 <__kernel_cosf+0x68>
   dc0aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   dc0ae:	ee17 3a90 	vmov	r3, s15
   dc0b2:	2b00      	cmp	r3, #0
   dc0b4:	d060      	beq.n	dc178 <__kernel_cosf+0xdc>
   dc0b6:	ee20 7a00 	vmul.f32	s14, s0, s0
   dc0ba:	eddf 4a31 	vldr	s9, [pc, #196]	; dc180 <__kernel_cosf+0xe4>
   dc0be:	ed9f 5a31 	vldr	s10, [pc, #196]	; dc184 <__kernel_cosf+0xe8>
   dc0c2:	eddf 5a31 	vldr	s11, [pc, #196]	; dc188 <__kernel_cosf+0xec>
   dc0c6:	ed9f 6a31 	vldr	s12, [pc, #196]	; dc18c <__kernel_cosf+0xf0>
   dc0ca:	eddf 7a31 	vldr	s15, [pc, #196]	; dc190 <__kernel_cosf+0xf4>
   dc0ce:	eddf 6a31 	vldr	s13, [pc, #196]	; dc194 <__kernel_cosf+0xf8>
   dc0d2:	eea7 5a24 	vfma.f32	s10, s14, s9
   dc0d6:	eee7 5a05 	vfma.f32	s11, s14, s10
   dc0da:	eea7 6a25 	vfma.f32	s12, s14, s11
   dc0de:	eee7 7a06 	vfma.f32	s15, s14, s12
   dc0e2:	eee7 6a27 	vfma.f32	s13, s14, s15
   dc0e6:	ee67 6a26 	vmul.f32	s13, s14, s13
   dc0ea:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   dc0ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   dc0f2:	eee7 0a26 	vfma.f32	s1, s14, s13
   dc0f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   dc0fa:	eed7 0a27 	vfnms.f32	s1, s14, s15
   dc0fe:	ee30 0a60 	vsub.f32	s0, s0, s1
   dc102:	4770      	bx	lr
   dc104:	ee20 7a00 	vmul.f32	s14, s0, s0
   dc108:	eddf 4a1d 	vldr	s9, [pc, #116]	; dc180 <__kernel_cosf+0xe4>
   dc10c:	ed9f 5a1d 	vldr	s10, [pc, #116]	; dc184 <__kernel_cosf+0xe8>
   dc110:	eddf 5a1d 	vldr	s11, [pc, #116]	; dc188 <__kernel_cosf+0xec>
   dc114:	ed9f 6a1d 	vldr	s12, [pc, #116]	; dc18c <__kernel_cosf+0xf0>
   dc118:	eddf 7a1d 	vldr	s15, [pc, #116]	; dc190 <__kernel_cosf+0xf4>
   dc11c:	eddf 6a1d 	vldr	s13, [pc, #116]	; dc194 <__kernel_cosf+0xf8>
   dc120:	4a1d      	ldr	r2, [pc, #116]	; (dc198 <__kernel_cosf+0xfc>)
   dc122:	eea7 5a24 	vfma.f32	s10, s14, s9
   dc126:	4293      	cmp	r3, r2
   dc128:	eee5 5a07 	vfma.f32	s11, s10, s14
   dc12c:	eea5 6a87 	vfma.f32	s12, s11, s14
   dc130:	eee6 7a07 	vfma.f32	s15, s12, s14
   dc134:	eee7 6a87 	vfma.f32	s13, s15, s14
   dc138:	ee66 6a87 	vmul.f32	s13, s13, s14
   dc13c:	ddd5      	ble.n	dc0ea <__kernel_cosf+0x4e>
   dc13e:	4a17      	ldr	r2, [pc, #92]	; (dc19c <__kernel_cosf+0x100>)
   dc140:	4293      	cmp	r3, r2
   dc142:	dc14      	bgt.n	dc16e <__kernel_cosf+0xd2>
   dc144:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   dc148:	ee07 3a90 	vmov	s15, r3
   dc14c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   dc150:	ee36 6a67 	vsub.f32	s12, s12, s15
   dc154:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   dc158:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   dc15c:	eee7 0a26 	vfma.f32	s1, s14, s13
   dc160:	eed7 7a25 	vfnms.f32	s15, s14, s11
   dc164:	ee77 0ae0 	vsub.f32	s1, s15, s1
   dc168:	ee36 0a60 	vsub.f32	s0, s12, s1
   dc16c:	4770      	bx	lr
   dc16e:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   dc172:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   dc176:	e7ed      	b.n	dc154 <__kernel_cosf+0xb8>
   dc178:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   dc17c:	4770      	bx	lr
   dc17e:	bf00      	nop
   dc180:	ad47d74e 	.word	0xad47d74e
   dc184:	310f74f6 	.word	0x310f74f6
   dc188:	b493f27c 	.word	0xb493f27c
   dc18c:	37d00d01 	.word	0x37d00d01
   dc190:	bab60b61 	.word	0xbab60b61
   dc194:	3d2aaaab 	.word	0x3d2aaaab
   dc198:	3e999999 	.word	0x3e999999
   dc19c:	3f480000 	.word	0x3f480000

000dc1a0 <__kernel_rem_pio2f>:
   dc1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc1a4:	ed2d 8b04 	vpush	{d8-d9}
   dc1a8:	b0db      	sub	sp, #364	; 0x16c
   dc1aa:	4cd7      	ldr	r4, [pc, #860]	; (dc508 <__kernel_rem_pio2f+0x368>)
   dc1ac:	9d68      	ldr	r5, [sp, #416]	; 0x1a0
   dc1ae:	9107      	str	r1, [sp, #28]
   dc1b0:	1d11      	adds	r1, r2, #4
   dc1b2:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   dc1b6:	9304      	str	r3, [sp, #16]
   dc1b8:	9209      	str	r2, [sp, #36]	; 0x24
   dc1ba:	4683      	mov	fp, r0
   dc1bc:	f103 39ff 	add.w	r9, r3, #4294967295
   dc1c0:	f2c0 829d 	blt.w	dc6fe <__kernel_rem_pio2f+0x55e>
   dc1c4:	1ed3      	subs	r3, r2, #3
   dc1c6:	bf44      	itt	mi
   dc1c8:	4613      	movmi	r3, r2
   dc1ca:	3304      	addmi	r3, #4
   dc1cc:	10db      	asrs	r3, r3, #3
   dc1ce:	9303      	str	r3, [sp, #12]
   dc1d0:	3301      	adds	r3, #1
   dc1d2:	00db      	lsls	r3, r3, #3
   dc1d4:	9308      	str	r3, [sp, #32]
   dc1d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   dc1da:	1a9b      	subs	r3, r3, r2
   dc1dc:	9306      	str	r3, [sp, #24]
   dc1de:	9b03      	ldr	r3, [sp, #12]
   dc1e0:	eb16 0109 	adds.w	r1, r6, r9
   dc1e4:	eba3 0309 	sub.w	r3, r3, r9
   dc1e8:	d416      	bmi.n	dc218 <__kernel_rem_pio2f+0x78>
   dc1ea:	3101      	adds	r1, #1
   dc1ec:	ed9f 7ac7 	vldr	s14, [pc, #796]	; dc50c <__kernel_rem_pio2f+0x36c>
   dc1f0:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   dc1f2:	4419      	add	r1, r3
   dc1f4:	aa1e      	add	r2, sp, #120	; 0x78
   dc1f6:	2b00      	cmp	r3, #0
   dc1f8:	bfa4      	itt	ge
   dc1fa:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   dc1fe:	ee07 4a90 	vmovge	s15, r4
   dc202:	f103 0301 	add.w	r3, r3, #1
   dc206:	bfac      	ite	ge
   dc208:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   dc20c:	eef0 7a47 	vmovlt.f32	s15, s14
   dc210:	428b      	cmp	r3, r1
   dc212:	ece2 7a01 	vstmia	r2!, {s15}
   dc216:	d1ee      	bne.n	dc1f6 <__kernel_rem_pio2f+0x56>
   dc218:	2e00      	cmp	r6, #0
   dc21a:	f2c0 82e0 	blt.w	dc7de <__kernel_rem_pio2f+0x63e>
   dc21e:	9b04      	ldr	r3, [sp, #16]
   dc220:	a91e      	add	r1, sp, #120	; 0x78
   dc222:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   dc226:	ad46      	add	r5, sp, #280	; 0x118
   dc228:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   dc22c:	4648      	mov	r0, r9
   dc22e:	18f7      	adds	r7, r6, r3
   dc230:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
   dc234:	f1b9 0f00 	cmp.w	r9, #0
   dc238:	eddf 7ab4 	vldr	s15, [pc, #720]	; dc50c <__kernel_rem_pio2f+0x36c>
   dc23c:	db09      	blt.n	dc252 <__kernel_rem_pio2f+0xb2>
   dc23e:	4622      	mov	r2, r4
   dc240:	465b      	mov	r3, fp
   dc242:	ecf3 6a01 	vldmia	r3!, {s13}
   dc246:	ed32 7a01 	vldmdb	r2!, {s14}
   dc24a:	428b      	cmp	r3, r1
   dc24c:	eee6 7a87 	vfma.f32	s15, s13, s14
   dc250:	d1f7      	bne.n	dc242 <__kernel_rem_pio2f+0xa2>
   dc252:	3001      	adds	r0, #1
   dc254:	42b8      	cmp	r0, r7
   dc256:	ece5 7a01 	vstmia	r5!, {s15}
   dc25a:	f104 0404 	add.w	r4, r4, #4
   dc25e:	d1e9      	bne.n	dc234 <__kernel_rem_pio2f+0x94>
   dc260:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   dc264:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   dc268:	3b08      	subs	r3, #8
   dc26a:	9305      	str	r3, [sp, #20]
   dc26c:	ed9f 9aa9 	vldr	s18, [pc, #676]	; dc514 <__kernel_rem_pio2f+0x374>
   dc270:	eddf 8aa7 	vldr	s17, [pc, #668]	; dc510 <__kernel_rem_pio2f+0x370>
   dc274:	9806      	ldr	r0, [sp, #24]
   dc276:	9600      	str	r6, [sp, #0]
   dc278:	ab09      	add	r3, sp, #36	; 0x24
   dc27a:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
   dc27e:	eb0b 040c 	add.w	r4, fp, ip
   dc282:	af46      	add	r7, sp, #280	; 0x118
   dc284:	465b      	mov	r3, fp
   dc286:	aa5a      	add	r2, sp, #360	; 0x168
   dc288:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   dc28c:	2e00      	cmp	r6, #0
   dc28e:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   dc292:	ea4f 0b86 	mov.w	fp, r6, lsl #2
   dc296:	dd16      	ble.n	dc2c6 <__kernel_rem_pio2f+0x126>
   dc298:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   dc29c:	4641      	mov	r1, r8
   dc29e:	ee60 7a09 	vmul.f32	s15, s0, s18
   dc2a2:	eeb0 7a40 	vmov.f32	s14, s0
   dc2a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   dc2aa:	ed72 6a01 	vldmdb	r2!, {s13}
   dc2ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dc2b2:	42ba      	cmp	r2, r7
   dc2b4:	eea7 7ae8 	vfms.f32	s14, s15, s17
   dc2b8:	ee37 0aa6 	vadd.f32	s0, s15, s13
   dc2bc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   dc2c0:	eca1 7a01 	vstmia	r1!, {s14}
   dc2c4:	d1eb      	bne.n	dc29e <__kernel_rem_pio2f+0xfe>
   dc2c6:	e9cd 0301 	strd	r0, r3, [sp, #4]
   dc2ca:	f000 fb2d 	bl	dc928 <scalbnf>
   dc2ce:	eeb0 8a40 	vmov.f32	s16, s0
   dc2d2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   dc2d6:	ee28 0a00 	vmul.f32	s0, s16, s0
   dc2da:	f000 fadf 	bl	dc89c <floorf>
   dc2de:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   dc2e2:	eea0 8a67 	vfms.f32	s16, s0, s15
   dc2e6:	9801      	ldr	r0, [sp, #4]
   dc2e8:	9b02      	ldr	r3, [sp, #8]
   dc2ea:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   dc2ee:	2800      	cmp	r0, #0
   dc2f0:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   dc2f4:	ee38 8a67 	vsub.f32	s16, s16, s15
   dc2f8:	dd78      	ble.n	dc3ec <__kernel_rem_pio2f+0x24c>
   dc2fa:	f106 3cff 	add.w	ip, r6, #4294967295
   dc2fe:	f1c0 0208 	rsb	r2, r0, #8
   dc302:	f858 502c 	ldr.w	r5, [r8, ip, lsl #2]
   dc306:	fa45 f102 	asr.w	r1, r5, r2
   dc30a:	fa01 f202 	lsl.w	r2, r1, r2
   dc30e:	1aaa      	subs	r2, r5, r2
   dc310:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   dc314:	f1c0 0507 	rsb	r5, r0, #7
   dc318:	ee19 ca90 	vmov	ip, s19
   dc31c:	fa42 f505 	asr.w	r5, r2, r5
   dc320:	448c      	add	ip, r1
   dc322:	2d00      	cmp	r5, #0
   dc324:	ee09 ca90 	vmov	s19, ip
   dc328:	dc68      	bgt.n	dc3fc <__kernel_rem_pio2f+0x25c>
   dc32a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   dc32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc332:	f040 80b6 	bne.w	dc4a2 <__kernel_rem_pio2f+0x302>
   dc336:	9a00      	ldr	r2, [sp, #0]
   dc338:	f106 3eff 	add.w	lr, r6, #4294967295
   dc33c:	4572      	cmp	r2, lr
   dc33e:	dc10      	bgt.n	dc362 <__kernel_rem_pio2f+0x1c2>
   dc340:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
   dc344:	3a01      	subs	r2, #1
   dc346:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   dc34a:	2100      	movs	r1, #0
   dc34c:	469c      	mov	ip, r3
   dc34e:	f852 3904 	ldr.w	r3, [r2], #-4
   dc352:	4552      	cmp	r2, sl
   dc354:	ea41 0103 	orr.w	r1, r1, r3
   dc358:	d1f9      	bne.n	dc34e <__kernel_rem_pio2f+0x1ae>
   dc35a:	4663      	mov	r3, ip
   dc35c:	2900      	cmp	r1, #0
   dc35e:	f040 80f2 	bne.w	dc546 <__kernel_rem_pio2f+0x3a6>
   dc362:	9a00      	ldr	r2, [sp, #0]
   dc364:	3a01      	subs	r2, #1
   dc366:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   dc36a:	2a00      	cmp	r2, #0
   dc36c:	f040 80e6 	bne.w	dc53c <__kernel_rem_pio2f+0x39c>
   dc370:	9a05      	ldr	r2, [sp, #20]
   dc372:	f04f 0c01 	mov.w	ip, #1
   dc376:	f852 1904 	ldr.w	r1, [r2], #-4
   dc37a:	f10c 0c01 	add.w	ip, ip, #1
   dc37e:	2900      	cmp	r1, #0
   dc380:	d0f9      	beq.n	dc376 <__kernel_rem_pio2f+0x1d6>
   dc382:	f106 0b01 	add.w	fp, r6, #1
   dc386:	44b4      	add	ip, r6
   dc388:	46de      	mov	lr, fp
   dc38a:	9904      	ldr	r1, [sp, #16]
   dc38c:	9a03      	ldr	r2, [sp, #12]
   dc38e:	198d      	adds	r5, r1, r6
   dc390:	445a      	add	r2, fp
   dc392:	a91e      	add	r1, sp, #120	; 0x78
   dc394:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   dc398:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   dc39c:	9969      	ldr	r1, [sp, #420]	; 0x1a4
   dc39e:	3a01      	subs	r2, #1
   dc3a0:	eb01 0682 	add.w	r6, r1, r2, lsl #2
   dc3a4:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
   dc3a8:	edd6 7a01 	vldr	s15, [r6, #4]
   dc3ac:	ed9f 7a57 	vldr	s14, [pc, #348]	; dc50c <__kernel_rem_pio2f+0x36c>
   dc3b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dc3b4:	f1b9 0f00 	cmp.w	r9, #0
   dc3b8:	f106 0604 	add.w	r6, r6, #4
   dc3bc:	4629      	mov	r1, r5
   dc3be:	edc5 7a00 	vstr	s15, [r5]
   dc3c2:	f105 0504 	add.w	r5, r5, #4
   dc3c6:	db09      	blt.n	dc3dc <__kernel_rem_pio2f+0x23c>
   dc3c8:	461a      	mov	r2, r3
   dc3ca:	e001      	b.n	dc3d0 <__kernel_rem_pio2f+0x230>
   dc3cc:	ed71 7a01 	vldmdb	r1!, {s15}
   dc3d0:	ecf2 6a01 	vldmia	r2!, {s13}
   dc3d4:	42a2      	cmp	r2, r4
   dc3d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
   dc3da:	d1f7      	bne.n	dc3cc <__kernel_rem_pio2f+0x22c>
   dc3dc:	f10e 0e01 	add.w	lr, lr, #1
   dc3e0:	45e6      	cmp	lr, ip
   dc3e2:	ecab 7a01 	vstmia	fp!, {s14}
   dc3e6:	dddf      	ble.n	dc3a8 <__kernel_rem_pio2f+0x208>
   dc3e8:	4666      	mov	r6, ip
   dc3ea:	e74c      	b.n	dc286 <__kernel_rem_pio2f+0xe6>
   dc3ec:	f040 809c 	bne.w	dc528 <__kernel_rem_pio2f+0x388>
   dc3f0:	1e72      	subs	r2, r6, #1
   dc3f2:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
   dc3f6:	122d      	asrs	r5, r5, #8
   dc3f8:	2d00      	cmp	r5, #0
   dc3fa:	dd96      	ble.n	dc32a <__kernel_rem_pio2f+0x18a>
   dc3fc:	ee19 2a90 	vmov	r2, s19
   dc400:	2e00      	cmp	r6, #0
   dc402:	f102 0201 	add.w	r2, r2, #1
   dc406:	ee09 2a90 	vmov	s19, r2
   dc40a:	f340 818e 	ble.w	dc72a <__kernel_rem_pio2f+0x58a>
   dc40e:	f8d8 1000 	ldr.w	r1, [r8]
   dc412:	2900      	cmp	r1, #0
   dc414:	d174      	bne.n	dc500 <__kernel_rem_pio2f+0x360>
   dc416:	2e01      	cmp	r6, #1
   dc418:	d01c      	beq.n	dc454 <__kernel_rem_pio2f+0x2b4>
   dc41a:	4642      	mov	r2, r8
   dc41c:	f04f 0c01 	mov.w	ip, #1
   dc420:	f852 1f04 	ldr.w	r1, [r2, #4]!
   dc424:	2900      	cmp	r1, #0
   dc426:	d079      	beq.n	dc51c <__kernel_rem_pio2f+0x37c>
   dc428:	f10c 0201 	add.w	r2, ip, #1
   dc42c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   dc430:	4296      	cmp	r6, r2
   dc432:	f848 102c 	str.w	r1, [r8, ip, lsl #2]
   dc436:	dd0c      	ble.n	dc452 <__kernel_rem_pio2f+0x2b2>
   dc438:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   dc43c:	44c3      	add	fp, r8
   dc43e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   dc442:	e000      	b.n	dc446 <__kernel_rem_pio2f+0x2a6>
   dc444:	6811      	ldr	r1, [r2, #0]
   dc446:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   dc44a:	f842 1b04 	str.w	r1, [r2], #4
   dc44e:	455a      	cmp	r2, fp
   dc450:	d1f8      	bne.n	dc444 <__kernel_rem_pio2f+0x2a4>
   dc452:	2101      	movs	r1, #1
   dc454:	2800      	cmp	r0, #0
   dc456:	dd0c      	ble.n	dc472 <__kernel_rem_pio2f+0x2d2>
   dc458:	2801      	cmp	r0, #1
   dc45a:	f000 8147 	beq.w	dc6ec <__kernel_rem_pio2f+0x54c>
   dc45e:	2802      	cmp	r0, #2
   dc460:	d107      	bne.n	dc472 <__kernel_rem_pio2f+0x2d2>
   dc462:	f106 3cff 	add.w	ip, r6, #4294967295
   dc466:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   dc46a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   dc46e:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   dc472:	2d02      	cmp	r5, #2
   dc474:	f47f af59 	bne.w	dc32a <__kernel_rem_pio2f+0x18a>
   dc478:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   dc47c:	ee30 8a48 	vsub.f32	s16, s0, s16
   dc480:	2900      	cmp	r1, #0
   dc482:	f43f af52 	beq.w	dc32a <__kernel_rem_pio2f+0x18a>
   dc486:	e9cd 0301 	strd	r0, r3, [sp, #4]
   dc48a:	f000 fa4d 	bl	dc928 <scalbnf>
   dc48e:	ee38 8a40 	vsub.f32	s16, s16, s0
   dc492:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
   dc496:	eeb5 8a40 	vcmp.f32	s16, #0.0
   dc49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc49e:	f43f af4a 	beq.w	dc336 <__kernel_rem_pio2f+0x196>
   dc4a2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   dc4a6:	eeb0 0a48 	vmov.f32	s0, s16
   dc4aa:	1a98      	subs	r0, r3, r2
   dc4ac:	9602      	str	r6, [sp, #8]
   dc4ae:	9501      	str	r5, [sp, #4]
   dc4b0:	9e00      	ldr	r6, [sp, #0]
   dc4b2:	f000 fa39 	bl	dc928 <scalbnf>
   dc4b6:	ed9f 7a16 	vldr	s14, [pc, #88]	; dc510 <__kernel_rem_pio2f+0x370>
   dc4ba:	eeb4 0ac7 	vcmpe.f32	s0, s14
   dc4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc4c2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   dc4c6:	f2c0 8157 	blt.w	dc778 <__kernel_rem_pio2f+0x5d8>
   dc4ca:	eddf 7a12 	vldr	s15, [pc, #72]	; dc514 <__kernel_rem_pio2f+0x374>
   dc4ce:	9906      	ldr	r1, [sp, #24]
   dc4d0:	ee60 7a27 	vmul.f32	s15, s0, s15
   dc4d4:	3108      	adds	r1, #8
   dc4d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   dc4da:	9106      	str	r1, [sp, #24]
   dc4dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dc4e0:	1c5d      	adds	r5, r3, #1
   dc4e2:	eea7 0ac7 	vfms.f32	s0, s15, s14
   dc4e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   dc4ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   dc4ee:	ee10 1a10 	vmov	r1, s0
   dc4f2:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   dc4f6:	ee17 3a90 	vmov	r3, s15
   dc4fa:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
   dc4fe:	e039      	b.n	dc574 <__kernel_rem_pio2f+0x3d4>
   dc500:	2201      	movs	r2, #1
   dc502:	f04f 0c00 	mov.w	ip, #0
   dc506:	e791      	b.n	dc42c <__kernel_rem_pio2f+0x28c>
   dc508:	000dff70 	.word	0x000dff70
   dc50c:	00000000 	.word	0x00000000
   dc510:	43800000 	.word	0x43800000
   dc514:	3b800000 	.word	0x3b800000
   dc518:	3fc90000 	.word	0x3fc90000
   dc51c:	f10c 0c01 	add.w	ip, ip, #1
   dc520:	45b4      	cmp	ip, r6
   dc522:	f47f af7d 	bne.w	dc420 <__kernel_rem_pio2f+0x280>
   dc526:	e795      	b.n	dc454 <__kernel_rem_pio2f+0x2b4>
   dc528:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   dc52c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   dc530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc534:	f280 80e8 	bge.w	dc708 <__kernel_rem_pio2f+0x568>
   dc538:	2500      	movs	r5, #0
   dc53a:	e6f6      	b.n	dc32a <__kernel_rem_pio2f+0x18a>
   dc53c:	f106 0b01 	add.w	fp, r6, #1
   dc540:	46de      	mov	lr, fp
   dc542:	46dc      	mov	ip, fp
   dc544:	e721      	b.n	dc38a <__kernel_rem_pio2f+0x1ea>
   dc546:	9806      	ldr	r0, [sp, #24]
   dc548:	f858 102e 	ldr.w	r1, [r8, lr, lsl #2]
   dc54c:	3808      	subs	r0, #8
   dc54e:	4633      	mov	r3, r6
   dc550:	462a      	mov	r2, r5
   dc552:	9e00      	ldr	r6, [sp, #0]
   dc554:	9006      	str	r0, [sp, #24]
   dc556:	4675      	mov	r5, lr
   dc558:	b961      	cbnz	r1, dc574 <__kernel_rem_pio2f+0x3d4>
   dc55a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   dc55e:	3b02      	subs	r3, #2
   dc560:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   dc564:	4601      	mov	r1, r0
   dc566:	f853 0904 	ldr.w	r0, [r3], #-4
   dc56a:	3d01      	subs	r5, #1
   dc56c:	3908      	subs	r1, #8
   dc56e:	2800      	cmp	r0, #0
   dc570:	d0f9      	beq.n	dc566 <__kernel_rem_pio2f+0x3c6>
   dc572:	9106      	str	r1, [sp, #24]
   dc574:	9806      	ldr	r0, [sp, #24]
   dc576:	9200      	str	r2, [sp, #0]
   dc578:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   dc57c:	f000 f9d4 	bl	dc928 <scalbnf>
   dc580:	2d00      	cmp	r5, #0
   dc582:	9a00      	ldr	r2, [sp, #0]
   dc584:	f2c0 811e 	blt.w	dc7c4 <__kernel_rem_pio2f+0x624>
   dc588:	ea4f 0e85 	mov.w	lr, r5, lsl #2
   dc58c:	ab46      	add	r3, sp, #280	; 0x118
   dc58e:	eb03 070e 	add.w	r7, r3, lr
   dc592:	f10e 0c04 	add.w	ip, lr, #4
   dc596:	ed1f 7a21 	vldr	s14, [pc, #-132]	; dc514 <__kernel_rem_pio2f+0x374>
   dc59a:	eb08 030c 	add.w	r3, r8, ip
   dc59e:	1d39      	adds	r1, r7, #4
   dc5a0:	ed73 7a01 	vldmdb	r3!, {s15}
   dc5a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dc5a8:	4543      	cmp	r3, r8
   dc5aa:	ee67 7a80 	vmul.f32	s15, s15, s0
   dc5ae:	ee20 0a07 	vmul.f32	s0, s0, s14
   dc5b2:	ed61 7a01 	vstmdb	r1!, {s15}
   dc5b6:	d1f3      	bne.n	dc5a0 <__kernel_rem_pio2f+0x400>
   dc5b8:	2e00      	cmp	r6, #0
   dc5ba:	ed1f 6a29 	vldr	s12, [pc, #-164]	; dc518 <__kernel_rem_pio2f+0x378>
   dc5be:	f04f 0400 	mov.w	r4, #0
   dc5c2:	db20      	blt.n	dc606 <__kernel_rem_pio2f+0x466>
   dc5c4:	488f      	ldr	r0, [pc, #572]	; (dc804 <__kernel_rem_pio2f+0x664>)
   dc5c6:	eddf 7a90 	vldr	s15, [pc, #576]	; dc808 <__kernel_rem_pio2f+0x668>
   dc5ca:	4639      	mov	r1, r7
   dc5cc:	eeb0 7a46 	vmov.f32	s14, s12
   dc5d0:	2300      	movs	r3, #0
   dc5d2:	e003      	b.n	dc5dc <__kernel_rem_pio2f+0x43c>
   dc5d4:	429c      	cmp	r4, r3
   dc5d6:	db08      	blt.n	dc5ea <__kernel_rem_pio2f+0x44a>
   dc5d8:	ecb0 7a01 	vldmia	r0!, {s14}
   dc5dc:	ecf1 6a01 	vldmia	r1!, {s13}
   dc5e0:	3301      	adds	r3, #1
   dc5e2:	429e      	cmp	r6, r3
   dc5e4:	eee6 7a87 	vfma.f32	s15, s13, s14
   dc5e8:	daf4      	bge.n	dc5d4 <__kernel_rem_pio2f+0x434>
   dc5ea:	ab5a      	add	r3, sp, #360	; 0x168
   dc5ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   dc5f0:	42a5      	cmp	r5, r4
   dc5f2:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   dc5f6:	f1a7 0704 	sub.w	r7, r7, #4
   dc5fa:	f104 0301 	add.w	r3, r4, #1
   dc5fe:	d005      	beq.n	dc60c <__kernel_rem_pio2f+0x46c>
   dc600:	2e00      	cmp	r6, #0
   dc602:	461c      	mov	r4, r3
   dc604:	dade      	bge.n	dc5c4 <__kernel_rem_pio2f+0x424>
   dc606:	eddf 7a80 	vldr	s15, [pc, #512]	; dc808 <__kernel_rem_pio2f+0x668>
   dc60a:	e7ee      	b.n	dc5ea <__kernel_rem_pio2f+0x44a>
   dc60c:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   dc60e:	2902      	cmp	r1, #2
   dc610:	dc1c      	bgt.n	dc64c <__kernel_rem_pio2f+0x4ac>
   dc612:	2900      	cmp	r1, #0
   dc614:	f300 808b 	bgt.w	dc72e <__kernel_rem_pio2f+0x58e>
   dc618:	d10f      	bne.n	dc63a <__kernel_rem_pio2f+0x49a>
   dc61a:	ab32      	add	r3, sp, #200	; 0xc8
   dc61c:	eddf 7a7a 	vldr	s15, [pc, #488]	; dc808 <__kernel_rem_pio2f+0x668>
   dc620:	449c      	add	ip, r3
   dc622:	ed3c 7a01 	vldmdb	ip!, {s14}
   dc626:	4563      	cmp	r3, ip
   dc628:	ee77 7a87 	vadd.f32	s15, s15, s14
   dc62c:	d1f9      	bne.n	dc622 <__kernel_rem_pio2f+0x482>
   dc62e:	b10a      	cbz	r2, dc634 <__kernel_rem_pio2f+0x494>
   dc630:	eef1 7a67 	vneg.f32	s15, s15
   dc634:	9b07      	ldr	r3, [sp, #28]
   dc636:	edc3 7a00 	vstr	s15, [r3]
   dc63a:	ee19 3a90 	vmov	r3, s19
   dc63e:	f003 0007 	and.w	r0, r3, #7
   dc642:	b05b      	add	sp, #364	; 0x16c
   dc644:	ecbd 8b04 	vpop	{d8-d9}
   dc648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc64c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   dc64e:	2b03      	cmp	r3, #3
   dc650:	d1f3      	bne.n	dc63a <__kernel_rem_pio2f+0x49a>
   dc652:	2d00      	cmp	r5, #0
   dc654:	f000 80cb 	beq.w	dc7ee <__kernel_rem_pio2f+0x64e>
   dc658:	ab5a      	add	r3, sp, #360	; 0x168
   dc65a:	4473      	add	r3, lr
   dc65c:	a932      	add	r1, sp, #200	; 0xc8
   dc65e:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   dc662:	eb01 0385 	add.w	r3, r1, r5, lsl #2
   dc666:	ed73 7a01 	vldmdb	r3!, {s15}
   dc66a:	eef0 6a47 	vmov.f32	s13, s14
   dc66e:	ee37 7a27 	vadd.f32	s14, s14, s15
   dc672:	4299      	cmp	r1, r3
   dc674:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dc678:	ed83 7a00 	vstr	s14, [r3]
   dc67c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   dc680:	edc3 7a01 	vstr	s15, [r3, #4]
   dc684:	d1ef      	bne.n	dc666 <__kernel_rem_pio2f+0x4c6>
   dc686:	2d01      	cmp	r5, #1
   dc688:	f340 80b1 	ble.w	dc7ee <__kernel_rem_pio2f+0x64e>
   dc68c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   dc690:	ab5a      	add	r3, sp, #360	; 0x168
   dc692:	3d01      	subs	r5, #1
   dc694:	449e      	add	lr, r3
   dc696:	00ad      	lsls	r5, r5, #2
   dc698:	1d2b      	adds	r3, r5, #4
   dc69a:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   dc69e:	440b      	add	r3, r1
   dc6a0:	a833      	add	r0, sp, #204	; 0xcc
   dc6a2:	ed73 7a01 	vldmdb	r3!, {s15}
   dc6a6:	eef0 6a47 	vmov.f32	s13, s14
   dc6aa:	ee37 7a27 	vadd.f32	s14, s14, s15
   dc6ae:	4298      	cmp	r0, r3
   dc6b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   dc6b4:	ed83 7a00 	vstr	s14, [r3]
   dc6b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
   dc6bc:	edc3 7a01 	vstr	s15, [r3, #4]
   dc6c0:	d1ef      	bne.n	dc6a2 <__kernel_rem_pio2f+0x502>
   dc6c2:	3508      	adds	r5, #8
   dc6c4:	eddf 7a50 	vldr	s15, [pc, #320]	; dc808 <__kernel_rem_pio2f+0x668>
   dc6c8:	194b      	adds	r3, r1, r5
   dc6ca:	3108      	adds	r1, #8
   dc6cc:	ed33 7a01 	vldmdb	r3!, {s14}
   dc6d0:	4299      	cmp	r1, r3
   dc6d2:	ee77 7a87 	vadd.f32	s15, s15, s14
   dc6d6:	d1f9      	bne.n	dc6cc <__kernel_rem_pio2f+0x52c>
   dc6d8:	2a00      	cmp	r2, #0
   dc6da:	d155      	bne.n	dc788 <__kernel_rem_pio2f+0x5e8>
   dc6dc:	9907      	ldr	r1, [sp, #28]
   dc6de:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   dc6e0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   dc6e2:	edc1 7a02 	vstr	s15, [r1, #8]
   dc6e6:	600a      	str	r2, [r1, #0]
   dc6e8:	604b      	str	r3, [r1, #4]
   dc6ea:	e7a6      	b.n	dc63a <__kernel_rem_pio2f+0x49a>
   dc6ec:	f106 3cff 	add.w	ip, r6, #4294967295
   dc6f0:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
   dc6f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   dc6f8:	f848 202c 	str.w	r2, [r8, ip, lsl #2]
   dc6fc:	e6b9      	b.n	dc472 <__kernel_rem_pio2f+0x2d2>
   dc6fe:	2308      	movs	r3, #8
   dc700:	9308      	str	r3, [sp, #32]
   dc702:	2300      	movs	r3, #0
   dc704:	9303      	str	r3, [sp, #12]
   dc706:	e566      	b.n	dc1d6 <__kernel_rem_pio2f+0x36>
   dc708:	ee19 2a90 	vmov	r2, s19
   dc70c:	2e00      	cmp	r6, #0
   dc70e:	f102 0201 	add.w	r2, r2, #1
   dc712:	ee09 2a90 	vmov	s19, r2
   dc716:	bfc8      	it	gt
   dc718:	2502      	movgt	r5, #2
   dc71a:	f73f ae78 	bgt.w	dc40e <__kernel_rem_pio2f+0x26e>
   dc71e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   dc722:	ee37 8ac8 	vsub.f32	s16, s15, s16
   dc726:	2502      	movs	r5, #2
   dc728:	e5ff      	b.n	dc32a <__kernel_rem_pio2f+0x18a>
   dc72a:	2100      	movs	r1, #0
   dc72c:	e692      	b.n	dc454 <__kernel_rem_pio2f+0x2b4>
   dc72e:	a932      	add	r1, sp, #200	; 0xc8
   dc730:	eddf 7a35 	vldr	s15, [pc, #212]	; dc808 <__kernel_rem_pio2f+0x668>
   dc734:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dc738:	ed33 7a01 	vldmdb	r3!, {s14}
   dc73c:	4299      	cmp	r1, r3
   dc73e:	ee77 7a87 	vadd.f32	s15, s15, s14
   dc742:	d1f9      	bne.n	dc738 <__kernel_rem_pio2f+0x598>
   dc744:	bb92      	cbnz	r2, dc7ac <__kernel_rem_pio2f+0x60c>
   dc746:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   dc74a:	9b07      	ldr	r3, [sp, #28]
   dc74c:	2d00      	cmp	r5, #0
   dc74e:	edc3 7a00 	vstr	s15, [r3]
   dc752:	ee77 7a67 	vsub.f32	s15, s14, s15
   dc756:	dd0b      	ble.n	dc770 <__kernel_rem_pio2f+0x5d0>
   dc758:	a933      	add	r1, sp, #204	; 0xcc
   dc75a:	2301      	movs	r3, #1
   dc75c:	ecb1 7a01 	vldmia	r1!, {s14}
   dc760:	3301      	adds	r3, #1
   dc762:	429d      	cmp	r5, r3
   dc764:	ee77 7a87 	vadd.f32	s15, s15, s14
   dc768:	daf8      	bge.n	dc75c <__kernel_rem_pio2f+0x5bc>
   dc76a:	b10a      	cbz	r2, dc770 <__kernel_rem_pio2f+0x5d0>
   dc76c:	eef1 7a67 	vneg.f32	s15, s15
   dc770:	9b07      	ldr	r3, [sp, #28]
   dc772:	edc3 7a01 	vstr	s15, [r3, #4]
   dc776:	e760      	b.n	dc63a <__kernel_rem_pio2f+0x49a>
   dc778:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   dc77c:	461d      	mov	r5, r3
   dc77e:	ee10 1a10 	vmov	r1, s0
   dc782:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
   dc786:	e6f5      	b.n	dc574 <__kernel_rem_pio2f+0x3d4>
   dc788:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   dc78c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   dc790:	9b07      	ldr	r3, [sp, #28]
   dc792:	eef1 7a67 	vneg.f32	s15, s15
   dc796:	eef1 6a66 	vneg.f32	s13, s13
   dc79a:	eeb1 7a47 	vneg.f32	s14, s14
   dc79e:	edc3 7a02 	vstr	s15, [r3, #8]
   dc7a2:	edc3 6a00 	vstr	s13, [r3]
   dc7a6:	ed83 7a01 	vstr	s14, [r3, #4]
   dc7aa:	e746      	b.n	dc63a <__kernel_rem_pio2f+0x49a>
   dc7ac:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   dc7b0:	9b07      	ldr	r3, [sp, #28]
   dc7b2:	eeb1 7a67 	vneg.f32	s14, s15
   dc7b6:	2d00      	cmp	r5, #0
   dc7b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
   dc7bc:	ed83 7a00 	vstr	s14, [r3]
   dc7c0:	dcca      	bgt.n	dc758 <__kernel_rem_pio2f+0x5b8>
   dc7c2:	e7d3      	b.n	dc76c <__kernel_rem_pio2f+0x5cc>
   dc7c4:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   dc7c6:	2b02      	cmp	r3, #2
   dc7c8:	dc0d      	bgt.n	dc7e6 <__kernel_rem_pio2f+0x646>
   dc7ca:	2b00      	cmp	r3, #0
   dc7cc:	dc14      	bgt.n	dc7f8 <__kernel_rem_pio2f+0x658>
   dc7ce:	f47f af34 	bne.w	dc63a <__kernel_rem_pio2f+0x49a>
   dc7d2:	eddf 7a0d 	vldr	s15, [pc, #52]	; dc808 <__kernel_rem_pio2f+0x668>
   dc7d6:	2a00      	cmp	r2, #0
   dc7d8:	f43f af2c 	beq.w	dc634 <__kernel_rem_pio2f+0x494>
   dc7dc:	e728      	b.n	dc630 <__kernel_rem_pio2f+0x490>
   dc7de:	9b04      	ldr	r3, [sp, #16]
   dc7e0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   dc7e4:	e53c      	b.n	dc260 <__kernel_rem_pio2f+0xc0>
   dc7e6:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   dc7e8:	2b03      	cmp	r3, #3
   dc7ea:	f47f af26 	bne.w	dc63a <__kernel_rem_pio2f+0x49a>
   dc7ee:	eddf 7a06 	vldr	s15, [pc, #24]	; dc808 <__kernel_rem_pio2f+0x668>
   dc7f2:	2a00      	cmp	r2, #0
   dc7f4:	d1c8      	bne.n	dc788 <__kernel_rem_pio2f+0x5e8>
   dc7f6:	e771      	b.n	dc6dc <__kernel_rem_pio2f+0x53c>
   dc7f8:	eddf 7a03 	vldr	s15, [pc, #12]	; dc808 <__kernel_rem_pio2f+0x668>
   dc7fc:	2a00      	cmp	r2, #0
   dc7fe:	d0a2      	beq.n	dc746 <__kernel_rem_pio2f+0x5a6>
   dc800:	e7d4      	b.n	dc7ac <__kernel_rem_pio2f+0x60c>
   dc802:	bf00      	nop
   dc804:	000dff48 	.word	0x000dff48
   dc808:	00000000 	.word	0x00000000

000dc80c <__kernel_sinf>:
   dc80c:	ee10 3a10 	vmov	r3, s0
   dc810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dc814:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   dc818:	da04      	bge.n	dc824 <__kernel_sinf+0x18>
   dc81a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   dc81e:	ee17 3a90 	vmov	r3, s15
   dc822:	b35b      	cbz	r3, dc87c <__kernel_sinf+0x70>
   dc824:	ee60 7a00 	vmul.f32	s15, s0, s0
   dc828:	ed9f 5a15 	vldr	s10, [pc, #84]	; dc880 <__kernel_sinf+0x74>
   dc82c:	eddf 5a15 	vldr	s11, [pc, #84]	; dc884 <__kernel_sinf+0x78>
   dc830:	ed9f 6a15 	vldr	s12, [pc, #84]	; dc888 <__kernel_sinf+0x7c>
   dc834:	eddf 6a15 	vldr	s13, [pc, #84]	; dc88c <__kernel_sinf+0x80>
   dc838:	ed9f 7a15 	vldr	s14, [pc, #84]	; dc890 <__kernel_sinf+0x84>
   dc83c:	eee7 5a85 	vfma.f32	s11, s15, s10
   dc840:	ee20 5a27 	vmul.f32	s10, s0, s15
   dc844:	eea5 6aa7 	vfma.f32	s12, s11, s15
   dc848:	eee6 6a27 	vfma.f32	s13, s12, s15
   dc84c:	eea6 7aa7 	vfma.f32	s14, s13, s15
   dc850:	b930      	cbnz	r0, dc860 <__kernel_sinf+0x54>
   dc852:	eddf 6a10 	vldr	s13, [pc, #64]	; dc894 <__kernel_sinf+0x88>
   dc856:	eee7 6a87 	vfma.f32	s13, s15, s14
   dc85a:	eea6 0a85 	vfma.f32	s0, s13, s10
   dc85e:	4770      	bx	lr
   dc860:	ee27 7a45 	vnmul.f32	s14, s14, s10
   dc864:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   dc868:	eea0 7aa6 	vfma.f32	s14, s1, s13
   dc86c:	eddf 6a0a 	vldr	s13, [pc, #40]	; dc898 <__kernel_sinf+0x8c>
   dc870:	eed7 0a27 	vfnms.f32	s1, s14, s15
   dc874:	eee5 0a26 	vfma.f32	s1, s10, s13
   dc878:	ee30 0a60 	vsub.f32	s0, s0, s1
   dc87c:	4770      	bx	lr
   dc87e:	bf00      	nop
   dc880:	2f2ec9d3 	.word	0x2f2ec9d3
   dc884:	b2d72f34 	.word	0xb2d72f34
   dc888:	3638ef1b 	.word	0x3638ef1b
   dc88c:	b9500d01 	.word	0xb9500d01
   dc890:	3c088889 	.word	0x3c088889
   dc894:	be2aaaab 	.word	0xbe2aaaab
   dc898:	3e2aaaab 	.word	0x3e2aaaab

000dc89c <floorf>:
   dc89c:	ee10 2a10 	vmov	r2, s0
   dc8a0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   dc8a4:	3b7f      	subs	r3, #127	; 0x7f
   dc8a6:	2b16      	cmp	r3, #22
   dc8a8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   dc8ac:	dc1a      	bgt.n	dc8e4 <floorf+0x48>
   dc8ae:	2b00      	cmp	r3, #0
   dc8b0:	db1e      	blt.n	dc8f0 <floorf+0x54>
   dc8b2:	491a      	ldr	r1, [pc, #104]	; (dc91c <floorf+0x80>)
   dc8b4:	4119      	asrs	r1, r3
   dc8b6:	420a      	tst	r2, r1
   dc8b8:	d027      	beq.n	dc90a <floorf+0x6e>
   dc8ba:	eddf 7a19 	vldr	s15, [pc, #100]	; dc920 <floorf+0x84>
   dc8be:	ee70 7a27 	vadd.f32	s15, s0, s15
   dc8c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc8ca:	dd1e      	ble.n	dc90a <floorf+0x6e>
   dc8cc:	2a00      	cmp	r2, #0
   dc8ce:	da04      	bge.n	dc8da <floorf+0x3e>
   dc8d0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   dc8d4:	fa40 f303 	asr.w	r3, r0, r3
   dc8d8:	441a      	add	r2, r3
   dc8da:	ea22 0301 	bic.w	r3, r2, r1
   dc8de:	ee00 3a10 	vmov	s0, r3
   dc8e2:	4770      	bx	lr
   dc8e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   dc8e8:	d30f      	bcc.n	dc90a <floorf+0x6e>
   dc8ea:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc8ee:	4770      	bx	lr
   dc8f0:	eddf 7a0b 	vldr	s15, [pc, #44]	; dc920 <floorf+0x84>
   dc8f4:	ee70 7a27 	vadd.f32	s15, s0, s15
   dc8f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc900:	dd03      	ble.n	dc90a <floorf+0x6e>
   dc902:	2a00      	cmp	r2, #0
   dc904:	db02      	blt.n	dc90c <floorf+0x70>
   dc906:	ed9f 0a07 	vldr	s0, [pc, #28]	; dc924 <floorf+0x88>
   dc90a:	4770      	bx	lr
   dc90c:	2900      	cmp	r1, #0
   dc90e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   dc912:	bf18      	it	ne
   dc914:	eeb0 0a67 	vmovne.f32	s0, s15
   dc918:	4770      	bx	lr
   dc91a:	bf00      	nop
   dc91c:	007fffff 	.word	0x007fffff
   dc920:	7149f2ca 	.word	0x7149f2ca
   dc924:	00000000 	.word	0x00000000

000dc928 <scalbnf>:
   dc928:	b082      	sub	sp, #8
   dc92a:	ed8d 0a01 	vstr	s0, [sp, #4]
   dc92e:	9b01      	ldr	r3, [sp, #4]
   dc930:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   dc934:	d02a      	beq.n	dc98c <scalbnf+0x64>
   dc936:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   dc93a:	d223      	bcs.n	dc984 <scalbnf+0x5c>
   dc93c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   dc940:	d128      	bne.n	dc994 <scalbnf+0x6c>
   dc942:	ed9d 7a01 	vldr	s14, [sp, #4]
   dc946:	eddf 7a2a 	vldr	s15, [pc, #168]	; dc9f0 <scalbnf+0xc8>
   dc94a:	4b2a      	ldr	r3, [pc, #168]	; (dc9f4 <scalbnf+0xcc>)
   dc94c:	ee67 7a27 	vmul.f32	s15, s14, s15
   dc950:	4298      	cmp	r0, r3
   dc952:	edcd 7a01 	vstr	s15, [sp, #4]
   dc956:	db37      	blt.n	dc9c8 <scalbnf+0xa0>
   dc958:	9b01      	ldr	r3, [sp, #4]
   dc95a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   dc95e:	3a19      	subs	r2, #25
   dc960:	4402      	add	r2, r0
   dc962:	2afe      	cmp	r2, #254	; 0xfe
   dc964:	dd1a      	ble.n	dc99c <scalbnf+0x74>
   dc966:	ed9f 0a24 	vldr	s0, [pc, #144]	; dc9f8 <scalbnf+0xd0>
   dc96a:	ed9f 7a24 	vldr	s14, [pc, #144]	; dc9fc <scalbnf+0xd4>
   dc96e:	9b01      	ldr	r3, [sp, #4]
   dc970:	2b00      	cmp	r3, #0
   dc972:	eef0 7a40 	vmov.f32	s15, s0
   dc976:	bfb8      	it	lt
   dc978:	eeb0 0a47 	vmovlt.f32	s0, s14
   dc97c:	ee20 0a27 	vmul.f32	s0, s0, s15
   dc980:	b002      	add	sp, #8
   dc982:	4770      	bx	lr
   dc984:	ee30 0a00 	vadd.f32	s0, s0, s0
   dc988:	b002      	add	sp, #8
   dc98a:	4770      	bx	lr
   dc98c:	ed9d 0a01 	vldr	s0, [sp, #4]
   dc990:	b002      	add	sp, #8
   dc992:	4770      	bx	lr
   dc994:	0dd2      	lsrs	r2, r2, #23
   dc996:	4402      	add	r2, r0
   dc998:	2afe      	cmp	r2, #254	; 0xfe
   dc99a:	dce4      	bgt.n	dc966 <scalbnf+0x3e>
   dc99c:	2a00      	cmp	r2, #0
   dc99e:	dc0b      	bgt.n	dc9b8 <scalbnf+0x90>
   dc9a0:	f112 0f16 	cmn.w	r2, #22
   dc9a4:	da17      	bge.n	dc9d6 <scalbnf+0xae>
   dc9a6:	f24c 3350 	movw	r3, #50000	; 0xc350
   dc9aa:	4298      	cmp	r0, r3
   dc9ac:	dcdb      	bgt.n	dc966 <scalbnf+0x3e>
   dc9ae:	ed9f 0a14 	vldr	s0, [pc, #80]	; dca00 <scalbnf+0xd8>
   dc9b2:	ed9f 7a14 	vldr	s14, [pc, #80]	; dca04 <scalbnf+0xdc>
   dc9b6:	e7da      	b.n	dc96e <scalbnf+0x46>
   dc9b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dc9bc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dc9c0:	ee00 3a10 	vmov	s0, r3
   dc9c4:	b002      	add	sp, #8
   dc9c6:	4770      	bx	lr
   dc9c8:	ed9f 0a0d 	vldr	s0, [pc, #52]	; dca00 <scalbnf+0xd8>
   dc9cc:	eddd 7a01 	vldr	s15, [sp, #4]
   dc9d0:	ee27 0a80 	vmul.f32	s0, s15, s0
   dc9d4:	e7d8      	b.n	dc988 <scalbnf+0x60>
   dc9d6:	3219      	adds	r2, #25
   dc9d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   dc9dc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   dc9e0:	eddf 7a09 	vldr	s15, [pc, #36]	; dca08 <scalbnf+0xe0>
   dc9e4:	ee07 3a10 	vmov	s14, r3
   dc9e8:	ee27 0a27 	vmul.f32	s0, s14, s15
   dc9ec:	e7cc      	b.n	dc988 <scalbnf+0x60>
   dc9ee:	bf00      	nop
   dc9f0:	4c000000 	.word	0x4c000000
   dc9f4:	ffff3cb0 	.word	0xffff3cb0
   dc9f8:	7149f2ca 	.word	0x7149f2ca
   dc9fc:	f149f2ca 	.word	0xf149f2ca
   dca00:	0da24260 	.word	0x0da24260
   dca04:	8da24260 	.word	0x8da24260
   dca08:	33000000 	.word	0x33000000

000dca0c <__aeabi_drsub>:
   dca0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dca10:	e002      	b.n	dca18 <__adddf3>
   dca12:	bf00      	nop

000dca14 <__aeabi_dsub>:
   dca14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dca18 <__adddf3>:
   dca18:	b530      	push	{r4, r5, lr}
   dca1a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dca1e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dca22:	ea94 0f05 	teq	r4, r5
   dca26:	bf08      	it	eq
   dca28:	ea90 0f02 	teqeq	r0, r2
   dca2c:	bf1f      	itttt	ne
   dca2e:	ea54 0c00 	orrsne.w	ip, r4, r0
   dca32:	ea55 0c02 	orrsne.w	ip, r5, r2
   dca36:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dca3a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dca3e:	f000 80e2 	beq.w	dcc06 <__adddf3+0x1ee>
   dca42:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dca46:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dca4a:	bfb8      	it	lt
   dca4c:	426d      	neglt	r5, r5
   dca4e:	dd0c      	ble.n	dca6a <__adddf3+0x52>
   dca50:	442c      	add	r4, r5
   dca52:	ea80 0202 	eor.w	r2, r0, r2
   dca56:	ea81 0303 	eor.w	r3, r1, r3
   dca5a:	ea82 0000 	eor.w	r0, r2, r0
   dca5e:	ea83 0101 	eor.w	r1, r3, r1
   dca62:	ea80 0202 	eor.w	r2, r0, r2
   dca66:	ea81 0303 	eor.w	r3, r1, r3
   dca6a:	2d36      	cmp	r5, #54	; 0x36
   dca6c:	bf88      	it	hi
   dca6e:	bd30      	pophi	{r4, r5, pc}
   dca70:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dca74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dca78:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dca7c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dca80:	d002      	beq.n	dca88 <__adddf3+0x70>
   dca82:	4240      	negs	r0, r0
   dca84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dca88:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dca8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dca90:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dca94:	d002      	beq.n	dca9c <__adddf3+0x84>
   dca96:	4252      	negs	r2, r2
   dca98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dca9c:	ea94 0f05 	teq	r4, r5
   dcaa0:	f000 80a7 	beq.w	dcbf2 <__adddf3+0x1da>
   dcaa4:	f1a4 0401 	sub.w	r4, r4, #1
   dcaa8:	f1d5 0e20 	rsbs	lr, r5, #32
   dcaac:	db0d      	blt.n	dcaca <__adddf3+0xb2>
   dcaae:	fa02 fc0e 	lsl.w	ip, r2, lr
   dcab2:	fa22 f205 	lsr.w	r2, r2, r5
   dcab6:	1880      	adds	r0, r0, r2
   dcab8:	f141 0100 	adc.w	r1, r1, #0
   dcabc:	fa03 f20e 	lsl.w	r2, r3, lr
   dcac0:	1880      	adds	r0, r0, r2
   dcac2:	fa43 f305 	asr.w	r3, r3, r5
   dcac6:	4159      	adcs	r1, r3
   dcac8:	e00e      	b.n	dcae8 <__adddf3+0xd0>
   dcaca:	f1a5 0520 	sub.w	r5, r5, #32
   dcace:	f10e 0e20 	add.w	lr, lr, #32
   dcad2:	2a01      	cmp	r2, #1
   dcad4:	fa03 fc0e 	lsl.w	ip, r3, lr
   dcad8:	bf28      	it	cs
   dcada:	f04c 0c02 	orrcs.w	ip, ip, #2
   dcade:	fa43 f305 	asr.w	r3, r3, r5
   dcae2:	18c0      	adds	r0, r0, r3
   dcae4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dcae8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dcaec:	d507      	bpl.n	dcafe <__adddf3+0xe6>
   dcaee:	f04f 0e00 	mov.w	lr, #0
   dcaf2:	f1dc 0c00 	rsbs	ip, ip, #0
   dcaf6:	eb7e 0000 	sbcs.w	r0, lr, r0
   dcafa:	eb6e 0101 	sbc.w	r1, lr, r1
   dcafe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dcb02:	d31b      	bcc.n	dcb3c <__adddf3+0x124>
   dcb04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dcb08:	d30c      	bcc.n	dcb24 <__adddf3+0x10c>
   dcb0a:	0849      	lsrs	r1, r1, #1
   dcb0c:	ea5f 0030 	movs.w	r0, r0, rrx
   dcb10:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dcb14:	f104 0401 	add.w	r4, r4, #1
   dcb18:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dcb1c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dcb20:	f080 809a 	bcs.w	dcc58 <__adddf3+0x240>
   dcb24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dcb28:	bf08      	it	eq
   dcb2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dcb2e:	f150 0000 	adcs.w	r0, r0, #0
   dcb32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dcb36:	ea41 0105 	orr.w	r1, r1, r5
   dcb3a:	bd30      	pop	{r4, r5, pc}
   dcb3c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dcb40:	4140      	adcs	r0, r0
   dcb42:	eb41 0101 	adc.w	r1, r1, r1
   dcb46:	3c01      	subs	r4, #1
   dcb48:	bf28      	it	cs
   dcb4a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dcb4e:	d2e9      	bcs.n	dcb24 <__adddf3+0x10c>
   dcb50:	f091 0f00 	teq	r1, #0
   dcb54:	bf04      	itt	eq
   dcb56:	4601      	moveq	r1, r0
   dcb58:	2000      	moveq	r0, #0
   dcb5a:	fab1 f381 	clz	r3, r1
   dcb5e:	bf08      	it	eq
   dcb60:	3320      	addeq	r3, #32
   dcb62:	f1a3 030b 	sub.w	r3, r3, #11
   dcb66:	f1b3 0220 	subs.w	r2, r3, #32
   dcb6a:	da0c      	bge.n	dcb86 <__adddf3+0x16e>
   dcb6c:	320c      	adds	r2, #12
   dcb6e:	dd08      	ble.n	dcb82 <__adddf3+0x16a>
   dcb70:	f102 0c14 	add.w	ip, r2, #20
   dcb74:	f1c2 020c 	rsb	r2, r2, #12
   dcb78:	fa01 f00c 	lsl.w	r0, r1, ip
   dcb7c:	fa21 f102 	lsr.w	r1, r1, r2
   dcb80:	e00c      	b.n	dcb9c <__adddf3+0x184>
   dcb82:	f102 0214 	add.w	r2, r2, #20
   dcb86:	bfd8      	it	le
   dcb88:	f1c2 0c20 	rsble	ip, r2, #32
   dcb8c:	fa01 f102 	lsl.w	r1, r1, r2
   dcb90:	fa20 fc0c 	lsr.w	ip, r0, ip
   dcb94:	bfdc      	itt	le
   dcb96:	ea41 010c 	orrle.w	r1, r1, ip
   dcb9a:	4090      	lslle	r0, r2
   dcb9c:	1ae4      	subs	r4, r4, r3
   dcb9e:	bfa2      	ittt	ge
   dcba0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dcba4:	4329      	orrge	r1, r5
   dcba6:	bd30      	popge	{r4, r5, pc}
   dcba8:	ea6f 0404 	mvn.w	r4, r4
   dcbac:	3c1f      	subs	r4, #31
   dcbae:	da1c      	bge.n	dcbea <__adddf3+0x1d2>
   dcbb0:	340c      	adds	r4, #12
   dcbb2:	dc0e      	bgt.n	dcbd2 <__adddf3+0x1ba>
   dcbb4:	f104 0414 	add.w	r4, r4, #20
   dcbb8:	f1c4 0220 	rsb	r2, r4, #32
   dcbbc:	fa20 f004 	lsr.w	r0, r0, r4
   dcbc0:	fa01 f302 	lsl.w	r3, r1, r2
   dcbc4:	ea40 0003 	orr.w	r0, r0, r3
   dcbc8:	fa21 f304 	lsr.w	r3, r1, r4
   dcbcc:	ea45 0103 	orr.w	r1, r5, r3
   dcbd0:	bd30      	pop	{r4, r5, pc}
   dcbd2:	f1c4 040c 	rsb	r4, r4, #12
   dcbd6:	f1c4 0220 	rsb	r2, r4, #32
   dcbda:	fa20 f002 	lsr.w	r0, r0, r2
   dcbde:	fa01 f304 	lsl.w	r3, r1, r4
   dcbe2:	ea40 0003 	orr.w	r0, r0, r3
   dcbe6:	4629      	mov	r1, r5
   dcbe8:	bd30      	pop	{r4, r5, pc}
   dcbea:	fa21 f004 	lsr.w	r0, r1, r4
   dcbee:	4629      	mov	r1, r5
   dcbf0:	bd30      	pop	{r4, r5, pc}
   dcbf2:	f094 0f00 	teq	r4, #0
   dcbf6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dcbfa:	bf06      	itte	eq
   dcbfc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dcc00:	3401      	addeq	r4, #1
   dcc02:	3d01      	subne	r5, #1
   dcc04:	e74e      	b.n	dcaa4 <__adddf3+0x8c>
   dcc06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dcc0a:	bf18      	it	ne
   dcc0c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dcc10:	d029      	beq.n	dcc66 <__adddf3+0x24e>
   dcc12:	ea94 0f05 	teq	r4, r5
   dcc16:	bf08      	it	eq
   dcc18:	ea90 0f02 	teqeq	r0, r2
   dcc1c:	d005      	beq.n	dcc2a <__adddf3+0x212>
   dcc1e:	ea54 0c00 	orrs.w	ip, r4, r0
   dcc22:	bf04      	itt	eq
   dcc24:	4619      	moveq	r1, r3
   dcc26:	4610      	moveq	r0, r2
   dcc28:	bd30      	pop	{r4, r5, pc}
   dcc2a:	ea91 0f03 	teq	r1, r3
   dcc2e:	bf1e      	ittt	ne
   dcc30:	2100      	movne	r1, #0
   dcc32:	2000      	movne	r0, #0
   dcc34:	bd30      	popne	{r4, r5, pc}
   dcc36:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dcc3a:	d105      	bne.n	dcc48 <__adddf3+0x230>
   dcc3c:	0040      	lsls	r0, r0, #1
   dcc3e:	4149      	adcs	r1, r1
   dcc40:	bf28      	it	cs
   dcc42:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dcc46:	bd30      	pop	{r4, r5, pc}
   dcc48:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dcc4c:	bf3c      	itt	cc
   dcc4e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dcc52:	bd30      	popcc	{r4, r5, pc}
   dcc54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dcc58:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dcc5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dcc60:	f04f 0000 	mov.w	r0, #0
   dcc64:	bd30      	pop	{r4, r5, pc}
   dcc66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dcc6a:	bf1a      	itte	ne
   dcc6c:	4619      	movne	r1, r3
   dcc6e:	4610      	movne	r0, r2
   dcc70:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dcc74:	bf1c      	itt	ne
   dcc76:	460b      	movne	r3, r1
   dcc78:	4602      	movne	r2, r0
   dcc7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dcc7e:	bf06      	itte	eq
   dcc80:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dcc84:	ea91 0f03 	teqeq	r1, r3
   dcc88:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dcc8c:	bd30      	pop	{r4, r5, pc}
   dcc8e:	bf00      	nop

000dcc90 <__aeabi_ui2d>:
   dcc90:	f090 0f00 	teq	r0, #0
   dcc94:	bf04      	itt	eq
   dcc96:	2100      	moveq	r1, #0
   dcc98:	4770      	bxeq	lr
   dcc9a:	b530      	push	{r4, r5, lr}
   dcc9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dcca0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dcca4:	f04f 0500 	mov.w	r5, #0
   dcca8:	f04f 0100 	mov.w	r1, #0
   dccac:	e750      	b.n	dcb50 <__adddf3+0x138>
   dccae:	bf00      	nop

000dccb0 <__aeabi_i2d>:
   dccb0:	f090 0f00 	teq	r0, #0
   dccb4:	bf04      	itt	eq
   dccb6:	2100      	moveq	r1, #0
   dccb8:	4770      	bxeq	lr
   dccba:	b530      	push	{r4, r5, lr}
   dccbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dccc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dccc4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dccc8:	bf48      	it	mi
   dccca:	4240      	negmi	r0, r0
   dcccc:	f04f 0100 	mov.w	r1, #0
   dccd0:	e73e      	b.n	dcb50 <__adddf3+0x138>
   dccd2:	bf00      	nop

000dccd4 <__aeabi_f2d>:
   dccd4:	0042      	lsls	r2, r0, #1
   dccd6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dccda:	ea4f 0131 	mov.w	r1, r1, rrx
   dccde:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dcce2:	bf1f      	itttt	ne
   dcce4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dcce8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dccec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dccf0:	4770      	bxne	lr
   dccf2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dccf6:	bf08      	it	eq
   dccf8:	4770      	bxeq	lr
   dccfa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dccfe:	bf04      	itt	eq
   dcd00:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dcd04:	4770      	bxeq	lr
   dcd06:	b530      	push	{r4, r5, lr}
   dcd08:	f44f 7460 	mov.w	r4, #896	; 0x380
   dcd0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dcd10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dcd14:	e71c      	b.n	dcb50 <__adddf3+0x138>
   dcd16:	bf00      	nop

000dcd18 <__aeabi_ul2d>:
   dcd18:	ea50 0201 	orrs.w	r2, r0, r1
   dcd1c:	bf08      	it	eq
   dcd1e:	4770      	bxeq	lr
   dcd20:	b530      	push	{r4, r5, lr}
   dcd22:	f04f 0500 	mov.w	r5, #0
   dcd26:	e00a      	b.n	dcd3e <__aeabi_l2d+0x16>

000dcd28 <__aeabi_l2d>:
   dcd28:	ea50 0201 	orrs.w	r2, r0, r1
   dcd2c:	bf08      	it	eq
   dcd2e:	4770      	bxeq	lr
   dcd30:	b530      	push	{r4, r5, lr}
   dcd32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dcd36:	d502      	bpl.n	dcd3e <__aeabi_l2d+0x16>
   dcd38:	4240      	negs	r0, r0
   dcd3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dcd3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dcd42:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dcd46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dcd4a:	f43f aed8 	beq.w	dcafe <__adddf3+0xe6>
   dcd4e:	f04f 0203 	mov.w	r2, #3
   dcd52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dcd56:	bf18      	it	ne
   dcd58:	3203      	addne	r2, #3
   dcd5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dcd5e:	bf18      	it	ne
   dcd60:	3203      	addne	r2, #3
   dcd62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dcd66:	f1c2 0320 	rsb	r3, r2, #32
   dcd6a:	fa00 fc03 	lsl.w	ip, r0, r3
   dcd6e:	fa20 f002 	lsr.w	r0, r0, r2
   dcd72:	fa01 fe03 	lsl.w	lr, r1, r3
   dcd76:	ea40 000e 	orr.w	r0, r0, lr
   dcd7a:	fa21 f102 	lsr.w	r1, r1, r2
   dcd7e:	4414      	add	r4, r2
   dcd80:	e6bd      	b.n	dcafe <__adddf3+0xe6>
   dcd82:	bf00      	nop

000dcd84 <__aeabi_dmul>:
   dcd84:	b570      	push	{r4, r5, r6, lr}
   dcd86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dcd8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dcd8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dcd92:	bf1d      	ittte	ne
   dcd94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dcd98:	ea94 0f0c 	teqne	r4, ip
   dcd9c:	ea95 0f0c 	teqne	r5, ip
   dcda0:	f000 f8de 	bleq	dcf60 <__aeabi_dmul+0x1dc>
   dcda4:	442c      	add	r4, r5
   dcda6:	ea81 0603 	eor.w	r6, r1, r3
   dcdaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dcdae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dcdb2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dcdb6:	bf18      	it	ne
   dcdb8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dcdbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dcdc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dcdc4:	d038      	beq.n	dce38 <__aeabi_dmul+0xb4>
   dcdc6:	fba0 ce02 	umull	ip, lr, r0, r2
   dcdca:	f04f 0500 	mov.w	r5, #0
   dcdce:	fbe1 e502 	umlal	lr, r5, r1, r2
   dcdd2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dcdd6:	fbe0 e503 	umlal	lr, r5, r0, r3
   dcdda:	f04f 0600 	mov.w	r6, #0
   dcdde:	fbe1 5603 	umlal	r5, r6, r1, r3
   dcde2:	f09c 0f00 	teq	ip, #0
   dcde6:	bf18      	it	ne
   dcde8:	f04e 0e01 	orrne.w	lr, lr, #1
   dcdec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dcdf0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dcdf4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dcdf8:	d204      	bcs.n	dce04 <__aeabi_dmul+0x80>
   dcdfa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dcdfe:	416d      	adcs	r5, r5
   dce00:	eb46 0606 	adc.w	r6, r6, r6
   dce04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dce08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dce0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dce10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dce14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dce18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dce1c:	bf88      	it	hi
   dce1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dce22:	d81e      	bhi.n	dce62 <__aeabi_dmul+0xde>
   dce24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dce28:	bf08      	it	eq
   dce2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dce2e:	f150 0000 	adcs.w	r0, r0, #0
   dce32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dce36:	bd70      	pop	{r4, r5, r6, pc}
   dce38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dce3c:	ea46 0101 	orr.w	r1, r6, r1
   dce40:	ea40 0002 	orr.w	r0, r0, r2
   dce44:	ea81 0103 	eor.w	r1, r1, r3
   dce48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dce4c:	bfc2      	ittt	gt
   dce4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dce52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dce56:	bd70      	popgt	{r4, r5, r6, pc}
   dce58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dce5c:	f04f 0e00 	mov.w	lr, #0
   dce60:	3c01      	subs	r4, #1
   dce62:	f300 80ab 	bgt.w	dcfbc <__aeabi_dmul+0x238>
   dce66:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dce6a:	bfde      	ittt	le
   dce6c:	2000      	movle	r0, #0
   dce6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dce72:	bd70      	pople	{r4, r5, r6, pc}
   dce74:	f1c4 0400 	rsb	r4, r4, #0
   dce78:	3c20      	subs	r4, #32
   dce7a:	da35      	bge.n	dcee8 <__aeabi_dmul+0x164>
   dce7c:	340c      	adds	r4, #12
   dce7e:	dc1b      	bgt.n	dceb8 <__aeabi_dmul+0x134>
   dce80:	f104 0414 	add.w	r4, r4, #20
   dce84:	f1c4 0520 	rsb	r5, r4, #32
   dce88:	fa00 f305 	lsl.w	r3, r0, r5
   dce8c:	fa20 f004 	lsr.w	r0, r0, r4
   dce90:	fa01 f205 	lsl.w	r2, r1, r5
   dce94:	ea40 0002 	orr.w	r0, r0, r2
   dce98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dce9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dcea0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dcea4:	fa21 f604 	lsr.w	r6, r1, r4
   dcea8:	eb42 0106 	adc.w	r1, r2, r6
   dceac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dceb0:	bf08      	it	eq
   dceb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dceb6:	bd70      	pop	{r4, r5, r6, pc}
   dceb8:	f1c4 040c 	rsb	r4, r4, #12
   dcebc:	f1c4 0520 	rsb	r5, r4, #32
   dcec0:	fa00 f304 	lsl.w	r3, r0, r4
   dcec4:	fa20 f005 	lsr.w	r0, r0, r5
   dcec8:	fa01 f204 	lsl.w	r2, r1, r4
   dcecc:	ea40 0002 	orr.w	r0, r0, r2
   dced0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dced4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dced8:	f141 0100 	adc.w	r1, r1, #0
   dcedc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dcee0:	bf08      	it	eq
   dcee2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dcee6:	bd70      	pop	{r4, r5, r6, pc}
   dcee8:	f1c4 0520 	rsb	r5, r4, #32
   dceec:	fa00 f205 	lsl.w	r2, r0, r5
   dcef0:	ea4e 0e02 	orr.w	lr, lr, r2
   dcef4:	fa20 f304 	lsr.w	r3, r0, r4
   dcef8:	fa01 f205 	lsl.w	r2, r1, r5
   dcefc:	ea43 0302 	orr.w	r3, r3, r2
   dcf00:	fa21 f004 	lsr.w	r0, r1, r4
   dcf04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dcf08:	fa21 f204 	lsr.w	r2, r1, r4
   dcf0c:	ea20 0002 	bic.w	r0, r0, r2
   dcf10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dcf14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dcf18:	bf08      	it	eq
   dcf1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dcf1e:	bd70      	pop	{r4, r5, r6, pc}
   dcf20:	f094 0f00 	teq	r4, #0
   dcf24:	d10f      	bne.n	dcf46 <__aeabi_dmul+0x1c2>
   dcf26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dcf2a:	0040      	lsls	r0, r0, #1
   dcf2c:	eb41 0101 	adc.w	r1, r1, r1
   dcf30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dcf34:	bf08      	it	eq
   dcf36:	3c01      	subeq	r4, #1
   dcf38:	d0f7      	beq.n	dcf2a <__aeabi_dmul+0x1a6>
   dcf3a:	ea41 0106 	orr.w	r1, r1, r6
   dcf3e:	f095 0f00 	teq	r5, #0
   dcf42:	bf18      	it	ne
   dcf44:	4770      	bxne	lr
   dcf46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dcf4a:	0052      	lsls	r2, r2, #1
   dcf4c:	eb43 0303 	adc.w	r3, r3, r3
   dcf50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dcf54:	bf08      	it	eq
   dcf56:	3d01      	subeq	r5, #1
   dcf58:	d0f7      	beq.n	dcf4a <__aeabi_dmul+0x1c6>
   dcf5a:	ea43 0306 	orr.w	r3, r3, r6
   dcf5e:	4770      	bx	lr
   dcf60:	ea94 0f0c 	teq	r4, ip
   dcf64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dcf68:	bf18      	it	ne
   dcf6a:	ea95 0f0c 	teqne	r5, ip
   dcf6e:	d00c      	beq.n	dcf8a <__aeabi_dmul+0x206>
   dcf70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dcf74:	bf18      	it	ne
   dcf76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dcf7a:	d1d1      	bne.n	dcf20 <__aeabi_dmul+0x19c>
   dcf7c:	ea81 0103 	eor.w	r1, r1, r3
   dcf80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dcf84:	f04f 0000 	mov.w	r0, #0
   dcf88:	bd70      	pop	{r4, r5, r6, pc}
   dcf8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dcf8e:	bf06      	itte	eq
   dcf90:	4610      	moveq	r0, r2
   dcf92:	4619      	moveq	r1, r3
   dcf94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dcf98:	d019      	beq.n	dcfce <__aeabi_dmul+0x24a>
   dcf9a:	ea94 0f0c 	teq	r4, ip
   dcf9e:	d102      	bne.n	dcfa6 <__aeabi_dmul+0x222>
   dcfa0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dcfa4:	d113      	bne.n	dcfce <__aeabi_dmul+0x24a>
   dcfa6:	ea95 0f0c 	teq	r5, ip
   dcfaa:	d105      	bne.n	dcfb8 <__aeabi_dmul+0x234>
   dcfac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dcfb0:	bf1c      	itt	ne
   dcfb2:	4610      	movne	r0, r2
   dcfb4:	4619      	movne	r1, r3
   dcfb6:	d10a      	bne.n	dcfce <__aeabi_dmul+0x24a>
   dcfb8:	ea81 0103 	eor.w	r1, r1, r3
   dcfbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dcfc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dcfc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dcfc8:	f04f 0000 	mov.w	r0, #0
   dcfcc:	bd70      	pop	{r4, r5, r6, pc}
   dcfce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dcfd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dcfd6:	bd70      	pop	{r4, r5, r6, pc}

000dcfd8 <__aeabi_ddiv>:
   dcfd8:	b570      	push	{r4, r5, r6, lr}
   dcfda:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dcfde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dcfe2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dcfe6:	bf1d      	ittte	ne
   dcfe8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dcfec:	ea94 0f0c 	teqne	r4, ip
   dcff0:	ea95 0f0c 	teqne	r5, ip
   dcff4:	f000 f8a7 	bleq	dd146 <__aeabi_ddiv+0x16e>
   dcff8:	eba4 0405 	sub.w	r4, r4, r5
   dcffc:	ea81 0e03 	eor.w	lr, r1, r3
   dd000:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dd004:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dd008:	f000 8088 	beq.w	dd11c <__aeabi_ddiv+0x144>
   dd00c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dd010:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dd014:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dd018:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dd01c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dd020:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dd024:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dd028:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dd02c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dd030:	429d      	cmp	r5, r3
   dd032:	bf08      	it	eq
   dd034:	4296      	cmpeq	r6, r2
   dd036:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dd03a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dd03e:	d202      	bcs.n	dd046 <__aeabi_ddiv+0x6e>
   dd040:	085b      	lsrs	r3, r3, #1
   dd042:	ea4f 0232 	mov.w	r2, r2, rrx
   dd046:	1ab6      	subs	r6, r6, r2
   dd048:	eb65 0503 	sbc.w	r5, r5, r3
   dd04c:	085b      	lsrs	r3, r3, #1
   dd04e:	ea4f 0232 	mov.w	r2, r2, rrx
   dd052:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dd056:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dd05a:	ebb6 0e02 	subs.w	lr, r6, r2
   dd05e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd062:	bf22      	ittt	cs
   dd064:	1ab6      	subcs	r6, r6, r2
   dd066:	4675      	movcs	r5, lr
   dd068:	ea40 000c 	orrcs.w	r0, r0, ip
   dd06c:	085b      	lsrs	r3, r3, #1
   dd06e:	ea4f 0232 	mov.w	r2, r2, rrx
   dd072:	ebb6 0e02 	subs.w	lr, r6, r2
   dd076:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd07a:	bf22      	ittt	cs
   dd07c:	1ab6      	subcs	r6, r6, r2
   dd07e:	4675      	movcs	r5, lr
   dd080:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dd084:	085b      	lsrs	r3, r3, #1
   dd086:	ea4f 0232 	mov.w	r2, r2, rrx
   dd08a:	ebb6 0e02 	subs.w	lr, r6, r2
   dd08e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd092:	bf22      	ittt	cs
   dd094:	1ab6      	subcs	r6, r6, r2
   dd096:	4675      	movcs	r5, lr
   dd098:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dd09c:	085b      	lsrs	r3, r3, #1
   dd09e:	ea4f 0232 	mov.w	r2, r2, rrx
   dd0a2:	ebb6 0e02 	subs.w	lr, r6, r2
   dd0a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dd0aa:	bf22      	ittt	cs
   dd0ac:	1ab6      	subcs	r6, r6, r2
   dd0ae:	4675      	movcs	r5, lr
   dd0b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dd0b4:	ea55 0e06 	orrs.w	lr, r5, r6
   dd0b8:	d018      	beq.n	dd0ec <__aeabi_ddiv+0x114>
   dd0ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dd0be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dd0c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dd0c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dd0ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dd0ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dd0d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dd0d6:	d1c0      	bne.n	dd05a <__aeabi_ddiv+0x82>
   dd0d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dd0dc:	d10b      	bne.n	dd0f6 <__aeabi_ddiv+0x11e>
   dd0de:	ea41 0100 	orr.w	r1, r1, r0
   dd0e2:	f04f 0000 	mov.w	r0, #0
   dd0e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dd0ea:	e7b6      	b.n	dd05a <__aeabi_ddiv+0x82>
   dd0ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dd0f0:	bf04      	itt	eq
   dd0f2:	4301      	orreq	r1, r0
   dd0f4:	2000      	moveq	r0, #0
   dd0f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dd0fa:	bf88      	it	hi
   dd0fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dd100:	f63f aeaf 	bhi.w	dce62 <__aeabi_dmul+0xde>
   dd104:	ebb5 0c03 	subs.w	ip, r5, r3
   dd108:	bf04      	itt	eq
   dd10a:	ebb6 0c02 	subseq.w	ip, r6, r2
   dd10e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dd112:	f150 0000 	adcs.w	r0, r0, #0
   dd116:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dd11a:	bd70      	pop	{r4, r5, r6, pc}
   dd11c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dd120:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dd124:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dd128:	bfc2      	ittt	gt
   dd12a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dd12e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dd132:	bd70      	popgt	{r4, r5, r6, pc}
   dd134:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dd138:	f04f 0e00 	mov.w	lr, #0
   dd13c:	3c01      	subs	r4, #1
   dd13e:	e690      	b.n	dce62 <__aeabi_dmul+0xde>
   dd140:	ea45 0e06 	orr.w	lr, r5, r6
   dd144:	e68d      	b.n	dce62 <__aeabi_dmul+0xde>
   dd146:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dd14a:	ea94 0f0c 	teq	r4, ip
   dd14e:	bf08      	it	eq
   dd150:	ea95 0f0c 	teqeq	r5, ip
   dd154:	f43f af3b 	beq.w	dcfce <__aeabi_dmul+0x24a>
   dd158:	ea94 0f0c 	teq	r4, ip
   dd15c:	d10a      	bne.n	dd174 <__aeabi_ddiv+0x19c>
   dd15e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dd162:	f47f af34 	bne.w	dcfce <__aeabi_dmul+0x24a>
   dd166:	ea95 0f0c 	teq	r5, ip
   dd16a:	f47f af25 	bne.w	dcfb8 <__aeabi_dmul+0x234>
   dd16e:	4610      	mov	r0, r2
   dd170:	4619      	mov	r1, r3
   dd172:	e72c      	b.n	dcfce <__aeabi_dmul+0x24a>
   dd174:	ea95 0f0c 	teq	r5, ip
   dd178:	d106      	bne.n	dd188 <__aeabi_ddiv+0x1b0>
   dd17a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dd17e:	f43f aefd 	beq.w	dcf7c <__aeabi_dmul+0x1f8>
   dd182:	4610      	mov	r0, r2
   dd184:	4619      	mov	r1, r3
   dd186:	e722      	b.n	dcfce <__aeabi_dmul+0x24a>
   dd188:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dd18c:	bf18      	it	ne
   dd18e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dd192:	f47f aec5 	bne.w	dcf20 <__aeabi_dmul+0x19c>
   dd196:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dd19a:	f47f af0d 	bne.w	dcfb8 <__aeabi_dmul+0x234>
   dd19e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dd1a2:	f47f aeeb 	bne.w	dcf7c <__aeabi_dmul+0x1f8>
   dd1a6:	e712      	b.n	dcfce <__aeabi_dmul+0x24a>

000dd1a8 <__gedf2>:
   dd1a8:	f04f 3cff 	mov.w	ip, #4294967295
   dd1ac:	e006      	b.n	dd1bc <__cmpdf2+0x4>
   dd1ae:	bf00      	nop

000dd1b0 <__ledf2>:
   dd1b0:	f04f 0c01 	mov.w	ip, #1
   dd1b4:	e002      	b.n	dd1bc <__cmpdf2+0x4>
   dd1b6:	bf00      	nop

000dd1b8 <__cmpdf2>:
   dd1b8:	f04f 0c01 	mov.w	ip, #1
   dd1bc:	f84d cd04 	str.w	ip, [sp, #-4]!
   dd1c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dd1c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd1c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dd1cc:	bf18      	it	ne
   dd1ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dd1d2:	d01b      	beq.n	dd20c <__cmpdf2+0x54>
   dd1d4:	b001      	add	sp, #4
   dd1d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dd1da:	bf0c      	ite	eq
   dd1dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dd1e0:	ea91 0f03 	teqne	r1, r3
   dd1e4:	bf02      	ittt	eq
   dd1e6:	ea90 0f02 	teqeq	r0, r2
   dd1ea:	2000      	moveq	r0, #0
   dd1ec:	4770      	bxeq	lr
   dd1ee:	f110 0f00 	cmn.w	r0, #0
   dd1f2:	ea91 0f03 	teq	r1, r3
   dd1f6:	bf58      	it	pl
   dd1f8:	4299      	cmppl	r1, r3
   dd1fa:	bf08      	it	eq
   dd1fc:	4290      	cmpeq	r0, r2
   dd1fe:	bf2c      	ite	cs
   dd200:	17d8      	asrcs	r0, r3, #31
   dd202:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dd206:	f040 0001 	orr.w	r0, r0, #1
   dd20a:	4770      	bx	lr
   dd20c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dd210:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd214:	d102      	bne.n	dd21c <__cmpdf2+0x64>
   dd216:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dd21a:	d107      	bne.n	dd22c <__cmpdf2+0x74>
   dd21c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dd220:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd224:	d1d6      	bne.n	dd1d4 <__cmpdf2+0x1c>
   dd226:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dd22a:	d0d3      	beq.n	dd1d4 <__cmpdf2+0x1c>
   dd22c:	f85d 0b04 	ldr.w	r0, [sp], #4
   dd230:	4770      	bx	lr
   dd232:	bf00      	nop

000dd234 <__aeabi_cdrcmple>:
   dd234:	4684      	mov	ip, r0
   dd236:	4610      	mov	r0, r2
   dd238:	4662      	mov	r2, ip
   dd23a:	468c      	mov	ip, r1
   dd23c:	4619      	mov	r1, r3
   dd23e:	4663      	mov	r3, ip
   dd240:	e000      	b.n	dd244 <__aeabi_cdcmpeq>
   dd242:	bf00      	nop

000dd244 <__aeabi_cdcmpeq>:
   dd244:	b501      	push	{r0, lr}
   dd246:	f7ff ffb7 	bl	dd1b8 <__cmpdf2>
   dd24a:	2800      	cmp	r0, #0
   dd24c:	bf48      	it	mi
   dd24e:	f110 0f00 	cmnmi.w	r0, #0
   dd252:	bd01      	pop	{r0, pc}

000dd254 <__aeabi_dcmpeq>:
   dd254:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd258:	f7ff fff4 	bl	dd244 <__aeabi_cdcmpeq>
   dd25c:	bf0c      	ite	eq
   dd25e:	2001      	moveq	r0, #1
   dd260:	2000      	movne	r0, #0
   dd262:	f85d fb08 	ldr.w	pc, [sp], #8
   dd266:	bf00      	nop

000dd268 <__aeabi_dcmplt>:
   dd268:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd26c:	f7ff ffea 	bl	dd244 <__aeabi_cdcmpeq>
   dd270:	bf34      	ite	cc
   dd272:	2001      	movcc	r0, #1
   dd274:	2000      	movcs	r0, #0
   dd276:	f85d fb08 	ldr.w	pc, [sp], #8
   dd27a:	bf00      	nop

000dd27c <__aeabi_dcmple>:
   dd27c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd280:	f7ff ffe0 	bl	dd244 <__aeabi_cdcmpeq>
   dd284:	bf94      	ite	ls
   dd286:	2001      	movls	r0, #1
   dd288:	2000      	movhi	r0, #0
   dd28a:	f85d fb08 	ldr.w	pc, [sp], #8
   dd28e:	bf00      	nop

000dd290 <__aeabi_dcmpge>:
   dd290:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd294:	f7ff ffce 	bl	dd234 <__aeabi_cdrcmple>
   dd298:	bf94      	ite	ls
   dd29a:	2001      	movls	r0, #1
   dd29c:	2000      	movhi	r0, #0
   dd29e:	f85d fb08 	ldr.w	pc, [sp], #8
   dd2a2:	bf00      	nop

000dd2a4 <__aeabi_dcmpgt>:
   dd2a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dd2a8:	f7ff ffc4 	bl	dd234 <__aeabi_cdrcmple>
   dd2ac:	bf34      	ite	cc
   dd2ae:	2001      	movcc	r0, #1
   dd2b0:	2000      	movcs	r0, #0
   dd2b2:	f85d fb08 	ldr.w	pc, [sp], #8
   dd2b6:	bf00      	nop

000dd2b8 <__aeabi_dcmpun>:
   dd2b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dd2bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd2c0:	d102      	bne.n	dd2c8 <__aeabi_dcmpun+0x10>
   dd2c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dd2c6:	d10a      	bne.n	dd2de <__aeabi_dcmpun+0x26>
   dd2c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dd2cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dd2d0:	d102      	bne.n	dd2d8 <__aeabi_dcmpun+0x20>
   dd2d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dd2d6:	d102      	bne.n	dd2de <__aeabi_dcmpun+0x26>
   dd2d8:	f04f 0000 	mov.w	r0, #0
   dd2dc:	4770      	bx	lr
   dd2de:	f04f 0001 	mov.w	r0, #1
   dd2e2:	4770      	bx	lr

000dd2e4 <__aeabi_d2iz>:
   dd2e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dd2e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dd2ec:	d215      	bcs.n	dd31a <__aeabi_d2iz+0x36>
   dd2ee:	d511      	bpl.n	dd314 <__aeabi_d2iz+0x30>
   dd2f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dd2f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dd2f8:	d912      	bls.n	dd320 <__aeabi_d2iz+0x3c>
   dd2fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dd2fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dd302:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dd306:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dd30a:	fa23 f002 	lsr.w	r0, r3, r2
   dd30e:	bf18      	it	ne
   dd310:	4240      	negne	r0, r0
   dd312:	4770      	bx	lr
   dd314:	f04f 0000 	mov.w	r0, #0
   dd318:	4770      	bx	lr
   dd31a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dd31e:	d105      	bne.n	dd32c <__aeabi_d2iz+0x48>
   dd320:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dd324:	bf08      	it	eq
   dd326:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dd32a:	4770      	bx	lr
   dd32c:	f04f 0000 	mov.w	r0, #0
   dd330:	4770      	bx	lr
   dd332:	bf00      	nop

000dd334 <__aeabi_d2uiz>:
   dd334:	004a      	lsls	r2, r1, #1
   dd336:	d211      	bcs.n	dd35c <__aeabi_d2uiz+0x28>
   dd338:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dd33c:	d211      	bcs.n	dd362 <__aeabi_d2uiz+0x2e>
   dd33e:	d50d      	bpl.n	dd35c <__aeabi_d2uiz+0x28>
   dd340:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dd344:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dd348:	d40e      	bmi.n	dd368 <__aeabi_d2uiz+0x34>
   dd34a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dd34e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dd352:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dd356:	fa23 f002 	lsr.w	r0, r3, r2
   dd35a:	4770      	bx	lr
   dd35c:	f04f 0000 	mov.w	r0, #0
   dd360:	4770      	bx	lr
   dd362:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dd366:	d102      	bne.n	dd36e <__aeabi_d2uiz+0x3a>
   dd368:	f04f 30ff 	mov.w	r0, #4294967295
   dd36c:	4770      	bx	lr
   dd36e:	f04f 0000 	mov.w	r0, #0
   dd372:	4770      	bx	lr

000dd374 <__aeabi_d2f>:
   dd374:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dd378:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dd37c:	bf24      	itt	cs
   dd37e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dd382:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dd386:	d90d      	bls.n	dd3a4 <__aeabi_d2f+0x30>
   dd388:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dd38c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dd390:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dd394:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dd398:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dd39c:	bf08      	it	eq
   dd39e:	f020 0001 	biceq.w	r0, r0, #1
   dd3a2:	4770      	bx	lr
   dd3a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dd3a8:	d121      	bne.n	dd3ee <__aeabi_d2f+0x7a>
   dd3aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dd3ae:	bfbc      	itt	lt
   dd3b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dd3b4:	4770      	bxlt	lr
   dd3b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dd3ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dd3be:	f1c2 0218 	rsb	r2, r2, #24
   dd3c2:	f1c2 0c20 	rsb	ip, r2, #32
   dd3c6:	fa10 f30c 	lsls.w	r3, r0, ip
   dd3ca:	fa20 f002 	lsr.w	r0, r0, r2
   dd3ce:	bf18      	it	ne
   dd3d0:	f040 0001 	orrne.w	r0, r0, #1
   dd3d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dd3d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dd3dc:	fa03 fc0c 	lsl.w	ip, r3, ip
   dd3e0:	ea40 000c 	orr.w	r0, r0, ip
   dd3e4:	fa23 f302 	lsr.w	r3, r3, r2
   dd3e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dd3ec:	e7cc      	b.n	dd388 <__aeabi_d2f+0x14>
   dd3ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dd3f2:	d107      	bne.n	dd404 <__aeabi_d2f+0x90>
   dd3f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dd3f8:	bf1e      	ittt	ne
   dd3fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dd3fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dd402:	4770      	bxne	lr
   dd404:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dd408:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dd40c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dd410:	4770      	bx	lr
   dd412:	bf00      	nop

000dd414 <__aeabi_uldivmod>:
   dd414:	b953      	cbnz	r3, dd42c <__aeabi_uldivmod+0x18>
   dd416:	b94a      	cbnz	r2, dd42c <__aeabi_uldivmod+0x18>
   dd418:	2900      	cmp	r1, #0
   dd41a:	bf08      	it	eq
   dd41c:	2800      	cmpeq	r0, #0
   dd41e:	bf1c      	itt	ne
   dd420:	f04f 31ff 	movne.w	r1, #4294967295
   dd424:	f04f 30ff 	movne.w	r0, #4294967295
   dd428:	f000 b98c 	b.w	dd744 <__aeabi_idiv0>
   dd42c:	f1ad 0c08 	sub.w	ip, sp, #8
   dd430:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dd434:	f000 f824 	bl	dd480 <__udivmoddi4>
   dd438:	f8dd e004 	ldr.w	lr, [sp, #4]
   dd43c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dd440:	b004      	add	sp, #16
   dd442:	4770      	bx	lr

000dd444 <__aeabi_d2ulz>:
   dd444:	b5d0      	push	{r4, r6, r7, lr}
   dd446:	4b0c      	ldr	r3, [pc, #48]	; (dd478 <__aeabi_d2ulz+0x34>)
   dd448:	2200      	movs	r2, #0
   dd44a:	4606      	mov	r6, r0
   dd44c:	460f      	mov	r7, r1
   dd44e:	f7ff fc99 	bl	dcd84 <__aeabi_dmul>
   dd452:	f7ff ff6f 	bl	dd334 <__aeabi_d2uiz>
   dd456:	4604      	mov	r4, r0
   dd458:	f7ff fc1a 	bl	dcc90 <__aeabi_ui2d>
   dd45c:	4b07      	ldr	r3, [pc, #28]	; (dd47c <__aeabi_d2ulz+0x38>)
   dd45e:	2200      	movs	r2, #0
   dd460:	f7ff fc90 	bl	dcd84 <__aeabi_dmul>
   dd464:	4602      	mov	r2, r0
   dd466:	460b      	mov	r3, r1
   dd468:	4630      	mov	r0, r6
   dd46a:	4639      	mov	r1, r7
   dd46c:	f7ff fad2 	bl	dca14 <__aeabi_dsub>
   dd470:	f7ff ff60 	bl	dd334 <__aeabi_d2uiz>
   dd474:	4621      	mov	r1, r4
   dd476:	bdd0      	pop	{r4, r6, r7, pc}
   dd478:	3df00000 	.word	0x3df00000
   dd47c:	41f00000 	.word	0x41f00000

000dd480 <__udivmoddi4>:
   dd480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd484:	9d08      	ldr	r5, [sp, #32]
   dd486:	4604      	mov	r4, r0
   dd488:	468c      	mov	ip, r1
   dd48a:	2b00      	cmp	r3, #0
   dd48c:	f040 8083 	bne.w	dd596 <__udivmoddi4+0x116>
   dd490:	428a      	cmp	r2, r1
   dd492:	4617      	mov	r7, r2
   dd494:	d947      	bls.n	dd526 <__udivmoddi4+0xa6>
   dd496:	fab2 f282 	clz	r2, r2
   dd49a:	b142      	cbz	r2, dd4ae <__udivmoddi4+0x2e>
   dd49c:	f1c2 0020 	rsb	r0, r2, #32
   dd4a0:	fa24 f000 	lsr.w	r0, r4, r0
   dd4a4:	4091      	lsls	r1, r2
   dd4a6:	4097      	lsls	r7, r2
   dd4a8:	ea40 0c01 	orr.w	ip, r0, r1
   dd4ac:	4094      	lsls	r4, r2
   dd4ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dd4b2:	0c23      	lsrs	r3, r4, #16
   dd4b4:	fbbc f6f8 	udiv	r6, ip, r8
   dd4b8:	fa1f fe87 	uxth.w	lr, r7
   dd4bc:	fb08 c116 	mls	r1, r8, r6, ip
   dd4c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dd4c4:	fb06 f10e 	mul.w	r1, r6, lr
   dd4c8:	4299      	cmp	r1, r3
   dd4ca:	d909      	bls.n	dd4e0 <__udivmoddi4+0x60>
   dd4cc:	18fb      	adds	r3, r7, r3
   dd4ce:	f106 30ff 	add.w	r0, r6, #4294967295
   dd4d2:	f080 8119 	bcs.w	dd708 <__udivmoddi4+0x288>
   dd4d6:	4299      	cmp	r1, r3
   dd4d8:	f240 8116 	bls.w	dd708 <__udivmoddi4+0x288>
   dd4dc:	3e02      	subs	r6, #2
   dd4de:	443b      	add	r3, r7
   dd4e0:	1a5b      	subs	r3, r3, r1
   dd4e2:	b2a4      	uxth	r4, r4
   dd4e4:	fbb3 f0f8 	udiv	r0, r3, r8
   dd4e8:	fb08 3310 	mls	r3, r8, r0, r3
   dd4ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dd4f0:	fb00 fe0e 	mul.w	lr, r0, lr
   dd4f4:	45a6      	cmp	lr, r4
   dd4f6:	d909      	bls.n	dd50c <__udivmoddi4+0x8c>
   dd4f8:	193c      	adds	r4, r7, r4
   dd4fa:	f100 33ff 	add.w	r3, r0, #4294967295
   dd4fe:	f080 8105 	bcs.w	dd70c <__udivmoddi4+0x28c>
   dd502:	45a6      	cmp	lr, r4
   dd504:	f240 8102 	bls.w	dd70c <__udivmoddi4+0x28c>
   dd508:	3802      	subs	r0, #2
   dd50a:	443c      	add	r4, r7
   dd50c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dd510:	eba4 040e 	sub.w	r4, r4, lr
   dd514:	2600      	movs	r6, #0
   dd516:	b11d      	cbz	r5, dd520 <__udivmoddi4+0xa0>
   dd518:	40d4      	lsrs	r4, r2
   dd51a:	2300      	movs	r3, #0
   dd51c:	e9c5 4300 	strd	r4, r3, [r5]
   dd520:	4631      	mov	r1, r6
   dd522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd526:	b902      	cbnz	r2, dd52a <__udivmoddi4+0xaa>
   dd528:	deff      	udf	#255	; 0xff
   dd52a:	fab2 f282 	clz	r2, r2
   dd52e:	2a00      	cmp	r2, #0
   dd530:	d150      	bne.n	dd5d4 <__udivmoddi4+0x154>
   dd532:	1bcb      	subs	r3, r1, r7
   dd534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dd538:	fa1f f887 	uxth.w	r8, r7
   dd53c:	2601      	movs	r6, #1
   dd53e:	fbb3 fcfe 	udiv	ip, r3, lr
   dd542:	0c21      	lsrs	r1, r4, #16
   dd544:	fb0e 331c 	mls	r3, lr, ip, r3
   dd548:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dd54c:	fb08 f30c 	mul.w	r3, r8, ip
   dd550:	428b      	cmp	r3, r1
   dd552:	d907      	bls.n	dd564 <__udivmoddi4+0xe4>
   dd554:	1879      	adds	r1, r7, r1
   dd556:	f10c 30ff 	add.w	r0, ip, #4294967295
   dd55a:	d202      	bcs.n	dd562 <__udivmoddi4+0xe2>
   dd55c:	428b      	cmp	r3, r1
   dd55e:	f200 80e9 	bhi.w	dd734 <__udivmoddi4+0x2b4>
   dd562:	4684      	mov	ip, r0
   dd564:	1ac9      	subs	r1, r1, r3
   dd566:	b2a3      	uxth	r3, r4
   dd568:	fbb1 f0fe 	udiv	r0, r1, lr
   dd56c:	fb0e 1110 	mls	r1, lr, r0, r1
   dd570:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dd574:	fb08 f800 	mul.w	r8, r8, r0
   dd578:	45a0      	cmp	r8, r4
   dd57a:	d907      	bls.n	dd58c <__udivmoddi4+0x10c>
   dd57c:	193c      	adds	r4, r7, r4
   dd57e:	f100 33ff 	add.w	r3, r0, #4294967295
   dd582:	d202      	bcs.n	dd58a <__udivmoddi4+0x10a>
   dd584:	45a0      	cmp	r8, r4
   dd586:	f200 80d9 	bhi.w	dd73c <__udivmoddi4+0x2bc>
   dd58a:	4618      	mov	r0, r3
   dd58c:	eba4 0408 	sub.w	r4, r4, r8
   dd590:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dd594:	e7bf      	b.n	dd516 <__udivmoddi4+0x96>
   dd596:	428b      	cmp	r3, r1
   dd598:	d909      	bls.n	dd5ae <__udivmoddi4+0x12e>
   dd59a:	2d00      	cmp	r5, #0
   dd59c:	f000 80b1 	beq.w	dd702 <__udivmoddi4+0x282>
   dd5a0:	2600      	movs	r6, #0
   dd5a2:	e9c5 0100 	strd	r0, r1, [r5]
   dd5a6:	4630      	mov	r0, r6
   dd5a8:	4631      	mov	r1, r6
   dd5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd5ae:	fab3 f683 	clz	r6, r3
   dd5b2:	2e00      	cmp	r6, #0
   dd5b4:	d14a      	bne.n	dd64c <__udivmoddi4+0x1cc>
   dd5b6:	428b      	cmp	r3, r1
   dd5b8:	d302      	bcc.n	dd5c0 <__udivmoddi4+0x140>
   dd5ba:	4282      	cmp	r2, r0
   dd5bc:	f200 80b8 	bhi.w	dd730 <__udivmoddi4+0x2b0>
   dd5c0:	1a84      	subs	r4, r0, r2
   dd5c2:	eb61 0103 	sbc.w	r1, r1, r3
   dd5c6:	2001      	movs	r0, #1
   dd5c8:	468c      	mov	ip, r1
   dd5ca:	2d00      	cmp	r5, #0
   dd5cc:	d0a8      	beq.n	dd520 <__udivmoddi4+0xa0>
   dd5ce:	e9c5 4c00 	strd	r4, ip, [r5]
   dd5d2:	e7a5      	b.n	dd520 <__udivmoddi4+0xa0>
   dd5d4:	f1c2 0320 	rsb	r3, r2, #32
   dd5d8:	fa20 f603 	lsr.w	r6, r0, r3
   dd5dc:	4097      	lsls	r7, r2
   dd5de:	fa01 f002 	lsl.w	r0, r1, r2
   dd5e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dd5e6:	40d9      	lsrs	r1, r3
   dd5e8:	4330      	orrs	r0, r6
   dd5ea:	0c03      	lsrs	r3, r0, #16
   dd5ec:	fbb1 f6fe 	udiv	r6, r1, lr
   dd5f0:	fa1f f887 	uxth.w	r8, r7
   dd5f4:	fb0e 1116 	mls	r1, lr, r6, r1
   dd5f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dd5fc:	fb06 f108 	mul.w	r1, r6, r8
   dd600:	4299      	cmp	r1, r3
   dd602:	fa04 f402 	lsl.w	r4, r4, r2
   dd606:	d909      	bls.n	dd61c <__udivmoddi4+0x19c>
   dd608:	18fb      	adds	r3, r7, r3
   dd60a:	f106 3cff 	add.w	ip, r6, #4294967295
   dd60e:	f080 808d 	bcs.w	dd72c <__udivmoddi4+0x2ac>
   dd612:	4299      	cmp	r1, r3
   dd614:	f240 808a 	bls.w	dd72c <__udivmoddi4+0x2ac>
   dd618:	3e02      	subs	r6, #2
   dd61a:	443b      	add	r3, r7
   dd61c:	1a5b      	subs	r3, r3, r1
   dd61e:	b281      	uxth	r1, r0
   dd620:	fbb3 f0fe 	udiv	r0, r3, lr
   dd624:	fb0e 3310 	mls	r3, lr, r0, r3
   dd628:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dd62c:	fb00 f308 	mul.w	r3, r0, r8
   dd630:	428b      	cmp	r3, r1
   dd632:	d907      	bls.n	dd644 <__udivmoddi4+0x1c4>
   dd634:	1879      	adds	r1, r7, r1
   dd636:	f100 3cff 	add.w	ip, r0, #4294967295
   dd63a:	d273      	bcs.n	dd724 <__udivmoddi4+0x2a4>
   dd63c:	428b      	cmp	r3, r1
   dd63e:	d971      	bls.n	dd724 <__udivmoddi4+0x2a4>
   dd640:	3802      	subs	r0, #2
   dd642:	4439      	add	r1, r7
   dd644:	1acb      	subs	r3, r1, r3
   dd646:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dd64a:	e778      	b.n	dd53e <__udivmoddi4+0xbe>
   dd64c:	f1c6 0c20 	rsb	ip, r6, #32
   dd650:	fa03 f406 	lsl.w	r4, r3, r6
   dd654:	fa22 f30c 	lsr.w	r3, r2, ip
   dd658:	431c      	orrs	r4, r3
   dd65a:	fa20 f70c 	lsr.w	r7, r0, ip
   dd65e:	fa01 f306 	lsl.w	r3, r1, r6
   dd662:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dd666:	fa21 f10c 	lsr.w	r1, r1, ip
   dd66a:	431f      	orrs	r7, r3
   dd66c:	0c3b      	lsrs	r3, r7, #16
   dd66e:	fbb1 f9fe 	udiv	r9, r1, lr
   dd672:	fa1f f884 	uxth.w	r8, r4
   dd676:	fb0e 1119 	mls	r1, lr, r9, r1
   dd67a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dd67e:	fb09 fa08 	mul.w	sl, r9, r8
   dd682:	458a      	cmp	sl, r1
   dd684:	fa02 f206 	lsl.w	r2, r2, r6
   dd688:	fa00 f306 	lsl.w	r3, r0, r6
   dd68c:	d908      	bls.n	dd6a0 <__udivmoddi4+0x220>
   dd68e:	1861      	adds	r1, r4, r1
   dd690:	f109 30ff 	add.w	r0, r9, #4294967295
   dd694:	d248      	bcs.n	dd728 <__udivmoddi4+0x2a8>
   dd696:	458a      	cmp	sl, r1
   dd698:	d946      	bls.n	dd728 <__udivmoddi4+0x2a8>
   dd69a:	f1a9 0902 	sub.w	r9, r9, #2
   dd69e:	4421      	add	r1, r4
   dd6a0:	eba1 010a 	sub.w	r1, r1, sl
   dd6a4:	b2bf      	uxth	r7, r7
   dd6a6:	fbb1 f0fe 	udiv	r0, r1, lr
   dd6aa:	fb0e 1110 	mls	r1, lr, r0, r1
   dd6ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dd6b2:	fb00 f808 	mul.w	r8, r0, r8
   dd6b6:	45b8      	cmp	r8, r7
   dd6b8:	d907      	bls.n	dd6ca <__udivmoddi4+0x24a>
   dd6ba:	19e7      	adds	r7, r4, r7
   dd6bc:	f100 31ff 	add.w	r1, r0, #4294967295
   dd6c0:	d22e      	bcs.n	dd720 <__udivmoddi4+0x2a0>
   dd6c2:	45b8      	cmp	r8, r7
   dd6c4:	d92c      	bls.n	dd720 <__udivmoddi4+0x2a0>
   dd6c6:	3802      	subs	r0, #2
   dd6c8:	4427      	add	r7, r4
   dd6ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dd6ce:	eba7 0708 	sub.w	r7, r7, r8
   dd6d2:	fba0 8902 	umull	r8, r9, r0, r2
   dd6d6:	454f      	cmp	r7, r9
   dd6d8:	46c6      	mov	lr, r8
   dd6da:	4649      	mov	r1, r9
   dd6dc:	d31a      	bcc.n	dd714 <__udivmoddi4+0x294>
   dd6de:	d017      	beq.n	dd710 <__udivmoddi4+0x290>
   dd6e0:	b15d      	cbz	r5, dd6fa <__udivmoddi4+0x27a>
   dd6e2:	ebb3 020e 	subs.w	r2, r3, lr
   dd6e6:	eb67 0701 	sbc.w	r7, r7, r1
   dd6ea:	fa07 fc0c 	lsl.w	ip, r7, ip
   dd6ee:	40f2      	lsrs	r2, r6
   dd6f0:	ea4c 0202 	orr.w	r2, ip, r2
   dd6f4:	40f7      	lsrs	r7, r6
   dd6f6:	e9c5 2700 	strd	r2, r7, [r5]
   dd6fa:	2600      	movs	r6, #0
   dd6fc:	4631      	mov	r1, r6
   dd6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd702:	462e      	mov	r6, r5
   dd704:	4628      	mov	r0, r5
   dd706:	e70b      	b.n	dd520 <__udivmoddi4+0xa0>
   dd708:	4606      	mov	r6, r0
   dd70a:	e6e9      	b.n	dd4e0 <__udivmoddi4+0x60>
   dd70c:	4618      	mov	r0, r3
   dd70e:	e6fd      	b.n	dd50c <__udivmoddi4+0x8c>
   dd710:	4543      	cmp	r3, r8
   dd712:	d2e5      	bcs.n	dd6e0 <__udivmoddi4+0x260>
   dd714:	ebb8 0e02 	subs.w	lr, r8, r2
   dd718:	eb69 0104 	sbc.w	r1, r9, r4
   dd71c:	3801      	subs	r0, #1
   dd71e:	e7df      	b.n	dd6e0 <__udivmoddi4+0x260>
   dd720:	4608      	mov	r0, r1
   dd722:	e7d2      	b.n	dd6ca <__udivmoddi4+0x24a>
   dd724:	4660      	mov	r0, ip
   dd726:	e78d      	b.n	dd644 <__udivmoddi4+0x1c4>
   dd728:	4681      	mov	r9, r0
   dd72a:	e7b9      	b.n	dd6a0 <__udivmoddi4+0x220>
   dd72c:	4666      	mov	r6, ip
   dd72e:	e775      	b.n	dd61c <__udivmoddi4+0x19c>
   dd730:	4630      	mov	r0, r6
   dd732:	e74a      	b.n	dd5ca <__udivmoddi4+0x14a>
   dd734:	f1ac 0c02 	sub.w	ip, ip, #2
   dd738:	4439      	add	r1, r7
   dd73a:	e713      	b.n	dd564 <__udivmoddi4+0xe4>
   dd73c:	3802      	subs	r0, #2
   dd73e:	443c      	add	r4, r7
   dd740:	e724      	b.n	dd58c <__udivmoddi4+0x10c>
   dd742:	bf00      	nop

000dd744 <__aeabi_idiv0>:
   dd744:	4770      	bx	lr
   dd746:	bf00      	nop

000dd748 <asctime_r>:
   dd748:	b510      	push	{r4, lr}
   dd74a:	460c      	mov	r4, r1
   dd74c:	6941      	ldr	r1, [r0, #20]
   dd74e:	6903      	ldr	r3, [r0, #16]
   dd750:	6982      	ldr	r2, [r0, #24]
   dd752:	b086      	sub	sp, #24
   dd754:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dd758:	9104      	str	r1, [sp, #16]
   dd75a:	6801      	ldr	r1, [r0, #0]
   dd75c:	9103      	str	r1, [sp, #12]
   dd75e:	6841      	ldr	r1, [r0, #4]
   dd760:	9102      	str	r1, [sp, #8]
   dd762:	6881      	ldr	r1, [r0, #8]
   dd764:	9101      	str	r1, [sp, #4]
   dd766:	68c1      	ldr	r1, [r0, #12]
   dd768:	9100      	str	r1, [sp, #0]
   dd76a:	4907      	ldr	r1, [pc, #28]	; (dd788 <asctime_r+0x40>)
   dd76c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dd770:	440b      	add	r3, r1
   dd772:	4906      	ldr	r1, [pc, #24]	; (dd78c <asctime_r+0x44>)
   dd774:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dd778:	440a      	add	r2, r1
   dd77a:	4620      	mov	r0, r4
   dd77c:	4904      	ldr	r1, [pc, #16]	; (dd790 <asctime_r+0x48>)
   dd77e:	f7fc f84d 	bl	d981c <siprintf>
   dd782:	4620      	mov	r0, r4
   dd784:	b006      	add	sp, #24
   dd786:	bd10      	pop	{r4, pc}
   dd788:	000dffb1 	.word	0x000dffb1
   dd78c:	000dff9c 	.word	0x000dff9c
   dd790:	000dff7c 	.word	0x000dff7c

000dd794 <atoi>:
   dd794:	220a      	movs	r2, #10
   dd796:	2100      	movs	r1, #0
   dd798:	f001 ba10 	b.w	debbc <strtol>

000dd79c <atol>:
   dd79c:	220a      	movs	r2, #10
   dd79e:	2100      	movs	r1, #0
   dd7a0:	f001 ba0c 	b.w	debbc <strtol>

000dd7a4 <__cxa_atexit>:
   dd7a4:	b510      	push	{r4, lr}
   dd7a6:	4c05      	ldr	r4, [pc, #20]	; (dd7bc <__cxa_atexit+0x18>)
   dd7a8:	4613      	mov	r3, r2
   dd7aa:	b12c      	cbz	r4, dd7b8 <__cxa_atexit+0x14>
   dd7ac:	460a      	mov	r2, r1
   dd7ae:	4601      	mov	r1, r0
   dd7b0:	2002      	movs	r0, #2
   dd7b2:	f3af 8000 	nop.w
   dd7b6:	bd10      	pop	{r4, pc}
   dd7b8:	4620      	mov	r0, r4
   dd7ba:	e7fc      	b.n	dd7b6 <__cxa_atexit+0x12>
   dd7bc:	00000000 	.word	0x00000000

000dd7c0 <localtime_r>:
   dd7c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   dd7c4:	4607      	mov	r7, r0
   dd7c6:	9101      	str	r1, [sp, #4]
   dd7c8:	f001 fd18 	bl	df1fc <__gettzinfo>
   dd7cc:	9901      	ldr	r1, [sp, #4]
   dd7ce:	4680      	mov	r8, r0
   dd7d0:	4638      	mov	r0, r7
   dd7d2:	f001 fd17 	bl	df204 <gmtime_r>
   dd7d6:	6943      	ldr	r3, [r0, #20]
   dd7d8:	079a      	lsls	r2, r3, #30
   dd7da:	4604      	mov	r4, r0
   dd7dc:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   dd7e0:	d105      	bne.n	dd7ee <localtime_r+0x2e>
   dd7e2:	2264      	movs	r2, #100	; 0x64
   dd7e4:	fb96 f3f2 	sdiv	r3, r6, r2
   dd7e8:	fb02 6313 	mls	r3, r2, r3, r6
   dd7ec:	bb7b      	cbnz	r3, dd84e <localtime_r+0x8e>
   dd7ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dd7f2:	fb96 f5f3 	sdiv	r5, r6, r3
   dd7f6:	fb03 6515 	mls	r5, r3, r5, r6
   dd7fa:	fab5 f585 	clz	r5, r5
   dd7fe:	096d      	lsrs	r5, r5, #5
   dd800:	4b68      	ldr	r3, [pc, #416]	; (dd9a4 <localtime_r+0x1e4>)
   dd802:	2230      	movs	r2, #48	; 0x30
   dd804:	fb02 3505 	mla	r5, r2, r5, r3
   dd808:	f001 fb10 	bl	dee2c <__tz_lock>
   dd80c:	f001 fb1a 	bl	dee44 <_tzset_unlocked>
   dd810:	4b65      	ldr	r3, [pc, #404]	; (dd9a8 <localtime_r+0x1e8>)
   dd812:	681b      	ldr	r3, [r3, #0]
   dd814:	b353      	cbz	r3, dd86c <localtime_r+0xac>
   dd816:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dd81a:	42b3      	cmp	r3, r6
   dd81c:	d119      	bne.n	dd852 <localtime_r+0x92>
   dd81e:	f8d8 1000 	ldr.w	r1, [r8]
   dd822:	e9d7 6700 	ldrd	r6, r7, [r7]
   dd826:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
   dd82a:	b9d1      	cbnz	r1, dd862 <localtime_r+0xa2>
   dd82c:	4296      	cmp	r6, r2
   dd82e:	eb77 0303 	sbcs.w	r3, r7, r3
   dd832:	da23      	bge.n	dd87c <localtime_r+0xbc>
   dd834:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   dd838:	4296      	cmp	r6, r2
   dd83a:	eb77 0303 	sbcs.w	r3, r7, r3
   dd83e:	bfb4      	ite	lt
   dd840:	2301      	movlt	r3, #1
   dd842:	2300      	movge	r3, #0
   dd844:	6223      	str	r3, [r4, #32]
   dd846:	db1b      	blt.n	dd880 <localtime_r+0xc0>
   dd848:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   dd84c:	e01a      	b.n	dd884 <localtime_r+0xc4>
   dd84e:	2501      	movs	r5, #1
   dd850:	e7d6      	b.n	dd800 <localtime_r+0x40>
   dd852:	4630      	mov	r0, r6
   dd854:	f001 fa42 	bl	decdc <__tzcalc_limits>
   dd858:	2800      	cmp	r0, #0
   dd85a:	d1e0      	bne.n	dd81e <localtime_r+0x5e>
   dd85c:	f04f 33ff 	mov.w	r3, #4294967295
   dd860:	e004      	b.n	dd86c <localtime_r+0xac>
   dd862:	4296      	cmp	r6, r2
   dd864:	eb77 0303 	sbcs.w	r3, r7, r3
   dd868:	da02      	bge.n	dd870 <localtime_r+0xb0>
   dd86a:	2300      	movs	r3, #0
   dd86c:	6223      	str	r3, [r4, #32]
   dd86e:	e7eb      	b.n	dd848 <localtime_r+0x88>
   dd870:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   dd874:	4296      	cmp	r6, r2
   dd876:	eb77 0303 	sbcs.w	r3, r7, r3
   dd87a:	daf6      	bge.n	dd86a <localtime_r+0xaa>
   dd87c:	2301      	movs	r3, #1
   dd87e:	6223      	str	r3, [r4, #32]
   dd880:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
   dd884:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dd888:	203c      	movs	r0, #60	; 0x3c
   dd88a:	fb91 f6f3 	sdiv	r6, r1, r3
   dd88e:	fb03 1316 	mls	r3, r3, r6, r1
   dd892:	6861      	ldr	r1, [r4, #4]
   dd894:	fb93 f2f0 	sdiv	r2, r3, r0
   dd898:	fb00 3012 	mls	r0, r0, r2, r3
   dd89c:	6823      	ldr	r3, [r4, #0]
   dd89e:	1a89      	subs	r1, r1, r2
   dd8a0:	68a2      	ldr	r2, [r4, #8]
   dd8a2:	6061      	str	r1, [r4, #4]
   dd8a4:	1a1b      	subs	r3, r3, r0
   dd8a6:	1b92      	subs	r2, r2, r6
   dd8a8:	2b3b      	cmp	r3, #59	; 0x3b
   dd8aa:	6023      	str	r3, [r4, #0]
   dd8ac:	60a2      	str	r2, [r4, #8]
   dd8ae:	dd35      	ble.n	dd91c <localtime_r+0x15c>
   dd8b0:	3101      	adds	r1, #1
   dd8b2:	6061      	str	r1, [r4, #4]
   dd8b4:	3b3c      	subs	r3, #60	; 0x3c
   dd8b6:	6023      	str	r3, [r4, #0]
   dd8b8:	6863      	ldr	r3, [r4, #4]
   dd8ba:	2b3b      	cmp	r3, #59	; 0x3b
   dd8bc:	dd34      	ble.n	dd928 <localtime_r+0x168>
   dd8be:	3201      	adds	r2, #1
   dd8c0:	60a2      	str	r2, [r4, #8]
   dd8c2:	3b3c      	subs	r3, #60	; 0x3c
   dd8c4:	6063      	str	r3, [r4, #4]
   dd8c6:	68a3      	ldr	r3, [r4, #8]
   dd8c8:	2b17      	cmp	r3, #23
   dd8ca:	dd33      	ble.n	dd934 <localtime_r+0x174>
   dd8cc:	69e2      	ldr	r2, [r4, #28]
   dd8ce:	3201      	adds	r2, #1
   dd8d0:	61e2      	str	r2, [r4, #28]
   dd8d2:	69a2      	ldr	r2, [r4, #24]
   dd8d4:	3201      	adds	r2, #1
   dd8d6:	2a06      	cmp	r2, #6
   dd8d8:	bfc8      	it	gt
   dd8da:	2200      	movgt	r2, #0
   dd8dc:	61a2      	str	r2, [r4, #24]
   dd8de:	68e2      	ldr	r2, [r4, #12]
   dd8e0:	3b18      	subs	r3, #24
   dd8e2:	3201      	adds	r2, #1
   dd8e4:	60a3      	str	r3, [r4, #8]
   dd8e6:	6923      	ldr	r3, [r4, #16]
   dd8e8:	60e2      	str	r2, [r4, #12]
   dd8ea:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   dd8ee:	428a      	cmp	r2, r1
   dd8f0:	dd0e      	ble.n	dd910 <localtime_r+0x150>
   dd8f2:	2b0b      	cmp	r3, #11
   dd8f4:	eba2 0201 	sub.w	r2, r2, r1
   dd8f8:	60e2      	str	r2, [r4, #12]
   dd8fa:	f103 0201 	add.w	r2, r3, #1
   dd8fe:	bf09      	itett	eq
   dd900:	6963      	ldreq	r3, [r4, #20]
   dd902:	6122      	strne	r2, [r4, #16]
   dd904:	2200      	moveq	r2, #0
   dd906:	3301      	addeq	r3, #1
   dd908:	bf02      	ittt	eq
   dd90a:	6122      	streq	r2, [r4, #16]
   dd90c:	6163      	streq	r3, [r4, #20]
   dd90e:	61e2      	streq	r2, [r4, #28]
   dd910:	f001 fa92 	bl	dee38 <__tz_unlock>
   dd914:	4620      	mov	r0, r4
   dd916:	b002      	add	sp, #8
   dd918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd91c:	2b00      	cmp	r3, #0
   dd91e:	dacb      	bge.n	dd8b8 <localtime_r+0xf8>
   dd920:	3901      	subs	r1, #1
   dd922:	6061      	str	r1, [r4, #4]
   dd924:	333c      	adds	r3, #60	; 0x3c
   dd926:	e7c6      	b.n	dd8b6 <localtime_r+0xf6>
   dd928:	2b00      	cmp	r3, #0
   dd92a:	dacc      	bge.n	dd8c6 <localtime_r+0x106>
   dd92c:	3a01      	subs	r2, #1
   dd92e:	60a2      	str	r2, [r4, #8]
   dd930:	333c      	adds	r3, #60	; 0x3c
   dd932:	e7c7      	b.n	dd8c4 <localtime_r+0x104>
   dd934:	2b00      	cmp	r3, #0
   dd936:	daeb      	bge.n	dd910 <localtime_r+0x150>
   dd938:	69e2      	ldr	r2, [r4, #28]
   dd93a:	3a01      	subs	r2, #1
   dd93c:	61e2      	str	r2, [r4, #28]
   dd93e:	69a2      	ldr	r2, [r4, #24]
   dd940:	3a01      	subs	r2, #1
   dd942:	bf48      	it	mi
   dd944:	2206      	movmi	r2, #6
   dd946:	61a2      	str	r2, [r4, #24]
   dd948:	68e2      	ldr	r2, [r4, #12]
   dd94a:	3318      	adds	r3, #24
   dd94c:	3a01      	subs	r2, #1
   dd94e:	60e2      	str	r2, [r4, #12]
   dd950:	60a3      	str	r3, [r4, #8]
   dd952:	2a00      	cmp	r2, #0
   dd954:	d1dc      	bne.n	dd910 <localtime_r+0x150>
   dd956:	6923      	ldr	r3, [r4, #16]
   dd958:	3b01      	subs	r3, #1
   dd95a:	d405      	bmi.n	dd968 <localtime_r+0x1a8>
   dd95c:	6123      	str	r3, [r4, #16]
   dd95e:	6923      	ldr	r3, [r4, #16]
   dd960:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   dd964:	60e3      	str	r3, [r4, #12]
   dd966:	e7d3      	b.n	dd910 <localtime_r+0x150>
   dd968:	230b      	movs	r3, #11
   dd96a:	6123      	str	r3, [r4, #16]
   dd96c:	6963      	ldr	r3, [r4, #20]
   dd96e:	1e5a      	subs	r2, r3, #1
   dd970:	6162      	str	r2, [r4, #20]
   dd972:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   dd976:	0793      	lsls	r3, r2, #30
   dd978:	d105      	bne.n	dd986 <localtime_r+0x1c6>
   dd97a:	2164      	movs	r1, #100	; 0x64
   dd97c:	fb92 f3f1 	sdiv	r3, r2, r1
   dd980:	fb01 2313 	mls	r3, r1, r3, r2
   dd984:	b963      	cbnz	r3, dd9a0 <localtime_r+0x1e0>
   dd986:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dd98a:	fb92 f3f1 	sdiv	r3, r2, r1
   dd98e:	fb01 2313 	mls	r3, r1, r3, r2
   dd992:	fab3 f383 	clz	r3, r3
   dd996:	095b      	lsrs	r3, r3, #5
   dd998:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   dd99c:	61e3      	str	r3, [r4, #28]
   dd99e:	e7de      	b.n	dd95e <localtime_r+0x19e>
   dd9a0:	2301      	movs	r3, #1
   dd9a2:	e7f9      	b.n	dd998 <localtime_r+0x1d8>
   dd9a4:	000e0038 	.word	0x000e0038
   dd9a8:	2003e7d8 	.word	0x2003e7d8

000dd9ac <memcmp>:
   dd9ac:	b530      	push	{r4, r5, lr}
   dd9ae:	3901      	subs	r1, #1
   dd9b0:	2400      	movs	r4, #0
   dd9b2:	42a2      	cmp	r2, r4
   dd9b4:	d101      	bne.n	dd9ba <memcmp+0xe>
   dd9b6:	2000      	movs	r0, #0
   dd9b8:	e005      	b.n	dd9c6 <memcmp+0x1a>
   dd9ba:	5d03      	ldrb	r3, [r0, r4]
   dd9bc:	3401      	adds	r4, #1
   dd9be:	5d0d      	ldrb	r5, [r1, r4]
   dd9c0:	42ab      	cmp	r3, r5
   dd9c2:	d0f6      	beq.n	dd9b2 <memcmp+0x6>
   dd9c4:	1b58      	subs	r0, r3, r5
   dd9c6:	bd30      	pop	{r4, r5, pc}

000dd9c8 <memcpy>:
   dd9c8:	440a      	add	r2, r1
   dd9ca:	4291      	cmp	r1, r2
   dd9cc:	f100 33ff 	add.w	r3, r0, #4294967295
   dd9d0:	d100      	bne.n	dd9d4 <memcpy+0xc>
   dd9d2:	4770      	bx	lr
   dd9d4:	b510      	push	{r4, lr}
   dd9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   dd9da:	f803 4f01 	strb.w	r4, [r3, #1]!
   dd9de:	4291      	cmp	r1, r2
   dd9e0:	d1f9      	bne.n	dd9d6 <memcpy+0xe>
   dd9e2:	bd10      	pop	{r4, pc}

000dd9e4 <memset>:
   dd9e4:	4402      	add	r2, r0
   dd9e6:	4603      	mov	r3, r0
   dd9e8:	4293      	cmp	r3, r2
   dd9ea:	d100      	bne.n	dd9ee <memset+0xa>
   dd9ec:	4770      	bx	lr
   dd9ee:	f803 1b01 	strb.w	r1, [r3], #1
   dd9f2:	e7f9      	b.n	dd9e8 <memset+0x4>

000dd9f4 <validate_structure>:
   dd9f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   dd9f6:	6801      	ldr	r1, [r0, #0]
   dd9f8:	293b      	cmp	r1, #59	; 0x3b
   dd9fa:	4604      	mov	r4, r0
   dd9fc:	d911      	bls.n	dda22 <validate_structure+0x2e>
   dd9fe:	223c      	movs	r2, #60	; 0x3c
   dda00:	4668      	mov	r0, sp
   dda02:	f001 fba5 	bl	df150 <div>
   dda06:	9a01      	ldr	r2, [sp, #4]
   dda08:	6863      	ldr	r3, [r4, #4]
   dda0a:	9900      	ldr	r1, [sp, #0]
   dda0c:	2a00      	cmp	r2, #0
   dda0e:	440b      	add	r3, r1
   dda10:	6063      	str	r3, [r4, #4]
   dda12:	bfbb      	ittet	lt
   dda14:	323c      	addlt	r2, #60	; 0x3c
   dda16:	f103 33ff 	addlt.w	r3, r3, #4294967295
   dda1a:	6022      	strge	r2, [r4, #0]
   dda1c:	6022      	strlt	r2, [r4, #0]
   dda1e:	bfb8      	it	lt
   dda20:	6063      	strlt	r3, [r4, #4]
   dda22:	6861      	ldr	r1, [r4, #4]
   dda24:	293b      	cmp	r1, #59	; 0x3b
   dda26:	d911      	bls.n	dda4c <validate_structure+0x58>
   dda28:	223c      	movs	r2, #60	; 0x3c
   dda2a:	4668      	mov	r0, sp
   dda2c:	f001 fb90 	bl	df150 <div>
   dda30:	9a01      	ldr	r2, [sp, #4]
   dda32:	68a3      	ldr	r3, [r4, #8]
   dda34:	9900      	ldr	r1, [sp, #0]
   dda36:	2a00      	cmp	r2, #0
   dda38:	440b      	add	r3, r1
   dda3a:	60a3      	str	r3, [r4, #8]
   dda3c:	bfbb      	ittet	lt
   dda3e:	323c      	addlt	r2, #60	; 0x3c
   dda40:	f103 33ff 	addlt.w	r3, r3, #4294967295
   dda44:	6062      	strge	r2, [r4, #4]
   dda46:	6062      	strlt	r2, [r4, #4]
   dda48:	bfb8      	it	lt
   dda4a:	60a3      	strlt	r3, [r4, #8]
   dda4c:	68a1      	ldr	r1, [r4, #8]
   dda4e:	2917      	cmp	r1, #23
   dda50:	d911      	bls.n	dda76 <validate_structure+0x82>
   dda52:	2218      	movs	r2, #24
   dda54:	4668      	mov	r0, sp
   dda56:	f001 fb7b 	bl	df150 <div>
   dda5a:	9a01      	ldr	r2, [sp, #4]
   dda5c:	68e3      	ldr	r3, [r4, #12]
   dda5e:	9900      	ldr	r1, [sp, #0]
   dda60:	2a00      	cmp	r2, #0
   dda62:	440b      	add	r3, r1
   dda64:	60e3      	str	r3, [r4, #12]
   dda66:	bfbb      	ittet	lt
   dda68:	3218      	addlt	r2, #24
   dda6a:	f103 33ff 	addlt.w	r3, r3, #4294967295
   dda6e:	60a2      	strge	r2, [r4, #8]
   dda70:	60a2      	strlt	r2, [r4, #8]
   dda72:	bfb8      	it	lt
   dda74:	60e3      	strlt	r3, [r4, #12]
   dda76:	6921      	ldr	r1, [r4, #16]
   dda78:	290b      	cmp	r1, #11
   dda7a:	d911      	bls.n	ddaa0 <validate_structure+0xac>
   dda7c:	220c      	movs	r2, #12
   dda7e:	4668      	mov	r0, sp
   dda80:	f001 fb66 	bl	df150 <div>
   dda84:	9a01      	ldr	r2, [sp, #4]
   dda86:	6963      	ldr	r3, [r4, #20]
   dda88:	9900      	ldr	r1, [sp, #0]
   dda8a:	2a00      	cmp	r2, #0
   dda8c:	440b      	add	r3, r1
   dda8e:	6163      	str	r3, [r4, #20]
   dda90:	bfbb      	ittet	lt
   dda92:	320c      	addlt	r2, #12
   dda94:	f103 33ff 	addlt.w	r3, r3, #4294967295
   dda98:	6122      	strge	r2, [r4, #16]
   dda9a:	6122      	strlt	r2, [r4, #16]
   dda9c:	bfb8      	it	lt
   dda9e:	6163      	strlt	r3, [r4, #20]
   ddaa0:	6963      	ldr	r3, [r4, #20]
   ddaa2:	0799      	lsls	r1, r3, #30
   ddaa4:	d120      	bne.n	ddae8 <validate_structure+0xf4>
   ddaa6:	2164      	movs	r1, #100	; 0x64
   ddaa8:	fb93 f2f1 	sdiv	r2, r3, r1
   ddaac:	fb01 3212 	mls	r2, r1, r2, r3
   ddab0:	b9e2      	cbnz	r2, ddaec <validate_structure+0xf8>
   ddab2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   ddab6:	f44f 71c8 	mov.w	r1, #400	; 0x190
   ddaba:	fb93 f2f1 	sdiv	r2, r3, r1
   ddabe:	fb01 3312 	mls	r3, r1, r2, r3
   ddac2:	2b00      	cmp	r3, #0
   ddac4:	bf14      	ite	ne
   ddac6:	231c      	movne	r3, #28
   ddac8:	231d      	moveq	r3, #29
   ddaca:	68e2      	ldr	r2, [r4, #12]
   ddacc:	2a00      	cmp	r2, #0
   ddace:	dc0f      	bgt.n	ddaf0 <validate_structure+0xfc>
   ddad0:	4f33      	ldr	r7, [pc, #204]	; (ddba0 <validate_structure+0x1ac>)
   ddad2:	260b      	movs	r6, #11
   ddad4:	2064      	movs	r0, #100	; 0x64
   ddad6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   ddada:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   ddade:	f1bc 0f00 	cmp.w	ip, #0
   ddae2:	dd31      	ble.n	ddb48 <validate_structure+0x154>
   ddae4:	b003      	add	sp, #12
   ddae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ddae8:	231c      	movs	r3, #28
   ddaea:	e7ee      	b.n	ddaca <validate_structure+0xd6>
   ddaec:	231d      	movs	r3, #29
   ddaee:	e7ec      	b.n	ddaca <validate_structure+0xd6>
   ddaf0:	4f2b      	ldr	r7, [pc, #172]	; (ddba0 <validate_structure+0x1ac>)
   ddaf2:	f04f 0c00 	mov.w	ip, #0
   ddaf6:	2564      	movs	r5, #100	; 0x64
   ddaf8:	f44f 76c8 	mov.w	r6, #400	; 0x190
   ddafc:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   ddb00:	2a01      	cmp	r2, #1
   ddb02:	bf14      	ite	ne
   ddb04:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
   ddb08:	4618      	moveq	r0, r3
   ddb0a:	4281      	cmp	r1, r0
   ddb0c:	ddea      	ble.n	ddae4 <validate_structure+0xf0>
   ddb0e:	3201      	adds	r2, #1
   ddb10:	1a09      	subs	r1, r1, r0
   ddb12:	2a0c      	cmp	r2, #12
   ddb14:	60e1      	str	r1, [r4, #12]
   ddb16:	6122      	str	r2, [r4, #16]
   ddb18:	d1f0      	bne.n	ddafc <validate_structure+0x108>
   ddb1a:	6963      	ldr	r3, [r4, #20]
   ddb1c:	1c5a      	adds	r2, r3, #1
   ddb1e:	0791      	lsls	r1, r2, #30
   ddb20:	e9c4 c204 	strd	ip, r2, [r4, #16]
   ddb24:	d137      	bne.n	ddb96 <validate_structure+0x1a2>
   ddb26:	fb92 f1f5 	sdiv	r1, r2, r5
   ddb2a:	fb05 2211 	mls	r2, r5, r1, r2
   ddb2e:	2a00      	cmp	r2, #0
   ddb30:	d133      	bne.n	ddb9a <validate_structure+0x1a6>
   ddb32:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   ddb36:	fb93 f2f6 	sdiv	r2, r3, r6
   ddb3a:	fb06 3312 	mls	r3, r6, r2, r3
   ddb3e:	2b00      	cmp	r3, #0
   ddb40:	bf14      	ite	ne
   ddb42:	231c      	movne	r3, #28
   ddb44:	231d      	moveq	r3, #29
   ddb46:	e7d9      	b.n	ddafc <validate_structure+0x108>
   ddb48:	6921      	ldr	r1, [r4, #16]
   ddb4a:	3901      	subs	r1, #1
   ddb4c:	6121      	str	r1, [r4, #16]
   ddb4e:	3101      	adds	r1, #1
   ddb50:	d114      	bne.n	ddb7c <validate_structure+0x188>
   ddb52:	6963      	ldr	r3, [r4, #20]
   ddb54:	1e59      	subs	r1, r3, #1
   ddb56:	078a      	lsls	r2, r1, #30
   ddb58:	e9c4 6104 	strd	r6, r1, [r4, #16]
   ddb5c:	d117      	bne.n	ddb8e <validate_structure+0x19a>
   ddb5e:	fb91 f2f0 	sdiv	r2, r1, r0
   ddb62:	fb00 1112 	mls	r1, r0, r2, r1
   ddb66:	b9a1      	cbnz	r1, ddb92 <validate_structure+0x19e>
   ddb68:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   ddb6c:	fb93 f2f5 	sdiv	r2, r3, r5
   ddb70:	fb05 3312 	mls	r3, r5, r2, r3
   ddb74:	2b00      	cmp	r3, #0
   ddb76:	bf14      	ite	ne
   ddb78:	231c      	movne	r3, #28
   ddb7a:	231d      	moveq	r3, #29
   ddb7c:	6922      	ldr	r2, [r4, #16]
   ddb7e:	2a01      	cmp	r2, #1
   ddb80:	bf14      	ite	ne
   ddb82:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   ddb86:	461a      	moveq	r2, r3
   ddb88:	4462      	add	r2, ip
   ddb8a:	60e2      	str	r2, [r4, #12]
   ddb8c:	e7a5      	b.n	ddada <validate_structure+0xe6>
   ddb8e:	231c      	movs	r3, #28
   ddb90:	e7f4      	b.n	ddb7c <validate_structure+0x188>
   ddb92:	231d      	movs	r3, #29
   ddb94:	e7f2      	b.n	ddb7c <validate_structure+0x188>
   ddb96:	231c      	movs	r3, #28
   ddb98:	e7b0      	b.n	ddafc <validate_structure+0x108>
   ddb9a:	231d      	movs	r3, #29
   ddb9c:	e7ae      	b.n	ddafc <validate_structure+0x108>
   ddb9e:	bf00      	nop
   ddba0:	000dffd8 	.word	0x000dffd8

000ddba4 <mktime>:
   ddba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddba8:	b08b      	sub	sp, #44	; 0x2c
   ddbaa:	4605      	mov	r5, r0
   ddbac:	f001 fb26 	bl	df1fc <__gettzinfo>
   ddbb0:	4607      	mov	r7, r0
   ddbb2:	4628      	mov	r0, r5
   ddbb4:	f7ff ff1e 	bl	dd9f4 <validate_structure>
   ddbb8:	e9d5 2300 	ldrd	r2, r3, [r5]
   ddbbc:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   ddbc0:	68a8      	ldr	r0, [r5, #8]
   ddbc2:	696e      	ldr	r6, [r5, #20]
   ddbc4:	fb0a 2303 	mla	r3, sl, r3, r2
   ddbc8:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
   ddbcc:	fb0a 3a00 	mla	sl, sl, r0, r3
   ddbd0:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
   ddbd4:	4ac3      	ldr	r2, [pc, #780]	; (ddee4 <mktime+0x340>)
   ddbd6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   ddbda:	3c01      	subs	r4, #1
   ddbdc:	2b01      	cmp	r3, #1
   ddbde:	4414      	add	r4, r2
   ddbe0:	dd11      	ble.n	ddc06 <mktime+0x62>
   ddbe2:	07b1      	lsls	r1, r6, #30
   ddbe4:	d10f      	bne.n	ddc06 <mktime+0x62>
   ddbe6:	2264      	movs	r2, #100	; 0x64
   ddbe8:	fb96 f3f2 	sdiv	r3, r6, r2
   ddbec:	fb02 6313 	mls	r3, r2, r3, r6
   ddbf0:	b943      	cbnz	r3, ddc04 <mktime+0x60>
   ddbf2:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   ddbf6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   ddbfa:	fb91 f3f2 	sdiv	r3, r1, r2
   ddbfe:	fb02 1313 	mls	r3, r2, r3, r1
   ddc02:	b903      	cbnz	r3, ddc06 <mktime+0x62>
   ddc04:	3401      	adds	r4, #1
   ddc06:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
   ddc0a:	3310      	adds	r3, #16
   ddc0c:	f644 6220 	movw	r2, #20000	; 0x4e20
   ddc10:	4293      	cmp	r3, r2
   ddc12:	61ec      	str	r4, [r5, #28]
   ddc14:	f200 8161 	bhi.w	ddeda <mktime+0x336>
   ddc18:	2e46      	cmp	r6, #70	; 0x46
   ddc1a:	dd77      	ble.n	ddd0c <mktime+0x168>
   ddc1c:	2346      	movs	r3, #70	; 0x46
   ddc1e:	f240 1e6d 	movw	lr, #365	; 0x16d
   ddc22:	2164      	movs	r1, #100	; 0x64
   ddc24:	f44f 70c8 	mov.w	r0, #400	; 0x190
   ddc28:	079a      	lsls	r2, r3, #30
   ddc2a:	d169      	bne.n	ddd00 <mktime+0x15c>
   ddc2c:	fb93 f2f1 	sdiv	r2, r3, r1
   ddc30:	fb01 3212 	mls	r2, r1, r2, r3
   ddc34:	2a00      	cmp	r2, #0
   ddc36:	d166      	bne.n	ddd06 <mktime+0x162>
   ddc38:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   ddc3c:	fb9c f2f0 	sdiv	r2, ip, r0
   ddc40:	fb00 c212 	mls	r2, r0, r2, ip
   ddc44:	2a00      	cmp	r2, #0
   ddc46:	bf14      	ite	ne
   ddc48:	4672      	movne	r2, lr
   ddc4a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   ddc4e:	3301      	adds	r3, #1
   ddc50:	429e      	cmp	r6, r3
   ddc52:	4414      	add	r4, r2
   ddc54:	d1e8      	bne.n	ddc28 <mktime+0x84>
   ddc56:	4ba4      	ldr	r3, [pc, #656]	; (ddee8 <mktime+0x344>)
   ddc58:	ea4f 7bea 	mov.w	fp, sl, asr #31
   ddc5c:	fbc3 ab04 	smlal	sl, fp, r3, r4
   ddc60:	f001 f8e4 	bl	dee2c <__tz_lock>
   ddc64:	f001 f8ee 	bl	dee44 <_tzset_unlocked>
   ddc68:	4ba0      	ldr	r3, [pc, #640]	; (ddeec <mktime+0x348>)
   ddc6a:	f8d3 9000 	ldr.w	r9, [r3]
   ddc6e:	f1b9 0f00 	cmp.w	r9, #0
   ddc72:	d03f      	beq.n	ddcf4 <mktime+0x150>
   ddc74:	f8d5 9020 	ldr.w	r9, [r5, #32]
   ddc78:	6968      	ldr	r0, [r5, #20]
   ddc7a:	687b      	ldr	r3, [r7, #4]
   ddc7c:	f1b9 0f01 	cmp.w	r9, #1
   ddc80:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   ddc84:	46c8      	mov	r8, r9
   ddc86:	bfa8      	it	ge
   ddc88:	f04f 0801 	movge.w	r8, #1
   ddc8c:	4283      	cmp	r3, r0
   ddc8e:	d17f      	bne.n	ddd90 <mktime+0x1ec>
   ddc90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   ddc92:	4619      	mov	r1, r3
   ddc94:	17da      	asrs	r2, r3, #31
   ddc96:	e9cd 1200 	strd	r1, r2, [sp]
   ddc9a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
   ddc9e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   ddca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   ddca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   ddca8:	1a80      	subs	r0, r0, r2
   ddcaa:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
   ddcae:	4582      	cmp	sl, r0
   ddcb0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   ddcb4:	eb7b 0101 	sbcs.w	r1, fp, r1
   ddcb8:	da71      	bge.n	ddd9e <mktime+0x1fa>
   ddcba:	9800      	ldr	r0, [sp, #0]
   ddcbc:	6a39      	ldr	r1, [r7, #32]
   ddcbe:	1a09      	subs	r1, r1, r0
   ddcc0:	9104      	str	r1, [sp, #16]
   ddcc2:	9801      	ldr	r0, [sp, #4]
   ddcc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   ddcc6:	eb61 0100 	sbc.w	r1, r1, r0
   ddcca:	9105      	str	r1, [sp, #20]
   ddccc:	6839      	ldr	r1, [r7, #0]
   ddcce:	2900      	cmp	r1, #0
   ddcd0:	d075      	beq.n	dddbe <mktime+0x21a>
   ddcd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ddcd6:	4582      	cmp	sl, r0
   ddcd8:	eb7b 0101 	sbcs.w	r1, fp, r1
   ddcdc:	db05      	blt.n	ddcea <mktime+0x146>
   ddcde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   ddce2:	4582      	cmp	sl, r0
   ddce4:	eb7b 0101 	sbcs.w	r1, fp, r1
   ddce8:	db6f      	blt.n	dddca <mktime+0x226>
   ddcea:	f1b9 0f00 	cmp.w	r9, #0
   ddcee:	f04f 0900 	mov.w	r9, #0
   ddcf2:	da6f      	bge.n	dddd4 <mktime+0x230>
   ddcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   ddcf6:	eb1a 0a03 	adds.w	sl, sl, r3
   ddcfa:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   ddcfe:	e0ae      	b.n	dde5e <mktime+0x2ba>
   ddd00:	f240 126d 	movw	r2, #365	; 0x16d
   ddd04:	e7a3      	b.n	ddc4e <mktime+0xaa>
   ddd06:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   ddd0a:	e7a0      	b.n	ddc4e <mktime+0xaa>
   ddd0c:	d0a3      	beq.n	ddc56 <mktime+0xb2>
   ddd0e:	2345      	movs	r3, #69	; 0x45
   ddd10:	f240 1e6d 	movw	lr, #365	; 0x16d
   ddd14:	2164      	movs	r1, #100	; 0x64
   ddd16:	f44f 70c8 	mov.w	r0, #400	; 0x190
   ddd1a:	e012      	b.n	ddd42 <mktime+0x19e>
   ddd1c:	bb62      	cbnz	r2, ddd78 <mktime+0x1d4>
   ddd1e:	fb93 f2f1 	sdiv	r2, r3, r1
   ddd22:	fb01 3212 	mls	r2, r1, r2, r3
   ddd26:	bb52      	cbnz	r2, ddd7e <mktime+0x1da>
   ddd28:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   ddd2c:	fb9c f2f0 	sdiv	r2, ip, r0
   ddd30:	fb00 c212 	mls	r2, r0, r2, ip
   ddd34:	2a00      	cmp	r2, #0
   ddd36:	bf14      	ite	ne
   ddd38:	4672      	movne	r2, lr
   ddd3a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   ddd3e:	1aa4      	subs	r4, r4, r2
   ddd40:	3b01      	subs	r3, #1
   ddd42:	429e      	cmp	r6, r3
   ddd44:	f003 0203 	and.w	r2, r3, #3
   ddd48:	dbe8      	blt.n	ddd1c <mktime+0x178>
   ddd4a:	b9da      	cbnz	r2, ddd84 <mktime+0x1e0>
   ddd4c:	2264      	movs	r2, #100	; 0x64
   ddd4e:	fb96 f3f2 	sdiv	r3, r6, r2
   ddd52:	fb02 6313 	mls	r3, r2, r3, r6
   ddd56:	b9c3      	cbnz	r3, ddd8a <mktime+0x1e6>
   ddd58:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   ddd5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   ddd60:	fb91 f3f2 	sdiv	r3, r1, r2
   ddd64:	fb02 1313 	mls	r3, r2, r3, r1
   ddd68:	2b00      	cmp	r3, #0
   ddd6a:	f240 136d 	movw	r3, #365	; 0x16d
   ddd6e:	bf08      	it	eq
   ddd70:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   ddd74:	1ae4      	subs	r4, r4, r3
   ddd76:	e76e      	b.n	ddc56 <mktime+0xb2>
   ddd78:	f240 126d 	movw	r2, #365	; 0x16d
   ddd7c:	e7df      	b.n	ddd3e <mktime+0x19a>
   ddd7e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   ddd82:	e7dc      	b.n	ddd3e <mktime+0x19a>
   ddd84:	f240 136d 	movw	r3, #365	; 0x16d
   ddd88:	e7f4      	b.n	ddd74 <mktime+0x1d0>
   ddd8a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   ddd8e:	e7f1      	b.n	ddd74 <mktime+0x1d0>
   ddd90:	f000 ffa4 	bl	decdc <__tzcalc_limits>
   ddd94:	2800      	cmp	r0, #0
   ddd96:	f47f af7b 	bne.w	ddc90 <mktime+0xec>
   ddd9a:	46c1      	mov	r9, r8
   ddd9c:	e054      	b.n	dde48 <mktime+0x2a4>
   ddd9e:	9800      	ldr	r0, [sp, #0]
   ddda0:	9902      	ldr	r1, [sp, #8]
   ddda2:	1a09      	subs	r1, r1, r0
   ddda4:	9108      	str	r1, [sp, #32]
   ddda6:	9801      	ldr	r0, [sp, #4]
   ddda8:	9903      	ldr	r1, [sp, #12]
   dddaa:	eb61 0100 	sbc.w	r1, r1, r0
   dddae:	9109      	str	r1, [sp, #36]	; 0x24
   dddb0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   dddb4:	4582      	cmp	sl, r0
   dddb6:	eb7b 0101 	sbcs.w	r1, fp, r1
   dddba:	dbee      	blt.n	ddd9a <mktime+0x1f6>
   dddbc:	e77d      	b.n	ddcba <mktime+0x116>
   dddbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dddc2:	4582      	cmp	sl, r0
   dddc4:	eb7b 0101 	sbcs.w	r1, fp, r1
   dddc8:	db89      	blt.n	ddcde <mktime+0x13a>
   dddca:	f1b9 0f00 	cmp.w	r9, #0
   dddce:	db3f      	blt.n	dde50 <mktime+0x2ac>
   dddd0:	f04f 0901 	mov.w	r9, #1
   dddd4:	ea88 0809 	eor.w	r8, r8, r9
   dddd8:	f1b8 0f01 	cmp.w	r8, #1
   ddddc:	d134      	bne.n	dde48 <mktime+0x2a4>
   dddde:	f1b9 0f00 	cmp.w	r9, #0
   ddde2:	d04f      	beq.n	dde84 <mktime+0x2e0>
   ddde4:	1ad3      	subs	r3, r2, r3
   ddde6:	682a      	ldr	r2, [r5, #0]
   ddde8:	f8d5 800c 	ldr.w	r8, [r5, #12]
   dddec:	441a      	add	r2, r3
   dddee:	eb1a 0a03 	adds.w	sl, sl, r3
   dddf2:	602a      	str	r2, [r5, #0]
   dddf4:	4628      	mov	r0, r5
   dddf6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   dddfa:	f7ff fdfb 	bl	dd9f4 <validate_structure>
   dddfe:	68ea      	ldr	r2, [r5, #12]
   dde00:	ebb2 0208 	subs.w	r2, r2, r8
   dde04:	d020      	beq.n	dde48 <mktime+0x2a4>
   dde06:	2a01      	cmp	r2, #1
   dde08:	dc3e      	bgt.n	dde88 <mktime+0x2e4>
   dde0a:	1c90      	adds	r0, r2, #2
   dde0c:	bfd8      	it	le
   dde0e:	2201      	movle	r2, #1
   dde10:	69eb      	ldr	r3, [r5, #28]
   dde12:	18d3      	adds	r3, r2, r3
   dde14:	4414      	add	r4, r2
   dde16:	d540      	bpl.n	dde9a <mktime+0x2f6>
   dde18:	1e72      	subs	r2, r6, #1
   dde1a:	0791      	lsls	r1, r2, #30
   dde1c:	d137      	bne.n	dde8e <mktime+0x2ea>
   dde1e:	2164      	movs	r1, #100	; 0x64
   dde20:	fb92 f3f1 	sdiv	r3, r2, r1
   dde24:	fb01 2313 	mls	r3, r1, r3, r2
   dde28:	bba3      	cbnz	r3, dde94 <mktime+0x2f0>
   dde2a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
   dde2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dde32:	fb96 f3f2 	sdiv	r3, r6, r2
   dde36:	fb02 6613 	mls	r6, r2, r3, r6
   dde3a:	2e00      	cmp	r6, #0
   dde3c:	f240 136d 	movw	r3, #365	; 0x16d
   dde40:	bf18      	it	ne
   dde42:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   dde46:	61eb      	str	r3, [r5, #28]
   dde48:	f1b9 0f01 	cmp.w	r9, #1
   dde4c:	f47f af52 	bne.w	ddcf4 <mktime+0x150>
   dde50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   dde52:	eb1a 0a03 	adds.w	sl, sl, r3
   dde56:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   dde5a:	f04f 0901 	mov.w	r9, #1
   dde5e:	f000 ffeb 	bl	dee38 <__tz_unlock>
   dde62:	3404      	adds	r4, #4
   dde64:	2307      	movs	r3, #7
   dde66:	fb94 f3f3 	sdiv	r3, r4, r3
   dde6a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dde6e:	1ae4      	subs	r4, r4, r3
   dde70:	bf48      	it	mi
   dde72:	3407      	addmi	r4, #7
   dde74:	f8c5 9020 	str.w	r9, [r5, #32]
   dde78:	61ac      	str	r4, [r5, #24]
   dde7a:	4650      	mov	r0, sl
   dde7c:	4659      	mov	r1, fp
   dde7e:	b00b      	add	sp, #44	; 0x2c
   dde80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dde84:	1a9b      	subs	r3, r3, r2
   dde86:	e7ae      	b.n	ddde6 <mktime+0x242>
   dde88:	f04f 32ff 	mov.w	r2, #4294967295
   dde8c:	e7c0      	b.n	dde10 <mktime+0x26c>
   dde8e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   dde92:	e7d8      	b.n	dde46 <mktime+0x2a2>
   dde94:	f240 136d 	movw	r3, #365	; 0x16d
   dde98:	e7d5      	b.n	dde46 <mktime+0x2a2>
   dde9a:	07b2      	lsls	r2, r6, #30
   dde9c:	d117      	bne.n	ddece <mktime+0x32a>
   dde9e:	2164      	movs	r1, #100	; 0x64
   ddea0:	fb96 f2f1 	sdiv	r2, r6, r1
   ddea4:	fb01 6212 	mls	r2, r1, r2, r6
   ddea8:	b9a2      	cbnz	r2, dded4 <mktime+0x330>
   ddeaa:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   ddeae:	f44f 71c8 	mov.w	r1, #400	; 0x190
   ddeb2:	fb96 f2f1 	sdiv	r2, r6, r1
   ddeb6:	fb01 6612 	mls	r6, r1, r2, r6
   ddeba:	2e00      	cmp	r6, #0
   ddebc:	f240 126d 	movw	r2, #365	; 0x16d
   ddec0:	bf08      	it	eq
   ddec2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   ddec6:	4293      	cmp	r3, r2
   ddec8:	bfa8      	it	ge
   ddeca:	1a9b      	subge	r3, r3, r2
   ddecc:	e7bb      	b.n	dde46 <mktime+0x2a2>
   ddece:	f240 126d 	movw	r2, #365	; 0x16d
   dded2:	e7f8      	b.n	ddec6 <mktime+0x322>
   dded4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   dded8:	e7f5      	b.n	ddec6 <mktime+0x322>
   ddeda:	f04f 3aff 	mov.w	sl, #4294967295
   ddede:	f04f 3bff 	mov.w	fp, #4294967295
   ddee2:	e7ca      	b.n	dde7a <mktime+0x2d6>
   ddee4:	000e0008 	.word	0x000e0008
   ddee8:	00015180 	.word	0x00015180
   ddeec:	2003e7d8 	.word	0x2003e7d8

000ddef0 <srand>:
   ddef0:	b538      	push	{r3, r4, r5, lr}
   ddef2:	4b0d      	ldr	r3, [pc, #52]	; (ddf28 <srand+0x38>)
   ddef4:	681d      	ldr	r5, [r3, #0]
   ddef6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ddef8:	4604      	mov	r4, r0
   ddefa:	b97b      	cbnz	r3, ddf1c <srand+0x2c>
   ddefc:	2018      	movs	r0, #24
   ddefe:	f7fb fc75 	bl	d97ec <malloc>
   ddf02:	4a0a      	ldr	r2, [pc, #40]	; (ddf2c <srand+0x3c>)
   ddf04:	4b0a      	ldr	r3, [pc, #40]	; (ddf30 <srand+0x40>)
   ddf06:	63a8      	str	r0, [r5, #56]	; 0x38
   ddf08:	e9c0 2300 	strd	r2, r3, [r0]
   ddf0c:	4b09      	ldr	r3, [pc, #36]	; (ddf34 <srand+0x44>)
   ddf0e:	6083      	str	r3, [r0, #8]
   ddf10:	230b      	movs	r3, #11
   ddf12:	8183      	strh	r3, [r0, #12]
   ddf14:	2201      	movs	r2, #1
   ddf16:	2300      	movs	r3, #0
   ddf18:	e9c0 2304 	strd	r2, r3, [r0, #16]
   ddf1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ddf1e:	2200      	movs	r2, #0
   ddf20:	611c      	str	r4, [r3, #16]
   ddf22:	615a      	str	r2, [r3, #20]
   ddf24:	bd38      	pop	{r3, r4, r5, pc}
   ddf26:	bf00      	nop
   ddf28:	2003bf98 	.word	0x2003bf98
   ddf2c:	abcd330e 	.word	0xabcd330e
   ddf30:	e66d1234 	.word	0xe66d1234
   ddf34:	0005deec 	.word	0x0005deec

000ddf38 <strchr>:
   ddf38:	b2c9      	uxtb	r1, r1
   ddf3a:	4603      	mov	r3, r0
   ddf3c:	f810 2b01 	ldrb.w	r2, [r0], #1
   ddf40:	b11a      	cbz	r2, ddf4a <strchr+0x12>
   ddf42:	428a      	cmp	r2, r1
   ddf44:	d1f9      	bne.n	ddf3a <strchr+0x2>
   ddf46:	4618      	mov	r0, r3
   ddf48:	4770      	bx	lr
   ddf4a:	2900      	cmp	r1, #0
   ddf4c:	bf18      	it	ne
   ddf4e:	2300      	movne	r3, #0
   ddf50:	e7f9      	b.n	ddf46 <strchr+0xe>

000ddf52 <strcmp>:
   ddf52:	f810 2b01 	ldrb.w	r2, [r0], #1
   ddf56:	f811 3b01 	ldrb.w	r3, [r1], #1
   ddf5a:	2a01      	cmp	r2, #1
   ddf5c:	bf28      	it	cs
   ddf5e:	429a      	cmpcs	r2, r3
   ddf60:	d0f7      	beq.n	ddf52 <strcmp>
   ddf62:	1ad0      	subs	r0, r2, r3
   ddf64:	4770      	bx	lr

000ddf66 <strcpy>:
   ddf66:	4603      	mov	r3, r0
   ddf68:	f811 2b01 	ldrb.w	r2, [r1], #1
   ddf6c:	f803 2b01 	strb.w	r2, [r3], #1
   ddf70:	2a00      	cmp	r2, #0
   ddf72:	d1f9      	bne.n	ddf68 <strcpy+0x2>
   ddf74:	4770      	bx	lr
	...

000ddf78 <strdup>:
   ddf78:	4b02      	ldr	r3, [pc, #8]	; (ddf84 <strdup+0xc>)
   ddf7a:	4601      	mov	r1, r0
   ddf7c:	6818      	ldr	r0, [r3, #0]
   ddf7e:	f000 b803 	b.w	ddf88 <_strdup_r>
   ddf82:	bf00      	nop
   ddf84:	2003bf98 	.word	0x2003bf98

000ddf88 <_strdup_r>:
   ddf88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ddf8a:	4604      	mov	r4, r0
   ddf8c:	4608      	mov	r0, r1
   ddf8e:	460d      	mov	r5, r1
   ddf90:	f000 fd6c 	bl	dea6c <strlen>
   ddf94:	1c42      	adds	r2, r0, #1
   ddf96:	4611      	mov	r1, r2
   ddf98:	4620      	mov	r0, r4
   ddf9a:	9201      	str	r2, [sp, #4]
   ddf9c:	f7fb fc6e 	bl	d987c <_malloc_r>
   ddfa0:	4604      	mov	r4, r0
   ddfa2:	b118      	cbz	r0, ddfac <_strdup_r+0x24>
   ddfa4:	9a01      	ldr	r2, [sp, #4]
   ddfa6:	4629      	mov	r1, r5
   ddfa8:	f7ff fd0e 	bl	dd9c8 <memcpy>
   ddfac:	4620      	mov	r0, r4
   ddfae:	b003      	add	sp, #12
   ddfb0:	bd30      	pop	{r4, r5, pc}
	...

000ddfb4 <iso_year_adjust>:
   ddfb4:	6941      	ldr	r1, [r0, #20]
   ddfb6:	2900      	cmp	r1, #0
   ddfb8:	f240 736c 	movw	r3, #1900	; 0x76c
   ddfbc:	bfa8      	it	ge
   ddfbe:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   ddfc2:	18ca      	adds	r2, r1, r3
   ddfc4:	078b      	lsls	r3, r1, #30
   ddfc6:	d105      	bne.n	ddfd4 <iso_year_adjust+0x20>
   ddfc8:	2164      	movs	r1, #100	; 0x64
   ddfca:	fb92 f3f1 	sdiv	r3, r2, r1
   ddfce:	fb01 2313 	mls	r3, r1, r3, r2
   ddfd2:	b9db      	cbnz	r3, de00c <iso_year_adjust+0x58>
   ddfd4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   ddfd8:	fb92 f3f1 	sdiv	r3, r2, r1
   ddfdc:	fb01 2313 	mls	r3, r1, r3, r2
   ddfe0:	fab3 f383 	clz	r3, r3
   ddfe4:	095b      	lsrs	r3, r3, #5
   ddfe6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
   ddfea:	0040      	lsls	r0, r0, #1
   ddfec:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   ddff0:	4418      	add	r0, r3
   ddff2:	f241 63a2 	movw	r3, #5794	; 0x16a2
   ddff6:	4298      	cmp	r0, r3
   ddff8:	d03a      	beq.n	de070 <iso_year_adjust+0xbc>
   ddffa:	dc21      	bgt.n	de040 <iso_year_adjust+0x8c>
   ddffc:	2801      	cmp	r0, #1
   ddffe:	dc1a      	bgt.n	de036 <iso_year_adjust+0x82>
   de000:	2800      	cmp	r0, #0
   de002:	bfb4      	ite	lt
   de004:	2000      	movlt	r0, #0
   de006:	f04f 30ff 	movge.w	r0, #4294967295
   de00a:	4770      	bx	lr
   de00c:	2301      	movs	r3, #1
   de00e:	e7ea      	b.n	ddfe6 <iso_year_adjust+0x32>
   de010:	2817      	cmp	r0, #23
   de012:	d813      	bhi.n	de03c <iso_year_adjust+0x88>
   de014:	e8df f000 	tbb	[pc, r0]
   de018:	0c0c0c0c 	.word	0x0c0c0c0c
   de01c:	0c0c1212 	.word	0x0c0c1212
   de020:	12121212 	.word	0x12121212
   de024:	12121212 	.word	0x12121212
   de028:	0c0c1212 	.word	0x0c0c1212
   de02c:	0c0c1212 	.word	0x0c0c1212
   de030:	f04f 30ff 	mov.w	r0, #4294967295
   de034:	4770      	bx	lr
   de036:	380a      	subs	r0, #10
   de038:	2817      	cmp	r0, #23
   de03a:	d9e9      	bls.n	de010 <iso_year_adjust+0x5c>
   de03c:	2000      	movs	r0, #0
   de03e:	4770      	bx	lr
   de040:	f241 63b4 	movw	r3, #5812	; 0x16b4
   de044:	4298      	cmp	r0, r3
   de046:	dc06      	bgt.n	de056 <iso_year_adjust+0xa2>
   de048:	f241 63b1 	movw	r3, #5809	; 0x16b1
   de04c:	4298      	cmp	r0, r3
   de04e:	bfd4      	ite	le
   de050:	2000      	movle	r0, #0
   de052:	2001      	movgt	r0, #1
   de054:	4770      	bx	lr
   de056:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
   de05a:	3802      	subs	r0, #2
   de05c:	2815      	cmp	r0, #21
   de05e:	d8ed      	bhi.n	de03c <iso_year_adjust+0x88>
   de060:	2301      	movs	r3, #1
   de062:	4083      	lsls	r3, r0
   de064:	4803      	ldr	r0, [pc, #12]	; (de074 <iso_year_adjust+0xc0>)
   de066:	4018      	ands	r0, r3
   de068:	3800      	subs	r0, #0
   de06a:	bf18      	it	ne
   de06c:	2001      	movne	r0, #1
   de06e:	4770      	bx	lr
   de070:	2001      	movs	r0, #1
   de072:	4770      	bx	lr
   de074:	002a001f 	.word	0x002a001f

000de078 <__strftime>:
   de078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de07c:	b091      	sub	sp, #68	; 0x44
   de07e:	461d      	mov	r5, r3
   de080:	2300      	movs	r3, #0
   de082:	4681      	mov	r9, r0
   de084:	4688      	mov	r8, r1
   de086:	9304      	str	r3, [sp, #16]
   de088:	461c      	mov	r4, r3
   de08a:	7813      	ldrb	r3, [r2, #0]
   de08c:	2b00      	cmp	r3, #0
   de08e:	f000 84d1 	beq.w	dea34 <__strftime+0x9bc>
   de092:	2b25      	cmp	r3, #37	; 0x25
   de094:	d11b      	bne.n	de0ce <__strftime+0x56>
   de096:	7857      	ldrb	r7, [r2, #1]
   de098:	2f30      	cmp	r7, #48	; 0x30
   de09a:	d024      	beq.n	de0e6 <__strftime+0x6e>
   de09c:	2f2b      	cmp	r7, #43	; 0x2b
   de09e:	d022      	beq.n	de0e6 <__strftime+0x6e>
   de0a0:	f102 0b01 	add.w	fp, r2, #1
   de0a4:	2700      	movs	r7, #0
   de0a6:	f89b 3000 	ldrb.w	r3, [fp]
   de0aa:	3b31      	subs	r3, #49	; 0x31
   de0ac:	2b08      	cmp	r3, #8
   de0ae:	d81d      	bhi.n	de0ec <__strftime+0x74>
   de0b0:	4658      	mov	r0, fp
   de0b2:	220a      	movs	r2, #10
   de0b4:	a908      	add	r1, sp, #32
   de0b6:	f000 fe07 	bl	decc8 <strtoul>
   de0ba:	f8dd b020 	ldr.w	fp, [sp, #32]
   de0be:	4606      	mov	r6, r0
   de0c0:	f89b 3000 	ldrb.w	r3, [fp]
   de0c4:	2b45      	cmp	r3, #69	; 0x45
   de0c6:	d113      	bne.n	de0f0 <__strftime+0x78>
   de0c8:	f10b 0b01 	add.w	fp, fp, #1
   de0cc:	e012      	b.n	de0f4 <__strftime+0x7c>
   de0ce:	f108 31ff 	add.w	r1, r8, #4294967295
   de0d2:	42a1      	cmp	r1, r4
   de0d4:	d802      	bhi.n	de0dc <__strftime+0x64>
   de0d6:	2400      	movs	r4, #0
   de0d8:	f000 bcb2 	b.w	dea40 <__strftime+0x9c8>
   de0dc:	f809 3004 	strb.w	r3, [r9, r4]
   de0e0:	3201      	adds	r2, #1
   de0e2:	3401      	adds	r4, #1
   de0e4:	e7d1      	b.n	de08a <__strftime+0x12>
   de0e6:	f102 0b02 	add.w	fp, r2, #2
   de0ea:	e7dc      	b.n	de0a6 <__strftime+0x2e>
   de0ec:	2600      	movs	r6, #0
   de0ee:	e7e7      	b.n	de0c0 <__strftime+0x48>
   de0f0:	2b4f      	cmp	r3, #79	; 0x4f
   de0f2:	d0e9      	beq.n	de0c8 <__strftime+0x50>
   de0f4:	f89b 0000 	ldrb.w	r0, [fp]
   de0f8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   de0fc:	2b55      	cmp	r3, #85	; 0x55
   de0fe:	d8ea      	bhi.n	de0d6 <__strftime+0x5e>
   de100:	a201      	add	r2, pc, #4	; (adr r2, de108 <__strftime+0x90>)
   de102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   de106:	bf00      	nop
   de108:	000dea27 	.word	0x000dea27
   de10c:	000de0d7 	.word	0x000de0d7
   de110:	000de0d7 	.word	0x000de0d7
   de114:	000de0d7 	.word	0x000de0d7
   de118:	000de0d7 	.word	0x000de0d7
   de11c:	000de0d7 	.word	0x000de0d7
   de120:	000de0d7 	.word	0x000de0d7
   de124:	000de0d7 	.word	0x000de0d7
   de128:	000de0d7 	.word	0x000de0d7
   de12c:	000de0d7 	.word	0x000de0d7
   de130:	000de0d7 	.word	0x000de0d7
   de134:	000de0d7 	.word	0x000de0d7
   de138:	000de0d7 	.word	0x000de0d7
   de13c:	000de0d7 	.word	0x000de0d7
   de140:	000de0d7 	.word	0x000de0d7
   de144:	000de0d7 	.word	0x000de0d7
   de148:	000de0d7 	.word	0x000de0d7
   de14c:	000de0d7 	.word	0x000de0d7
   de150:	000de0d7 	.word	0x000de0d7
   de154:	000de0d7 	.word	0x000de0d7
   de158:	000de0d7 	.word	0x000de0d7
   de15c:	000de0d7 	.word	0x000de0d7
   de160:	000de0d7 	.word	0x000de0d7
   de164:	000de0d7 	.word	0x000de0d7
   de168:	000de0d7 	.word	0x000de0d7
   de16c:	000de0d7 	.word	0x000de0d7
   de170:	000de0d7 	.word	0x000de0d7
   de174:	000de0d7 	.word	0x000de0d7
   de178:	000de29f 	.word	0x000de29f
   de17c:	000de2f9 	.word	0x000de2f9
   de180:	000de36f 	.word	0x000de36f
   de184:	000de409 	.word	0x000de409
   de188:	000de0d7 	.word	0x000de0d7
   de18c:	000de455 	.word	0x000de455
   de190:	000de535 	.word	0x000de535
   de194:	000de637 	.word	0x000de637
   de198:	000de645 	.word	0x000de645
   de19c:	000de0d7 	.word	0x000de0d7
   de1a0:	000de0d7 	.word	0x000de0d7
   de1a4:	000de0d7 	.word	0x000de0d7
   de1a8:	000de675 	.word	0x000de675
   de1ac:	000de0d7 	.word	0x000de0d7
   de1b0:	000de0d7 	.word	0x000de0d7
   de1b4:	000de68d 	.word	0x000de68d
   de1b8:	000de0d7 	.word	0x000de0d7
   de1bc:	000de6db 	.word	0x000de6db
   de1c0:	000de7f1 	.word	0x000de7f1
   de1c4:	000de803 	.word	0x000de803
   de1c8:	000de85b 	.word	0x000de85b
   de1cc:	000de86b 	.word	0x000de86b
   de1d0:	000de8e1 	.word	0x000de8e1
   de1d4:	000de367 	.word	0x000de367
   de1d8:	000de915 	.word	0x000de915
   de1dc:	000de9d3 	.word	0x000de9d3
   de1e0:	000de0d7 	.word	0x000de0d7
   de1e4:	000de0d7 	.word	0x000de0d7
   de1e8:	000de0d7 	.word	0x000de0d7
   de1ec:	000de0d7 	.word	0x000de0d7
   de1f0:	000de0d7 	.word	0x000de0d7
   de1f4:	000de0d7 	.word	0x000de0d7
   de1f8:	000de261 	.word	0x000de261
   de1fc:	000de2cd 	.word	0x000de2cd
   de200:	000de327 	.word	0x000de327
   de204:	000de3e1 	.word	0x000de3e1
   de208:	000de3e1 	.word	0x000de3e1
   de20c:	000de0d7 	.word	0x000de0d7
   de210:	000de49d 	.word	0x000de49d
   de214:	000de2cd 	.word	0x000de2cd
   de218:	000de0d7 	.word	0x000de0d7
   de21c:	000de667 	.word	0x000de667
   de220:	000de637 	.word	0x000de637
   de224:	000de645 	.word	0x000de645
   de228:	000de66f 	.word	0x000de66f
   de22c:	000de679 	.word	0x000de679
   de230:	000de0d7 	.word	0x000de0d7
   de234:	000de68d 	.word	0x000de68d
   de238:	000de0d7 	.word	0x000de0d7
   de23c:	000de357 	.word	0x000de357
   de240:	000de6f1 	.word	0x000de6f1
   de244:	000de7f5 	.word	0x000de7f5
   de248:	000de83d 	.word	0x000de83d
   de24c:	000de0d7 	.word	0x000de0d7
   de250:	000de8d1 	.word	0x000de8d1
   de254:	000de35f 	.word	0x000de35f
   de258:	000de8f9 	.word	0x000de8f9
   de25c:	000de965 	.word	0x000de965
   de260:	69ab      	ldr	r3, [r5, #24]
   de262:	4aa7      	ldr	r2, [pc, #668]	; (de500 <__strftime+0x488>)
   de264:	3318      	adds	r3, #24
   de266:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   de26a:	4630      	mov	r0, r6
   de26c:	f000 fbfe 	bl	dea6c <strlen>
   de270:	3e01      	subs	r6, #1
   de272:	4420      	add	r0, r4
   de274:	f108 33ff 	add.w	r3, r8, #4294967295
   de278:	42a0      	cmp	r0, r4
   de27a:	d107      	bne.n	de28c <__strftime+0x214>
   de27c:	f89b 3000 	ldrb.w	r3, [fp]
   de280:	2b00      	cmp	r3, #0
   de282:	f000 83d7 	beq.w	dea34 <__strftime+0x9bc>
   de286:	f10b 0201 	add.w	r2, fp, #1
   de28a:	e6fe      	b.n	de08a <__strftime+0x12>
   de28c:	42a3      	cmp	r3, r4
   de28e:	f67f af22 	bls.w	de0d6 <__strftime+0x5e>
   de292:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   de296:	f809 2004 	strb.w	r2, [r9, r4]
   de29a:	3401      	adds	r4, #1
   de29c:	e7ec      	b.n	de278 <__strftime+0x200>
   de29e:	69aa      	ldr	r2, [r5, #24]
   de2a0:	4b97      	ldr	r3, [pc, #604]	; (de500 <__strftime+0x488>)
   de2a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   de2a6:	6fde      	ldr	r6, [r3, #124]	; 0x7c
   de2a8:	4630      	mov	r0, r6
   de2aa:	f000 fbdf 	bl	dea6c <strlen>
   de2ae:	3e01      	subs	r6, #1
   de2b0:	4420      	add	r0, r4
   de2b2:	f108 33ff 	add.w	r3, r8, #4294967295
   de2b6:	42a0      	cmp	r0, r4
   de2b8:	d0e0      	beq.n	de27c <__strftime+0x204>
   de2ba:	42a3      	cmp	r3, r4
   de2bc:	f67f af0b 	bls.w	de0d6 <__strftime+0x5e>
   de2c0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   de2c4:	f809 2004 	strb.w	r2, [r9, r4]
   de2c8:	3401      	adds	r4, #1
   de2ca:	e7f4      	b.n	de2b6 <__strftime+0x23e>
   de2cc:	4b8c      	ldr	r3, [pc, #560]	; (de500 <__strftime+0x488>)
   de2ce:	692a      	ldr	r2, [r5, #16]
   de2d0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
   de2d4:	4630      	mov	r0, r6
   de2d6:	f000 fbc9 	bl	dea6c <strlen>
   de2da:	3e01      	subs	r6, #1
   de2dc:	4420      	add	r0, r4
   de2de:	f108 33ff 	add.w	r3, r8, #4294967295
   de2e2:	42a0      	cmp	r0, r4
   de2e4:	d0ca      	beq.n	de27c <__strftime+0x204>
   de2e6:	42a3      	cmp	r3, r4
   de2e8:	f67f aef5 	bls.w	de0d6 <__strftime+0x5e>
   de2ec:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   de2f0:	f809 2004 	strb.w	r2, [r9, r4]
   de2f4:	3401      	adds	r4, #1
   de2f6:	e7f4      	b.n	de2e2 <__strftime+0x26a>
   de2f8:	692b      	ldr	r3, [r5, #16]
   de2fa:	4a81      	ldr	r2, [pc, #516]	; (de500 <__strftime+0x488>)
   de2fc:	330c      	adds	r3, #12
   de2fe:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   de302:	4630      	mov	r0, r6
   de304:	f000 fbb2 	bl	dea6c <strlen>
   de308:	3e01      	subs	r6, #1
   de30a:	4420      	add	r0, r4
   de30c:	f108 33ff 	add.w	r3, r8, #4294967295
   de310:	42a0      	cmp	r0, r4
   de312:	d0b3      	beq.n	de27c <__strftime+0x204>
   de314:	42a3      	cmp	r3, r4
   de316:	f67f aede 	bls.w	de0d6 <__strftime+0x5e>
   de31a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   de31e:	f809 2004 	strb.w	r2, [r9, r4]
   de322:	3401      	adds	r4, #1
   de324:	e7f4      	b.n	de310 <__strftime+0x298>
   de326:	4b76      	ldr	r3, [pc, #472]	; (de500 <__strftime+0x488>)
   de328:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
   de32c:	4630      	mov	r0, r6
   de32e:	f000 fb9d 	bl	dea6c <strlen>
   de332:	7833      	ldrb	r3, [r6, #0]
   de334:	2b00      	cmp	r3, #0
   de336:	d0a1      	beq.n	de27c <__strftime+0x204>
   de338:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   de33a:	9300      	str	r3, [sp, #0]
   de33c:	4632      	mov	r2, r6
   de33e:	462b      	mov	r3, r5
   de340:	eba8 0104 	sub.w	r1, r8, r4
   de344:	eb09 0004 	add.w	r0, r9, r4
   de348:	f7ff fe96 	bl	de078 <__strftime>
   de34c:	2800      	cmp	r0, #0
   de34e:	f77f aec2 	ble.w	de0d6 <__strftime+0x5e>
   de352:	4404      	add	r4, r0
   de354:	e792      	b.n	de27c <__strftime+0x204>
   de356:	4b6a      	ldr	r3, [pc, #424]	; (de500 <__strftime+0x488>)
   de358:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   de35c:	e7e6      	b.n	de32c <__strftime+0x2b4>
   de35e:	4b68      	ldr	r3, [pc, #416]	; (de500 <__strftime+0x488>)
   de360:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
   de364:	e7e2      	b.n	de32c <__strftime+0x2b4>
   de366:	4b66      	ldr	r3, [pc, #408]	; (de500 <__strftime+0x488>)
   de368:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
   de36c:	e7de      	b.n	de32c <__strftime+0x2b4>
   de36e:	4965      	ldr	r1, [pc, #404]	; (de504 <__strftime+0x48c>)
   de370:	f8d5 a014 	ldr.w	sl, [r5, #20]
   de374:	458a      	cmp	sl, r1
   de376:	bfac      	ite	ge
   de378:	2100      	movge	r1, #0
   de37a:	2101      	movlt	r1, #1
   de37c:	f1ba 0f00 	cmp.w	sl, #0
   de380:	db0e      	blt.n	de3a0 <__strftime+0x328>
   de382:	2064      	movs	r0, #100	; 0x64
   de384:	fb9a f0f0 	sdiv	r0, sl, r0
   de388:	3013      	adds	r0, #19
   de38a:	b19f      	cbz	r7, de3b4 <__strftime+0x33c>
   de38c:	2863      	cmp	r0, #99	; 0x63
   de38e:	dd25      	ble.n	de3dc <__strftime+0x364>
   de390:	4a5d      	ldr	r2, [pc, #372]	; (de508 <__strftime+0x490>)
   de392:	4b5e      	ldr	r3, [pc, #376]	; (de50c <__strftime+0x494>)
   de394:	2f2b      	cmp	r7, #43	; 0x2b
   de396:	bf14      	ite	ne
   de398:	4617      	movne	r7, r2
   de39a:	461f      	moveq	r7, r3
   de39c:	4a5c      	ldr	r2, [pc, #368]	; (de510 <__strftime+0x498>)
   de39e:	e00b      	b.n	de3b8 <__strftime+0x340>
   de3a0:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
   de3a4:	9105      	str	r1, [sp, #20]
   de3a6:	f000 fecf 	bl	df148 <abs>
   de3aa:	2364      	movs	r3, #100	; 0x64
   de3ac:	9905      	ldr	r1, [sp, #20]
   de3ae:	fb90 f0f3 	sdiv	r0, r0, r3
   de3b2:	e7ea      	b.n	de38a <__strftime+0x312>
   de3b4:	4f54      	ldr	r7, [pc, #336]	; (de508 <__strftime+0x490>)
   de3b6:	4a57      	ldr	r2, [pc, #348]	; (de514 <__strftime+0x49c>)
   de3b8:	4b57      	ldr	r3, [pc, #348]	; (de518 <__strftime+0x4a0>)
   de3ba:	9001      	str	r0, [sp, #4]
   de3bc:	2e02      	cmp	r6, #2
   de3be:	bf2c      	ite	cs
   de3c0:	ebc1 0606 	rsbcs	r6, r1, r6
   de3c4:	f1c1 0602 	rsbcc	r6, r1, #2
   de3c8:	494e      	ldr	r1, [pc, #312]	; (de504 <__strftime+0x48c>)
   de3ca:	9600      	str	r6, [sp, #0]
   de3cc:	458a      	cmp	sl, r1
   de3ce:	bfa8      	it	ge
   de3d0:	463b      	movge	r3, r7
   de3d2:	eba8 0104 	sub.w	r1, r8, r4
   de3d6:	eb09 0004 	add.w	r0, r9, r4
   de3da:	e02a      	b.n	de432 <__strftime+0x3ba>
   de3dc:	4f4a      	ldr	r7, [pc, #296]	; (de508 <__strftime+0x490>)
   de3de:	e7dd      	b.n	de39c <__strftime+0x324>
   de3e0:	494e      	ldr	r1, [pc, #312]	; (de51c <__strftime+0x4a4>)
   de3e2:	4a4f      	ldr	r2, [pc, #316]	; (de520 <__strftime+0x4a8>)
   de3e4:	68eb      	ldr	r3, [r5, #12]
   de3e6:	2864      	cmp	r0, #100	; 0x64
   de3e8:	bf08      	it	eq
   de3ea:	460a      	moveq	r2, r1
   de3ec:	eba8 0104 	sub.w	r1, r8, r4
   de3f0:	eb09 0004 	add.w	r0, r9, r4
   de3f4:	f7fb fa2a 	bl	d984c <sniprintf>
   de3f8:	2800      	cmp	r0, #0
   de3fa:	f6ff ae6c 	blt.w	de0d6 <__strftime+0x5e>
   de3fe:	4404      	add	r4, r0
   de400:	45a0      	cmp	r8, r4
   de402:	f63f af3b 	bhi.w	de27c <__strftime+0x204>
   de406:	e666      	b.n	de0d6 <__strftime+0x5e>
   de408:	6968      	ldr	r0, [r5, #20]
   de40a:	692b      	ldr	r3, [r5, #16]
   de40c:	68ef      	ldr	r7, [r5, #12]
   de40e:	2800      	cmp	r0, #0
   de410:	eb09 0604 	add.w	r6, r9, r4
   de414:	eba8 0104 	sub.w	r1, r8, r4
   de418:	f103 0301 	add.w	r3, r3, #1
   de41c:	db0c      	blt.n	de438 <__strftime+0x3c0>
   de41e:	f04f 0c64 	mov.w	ip, #100	; 0x64
   de422:	fb90 f2fc 	sdiv	r2, r0, ip
   de426:	fb0c 0212 	mls	r2, ip, r2, r0
   de42a:	e9cd 7200 	strd	r7, r2, [sp]
   de42e:	4a3d      	ldr	r2, [pc, #244]	; (de524 <__strftime+0x4ac>)
   de430:	4630      	mov	r0, r6
   de432:	f7fb fa0b 	bl	d984c <sniprintf>
   de436:	e7df      	b.n	de3f8 <__strftime+0x380>
   de438:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   de43c:	e9cd 1305 	strd	r1, r3, [sp, #20]
   de440:	f000 fe82 	bl	df148 <abs>
   de444:	2264      	movs	r2, #100	; 0x64
   de446:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
   de44a:	fb90 fcf2 	sdiv	ip, r0, r2
   de44e:	fb0c 0212 	mls	r2, ip, r2, r0
   de452:	e7ea      	b.n	de42a <__strftime+0x3b2>
   de454:	2325      	movs	r3, #37	; 0x25
   de456:	f88d 3020 	strb.w	r3, [sp, #32]
   de45a:	b187      	cbz	r7, de47e <__strftime+0x406>
   de45c:	2e06      	cmp	r6, #6
   de45e:	bf38      	it	cc
   de460:	2606      	movcc	r6, #6
   de462:	1fb3      	subs	r3, r6, #6
   de464:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   de468:	d10c      	bne.n	de484 <__strftime+0x40c>
   de46a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   de46e:	492e      	ldr	r1, [pc, #184]	; (de528 <__strftime+0x4b0>)
   de470:	f7ff fd79 	bl	ddf66 <strcpy>
   de474:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   de476:	9300      	str	r3, [sp, #0]
   de478:	aa08      	add	r2, sp, #32
   de47a:	462b      	mov	r3, r5
   de47c:	e760      	b.n	de340 <__strftime+0x2c8>
   de47e:	272b      	movs	r7, #43	; 0x2b
   de480:	260a      	movs	r6, #10
   de482:	e7ee      	b.n	de462 <__strftime+0x3ea>
   de484:	4a29      	ldr	r2, [pc, #164]	; (de52c <__strftime+0x4b4>)
   de486:	211e      	movs	r1, #30
   de488:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   de48c:	f7fb f9de 	bl	d984c <sniprintf>
   de490:	2800      	cmp	r0, #0
   de492:	ddea      	ble.n	de46a <__strftime+0x3f2>
   de494:	f10d 0322 	add.w	r3, sp, #34	; 0x22
   de498:	4418      	add	r0, r3
   de49a:	e7e8      	b.n	de46e <__strftime+0x3f6>
   de49c:	4628      	mov	r0, r5
   de49e:	f7ff fd89 	bl	ddfb4 <iso_year_adjust>
   de4a2:	4606      	mov	r6, r0
   de4a4:	6968      	ldr	r0, [r5, #20]
   de4a6:	2800      	cmp	r0, #0
   de4a8:	db11      	blt.n	de4ce <__strftime+0x456>
   de4aa:	2264      	movs	r2, #100	; 0x64
   de4ac:	fb90 f3f2 	sdiv	r3, r0, r2
   de4b0:	fb02 0313 	mls	r3, r2, r3, r0
   de4b4:	441e      	add	r6, r3
   de4b6:	2364      	movs	r3, #100	; 0x64
   de4b8:	fb96 f0f3 	sdiv	r0, r6, r3
   de4bc:	fb03 6610 	mls	r6, r3, r0, r6
   de4c0:	441e      	add	r6, r3
   de4c2:	fbb6 f2f3 	udiv	r2, r6, r3
   de4c6:	fb03 6312 	mls	r3, r3, r2, r6
   de4ca:	4a14      	ldr	r2, [pc, #80]	; (de51c <__strftime+0x4a4>)
   de4cc:	e78e      	b.n	de3ec <__strftime+0x374>
   de4ce:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   de4d2:	f000 fe39 	bl	df148 <abs>
   de4d6:	2364      	movs	r3, #100	; 0x64
   de4d8:	2e00      	cmp	r6, #0
   de4da:	fb90 f2f3 	sdiv	r2, r0, r3
   de4de:	fb02 0313 	mls	r3, r2, r3, r0
   de4e2:	da05      	bge.n	de4f0 <__strftime+0x478>
   de4e4:	6969      	ldr	r1, [r5, #20]
   de4e6:	4a12      	ldr	r2, [pc, #72]	; (de530 <__strftime+0x4b8>)
   de4e8:	4291      	cmp	r1, r2
   de4ea:	bfb8      	it	lt
   de4ec:	2601      	movlt	r6, #1
   de4ee:	e7e1      	b.n	de4b4 <__strftime+0x43c>
   de4f0:	d0e0      	beq.n	de4b4 <__strftime+0x43c>
   de4f2:	6969      	ldr	r1, [r5, #20]
   de4f4:	4a03      	ldr	r2, [pc, #12]	; (de504 <__strftime+0x48c>)
   de4f6:	4291      	cmp	r1, r2
   de4f8:	bfb8      	it	lt
   de4fa:	f04f 36ff 	movlt.w	r6, #4294967295
   de4fe:	e7d9      	b.n	de4b4 <__strftime+0x43c>
   de500:	000e021c 	.word	0x000e021c
   de504:	fffff894 	.word	0xfffff894
   de508:	000dff9b 	.word	0x000dff9b
   de50c:	000e00a7 	.word	0x000e00a7
   de510:	000e009f 	.word	0x000e009f
   de514:	000e0098 	.word	0x000e0098
   de518:	000df940 	.word	0x000df940
   de51c:	000e00b7 	.word	0x000e00b7
   de520:	000e00a9 	.word	0x000e00a9
   de524:	000e00ad 	.word	0x000e00ad
   de528:	000e00c0 	.word	0x000e00c0
   de52c:	000e00bc 	.word	0x000e00bc
   de530:	fffff895 	.word	0xfffff895
   de534:	4bb6      	ldr	r3, [pc, #728]	; (de810 <__strftime+0x798>)
   de536:	6969      	ldr	r1, [r5, #20]
   de538:	4299      	cmp	r1, r3
   de53a:	bfac      	ite	ge
   de53c:	2300      	movge	r3, #0
   de53e:	2301      	movlt	r3, #1
   de540:	4628      	mov	r0, r5
   de542:	e9cd 3105 	strd	r3, r1, [sp, #20]
   de546:	f7ff fd35 	bl	ddfb4 <iso_year_adjust>
   de54a:	9906      	ldr	r1, [sp, #24]
   de54c:	2900      	cmp	r1, #0
   de54e:	4682      	mov	sl, r0
   de550:	db27      	blt.n	de5a2 <__strftime+0x52a>
   de552:	2264      	movs	r2, #100	; 0x64
   de554:	fb91 f2f2 	sdiv	r2, r1, r2
   de558:	3213      	adds	r2, #19
   de55a:	6968      	ldr	r0, [r5, #20]
   de55c:	2800      	cmp	r0, #0
   de55e:	db2b      	blt.n	de5b8 <__strftime+0x540>
   de560:	f04f 0c64 	mov.w	ip, #100	; 0x64
   de564:	fb90 fefc 	sdiv	lr, r0, ip
   de568:	fb0c 001e 	mls	r0, ip, lr, r0
   de56c:	f1ba 0f00 	cmp.w	sl, #0
   de570:	da31      	bge.n	de5d6 <__strftime+0x55e>
   de572:	6969      	ldr	r1, [r5, #20]
   de574:	4ba7      	ldr	r3, [pc, #668]	; (de814 <__strftime+0x79c>)
   de576:	4299      	cmp	r1, r3
   de578:	db38      	blt.n	de5ec <__strftime+0x574>
   de57a:	eb0a 0300 	add.w	r3, sl, r0
   de57e:	1c59      	adds	r1, r3, #1
   de580:	d139      	bne.n	de5f6 <__strftime+0x57e>
   de582:	3a01      	subs	r2, #1
   de584:	2363      	movs	r3, #99	; 0x63
   de586:	2064      	movs	r0, #100	; 0x64
   de588:	fb00 3202 	mla	r2, r0, r2, r3
   de58c:	9b05      	ldr	r3, [sp, #20]
   de58e:	2b00      	cmp	r3, #0
   de590:	d036      	beq.n	de600 <__strftime+0x588>
   de592:	232d      	movs	r3, #45	; 0x2d
   de594:	f88d 3020 	strb.w	r3, [sp, #32]
   de598:	b106      	cbz	r6, de59c <__strftime+0x524>
   de59a:	3e01      	subs	r6, #1
   de59c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   de5a0:	e038      	b.n	de614 <__strftime+0x59c>
   de5a2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   de5a6:	9106      	str	r1, [sp, #24]
   de5a8:	f000 fdce 	bl	df148 <abs>
   de5ac:	f04f 0c64 	mov.w	ip, #100	; 0x64
   de5b0:	9906      	ldr	r1, [sp, #24]
   de5b2:	fb90 f2fc 	sdiv	r2, r0, ip
   de5b6:	e7d0      	b.n	de55a <__strftime+0x4e2>
   de5b8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   de5bc:	e9cd 1206 	strd	r1, r2, [sp, #24]
   de5c0:	f000 fdc2 	bl	df148 <abs>
   de5c4:	f04f 0c64 	mov.w	ip, #100	; 0x64
   de5c8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   de5cc:	fb90 fefc 	sdiv	lr, r0, ip
   de5d0:	fb0e 001c 	mls	r0, lr, ip, r0
   de5d4:	e7ca      	b.n	de56c <__strftime+0x4f4>
   de5d6:	d0d0      	beq.n	de57a <__strftime+0x502>
   de5d8:	4b8d      	ldr	r3, [pc, #564]	; (de810 <__strftime+0x798>)
   de5da:	4299      	cmp	r1, r3
   de5dc:	bfb4      	ite	lt
   de5de:	2301      	movlt	r3, #1
   de5e0:	2300      	movge	r3, #0
   de5e2:	9305      	str	r3, [sp, #20]
   de5e4:	bfb8      	it	lt
   de5e6:	f04f 3aff 	movlt.w	sl, #4294967295
   de5ea:	e7c6      	b.n	de57a <__strftime+0x502>
   de5ec:	f04f 0a01 	mov.w	sl, #1
   de5f0:	f8cd a014 	str.w	sl, [sp, #20]
   de5f4:	e7c1      	b.n	de57a <__strftime+0x502>
   de5f6:	2b64      	cmp	r3, #100	; 0x64
   de5f8:	bf04      	itt	eq
   de5fa:	3201      	addeq	r2, #1
   de5fc:	2300      	moveq	r3, #0
   de5fe:	e7c2      	b.n	de586 <__strftime+0x50e>
   de600:	2f2b      	cmp	r7, #43	; 0x2b
   de602:	d106      	bne.n	de612 <__strftime+0x59a>
   de604:	f242 730f 	movw	r3, #9999	; 0x270f
   de608:	429a      	cmp	r2, r3
   de60a:	d902      	bls.n	de612 <__strftime+0x59a>
   de60c:	f88d 7020 	strb.w	r7, [sp, #32]
   de610:	e7c2      	b.n	de598 <__strftime+0x520>
   de612:	ab08      	add	r3, sp, #32
   de614:	2125      	movs	r1, #37	; 0x25
   de616:	7019      	strb	r1, [r3, #0]
   de618:	b94f      	cbnz	r7, de62e <__strftime+0x5b6>
   de61a:	1c58      	adds	r0, r3, #1
   de61c:	497e      	ldr	r1, [pc, #504]	; (de818 <__strftime+0x7a0>)
   de61e:	9205      	str	r2, [sp, #20]
   de620:	f7ff fca1 	bl	ddf66 <strcpy>
   de624:	9a05      	ldr	r2, [sp, #20]
   de626:	9200      	str	r2, [sp, #0]
   de628:	4633      	mov	r3, r6
   de62a:	aa08      	add	r2, sp, #32
   de62c:	e059      	b.n	de6e2 <__strftime+0x66a>
   de62e:	2130      	movs	r1, #48	; 0x30
   de630:	1c98      	adds	r0, r3, #2
   de632:	7059      	strb	r1, [r3, #1]
   de634:	e7f2      	b.n	de61c <__strftime+0x5a4>
   de636:	4979      	ldr	r1, [pc, #484]	; (de81c <__strftime+0x7a4>)
   de638:	4a79      	ldr	r2, [pc, #484]	; (de820 <__strftime+0x7a8>)
   de63a:	68ab      	ldr	r3, [r5, #8]
   de63c:	286b      	cmp	r0, #107	; 0x6b
   de63e:	bf08      	it	eq
   de640:	460a      	moveq	r2, r1
   de642:	e6d3      	b.n	de3ec <__strftime+0x374>
   de644:	68ab      	ldr	r3, [r5, #8]
   de646:	b163      	cbz	r3, de662 <__strftime+0x5ea>
   de648:	2b0c      	cmp	r3, #12
   de64a:	d004      	beq.n	de656 <__strftime+0x5de>
   de64c:	210c      	movs	r1, #12
   de64e:	fb93 f2f1 	sdiv	r2, r3, r1
   de652:	fb01 3312 	mls	r3, r1, r2, r3
   de656:	4972      	ldr	r1, [pc, #456]	; (de820 <__strftime+0x7a8>)
   de658:	4a70      	ldr	r2, [pc, #448]	; (de81c <__strftime+0x7a4>)
   de65a:	2849      	cmp	r0, #73	; 0x49
   de65c:	bf08      	it	eq
   de65e:	460a      	moveq	r2, r1
   de660:	e6c4      	b.n	de3ec <__strftime+0x374>
   de662:	230c      	movs	r3, #12
   de664:	e7f7      	b.n	de656 <__strftime+0x5de>
   de666:	69eb      	ldr	r3, [r5, #28]
   de668:	4a6e      	ldr	r2, [pc, #440]	; (de824 <__strftime+0x7ac>)
   de66a:	3301      	adds	r3, #1
   de66c:	e6be      	b.n	de3ec <__strftime+0x374>
   de66e:	692b      	ldr	r3, [r5, #16]
   de670:	3301      	adds	r3, #1
   de672:	e72a      	b.n	de4ca <__strftime+0x452>
   de674:	686b      	ldr	r3, [r5, #4]
   de676:	e728      	b.n	de4ca <__strftime+0x452>
   de678:	f108 33ff 	add.w	r3, r8, #4294967295
   de67c:	42a3      	cmp	r3, r4
   de67e:	f67f ad2a 	bls.w	de0d6 <__strftime+0x5e>
   de682:	230a      	movs	r3, #10
   de684:	f809 3004 	strb.w	r3, [r9, r4]
   de688:	3401      	adds	r4, #1
   de68a:	e5f7      	b.n	de27c <__strftime+0x204>
   de68c:	68ab      	ldr	r3, [r5, #8]
   de68e:	2b0b      	cmp	r3, #11
   de690:	bfcc      	ite	gt
   de692:	22a4      	movgt	r2, #164	; 0xa4
   de694:	22a0      	movle	r2, #160	; 0xa0
   de696:	4b64      	ldr	r3, [pc, #400]	; (de828 <__strftime+0x7b0>)
   de698:	4413      	add	r3, r2
   de69a:	685e      	ldr	r6, [r3, #4]
   de69c:	4630      	mov	r0, r6
   de69e:	f000 f9e5 	bl	dea6c <strlen>
   de6a2:	1e72      	subs	r2, r6, #1
   de6a4:	4420      	add	r0, r4
   de6a6:	f108 36ff 	add.w	r6, r8, #4294967295
   de6aa:	42a0      	cmp	r0, r4
   de6ac:	f43f ade6 	beq.w	de27c <__strftime+0x204>
   de6b0:	42a6      	cmp	r6, r4
   de6b2:	f67f ad10 	bls.w	de0d6 <__strftime+0x5e>
   de6b6:	f89b 1000 	ldrb.w	r1, [fp]
   de6ba:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   de6be:	2950      	cmp	r1, #80	; 0x50
   de6c0:	d107      	bne.n	de6d2 <__strftime+0x65a>
   de6c2:	495a      	ldr	r1, [pc, #360]	; (de82c <__strftime+0x7b4>)
   de6c4:	5cc9      	ldrb	r1, [r1, r3]
   de6c6:	f001 0103 	and.w	r1, r1, #3
   de6ca:	2901      	cmp	r1, #1
   de6cc:	bf08      	it	eq
   de6ce:	3320      	addeq	r3, #32
   de6d0:	b2db      	uxtb	r3, r3
   de6d2:	f809 3004 	strb.w	r3, [r9, r4]
   de6d6:	3401      	adds	r4, #1
   de6d8:	e7e7      	b.n	de6aa <__strftime+0x632>
   de6da:	686b      	ldr	r3, [r5, #4]
   de6dc:	9300      	str	r3, [sp, #0]
   de6de:	4a54      	ldr	r2, [pc, #336]	; (de830 <__strftime+0x7b8>)
   de6e0:	68ab      	ldr	r3, [r5, #8]
   de6e2:	eba8 0104 	sub.w	r1, r8, r4
   de6e6:	eb09 0004 	add.w	r0, r9, r4
   de6ea:	f7fb f8af 	bl	d984c <sniprintf>
   de6ee:	e683      	b.n	de3f8 <__strftime+0x380>
   de6f0:	6a2b      	ldr	r3, [r5, #32]
   de6f2:	2b00      	cmp	r3, #0
   de6f4:	db79      	blt.n	de7ea <__strftime+0x772>
   de6f6:	f000 fb99 	bl	dee2c <__tz_lock>
   de6fa:	9b04      	ldr	r3, [sp, #16]
   de6fc:	b90b      	cbnz	r3, de702 <__strftime+0x68a>
   de6fe:	f000 fba1 	bl	dee44 <_tzset_unlocked>
   de702:	f000 fd7b 	bl	df1fc <__gettzinfo>
   de706:	6a2b      	ldr	r3, [r5, #32]
   de708:	2b00      	cmp	r3, #0
   de70a:	bfcc      	ite	gt
   de70c:	2350      	movgt	r3, #80	; 0x50
   de70e:	2328      	movle	r3, #40	; 0x28
   de710:	58c3      	ldr	r3, [r0, r3]
   de712:	f1c3 0a00 	rsb	sl, r3, #0
   de716:	f000 fb8f 	bl	dee38 <__tz_unlock>
   de71a:	2301      	movs	r3, #1
   de71c:	9304      	str	r3, [sp, #16]
   de71e:	f8d5 c014 	ldr.w	ip, [r5, #20]
   de722:	4662      	mov	r2, ip
   de724:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
   de728:	ea4f 73e2 	mov.w	r3, r2, asr #31
   de72c:	9602      	str	r6, [sp, #8]
   de72e:	f143 36ff 	adc.w	r6, r3, #4294967295
   de732:	9603      	str	r6, [sp, #12]
   de734:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   de738:	2e00      	cmp	r6, #0
   de73a:	f177 0600 	sbcs.w	r6, r7, #0
   de73e:	eba8 0104 	sub.w	r1, r8, r4
   de742:	eb09 0004 	add.w	r0, r9, r4
   de746:	da05      	bge.n	de754 <__strftime+0x6dc>
   de748:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
   de74c:	f143 33ff 	adc.w	r3, r3, #4294967295
   de750:	9602      	str	r6, [sp, #8]
   de752:	9303      	str	r3, [sp, #12]
   de754:	9b02      	ldr	r3, [sp, #8]
   de756:	089e      	lsrs	r6, r3, #2
   de758:	9b03      	ldr	r3, [sp, #12]
   de75a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
   de75e:	f10c 32ff 	add.w	r2, ip, #4294967295
   de762:	109f      	asrs	r7, r3, #2
   de764:	2364      	movs	r3, #100	; 0x64
   de766:	fb92 f3f3 	sdiv	r3, r2, r3
   de76a:	1af6      	subs	r6, r6, r3
   de76c:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   de770:	f20c 122b 	addw	r2, ip, #299	; 0x12b
   de774:	f44f 73c8 	mov.w	r3, #400	; 0x190
   de778:	fb92 f3f3 	sdiv	r3, r2, r3
   de77c:	18f6      	adds	r6, r6, r3
   de77e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
   de782:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
   de786:	f240 136d 	movw	r3, #365	; 0x16d
   de78a:	fb03 fc0c 	mul.w	ip, r3, ip
   de78e:	69eb      	ldr	r3, [r5, #28]
   de790:	eb16 060c 	adds.w	r6, r6, ip
   de794:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
   de798:	18f6      	adds	r6, r6, r3
   de79a:	f04f 0c18 	mov.w	ip, #24
   de79e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
   de7a2:	fba6 230c 	umull	r2, r3, r6, ip
   de7a6:	68ae      	ldr	r6, [r5, #8]
   de7a8:	fb0c 3307 	mla	r3, ip, r7, r3
   de7ac:	1992      	adds	r2, r2, r6
   de7ae:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   de7b2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
   de7b6:	fba2 670c 	umull	r6, r7, r2, ip
   de7ba:	fb0c 7703 	mla	r7, ip, r3, r7
   de7be:	686b      	ldr	r3, [r5, #4]
   de7c0:	18f6      	adds	r6, r6, r3
   de7c2:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
   de7c6:	fba6 230c 	umull	r2, r3, r6, ip
   de7ca:	682e      	ldr	r6, [r5, #0]
   de7cc:	fb0c 3307 	mla	r3, ip, r7, r3
   de7d0:	1992      	adds	r2, r2, r6
   de7d2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
   de7d6:	ebb2 020a 	subs.w	r2, r2, sl
   de7da:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
   de7de:	e9cd 2300 	strd	r2, r3, [sp]
   de7e2:	4a14      	ldr	r2, [pc, #80]	; (de834 <__strftime+0x7bc>)
   de7e4:	f7fb f832 	bl	d984c <sniprintf>
   de7e8:	e606      	b.n	de3f8 <__strftime+0x380>
   de7ea:	f04f 0a00 	mov.w	sl, #0
   de7ee:	e796      	b.n	de71e <__strftime+0x6a6>
   de7f0:	682b      	ldr	r3, [r5, #0]
   de7f2:	e66a      	b.n	de4ca <__strftime+0x452>
   de7f4:	f108 33ff 	add.w	r3, r8, #4294967295
   de7f8:	42a3      	cmp	r3, r4
   de7fa:	f67f ac6c 	bls.w	de0d6 <__strftime+0x5e>
   de7fe:	2309      	movs	r3, #9
   de800:	e740      	b.n	de684 <__strftime+0x60c>
   de802:	682b      	ldr	r3, [r5, #0]
   de804:	9301      	str	r3, [sp, #4]
   de806:	686b      	ldr	r3, [r5, #4]
   de808:	9300      	str	r3, [sp, #0]
   de80a:	4a0b      	ldr	r2, [pc, #44]	; (de838 <__strftime+0x7c0>)
   de80c:	68ab      	ldr	r3, [r5, #8]
   de80e:	e5e0      	b.n	de3d2 <__strftime+0x35a>
   de810:	fffff894 	.word	0xfffff894
   de814:	fffff895 	.word	0xfffff895
   de818:	000e00c8 	.word	0x000e00c8
   de81c:	000e00a9 	.word	0x000e00a9
   de820:	000e00b7 	.word	0x000e00b7
   de824:	000e00cc 	.word	0x000e00cc
   de828:	000e021c 	.word	0x000e021c
   de82c:	000e0355 	.word	0x000e0355
   de830:	000e00db 	.word	0x000e00db
   de834:	000e00d1 	.word	0x000e00d1
   de838:	000e00d6 	.word	0x000e00d6
   de83c:	f108 33ff 	add.w	r3, r8, #4294967295
   de840:	42a3      	cmp	r3, r4
   de842:	f67f ac48 	bls.w	de0d6 <__strftime+0x5e>
   de846:	69ab      	ldr	r3, [r5, #24]
   de848:	eb09 0204 	add.w	r2, r9, r4
   de84c:	3401      	adds	r4, #1
   de84e:	b913      	cbnz	r3, de856 <__strftime+0x7de>
   de850:	2337      	movs	r3, #55	; 0x37
   de852:	7013      	strb	r3, [r2, #0]
   de854:	e512      	b.n	de27c <__strftime+0x204>
   de856:	3330      	adds	r3, #48	; 0x30
   de858:	e7fb      	b.n	de852 <__strftime+0x7da>
   de85a:	69eb      	ldr	r3, [r5, #28]
   de85c:	69aa      	ldr	r2, [r5, #24]
   de85e:	3307      	adds	r3, #7
   de860:	1a9b      	subs	r3, r3, r2
   de862:	2207      	movs	r2, #7
   de864:	fb93 f3f2 	sdiv	r3, r3, r2
   de868:	e62f      	b.n	de4ca <__strftime+0x452>
   de86a:	4628      	mov	r0, r5
   de86c:	f7ff fba2 	bl	ddfb4 <iso_year_adjust>
   de870:	69aa      	ldr	r2, [r5, #24]
   de872:	b132      	cbz	r2, de882 <__strftime+0x80a>
   de874:	3a01      	subs	r2, #1
   de876:	2800      	cmp	r0, #0
   de878:	dc28      	bgt.n	de8cc <__strftime+0x854>
   de87a:	69eb      	ldr	r3, [r5, #28]
   de87c:	d103      	bne.n	de886 <__strftime+0x80e>
   de87e:	330a      	adds	r3, #10
   de880:	e7ee      	b.n	de860 <__strftime+0x7e8>
   de882:	2206      	movs	r2, #6
   de884:	e7f7      	b.n	de876 <__strftime+0x7fe>
   de886:	6968      	ldr	r0, [r5, #20]
   de888:	2800      	cmp	r0, #0
   de88a:	eba2 0303 	sub.w	r3, r2, r3
   de88e:	f240 726b 	movw	r2, #1899	; 0x76b
   de892:	bfa8      	it	ge
   de894:	f06f 0264 	mvnge.w	r2, #100	; 0x64
   de898:	4410      	add	r0, r2
   de89a:	0782      	lsls	r2, r0, #30
   de89c:	d105      	bne.n	de8aa <__strftime+0x832>
   de89e:	2264      	movs	r2, #100	; 0x64
   de8a0:	fb90 f1f2 	sdiv	r1, r0, r2
   de8a4:	fb02 0111 	mls	r1, r2, r1, r0
   de8a8:	b971      	cbnz	r1, de8c8 <__strftime+0x850>
   de8aa:	f44f 71c8 	mov.w	r1, #400	; 0x190
   de8ae:	fb90 f2f1 	sdiv	r2, r0, r1
   de8b2:	fb01 0212 	mls	r2, r1, r2, r0
   de8b6:	fab2 f282 	clz	r2, r2
   de8ba:	0952      	lsrs	r2, r2, #5
   de8bc:	1a9a      	subs	r2, r3, r2
   de8be:	2a05      	cmp	r2, #5
   de8c0:	bfb4      	ite	lt
   de8c2:	2335      	movlt	r3, #53	; 0x35
   de8c4:	2334      	movge	r3, #52	; 0x34
   de8c6:	e600      	b.n	de4ca <__strftime+0x452>
   de8c8:	2201      	movs	r2, #1
   de8ca:	e7f7      	b.n	de8bc <__strftime+0x844>
   de8cc:	2301      	movs	r3, #1
   de8ce:	e5fc      	b.n	de4ca <__strftime+0x452>
   de8d0:	f108 33ff 	add.w	r3, r8, #4294967295
   de8d4:	42a3      	cmp	r3, r4
   de8d6:	f67f abfe 	bls.w	de0d6 <__strftime+0x5e>
   de8da:	69ab      	ldr	r3, [r5, #24]
   de8dc:	3330      	adds	r3, #48	; 0x30
   de8de:	e6d1      	b.n	de684 <__strftime+0x60c>
   de8e0:	69ab      	ldr	r3, [r5, #24]
   de8e2:	b13b      	cbz	r3, de8f4 <__strftime+0x87c>
   de8e4:	3b01      	subs	r3, #1
   de8e6:	69ea      	ldr	r2, [r5, #28]
   de8e8:	3207      	adds	r2, #7
   de8ea:	1ad2      	subs	r2, r2, r3
   de8ec:	2307      	movs	r3, #7
   de8ee:	fb92 f3f3 	sdiv	r3, r2, r3
   de8f2:	e5ea      	b.n	de4ca <__strftime+0x452>
   de8f4:	2306      	movs	r3, #6
   de8f6:	e7f6      	b.n	de8e6 <__strftime+0x86e>
   de8f8:	6968      	ldr	r0, [r5, #20]
   de8fa:	2800      	cmp	r0, #0
   de8fc:	db05      	blt.n	de90a <__strftime+0x892>
   de8fe:	2264      	movs	r2, #100	; 0x64
   de900:	fb90 f3f2 	sdiv	r3, r0, r2
   de904:	fb03 0312 	mls	r3, r3, r2, r0
   de908:	e5df      	b.n	de4ca <__strftime+0x452>
   de90a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   de90e:	f000 fc1b 	bl	df148 <abs>
   de912:	e7f4      	b.n	de8fe <__strftime+0x886>
   de914:	696b      	ldr	r3, [r5, #20]
   de916:	4a4c      	ldr	r2, [pc, #304]	; (dea48 <__strftime+0x9d0>)
   de918:	4293      	cmp	r3, r2
   de91a:	da09      	bge.n	de930 <__strftime+0x8b8>
   de91c:	212d      	movs	r1, #45	; 0x2d
   de91e:	f88d 1020 	strb.w	r1, [sp, #32]
   de922:	eba2 0a03 	sub.w	sl, r2, r3
   de926:	b106      	cbz	r6, de92a <__strftime+0x8b2>
   de928:	3e01      	subs	r6, #1
   de92a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   de92e:	e00b      	b.n	de948 <__strftime+0x8d0>
   de930:	2f2b      	cmp	r7, #43	; 0x2b
   de932:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
   de936:	d106      	bne.n	de946 <__strftime+0x8ce>
   de938:	f242 730f 	movw	r3, #9999	; 0x270f
   de93c:	459a      	cmp	sl, r3
   de93e:	d902      	bls.n	de946 <__strftime+0x8ce>
   de940:	f88d 7020 	strb.w	r7, [sp, #32]
   de944:	e7ef      	b.n	de926 <__strftime+0x8ae>
   de946:	ab08      	add	r3, sp, #32
   de948:	2225      	movs	r2, #37	; 0x25
   de94a:	701a      	strb	r2, [r3, #0]
   de94c:	b937      	cbnz	r7, de95c <__strftime+0x8e4>
   de94e:	1c58      	adds	r0, r3, #1
   de950:	493e      	ldr	r1, [pc, #248]	; (dea4c <__strftime+0x9d4>)
   de952:	f7ff fb08 	bl	ddf66 <strcpy>
   de956:	f8cd a000 	str.w	sl, [sp]
   de95a:	e665      	b.n	de628 <__strftime+0x5b0>
   de95c:	2230      	movs	r2, #48	; 0x30
   de95e:	1c98      	adds	r0, r3, #2
   de960:	705a      	strb	r2, [r3, #1]
   de962:	e7f5      	b.n	de950 <__strftime+0x8d8>
   de964:	6a2b      	ldr	r3, [r5, #32]
   de966:	2b00      	cmp	r3, #0
   de968:	f6ff ac88 	blt.w	de27c <__strftime+0x204>
   de96c:	f000 fa5e 	bl	dee2c <__tz_lock>
   de970:	9b04      	ldr	r3, [sp, #16]
   de972:	b90b      	cbnz	r3, de978 <__strftime+0x900>
   de974:	f000 fa66 	bl	dee44 <_tzset_unlocked>
   de978:	f000 fc40 	bl	df1fc <__gettzinfo>
   de97c:	6a2b      	ldr	r3, [r5, #32]
   de97e:	2b00      	cmp	r3, #0
   de980:	bfcc      	ite	gt
   de982:	2350      	movgt	r3, #80	; 0x50
   de984:	2328      	movle	r3, #40	; 0x28
   de986:	eb09 0704 	add.w	r7, r9, r4
   de98a:	58c6      	ldr	r6, [r0, r3]
   de98c:	f000 fa54 	bl	dee38 <__tz_unlock>
   de990:	4276      	negs	r6, r6
   de992:	233c      	movs	r3, #60	; 0x3c
   de994:	fb96 f0f3 	sdiv	r0, r6, r3
   de998:	f000 fce4 	bl	df364 <labs>
   de99c:	233c      	movs	r3, #60	; 0x3c
   de99e:	eba8 0a04 	sub.w	sl, r8, r4
   de9a2:	fb90 f2f3 	sdiv	r2, r0, r3
   de9a6:	fb02 0013 	mls	r0, r2, r3, r0
   de9aa:	9000      	str	r0, [sp, #0]
   de9ac:	4a28      	ldr	r2, [pc, #160]	; (dea50 <__strftime+0x9d8>)
   de9ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   de9b2:	4651      	mov	r1, sl
   de9b4:	4638      	mov	r0, r7
   de9b6:	fb96 f3f3 	sdiv	r3, r6, r3
   de9ba:	f7fa ff47 	bl	d984c <sniprintf>
   de9be:	2800      	cmp	r0, #0
   de9c0:	f6ff ab89 	blt.w	de0d6 <__strftime+0x5e>
   de9c4:	4404      	add	r4, r0
   de9c6:	45a0      	cmp	r8, r4
   de9c8:	f67f ab85 	bls.w	de0d6 <__strftime+0x5e>
   de9cc:	2301      	movs	r3, #1
   de9ce:	9304      	str	r3, [sp, #16]
   de9d0:	e454      	b.n	de27c <__strftime+0x204>
   de9d2:	6a2b      	ldr	r3, [r5, #32]
   de9d4:	2b00      	cmp	r3, #0
   de9d6:	f6ff ac51 	blt.w	de27c <__strftime+0x204>
   de9da:	f000 fa27 	bl	dee2c <__tz_lock>
   de9de:	9b04      	ldr	r3, [sp, #16]
   de9e0:	b90b      	cbnz	r3, de9e6 <__strftime+0x96e>
   de9e2:	f000 fa2f 	bl	dee44 <_tzset_unlocked>
   de9e6:	6a2b      	ldr	r3, [r5, #32]
   de9e8:	4a1a      	ldr	r2, [pc, #104]	; (dea54 <__strftime+0x9dc>)
   de9ea:	2b00      	cmp	r3, #0
   de9ec:	bfd4      	ite	le
   de9ee:	2300      	movle	r3, #0
   de9f0:	2301      	movgt	r3, #1
   de9f2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   de9f6:	4630      	mov	r0, r6
   de9f8:	f000 f838 	bl	dea6c <strlen>
   de9fc:	3e01      	subs	r6, #1
   de9fe:	4420      	add	r0, r4
   dea00:	f108 33ff 	add.w	r3, r8, #4294967295
   dea04:	42a0      	cmp	r0, r4
   dea06:	d102      	bne.n	dea0e <__strftime+0x996>
   dea08:	f000 fa16 	bl	dee38 <__tz_unlock>
   dea0c:	e7de      	b.n	de9cc <__strftime+0x954>
   dea0e:	42a3      	cmp	r3, r4
   dea10:	d905      	bls.n	dea1e <__strftime+0x9a6>
   dea12:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   dea16:	f809 2004 	strb.w	r2, [r9, r4]
   dea1a:	3401      	adds	r4, #1
   dea1c:	e7f2      	b.n	dea04 <__strftime+0x98c>
   dea1e:	f000 fa0b 	bl	dee38 <__tz_unlock>
   dea22:	f7ff bb58 	b.w	de0d6 <__strftime+0x5e>
   dea26:	f108 33ff 	add.w	r3, r8, #4294967295
   dea2a:	42a3      	cmp	r3, r4
   dea2c:	f67f ab53 	bls.w	de0d6 <__strftime+0x5e>
   dea30:	2325      	movs	r3, #37	; 0x25
   dea32:	e627      	b.n	de684 <__strftime+0x60c>
   dea34:	f1b8 0f00 	cmp.w	r8, #0
   dea38:	d002      	beq.n	dea40 <__strftime+0x9c8>
   dea3a:	2300      	movs	r3, #0
   dea3c:	f809 3004 	strb.w	r3, [r9, r4]
   dea40:	4620      	mov	r0, r4
   dea42:	b011      	add	sp, #68	; 0x44
   dea44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dea48:	fffff894 	.word	0xfffff894
   dea4c:	000e00c8 	.word	0x000e00c8
   dea50:	000e00e5 	.word	0x000e00e5
   dea54:	2003bffc 	.word	0x2003bffc

000dea58 <strftime>:
   dea58:	b513      	push	{r0, r1, r4, lr}
   dea5a:	4c03      	ldr	r4, [pc, #12]	; (dea68 <strftime+0x10>)
   dea5c:	9400      	str	r4, [sp, #0]
   dea5e:	f7ff fb0b 	bl	de078 <__strftime>
   dea62:	b002      	add	sp, #8
   dea64:	bd10      	pop	{r4, pc}
   dea66:	bf00      	nop
   dea68:	2003c060 	.word	0x2003c060

000dea6c <strlen>:
   dea6c:	4603      	mov	r3, r0
   dea6e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dea72:	2a00      	cmp	r2, #0
   dea74:	d1fb      	bne.n	dea6e <strlen+0x2>
   dea76:	1a18      	subs	r0, r3, r0
   dea78:	3801      	subs	r0, #1
   dea7a:	4770      	bx	lr

000dea7c <strncmp>:
   dea7c:	b510      	push	{r4, lr}
   dea7e:	b16a      	cbz	r2, dea9c <strncmp+0x20>
   dea80:	3901      	subs	r1, #1
   dea82:	1884      	adds	r4, r0, r2
   dea84:	f810 3b01 	ldrb.w	r3, [r0], #1
   dea88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dea8c:	4293      	cmp	r3, r2
   dea8e:	d103      	bne.n	dea98 <strncmp+0x1c>
   dea90:	42a0      	cmp	r0, r4
   dea92:	d001      	beq.n	dea98 <strncmp+0x1c>
   dea94:	2b00      	cmp	r3, #0
   dea96:	d1f5      	bne.n	dea84 <strncmp+0x8>
   dea98:	1a98      	subs	r0, r3, r2
   dea9a:	bd10      	pop	{r4, pc}
   dea9c:	4610      	mov	r0, r2
   dea9e:	e7fc      	b.n	dea9a <strncmp+0x1e>

000deaa0 <strncpy>:
   deaa0:	b510      	push	{r4, lr}
   deaa2:	3901      	subs	r1, #1
   deaa4:	4603      	mov	r3, r0
   deaa6:	b132      	cbz	r2, deab6 <strncpy+0x16>
   deaa8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   deaac:	f803 4b01 	strb.w	r4, [r3], #1
   deab0:	3a01      	subs	r2, #1
   deab2:	2c00      	cmp	r4, #0
   deab4:	d1f7      	bne.n	deaa6 <strncpy+0x6>
   deab6:	441a      	add	r2, r3
   deab8:	2100      	movs	r1, #0
   deaba:	4293      	cmp	r3, r2
   deabc:	d100      	bne.n	deac0 <strncpy+0x20>
   deabe:	bd10      	pop	{r4, pc}
   deac0:	f803 1b01 	strb.w	r1, [r3], #1
   deac4:	e7f9      	b.n	deaba <strncpy+0x1a>
	...

000deac8 <_strtol_l.isra.0>:
   deac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   deacc:	4e3a      	ldr	r6, [pc, #232]	; (debb8 <_strtol_l.isra.0+0xf0>)
   deace:	4686      	mov	lr, r0
   dead0:	468c      	mov	ip, r1
   dead2:	4660      	mov	r0, ip
   dead4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dead8:	5da5      	ldrb	r5, [r4, r6]
   deada:	f015 0508 	ands.w	r5, r5, #8
   deade:	d1f8      	bne.n	dead2 <_strtol_l.isra.0+0xa>
   deae0:	2c2d      	cmp	r4, #45	; 0x2d
   deae2:	d133      	bne.n	deb4c <_strtol_l.isra.0+0x84>
   deae4:	f89c 4000 	ldrb.w	r4, [ip]
   deae8:	f04f 0801 	mov.w	r8, #1
   deaec:	f100 0c02 	add.w	ip, r0, #2
   deaf0:	2b00      	cmp	r3, #0
   deaf2:	d05c      	beq.n	debae <_strtol_l.isra.0+0xe6>
   deaf4:	2b10      	cmp	r3, #16
   deaf6:	d10c      	bne.n	deb12 <_strtol_l.isra.0+0x4a>
   deaf8:	2c30      	cmp	r4, #48	; 0x30
   deafa:	d10a      	bne.n	deb12 <_strtol_l.isra.0+0x4a>
   deafc:	f89c 0000 	ldrb.w	r0, [ip]
   deb00:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   deb04:	2858      	cmp	r0, #88	; 0x58
   deb06:	d14d      	bne.n	deba4 <_strtol_l.isra.0+0xdc>
   deb08:	f89c 4001 	ldrb.w	r4, [ip, #1]
   deb0c:	2310      	movs	r3, #16
   deb0e:	f10c 0c02 	add.w	ip, ip, #2
   deb12:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   deb16:	3f01      	subs	r7, #1
   deb18:	2600      	movs	r6, #0
   deb1a:	fbb7 f9f3 	udiv	r9, r7, r3
   deb1e:	4630      	mov	r0, r6
   deb20:	fb03 7a19 	mls	sl, r3, r9, r7
   deb24:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   deb28:	2d09      	cmp	r5, #9
   deb2a:	d818      	bhi.n	deb5e <_strtol_l.isra.0+0x96>
   deb2c:	462c      	mov	r4, r5
   deb2e:	42a3      	cmp	r3, r4
   deb30:	dd24      	ble.n	deb7c <_strtol_l.isra.0+0xb4>
   deb32:	1c75      	adds	r5, r6, #1
   deb34:	d007      	beq.n	deb46 <_strtol_l.isra.0+0x7e>
   deb36:	4581      	cmp	r9, r0
   deb38:	d31d      	bcc.n	deb76 <_strtol_l.isra.0+0xae>
   deb3a:	d101      	bne.n	deb40 <_strtol_l.isra.0+0x78>
   deb3c:	45a2      	cmp	sl, r4
   deb3e:	db1a      	blt.n	deb76 <_strtol_l.isra.0+0xae>
   deb40:	fb00 4003 	mla	r0, r0, r3, r4
   deb44:	2601      	movs	r6, #1
   deb46:	f81c 4b01 	ldrb.w	r4, [ip], #1
   deb4a:	e7eb      	b.n	deb24 <_strtol_l.isra.0+0x5c>
   deb4c:	2c2b      	cmp	r4, #43	; 0x2b
   deb4e:	bf08      	it	eq
   deb50:	f89c 4000 	ldrbeq.w	r4, [ip]
   deb54:	46a8      	mov	r8, r5
   deb56:	bf08      	it	eq
   deb58:	f100 0c02 	addeq.w	ip, r0, #2
   deb5c:	e7c8      	b.n	deaf0 <_strtol_l.isra.0+0x28>
   deb5e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   deb62:	2d19      	cmp	r5, #25
   deb64:	d801      	bhi.n	deb6a <_strtol_l.isra.0+0xa2>
   deb66:	3c37      	subs	r4, #55	; 0x37
   deb68:	e7e1      	b.n	deb2e <_strtol_l.isra.0+0x66>
   deb6a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   deb6e:	2d19      	cmp	r5, #25
   deb70:	d804      	bhi.n	deb7c <_strtol_l.isra.0+0xb4>
   deb72:	3c57      	subs	r4, #87	; 0x57
   deb74:	e7db      	b.n	deb2e <_strtol_l.isra.0+0x66>
   deb76:	f04f 36ff 	mov.w	r6, #4294967295
   deb7a:	e7e4      	b.n	deb46 <_strtol_l.isra.0+0x7e>
   deb7c:	1c73      	adds	r3, r6, #1
   deb7e:	d106      	bne.n	deb8e <_strtol_l.isra.0+0xc6>
   deb80:	2322      	movs	r3, #34	; 0x22
   deb82:	f8ce 3000 	str.w	r3, [lr]
   deb86:	4638      	mov	r0, r7
   deb88:	b942      	cbnz	r2, deb9c <_strtol_l.isra.0+0xd4>
   deb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   deb8e:	f1b8 0f00 	cmp.w	r8, #0
   deb92:	d000      	beq.n	deb96 <_strtol_l.isra.0+0xce>
   deb94:	4240      	negs	r0, r0
   deb96:	2a00      	cmp	r2, #0
   deb98:	d0f7      	beq.n	deb8a <_strtol_l.isra.0+0xc2>
   deb9a:	b10e      	cbz	r6, deba0 <_strtol_l.isra.0+0xd8>
   deb9c:	f10c 31ff 	add.w	r1, ip, #4294967295
   deba0:	6011      	str	r1, [r2, #0]
   deba2:	e7f2      	b.n	deb8a <_strtol_l.isra.0+0xc2>
   deba4:	2430      	movs	r4, #48	; 0x30
   deba6:	2b00      	cmp	r3, #0
   deba8:	d1b3      	bne.n	deb12 <_strtol_l.isra.0+0x4a>
   debaa:	2308      	movs	r3, #8
   debac:	e7b1      	b.n	deb12 <_strtol_l.isra.0+0x4a>
   debae:	2c30      	cmp	r4, #48	; 0x30
   debb0:	d0a4      	beq.n	deafc <_strtol_l.isra.0+0x34>
   debb2:	230a      	movs	r3, #10
   debb4:	e7ad      	b.n	deb12 <_strtol_l.isra.0+0x4a>
   debb6:	bf00      	nop
   debb8:	000e0355 	.word	0x000e0355

000debbc <strtol>:
   debbc:	4613      	mov	r3, r2
   debbe:	460a      	mov	r2, r1
   debc0:	4601      	mov	r1, r0
   debc2:	4802      	ldr	r0, [pc, #8]	; (debcc <strtol+0x10>)
   debc4:	6800      	ldr	r0, [r0, #0]
   debc6:	f7ff bf7f 	b.w	deac8 <_strtol_l.isra.0>
   debca:	bf00      	nop
   debcc:	2003bf98 	.word	0x2003bf98

000debd0 <_strtoul_l.isra.0>:
   debd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   debd4:	4e3b      	ldr	r6, [pc, #236]	; (decc4 <_strtoul_l.isra.0+0xf4>)
   debd6:	4686      	mov	lr, r0
   debd8:	468c      	mov	ip, r1
   debda:	4660      	mov	r0, ip
   debdc:	f81c 4b01 	ldrb.w	r4, [ip], #1
   debe0:	5da5      	ldrb	r5, [r4, r6]
   debe2:	f015 0508 	ands.w	r5, r5, #8
   debe6:	d1f8      	bne.n	debda <_strtoul_l.isra.0+0xa>
   debe8:	2c2d      	cmp	r4, #45	; 0x2d
   debea:	d134      	bne.n	dec56 <_strtoul_l.isra.0+0x86>
   debec:	f89c 4000 	ldrb.w	r4, [ip]
   debf0:	f04f 0801 	mov.w	r8, #1
   debf4:	f100 0c02 	add.w	ip, r0, #2
   debf8:	2b00      	cmp	r3, #0
   debfa:	d05e      	beq.n	decba <_strtoul_l.isra.0+0xea>
   debfc:	2b10      	cmp	r3, #16
   debfe:	d10c      	bne.n	dec1a <_strtoul_l.isra.0+0x4a>
   dec00:	2c30      	cmp	r4, #48	; 0x30
   dec02:	d10a      	bne.n	dec1a <_strtoul_l.isra.0+0x4a>
   dec04:	f89c 0000 	ldrb.w	r0, [ip]
   dec08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dec0c:	2858      	cmp	r0, #88	; 0x58
   dec0e:	d14f      	bne.n	decb0 <_strtoul_l.isra.0+0xe0>
   dec10:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dec14:	2310      	movs	r3, #16
   dec16:	f10c 0c02 	add.w	ip, ip, #2
   dec1a:	f04f 37ff 	mov.w	r7, #4294967295
   dec1e:	2500      	movs	r5, #0
   dec20:	fbb7 f7f3 	udiv	r7, r7, r3
   dec24:	fb03 f907 	mul.w	r9, r3, r7
   dec28:	ea6f 0909 	mvn.w	r9, r9
   dec2c:	4628      	mov	r0, r5
   dec2e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   dec32:	2e09      	cmp	r6, #9
   dec34:	d818      	bhi.n	dec68 <_strtoul_l.isra.0+0x98>
   dec36:	4634      	mov	r4, r6
   dec38:	42a3      	cmp	r3, r4
   dec3a:	dd24      	ble.n	dec86 <_strtoul_l.isra.0+0xb6>
   dec3c:	2d00      	cmp	r5, #0
   dec3e:	db1f      	blt.n	dec80 <_strtoul_l.isra.0+0xb0>
   dec40:	4287      	cmp	r7, r0
   dec42:	d31d      	bcc.n	dec80 <_strtoul_l.isra.0+0xb0>
   dec44:	d101      	bne.n	dec4a <_strtoul_l.isra.0+0x7a>
   dec46:	45a1      	cmp	r9, r4
   dec48:	db1a      	blt.n	dec80 <_strtoul_l.isra.0+0xb0>
   dec4a:	fb00 4003 	mla	r0, r0, r3, r4
   dec4e:	2501      	movs	r5, #1
   dec50:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dec54:	e7eb      	b.n	dec2e <_strtoul_l.isra.0+0x5e>
   dec56:	2c2b      	cmp	r4, #43	; 0x2b
   dec58:	bf08      	it	eq
   dec5a:	f89c 4000 	ldrbeq.w	r4, [ip]
   dec5e:	46a8      	mov	r8, r5
   dec60:	bf08      	it	eq
   dec62:	f100 0c02 	addeq.w	ip, r0, #2
   dec66:	e7c7      	b.n	debf8 <_strtoul_l.isra.0+0x28>
   dec68:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   dec6c:	2e19      	cmp	r6, #25
   dec6e:	d801      	bhi.n	dec74 <_strtoul_l.isra.0+0xa4>
   dec70:	3c37      	subs	r4, #55	; 0x37
   dec72:	e7e1      	b.n	dec38 <_strtoul_l.isra.0+0x68>
   dec74:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   dec78:	2e19      	cmp	r6, #25
   dec7a:	d804      	bhi.n	dec86 <_strtoul_l.isra.0+0xb6>
   dec7c:	3c57      	subs	r4, #87	; 0x57
   dec7e:	e7db      	b.n	dec38 <_strtoul_l.isra.0+0x68>
   dec80:	f04f 35ff 	mov.w	r5, #4294967295
   dec84:	e7e4      	b.n	dec50 <_strtoul_l.isra.0+0x80>
   dec86:	2d00      	cmp	r5, #0
   dec88:	da07      	bge.n	dec9a <_strtoul_l.isra.0+0xca>
   dec8a:	2322      	movs	r3, #34	; 0x22
   dec8c:	f8ce 3000 	str.w	r3, [lr]
   dec90:	f04f 30ff 	mov.w	r0, #4294967295
   dec94:	b942      	cbnz	r2, deca8 <_strtoul_l.isra.0+0xd8>
   dec96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dec9a:	f1b8 0f00 	cmp.w	r8, #0
   dec9e:	d000      	beq.n	deca2 <_strtoul_l.isra.0+0xd2>
   deca0:	4240      	negs	r0, r0
   deca2:	2a00      	cmp	r2, #0
   deca4:	d0f7      	beq.n	dec96 <_strtoul_l.isra.0+0xc6>
   deca6:	b10d      	cbz	r5, decac <_strtoul_l.isra.0+0xdc>
   deca8:	f10c 31ff 	add.w	r1, ip, #4294967295
   decac:	6011      	str	r1, [r2, #0]
   decae:	e7f2      	b.n	dec96 <_strtoul_l.isra.0+0xc6>
   decb0:	2430      	movs	r4, #48	; 0x30
   decb2:	2b00      	cmp	r3, #0
   decb4:	d1b1      	bne.n	dec1a <_strtoul_l.isra.0+0x4a>
   decb6:	2308      	movs	r3, #8
   decb8:	e7af      	b.n	dec1a <_strtoul_l.isra.0+0x4a>
   decba:	2c30      	cmp	r4, #48	; 0x30
   decbc:	d0a2      	beq.n	dec04 <_strtoul_l.isra.0+0x34>
   decbe:	230a      	movs	r3, #10
   decc0:	e7ab      	b.n	dec1a <_strtoul_l.isra.0+0x4a>
   decc2:	bf00      	nop
   decc4:	000e0355 	.word	0x000e0355

000decc8 <strtoul>:
   decc8:	4613      	mov	r3, r2
   decca:	460a      	mov	r2, r1
   deccc:	4601      	mov	r1, r0
   decce:	4802      	ldr	r0, [pc, #8]	; (decd8 <strtoul+0x10>)
   decd0:	6800      	ldr	r0, [r0, #0]
   decd2:	f7ff bf7d 	b.w	debd0 <_strtoul_l.isra.0>
   decd6:	bf00      	nop
   decd8:	2003bf98 	.word	0x2003bf98

000decdc <__tzcalc_limits>:
   decdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dece0:	4680      	mov	r8, r0
   dece2:	f000 fa8b 	bl	df1fc <__gettzinfo>
   dece6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   decea:	4598      	cmp	r8, r3
   decec:	f340 8098 	ble.w	dee20 <__tzcalc_limits+0x144>
   decf0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   decf4:	4443      	add	r3, r8
   decf6:	109b      	asrs	r3, r3, #2
   decf8:	f240 126d 	movw	r2, #365	; 0x16d
   decfc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   ded00:	fb02 3505 	mla	r5, r2, r5, r3
   ded04:	f06f 0263 	mvn.w	r2, #99	; 0x63
   ded08:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   ded0c:	fb93 f3f2 	sdiv	r3, r3, r2
   ded10:	441d      	add	r5, r3
   ded12:	f44f 73c8 	mov.w	r3, #400	; 0x190
   ded16:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   ded1a:	fb98 f7f3 	sdiv	r7, r8, r3
   ded1e:	fb03 8717 	mls	r7, r3, r7, r8
   ded22:	4442      	add	r2, r8
   ded24:	fab7 fc87 	clz	ip, r7
   ded28:	fbb2 f2f3 	udiv	r2, r2, r3
   ded2c:	f008 0303 	and.w	r3, r8, #3
   ded30:	4415      	add	r5, r2
   ded32:	2264      	movs	r2, #100	; 0x64
   ded34:	f8c0 8004 	str.w	r8, [r0, #4]
   ded38:	fb98 f6f2 	sdiv	r6, r8, r2
   ded3c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   ded40:	fb02 8616 	mls	r6, r2, r6, r8
   ded44:	4604      	mov	r4, r0
   ded46:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   ded4a:	9300      	str	r3, [sp, #0]
   ded4c:	f04f 0e07 	mov.w	lr, #7
   ded50:	7a22      	ldrb	r2, [r4, #8]
   ded52:	6963      	ldr	r3, [r4, #20]
   ded54:	2a4a      	cmp	r2, #74	; 0x4a
   ded56:	d128      	bne.n	dedaa <__tzcalc_limits+0xce>
   ded58:	9900      	ldr	r1, [sp, #0]
   ded5a:	18ea      	adds	r2, r5, r3
   ded5c:	b901      	cbnz	r1, ded60 <__tzcalc_limits+0x84>
   ded5e:	b906      	cbnz	r6, ded62 <__tzcalc_limits+0x86>
   ded60:	bb0f      	cbnz	r7, deda6 <__tzcalc_limits+0xca>
   ded62:	2b3b      	cmp	r3, #59	; 0x3b
   ded64:	bfd4      	ite	le
   ded66:	2300      	movle	r3, #0
   ded68:	2301      	movgt	r3, #1
   ded6a:	4413      	add	r3, r2
   ded6c:	1e5a      	subs	r2, r3, #1
   ded6e:	69a3      	ldr	r3, [r4, #24]
   ded70:	492c      	ldr	r1, [pc, #176]	; (dee24 <__tzcalc_limits+0x148>)
   ded72:	fb01 3202 	mla	r2, r1, r2, r3
   ded76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ded78:	4413      	add	r3, r2
   ded7a:	461a      	mov	r2, r3
   ded7c:	17db      	asrs	r3, r3, #31
   ded7e:	e9c4 2308 	strd	r2, r3, [r4, #32]
   ded82:	3428      	adds	r4, #40	; 0x28
   ded84:	45a3      	cmp	fp, r4
   ded86:	d1e3      	bne.n	ded50 <__tzcalc_limits+0x74>
   ded88:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   ded8c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   ded90:	4294      	cmp	r4, r2
   ded92:	eb75 0303 	sbcs.w	r3, r5, r3
   ded96:	bfb4      	ite	lt
   ded98:	2301      	movlt	r3, #1
   ded9a:	2300      	movge	r3, #0
   ded9c:	6003      	str	r3, [r0, #0]
   ded9e:	2001      	movs	r0, #1
   deda0:	b003      	add	sp, #12
   deda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deda6:	2300      	movs	r3, #0
   deda8:	e7df      	b.n	ded6a <__tzcalc_limits+0x8e>
   dedaa:	2a44      	cmp	r2, #68	; 0x44
   dedac:	d101      	bne.n	dedb2 <__tzcalc_limits+0xd6>
   dedae:	18ea      	adds	r2, r5, r3
   dedb0:	e7dd      	b.n	ded6e <__tzcalc_limits+0x92>
   dedb2:	9a00      	ldr	r2, [sp, #0]
   dedb4:	bb72      	cbnz	r2, dee14 <__tzcalc_limits+0x138>
   dedb6:	2e00      	cmp	r6, #0
   dedb8:	bf0c      	ite	eq
   dedba:	46e0      	moveq	r8, ip
   dedbc:	f04f 0801 	movne.w	r8, #1
   dedc0:	4919      	ldr	r1, [pc, #100]	; (dee28 <__tzcalc_limits+0x14c>)
   dedc2:	68e2      	ldr	r2, [r4, #12]
   dedc4:	9201      	str	r2, [sp, #4]
   dedc6:	f04f 0a30 	mov.w	sl, #48	; 0x30
   dedca:	fb0a 1808 	mla	r8, sl, r8, r1
   dedce:	462a      	mov	r2, r5
   dedd0:	f04f 0900 	mov.w	r9, #0
   dedd4:	f1a8 0804 	sub.w	r8, r8, #4
   dedd8:	9901      	ldr	r1, [sp, #4]
   dedda:	f109 0901 	add.w	r9, r9, #1
   dedde:	4549      	cmp	r1, r9
   dede0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   dede4:	dc18      	bgt.n	dee18 <__tzcalc_limits+0x13c>
   dede6:	f102 0804 	add.w	r8, r2, #4
   dedea:	fb98 f9fe 	sdiv	r9, r8, lr
   dedee:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   dedf2:	eba8 0909 	sub.w	r9, r8, r9
   dedf6:	ebb3 0909 	subs.w	r9, r3, r9
   dedfa:	6923      	ldr	r3, [r4, #16]
   dedfc:	f103 33ff 	add.w	r3, r3, #4294967295
   dee00:	bf48      	it	mi
   dee02:	f109 0907 	addmi.w	r9, r9, #7
   dee06:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dee0a:	444b      	add	r3, r9
   dee0c:	4553      	cmp	r3, sl
   dee0e:	da05      	bge.n	dee1c <__tzcalc_limits+0x140>
   dee10:	441a      	add	r2, r3
   dee12:	e7ac      	b.n	ded6e <__tzcalc_limits+0x92>
   dee14:	46e0      	mov	r8, ip
   dee16:	e7d3      	b.n	dedc0 <__tzcalc_limits+0xe4>
   dee18:	4452      	add	r2, sl
   dee1a:	e7dd      	b.n	dedd8 <__tzcalc_limits+0xfc>
   dee1c:	3b07      	subs	r3, #7
   dee1e:	e7f5      	b.n	dee0c <__tzcalc_limits+0x130>
   dee20:	2000      	movs	r0, #0
   dee22:	e7bd      	b.n	deda0 <__tzcalc_limits+0xc4>
   dee24:	00015180 	.word	0x00015180
   dee28:	000e0038 	.word	0x000e0038

000dee2c <__tz_lock>:
   dee2c:	4801      	ldr	r0, [pc, #4]	; (dee34 <__tz_lock+0x8>)
   dee2e:	f000 ba9d 	b.w	df36c <__retarget_lock_acquire>
   dee32:	bf00      	nop
   dee34:	2003e7eb 	.word	0x2003e7eb

000dee38 <__tz_unlock>:
   dee38:	4801      	ldr	r0, [pc, #4]	; (dee40 <__tz_unlock+0x8>)
   dee3a:	f000 ba99 	b.w	df370 <__retarget_lock_release>
   dee3e:	bf00      	nop
   dee40:	2003e7eb 	.word	0x2003e7eb

000dee44 <_tzset_unlocked>:
   dee44:	4b01      	ldr	r3, [pc, #4]	; (dee4c <_tzset_unlocked+0x8>)
   dee46:	6818      	ldr	r0, [r3, #0]
   dee48:	f000 b802 	b.w	dee50 <_tzset_unlocked_r>
   dee4c:	2003bf98 	.word	0x2003bf98

000dee50 <_tzset_unlocked_r>:
   dee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dee54:	b08d      	sub	sp, #52	; 0x34
   dee56:	4607      	mov	r7, r0
   dee58:	f000 f9d0 	bl	df1fc <__gettzinfo>
   dee5c:	49ae      	ldr	r1, [pc, #696]	; (df118 <_tzset_unlocked_r+0x2c8>)
   dee5e:	4eaf      	ldr	r6, [pc, #700]	; (df11c <_tzset_unlocked_r+0x2cc>)
   dee60:	4605      	mov	r5, r0
   dee62:	4638      	mov	r0, r7
   dee64:	f000 f9c2 	bl	df1ec <_getenv_r>
   dee68:	4604      	mov	r4, r0
   dee6a:	b970      	cbnz	r0, dee8a <_tzset_unlocked_r+0x3a>
   dee6c:	4bac      	ldr	r3, [pc, #688]	; (df120 <_tzset_unlocked_r+0x2d0>)
   dee6e:	4aad      	ldr	r2, [pc, #692]	; (df124 <_tzset_unlocked_r+0x2d4>)
   dee70:	6018      	str	r0, [r3, #0]
   dee72:	4bad      	ldr	r3, [pc, #692]	; (df128 <_tzset_unlocked_r+0x2d8>)
   dee74:	6018      	str	r0, [r3, #0]
   dee76:	4bad      	ldr	r3, [pc, #692]	; (df12c <_tzset_unlocked_r+0x2dc>)
   dee78:	6830      	ldr	r0, [r6, #0]
   dee7a:	e9c3 2200 	strd	r2, r2, [r3]
   dee7e:	f7fa fcbd 	bl	d97fc <free>
   dee82:	6034      	str	r4, [r6, #0]
   dee84:	b00d      	add	sp, #52	; 0x34
   dee86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dee8a:	6831      	ldr	r1, [r6, #0]
   dee8c:	2900      	cmp	r1, #0
   dee8e:	d15f      	bne.n	def50 <_tzset_unlocked_r+0x100>
   dee90:	6830      	ldr	r0, [r6, #0]
   dee92:	f7fa fcb3 	bl	d97fc <free>
   dee96:	4620      	mov	r0, r4
   dee98:	f7ff fde8 	bl	dea6c <strlen>
   dee9c:	1c41      	adds	r1, r0, #1
   dee9e:	4638      	mov	r0, r7
   deea0:	f7fa fcec 	bl	d987c <_malloc_r>
   deea4:	6030      	str	r0, [r6, #0]
   deea6:	2800      	cmp	r0, #0
   deea8:	d157      	bne.n	def5a <_tzset_unlocked_r+0x10a>
   deeaa:	7823      	ldrb	r3, [r4, #0]
   deeac:	4aa0      	ldr	r2, [pc, #640]	; (df130 <_tzset_unlocked_r+0x2e0>)
   deeae:	49a1      	ldr	r1, [pc, #644]	; (df134 <_tzset_unlocked_r+0x2e4>)
   deeb0:	2b3a      	cmp	r3, #58	; 0x3a
   deeb2:	bf08      	it	eq
   deeb4:	3401      	addeq	r4, #1
   deeb6:	ae0a      	add	r6, sp, #40	; 0x28
   deeb8:	4633      	mov	r3, r6
   deeba:	4620      	mov	r0, r4
   deebc:	f7fa fcb6 	bl	d982c <siscanf>
   deec0:	2800      	cmp	r0, #0
   deec2:	dddf      	ble.n	dee84 <_tzset_unlocked_r+0x34>
   deec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   deec6:	18e7      	adds	r7, r4, r3
   deec8:	5ce3      	ldrb	r3, [r4, r3]
   deeca:	2b2d      	cmp	r3, #45	; 0x2d
   deecc:	d149      	bne.n	def62 <_tzset_unlocked_r+0x112>
   deece:	3701      	adds	r7, #1
   deed0:	f04f 34ff 	mov.w	r4, #4294967295
   deed4:	f10d 0a20 	add.w	sl, sp, #32
   deed8:	f10d 0b1e 	add.w	fp, sp, #30
   deedc:	f04f 0800 	mov.w	r8, #0
   deee0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   deee4:	4994      	ldr	r1, [pc, #592]	; (df138 <_tzset_unlocked_r+0x2e8>)
   deee6:	9603      	str	r6, [sp, #12]
   deee8:	f8cd b000 	str.w	fp, [sp]
   deeec:	4633      	mov	r3, r6
   deeee:	aa07      	add	r2, sp, #28
   deef0:	4638      	mov	r0, r7
   deef2:	f8ad 801e 	strh.w	r8, [sp, #30]
   deef6:	f8ad 8020 	strh.w	r8, [sp, #32]
   deefa:	f7fa fc97 	bl	d982c <siscanf>
   deefe:	4540      	cmp	r0, r8
   def00:	ddc0      	ble.n	dee84 <_tzset_unlocked_r+0x34>
   def02:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   def06:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   def0a:	f8df 9238 	ldr.w	r9, [pc, #568]	; df144 <_tzset_unlocked_r+0x2f4>
   def0e:	213c      	movs	r1, #60	; 0x3c
   def10:	fb01 2203 	mla	r2, r1, r3, r2
   def14:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   def18:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   def1c:	fb01 2303 	mla	r3, r1, r3, r2
   def20:	435c      	muls	r4, r3
   def22:	62ac      	str	r4, [r5, #40]	; 0x28
   def24:	4c81      	ldr	r4, [pc, #516]	; (df12c <_tzset_unlocked_r+0x2dc>)
   def26:	4b82      	ldr	r3, [pc, #520]	; (df130 <_tzset_unlocked_r+0x2e0>)
   def28:	6023      	str	r3, [r4, #0]
   def2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   def2c:	4981      	ldr	r1, [pc, #516]	; (df134 <_tzset_unlocked_r+0x2e4>)
   def2e:	441f      	add	r7, r3
   def30:	464a      	mov	r2, r9
   def32:	4633      	mov	r3, r6
   def34:	4638      	mov	r0, r7
   def36:	f7fa fc79 	bl	d982c <siscanf>
   def3a:	4540      	cmp	r0, r8
   def3c:	dc16      	bgt.n	def6c <_tzset_unlocked_r+0x11c>
   def3e:	6823      	ldr	r3, [r4, #0]
   def40:	6063      	str	r3, [r4, #4]
   def42:	4b77      	ldr	r3, [pc, #476]	; (df120 <_tzset_unlocked_r+0x2d0>)
   def44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   def46:	601a      	str	r2, [r3, #0]
   def48:	4b77      	ldr	r3, [pc, #476]	; (df128 <_tzset_unlocked_r+0x2d8>)
   def4a:	f8c3 8000 	str.w	r8, [r3]
   def4e:	e799      	b.n	dee84 <_tzset_unlocked_r+0x34>
   def50:	f7fe ffff 	bl	ddf52 <strcmp>
   def54:	2800      	cmp	r0, #0
   def56:	d19b      	bne.n	dee90 <_tzset_unlocked_r+0x40>
   def58:	e794      	b.n	dee84 <_tzset_unlocked_r+0x34>
   def5a:	4621      	mov	r1, r4
   def5c:	f7ff f803 	bl	ddf66 <strcpy>
   def60:	e7a3      	b.n	deeaa <_tzset_unlocked_r+0x5a>
   def62:	2b2b      	cmp	r3, #43	; 0x2b
   def64:	bf08      	it	eq
   def66:	3701      	addeq	r7, #1
   def68:	2401      	movs	r4, #1
   def6a:	e7b3      	b.n	deed4 <_tzset_unlocked_r+0x84>
   def6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   def6e:	f8c4 9004 	str.w	r9, [r4, #4]
   def72:	18fc      	adds	r4, r7, r3
   def74:	5cfb      	ldrb	r3, [r7, r3]
   def76:	2b2d      	cmp	r3, #45	; 0x2d
   def78:	f040 808b 	bne.w	df092 <_tzset_unlocked_r+0x242>
   def7c:	3401      	adds	r4, #1
   def7e:	f04f 37ff 	mov.w	r7, #4294967295
   def82:	2300      	movs	r3, #0
   def84:	f8ad 301c 	strh.w	r3, [sp, #28]
   def88:	f8ad 301e 	strh.w	r3, [sp, #30]
   def8c:	f8ad 3020 	strh.w	r3, [sp, #32]
   def90:	930a      	str	r3, [sp, #40]	; 0x28
   def92:	e9cd a602 	strd	sl, r6, [sp, #8]
   def96:	e9cd b600 	strd	fp, r6, [sp]
   def9a:	4967      	ldr	r1, [pc, #412]	; (df138 <_tzset_unlocked_r+0x2e8>)
   def9c:	4633      	mov	r3, r6
   def9e:	aa07      	add	r2, sp, #28
   defa0:	4620      	mov	r0, r4
   defa2:	f7fa fc43 	bl	d982c <siscanf>
   defa6:	2800      	cmp	r0, #0
   defa8:	dc78      	bgt.n	df09c <_tzset_unlocked_r+0x24c>
   defaa:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   defac:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   defb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   defb2:	652f      	str	r7, [r5, #80]	; 0x50
   defb4:	441c      	add	r4, r3
   defb6:	462f      	mov	r7, r5
   defb8:	f04f 0900 	mov.w	r9, #0
   defbc:	7823      	ldrb	r3, [r4, #0]
   defbe:	2b2c      	cmp	r3, #44	; 0x2c
   defc0:	bf08      	it	eq
   defc2:	3401      	addeq	r4, #1
   defc4:	f894 8000 	ldrb.w	r8, [r4]
   defc8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   defcc:	d178      	bne.n	df0c0 <_tzset_unlocked_r+0x270>
   defce:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   defd2:	e9cd 6301 	strd	r6, r3, [sp, #4]
   defd6:	ab09      	add	r3, sp, #36	; 0x24
   defd8:	9300      	str	r3, [sp, #0]
   defda:	4958      	ldr	r1, [pc, #352]	; (df13c <_tzset_unlocked_r+0x2ec>)
   defdc:	9603      	str	r6, [sp, #12]
   defde:	4633      	mov	r3, r6
   defe0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   defe4:	4620      	mov	r0, r4
   defe6:	f7fa fc21 	bl	d982c <siscanf>
   defea:	2803      	cmp	r0, #3
   defec:	f47f af4a 	bne.w	dee84 <_tzset_unlocked_r+0x34>
   deff0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   deff4:	1e4b      	subs	r3, r1, #1
   deff6:	2b0b      	cmp	r3, #11
   deff8:	f63f af44 	bhi.w	dee84 <_tzset_unlocked_r+0x34>
   deffc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   df000:	1e53      	subs	r3, r2, #1
   df002:	2b04      	cmp	r3, #4
   df004:	f63f af3e 	bhi.w	dee84 <_tzset_unlocked_r+0x34>
   df008:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   df00c:	2b06      	cmp	r3, #6
   df00e:	f63f af39 	bhi.w	dee84 <_tzset_unlocked_r+0x34>
   df012:	e9c7 1203 	strd	r1, r2, [r7, #12]
   df016:	f887 8008 	strb.w	r8, [r7, #8]
   df01a:	617b      	str	r3, [r7, #20]
   df01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   df01e:	eb04 0803 	add.w	r8, r4, r3
   df022:	2302      	movs	r3, #2
   df024:	f8ad 301c 	strh.w	r3, [sp, #28]
   df028:	2300      	movs	r3, #0
   df02a:	f8ad 301e 	strh.w	r3, [sp, #30]
   df02e:	f8ad 3020 	strh.w	r3, [sp, #32]
   df032:	930a      	str	r3, [sp, #40]	; 0x28
   df034:	f898 3000 	ldrb.w	r3, [r8]
   df038:	2b2f      	cmp	r3, #47	; 0x2f
   df03a:	d109      	bne.n	df050 <_tzset_unlocked_r+0x200>
   df03c:	e9cd a602 	strd	sl, r6, [sp, #8]
   df040:	e9cd b600 	strd	fp, r6, [sp]
   df044:	493e      	ldr	r1, [pc, #248]	; (df140 <_tzset_unlocked_r+0x2f0>)
   df046:	4633      	mov	r3, r6
   df048:	aa07      	add	r2, sp, #28
   df04a:	4640      	mov	r0, r8
   df04c:	f7fa fbee 	bl	d982c <siscanf>
   df050:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   df054:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   df058:	213c      	movs	r1, #60	; 0x3c
   df05a:	fb01 2203 	mla	r2, r1, r3, r2
   df05e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   df062:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   df066:	fb01 2303 	mla	r3, r1, r3, r2
   df06a:	61bb      	str	r3, [r7, #24]
   df06c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   df06e:	3728      	adds	r7, #40	; 0x28
   df070:	4444      	add	r4, r8
   df072:	f1b9 0f00 	cmp.w	r9, #0
   df076:	d020      	beq.n	df0ba <_tzset_unlocked_r+0x26a>
   df078:	6868      	ldr	r0, [r5, #4]
   df07a:	f7ff fe2f 	bl	decdc <__tzcalc_limits>
   df07e:	4b28      	ldr	r3, [pc, #160]	; (df120 <_tzset_unlocked_r+0x2d0>)
   df080:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   df082:	601a      	str	r2, [r3, #0]
   df084:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   df086:	1a9b      	subs	r3, r3, r2
   df088:	4a27      	ldr	r2, [pc, #156]	; (df128 <_tzset_unlocked_r+0x2d8>)
   df08a:	bf18      	it	ne
   df08c:	2301      	movne	r3, #1
   df08e:	6013      	str	r3, [r2, #0]
   df090:	e6f8      	b.n	dee84 <_tzset_unlocked_r+0x34>
   df092:	2b2b      	cmp	r3, #43	; 0x2b
   df094:	bf08      	it	eq
   df096:	3401      	addeq	r4, #1
   df098:	2701      	movs	r7, #1
   df09a:	e772      	b.n	def82 <_tzset_unlocked_r+0x132>
   df09c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   df0a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   df0a4:	213c      	movs	r1, #60	; 0x3c
   df0a6:	fb01 2203 	mla	r2, r1, r3, r2
   df0aa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   df0ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   df0b2:	fb01 2303 	mla	r3, r1, r3, r2
   df0b6:	435f      	muls	r7, r3
   df0b8:	e77a      	b.n	defb0 <_tzset_unlocked_r+0x160>
   df0ba:	f04f 0901 	mov.w	r9, #1
   df0be:	e77d      	b.n	defbc <_tzset_unlocked_r+0x16c>
   df0c0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   df0c4:	bf06      	itte	eq
   df0c6:	3401      	addeq	r4, #1
   df0c8:	4643      	moveq	r3, r8
   df0ca:	2344      	movne	r3, #68	; 0x44
   df0cc:	220a      	movs	r2, #10
   df0ce:	a90b      	add	r1, sp, #44	; 0x2c
   df0d0:	4620      	mov	r0, r4
   df0d2:	9305      	str	r3, [sp, #20]
   df0d4:	f7ff fdf8 	bl	decc8 <strtoul>
   df0d8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   df0dc:	9b05      	ldr	r3, [sp, #20]
   df0de:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   df0e2:	45a0      	cmp	r8, r4
   df0e4:	d114      	bne.n	df110 <_tzset_unlocked_r+0x2c0>
   df0e6:	234d      	movs	r3, #77	; 0x4d
   df0e8:	f1b9 0f00 	cmp.w	r9, #0
   df0ec:	d107      	bne.n	df0fe <_tzset_unlocked_r+0x2ae>
   df0ee:	722b      	strb	r3, [r5, #8]
   df0f0:	2103      	movs	r1, #3
   df0f2:	2302      	movs	r3, #2
   df0f4:	e9c5 1303 	strd	r1, r3, [r5, #12]
   df0f8:	f8c5 9014 	str.w	r9, [r5, #20]
   df0fc:	e791      	b.n	df022 <_tzset_unlocked_r+0x1d2>
   df0fe:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   df102:	220b      	movs	r2, #11
   df104:	2301      	movs	r3, #1
   df106:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   df10a:	2300      	movs	r3, #0
   df10c:	63eb      	str	r3, [r5, #60]	; 0x3c
   df10e:	e788      	b.n	df022 <_tzset_unlocked_r+0x1d2>
   df110:	b280      	uxth	r0, r0
   df112:	723b      	strb	r3, [r7, #8]
   df114:	6178      	str	r0, [r7, #20]
   df116:	e784      	b.n	df022 <_tzset_unlocked_r+0x1d2>
   df118:	000e0318 	.word	0x000e0318
   df11c:	2003e7d4 	.word	0x2003e7d4
   df120:	2003e7dc 	.word	0x2003e7dc
   df124:	000e031b 	.word	0x000e031b
   df128:	2003e7d8 	.word	0x2003e7d8
   df12c:	2003bffc 	.word	0x2003bffc
   df130:	2003e7c7 	.word	0x2003e7c7
   df134:	000e031f 	.word	0x000e031f
   df138:	000e0342 	.word	0x000e0342
   df13c:	000e032e 	.word	0x000e032e
   df140:	000e0341 	.word	0x000e0341
   df144:	2003e7bc 	.word	0x2003e7bc

000df148 <abs>:
   df148:	2800      	cmp	r0, #0
   df14a:	bfb8      	it	lt
   df14c:	4240      	neglt	r0, r0
   df14e:	4770      	bx	lr

000df150 <div>:
   df150:	2900      	cmp	r1, #0
   df152:	b510      	push	{r4, lr}
   df154:	fb91 f4f2 	sdiv	r4, r1, r2
   df158:	fb02 1314 	mls	r3, r2, r4, r1
   df15c:	db06      	blt.n	df16c <div+0x1c>
   df15e:	2b00      	cmp	r3, #0
   df160:	da01      	bge.n	df166 <div+0x16>
   df162:	3401      	adds	r4, #1
   df164:	1a9b      	subs	r3, r3, r2
   df166:	e9c0 4300 	strd	r4, r3, [r0]
   df16a:	bd10      	pop	{r4, pc}
   df16c:	2b00      	cmp	r3, #0
   df16e:	bfc4      	itt	gt
   df170:	f104 34ff 	addgt.w	r4, r4, #4294967295
   df174:	189b      	addgt	r3, r3, r2
   df176:	e7f6      	b.n	df166 <div+0x16>

000df178 <_findenv_r>:
   df178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df17c:	4607      	mov	r7, r0
   df17e:	4689      	mov	r9, r1
   df180:	4616      	mov	r6, r2
   df182:	f000 f917 	bl	df3b4 <__env_lock>
   df186:	4b18      	ldr	r3, [pc, #96]	; (df1e8 <_findenv_r+0x70>)
   df188:	681c      	ldr	r4, [r3, #0]
   df18a:	469a      	mov	sl, r3
   df18c:	b134      	cbz	r4, df19c <_findenv_r+0x24>
   df18e:	464b      	mov	r3, r9
   df190:	4698      	mov	r8, r3
   df192:	f813 1b01 	ldrb.w	r1, [r3], #1
   df196:	b139      	cbz	r1, df1a8 <_findenv_r+0x30>
   df198:	293d      	cmp	r1, #61	; 0x3d
   df19a:	d1f9      	bne.n	df190 <_findenv_r+0x18>
   df19c:	4638      	mov	r0, r7
   df19e:	f000 f90f 	bl	df3c0 <__env_unlock>
   df1a2:	2000      	movs	r0, #0
   df1a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df1a8:	eba8 0809 	sub.w	r8, r8, r9
   df1ac:	46a3      	mov	fp, r4
   df1ae:	f854 0b04 	ldr.w	r0, [r4], #4
   df1b2:	2800      	cmp	r0, #0
   df1b4:	d0f2      	beq.n	df19c <_findenv_r+0x24>
   df1b6:	4642      	mov	r2, r8
   df1b8:	4649      	mov	r1, r9
   df1ba:	f7ff fc5f 	bl	dea7c <strncmp>
   df1be:	2800      	cmp	r0, #0
   df1c0:	d1f4      	bne.n	df1ac <_findenv_r+0x34>
   df1c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   df1c6:	eb03 0508 	add.w	r5, r3, r8
   df1ca:	f813 3008 	ldrb.w	r3, [r3, r8]
   df1ce:	2b3d      	cmp	r3, #61	; 0x3d
   df1d0:	d1ec      	bne.n	df1ac <_findenv_r+0x34>
   df1d2:	f8da 3000 	ldr.w	r3, [sl]
   df1d6:	ebab 0303 	sub.w	r3, fp, r3
   df1da:	109b      	asrs	r3, r3, #2
   df1dc:	4638      	mov	r0, r7
   df1de:	6033      	str	r3, [r6, #0]
   df1e0:	f000 f8ee 	bl	df3c0 <__env_unlock>
   df1e4:	1c68      	adds	r0, r5, #1
   df1e6:	e7dd      	b.n	df1a4 <_findenv_r+0x2c>
   df1e8:	2003c1cc 	.word	0x2003c1cc

000df1ec <_getenv_r>:
   df1ec:	b507      	push	{r0, r1, r2, lr}
   df1ee:	aa01      	add	r2, sp, #4
   df1f0:	f7ff ffc2 	bl	df178 <_findenv_r>
   df1f4:	b003      	add	sp, #12
   df1f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000df1fc <__gettzinfo>:
   df1fc:	4800      	ldr	r0, [pc, #0]	; (df200 <__gettzinfo+0x4>)
   df1fe:	4770      	bx	lr
   df200:	2003c008 	.word	0x2003c008

000df204 <gmtime_r>:
   df204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   df208:	e9d0 6700 	ldrd	r6, r7, [r0]
   df20c:	460c      	mov	r4, r1
   df20e:	4a51      	ldr	r2, [pc, #324]	; (df354 <gmtime_r+0x150>)
   df210:	2300      	movs	r3, #0
   df212:	4630      	mov	r0, r6
   df214:	4639      	mov	r1, r7
   df216:	f000 f8d9 	bl	df3cc <__aeabi_ldivmod>
   df21a:	4639      	mov	r1, r7
   df21c:	4605      	mov	r5, r0
   df21e:	4a4d      	ldr	r2, [pc, #308]	; (df354 <gmtime_r+0x150>)
   df220:	4630      	mov	r0, r6
   df222:	2300      	movs	r3, #0
   df224:	f000 f8d2 	bl	df3cc <__aeabi_ldivmod>
   df228:	2a00      	cmp	r2, #0
   df22a:	bfbc      	itt	lt
   df22c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   df230:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   df234:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   df238:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   df23c:	fbb2 f3f1 	udiv	r3, r2, r1
   df240:	fb01 2213 	mls	r2, r1, r3, r2
   df244:	f04f 013c 	mov.w	r1, #60	; 0x3c
   df248:	bfac      	ite	ge
   df24a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   df24e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   df252:	60a3      	str	r3, [r4, #8]
   df254:	fbb2 f3f1 	udiv	r3, r2, r1
   df258:	fb01 2213 	mls	r2, r1, r3, r2
   df25c:	6063      	str	r3, [r4, #4]
   df25e:	6022      	str	r2, [r4, #0]
   df260:	1cc3      	adds	r3, r0, #3
   df262:	2207      	movs	r2, #7
   df264:	fb93 f2f2 	sdiv	r2, r3, r2
   df268:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   df26c:	1a9b      	subs	r3, r3, r2
   df26e:	bf48      	it	mi
   df270:	3307      	addmi	r3, #7
   df272:	2800      	cmp	r0, #0
   df274:	61a3      	str	r3, [r4, #24]
   df276:	bfb8      	it	lt
   df278:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   df27c:	4936      	ldr	r1, [pc, #216]	; (df358 <gmtime_r+0x154>)
   df27e:	bfae      	itee	ge
   df280:	fb90 f1f1 	sdivge	r1, r0, r1
   df284:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   df288:	fb93 f1f1 	sdivlt	r1, r3, r1
   df28c:	4b33      	ldr	r3, [pc, #204]	; (df35c <gmtime_r+0x158>)
   df28e:	fb03 0001 	mla	r0, r3, r1, r0
   df292:	f648 62ac 	movw	r2, #36524	; 0x8eac
   df296:	fbb0 f2f2 	udiv	r2, r0, r2
   df29a:	4402      	add	r2, r0
   df29c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   df2a0:	fbb0 f3fc 	udiv	r3, r0, ip
   df2a4:	1ad2      	subs	r2, r2, r3
   df2a6:	f240 176d 	movw	r7, #365	; 0x16d
   df2aa:	4b2d      	ldr	r3, [pc, #180]	; (df360 <gmtime_r+0x15c>)
   df2ac:	fbb0 f3f3 	udiv	r3, r0, r3
   df2b0:	2664      	movs	r6, #100	; 0x64
   df2b2:	1ad3      	subs	r3, r2, r3
   df2b4:	fbb3 f5f7 	udiv	r5, r3, r7
   df2b8:	fbb3 f3fc 	udiv	r3, r3, ip
   df2bc:	fbb5 f2f6 	udiv	r2, r5, r6
   df2c0:	1ad3      	subs	r3, r2, r3
   df2c2:	4403      	add	r3, r0
   df2c4:	fb07 3315 	mls	r3, r7, r5, r3
   df2c8:	2099      	movs	r0, #153	; 0x99
   df2ca:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   df2ce:	f10c 0c02 	add.w	ip, ip, #2
   df2d2:	f103 0e01 	add.w	lr, r3, #1
   df2d6:	fbbc f7f0 	udiv	r7, ip, r0
   df2da:	4378      	muls	r0, r7
   df2dc:	3002      	adds	r0, #2
   df2de:	f04f 0805 	mov.w	r8, #5
   df2e2:	fbb0 f0f8 	udiv	r0, r0, r8
   df2e6:	ebae 0000 	sub.w	r0, lr, r0
   df2ea:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   df2ee:	45f4      	cmp	ip, lr
   df2f0:	bf94      	ite	ls
   df2f2:	f04f 0c02 	movls.w	ip, #2
   df2f6:	f06f 0c09 	mvnhi.w	ip, #9
   df2fa:	4467      	add	r7, ip
   df2fc:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   df300:	fb0c 5101 	mla	r1, ip, r1, r5
   df304:	2f01      	cmp	r7, #1
   df306:	bf98      	it	ls
   df308:	3101      	addls	r1, #1
   df30a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   df30e:	d30c      	bcc.n	df32a <gmtime_r+0x126>
   df310:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   df314:	61e3      	str	r3, [r4, #28]
   df316:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   df31a:	2300      	movs	r3, #0
   df31c:	60e0      	str	r0, [r4, #12]
   df31e:	e9c4 7104 	strd	r7, r1, [r4, #16]
   df322:	6223      	str	r3, [r4, #32]
   df324:	4620      	mov	r0, r4
   df326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   df32a:	f015 0f03 	tst.w	r5, #3
   df32e:	d102      	bne.n	df336 <gmtime_r+0x132>
   df330:	fb06 5212 	mls	r2, r6, r2, r5
   df334:	b95a      	cbnz	r2, df34e <gmtime_r+0x14a>
   df336:	f44f 76c8 	mov.w	r6, #400	; 0x190
   df33a:	fbb5 f2f6 	udiv	r2, r5, r6
   df33e:	fb06 5212 	mls	r2, r6, r2, r5
   df342:	fab2 f282 	clz	r2, r2
   df346:	0952      	lsrs	r2, r2, #5
   df348:	333b      	adds	r3, #59	; 0x3b
   df34a:	4413      	add	r3, r2
   df34c:	e7e2      	b.n	df314 <gmtime_r+0x110>
   df34e:	2201      	movs	r2, #1
   df350:	e7fa      	b.n	df348 <gmtime_r+0x144>
   df352:	bf00      	nop
   df354:	00015180 	.word	0x00015180
   df358:	00023ab1 	.word	0x00023ab1
   df35c:	fffdc54f 	.word	0xfffdc54f
   df360:	00023ab0 	.word	0x00023ab0

000df364 <labs>:
   df364:	2800      	cmp	r0, #0
   df366:	bfb8      	it	lt
   df368:	4240      	neglt	r0, r0
   df36a:	4770      	bx	lr

000df36c <__retarget_lock_acquire>:
   df36c:	4770      	bx	lr

000df36e <__retarget_lock_acquire_recursive>:
   df36e:	4770      	bx	lr

000df370 <__retarget_lock_release>:
   df370:	4770      	bx	lr

000df372 <__retarget_lock_release_recursive>:
   df372:	4770      	bx	lr

000df374 <__ascii_mbtowc>:
   df374:	b082      	sub	sp, #8
   df376:	b901      	cbnz	r1, df37a <__ascii_mbtowc+0x6>
   df378:	a901      	add	r1, sp, #4
   df37a:	b142      	cbz	r2, df38e <__ascii_mbtowc+0x1a>
   df37c:	b14b      	cbz	r3, df392 <__ascii_mbtowc+0x1e>
   df37e:	7813      	ldrb	r3, [r2, #0]
   df380:	600b      	str	r3, [r1, #0]
   df382:	7812      	ldrb	r2, [r2, #0]
   df384:	1e10      	subs	r0, r2, #0
   df386:	bf18      	it	ne
   df388:	2001      	movne	r0, #1
   df38a:	b002      	add	sp, #8
   df38c:	4770      	bx	lr
   df38e:	4610      	mov	r0, r2
   df390:	e7fb      	b.n	df38a <__ascii_mbtowc+0x16>
   df392:	f06f 0001 	mvn.w	r0, #1
   df396:	e7f8      	b.n	df38a <__ascii_mbtowc+0x16>

000df398 <__ascii_wctomb>:
   df398:	b149      	cbz	r1, df3ae <__ascii_wctomb+0x16>
   df39a:	2aff      	cmp	r2, #255	; 0xff
   df39c:	bf85      	ittet	hi
   df39e:	238a      	movhi	r3, #138	; 0x8a
   df3a0:	6003      	strhi	r3, [r0, #0]
   df3a2:	700a      	strbls	r2, [r1, #0]
   df3a4:	f04f 30ff 	movhi.w	r0, #4294967295
   df3a8:	bf98      	it	ls
   df3aa:	2001      	movls	r0, #1
   df3ac:	4770      	bx	lr
   df3ae:	4608      	mov	r0, r1
   df3b0:	4770      	bx	lr
	...

000df3b4 <__env_lock>:
   df3b4:	4801      	ldr	r0, [pc, #4]	; (df3bc <__env_lock+0x8>)
   df3b6:	f7ff bfda 	b.w	df36e <__retarget_lock_acquire_recursive>
   df3ba:	bf00      	nop
   df3bc:	2003e7ea 	.word	0x2003e7ea

000df3c0 <__env_unlock>:
   df3c0:	4801      	ldr	r0, [pc, #4]	; (df3c8 <__env_unlock+0x8>)
   df3c2:	f7ff bfd6 	b.w	df372 <__retarget_lock_release_recursive>
   df3c6:	bf00      	nop
   df3c8:	2003e7ea 	.word	0x2003e7ea

000df3cc <__aeabi_ldivmod>:
   df3cc:	b97b      	cbnz	r3, df3ee <__aeabi_ldivmod+0x22>
   df3ce:	b972      	cbnz	r2, df3ee <__aeabi_ldivmod+0x22>
   df3d0:	2900      	cmp	r1, #0
   df3d2:	bfbe      	ittt	lt
   df3d4:	2000      	movlt	r0, #0
   df3d6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   df3da:	e006      	blt.n	df3ea <__aeabi_ldivmod+0x1e>
   df3dc:	bf08      	it	eq
   df3de:	2800      	cmpeq	r0, #0
   df3e0:	bf1c      	itt	ne
   df3e2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   df3e6:	f04f 30ff 	movne.w	r0, #4294967295
   df3ea:	f7fe b9ab 	b.w	dd744 <__aeabi_idiv0>
   df3ee:	f1ad 0c08 	sub.w	ip, sp, #8
   df3f2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   df3f6:	2900      	cmp	r1, #0
   df3f8:	db09      	blt.n	df40e <__aeabi_ldivmod+0x42>
   df3fa:	2b00      	cmp	r3, #0
   df3fc:	db1a      	blt.n	df434 <__aeabi_ldivmod+0x68>
   df3fe:	f7fe f83f 	bl	dd480 <__udivmoddi4>
   df402:	f8dd e004 	ldr.w	lr, [sp, #4]
   df406:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df40a:	b004      	add	sp, #16
   df40c:	4770      	bx	lr
   df40e:	4240      	negs	r0, r0
   df410:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df414:	2b00      	cmp	r3, #0
   df416:	db1b      	blt.n	df450 <__aeabi_ldivmod+0x84>
   df418:	f7fe f832 	bl	dd480 <__udivmoddi4>
   df41c:	f8dd e004 	ldr.w	lr, [sp, #4]
   df420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df424:	b004      	add	sp, #16
   df426:	4240      	negs	r0, r0
   df428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df42c:	4252      	negs	r2, r2
   df42e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   df432:	4770      	bx	lr
   df434:	4252      	negs	r2, r2
   df436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   df43a:	f7fe f821 	bl	dd480 <__udivmoddi4>
   df43e:	f8dd e004 	ldr.w	lr, [sp, #4]
   df442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df446:	b004      	add	sp, #16
   df448:	4240      	negs	r0, r0
   df44a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   df44e:	4770      	bx	lr
   df450:	4252      	negs	r2, r2
   df452:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   df456:	f7fe f813 	bl	dd480 <__udivmoddi4>
   df45a:	f8dd e004 	ldr.w	lr, [sp, #4]
   df45e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df462:	b004      	add	sp, #16
   df464:	4252      	negs	r2, r2
   df466:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   df46a:	4770      	bx	lr

000df46c <dynalib_user>:
   df46c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   df47c:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   df48c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   df49c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   df4ac:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   df4bc:	4f4d 4544 7525 003e 6544 6976 6563 0020     MODE%u>.Device .
   df4cc:	6120 6464 6572 7373 303a 0078 4e20 544f      address:0x. NOT
   df4dc:	6120 0074 6353 6e61 696e 676e 2e2e 002e      at.Scanning....
   df4ec:	6e55 6e6b 776f 206e 7265 6f72 2072 7461     Unknown error at
   df4fc:	6120 6464 6572 7373 3020 0078 0030 6f4e      address 0x.0.No
   df50c:	4920 4332 6420 7665 6369 7365 6620 756f      I2C devices fou
   df51c:	646e 000a 6f64 656e 000a 7441 6574 706d     nd..done..Attemp
   df52c:	6974 676e 7420 206f 6f63 6e6e 6365 2074     ting to connect 
   df53c:	6563 6c6c 6c75 7261 2e2e 002e 6543 6c6c     cellular....Cell
   df54c:	6c75 7261 6e20 746f 7220 6165 7964 2d20     ular not ready -
   df55c:	7220 7365 7465 6974 676e 4300 6c65 756c      resetting.Cellu
   df56c:	616c 2072 6572 6461 0079 7441 6574 706d     lar ready.Attemp
   df57c:	6974 676e 7420 206f 6f63 6e6e 6365 2074     ting to connect 
   df58c:	6f74 5020 7261 6974 6c63 2e65 2e2e 5000     to Particle....P
   df59c:	7261 6974 6c63 2065 6f6e 2074 6f63 6e6e     article not conn
   df5ac:	6365 6574 2064 202d 6572 6573 7474 6e69     ected - resettin
   df5bc:	0067 6150 7472 6369 656c 6320 6e6f 656e     g.Particle conne
   df5cc:	7463 6465 7200 6165 7964 6f54 6547 5274     cted.readyToGetR
   df5dc:	7365 7465 6e41 5364 6e65 5364 6e65 6f73     esetAndSendSenso
   df5ec:	7372 7c00 4300 7061 7574 6972 676e 7320     rs.|.Capturing s
   df5fc:	6e65 6f73 7372 6300 7061 7574 6572 5400     ensors.capture.T
   df60c:	6d69 2065 4f4e 2054 7973 636e 6465 7600     ime NOT synced.v
   df61c:	7265 6973 6e6f 6400 7665 6369 7365 6174     ersion.devicesta
   df62c:	7574 0073 6c50 6775 7420 6568 6420 7665     tus.Plug the dev
   df63c:	6369 2065 6e69 6f74 7420 6568 4920 546f     ice into the IoT
   df64c:	4e20 646f 0065 6544 6976 6563 6920 2073      Node.Device is 
   df65c:	6f6e 2074 6c70 6775 6567 2064 6e69 6f74     not plugged into
   df66c:	7420 6568 4920 546f 6f4e 6564 5200 7365      the IoTNode.Res
   df67c:	7465 6974 676e 6920 206e 3031 7320 6365     etting in 10 sec
   df68c:	6e6f 7364 5200 4354 7320 6e79 2763 6465     onds.RTC sync'ed
   df69c:	7720 7469 2068 6c63 756f 0064 5452 2043      with cloud.RTC 
   df6ac:	6f6e 2074 7973 636e 6527 2064 6977 6874     not sync'ed with
   df6bc:	6320 6f6c 6475 5500 706e 756c 6767 6465      cloud.Unplugged
   df6cc:	5200 4354 4500 7078 5200 4354 4520 5045     .RTC.Exp.RTC EEP
   df6dc:	4f52 004d 4441 0043 5246 4d41 4100 324d     ROM.ADC.FRAM.AM2
   df6ec:	3133 0035 504d 334c 3131 0035 5354 324c     315.MPL3115.TSL2
   df6fc:	3935 0031                                   591.

000df700 <_ZTVN8particle11SPISettingsE>:
	...
   df708:	42a1 000d 40b7 000d 41a3 000d               .B...@...A..

000df714 <_ZTV5Timer>:
	...
   df71c:	43b9 000d 4401 000d 41b1 000d               .C...D...A..

000df728 <_ZTVN8particle9LEDStatusE>:
	...
   df730:	4255 000d 4271 000d 40b9 000d               UB..qB...@..

000df73c <_ZL15firmwareVersion>:
   df73c:	0000 0000 206f 4d57 0050 0000               ....o WMP...

000df748 <_ZTV4File>:
	...
   df750:	5097 000d 5099 000d 50d9 000d 50d3 000d     .P...P...P...P..
   df760:	507d 000d 50b3 000d 50ad 000d 50a7 000d     }P...P...P...P..
   df770:	6f6c 7367 2500 3630 2e75 7874 0074 6572     logs.%06u.txt.re
   df780:	6f6d 6976 676e 6f20 646c 6c20 676f 6620     moving old log f
   df790:	6c69 2065 7325 6300 6572 7461 6e69 2067     ile %s.creating 
   df7a0:	6f6c 7367 6420 7269 2520 0073 6b6d 6964     logs dir %s.mkdi
   df7b0:	2072 6166 6c69 6465 6600 6961 656c 2064     r failed.failed 
   df7c0:	6f74 6f20 6570 206e 6f6c 7367 6420 7269     to open logs dir
   df7d0:	6300 6572 7461 6e69 2067 656e 2077 6f6c     .creating new lo
   df7e0:	2067 6966 656c 2520 3430 0064 7277 7469     g file %04d.writ
   df7f0:	2065 6f74 7320 2064 6163 6472 6620 6961     e to sd card fai
   df800:	656c 0064                                   led.

000df804 <_ZTV18SdCardPrintHandler>:
	...
   df80c:	574d 000d 5769 000d 5a4d 000d a091 000d     MW..iW..MZ......

000df81c <CSWTCH.21>:
   df81c:	0000 4348 0000 4396 0000 43c8 0000 43fa     ..HC...C...C...C
   df82c:	0000 4416                                   ...D

000df830 <_ZTV16Adafruit_TSL2591>:
	...
   df838:	5dfb 000d 5e41 000d 5df9 000d 60f3 000d     .]..A^...]...`..
   df848:	5dfd 000d 002c 2e25 6631 2500 332e 0066     .]..,.%.1f.%.3f.
   df858:	2e25 6632 7600 6569 746e 206f 6e65 6b20     %.2f.viento en k
   df868:	206d 6f70 2072 6f68 6172 7000 6c75 6167     m por hora.pulga
   df878:	6164 2073 6564 6c20 756c 6976 0061 6964     das de lluvia.di
   df888:	6572 6363 6f69 206e 6564 206c 6976 6e65     reccion del vien
   df898:	6f74 5400 6d65 6570 6172 7574 6172 4800     to.Temperatura.H
   df8a8:	6d75 6465 6461 5000 6572 6973 6e6f 4200     umedad.Presion.B
   df8b8:	7461 7265 6169 5300 6174 7472 6e69 2067     ateria.Starting 
   df8c8:	6441 6661 7572 7469 5420 4c53 3532 3139     Adafruit TSL2591
   df8d8:	5420 7365 2174 4600 756f 646e 6120 5420      Test!.Found a T
   df8e8:	4c53 3532 3139 7320 6e65 6f73 0072 6f4e     SL2591 sensor.No
   df8f8:	7320 6e65 6f73 2072 6f66 6e75 2064 2e2e      sensor found ..
   df908:	202e 6863 6365 206b 6f79 7275 7720 7269     . check your wir
   df918:	6e69 3f67 2d00 2d2d 2d2d 2d2d 2d2d 2d2d     ing?.-----------
   df928:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   df938:	2d2d 2d2d 2d2d 2d2d 002d 6553 736e 726f     ---------.Sensor
   df948:	203a 2020 2020 2020 4400 6972 6576 2072     :       .Driver 
   df958:	6556 3a72 2020 0020 6e55 7169 6575 4920     Ver:   .Unique I
   df968:	3a44 2020 2020 4d00 7861 5620 6c61 6575     D:    .Max Value
   df978:	203a 2020 0020 6c20 7875 4d00 6e69 5620     :    . lux.Min V
   df988:	6c61 6575 203a 2020 0020 6552 6f73 756c     alue:    .Resolu
   df998:	6974 6e6f 203a 2020 4700 6961 3a6e 2020     tion:   .Gain:  
   df9a8:	2020 2020 2020 0020 7831 2820 6f4c 2977            .1x (Low)
   df9b8:	3200 7835 2820 654d 6964 6d75 0029 3234     .25x (Medium).42
   df9c8:	7838 2820 6948 6867 0029 3839 3637 2078     8x (High).9876x 
   df9d8:	4d28 7861 0029 6954 696d 676e 203a 2020     (Max).Timing:   
   df9e8:	2020 2020 2000 736d 0000 0000                   . ms....

000df9f4 <_ZTVN5spark13EthernetClassE>:
	...
   df9fc:	98fb 000d 98f1 000d 98e7 000d 98dd 000d     ................
   dfa0c:	98d1 000d 98c5 000d 98b9 000d 98b1 000d     ................
   dfa1c:	98a7 000d 989d 000d b3ef 000d               ............

000dfa28 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dfa28:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   dfa38:	766f 0066 7061 0070 2b25 3330 3a64 3025     ovf.app.%+03d:%0
   dfa48:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dfa58:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000dfa68 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dfa70:	a89d 000d a8a3 000d a8e1 000d a8b1 000d     ................
   dfa80:	a89f 000d                                   ....

000dfa84 <_ZTV9IPAddress>:
	...
   dfa8c:	ade5 000d add5 000d add7 000d               ............

000dfa98 <_ZTV9USBSerial>:
	...
   dfaa0:	aebb 000d af23 000d aef9 000d a091 000d     ....#...........
   dfab0:	aeeb 000d aebd 000d aecd 000d af1d 000d     ................
   dfac0:	aedd 000d aeb7 000d                         ........

000dfac8 <_ZTVN5spark13CellularClassE>:
	...
   dfad0:	b0e5 000d b0db 000d b0d1 000d 42f5 000d     .............B..
   dfae0:	b0c5 000d b0b9 000d b0ad 000d b0a5 000d     ................
   dfaf0:	b09b 000d b091 000d b3ef 000d               ............

000dfafc <_ZTV11USARTSerial>:
	...
   dfb04:	b121 000d b18d 000d b165 000d a091 000d     !.......e.......
   dfb14:	b135 000d b151 000d b143 000d b15f 000d     5...Q...C..._...
   dfb24:	b123 000d b127 000d                         #...'...

000dfb2c <_ZTV7TwoWire>:
	...
   dfb34:	b255 000d b29f 000d b277 000d b257 000d     U.......w...W...
   dfb44:	b27f 000d b287 000d b28f 000d b297 000d     ................

000dfb54 <_ZTVN5spark12NetworkClassE>:
	...
   dfb5c:	b387 000d b391 000d b39b 000d b3a5 000d     ................
   dfb6c:	b3af 000d b3bb 000d b3c7 000d b3d3 000d     ................
   dfb7c:	b3db 000d b3e5 000d b3ef 000d               ............

000dfb88 <_ZSt7nothrow>:
   dfb88:	0000 0000                                   ....

000dfb8c <atanhi>:
   dfb8c:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000dfb9c <atanlo>:
   dfb9c:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3

000dfbac <npio2_hw>:
   dfbac:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   dfbbc:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   dfbcc:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   dfbdc:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   dfbec:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   dfbfc:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   dfc0c:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   dfc1c:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000dfc2c <two_over_pi>:
   dfc2c:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   dfc3c:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   dfc4c:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   dfc5c:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   dfc6c:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   dfc7c:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   dfc8c:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   dfc9c:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   dfcac:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   dfcbc:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   dfccc:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   dfcdc:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   dfcec:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   dfcfc:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   dfd0c:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   dfd1c:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   dfd2c:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   dfd3c:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   dfd4c:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   dfd5c:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   dfd6c:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   dfd7c:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   dfd8c:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   dfd9c:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   dfdac:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   dfdbc:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   dfdcc:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   dfddc:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   dfdec:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   dfdfc:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   dfe0c:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   dfe1c:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   dfe2c:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   dfe3c:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   dfe4c:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   dfe5c:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   dfe6c:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   dfe7c:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   dfe8c:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   dfe9c:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   dfeac:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   dfebc:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   dfecc:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   dfedc:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   dfeec:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   dfefc:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   dff0c:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   dff1c:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   dff2c:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   dff3c:	008c 0000 006b 0000                         ....k...

000dff44 <PIo2>:
   dff44:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   dff54:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   dff64:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000dff70 <init_jk>:
   dff70:	0004 0000 0007 0000 0009 0000 2e25 7333     ............%.3s
   dff80:	2520 332e 2573 6433 2520 322e 3a64 2e25      %.3s%3d %.2d:%.
   dff90:	6432 253a 322e 2064 6425 000a               2d:%.2d %d..

000dff9c <day_name.6145>:
   dff9c:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dffac:	6972 6153                                    riSat

000dffb1 <mon_name.6146>:
   dffb1:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dffc1:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dffd1:	4476 6365 0000                               vDec...

000dffd8 <DAYS_IN_MONTH>:
   dffd8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dffe8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dfff8:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e0008 <_DAYS_BEFORE_MONTH>:
   e0008:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   e0018:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   e0028:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000e0038 <__month_lengths>:
   e0038:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e0048:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e0058:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e0068:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e0078:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e0088:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e0098:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e00a8:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   e00b8:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
   e00c8:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
   e00d8:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
   e00e8:	6c33 2564 322e 646c 4a00 6e61 4600 6265     3ld%.2ld.Jan.Feb
   e00f8:	4d00 7261 4100 7270 4d00 7961 4a00 6e75     .Mar.Apr.May.Jun
   e0108:	4a00 6c75 4100 6775 5300 7065 4f00 7463     .Jul.Aug.Sep.Oct
   e0118:	4e00 766f 4400 6365 4a00 6e61 6175 7972     .Nov.Dec.January
   e0128:	4600 6265 7572 7261 0079 614d 6372 0068     .February.March.
   e0138:	7041 6972 006c 754a 656e 4a00 6c75 0079     April.June.July.
   e0148:	7541 7567 7473 5300 7065 6574 626d 7265     August.September
   e0158:	4f00 7463 626f 7265 4e00 766f 6d65 6562     .October.Novembe
   e0168:	0072 6544 6563 626d 7265 5300 6e75 4d00     r.December.Sun.M
   e0178:	6e6f 5400 6575 5700 6465 5400 7568 4600     on.Tue.Wed.Thu.F
   e0188:	6972 5300 7461 5300 6e75 6164 0079 6f4d     ri.Sat.Sunday.Mo
   e0198:	646e 7961 5400 6575 6473 7961 5700 6465     nday.Tuesday.Wed
   e01a8:	656e 6473 7961 5400 7568 7372 6164 0079     nesday.Thursday.
   e01b8:	7246 6469 7961 5300 7461 7275 6164 0079     Friday.Saturday.
   e01c8:	4825 253a 3a4d 5325 2500 2f6d 6425 252f     %H:%M:%S.%m/%d/%
   e01d8:	0079 6125 2520 2062 6525 2520 3a48 4d25     y.%a %b %e %H:%M
   e01e8:	253a 2053 5925 5000 004d 6125 2520 2062     :%S %Y.PM.%a %b 
   e01f8:	6525 2520 3a48 4d25 253a 2053 5a25 2520     %e %H:%M:%S %Z %
   e0208:	0059 646d 2500 3a49 4d25 253a 2053 7025     Y.md.%I:%M:%S %p
   e0218:	0000 0000                                   ....

000e021c <_C_time_locale>:
   e021c:	00f1 000e 00f5 000e 00f9 000e 00fd 000e     ................
   e022c:	0101 000e 0105 000e 0109 000e 010d 000e     ................
   e023c:	0111 000e 0115 000e 0119 000e 011d 000e     ................
   e024c:	0121 000e 0129 000e 0132 000e 0138 000e     !...)...2...8...
   e025c:	0101 000e 013e 000e 0143 000e 0148 000e     ....>...C...H...
   e026c:	014f 000e 0159 000e 0161 000e 016a 000e     O...Y...a...j...
   e027c:	0173 000e 0177 000e 017b 000e 017f 000e     s...w...{.......
   e028c:	0183 000e 0187 000e 018b 000e 018f 000e     ................
   e029c:	0196 000e 019d 000e 01a5 000e 01af 000e     ................
   e02ac:	01b8 000e 01bf 000e 01c8 000e 01d1 000e     ................
   e02bc:	01da 000e f6e6 000d 01ef 000e 01f2 000e     ................
   e02cc:	0121 000e 0129 000e 0132 000e 0138 000e     !...)...2...8...
   e02dc:	0101 000e 013e 000e 0143 000e 0148 000e     ....>...C...H...
   e02ec:	014f 000e 0159 000e 0161 000e 016a 000e     O...Y...a...j...
   e02fc:	020a 000e 020d 000e ff9b 000d ff9b 000d     ................
   e030c:	ff9b 000d ff9b 000d ff9b 000d 5a54 4700     ............TZ.G
   e031c:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e032c:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e033c:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e034c:	3a6e 6825 2575 006e                         n:%hu%n.

000e0354 <_ctype_>:
   e0354:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e0364:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e0374:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e0384:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e0394:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e03a4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e03b4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e03c4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e03d4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   e0454:	5000 534f 5849                               .POSIX.

000e045b <link_const_variable_data_end>:
	...

000e045c <link_constructors_location>:
   e045c:	000d4ca5 	.word	0x000d4ca5
   e0460:	000d551d 	.word	0x000d551d
   e0464:	000d8b51 	.word	0x000d8b51
   e0468:	000d9905 	.word	0x000d9905
   e046c:	000d9b31 	.word	0x000d9b31
   e0470:	000da069 	.word	0x000da069
   e0474:	000da351 	.word	0x000da351
   e0478:	000da711 	.word	0x000da711
   e047c:	000da75d 	.word	0x000da75d
   e0480:	000db0f1 	.word	0x000db0f1
   e0484:	000db4c1 	.word	0x000db4c1

000e0488 <link_constructors_end>:
	...
