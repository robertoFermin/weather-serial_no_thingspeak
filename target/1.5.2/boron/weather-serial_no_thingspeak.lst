
c:/Users/BtX/Downloads/weather-serial_no_thingspeak/target/1.5.2/boron/weather-serial_no_thingspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000cf70  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000e0f90  000e0f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000e0f98  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c4  2003bdb0  000e0f9c  0002bdb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000297c  2003be74  2003be74  0003be74  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000e1060  000e1060  00031060  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000e1088  000e1088  00031088  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00213c09  00000000  00000000  0003108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00029c1b  00000000  00000000  00244c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00037e7c  00000000  00000000  0026e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003ca8  00000000  00000000  002a672c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000073c0  00000000  00000000  002aa3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005f319  00000000  00000000  002b1794  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000743a8  00000000  00000000  00310aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0011eaf6  00000000  00000000  00384e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011ebc  00000000  00000000  004a394c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00a fb2a 	bl	de68a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00a fb2f 	bl	de6a0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003bdb0 	.word	0x2003bdb0
   d404c:	000e0f9c 	.word	0x000e0f9c
   d4050:	2003be74 	.word	0x2003be74
   d4054:	2003be74 	.word	0x2003be74
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f006 fb9f 	bl	da7a0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e0f90 	.word	0x000e0f90
   d4084:	000e0ee4 	.word	0x000e0ee4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bd2e 	b.w	d4ae8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fb9d 	bl	d47cc <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f006 bb45 	b.w	da724 <_post_loop>

000d409a <_Znwj>:
   d409a:	f005 bbbb 	b.w	d9814 <malloc>

000d409e <_ZdlPv>:
   d409e:	f005 bbc1 	b.w	d9824 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f005 bbbf 	b.w	d9824 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b6:	6810      	ldr	r0, [r2, #0]
   d40b8:	4770      	bx	lr

000d40ba <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d40ba:	4770      	bx	lr

000d40bc <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d40bc:	4770      	bx	lr
	...

000d40c0 <_Z18capturePollSensorsv>:
}

void capturePollSensors()
{
  // Set the flag to poll the sensors
  readyToCapturePollSensors = true;
   d40c0:	4b01      	ldr	r3, [pc, #4]	; (d40c8 <_Z18capturePollSensorsv+0x8>)
   d40c2:	2201      	movs	r2, #1
   d40c4:	701a      	strb	r2, [r3, #0]
   d40c6:	4770      	bx	lr
   d40c8:	2003c119 	.word	0x2003c119

000d40cc <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	4718      	bx	r3

000d40d0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40d0:	2a01      	cmp	r2, #1
   d40d2:	d002      	beq.n	d40da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40d4:	2a02      	cmp	r2, #2
   d40d6:	d002      	beq.n	d40de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40d8:	e004      	b.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40da:	6001      	str	r1, [r0, #0]
	      break;
   d40dc:	e002      	b.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40de:	680b      	ldr	r3, [r1, #0]
   d40e0:	b100      	cbz	r0, d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40e2:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40e4:	2000      	movs	r0, #0
   d40e6:	4770      	bx	lr

000d40e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d40e8:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40ea:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d40ec:	6898      	ldr	r0, [r3, #8]
   d40ee:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40f0:	f012 0f01 	tst.w	r2, #1
   d40f4:	ea4f 0262 	mov.w	r2, r2, asr #1
   d40f8:	bf18      	it	ne
   d40fa:	5881      	ldrne	r1, [r0, r2]
   d40fc:	4410      	add	r0, r2
   d40fe:	bf18      	it	ne
   d4100:	58cb      	ldrne	r3, [r1, r3]
   d4102:	4718      	bx	r3

000d4104 <__tcf_0>:

String deviceStatus;
String i2cDevices;
bool resetDevice = false;

String i2cNames[] =
   d4104:	b538      	push	{r3, r4, r5, lr}
   d4106:	4d06      	ldr	r5, [pc, #24]	; (d4120 <__tcf_0+0x1c>)
   d4108:	2400      	movs	r4, #0
   d410a:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d410e:	4428      	add	r0, r5
   d4110:	3c10      	subs	r4, #16
   d4112:	f005 fde5 	bl	d9ce0 <_ZN6StringD1Ev>
   d4116:	f114 0f80 	cmn.w	r4, #128	; 0x80
   d411a:	d1f6      	bne.n	d410a <__tcf_0+0x6>
   d411c:	bd38      	pop	{r3, r4, r5, pc}
   d411e:	bf00      	nop
   d4120:	2003bfd8 	.word	0x2003bfd8

000d4124 <_ZN7IoTNodeD1Ev>:
 * @brief Main IoT Node class.
 * Includes functions to manage external power. Read the state of the battery charger.
 * Send a "tickle" to reset the watchdog timer and control GPIO on the IO headers. 
 * 
 */
class IoTNode
   d4124:	b510      	push	{r4, lr}
   d4126:	4604      	mov	r4, r0
   d4128:	f005 fdda 	bl	d9ce0 <_ZN6StringD1Ev>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}

000d4130 <_Z22getResetAndSendSensorsv>:
  // Set the flag to poll the sensors
  readyToCapturePollSensors = true;
}

void getResetAndSendSensors()
{
   d4130:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4132:	f005 f909 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
  // Set the flag to read and send data.
  // Has to be done out of this Timer thread
  timeToNextSendMS = millis();
   d4136:	4b03      	ldr	r3, [pc, #12]	; (d4144 <_Z22getResetAndSendSensorsv+0x14>)
   d4138:	6018      	str	r0, [r3, #0]
  readyToGetResetAndSendSensors = true;
   d413a:	4b03      	ldr	r3, [pc, #12]	; (d4148 <_Z22getResetAndSendSensorsv+0x18>)
   d413c:	2201      	movs	r2, #1
   d413e:	701a      	strb	r2, [r3, #0]
   d4140:	bd08      	pop	{r3, pc}
   d4142:	bf00      	nop
   d4144:	2003d86c 	.word	0x2003d86c
   d4148:	2003c134 	.word	0x2003c134

000d414c <_ZN14WeatherSensors15handleRainEventEv>:
      }

      lastAnemoneterEvent = timeAnemometerEvent; // set up for next event
    }

    void handleRainEvent() {
   d414c:	b510      	push	{r4, lr}
   d414e:	4604      	mov	r4, r0
   d4150:	f005 f8fa 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
      // Count rain gauge bucket tips as they occur
      // Activated by the magnet and reed switch in the rain gauge, attached to input D2
      unsigned int timeRainEvent = millis(); // grab current time

      // ignore switch-bounce glitches less than 10mS after initial edge
      if(timeRainEvent - lastRainEvent < 10) {
   d4154:	f241 6264 	movw	r2, #5732	; 0x1664
   d4158:	58a3      	ldr	r3, [r4, r2]
   d415a:	1ac3      	subs	r3, r0, r3
   d415c:	2b09      	cmp	r3, #9
   d415e:	d905      	bls.n	d416c <_ZN14WeatherSensors15handleRainEventEv+0x20>
        return;
      }
      rainEventCount++; //Increase this minute's amount of rain
   d4160:	f504 51b3 	add.w	r1, r4, #5728	; 0x1660
   d4164:	680b      	ldr	r3, [r1, #0]
   d4166:	3301      	adds	r3, #1
   d4168:	600b      	str	r3, [r1, #0]
      lastRainEvent = timeRainEvent; // set up for next event
   d416a:	50a0      	str	r0, [r4, r2]
   d416c:	bd10      	pop	{r4, pc}

000d416e <_ZN14WeatherSensors21handleAnemometerEventEv>:
      attachInterrupt(AnemometerPin, &WeatherSensors::handleAnemometerEvent, this, FALLING);

      pinMode(RainPin, INPUT_PULLUP);
      attachInterrupt(RainPin, &WeatherSensors::handleRainEvent, this, FALLING);
    }
    void handleAnemometerEvent() {
   d416e:	b538      	push	{r3, r4, r5, lr}
   d4170:	4604      	mov	r4, r0
   d4172:	f005 f8e9 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
      // Activated by the magnet in the anemometer (2 ticks per rotation), attached to input D3
       unsigned int timeAnemometerEvent = millis(); // grab current time

      //If there's never been an event before (first time through), then just capture it
      if(lastAnemoneterEvent != 0) {
   d4176:	f504 51b4 	add.w	r1, r4, #5760	; 0x1680
   d417a:	680b      	ldr	r3, [r1, #0]
   d417c:	b193      	cbz	r3, d41a4 <_ZN14WeatherSensors21handleAnemometerEventEv+0x36>
          // Calculate time since last event
          unsigned int period = timeAnemometerEvent - lastAnemoneterEvent;
   d417e:	1ac3      	subs	r3, r0, r3
          // ignore switch-bounce glitches less than 10mS after initial edge (which implies a max windspeed of 149mph)
          if(period < 10) {
   d4180:	2b09      	cmp	r3, #9
   d4182:	d910      	bls.n	d41a6 <_ZN14WeatherSensors21handleAnemometerEventEv+0x38>
            return;
          }
          if(period < GustPeriod) {
   d4184:	f241 627c 	movw	r2, #5756	; 0x167c
   d4188:	58a5      	ldr	r5, [r4, r2]
   d418a:	42ab      	cmp	r3, r5
              // If the period is the shortest (and therefore fastest windspeed) seen, capture it
              GustPeriod = period;
   d418c:	bf38      	it	cc
   d418e:	50a3      	strcc	r3, [r4, r2]
          }
          AnemoneterPeriodTotal += period;
   d4190:	f241 6574 	movw	r5, #5748	; 0x1674
   d4194:	5962      	ldr	r2, [r4, r5]
   d4196:	4413      	add	r3, r2
   d4198:	5163      	str	r3, [r4, r5]
          AnemoneterPeriodReadingCount++;
   d419a:	f241 6278 	movw	r2, #5752	; 0x1678
   d419e:	58a3      	ldr	r3, [r4, r2]
   d41a0:	3301      	adds	r3, #1
   d41a2:	50a3      	str	r3, [r4, r2]
      }

      lastAnemoneterEvent = timeAnemometerEvent; // set up for next event
   d41a4:	6008      	str	r0, [r1, #0]
   d41a6:	bd38      	pop	{r3, r4, r5, pc}

000d41a8 <_ZN14WeatherSensorsD1Ev>:
  float longitude;
}config_t;
extern config_t config;

// library interface description
class WeatherSensors
   d41a8:	b510      	push	{r4, lr}
   d41aa:	4604      	mov	r4, r0
   d41ac:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
   d41b0:	3004      	adds	r0, #4
   d41b2:	f005 fd95 	bl	d9ce0 <_ZN6StringD1Ev>
   d41b6:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d41ba:	f004 ff8a 	bl	d90d2 <_ZN13RunningMedianD1Ev>
   d41be:	f104 000a 	add.w	r0, r4, #10
   d41c2:	f004 ff86 	bl	d90d2 <_ZN13RunningMedianD1Ev>
   d41c6:	4620      	mov	r0, r4
   d41c8:	bd10      	pop	{r4, pc}

000d41ca <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41ca:	6943      	ldr	r3, [r0, #20]
   d41cc:	b113      	cbz	r3, d41d4 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41ce:	6983      	ldr	r3, [r0, #24]
   d41d0:	300c      	adds	r0, #12
   d41d2:	4718      	bx	r3
   d41d4:	4770      	bx	lr
	...

000d41d8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d41d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d41da:	4602      	mov	r2, r0
   d41dc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d41de:	7913      	ldrb	r3, [r2, #4]
   d41e0:	6895      	ldr	r5, [r2, #8]
   d41e2:	b133      	cbz	r3, d41f2 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d41e4:	b93d      	cbnz	r5, d41f6 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d41e6:	490c      	ldr	r1, [pc, #48]	; (d4218 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d41e8:	b004      	add	sp, #16
   d41ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d41ee:	f005 bf61 	b.w	da0b4 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d41f2:	4b0a      	ldr	r3, [pc, #40]	; (d421c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d41f4:	e000      	b.n	d41f8 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d41f6:	4b0a      	ldr	r3, [pc, #40]	; (d4220 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d41f8:	7b16      	ldrb	r6, [r2, #12]
   d41fa:	4c0a      	ldr	r4, [pc, #40]	; (d4224 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d41fc:	490a      	ldr	r1, [pc, #40]	; (d4228 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d41fe:	7b52      	ldrb	r2, [r2, #13]
   d4200:	9202      	str	r2, [sp, #8]
   d4202:	2e01      	cmp	r6, #1
   d4204:	bf08      	it	eq
   d4206:	4621      	moveq	r1, r4
   d4208:	9101      	str	r1, [sp, #4]
   d420a:	9500      	str	r5, [sp, #0]
   d420c:	4a07      	ldr	r2, [pc, #28]	; (d422c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d420e:	2100      	movs	r1, #0
   d4210:	f006 f861 	bl	da2d6 <_ZN5Print11printf_implEbPKcz>
  }
   d4214:	b004      	add	sp, #16
   d4216:	bd70      	pop	{r4, r5, r6, pc}
   d4218:	000dffa1 	.word	0x000dffa1
   d421c:	000e05d4 	.word	0x000e05d4
   d4220:	000dff90 	.word	0x000dff90
   d4224:	000dff99 	.word	0x000dff99
   d4228:	000dff9d 	.word	0x000dff9d
   d422c:	000dffb7 	.word	0x000dffb7

000d4230 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4230:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4232:	2100      	movs	r1, #0
   d4234:	4604      	mov	r4, r0
   d4236:	4608      	mov	r0, r1
   d4238:	f005 f8ce 	bl	d93d8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d423c:	a902      	add	r1, sp, #8
   d423e:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4240:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4242:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4246:	f005 f8df 	bl	d9408 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d424a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d424c:	b10c      	cbz	r4, d4252 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d424e:	2301      	movs	r3, #1
   d4250:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4252:	2100      	movs	r1, #0
   d4254:	2001      	movs	r0, #1
   d4256:	f005 f8bf 	bl	d93d8 <os_thread_scheduling>
            }
        }
        if (t) {
   d425a:	b12c      	cbz	r4, d4268 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d425c:	6823      	ldr	r3, [r4, #0]
   d425e:	4620      	mov	r0, r4
   d4260:	689b      	ldr	r3, [r3, #8]
   d4262:	4798      	blx	r3
            t->running = false;
   d4264:	2300      	movs	r3, #0
   d4266:	7123      	strb	r3, [r4, #4]
        }
    }
   d4268:	b002      	add	sp, #8
   d426a:	bd10      	pop	{r4, pc}

000d426c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d426c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d426e:	b538      	push	{r3, r4, r5, lr}
   d4270:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4272:	d005      	beq.n	d4280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d4274:	2a03      	cmp	r2, #3
   d4276:	d00f      	beq.n	d4298 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
   d4278:	2a01      	cmp	r2, #1
   d427a:	d111      	bne.n	d42a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d427c:	680b      	ldr	r3, [r1, #0]
   d427e:	e009      	b.n	d4294 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4280:	200c      	movs	r0, #12
   d4282:	680d      	ldr	r5, [r1, #0]
   d4284:	f7ff ff09 	bl	d409a <_Znwj>
   d4288:	4603      	mov	r3, r0
   d428a:	b118      	cbz	r0, d4294 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
   d428c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4290:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4294:	6023      	str	r3, [r4, #0]
   d4296:	e003      	b.n	d42a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4298:	210c      	movs	r1, #12
   d429a:	6800      	ldr	r0, [r0, #0]
   d429c:	f007 fa7a 	bl	db794 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d42a0:	2000      	movs	r0, #0
   d42a2:	bd38      	pop	{r3, r4, r5, pc}

000d42a4 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42a4:	b510      	push	{r4, lr}
   d42a6:	4b05      	ldr	r3, [pc, #20]	; (d42bc <_ZN8particle9LEDStatusD1Ev+0x18>)
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42a8:	2200      	movs	r2, #0

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42aa:	4604      	mov	r4, r0
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42ac:	4611      	mov	r1, r2

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42ae:	f840 3b04 	str.w	r3, [r0], #4
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42b2:	f005 f9c9 	bl	d9648 <led_set_status_active>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}
   d42b6:	4620      	mov	r0, r4
   d42b8:	bd10      	pop	{r4, pc}
   d42ba:	bf00      	nop
   d42bc:	000dff84 	.word	0x000dff84

000d42c0 <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42c0:	b510      	push	{r4, lr}
   d42c2:	4604      	mov	r4, r0
    setActive(false);
}
   d42c4:	f7ff ffee 	bl	d42a4 <_ZN8particle9LEDStatusD1Ev>
   d42c8:	4620      	mov	r0, r4
   d42ca:	2120      	movs	r1, #32
   d42cc:	f007 fa62 	bl	db794 <_ZdlPvj>
   d42d0:	4620      	mov	r0, r4
   d42d2:	bd10      	pop	{r4, pc}

000d42d4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d42d4:	2200      	movs	r2, #0
   d42d6:	4611      	mov	r1, r2
   d42d8:	6840      	ldr	r0, [r0, #4]
   d42da:	f005 ba2b 	b.w	d9734 <network_ready>

000d42de <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42de:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d42e0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42e2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d42e4:	b113      	cbz	r3, d42ec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42e6:	2203      	movs	r2, #3
   d42e8:	4601      	mov	r1, r0
   d42ea:	4798      	blx	r3
    }
   d42ec:	4620      	mov	r0, r4
   d42ee:	bd10      	pop	{r4, pc}

000d42f0 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d42f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42f2:	2500      	movs	r5, #0
   d42f4:	468e      	mov	lr, r1
   d42f6:	4915      	ldr	r1, [pc, #84]	; (d434c <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d42f8:	7105      	strb	r5, [r0, #4]
   d42fa:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d42fc:	6145      	str	r5, [r0, #20]
   d42fe:	6001      	str	r1, [r0, #0]
   d4300:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4302:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4306:	b085      	sub	sp, #20
   d4308:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d430a:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d430e:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4312:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4316:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d431a:	e897 0003 	ldmia.w	r7, {r0, r1}
   d431e:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4322:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4324:	6960      	ldr	r0, [r4, #20]
   d4326:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4328:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d432a:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d432c:	69a0      	ldr	r0, [r4, #24]
   d432e:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4330:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4332:	e88d 0028 	stmia.w	sp, {r3, r5}
   d4336:	4a06      	ldr	r2, [pc, #24]	; (d4350 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d4338:	4623      	mov	r3, r4
   d433a:	4671      	mov	r1, lr
   d433c:	f104 0008 	add.w	r0, r4, #8
   d4340:	f005 f852 	bl	d93e8 <os_timer_create>
    }
   d4344:	4620      	mov	r0, r4
   d4346:	b005      	add	sp, #20
   d4348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d434a:	bf00      	nop
   d434c:	000dff70 	.word	0x000dff70
   d4350:	000d4231 	.word	0x000d4231

000d4354 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4354:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4356:	6880      	ldr	r0, [r0, #8]
   d4358:	2300      	movs	r3, #0
   d435a:	b138      	cbz	r0, d436c <_ZN5Timer5_stopEjb+0x18>
   d435c:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4360:	2102      	movs	r1, #2
   d4362:	f005 f859 	bl	d9418 <os_timer_change>
   d4366:	fab0 f080 	clz	r0, r0
   d436a:	0940      	lsrs	r0, r0, #5
    }
   d436c:	b003      	add	sp, #12
   d436e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4374 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4374:	b538      	push	{r3, r4, r5, lr}
   d4376:	4b10      	ldr	r3, [pc, #64]	; (d43b8 <_ZN5TimerD1Ev+0x44>)
   d4378:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d437a:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d437c:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d437e:	b1a3      	cbz	r3, d43aa <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4384:	2200      	movs	r2, #0
   d4386:	f7ff ffe5 	bl	d4354 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d438a:	2100      	movs	r1, #0
   d438c:	68a0      	ldr	r0, [r4, #8]
   d438e:	f005 f85b 	bl	d9448 <os_timer_set_id>
            while (running) {
   d4392:	7923      	ldrb	r3, [r4, #4]
   d4394:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4398:	b113      	cbz	r3, d43a0 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d439a:	f005 f805 	bl	d93a8 <os_thread_yield>
   d439e:	e7f8      	b.n	d4392 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d43a0:	4629      	mov	r1, r5
   d43a2:	68a0      	ldr	r0, [r4, #8]
   d43a4:	f005 f828 	bl	d93f8 <os_timer_destroy>
            handle = nullptr;
   d43a8:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d43aa:	f104 000c 	add.w	r0, r4, #12
   d43ae:	f7ff ff96 	bl	d42de <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43b2:	4620      	mov	r0, r4
   d43b4:	bd38      	pop	{r3, r4, r5, pc}
   d43b6:	bf00      	nop
   d43b8:	000dff70 	.word	0x000dff70

000d43bc <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43bc:	b510      	push	{r4, lr}
   d43be:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43c0:	f7ff ffd8 	bl	d4374 <_ZN5TimerD1Ev>
   d43c4:	4620      	mov	r0, r4
   d43c6:	211c      	movs	r1, #28
   d43c8:	f007 f9e4 	bl	db794 <_ZdlPvj>
   d43cc:	4620      	mov	r0, r4
   d43ce:	bd10      	pop	{r4, pc}

000d43d0 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43d2:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43d4:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43d6:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43d8:	4611      	mov	r1, r2
   d43da:	f7ff ffbb 	bl	d4354 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d43de:	68a8      	ldr	r0, [r5, #8]
   d43e0:	2300      	movs	r3, #0
   d43e2:	b140      	cbz	r0, d43f6 <_ZN5Timer5startEj+0x26>
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	9400      	str	r4, [sp, #0]
   d43e8:	461a      	mov	r2, r3
   d43ea:	4619      	mov	r1, r3
   d43ec:	f005 f814 	bl	d9418 <os_timer_change>
   d43f0:	fab0 f080 	clz	r0, r0
   d43f4:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43f6:	b003      	add	sp, #12
   d43f8:	bd30      	pop	{r4, r5, pc}
	...

000d43fc <_Z15checkI2CDevicesv>:
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
   d43fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4400:	4f4d      	ldr	r7, [pc, #308]	; (d4538 <_Z15checkI2CDevicesv+0x13c>)
  for (size_t i; i<i2cLength; ++i)
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];
   d4402:	f8df 9148 	ldr.w	r9, [pc, #328]	; d454c <_Z15checkI2CDevicesv+0x150>
   d4406:	f8df 8148 	ldr.w	r8, [pc, #328]	; d4550 <_Z15checkI2CDevicesv+0x154>
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
   d440a:	b08d      	sub	sp, #52	; 0x34
   d440c:	2400      	movs	r4, #0
  byte error, address;
  bool result = true;
   d440e:	2501      	movs	r5, #1
  for (size_t i; i<i2cLength; ++i)
   d4410:	2c08      	cmp	r4, #8
   d4412:	f000 808d 	beq.w	d4530 <_Z15checkI2CDevicesv+0x134>
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];
   d4416:	f814 6009 	ldrb.w	r6, [r4, r9]

    Wire.beginTransmission(address);
   d441a:	f007 f987 	bl	db72c <_Z19__fetch_global_Wirev>
   d441e:	4631      	mov	r1, r6
   d4420:	f006 ff67 	bl	db2f2 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d4424:	f007 f982 	bl	db72c <_Z19__fetch_global_Wirev>
   d4428:	f006 ff6e 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

    //Try again if !error=0
    if (!error==0)
   d442c:	2800      	cmp	r0, #0
   d442e:	d04e      	beq.n	d44ce <_Z15checkI2CDevicesv+0xd2>
    {
      delay(10);
   d4430:	200a      	movs	r0, #10
   d4432:	f006 f931 	bl	da698 <delay>
      Wire.beginTransmission(address);
   d4436:	f007 f979 	bl	db72c <_Z19__fetch_global_Wirev>
   d443a:	4631      	mov	r1, r6
   d443c:	f006 ff59 	bl	db2f2 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d4440:	f007 f974 	bl	db72c <_Z19__fetch_global_Wirev>
   d4444:	f006 ff60 	bl	db308 <_ZN7TwoWire15endTransmissionEv>
    }

    //Try reset if !error=0
    if (!error==0)
   d4448:	2800      	cmp	r0, #0
   d444a:	d040      	beq.n	d44ce <_Z15checkI2CDevicesv+0xd2>
    {
      Wire.reset();
   d444c:	f007 f96e 	bl	db72c <_Z19__fetch_global_Wirev>
   d4450:	f006 ff61 	bl	db316 <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d4454:	f007 f96a 	bl	db72c <_Z19__fetch_global_Wirev>
   d4458:	4631      	mov	r1, r6
   d445a:	f006 ff4a 	bl	db2f2 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d445e:	f007 f965 	bl	db72c <_Z19__fetch_global_Wirev>
   d4462:	f006 ff51 	bl	db308 <_ZN7TwoWire15endTransmissionEv>
    }
 
    if (error == 0)
   d4466:	b390      	cbz	r0, d44ce <_Z15checkI2CDevicesv+0xd2>
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
      i2cExists[i]=true;
    }
    else
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " NOT at"+" address:0x"+String(address, HEX)));
   d4468:	f006 fd5e 	bl	daf28 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d446c:	4933      	ldr	r1, [pc, #204]	; (d453c <_Z15checkI2CDevicesv+0x140>)
   d446e:	4605      	mov	r5, r0
   d4470:	4668      	mov	r0, sp
   d4472:	f005 fc7c 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4476:	4639      	mov	r1, r7
   d4478:	4668      	mov	r0, sp
   d447a:	f005 fd56 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d447e:	4930      	ldr	r1, [pc, #192]	; (d4540 <_Z15checkI2CDevicesv+0x144>)
   d4480:	f005 fd5f 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d4484:	492f      	ldr	r1, [pc, #188]	; (d4544 <_Z15checkI2CDevicesv+0x148>)
   d4486:	f005 fd5c 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d448a:	2210      	movs	r2, #16
   d448c:	4682      	mov	sl, r0
   d448e:	4631      	mov	r1, r6
   d4490:	eb0d 0002 	add.w	r0, sp, r2
   d4494:	f005 fcdf 	bl	d9e56 <_ZN6StringC1Ehh>
   d4498:	a904      	add	r1, sp, #16
   d449a:	4650      	mov	r0, sl
   d449c:	f005 fd45 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d44a0:	4601      	mov	r1, r0
   d44a2:	a808      	add	r0, sp, #32
   d44a4:	f005 fca2 	bl	d9dec <_ZN6StringC1ERKS_>
   d44a8:	9908      	ldr	r1, [sp, #32]
   d44aa:	4628      	mov	r0, r5
   d44ac:	f005 fe19 	bl	da0e2 <_ZN5Print7printlnEPKc>
   d44b0:	a808      	add	r0, sp, #32
   d44b2:	f005 fc15 	bl	d9ce0 <_ZN6StringD1Ev>
   d44b6:	a804      	add	r0, sp, #16
   d44b8:	f005 fc12 	bl	d9ce0 <_ZN6StringD1Ev>
      i2cExists[i]=false;
   d44bc:	2500      	movs	r5, #0

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d44be:	4668      	mov	r0, sp
   d44c0:	f005 fc0e 	bl	d9ce0 <_ZN6StringD1Ev>
   d44c4:	f808 5004 	strb.w	r5, [r8, r4]
// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
  byte error, address;
  bool result = true;
  for (size_t i; i<i2cLength; ++i)
   d44c8:	3401      	adds	r4, #1
   d44ca:	3710      	adds	r7, #16
   d44cc:	e7a0      	b.n	d4410 <_Z15checkI2CDevicesv+0x14>
      error = Wire.endTransmission();
    }
 
    if (error == 0)
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
   d44ce:	f006 fd2b 	bl	daf28 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d44d2:	491a      	ldr	r1, [pc, #104]	; (d453c <_Z15checkI2CDevicesv+0x140>)
   d44d4:	4682      	mov	sl, r0
   d44d6:	4668      	mov	r0, sp
   d44d8:	f005 fc49 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d44dc:	4639      	mov	r1, r7
   d44de:	4668      	mov	r0, sp
   d44e0:	f005 fd23 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d44e4:	4918      	ldr	r1, [pc, #96]	; (d4548 <_Z15checkI2CDevicesv+0x14c>)
   d44e6:	f005 fd2c 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d44ea:	4916      	ldr	r1, [pc, #88]	; (d4544 <_Z15checkI2CDevicesv+0x148>)
   d44ec:	f005 fd29 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d44f0:	2210      	movs	r2, #16
   d44f2:	4683      	mov	fp, r0
   d44f4:	4631      	mov	r1, r6
   d44f6:	eb0d 0002 	add.w	r0, sp, r2
   d44fa:	f005 fcac 	bl	d9e56 <_ZN6StringC1Ehh>
   d44fe:	a904      	add	r1, sp, #16
   d4500:	4658      	mov	r0, fp
   d4502:	f005 fd12 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d4506:	4601      	mov	r1, r0
   d4508:	a808      	add	r0, sp, #32
   d450a:	f005 fc6f 	bl	d9dec <_ZN6StringC1ERKS_>
   d450e:	9908      	ldr	r1, [sp, #32]
   d4510:	4650      	mov	r0, sl
   d4512:	f005 fde6 	bl	da0e2 <_ZN5Print7printlnEPKc>
   d4516:	a808      	add	r0, sp, #32
   d4518:	f005 fbe2 	bl	d9ce0 <_ZN6StringD1Ev>
   d451c:	a804      	add	r0, sp, #16
   d451e:	f005 fbdf 	bl	d9ce0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4522:	4668      	mov	r0, sp
   d4524:	f005 fbdc 	bl	d9ce0 <_ZN6StringD1Ev>
      i2cExists[i]=true;
   d4528:	2301      	movs	r3, #1
   d452a:	f808 3004 	strb.w	r3, [r8, r4]
   d452e:	e7cb      	b.n	d44c8 <_Z15checkI2CDevicesv+0xcc>
      i2cExists[i]=false;
      result = false;
    }
  }
  return result;
}
   d4530:	4628      	mov	r0, r5
   d4532:	b00d      	add	sp, #52	; 0x34
   d4534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4538:	2003bfd8 	.word	0x2003bfd8
   d453c:	000dffd5 	.word	0x000dffd5
   d4540:	000dffdd 	.word	0x000dffdd
   d4544:	000dffe5 	.word	0x000dffe5
   d4548:	000dffe1 	.word	0x000dffe1
   d454c:	2003bdb0 	.word	0x2003bdb0
   d4550:	2003c111 	.word	0x2003c111

000d4554 <_Z8printI2Ci>:


void printI2C(int inx)
{
   d4554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4558:	4d1e      	ldr	r5, [pc, #120]	; (d45d4 <_Z8printI2Ci+0x80>)
    for (int i=0; i<i2cLength; i++)
        {
          if (i2cAddr[i] == inx)
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));
   d455a:	4f1f      	ldr	r7, [pc, #124]	; (d45d8 <_Z8printI2Ci+0x84>)
  return result;
}


void printI2C(int inx)
{
   d455c:	b08d      	sub	sp, #52	; 0x34
   d455e:	4606      	mov	r6, r0
    for (int i=0; i<i2cLength; i++)
   d4560:	2400      	movs	r4, #0
        {
          if (i2cAddr[i] == inx)
   d4562:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d4566:	42b3      	cmp	r3, r6
   d4568:	d12d      	bne.n	d45c6 <_Z8printI2Ci+0x72>
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));
   d456a:	f006 fcdd 	bl	daf28 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d456e:	491b      	ldr	r1, [pc, #108]	; (d45dc <_Z8printI2Ci+0x88>)
   d4570:	4680      	mov	r8, r0
   d4572:	4668      	mov	r0, sp
   d4574:	f005 fbfb 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4578:	eb07 1104 	add.w	r1, r7, r4, lsl #4
   d457c:	4668      	mov	r0, sp
   d457e:	f005 fcd4 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d4582:	4917      	ldr	r1, [pc, #92]	; (d45e0 <_Z8printI2Ci+0x8c>)
   d4584:	f005 fcdd 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d4588:	4916      	ldr	r1, [pc, #88]	; (d45e4 <_Z8printI2Ci+0x90>)
   d458a:	f005 fcda 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d458e:	2210      	movs	r2, #16
   d4590:	4681      	mov	r9, r0
   d4592:	7829      	ldrb	r1, [r5, #0]
   d4594:	eb0d 0002 	add.w	r0, sp, r2
   d4598:	f005 fc5d 	bl	d9e56 <_ZN6StringC1Ehh>
   d459c:	a904      	add	r1, sp, #16
   d459e:	4648      	mov	r0, r9
   d45a0:	f005 fcc3 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d45a4:	4601      	mov	r1, r0
   d45a6:	a808      	add	r0, sp, #32
   d45a8:	f005 fc20 	bl	d9dec <_ZN6StringC1ERKS_>
   d45ac:	9908      	ldr	r1, [sp, #32]
   d45ae:	4640      	mov	r0, r8
   d45b0:	f005 fd97 	bl	da0e2 <_ZN5Print7printlnEPKc>
   d45b4:	a808      	add	r0, sp, #32
   d45b6:	f005 fb93 	bl	d9ce0 <_ZN6StringD1Ev>
   d45ba:	a804      	add	r0, sp, #16
   d45bc:	f005 fb90 	bl	d9ce0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d45c0:	4668      	mov	r0, sp
   d45c2:	f005 fb8d 	bl	d9ce0 <_ZN6StringD1Ev>
}


void printI2C(int inx)
{
    for (int i=0; i<i2cLength; i++)
   d45c6:	3401      	adds	r4, #1
   d45c8:	2c08      	cmp	r4, #8
   d45ca:	d1ca      	bne.n	d4562 <_Z8printI2Ci+0xe>
          if (i2cAddr[i] == inx)
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));
          }
        }        
}
   d45cc:	b00d      	add	sp, #52	; 0x34
   d45ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d45d2:	bf00      	nop
   d45d4:	2003bdaf 	.word	0x2003bdaf
   d45d8:	2003bfd8 	.word	0x2003bfd8
   d45dc:	000dffd5 	.word	0x000dffd5
   d45e0:	000dffe1 	.word	0x000dffe1
   d45e4:	000dffe5 	.word	0x000dffe5

000d45e8 <_Z7scanI2Cv>:

void scanI2C()
{
   d45e8:	b570      	push	{r4, r5, r6, lr}
  byte error, address;
  int nDevices;
 
  DEBUG_PRINTLN("Scanning...");
   d45ea:	f006 fc9d 	bl	daf28 <_Z16_fetch_usbserialv>
   d45ee:	491d      	ldr	r1, [pc, #116]	; (d4664 <_Z7scanI2Cv+0x7c>)
   d45f0:	f005 fd77 	bl	da0e2 <_ZN5Print7printlnEPKc>
   d45f4:	2401      	movs	r4, #1
  nDevices = 0;
   d45f6:	2500      	movs	r5, #0
  for(address = 1; address < 127; address++ )
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
   d45f8:	f007 f898 	bl	db72c <_Z19__fetch_global_Wirev>
   d45fc:	b2e1      	uxtb	r1, r4
   d45fe:	f006 fe78 	bl	db2f2 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d4602:	f007 f893 	bl	db72c <_Z19__fetch_global_Wirev>
   d4606:	f006 fe7f 	bl	db308 <_ZN7TwoWire15endTransmissionEv>
 
    if (error == 0)
   d460a:	b920      	cbnz	r0, d4616 <_Z7scanI2Cv+0x2e>
    {
      printI2C(address);
   d460c:	4620      	mov	r0, r4
   d460e:	f7ff ffa1 	bl	d4554 <_Z8printI2Ci>
 
      nDevices++;
   d4612:	3501      	adds	r5, #1
   d4614:	e017      	b.n	d4646 <_Z7scanI2Cv+0x5e>
    }
    else if (error==4)
   d4616:	2804      	cmp	r0, #4
   d4618:	d115      	bne.n	d4646 <_Z7scanI2Cv+0x5e>
    {
      DEBUG_PRINT("Unknown error at address 0x");
   d461a:	f006 fc85 	bl	daf28 <_Z16_fetch_usbserialv>
   d461e:	4912      	ldr	r1, [pc, #72]	; (d4668 <_Z7scanI2Cv+0x80>)
   d4620:	f005 fd48 	bl	da0b4 <_ZN5Print5printEPKc>
      if (address<16)
   d4624:	2c0f      	cmp	r4, #15
   d4626:	d804      	bhi.n	d4632 <_Z7scanI2Cv+0x4a>
        DEBUG_PRINT("0");
   d4628:	f006 fc7e 	bl	daf28 <_Z16_fetch_usbserialv>
   d462c:	490f      	ldr	r1, [pc, #60]	; (d466c <_Z7scanI2Cv+0x84>)
   d462e:	f005 fd41 	bl	da0b4 <_ZN5Print5printEPKc>
      DEBUG_PRINTLN(address,HEX);
   d4632:	f006 fc79 	bl	daf28 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4636:	2210      	movs	r2, #16
   d4638:	4606      	mov	r6, r0
   d463a:	4621      	mov	r1, r4
   d463c:	f005 fd5d 	bl	da0fa <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4640:	4630      	mov	r0, r6
   d4642:	f005 fd42 	bl	da0ca <_ZN5Print7printlnEv>
   d4646:	3401      	adds	r4, #1
  byte error, address;
  int nDevices;
 
  DEBUG_PRINTLN("Scanning...");
  nDevices = 0;
  for(address = 1; address < 127; address++ )
   d4648:	2c7f      	cmp	r4, #127	; 0x7f
   d464a:	d1d5      	bne.n	d45f8 <_Z7scanI2Cv+0x10>
      if (address<16)
        DEBUG_PRINT("0");
      DEBUG_PRINTLN(address,HEX);
    }    
  }
  if (nDevices == 0)
   d464c:	b91d      	cbnz	r5, d4656 <_Z7scanI2Cv+0x6e>
    DEBUG_PRINTLN("No I2C devices found\n");
   d464e:	f006 fc6b 	bl	daf28 <_Z16_fetch_usbserialv>
   d4652:	4907      	ldr	r1, [pc, #28]	; (d4670 <_Z7scanI2Cv+0x88>)
   d4654:	e002      	b.n	d465c <_Z7scanI2Cv+0x74>
  else
    DEBUG_PRINTLN("done\n");
   d4656:	f006 fc67 	bl	daf28 <_Z16_fetch_usbserialv>
   d465a:	4906      	ldr	r1, [pc, #24]	; (d4674 <_Z7scanI2Cv+0x8c>)
}
   d465c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }    
  }
  if (nDevices == 0)
    DEBUG_PRINTLN("No I2C devices found\n");
  else
    DEBUG_PRINTLN("done\n");
   d4660:	f005 bd3f 	b.w	da0e2 <_ZN5Print7printlnEPKc>
   d4664:	000dfff1 	.word	0x000dfff1
   d4668:	000dfffd 	.word	0x000dfffd
   d466c:	000e0019 	.word	0x000e0019
   d4670:	000e001b 	.word	0x000e001b
   d4674:	000e0031 	.word	0x000e0031

000d4678 <_Z7connectv>:
}

// Adding explicit connect routine that has to work before the rest of the code runs
void connect()
{
   d4678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  #if Wiring_Cellular
  bool cellready=Cellular.ready();
   d467a:	4d41      	ldr	r5, [pc, #260]	; (d4780 <_Z7connectv+0x108>)
   d467c:	4628      	mov	r0, r5
   d467e:	f7ff fe29 	bl	d42d4 <_ZN5spark13CellularClass5readyEv>
  if (!cellready)
   d4682:	4604      	mov	r4, r0
   d4684:	bb40      	cbnz	r0, d46d8 <_Z7connectv+0x60>
  {
    DEBUG_PRINTLN("Attempting to connect cellular...");
   d4686:	f006 fc4f 	bl	daf28 <_Z16_fetch_usbserialv>
   d468a:	493e      	ldr	r1, [pc, #248]	; (d4784 <_Z7connectv+0x10c>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d468c:	4e3e      	ldr	r6, [pc, #248]	; (d4788 <_Z7connectv+0x110>)
   d468e:	f005 fd28 	bl	da0e2 <_ZN5Print7printlnEPKc>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4692:	4623      	mov	r3, r4
   d4694:	4622      	mov	r2, r4
   d4696:	4621      	mov	r1, r4
   d4698:	6868      	ldr	r0, [r5, #4]
   d469a:	f005 f853 	bl	d9744 <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d469e:	4623      	mov	r3, r4
   d46a0:	4622      	mov	r2, r4
   d46a2:	4621      	mov	r1, r4
   d46a4:	6868      	ldr	r0, [r5, #4]
   d46a6:	f005 f82d 	bl	d9704 <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46aa:	4620      	mov	r0, r4
   d46ac:	f004 fe64 	bl	d9378 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d46b0:	2500      	movs	r5, #0
   d46b2:	4604      	mov	r4, r0
   d46b4:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46b6:	2000      	movs	r0, #0
   d46b8:	f004 fe5e 	bl	d9378 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d46bc:	1b00      	subs	r0, r0, r4
   d46be:	eb61 0105 	sbc.w	r1, r1, r5
   d46c2:	428f      	cmp	r7, r1
   d46c4:	bf08      	it	eq
   d46c6:	4286      	cmpeq	r6, r0
   d46c8:	d335      	bcc.n	d4736 <_Z7connectv+0xbe>
    Cellular.on();
    Cellular.connect();
    waitFor(Cellular.ready,180000);
   d46ca:	482d      	ldr	r0, [pc, #180]	; (d4780 <_Z7connectv+0x108>)
   d46cc:	f7ff fe02 	bl	d42d4 <_ZN5spark13CellularClass5readyEv>
   d46d0:	bb88      	cbnz	r0, d4736 <_Z7connectv+0xbe>
            spark_process();
   d46d2:	f005 f86f 	bl	d97b4 <spark_process>
   d46d6:	e7ee      	b.n	d46b6 <_Z7connectv+0x3e>
    System.reset();
    }
  }
  else
  {
    DEBUG_PRINTLN("Cellular ready");
   d46d8:	f006 fc26 	bl	daf28 <_Z16_fetch_usbserialv>
   d46dc:	492b      	ldr	r1, [pc, #172]	; (d478c <_Z7connectv+0x114>)
   d46de:	f005 fd00 	bl	da0e2 <_ZN5Print7printlnEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d46e2:	f005 f877 	bl	d97d4 <spark_cloud_flag_connected>
    DEBUG_PRINTLN("Cellular ready");
  }
  #endif

  bool partconnected=Particle.connected();
  if (!partconnected)
   d46e6:	4604      	mov	r4, r0
   d46e8:	b9f0      	cbnz	r0, d4728 <_Z7connectv+0xb0>
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
   d46ea:	f006 fc1d 	bl	daf28 <_Z16_fetch_usbserialv>
   d46ee:	4928      	ldr	r1, [pc, #160]	; (d4790 <_Z7connectv+0x118>)
   d46f0:	f005 fcf7 	bl	da0e2 <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d46f4:	f005 f866 	bl	d97c4 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46f8:	4620      	mov	r0, r4
   d46fa:	f004 fe3d 	bl	d9378 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d46fe:	2500      	movs	r5, #0
   d4700:	4604      	mov	r4, r0
   d4702:	f64e 265f 	movw	r6, #59999	; 0xea5f
   d4706:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4708:	2000      	movs	r0, #0
   d470a:	f004 fe35 	bl	d9378 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d470e:	1b00      	subs	r0, r0, r4
   d4710:	eb61 0105 	sbc.w	r1, r1, r5
   d4714:	428f      	cmp	r7, r1
   d4716:	bf08      	it	eq
   d4718:	4286      	cmpeq	r6, r0
   d471a:	d31f      	bcc.n	d475c <_Z7connectv+0xe4>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d471c:	f005 f85a 	bl	d97d4 <spark_cloud_flag_connected>
   d4720:	b9e0      	cbnz	r0, d475c <_Z7connectv+0xe4>
            spark_process();
   d4722:	f005 f847 	bl	d97b4 <spark_process>
   d4726:	e7ef      	b.n	d4708 <_Z7connectv+0x90>
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d4728:	f006 fbfe 	bl	daf28 <_Z16_fetch_usbserialv>
   d472c:	4919      	ldr	r1, [pc, #100]	; (d4794 <_Z7connectv+0x11c>)
  }
}
   d472e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d4732:	f005 bcd6 	b.w	da0e2 <_ZN5Print7printlnEPKc>
  if (!cellready)
  {
    DEBUG_PRINTLN("Attempting to connect cellular...");
    Cellular.on();
    Cellular.connect();
    waitFor(Cellular.ready,180000);
   d4736:	4812      	ldr	r0, [pc, #72]	; (d4780 <_Z7connectv+0x108>)
   d4738:	f7ff fdcc 	bl	d42d4 <_ZN5spark13CellularClass5readyEv>
    if (!Cellular.ready())
   d473c:	4810      	ldr	r0, [pc, #64]	; (d4780 <_Z7connectv+0x108>)
   d473e:	f7ff fdc9 	bl	d42d4 <_ZN5spark13CellularClass5readyEv>
   d4742:	2800      	cmp	r0, #0
   d4744:	d1cd      	bne.n	d46e2 <_Z7connectv+0x6a>
    {
    DEBUG_PRINTLN("Cellular not ready - resetting");
   d4746:	f006 fbef 	bl	daf28 <_Z16_fetch_usbserialv>
   d474a:	4913      	ldr	r1, [pc, #76]	; (d4798 <_Z7connectv+0x120>)
   d474c:	f005 fcc9 	bl	da0e2 <_ZN5Print7printlnEPKc>
    delay(200);
   d4750:	20c8      	movs	r0, #200	; 0xc8
   d4752:	f005 ffa1 	bl	da698 <delay>
    System.reset();
   d4756:	f005 f9ed 	bl	d9b34 <_ZN11SystemClass5resetEv>
   d475a:	e7c2      	b.n	d46e2 <_Z7connectv+0x6a>
   d475c:	f005 f83a 	bl	d97d4 <spark_cloud_flag_connected>
   d4760:	f005 f838 	bl	d97d4 <spark_cloud_flag_connected>
    DEBUG_PRINTLN("Attempting to connect to Particle...");
    Particle.connect();
    // Note: that conditions must be a function that takes a void argument function(void) with the () removed,
    // e.g. Particle.connected instead of Particle.connected().
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
   d4764:	b958      	cbnz	r0, d477e <_Z7connectv+0x106>
    {
      DEBUG_PRINTLN("Particle not connected - resetting");
   d4766:	f006 fbdf 	bl	daf28 <_Z16_fetch_usbserialv>
   d476a:	490c      	ldr	r1, [pc, #48]	; (d479c <_Z7connectv+0x124>)
   d476c:	f005 fcb9 	bl	da0e2 <_ZN5Print7printlnEPKc>
      delay(200);
   d4770:	20c8      	movs	r0, #200	; 0xc8
   d4772:	f005 ff91 	bl	da698 <delay>
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
  }
}
   d4776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
    {
      DEBUG_PRINTLN("Particle not connected - resetting");
      delay(200);
      System.reset();
   d477a:	f005 b9db 	b.w	d9b34 <_ZN11SystemClass5resetEv>
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
  }
}
   d477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4780:	2003e2dc 	.word	0x2003e2dc
   d4784:	000e0037 	.word	0x000e0037
   d4788:	0002bf1f 	.word	0x0002bf1f
   d478c:	000e0078 	.word	0x000e0078
   d4790:	000e0087 	.word	0x000e0087
   d4794:	000e00cf 	.word	0x000e00cf
   d4798:	000e0059 	.word	0x000e0059
   d479c:	000e00ac 	.word	0x000e00ac

000d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47a0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d47a2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47a4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d47a6:	b17c      	cbz	r4, d47c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d47a8:	6863      	ldr	r3, [r4, #4]
   d47aa:	3b01      	subs	r3, #1
   d47ac:	6063      	str	r3, [r4, #4]
   d47ae:	b95b      	cbnz	r3, d47c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d47b0:	6823      	ldr	r3, [r4, #0]
   d47b2:	4620      	mov	r0, r4
   d47b4:	689b      	ldr	r3, [r3, #8]
   d47b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d47b8:	68a3      	ldr	r3, [r4, #8]
   d47ba:	3b01      	subs	r3, #1
   d47bc:	60a3      	str	r3, [r4, #8]
   d47be:	b91b      	cbnz	r3, d47c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d47c0:	6823      	ldr	r3, [r4, #0]
   d47c2:	4620      	mov	r0, r4
   d47c4:	68db      	ldr	r3, [r3, #12]
   d47c6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d47c8:	4628      	mov	r0, r5
   d47ca:	bd38      	pop	{r3, r4, r5, pc}

000d47cc <loop>:
  }
}

// Note that CSV format is:
// unixTime,windDegrees,wind_speed,humidity,air_temp,rain,pressure,wind_gust,millivolts,lux
void loop() {
   d47cc:	b570      	push	{r4, r5, r6, lr}
  
  if (readyToGetResetAndSendSensors)
   d47ce:	4d77      	ldr	r5, [pc, #476]	; (d49ac <loop+0x1e0>)
   d47d0:	782b      	ldrb	r3, [r5, #0]
  }
}

// Note that CSV format is:
// unixTime,windDegrees,wind_speed,humidity,air_temp,rain,pressure,wind_gust,millivolts,lux
void loop() {
   d47d2:	b0ee      	sub	sp, #440	; 0x1b8
  
  if (readyToGetResetAndSendSensors)
   d47d4:	2b00      	cmp	r3, #0
   d47d6:	f000 80c3 	beq.w	d4960 <loop+0x194>
  {
    char msg[256]; 
snprintf(msg, sizeof(msg) , 
   d47da:	4c75      	ldr	r4, [pc, #468]	; (d49b0 <loop+0x1e4>)
 sensorReadings.rainmmx1000 / 1000.0 , 
  sensorReadings.windDegrees ,
 sensorReadings.airTempKx10 / 10.0 , 
 sensorReadings.humid,
 sensorReadings.barometerhPa,  
 sensorReadings.millivolts);
   d47dc:	8ae3      	ldrh	r3, [r4, #22]
   d47de:	930c      	str	r3, [sp, #48]	; 0x30
   d47e0:	6920      	ldr	r0, [r4, #16]
   d47e2:	f009 f8ad 	bl	dd940 <__aeabi_f2d>
   d47e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d47ea:	7a23      	ldrb	r3, [r4, #8]
   d47ec:	9308      	str	r3, [sp, #32]
   d47ee:	8960      	ldrh	r0, [r4, #10]
   d47f0:	f009 f894 	bl	dd91c <__aeabi_i2d>
   d47f4:	2200      	movs	r2, #0
   d47f6:	4b6f      	ldr	r3, [pc, #444]	; (d49b4 <loop+0x1e8>)
   d47f8:	f009 fa20 	bl	ddc3c <__aeabi_ddiv>
   d47fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4800:	88a3      	ldrh	r3, [r4, #4]
   d4802:	9304      	str	r3, [sp, #16]
   d4804:	89a0      	ldrh	r0, [r4, #12]
   d4806:	f009 f889 	bl	dd91c <__aeabi_i2d>
   d480a:	2200      	movs	r2, #0
   d480c:	4b6a      	ldr	r3, [pc, #424]	; (d49b8 <loop+0x1ec>)
   d480e:	f009 fa15 	bl	ddc3c <__aeabi_ddiv>
   d4812:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4816:	88e3      	ldrh	r3, [r4, #6]
   d4818:	9300      	str	r3, [sp, #0]
   d481a:	6823      	ldr	r3, [r4, #0]
   d481c:	4a67      	ldr	r2, [pc, #412]	; (d49bc <loop+0x1f0>)

    DEBUG_PRINTLN(currentCsvData);

    readyToGetResetAndSendSensors = false;

    if (tickleWD)
   d481e:	4c68      	ldr	r4, [pc, #416]	; (d49c0 <loop+0x1f4>)
 sensorReadings.rainmmx1000 / 1000.0 , 
  sensorReadings.windDegrees ,
 sensorReadings.airTempKx10 / 10.0 , 
 sensorReadings.humid,
 sensorReadings.barometerhPa,  
 sensorReadings.millivolts);
   d4820:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4824:	a82e      	add	r0, sp, #184	; 0xb8
   d4826:	f005 f81d 	bl	d9864 <snprintf>
   d482a:	4b66      	ldr	r3, [pc, #408]	; (d49c4 <loop+0x1f8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d482c:	4966      	ldr	r1, [pc, #408]	; (d49c8 <loop+0x1fc>)
   d482e:	781b      	ldrb	r3, [r3, #0]
   d4830:	f88d 3000 	strb.w	r3, [sp]
   d4834:	aa2e      	add	r2, sp, #184	; 0xb8
   d4836:	233c      	movs	r3, #60	; 0x3c
   d4838:	a82a      	add	r0, sp, #168	; 0xa8
   d483a:	f006 f91f 	bl	daa7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d483e:	a82b      	add	r0, sp, #172	; 0xac
   d4840:	f7ff ffae 	bl	d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

 Particle.publish("sensors", msg, PRIVATE);
    sensors.getAndResetAllSensors();
   d4844:	4861      	ldr	r0, [pc, #388]	; (d49cc <loop+0x200>)
   d4846:	f003 ff47 	bl	d86d8 <_ZN14WeatherSensors21getAndResetAllSensorsEv>

    String currentCsvData = sensors.sensorReadingsToCsvUS();
   d484a:	4960      	ldr	r1, [pc, #384]	; (d49cc <loop+0x200>)
   d484c:	a80e      	add	r0, sp, #56	; 0x38
   d484e:	f004 f80f 	bl	d8870 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv>

    // Consider putting the SD logging in the IoTNode library
    printToSd.println(currentCsvData);
   d4852:	990e      	ldr	r1, [sp, #56]	; 0x38
   d4854:	485e      	ldr	r0, [pc, #376]	; (d49d0 <loop+0x204>)
   d4856:	f005 fc44 	bl	da0e2 <_ZN5Print7printlnEPKc>

    DEBUG_PRINTLN(currentCsvData);
   d485a:	f006 fb65 	bl	daf28 <_Z16_fetch_usbserialv>
   d485e:	990e      	ldr	r1, [sp, #56]	; 0x38
   d4860:	f005 fc3f 	bl	da0e2 <_ZN5Print7printlnEPKc>

    readyToGetResetAndSendSensors = false;

    if (tickleWD)
   d4864:	7823      	ldrb	r3, [r4, #0]
    // Consider putting the SD logging in the IoTNode library
    printToSd.println(currentCsvData);

    DEBUG_PRINTLN(currentCsvData);

    readyToGetResetAndSendSensors = false;
   d4866:	2600      	movs	r6, #0
   d4868:	702e      	strb	r6, [r5, #0]

    if (tickleWD)
   d486a:	b11b      	cbz	r3, d4874 <loop+0xa8>
    {
      node.tickleWatchdog();
   d486c:	4859      	ldr	r0, [pc, #356]	; (d49d4 <loop+0x208>)
   d486e:	f000 fcf5 	bl	d525c <_ZN7IoTNode14tickleWatchdogEv>
      tickleWD = false;
   d4872:	7026      	strb	r6, [r4, #0]
    }

    readyToGetResetAndSendSensors = false;
   d4874:	2300      	movs	r3, #0
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d4876:	4c58      	ldr	r4, [pc, #352]	; (d49d8 <loop+0x20c>)
    {
      node.tickleWatchdog();
      tickleWD = false;
    }

    readyToGetResetAndSendSensors = false;
   d4878:	702b      	strb	r3, [r5, #0]
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
   d487a:	f006 fb55 	bl	daf28 <_Z16_fetch_usbserialv>
   d487e:	4957      	ldr	r1, [pc, #348]	; (d49dc <loop+0x210>)
   d4880:	f005 fc2f 	bl	da0e2 <_ZN5Print7printlnEPKc>
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d4884:	220a      	movs	r2, #10
   d4886:	6821      	ldr	r1, [r4, #0]
   d4888:	a812      	add	r0, sp, #72	; 0x48
   d488a:	f005 faf6 	bl	d9e7a <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d488e:	a912      	add	r1, sp, #72	; 0x48
   d4890:	a816      	add	r0, sp, #88	; 0x58
   d4892:	f005 faab 	bl	d9dec <_ZN6StringC1ERKS_>
   d4896:	4952      	ldr	r1, [pc, #328]	; (d49e0 <loop+0x214>)
   d4898:	a816      	add	r0, sp, #88	; 0x58
   d489a:	f005 fb52 	bl	d9f42 <_ZplRK15StringSumHelperPKc>

    String(config.unitType)+"|"+
   d489e:	7921      	ldrb	r1, [r4, #4]
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d48a0:	4605      	mov	r5, r0

    String(config.unitType)+"|"+
   d48a2:	a81a      	add	r0, sp, #104	; 0x68
   d48a4:	f005 fac6 	bl	d9e34 <_ZN6StringC1Ec>
   d48a8:	a91a      	add	r1, sp, #104	; 0x68
   d48aa:	4628      	mov	r0, r5
   d48ac:	f005 fb3d 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d48b0:	494b      	ldr	r1, [pc, #300]	; (d49e0 <loop+0x214>)
   d48b2:	f005 fb46 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
    String(config.firmwareVersion)+"|"+
   d48b6:	220a      	movs	r2, #10
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
   d48b8:	4605      	mov	r5, r0
    String(config.firmwareVersion)+"|"+
   d48ba:	68a1      	ldr	r1, [r4, #8]
   d48bc:	a81e      	add	r0, sp, #120	; 0x78
   d48be:	f005 fadc 	bl	d9e7a <_ZN6StringC1Eih>
   d48c2:	a91e      	add	r1, sp, #120	; 0x78
   d48c4:	4628      	mov	r0, r5
   d48c6:	f005 fb30 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d48ca:	4945      	ldr	r1, [pc, #276]	; (d49e0 <loop+0x214>)
   d48cc:	f005 fb39 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
    String(config.particleTimeout)+"|"+
   d48d0:	220a      	movs	r2, #10
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
   d48d2:	4605      	mov	r5, r0
    String(config.particleTimeout)+"|"+
   d48d4:	68e1      	ldr	r1, [r4, #12]
   d48d6:	a822      	add	r0, sp, #136	; 0x88
   d48d8:	f005 facf 	bl	d9e7a <_ZN6StringC1Eih>
   d48dc:	a922      	add	r1, sp, #136	; 0x88
   d48de:	4628      	mov	r0, r5
   d48e0:	f005 fb23 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d48e4:	493e      	ldr	r1, [pc, #248]	; (d49e0 <loop+0x214>)
   d48e6:	f005 fb2c 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
    String(config.latitude)+"|"+
   d48ea:	ed94 0a04 	vldr	s0, [r4, #16]
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
   d48ee:	4605      	mov	r5, r0
    String(config.latitude)+"|"+
   d48f0:	2106      	movs	r1, #6
   d48f2:	a826      	add	r0, sp, #152	; 0x98
   d48f4:	f005 fae8 	bl	d9ec8 <_ZN6StringC1Efi>
   d48f8:	a926      	add	r1, sp, #152	; 0x98
   d48fa:	4628      	mov	r0, r5
   d48fc:	f005 fb15 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d4900:	4937      	ldr	r1, [pc, #220]	; (d49e0 <loop+0x214>)
   d4902:	f005 fb1e 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
    String(config.longitude)+"|"+
   d4906:	ed94 0a05 	vldr	s0, [r4, #20]
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
   d490a:	4605      	mov	r5, r0
    String(config.longitude)+"|"+
   d490c:	2106      	movs	r1, #6
   d490e:	a82a      	add	r0, sp, #168	; 0xa8
   d4910:	f005 fada 	bl	d9ec8 <_ZN6StringC1Efi>
   d4914:	a92a      	add	r1, sp, #168	; 0xa8
   d4916:	4628      	mov	r0, r5
   d4918:	f005 fb07 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d491c:	4930      	ldr	r1, [pc, #192]	; (d49e0 <loop+0x214>)
   d491e:	f005 fb10 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
    i2cDevices;
   d4922:	4930      	ldr	r1, [pc, #192]	; (d49e4 <loop+0x218>)
   d4924:	f005 fb01 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d4928:	4601      	mov	r1, r0
   d492a:	482f      	ldr	r0, [pc, #188]	; (d49e8 <loop+0x21c>)
   d492c:	f005 fa4f 	bl	d9dce <_ZN6StringaSERKS_>

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
    String(config.longitude)+"|"+
   d4930:	a82a      	add	r0, sp, #168	; 0xa8
   d4932:	f005 f9d5 	bl	d9ce0 <_ZN6StringD1Ev>
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
   d4936:	a826      	add	r0, sp, #152	; 0x98
   d4938:	f005 f9d2 	bl	d9ce0 <_ZN6StringD1Ev>
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
   d493c:	a822      	add	r0, sp, #136	; 0x88
   d493e:	f005 f9cf 	bl	d9ce0 <_ZN6StringD1Ev>
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
   d4942:	a81e      	add	r0, sp, #120	; 0x78
   d4944:	f005 f9cc 	bl	d9ce0 <_ZN6StringD1Ev>
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
   d4948:	a81a      	add	r0, sp, #104	; 0x68
   d494a:	f005 f9c9 	bl	d9ce0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d494e:	a816      	add	r0, sp, #88	; 0x58
   d4950:	f005 f9c6 	bl	d9ce0 <_ZN6StringD1Ev>
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d4954:	a812      	add	r0, sp, #72	; 0x48
   d4956:	f005 f9c3 	bl	d9ce0 <_ZN6StringD1Ev>
 sensorReadings.millivolts);

 Particle.publish("sensors", msg, PRIVATE);
    sensors.getAndResetAllSensors();

    String currentCsvData = sensors.sensorReadingsToCsvUS();
   d495a:	a80e      	add	r0, sp, #56	; 0x38
   d495c:	f005 f9c0 	bl	d9ce0 <_ZN6StringD1Ev>
    String(config.longitude)+"|"+
    i2cDevices;

  }

  if (readyToCapturePollSensors)
   d4960:	4c22      	ldr	r4, [pc, #136]	; (d49ec <loop+0x220>)
   d4962:	7823      	ldrb	r3, [r4, #0]
   d4964:	b1db      	cbz	r3, d499e <loop+0x1d2>
  {
    sensors.captureTempHumidityPressure();
   d4966:	4819      	ldr	r0, [pc, #100]	; (d49cc <loop+0x200>)
   d4968:	f003 fde2 	bl	d8530 <_ZN14WeatherSensors27captureTempHumidityPressureEv>
    sensors.captureWindVane();
   d496c:	4817      	ldr	r0, [pc, #92]	; (d49cc <loop+0x200>)
   d496e:	f003 fd87 	bl	d8480 <_ZN14WeatherSensors15captureWindVaneEv>
    //sensors.captureLightLux();//
    sensors.captureBatteryVoltage();
   d4972:	4816      	ldr	r0, [pc, #88]	; (d49cc <loop+0x200>)
   d4974:	f003 fc18 	bl	d81a8 <_ZN14WeatherSensors21captureBatteryVoltageEv>
   d4978:	4b12      	ldr	r3, [pc, #72]	; (d49c4 <loop+0x1f8>)
   d497a:	491d      	ldr	r1, [pc, #116]	; (d49f0 <loop+0x224>)
   d497c:	781b      	ldrb	r3, [r3, #0]
    readyToCapturePollSensors = false;
   d497e:	2200      	movs	r2, #0
   d4980:	7022      	strb	r2, [r4, #0]
   d4982:	a82e      	add	r0, sp, #184	; 0xb8
   d4984:	f88d 3000 	strb.w	r3, [sp]
   d4988:	233c      	movs	r3, #60	; 0x3c
   d498a:	f006 f877 	bl	daa7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d498e:	a82f      	add	r0, sp, #188	; 0xbc
   d4990:	f7ff ff06 	bl	d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    #ifdef IOTDEBUG
    Particle.publish("Capturing sensors",PRIVATE);
    DEBUG_PRINTLN("capture");
   d4994:	f006 fac8 	bl	daf28 <_Z16_fetch_usbserialv>
   d4998:	4916      	ldr	r1, [pc, #88]	; (d49f4 <loop+0x228>)
   d499a:	f005 fba2 	bl	da0e2 <_ZN5Print7printlnEPKc>
    #endif
  }
  // If flag set then reset here
  if (resetDevice)
   d499e:	4b16      	ldr	r3, [pc, #88]	; (d49f8 <loop+0x22c>)
   d49a0:	781b      	ldrb	r3, [r3, #0]
   d49a2:	b10b      	cbz	r3, d49a8 <loop+0x1dc>
  {
    System.reset();
   d49a4:	f005 f8c6 	bl	d9b34 <_ZN11SystemClass5resetEv>
  }

}
   d49a8:	b06e      	add	sp, #440	; 0x1b8
   d49aa:	bd70      	pop	{r4, r5, r6, pc}
   d49ac:	2003c134 	.word	0x2003c134
   d49b0:	2003d80c 	.word	0x2003d80c
   d49b4:	40240000 	.word	0x40240000
   d49b8:	408f4000 	.word	0x408f4000
   d49bc:	000e00e2 	.word	0x000e00e2
   d49c0:	2003c0c4 	.word	0x2003c0c4
   d49c4:	2003c110 	.word	0x2003c110
   d49c8:	000e018c 	.word	0x000e018c
   d49cc:	2003c154 	.word	0x2003c154
   d49d0:	2003be84 	.word	0x2003be84
   d49d4:	2003d824 	.word	0x2003d824
   d49d8:	2003c11c 	.word	0x2003c11c
   d49dc:	000e0162 	.word	0x000e0162
   d49e0:	000e0180 	.word	0x000e0180
   d49e4:	2003c078 	.word	0x2003c078
   d49e8:	2003c0c8 	.word	0x2003c0c8
   d49ec:	2003c119 	.word	0x2003c119
   d49f0:	000e0182 	.word	0x000e0182
   d49f4:	000e0194 	.word	0x000e0194
   d49f8:	2003dcf4 	.word	0x2003dcf4

000d49fc <_Z7syncRTCv>:
  timeToNextSendMS = millis();
  readyToGetResetAndSendSensors = true;
}

bool syncRTC()
{
   d49fc:	b570      	push	{r4, r5, r6, lr}
   d49fe:	b094      	sub	sp, #80	; 0x50
   d4a00:	f004 fca2 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4a04:	4d2f      	ldr	r5, [pc, #188]	; (d4ac4 <_Z7syncRTCv+0xc8>)

    do
    {
      Particle.process();
      delay(100);
    } while (Time.now() < 1465823822 && millis()-syncTimer<500);
   d4a06:	4e30      	ldr	r6, [pc, #192]	; (d4ac8 <_Z7syncRTCv+0xcc>)
   d4a08:	4604      	mov	r4, r0
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4a0a:	f004 fc9d 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4a0e:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4a10:	f004 fed0 	bl	d97b4 <spark_process>
    unsigned long syncTimer = millis();

    do
    {
      Particle.process();
      delay(100);
   d4a14:	2064      	movs	r0, #100	; 0x64
   d4a16:	f005 fe3f 	bl	da698 <delay>
    } while (Time.now() < 1465823822 && millis()-syncTimer<500);
   d4a1a:	f005 fdf2 	bl	da602 <_ZN9TimeClass3nowEv>
   d4a1e:	42b0      	cmp	r0, r6
   d4a20:	dc05      	bgt.n	d4a2e <_Z7syncRTCv+0x32>
   d4a22:	f004 fc91 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
   d4a26:	1b00      	subs	r0, r0, r4
   d4a28:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4a2c:	d3ed      	bcc.n	d4a0a <_Z7syncRTCv+0xe>

    if (Time.now() > 1465823822)
   d4a2e:	f005 fde8 	bl	da602 <_ZN9TimeClass3nowEv>
   d4a32:	4b26      	ldr	r3, [pc, #152]	; (d4acc <_Z7syncRTCv+0xd0>)
   d4a34:	4298      	cmp	r0, r3
   d4a36:	dd07      	ble.n	d4a48 <_Z7syncRTCv+0x4c>
    {
        syncNow = Time.now();//put time into memory
   d4a38:	f005 fde3 	bl	da602 <_ZN9TimeClass3nowEv>
        node.setUnixTime(syncNow);
   d4a3c:	4601      	mov	r1, r0
   d4a3e:	4824      	ldr	r0, [pc, #144]	; (d4ad0 <_Z7syncRTCv+0xd4>)
   d4a40:	f000 fc26 	bl	d5290 <_ZN7IoTNode11setUnixTimeEm>
        sync = true;
   d4a44:	2001      	movs	r0, #1
   d4a46:	e03a      	b.n	d4abe <_Z7syncRTCv+0xc2>
    }

    if (!sync)
    {
        #ifdef DEBUG
        Particle.publish("Time NOT synced",String(Time.format(syncNow, TIME_FORMAT_ISO8601_FULL)+"  "+Time.format(node.unixTime(), TIME_FORMAT_ISO8601_FULL)),PRIVATE);
   d4a48:	4c22      	ldr	r4, [pc, #136]	; (d4ad4 <_Z7syncRTCv+0xd8>)
   d4a4a:	4923      	ldr	r1, [pc, #140]	; (d4ad8 <_Z7syncRTCv+0xdc>)
   d4a4c:	6823      	ldr	r3, [r4, #0]
   d4a4e:	2200      	movs	r2, #0
   d4a50:	a804      	add	r0, sp, #16
   d4a52:	f005 fd83 	bl	da55c <_ZN9TimeClass6formatElPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4a56:	a904      	add	r1, sp, #16
   d4a58:	a808      	add	r0, sp, #32
   d4a5a:	f005 f9c7 	bl	d9dec <_ZN6StringC1ERKS_>
   d4a5e:	491f      	ldr	r1, [pc, #124]	; (d4adc <_Z7syncRTCv+0xe0>)
   d4a60:	a808      	add	r0, sp, #32
   d4a62:	f005 fa6e 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d4a66:	4605      	mov	r5, r0
   d4a68:	4819      	ldr	r0, [pc, #100]	; (d4ad0 <_Z7syncRTCv+0xd4>)
   d4a6a:	f000 fc0b 	bl	d5284 <_ZN7IoTNode8unixTimeEv>
   d4a6e:	6823      	ldr	r3, [r4, #0]
   d4a70:	4919      	ldr	r1, [pc, #100]	; (d4ad8 <_Z7syncRTCv+0xdc>)
   d4a72:	4602      	mov	r2, r0
   d4a74:	a80c      	add	r0, sp, #48	; 0x30
   d4a76:	f005 fd71 	bl	da55c <_ZN9TimeClass6formatElPKc>
   d4a7a:	a90c      	add	r1, sp, #48	; 0x30
   d4a7c:	4628      	mov	r0, r5
   d4a7e:	f005 fa54 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d4a82:	4601      	mov	r1, r0
   d4a84:	a810      	add	r0, sp, #64	; 0x40
   d4a86:	f005 f9b1 	bl	d9dec <_ZN6StringC1ERKS_>
   d4a8a:	4b15      	ldr	r3, [pc, #84]	; (d4ae0 <_Z7syncRTCv+0xe4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4a8e:	781b      	ldrb	r3, [r3, #0]
   d4a90:	4914      	ldr	r1, [pc, #80]	; (d4ae4 <_Z7syncRTCv+0xe8>)
   d4a92:	f88d 3000 	strb.w	r3, [sp]
   d4a96:	a802      	add	r0, sp, #8
   d4a98:	233c      	movs	r3, #60	; 0x3c
   d4a9a:	f005 ffef 	bl	daa7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4a9e:	a803      	add	r0, sp, #12
   d4aa0:	f7ff fe7e 	bl	d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4aa4:	a810      	add	r0, sp, #64	; 0x40
   d4aa6:	f005 f91b 	bl	d9ce0 <_ZN6StringD1Ev>
   d4aaa:	a80c      	add	r0, sp, #48	; 0x30
   d4aac:	f005 f918 	bl	d9ce0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4ab0:	a808      	add	r0, sp, #32
   d4ab2:	f005 f915 	bl	d9ce0 <_ZN6StringD1Ev>
   d4ab6:	a804      	add	r0, sp, #16
   d4ab8:	f005 f912 	bl	d9ce0 <_ZN6StringD1Ev>
}

bool syncRTC()
{
    uint32_t syncNow;
    bool sync = false;
   d4abc:	2000      	movs	r0, #0
        #ifdef DEBUG
        Particle.publish("Time NOT synced",String(Time.format(syncNow, TIME_FORMAT_ISO8601_FULL)+"  "+Time.format(node.unixTime(), TIME_FORMAT_ISO8601_FULL)),PRIVATE);
        #endif
    }
    return sync;
}
   d4abe:	b014      	add	sp, #80	; 0x50
   d4ac0:	bd70      	pop	{r4, r5, r6, pc}
   d4ac2:	bf00      	nop
   d4ac4:	2003e608 	.word	0x2003e608
   d4ac8:	575eb24d 	.word	0x575eb24d
   d4acc:	575eb24e 	.word	0x575eb24e
   d4ad0:	2003d824 	.word	0x2003d824
   d4ad4:	2003bdb8 	.word	0x2003bdb8
   d4ad8:	2003e218 	.word	0x2003e218
   d4adc:	000e04a3 	.word	0x000e04a3
   d4ae0:	2003c110 	.word	0x2003c110
   d4ae4:	000e019c 	.word	0x000e019c

000d4ae8 <setup>:
    DEBUG_PRINTLN("Particle connected");
  }
}

// setup() runs once, when the device is first turned on.
void setup() {
   d4ae8:	b530      	push	{r4, r5, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4aea:	2300      	movs	r3, #0
   d4aec:	b085      	sub	sp, #20
   d4aee:	2202      	movs	r2, #2
   d4af0:	4942      	ldr	r1, [pc, #264]	; (d4bfc <setup+0x114>)
   d4af2:	4843      	ldr	r0, [pc, #268]	; (d4c00 <setup+0x118>)
   d4af4:	f004 fe56 	bl	d97a4 <spark_variable>
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d4af8:	2500      	movs	r5, #0
        extra.size = sizeof(extra);
   d4afa:	230c      	movs	r3, #12
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d4afc:	9501      	str	r5, [sp, #4]
        extra.size = sizeof(extra);
   d4afe:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
   d4b02:	4b40      	ldr	r3, [pc, #256]	; (d4c04 <setup+0x11c>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4b04:	4940      	ldr	r1, [pc, #256]	; (d4c08 <setup+0x120>)
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
   d4b06:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4b08:	2204      	movs	r2, #4
   d4b0a:	ab01      	add	r3, sp, #4
   d4b0c:	483f      	ldr	r0, [pc, #252]	; (d4c0c <setup+0x124>)
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d4b0e:	9503      	str	r5, [sp, #12]
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4b10:	f004 fe48 	bl	d97a4 <spark_variable>
  // register cloudy things
  Particle.variable("version",firmwareVersion);
  Particle.variable("devicestatus",deviceStatus);

  Serial.begin(115200);
   d4b14:	f006 fa08 	bl	daf28 <_Z16_fetch_usbserialv>
   d4b18:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4b1c:	f006 f9f8 	bl	daf10 <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   d4b20:	f006 fb38 	bl	db194 <_Z22__fetch_global_Serial1v>
   d4b24:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4b28:	f006 fb2e 	bl	db188 <_ZN11USARTSerial5beginEm>

  node.begin();
   d4b2c:	4838      	ldr	r0, [pc, #224]	; (d4c10 <setup+0x128>)
   d4b2e:	f000 fbd1 	bl	d52d4 <_ZN7IoTNode5beginEv>
  node.setPowerON(EXT3V3,true);
   d4b32:	2201      	movs	r2, #1
   d4b34:	2102      	movs	r1, #2
   d4b36:	4836      	ldr	r0, [pc, #216]	; (d4c10 <setup+0x128>)
   d4b38:	f000 fb8a 	bl	d5250 <_ZN7IoTNode10setPowerONE9powerNameb>
  node.setPowerON(EXT5V,true);
   d4b3c:	2201      	movs	r2, #1
   d4b3e:	2103      	movs	r1, #3
   d4b40:	4833      	ldr	r0, [pc, #204]	; (d4c10 <setup+0x128>)
   d4b42:	f000 fb85 	bl	d5250 <_ZN7IoTNode10setPowerONE9powerNameb>

  #ifdef IOTDEBUG
  delay(5000);
   d4b46:	f241 3088 	movw	r0, #5000	; 0x1388
   d4b4a:	f005 fda5 	bl	da698 <delay>
 
  checkI2CDevices();
   d4b4e:	f7ff fc55 	bl	d43fc <_Z15checkI2CDevicesv>
  scanI2C();
   d4b52:	f7ff fd49 	bl	d45e8 <_Z7scanI2Cv>
  #endif

    // Check for I2C devices again
  if (!node.ok())
   d4b56:	482e      	ldr	r0, [pc, #184]	; (d4c10 <setup+0x128>)
   d4b58:	f000 fb44 	bl	d51e4 <_ZN7IoTNode2okEv>
   d4b5c:	4604      	mov	r4, r0
   d4b5e:	b9c8      	cbnz	r0, d4b94 <setup+0xac>
  {
    #ifdef IOTDEBUG
    // Particle.publish("Unplugged","Plug the device into the IoT Node",PRIVATE);
    DEBUG_PRINTLN("Plug the device into the IoT Node");
   d4b60:	f006 f9e2 	bl	daf28 <_Z16_fetch_usbserialv>
   d4b64:	492b      	ldr	r1, [pc, #172]	; (d4c14 <setup+0x12c>)
   d4b66:	f005 fabc 	bl	da0e2 <_ZN5Print7printlnEPKc>
    #endif
    deviceStatus="Device is not plugged into the IoTNode";
   d4b6a:	492b      	ldr	r1, [pc, #172]	; (d4c18 <setup+0x130>)
   d4b6c:	4826      	ldr	r0, [pc, #152]	; (d4c08 <setup+0x120>)
   d4b6e:	f005 f950 	bl	d9e12 <_ZN6StringaSEPKc>
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4b72:	4622      	mov	r2, r4
   d4b74:	2101      	movs	r1, #1
   d4b76:	4829      	ldr	r0, [pc, #164]	; (d4c1c <setup+0x134>)
   d4b78:	f004 fd66 	bl	d9648 <led_set_status_active>
    fadeRed.setActive(true);
    DEBUG_PRINTLN("Resetting in 10 seconds");
   d4b7c:	f006 f9d4 	bl	daf28 <_Z16_fetch_usbserialv>
   d4b80:	4927      	ldr	r1, [pc, #156]	; (d4c20 <setup+0x138>)
   d4b82:	f005 faae 	bl	da0e2 <_ZN5Print7printlnEPKc>
    delay(10000);
   d4b86:	f242 7010 	movw	r0, #10000	; 0x2710
   d4b8a:	f005 fd85 	bl	da698 <delay>
    System.reset();
   d4b8e:	f004 ffd1 	bl	d9b34 <_ZN11SystemClass5resetEv>
   d4b92:	e030      	b.n	d4bf6 <setup+0x10e>
  }
  else
  {
    
    connect();
    framConfig.read(0, (uint8_t*)&config);
   d4b94:	4c23      	ldr	r4, [pc, #140]	; (d4c24 <setup+0x13c>)
    System.reset();
  }
  else
  {
    
    connect();
   d4b96:	f7ff fd6f 	bl	d4678 <_Z7connectv>
    framConfig.read(0, (uint8_t*)&config);
   d4b9a:	4622      	mov	r2, r4
   d4b9c:	4629      	mov	r1, r5
   d4b9e:	4822      	ldr	r0, [pc, #136]	; (d4c28 <setup+0x140>)
   d4ba0:	f000 fcb3 	bl	d550a <_ZN9framArray4readEmPh>
      // 1. A new ThingSpeak channel is created
      // 2. The channel id and keys are Saved
      // 3. a firstRunTest variable is saved in persistent memory as a flag to indicate
      // that the IoT node has been set up already.

    if (config.testCheck != firstRunTest)
   d4ba4:	4b21      	ldr	r3, [pc, #132]	; (d4c2c <setup+0x144>)
   d4ba6:	6822      	ldr	r2, [r4, #0]
   d4ba8:	429a      	cmp	r2, r3
   d4baa:	d008      	beq.n	d4bbe <setup+0xd6>
    {
        config.testCheck = firstRunTest;
   d4bac:	6023      	str	r3, [r4, #0]
        /// Defaults
        config.particleTimeout = 20000;
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d4bae:	4622      	mov	r2, r4

    if (config.testCheck != firstRunTest)
    {
        config.testCheck = firstRunTest;
        /// Defaults
        config.particleTimeout = 20000;
   d4bb0:	f644 6320 	movw	r3, #20000	; 0x4e20
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d4bb4:	4629      	mov	r1, r5
   d4bb6:	481c      	ldr	r0, [pc, #112]	; (d4c28 <setup+0x140>)

    if (config.testCheck != firstRunTest)
    {
        config.testCheck = firstRunTest;
        /// Defaults
        config.particleTimeout = 20000;
   d4bb8:	60e3      	str	r3, [r4, #12]
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d4bba:	f000 fc97 	bl	d54ec <_ZN9framArray5writeEmPh>
    }
      // end of first run code.

      if (syncRTC())
   d4bbe:	f7ff ff1d 	bl	d49fc <_Z7syncRTCv>
   d4bc2:	b118      	cbz	r0, d4bcc <setup+0xe4>
      {
        DEBUG_PRINTLN("RTC sync'ed with cloud");
   d4bc4:	f006 f9b0 	bl	daf28 <_Z16_fetch_usbserialv>
   d4bc8:	4919      	ldr	r1, [pc, #100]	; (d4c30 <setup+0x148>)
   d4bca:	e002      	b.n	d4bd2 <setup+0xea>
      }
      else
      {
        DEBUG_PRINTLN("RTC not sync'ed with cloud");
   d4bcc:	f006 f9ac 	bl	daf28 <_Z16_fetch_usbserialv>
   d4bd0:	4918      	ldr	r1, [pc, #96]	; (d4c34 <setup+0x14c>)
   d4bd2:	f005 fa86 	bl	da0e2 <_ZN5Print7printlnEPKc>
      }
      // load pointers
      dataRing.initialize();
   d4bd6:	4818      	ldr	r0, [pc, #96]	; (d4c38 <setup+0x150>)
   d4bd8:	f000 fcc0 	bl	d555c <_ZN8framRing10initializeEv>
      sensors.begin();
   d4bdc:	4817      	ldr	r0, [pc, #92]	; (d4c3c <setup+0x154>)
   d4bde:	f003 ffbd 	bl	d8b5c <_ZN14WeatherSensors5beginEv>
      pollSensorTimer.start();
   d4be2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4be6:	4816      	ldr	r0, [pc, #88]	; (d4c40 <setup+0x158>)
   d4be8:	f7ff fbf2 	bl	d43d0 <_ZN5Timer5startEj>
      sensorSendTimer.start();  
   d4bec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4bf0:	4814      	ldr	r0, [pc, #80]	; (d4c44 <setup+0x15c>)
   d4bf2:	f7ff fbed 	bl	d43d0 <_ZN5Timer5startEj>
  }
}
   d4bf6:	b005      	add	sp, #20
   d4bf8:	bd30      	pop	{r4, r5, pc}
   d4bfa:	bf00      	nop
   d4bfc:	000e0294 	.word	0x000e0294
   d4c00:	000e01ac 	.word	0x000e01ac
   d4c04:	000d40b7 	.word	0x000d40b7
   d4c08:	2003c0c8 	.word	0x2003c0c8
   d4c0c:	000e01b4 	.word	0x000e01b4
   d4c10:	2003d824 	.word	0x2003d824
   d4c14:	000e01c1 	.word	0x000e01c1
   d4c18:	000e01e3 	.word	0x000e01e3
   d4c1c:	2003bfbc 	.word	0x2003bfbc
   d4c20:	000e020a 	.word	0x000e020a
   d4c24:	2003c11c 	.word	0x2003c11c
   d4c28:	2003c058 	.word	0x2003c058
   d4c2c:	00111f4c 	.word	0x00111f4c
   d4c30:	000e0222 	.word	0x000e0222
   d4c34:	000e0239 	.word	0x000e0239
   d4c38:	2003c088 	.word	0x2003c088
   d4c3c:	2003c154 	.word	0x2003c154
   d4c40:	2003c0d8 	.word	0x2003c0d8
   d4c44:	2003c0f4 	.word	0x2003c0f4

000d4c48 <_Z9unpluggedv>:
    }
    return sync;
}

void unplugged()
{
   d4c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4c4a:	4b0a      	ldr	r3, [pc, #40]	; (d4c74 <_Z9unpluggedv+0x2c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4c4c:	4c0a      	ldr	r4, [pc, #40]	; (d4c78 <_Z9unpluggedv+0x30>)
   d4c4e:	781b      	ldrb	r3, [r3, #0]
   d4c50:	490a      	ldr	r1, [pc, #40]	; (d4c7c <_Z9unpluggedv+0x34>)
   d4c52:	f88d 3000 	strb.w	r3, [sp]
   d4c56:	4622      	mov	r2, r4
   d4c58:	233c      	movs	r3, #60	; 0x3c
   d4c5a:	a802      	add	r0, sp, #8
   d4c5c:	f005 ff0e 	bl	daa7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4c60:	a803      	add	r0, sp, #12
   d4c62:	f7ff fd9d 	bl	d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  #ifdef IOTDEBUG
  Particle.publish("Unplugged","Plug the device into the IoT Node",PRIVATE);
  DEBUG_PRINTLN("Plug the device into the IoT Node");
   d4c66:	f006 f95f 	bl	daf28 <_Z16_fetch_usbserialv>
   d4c6a:	4621      	mov	r1, r4
   d4c6c:	f005 fa39 	bl	da0e2 <_ZN5Print7printlnEPKc>
  #endif

   d4c70:	b004      	add	sp, #16
   d4c72:	bd10      	pop	{r4, pc}
   d4c74:	2003c110 	.word	0x2003c110
   d4c78:	000e01c1 	.word	0x000e01c1
   d4c7c:	000e0254 	.word	0x000e0254

000d4c80 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   d4c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c82:	b089      	sub	sp, #36	; 0x24
   d4c84:	4604      	mov	r4, r0
   d4c86:	a802      	add	r0, sp, #8
   d4c88:	e880 0006 	stmia.w	r0, {r1, r2}
   d4c8c:	461d      	mov	r5, r3
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c8e:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c90:	2300      	movs	r3, #0
   d4c92:	460f      	mov	r7, r1
   d4c94:	9e03      	ldr	r6, [sp, #12]
   d4c96:	9306      	str	r3, [sp, #24]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c98:	f7ff f9ff 	bl	d409a <_Znwj>
   d4c9c:	b110      	cbz	r0, d4ca4 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x24>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d4c9e:	6007      	str	r7, [r0, #0]
   d4ca0:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4ca2:	6085      	str	r5, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4ca4:	4b0b      	ldr	r3, [pc, #44]	; (d4cd4 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x54>)
   d4ca6:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   d4ca8:	4b0b      	ldr	r3, [pc, #44]	; (d4cd8 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x58>)
   d4caa:	9306      	str	r3, [sp, #24]
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d4cac:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4cb0:	9004      	str	r0, [sp, #16]
   d4cb2:	9300      	str	r3, [sp, #0]
   d4cb4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d4cb8:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
   d4cbc:	a904      	add	r1, sp, #16
   d4cbe:	4620      	mov	r0, r4
   d4cc0:	f006 f98e 	bl	dafe0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
   d4cc4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4cc6:	a804      	add	r0, sp, #16
   d4cc8:	f7ff fb09 	bl	d42de <_ZNSt14_Function_baseD1Ev>
}
   d4ccc:	4620      	mov	r0, r4
   d4cce:	b009      	add	sp, #36	; 0x24
   d4cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4cd2:	bf00      	nop
   d4cd4:	000d40e9 	.word	0x000d40e9
   d4cd8:	000d426d 	.word	0x000d426d

000d4cdc <_GLOBAL__sub_I_sd>:
   d4cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4ce0:	4bbc      	ldr	r3, [pc, #752]	; (d4fd4 <_GLOBAL__sub_I_sd+0x2f8>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4ce2:	4fbd      	ldr	r7, [pc, #756]	; (d4fd8 <_GLOBAL__sub_I_sd+0x2fc>)
   d4ce4:	2401      	movs	r4, #1
   d4ce6:	b08a      	sub	sp, #40	; 0x28
   d4ce8:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4cea:	f004 fa8d 	bl	d9208 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4cee:	4bbb      	ldr	r3, [pc, #748]	; (d4fdc <_GLOBAL__sub_I_sd+0x300>)
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4cf0:	48bb      	ldr	r0, [pc, #748]	; (d4fe0 <_GLOBAL__sub_I_sd+0x304>)
   d4cf2:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4cf6:	2164      	movs	r1, #100	; 0x64
   d4cf8:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
   d4cfc:	6839      	ldr	r1, [r7, #0]
   d4cfe:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
   d4d02:	2200      	movs	r2, #0
   d4d04:	ea11 0604 	ands.w	r6, r1, r4
   d4d08:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4d0a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4d0e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4d12:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4d16:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4d1a:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4d1e:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d4d22:	461c      	mov	r4, r3
   d4d24:	4605      	mov	r5, r0
   d4d26:	d10a      	bne.n	d4d3e <_GLOBAL__sub_I_sd+0x62>
   d4d28:	4638      	mov	r0, r7
   d4d2a:	f7ff f9bc 	bl	d40a6 <__cxa_guard_acquire>
   d4d2e:	b130      	cbz	r0, d4d3e <_GLOBAL__sub_I_sd+0x62>
   d4d30:	4631      	mov	r1, r6
   d4d32:	48ac      	ldr	r0, [pc, #688]	; (d4fe4 <_GLOBAL__sub_I_sd+0x308>)
   d4d34:	f004 fe2a 	bl	d998c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4d38:	4638      	mov	r0, r7
   d4d3a:	f7ff f9b9 	bl	d40b0 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4d3e:	4ba9      	ldr	r3, [pc, #676]	; (d4fe4 <_GLOBAL__sub_I_sd+0x308>)
   d4d40:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
  #define DEBUG_PRINTLN(...)
#endif

const int SD_CHIP_SELECT = N_D0;
SdFat sd;
SdCardPrintHandler printToSd(sd, SD_CHIP_SELECT, SPI_FULL_SPEED);
   d4d44:	4ca8      	ldr	r4, [pc, #672]	; (d4fe8 <_GLOBAL__sub_I_sd+0x30c>)
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4d46:	4ba9      	ldr	r3, [pc, #676]	; (d4fec <_GLOBAL__sub_I_sd+0x310>)
   d4d48:	9506      	str	r5, [sp, #24]
   d4d4a:	ae06      	add	r6, sp, #24
   d4d4c:	2500      	movs	r5, #0
   d4d4e:	2701      	movs	r7, #1
   d4d50:	9308      	str	r3, [sp, #32]
   d4d52:	2202      	movs	r2, #2
   d4d54:	4633      	mov	r3, r6
   d4d56:	49a1      	ldr	r1, [pc, #644]	; (d4fdc <_GLOBAL__sub_I_sd+0x300>)
   d4d58:	f88d 501c 	strb.w	r5, [sp, #28]
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
   d4d62:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
   d4d66:	f000 fc79 	bl	d565c <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE>
   d4d6a:	4aa1      	ldr	r2, [pc, #644]	; (d4ff0 <_GLOBAL__sub_I_sd+0x314>)
   d4d6c:	49a1      	ldr	r1, [pc, #644]	; (d4ff4 <_GLOBAL__sub_I_sd+0x318>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4d6e:	f8df 9344 	ldr.w	r9, [pc, #836]	; d50b4 <_GLOBAL__sub_I_sd+0x3d8>
   d4d72:	4620      	mov	r0, r4
   d4d74:	f006 fd00 	bl	db778 <__aeabi_atexit>
	 * The maximum number of log files to keep is enforced at startup, when a SD card is inserted, and when
	 * the current log file is full.
	 *
	 * @param value Number of files to kee. Values are 1 <= num <= 999999 (size_t)
	 */
	inline SdCardPrintHandler &withMaxFilesToKeep(size_t value) { maxFilesToKeep = value; return *this; };
   d4d78:	f640 33b8 	movw	r3, #3000	; 0xbb8
inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d4d7c:	462a      	mov	r2, r5
   d4d7e:	2114      	movs	r1, #20
   d4d80:	2003      	movs	r0, #3
   d4d82:	62a3      	str	r3, [r4, #40]	; 0x28
   d4d84:	f004 fca2 	bl	d96cc <led_pattern_period>
   d4d88:	f04f 081e 	mov.w	r8, #30
   d4d8c:	4603      	mov	r3, r0
   d4d8e:	f8cd 8000 	str.w	r8, [sp]
   d4d92:	9701      	str	r7, [sp, #4]
   d4d94:	2203      	movs	r2, #3
   d4d96:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   d4d9a:	4897      	ldr	r0, [pc, #604]	; (d4ff8 <_GLOBAL__sub_I_sd+0x31c>)
	    _M_manager = &_My_handler::_M_manager;
   d4d9c:	4c97      	ldr	r4, [pc, #604]	; (d4ffc <_GLOBAL__sub_I_sd+0x320>)
   d4d9e:	f004 fdcd 	bl	d993c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
#define SENSOR_SEND_TIME_MS 20000
#define SENSOR_POLL_TIME_MS 2000

#define IOTDEBUG

LEDStatus fadeRed(RGB_COLOR_RED, LED_PATTERN_FADE, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d4da2:	4a93      	ldr	r2, [pc, #588]	; (d4ff0 <_GLOBAL__sub_I_sd+0x314>)
   d4da4:	4996      	ldr	r1, [pc, #600]	; (d5000 <_GLOBAL__sub_I_sd+0x324>)
   d4da6:	4894      	ldr	r0, [pc, #592]	; (d4ff8 <_GLOBAL__sub_I_sd+0x31c>)
   d4da8:	f006 fce6 	bl	db778 <__aeabi_atexit>

const int firmwareVersion = 0;

SYSTEM_THREAD(ENABLED);
   d4dac:	4629      	mov	r1, r5
   d4dae:	4638      	mov	r0, r7
   d4db0:	f004 fc6c 	bl	d968c <system_thread_set_state>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4db4:	4b93      	ldr	r3, [pc, #588]	; (d5004 <_GLOBAL__sub_I_sd+0x328>)
   d4db6:	9306      	str	r3, [sp, #24]
// This is the index for the updateTSChan
int returnIndex;

byte messageSize = 1;

Timer pollSensorTimer(SENSOR_POLL_TIME_MS, capturePollSensors);
   d4db8:	4632      	mov	r2, r6
   d4dba:	462b      	mov	r3, r5
   d4dbc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d4dc0:	4891      	ldr	r0, [pc, #580]	; (d5008 <_GLOBAL__sub_I_sd+0x32c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4dc2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d4dc6:	9408      	str	r4, [sp, #32]
   d4dc8:	f7ff fa92 	bl	d42f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dcc:	4630      	mov	r0, r6
   d4dce:	f7ff fa86 	bl	d42de <_ZNSt14_Function_baseD1Ev>
   d4dd2:	4a87      	ldr	r2, [pc, #540]	; (d4ff0 <_GLOBAL__sub_I_sd+0x314>)
   d4dd4:	498d      	ldr	r1, [pc, #564]	; (d500c <_GLOBAL__sub_I_sd+0x330>)
   d4dd6:	488c      	ldr	r0, [pc, #560]	; (d5008 <_GLOBAL__sub_I_sd+0x32c>)
   d4dd8:	f006 fcce 	bl	db778 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4ddc:	4b8c      	ldr	r3, [pc, #560]	; (d5010 <_GLOBAL__sub_I_sd+0x334>)
   d4dde:	9306      	str	r3, [sp, #24]

Timer sensorSendTimer(SENSOR_SEND_TIME_MS, getResetAndSendSensors);
   d4de0:	4632      	mov	r2, r6
   d4de2:	462b      	mov	r3, r5
   d4de4:	f644 6120 	movw	r1, #20000	; 0x4e20
   d4de8:	488a      	ldr	r0, [pc, #552]	; (d5014 <_GLOBAL__sub_I_sd+0x338>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4dea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d4dee:	9408      	str	r4, [sp, #32]
   d4df0:	f7ff fa7e 	bl	d42f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4df4:	4630      	mov	r0, r6
   d4df6:	f7ff fa72 	bl	d42de <_ZNSt14_Function_baseD1Ev>
   d4dfa:	4a7d      	ldr	r2, [pc, #500]	; (d4ff0 <_GLOBAL__sub_I_sd+0x314>)
   d4dfc:	4983      	ldr	r1, [pc, #524]	; (d500c <_GLOBAL__sub_I_sd+0x330>)
   d4dfe:	4885      	ldr	r0, [pc, #532]	; (d5014 <_GLOBAL__sub_I_sd+0x338>)
   d4e00:	f006 fcba 	bl	db778 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4e04:	4b84      	ldr	r3, [pc, #528]	; (d5018 <_GLOBAL__sub_I_sd+0x33c>)
   d4e06:	9306      	str	r3, [sp, #24]

Timer unpluggedTimer(5000,unplugged);
   d4e08:	4632      	mov	r2, r6
   d4e0a:	462b      	mov	r3, r5
   d4e0c:	f241 3188 	movw	r1, #5000	; 0x1388
   d4e10:	4882      	ldr	r0, [pc, #520]	; (d501c <_GLOBAL__sub_I_sd+0x340>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4e12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d4e16:	9408      	str	r4, [sp, #32]
{
  // user-accessible "public" interface
  public:
    WeatherSensors() : airTempKMedian(30), relativeHumidtyMedian(30), node()
   d4e18:	4c81      	ldr	r4, [pc, #516]	; (d5020 <_GLOBAL__sub_I_sd+0x344>)
   d4e1a:	f7ff fa69 	bl	d42f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e1e:	4630      	mov	r0, r6
   d4e20:	f7ff fa5d 	bl	d42de <_ZNSt14_Function_baseD1Ev>
   d4e24:	4a72      	ldr	r2, [pc, #456]	; (d4ff0 <_GLOBAL__sub_I_sd+0x314>)
   d4e26:	4979      	ldr	r1, [pc, #484]	; (d500c <_GLOBAL__sub_I_sd+0x330>)
   d4e28:	487c      	ldr	r0, [pc, #496]	; (d501c <_GLOBAL__sub_I_sd+0x340>)
   d4e2a:	f006 fca5 	bl	db778 <__aeabi_atexit>
   d4e2e:	4620      	mov	r0, r4
   d4e30:	f001 f9bf 	bl	d61b2 <_ZN15Adafruit_AM2315C1Ev>
   d4e34:	f104 0008 	add.w	r0, r4, #8
   d4e38:	f003 f877 	bl	d7f2a <_ZN9MPL3115A2C1Ev>
   d4e3c:	4641      	mov	r1, r8
   d4e3e:	f104 000a 	add.w	r0, r4, #10
   d4e42:	f004 f956 	bl	d90f2 <_ZN13RunningMedianC1Et>
   d4e46:	4641      	mov	r1, r8
   d4e48:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d4e4c:	f004 f951 	bl	d90f2 <_ZN13RunningMedianC1Et>
   d4e50:	4874      	ldr	r0, [pc, #464]	; (d5024 <_GLOBAL__sub_I_sd+0x348>)
   d4e52:	f000 f9b7 	bl	d51c4 <_ZN7IoTNodeC1Ev>
   d4e56:	f241 6a5c 	movw	sl, #5724	; 0x165c
   d4e5a:	f640 211f 	movw	r1, #2591	; 0xa1f
   d4e5e:	4872      	ldr	r0, [pc, #456]	; (d5028 <_GLOBAL__sub_I_sd+0x34c>)
   d4e60:	f001 f830 	bl	d5ec4 <_ZN16Adafruit_TSL2591C1El>
   d4e64:	2304      	movs	r3, #4
   d4e66:	f844 300a 	str.w	r3, [r4, sl]
   d4e6a:	f504 53b3 	add.w	r3, r4, #5728	; 0x1660
   d4e6e:	4a6f      	ldr	r2, [pc, #444]	; (d502c <_GLOBAL__sub_I_sd+0x350>)
   d4e70:	609a      	str	r2, [r3, #8]
   d4e72:	4a6f      	ldr	r2, [pc, #444]	; (d5030 <_GLOBAL__sub_I_sd+0x354>)
   d4e74:	601d      	str	r5, [r3, #0]
   d4e76:	611a      	str	r2, [r3, #16]
   d4e78:	f241 6374 	movw	r3, #5748	; 0x1674
   d4e7c:	f04f 39ff 	mov.w	r9, #4294967295
   d4e80:	50e5      	str	r5, [r4, r3]
   d4e82:	f241 6378 	movw	r3, #5752	; 0x1678
   d4e86:	2211      	movs	r2, #17
   d4e88:	50e5      	str	r5, [r4, r3]
   d4e8a:	f241 637c 	movw	r3, #5756	; 0x167c
   d4e8e:	f241 686c 	movw	r8, #5740	; 0x166c
   d4e92:	f844 9003 	str.w	r9, [r4, r3]
   d4e96:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d4e9a:	2003      	movs	r0, #3
   d4e9c:	601d      	str	r5, [r3, #0]
   d4e9e:	f241 6384 	movw	r3, #5764	; 0x1684
    {
      pinMode(AnemometerPin, INPUT_PULLUP);
   d4ea2:	2102      	movs	r1, #2
// library interface description
class WeatherSensors
{
  // user-accessible "public" interface
  public:
    WeatherSensors() : airTempKMedian(30), relativeHumidtyMedian(30), node()
   d4ea4:	50e2      	str	r2, [r4, r3]
   d4ea6:	4a63      	ldr	r2, [pc, #396]	; (d5034 <_GLOBAL__sub_I_sd+0x358>)
   d4ea8:	f844 0008 	str.w	r0, [r4, r8]
   d4eac:	2300      	movs	r3, #0
   d4eae:	6013      	str	r3, [r2, #0]
   d4eb0:	6053      	str	r3, [r2, #4]
   d4eb2:	f241 6290 	movw	r2, #5776	; 0x1690
   d4eb6:	50a5      	str	r5, [r4, r2]
   d4eb8:	4a5f      	ldr	r2, [pc, #380]	; (d5038 <_GLOBAL__sub_I_sd+0x35c>)
   d4eba:	6013      	str	r3, [r2, #0]
   d4ebc:	f241 6298 	movw	r2, #5784	; 0x1698
   d4ec0:	50a5      	str	r5, [r4, r2]
   d4ec2:	4a5e      	ldr	r2, [pc, #376]	; (d503c <_GLOBAL__sub_I_sd+0x360>)
   d4ec4:	6013      	str	r3, [r2, #0]
   d4ec6:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
   d4eca:	6015      	str	r5, [r2, #0]
   d4ecc:	6053      	str	r3, [r2, #4]
   d4ece:	f241 62a8 	movw	r2, #5800	; 0x16a8
   d4ed2:	50a5      	str	r5, [r4, r2]
   d4ed4:	4a5a      	ldr	r2, [pc, #360]	; (d5040 <_GLOBAL__sub_I_sd+0x364>)
   d4ed6:	6013      	str	r3, [r2, #0]
   d4ed8:	6053      	str	r3, [r2, #4]
   d4eda:	f241 63b4 	movw	r3, #5812	; 0x16b4
   d4ede:	50e5      	str	r5, [r4, r3]
    {
      pinMode(AnemometerPin, INPUT_PULLUP);
   d4ee0:	f006 fbc8 	bl	db674 <pinMode>
      attachInterrupt(AnemometerPin, &WeatherSensors::handleAnemometerEvent, this, FALLING);
   d4ee4:	f834 0008 	ldrh.w	r0, [r4, r8]
   d4ee8:	4b56      	ldr	r3, [pc, #344]	; (d5044 <_GLOBAL__sub_I_sd+0x368>)
   d4eea:	9306      	str	r3, [sp, #24]
   d4eec:	f04f 0802 	mov.w	r8, #2
   d4ef0:	9507      	str	r5, [sp, #28]
   d4ef2:	9502      	str	r5, [sp, #8]
   d4ef4:	f8cd 9004 	str.w	r9, [sp, #4]
   d4ef8:	f8cd 8000 	str.w	r8, [sp]
   d4efc:	e896 0006 	ldmia.w	r6, {r1, r2}
   d4f00:	4623      	mov	r3, r4
   d4f02:	f7ff febd 	bl	d4c80 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>

      pinMode(RainPin, INPUT_PULLUP);
   d4f06:	4641      	mov	r1, r8
   d4f08:	f834 000a 	ldrh.w	r0, [r4, sl]
   d4f0c:	f006 fbb2 	bl	db674 <pinMode>
      attachInterrupt(RainPin, &WeatherSensors::handleRainEvent, this, FALLING);
   d4f10:	f834 000a 	ldrh.w	r0, [r4, sl]
   d4f14:	4b4c      	ldr	r3, [pc, #304]	; (d5048 <_GLOBAL__sub_I_sd+0x36c>)
   d4f16:	9304      	str	r3, [sp, #16]
   d4f18:	e88d 0300 	stmia.w	sp, {r8, r9}
   d4f1c:	9505      	str	r5, [sp, #20]
   d4f1e:	9502      	str	r5, [sp, #8]
   d4f20:	aa04      	add	r2, sp, #16
   d4f22:	4623      	mov	r3, r4
   d4f24:	ca06      	ldmia	r2, {r1, r2}
   d4f26:	f7ff feab 	bl	d4c80 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>

WeatherSensors sensors; //Interrupts for anemometer and rain bucket
   d4f2a:	4a31      	ldr	r2, [pc, #196]	; (d4ff0 <_GLOBAL__sub_I_sd+0x314>)
   d4f2c:	4947      	ldr	r1, [pc, #284]	; (d504c <_GLOBAL__sub_I_sd+0x370>)
   d4f2e:	4620      	mov	r0, r4
   d4f30:	f006 fc22 	bl	db778 <__aeabi_atexit>
// are set up here too

IoTNode node;
   d4f34:	4846      	ldr	r0, [pc, #280]	; (d5050 <_GLOBAL__sub_I_sd+0x374>)
   d4f36:	f000 f945 	bl	d51c4 <_ZN7IoTNodeC1Ev>
   d4f3a:	4a2d      	ldr	r2, [pc, #180]	; (d4ff0 <_GLOBAL__sub_I_sd+0x314>)
   d4f3c:	4945      	ldr	r1, [pc, #276]	; (d5054 <_GLOBAL__sub_I_sd+0x378>)
   d4f3e:	4844      	ldr	r0, [pc, #272]	; (d5050 <_GLOBAL__sub_I_sd+0x374>)
   d4f40:	f006 fc1a 	bl	db778 <__aeabi_atexit>

// // Create FRAM array and ring
framArray framConfig = node.makeFramArray(1, sizeof(config));
   d4f44:	463a      	mov	r2, r7
   d4f46:	2318      	movs	r3, #24
   d4f48:	4941      	ldr	r1, [pc, #260]	; (d5050 <_GLOBAL__sub_I_sd+0x374>)
   d4f4a:	4843      	ldr	r0, [pc, #268]	; (d5058 <_GLOBAL__sub_I_sd+0x37c>)
   d4f4c:	f000 fac3 	bl	d54d6 <_ZN7IoTNode13makeFramArrayEmh>

framRing dataRing = node.makeFramRing(300, sizeof(sensorReadings));
   d4f50:	2318      	movs	r3, #24
   d4f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
   d4f56:	493e      	ldr	r1, [pc, #248]	; (d5050 <_GLOBAL__sub_I_sd+0x374>)
   d4f58:	4840      	ldr	r0, [pc, #256]	; (d505c <_GLOBAL__sub_I_sd+0x380>)
   d4f5a:	f000 faf4 	bl	d5546 <_ZN7IoTNode12makeFramRingEmh>
bool readyToCapturePollSensors = false;
bool tickleWD = false;

unsigned long timeToNextSendMS;

String deviceStatus;
   d4f5e:	4940      	ldr	r1, [pc, #256]	; (d5060 <_GLOBAL__sub_I_sd+0x384>)
   d4f60:	4840      	ldr	r0, [pc, #256]	; (d5064 <_GLOBAL__sub_I_sd+0x388>)
   d4f62:	f004 ff04 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4f66:	4a22      	ldr	r2, [pc, #136]	; (d4ff0 <_GLOBAL__sub_I_sd+0x314>)
   d4f68:	493f      	ldr	r1, [pc, #252]	; (d5068 <_GLOBAL__sub_I_sd+0x38c>)
   d4f6a:	483e      	ldr	r0, [pc, #248]	; (d5064 <_GLOBAL__sub_I_sd+0x388>)
   d4f6c:	f006 fc04 	bl	db778 <__aeabi_atexit>
String i2cDevices;
   d4f70:	493b      	ldr	r1, [pc, #236]	; (d5060 <_GLOBAL__sub_I_sd+0x384>)
   d4f72:	483e      	ldr	r0, [pc, #248]	; (d506c <_GLOBAL__sub_I_sd+0x390>)
   d4f74:	f004 fefb 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4f78:	4a1d      	ldr	r2, [pc, #116]	; (d4ff0 <_GLOBAL__sub_I_sd+0x314>)
   d4f7a:	493b      	ldr	r1, [pc, #236]	; (d5068 <_GLOBAL__sub_I_sd+0x38c>)
   d4f7c:	483b      	ldr	r0, [pc, #236]	; (d506c <_GLOBAL__sub_I_sd+0x390>)
   d4f7e:	f006 fbfb 	bl	db778 <__aeabi_atexit>
    "ADC",
    "FRAM",
    "AM2315",
    "MPL3115",
    "TSL2591"
};
   d4f82:	493b      	ldr	r1, [pc, #236]	; (d5070 <_GLOBAL__sub_I_sd+0x394>)
   d4f84:	483b      	ldr	r0, [pc, #236]	; (d5074 <_GLOBAL__sub_I_sd+0x398>)
   d4f86:	f004 fef2 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4f8a:	493b      	ldr	r1, [pc, #236]	; (d5078 <_GLOBAL__sub_I_sd+0x39c>)
   d4f8c:	483b      	ldr	r0, [pc, #236]	; (d507c <_GLOBAL__sub_I_sd+0x3a0>)
   d4f8e:	f004 feee 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4f92:	493b      	ldr	r1, [pc, #236]	; (d5080 <_GLOBAL__sub_I_sd+0x3a4>)
   d4f94:	483b      	ldr	r0, [pc, #236]	; (d5084 <_GLOBAL__sub_I_sd+0x3a8>)
   d4f96:	f004 feea 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4f9a:	493b      	ldr	r1, [pc, #236]	; (d5088 <_GLOBAL__sub_I_sd+0x3ac>)
   d4f9c:	483b      	ldr	r0, [pc, #236]	; (d508c <_GLOBAL__sub_I_sd+0x3b0>)
   d4f9e:	f004 fee6 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4fa2:	493b      	ldr	r1, [pc, #236]	; (d5090 <_GLOBAL__sub_I_sd+0x3b4>)
   d4fa4:	483b      	ldr	r0, [pc, #236]	; (d5094 <_GLOBAL__sub_I_sd+0x3b8>)
   d4fa6:	f004 fee2 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4faa:	493b      	ldr	r1, [pc, #236]	; (d5098 <_GLOBAL__sub_I_sd+0x3bc>)
   d4fac:	483b      	ldr	r0, [pc, #236]	; (d509c <_GLOBAL__sub_I_sd+0x3c0>)
   d4fae:	f004 fede 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4fb2:	493b      	ldr	r1, [pc, #236]	; (d50a0 <_GLOBAL__sub_I_sd+0x3c4>)
   d4fb4:	483b      	ldr	r0, [pc, #236]	; (d50a4 <_GLOBAL__sub_I_sd+0x3c8>)
   d4fb6:	f004 feda 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d4fba:	493b      	ldr	r1, [pc, #236]	; (d50a8 <_GLOBAL__sub_I_sd+0x3cc>)
   d4fbc:	483b      	ldr	r0, [pc, #236]	; (d50ac <_GLOBAL__sub_I_sd+0x3d0>)
   d4fbe:	f004 fed6 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>

String deviceStatus;
String i2cDevices;
bool resetDevice = false;

String i2cNames[] =
   d4fc2:	4a0b      	ldr	r2, [pc, #44]	; (d4ff0 <_GLOBAL__sub_I_sd+0x314>)
   d4fc4:	493a      	ldr	r1, [pc, #232]	; (d50b0 <_GLOBAL__sub_I_sd+0x3d4>)
   d4fc6:	4628      	mov	r0, r5
   d4fc8:	f006 fbd6 	bl	db778 <__aeabi_atexit>
  #ifdef IOTDEBUG
  Particle.publish("Unplugged","Plug the device into the IoT Node",PRIVATE);
  DEBUG_PRINTLN("Plug the device into the IoT Node");
  #endif

   d4fcc:	b00a      	add	sp, #40	; 0x28
   d4fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4fd2:	bf00      	nop
   d4fd4:	2003c110 	.word	0x2003c110
   d4fd8:	2003be78 	.word	0x2003be78
   d4fdc:	2003d870 	.word	0x2003d870
   d4fe0:	000dff64 	.word	0x000dff64
   d4fe4:	2003be7c 	.word	0x2003be7c
   d4fe8:	2003be84 	.word	0x2003be84
   d4fec:	02faf080 	.word	0x02faf080
   d4ff0:	2003be74 	.word	0x2003be74
   d4ff4:	000d5789 	.word	0x000d5789
   d4ff8:	2003bfb8 	.word	0x2003bfb8
   d4ffc:	000d40d1 	.word	0x000d40d1
   d5000:	000d42a5 	.word	0x000d42a5
   d5004:	000d40c1 	.word	0x000d40c1
   d5008:	2003c0d8 	.word	0x2003c0d8
   d500c:	000d4375 	.word	0x000d4375
   d5010:	000d4131 	.word	0x000d4131
   d5014:	2003c0f4 	.word	0x2003c0f4
   d5018:	000d4c49 	.word	0x000d4c49
   d501c:	2003c138 	.word	0x2003c138
   d5020:	2003c154 	.word	0x2003c154
   d5024:	2003d758 	.word	0x2003d758
   d5028:	2003d7a0 	.word	0x2003d7a0
   d502c:	3c343958 	.word	0x3c343958
   d5030:	3fbef9db 	.word	0x3fbef9db
   d5034:	2003d7dc 	.word	0x2003d7dc
   d5038:	2003d7e8 	.word	0x2003d7e8
   d503c:	2003d7f0 	.word	0x2003d7f0
   d5040:	2003d800 	.word	0x2003d800
   d5044:	000d416f 	.word	0x000d416f
   d5048:	000d414d 	.word	0x000d414d
   d504c:	000d41a9 	.word	0x000d41a9
   d5050:	2003d824 	.word	0x2003d824
   d5054:	000d4125 	.word	0x000d4125
   d5058:	2003c058 	.word	0x2003c058
   d505c:	2003c088 	.word	0x2003c088
   d5060:	000e05d4 	.word	0x000e05d4
   d5064:	2003c0c8 	.word	0x2003c0c8
   d5068:	000d9ce1 	.word	0x000d9ce1
   d506c:	2003c078 	.word	0x2003c078
   d5070:	000e025e 	.word	0x000e025e
   d5074:	2003bfd8 	.word	0x2003bfd8
   d5078:	000e0262 	.word	0x000e0262
   d507c:	2003bfe8 	.word	0x2003bfe8
   d5080:	000e0266 	.word	0x000e0266
   d5084:	2003bff8 	.word	0x2003bff8
   d5088:	000e0271 	.word	0x000e0271
   d508c:	2003c008 	.word	0x2003c008
   d5090:	000e0275 	.word	0x000e0275
   d5094:	2003c018 	.word	0x2003c018
   d5098:	000e027a 	.word	0x000e027a
   d509c:	2003c028 	.word	0x2003c028
   d50a0:	000e0281 	.word	0x000e0281
   d50a4:	2003c038 	.word	0x2003c038
   d50a8:	000e0289 	.word	0x000e0289
   d50ac:	2003c048 	.word	0x2003c048
   d50b0:	000d4105 	.word	0x000d4105
   d50b4:	000d40cd 	.word	0x000d40cd

000d50b8 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d50b8:	b508      	push	{r3, lr}
   d50ba:	f004 f8a5 	bl	d9208 <HAL_Pin_Map>
   d50be:	4b01      	ldr	r3, [pc, #4]	; (d50c4 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d50c0:	6018      	str	r0, [r3, #0]
   d50c2:	bd08      	pop	{r3, pc}
   d50c4:	2003dcf8 	.word	0x2003dcf8

000d50c8 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d50c8:	f004 b89e 	b.w	d9208 <HAL_Pin_Map>

000d50cc <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d50cc:	7c03      	ldrb	r3, [r0, #16]
   d50ce:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d50d2:	4602      	mov	r2, r0
   d50d4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d50d8:	b12b      	cbz	r3, d50e6 <_ZN4File9availableEv+0x1a>
   d50da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d50dc:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d50de:	1a18      	subs	r0, r3, r0
   d50e0:	bf48      	it	mi
   d50e2:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d50e6:	4770      	bx	lr

000d50e8 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d50e8:	4770      	bx	lr

000d50ea <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d50ea:	3010      	adds	r0, #16
   d50ec:	f001 bf92 	b.w	d7014 <_ZN7FatFile4syncEv>

000d50f0 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d50f0:	3010      	adds	r0, #16
   d50f2:	f001 be69 	b.w	d6dc8 <_ZN7FatFile4peekEv>

000d50f6 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d50f6:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d50f8:	2201      	movs	r2, #1
   d50fa:	f10d 0107 	add.w	r1, sp, #7
   d50fe:	3010      	adds	r0, #16
   d5100:	f001 fdaf 	bl	d6c62 <_ZN7FatFile4readEPvj>
   d5104:	2801      	cmp	r0, #1
   d5106:	bf0c      	ite	eq
   d5108:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d510c:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d5110:	b003      	add	sp, #12
   d5112:	f85d fb04 	ldr.w	pc, [sp], #4

000d5116 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d5116:	3010      	adds	r0, #16
   d5118:	f002 b8ea 	b.w	d72f0 <_ZN7FatFile5writeEPKvj>

000d511c <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d511c:	b507      	push	{r0, r1, r2, lr}
   d511e:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d5120:	2201      	movs	r2, #1
   d5122:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d5126:	3010      	adds	r0, #16
   d5128:	4619      	mov	r1, r3
   d512a:	f002 f8e1 	bl	d72f0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d512e:	b003      	add	sp, #12
   d5130:	f85d fb04 	ldr.w	pc, [sp], #4

000d5134 <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5134:	b510      	push	{r4, lr}
   d5136:	2134      	movs	r1, #52	; 0x34
   d5138:	4604      	mov	r4, r0
   d513a:	f006 fb2b 	bl	db794 <_ZdlPvj>
   d513e:	4620      	mov	r0, r4
   d5140:	bd10      	pop	{r4, pc}
	...

000d5144 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d5144:	b530      	push	{r4, r5, lr}
   d5146:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5148:	4b1c      	ldr	r3, [pc, #112]	; (d51bc <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d514a:	9300      	str	r3, [sp, #0]
   d514c:	7913      	ldrb	r3, [r2, #4]
   d514e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5152:	6893      	ldr	r3, [r2, #8]
   d5154:	9302      	str	r3, [sp, #8]
   d5156:	7b13      	ldrb	r3, [r2, #12]
   d5158:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d515c:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d5160:	7b53      	ldrb	r3, [r2, #13]
   d5162:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d5166:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5168:	460a      	mov	r2, r1
   d516a:	466b      	mov	r3, sp
   d516c:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d5170:	4628      	mov	r0, r5
   d5172:	f002 fc05 	bl	d7980 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d5176:	b1f0      	cbz	r0, d51b6 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d5178:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d517a:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d517e:	4628      	mov	r0, r5
   d5180:	f001 ff7e 	bl	d7080 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d5184:	2101      	movs	r1, #1
   d5186:	4620      	mov	r0, r4
   d5188:	f002 faa3 	bl	d76d2 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d518c:	4601      	mov	r1, r0
   d518e:	b168      	cbz	r0, d51ac <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d5190:	4621      	mov	r1, r4
   d5192:	4628      	mov	r0, r5
   d5194:	f001 fd4d 	bl	d6c32 <_ZN7FatFile8openRootEP9FatVolume>
   d5198:	b168      	cbz	r0, d51b6 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d519a:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d519e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d51a2:	bf16      	itet	ne
   d51a4:	4b06      	ldrne	r3, [pc, #24]	; (d51c0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d51a6:	4618      	moveq	r0, r3
   d51a8:	601d      	strne	r5, [r3, #0]
   d51aa:	e005      	b.n	d51b8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d51ac:	4620      	mov	r0, r4
   d51ae:	f002 fa90 	bl	d76d2 <_ZN9FatVolume4initEh>
   d51b2:	2800      	cmp	r0, #0
   d51b4:	d1ec      	bne.n	d5190 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d51b6:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d51b8:	b005      	add	sp, #20
   d51ba:	bd30      	pop	{r4, r5, pc}
   d51bc:	000dff64 	.word	0x000dff64
   d51c0:	2003e1b8 	.word	0x2003e1b8

000d51c4 <_ZN7IoTNodeC1Ev>:
// Create FRAM instances
#define PART_NUMBER MB85RC256V


// Constructor
IoTNode::IoTNode() : myFram(PART_NUMBER)
   d51c4:	b510      	push	{r4, lr}
   d51c6:	4906      	ldr	r1, [pc, #24]	; (d51e0 <_ZN7IoTNodeC1Ev+0x1c>)
   d51c8:	4604      	mov	r4, r0
   d51ca:	f004 fdd0 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d51ce:	2363      	movs	r3, #99	; 0x63
   d51d0:	7423      	strb	r3, [r4, #16]
   d51d2:	2105      	movs	r1, #5
   d51d4:	f104 0014 	add.w	r0, r4, #20
   d51d8:	f003 fde8 	bl	d8dac <_ZN7FramI2CC1E14framPartNumber>
{

}
   d51dc:	4620      	mov	r0, r4
   d51de:	bd10      	pop	{r4, pc}
   d51e0:	000e05d4 	.word	0x000e05d4

000d51e4 <_ZN7IoTNode2okEv>:

}

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool IoTNode::ok()
{
   d51e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
      0x6F, //111
      0x20, //32
      0x57, //87
      0x4D, //77
      0x50 //80
  };
   d51e6:	4b19      	ldr	r3, [pc, #100]	; (d524c <_ZN7IoTNode2okEv+0x68>)
   d51e8:	6818      	ldr	r0, [r3, #0]
   d51ea:	791b      	ldrb	r3, [r3, #4]
   d51ec:	f88d 3004 	strb.w	r3, [sp, #4]
   d51f0:	9000      	str	r0, [sp, #0]
  if (!Wire.isEnabled())
   d51f2:	f006 fa9b 	bl	db72c <_Z19__fetch_global_Wirev>
   d51f6:	f006 f88a 	bl	db30e <_ZN7TwoWire9isEnabledEv>
   d51fa:	b918      	cbnz	r0, d5204 <_ZN7IoTNode2okEv+0x20>
  {
    Wire.begin();
   d51fc:	f006 fa96 	bl	db72c <_Z19__fetch_global_Wirev>
   d5200:	f006 f840 	bl	db284 <_ZN7TwoWire5beginEv>

}

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool IoTNode::ok()
{
   d5204:	2400      	movs	r4, #0
  for (int i=0; i<5; ++i)
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAd[i];
   d5206:	f81d 5004 	ldrb.w	r5, [sp, r4]
    Wire.beginTransmission(address);
   d520a:	f006 fa8f 	bl	db72c <_Z19__fetch_global_Wirev>
   d520e:	4629      	mov	r1, r5
   d5210:	f006 f86f 	bl	db2f2 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d5214:	f006 fa8a 	bl	db72c <_Z19__fetch_global_Wirev>
   d5218:	f006 f876 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

    // Try again if there is an error
    if (!error==0)
   d521c:	b920      	cbnz	r0, d5228 <_ZN7IoTNode2okEv+0x44>
  {
    Wire.begin();
  }
  byte error, address;
  bool result = true;
  for (int i=0; i<5; ++i)
   d521e:	3401      	adds	r4, #1
   d5220:	2c05      	cmp	r4, #5
   d5222:	d1f0      	bne.n	d5206 <_ZN7IoTNode2okEv+0x22>
  if (!Wire.isEnabled())
  {
    Wire.begin();
  }
  byte error, address;
  bool result = true;
   d5224:	2001      	movs	r0, #1
   d5226:	e00f      	b.n	d5248 <_ZN7IoTNode2okEv+0x64>
    error = Wire.endTransmission();

    // Try again if there is an error
    if (!error==0)
    {
      Wire.reset();
   d5228:	f006 fa80 	bl	db72c <_Z19__fetch_global_Wirev>
   d522c:	f006 f873 	bl	db316 <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d5230:	f006 fa7c 	bl	db72c <_Z19__fetch_global_Wirev>
   d5234:	4629      	mov	r1, r5
   d5236:	f006 f85c 	bl	db2f2 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d523a:	f006 fa77 	bl	db72c <_Z19__fetch_global_Wirev>
   d523e:	f006 f863 	bl	db308 <_ZN7TwoWire15endTransmissionEv>
    }
 
    // Return false if there is an error
    if (!error == 0)
   d5242:	2800      	cmp	r0, #0
   d5244:	d0eb      	beq.n	d521e <_ZN7IoTNode2okEv+0x3a>
    {
      result = false;
   d5246:	2000      	movs	r0, #0
      break;
    }
  }
  return result;
}
   d5248:	b003      	add	sp, #12
   d524a:	bd30      	pop	{r4, r5, pc}
   d524c:	000e02c0 	.word	0x000e02c0

000d5250 <_ZN7IoTNode10setPowerONE9powerNameb>:
   d5250:	4801      	ldr	r0, [pc, #4]	; (d5258 <_ZN7IoTNode10setPowerONE9powerNameb+0x8>)
   d5252:	f002 be42 	b.w	d7eda <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d5256:	bf00      	nop
   d5258:	2003dcfd 	.word	0x2003dcfd

000d525c <_ZN7IoTNode14tickleWatchdogEv>:
// Note that the WATCHDOG switch must be set to On
// for the watchdog reset to be connected
// See documentation for setting up the watchdog delay
// using the dip switch on the IoT Node board
void IoTNode::tickleWatchdog()
{
   d525c:	b510      	push	{r4, lr}
  expand.digitalWrite(5,true);
   d525e:	4c08      	ldr	r4, [pc, #32]	; (d5280 <_ZN7IoTNode14tickleWatchdogEv+0x24>)
   d5260:	2201      	movs	r2, #1
   d5262:	2105      	movs	r1, #5
   d5264:	4620      	mov	r0, r4
   d5266:	f002 fe38 	bl	d7eda <_ZN17Adafruit_MCP2301712digitalWriteEhh>
  //delayMicroseconds(100);
  delay(50);
   d526a:	2032      	movs	r0, #50	; 0x32
   d526c:	f005 fa14 	bl	da698 <delay>
  expand.digitalWrite(5,false);
   d5270:	4620      	mov	r0, r4
   d5272:	2200      	movs	r2, #0
   d5274:	2105      	movs	r1, #5
}
   d5276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void IoTNode::tickleWatchdog()
{
  expand.digitalWrite(5,true);
  //delayMicroseconds(100);
  delay(50);
  expand.digitalWrite(5,false);
   d527a:	f002 be2e 	b.w	d7eda <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d527e:	bf00      	nop
   d5280:	2003dcfd 	.word	0x2003dcfd

000d5284 <_ZN7IoTNode8unixTimeEv>:
}


uint32_t IoTNode::unixTime()
{
  return rtc.rtcNow();
   d5284:	4801      	ldr	r0, [pc, #4]	; (d528c <_ZN7IoTNode8unixTimeEv+0x8>)
   d5286:	f000 bdb7 	b.w	d5df8 <_ZN8MCP7941x6rtcNowEv>
   d528a:	bf00      	nop
   d528c:	2003dcfc 	.word	0x2003dcfc

000d5290 <_ZN7IoTNode11setUnixTimeEm>:
}

void IoTNode::setUnixTime(uint32_t unixtime)
{
  rtc.setUnixTime(unixtime);
   d5290:	4801      	ldr	r0, [pc, #4]	; (d5298 <_ZN7IoTNode11setUnixTimeEm+0x8>)
   d5292:	f000 bd68 	b.w	d5d66 <_ZN8MCP7941x11setUnixTimeEm>
   d5296:	bf00      	nop
   d5298:	2003dcfc 	.word	0x2003dcfc

000d529c <_ZN7IoTNode15array_to_stringEPhjPc>:


// Private

void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
   d529c:	b530      	push	{r4, r5, lr}
    for (unsigned int i = 0; i < len; i++)
   d529e:	2400      	movs	r4, #0
   d52a0:	4294      	cmp	r4, r2
   d52a2:	d012      	beq.n	d52ca <_ZN7IoTNode15array_to_stringEPhjPc+0x2e>
    {
        byte nib1 = (array[i] >> 4) & 0x0F;
   d52a4:	5d08      	ldrb	r0, [r1, r4]
   d52a6:	0905      	lsrs	r5, r0, #4
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
   d52a8:	2d09      	cmp	r5, #9
void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
    for (unsigned int i = 0; i < len; i++)
    {
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
   d52aa:	f000 000f 	and.w	r0, r0, #15
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
   d52ae:	bf94      	ite	ls
   d52b0:	3530      	addls	r5, #48	; 0x30
   d52b2:	3537      	addhi	r5, #55	; 0x37
   d52b4:	f803 5014 	strb.w	r5, [r3, r4, lsl #1]
        buffer[i*2+1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
   d52b8:	2809      	cmp	r0, #9
   d52ba:	eb03 0544 	add.w	r5, r3, r4, lsl #1
   d52be:	bf94      	ite	ls
   d52c0:	3030      	addls	r0, #48	; 0x30
   d52c2:	3037      	addhi	r0, #55	; 0x37
   d52c4:	7068      	strb	r0, [r5, #1]

// Private

void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
    for (unsigned int i = 0; i < len; i++)
   d52c6:	3401      	adds	r4, #1
   d52c8:	e7ea      	b.n	d52a0 <_ZN7IoTNode15array_to_stringEPhjPc+0x4>
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
        buffer[i*2+1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
    }
    buffer[len*2] = '\0';
   d52ca:	2200      	movs	r2, #0
   d52cc:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
   d52d0:	bd30      	pop	{r4, r5, pc}
	...

000d52d4 <_ZN7IoTNode5beginEv>:
{

}

bool IoTNode::begin()
{
   d52d4:	b530      	push	{r4, r5, lr}
   d52d6:	b08d      	sub	sp, #52	; 0x34
   d52d8:	4605      	mov	r5, r0
  if (!Wire.isEnabled())
   d52da:	f006 fa27 	bl	db72c <_Z19__fetch_global_Wirev>
   d52de:	f006 f816 	bl	db30e <_ZN7TwoWire9isEnabledEv>
   d52e2:	b918      	cbnz	r0, d52ec <_ZN7IoTNode5beginEv+0x18>
  {
    Wire.begin();
   d52e4:	f006 fa22 	bl	db72c <_Z19__fetch_global_Wirev>
   d52e8:	f005 ffcc 	bl	db284 <_ZN7TwoWire5beginEv>
  }
  delay(20);
   d52ec:	2014      	movs	r0, #20
   d52ee:	f005 f9d3 	bl	da698 <delay>

  // The i2c_scanner uses the return value of
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  address = 0x20; // MCP23017 address
  Wire.beginTransmission(address);
   d52f2:	f006 fa1b 	bl	db72c <_Z19__fetch_global_Wirev>
   d52f6:	2120      	movs	r1, #32
   d52f8:	f005 fffb 	bl	db2f2 <_ZN7TwoWire17beginTransmissionEh>
  error = Wire.endTransmission();
   d52fc:	f006 fa16 	bl	db72c <_Z19__fetch_global_Wirev>
   d5300:	f006 f802 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

  // Try again if there is an error
  if (!error==0)
   d5304:	b180      	cbz	r0, d5328 <_ZN7IoTNode5beginEv+0x54>
  {
    Wire.reset();
   d5306:	f006 fa11 	bl	db72c <_Z19__fetch_global_Wirev>
   d530a:	f006 f804 	bl	db316 <_ZN7TwoWire5resetEv>
    Wire.beginTransmission(address);
   d530e:	f006 fa0d 	bl	db72c <_Z19__fetch_global_Wirev>
   d5312:	2120      	movs	r1, #32
   d5314:	f005 ffed 	bl	db2f2 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d5318:	f006 fa08 	bl	db72c <_Z19__fetch_global_Wirev>
   d531c:	f005 fff4 	bl	db308 <_ZN7TwoWire15endTransmissionEv>
  }

  // Return false if there is an error
  if (!error == 0)
   d5320:	fab0 f480 	clz	r4, r0
   d5324:	0964      	lsrs	r4, r4, #5
   d5326:	e000      	b.n	d532a <_ZN7IoTNode5beginEv+0x56>
  {
    Wire.begin();
  }
  delay(20);
  byte error, address;
  bool result = true;
   d5328:	2401      	movs	r4, #1
  {
    result = false;
  }
  

  expand.begin();
   d532a:	4861      	ldr	r0, [pc, #388]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d532c:	f002 fdc6 	bl	d7ebc <_ZN17Adafruit_MCP230175beginEv>
  //Set pin direction 1 = out, 0 = in
  //PORT_A,0b10111111 | PORT_B,0b00001111
  expand.pinMode(0,OUTPUT);
   d5330:	2201      	movs	r2, #1
   d5332:	2100      	movs	r1, #0
   d5334:	485e      	ldr	r0, [pc, #376]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5336:	f002 fdc4 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(1,OUTPUT);
   d533a:	2201      	movs	r2, #1
   d533c:	4611      	mov	r1, r2
   d533e:	485c      	ldr	r0, [pc, #368]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5340:	f002 fdbf 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(2,OUTPUT);
   d5344:	2201      	movs	r2, #1
   d5346:	2102      	movs	r1, #2
   d5348:	4859      	ldr	r0, [pc, #356]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d534a:	f002 fdba 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(3,OUTPUT);
   d534e:	2201      	movs	r2, #1
   d5350:	2103      	movs	r1, #3
   d5352:	4857      	ldr	r0, [pc, #348]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5354:	f002 fdb5 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(4,OUTPUT);
   d5358:	2201      	movs	r2, #1
   d535a:	2104      	movs	r1, #4
   d535c:	4854      	ldr	r0, [pc, #336]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d535e:	f002 fdb0 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(5,OUTPUT);
   d5362:	2201      	movs	r2, #1
   d5364:	2105      	movs	r1, #5
   d5366:	4852      	ldr	r0, [pc, #328]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5368:	f002 fdab 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(6,INPUT);
   d536c:	2200      	movs	r2, #0
   d536e:	2106      	movs	r1, #6
   d5370:	484f      	ldr	r0, [pc, #316]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5372:	f002 fda6 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(7,OUTPUT);
   d5376:	2201      	movs	r2, #1
   d5378:	2107      	movs	r1, #7
   d537a:	484d      	ldr	r0, [pc, #308]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d537c:	f002 fda1 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(8,INPUT);
   d5380:	2200      	movs	r2, #0
   d5382:	2108      	movs	r1, #8
   d5384:	484a      	ldr	r0, [pc, #296]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5386:	f002 fd9c 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(9,INPUT);
   d538a:	2200      	movs	r2, #0
   d538c:	2109      	movs	r1, #9
   d538e:	4848      	ldr	r0, [pc, #288]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5390:	f002 fd97 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(10,INPUT);
   d5394:	2200      	movs	r2, #0
   d5396:	210a      	movs	r1, #10
   d5398:	4845      	ldr	r0, [pc, #276]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d539a:	f002 fd92 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(11,INPUT);
   d539e:	2200      	movs	r2, #0
   d53a0:	210b      	movs	r1, #11
   d53a2:	4843      	ldr	r0, [pc, #268]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d53a4:	f002 fd8d 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(12,INPUT);
   d53a8:	2200      	movs	r2, #0
   d53aa:	210c      	movs	r1, #12
   d53ac:	4840      	ldr	r0, [pc, #256]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d53ae:	f002 fd88 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(13,INPUT);
   d53b2:	2200      	movs	r2, #0
   d53b4:	210d      	movs	r1, #13
   d53b6:	483e      	ldr	r0, [pc, #248]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d53b8:	f002 fd83 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(14,INPUT);
   d53bc:	2200      	movs	r2, #0
   d53be:	210e      	movs	r1, #14
   d53c0:	483b      	ldr	r0, [pc, #236]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d53c2:	f002 fd7e 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(15,INPUT);
   d53c6:	2200      	movs	r2, #0
   d53c8:	210f      	movs	r1, #15
   d53ca:	4839      	ldr	r0, [pc, #228]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d53cc:	f002 fd79 	bl	d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>

  expand.pullUp(0,HIGH);
   d53d0:	2201      	movs	r2, #1
   d53d2:	2100      	movs	r1, #0
   d53d4:	4836      	ldr	r0, [pc, #216]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d53d6:	f002 fd9d 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(1,HIGH);
   d53da:	2201      	movs	r2, #1
   d53dc:	4611      	mov	r1, r2
   d53de:	4834      	ldr	r0, [pc, #208]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d53e0:	f002 fd98 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(2,HIGH);
   d53e4:	2201      	movs	r2, #1
   d53e6:	2102      	movs	r1, #2
   d53e8:	4831      	ldr	r0, [pc, #196]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d53ea:	f002 fd93 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(3,HIGH);
   d53ee:	2201      	movs	r2, #1
   d53f0:	2103      	movs	r1, #3
   d53f2:	482f      	ldr	r0, [pc, #188]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d53f4:	f002 fd8e 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(4,HIGH);
   d53f8:	2201      	movs	r2, #1
   d53fa:	2104      	movs	r1, #4
   d53fc:	482c      	ldr	r0, [pc, #176]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d53fe:	f002 fd89 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(5,HIGH);
   d5402:	2201      	movs	r2, #1
   d5404:	2105      	movs	r1, #5
   d5406:	482a      	ldr	r0, [pc, #168]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5408:	f002 fd84 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(6,HIGH);
   d540c:	2201      	movs	r2, #1
   d540e:	2106      	movs	r1, #6
   d5410:	4827      	ldr	r0, [pc, #156]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5412:	f002 fd7f 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(7,HIGH);
   d5416:	2201      	movs	r2, #1
   d5418:	2107      	movs	r1, #7
   d541a:	4825      	ldr	r0, [pc, #148]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d541c:	f002 fd7a 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(8,HIGH);
   d5420:	2201      	movs	r2, #1
   d5422:	2108      	movs	r1, #8
   d5424:	4822      	ldr	r0, [pc, #136]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5426:	f002 fd75 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(9,HIGH);
   d542a:	2201      	movs	r2, #1
   d542c:	2109      	movs	r1, #9
   d542e:	4820      	ldr	r0, [pc, #128]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5430:	f002 fd70 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(10,HIGH);
   d5434:	2201      	movs	r2, #1
   d5436:	210a      	movs	r1, #10
   d5438:	481d      	ldr	r0, [pc, #116]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d543a:	f002 fd6b 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(11,HIGH); 
   d543e:	2201      	movs	r2, #1
   d5440:	210b      	movs	r1, #11
   d5442:	481b      	ldr	r0, [pc, #108]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5444:	f002 fd66 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(12,HIGH);
   d5448:	2201      	movs	r2, #1
   d544a:	210c      	movs	r1, #12
   d544c:	4818      	ldr	r0, [pc, #96]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d544e:	f002 fd61 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(13,HIGH);
   d5452:	2201      	movs	r2, #1
   d5454:	210d      	movs	r1, #13
   d5456:	4816      	ldr	r0, [pc, #88]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5458:	f002 fd5c 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(14,HIGH);
   d545c:	2201      	movs	r2, #1
   d545e:	210e      	movs	r1, #14
   d5460:	4813      	ldr	r0, [pc, #76]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d5462:	f002 fd57 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(15,HIGH);
   d5466:	2201      	movs	r2, #1
   d5468:	210f      	movs	r1, #15
   d546a:	4811      	ldr	r0, [pc, #68]	; (d54b0 <_ZN7IoTNode5beginEv+0x1dc>)
   d546c:	f002 fd52 	bl	d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>

  // Get node ID from MCP79412 EUI-64 node address
  byte nodeHex[8] = "";
   d5470:	2100      	movs	r1, #0
  char nodeHexStr[17] = "";
   d5472:	220d      	movs	r2, #13
   d5474:	a808      	add	r0, sp, #32
  expand.pullUp(13,HIGH);
  expand.pullUp(14,HIGH);
  expand.pullUp(15,HIGH);

  // Get node ID from MCP79412 EUI-64 node address
  byte nodeHex[8] = "";
   d5476:	9101      	str	r1, [sp, #4]
   d5478:	9102      	str	r1, [sp, #8]
  char nodeHexStr[17] = "";
   d547a:	9107      	str	r1, [sp, #28]
   d547c:	f009 f910 	bl	de6a0 <memset>
  rtc.getMacAddress(nodeHex);
   d5480:	a901      	add	r1, sp, #4
   d5482:	480c      	ldr	r0, [pc, #48]	; (d54b4 <_ZN7IoTNode5beginEv+0x1e0>)
   d5484:	f000 fb2e 	bl	d5ae4 <_ZN8MCP7941x13getMacAddressEPh>
  array_to_string(nodeHex, 8, nodeHexStr);
   d5488:	ab07      	add	r3, sp, #28
   d548a:	2208      	movs	r2, #8
   d548c:	a901      	add	r1, sp, #4
   d548e:	4628      	mov	r0, r5
   d5490:	f7ff ff04 	bl	d529c <_ZN7IoTNode15array_to_stringEPhjPc>
  nodeID = String(nodeHexStr);
   d5494:	a907      	add	r1, sp, #28
   d5496:	a803      	add	r0, sp, #12
   d5498:	f004 fc69 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
   d549c:	a903      	add	r1, sp, #12
   d549e:	4628      	mov	r0, r5
   d54a0:	f004 fcaf 	bl	d9e02 <_ZN6StringaSEOS_>
   d54a4:	a803      	add	r0, sp, #12
   d54a6:	f004 fc1b 	bl	d9ce0 <_ZN6StringD1Ev>
  return result;

}
   d54aa:	4620      	mov	r0, r4
   d54ac:	b00d      	add	sp, #52	; 0x34
   d54ae:	bd30      	pop	{r4, r5, pc}
   d54b0:	2003dcfd 	.word	0x2003dcfd
   d54b4:	2003dcfc 	.word	0x2003dcfc

000d54b8 <_ZN9framArrayC1ER7FramI2CmhR10framResult>:
}

//////////////////

// Fram Array Constructor
framArray::framArray(FramI2C& fram, uint32_t numberOfElements, byte sizeOfElement, framResult& result):
   d54b8:	b513      	push	{r0, r1, r4, lr}
   d54ba:	4604      	mov	r4, r0
   d54bc:	9804      	ldr	r0, [sp, #16]
  _numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), myFram(fram), myResult(result),
  myArray(fram, _numberOfElements, _sizeOfElement, result)
   d54be:	60e0      	str	r0, [r4, #12]
   d54c0:	9000      	str	r0, [sp, #0]
   d54c2:	6022      	str	r2, [r4, #0]
   d54c4:	7123      	strb	r3, [r4, #4]
   d54c6:	60a1      	str	r1, [r4, #8]
   d54c8:	f104 0010 	add.w	r0, r4, #16
   d54cc:	f003 fd62 	bl	d8f94 <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult>
{

}
   d54d0:	4620      	mov	r0, r4
   d54d2:	b002      	add	sp, #8
   d54d4:	bd10      	pop	{r4, pc}

000d54d6 <_ZN7IoTNode13makeFramArrayEmh>:

framArray IoTNode::makeFramArray(uint32_t numberOfElements, byte sizeOfElement)
{
   d54d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return framArray(myFram, numberOfElements,sizeOfElement, myResult);
   d54d8:	f101 0510 	add.w	r5, r1, #16
   d54dc:	9500      	str	r5, [sp, #0]
   d54de:	3114      	adds	r1, #20
{

}

framArray IoTNode::makeFramArray(uint32_t numberOfElements, byte sizeOfElement)
{
   d54e0:	4604      	mov	r4, r0
  return framArray(myFram, numberOfElements,sizeOfElement, myResult);
   d54e2:	f7ff ffe9 	bl	d54b8 <_ZN9framArrayC1ER7FramI2CmhR10framResult>
}
   d54e6:	4620      	mov	r0, r4
   d54e8:	b003      	add	sp, #12
   d54ea:	bd30      	pop	{r4, r5, pc}

000d54ec <_ZN9framArray5writeEmPh>:

bool framArray::write(uint32_t index, byte *buffer)
{
   d54ec:	b513      	push	{r0, r1, r4, lr}
  framResult checkResult = framUnknownError;
   d54ee:	ab02      	add	r3, sp, #8
   d54f0:	2463      	movs	r4, #99	; 0x63
   d54f2:	f803 4d01 	strb.w	r4, [r3, #-1]!
  myArray.writeElement(index, buffer, checkResult);
   d54f6:	3010      	adds	r0, #16
   d54f8:	f003 fd77 	bl	d8fea <_ZN12FramI2CArray12writeElementEmPhR10framResult>
  if (checkResult==framOK)
   d54fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
  else
  {
    return false;
  }
  
}
   d5500:	fab0 f080 	clz	r0, r0
   d5504:	0940      	lsrs	r0, r0, #5
   d5506:	b002      	add	sp, #8
   d5508:	bd10      	pop	{r4, pc}

000d550a <_ZN9framArray4readEmPh>:

bool framArray::read(uint32_t index, byte *buffer)
{
   d550a:	b513      	push	{r0, r1, r4, lr}
  framResult checkResult = framUnknownError;
   d550c:	ab02      	add	r3, sp, #8
   d550e:	2463      	movs	r4, #99	; 0x63
   d5510:	f803 4d01 	strb.w	r4, [r3, #-1]!
  myArray.readElement(index, buffer, checkResult);
   d5514:	3010      	adds	r0, #16
   d5516:	f003 fd52 	bl	d8fbe <_ZN12FramI2CArray11readElementEmPhR10framResult>
  if (checkResult==framOK)
   d551a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  else
  {
    return false;
  }
  
}
   d551e:	fab0 f080 	clz	r0, r0
   d5522:	0940      	lsrs	r0, r0, #5
   d5524:	b002      	add	sp, #8
   d5526:	bd10      	pop	{r4, pc}

000d5528 <_ZN8framRingC1ER7FramI2CmhR10framResult>:


//////////////////

// Fram Ring Array Constructor
framRing::framRing(FramI2C& fram, uint32_t numberOfElements, byte sizeOfElement, framResult& result):
   d5528:	b513      	push	{r0, r1, r4, lr}
   d552a:	4604      	mov	r4, r0
   d552c:	9804      	ldr	r0, [sp, #16]
  _numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), myFram(fram), myResult(result),
  myRing(fram, _numberOfElements, _sizeOfElement, result)
   d552e:	60e0      	str	r0, [r4, #12]
   d5530:	9000      	str	r0, [sp, #0]
   d5532:	6022      	str	r2, [r4, #0]
   d5534:	7123      	strb	r3, [r4, #4]
   d5536:	60a1      	str	r1, [r4, #8]
   d5538:	f104 0010 	add.w	r0, r4, #16
   d553c:	f003 fd6b 	bl	d9016 <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult>
{

}
   d5540:	4620      	mov	r0, r4
   d5542:	b002      	add	sp, #8
   d5544:	bd10      	pop	{r4, pc}

000d5546 <_ZN7IoTNode12makeFramRingEmh>:

framRing IoTNode::makeFramRing(uint32_t numberOfElements, byte sizeOfElement)
{
   d5546:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return framRing(myFram, numberOfElements,sizeOfElement, myResult);
   d5548:	f101 0510 	add.w	r5, r1, #16
   d554c:	9500      	str	r5, [sp, #0]
   d554e:	3114      	adds	r1, #20
{

}

framRing IoTNode::makeFramRing(uint32_t numberOfElements, byte sizeOfElement)
{
   d5550:	4604      	mov	r4, r0
  return framRing(myFram, numberOfElements,sizeOfElement, myResult);
   d5552:	f7ff ffe9 	bl	d5528 <_ZN8framRingC1ER7FramI2CmhR10framResult>
}
   d5556:	4620      	mov	r0, r4
   d5558:	b003      	add	sp, #12
   d555a:	bd30      	pop	{r4, r5, pc}

000d555c <_ZN8framRing10initializeEv>:

void framRing::initialize()
{
  myRing.initialize();
   d555c:	3010      	adds	r0, #16
   d555e:	f003 bd92 	b.w	d9086 <_ZN14Ring_FramArray10initializeEv>
	...

000d5564 <_GLOBAL__sub_I_expand>:
}

bool framRing::isFull()
{
  return myRing.isFull();
}
   d5564:	b570      	push	{r4, r5, r6, lr}
   d5566:	f003 fe4f 	bl	d9208 <HAL_Pin_Map>

#include "IoTNode.h"

Adafruit_MCP23017 expand;

MCP7941x rtc = MCP7941x();
   d556a:	481e      	ldr	r0, [pc, #120]	; (d55e4 <_GLOBAL__sub_I_expand+0x80>)
   d556c:	4e1e      	ldr	r6, [pc, #120]	; (d55e8 <_GLOBAL__sub_I_expand+0x84>)
   d556e:	f000 fab8 	bl	d5ae2 <_ZN8MCP7941xC1Ev>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5572:	481e      	ldr	r0, [pc, #120]	; (d55ec <_GLOBAL__sub_I_expand+0x88>)

File myFile;
   d5574:	4a1e      	ldr	r2, [pc, #120]	; (d55f0 <_GLOBAL__sub_I_expand+0x8c>)
   d5576:	491f      	ldr	r1, [pc, #124]	; (d55f4 <_GLOBAL__sub_I_expand+0x90>)
   d5578:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d557a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d557e:	7404      	strb	r4, [r0, #16]
   d5580:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5582:	6044      	str	r4, [r0, #4]
   d5584:	6083      	str	r3, [r0, #8]
 public:
  File() {}
   d5586:	4b1c      	ldr	r3, [pc, #112]	; (d55f8 <_GLOBAL__sub_I_expand+0x94>)
   d5588:	6003      	str	r3, [r0, #0]
   d558a:	f006 f8f5 	bl	db778 <__aeabi_atexit>
   d558e:	4b1b      	ldr	r3, [pc, #108]	; (d55fc <_GLOBAL__sub_I_expand+0x98>)
   d5590:	6831      	ldr	r1, [r6, #0]
   d5592:	71dc      	strb	r4, [r3, #7]
   d5594:	2264      	movs	r2, #100	; 0x64
   d5596:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d559a:	4a19      	ldr	r2, [pc, #100]	; (d5600 <_GLOBAL__sub_I_expand+0x9c>)
   d559c:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d55a0:	2201      	movs	r2, #1
   d55a2:	ea11 0502 	ands.w	r5, r1, r2
   d55a6:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d55aa:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d55ae:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d55b2:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d55b6:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d55ba:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d55be:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
   d55c2:	461c      	mov	r4, r3
   d55c4:	d10a      	bne.n	d55dc <_GLOBAL__sub_I_expand+0x78>
   d55c6:	4630      	mov	r0, r6
   d55c8:	f7fe fd6d 	bl	d40a6 <__cxa_guard_acquire>
   d55cc:	b130      	cbz	r0, d55dc <_GLOBAL__sub_I_expand+0x78>
   d55ce:	4629      	mov	r1, r5
   d55d0:	480c      	ldr	r0, [pc, #48]	; (d5604 <_GLOBAL__sub_I_expand+0xa0>)
   d55d2:	f004 f9db 	bl	d998c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d55d6:	4630      	mov	r0, r6
   d55d8:	f7fe fd6a 	bl	d40b0 <__cxa_guard_release>
   d55dc:	4b09      	ldr	r3, [pc, #36]	; (d5604 <_GLOBAL__sub_I_expand+0xa0>)
   d55de:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d55e2:	bd70      	pop	{r4, r5, r6, pc}
   d55e4:	2003dcfc 	.word	0x2003dcfc
   d55e8:	2003be78 	.word	0x2003be78
   d55ec:	2003dd00 	.word	0x2003dd00
   d55f0:	2003be74 	.word	0x2003be74
   d55f4:	000d50e9 	.word	0x000d50e9
   d55f8:	000e02a0 	.word	0x000e02a0
   d55fc:	2003dd34 	.word	0x2003dd34
   d5600:	000dff64 	.word	0x000dff64
   d5604:	2003be7c 	.word	0x2003be7c

000d5608 <_ZN18SdCardPrintHandler16dateTimeCallbackEPtS0_>:
	// Start over at beginning of buffer
	bufOffset = 0;
}

// [static]
void SdCardPrintHandler::dateTimeCallback(uint16_t* date, uint16_t* time) {
   d5608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d560a:	460e      	mov	r6, r1
   d560c:	4607      	mov	r7, r0
	*date = FAT_DATE(Time.year(), Time.month(), Time.day());
   d560e:	f005 f82f 	bl	da670 <_ZN9TimeClass4yearEv>
   d5612:	4605      	mov	r5, r0
   d5614:	f005 f824 	bl	da660 <_ZN9TimeClass5monthEv>
   d5618:	4604      	mov	r4, r0
   d561a:	f005 f817 	bl	da64c <_ZN9TimeClass3dayEv>
   d561e:	0164      	lsls	r4, r4, #5
   d5620:	b2c0      	uxtb	r0, r0
   d5622:	b2ad      	uxth	r5, r5
   d5624:	f404 54ff 	and.w	r4, r4, #8160	; 0x1fe0
   d5628:	f2a5 75bc 	subw	r5, r5, #1980	; 0x7bc
   d562c:	4304      	orrs	r4, r0
   d562e:	ea44 2445 	orr.w	r4, r4, r5, lsl #9
   d5632:	803c      	strh	r4, [r7, #0]
	*time = FAT_TIME(Time.hour(), Time.minute(), Time.second());
   d5634:	f004 ffec 	bl	da610 <_ZN9TimeClass4hourEv>
   d5638:	4605      	mov	r5, r0
   d563a:	f004 fff3 	bl	da624 <_ZN9TimeClass6minuteEv>
   d563e:	4604      	mov	r4, r0
   d5640:	f004 fffa 	bl	da638 <_ZN9TimeClass6secondEv>
   d5644:	02ed      	lsls	r5, r5, #11
   d5646:	0164      	lsls	r4, r4, #5
   d5648:	f405 25ff 	and.w	r5, r5, #522240	; 0x7f800
   d564c:	f404 54ff 	and.w	r4, r4, #8160	; 0x1fe0
   d5650:	432c      	orrs	r4, r5
   d5652:	f3c0 0046 	ubfx	r0, r0, #1, #7
   d5656:	4304      	orrs	r4, r0
   d5658:	8034      	strh	r4, [r6, #0]
   d565a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d565c <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE>:
}

//
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
   d565c:	b570      	push	{r4, r5, r6, lr}
   d565e:	4604      	mov	r4, r0
   d5660:	2500      	movs	r5, #0
   d5662:	6045      	str	r5, [r0, #4]
   d5664:	7322      	strb	r2, [r4, #12]
   d5666:	481d      	ldr	r0, [pc, #116]	; (d56dc <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x80>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5668:	4a1d      	ldr	r2, [pc, #116]	; (d56e0 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x84>)
   d566a:	6020      	str	r0, [r4, #0]
   d566c:	60a1      	str	r1, [r4, #8]
   d566e:	6122      	str	r2, [r4, #16]
   d5670:	791a      	ldrb	r2, [r3, #4]
   d5672:	7522      	strb	r2, [r4, #20]
   d5674:	689a      	ldr	r2, [r3, #8]
   d5676:	61a2      	str	r2, [r4, #24]
   d5678:	7b1a      	ldrb	r2, [r3, #12]
   d567a:	7722      	strb	r2, [r4, #28]
   d567c:	7b5b      	ldrb	r3, [r3, #13]
   d567e:	7763      	strb	r3, [r4, #29]
   d5680:	4b18      	ldr	r3, [pc, #96]	; (d56e4 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x88>)
   d5682:	6223      	str	r3, [r4, #32]
   d5684:	4b18      	ldr	r3, [pc, #96]	; (d56e8 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x8c>)
   d5686:	6263      	str	r3, [r4, #36]	; 0x24
   d5688:	230a      	movs	r3, #10
   d568a:	62a3      	str	r3, [r4, #40]	; 0x28
   d568c:	f242 7310 	movw	r3, #10000	; 0x2710
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d5690:	f504 768e 	add.w	r6, r4, #284	; 0x11c
   d5694:	62e3      	str	r3, [r4, #44]	; 0x2c
   d5696:	2301      	movs	r3, #1
   d5698:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   d569c:	6365      	str	r5, [r4, #52]	; 0x34
   d569e:	63a5      	str	r5, [r4, #56]	; 0x38
   d56a0:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   d56a4:	f884 50c9 	strb.w	r5, [r4, #201]	; 0xc9
   d56a8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
   d56ac:	f884 50d0 	strb.w	r5, [r4, #208]	; 0xd0
   d56b0:	f884 50d1 	strb.w	r5, [r4, #209]	; 0xd1
   d56b4:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
   d56b8:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
   d56bc:	2210      	movs	r2, #16
   d56be:	4629      	mov	r1, r5
   d56c0:	4630      	mov	r0, r6
   d56c2:	f008 ffed 	bl	de6a0 <memset>
   d56c6:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d56ca:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
	    this->_M_header._M_right = &this->_M_header;
   d56ce:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   d56d2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
}
   d56d6:	4620      	mov	r0, r4
   d56d8:	bd70      	pop	{r4, r5, r6, pc}
   d56da:	bf00      	nop
   d56dc:	000e0364 	.word	0x000e0364
   d56e0:	000dff64 	.word	0x000dff64
   d56e4:	000e02c5 	.word	0x000e02c5
   d56e8:	000f4240 	.word	0x000f4240

000d56ec <_ZN18SdCardPrintHandler7getNameEi>:
		needsScanCard = true;
		lastCardCheck = millis();
	}
}

const char *SdCardPrintHandler::getName(int num) {
   d56ec:	b510      	push	{r4, lr}
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
   d56ee:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
   d56f2:	460b      	mov	r3, r1
   d56f4:	4a03      	ldr	r2, [pc, #12]	; (d5704 <_ZN18SdCardPrintHandler7getNameEi+0x18>)
   d56f6:	210c      	movs	r1, #12
   d56f8:	4620      	mov	r0, r4
   d56fa:	f004 f8b3 	bl	d9864 <snprintf>
	return nameBuf;
}
   d56fe:	4620      	mov	r0, r4
   d5700:	bd10      	pop	{r4, pc}
   d5702:	bf00      	nop
   d5704:	000e02ca 	.word	0x000e02ca

000d5708 <_ZN18SdCardPrintHandler13checkMaxFilesEv>:
		return false;
	}
}


void SdCardPrintHandler::checkMaxFiles() {
   d5708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d570a:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
   d570e:	4604      	mov	r4, r0
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
		const char *name = getName(*it);
		DEBUG_NORMAL(("removing old log file %s", name));
		FatFile::remove(&logsDir, name);
   d5710:	f100 07d0 	add.w	r7, r0, #208	; 0xd0


void SdCardPrintHandler::checkMaxFiles() {
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
   d5714:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   d5718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d571a:	429a      	cmp	r2, r3
   d571c:	d921      	bls.n	d5762 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x5a>
		const char *name = getName(*it);
   d571e:	6929      	ldr	r1, [r5, #16]
   d5720:	4620      	mov	r0, r4
   d5722:	f7ff ffe3 	bl	d56ec <_ZN18SdCardPrintHandler7getNameEi>
   d5726:	4606      	mov	r6, r0
		DEBUG_NORMAL(("removing old log file %s", name));
   d5728:	f005 fbfe 	bl	daf28 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d572c:	4633      	mov	r3, r6
   d572e:	4a0d      	ldr	r2, [pc, #52]	; (d5764 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x5c>)
   d5730:	2101      	movs	r1, #1
   d5732:	f004 fdd0 	bl	da2d6 <_ZN5Print11printf_implEbPKcz>
		FatFile::remove(&logsDir, name);
   d5736:	4631      	mov	r1, r6
   d5738:	4638      	mov	r0, r7
   d573a:	f001 fcf7 	bl	d712c <_ZN7FatFile6removeEPS_PKc>
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d573e:	4628      	mov	r0, r5
   d5740:	f006 f87c 	bl	db83c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   d5744:	f504 718e 	add.w	r1, r4, #284	; 0x11c
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d5748:	4606      	mov	r6, r0
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   d574a:	4628      	mov	r0, r5
   d574c:	f006 f8ee 	bl	db92c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5750:	f7fe fca5 	bl	d409e <_ZdlPv>
      _M_drop_node(__y);
      --_M_impl._M_node_count;
   d5754:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   d5758:	3b01      	subs	r3, #1
   d575a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
		it = fileNums.erase(it);
   d575e:	4635      	mov	r5, r6


void SdCardPrintHandler::checkMaxFiles() {
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
   d5760:	e7d8      	b.n	d5714 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0xc>
   d5762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5764:	000e02d3 	.word	0x000e02d3

000d5768 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5768:	b570      	push	{r4, r5, r6, lr}
   d576a:	4606      	mov	r6, r0
   d576c:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d576e:	b14c      	cbz	r4, d5784 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x1c>
	{
	  _M_erase(_S_right(__x));
   d5770:	68e1      	ldr	r1, [r4, #12]
   d5772:	4630      	mov	r0, r6
   d5774:	f7ff fff8 	bl	d5768 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>
   d5778:	68a5      	ldr	r5, [r4, #8]
   d577a:	4620      	mov	r0, r4
   d577c:	f7fe fc8f 	bl	d409e <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   d5780:	462c      	mov	r4, r5
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d5782:	e7f4      	b.n	d576e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x6>
   d5784:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5788 <_ZN18SdCardPrintHandlerD1Ev>:
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
}

SdCardPrintHandler::~SdCardPrintHandler() {
   d5788:	b510      	push	{r4, lr}
   d578a:	4b05      	ldr	r3, [pc, #20]	; (d57a0 <_ZN18SdCardPrintHandlerD1Ev+0x18>)

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
   d578c:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
   d5790:	6003      	str	r3, [r0, #0]
   d5792:	4604      	mov	r4, r0
   d5794:	f500 708c 	add.w	r0, r0, #280	; 0x118
   d5798:	f7ff ffe6 	bl	d5768 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>

}
   d579c:	4620      	mov	r0, r4
   d579e:	bd10      	pop	{r4, pc}
   d57a0:	000e0364 	.word	0x000e0364

000d57a4 <_ZN18SdCardPrintHandlerD0Ev>:
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
}

SdCardPrintHandler::~SdCardPrintHandler() {
   d57a4:	b510      	push	{r4, lr}
   d57a6:	4604      	mov	r4, r0

}
   d57a8:	f7ff ffee 	bl	d5788 <_ZN18SdCardPrintHandlerD1Ev>
   d57ac:	4620      	mov	r0, r4
   d57ae:	f44f 719a 	mov.w	r1, #308	; 0x134
   d57b2:	f005 ffef 	bl	db794 <_ZdlPvj>
   d57b6:	4620      	mov	r0, r4
   d57b8:	bd10      	pop	{r4, pc}

000d57ba <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>:
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d57ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d57be:	460e      	mov	r6, r1
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d57c0:	f106 0a04 	add.w	sl, r6, #4
   d57c4:	6889      	ldr	r1, [r1, #8]
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d57c6:	4605      	mov	r5, r0
   d57c8:	4617      	mov	r7, r2
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d57ca:	4654      	mov	r4, sl
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
   d57cc:	2301      	movs	r3, #1
      while (__x != 0)
   d57ce:	b159      	cbz	r1, d57e8 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x2e>
   d57d0:	683a      	ldr	r2, [r7, #0]
   d57d2:	690b      	ldr	r3, [r1, #16]
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   d57d4:	429a      	cmp	r2, r3
   d57d6:	bfb4      	ite	lt
   d57d8:	688a      	ldrlt	r2, [r1, #8]
   d57da:	68ca      	ldrge	r2, [r1, #12]
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d57dc:	460c      	mov	r4, r1
   d57de:	bfb4      	ite	lt
   d57e0:	2301      	movlt	r3, #1
   d57e2:	2300      	movge	r3, #0
   d57e4:	4611      	mov	r1, r2
   d57e6:	e7f2      	b.n	d57ce <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x14>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d57e8:	b133      	cbz	r3, d57f8 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x3e>
	{
	  if (__j == begin())
   d57ea:	68f3      	ldr	r3, [r6, #12]
   d57ec:	429c      	cmp	r4, r3
   d57ee:	d00e      	beq.n	d580e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x54>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d57f0:	4620      	mov	r0, r4
   d57f2:	f006 f836 	bl	db862 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d57f6:	e000      	b.n	d57fa <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x40>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d57f8:	4620      	mov	r0, r4
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d57fa:	6902      	ldr	r2, [r0, #16]
   d57fc:	683b      	ldr	r3, [r7, #0]
   d57fe:	429a      	cmp	r2, r3
   d5800:	db05      	blt.n	d580e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x54>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d5802:	6028      	str	r0, [r5, #0]
   d5804:	2300      	movs	r3, #0
   d5806:	712b      	strb	r3, [r5, #4]
				 _GLIBCXX_FORWARD(_Arg, __v), __an),
		      true);
	}

      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    }
   d5808:	4628      	mov	r0, r5
   d580a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
		 _NodeGen& __node_gen)
      {
	bool __insert_left = (__x != 0 || __p == _M_end()
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
							_S_key(__p)));
   d580e:	45a2      	cmp	sl, r4
   d5810:	d008      	beq.n	d5824 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x6a>
   d5812:	683a      	ldr	r2, [r7, #0]
   d5814:	6923      	ldr	r3, [r4, #16]
   d5816:	429a      	cmp	r2, r3
   d5818:	bfac      	ite	ge
   d581a:	f04f 0900 	movge.w	r9, #0
   d581e:	f04f 0901 	movlt.w	r9, #1
   d5822:	e001      	b.n	d5828 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x6e>
   d5824:	f04f 0901 	mov.w	r9, #1
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5828:	2014      	movs	r0, #20
   d582a:	f7fe fc36 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d582e:	683b      	ldr	r3, [r7, #0]
   d5830:	f110 0f10 	cmn.w	r0, #16
   d5834:	bf18      	it	ne
   d5836:	6103      	strne	r3, [r0, #16]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5838:	4680      	mov	r8, r0

	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));

	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d583a:	4653      	mov	r3, sl
   d583c:	4601      	mov	r1, r0
   d583e:	4622      	mov	r2, r4
   d5840:	4648      	mov	r0, r9
   d5842:	f006 f810 	bl	db866 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				      this->_M_impl._M_header);
	++_M_impl._M_node_count;
   d5846:	6973      	ldr	r3, [r6, #20]
   d5848:	f8c5 8000 	str.w	r8, [r5]
   d584c:	3301      	adds	r3, #1
   d584e:	6173      	str	r3, [r6, #20]
   d5850:	2301      	movs	r3, #1
   d5852:	e7d8      	b.n	d5806 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x4c>

000d5854 <_ZN18SdCardPrintHandler11openLogFileEv>:
const char *SdCardPrintHandler::getName(int num) {
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
	return nameBuf;
}

bool SdCardPrintHandler::openLogFile() {
   d5854:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const char *name = getName(lastFileNum);
   d5856:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
const char *SdCardPrintHandler::getName(int num) {
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
	return nameBuf;
}

bool SdCardPrintHandler::openLogFile() {
   d585a:	4604      	mov	r4, r0
	const char *name = getName(lastFileNum);
   d585c:	f7ff ff46 	bl	d56ec <_ZN18SdCardPrintHandler7getNameEi>
	if (curLogFile.open(&logsDir, name, O_RDWR | O_APPEND | O_CREAT)) {
   d5860:	f240 230a 	movw	r3, #522	; 0x20a
   d5864:	4602      	mov	r2, r0
   d5866:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
   d586a:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   d586e:	f001 fc0e 	bl	d708e <_ZN7FatFile4openEPS_PKci>
   d5872:	4605      	mov	r5, r0
   d5874:	b130      	cbz	r0, d5884 <_ZN18SdCardPrintHandler11openLogFileEv+0x30>
       */
      std::pair<iterator, bool>
      insert(const value_type& __x)
      {
	std::pair<typename _Rep_type::iterator, bool> __p =
	  _M_t._M_insert_unique(__x);
   d5876:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   d587a:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d587e:	4668      	mov	r0, sp
   d5880:	f7ff ff9b 	bl	d57ba <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
	}
	else {
		DEBUG_HIGH(("failed to open log file %s", name));
		return false;
	}
}
   d5884:	4628      	mov	r0, r5
   d5886:	b003      	add	sp, #12
   d5888:	bd30      	pop	{r4, r5, pc}
	...

000d588c <_ZN18SdCardPrintHandler8scanCardEv>:
	}

	return 1;
}

void SdCardPrintHandler::scanCard() {
   d588c:	b530      	push	{r4, r5, lr}
	DEBUG_HIGH(("scanCard"));
	needsScanCard = false;
   d588e:	2300      	movs	r3, #0
   d5890:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8

	if (!lastBeginResult) {
   d5894:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
	}

	return 1;
}

void SdCardPrintHandler::scanCard() {
   d5898:	b09d      	sub	sp, #116	; 0x74
   d589a:	4604      	mov	r4, r0
	DEBUG_HIGH(("scanCard"));
	needsScanCard = false;

	if (!lastBeginResult) {
   d589c:	b9e3      	cbnz	r3, d58d8 <_ZN18SdCardPrintHandler8scanCardEv+0x4c>
   *
   * See the timestamp() function.
   */
  static void dateTimeCallback(
    void (*dateTime)(uint16_t* date, uint16_t* time)) {
    m_dateTime = dateTime;
   d589e:	4b49      	ldr	r3, [pc, #292]	; (d59c4 <_ZN18SdCardPrintHandler8scanCardEv+0x138>)
   d58a0:	4a49      	ldr	r2, [pc, #292]	; (d59c8 <_ZN18SdCardPrintHandler8scanCardEv+0x13c>)
		// Set the date time callback
		SdFile::dateTimeCallback(dateTimeCallback);

		pinMode(csPin, OUTPUT);
   d58a2:	7b00      	ldrb	r0, [r0, #12]
   d58a4:	601a      	str	r2, [r3, #0]
   d58a6:	2101      	movs	r1, #1
   d58a8:	f005 fee4 	bl	db674 <pinMode>
   d58ac:	4b47      	ldr	r3, [pc, #284]	; (d59cc <_ZN18SdCardPrintHandler8scanCardEv+0x140>)
   d58ae:	930c      	str	r3, [sp, #48]	; 0x30
   d58b0:	7d23      	ldrb	r3, [r4, #20]
   d58b2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d58b6:	69a3      	ldr	r3, [r4, #24]
   d58b8:	930e      	str	r3, [sp, #56]	; 0x38
   d58ba:	7f23      	ldrb	r3, [r4, #28]
   d58bc:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
		lastBeginResult = sd.begin(csPin, spiSettings);
   d58c0:	7b21      	ldrb	r1, [r4, #12]
   d58c2:	7f63      	ldrb	r3, [r4, #29]
   d58c4:	68a0      	ldr	r0, [r4, #8]
   d58c6:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   d58ca:	aa0c      	add	r2, sp, #48	; 0x30
   d58cc:	f7ff fc3a 	bl	d5144 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d58d0:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
		if (!lastBeginResult) {
   d58d4:	2800      	cmp	r0, #0
   d58d6:	d06b      	beq.n	d59b0 <_ZN18SdCardPrintHandler8scanCardEv+0x124>
			lastCardCheck = millis();
			return;
		}
	}

	if (logsDirName != NULL && !sd.exists(logsDirName)) {
   d58d8:	6a22      	ldr	r2, [r4, #32]
   d58da:	b332      	cbz	r2, d592a <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d58dc:	68a1      	ldr	r1, [r4, #8]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d58de:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d58e0:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d58e4:	a80c      	add	r0, sp, #48	; 0x30
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d58e6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d58ea:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d58ee:	f001 fbce 	bl	d708e <_ZN7FatFile4openEPS_PKci>
   d58f2:	4605      	mov	r5, r0
   d58f4:	b9c8      	cbnz	r0, d592a <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
		DEBUG_NORMAL(("creating logs dir %s", logsDirName));
   d58f6:	f005 fb17 	bl	daf28 <_Z16_fetch_usbserialv>
   d58fa:	6a23      	ldr	r3, [r4, #32]
   d58fc:	4a34      	ldr	r2, [pc, #208]	; (d59d0 <_ZN18SdCardPrintHandler8scanCardEv+0x144>)
   d58fe:	2101      	movs	r1, #1
   d5900:	f004 fce9 	bl	da2d6 <_ZN5Print11printf_implEbPKcz>
		if (!sd.mkdir(logsDirName)) {
   d5904:	68a1      	ldr	r1, [r4, #8]
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
   d5906:	6a22      	ldr	r2, [r4, #32]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5908:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
   d590c:	2301      	movs	r3, #1
   d590e:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d5912:	a80c      	add	r0, sp, #48	; 0x30
   d5914:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
   d5918:	f001 fc99 	bl	d724e <_ZN7FatFile5mkdirEPS_PKcb>
   d591c:	b928      	cbnz	r0, d592a <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
			DEBUG_NORMAL(("mkdir failed"));
   d591e:	f005 fb03 	bl	daf28 <_Z16_fetch_usbserialv>
   d5922:	4a2c      	ldr	r2, [pc, #176]	; (d59d4 <_ZN18SdCardPrintHandler8scanCardEv+0x148>)
   d5924:	2101      	movs	r1, #1
   d5926:	f004 fcd6 	bl	da2d6 <_ZN5Print11printf_implEbPKcz>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d592a:	68a1      	ldr	r1, [r4, #8]
		}
	}

	if (logsDir.open(sd.vwd(), logsDirName, O_READ)) {
   d592c:	6a22      	ldr	r2, [r4, #32]
   d592e:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   d5932:	2300      	movs	r3, #0
   d5934:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d5938:	4628      	mov	r0, r5
   d593a:	f001 fba8 	bl	d708e <_ZN7FatFile4openEPS_PKci>
   d593e:	b388      	cbz	r0, d59a4 <_ZN18SdCardPrintHandler8scanCardEv+0x118>
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d5940:	2100      	movs	r1, #0
   d5942:	4628      	mov	r0, r5
   d5944:	f001 fa70 	bl	d6e28 <_ZN7FatFile7seekSetEm>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5948:	2300      	movs	r3, #0
   d594a:	f88d 300c 	strb.w	r3, [sp, #12]
   d594e:	f88d 300d 	strb.w	r3, [sp, #13]

		logsDir.rewind();

		FatFile tempFile;

		while (tempFile.openNext(&logsDir, O_READ)) {
   d5952:	2200      	movs	r2, #0
   d5954:	4629      	mov	r1, r5
   d5956:	a803      	add	r0, sp, #12
   d5958:	f001 fb1d 	bl	d6f96 <_ZN7FatFile8openNextEPS_i>
   d595c:	b1d0      	cbz	r0, d5994 <_ZN18SdCardPrintHandler8scanCardEv+0x108>
			char name[64];
			tempFile.getName(name, sizeof(name));
   d595e:	2240      	movs	r2, #64	; 0x40
   d5960:	a90c      	add	r1, sp, #48	; 0x30
   d5962:	a803      	add	r0, sp, #12
   d5964:	f000 fcf0 	bl	d6348 <_ZN7FatFile7getNameEPcj>
			DEBUG_HIGH(("logs dir file %s", name));

			int num = atoi(name);
   d5968:	a80c      	add	r0, sp, #48	; 0x30
   d596a:	f008 fd71 	bl	de450 <atoi>
   d596e:	9000      	str	r0, [sp, #0]
			if (num != 0) {
   d5970:	b160      	cbz	r0, d598c <_ZN18SdCardPrintHandler8scanCardEv+0x100>
   d5972:	466a      	mov	r2, sp
   d5974:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d5978:	a801      	add	r0, sp, #4
   d597a:	f7ff ff1e 	bl	d57ba <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
				fileNums.insert(num);
				if (num > lastFileNum) {
   d597e:	9b00      	ldr	r3, [sp, #0]
   d5980:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   d5984:	429a      	cmp	r2, r3
					lastFileNum = num;
   d5986:	bfb8      	it	lt
   d5988:	f8c4 30cc 	strlt.w	r3, [r4, #204]	; 0xcc
				}
			}
			tempFile.close();
   d598c:	a803      	add	r0, sp, #12
   d598e:	f001 fb77 	bl	d7080 <_ZN7FatFile5closeEv>

		logsDir.rewind();

		FatFile tempFile;

		while (tempFile.openNext(&logsDir, O_READ)) {
   d5992:	e7de      	b.n	d5952 <_ZN18SdCardPrintHandler8scanCardEv+0xc6>
					lastFileNum = num;
				}
			}
			tempFile.close();
		}
		checkMaxFiles();
   d5994:	4620      	mov	r0, r4
   d5996:	f7ff feb7 	bl	d5708 <_ZN18SdCardPrintHandler13checkMaxFilesEv>

		if (!openLogFile()) {
   d599a:	4620      	mov	r0, r4
   d599c:	f7ff ff5a 	bl	d5854 <_ZN18SdCardPrintHandler11openLogFileEv>
   d59a0:	b968      	cbnz	r0, d59be <_ZN18SdCardPrintHandler8scanCardEv+0x132>
   d59a2:	e005      	b.n	d59b0 <_ZN18SdCardPrintHandler8scanCardEv+0x124>
			needsScanCard = true;
			lastCardCheck = millis();
		}
	}
	else {
		DEBUG_NORMAL(("failed to open logs dir"));
   d59a4:	f005 fac0 	bl	daf28 <_Z16_fetch_usbserialv>
   d59a8:	4a0b      	ldr	r2, [pc, #44]	; (d59d8 <_ZN18SdCardPrintHandler8scanCardEv+0x14c>)
   d59aa:	2101      	movs	r1, #1
   d59ac:	f004 fc93 	bl	da2d6 <_ZN5Print11printf_implEbPKcz>
		needsScanCard = true;
   d59b0:	2301      	movs	r3, #1
   d59b2:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   d59b6:	f003 fcc7 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
		lastCardCheck = millis();
   d59ba:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
	}
}
   d59be:	b01d      	add	sp, #116	; 0x74
   d59c0:	bd30      	pop	{r4, r5, pc}
   d59c2:	bf00      	nop
   d59c4:	2003e1bc 	.word	0x2003e1bc
   d59c8:	000d5609 	.word	0x000d5609
   d59cc:	000dff64 	.word	0x000dff64
   d59d0:	000e0311 	.word	0x000e0311
   d59d4:	000e02ec 	.word	0x000e02ec
   d59d8:	000e02f9 	.word	0x000e02f9

000d59dc <_ZN18SdCardPrintHandler8writeBufEv>:
		it = fileNums.erase(it);
	}
}


void SdCardPrintHandler::writeBuf() {
   d59dc:	b538      	push	{r3, r4, r5, lr}
   d59de:	4604      	mov	r4, r0

	if (writeToStream) {
   d59e0:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d59e2:	b128      	cbz	r0, d59f0 <_ZN18SdCardPrintHandler8writeBufEv+0x14>
		writeToStream->write(buf, bufOffset);
   d59e4:	6803      	ldr	r3, [r0, #0]
   d59e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d59e8:	68db      	ldr	r3, [r3, #12]
   d59ea:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d59ee:	4798      	blx	r3
	}

	if (needsScanCard) {
   d59f0:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   d59f4:	b15b      	cbz	r3, d5a0e <_ZN18SdCardPrintHandler8writeBufEv+0x32>
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
   d59f6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d59fa:	2b00      	cmp	r3, #0
   d59fc:	d053      	beq.n	d5aa6 <_ZN18SdCardPrintHandler8writeBufEv+0xca>
   d59fe:	f003 fca3 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
   d5a02:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d5a06:	1ac0      	subs	r0, r0, r3
   d5a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5a0a:	4298      	cmp	r0, r3
   d5a0c:	d24b      	bcs.n	d5aa6 <_ZN18SdCardPrintHandler8writeBufEv+0xca>
			scanCard();
		}
	}

	if (lastBeginResult) {
   d5a0e:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
   d5a12:	2b00      	cmp	r3, #0
   d5a14:	d044      	beq.n	d5aa0 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
		if (curLogFile.isOpen()) {
   d5a16:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   d5a1a:	2b00      	cmp	r3, #0
   d5a1c:	d040      	beq.n	d5aa0 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
			if (curLogFile.write(buf, bufOffset) > 0) {
   d5a1e:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
   d5a22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d5a24:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d5a28:	4628      	mov	r0, r5
   d5a2a:	f001 fc61 	bl	d72f0 <_ZN7FatFile5writeEPKvj>
   d5a2e:	2800      	cmp	r0, #0
   d5a30:	dd21      	ble.n	d5a76 <_ZN18SdCardPrintHandler8writeBufEv+0x9a>
				if (syncEveryEntry) {
   d5a32:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5a36:	b113      	cbz	r3, d5a3e <_ZN18SdCardPrintHandler8writeBufEv+0x62>
					curLogFile.sync();
   d5a38:	4628      	mov	r0, r5
   d5a3a:	f001 faeb 	bl	d7014 <_ZN7FatFile4syncEv>
				}

				if (curLogFile.fileSize() > desiredFileSize) {
   d5a3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5a40:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d5a44:	429a      	cmp	r2, r3
   d5a46:	d22b      	bcs.n	d5aa0 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
					// File is too large now. Make a new one.
					curLogFile.close();
   d5a48:	4628      	mov	r0, r5
   d5a4a:	f001 fb19 	bl	d7080 <_ZN7FatFile5closeEv>
					lastFileNum++;
   d5a4e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d5a52:	3301      	adds	r3, #1
   d5a54:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
					DEBUG_NORMAL(("creating new log file %04d", lastFileNum));
   d5a58:	f005 fa66 	bl	daf28 <_Z16_fetch_usbserialv>
   d5a5c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d5a60:	4a13      	ldr	r2, [pc, #76]	; (d5ab0 <_ZN18SdCardPrintHandler8writeBufEv+0xd4>)
   d5a62:	2101      	movs	r1, #1
   d5a64:	f004 fc37 	bl	da2d6 <_ZN5Print11printf_implEbPKcz>
					openLogFile();
   d5a68:	4620      	mov	r0, r4
   d5a6a:	f7ff fef3 	bl	d5854 <_ZN18SdCardPrintHandler11openLogFileEv>

					// Are there too many old files?
					checkMaxFiles();
   d5a6e:	4620      	mov	r0, r4
   d5a70:	f7ff fe4a 	bl	d5708 <_ZN18SdCardPrintHandler13checkMaxFilesEv>
   d5a74:	e014      	b.n	d5aa0 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
				}
			}
			else {
				// Write failed
				DEBUG_NORMAL(("write to sd card failed"));
   d5a76:	f005 fa57 	bl	daf28 <_Z16_fetch_usbserialv>
   d5a7a:	4a0e      	ldr	r2, [pc, #56]	; (d5ab4 <_ZN18SdCardPrintHandler8writeBufEv+0xd8>)
   d5a7c:	2101      	movs	r1, #1
   d5a7e:	f004 fc2a 	bl	da2d6 <_ZN5Print11printf_implEbPKcz>
				curLogFile.close();
   d5a82:	4628      	mov	r0, r5
   d5a84:	f001 fafc 	bl	d7080 <_ZN7FatFile5closeEv>
				logsDir.close();
   d5a88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d5a8c:	f001 faf8 	bl	d7080 <_ZN7FatFile5closeEv>
				needsScanCard = true;
   d5a90:	2301      	movs	r3, #1
   d5a92:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
				lastBeginResult = false;
   d5a96:	2300      	movs	r3, #0
   d5a98:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
				lastCardCheck = 0;
   d5a9c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
			}
		}
	}

	// Start over at beginning of buffer
	bufOffset = 0;
   d5aa0:	2300      	movs	r3, #0
   d5aa2:	63a3      	str	r3, [r4, #56]	; 0x38
}
   d5aa4:	bd38      	pop	{r3, r4, r5, pc}
		writeToStream->write(buf, bufOffset);
	}

	if (needsScanCard) {
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
			scanCard();
   d5aa6:	4620      	mov	r0, r4
   d5aa8:	f7ff fef0 	bl	d588c <_ZN18SdCardPrintHandler8scanCardEv>
   d5aac:	e7af      	b.n	d5a0e <_ZN18SdCardPrintHandler8writeBufEv+0x32>
   d5aae:	bf00      	nop
   d5ab0:	000e0326 	.word	0x000e0326
   d5ab4:	000e0341 	.word	0x000e0341

000d5ab8 <_ZN18SdCardPrintHandler5writeEh>:
SdCardPrintHandler::~SdCardPrintHandler() {

}


size_t SdCardPrintHandler::write(uint8_t c) {
   d5ab8:	b508      	push	{r3, lr}

	buf[bufOffset++] = c;
   d5aba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d5abc:	1c5a      	adds	r2, r3, #1
   d5abe:	4403      	add	r3, r0
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d5ac0:	2a7f      	cmp	r2, #127	; 0x7f
}


size_t SdCardPrintHandler::write(uint8_t c) {

	buf[bufOffset++] = c;
   d5ac2:	6382      	str	r2, [r0, #56]	; 0x38
   d5ac4:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d5ac8:	d801      	bhi.n	d5ace <_ZN18SdCardPrintHandler5writeEh+0x16>
   d5aca:	290a      	cmp	r1, #10
   d5acc:	d101      	bne.n	d5ad2 <_ZN18SdCardPrintHandler5writeEh+0x1a>
		// Buffer is full or have the LF in CRLF, write it out
		writeBuf();
   d5ace:	f7ff ff85 	bl	d59dc <_ZN18SdCardPrintHandler8writeBufEv>
	}

	return 1;
}
   d5ad2:	2001      	movs	r0, #1
   d5ad4:	bd08      	pop	{r3, pc}

000d5ad6 <_GLOBAL__sub_I__ZN22SdCardLogHandlerBufferC2EPhjR5SdFathN8particle13__SPISettingsE8LogLevelN5spark6VectorINS6_17LogCategoryFilterENS6_16DefaultAllocatorEEE>:
   d5ad6:	f003 bb97 	b.w	d9208 <HAL_Pin_Map>

000d5ada <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5ada:	6803      	ldr	r3, [r0, #0]
   d5adc:	b2c9      	uxtb	r1, r1
   d5ade:	689b      	ldr	r3, [r3, #8]
   d5ae0:	4718      	bx	r3

000d5ae2 <_ZN8MCP7941xC1Ev>:
  //  Wire.setSpeed(400000);
  // Initialize the I2C bus if not already enabled
  // if (!Wire.isEnabled()) {
  //     Wire.begin();
  // }
}
   d5ae2:	4770      	bx	lr

000d5ae4 <_ZN8MCP7941x13getMacAddressEPh>:
}


// Function to read the mac address from the eeprom:
void MCP7941x::getMacAddress(byte *mac_address)
{
   d5ae4:	b538      	push	{r3, r4, r5, lr}
   d5ae6:	460c      	mov	r4, r1
  Wire.beginTransmission(MCP7941x_EEPROM_I2C_ADDR);
   d5ae8:	f005 fe20 	bl	db72c <_Z19__fetch_global_Wirev>
   d5aec:	2157      	movs	r1, #87	; 0x57
   d5aee:	f005 fc04 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
  WireSend(MAC_LOCATION);
   d5af2:	f005 fe1b 	bl	db72c <_Z19__fetch_global_Wirev>
   d5af6:	21f2      	movs	r1, #242	; 0xf2
   d5af8:	f7ff ffef 	bl	d5ada <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d5afc:	f005 fe16 	bl	db72c <_Z19__fetch_global_Wirev>
   d5b00:	f005 fc02 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(MCP7941x_EEPROM_I2C_ADDR, 6);
   d5b04:	f005 fe12 	bl	db72c <_Z19__fetch_global_Wirev>
   d5b08:	2206      	movs	r2, #6
   d5b0a:	2157      	movs	r1, #87	; 0x57
   d5b0c:	f005 fbee 	bl	db2ec <_ZN7TwoWire11requestFromEhj>
   d5b10:	1e65      	subs	r5, r4, #1
   d5b12:	3405      	adds	r4, #5

  for( int i=0; i<6; i++ )
  {
    mac_address[i] = WireReceive();
   d5b14:	f005 fe0a 	bl	db72c <_Z19__fetch_global_Wirev>
   d5b18:	6803      	ldr	r3, [r0, #0]
   d5b1a:	695b      	ldr	r3, [r3, #20]
   d5b1c:	4798      	blx	r3
   d5b1e:	f805 0f01 	strb.w	r0, [r5, #1]!
  WireSend(MAC_LOCATION);
  Wire.endTransmission();

  Wire.requestFrom(MCP7941x_EEPROM_I2C_ADDR, 6);

  for( int i=0; i<6; i++ )
   d5b22:	42a5      	cmp	r5, r4
   d5b24:	d1f6      	bne.n	d5b14 <_ZN8MCP7941x13getMacAddressEPh+0x30>
  {
    mac_address[i] = WireReceive();
  }
}
   d5b26:	bd38      	pop	{r3, r4, r5, pc}

000d5b28 <_ZN8MCP7941x11setDateTimeEhhhhhhh>:
  byte hr,          // 1-23
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
   d5b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b2c:	469a      	mov	sl, r3
   d5b2e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   d5b32:	9301      	str	r3, [sp, #4]
   d5b34:	4693      	mov	fp, r2
   d5b36:	460d      	mov	r5, r1
   d5b38:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
   d5b3c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
   d5b40:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
  WITH_LOCK(Wire) {
   d5b44:	f005 fdf2 	bl	db72c <_Z19__fetch_global_Wirev>
   d5b48:	4680      	mov	r8, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5b4a:	f005 fbe9 	bl	db320 <_ZN7TwoWire4lockEv>
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5b4e:	f005 fded 	bl	db72c <_Z19__fetch_global_Wirev>
   d5b52:	216f      	movs	r1, #111	; 0x6f


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d5b54:	240a      	movs	r4, #10
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
  WITH_LOCK(Wire) {
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5b56:	f005 fbd0 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5b5a:	f005 fde7 	bl	db72c <_Z19__fetch_global_Wirev>
   d5b5e:	2100      	movs	r1, #0
   d5b60:	f7ff ffbb 	bl	d5ada <_ZN7TwoWire5writeEi>

    WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d5b64:	f005 fde2 	bl	db72c <_Z19__fetch_global_Wirev>


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d5b68:	fbb5 f2f4 	udiv	r2, r5, r4
   d5b6c:	fb04 5512 	mls	r5, r4, r2, r5
   d5b70:	eb05 1502 	add.w	r5, r5, r2, lsl #4
   d5b74:	b2ed      	uxtb	r5, r5
{
  WITH_LOCK(Wire) {
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
    WireSend(RTC_LOCATION);

    WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d5b76:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d5b7a:	f7ff ffae 	bl	d5ada <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   d5b7e:	f005 fdd5 	bl	db72c <_Z19__fetch_global_Wirev>
   d5b82:	fbbb f1f4 	udiv	r1, fp, r4
   d5b86:	fb04 bb11 	mls	fp, r4, r1, fp
   d5b8a:	eb0b 1101 	add.w	r1, fp, r1, lsl #4
   d5b8e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d5b92:	f7ff ffa2 	bl	d5ada <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   d5b96:	f005 fdc9 	bl	db72c <_Z19__fetch_global_Wirev>
   d5b9a:	fbba f1f4 	udiv	r1, sl, r4
   d5b9e:	fb04 aa11 	mls	sl, r4, r1, sl
   d5ba2:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
   d5ba6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d5baa:	f7ff ff96 	bl	d5ada <_ZN7TwoWire5writeEi>
    WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   d5bae:	f005 fdbd 	bl	db72c <_Z19__fetch_global_Wirev>
   d5bb2:	9b01      	ldr	r3, [sp, #4]
   d5bb4:	fbb3 f1f4 	udiv	r1, r3, r4
   d5bb8:	fb04 3111 	mls	r1, r4, r1, r3
   d5bbc:	f001 0107 	and.w	r1, r1, #7
   d5bc0:	f041 0108 	orr.w	r1, r1, #8
   d5bc4:	f7ff ff89 	bl	d5ada <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   d5bc8:	f005 fdb0 	bl	db72c <_Z19__fetch_global_Wirev>
   d5bcc:	fbb7 f1f4 	udiv	r1, r7, r4
   d5bd0:	fb04 7711 	mls	r7, r4, r1, r7
   d5bd4:	eb07 1101 	add.w	r1, r7, r1, lsl #4
   d5bd8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d5bdc:	f7ff ff7d 	bl	d5ada <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   d5be0:	f005 fda4 	bl	db72c <_Z19__fetch_global_Wirev>
   d5be4:	fbb6 f1f4 	udiv	r1, r6, r4
   d5be8:	fb04 6611 	mls	r6, r4, r1, r6
   d5bec:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   d5bf0:	f001 011f 	and.w	r1, r1, #31
   d5bf4:	f7ff ff71 	bl	d5ada <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(yr));                       // set the yr (11111111)
   d5bf8:	f005 fd98 	bl	db72c <_Z19__fetch_global_Wirev>
   d5bfc:	fbb9 f1f4 	udiv	r1, r9, r4
   d5c00:	6803      	ldr	r3, [r0, #0]
   d5c02:	fb04 9411 	mls	r4, r4, r1, r9
   d5c06:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   d5c0a:	689b      	ldr	r3, [r3, #8]
   d5c0c:	b2c9      	uxtb	r1, r1
   d5c0e:	4798      	blx	r3

    Wire.endTransmission();
   d5c10:	f005 fd8c 	bl	db72c <_Z19__fetch_global_Wirev>
   d5c14:	f005 fb78 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

    // Start Clock:
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5c18:	f005 fd88 	bl	db72c <_Z19__fetch_global_Wirev>
   d5c1c:	216f      	movs	r1, #111	; 0x6f
   d5c1e:	f005 fb6c 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5c22:	f005 fd83 	bl	db72c <_Z19__fetch_global_Wirev>
   d5c26:	2100      	movs	r1, #0
   d5c28:	f7ff ff57 	bl	d5ada <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
   d5c2c:	f005 fd7e 	bl	db72c <_Z19__fetch_global_Wirev>
   d5c30:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5c34:	f7ff ff51 	bl	d5ada <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5c38:	f005 fd78 	bl	db72c <_Z19__fetch_global_Wirev>
   d5c3c:	f005 fb64 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5c40:	4640      	mov	r0, r8
  }

// Serial.print("Set time: ");
// Serial.println(String(yr)+":"+String(mnth)+":"+String(dyofMnth)+":"+String(dyofWk)+":"+String(hr)+":"+String(min)+":"+String(sec));

}
   d5c42:	b003      	add	sp, #12
   d5c44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c48:	f005 bb73 	b.w	db332 <_ZN7TwoWire6unlockEv>

000d5c4c <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>:
  byte *hr,
  byte *dyofWk,
  byte *dyofMnth,
  byte *mnth,
  byte *yr)
{
   d5c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c50:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   d5c54:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d5c56:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d5c58:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d5c5a:	4699      	mov	r9, r3
   d5c5c:	4692      	mov	sl, r2
   d5c5e:	468b      	mov	fp, r1
  WITH_LOCK(Wire) {
   d5c60:	f005 fd64 	bl	db72c <_Z19__fetch_global_Wirev>
   d5c64:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5c66:	f005 fb5b 	bl	db320 <_ZN7TwoWire4lockEv>
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5c6a:	f005 fd5f 	bl	db72c <_Z19__fetch_global_Wirev>
   d5c6e:	216f      	movs	r1, #111	; 0x6f
   d5c70:	f005 fb43 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5c74:	f005 fd5a 	bl	db72c <_Z19__fetch_global_Wirev>
   d5c78:	2100      	movs	r1, #0
   d5c7a:	f7ff ff2e 	bl	d5ada <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5c7e:	f005 fd55 	bl	db72c <_Z19__fetch_global_Wirev>
   d5c82:	f005 fb41 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(MCP7941x_RTC_I2C_ADDR, 7);
   d5c86:	f005 fd51 	bl	db72c <_Z19__fetch_global_Wirev>
   d5c8a:	216f      	movs	r1, #111	; 0x6f
   d5c8c:	2207      	movs	r2, #7
   d5c8e:	f005 fb2d 	bl	db2ec <_ZN7TwoWire11requestFromEhj>

    // A few of these need masks because certain bits are control bits
    *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d5c92:	f005 fd4b 	bl	db72c <_Z19__fetch_global_Wirev>
   d5c96:	6803      	ldr	r3, [r0, #0]
   d5c98:	695b      	ldr	r3, [r3, #20]
   d5c9a:	4798      	blx	r3
   d5c9c:	b2c0      	uxtb	r0, r0
   d5c9e:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d5ca2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5ca6:	f000 000f 	and.w	r0, r0, #15
   d5caa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5cae:	f88b 0000 	strb.w	r0, [fp]
    *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d5cb2:	f005 fd3b 	bl	db72c <_Z19__fetch_global_Wirev>
   d5cb6:	6803      	ldr	r3, [r0, #0]
   d5cb8:	695b      	ldr	r3, [r3, #20]
   d5cba:	4798      	blx	r3
   d5cbc:	b2c0      	uxtb	r0, r0
   d5cbe:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d5cc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5cc6:	f000 000f 	and.w	r0, r0, #15
   d5cca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5cce:	f88a 0000 	strb.w	r0, [sl]
    *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d5cd2:	f005 fd2b 	bl	db72c <_Z19__fetch_global_Wirev>
   d5cd6:	6803      	ldr	r3, [r0, #0]
   d5cd8:	695b      	ldr	r3, [r3, #20]
   d5cda:	4798      	blx	r3
   d5cdc:	b2c0      	uxtb	r0, r0
   d5cde:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d5ce2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5ce6:	f000 000f 	and.w	r0, r0, #15
   d5cea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5cee:	f889 0000 	strb.w	r0, [r9]
    *dyofWk  = bcdToDec(WireReceive() & 0x07);  // 01111111
   d5cf2:	f005 fd1b 	bl	db72c <_Z19__fetch_global_Wirev>
   d5cf6:	6803      	ldr	r3, [r0, #0]
   d5cf8:	695b      	ldr	r3, [r3, #20]
   d5cfa:	4798      	blx	r3
   d5cfc:	f000 0007 	and.w	r0, r0, #7
   d5d00:	f888 0000 	strb.w	r0, [r8]
    *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d5d04:	f005 fd12 	bl	db72c <_Z19__fetch_global_Wirev>
   d5d08:	6803      	ldr	r3, [r0, #0]
   d5d0a:	695b      	ldr	r3, [r3, #20]
   d5d0c:	4798      	blx	r3
   d5d0e:	b2c0      	uxtb	r0, r0
   d5d10:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d5d14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5d18:	f000 000f 	and.w	r0, r0, #15
   d5d1c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5d20:	7038      	strb	r0, [r7, #0]
    *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   d5d22:	f005 fd03 	bl	db72c <_Z19__fetch_global_Wirev>
   d5d26:	6803      	ldr	r3, [r0, #0]
   d5d28:	695b      	ldr	r3, [r3, #20]
   d5d2a:	4798      	blx	r3
   d5d2c:	b2c0      	uxtb	r0, r0
   d5d2e:	f3c0 1200 	ubfx	r2, r0, #4, #1
   d5d32:	0093      	lsls	r3, r2, #2
   d5d34:	4413      	add	r3, r2
   d5d36:	f000 000f 	and.w	r0, r0, #15
   d5d3a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5d3e:	7030      	strb	r0, [r6, #0]
    *yr       = bcdToDec(WireReceive());         // 11111111
   d5d40:	f005 fcf4 	bl	db72c <_Z19__fetch_global_Wirev>
   d5d44:	6803      	ldr	r3, [r0, #0]
   d5d46:	695b      	ldr	r3, [r3, #20]
   d5d48:	4798      	blx	r3
   d5d4a:	b2c0      	uxtb	r0, r0
   d5d4c:	0903      	lsrs	r3, r0, #4
   d5d4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5d52:	f000 000f 	and.w	r0, r0, #15
   d5d56:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5d5a:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5d5c:	4620      	mov	r0, r4
  }
}
   d5d5e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d62:	f005 bae6 	b.w	db332 <_ZN7TwoWire6unlockEv>

000d5d66 <_ZN8MCP7941x11setUnixTimeEm>:
}

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d5d66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d6a:	4607      	mov	r7, r0
   d5d6c:	b08d      	sub	sp, #52	; 0x34
  byte sec = (byte)Time.second(unixTime);
   d5d6e:	4608      	mov	r0, r1
}

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d5d70:	460c      	mov	r4, r1
  byte sec = (byte)Time.second(unixTime);
   d5d72:	f004 fb43 	bl	da3fc <_ZN9TimeClass6secondEl>
   d5d76:	4680      	mov	r8, r0
  byte min= (byte)Time.minute(unixTime);
   d5d78:	4620      	mov	r0, r4
   d5d7a:	f004 fb37 	bl	da3ec <_ZN9TimeClass6minuteEl>
   d5d7e:	4681      	mov	r9, r0
  byte hr= (byte)Time.hour(unixTime);
   d5d80:	4620      	mov	r0, r4
   d5d82:	f004 fb2b 	bl	da3dc <_ZN9TimeClass4hourEl>
   d5d86:	4682      	mov	sl, r0
  byte dyofWk= (byte)Time.weekday(unixTime);
   d5d88:	4620      	mov	r0, r4
   d5d8a:	f004 fb47 	bl	da41c <_ZN9TimeClass7weekdayEl>
   d5d8e:	4605      	mov	r5, r0
  byte dyofMnth= (byte)Time.day(unixTime);
   d5d90:	4620      	mov	r0, r4
   d5d92:	f004 fb3b 	bl	da40c <_ZN9TimeClass3dayEl>
   d5d96:	4606      	mov	r6, r0
  byte mnth= (byte)Time.month(unixTime);
   d5d98:	4620      	mov	r0, r4
   d5d9a:	f004 fb49 	bl	da430 <_ZN9TimeClass5monthEl>
   d5d9e:	4683      	mov	fp, r0
  String yrString = String(Time.year(unixTime));
   d5da0:	4620      	mov	r0, r4
   d5da2:	f004 fb4f 	bl	da444 <_ZN9TimeClass4yearEl>
   d5da6:	220a      	movs	r2, #10
   d5da8:	4601      	mov	r1, r0
   d5daa:	a804      	add	r0, sp, #16
   d5dac:	f004 f865 	bl	d9e7a <_ZN6StringC1Eih>
  byte yr = (byte) yrString.substring(2).toInt();
   d5db0:	a904      	add	r1, sp, #16
   d5db2:	2202      	movs	r2, #2
   d5db4:	a808      	add	r0, sp, #32
   d5db6:	f004 f90f 	bl	d9fd8 <_ZNK6String9substringEj>
   d5dba:	a808      	add	r0, sp, #32
   d5dbc:	f004 f913 	bl	d9fe6 <_ZNK6String5toIntEv>
   d5dc0:	4604      	mov	r4, r0
   d5dc2:	a808      	add	r0, sp, #32
   d5dc4:	f003 ff8c 	bl	d9ce0 <_ZN6StringD1Ev>
    min,        // 0-59
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
   d5dc8:	b2e4      	uxtb	r4, r4
   d5dca:	fa5f f38b 	uxtb.w	r3, fp
   d5dce:	b2f6      	uxtb	r6, r6
   d5dd0:	b2ed      	uxtb	r5, r5
   d5dd2:	9302      	str	r3, [sp, #8]
   d5dd4:	fa5f f289 	uxtb.w	r2, r9
   d5dd8:	fa5f f38a 	uxtb.w	r3, sl
   d5ddc:	fa5f f188 	uxtb.w	r1, r8
   d5de0:	4638      	mov	r0, r7
   d5de2:	9403      	str	r4, [sp, #12]
   d5de4:	9601      	str	r6, [sp, #4]
   d5de6:	9500      	str	r5, [sp, #0]
   d5de8:	f7ff fe9e 	bl	d5b28 <_ZN8MCP7941x11setDateTimeEhhhhhhh>
  byte min= (byte)Time.minute(unixTime);
  byte hr= (byte)Time.hour(unixTime);
  byte dyofWk= (byte)Time.weekday(unixTime);
  byte dyofMnth= (byte)Time.day(unixTime);
  byte mnth= (byte)Time.month(unixTime);
  String yrString = String(Time.year(unixTime));
   d5dec:	a804      	add	r0, sp, #16
   d5dee:	f003 ff77 	bl	d9ce0 <_ZN6StringD1Ev>
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
}
   d5df2:	b00d      	add	sp, #52	; 0x34
   d5df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5df8 <_ZN8MCP7941x6rtcNowEv>:

//gets unix as defined by the external RTC
// Note that since the MCP7941 only stores years 0-99
// we assume time from 2000 onwards.
// Only works to year 2037!
uint32_t MCP7941x::rtcNow(){
   d5df8:	b500      	push	{lr}
   d5dfa:	b091      	sub	sp, #68	; 0x44
		  &min,
		  &hr,
		  &dyofWk,
		  &dyofMnth,
		  &mnth,
		  &yr);
   d5dfc:	f10d 031b 	add.w	r3, sp, #27
   d5e00:	9303      	str	r3, [sp, #12]
   d5e02:	f10d 031a 	add.w	r3, sp, #26
   d5e06:	9302      	str	r3, [sp, #8]
   d5e08:	f10d 0319 	add.w	r3, sp, #25
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	ab06      	add	r3, sp, #24
   d5e10:	9300      	str	r3, [sp, #0]
   d5e12:	f10d 0216 	add.w	r2, sp, #22
   d5e16:	f10d 0317 	add.w	r3, sp, #23
   d5e1a:	f10d 0115 	add.w	r1, sp, #21
   d5e1e:	f7ff ff15 	bl	d5c4c <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>

  // Deal with mktime 2038 bug
  if (yr>37)
   d5e22:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d5e26:	2b25      	cmp	r3, #37	; 0x25
  {
    yr = 0;
   d5e28:	bf84      	itt	hi
   d5e2a:	2300      	movhi	r3, #0
   d5e2c:	f88d 301b 	strbhi.w	r3, [sp, #27]
  }

  //declare variable
  struct tm tm;
  tm.tm_sec = (sec);
   d5e30:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d5e34:	9307      	str	r3, [sp, #28]
  tm.tm_min = (min);
   d5e36:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d5e3a:	9308      	str	r3, [sp, #32]
  tm.tm_hour = (hr);
   d5e3c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d5e40:	9309      	str	r3, [sp, #36]	; 0x24
  tm.tm_mday = (dyofMnth);
   d5e42:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d5e46:	930a      	str	r3, [sp, #40]	; 0x28
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
   d5e48:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d5e4c:	3b01      	subs	r3, #1
   d5e4e:	930b      	str	r3, [sp, #44]	; 0x2c
  tm.tm_year = yr + 100; // The number of years since 1900 (by definition of tm)
   d5e50:	f89d 301b 	ldrb.w	r3, [sp, #27]

  time_t moment = mktime(&tm);//create epoc time_t object
   d5e54:	a807      	add	r0, sp, #28
  tm.tm_sec = (sec);
  tm.tm_min = (min);
  tm.tm_hour = (hr);
  tm.tm_mday = (dyofMnth);
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
  tm.tm_year = yr + 100; // The number of years since 1900 (by definition of tm)
   d5e56:	3364      	adds	r3, #100	; 0x64
   d5e58:	930c      	str	r3, [sp, #48]	; 0x30

  time_t moment = mktime(&tm);//create epoc time_t object
   d5e5a:	f008 fd05 	bl	de868 <mktime>

  return uint32_t(moment);
}
   d5e5e:	b011      	add	sp, #68	; 0x44
   d5e60:	f85d fb04 	ldr.w	pc, [sp], #4

000d5e64 <_GLOBAL__sub_I__ZN8MCP7941xC2Ev>:
   d5e64:	f003 b9d0 	b.w	d9208 <HAL_Pin_Map>

000d5e68 <_ZN16Adafruit_TSL2591D1Ev>:
/**************************************************************************/
/*! 
    @brief  Class that stores state and functions for interacting with TSL2591 Light Sensor
*/
/**************************************************************************/
class Adafruit_TSL2591 : public Adafruit_Sensor
   d5e68:	4770      	bx	lr
	...

000d5e6c <_ZN16Adafruit_TSL25919getSensorEP8sensor_t>:
    @brief  Gets the overall sensor_t data including the type, range and resulution
    @param  sensor Pointer to Adafruit_Sensor sensor_t object that will be filled with sensor type data
*/
/**************************************************************************/
void Adafruit_TSL2591::getSensor(sensor_t *sensor)
{
   d5e6c:	b538      	push	{r3, r4, r5, lr}
   d5e6e:	460c      	mov	r4, r1
   d5e70:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d5e72:	2228      	movs	r2, #40	; 0x28
   d5e74:	2100      	movs	r1, #0
   d5e76:	4620      	mov	r0, r4
   d5e78:	f008 fc12 	bl	de6a0 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
   d5e7c:	220b      	movs	r2, #11
   d5e7e:	490a      	ldr	r1, [pc, #40]	; (d5ea8 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x3c>)
   d5e80:	4620      	mov	r0, r4
   d5e82:	f009 fbf8 	bl	df676 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5e86:	2300      	movs	r3, #0
  sensor->version     = 1;
   d5e88:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5e8a:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
   d5e8c:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
   d5e8e:	68aa      	ldr	r2, [r5, #8]
  sensor->type        = SENSOR_TYPE_LIGHT;
  sensor->min_delay   = 0;
   d5e90:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 88000.0;
   d5e92:	4b06      	ldr	r3, [pc, #24]	; (d5eac <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x40>)
   d5e94:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0.0;
   d5e96:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
   d5e98:	6122      	str	r2, [r4, #16]
  sensor->type        = SENSOR_TYPE_LIGHT;
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
   d5e9a:	61e3      	str	r3, [r4, #28]
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_LIGHT;
   d5e9c:	2205      	movs	r2, #5
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
  sensor->resolution  = 0.001;
   d5e9e:	4b04      	ldr	r3, [pc, #16]	; (d5eb0 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x44>)
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_LIGHT;
   d5ea0:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
  sensor->resolution  = 0.001;
   d5ea2:	6223      	str	r3, [r4, #32]
   d5ea4:	bd38      	pop	{r3, r4, r5, pc}
   d5ea6:	bf00      	nop
   d5ea8:	000e0289 	.word	0x000e0289
   d5eac:	47abe000 	.word	0x47abe000
   d5eb0:	3a83126f 	.word	0x3a83126f

000d5eb4 <_ZN16Adafruit_TSL2591D0Ev>:
   d5eb4:	b510      	push	{r4, lr}
   d5eb6:	2110      	movs	r1, #16
   d5eb8:	4604      	mov	r4, r0
   d5eba:	f005 fc6b 	bl	db794 <_ZdlPvj>
   d5ebe:	4620      	mov	r0, r4
   d5ec0:	bd10      	pop	{r4, pc}
	...

000d5ec4 <_ZN16Adafruit_TSL2591C1El>:
/*!
    @brief  Instantiates a new Adafruit TSL2591 class
    @param  sensorID An optional ID # so you can track this sensor, it will tag sensorEvents you create.
*/
/**************************************************************************/
Adafruit_TSL2591::Adafruit_TSL2591(int32_t sensorID)
   d5ec4:	4a04      	ldr	r2, [pc, #16]	; (d5ed8 <_ZN16Adafruit_TSL2591C1El+0x14>)
   d5ec6:	6002      	str	r2, [r0, #0]
{
  _initialized = false;
   d5ec8:	2200      	movs	r2, #0
   d5eca:	7302      	strb	r2, [r0, #12]
  _integration = TSL2591_INTEGRATIONTIME_100MS;
   d5ecc:	7142      	strb	r2, [r0, #5]
  _gain        = TSL2591_GAIN_MED;
   d5ece:	2210      	movs	r2, #16
   d5ed0:	7182      	strb	r2, [r0, #6]
  _sensorID    = sensorID;
   d5ed2:	6081      	str	r1, [r0, #8]

  // we cant do wire initialization till later, because we havent loaded Wire yet
}
   d5ed4:	4770      	bx	lr
   d5ed6:	bf00      	nop
   d5ed8:	000e0390 	.word	0x000e0390

000d5edc <_ZN16Adafruit_TSL25917getGainEv>:
*/
/**************************************************************************/
tsl2591Gain_t Adafruit_TSL2591::getGain()
{
  return _gain;
}
   d5edc:	7980      	ldrb	r0, [r0, #6]
   d5ede:	4770      	bx	lr

000d5ee0 <_ZN16Adafruit_TSL25919getTimingEv>:
*/
/**************************************************************************/
tsl2591IntegrationTime_t Adafruit_TSL2591::getTiming()
{
  return _integration;
}
   d5ee0:	7940      	ldrb	r0, [r0, #5]
   d5ee2:	4770      	bx	lr

000d5ee4 <_ZN16Adafruit_TSL259112calculateLuxEtt>:
  float    atime, again;
  float    cpl, lux1, lux2, lux;
  uint32_t chan0, chan1;

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
   d5ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5ee8:	4299      	cmp	r1, r3
    @param  ch1 Data from channel 1 (IR)
    @returns Lux, based on AMS coefficients
*/
/**************************************************************************/
float Adafruit_TSL2591::calculateLux(uint16_t ch0, uint16_t ch1)
{
   d5eea:	b510      	push	{r4, lr}
  float    atime, again;
  float    cpl, lux1, lux2, lux;
  uint32_t chan0, chan1;

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
   d5eec:	d039      	beq.n	d5f62 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x7e>
   d5eee:	429a      	cmp	r2, r3
   d5ef0:	d037      	beq.n	d5f62 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x7e>
   d5ef2:	7943      	ldrb	r3, [r0, #5]
   d5ef4:	3b01      	subs	r3, #1
   d5ef6:	b2db      	uxtb	r3, r3
   d5ef8:	2b04      	cmp	r3, #4
   d5efa:	bf97      	itett	ls
   d5efc:	4c1a      	ldrls	r4, [pc, #104]	; (d5f68 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x84>)
  }

  // Note: This algorithm is based on preliminary coefficients
  // provided by AMS and may need to be updated in the future

  switch (_integration)
   d5efe:	eddf 5a1b 	vldrhi	s11, [pc, #108]	; d5f6c <_ZN16Adafruit_TSL259112calculateLuxEtt+0x88>
   d5f02:	eb04 0383 	addls.w	r3, r4, r3, lsl #2
   d5f06:	edd3 5a00 	vldrls	s11, [r3]
    default: // 100ms
      atime = 100.0F;
      break;
  }

  switch (_gain)
   d5f0a:	7983      	ldrb	r3, [r0, #6]
   d5f0c:	2b20      	cmp	r3, #32
   d5f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d5f12:	d008      	beq.n	d5f26 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x42>
   d5f14:	2b30      	cmp	r3, #48	; 0x30
   d5f16:	d009      	beq.n	d5f2c <_ZN16Adafruit_TSL259112calculateLuxEtt+0x48>
   d5f18:	2b10      	cmp	r3, #16
  {
    case TSL2591_GAIN_LOW :
      again = 1.0F;
   d5f1a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
   d5f1e:	bf18      	it	ne
   d5f20:	eef0 6a47 	vmovne.f32	s13, s14
   d5f24:	e004      	b.n	d5f30 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x4c>
      break;
    case TSL2591_GAIN_MED :
      again = 25.0F;
      break;
    case TSL2591_GAIN_HIGH :
      again = 428.0F;
   d5f26:	eddf 6a12 	vldr	s13, [pc, #72]	; d5f70 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x8c>
   d5f2a:	e001      	b.n	d5f30 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x4c>
      break;
    case TSL2591_GAIN_MAX :
      again = 9876.0F;
   d5f2c:	eddf 6a11 	vldr	s13, [pc, #68]	; d5f74 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x90>
  //lux2 = ( ( TSL2591_LUX_COEFC * (float)ch0 ) - ( TSL2591_LUX_COEFD * (float)ch1 ) ) / cpl;
  //lux = lux1 > lux2 ? lux1 : lux2;

  // Alternate lux calculation 1
  // See: https://github.com/adafruit/Adafruit_TSL2591_Library/issues/14
  lux = ( ((float)ch0 - (float)ch1 )) * (1.0F - ((float)ch1/(float)ch0) ) / cpl;
   d5f30:	ee07 1a90 	vmov	s15, r1
   d5f34:	ee06 2a10 	vmov	s12, r2
   d5f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d5f3c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
   d5f40:	ee65 6aa6 	vmul.f32	s13, s11, s13
   d5f44:	ee86 5a27 	vdiv.f32	s10, s12, s15
   d5f48:	ee77 7ac6 	vsub.f32	s15, s15, s12
   d5f4c:	ee37 7a45 	vsub.f32	s14, s14, s10
   d5f50:	ed9f 6a09 	vldr	s12, [pc, #36]	; d5f78 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x94>
   d5f54:	ee67 7a27 	vmul.f32	s15, s14, s15
   d5f58:	ee86 7a86 	vdiv.f32	s14, s13, s12
   d5f5c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d5f60:	bd10      	pop	{r4, pc}

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
  {
    // Signal an overflow
    return 0;
   d5f62:	ed9f 0a06 	vldr	s0, [pc, #24]	; d5f7c <_ZN16Adafruit_TSL259112calculateLuxEtt+0x98>
  // Alternate lux calculation 2
  //lux = ( (float)ch0 - ( 1.7F * (float)ch1 ) ) / cpl;

  // Signal I2C had no errors
  return lux;
}
   d5f66:	bd10      	pop	{r4, pc}
   d5f68:	000e0374 	.word	0x000e0374
   d5f6c:	42c80000 	.word	0x42c80000
   d5f70:	43d60000 	.word	0x43d60000
   d5f74:	461a5000 	.word	0x461a5000
   d5f78:	43cc0000 	.word	0x43cc0000
   d5f7c:	00000000 	.word	0x00000000

000d5f80 <_ZN16Adafruit_TSL25915read8Eh>:
}
/*******************************************************/


uint8_t Adafruit_TSL2591::read8(uint8_t reg)
{
   d5f80:	b510      	push	{r4, lr}
   d5f82:	460c      	mov	r4, r1
  uint8_t x;

  Wire.beginTransmission(TSL2591_ADDR);
   d5f84:	f005 fbd2 	bl	db72c <_Z19__fetch_global_Wirev>
   d5f88:	2129      	movs	r1, #41	; 0x29
   d5f8a:	f005 f9b6 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d5f8e:	f005 fbcd 	bl	db72c <_Z19__fetch_global_Wirev>
   d5f92:	6803      	ldr	r3, [r0, #0]
   d5f94:	4621      	mov	r1, r4
   d5f96:	689b      	ldr	r3, [r3, #8]
   d5f98:	4798      	blx	r3
  Wire.endTransmission();
   d5f9a:	f005 fbc7 	bl	db72c <_Z19__fetch_global_Wirev>
   d5f9e:	f005 f9b3 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(TSL2591_ADDR, 1);
   d5fa2:	f005 fbc3 	bl	db72c <_Z19__fetch_global_Wirev>
   d5fa6:	2201      	movs	r2, #1
   d5fa8:	2129      	movs	r1, #41	; 0x29
   d5faa:	f005 f99f 	bl	db2ec <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
   d5fae:	f005 fbbd 	bl	db72c <_Z19__fetch_global_Wirev>
   d5fb2:	6803      	ldr	r3, [r0, #0]
   d5fb4:	695b      	ldr	r3, [r3, #20]
   d5fb6:	4798      	blx	r3

  return x;
}
   d5fb8:	b2c0      	uxtb	r0, r0
   d5fba:	bd10      	pop	{r4, pc}

000d5fbc <_ZN16Adafruit_TSL25916read16Eh>:

uint16_t Adafruit_TSL2591::read16(uint8_t reg)
{
   d5fbc:	b510      	push	{r4, lr}
   d5fbe:	460c      	mov	r4, r1
  uint16_t x;
  uint16_t t;

  Wire.beginTransmission(TSL2591_ADDR);
   d5fc0:	f005 fbb4 	bl	db72c <_Z19__fetch_global_Wirev>
   d5fc4:	2129      	movs	r1, #41	; 0x29
   d5fc6:	f005 f998 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d5fca:	f005 fbaf 	bl	db72c <_Z19__fetch_global_Wirev>
   d5fce:	6803      	ldr	r3, [r0, #0]
   d5fd0:	4621      	mov	r1, r4
   d5fd2:	689b      	ldr	r3, [r3, #8]
   d5fd4:	4798      	blx	r3
  Wire.endTransmission();
   d5fd6:	f005 fba9 	bl	db72c <_Z19__fetch_global_Wirev>
   d5fda:	f005 f995 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(TSL2591_ADDR, 2);
   d5fde:	f005 fba5 	bl	db72c <_Z19__fetch_global_Wirev>
   d5fe2:	2202      	movs	r2, #2
   d5fe4:	2129      	movs	r1, #41	; 0x29
   d5fe6:	f005 f981 	bl	db2ec <_ZN7TwoWire11requestFromEhj>
  t = Wire.read();
   d5fea:	f005 fb9f 	bl	db72c <_Z19__fetch_global_Wirev>
   d5fee:	6803      	ldr	r3, [r0, #0]
   d5ff0:	695b      	ldr	r3, [r3, #20]
   d5ff2:	4798      	blx	r3
   d5ff4:	4604      	mov	r4, r0
  x = Wire.read();
   d5ff6:	f005 fb99 	bl	db72c <_Z19__fetch_global_Wirev>
   d5ffa:	6803      	ldr	r3, [r0, #0]
   d5ffc:	695b      	ldr	r3, [r3, #20]
   d5ffe:	4798      	blx	r3

  x <<= 8;
  x |= t;
  return x;
   d6000:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
   d6004:	b280      	uxth	r0, r0
   d6006:	bd10      	pop	{r4, pc}

000d6008 <_ZN16Adafruit_TSL25916write8Ehh>:

void Adafruit_TSL2591::write8 (uint8_t reg, uint8_t value)
{
   d6008:	b538      	push	{r3, r4, r5, lr}
   d600a:	4614      	mov	r4, r2
   d600c:	460d      	mov	r5, r1
  Wire.beginTransmission(TSL2591_ADDR);
   d600e:	f005 fb8d 	bl	db72c <_Z19__fetch_global_Wirev>
   d6012:	2129      	movs	r1, #41	; 0x29
   d6014:	f005 f971 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d6018:	f005 fb88 	bl	db72c <_Z19__fetch_global_Wirev>
   d601c:	6803      	ldr	r3, [r0, #0]
   d601e:	4629      	mov	r1, r5
   d6020:	689b      	ldr	r3, [r3, #8]
   d6022:	4798      	blx	r3
  Wire.write(value);
   d6024:	f005 fb82 	bl	db72c <_Z19__fetch_global_Wirev>
   d6028:	6803      	ldr	r3, [r0, #0]
   d602a:	4621      	mov	r1, r4
   d602c:	689b      	ldr	r3, [r3, #8]
   d602e:	4798      	blx	r3
  Wire.endTransmission();
   d6030:	f005 fb7c 	bl	db72c <_Z19__fetch_global_Wirev>
}
   d6034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_TSL2591::write8 (uint8_t reg, uint8_t value)
{
  Wire.beginTransmission(TSL2591_ADDR);
  Wire.write(reg);
  Wire.write(value);
  Wire.endTransmission();
   d6038:	f005 b966 	b.w	db308 <_ZN7TwoWire15endTransmissionEv>

000d603c <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>:
    @brief  Setter for sensor light gain
    @param  gain {@link tsl2591Gain_t} gain value
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
   d603c:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d603e:	7b03      	ldrb	r3, [r0, #12]
    @brief  Setter for sensor light gain
    @param  gain {@link tsl2591Gain_t} gain value
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
   d6040:	4604      	mov	r4, r0
   d6042:	460d      	mov	r5, r1
  if (!_initialized) {
   d6044:	b173      	cbz	r3, d6064 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0x28>
    if (!begin()) {
      return;
    }
  }

  enable();
   d6046:	4620      	mov	r0, r4
   d6048:	f000 f82e 	bl	d60a8 <_ZN16Adafruit_TSL25916enableEv>
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d604c:	7962      	ldrb	r2, [r4, #5]
      return;
    }
  }

  enable();
  _gain = gain;
   d604e:	71a5      	strb	r5, [r4, #6]
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d6050:	4620      	mov	r0, r4
   d6052:	432a      	orrs	r2, r5
   d6054:	21a1      	movs	r1, #161	; 0xa1
   d6056:	f7ff ffd7 	bl	d6008 <_ZN16Adafruit_TSL25916write8Ehh>
  disable();
   d605a:	4620      	mov	r0, r4
}
   d605c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  enable();
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
   d6060:	f000 b832 	b.w	d60c8 <_ZN16Adafruit_TSL25917disableEv>
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
  if (!_initialized) {
    if (!begin()) {
   d6064:	f000 f803 	bl	d606e <_ZN16Adafruit_TSL25915beginEv>
   d6068:	2800      	cmp	r0, #0
   d606a:	d1ec      	bne.n	d6046 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0xa>

  enable();
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
}
   d606c:	bd38      	pop	{r3, r4, r5, pc}

000d606e <_ZN16Adafruit_TSL25915beginEv>:
    @brief  Setups the I2C interface and hardware, identifies if chip is found
    @returns True if a TSL2591 is found, false on any failure
*/
/**************************************************************************/
boolean Adafruit_TSL2591::begin(void)
{
   d606e:	b538      	push	{r3, r4, r5, lr}
   d6070:	4604      	mov	r4, r0
  Wire.begin();
   d6072:	f005 fb5b 	bl	db72c <_Z19__fetch_global_Wirev>
   d6076:	f005 f905 	bl	db284 <_ZN7TwoWire5beginEv>
    Serial.print("$"); Serial.print(i, HEX);
    Serial.print(" = 0x"); Serial.println(read8(i), HEX);
  }
  */

  uint8_t id = read8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_DEVICE_ID);
   d607a:	21b2      	movs	r1, #178	; 0xb2
   d607c:	4620      	mov	r0, r4
   d607e:	f7ff ff7f 	bl	d5f80 <_ZN16Adafruit_TSL25915read8Eh>
  if (id != 0x50 ) {
   d6082:	2850      	cmp	r0, #80	; 0x50
   d6084:	d10e      	bne.n	d60a4 <_ZN16Adafruit_TSL25915beginEv+0x36>
    return false;
  }
  // Serial.println("Found Adafruit_TSL2591");

  _initialized = true;
   d6086:	2501      	movs	r5, #1

  // Set default integration time and gain
  setTiming(_integration);
   d6088:	7961      	ldrb	r1, [r4, #5]
  if (id != 0x50 ) {
    return false;
  }
  // Serial.println("Found Adafruit_TSL2591");

  _initialized = true;
   d608a:	7325      	strb	r5, [r4, #12]

  // Set default integration time and gain
  setTiming(_integration);
   d608c:	4620      	mov	r0, r4
   d608e:	f000 f82b 	bl	d60e8 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>
  setGain(_gain);
   d6092:	79a1      	ldrb	r1, [r4, #6]
   d6094:	4620      	mov	r0, r4
   d6096:	f7ff ffd1 	bl	d603c <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>

  // Note: by default, the device is in power down mode on bootup
  disable();
   d609a:	4620      	mov	r0, r4
   d609c:	f000 f814 	bl	d60c8 <_ZN16Adafruit_TSL25917disableEv>
   d60a0:	4628      	mov	r0, r5
   d60a2:	bd38      	pop	{r3, r4, r5, pc}
  }
  */

  uint8_t id = read8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_DEVICE_ID);
  if (id != 0x50 ) {
    return false;
   d60a4:	2000      	movs	r0, #0

  // Note: by default, the device is in power down mode on bootup
  disable();

  return true;
}
   d60a6:	bd38      	pop	{r3, r4, r5, pc}

000d60a8 <_ZN16Adafruit_TSL25916enableEv>:
/*!
    @brief  Enables the chip, so it's ready to take readings
*/
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
   d60a8:	b510      	push	{r4, lr}
  if (!_initialized)
   d60aa:	7b03      	ldrb	r3, [r0, #12]
/*!
    @brief  Enables the chip, so it's ready to take readings
*/
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
   d60ac:	4604      	mov	r4, r0
  if (!_initialized)
   d60ae:	b133      	cbz	r3, d60be <_ZN16Adafruit_TSL25916enableEv+0x16>
    }
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
   d60b0:	4620      	mov	r0, r4
   d60b2:	2293      	movs	r2, #147	; 0x93
   d60b4:	21a0      	movs	r1, #160	; 0xa0
}
   d60b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
   d60ba:	f7ff bfa5 	b.w	d6008 <_ZN16Adafruit_TSL25916write8Ehh>
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
  if (!_initialized)
  {
    if (!begin())
   d60be:	f7ff ffd6 	bl	d606e <_ZN16Adafruit_TSL25915beginEv>
   d60c2:	2800      	cmp	r0, #0
   d60c4:	d1f4      	bne.n	d60b0 <_ZN16Adafruit_TSL25916enableEv+0x8>
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
}
   d60c6:	bd10      	pop	{r4, pc}

000d60c8 <_ZN16Adafruit_TSL25917disableEv>:
/*!
    @brief Disables the chip, so it's in power down mode
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
   d60c8:	b510      	push	{r4, lr}
  if (!_initialized) {
   d60ca:	7b03      	ldrb	r3, [r0, #12]
/*!
    @brief Disables the chip, so it's in power down mode
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
   d60cc:	4604      	mov	r4, r0
  if (!_initialized) {
   d60ce:	b133      	cbz	r3, d60de <_ZN16Adafruit_TSL25917disableEv+0x16>
      return;
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
   d60d0:	4620      	mov	r0, r4
   d60d2:	2200      	movs	r2, #0
   d60d4:	21a0      	movs	r1, #160	; 0xa0
}
   d60d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return;
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
   d60da:	f7ff bf95 	b.w	d6008 <_ZN16Adafruit_TSL25916write8Ehh>
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
  if (!_initialized) {
    if (!begin()) {
   d60de:	f7ff ffc6 	bl	d606e <_ZN16Adafruit_TSL25915beginEv>
   d60e2:	2800      	cmp	r0, #0
   d60e4:	d1f4      	bne.n	d60d0 <_ZN16Adafruit_TSL25917disableEv+0x8>
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
}
   d60e6:	bd10      	pop	{r4, pc}

000d60e8 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>:
    @brief  Setter for sensor integration time setting
    @param integration {@link tsl2591IntegrationTime_t} integration time setting
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
   d60e8:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d60ea:	7b03      	ldrb	r3, [r0, #12]
    @brief  Setter for sensor integration time setting
    @param integration {@link tsl2591IntegrationTime_t} integration time setting
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
   d60ec:	4604      	mov	r4, r0
   d60ee:	460d      	mov	r5, r1
  if (!_initialized) {
   d60f0:	b173      	cbz	r3, d6110 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0x28>
    if (!begin()) {
      return;
    }
  }

  enable();
   d60f2:	4620      	mov	r0, r4
   d60f4:	f7ff ffd8 	bl	d60a8 <_ZN16Adafruit_TSL25916enableEv>
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d60f8:	79a2      	ldrb	r2, [r4, #6]
      return;
    }
  }

  enable();
  _integration = integration;
   d60fa:	7165      	strb	r5, [r4, #5]
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d60fc:	4620      	mov	r0, r4
   d60fe:	432a      	orrs	r2, r5
   d6100:	21a1      	movs	r1, #161	; 0xa1
   d6102:	f7ff ff81 	bl	d6008 <_ZN16Adafruit_TSL25916write8Ehh>
  disable();
   d6106:	4620      	mov	r0, r4
}
   d6108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  enable();
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
   d610c:	f7ff bfdc 	b.w	d60c8 <_ZN16Adafruit_TSL25917disableEv>
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
  if (!_initialized) {
    if (!begin()) {
   d6110:	f7ff ffad 	bl	d606e <_ZN16Adafruit_TSL25915beginEv>
   d6114:	2800      	cmp	r0, #0
   d6116:	d1ec      	bne.n	d60f2 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0xa>

  enable();
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
}
   d6118:	bd38      	pop	{r3, r4, r5, pc}

000d611a <_ZN16Adafruit_TSL259117getFullLuminosityEv>:
    @brief  Reads the raw data from both light channels
    @returns 32-bit raw count where high word is IR, low word is IR+Visible
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
   d611a:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d611c:	7b03      	ldrb	r3, [r0, #12]
    @brief  Reads the raw data from both light channels
    @returns 32-bit raw count where high word is IR, low word is IR+Visible
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
   d611e:	4605      	mov	r5, r0
  if (!_initialized) {
   d6120:	b123      	cbz	r3, d612c <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x12>
      return 0;
    }
  }

  // Enable the device
  enable();
   d6122:	4628      	mov	r0, r5
   d6124:	f7ff ffc0 	bl	d60a8 <_ZN16Adafruit_TSL25916enableEv>
   d6128:	2400      	movs	r4, #0
   d612a:	e004      	b.n	d6136 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x1c>
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
  if (!_initialized) {
    if (!begin()) {
   d612c:	f7ff ff9f 	bl	d606e <_ZN16Adafruit_TSL25915beginEv>
   d6130:	2800      	cmp	r0, #0
   d6132:	d1f6      	bne.n	d6122 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x8>
   d6134:	bd38      	pop	{r3, r4, r5, pc}

  // Enable the device
  enable();

  // Wait x ms for ADC to complete
  for (uint8_t d=0; d<=_integration; d++)
   d6136:	796a      	ldrb	r2, [r5, #5]
   d6138:	b2e3      	uxtb	r3, r4
   d613a:	429a      	cmp	r2, r3
   d613c:	f104 0401 	add.w	r4, r4, #1
   d6140:	d303      	bcc.n	d614a <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x30>
  {
    delay(120);
   d6142:	2078      	movs	r0, #120	; 0x78
   d6144:	f004 faa8 	bl	da698 <delay>

  // Enable the device
  enable();

  // Wait x ms for ADC to complete
  for (uint8_t d=0; d<=_integration; d++)
   d6148:	e7f5      	b.n	d6136 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x1c>

  // CHAN0 must be read before CHAN1
  // See: https://forums.adafruit.com/viewtopic.php?f=19&t=124176
  uint32_t x;
  uint16_t y;
  y |= read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN0_LOW);
   d614a:	21b4      	movs	r1, #180	; 0xb4
   d614c:	4628      	mov	r0, r5
   d614e:	f7ff ff35 	bl	d5fbc <_ZN16Adafruit_TSL25916read16Eh>
  x = read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN1_LOW);
   d6152:	21b6      	movs	r1, #182	; 0xb6

  // CHAN0 must be read before CHAN1
  // See: https://forums.adafruit.com/viewtopic.php?f=19&t=124176
  uint32_t x;
  uint16_t y;
  y |= read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN0_LOW);
   d6154:	b284      	uxth	r4, r0
  x = read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN1_LOW);
   d6156:	4628      	mov	r0, r5
   d6158:	f7ff ff30 	bl	d5fbc <_ZN16Adafruit_TSL25916read16Eh>
  x <<= 16;
  x |= y;
   d615c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16

  disable();
   d6160:	4628      	mov	r0, r5
   d6162:	f7ff ffb1 	bl	d60c8 <_ZN16Adafruit_TSL25917disableEv>

  return x;
   d6166:	4620      	mov	r0, r4
}
   d6168:	bd38      	pop	{r3, r4, r5, pc}

000d616a <_ZN16Adafruit_TSL25918getEventEP15sensors_event_t>:
    @param  event Pointer to Adafruit_Sensor sensors_event_t object that will be filled with sensor data
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_TSL2591::getEvent(sensors_event_t *event)
{
   d616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d616c:	4605      	mov	r5, r0
   d616e:	460c      	mov	r4, r1
  uint16_t ir, full;
  uint32_t lum = getFullLuminosity();
   d6170:	f7ff ffd3 	bl	d611a <_ZN16Adafruit_TSL259117getFullLuminosityEv>
  /* Early silicon seems to have issues when there is a sudden jump in */
  /* light levels. :( To work around this for now sample the sensor 2x */
  lum = getFullLuminosity();
   d6174:	4628      	mov	r0, r5
   d6176:	f7ff ffd0 	bl	d611a <_ZN16Adafruit_TSL259117getFullLuminosityEv>
  ir = lum >> 16;
  full = lum & 0xFFFF;

  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d617a:	2724      	movs	r7, #36	; 0x24
{
  uint16_t ir, full;
  uint32_t lum = getFullLuminosity();
  /* Early silicon seems to have issues when there is a sudden jump in */
  /* light levels. :( To work around this for now sample the sensor 2x */
  lum = getFullLuminosity();
   d617c:	4606      	mov	r6, r0
  ir = lum >> 16;
  full = lum & 0xFFFF;

  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d617e:	463a      	mov	r2, r7
   d6180:	2100      	movs	r1, #0
   d6182:	4620      	mov	r0, r4
   d6184:	f008 fa8c 	bl	de6a0 <memset>

  event->version   = sizeof(sensors_event_t);
   d6188:	6027      	str	r7, [r4, #0]
  event->sensor_id = _sensorID;
   d618a:	68ab      	ldr	r3, [r5, #8]
   d618c:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_LIGHT;
   d618e:	2305      	movs	r3, #5
   d6190:	60a3      	str	r3, [r4, #8]
   d6192:	f003 f8d9 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();

  /* Calculate the actual lux value */
  /* 0 = sensor overflow (too much light) */
  event->light = calculateLux(full, ir);
   d6196:	0c32      	lsrs	r2, r6, #16
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
  event->type      = SENSOR_TYPE_LIGHT;
  event->timestamp = millis();
   d6198:	6120      	str	r0, [r4, #16]

  /* Calculate the actual lux value */
  /* 0 = sensor overflow (too much light) */
  event->light = calculateLux(full, ir);
   d619a:	b2b1      	uxth	r1, r6
   d619c:	4628      	mov	r0, r5
   d619e:	f7ff fea1 	bl	d5ee4 <_ZN16Adafruit_TSL259112calculateLuxEtt>
   d61a2:	ed84 0a05 	vstr	s0, [r4, #20]

  return true;
}
   d61a6:	2001      	movs	r0, #1
   d61a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61aa <_GLOBAL__sub_I__ZN16Adafruit_TSL2591C2El>:
   d61aa:	f003 b82d 	b.w	d9208 <HAL_Pin_Map>

000d61ae <_GLOBAL__sub_I__ZN7DS18B20C2EP7OneWire>:
   d61ae:	f003 b82b 	b.w	d9208 <HAL_Pin_Map>

000d61b2 <_ZN15Adafruit_AM2315C1Ev>:
  #include <util/delay.h>
#endif


Adafruit_AM2315::Adafruit_AM2315() {
}
   d61b2:	4770      	bx	lr

000d61b4 <_ZN15Adafruit_AM23158readDataEv>:

   // try to read data, as a test
  return readData();
}

bool Adafruit_AM2315::readData(void) {
   d61b4:	b530      	push	{r4, r5, lr}
   d61b6:	b085      	sub	sp, #20
   d61b8:	4605      	mov	r5, r0
  uint8_t reply[10];

  // Wake up the sensor
  Wire.beginTransmission(AM2315_I2CADDR);
   d61ba:	f005 fab7 	bl	db72c <_Z19__fetch_global_Wirev>
   d61be:	215c      	movs	r1, #92	; 0x5c
   d61c0:	f005 f89b 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
  delay(2);
   d61c4:	2002      	movs	r0, #2
   d61c6:	f004 fa67 	bl	da698 <delay>
  Wire.endTransmission();
   d61ca:	f005 faaf 	bl	db72c <_Z19__fetch_global_Wirev>
   d61ce:	f005 f89b 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

  // OK lets ready!
  Wire.beginTransmission(AM2315_I2CADDR);
   d61d2:	f005 faab 	bl	db72c <_Z19__fetch_global_Wirev>
   d61d6:	215c      	movs	r1, #92	; 0x5c
   d61d8:	f005 f88f 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(AM2315_READREG);
   d61dc:	f005 faa6 	bl	db72c <_Z19__fetch_global_Wirev>
   d61e0:	2103      	movs	r1, #3
   d61e2:	f7ff fc7a 	bl	d5ada <_ZN7TwoWire5writeEi>
  Wire.write(0x00);  // start at address 0x0
   d61e6:	f005 faa1 	bl	db72c <_Z19__fetch_global_Wirev>
   d61ea:	2100      	movs	r1, #0
   d61ec:	f7ff fc75 	bl	d5ada <_ZN7TwoWire5writeEi>
  Wire.write(4);  // request 4 bytes data
   d61f0:	f005 fa9c 	bl	db72c <_Z19__fetch_global_Wirev>
   d61f4:	2104      	movs	r1, #4
   d61f6:	f7ff fc70 	bl	d5ada <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d61fa:	f005 fa97 	bl	db72c <_Z19__fetch_global_Wirev>
   d61fe:	f005 f883 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

  delay(10); // add delay between request and actual read!
   d6202:	200a      	movs	r0, #10
   d6204:	f004 fa48 	bl	da698 <delay>

  Wire.requestFrom(AM2315_I2CADDR, 8);
   d6208:	f005 fa90 	bl	db72c <_Z19__fetch_global_Wirev>
   d620c:	2208      	movs	r2, #8
   d620e:	215c      	movs	r1, #92	; 0x5c
   d6210:	f005 f86c 	bl	db2ec <_ZN7TwoWire11requestFromEhj>
   d6214:	2400      	movs	r4, #0
  for (uint8_t i=0; i<8; i++) {
    reply[i] = Wire.read();
   d6216:	f005 fa89 	bl	db72c <_Z19__fetch_global_Wirev>
   d621a:	6803      	ldr	r3, [r0, #0]
   d621c:	695b      	ldr	r3, [r3, #20]
   d621e:	4798      	blx	r3
   d6220:	ab01      	add	r3, sp, #4
   d6222:	5518      	strb	r0, [r3, r4]
   d6224:	3401      	adds	r4, #1
  Wire.endTransmission();

  delay(10); // add delay between request and actual read!

  Wire.requestFrom(AM2315_I2CADDR, 8);
  for (uint8_t i=0; i<8; i++) {
   d6226:	2c08      	cmp	r4, #8
   d6228:	d1f5      	bne.n	d6216 <_ZN15Adafruit_AM23158readDataEv+0x62>
    reply[i] = Wire.read();
    //Serial.println(reply[i], HEX);
  }

  if (reply[0] != AM2315_READREG) return false;
   d622a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d622e:	2b03      	cmp	r3, #3
   d6230:	d134      	bne.n	d629c <_ZN15Adafruit_AM23158readDataEv+0xe8>
  if (reply[1] != 4) return false; // bytes req'd
   d6232:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d6236:	2b04      	cmp	r3, #4
   d6238:	d130      	bne.n	d629c <_ZN15Adafruit_AM23158readDataEv+0xe8>

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d623a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d623e:	ed9f 6a19 	vldr	s12, [pc, #100]	; d62a4 <_ZN15Adafruit_AM23158readDataEv+0xf0>
   d6242:	ee07 3a10 	vmov	s14, r3
   d6246:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d624a:	ee07 3a90 	vmov	s15, r3
   d624e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d6252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6256:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   d625a:	eee7 7a06 	vfma.f32	s15, s14, s12
  //Serial.print("H"); Serial.println(humidity);

  temp = reply[4] & 0x7F;
   d625e:	f89d 3008 	ldrb.w	r3, [sp, #8]
  temp *= 256;
  temp += reply[5];
  temp /= 10;
   d6262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
  if (reply[1] != 4) return false; // bytes req'd

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d6266:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  temp += reply[5];
  temp /= 10;
  //Serial.print("T"); Serial.println(temp);

  // change sign
  if (reply[4] >> 7) temp = -temp;
   d626a:	09db      	lsrs	r3, r3, #7

  return true;
   d626c:	f04f 0001 	mov.w	r0, #1
  if (reply[1] != 4) return false; // bytes req'd

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d6270:	ed85 7a00 	vstr	s14, [r5]
  //Serial.print("H"); Serial.println(humidity);

  temp = reply[4] & 0x7F;
  temp *= 256;
  temp += reply[5];
  temp /= 10;
   d6274:	ee07 2a10 	vmov	s14, r2
   d6278:	f89d 2009 	ldrb.w	r2, [sp, #9]
   d627c:	ee07 2a90 	vmov	s15, r2
   d6280:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d6284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6288:	eee7 7a06 	vfma.f32	s15, s14, s12
   d628c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  //Serial.print("T"); Serial.println(temp);

  // change sign
  if (reply[4] >> 7) temp = -temp;
   d6290:	bf18      	it	ne
   d6292:	eeb1 7a47 	vnegne.f32	s14, s14
   d6296:	ed85 7a01 	vstr	s14, [r5, #4]
   d629a:	e000      	b.n	d629e <_ZN15Adafruit_AM23158readDataEv+0xea>
  for (uint8_t i=0; i<8; i++) {
    reply[i] = Wire.read();
    //Serial.println(reply[i], HEX);
  }

  if (reply[0] != AM2315_READREG) return false;
   d629c:	2000      	movs	r0, #0

  // change sign
  if (reply[4] >> 7) temp = -temp;

  return true;
}
   d629e:	b005      	add	sp, #20
   d62a0:	bd30      	pop	{r4, r5, pc}
   d62a2:	bf00      	nop
   d62a4:	43800000 	.word	0x43800000

000d62a8 <_ZN15Adafruit_AM23155beginEv>:

Adafruit_AM2315::Adafruit_AM2315() {
}


bool Adafruit_AM2315::begin(void) {
   d62a8:	b510      	push	{r4, lr}
   d62aa:	4604      	mov	r4, r0
  Wire.begin();
   d62ac:	f005 fa3e 	bl	db72c <_Z19__fetch_global_Wirev>
   d62b0:	f004 ffe8 	bl	db284 <_ZN7TwoWire5beginEv>

   // try to read data, as a test
  return readData();
   d62b4:	4620      	mov	r0, r4
}
   d62b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

bool Adafruit_AM2315::begin(void) {
  Wire.begin();

   // try to read data, as a test
  return readData();
   d62ba:	f7ff bf7b 	b.w	d61b4 <_ZN15Adafruit_AM23158readDataEv>

000d62be <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_>:
 * If you want to obtain both temperature and humidity when you sample the sensor, be aware that calling
 * readTemperature() and readHumidity() in rapid succession may swamp the sensor and result in invalid
 * readingings (the AM2315 manual advisess that continuous samples must be at least 2 seconds apart).
 * Calling this method avoids the double I2C request.
 */
bool Adafruit_AM2315::readTemperatureAndHumidity(float &t, float &h) {
   d62be:	b570      	push	{r4, r5, r6, lr}
   d62c0:	4604      	mov	r4, r0
   d62c2:	460e      	mov	r6, r1
   d62c4:	4615      	mov	r5, r2
    if (!readData()) return false;
   d62c6:	f7ff ff75 	bl	d61b4 <_ZN15Adafruit_AM23158readDataEv>
   d62ca:	b118      	cbz	r0, d62d4 <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_+0x16>

    t = temp;
   d62cc:	6863      	ldr	r3, [r4, #4]
   d62ce:	6033      	str	r3, [r6, #0]
    h = humidity;
   d62d0:	6823      	ldr	r3, [r4, #0]
   d62d2:	602b      	str	r3, [r5, #0]

    return true;
}
   d62d4:	bd70      	pop	{r4, r5, r6, pc}

000d62d6 <_GLOBAL__sub_I__ZN15Adafruit_AM2315C2Ev>:
   d62d6:	f002 bf97 	b.w	d9208 <HAL_Pin_Map>

000d62da <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d62da:	f002 bf95 	b.w	d9208 <HAL_Pin_Map>

000d62de <_GLOBAL__sub_I__ZN7istream3getEv>:
   d62de:	f002 bf93 	b.w	d9208 <HAL_Pin_Map>

000d62e2 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d62e2:	b510      	push	{r4, lr}
   d62e4:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d62e6:	3024      	adds	r0, #36	; 0x24
   d62e8:	f001 f8e4 	bl	d74b4 <_ZN8FatCache4syncEv>
   d62ec:	b128      	cbz	r0, d62fa <_ZN9FatVolume9cacheSyncEv+0x18>
   d62ee:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d62f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d62f6:	f001 b8dd 	b.w	d74b4 <_ZN8FatCache4syncEv>
  }
   d62fa:	bd10      	pop	{r4, pc}

000d62fc <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d62fc:	1e41      	subs	r1, r0, #1
   d62fe:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d6302:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6304:	0843      	lsrs	r3, r0, #1
   d6306:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d630a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d630e:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6312:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6314:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6316:	d1f5      	bne.n	d6304 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d6318:	4770      	bx	lr

000d631a <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d631a:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d631c:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d631e:	4604      	mov	r4, r0
   d6320:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d6322:	b923      	cbnz	r3, d632e <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d6324:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d6326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d632a:	f000 bc82 	b.w	d6c32 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d632e:	2224      	movs	r2, #36	; 0x24
   d6330:	2100      	movs	r1, #0
   d6332:	f008 f9b5 	bl	de6a0 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d6336:	2310      	movs	r3, #16
  m_flags = F_READ;
   d6338:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d633a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d633c:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d633e:	68ab      	ldr	r3, [r5, #8]
   d6340:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d6342:	68eb      	ldr	r3, [r5, #12]
   d6344:	6223      	str	r3, [r4, #32]
  return true;
}
   d6346:	bd38      	pop	{r3, r4, r5, pc}

000d6348 <_ZN7FatFile7getNameEPcj>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d6348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d634c:	b08b      	sub	sp, #44	; 0x2c
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d634e:	7803      	ldrb	r3, [r0, #0]
   d6350:	2500      	movs	r5, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d6352:	4680      	mov	r8, r0
   d6354:	460e      	mov	r6, r1
   d6356:	4617      	mov	r7, r2
   d6358:	f88d 5004 	strb.w	r5, [sp, #4]
   d635c:	f88d 5005 	strb.w	r5, [sp, #5]
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d6360:	b163      	cbz	r3, d637c <_ZN7FatFile7getNameEPcj+0x34>
   d6362:	2a0c      	cmp	r2, #12
   d6364:	d90a      	bls.n	d637c <_ZN7FatFile7getNameEPcj+0x34>
   d6366:	e00e      	b.n	d6386 <_ZN7FatFile7getNameEPcj+0x3e>
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
   d6368:	4641      	mov	r1, r8
   d636a:	a801      	add	r0, sp, #4
   d636c:	f7ff ffd5 	bl	d631a <_ZN7FatFile11openClusterEPS_>
   d6370:	b120      	cbz	r0, d637c <_ZN7FatFile7getNameEPcj+0x34>
   d6372:	2401      	movs	r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d6374:	f898 3003 	ldrb.w	r3, [r8, #3]
   d6378:	42a3      	cmp	r3, r4
   d637a:	d20b      	bcs.n	d6394 <_ZN7FatFile7getNameEPcj+0x4c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
   d637c:	f04f 0900 	mov.w	r9, #0
   d6380:	f886 9000 	strb.w	r9, [r6]
  return false;
   d6384:	e055      	b.n	d6432 <_ZN7FatFile7getNameEPcj+0xea>
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6386:	78c3      	ldrb	r3, [r0, #3]
   d6388:	2b00      	cmp	r3, #0
   d638a:	d1ed      	bne.n	d6368 <_ZN7FatFile7getNameEPcj+0x20>
    return getSFN(name);
   d638c:	f000 fbb4 	bl	d6af8 <_ZN7FatFile6getSFNEPc>
   d6390:	4681      	mov	r9, r0
   d6392:	e04e      	b.n	d6432 <_ZN7FatFile7getNameEPcj+0xea>
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6394:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   d6398:	1b09      	subs	r1, r1, r4
   d639a:	0149      	lsls	r1, r1, #5
   d639c:	a801      	add	r0, sp, #4
   d639e:	f000 fd43 	bl	d6e28 <_ZN7FatFile7seekSetEm>
   d63a2:	4681      	mov	r9, r0
   d63a4:	2800      	cmp	r0, #0
   d63a6:	d0e9      	beq.n	d637c <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d63a8:	2100      	movs	r1, #0
   d63aa:	a801      	add	r0, sp, #4
   d63ac:	f000 fd1f 	bl	d6dee <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d63b0:	2800      	cmp	r0, #0
   d63b2:	d0e3      	beq.n	d637c <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   d63b4:	7ac3      	ldrb	r3, [r0, #11]
   d63b6:	2b0f      	cmp	r3, #15
   d63b8:	d1e0      	bne.n	d637c <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ord != (ldir->ord & 0X1F)) {
   d63ba:	7803      	ldrb	r3, [r0, #0]
   d63bc:	f003 031f 	and.w	r3, r3, #31
   d63c0:	429c      	cmp	r4, r3
   d63c2:	d1db      	bne.n	d637c <_ZN7FatFile7getNameEPcj+0x34>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d63c4:	1e63      	subs	r3, r4, #1
   d63c6:	220d      	movs	r2, #13
   d63c8:	435a      	muls	r2, r3
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d63ca:	eb06 0e02 	add.w	lr, r6, r2
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d63ce:	2300      	movs	r3, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d63d0:	2b04      	cmp	r3, #4
   d63d2:	b2d9      	uxtb	r1, r3
   d63d4:	d804      	bhi.n	d63e0 <_ZN7FatFile7getNameEPcj+0x98>
    return ldir->name1[i];
   d63d6:	eb00 0143 	add.w	r1, r0, r3, lsl #1
   d63da:	f8b1 1001 	ldrh.w	r1, [r1, #1]
   d63de:	e00b      	b.n	d63f8 <_ZN7FatFile7getNameEPcj+0xb0>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d63e0:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d63e2:	bf95      	itete	ls
   d63e4:	f103 31ff 	addls.w	r1, r3, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d63e8:	1c59      	addhi	r1, r3, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d63ea:	eb00 0141 	addls.w	r1, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d63ee:	eb00 0141 	addhi.w	r1, r0, r1, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d63f2:	bf94      	ite	ls
   d63f4:	88c9      	ldrhls	r1, [r1, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d63f6:	8889      	ldrhhi	r1, [r1, #4]
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
   d63f8:	b161      	cbz	r1, d6414 <_ZN7FatFile7getNameEPcj+0xcc>
   d63fa:	4297      	cmp	r7, r2
   d63fc:	d910      	bls.n	d6420 <_ZN7FatFile7getNameEPcj+0xd8>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d63fe:	297e      	cmp	r1, #126	; 0x7e
   d6400:	bf94      	ite	ls
   d6402:	b2c9      	uxtbls	r1, r1
   d6404:	213f      	movhi	r1, #63	; 0x3f
   d6406:	f80e 1003 	strb.w	r1, [lr, r3]
   d640a:	3301      	adds	r3, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d640c:	2b0d      	cmp	r3, #13
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d640e:	f102 0201 	add.w	r2, r2, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d6412:	d1dd      	bne.n	d63d0 <_ZN7FatFile7getNameEPcj+0x88>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   d6414:	4297      	cmp	r7, r2
   d6416:	d903      	bls.n	d6420 <_ZN7FatFile7getNameEPcj+0xd8>
   d6418:	7803      	ldrb	r3, [r0, #0]
   d641a:	0659      	lsls	r1, r3, #25
    name[k] = 0;
   d641c:	bf48      	it	mi
   d641e:	54b5      	strbmi	r5, [r6, r2]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
   d6420:	19f3      	adds	r3, r6, r7
   d6422:	f803 5c01 	strb.w	r5, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d6426:	7803      	ldrb	r3, [r0, #0]
   d6428:	065b      	lsls	r3, r3, #25
   d642a:	d402      	bmi.n	d6432 <_ZN7FatFile7getNameEPcj+0xea>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d642c:	3401      	adds	r4, #1
   d642e:	b2e4      	uxtb	r4, r4
   d6430:	e7a0      	b.n	d6374 <_ZN7FatFile7getNameEPcj+0x2c>
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
   d6432:	4648      	mov	r0, r9
   d6434:	b00b      	add	sp, #44	; 0x2c
   d6436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d643c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6440:	7803      	ldrb	r3, [r0, #0]
   d6442:	2b20      	cmp	r3, #32
   d6444:	f100 0401 	add.w	r4, r0, #1
   d6448:	d101      	bne.n	d644e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d644a:	4620      	mov	r0, r4
   d644c:	e7f8      	b.n	d6440 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d644e:	4f70      	ldr	r7, [pc, #448]	; (d6610 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d6450:	6088      	str	r0, [r1, #8]
   d6452:	4605      	mov	r5, r0
   d6454:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d6456:	462e      	mov	r6, r5
   d6458:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d645c:	b30b      	cbz	r3, d64a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d645e:	2b2f      	cmp	r3, #47	; 0x2f
   d6460:	d101      	bne.n	d6466 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d6462:	1903      	adds	r3, r0, r4
   d6464:	e017      	b.n	d6496 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6466:	2b5c      	cmp	r3, #92	; 0x5c
   d6468:	d102      	bne.n	d6470 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d646a:	2000      	movs	r0, #0
   d646c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6470:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d6474:	b2e4      	uxtb	r4, r4
   d6476:	2c1d      	cmp	r4, #29
   d6478:	d803      	bhi.n	d6482 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d647a:	fa27 f404 	lsr.w	r4, r7, r4
   d647e:	07e4      	lsls	r4, r4, #31
   d6480:	d4f3      	bmi.n	d646a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6482:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d6486:	2c3c      	cmp	r4, #60	; 0x3c
   d6488:	d0ef      	beq.n	d646a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d648a:	3b20      	subs	r3, #32
   d648c:	2b5e      	cmp	r3, #94	; 0x5e
   d648e:	d9e1      	bls.n	d6454 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d6490:	e7eb      	b.n	d646a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6492:	2d2f      	cmp	r5, #47	; 0x2f
   d6494:	d105      	bne.n	d64a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6496:	461e      	mov	r6, r3
   d6498:	f813 5b01 	ldrb.w	r5, [r3], #1
   d649c:	2d20      	cmp	r5, #32
   d649e:	d1f8      	bne.n	d6492 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d64a0:	e7f9      	b.n	d6496 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d64a2:	6016      	str	r6, [r2, #0]
   d64a4:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d64a6:	4298      	cmp	r0, r3
   d64a8:	ebc0 0803 	rsb	r8, r0, r3
   d64ac:	d009      	beq.n	d64c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d64ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d64b2:	2a2e      	cmp	r2, #46	; 0x2e
   d64b4:	d0f7      	beq.n	d64a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d64b6:	2a20      	cmp	r2, #32
   d64b8:	d0f5      	beq.n	d64a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d64ba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d64be:	dcd4      	bgt.n	d646a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d64c0:	e001      	b.n	d64c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d64c2:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d64c6:	f8c1 8004 	str.w	r8, [r1, #4]
   d64ca:	f101 030c 	add.w	r3, r1, #12
   d64ce:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d64d2:	2420      	movs	r4, #32
   d64d4:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d64d8:	4293      	cmp	r3, r2
   d64da:	d1fb      	bne.n	d64d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d64dc:	4603      	mov	r3, r0
   d64de:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d64e0:	f813 4b01 	ldrb.w	r4, [r3], #1
   d64e4:	2c2e      	cmp	r4, #46	; 0x2e
   d64e6:	d0fa      	beq.n	d64de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d64e8:	2c20      	cmp	r4, #32
   d64ea:	d0f8      	beq.n	d64de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d64ec:	fab2 f482 	clz	r4, r2
   d64f0:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d64f2:	f108 36ff 	add.w	r6, r8, #4294967295
   d64f6:	1c73      	adds	r3, r6, #1
   d64f8:	d107      	bne.n	d650a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d64fa:	2700      	movs	r7, #0
   d64fc:	f04f 0e07 	mov.w	lr, #7
   d6500:	463d      	mov	r5, r7
   d6502:	46ba      	mov	sl, r7
   d6504:	f04f 0908 	mov.w	r9, #8
   d6508:	e009      	b.n	d651e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d650a:	5d83      	ldrb	r3, [r0, r6]
   d650c:	2b2e      	cmp	r3, #46	; 0x2e
   d650e:	d0f4      	beq.n	d64fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d6510:	3e01      	subs	r6, #1
   d6512:	e7f0      	b.n	d64f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d6514:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d6516:	2b20      	cmp	r3, #32
   d6518:	d104      	bne.n	d6524 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d651a:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d651c:	3201      	adds	r2, #1
   d651e:	4542      	cmp	r2, r8
   d6520:	dbf8      	blt.n	d6514 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d6522:	e04b      	b.n	d65bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d6524:	2b2e      	cmp	r3, #46	; 0x2e
   d6526:	d102      	bne.n	d652e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d6528:	42b2      	cmp	r2, r6
   d652a:	d1f6      	bne.n	d651a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d652c:	e003      	b.n	d6536 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d652e:	2b22      	cmp	r3, #34	; 0x22
   d6530:	d017      	beq.n	d6562 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d6532:	2b7c      	cmp	r3, #124	; 0x7c
   d6534:	d015      	beq.n	d6562 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6536:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d653a:	f1bc 0f05 	cmp.w	ip, #5
   d653e:	d801      	bhi.n	d6544 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6540:	2b2d      	cmp	r3, #45	; 0x2d
   d6542:	d10e      	bne.n	d6562 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d6544:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6548:	f1bc 0f05 	cmp.w	ip, #5
   d654c:	d909      	bls.n	d6562 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d654e:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6552:	f1bc 0f02 	cmp.w	ip, #2
   d6556:	d904      	bls.n	d6562 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d6558:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d655c:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6560:	d902      	bls.n	d6568 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d6562:	42b2      	cmp	r2, r6
   d6564:	d10e      	bne.n	d6584 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d6566:	e049      	b.n	d65fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6568:	42b2      	cmp	r2, r6
   d656a:	d047      	beq.n	d65fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d656c:	4575      	cmp	r5, lr
   d656e:	d821      	bhi.n	d65b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d6570:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6574:	f1bc 0f19 	cmp.w	ip, #25
   d6578:	d808      	bhi.n	d658c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d657a:	3b20      	subs	r3, #32
   d657c:	b2db      	uxtb	r3, r3
        lc |= bit;
   d657e:	ea49 0707 	orr.w	r7, r9, r7
   d6582:	e00a      	b.n	d659a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6584:	4575      	cmp	r5, lr
   d6586:	d815      	bhi.n	d65b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d6588:	2400      	movs	r4, #0
      c = '_';
   d658a:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d658c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6590:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6594:	bf98      	it	ls
   d6596:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d659a:	f105 0c01 	add.w	ip, r5, #1
   d659e:	fa5f fc8c 	uxtb.w	ip, ip
   d65a2:	440d      	add	r5, r1
      if (i < 7) {
   d65a4:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d65a8:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d65aa:	d801      	bhi.n	d65b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d65ac:	f881 c00c 	strb.w	ip, [r1, #12]
   d65b0:	4665      	mov	r5, ip
   d65b2:	e7b3      	b.n	d651c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d65b4:	f1be 0f0a 	cmp.w	lr, #10
   d65b8:	d117      	bne.n	d65ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d65ba:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d65bc:	7b4b      	ldrb	r3, [r1, #13]
   d65be:	2b20      	cmp	r3, #32
   d65c0:	f43f af53 	beq.w	d646a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d65c4:	b13c      	cbz	r4, d65d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d65c6:	ea1a 0f07 	tst.w	sl, r7
   d65ca:	bf18      	it	ne
   d65cc:	2702      	movne	r7, #2
   d65ce:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d65d0:	2001      	movs	r0, #1
   d65d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d65d6:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d65d8:	2001      	movs	r0, #1
   d65da:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d65dc:	4419      	add	r1, r3
   d65de:	237e      	movs	r3, #126	; 0x7e
   d65e0:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d65e2:	2331      	movs	r3, #49	; 0x31
   d65e4:	738b      	strb	r3, [r1, #14]
   d65e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d65ea:	42b2      	cmp	r2, r6
   d65ec:	dce5      	bgt.n	d65ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d65ee:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d65f0:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d65f4:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d65f6:	f04f 0910 	mov.w	r9, #16
   d65fa:	e78e      	b.n	d651a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d65fc:	f1be 0f0a 	cmp.w	lr, #10
   d6600:	d0db      	beq.n	d65ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d6602:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6604:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6608:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d660a:	f04f 0910 	mov.w	r9, #16
   d660e:	e785      	b.n	d651c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d6610:	31000101 	.word	0x31000101

000d6614 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6614:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6616:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6618:	2300      	movs	r3, #0
   d661a:	f88d 3004 	strb.w	r3, [sp, #4]
   d661e:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6622:	7803      	ldrb	r3, [r0, #0]
   d6624:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6626:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6628:	d508      	bpl.n	d663c <_ZN7FatFile6removeEv+0x28>
   d662a:	7883      	ldrb	r3, [r0, #2]
   d662c:	079a      	lsls	r2, r3, #30
   d662e:	d505      	bpl.n	d663c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d6630:	6a01      	ldr	r1, [r0, #32]
   d6632:	b129      	cbz	r1, d6640 <_ZN7FatFile6removeEv+0x2c>
   d6634:	68a0      	ldr	r0, [r4, #8]
   d6636:	f001 f82e 	bl	d7696 <_ZN9FatVolume9freeChainEm>
   d663a:	b908      	cbnz	r0, d6640 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d663c:	2000      	movs	r0, #0
   d663e:	e049      	b.n	d66d4 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6640:	2101      	movs	r1, #1
   d6642:	4620      	mov	r0, r4
   d6644:	f000 fabc 	bl	d6bc0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6648:	4605      	mov	r5, r0
   d664a:	2800      	cmp	r0, #0
   d664c:	d0f6      	beq.n	d663c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d664e:	f7ff fe55 	bl	d62fc <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d6652:	26e5      	movs	r6, #229	; 0xe5
   d6654:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6656:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6658:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d665a:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d665c:	68a0      	ldr	r0, [r4, #8]
   d665e:	f7ff fe40 	bl	d62e2 <_ZN9FatVolume9cacheSyncEv>
   d6662:	2800      	cmp	r0, #0
   d6664:	d0ea      	beq.n	d663c <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6666:	78e3      	ldrb	r3, [r4, #3]
   d6668:	2b00      	cmp	r3, #0
   d666a:	d033      	beq.n	d66d4 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d666c:	4621      	mov	r1, r4
   d666e:	a801      	add	r0, sp, #4
   d6670:	f7ff fe53 	bl	d631a <_ZN7FatFile11openClusterEPS_>
   d6674:	2800      	cmp	r0, #0
   d6676:	d0e1      	beq.n	d663c <_ZN7FatFile6removeEv+0x28>
   d6678:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d667a:	78e3      	ldrb	r3, [r4, #3]
   d667c:	42ab      	cmp	r3, r5
   d667e:	d3dd      	bcc.n	d663c <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6680:	88a1      	ldrh	r1, [r4, #4]
   d6682:	1b49      	subs	r1, r1, r5
   d6684:	0149      	lsls	r1, r1, #5
   d6686:	a801      	add	r0, sp, #4
   d6688:	f000 fbce 	bl	d6e28 <_ZN7FatFile7seekSetEm>
   d668c:	2800      	cmp	r0, #0
   d668e:	d0d5      	beq.n	d663c <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6690:	2100      	movs	r1, #0
   d6692:	a801      	add	r0, sp, #4
   d6694:	f000 fbab 	bl	d6dee <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6698:	2800      	cmp	r0, #0
   d669a:	d0cf      	beq.n	d663c <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d669c:	7ac3      	ldrb	r3, [r0, #11]
   d669e:	2b0f      	cmp	r3, #15
   d66a0:	d1cc      	bne.n	d663c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d66a2:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d66a4:	f002 031f 	and.w	r3, r2, #31
   d66a8:	429d      	cmp	r5, r3
   d66aa:	d1c7      	bne.n	d663c <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d66ac:	7b43      	ldrb	r3, [r0, #13]
   d66ae:	42bb      	cmp	r3, r7
   d66b0:	d1c4      	bne.n	d663c <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d66b2:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d66b4:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d66b6:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d66ba:	f043 0301 	orr.w	r3, r3, #1
   d66be:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d66c2:	0653      	lsls	r3, r2, #25
   d66c4:	d503      	bpl.n	d66ce <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d66c6:	68a0      	ldr	r0, [r4, #8]
   d66c8:	f7ff fe0b 	bl	d62e2 <_ZN9FatVolume9cacheSyncEv>
   d66cc:	e002      	b.n	d66d4 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d66ce:	3501      	adds	r5, #1
   d66d0:	b2ed      	uxtb	r5, r5
   d66d2:	e7d2      	b.n	d667a <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d66d4:	b00b      	add	sp, #44	; 0x2c
   d66d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d66d8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d66d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d66dc:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d66e0:	4606      	mov	r6, r0
   d66e2:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d66e4:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d66e6:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d66e8:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d66ec:	6869      	ldr	r1, [r5, #4]
   d66ee:	68aa      	ldr	r2, [r5, #8]
   d66f0:	1863      	adds	r3, r4, r1
   d66f2:	b29b      	uxth	r3, r3
   d66f4:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d66f6:	4291      	cmp	r1, r2
   d66f8:	d006      	beq.n	d6708 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d66fa:	f812 0b01 	ldrb.w	r0, [r2], #1
   d66fe:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6702:	4043      	eors	r3, r0
   d6704:	b29b      	uxth	r3, r3
   d6706:	e7f6      	b.n	d66f6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d6708:	f1b9 0f03 	cmp.w	r9, #3
   d670c:	bf28      	it	cs
   d670e:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6712:	f109 0204 	add.w	r2, r9, #4
   d6716:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6718:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d671c:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d671e:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6720:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6722:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6724:	bf94      	ite	ls
   d6726:	3130      	addls	r1, #48	; 0x30
   d6728:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d672a:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d672c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d672e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6732:	d3f1      	bcc.n	d6718 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6734:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d6738:	2100      	movs	r1, #0
   d673a:	735f      	strb	r7, [r3, #13]
   d673c:	4630      	mov	r0, r6
   d673e:	f000 fb73 	bl	d6e28 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d6742:	2101      	movs	r1, #1
   d6744:	4630      	mov	r0, r6
   d6746:	f000 fb52 	bl	d6dee <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d674a:	4601      	mov	r1, r0
   d674c:	b928      	cbnz	r0, d675a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d674e:	7870      	ldrb	r0, [r6, #1]
   d6750:	fab0 f080 	clz	r0, r0
   d6754:	0940      	lsrs	r0, r0, #5
   d6756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d675a:	7803      	ldrb	r3, [r0, #0]
   d675c:	b14b      	cbz	r3, d6772 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d675e:	7ac3      	ldrb	r3, [r0, #11]
   d6760:	071b      	lsls	r3, r3, #28
   d6762:	d4ee      	bmi.n	d6742 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6764:	220b      	movs	r2, #11
   d6766:	4640      	mov	r0, r8
   d6768:	f007 ff80 	bl	de66c <memcmp>
   d676c:	2800      	cmp	r0, #0
   d676e:	d1e8      	bne.n	d6742 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6770:	e002      	b.n	d6778 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d6772:	2001      	movs	r0, #1
   d6774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6778:	3401      	adds	r4, #1
   d677a:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d677c:	2c64      	cmp	r4, #100	; 0x64
   d677e:	d1b5      	bne.n	d66ec <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d6780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6784 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6788:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d678a:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d678c:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d678e:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6792:	9005      	str	r0, [sp, #20]
   d6794:	460e      	mov	r6, r1
   d6796:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6798:	d101      	bne.n	d679e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d679a:	2000      	movs	r0, #0
   d679c:	e1a0      	b.n	d6ae0 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d679e:	9b05      	ldr	r3, [sp, #20]
   d67a0:	781b      	ldrb	r3, [r3, #0]
   d67a2:	2b00      	cmp	r3, #0
   d67a4:	d1f9      	bne.n	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d67a6:	6853      	ldr	r3, [r2, #4]
   d67a8:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d67aa:	7813      	ldrb	r3, [r2, #0]
   d67ac:	079b      	lsls	r3, r3, #30
   d67ae:	f000 818d 	beq.w	d6acc <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d67b2:	9b02      	ldr	r3, [sp, #8]
   d67b4:	270d      	movs	r7, #13
   d67b6:	330c      	adds	r3, #12
   d67b8:	fbb3 f7f7 	udiv	r7, r3, r7
   d67bc:	3701      	adds	r7, #1
   d67be:	b2ff      	uxtb	r7, r7
   d67c0:	2100      	movs	r1, #0
   d67c2:	4630      	mov	r0, r6
   d67c4:	f000 fb30 	bl	d6e28 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d67c8:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d67cc:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d67d0:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d67d4:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d67d6:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d67d8:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d67da:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d67de:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d67e0:	6972      	ldr	r2, [r6, #20]
   d67e2:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d67e4:	2101      	movs	r1, #1
   d67e6:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d67e8:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d67ec:	f000 faff 	bl	d6dee <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d67f0:	9b07      	ldr	r3, [sp, #28]
   d67f2:	b920      	cbnz	r0, d67fe <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d67f4:	7873      	ldrb	r3, [r6, #1]
   d67f6:	2b00      	cmp	r3, #0
   d67f8:	f000 8090 	beq.w	d691c <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d67fc:	e7cd      	b.n	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d67fe:	7802      	ldrb	r2, [r0, #0]
   d6800:	2ae5      	cmp	r2, #229	; 0xe5
   d6802:	d000      	beq.n	d6806 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d6804:	b942      	cbnz	r2, d6818 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d6806:	2c00      	cmp	r4, #0
   d6808:	bf08      	it	eq
   d680a:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d680c:	42bc      	cmp	r4, r7
        freeFound++;
   d680e:	bf3c      	itt	cc
   d6810:	3401      	addcc	r4, #1
   d6812:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6814:	b922      	cbnz	r2, d6820 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d6816:	e081      	b.n	d691c <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d6818:	42bc      	cmp	r4, r7
   d681a:	bf38      	it	cc
   d681c:	2400      	movcc	r4, #0
   d681e:	e003      	b.n	d6828 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6820:	2ae5      	cmp	r2, #229	; 0xe5
   d6822:	d101      	bne.n	d6828 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d6824:	2500      	movs	r5, #0
   d6826:	e7db      	b.n	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6828:	2a2e      	cmp	r2, #46	; 0x2e
   d682a:	d0fb      	beq.n	d6824 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d682c:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d682e:	290f      	cmp	r1, #15
   d6830:	d152      	bne.n	d68d8 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d6832:	b93d      	cbnz	r5, d6844 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6834:	0651      	lsls	r1, r2, #25
   d6836:	d5d3      	bpl.n	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d6838:	7b43      	ldrb	r3, [r0, #13]
   d683a:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d683c:	f002 051f 	and.w	r5, r2, #31
   d6840:	462b      	mov	r3, r5
   d6842:	e007      	b.n	d6854 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6844:	3b01      	subs	r3, #1
   d6846:	b2db      	uxtb	r3, r3
   d6848:	429a      	cmp	r2, r3
   d684a:	d1eb      	bne.n	d6824 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d684c:	7b42      	ldrb	r2, [r0, #13]
   d684e:	9903      	ldr	r1, [sp, #12]
   d6850:	4291      	cmp	r1, r2
   d6852:	d1e7      	bne.n	d6824 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6854:	1e5a      	subs	r2, r3, #1
   d6856:	f04f 0c0d 	mov.w	ip, #13
   d685a:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d685e:	9a02      	ldr	r2, [sp, #8]
   d6860:	4562      	cmp	r2, ip
   d6862:	d9df      	bls.n	d6824 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6864:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6868:	f1be 0f04 	cmp.w	lr, #4
   d686c:	fa5f f28e 	uxtb.w	r2, lr
   d6870:	d804      	bhi.n	d687c <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d6872:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6876:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d687a:	e00c      	b.n	d6896 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d687c:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d687e:	bf95      	itete	ls
   d6880:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6884:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6888:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d688c:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6890:	bf94      	ite	ls
   d6892:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6894:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d6896:	9902      	ldr	r1, [sp, #8]
   d6898:	4561      	cmp	r1, ip
   d689a:	d103      	bne.n	d68a4 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d689c:	2a00      	cmp	r2, #0
   d689e:	bf18      	it	ne
   d68a0:	2500      	movne	r5, #0
   d68a2:	e79d      	b.n	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d68a4:	2aff      	cmp	r2, #255	; 0xff
   d68a6:	d8bd      	bhi.n	d6824 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d68a8:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d68aa:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d68ae:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d68b0:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d68b4:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d68b8:	bf98      	it	ls
   d68ba:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d68bc:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d68c0:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d68c4:	bf98      	it	ls
   d68c6:	b2d2      	uxtbls	r2, r2
   d68c8:	f1bc 0f19 	cmp.w	ip, #25
   d68cc:	bf9c      	itt	ls
   d68ce:	3120      	addls	r1, #32
   d68d0:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d68d2:	4291      	cmp	r1, r2
   d68d4:	d1a6      	bne.n	d6824 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d68d6:	e0fb      	b.n	d6ad0 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d68d8:	0709      	lsls	r1, r1, #28
   d68da:	d4a3      	bmi.n	d6824 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d68dc:	b14d      	cbz	r5, d68f2 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d68de:	2b01      	cmp	r3, #1
   d68e0:	f47f af5b 	bne.w	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d68e4:	f7ff fd0a 	bl	d62fc <_ZN7FatFile11lfnChecksumEPh>
   d68e8:	9b03      	ldr	r3, [sp, #12]
   d68ea:	4283      	cmp	r3, r0
   d68ec:	f47f af55 	bne.w	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d68f0:	e00f      	b.n	d6912 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d68f2:	220b      	movs	r2, #11
   d68f4:	9906      	ldr	r1, [sp, #24]
   d68f6:	9307      	str	r3, [sp, #28]
   d68f8:	f007 feb8 	bl	de66c <memcmp>
   d68fc:	9b07      	ldr	r3, [sp, #28]
   d68fe:	2800      	cmp	r0, #0
   d6900:	f47f af6e 	bne.w	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6904:	f899 2000 	ldrb.w	r2, [r9]
   d6908:	07d2      	lsls	r2, r2, #31
   d690a:	d502      	bpl.n	d6912 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d690c:	2201      	movs	r2, #1
   d690e:	9204      	str	r2, [sp, #16]
   d6910:	e766      	b.n	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d6912:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d6916:	f000 80d1 	beq.w	d6abc <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d691a:	e73e      	b.n	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d691c:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d6920:	f43f af3b 	beq.w	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6924:	f00b 0303 	and.w	r3, fp, #3
   d6928:	3b01      	subs	r3, #1
   d692a:	2b01      	cmp	r3, #1
   d692c:	f63f af35 	bhi.w	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d6930:	2c00      	cmp	r4, #0
   d6932:	bf08      	it	eq
   d6934:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6936:	42bc      	cmp	r4, r7
   d6938:	d302      	bcc.n	d6940 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d693a:	9b04      	ldr	r3, [sp, #16]
   d693c:	b9cb      	cbnz	r3, d6972 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d693e:	e01f      	b.n	d6980 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d6940:	2100      	movs	r1, #0
   d6942:	4630      	mov	r0, r6
   d6944:	f000 fa53 	bl	d6dee <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6948:	b910      	cbnz	r0, d6950 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d694a:	7873      	ldrb	r3, [r6, #1]
   d694c:	b15b      	cbz	r3, d6966 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d694e:	e724      	b.n	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d6950:	3401      	adds	r4, #1
   d6952:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6954:	e7ef      	b.n	d6936 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d6956:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6958:	791b      	ldrb	r3, [r3, #4]
   d695a:	2b01      	cmp	r3, #1
   d695c:	d8ed      	bhi.n	d693a <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d695e:	3410      	adds	r4, #16
   d6960:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d6962:	42a7      	cmp	r7, r4
   d6964:	d9e9      	bls.n	d693a <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6966:	4630      	mov	r0, r6
   d6968:	f000 f8ea 	bl	d6b40 <_ZN7FatFile13addDirClusterEv>
   d696c:	2800      	cmp	r0, #0
   d696e:	d1f2      	bne.n	d6956 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d6970:	e713      	b.n	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d6972:	4649      	mov	r1, r9
   d6974:	4630      	mov	r0, r6
   d6976:	f7ff feaf 	bl	d66d8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d697a:	2800      	cmp	r0, #0
   d697c:	f43f af0d 	beq.w	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6980:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6984:	4630      	mov	r0, r6
   d6986:	f000 fa4f 	bl	d6e28 <_ZN7FatFile7seekSetEm>
   d698a:	2800      	cmp	r0, #0
   d698c:	f43f af05 	beq.w	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d6990:	1e7d      	subs	r5, r7, #1
   d6992:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6994:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6996:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d699a:	f04f 080f 	mov.w	r8, #15
   d699e:	e041      	b.n	d6a24 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d69a0:	2100      	movs	r1, #0
   d69a2:	4630      	mov	r0, r6
   d69a4:	f000 fa23 	bl	d6dee <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d69a8:	4607      	mov	r7, r0
   d69aa:	2800      	cmp	r0, #0
   d69ac:	f43f aef5 	beq.w	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d69b0:	68b2      	ldr	r2, [r6, #8]
   d69b2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d69b6:	42ac      	cmp	r4, r5
   d69b8:	f043 0301 	orr.w	r3, r3, #1
   d69bc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d69c0:	bf0c      	ite	eq
   d69c2:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d69c6:	4622      	movne	r2, r4
   d69c8:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d69ca:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d69ce:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d69d2:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d69d6:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d69d8:	f7ff fc90 	bl	d62fc <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d69dc:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d69de:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d69e0:	f887 a01a 	strb.w	sl, [r7, #26]
   d69e4:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d69e8:	f002 021f 	and.w	r2, r2, #31
   d69ec:	230d      	movs	r3, #13
   d69ee:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d69f0:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d69f4:	435a      	muls	r2, r3
   d69f6:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d69f8:	9902      	ldr	r1, [sp, #8]
   d69fa:	4291      	cmp	r1, r2
   d69fc:	d915      	bls.n	d6a2a <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d69fe:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d6a02:	2b04      	cmp	r3, #4
   d6a04:	fa5f fc83 	uxtb.w	ip, r3
   d6a08:	f103 0001 	add.w	r0, r3, #1
   d6a0c:	d813      	bhi.n	d6a36 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d6a0e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d6a12:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6a16:	280d      	cmp	r0, #13
   d6a18:	f102 0201 	add.w	r2, r2, #1
   d6a1c:	4603      	mov	r3, r0
   d6a1e:	d1eb      	bne.n	d69f8 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6a20:	3c01      	subs	r4, #1
   d6a22:	b2e4      	uxtb	r4, r4
   d6a24:	2c00      	cmp	r4, #0
   d6a26:	d1bb      	bne.n	d69a0 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d6a28:	e00e      	b.n	d6a48 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6a2a:	bf14      	ite	ne
   d6a2c:	f04f 31ff 	movne.w	r1, #4294967295
   d6a30:	2100      	moveq	r1, #0
   d6a32:	b289      	uxth	r1, r1
   d6a34:	e7e5      	b.n	d6a02 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6a36:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6a3a:	bf94      	ite	ls
   d6a3c:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d6a40:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6a44:	8099      	strh	r1, [r3, #4]
   d6a46:	e7e6      	b.n	d6a16 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6a48:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d6a4a:	4621      	mov	r1, r4
   d6a4c:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6a4e:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d6a52:	f000 f9cc 	bl	d6dee <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6a56:	4607      	mov	r7, r0
   d6a58:	2800      	cmp	r0, #0
   d6a5a:	f43f ae9e 	beq.w	d679a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d6a5e:	2220      	movs	r2, #32
   d6a60:	4621      	mov	r1, r4
   d6a62:	f007 fe1d 	bl	de6a0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6a66:	464b      	mov	r3, r9
   d6a68:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6a6c:	603a      	str	r2, [r7, #0]
   d6a6e:	685a      	ldr	r2, [r3, #4]
   d6a70:	607a      	str	r2, [r7, #4]
   d6a72:	891a      	ldrh	r2, [r3, #8]
   d6a74:	813a      	strh	r2, [r7, #8]
   d6a76:	7a9b      	ldrb	r3, [r3, #10]
   d6a78:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6a7a:	f899 3000 	ldrb.w	r3, [r9]
   d6a7e:	f003 0318 	and.w	r3, r3, #24
   d6a82:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6a84:	4b18      	ldr	r3, [pc, #96]	; (d6ae8 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d6a86:	681b      	ldr	r3, [r3, #0]
   d6a88:	b12b      	cbz	r3, d6a96 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6a8a:	f107 010e 	add.w	r1, r7, #14
   d6a8e:	f107 0010 	add.w	r0, r7, #16
   d6a92:	4798      	blx	r3
   d6a94:	e006      	b.n	d6aa4 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d6a96:	2321      	movs	r3, #33	; 0x21
   d6a98:	743b      	strb	r3, [r7, #16]
   d6a9a:	2328      	movs	r3, #40	; 0x28
   d6a9c:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6a9e:	2308      	movs	r3, #8
   d6aa0:	73bc      	strb	r4, [r7, #14]
   d6aa2:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d6aa4:	8a3b      	ldrh	r3, [r7, #16]
   d6aa6:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d6aa8:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d6aaa:	89fb      	ldrh	r3, [r7, #14]
   d6aac:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d6aae:	68b2      	ldr	r2, [r6, #8]
   d6ab0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6ab4:	f043 0301 	orr.w	r3, r3, #1
   d6ab8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6abc:	9500      	str	r5, [sp, #0]
   d6abe:	465b      	mov	r3, fp
   d6ac0:	4652      	mov	r2, sl
   d6ac2:	4631      	mov	r1, r6
   d6ac4:	9805      	ldr	r0, [sp, #20]
   d6ac6:	f000 f9f8 	bl	d6eba <_ZN7FatFile15openCachedEntryEPS_tih>
   d6aca:	e009      	b.n	d6ae0 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6acc:	2701      	movs	r7, #1
   d6ace:	e677      	b.n	d67c0 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d6ad0:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d6ad4:	f1be 0f0d 	cmp.w	lr, #13
   d6ad8:	f43f ae82 	beq.w	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6adc:	46d4      	mov	ip, sl
   d6ade:	e6c3      	b.n	d6868 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d6ae0:	b009      	add	sp, #36	; 0x24
   d6ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ae6:	bf00      	nop
   d6ae8:	2003e1bc 	.word	0x2003e1bc

000d6aec <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d6aec:	f002 bb8c 	b.w	d9208 <HAL_Pin_Map>

000d6af0 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d6af0:	f002 bb8a 	b.w	d9208 <HAL_Pin_Map>

000d6af4 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d6af4:	f002 bb88 	b.w	d9208 <HAL_Pin_Map>

000d6af8 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d6af8:	b510      	push	{r4, lr}
   d6afa:	460c      	mov	r4, r1
   d6afc:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d6afe:	b909      	cbnz	r1, d6b04 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d6b00:	2000      	movs	r0, #0
   d6b02:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d6b04:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d6b08:	d004      	beq.n	d6b14 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d6b0a:	232f      	movs	r3, #47	; 0x2f
   d6b0c:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d6b0e:	2300      	movs	r3, #0
   d6b10:	7063      	strb	r3, [r4, #1]
   d6b12:	e006      	b.n	d6b22 <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d6b14:	f000 f854 	bl	d6bc0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6b18:	2800      	cmp	r0, #0
   d6b1a:	d0f1      	beq.n	d6b00 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d6b1c:	4621      	mov	r1, r4
   d6b1e:	f000 f85e 	bl	d6bde <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d6b22:	2001      	movs	r0, #1

fail:
  return false;
}
   d6b24:	bd10      	pop	{r4, pc}

000d6b26 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d6b26:	f002 bb6f 	b.w	d9208 <HAL_Pin_Map>

000d6b2a <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6b2a:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6b2c:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6b2e:	f043 0304 	orr.w	r3, r3, #4
   d6b32:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6b34:	f100 0210 	add.w	r2, r0, #16
   d6b38:	6880      	ldr	r0, [r0, #8]
   d6b3a:	f000 bd71 	b.w	d7620 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d6b40 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6b44:	7803      	ldrb	r3, [r0, #0]
   d6b46:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6b4a:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6b4c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d6b50:	b10b      	cbz	r3, d6b56 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d6b52:	2600      	movs	r6, #0
   d6b54:	e02e      	b.n	d6bb4 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d6b56:	6942      	ldr	r2, [r0, #20]
   d6b58:	4b18      	ldr	r3, [pc, #96]	; (d6bbc <_ZN7FatFile13addDirClusterEv+0x7c>)
   d6b5a:	429a      	cmp	r2, r3
   d6b5c:	d8f9      	bhi.n	d6b52 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d6b5e:	f7ff ffe4 	bl	d6b2a <_ZN7FatFile10addClusterEv>
   d6b62:	4606      	mov	r6, r0
   d6b64:	2800      	cmp	r0, #0
   d6b66:	d0f4      	beq.n	d6b52 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6b68:	6921      	ldr	r1, [r4, #16]
   d6b6a:	68a0      	ldr	r0, [r4, #8]
   d6b6c:	f000 fced 	bl	d754a <_ZNK9FatVolume17clusterFirstBlockEm>
   d6b70:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6b72:	68a0      	ldr	r0, [r4, #8]
   d6b74:	2205      	movs	r2, #5
   d6b76:	4639      	mov	r1, r7
   d6b78:	3024      	adds	r0, #36	; 0x24
   d6b7a:	f000 fcc2 	bl	d7502 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d6b7e:	4680      	mov	r8, r0
   d6b80:	2800      	cmp	r0, #0
   d6b82:	d0e6      	beq.n	d6b52 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d6b84:	4629      	mov	r1, r5
   d6b86:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6b8a:	f007 fd89 	bl	de6a0 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6b8e:	2501      	movs	r5, #1
   d6b90:	68a3      	ldr	r3, [r4, #8]
   d6b92:	791a      	ldrb	r2, [r3, #4]
   d6b94:	42aa      	cmp	r2, r5
   d6b96:	d909      	bls.n	d6bac <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6b98:	4642      	mov	r2, r8
   d6b9a:	19e9      	adds	r1, r5, r7
   d6b9c:	6818      	ldr	r0, [r3, #0]
   d6b9e:	f001 f82d 	bl	d7bfc <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6ba2:	2800      	cmp	r0, #0
   d6ba4:	d0d5      	beq.n	d6b52 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6ba6:	3501      	adds	r5, #1
   d6ba8:	b2ed      	uxtb	r5, r5
   d6baa:	e7f1      	b.n	d6b90 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d6bac:	6963      	ldr	r3, [r4, #20]
   d6bae:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d6bb2:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d6bb4:	4630      	mov	r0, r6
   d6bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6bba:	bf00      	nop
   d6bbc:	001ffdff 	.word	0x001ffdff

000d6bc0 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d6bc0:	b510      	push	{r4, lr}
   d6bc2:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6bc4:	6880      	ldr	r0, [r0, #8]
   d6bc6:	460a      	mov	r2, r1
   d6bc8:	3024      	adds	r0, #36	; 0x24
   d6bca:	69a1      	ldr	r1, [r4, #24]
   d6bcc:	f000 fc99 	bl	d7502 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d6bd0:	b120      	cbz	r0, d6bdc <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d6bd2:	88a3      	ldrh	r3, [r4, #4]
   d6bd4:	f003 030f 	and.w	r3, r3, #15
   d6bd8:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d6bdc:	bd10      	pop	{r4, pc}

000d6bde <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d6bde:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6be0:	2400      	movs	r4, #0
   d6be2:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d6be4:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d6be6:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6be8:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d6bea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6bee:	2a20      	cmp	r2, #32
   d6bf0:	d018      	beq.n	d6c24 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d6bf2:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6bf4:	bf02      	ittt	eq
   d6bf6:	54cf      	strbeq	r7, [r1, r3]
   d6bf8:	1c5a      	addeq	r2, r3, #1
   d6bfa:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d6bfc:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6bfe:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d6c02:	bf08      	it	eq
   d6c04:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6c06:	f1be 0f19 	cmp.w	lr, #25
   d6c0a:	d806      	bhi.n	d6c1a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d6c0c:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d6c10:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d6c14:	bf1c      	itt	ne
   d6c16:	3220      	addne	r2, #32
   d6c18:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d6c1a:	f103 0e01 	add.w	lr, r3, #1
   d6c1e:	54ca      	strb	r2, [r1, r3]
   d6c20:	fa5f f38e 	uxtb.w	r3, lr
   d6c24:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d6c26:	2c0b      	cmp	r4, #11
   d6c28:	d1df      	bne.n	d6bea <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d6c2a:	2200      	movs	r2, #0
   d6c2c:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d6c2e:	4618      	mov	r0, r3
   d6c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c32 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6c32:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d6c34:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6c36:	4605      	mov	r5, r0
   d6c38:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d6c3a:	b984      	cbnz	r4, d6c5e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d6c3c:	2224      	movs	r2, #36	; 0x24
   d6c3e:	4621      	mov	r1, r4
   d6c40:	f007 fd2e 	bl	de6a0 <memset>

  m_vol = vol;
   d6c44:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d6c46:	79f3      	ldrb	r3, [r6, #7]
   d6c48:	2b10      	cmp	r3, #16
   d6c4a:	d003      	beq.n	d6c54 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d6c4c:	2b20      	cmp	r3, #32
   d6c4e:	d106      	bne.n	d6c5e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6c50:	2340      	movs	r3, #64	; 0x40
   d6c52:	e000      	b.n	d6c56 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d6c54:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6c56:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6c58:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6c5a:	70a8      	strb	r0, [r5, #2]
   d6c5c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d6c5e:	2000      	movs	r0, #0
   d6c60:	bd70      	pop	{r4, r5, r6, pc}

000d6c62 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d6c62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c66:	7803      	ldrb	r3, [r0, #0]
   d6c68:	4604      	mov	r4, r0
   d6c6a:	4689      	mov	r9, r1
   d6c6c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d6c6e:	b14b      	cbz	r3, d6c84 <_ZN7FatFile4readEPvj+0x22>
   d6c70:	7882      	ldrb	r2, [r0, #2]
   d6c72:	07d1      	lsls	r1, r2, #31
   d6c74:	d506      	bpl.n	d6c84 <_ZN7FatFile4readEPvj+0x22>
   d6c76:	e00c      	b.n	d6c92 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6c78:	465a      	mov	r2, fp
   d6c7a:	6921      	ldr	r1, [r4, #16]
   d6c7c:	f000 fc6b 	bl	d7556 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d6c80:	2800      	cmp	r0, #0
   d6c82:	da3d      	bge.n	d6d00 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d6c84:	7863      	ldrb	r3, [r4, #1]
   d6c86:	f043 0302 	orr.w	r3, r3, #2
   d6c8a:	7063      	strb	r3, [r4, #1]
  return -1;
   d6c8c:	f04f 30ff 	mov.w	r0, #4294967295
   d6c90:	e097      	b.n	d6dc2 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d6c92:	071a      	lsls	r2, r3, #28
   d6c94:	d503      	bpl.n	d6c9e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d6c96:	69e3      	ldr	r3, [r4, #28]
   d6c98:	6962      	ldr	r2, [r4, #20]
   d6c9a:	1a9b      	subs	r3, r3, r2
   d6c9c:	e007      	b.n	d6cae <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d6c9e:	069a      	lsls	r2, r3, #26
   d6ca0:	d508      	bpl.n	d6cb4 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6ca2:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d6ca4:	891a      	ldrh	r2, [r3, #8]
   d6ca6:	6963      	ldr	r3, [r4, #20]
   d6ca8:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d6cac:	b29b      	uxth	r3, r3
   d6cae:	429d      	cmp	r5, r3
   d6cb0:	bf28      	it	cs
   d6cb2:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d6cb4:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d6cb6:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6cba:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6cbe:	2e00      	cmp	r6, #0
   d6cc0:	d035      	beq.n	d6d2e <_ZN7FatFile4readEPvj+0xcc>
   d6cc2:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6cc4:	6963      	ldr	r3, [r4, #20]
   d6cc6:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d6cc8:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6ccc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d6cd0:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d6cd4:	d002      	beq.n	d6cdc <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d6cd6:	6a03      	ldr	r3, [r0, #32]
   d6cd8:	4419      	add	r1, r3
   d6cda:	e01d      	b.n	d6d18 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6cdc:	f890 8005 	ldrb.w	r8, [r0, #5]
   d6ce0:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d6ce4:	f1ba 0f00 	cmp.w	sl, #0
   d6ce8:	d110      	bne.n	d6d0c <_ZN7FatFile4readEPvj+0xaa>
   d6cea:	f1b8 0f00 	cmp.w	r8, #0
   d6cee:	d10d      	bne.n	d6d0c <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d6cf0:	2b00      	cmp	r3, #0
   d6cf2:	d1c1      	bne.n	d6c78 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6cf4:	0653      	lsls	r3, r2, #25
   d6cf6:	bf4c      	ite	mi
   d6cf8:	6a03      	ldrmi	r3, [r0, #32]
   d6cfa:	6a23      	ldrpl	r3, [r4, #32]
   d6cfc:	6123      	str	r3, [r4, #16]
   d6cfe:	e005      	b.n	d6d0c <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d6d00:	d104      	bne.n	d6d0c <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d6d02:	7823      	ldrb	r3, [r4, #0]
   d6d04:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6d08:	d111      	bne.n	d6d2e <_ZN7FatFile4readEPvj+0xcc>
   d6d0a:	e7bb      	b.n	d6c84 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6d0c:	6921      	ldr	r1, [r4, #16]
   d6d0e:	68a0      	ldr	r0, [r4, #8]
   d6d10:	f000 fc1b 	bl	d754a <_ZNK9FatVolume17clusterFirstBlockEm>
   d6d14:	eb08 0100 	add.w	r1, r8, r0
   d6d18:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6d1a:	f1ba 0f00 	cmp.w	sl, #0
   d6d1e:	d135      	bne.n	d6d8c <_ZN7FatFile4readEPvj+0x12a>
   d6d20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6d24:	d332      	bcc.n	d6d8c <_ZN7FatFile4readEPvj+0x12a>
   d6d26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6d28:	4299      	cmp	r1, r3
   d6d2a:	d102      	bne.n	d6d32 <_ZN7FatFile4readEPvj+0xd0>
   d6d2c:	e02e      	b.n	d6d8c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d6d2e:	1ba8      	subs	r0, r5, r6
   d6d30:	e047      	b.n	d6dc2 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d6d32:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6d36:	d31b      	bcc.n	d6d70 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d6d38:	7822      	ldrb	r2, [r4, #0]
   d6d3a:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d6d3c:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d6d40:	d406      	bmi.n	d6d50 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d6d42:	7902      	ldrb	r2, [r0, #4]
   d6d44:	ebc8 0202 	rsb	r2, r8, r2
   d6d48:	b2d2      	uxtb	r2, r2
   d6d4a:	4592      	cmp	sl, r2
   d6d4c:	bf28      	it	cs
   d6d4e:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6d50:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d6d52:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6d56:	d207      	bcs.n	d6d68 <_ZN7FatFile4readEPvj+0x106>
   d6d58:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d6d5a:	4653      	mov	r3, sl
   d6d5c:	464a      	mov	r2, r9
   d6d5e:	6800      	ldr	r0, [r0, #0]
   d6d60:	f000 ff0a 	bl	d7b78 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6d64:	b960      	cbnz	r0, d6d80 <_ZN7FatFile4readEPvj+0x11e>
   d6d66:	e78d      	b.n	d6c84 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6d68:	4453      	add	r3, sl
   d6d6a:	4299      	cmp	r1, r3
   d6d6c:	d321      	bcc.n	d6db2 <_ZN7FatFile4readEPvj+0x150>
   d6d6e:	e7f3      	b.n	d6d58 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6d70:	464a      	mov	r2, r9
   d6d72:	6800      	ldr	r0, [r0, #0]
   d6d74:	f000 feb8 	bl	d7ae8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6d78:	2800      	cmp	r0, #0
   d6d7a:	d083      	beq.n	d6c84 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d6d7c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d6d80:	6963      	ldr	r3, [r4, #20]
   d6d82:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d6d84:	44b9      	add	r9, r7
    m_curPosition += n;
   d6d86:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6d88:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6d8a:	e798      	b.n	d6cbe <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6d8c:	2200      	movs	r2, #0
   d6d8e:	3024      	adds	r0, #36	; 0x24
   d6d90:	f000 fbb7 	bl	d7502 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d6d94:	2800      	cmp	r0, #0
   d6d96:	f43f af75 	beq.w	d6c84 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d6d9a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d6d9e:	42b7      	cmp	r7, r6
   d6da0:	bf28      	it	cs
   d6da2:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d6da4:	eb00 010a 	add.w	r1, r0, sl
   d6da8:	463a      	mov	r2, r7
   d6daa:	4648      	mov	r0, r9
   d6dac:	f007 fc6d 	bl	de68a <memcpy>
   d6db0:	e7e6      	b.n	d6d80 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6db2:	3024      	adds	r0, #36	; 0x24
   d6db4:	9101      	str	r1, [sp, #4]
   d6db6:	f000 fb7d 	bl	d74b4 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d6dba:	9901      	ldr	r1, [sp, #4]
   d6dbc:	2800      	cmp	r0, #0
   d6dbe:	d1cb      	bne.n	d6d58 <_ZN7FatFile4readEPvj+0xf6>
   d6dc0:	e760      	b.n	d6c84 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d6dc2:	b003      	add	sp, #12
   d6dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6dc8 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d6dc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d6dca:	2201      	movs	r2, #1
   d6dcc:	f10d 0107 	add.w	r1, sp, #7
   d6dd0:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d6dd2:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d6dd4:	6905      	ldr	r5, [r0, #16]
   d6dd6:	f7ff ff44 	bl	d6c62 <_ZN7FatFile4readEPvj>
   d6dda:	2801      	cmp	r0, #1
   d6ddc:	bf05      	ittet	eq
   d6dde:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d6de2:	6166      	streq	r6, [r4, #20]
   d6de4:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d6de8:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d6dea:	b002      	add	sp, #8
   d6dec:	bd70      	pop	{r4, r5, r6, pc}

000d6dee <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6dee:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6df0:	6943      	ldr	r3, [r0, #20]
   d6df2:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6df6:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d6df8:	b105      	cbz	r5, d6dfc <_ZN7FatFile12readDirCacheEb+0xe>
   d6dfa:	b969      	cbnz	r1, d6e18 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d6dfc:	2201      	movs	r2, #1
   d6dfe:	f10d 0107 	add.w	r1, sp, #7
   d6e02:	4620      	mov	r0, r4
   d6e04:	f7ff ff2d 	bl	d6c62 <_ZN7FatFile4readEPvj>
   d6e08:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d6e0a:	2801      	cmp	r0, #1
   d6e0c:	d001      	beq.n	d6e12 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d6e0e:	2000      	movs	r0, #0
   d6e10:	e008      	b.n	d6e24 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d6e12:	6963      	ldr	r3, [r4, #20]
   d6e14:	331f      	adds	r3, #31
   d6e16:	e000      	b.n	d6e1a <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d6e18:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6e1a:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d6e1c:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6e1e:	3030      	adds	r0, #48	; 0x30
   d6e20:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d6e24:	b003      	add	sp, #12
   d6e26:	bd30      	pop	{r4, r5, pc}

000d6e28 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e2c:	460e      	mov	r6, r1
   d6e2e:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d6e30:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6e32:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d6e34:	2900      	cmp	r1, #0
   d6e36:	d039      	beq.n	d6eac <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d6e38:	6945      	ldr	r5, [r0, #20]
   d6e3a:	42b5      	cmp	r5, r6
   d6e3c:	d03a      	beq.n	d6eb4 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d6e3e:	b90e      	cbnz	r6, d6e44 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d6e40:	6106      	str	r6, [r0, #16]
    goto done;
   d6e42:	e031      	b.n	d6ea8 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d6e44:	070b      	lsls	r3, r1, #28
   d6e46:	d503      	bpl.n	d6e50 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d6e48:	69c3      	ldr	r3, [r0, #28]
   d6e4a:	429e      	cmp	r6, r3
   d6e4c:	d82e      	bhi.n	d6eac <_ZN7FatFile7seekSetEm+0x84>
   d6e4e:	e007      	b.n	d6e60 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d6e50:	0688      	lsls	r0, r1, #26
   d6e52:	d505      	bpl.n	d6e60 <_ZN7FatFile7seekSetEm+0x38>
   d6e54:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d6e56:	891b      	ldrh	r3, [r3, #8]
   d6e58:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d6e5c:	d826      	bhi.n	d6eac <_ZN7FatFile7seekSetEm+0x84>
   d6e5e:	e023      	b.n	d6ea8 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6e60:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d6e64:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d6e68:	1e6a      	subs	r2, r5, #1
   d6e6a:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6e6e:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6e70:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6e72:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d6e74:	429a      	cmp	r2, r3
   d6e76:	d800      	bhi.n	d6e7a <_ZN7FatFile7seekSetEm+0x52>
   d6e78:	b94d      	cbnz	r5, d6e8e <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6e7a:	064a      	lsls	r2, r1, #25
   d6e7c:	bf4c      	ite	mi
   d6e7e:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d6e82:	6a22      	ldrpl	r2, [r4, #32]
   d6e84:	6122      	str	r2, [r4, #16]
   d6e86:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6e88:	f104 0810 	add.w	r8, r4, #16
   d6e8c:	e00a      	b.n	d6ea4 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d6e8e:	1a9b      	subs	r3, r3, r2
   d6e90:	e7f9      	b.n	d6e86 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6e92:	4642      	mov	r2, r8
   d6e94:	6921      	ldr	r1, [r4, #16]
   d6e96:	68a0      	ldr	r0, [r4, #8]
   d6e98:	f000 fb5d 	bl	d7556 <_ZN9FatVolume6fatGetEmPm>
   d6e9c:	2800      	cmp	r0, #0
   d6e9e:	f105 35ff 	add.w	r5, r5, #4294967295
   d6ea2:	dd03      	ble.n	d6eac <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d6ea4:	2d00      	cmp	r5, #0
   d6ea6:	d1f4      	bne.n	d6e92 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d6ea8:	6166      	str	r6, [r4, #20]
   d6eaa:	e003      	b.n	d6eb4 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d6eac:	6127      	str	r7, [r4, #16]
  return false;
   d6eae:	2000      	movs	r0, #0
   d6eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d6eb4:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d6eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6eba <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ebc:	460f      	mov	r7, r1
   d6ebe:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6ec0:	2100      	movs	r1, #0
   d6ec2:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6ec4:	4604      	mov	r4, r0
   d6ec6:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6ec8:	f007 fbea 	bl	de6a0 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d6ecc:	68b8      	ldr	r0, [r7, #8]
   d6ece:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6ed0:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d6ed4:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6ed6:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d6eda:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d6edc:	6a3b      	ldr	r3, [r7, #32]
   d6ede:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6ee0:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6ee2:	7acb      	ldrb	r3, [r1, #11]
   d6ee4:	071d      	lsls	r5, r3, #28
   d6ee6:	d44c      	bmi.n	d6f82 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d6ee8:	1883      	adds	r3, r0, r2
   d6eea:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6eee:	f003 0317 	and.w	r3, r3, #23
   d6ef2:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d6ef4:	7ac9      	ldrb	r1, [r1, #11]
   d6ef6:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d6efa:	bf04      	itt	eq
   d6efc:	f043 0308 	orreq.w	r3, r3, #8
   d6f00:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d6f02:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6f06:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d6f08:	f006 0303 	and.w	r3, r6, #3
   d6f0c:	2b01      	cmp	r3, #1
   d6f0e:	d009      	beq.n	d6f24 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d6f10:	2b02      	cmp	r3, #2
   d6f12:	d005      	beq.n	d6f20 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d6f14:	2b00      	cmp	r3, #0
   d6f16:	d134      	bne.n	d6f82 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d6f18:	0571      	lsls	r1, r6, #21
   d6f1a:	d432      	bmi.n	d6f82 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d6f1c:	2301      	movs	r3, #1
   d6f1e:	e002      	b.n	d6f26 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d6f20:	2303      	movs	r3, #3
   d6f22:	e000      	b.n	d6f26 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d6f24:	2302      	movs	r3, #2
   d6f26:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d6f28:	78a1      	ldrb	r1, [r4, #2]
   d6f2a:	078b      	lsls	r3, r1, #30
   d6f2c:	d503      	bpl.n	d6f36 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d6f2e:	7823      	ldrb	r3, [r4, #0]
   d6f30:	f013 0f11 	tst.w	r3, #17
   d6f34:	d125      	bne.n	d6f82 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6f36:	b24b      	sxtb	r3, r1
   d6f38:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d6f3c:	f006 0108 	and.w	r1, r6, #8
   d6f40:	bf14      	ite	ne
   d6f42:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d6f46:	2700      	moveq	r7, #0
   d6f48:	4319      	orrs	r1, r3
   d6f4a:	4339      	orrs	r1, r7
   d6f4c:	70a1      	strb	r1, [r4, #2]
   d6f4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d6f50:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6f52:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d6f54:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d6f56:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d6f5a:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d6f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d6f62:	d504      	bpl.n	d6f6e <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6f64:	b181      	cbz	r1, d6f88 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6f66:	f000 fb96 	bl	d7696 <_ZN9FatVolume9freeChainEm>
   d6f6a:	b968      	cbnz	r0, d6f88 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6f6c:	e009      	b.n	d6f82 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d6f6e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d6f70:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d6f72:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6f74:	0473      	lsls	r3, r6, #17
   d6f76:	d50c      	bpl.n	d6f92 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d6f78:	69e1      	ldr	r1, [r4, #28]
   d6f7a:	4620      	mov	r0, r4
   d6f7c:	f7ff ff54 	bl	d6e28 <_ZN7FatFile7seekSetEm>
   d6f80:	b938      	cbnz	r0, d6f92 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d6f82:	2000      	movs	r0, #0
   d6f84:	7020      	strb	r0, [r4, #0]
  return false;
   d6f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d6f88:	78a3      	ldrb	r3, [r4, #2]
   d6f8a:	f043 0304 	orr.w	r3, r3, #4
   d6f8e:	70a3      	strb	r3, [r4, #2]
   d6f90:	e7f0      	b.n	d6f74 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d6f92:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d6f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f96 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6f96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6f9a:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6f9c:	4606      	mov	r6, r0
   d6f9e:	460d      	mov	r5, r1
   d6fa0:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6fa2:	bb53      	cbnz	r3, d6ffa <_ZN7FatFile8openNextEPS_i+0x64>
   d6fa4:	780b      	ldrb	r3, [r1, #0]
   d6fa6:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6faa:	d026      	beq.n	d6ffa <_ZN7FatFile8openNextEPS_i+0x64>
   d6fac:	694c      	ldr	r4, [r1, #20]
   d6fae:	f014 041f 	ands.w	r4, r4, #31
   d6fb2:	d122      	bne.n	d6ffa <_ZN7FatFile8openNextEPS_i+0x64>
   d6fb4:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d6fb6:	2100      	movs	r1, #0
   d6fb8:	4628      	mov	r0, r5
   d6fba:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d6fbe:	f7ff ff16 	bl	d6dee <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6fc2:	b1d0      	cbz	r0, d6ffa <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d6fc4:	7803      	ldrb	r3, [r0, #0]
   d6fc6:	b1c3      	cbz	r3, d6ffa <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6fc8:	2b2e      	cmp	r3, #46	; 0x2e
   d6fca:	d101      	bne.n	d6fd0 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d6fcc:	2400      	movs	r4, #0
   d6fce:	e7f2      	b.n	d6fb6 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6fd0:	2be5      	cmp	r3, #229	; 0xe5
   d6fd2:	d0fb      	beq.n	d6fcc <_ZN7FatFile8openNextEPS_i+0x36>
   d6fd4:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6fd6:	f011 0f08 	tst.w	r1, #8
   d6fda:	d105      	bne.n	d6fe8 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d6fdc:	b17c      	cbz	r4, d6ffe <_ZN7FatFile8openNextEPS_i+0x68>
   d6fde:	f7ff f98d 	bl	d62fc <_ZN7FatFile11lfnChecksumEPh>
   d6fe2:	4580      	cmp	r8, r0
   d6fe4:	d109      	bne.n	d6ffa <_ZN7FatFile8openNextEPS_i+0x64>
   d6fe6:	e00a      	b.n	d6ffe <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6fe8:	290f      	cmp	r1, #15
   d6fea:	d1ef      	bne.n	d6fcc <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d6fec:	0659      	lsls	r1, r3, #25
   d6fee:	d5e2      	bpl.n	d6fb6 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d6ff0:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d6ff4:	f890 800d 	ldrb.w	r8, [r0, #13]
   d6ff8:	e7dd      	b.n	d6fb6 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d6ffa:	2000      	movs	r0, #0
   d6ffc:	e007      	b.n	d700e <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d6ffe:	9400      	str	r4, [sp, #0]
   d7000:	463b      	mov	r3, r7
   d7002:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d7006:	4629      	mov	r1, r5
   d7008:	4630      	mov	r0, r6
   d700a:	f7ff ff56 	bl	d6eba <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d700e:	b003      	add	sp, #12
   d7010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7014 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d7014:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d7016:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d7018:	4604      	mov	r4, r0
  if (!isOpen()) {
   d701a:	b90b      	cbnz	r3, d7020 <_ZN7FatFile4syncEv+0xc>
    return true;
   d701c:	2001      	movs	r0, #1
   d701e:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d7020:	7883      	ldrb	r3, [r0, #2]
   d7022:	075a      	lsls	r2, r3, #29
   d7024:	d523      	bpl.n	d706e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d7026:	2101      	movs	r1, #1
   d7028:	f7ff fdca 	bl	d6bc0 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d702c:	4605      	mov	r5, r0
   d702e:	b928      	cbnz	r0, d703c <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d7030:	7863      	ldrb	r3, [r4, #1]
   d7032:	f043 0301 	orr.w	r3, r3, #1
   d7036:	7063      	strb	r3, [r4, #1]
  return false;
   d7038:	2000      	movs	r0, #0
   d703a:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d703c:	7803      	ldrb	r3, [r0, #0]
   d703e:	2be5      	cmp	r3, #229	; 0xe5
   d7040:	d0f6      	beq.n	d7030 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d7042:	7823      	ldrb	r3, [r4, #0]
   d7044:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d7046:	bf44      	itt	mi
   d7048:	69e3      	ldrmi	r3, [r4, #28]
   d704a:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d704c:	8c23      	ldrh	r3, [r4, #32]
   d704e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d7050:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d7052:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d7054:	4b09      	ldr	r3, [pc, #36]	; (d707c <_ZN7FatFile4syncEv+0x68>)
   d7056:	681b      	ldr	r3, [r3, #0]
   d7058:	b12b      	cbz	r3, d7066 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d705a:	f100 0116 	add.w	r1, r0, #22
   d705e:	3018      	adds	r0, #24
   d7060:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d7062:	8b2b      	ldrh	r3, [r5, #24]
   d7064:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d7066:	78a3      	ldrb	r3, [r4, #2]
   d7068:	f023 0304 	bic.w	r3, r3, #4
   d706c:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d706e:	68a0      	ldr	r0, [r4, #8]
   d7070:	f7ff f937 	bl	d62e2 <_ZN9FatVolume9cacheSyncEv>
   d7074:	2800      	cmp	r0, #0
   d7076:	d0db      	beq.n	d7030 <_ZN7FatFile4syncEv+0x1c>
   d7078:	e7d0      	b.n	d701c <_ZN7FatFile4syncEv+0x8>
   d707a:	bf00      	nop
   d707c:	2003e1bc 	.word	0x2003e1bc

000d7080 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d7080:	b510      	push	{r4, lr}
   d7082:	4604      	mov	r4, r0
  bool rtn = sync();
   d7084:	f7ff ffc6 	bl	d7014 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d7088:	2300      	movs	r3, #0
   d708a:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d708c:	bd10      	pop	{r4, pc}

000d708e <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d708e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7090:	b093      	sub	sp, #76	; 0x4c
   d7092:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7094:	2300      	movs	r3, #0
   d7096:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d709a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d709e:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d70a0:	9201      	str	r2, [sp, #4]
   d70a2:	4606      	mov	r6, r0
   d70a4:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d70a6:	b10b      	cbz	r3, d70ac <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d70a8:	2000      	movs	r0, #0
   d70aa:	e03d      	b.n	d7128 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d70ac:	780b      	ldrb	r3, [r1, #0]
   d70ae:	f013 0f70 	tst.w	r3, #112	; 0x70
   d70b2:	d0f9      	beq.n	d70a8 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d70b4:	7813      	ldrb	r3, [r2, #0]
   d70b6:	2b2f      	cmp	r3, #47	; 0x2f
   d70b8:	d112      	bne.n	d70e0 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d70ba:	9b01      	ldr	r3, [sp, #4]
   d70bc:	781a      	ldrb	r2, [r3, #0]
   d70be:	2a2f      	cmp	r2, #47	; 0x2f
   d70c0:	d102      	bne.n	d70c8 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d70c2:	3301      	adds	r3, #1
   d70c4:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d70c6:	e7f8      	b.n	d70ba <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d70c8:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d70ca:	b91a      	cbnz	r2, d70d4 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d70cc:	4630      	mov	r0, r6
   d70ce:	f7ff fdb0 	bl	d6c32 <_ZN7FatFile8openRootEP9FatVolume>
   d70d2:	e029      	b.n	d7128 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d70d4:	a809      	add	r0, sp, #36	; 0x24
   d70d6:	f7ff fdac 	bl	d6c32 <_ZN7FatFile8openRootEP9FatVolume>
   d70da:	2800      	cmp	r0, #0
   d70dc:	d0e4      	beq.n	d70a8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d70de:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d70e0:	aa01      	add	r2, sp, #4
   d70e2:	a903      	add	r1, sp, #12
   d70e4:	9801      	ldr	r0, [sp, #4]
   d70e6:	f7ff f9a9 	bl	d643c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d70ea:	2800      	cmp	r0, #0
   d70ec:	d0dc      	beq.n	d70a8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d70ee:	9b01      	ldr	r3, [sp, #4]
   d70f0:	781b      	ldrb	r3, [r3, #0]
   d70f2:	b19b      	cbz	r3, d711c <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d70f4:	2300      	movs	r3, #0
   d70f6:	aa03      	add	r2, sp, #12
   d70f8:	4621      	mov	r1, r4
   d70fa:	4630      	mov	r0, r6
   d70fc:	f7ff fb42 	bl	d6784 <_ZN7FatFile4openEPS_P7fname_ti>
   d7100:	2800      	cmp	r0, #0
   d7102:	d0d1      	beq.n	d70a8 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d7104:	4635      	mov	r5, r6
   d7106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7108:	ac09      	add	r4, sp, #36	; 0x24
   d710a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d710c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d710e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7110:	682b      	ldr	r3, [r5, #0]
   d7112:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d7114:	4630      	mov	r0, r6
   d7116:	f7ff ffb3 	bl	d7080 <_ZN7FatFile5closeEv>
   d711a:	e7e0      	b.n	d70de <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d711c:	463b      	mov	r3, r7
   d711e:	aa03      	add	r2, sp, #12
   d7120:	4621      	mov	r1, r4
   d7122:	4630      	mov	r0, r6
   d7124:	f7ff fb2e 	bl	d6784 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d7128:	b013      	add	sp, #76	; 0x4c
   d712a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d712c <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d712c:	b500      	push	{lr}
   d712e:	b08b      	sub	sp, #44	; 0x2c
   d7130:	2300      	movs	r3, #0
   d7132:	f88d 3004 	strb.w	r3, [sp, #4]
   d7136:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d713a:	460a      	mov	r2, r1
   d713c:	2301      	movs	r3, #1
   d713e:	4601      	mov	r1, r0
   d7140:	a801      	add	r0, sp, #4
   d7142:	f7ff ffa4 	bl	d708e <_ZN7FatFile4openEPS_PKci>
   d7146:	b110      	cbz	r0, d714e <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d7148:	a801      	add	r0, sp, #4
   d714a:	f7ff fa63 	bl	d6614 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d714e:	b00b      	add	sp, #44	; 0x2c
   d7150:	f85d fb04 	ldr.w	pc, [sp], #4

000d7154 <_ZN7FatFile5mkdirEPS_P7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d7154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  dir_t dot;
  dir_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
   d7158:	780b      	ldrb	r3, [r1, #0]
   d715a:	f013 0f70 	tst.w	r3, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d715e:	b088      	sub	sp, #32
   d7160:	4604      	mov	r4, r0
   d7162:	460f      	mov	r7, r1
  uint32_t block;
  dir_t dot;
  dir_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
   d7164:	d01c      	beq.n	d71a0 <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
   d7166:	f640 2302 	movw	r3, #2562	; 0xa02
   d716a:	f7ff fb0b 	bl	d6784 <_ZN7FatFile4openEPS_P7fname_ti>
   d716e:	b1b8      	cbz	r0, d71a0 <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = F_READ;
   d7170:	2601      	movs	r6, #1
  m_attr = FILE_ATTR_SUBDIR;
   d7172:	2510      	movs	r5, #16
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = F_READ;
   d7174:	70a6      	strb	r6, [r4, #2]
  m_attr = FILE_ATTR_SUBDIR;
   d7176:	7025      	strb	r5, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
   d7178:	4620      	mov	r0, r4
   d717a:	f7ff fce1 	bl	d6b40 <_ZN7FatFile13addDirClusterEv>
   d717e:	b178      	cbz	r0, d71a0 <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
   d7180:	6923      	ldr	r3, [r4, #16]
   d7182:	6223      	str	r3, [r4, #32]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d7184:	2100      	movs	r1, #0
   d7186:	4620      	mov	r0, r4
   d7188:	f7ff fe4e 	bl	d6e28 <_ZN7FatFile7seekSetEm>
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
   d718c:	4620      	mov	r0, r4
   d718e:	f7ff ff41 	bl	d7014 <_ZN7FatFile4syncEv>
   d7192:	b128      	cbz	r0, d71a0 <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d7194:	4631      	mov	r1, r6
   d7196:	4620      	mov	r0, r4
   d7198:	f7ff fd12 	bl	d6bc0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d719c:	4603      	mov	r3, r0
   d719e:	b908      	cbnz	r0, d71a4 <_ZN7FatFile5mkdirEPS_P7fname_t+0x50>
  memcpy(&pc->dir[1], &dot, sizeof(dot));
  // write first block
  return m_vol->cacheSync();

fail:
  return false;
   d71a0:	2000      	movs	r0, #0
   d71a2:	e051      	b.n	d7248 <_ZN7FatFile5mkdirEPS_P7fname_t+0xf4>
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = DIR_ATT_DIRECTORY;
   d71a4:	72c5      	strb	r5, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
   d71a6:	4602      	mov	r2, r0
   d71a8:	466e      	mov	r6, sp
   d71aa:	f100 0c20 	add.w	ip, r0, #32
   d71ae:	466d      	mov	r5, sp
   d71b0:	6810      	ldr	r0, [r2, #0]
   d71b2:	6851      	ldr	r1, [r2, #4]
   d71b4:	46b6      	mov	lr, r6
   d71b6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d71ba:	3208      	adds	r2, #8
   d71bc:	4562      	cmp	r2, ip
   d71be:	4676      	mov	r6, lr
   d71c0:	d1f6      	bne.n	d71b0 <_ZN7FatFile5mkdirEPS_P7fname_t+0x5c>
   d71c2:	f8b3 8014 	ldrh.w	r8, [r3, #20]
   d71c6:	8b5e      	ldrh	r6, [r3, #26]
  dot.name[0] = '.';
   d71c8:	232e      	movs	r3, #46	; 0x2e
   d71ca:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
   d71ce:	2120      	movs	r1, #32
  // change directory entry  attribute
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
   d71d0:	2300      	movs	r3, #0
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
   d71d2:	18ea      	adds	r2, r5, r3
   d71d4:	3301      	adds	r3, #1
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
   d71d6:	2b0a      	cmp	r3, #10
    dot.name[i] = ' ';
   d71d8:	7051      	strb	r1, [r2, #1]
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
   d71da:	d1fa      	bne.n	d71d2 <_ZN7FatFile5mkdirEPS_P7fname_t+0x7e>
    dot.name[i] = ' ';
  }

  // cache block for '.'  and '..'
  block = m_vol->clusterFirstBlock(m_firstCluster);
   d71dc:	6a21      	ldr	r1, [r4, #32]
   d71de:	68a0      	ldr	r0, [r4, #8]
   d71e0:	f000 f9b3 	bl	d754a <_ZNK9FatVolume17clusterFirstBlockEm>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d71e4:	68a3      	ldr	r3, [r4, #8]
   d71e6:	4601      	mov	r1, r0
   d71e8:	2201      	movs	r2, #1
   d71ea:	f103 0024 	add.w	r0, r3, #36	; 0x24
   d71ee:	f000 f988 	bl	d7502 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
   d71f2:	4603      	mov	r3, r0
   d71f4:	2800      	cmp	r0, #0
   d71f6:	d0d3      	beq.n	d71a0 <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to block
  memcpy(&pc->dir[0], &dot, sizeof(dot));
   d71f8:	f8ad 601a 	strh.w	r6, [sp, #26]
   d71fc:	f8ad 8014 	strh.w	r8, [sp, #20]
   d7200:	46ae      	mov	lr, r5
   d7202:	4606      	mov	r6, r0
   d7204:	f10d 0c20 	add.w	ip, sp, #32
   d7208:	4672      	mov	r2, lr
   d720a:	ca03      	ldmia	r2!, {r0, r1}
   d720c:	4562      	cmp	r2, ip
   d720e:	6030      	str	r0, [r6, #0]
   d7210:	6071      	str	r1, [r6, #4]
   d7212:	4696      	mov	lr, r2
   d7214:	f106 0608 	add.w	r6, r6, #8
   d7218:	d1f6      	bne.n	d7208 <_ZN7FatFile5mkdirEPS_P7fname_t+0xb4>
  // make entry for '..'
  dot.name[1] = '.';
   d721a:	222e      	movs	r2, #46	; 0x2e
   d721c:	f88d 2001 	strb.w	r2, [sp, #1]
  dot.firstClusterLow = parent->m_firstCluster & 0XFFFF;
   d7220:	6a3a      	ldr	r2, [r7, #32]
  dot.firstClusterHigh = parent->m_firstCluster >> 16;
  // copy '..' to block
  memcpy(&pc->dir[1], &dot, sizeof(dot));
   d7222:	f8ad 201a 	strh.w	r2, [sp, #26]
   d7226:	0c11      	lsrs	r1, r2, #16
   d7228:	f8ad 1014 	strh.w	r1, [sp, #20]
   d722c:	3320      	adds	r3, #32
   d722e:	ae08      	add	r6, sp, #32
   d7230:	462a      	mov	r2, r5
   d7232:	ca03      	ldmia	r2!, {r0, r1}
   d7234:	42b2      	cmp	r2, r6
   d7236:	6018      	str	r0, [r3, #0]
   d7238:	6059      	str	r1, [r3, #4]
   d723a:	4615      	mov	r5, r2
   d723c:	f103 0308 	add.w	r3, r3, #8
   d7240:	d1f6      	bne.n	d7230 <_ZN7FatFile5mkdirEPS_P7fname_t+0xdc>
  // write first block
  return m_vol->cacheSync();
   d7242:	68a0      	ldr	r0, [r4, #8]
   d7244:	f7ff f84d 	bl	d62e2 <_ZN9FatVolume9cacheSyncEv>

fail:
  return false;
}
   d7248:	b008      	add	sp, #32
   d724a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d724e <_ZN7FatFile5mkdirEPS_PKcb>:
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
  pos->cluster = m_curCluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d724e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7250:	b093      	sub	sp, #76	; 0x4c
   d7252:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7254:	2300      	movs	r3, #0
   d7256:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d725a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
   d725e:	7803      	ldrb	r3, [r0, #0]
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
  pos->cluster = m_curCluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d7260:	9201      	str	r2, [sp, #4]
   d7262:	4606      	mov	r6, r0
   d7264:	460c      	mov	r4, r1
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
   d7266:	2b00      	cmp	r3, #0
   d7268:	d13e      	bne.n	d72e8 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
   d726a:	780b      	ldrb	r3, [r1, #0]
   d726c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d7270:	d03a      	beq.n	d72e8 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d7272:	7813      	ldrb	r3, [r2, #0]
   d7274:	2b2f      	cmp	r3, #47	; 0x2f
   d7276:	d10c      	bne.n	d7292 <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
   d7278:	9b01      	ldr	r3, [sp, #4]
   d727a:	781a      	ldrb	r2, [r3, #0]
   d727c:	2a2f      	cmp	r2, #47	; 0x2f
   d727e:	d102      	bne.n	d7286 <_ZN7FatFile5mkdirEPS_PKcb+0x38>
      path++;
   d7280:	3301      	adds	r3, #1
   d7282:	9301      	str	r3, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d7284:	e7f8      	b.n	d7278 <_ZN7FatFile5mkdirEPS_PKcb+0x2a>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
   d7286:	68a1      	ldr	r1, [r4, #8]
   d7288:	a809      	add	r0, sp, #36	; 0x24
   d728a:	f7ff fcd2 	bl	d6c32 <_ZN7FatFile8openRootEP9FatVolume>
   d728e:	b358      	cbz	r0, d72e8 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
   d7290:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d7292:	aa01      	add	r2, sp, #4
   d7294:	a903      	add	r1, sp, #12
   d7296:	9801      	ldr	r0, [sp, #4]
   d7298:	f7ff f8d0 	bl	d643c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d729c:	b320      	cbz	r0, d72e8 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
   d729e:	9b01      	ldr	r3, [sp, #4]
   d72a0:	781b      	ldrb	r3, [r3, #0]
   d72a2:	b1db      	cbz	r3, d72dc <_ZN7FatFile5mkdirEPS_PKcb+0x8e>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
   d72a4:	2300      	movs	r3, #0
   d72a6:	aa03      	add	r2, sp, #12
   d72a8:	4621      	mov	r1, r4
   d72aa:	4630      	mov	r0, r6
   d72ac:	f7ff fa6a 	bl	d6784 <_ZN7FatFile4openEPS_P7fname_ti>
   d72b0:	b158      	cbz	r0, d72ca <_ZN7FatFile5mkdirEPS_PKcb+0x7c>
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
   d72b2:	4635      	mov	r5, r6
   d72b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d72b6:	ac09      	add	r4, sp, #36	; 0x24
   d72b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d72ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d72bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d72be:	682b      	ldr	r3, [r5, #0]
   d72c0:	6023      	str	r3, [r4, #0]
    parent = &tmpDir;
    close();
   d72c2:	4630      	mov	r0, r6
   d72c4:	f7ff fedc 	bl	d7080 <_ZN7FatFile5closeEv>
   d72c8:	e7e2      	b.n	d7290 <_ZN7FatFile5mkdirEPS_PKcb+0x42>
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
   d72ca:	b16f      	cbz	r7, d72e8 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
   d72cc:	aa03      	add	r2, sp, #12
   d72ce:	4621      	mov	r1, r4
   d72d0:	4630      	mov	r0, r6
   d72d2:	f7ff ff3f 	bl	d7154 <_ZN7FatFile5mkdirEPS_P7fname_t>
   d72d6:	2800      	cmp	r0, #0
   d72d8:	d1eb      	bne.n	d72b2 <_ZN7FatFile5mkdirEPS_PKcb+0x64>
   d72da:	e005      	b.n	d72e8 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
   d72dc:	aa03      	add	r2, sp, #12
   d72de:	4621      	mov	r1, r4
   d72e0:	4630      	mov	r0, r6
   d72e2:	f7ff ff37 	bl	d7154 <_ZN7FatFile5mkdirEPS_P7fname_t>
   d72e6:	e000      	b.n	d72ea <_ZN7FatFile5mkdirEPS_PKcb+0x9c>

fail:
  return false;
   d72e8:	2000      	movs	r0, #0
}
   d72ea:	b013      	add	sp, #76	; 0x4c
   d72ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d72f0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d72f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d72f4:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d72f6:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d72f8:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d72fa:	4604      	mov	r4, r0
   d72fc:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d72fe:	d508      	bpl.n	d7312 <_ZN7FatFile5writeEPKvj+0x22>
   d7300:	7883      	ldrb	r3, [r0, #2]
   d7302:	079a      	lsls	r2, r3, #30
   d7304:	d505      	bpl.n	d7312 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d7306:	071b      	lsls	r3, r3, #28
   d7308:	d50b      	bpl.n	d7322 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d730a:	69e1      	ldr	r1, [r4, #28]
   d730c:	f7ff fd8c 	bl	d6e28 <_ZN7FatFile7seekSetEm>
   d7310:	b938      	cbnz	r0, d7322 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d7312:	7863      	ldrb	r3, [r4, #1]
   d7314:	f043 0301 	orr.w	r3, r3, #1
   d7318:	7063      	strb	r3, [r4, #1]
  return -1;
   d731a:	f04f 30ff 	mov.w	r0, #4294967295
   d731e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d7322:	6963      	ldr	r3, [r4, #20]
   d7324:	43db      	mvns	r3, r3
   d7326:	4598      	cmp	r8, r3
   d7328:	d8f3      	bhi.n	d7312 <_ZN7FatFile5writeEPKvj+0x22>
   d732a:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d732c:	f04f 0a00 	mov.w	sl, #0
   d7330:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d7332:	2e00      	cmp	r6, #0
   d7334:	f000 8081 	beq.w	d743a <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d7338:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d733a:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d733c:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d7340:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d7344:	d11c      	bne.n	d7380 <_ZN7FatFile5writeEPKvj+0x90>
   d7346:	b9df      	cbnz	r7, d7380 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d7348:	6921      	ldr	r1, [r4, #16]
   d734a:	b171      	cbz	r1, d736a <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d734c:	f104 0210 	add.w	r2, r4, #16
   d7350:	f000 f901 	bl	d7556 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d7354:	2800      	cmp	r0, #0
   d7356:	dbdc      	blt.n	d7312 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d7358:	f040 808e 	bne.w	d7478 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d735c:	4620      	mov	r0, r4
   d735e:	f7ff fbe4 	bl	d6b2a <_ZN7FatFile10addClusterEv>
   d7362:	2800      	cmp	r0, #0
   d7364:	f040 8088 	bne.w	d7478 <_ZN7FatFile5writeEPKvj+0x188>
   d7368:	e7d3      	b.n	d7312 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d736a:	6a23      	ldr	r3, [r4, #32]
   d736c:	b93b      	cbnz	r3, d737e <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d736e:	4620      	mov	r0, r4
   d7370:	f7ff fbdb 	bl	d6b2a <_ZN7FatFile10addClusterEv>
   d7374:	2800      	cmp	r0, #0
   d7376:	d0cc      	beq.n	d7312 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d7378:	6923      	ldr	r3, [r4, #16]
   d737a:	6223      	str	r3, [r4, #32]
   d737c:	e000      	b.n	d7380 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d737e:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7380:	6921      	ldr	r1, [r4, #16]
   d7382:	68a0      	ldr	r0, [r4, #8]
   d7384:	f000 f8e1 	bl	d754a <_ZNK9FatVolume17clusterFirstBlockEm>
   d7388:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d738a:	b917      	cbnz	r7, d7392 <_ZN7FatFile5writeEPKvj+0xa2>
   d738c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7390:	d221      	bcs.n	d73d6 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d7392:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d7396:	42b5      	cmp	r5, r6
   d7398:	bf28      	it	cs
   d739a:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d739c:	b937      	cbnz	r7, d73ac <_ZN7FatFile5writeEPKvj+0xbc>
   d739e:	6963      	ldr	r3, [r4, #20]
   d73a0:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d73a2:	4293      	cmp	r3, r2
   d73a4:	bf34      	ite	cc
   d73a6:	2201      	movcc	r2, #1
   d73a8:	2205      	movcs	r2, #5
   d73aa:	e000      	b.n	d73ae <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d73ac:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d73ae:	68a0      	ldr	r0, [r4, #8]
   d73b0:	3024      	adds	r0, #36	; 0x24
   d73b2:	f000 f8a6 	bl	d7502 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d73b6:	2800      	cmp	r0, #0
   d73b8:	d0ab      	beq.n	d7312 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d73ba:	4438      	add	r0, r7
   d73bc:	462a      	mov	r2, r5
   d73be:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d73c0:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d73c2:	f007 f962 	bl	de68a <memcpy>
      if (512 == (n + blockOffset)) {
   d73c6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d73ca:	d130      	bne.n	d742e <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d73cc:	68a0      	ldr	r0, [r4, #8]
   d73ce:	3024      	adds	r0, #36	; 0x24
   d73d0:	f000 f870 	bl	d74b4 <_ZN8FatCache4syncEv>
   d73d4:	e017      	b.n	d7406 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d73d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d73da:	68a0      	ldr	r0, [r4, #8]
   d73dc:	d315      	bcc.n	d740a <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d73de:	7902      	ldrb	r2, [r0, #4]
   d73e0:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d73e2:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d73e4:	b2d2      	uxtb	r2, r2
   d73e6:	4293      	cmp	r3, r2
   d73e8:	bf28      	it	cs
   d73ea:	4613      	movcs	r3, r2
   d73ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d73ee:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d73f0:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d73f4:	d302      	bcc.n	d73fc <_ZN7FatFile5writeEPKvj+0x10c>
   d73f6:	441a      	add	r2, r3
   d73f8:	4291      	cmp	r1, r2
   d73fa:	d337      	bcc.n	d746c <_ZN7FatFile5writeEPKvj+0x17c>
   d73fc:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d73fe:	464a      	mov	r2, r9
   d7400:	6838      	ldr	r0, [r7, #0]
   d7402:	f000 fc6d 	bl	d7ce0 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d7406:	b990      	cbnz	r0, d742e <_ZN7FatFile5writeEPKvj+0x13e>
   d7408:	e783      	b.n	d7312 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d740a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d740c:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d740e:	bf02      	ittt	eq
   d7410:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7414:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7418:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d741a:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d741c:	464a      	mov	r2, r9
   d741e:	6818      	ldr	r0, [r3, #0]
   d7420:	f000 fbec 	bl	d7bfc <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d7424:	2800      	cmp	r0, #0
   d7426:	f43f af74 	beq.w	d7312 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d742a:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d742e:	6963      	ldr	r3, [r4, #20]
   d7430:	442b      	add	r3, r5
   d7432:	6163      	str	r3, [r4, #20]
    src += n;
   d7434:	44a9      	add	r9, r5
    nToWrite -= n;
   d7436:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d7438:	e77a      	b.n	d7330 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d743a:	69e2      	ldr	r2, [r4, #28]
   d743c:	4293      	cmp	r3, r2
   d743e:	d901      	bls.n	d7444 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d7440:	61e3      	str	r3, [r4, #28]
   d7442:	e002      	b.n	d744a <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d7444:	4b0f      	ldr	r3, [pc, #60]	; (d7484 <_ZN7FatFile5writeEPKvj+0x194>)
   d7446:	681b      	ldr	r3, [r3, #0]
   d7448:	b11b      	cbz	r3, d7452 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d744a:	78a3      	ldrb	r3, [r4, #2]
   d744c:	f043 0304 	orr.w	r3, r3, #4
   d7450:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d7452:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d7456:	2b00      	cmp	r3, #0
   d7458:	db02      	blt.n	d7460 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d745a:	4640      	mov	r0, r8
   d745c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d7460:	4620      	mov	r0, r4
   d7462:	f7ff fdd7 	bl	d7014 <_ZN7FatFile4syncEv>
   d7466:	2800      	cmp	r0, #0
   d7468:	d1f7      	bne.n	d745a <_ZN7FatFile5writeEPKvj+0x16a>
   d746a:	e752      	b.n	d7312 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d746c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7470:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7474:	62c2      	str	r2, [r0, #44]	; 0x2c
   d7476:	e7c1      	b.n	d73fc <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7478:	6921      	ldr	r1, [r4, #16]
   d747a:	68a0      	ldr	r0, [r4, #8]
   d747c:	f000 f865 	bl	d754a <_ZNK9FatVolume17clusterFirstBlockEm>
   d7480:	4601      	mov	r1, r0
   d7482:	e783      	b.n	d738c <_ZN7FatFile5writeEPKvj+0x9c>
   d7484:	2003e1bc 	.word	0x2003e1bc

000d7488 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d7488:	f001 bebe 	b.w	d9208 <HAL_Pin_Map>

000d748c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d748c:	b570      	push	{r4, r5, r6, lr}
   d748e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7490:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7492:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7494:	b149      	cbz	r1, d74aa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7496:	f008 f8d1 	bl	df63c <strlen>
   d749a:	682b      	ldr	r3, [r5, #0]
   d749c:	4602      	mov	r2, r0
   d749e:	4621      	mov	r1, r4
   d74a0:	4628      	mov	r0, r5
   d74a2:	68db      	ldr	r3, [r3, #12]
    }
   d74a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d74a8:	4718      	bx	r3
    }
   d74aa:	bd70      	pop	{r4, r5, r6, pc}

000d74ac <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d74ac:	f001 beac 	b.w	d9208 <HAL_Pin_Map>

000d74b0 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d74b0:	f001 beaa 	b.w	d9208 <HAL_Pin_Map>

000d74b4 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d74b4:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d74b6:	7803      	ldrb	r3, [r0, #0]
   d74b8:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d74ba:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d74bc:	d51e      	bpl.n	d74fc <_ZN8FatCache4syncEv+0x48>
   d74be:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d74c0:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d74c2:	f100 060c 	add.w	r6, r0, #12
   d74c6:	4632      	mov	r2, r6
   d74c8:	6818      	ldr	r0, [r3, #0]
   d74ca:	f000 fb97 	bl	d7bfc <_ZN9SdSpiCard10writeBlockEmPKh>
   d74ce:	4605      	mov	r5, r0
   d74d0:	b908      	cbnz	r0, d74d6 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d74d2:	2500      	movs	r5, #0
   d74d4:	e013      	b.n	d74fe <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d74d6:	7823      	ldrb	r3, [r4, #0]
   d74d8:	079b      	lsls	r3, r3, #30
   d74da:	d404      	bmi.n	d74e6 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d74dc:	7823      	ldrb	r3, [r4, #0]
   d74de:	f023 0301 	bic.w	r3, r3, #1
   d74e2:	7023      	strb	r3, [r4, #0]
   d74e4:	e00b      	b.n	d74fe <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d74e6:	6863      	ldr	r3, [r4, #4]
   d74e8:	68a0      	ldr	r0, [r4, #8]
   d74ea:	6919      	ldr	r1, [r3, #16]
   d74ec:	4632      	mov	r2, r6
   d74ee:	4401      	add	r1, r0
   d74f0:	6818      	ldr	r0, [r3, #0]
   d74f2:	f000 fb83 	bl	d7bfc <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d74f6:	2800      	cmp	r0, #0
   d74f8:	d1f0      	bne.n	d74dc <_ZN8FatCache4syncEv+0x28>
   d74fa:	e7ea      	b.n	d74d2 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d74fc:	2501      	movs	r5, #1

fail:
  return false;
}
   d74fe:	4628      	mov	r0, r5
   d7500:	bd70      	pop	{r4, r5, r6, pc}

000d7502 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7502:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d7504:	6883      	ldr	r3, [r0, #8]
   d7506:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7508:	4604      	mov	r4, r0
   d750a:	460e      	mov	r6, r1
   d750c:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d750e:	d014      	beq.n	d753a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d7510:	f7ff ffd0 	bl	d74b4 <_ZN8FatCache4syncEv>
   d7514:	b908      	cbnz	r0, d751a <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d7516:	2000      	movs	r0, #0
   d7518:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d751a:	076b      	lsls	r3, r5, #29
   d751c:	d503      	bpl.n	d7526 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d751e:	2300      	movs	r3, #0
   d7520:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7522:	60a6      	str	r6, [r4, #8]
   d7524:	e009      	b.n	d753a <_ZN8FatCache4readEmh+0x38>
   d7526:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d7528:	f104 020c 	add.w	r2, r4, #12
   d752c:	4631      	mov	r1, r6
   d752e:	6818      	ldr	r0, [r3, #0]
   d7530:	f000 fada 	bl	d7ae8 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d7534:	2800      	cmp	r0, #0
   d7536:	d1f2      	bne.n	d751e <_ZN8FatCache4readEmh+0x1c>
   d7538:	e7ed      	b.n	d7516 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d753a:	7823      	ldrb	r3, [r4, #0]
   d753c:	4620      	mov	r0, r4
   d753e:	f005 0503 	and.w	r5, r5, #3
   d7542:	431d      	orrs	r5, r3
   d7544:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d7548:	bd70      	pop	{r4, r5, r6, pc}

000d754a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d754a:	7983      	ldrb	r3, [r0, #6]
   d754c:	6940      	ldr	r0, [r0, #20]
   d754e:	3902      	subs	r1, #2
   d7550:	4099      	lsls	r1, r3
}
   d7552:	4408      	add	r0, r1
   d7554:	4770      	bx	lr

000d7556 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7556:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d7558:	b570      	push	{r4, r5, r6, lr}
   d755a:	4605      	mov	r5, r0
   d755c:	460c      	mov	r4, r1
   d755e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7560:	d802      	bhi.n	d7568 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d7562:	f04f 30ff 	mov.w	r0, #4294967295
   d7566:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7568:	69c3      	ldr	r3, [r0, #28]
   d756a:	4299      	cmp	r1, r3
   d756c:	d8f9      	bhi.n	d7562 <_ZN9FatVolume6fatGetEmPm+0xc>
   d756e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d7570:	2b20      	cmp	r3, #32
   d7572:	d110      	bne.n	d7596 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d7574:	6981      	ldr	r1, [r0, #24]
   d7576:	2202      	movs	r2, #2
   d7578:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d757c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7580:	f7ff ffbf 	bl	d7502 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7584:	2800      	cmp	r0, #0
   d7586:	d0ec      	beq.n	d7562 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d7588:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d758c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d7590:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d7594:	e00f      	b.n	d75b6 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d7596:	2b10      	cmp	r3, #16
   d7598:	d1e3      	bne.n	d7562 <_ZN9FatVolume6fatGetEmPm+0xc>
   d759a:	6983      	ldr	r3, [r0, #24]
   d759c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d75a0:	2202      	movs	r2, #2
   d75a2:	4419      	add	r1, r3
   d75a4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d75a8:	f7ff ffab 	bl	d7502 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d75ac:	2800      	cmp	r0, #0
   d75ae:	d0d8      	beq.n	d7562 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d75b0:	b2e4      	uxtb	r4, r4
   d75b2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d75b6:	69ea      	ldr	r2, [r5, #28]
   d75b8:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d75ba:	bf9a      	itte	ls
   d75bc:	6033      	strls	r3, [r6, #0]
  return 1;
   d75be:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d75c0:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d75c2:	bd70      	pop	{r4, r5, r6, pc}

000d75c4 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d75c4:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d75c6:	b538      	push	{r3, r4, r5, lr}
   d75c8:	460c      	mov	r4, r1
   d75ca:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d75cc:	d801      	bhi.n	d75d2 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d75ce:	2000      	movs	r0, #0
   d75d0:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d75d2:	69c3      	ldr	r3, [r0, #28]
   d75d4:	4299      	cmp	r1, r3
   d75d6:	d8fa      	bhi.n	d75ce <_ZN9FatVolume6fatPutEmm+0xa>
   d75d8:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d75da:	2b20      	cmp	r3, #32
   d75dc:	d10e      	bne.n	d75fc <_ZN9FatVolume6fatPutEmm+0x38>
   d75de:	6981      	ldr	r1, [r0, #24]
   d75e0:	2203      	movs	r2, #3
   d75e2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d75e6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d75ea:	f7ff ff8a 	bl	d7502 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d75ee:	2800      	cmp	r0, #0
   d75f0:	d0ed      	beq.n	d75ce <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d75f2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d75f6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d75fa:	e00f      	b.n	d761c <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d75fc:	2b10      	cmp	r3, #16
   d75fe:	d1e6      	bne.n	d75ce <_ZN9FatVolume6fatPutEmm+0xa>
   d7600:	6983      	ldr	r3, [r0, #24]
   d7602:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7606:	2203      	movs	r2, #3
   d7608:	4419      	add	r1, r3
   d760a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d760e:	f7ff ff78 	bl	d7502 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d7612:	2800      	cmp	r0, #0
   d7614:	d0db      	beq.n	d75ce <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d7616:	b2e4      	uxtb	r4, r4
   d7618:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d761c:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d761e:	bd38      	pop	{r3, r4, r5, pc}

000d7620 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7620:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d7624:	68c4      	ldr	r4, [r0, #12]
   d7626:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7628:	4605      	mov	r5, r0
   d762a:	460e      	mov	r6, r1
   d762c:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d762e:	d207      	bcs.n	d7640 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d7630:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d7632:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d7634:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d7636:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7638:	429c      	cmp	r4, r3
   d763a:	d903      	bls.n	d7644 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d763c:	b9cf      	cbnz	r7, d7672 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d763e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d7640:	2701      	movs	r7, #1
   d7642:	e7f7      	b.n	d7634 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d7644:	42a6      	cmp	r6, r4
   d7646:	d014      	beq.n	d7672 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d7648:	aa01      	add	r2, sp, #4
   d764a:	4621      	mov	r1, r4
   d764c:	4628      	mov	r0, r5
   d764e:	f7ff ff82 	bl	d7556 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7652:	2800      	cmp	r0, #0
   d7654:	db0d      	blt.n	d7672 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d7656:	d0ed      	beq.n	d7634 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d7658:	9b01      	ldr	r3, [sp, #4]
   d765a:	2b00      	cmp	r3, #0
   d765c:	d1ea      	bne.n	d7634 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d765e:	b107      	cbz	r7, d7662 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d7660:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d7662:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d7666:	4621      	mov	r1, r4
   d7668:	4628      	mov	r0, r5
   d766a:	f7ff ffab 	bl	d75c4 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d766e:	4607      	mov	r7, r0
   d7670:	b908      	cbnz	r0, d7676 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d7672:	2700      	movs	r7, #0
   d7674:	e00b      	b.n	d768e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d7676:	b916      	cbnz	r6, d767e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d7678:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d767c:	e007      	b.n	d768e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d767e:	4622      	mov	r2, r4
   d7680:	4631      	mov	r1, r6
   d7682:	4628      	mov	r0, r5
   d7684:	f7ff ff9e 	bl	d75c4 <_ZN9FatVolume6fatPutEmm>
   d7688:	2800      	cmp	r0, #0
   d768a:	d1f5      	bne.n	d7678 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d768c:	e7f1      	b.n	d7672 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d768e:	4638      	mov	r0, r7
   d7690:	b002      	add	sp, #8
   d7692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7696 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d7696:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7698:	4605      	mov	r5, r0
   d769a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d769c:	aa01      	add	r2, sp, #4
   d769e:	4621      	mov	r1, r4
   d76a0:	4628      	mov	r0, r5
   d76a2:	f7ff ff58 	bl	d7556 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d76a6:	1e06      	subs	r6, r0, #0
   d76a8:	da01      	bge.n	d76ae <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d76aa:	2000      	movs	r0, #0
   d76ac:	e00f      	b.n	d76ce <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d76ae:	2200      	movs	r2, #0
   d76b0:	4621      	mov	r1, r4
   d76b2:	4628      	mov	r0, r5
   d76b4:	f7ff ff86 	bl	d75c4 <_ZN9FatVolume6fatPutEmm>
   d76b8:	2800      	cmp	r0, #0
   d76ba:	d0f6      	beq.n	d76aa <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d76bc:	68eb      	ldr	r3, [r5, #12]
   d76be:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d76c0:	bf9c      	itt	ls
   d76c2:	f104 34ff 	addls.w	r4, r4, #4294967295
   d76c6:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d76c8:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d76ca:	2e00      	cmp	r6, #0
   d76cc:	d1e6      	bne.n	d769c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d76ce:	b002      	add	sp, #8
   d76d0:	bd70      	pop	{r4, r5, r6, pc}

000d76d2 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d76d2:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d76d4:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d76d6:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d76d8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d76da:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d76dc:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d76e0:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d76e2:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d76e4:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d76e6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d76ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d76ec:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d76f0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d76f4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d76f8:	b1a1      	cbz	r1, d7724 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d76fa:	2904      	cmp	r1, #4
   d76fc:	d85d      	bhi.n	d77ba <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d76fe:	4611      	mov	r1, r2
   d7700:	3024      	adds	r0, #36	; 0x24
   d7702:	f7ff fefe 	bl	d7502 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7706:	2800      	cmp	r0, #0
   d7708:	d057      	beq.n	d77ba <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d770a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d770e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d7712:	065b      	lsls	r3, r3, #25
   d7714:	d151      	bne.n	d77ba <_ZN9FatVolume4initEh+0xe8>
   d7716:	351b      	adds	r5, #27
   d7718:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d771c:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d7720:	2d00      	cmp	r5, #0
   d7722:	d04a      	beq.n	d77ba <_ZN9FatVolume4initEh+0xe8>
   d7724:	2200      	movs	r2, #0
   d7726:	4629      	mov	r1, r5
   d7728:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d772c:	f7ff fee9 	bl	d7502 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d7730:	2800      	cmp	r0, #0
   d7732:	d042      	beq.n	d77ba <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d7734:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d7738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d773c:	d13d      	bne.n	d77ba <_ZN9FatVolume4initEh+0xe8>
   d773e:	7c03      	ldrb	r3, [r0, #16]
   d7740:	2b02      	cmp	r3, #2
   d7742:	d13a      	bne.n	d77ba <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d7744:	89c3      	ldrh	r3, [r0, #14]
   d7746:	2b00      	cmp	r3, #0
   d7748:	d037      	beq.n	d77ba <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d774a:	7b41      	ldrb	r1, [r0, #13]
   d774c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d774e:	1e4b      	subs	r3, r1, #1
   d7750:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d7752:	2300      	movs	r3, #0
   d7754:	71a3      	strb	r3, [r4, #6]
   d7756:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7758:	2301      	movs	r3, #1
   d775a:	428b      	cmp	r3, r1
   d775c:	d007      	beq.n	d776e <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d775e:	3e01      	subs	r6, #1
   d7760:	d02b      	beq.n	d77ba <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7762:	79a2      	ldrb	r2, [r4, #6]
   d7764:	005b      	lsls	r3, r3, #1
   d7766:	3201      	adds	r2, #1
   d7768:	b2db      	uxtb	r3, r3
   d776a:	71a2      	strb	r2, [r4, #6]
   d776c:	e7f5      	b.n	d775a <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d776e:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d7770:	b902      	cbnz	r2, d7774 <_ZN9FatVolume4initEh+0xa2>
   d7772:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d7774:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d7776:	89c6      	ldrh	r6, [r0, #14]
   d7778:	442e      	add	r6, r5
   d777a:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d777c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d7780:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d7782:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d7786:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d7788:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d778c:	0152      	lsls	r2, r2, #5
   d778e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d7792:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d7796:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d7798:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d779c:	b903      	cbnz	r3, d77a0 <_ZN9FatVolume4initEh+0xce>
   d779e:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d77a0:	1aad      	subs	r5, r5, r2
   d77a2:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d77a4:	79a5      	ldrb	r5, [r4, #6]
   d77a6:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d77aa:	1c6b      	adds	r3, r5, #1
   d77ac:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d77ae:	f640 73f4 	movw	r3, #4084	; 0xff4
   d77b2:	429d      	cmp	r5, r3
   d77b4:	d803      	bhi.n	d77be <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d77b6:	230c      	movs	r3, #12
   d77b8:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d77ba:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d77bc:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d77be:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d77c2:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d77c4:	bf85      	ittet	hi
   d77c6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d77c8:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d77ca:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d77cc:	2320      	movhi	r3, #32
   d77ce:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d77d0:	2001      	movs	r0, #1

fail:
  return false;
}
   d77d2:	bd70      	pop	{r4, r5, r6, pc}

000d77d4 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d77d4:	f001 bd18 	b.w	d9208 <HAL_Pin_Map>

000d77d8 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d77d8:	f001 bd16 	b.w	d9208 <HAL_Pin_Map>

000d77dc <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d77dc:	f001 bd14 	b.w	d9208 <HAL_Pin_Map>

000d77e0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d77e0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d77e2:	4c0e      	ldr	r4, [pc, #56]	; (d781c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d77e4:	460e      	mov	r6, r1
   d77e6:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d77e8:	f001 fda6 	bl	d9338 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d77ec:	6823      	ldr	r3, [r4, #0]
   d77ee:	1ac0      	subs	r0, r0, r3
   d77f0:	4b0b      	ldr	r3, [pc, #44]	; (d7820 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d77f2:	4298      	cmp	r0, r3
   d77f4:	d908      	bls.n	d7808 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d77f6:	f001 fda7 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d77fa:	4b0a      	ldr	r3, [pc, #40]	; (d7824 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d77fc:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d77fe:	f001 ffd9 	bl	d97b4 <spark_process>
   d7802:	f001 fd99 	bl	d9338 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d7806:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7808:	f001 fd9e 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d780c:	b280      	uxth	r0, r0
   d780e:	1b80      	subs	r0, r0, r6
}
   d7810:	42a8      	cmp	r0, r5
   d7812:	bfd4      	ite	le
   d7814:	2000      	movle	r0, #0
   d7816:	2001      	movgt	r0, #1
   d7818:	bd70      	pop	{r4, r5, r6, pc}
   d781a:	bf00      	nop
   d781c:	2003e1c0 	.word	0x2003e1c0
   d7820:	000186a0 	.word	0x000186a0
   d7824:	2003e608 	.word	0x2003e608

000d7828 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7828:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d782a:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d782c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d782e:	b94d      	cbnz	r5, d7844 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7830:	6840      	ldr	r0, [r0, #4]
   d7832:	f000 fa7d 	bl	d7d30 <_ZN14SdSpiAltDriver8activateEv>
   d7836:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7838:	4629      	mov	r1, r5
   d783a:	7d18      	ldrb	r0, [r3, #20]
   d783c:	f003 ff2b 	bl	db696 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7840:	2301      	movs	r3, #1
   d7842:	7223      	strb	r3, [r4, #8]
   d7844:	bd38      	pop	{r3, r4, r5, pc}

000d7846 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7846:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7848:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d784a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d784c:	b16b      	cbz	r3, d786a <_ZN9SdSpiCard7spiStopEv+0x24>
   d784e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d7850:	2101      	movs	r1, #1
   d7852:	7d18      	ldrb	r0, [r3, #20]
   d7854:	f003 ff1f 	bl	db696 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7858:	21ff      	movs	r1, #255	; 0xff
   d785a:	6860      	ldr	r0, [r4, #4]
   d785c:	f000 fa9a 	bl	d7d94 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d7860:	6860      	ldr	r0, [r4, #4]
   d7862:	f000 fa79 	bl	d7d58 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d7866:	2300      	movs	r3, #0
   d7868:	7223      	strb	r3, [r4, #8]
   d786a:	bd10      	pop	{r4, pc}

000d786c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d786e:	4604      	mov	r4, r0
   d7870:	460d      	mov	r5, r1
   d7872:	4616      	mov	r6, r2
   d7874:	f001 fd68 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d7878:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d787a:	6860      	ldr	r0, [r4, #4]
   d787c:	f000 fa6f 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d7880:	28ff      	cmp	r0, #255	; 0xff
   d7882:	7260      	strb	r0, [r4, #9]
   d7884:	d109      	bne.n	d789a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d7886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d788a:	4639      	mov	r1, r7
   d788c:	4620      	mov	r0, r4
   d788e:	f7ff ffa7 	bl	d77e0 <_ZN9SdSpiCard10isTimedOutEtt>
   d7892:	2800      	cmp	r0, #0
   d7894:	d0f1      	beq.n	d787a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7896:	2355      	movs	r3, #85	; 0x55
   d7898:	e00b      	b.n	d78b2 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d789a:	28fe      	cmp	r0, #254	; 0xfe
   d789c:	d001      	beq.n	d78a2 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d789e:	2350      	movs	r3, #80	; 0x50
   d78a0:	e007      	b.n	d78b2 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d78a2:	4632      	mov	r2, r6
   d78a4:	4629      	mov	r1, r5
   d78a6:	6860      	ldr	r0, [r4, #4]
   d78a8:	f000 fa5e 	bl	d7d68 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d78ac:	7260      	strb	r0, [r4, #9]
   d78ae:	b130      	cbz	r0, d78be <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d78b0:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d78b2:	4620      	mov	r0, r4
   d78b4:	7023      	strb	r3, [r4, #0]
   d78b6:	f7ff ffc6 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d78ba:	2000      	movs	r0, #0
}
   d78bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d78be:	6860      	ldr	r0, [r4, #4]
   d78c0:	f000 fa4d 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
   d78c4:	6860      	ldr	r0, [r4, #4]
   d78c6:	f000 fa4a 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
   d78ca:	2001      	movs	r0, #1
   d78cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78ce <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d78ce:	b570      	push	{r4, r5, r6, lr}
   d78d0:	4604      	mov	r4, r0
   d78d2:	460e      	mov	r6, r1
   d78d4:	f001 fd38 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
   d78d8:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d78da:	4632      	mov	r2, r6
   d78dc:	4629      	mov	r1, r5
   d78de:	4620      	mov	r0, r4
   d78e0:	f7ff ff7e 	bl	d77e0 <_ZN9SdSpiCard10isTimedOutEtt>
   d78e4:	b930      	cbnz	r0, d78f4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d78e6:	6860      	ldr	r0, [r4, #4]
   d78e8:	f000 fa39 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d78ec:	28ff      	cmp	r0, #255	; 0xff
   d78ee:	d1f4      	bne.n	d78da <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d78f0:	2001      	movs	r0, #1
   d78f2:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d78f4:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d78f6:	bd70      	pop	{r4, r5, r6, pc}

000d78f8 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d78f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d78fa:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d78fc:	9201      	str	r2, [sp, #4]
   d78fe:	4604      	mov	r4, r0
   d7900:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d7902:	b90b      	cbnz	r3, d7908 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7904:	f7ff ff90 	bl	d7828 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d7908:	b125      	cbz	r5, d7914 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d790a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d790e:	4620      	mov	r0, r4
   d7910:	f7ff ffdd 	bl	d78ce <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7914:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7918:	6860      	ldr	r0, [r4, #4]
   d791a:	f000 fa3b 	bl	d7d94 <_ZN14SdSpiAltDriver4sendEh>
   d791e:	f10d 0607 	add.w	r6, sp, #7
   d7922:	f10d 0703 	add.w	r7, sp, #3
   d7926:	f816 1901 	ldrb.w	r1, [r6], #-1
   d792a:	6860      	ldr	r0, [r4, #4]
   d792c:	f000 fa32 	bl	d7d94 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d7930:	42be      	cmp	r6, r7
   d7932:	d1f8      	bne.n	d7926 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d7934:	2d00      	cmp	r5, #0
   d7936:	bf0c      	ite	eq
   d7938:	2195      	moveq	r1, #149	; 0x95
   d793a:	2187      	movne	r1, #135	; 0x87
   d793c:	6860      	ldr	r0, [r4, #4]
   d793e:	f000 fa29 	bl	d7d94 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7942:	6860      	ldr	r0, [r4, #4]
   d7944:	f000 fa0b 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
   d7948:	250b      	movs	r5, #11
   d794a:	6860      	ldr	r0, [r4, #4]
   d794c:	f000 fa07 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7950:	0603      	lsls	r3, r0, #24
   d7952:	7260      	strb	r0, [r4, #9]
   d7954:	d503      	bpl.n	d795e <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d7956:	3d01      	subs	r5, #1
   d7958:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d795c:	d1f5      	bne.n	d794a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d795e:	b003      	add	sp, #12
   d7960:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7962 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d7962:	b570      	push	{r4, r5, r6, lr}
   d7964:	4604      	mov	r4, r0
   d7966:	460d      	mov	r5, r1
   d7968:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d796a:	2137      	movs	r1, #55	; 0x37
   d796c:	2200      	movs	r2, #0
   d796e:	f7ff ffc3 	bl	d78f8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d7972:	4632      	mov	r2, r6
   d7974:	4629      	mov	r1, r5
   d7976:	4620      	mov	r0, r4
  }
   d7978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d797c:	f7ff bfbc 	b.w	d78f8 <_ZN9SdSpiCard11cardCommandEhm>

000d7980 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d7984:	2500      	movs	r5, #0
   d7986:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d7988:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d798a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d798c:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d798e:	4604      	mov	r4, r0
   d7990:	4690      	mov	r8, r2
   d7992:	461e      	mov	r6, r3
   d7994:	f001 fcd8 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d7998:	4641      	mov	r1, r8
   d799a:	4607      	mov	r7, r0
   d799c:	6860      	ldr	r0, [r4, #4]
   d799e:	f000 f9cb 	bl	d7d38 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d79a2:	6863      	ldr	r3, [r4, #4]
   d79a4:	4a4f      	ldr	r2, [pc, #316]	; (d7ae4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d79a6:	721d      	strb	r5, [r3, #8]
   d79a8:	f04f 0801 	mov.w	r8, #1
   d79ac:	60da      	str	r2, [r3, #12]
   d79ae:	745d      	strb	r5, [r3, #17]
   d79b0:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d79b4:	4620      	mov	r0, r4
   d79b6:	f7ff ff37 	bl	d7828 <_ZN9SdSpiCard8spiStartEv>
   d79ba:	6863      	ldr	r3, [r4, #4]
   d79bc:	4641      	mov	r1, r8
   d79be:	7d18      	ldrb	r0, [r3, #20]
   d79c0:	f003 fe69 	bl	db696 <digitalWrite>
   d79c4:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d79c6:	21ff      	movs	r1, #255	; 0xff
   d79c8:	6860      	ldr	r0, [r4, #4]
   d79ca:	3d01      	subs	r5, #1
   d79cc:	f000 f9e2 	bl	d7d94 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d79d0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d79d4:	d1f7      	bne.n	d79c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d79d6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d79d8:	4629      	mov	r1, r5
   d79da:	7d18      	ldrb	r0, [r3, #20]
   d79dc:	f003 fe5b 	bl	db696 <digitalWrite>
   d79e0:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d79e2:	2200      	movs	r2, #0
   d79e4:	4611      	mov	r1, r2
   d79e6:	4620      	mov	r0, r4
   d79e8:	f7ff ff86 	bl	d78f8 <_ZN9SdSpiCard11cardCommandEhm>
   d79ec:	2801      	cmp	r0, #1
   d79ee:	4680      	mov	r8, r0
   d79f0:	d012      	beq.n	d7a18 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d79f2:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d79f4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d79f8:	d101      	bne.n	d79fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d79fa:	2320      	movs	r3, #32
   d79fc:	e057      	b.n	d7aae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d79fe:	21fd      	movs	r1, #253	; 0xfd
   d7a00:	6860      	ldr	r0, [r4, #4]
   d7a02:	f000 f9c7 	bl	d7d94 <_ZN14SdSpiAltDriver4sendEh>
   d7a06:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7a0a:	6860      	ldr	r0, [r4, #4]
   d7a0c:	f000 f9a7 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d7a10:	f1b8 0801 	subs.w	r8, r8, #1
   d7a14:	d1f9      	bne.n	d7a0a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d7a16:	e7e4      	b.n	d79e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7a18:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7a1c:	2108      	movs	r1, #8
   d7a1e:	4620      	mov	r0, r4
   d7a20:	f7ff ff6a 	bl	d78f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7a24:	2805      	cmp	r0, #5
   d7a26:	d102      	bne.n	d7a2e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7a28:	f884 800a 	strb.w	r8, [r4, #10]
   d7a2c:	e00f      	b.n	d7a4e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d7a2e:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7a30:	6860      	ldr	r0, [r4, #4]
   d7a32:	f000 f994 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
   d7a36:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7a38:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d7a3c:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7a3e:	d1f7      	bne.n	d7a30 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d7a40:	28aa      	cmp	r0, #170	; 0xaa
   d7a42:	d102      	bne.n	d7a4a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7a44:	2302      	movs	r3, #2
   d7a46:	72a3      	strb	r3, [r4, #10]
   d7a48:	e001      	b.n	d7a4e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7a4a:	2325      	movs	r3, #37	; 0x25
   d7a4c:	e02f      	b.n	d7aae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7a4e:	7aa3      	ldrb	r3, [r4, #10]
   d7a50:	2b02      	cmp	r3, #2
   d7a52:	bf0c      	ite	eq
   d7a54:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d7a58:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7a5a:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d7a5c:	462a      	mov	r2, r5
   d7a5e:	2129      	movs	r1, #41	; 0x29
   d7a60:	4620      	mov	r0, r4
   d7a62:	f7ff ff7e 	bl	d7962 <_ZN9SdSpiCard8cardAcmdEhm>
   d7a66:	4602      	mov	r2, r0
   d7a68:	b148      	cbz	r0, d7a7e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7a6a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7a6e:	4639      	mov	r1, r7
   d7a70:	4620      	mov	r0, r4
   d7a72:	f7ff feb5 	bl	d77e0 <_ZN9SdSpiCard10isTimedOutEtt>
   d7a76:	2800      	cmp	r0, #0
   d7a78:	d0f0      	beq.n	d7a5c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d7a7a:	2343      	movs	r3, #67	; 0x43
   d7a7c:	e017      	b.n	d7aae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d7a7e:	7aa3      	ldrb	r3, [r4, #10]
   d7a80:	2b02      	cmp	r3, #2
   d7a82:	d00e      	beq.n	d7aa2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d7a84:	4620      	mov	r0, r4
   d7a86:	f7ff fede 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d7a8a:	6863      	ldr	r3, [r4, #4]
   d7a8c:	68b0      	ldr	r0, [r6, #8]
   d7a8e:	7934      	ldrb	r4, [r6, #4]
   d7a90:	7b31      	ldrb	r1, [r6, #12]
   d7a92:	7b72      	ldrb	r2, [r6, #13]
   d7a94:	745a      	strb	r2, [r3, #17]
   d7a96:	60d8      	str	r0, [r3, #12]
   d7a98:	721c      	strb	r4, [r3, #8]
   d7a9a:	7419      	strb	r1, [r3, #16]
  return true;
   d7a9c:	2001      	movs	r0, #1
   d7a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d7aa2:	213a      	movs	r1, #58	; 0x3a
   d7aa4:	4620      	mov	r0, r4
   d7aa6:	f7ff ff27 	bl	d78f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7aaa:	b138      	cbz	r0, d7abc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d7aac:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d7aae:	4620      	mov	r0, r4
   d7ab0:	7023      	strb	r3, [r4, #0]
   d7ab2:	f7ff fec8 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7ab6:	2000      	movs	r0, #0
}
   d7ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7abc:	6860      	ldr	r0, [r4, #4]
   d7abe:	f000 f94e 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d7ac2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d7ac6:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7ac8:	bf04      	itt	eq
   d7aca:	2303      	moveq	r3, #3
   d7acc:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7ace:	6860      	ldr	r0, [r4, #4]
   d7ad0:	f000 f945 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
   d7ad4:	6860      	ldr	r0, [r4, #4]
   d7ad6:	f000 f942 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
   d7ada:	6860      	ldr	r0, [r4, #4]
   d7adc:	f000 f93f 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
   d7ae0:	e7d0      	b.n	d7a84 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d7ae2:	bf00      	nop
   d7ae4:	0003d090 	.word	0x0003d090

000d7ae8 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7ae8:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7aea:	7a83      	ldrb	r3, [r0, #10]
   d7aec:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7aee:	bf18      	it	ne
   d7af0:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7af2:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7af4:	460a      	mov	r2, r1
   d7af6:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7af8:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7afa:	f7ff fefd 	bl	d78f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7afe:	b110      	cbz	r0, d7b06 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7b00:	2330      	movs	r3, #48	; 0x30
   d7b02:	7023      	strb	r3, [r4, #0]
   d7b04:	e00b      	b.n	d7b1e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d7b06:	4629      	mov	r1, r5
   d7b08:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7b0c:	4620      	mov	r0, r4
   d7b0e:	f7ff fead 	bl	d786c <_ZN9SdSpiCard8readDataEPhj>
   d7b12:	4605      	mov	r5, r0
   d7b14:	b118      	cbz	r0, d7b1e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d7b16:	4620      	mov	r0, r4
   d7b18:	f7ff fe95 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7b1c:	e003      	b.n	d7b26 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d7b1e:	4620      	mov	r0, r4
   d7b20:	f7ff fe91 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7b24:	2500      	movs	r5, #0
}
   d7b26:	4628      	mov	r0, r5
   d7b28:	bd38      	pop	{r3, r4, r5, pc}

000d7b2a <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7b2a:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d7b2c:	7a83      	ldrb	r3, [r0, #10]
   d7b2e:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7b30:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7b32:	bf18      	it	ne
   d7b34:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7b36:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7b38:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7b3a:	f7ff fedd 	bl	d78f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7b3e:	b130      	cbz	r0, d7b4e <_ZN9SdSpiCard9readStartEm+0x24>
   d7b40:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d7b42:	4620      	mov	r0, r4
   d7b44:	7023      	strb	r3, [r4, #0]
   d7b46:	f7ff fe7e 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7b4a:	2000      	movs	r0, #0
   d7b4c:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d7b4e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7b50:	bd10      	pop	{r4, pc}

000d7b52 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7b52:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d7b54:	2200      	movs	r2, #0
   d7b56:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7b58:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d7b5a:	f7ff fecd 	bl	d78f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7b5e:	b130      	cbz	r0, d7b6e <_ZN9SdSpiCard8readStopEv+0x1c>
   d7b60:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d7b62:	4620      	mov	r0, r4
   d7b64:	7023      	strb	r3, [r4, #0]
   d7b66:	f7ff fe6e 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7b6a:	2000      	movs	r0, #0
   d7b6c:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d7b6e:	4620      	mov	r0, r4
   d7b70:	f7ff fe69 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7b74:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7b76:	bd10      	pop	{r4, pc}

000d7b78 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b7a:	4605      	mov	r5, r0
   d7b7c:	4616      	mov	r6, r2
   d7b7e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7b80:	f7ff ffd3 	bl	d7b2a <_ZN9SdSpiCard9readStartEm>
   d7b84:	b198      	cbz	r0, d7bae <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d7b86:	2400      	movs	r4, #0
   d7b88:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d7b8a:	429f      	cmp	r7, r3
   d7b8c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d7b90:	d908      	bls.n	d7ba4 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d7b92:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7b96:	4628      	mov	r0, r5
   d7b98:	f7ff fe68 	bl	d786c <_ZN9SdSpiCard8readDataEPhj>
   d7b9c:	3401      	adds	r4, #1
   d7b9e:	2800      	cmp	r0, #0
   d7ba0:	d1f2      	bne.n	d7b88 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d7ba2:	e004      	b.n	d7bae <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d7ba4:	4628      	mov	r0, r5
}
   d7ba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d7baa:	f7ff bfd2 	b.w	d7b52 <_ZN9SdSpiCard8readStopEv>
}
   d7bae:	2000      	movs	r0, #0
   d7bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7bb2 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d7bb2:	b538      	push	{r3, r4, r5, lr}
   d7bb4:	4604      	mov	r4, r0
   d7bb6:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7bb8:	6840      	ldr	r0, [r0, #4]
   d7bba:	f000 f8eb 	bl	d7d94 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d7bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7bc2:	4629      	mov	r1, r5
   d7bc4:	6860      	ldr	r0, [r4, #4]
   d7bc6:	f000 f8e9 	bl	d7d9c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7bca:	21ff      	movs	r1, #255	; 0xff
   d7bcc:	6860      	ldr	r0, [r4, #4]
   d7bce:	f000 f8e1 	bl	d7d94 <_ZN14SdSpiAltDriver4sendEh>
   d7bd2:	21ff      	movs	r1, #255	; 0xff
   d7bd4:	6860      	ldr	r0, [r4, #4]
   d7bd6:	f000 f8dd 	bl	d7d94 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7bda:	6860      	ldr	r0, [r4, #4]
   d7bdc:	f000 f8bf 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7be0:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d7be2:	f000 001f 	and.w	r0, r0, #31
   d7be6:	2805      	cmp	r0, #5
   d7be8:	d006      	beq.n	d7bf8 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7bea:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7bec:	4620      	mov	r0, r4
   d7bee:	7023      	strb	r3, [r4, #0]
   d7bf0:	f7ff fe29 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7bf4:	2000      	movs	r0, #0
   d7bf6:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d7bf8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7bfa:	bd38      	pop	{r3, r4, r5, pc}

000d7bfc <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7bfc:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7bfe:	7a83      	ldrb	r3, [r0, #10]
   d7c00:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7c02:	bf18      	it	ne
   d7c04:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7c06:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7c08:	460a      	mov	r2, r1
   d7c0a:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7c0c:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7c0e:	f7ff fe73 	bl	d78f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7c12:	4606      	mov	r6, r0
   d7c14:	b108      	cbz	r0, d7c1a <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d7c16:	2332      	movs	r3, #50	; 0x32
   d7c18:	e01d      	b.n	d7c56 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d7c1a:	462a      	mov	r2, r5
   d7c1c:	21fe      	movs	r1, #254	; 0xfe
   d7c1e:	4620      	mov	r0, r4
   d7c20:	f7ff ffc7 	bl	d7bb2 <_ZN9SdSpiCard9writeDataEhPKh>
   d7c24:	b1c0      	cbz	r0, d7c58 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7c26:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7c2a:	4620      	mov	r0, r4
   d7c2c:	f7ff fe4f 	bl	d78ce <_ZN9SdSpiCard11waitNotBusyEt>
   d7c30:	4605      	mov	r5, r0
   d7c32:	b908      	cbnz	r0, d7c38 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d7c34:	235a      	movs	r3, #90	; 0x5a
   d7c36:	e00e      	b.n	d7c56 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7c38:	4632      	mov	r2, r6
   d7c3a:	210d      	movs	r1, #13
   d7c3c:	4620      	mov	r0, r4
   d7c3e:	f7ff fe5b 	bl	d78f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7c42:	b938      	cbnz	r0, d7c54 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7c44:	6860      	ldr	r0, [r4, #4]
   d7c46:	f000 f88a 	bl	d7d5e <_ZN14SdSpiAltDriver7receiveEv>
   d7c4a:	b918      	cbnz	r0, d7c54 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	f7ff fdfa 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7c52:	e005      	b.n	d7c60 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7c54:	2329      	movs	r3, #41	; 0x29
   d7c56:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d7c58:	4620      	mov	r0, r4
   d7c5a:	f7ff fdf4 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7c5e:	2500      	movs	r5, #0
}
   d7c60:	4628      	mov	r0, r5
   d7c62:	bd70      	pop	{r4, r5, r6, pc}

000d7c64 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7c64:	b538      	push	{r3, r4, r5, lr}
   d7c66:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7c68:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7c6c:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7c6e:	f7ff fe2e 	bl	d78ce <_ZN9SdSpiCard11waitNotBusyEt>
   d7c72:	b910      	cbnz	r0, d7c7a <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d7c74:	235b      	movs	r3, #91	; 0x5b
   d7c76:	7023      	strb	r3, [r4, #0]
   d7c78:	e005      	b.n	d7c86 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7c7a:	462a      	mov	r2, r5
   d7c7c:	21fc      	movs	r1, #252	; 0xfc
   d7c7e:	4620      	mov	r0, r4
   d7c80:	f7ff ff97 	bl	d7bb2 <_ZN9SdSpiCard9writeDataEhPKh>
   d7c84:	b918      	cbnz	r0, d7c8e <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7c86:	4620      	mov	r0, r4
   d7c88:	f7ff fddd 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7c8c:	2000      	movs	r0, #0
}
   d7c8e:	bd38      	pop	{r3, r4, r5, pc}

000d7c90 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7c90:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7c92:	7a83      	ldrb	r3, [r0, #10]
   d7c94:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7c96:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7c98:	bf18      	it	ne
   d7c9a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7c9c:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7c9e:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7ca0:	f7ff fe2a 	bl	d78f8 <_ZN9SdSpiCard11cardCommandEhm>
   d7ca4:	b130      	cbz	r0, d7cb4 <_ZN9SdSpiCard10writeStartEm+0x24>
   d7ca6:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7ca8:	4620      	mov	r0, r4
   d7caa:	7023      	strb	r3, [r4, #0]
   d7cac:	f7ff fdcb 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7cb0:	2000      	movs	r0, #0
   d7cb2:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d7cb4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7cb6:	bd10      	pop	{r4, pc}

000d7cb8 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7cb8:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7cba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7cbe:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7cc0:	f7ff fe05 	bl	d78ce <_ZN9SdSpiCard11waitNotBusyEt>
   d7cc4:	4605      	mov	r5, r0
   d7cc6:	b120      	cbz	r0, d7cd2 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7cc8:	21fd      	movs	r1, #253	; 0xfd
   d7cca:	6860      	ldr	r0, [r4, #4]
   d7ccc:	f000 f862 	bl	d7d94 <_ZN14SdSpiAltDriver4sendEh>
   d7cd0:	e001      	b.n	d7cd6 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7cd2:	2356      	movs	r3, #86	; 0x56
   d7cd4:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d7cd6:	4620      	mov	r0, r4
   d7cd8:	f7ff fdb5 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7cdc:	4628      	mov	r0, r5
   d7cde:	bd38      	pop	{r3, r4, r5, pc}

000d7ce0 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ce2:	4605      	mov	r5, r0
   d7ce4:	4616      	mov	r6, r2
   d7ce6:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7ce8:	f7ff ffd2 	bl	d7c90 <_ZN9SdSpiCard10writeStartEm>
   d7cec:	b170      	cbz	r0, d7d0c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d7cee:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7cf0:	42bc      	cmp	r4, r7
   d7cf2:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7cf6:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7cf8:	d004      	beq.n	d7d04 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7cfa:	f7ff ffb3 	bl	d7c64 <_ZN9SdSpiCard9writeDataEPKh>
   d7cfe:	b128      	cbz	r0, d7d0c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7d00:	3401      	adds	r4, #1
   d7d02:	e7f5      	b.n	d7cf0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d7d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7d08:	f7ff bfd6 	b.w	d7cb8 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d7d0c:	4628      	mov	r0, r5
   d7d0e:	f7ff fd9a 	bl	d7846 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7d12:	2000      	movs	r0, #0
   d7d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7d16 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d7d16:	f001 ba77 	b.w	d9208 <HAL_Pin_Map>

000d7d1a <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d7d1a:	f001 ba75 	b.w	d9208 <HAL_Pin_Map>

000d7d1e <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d7d1e:	f001 ba73 	b.w	d9208 <HAL_Pin_Map>
	...

000d7d24 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7d24:	4b01      	ldr	r3, [pc, #4]	; (d7d2c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7d26:	2201      	movs	r2, #1
   d7d28:	701a      	strb	r2, [r3, #0]
   d7d2a:	4770      	bx	lr
   d7d2c:	2003e1c4 	.word	0x2003e1c4

000d7d30 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7d30:	1d01      	adds	r1, r0, #4
   d7d32:	6800      	ldr	r0, [r0, #0]
   d7d34:	f001 be5e 	b.w	d99f4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d7d38 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7d38:	b510      	push	{r4, lr}
   d7d3a:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7d3c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7d3e:	6800      	ldr	r0, [r0, #0]
   d7d40:	f001 fe2e 	bl	d99a0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7d44:	7d20      	ldrb	r0, [r4, #20]
   d7d46:	2101      	movs	r1, #1
   d7d48:	f003 fc94 	bl	db674 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7d4c:	7d20      	ldrb	r0, [r4, #20]
   d7d4e:	2101      	movs	r1, #1
}
   d7d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d7d54:	f003 bc9f 	b.w	db696 <digitalWrite>

000d7d58 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7d58:	6800      	ldr	r0, [r0, #0]
   d7d5a:	f001 be32 	b.w	d99c2 <_ZN8SPIClass14endTransactionEv>

000d7d5e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7d5e:	21ff      	movs	r1, #255	; 0xff
   d7d60:	6800      	ldr	r0, [r0, #0]
   d7d62:	f001 beb7 	b.w	d9ad4 <_ZN8SPIClass8transferEh>
	...

000d7d68 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7d6a:	4b08      	ldr	r3, [pc, #32]	; (d7d8c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7d6c:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7d6e:	2500      	movs	r5, #0
   d7d70:	4c07      	ldr	r4, [pc, #28]	; (d7d90 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7d72:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7d74:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7d76:	4613      	mov	r3, r2
   d7d78:	460a      	mov	r2, r1
   d7d7a:	4629      	mov	r1, r5
   d7d7c:	f001 feb0 	bl	d9ae0 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7d80:	7823      	ldrb	r3, [r4, #0]
   d7d82:	2b00      	cmp	r3, #0
   d7d84:	d0fc      	beq.n	d7d80 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d7d86:	2000      	movs	r0, #0
   d7d88:	b003      	add	sp, #12
   d7d8a:	bd30      	pop	{r4, r5, pc}
   d7d8c:	000d7d25 	.word	0x000d7d25
   d7d90:	2003e1c4 	.word	0x2003e1c4

000d7d94 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7d94:	6800      	ldr	r0, [r0, #0]
   d7d96:	f001 be9d 	b.w	d9ad4 <_ZN8SPIClass8transferEh>
	...

000d7d9c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7d9e:	4b07      	ldr	r3, [pc, #28]	; (d7dbc <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7da0:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7da2:	2500      	movs	r5, #0
   d7da4:	4c06      	ldr	r4, [pc, #24]	; (d7dc0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7da6:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7da8:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7daa:	4613      	mov	r3, r2
   d7dac:	462a      	mov	r2, r5
   d7dae:	f001 fe97 	bl	d9ae0 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d7db2:	7823      	ldrb	r3, [r4, #0]
   d7db4:	2b00      	cmp	r3, #0
   d7db6:	d0fc      	beq.n	d7db2 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7db8:	b003      	add	sp, #12
   d7dba:	bd30      	pop	{r4, r5, pc}
   d7dbc:	000d7d25 	.word	0x000d7d25
   d7dc0:	2003e1c4 	.word	0x2003e1c4

000d7dc4 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d7dc4:	f001 ba20 	b.w	d9208 <HAL_Pin_Map>

000d7dc8 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d7dc8:	b510      	push	{r4, lr}
   d7dca:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d7dcc:	f003 fcae 	bl	db72c <_Z19__fetch_global_Wirev>
   d7dd0:	6803      	ldr	r3, [r0, #0]
   d7dd2:	4621      	mov	r1, r4
   d7dd4:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d7dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d7dda:	4718      	bx	r3

000d7ddc <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d7ddc:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d7dde:	f003 fca5 	bl	db72c <_Z19__fetch_global_Wirev>
   d7de2:	6803      	ldr	r3, [r0, #0]
   d7de4:	695b      	ldr	r3, [r3, #20]
   d7de6:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d7de8:	b2c0      	uxtb	r0, r0
   d7dea:	bd08      	pop	{r3, pc}

000d7dec <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d7dec:	b538      	push	{r3, r4, r5, lr}
   d7dee:	4604      	mov	r4, r0
   d7df0:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d7df2:	f003 fc9b 	bl	db72c <_Z19__fetch_global_Wirev>
   d7df6:	7821      	ldrb	r1, [r4, #0]
   d7df8:	f041 0120 	orr.w	r1, r1, #32
   d7dfc:	f003 fa7d 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d7e00:	4628      	mov	r0, r5
   d7e02:	f7ff ffe1 	bl	d7dc8 <_ZL8wiresendh>
	Wire.endTransmission();
   d7e06:	f003 fc91 	bl	db72c <_Z19__fetch_global_Wirev>
   d7e0a:	f003 fa7d 	bl	db308 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d7e0e:	f003 fc8d 	bl	db72c <_Z19__fetch_global_Wirev>
   d7e12:	7821      	ldrb	r1, [r4, #0]
   d7e14:	2201      	movs	r2, #1
   d7e16:	f041 0120 	orr.w	r1, r1, #32
   d7e1a:	f003 fa67 	bl	db2ec <_ZN7TwoWire11requestFromEhj>
	return wirerecv();
}
   d7e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d7e22:	f7ff bfdb 	b.w	d7ddc <_ZL8wirerecvv>

000d7e26 <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d7e26:	b570      	push	{r4, r5, r6, lr}
   d7e28:	4606      	mov	r6, r0
   d7e2a:	4614      	mov	r4, r2
   d7e2c:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d7e2e:	f003 fc7d 	bl	db72c <_Z19__fetch_global_Wirev>
   d7e32:	7831      	ldrb	r1, [r6, #0]
   d7e34:	f041 0120 	orr.w	r1, r1, #32
   d7e38:	f003 fa5f 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d7e3c:	4628      	mov	r0, r5
   d7e3e:	f7ff ffc3 	bl	d7dc8 <_ZL8wiresendh>
	wiresend(regValue);
   d7e42:	4620      	mov	r0, r4
   d7e44:	f7ff ffc0 	bl	d7dc8 <_ZL8wiresendh>
	Wire.endTransmission();
   d7e48:	f003 fc70 	bl	db72c <_Z19__fetch_global_Wirev>
}
   d7e4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d7e50:	f003 ba5a 	b.w	db308 <_ZN7TwoWire15endTransmissionEv>

000d7e54 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d7e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7e58:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d7e5c:	2907      	cmp	r1, #7
   d7e5e:	bf98      	it	ls
   d7e60:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d7e62:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d7e66:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d7e68:	4631      	mov	r1, r6
   d7e6a:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d7e6c:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d7e6e:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d7e70:	f7ff ffbc 	bl	d7dec <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d7e74:	f1b8 0f00 	cmp.w	r8, #0
   d7e78:	d001      	beq.n	d7e7e <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d7e7a:	4304      	orrs	r4, r0
   d7e7c:	e001      	b.n	d7e82 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d7e7e:	ea20 0404 	bic.w	r4, r0, r4
   d7e82:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d7e84:	4631      	mov	r1, r6
   d7e86:	4628      	mov	r0, r5
}
   d7e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d7e8c:	f7ff bfcb 	b.w	d7e26 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d7e90 <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d7e90:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d7e92:	2907      	cmp	r1, #7
   d7e94:	bf28      	it	cs
   d7e96:	2107      	movcs	r1, #7
   d7e98:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d7e9a:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d7e9c:	f003 fc46 	bl	db72c <_Z19__fetch_global_Wirev>
   d7ea0:	f003 f9f0 	bl	db284 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d7ea4:	4620      	mov	r0, r4
   d7ea6:	22ff      	movs	r2, #255	; 0xff
   d7ea8:	2100      	movs	r1, #0
   d7eaa:	f7ff ffbc 	bl	d7e26 <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d7eae:	4620      	mov	r0, r4
   d7eb0:	22ff      	movs	r2, #255	; 0xff
   d7eb2:	2101      	movs	r1, #1
}
   d7eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d7eb8:	f7ff bfb5 	b.w	d7e26 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d7ebc <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d7ebc:	2100      	movs	r1, #0
   d7ebe:	f7ff bfe7 	b.w	d7e90 <_ZN17Adafruit_MCP230175beginEh>

000d7ec2 <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d7ec2:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d7ec4:	2301      	movs	r3, #1
   d7ec6:	fab2 f282 	clz	r2, r2
   d7eca:	9300      	str	r3, [sp, #0]
   d7ecc:	0952      	lsrs	r2, r2, #5
   d7ece:	2300      	movs	r3, #0
   d7ed0:	f7ff ffc0 	bl	d7e54 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d7ed4:	b003      	add	sp, #12
   d7ed6:	f85d fb04 	ldr.w	pc, [sp], #4

000d7eda <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d7eda:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d7edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d7ede:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d7ee2:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d7ee4:	bf34      	ite	cc
   d7ee6:	2114      	movcc	r1, #20
   d7ee8:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d7eea:	4605      	mov	r5, r0
   d7eec:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d7eee:	f7ff ff7d 	bl	d7dec <_ZN17Adafruit_MCP2301712readRegisterEh>
   d7ef2:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d7ef4:	40b3      	lsls	r3, r6
   d7ef6:	b10f      	cbz	r7, d7efc <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d7ef8:	4303      	orrs	r3, r0
   d7efa:	e001      	b.n	d7f00 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d7efc:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d7f00:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d7f02:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d7f04:	4628      	mov	r0, r5
   d7f06:	bf34      	ite	cc
   d7f08:	2112      	movcc	r1, #18
   d7f0a:	2113      	movcs	r1, #19
}
   d7f0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d7f10:	f7ff bf89 	b.w	d7e26 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d7f14 <_ZN17Adafruit_MCP230176pullUpEhh>:
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d7f14:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d7f16:	230d      	movs	r3, #13
   d7f18:	9300      	str	r3, [sp, #0]
   d7f1a:	230c      	movs	r3, #12
   d7f1c:	f7ff ff9a 	bl	d7e54 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d7f20:	b003      	add	sp, #12
   d7f22:	f85d fb04 	ldr.w	pc, [sp], #4

000d7f26 <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d7f26:	f001 b96f 	b.w	d9208 <HAL_Pin_Map>

000d7f2a <_ZN9MPL3115A2C1Ev>:
#include "SparkFun_MPL3115A2.h"

MPL3115A2::MPL3115A2()
{
  //Set initial values for private vars
}
   d7f2a:	4770      	bx	lr

000d7f2c <_ZN9MPL3115A28IIC_ReadEh>:
}


// These are the two I2C functions in this sketch.
byte MPL3115A2::IIC_Read(byte regAddr)
{
   d7f2c:	b510      	push	{r4, lr}
   d7f2e:	460c      	mov	r4, r1
  // This function reads one byte over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
   d7f30:	f003 fbfc 	bl	db72c <_Z19__fetch_global_Wirev>
   d7f34:	2160      	movs	r1, #96	; 0x60
   d7f36:	f003 f9e0 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);  // Address of CTRL_REG1
   d7f3a:	f003 fbf7 	bl	db72c <_Z19__fetch_global_Wirev>
   d7f3e:	6803      	ldr	r3, [r0, #0]
   d7f40:	4621      	mov	r1, r4
   d7f42:	689b      	ldr	r3, [r3, #8]
   d7f44:	4798      	blx	r3
  Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   d7f46:	f003 fbf1 	bl	db72c <_Z19__fetch_global_Wirev>
   d7f4a:	2100      	movs	r1, #0
   d7f4c:	f003 f9d8 	bl	db300 <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPL3115A2_ADDRESS, 1); // Request the data...
   d7f50:	f003 fbec 	bl	db72c <_Z19__fetch_global_Wirev>
   d7f54:	2201      	movs	r2, #1
   d7f56:	2160      	movs	r1, #96	; 0x60
   d7f58:	f003 f9c8 	bl	db2ec <_ZN7TwoWire11requestFromEhj>
  return Wire.read();
   d7f5c:	f003 fbe6 	bl	db72c <_Z19__fetch_global_Wirev>
   d7f60:	6803      	ldr	r3, [r0, #0]
   d7f62:	695b      	ldr	r3, [r3, #20]
   d7f64:	4798      	blx	r3
}
   d7f66:	b2c0      	uxtb	r0, r0
   d7f68:	bd10      	pop	{r4, pc}

000d7f6a <_ZN9MPL3115A25beginEv>:

//Begin
/*******************************************************************************************/
//Start I2C communication
bool MPL3115A2::begin()
{
   d7f6a:	b510      	push	{r4, lr}
   d7f6c:	4604      	mov	r4, r0
  Wire.begin();
   d7f6e:	f003 fbdd 	bl	db72c <_Z19__fetch_global_Wirev>
   d7f72:	f003 f987 	bl	db284 <_ZN7TwoWire5beginEv>
  uint8_t identify = IIC_Read(WHO_AM_I );
   d7f76:	210c      	movs	r1, #12
   d7f78:	4620      	mov	r0, r4
   d7f7a:	f7ff ffd7 	bl	d7f2c <_ZN9MPL3115A28IIC_ReadEh>
  {
    return false;
  }
  else
    return true;
}
   d7f7e:	f1a0 03c4 	sub.w	r3, r0, #196	; 0xc4
   d7f82:	4258      	negs	r0, r3
   d7f84:	4158      	adcs	r0, r3
   d7f86:	bd10      	pop	{r4, pc}

000d7f88 <_ZN9MPL3115A29IIC_WriteEhh>:
  Wire.requestFrom(MPL3115A2_ADDRESS, 1); // Request the data...
  return Wire.read();
}

void MPL3115A2::IIC_Write(byte regAddr, byte value)
{
   d7f88:	b538      	push	{r3, r4, r5, lr}
   d7f8a:	4614      	mov	r4, r2
   d7f8c:	460d      	mov	r5, r1
  // This function writes one byto over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
   d7f8e:	f003 fbcd 	bl	db72c <_Z19__fetch_global_Wirev>
   d7f92:	2160      	movs	r1, #96	; 0x60
   d7f94:	f003 f9b1 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);
   d7f98:	f003 fbc8 	bl	db72c <_Z19__fetch_global_Wirev>
   d7f9c:	6803      	ldr	r3, [r0, #0]
   d7f9e:	4629      	mov	r1, r5
   d7fa0:	689b      	ldr	r3, [r3, #8]
   d7fa2:	4798      	blx	r3
  Wire.write(value);
   d7fa4:	f003 fbc2 	bl	db72c <_Z19__fetch_global_Wirev>
   d7fa8:	6803      	ldr	r3, [r0, #0]
   d7faa:	4621      	mov	r1, r4
   d7fac:	689b      	ldr	r3, [r3, #8]
   d7fae:	4798      	blx	r3
  Wire.endTransmission(true);
   d7fb0:	f003 fbbc 	bl	db72c <_Z19__fetch_global_Wirev>
   d7fb4:	2101      	movs	r1, #1
}
   d7fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
  // This function writes one byto over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
  Wire.write(regAddr);
  Wire.write(value);
  Wire.endTransmission(true);
   d7fba:	f003 b9a1 	b.w	db300 <_ZN7TwoWire15endTransmissionEh>

000d7fbe <_ZN9MPL3115A216setModeBarometerEv>:
}

//Sets the mode to Barometer
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
   d7fbe:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7fc0:	2126      	movs	r1, #38	; 0x26
}

//Sets the mode to Barometer
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
   d7fc2:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7fc4:	f7ff ffb2 	bl	d7f2c <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= ~(1<<7); //Clear ALT bit
  IIC_Write(CTRL_REG1, tempSetting);
   d7fc8:	2126      	movs	r1, #38	; 0x26
   d7fca:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d7fce:	4620      	mov	r0, r4
}
   d7fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
  tempSetting &= ~(1<<7); //Clear ALT bit
  IIC_Write(CTRL_REG1, tempSetting);
   d7fd4:	f7ff bfd8 	b.w	d7f88 <_ZN9MPL3115A29IIC_WriteEhh>

000d7fd8 <_ZN9MPL3115A217setOversampleRateEh>:
//Call with a rate from 0 to 7. See page 33 for table of ratios.
//Sets the over sample rate. Datasheet calls for 128 but you can set it
//from 1 to 128 samples. The higher the oversample rate the greater
//the time between data samples.
void MPL3115A2::setOversampleRate(byte sampleRate)
{
   d7fd8:	2907      	cmp	r1, #7
   d7fda:	bf28      	it	cs
   d7fdc:	2107      	movcs	r1, #7
   d7fde:	b538      	push	{r3, r4, r5, lr}
   d7fe0:	460d      	mov	r5, r1
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7fe2:	2126      	movs	r1, #38	; 0x26
//Call with a rate from 0 to 7. See page 33 for table of ratios.
//Sets the over sample rate. Datasheet calls for 128 but you can set it
//from 1 to 128 samples. The higher the oversample rate the greater
//the time between data samples.
void MPL3115A2::setOversampleRate(byte sampleRate)
{
   d7fe4:	4604      	mov	r4, r0
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7fe6:	f7ff ffa1 	bl	d7f2c <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= 0b11000111; //Clear out old OS bits
   d7fea:	f000 00c7 	and.w	r0, r0, #199	; 0xc7
  tempSetting |= sampleRate; //Mask in new OS bits
  IIC_Write(CTRL_REG1, tempSetting);
   d7fee:	ea40 02c5 	orr.w	r2, r0, r5, lsl #3
   d7ff2:	b2d2      	uxtb	r2, r2
   d7ff4:	4620      	mov	r0, r4
   d7ff6:	2126      	movs	r1, #38	; 0x26
}
   d7ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
  tempSetting &= 0b11000111; //Clear out old OS bits
  tempSetting |= sampleRate; //Mask in new OS bits
  IIC_Write(CTRL_REG1, tempSetting);
   d7ffc:	f7ff bfc4 	b.w	d7f88 <_ZN9MPL3115A29IIC_WriteEhh>

000d8000 <_ZN9MPL3115A216enableEventFlagsEv>:

//Enables the pressure and temp measurement event flags so that we can
//test against them. This is recommended in datasheet during setup.
void MPL3115A2::enableEventFlags()
{
  IIC_Write(PT_DATA_CFG, 0x07); // Enable all three pressure and temp event flags
   d8000:	2207      	movs	r2, #7
   d8002:	2113      	movs	r1, #19
   d8004:	f7ff bfc0 	b.w	d7f88 <_ZN9MPL3115A29IIC_WriteEhh>

000d8008 <_ZN9MPL3115A213toggleOneShotEv>:
}

//Clears then sets the OST bit which causes the sensor to immediately take another reading
//Needed to sample faster than 1Hz
void MPL3115A2::toggleOneShot(void)
{
   d8008:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d800a:	2126      	movs	r1, #38	; 0x26
}

//Clears then sets the OST bit which causes the sensor to immediately take another reading
//Needed to sample faster than 1Hz
void MPL3115A2::toggleOneShot(void)
{
   d800c:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d800e:	f7ff ff8d 	bl	d7f2c <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= ~(1<<1); //Clear OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   d8012:	2126      	movs	r1, #38	; 0x26
   d8014:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
   d8018:	4620      	mov	r0, r4
   d801a:	f7ff ffb5 	bl	d7f88 <_ZN9MPL3115A29IIC_WriteEhh>

  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
   d801e:	2126      	movs	r1, #38	; 0x26
   d8020:	4620      	mov	r0, r4
   d8022:	f7ff ff83 	bl	d7f2c <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting |= (1<<1); //Set OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   d8026:	f040 0202 	orr.w	r2, r0, #2
   d802a:	b2d2      	uxtb	r2, r2
   d802c:	4620      	mov	r0, r4
   d802e:	2126      	movs	r1, #38	; 0x26
}
   d8030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tempSetting &= ~(1<<1); //Clear OST bit
  IIC_Write(CTRL_REG1, tempSetting);

  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
  tempSetting |= (1<<1); //Set OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   d8034:	f7ff bfa8 	b.w	d7f88 <_ZN9MPL3115A29IIC_WriteEhh>

000d8038 <_ZN9MPL3115A212readPressureEv>:

//Reads the current pressure in Pa
//Unit must be set in barometric pressure mode
//Returns -1 if no new data is available
float MPL3115A2::readPressure()
{
   d8038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Check PDR bit, if it's not set then toggle OST
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d803a:	2100      	movs	r1, #0

//Reads the current pressure in Pa
//Unit must be set in barometric pressure mode
//Returns -1 if no new data is available
float MPL3115A2::readPressure()
{
   d803c:	4607      	mov	r7, r0
	//Check PDR bit, if it's not set then toggle OST
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d803e:	f7ff ff75 	bl	d7f2c <_ZN9MPL3115A28IIC_ReadEh>

	//Wait for PDR bit, indicates we have new pressure data
	int counter = 0;
	while(IIC_Read(STATUS) & (1<<2) == 0)
   d8042:	2100      	movs	r1, #0
   d8044:	4638      	mov	r0, r7
   d8046:	f7ff ff71 	bl	d7f2c <_ZN9MPL3115A28IIC_ReadEh>
		if(++counter > 600) return(-999); //Error out after max of 512ms for a read
		delay(1);
	}

	// Read pressure registers
	Wire.beginTransmission(MPL3115A2_ADDRESS);
   d804a:	f003 fb6f 	bl	db72c <_Z19__fetch_global_Wirev>
   d804e:	2160      	movs	r1, #96	; 0x60
   d8050:	f003 f953 	bl	db2fa <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(OUT_P_MSB);  // Address of data to get
   d8054:	f003 fb6a 	bl	db72c <_Z19__fetch_global_Wirev>
   d8058:	2101      	movs	r1, #1
   d805a:	f7fd fd3e 	bl	d5ada <_ZN7TwoWire5writeEi>
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   d805e:	f003 fb65 	bl	db72c <_Z19__fetch_global_Wirev>
   d8062:	2100      	movs	r1, #0
   d8064:	f003 f94c 	bl	db300 <_ZN7TwoWire15endTransmissionEh>
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 3) != 3) { // Request three bytes
   d8068:	f003 fb60 	bl	db72c <_Z19__fetch_global_Wirev>
   d806c:	2203      	movs	r2, #3
   d806e:	2160      	movs	r1, #96	; 0x60
   d8070:	f003 f93c 	bl	db2ec <_ZN7TwoWire11requestFromEhj>
   d8074:	2803      	cmp	r0, #3
   d8076:	d12c      	bne.n	d80d2 <_ZN9MPL3115A212readPressureEv+0x9a>
		return -999;
	}

	byte msb, csb, lsb;
	msb = Wire.read();
   d8078:	f003 fb58 	bl	db72c <_Z19__fetch_global_Wirev>
   d807c:	6803      	ldr	r3, [r0, #0]
   d807e:	695b      	ldr	r3, [r3, #20]
   d8080:	4798      	blx	r3
   d8082:	4606      	mov	r6, r0
	csb = Wire.read();
   d8084:	f003 fb52 	bl	db72c <_Z19__fetch_global_Wirev>
   d8088:	6803      	ldr	r3, [r0, #0]
   d808a:	695b      	ldr	r3, [r3, #20]
   d808c:	4798      	blx	r3
   d808e:	4604      	mov	r4, r0
	lsb = Wire.read();
   d8090:	f003 fb4c 	bl	db72c <_Z19__fetch_global_Wirev>
   d8094:	6803      	ldr	r3, [r0, #0]
   d8096:	695b      	ldr	r3, [r3, #20]
   d8098:	4798      	blx	r3

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading

	// Pressure comes back as a left shifted 20 bit number
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   d809a:	0436      	lsls	r6, r6, #16
   d809c:	0224      	lsls	r4, r4, #8
   d809e:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
   d80a2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
	}

	byte msb, csb, lsb;
	msb = Wire.read();
	csb = Wire.read();
	lsb = Wire.read();
   d80a6:	b2c5      	uxtb	r5, r0

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading

	// Pressure comes back as a left shifted 20 bit number
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   d80a8:	4334      	orrs	r4, r6
   d80aa:	432c      	orrs	r4, r5
	byte msb, csb, lsb;
	msb = Wire.read();
	csb = Wire.read();
	lsb = Wire.read();

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d80ac:	4638      	mov	r0, r7
   d80ae:	f7ff ffab 	bl	d8008 <_ZN9MPL3115A213toggleOneShotEv>

	lsb &= 0b00110000; //Bits 5/4 represent the fractional component
	lsb >>= 4; //Get it right aligned
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction

	float pressure = (float)pressure_whole + pressure_decimal;
   d80b2:	f3c5 1501 	ubfx	r5, r5, #4, #2
   d80b6:	11a3      	asrs	r3, r4, #6
   d80b8:	ee07 5a90 	vmov	s15, r5
   d80bc:	ee00 3a10 	vmov	s0, r3
   d80c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d80c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d80c8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   d80cc:	eea7 0a87 	vfma.f32	s0, s15, s14

	return(pressure);
   d80d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Read pressure registers
	Wire.beginTransmission(MPL3115A2_ADDRESS);
	Wire.write(OUT_P_MSB);  // Address of data to get
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 3) != 3) { // Request three bytes
		return -999;
   d80d2:	ed9f 0a01 	vldr	s0, [pc, #4]	; d80d8 <_ZN9MPL3115A212readPressureEv+0xa0>
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction

	float pressure = (float)pressure_whole + pressure_decimal;

	return(pressure);
}
   d80d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d80d8:	c479c000 	.word	0xc479c000

000d80dc <_GLOBAL__sub_I__ZN9MPL3115A2C2Ev>:
   d80dc:	f001 b894 	b.w	d9208 <HAL_Pin_Map>

000d80e0 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf>:
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   d80e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d80e4:	ed2d 8b02 	vpush	{d8}
    if(AnemoneterPeriodReadingCount == 0)
   d80e8:	f241 6578 	movw	r5, #5752	; 0x1678
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   d80ec:	4604      	mov	r4, r0
    if(AnemoneterPeriodReadingCount == 0)
   d80ee:	5943      	ldr	r3, [r0, r5]
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   d80f0:	468a      	mov	sl, r1
    if(AnemoneterPeriodReadingCount == 0)
   d80f2:	b923      	cbnz	r3, d80fe <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0x1e>
    {
        *gustMPH = 0.0;
   d80f4:	ed9f 0a2a 	vldr	s0, [pc, #168]	; d81a0 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xc0>
   d80f8:	ed81 0a00 	vstr	s0, [r1]
        return 0;
   d80fc:	e04c      	b.n	d8198 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xb8>
    }
    // Nonintuitive math:  We've collected the sum of the observed periods between pulses, and the number of observations.
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
   d80fe:	f500 53b3 	add.w	r3, r0, #5728	; 0x1660
   d8102:	f241 6b74 	movw	fp, #5748	; 0x1674
   d8106:	6918      	ldr	r0, [r3, #16]
   d8108:	f005 fc1a 	bl	dd940 <__aeabi_f2d>
   d810c:	2200      	movs	r2, #0
   d810e:	4b25      	ldr	r3, [pc, #148]	; (d81a4 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xc4>)
   d8110:	f005 fc6a 	bl	dd9e8 <__aeabi_dmul>
   d8114:	4606      	mov	r6, r0
   d8116:	5960      	ldr	r0, [r4, r5]
   d8118:	f854 300b 	ldr.w	r3, [r4, fp]
   d811c:	ee07 0a90 	vmov	s15, r0
   d8120:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d8124:	460f      	mov	r7, r1
   d8126:	ee17 0a90 	vmov	r0, s15
   d812a:	ee08 3a10 	vmov	s16, r3
   d812e:	f005 fc07 	bl	dd940 <__aeabi_f2d>
   d8132:	4632      	mov	r2, r6
   d8134:	463b      	mov	r3, r7
   d8136:	f005 fc57 	bl	dd9e8 <__aeabi_dmul>
   d813a:	eef8 7a48 	vcvt.f32.u32	s15, s16
   d813e:	4680      	mov	r8, r0
   d8140:	ee17 0a90 	vmov	r0, s15
   d8144:	4689      	mov	r9, r1
   d8146:	f005 fbfb 	bl	dd940 <__aeabi_f2d>
   d814a:	4602      	mov	r2, r0
   d814c:	460b      	mov	r3, r1
   d814e:	4640      	mov	r0, r8
   d8150:	4649      	mov	r1, r9
   d8152:	f005 fd73 	bl	ddc3c <__aeabi_ddiv>
   d8156:	f005 ff3f 	bl	ddfd8 <__aeabi_d2f>
    AnemoneterPeriodTotal = 0;
   d815a:	2300      	movs	r3, #0
   d815c:	f844 300b 	str.w	r3, [r4, fp]
    AnemoneterPeriodReadingCount = 0;
   d8160:	5163      	str	r3, [r4, r5]
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d8162:	f241 657c 	movw	r5, #5756	; 0x167c
        return 0;
    }
    // Nonintuitive math:  We've collected the sum of the observed periods between pulses, and the number of observations.
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
   d8166:	4680      	mov	r8, r0
    AnemoneterPeriodTotal = 0;
    AnemoneterPeriodReadingCount = 0;
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d8168:	5960      	ldr	r0, [r4, r5]
   d816a:	ee07 0a90 	vmov	s15, r0
   d816e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d8172:	ee17 0a90 	vmov	r0, s15
   d8176:	f005 fbe3 	bl	dd940 <__aeabi_f2d>
   d817a:	460b      	mov	r3, r1
   d817c:	4602      	mov	r2, r0
   d817e:	4639      	mov	r1, r7
   d8180:	4630      	mov	r0, r6
   d8182:	f005 fd5b 	bl	ddc3c <__aeabi_ddiv>
   d8186:	f005 ff27 	bl	ddfd8 <__aeabi_d2f>
    GustPeriod = UINT_MAX;
   d818a:	f04f 33ff 	mov.w	r3, #4294967295
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
    AnemoneterPeriodTotal = 0;
    AnemoneterPeriodReadingCount = 0;
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d818e:	f8ca 0000 	str.w	r0, [sl]
    GustPeriod = UINT_MAX;
   d8192:	ee00 8a10 	vmov	s0, r8
   d8196:	5163      	str	r3, [r4, r5]
    return result;
}
   d8198:	ecbd 8b02 	vpop	{d8}
   d819c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d81a0:	00000000 	.word	0x00000000
   d81a4:	408f4000 	.word	0x408f4000

000d81a8 <_ZN14WeatherSensors21captureBatteryVoltageEv>:

void WeatherSensors::captureBatteryVoltage()
{
   d81a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d81aa:	4605      	mov	r5, r0
  unsigned int rawVoltage = 0;
  Wire.requestFrom(0x4D, 2);
   d81ac:	f003 fabe 	bl	db72c <_Z19__fetch_global_Wirev>
   d81b0:	2202      	movs	r2, #2
   d81b2:	214d      	movs	r1, #77	; 0x4d
   d81b4:	f003 f89a 	bl	db2ec <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() == 2)
   d81b8:	f003 fab8 	bl	db72c <_Z19__fetch_global_Wirev>
   d81bc:	6803      	ldr	r3, [r0, #0]
   d81be:	691b      	ldr	r3, [r3, #16]
   d81c0:	4798      	blx	r3
   d81c2:	2802      	cmp	r0, #2
   d81c4:	d132      	bne.n	d822c <_ZN14WeatherSensors21captureBatteryVoltageEv+0x84>
  {
    rawVoltage = (Wire.read() << 8) | (Wire.read());
   d81c6:	f003 fab1 	bl	db72c <_Z19__fetch_global_Wirev>
   d81ca:	6803      	ldr	r3, [r0, #0]
   d81cc:	695b      	ldr	r3, [r3, #20]
   d81ce:	4798      	blx	r3
   d81d0:	4606      	mov	r6, r0
   d81d2:	f003 faab 	bl	db72c <_Z19__fetch_global_Wirev>
   d81d6:	6803      	ldr	r3, [r0, #0]
   d81d8:	695b      	ldr	r3, [r3, #20]
   d81da:	4798      	blx	r3
    batVoltageTotal += (float)(rawVoltage)/4096.0*13.64; // 3.3*(4.7+1.5)/1.5
   d81dc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   d81e0:	ee07 0a90 	vmov	s15, r0
   d81e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d81e8:	f505 54b5 	add.w	r4, r5, #5792	; 0x16a0
   d81ec:	ee17 0a90 	vmov	r0, s15
   d81f0:	f005 fba6 	bl	dd940 <__aeabi_f2d>
   d81f4:	2200      	movs	r2, #0
   d81f6:	4b10      	ldr	r3, [pc, #64]	; (d8238 <_ZN14WeatherSensors21captureBatteryVoltageEv+0x90>)
   d81f8:	f005 fbf6 	bl	dd9e8 <__aeabi_dmul>
   d81fc:	a30c      	add	r3, pc, #48	; (adr r3, d8230 <_ZN14WeatherSensors21captureBatteryVoltageEv+0x88>)
   d81fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8202:	f005 fbf1 	bl	dd9e8 <__aeabi_dmul>
   d8206:	4606      	mov	r6, r0
   d8208:	6920      	ldr	r0, [r4, #16]
   d820a:	460f      	mov	r7, r1
   d820c:	f005 fb98 	bl	dd940 <__aeabi_f2d>
   d8210:	4602      	mov	r2, r0
   d8212:	460b      	mov	r3, r1
   d8214:	4630      	mov	r0, r6
   d8216:	4639      	mov	r1, r7
   d8218:	f005 fa34 	bl	dd684 <__adddf3>
   d821c:	f005 fedc 	bl	ddfd8 <__aeabi_d2f>
    batVoltageCount ++;
   d8220:	f241 62b4 	movw	r2, #5812	; 0x16b4
  unsigned int rawVoltage = 0;
  Wire.requestFrom(0x4D, 2);
  if (Wire.available() == 2)
  {
    rawVoltage = (Wire.read() << 8) | (Wire.read());
    batVoltageTotal += (float)(rawVoltage)/4096.0*13.64; // 3.3*(4.7+1.5)/1.5
   d8224:	6120      	str	r0, [r4, #16]
    batVoltageCount ++;
   d8226:	58ab      	ldr	r3, [r5, r2]
   d8228:	3301      	adds	r3, #1
   d822a:	50ab      	str	r3, [r5, r2]
   d822c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d822e:	bf00      	nop
   d8230:	147ae148 	.word	0x147ae148
   d8234:	402b47ae 	.word	0x402b47ae
   d8238:	3f300000 	.word	0x3f300000

000d823c <_ZN14WeatherSensors20getAndResetBatteryMVEv>:
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d823c:	f241 62b4 	movw	r2, #5812	; 0x16b4
   d8240:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
   d8244:	5881      	ldr	r1, [r0, r2]
   d8246:	edd3 6a04 	vldr	s13, [r3, #16]
   d824a:	ee07 1a90 	vmov	s15, r1
   d824e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    batVoltageCount ++;
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
   d8252:	b082      	sub	sp, #8
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d8254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 batVoltageTotal = 0;
   d8258:	2100      	movs	r1, #0
   d825a:	6119      	str	r1, [r3, #16]
 batVoltageCount = 0;
   d825c:	2300      	movs	r3, #0
   d825e:	5083      	str	r3, [r0, r2]
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d8260:	ed9f 7a05 	vldr	s14, [pc, #20]	; d8278 <_ZN14WeatherSensors20getAndResetBatteryMVEv+0x3c>
   d8264:	ee67 7a87 	vmul.f32	s15, s15, s14
   d8268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d826c:	edcd 7a01 	vstr	s15, [sp, #4]
 batVoltageTotal = 0;
 batVoltageCount = 0;
 return result;
}
   d8270:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d8274:	b002      	add	sp, #8
   d8276:	4770      	bx	lr
   d8278:	447a0000 	.word	0x447a0000

000d827c <_ZN14WeatherSensors21getAndResetRainInchesEv>:
}*/


float WeatherSensors::getAndResetRainInches()
{
    float result = RainScaleInches * float(rainEventCount);
   d827c:	f500 53b3 	add.w	r3, r0, #5728	; 0x1660
   d8280:	ed93 0a00 	vldr	s0, [r3]
   d8284:	edd3 7a02 	vldr	s15, [r3, #8]
   d8288:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    rainEventCount = 0;
   d828c:	2200      	movs	r2, #0
   d828e:	601a      	str	r2, [r3, #0]
    return result;
}
   d8290:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8294:	4770      	bx	lr
	...

000d8298 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv>:
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   d8298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(windVaneReadingCount == 0) {
   d829a:	f241 6790 	movw	r7, #5776	; 0x1690
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   d829e:	ed2d 8b02 	vpush	{d8}
    if(windVaneReadingCount == 0) {
   d82a2:	59c3      	ldr	r3, [r0, r7]
   d82a4:	ed9f 8a28 	vldr	s16, [pc, #160]	; d8348 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb0>
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   d82a8:	4604      	mov	r4, r0
    if(windVaneReadingCount == 0) {
   d82aa:	2b00      	cmp	r3, #0
   d82ac:	d041      	beq.n	d8332 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9a>
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   d82ae:	ee07 3a90 	vmov	s15, r3
   d82b2:	f500 56b4 	add.w	r6, r0, #5760	; 0x1680
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   d82b6:	edd6 6a03 	vldr	s13, [r6, #12]
float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   d82ba:	ed96 7a02 	vldr	s14, [r6, #8]
   d82be:	eef8 7a67 	vcvt.f32.u32	s15, s15
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
   d82c2:	4635      	mov	r5, r6
float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   d82c4:	eec7 8a27 	vdiv.f32	s17, s14, s15
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   d82c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d82cc:	eec7 7a28 	vdiv.f32	s15, s14, s17
   d82d0:	ee17 0a90 	vmov	r0, s15
   d82d4:	f005 fb34 	bl	dd940 <__aeabi_f2d>
   d82d8:	ec41 0b10 	vmov	d0, r0, r1
   d82dc:	f003 fd4c 	bl	dbd78 <atan>
   d82e0:	2200      	movs	r2, #0
   d82e2:	ec51 0b10 	vmov	r0, r1, d0
   d82e6:	4b19      	ldr	r3, [pc, #100]	; (d834c <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb4>)
   d82e8:	f005 fb7e 	bl	dd9e8 <__aeabi_dmul>
   d82ec:	a314      	add	r3, pc, #80	; (adr r3, d8340 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xa8>)
   d82ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d82f2:	f005 fca3 	bl	ddc3c <__aeabi_ddiv>
   d82f6:	f005 fe6f 	bl	ddfd8 <__aeabi_d2f>
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   d82fa:	eef4 8ac8 	vcmpe.f32	s17, s16
   d82fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   d8302:	ee00 0a10 	vmov	s0, r0
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   d8306:	bf48      	it	mi
   d8308:	eddf 7a11 	vldrmi	s15, [pc, #68]	; d8350 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb8>
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
   d830c:	ed86 8a02 	vstr	s16, [r6, #8]
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   d8310:	bf48      	it	mi
   d8312:	ee30 0a27 	vaddmi.f32	s0, s0, s15
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
   d8316:	2300      	movs	r3, #0
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;
   d8318:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d831c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
   d8320:	ed85 8a03 	vstr	s16, [r5, #12]
    windVaneReadingCount = 0;
   d8324:	51e3      	str	r3, [r4, r7]
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;
   d8326:	d506      	bpl.n	d8336 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9e>
   d8328:	eddf 7a0a 	vldr	s15, [pc, #40]	; d8354 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xbc>
   d832c:	ee30 0a27 	vadd.f32	s0, s0, s15
   d8330:	e001      	b.n	d8336 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9e>
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
   d8332:	eeb0 0a48 	vmov.f32	s0, s16
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;

   return result;
}
   d8336:	ecbd 8b02 	vpop	{d8}
   d833a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d833c:	f3af 8000 	nop.w
   d8340:	f01b866e 	.word	0xf01b866e
   d8344:	400921f9 	.word	0x400921f9
   d8348:	00000000 	.word	0x00000000
   d834c:	40668000 	.word	0x40668000
   d8350:	43340000 	.word	0x43340000
   d8354:	43b40000 	.word	0x43b40000

000d8358 <_ZN14WeatherSensors20lookupRadiansFromRawEj>:

float WeatherSensors::lookupRadiansFromRaw(unsigned int analogRaw)
{
//Serial.println(analogRaw);
    // The mechanism for reading the weathervane isn't arbitrary, but effectively, we just need to look up which of the 16 positions we're in.
    if(analogRaw >= 2200 && analogRaw < 2400) return (3.14);//South
   d8358:	f6a1 0398 	subw	r3, r1, #2200	; 0x898
   d835c:	2bc7      	cmp	r3, #199	; 0xc7
   d835e:	d942      	bls.n	d83e6 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x8e>
    if(analogRaw >= 2100 && analogRaw < 2200) return (3.53);//SSW
   d8360:	f6a1 0334 	subw	r3, r1, #2100	; 0x834
   d8364:	2b63      	cmp	r3, #99	; 0x63
   d8366:	d941      	bls.n	d83ec <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x94>
    if(analogRaw >= 3200 && analogRaw < 3299) return (3.93);//SW
   d8368:	f5a1 6348 	sub.w	r3, r1, #3200	; 0xc80
   d836c:	2b62      	cmp	r3, #98	; 0x62
   d836e:	d940      	bls.n	d83f2 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x9a>
    if(analogRaw >= 3100 && analogRaw < 3200) return (4.32);//WSW
   d8370:	f6a1 431c 	subw	r3, r1, #3100	; 0xc1c
   d8374:	2b63      	cmp	r3, #99	; 0x63
   d8376:	d93f      	bls.n	d83f8 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xa0>
    if(analogRaw >= 3890 && analogRaw < 3999) return (4.71);//West
   d8378:	f6a1 7332 	subw	r3, r1, #3890	; 0xf32
   d837c:	2b6c      	cmp	r3, #108	; 0x6c
   d837e:	d93e      	bls.n	d83fe <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xa6>
    if(analogRaw >= 3700 && analogRaw < 3780) return (5.11);//WNW
   d8380:	f6a1 6374 	subw	r3, r1, #3700	; 0xe74
   d8384:	2b4f      	cmp	r3, #79	; 0x4f
   d8386:	d93d      	bls.n	d8404 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xac>
    if(analogRaw >= 3780 && analogRaw < 3890) return (5.50);//NW
   d8388:	f6a1 63c4 	subw	r3, r1, #3780	; 0xec4
   d838c:	2b6d      	cmp	r3, #109	; 0x6d
   d838e:	d93c      	bls.n	d840a <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xb2>
    if(analogRaw >= 3400 && analogRaw < 3500) return (5.89);//NNW
   d8390:	f6a1 5348 	subw	r3, r1, #3400	; 0xd48
   d8394:	2b63      	cmp	r3, #99	; 0x63
   d8396:	d93b      	bls.n	d8410 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xb8>
    if(analogRaw >= 3570 && analogRaw < 3700) return (0.00);//North
   d8398:	f6a1 53f2 	subw	r3, r1, #3570	; 0xdf2
   d839c:	2b81      	cmp	r3, #129	; 0x81
   d839e:	d93a      	bls.n	d8416 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xbe>
    if(analogRaw >= 2600 && analogRaw < 2700) return (0.39);//NNE
   d83a0:	f6a1 2328 	subw	r3, r1, #2600	; 0xa28
   d83a4:	2b63      	cmp	r3, #99	; 0x63
   d83a6:	d939      	bls.n	d841c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xc4>
    if(analogRaw >= 2750 && analogRaw < 2850) return (0.79);//NE
   d83a8:	f6a1 23be 	subw	r3, r1, #2750	; 0xabe
   d83ac:	2b63      	cmp	r3, #99	; 0x63
   d83ae:	d938      	bls.n	d8422 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xca>
    if(analogRaw >= 1510 && analogRaw < 1580) return (1.18);//ENE
   d83b0:	f2a1 53e6 	subw	r3, r1, #1510	; 0x5e6
   d83b4:	2b45      	cmp	r3, #69	; 0x45
   d83b6:	d937      	bls.n	d8428 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xd0>
    if(analogRaw >= 1580 && analogRaw < 1650) return (1.57);//East
   d83b8:	f2a1 632c 	subw	r3, r1, #1580	; 0x62c
   d83bc:	2b45      	cmp	r3, #69	; 0x45
   d83be:	d936      	bls.n	d842e <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xd6>
    if(analogRaw >= 1470 && analogRaw < 1510) return (1.96);//ESE
   d83c0:	f2a1 53be 	subw	r3, r1, #1470	; 0x5be
   d83c4:	2b27      	cmp	r3, #39	; 0x27
   d83c6:	d935      	bls.n	d8434 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xdc>
    if(analogRaw >= 1900 && analogRaw < 2000) return (2.36);//SE
   d83c8:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
   d83cc:	2b63      	cmp	r3, #99	; 0x63
   d83ce:	d934      	bls.n	d843a <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xe2>
    if(analogRaw >= 1700 && analogRaw < 1750) return (2.74);//SSE
   d83d0:	f2a1 61a4 	subw	r1, r1, #1700	; 0x6a4
    if(analogRaw > 4000) return(-1); // Open circuit?  Probably means the sensor is not connected
   d83d4:	eddf 7a1a 	vldr	s15, [pc, #104]	; d8440 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xe8>
   d83d8:	2932      	cmp	r1, #50	; 0x32
   d83da:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d83de:	bf38      	it	cc
   d83e0:	eeb0 0a67 	vmovcc.f32	s0, s15
   d83e4:	4770      	bx	lr

float WeatherSensors::lookupRadiansFromRaw(unsigned int analogRaw)
{
//Serial.println(analogRaw);
    // The mechanism for reading the weathervane isn't arbitrary, but effectively, we just need to look up which of the 16 positions we're in.
    if(analogRaw >= 2200 && analogRaw < 2400) return (3.14);//South
   d83e6:	ed9f 0a17 	vldr	s0, [pc, #92]	; d8444 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xec>
   d83ea:	4770      	bx	lr
    if(analogRaw >= 2100 && analogRaw < 2200) return (3.53);//SSW
   d83ec:	ed9f 0a16 	vldr	s0, [pc, #88]	; d8448 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf0>
   d83f0:	4770      	bx	lr
    if(analogRaw >= 3200 && analogRaw < 3299) return (3.93);//SW
   d83f2:	ed9f 0a16 	vldr	s0, [pc, #88]	; d844c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf4>
   d83f6:	4770      	bx	lr
    if(analogRaw >= 3100 && analogRaw < 3200) return (4.32);//WSW
   d83f8:	ed9f 0a15 	vldr	s0, [pc, #84]	; d8450 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf8>
   d83fc:	4770      	bx	lr
    if(analogRaw >= 3890 && analogRaw < 3999) return (4.71);//West
   d83fe:	ed9f 0a15 	vldr	s0, [pc, #84]	; d8454 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xfc>
   d8402:	4770      	bx	lr
    if(analogRaw >= 3700 && analogRaw < 3780) return (5.11);//WNW
   d8404:	ed9f 0a14 	vldr	s0, [pc, #80]	; d8458 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x100>
   d8408:	4770      	bx	lr
    if(analogRaw >= 3780 && analogRaw < 3890) return (5.50);//NW
   d840a:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
   d840e:	4770      	bx	lr
    if(analogRaw >= 3400 && analogRaw < 3500) return (5.89);//NNW
   d8410:	ed9f 0a12 	vldr	s0, [pc, #72]	; d845c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x104>
   d8414:	4770      	bx	lr
    if(analogRaw >= 3570 && analogRaw < 3700) return (0.00);//North
   d8416:	ed9f 0a12 	vldr	s0, [pc, #72]	; d8460 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x108>
   d841a:	4770      	bx	lr
    if(analogRaw >= 2600 && analogRaw < 2700) return (0.39);//NNE
   d841c:	ed9f 0a11 	vldr	s0, [pc, #68]	; d8464 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x10c>
   d8420:	4770      	bx	lr
    if(analogRaw >= 2750 && analogRaw < 2850) return (0.79);//NE
   d8422:	ed9f 0a11 	vldr	s0, [pc, #68]	; d8468 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x110>
   d8426:	4770      	bx	lr
    if(analogRaw >= 1510 && analogRaw < 1580) return (1.18);//ENE
   d8428:	ed9f 0a10 	vldr	s0, [pc, #64]	; d846c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x114>
   d842c:	4770      	bx	lr
    if(analogRaw >= 1580 && analogRaw < 1650) return (1.57);//East
   d842e:	ed9f 0a10 	vldr	s0, [pc, #64]	; d8470 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x118>
   d8432:	4770      	bx	lr
    if(analogRaw >= 1470 && analogRaw < 1510) return (1.96);//ESE
   d8434:	ed9f 0a0f 	vldr	s0, [pc, #60]	; d8474 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x11c>
   d8438:	4770      	bx	lr
    if(analogRaw >= 1900 && analogRaw < 2000) return (2.36);//SE
   d843a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; d8478 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x120>
    if(analogRaw >= 1700 && analogRaw < 1750) return (2.74);//SSE
    if(analogRaw > 4000) return(-1); // Open circuit?  Probably means the sensor is not connected
   // Particle.publish("error", String::format("Got %d from Windvane.",analogRaw), 60 , PRIVATE);
    return -1;
}
   d843e:	4770      	bx	lr
   d8440:	402f5c29 	.word	0x402f5c29
   d8444:	4048f5c3 	.word	0x4048f5c3
   d8448:	4061eb85 	.word	0x4061eb85
   d844c:	407b851f 	.word	0x407b851f
   d8450:	408a3d71 	.word	0x408a3d71
   d8454:	4096b852 	.word	0x4096b852
   d8458:	40a3851f 	.word	0x40a3851f
   d845c:	40bc7ae1 	.word	0x40bc7ae1
   d8460:	00000000 	.word	0x00000000
   d8464:	3ec7ae14 	.word	0x3ec7ae14
   d8468:	3f4a3d71 	.word	0x3f4a3d71
   d846c:	3f970a3d 	.word	0x3f970a3d
   d8470:	3fc8f5c3 	.word	0x3fc8f5c3
   d8474:	3ffae148 	.word	0x3ffae148
   d8478:	40170a3d 	.word	0x40170a3d
   d847c:	00000000 	.word	0x00000000

000d8480 <_ZN14WeatherSensors15captureWindVaneEv>:
    float result = RainScaleInches * float(rainEventCount);
    rainEventCount = 0;
    return result;
}
/// Wind Vane
void WeatherSensors::captureWindVane() {
   d8480:	b530      	push	{r4, r5, lr}
   d8482:	ed2d 8b02 	vpush	{d8}
    // Read the wind vane, and update the running average of the two components of the vector
    unsigned int windVaneRaw = analogRead(WindVanePin);
   d8486:	f241 6384 	movw	r3, #5764	; 0x1684
    float result = RainScaleInches * float(rainEventCount);
    rainEventCount = 0;
    return result;
}
/// Wind Vane
void WeatherSensors::captureWindVane() {
   d848a:	b083      	sub	sp, #12
   d848c:	4604      	mov	r4, r0
    // Read the wind vane, and update the running average of the two components of the vector
    unsigned int windVaneRaw = analogRead(WindVanePin);
   d848e:	5ac0      	ldrh	r0, [r0, r3]
   d8490:	f003 f91a 	bl	db6c8 <analogRead>
    //Serial.println(windVaneRaw);
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
   d8494:	4601      	mov	r1, r0
   d8496:	4620      	mov	r0, r4
   d8498:	f7ff ff5e 	bl	d8358 <_ZN14WeatherSensors20lookupRadiansFromRawEj>
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
   d849c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d84a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d84a4:	dd3c      	ble.n	d8520 <_ZN14WeatherSensors15captureWindVaneEv+0xa0>
   d84a6:	ee10 0a10 	vmov	r0, s0
   d84aa:	f005 fa49 	bl	dd940 <__aeabi_f2d>
   d84ae:	a31e      	add	r3, pc, #120	; (adr r3, d8528 <_ZN14WeatherSensors15captureWindVaneEv+0xa8>)
   d84b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d84b4:	ec41 0b18 	vmov	d8, r0, r1
   d84b8:	f005 fd08 	bl	ddecc <__aeabi_dcmplt>
   d84bc:	b380      	cbz	r0, d8520 <_ZN14WeatherSensors15captureWindVaneEv+0xa0>
    {
        windVaneCosTotal += cos(windVaneRadians);
   d84be:	eeb0 0a48 	vmov.f32	s0, s16
   d84c2:	eef0 0a68 	vmov.f32	s1, s17
   d84c6:	f003 fea3 	bl	dc210 <cos>
   d84ca:	f504 55b4 	add.w	r5, r4, #5760	; 0x1680
   d84ce:	ec53 2b10 	vmov	r2, r3, d0
   d84d2:	68a8      	ldr	r0, [r5, #8]
   d84d4:	e9cd 2300 	strd	r2, r3, [sp]
   d84d8:	f005 fa32 	bl	dd940 <__aeabi_f2d>
   d84dc:	e9dd 2300 	ldrd	r2, r3, [sp]
   d84e0:	f005 f8d0 	bl	dd684 <__adddf3>
   d84e4:	f005 fd78 	bl	ddfd8 <__aeabi_d2f>
        windVaneSinTotal += sin(windVaneRadians);
   d84e8:	eeb0 0a48 	vmov.f32	s0, s16
   d84ec:	eef0 0a68 	vmov.f32	s1, s17
    //Serial.println(windVaneRaw);
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
    {
        windVaneCosTotal += cos(windVaneRadians);
   d84f0:	60a8      	str	r0, [r5, #8]
        windVaneSinTotal += sin(windVaneRadians);
   d84f2:	f003 fef5 	bl	dc2e0 <sin>
   d84f6:	f504 55b4 	add.w	r5, r4, #5760	; 0x1680
   d84fa:	ec53 2b10 	vmov	r2, r3, d0
   d84fe:	68e8      	ldr	r0, [r5, #12]
   d8500:	e9cd 2300 	strd	r2, r3, [sp]
   d8504:	f005 fa1c 	bl	dd940 <__aeabi_f2d>
   d8508:	e9dd 2300 	ldrd	r2, r3, [sp]
   d850c:	f005 f8ba 	bl	dd684 <__adddf3>
   d8510:	f005 fd62 	bl	ddfd8 <__aeabi_d2f>
        windVaneReadingCount++;
   d8514:	f241 6290 	movw	r2, #5776	; 0x1690
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
    {
        windVaneCosTotal += cos(windVaneRadians);
        windVaneSinTotal += sin(windVaneRadians);
   d8518:	60e8      	str	r0, [r5, #12]
        windVaneReadingCount++;
   d851a:	58a3      	ldr	r3, [r4, r2]
   d851c:	3301      	adds	r3, #1
   d851e:	50a3      	str	r3, [r4, r2]
    }
    return;
}
   d8520:	b003      	add	sp, #12
   d8522:	ecbd 8b02 	vpop	{d8}
   d8526:	bd30      	pop	{r4, r5, pc}
   d8528:	f80dc337 	.word	0xf80dc337
   d852c:	401890fc 	.word	0x401890fc

000d8530 <_ZN14WeatherSensors27captureTempHumidityPressureEv>:
    return -1;
}

/// end Wind vane

void WeatherSensors::captureTempHumidityPressure() {
   d8530:	b530      	push	{r4, r5, lr}
   d8532:	b085      	sub	sp, #20
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d8534:	aa02      	add	r2, sp, #8
   d8536:	a903      	add	r1, sp, #12
    return -1;
}

/// end Wind vane

void WeatherSensors::captureTempHumidityPressure() {
   d8538:	4604      	mov	r4, r0
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d853a:	f7fd fec0 	bl	d62be <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_>

  uint16_t tempKx10 = uint16_t(tempC*10)+2732;
  airTempKMedian.add(tempKx10);
   d853e:	eddd 7a03 	vldr	s15, [sp, #12]
   d8542:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d8546:	ee67 7a87 	vmul.f32	s15, s15, s14
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d854a:	4605      	mov	r5, r0

  uint16_t tempKx10 = uint16_t(tempC*10)+2732;
  airTempKMedian.add(tempKx10);
   d854c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d8550:	f104 000a 	add.w	r0, r4, #10
   d8554:	ee17 1a90 	vmov	r1, s15
   d8558:	f601 21ac 	addw	r1, r1, #2732	; 0xaac
   d855c:	b289      	uxth	r1, r1
   d855e:	f000 fdd8 	bl	d9112 <_ZN13RunningMedian3addEt>

  relativeHumidtyMedian.add(humidityRH);
   d8562:	eddd 7a02 	vldr	s15, [sp, #8]
   d8566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d856a:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d856e:	edcd 7a01 	vstr	s15, [sp, #4]
   d8572:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d8576:	f000 fdcc 	bl	d9112 <_ZN13RunningMedian3addEt>

if (validTH){
   d857a:	2d00      	cmp	r5, #0
   d857c:	d048      	beq.n	d8610 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
    //If the result is reasonable, add it to the running mean
    if(humidityRH > 0 && humidityRH < 105) // It's theoretically possible to get supersaturation humidity levels over 100%
   d857e:	ed9d 7a02 	vldr	s14, [sp, #8]
   d8582:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d8586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d858a:	dd13      	ble.n	d85b4 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x84>
   d858c:	eddf 7a31 	vldr	s15, [pc, #196]	; d8654 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x124>
   d8590:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d8594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8598:	d50c      	bpl.n	d85b4 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x84>
    {
        // Add the observation to the running sum, and increment the number of observations
        humidityRHTotal += humidityRH;
   d859a:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d859e:	edd3 7a05 	vldr	s15, [r3, #20]
   d85a2:	ee77 7a87 	vadd.f32	s15, s15, s14
        humidityRHReadingCount++;
   d85a6:	f241 6298 	movw	r2, #5784	; 0x1698
if (validTH){
    //If the result is reasonable, add it to the running mean
    if(humidityRH > 0 && humidityRH < 105) // It's theoretically possible to get supersaturation humidity levels over 100%
    {
        // Add the observation to the running sum, and increment the number of observations
        humidityRHTotal += humidityRH;
   d85aa:	edc3 7a05 	vstr	s15, [r3, #20]
        humidityRHReadingCount++;
   d85ae:	58a3      	ldr	r3, [r4, r2]
   d85b0:	3301      	adds	r3, #1
   d85b2:	50a3      	str	r3, [r4, r2]
    }


    tempF = (tempC * 9.0) / 5.0 + 32.0;
   d85b4:	9803      	ldr	r0, [sp, #12]
   d85b6:	f005 f9c3 	bl	dd940 <__aeabi_f2d>
   d85ba:	2200      	movs	r2, #0
   d85bc:	4b26      	ldr	r3, [pc, #152]	; (d8658 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x128>)
   d85be:	f005 fa13 	bl	dd9e8 <__aeabi_dmul>
   d85c2:	2200      	movs	r2, #0
   d85c4:	4b25      	ldr	r3, [pc, #148]	; (d865c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x12c>)
   d85c6:	f005 fb39 	bl	ddc3c <__aeabi_ddiv>
   d85ca:	2200      	movs	r2, #0
   d85cc:	4b24      	ldr	r3, [pc, #144]	; (d8660 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x130>)
   d85ce:	f005 f859 	bl	dd684 <__adddf3>
   d85d2:	f005 fd01 	bl	ddfd8 <__aeabi_d2f>
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
   d85d6:	eddf 7a23 	vldr	s15, [pc, #140]	; d8664 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x134>
        humidityRHTotal += humidityRH;
        humidityRHReadingCount++;
    }


    tempF = (tempC * 9.0) / 5.0 + 32.0;
   d85da:	ee07 0a10 	vmov	s14, r0
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
   d85de:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d85e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d85e6:	dd13      	ble.n	d8610 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
   d85e8:	eddf 7a1f 	vldr	s15, [pc, #124]	; d8668 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x138>
   d85ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d85f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d85f4:	d50c      	bpl.n	d8610 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
    {
        // Add the observation to the running sum, and increment the number of observations
        tempFTotal += tempF;
   d85f6:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d85fa:	edd3 7a07 	vldr	s15, [r3, #28]
   d85fe:	ee77 7a87 	vadd.f32	s15, s15, s14
        tempFReadingCount++;
   d8602:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
    tempF = (tempC * 9.0) / 5.0 + 32.0;
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
    {
        // Add the observation to the running sum, and increment the number of observations
        tempFTotal += tempF;
   d8606:	edc3 7a07 	vstr	s15, [r3, #28]
        tempFReadingCount++;
   d860a:	6813      	ldr	r3, [r2, #0]
   d860c:	3301      	adds	r3, #1
   d860e:	6013      	str	r3, [r2, #0]
    }
  }
  //Measure Pressure from the MPL3115A2
  float pressurePascals = barom.readPressure();
   d8610:	f104 0008 	add.w	r0, r4, #8
   d8614:	f7ff fd10 	bl	d8038 <_ZN9MPL3115A212readPressureEv>

  //If the result is reasonable, add it to the running mean
  // What's reasonable? http://findanswers.noaa.gov/noaa.answers/consumer/kbdetail.asp?kbid=544
  if(pressurePascals > 80000 && pressurePascals < 110000)
   d8618:	eddf 7a14 	vldr	s15, [pc, #80]	; d866c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x13c>
   d861c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8624:	dd13      	ble.n	d864e <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x11e>
   d8626:	eddf 7a12 	vldr	s15, [pc, #72]	; d8670 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x140>
   d862a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d862e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8632:	d50c      	bpl.n	d864e <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x11e>
  {
      // Add the observation to the running sum, and increment the number of observations
      pressurePascalsTotal += pressurePascals;
   d8634:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
   d8638:	edd3 7a01 	vldr	s15, [r3, #4]
   d863c:	ee37 0a80 	vadd.f32	s0, s15, s0
      pressurePascalsReadingCount++;
   d8640:	f241 62a8 	movw	r2, #5800	; 0x16a8
  //If the result is reasonable, add it to the running mean
  // What's reasonable? http://findanswers.noaa.gov/noaa.answers/consumer/kbdetail.asp?kbid=544
  if(pressurePascals > 80000 && pressurePascals < 110000)
  {
      // Add the observation to the running sum, and increment the number of observations
      pressurePascalsTotal += pressurePascals;
   d8644:	ed83 0a01 	vstr	s0, [r3, #4]
      pressurePascalsReadingCount++;
   d8648:	58a3      	ldr	r3, [r4, r2]
   d864a:	3301      	adds	r3, #1
   d864c:	50a3      	str	r3, [r4, r2]
  }
  return;
}
   d864e:	b005      	add	sp, #20
   d8650:	bd30      	pop	{r4, r5, pc}
   d8652:	bf00      	nop
   d8654:	42d20000 	.word	0x42d20000
   d8658:	40220000 	.word	0x40220000
   d865c:	40140000 	.word	0x40140000
   d8660:	40400000 	.word	0x40400000
   d8664:	c2480000 	.word	0xc2480000
   d8668:	43160000 	.word	0x43160000
   d866c:	479c4000 	.word	0x479c4000
   d8670:	47d6d800 	.word	0x47d6d800

000d8674 <_ZN14WeatherSensors16getAndResetTempFEv>:
  }
}

float WeatherSensors::getAndResetTempF()
{
    if(tempFReadingCount == 0) {
   d8674:	f500 52b5 	add.w	r2, r0, #5792	; 0x16a0
   d8678:	ed9f 0a09 	vldr	s0, [pc, #36]	; d86a0 <_ZN14WeatherSensors16getAndResetTempFEv+0x2c>
   d867c:	6813      	ldr	r3, [r2, #0]
   d867e:	b16b      	cbz	r3, d869c <_ZN14WeatherSensors16getAndResetTempFEv+0x28>
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
   d8680:	ee07 3a90 	vmov	s15, r3
   d8684:	f500 50b4 	add.w	r0, r0, #5760	; 0x1680
   d8688:	ed90 7a07 	vldr	s14, [r0, #28]
    tempFTotal = 0.0;
   d868c:	ed80 0a07 	vstr	s0, [r0, #28]
float WeatherSensors::getAndResetTempF()
{
    if(tempFReadingCount == 0) {
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
   d8690:	eef8 7a67 	vcvt.f32.u32	s15, s15
    tempFTotal = 0.0;
    tempFReadingCount = 0;
   d8694:	2300      	movs	r3, #0
    return result;
   d8696:	ee87 0a27 	vdiv.f32	s0, s14, s15
    if(tempFReadingCount == 0) {
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
    tempFTotal = 0.0;
    tempFReadingCount = 0;
   d869a:	6013      	str	r3, [r2, #0]
    return result;
}
   d869c:	4770      	bx	lr
   d869e:	bf00      	nop
   d86a0:	00000000 	.word	0x00000000

000d86a4 <_ZN14WeatherSensors26getAndResetPressurePascalsEv>:
}


float WeatherSensors::getAndResetPressurePascals()
{
    if(pressurePascalsReadingCount == 0) {
   d86a4:	f241 61a8 	movw	r1, #5800	; 0x16a8
   d86a8:	ed9f 0a09 	vldr	s0, [pc, #36]	; d86d0 <_ZN14WeatherSensors26getAndResetPressurePascalsEv+0x2c>
   d86ac:	5843      	ldr	r3, [r0, r1]
   d86ae:	b16b      	cbz	r3, d86cc <_ZN14WeatherSensors26getAndResetPressurePascalsEv+0x28>
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
   d86b0:	ee07 3a90 	vmov	s15, r3
   d86b4:	f500 52b5 	add.w	r2, r0, #5792	; 0x16a0
   d86b8:	ed92 7a01 	vldr	s14, [r2, #4]
    pressurePascalsTotal = 0.0;
   d86bc:	ed82 0a01 	vstr	s0, [r2, #4]
float WeatherSensors::getAndResetPressurePascals()
{
    if(pressurePascalsReadingCount == 0) {
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
   d86c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pressurePascalsTotal = 0.0;
    pressurePascalsReadingCount = 0;
   d86c4:	2300      	movs	r3, #0
    return result;
   d86c6:	ee87 0a27 	vdiv.f32	s0, s14, s15
    if(pressurePascalsReadingCount == 0) {
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
    pressurePascalsTotal = 0.0;
    pressurePascalsReadingCount = 0;
   d86ca:	5043      	str	r3, [r0, r1]
    return result;
}
   d86cc:	4770      	bx	lr
   d86ce:	bf00      	nop
	...

000d86d8 <_ZN14WeatherSensors21getAndResetAllSensorsEv>:
    uint16_t gust_metersph; //meters per hour
    uint16_t millivolts; // voltage in mV
    //uint16_t lux; //Light level in lux

void WeatherSensors::getAndResetAllSensors()
{
   d86d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d86da:	4605      	mov	r5, r0
  uint32_t timeRTC = node.unixTime();
   d86dc:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
   d86e0:	3004      	adds	r0, #4
   d86e2:	f7fc fdcf 	bl	d5284 <_ZN7IoTNode8unixTimeEv>
  sensorReadings.unixTime = timeRTC;
   d86e6:	4c42      	ldr	r4, [pc, #264]	; (d87f0 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x118>)
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
   d86e8:	a901      	add	r1, sp, #4
    //uint16_t lux; //Light level in lux

void WeatherSensors::getAndResetAllSensors()
{
  uint32_t timeRTC = node.unixTime();
  sensorReadings.unixTime = timeRTC;
   d86ea:	6020      	str	r0, [r4, #0]
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
   d86ec:	4628      	mov	r0, r5
   d86ee:	f7ff fcf7 	bl	d80e0 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf>
  sensorReadings.wind_metersph = (uint16_t) ceil(windMPH * 1609.34);
   d86f2:	ee10 0a10 	vmov	r0, s0
   d86f6:	f005 f923 	bl	dd940 <__aeabi_f2d>
   d86fa:	a339      	add	r3, pc, #228	; (adr r3, d87e0 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x108>)
   d86fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8700:	f005 f972 	bl	dd9e8 <__aeabi_dmul>
   d8704:	ec41 0b10 	vmov	d0, r0, r1
   d8708:	f003 fcf2 	bl	dc0f0 <ceil>
   d870c:	ec51 0b10 	vmov	r0, r1, d0
   d8710:	f005 fc42 	bl	ddf98 <__aeabi_d2uiz>
   d8714:	80e0      	strh	r0, [r4, #6]
  //Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
  float rainInches = getAndResetRainInches();
   d8716:	4628      	mov	r0, r5
   d8718:	f7ff fdb0 	bl	d827c <_ZN14WeatherSensors21getAndResetRainInchesEv>
  sensorReadings.rainmmx1000 = (uint16_t) ceil(rainInches * 25400);
   d871c:	eddf 7a35 	vldr	s15, [pc, #212]	; d87f4 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x11c>
   d8720:	ee60 7a27 	vmul.f32	s15, s0, s15
   d8724:	ee17 0a90 	vmov	r0, s15
   d8728:	f005 f90a 	bl	dd940 <__aeabi_f2d>
   d872c:	ec41 0b10 	vmov	d0, r0, r1
   d8730:	f003 fcde 	bl	dc0f0 <ceil>
   d8734:	ec51 0b10 	vmov	r0, r1, d0
   d8738:	f005 fc2e 	bl	ddf98 <__aeabi_d2uiz>
   d873c:	81a0      	strh	r0, [r4, #12]
  //Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
  float windDegrees = getAndResetWindVaneDegrees();
   d873e:	4628      	mov	r0, r5
   d8740:	f7ff fdaa 	bl	d8298 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv>
  sensorReadings.windDegrees = (uint16_t) ceil(windDegrees);
   d8744:	ee10 0a10 	vmov	r0, s0
   d8748:	f005 f8fa 	bl	dd940 <__aeabi_f2d>
   d874c:	ec41 0b10 	vmov	d0, r0, r1
   d8750:	f003 fcce 	bl	dc0f0 <ceil>
   d8754:	ec51 0b10 	vmov	r0, r1, d0
   d8758:	f005 fc1e 	bl	ddf98 <__aeabi_d2uiz>
   d875c:	80a0      	strh	r0, [r4, #4]
  //Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
  float airTempF = getAndResetTempF();
   d875e:	4628      	mov	r0, r5
   d8760:	f7ff ff88 	bl	d8674 <_ZN14WeatherSensors16getAndResetTempFEv>
  sensorReadings.airTempKx10 = (uint16_t) ceil((airTempF-32.0)*50.0/9.0 + 2731.5);
   d8764:	ee10 0a10 	vmov	r0, s0
   d8768:	f005 f8ea 	bl	dd940 <__aeabi_f2d>
   d876c:	2200      	movs	r2, #0
   d876e:	4b22      	ldr	r3, [pc, #136]	; (d87f8 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x120>)
   d8770:	f004 ff86 	bl	dd680 <__aeabi_dsub>
   d8774:	2200      	movs	r2, #0
   d8776:	4b21      	ldr	r3, [pc, #132]	; (d87fc <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x124>)
   d8778:	f005 f936 	bl	dd9e8 <__aeabi_dmul>
   d877c:	2200      	movs	r2, #0
   d877e:	4b20      	ldr	r3, [pc, #128]	; (d8800 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x128>)
   d8780:	f005 fa5c 	bl	ddc3c <__aeabi_ddiv>
   d8784:	a318      	add	r3, pc, #96	; (adr r3, d87e8 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x110>)
   d8786:	e9d3 2300 	ldrd	r2, r3, [r3]
   d878a:	f004 ff7b 	bl	dd684 <__adddf3>
   d878e:	ec41 0b10 	vmov	d0, r0, r1
   d8792:	f003 fcad 	bl	dc0f0 <ceil>
   d8796:	ec51 0b10 	vmov	r0, r1, d0
   d879a:	f005 fbfd 	bl	ddf98 <__aeabi_d2uiz>
   d879e:	8160      	strh	r0, [r4, #10]
  //Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
  uint16_t humidityRH = relativeHumidtyMedian.getMedian();
   d87a0:	f605 3006 	addw	r0, r5, #2822	; 0xb06
   d87a4:	f000 fcf8 	bl	d9198 <_ZN13RunningMedian9getMedianEv>
  sensorReadings.humid =(uint8_t) ceil(humidityRH);
   d87a8:	f005 f8a8 	bl	dd8fc <__aeabi_ui2d>
   d87ac:	ec41 0b10 	vmov	d0, r0, r1
   d87b0:	f003 fc9e 	bl	dc0f0 <ceil>
   d87b4:	ec51 0b10 	vmov	r0, r1, d0
   d87b8:	f005 fbee 	bl	ddf98 <__aeabi_d2uiz>
   d87bc:	7220      	strb	r0, [r4, #8]
  //Particle.publish("Humedad", String(sensorReadings.humid));
  float pressure = getAndResetPressurePascals();
   d87be:	4628      	mov	r0, r5
   d87c0:	f7ff ff70 	bl	d86a4 <_ZN14WeatherSensors26getAndResetPressurePascalsEv>
  sensorReadings.barometerhPa = pressure/10.0;
   d87c4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d87c8:	ee80 0a27 	vdiv.f32	s0, s0, s15
  //Particle.publish("Presion", String(sensorReadings.barometerhPa));
  // Light and voltage needed
 // sensorReadings.lux = getAndResetLightLux();
  //Particle.publish("luminocidad", String(sensorReadings.lux));
  sensorReadings.millivolts=getAndResetBatteryMV();
   d87cc:	4628      	mov	r0, r5
  //Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
  uint16_t humidityRH = relativeHumidtyMedian.getMedian();
  sensorReadings.humid =(uint8_t) ceil(humidityRH);
  //Particle.publish("Humedad", String(sensorReadings.humid));
  float pressure = getAndResetPressurePascals();
  sensorReadings.barometerhPa = pressure/10.0;
   d87ce:	ed84 0a04 	vstr	s0, [r4, #16]
  //Particle.publish("Presion", String(sensorReadings.barometerhPa));
  // Light and voltage needed
 // sensorReadings.lux = getAndResetLightLux();
  //Particle.publish("luminocidad", String(sensorReadings.lux));
  sensorReadings.millivolts=getAndResetBatteryMV();
   d87d2:	f7ff fd33 	bl	d823c <_ZN14WeatherSensors20getAndResetBatteryMVEv>
   d87d6:	82e0      	strh	r0, [r4, #22]
  //Particle.publish("Bateria", String( sensorReadings.millivolts));
}
   d87d8:	b003      	add	sp, #12
   d87da:	bd30      	pop	{r4, r5, pc}
   d87dc:	f3af 8000 	nop.w
   d87e0:	28f5c28f 	.word	0x28f5c28f
   d87e4:	4099255c 	.word	0x4099255c
   d87e8:	00000000 	.word	0x00000000
   d87ec:	40a55700 	.word	0x40a55700
   d87f0:	2003d80c 	.word	0x2003d80c
   d87f4:	46c67000 	.word	0x46c67000
   d87f8:	40400000 	.word	0x40400000
   d87fc:	40490000 	.word	0x40490000
   d8800:	40220000 	.word	0x40220000

000d8804 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>:

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   d8804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8806:	4604      	mov	r4, r0
   d8808:	4610      	mov	r0, r2
    int str_len = ss.length() + 1;
   d880a:	6892      	ldr	r2, [r2, #8]

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   d880c:	461e      	mov	r6, r3
    int str_len = ss.length() + 1;
    char s[str_len];
   d880e:	f102 0308 	add.w	r3, r2, #8
   d8812:	f023 0307 	bic.w	r3, r3, #7

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   d8816:	af00      	add	r7, sp, #0
    int str_len = ss.length() + 1;
    char s[str_len];
   d8818:	ebad 0d03 	sub.w	sp, sp, r3
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d881c:	4669      	mov	r1, sp
   d881e:	2300      	movs	r3, #0
   d8820:	3201      	adds	r2, #1
   d8822:	f001 fba0 	bl	d9f66 <_ZNK6String8getBytesEPhjj>

    //Serial.println(s);
    char *p;
    int count;

    p = strchr (s,'.');         // Find decimal point, if any.
   d8826:	212e      	movs	r1, #46	; 0x2e
   d8828:	4668      	mov	r0, sp
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
    int str_len = ss.length() + 1;
    char s[str_len];
   d882a:	466d      	mov	r5, sp

    //Serial.println(s);
    char *p;
    int count;

    p = strchr (s,'.');         // Find decimal point, if any.
   d882c:	f006 f9b6 	bl	deb9c <strchr>
    if (p != NULL) {
   d8830:	b1a8      	cbz	r0, d885e <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x5a>
   d8832:	4603      	mov	r3, r0
   d8834:	1af2      	subs	r2, r6, r3
        count = n;              // Adjust for more or less decimals.
        while (count >= 0) {    // Maximum decimals allowed.
   d8836:	42d0      	cmn	r0, r2
   d8838:	4619      	mov	r1, r3
   d883a:	d403      	bmi.n	d8844 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x40>
             count--;
             if (*p == '\0')    // If there's less than desired.
   d883c:	780a      	ldrb	r2, [r1, #0]
   d883e:	3301      	adds	r3, #1
   d8840:	2a00      	cmp	r2, #0
   d8842:	d1f7      	bne.n	d8834 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x30>
                 break;
             p++;               // Next character.
        }

        *p-- = '\0';            // Truncate string.
   d8844:	2200      	movs	r2, #0
   d8846:	1e4b      	subs	r3, r1, #1
   d8848:	700a      	strb	r2, [r1, #0]
        while (*p == '0')       // Remove trailing zeros.
   d884a:	7819      	ldrb	r1, [r3, #0]
   d884c:	2930      	cmp	r1, #48	; 0x30
   d884e:	d102      	bne.n	d8856 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x52>
            *p-- = '\0';
   d8850:	f803 2901 	strb.w	r2, [r3], #-1
                 break;
             p++;               // Next character.
        }

        *p-- = '\0';            // Truncate string.
        while (*p == '0')       // Remove trailing zeros.
   d8854:	e7f9      	b.n	d884a <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x46>
            *p-- = '\0';

        if (*p == '.') {        // If all decimals were zeros, remove ".".
   d8856:	292e      	cmp	r1, #46	; 0x2e
            *p = '\0';
   d8858:	bf04      	itt	eq
   d885a:	2200      	moveq	r2, #0
   d885c:	701a      	strbeq	r2, [r3, #0]
        }
    }
    return String(s);
   d885e:	4629      	mov	r1, r5
   d8860:	4620      	mov	r0, r4
   d8862:	f001 fa84 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d8866:	4620      	mov	r0, r4
   d8868:	46bd      	mov	sp, r7
   d886a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d886c:	0000      	movs	r0, r0
	...

000d8870 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv>:
  //Particle.publish("Bateria", String( sensorReadings.millivolts));
}

// Convert sensorData to CSV String in US units
String WeatherSensors::sensorReadingsToCsvUS()
{
   d8870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   d8874:	4c9e      	ldr	r4, [pc, #632]	; (d8af0 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x280>)
   d8876:	4d9f      	ldr	r5, [pc, #636]	; (d8af4 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x284>)
  //Particle.publish("Bateria", String( sensorReadings.millivolts));
}

// Convert sensorData to CSV String in US units
String WeatherSensors::sensorReadingsToCsvUS()
{
   d8878:	b0c0      	sub	sp, #256	; 0x100
   d887a:	460e      	mov	r6, r1
   d887c:	4680      	mov	r8, r0
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   d887e:	220a      	movs	r2, #10
   d8880:	6821      	ldr	r1, [r4, #0]
   d8882:	4668      	mov	r0, sp
   d8884:	f001 fb0c 	bl	d9ea0 <_ZN6StringC1Emh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8888:	4669      	mov	r1, sp
   d888a:	a804      	add	r0, sp, #16
   d888c:	f001 faae 	bl	d9dec <_ZN6StringC1ERKS_>
   d8890:	4629      	mov	r1, r5
   d8892:	a804      	add	r0, sp, #16
   d8894:	f001 fb55 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
  String(sensorReadings.windDegrees)+
   d8898:	220a      	movs	r2, #10
String WeatherSensors::sensorReadingsToCsvUS()
{
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   d889a:	4607      	mov	r7, r0
  String(sensorReadings.windDegrees)+
   d889c:	88a1      	ldrh	r1, [r4, #4]
   d889e:	a808      	add	r0, sp, #32
   d88a0:	f001 faeb 	bl	d9e7a <_ZN6StringC1Eih>
   d88a4:	a908      	add	r1, sp, #32
   d88a6:	4638      	mov	r0, r7
   d88a8:	f001 fb3f 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
  ","+
   d88ac:	4629      	mov	r1, r5
   d88ae:	f001 fb48 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d88b2:	4681      	mov	r9, r0
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
   d88b4:	88e0      	ldrh	r0, [r4, #6]
   d88b6:	4f90      	ldr	r7, [pc, #576]	; (d8af8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x288>)
   d88b8:	ee07 0a90 	vmov	s15, r0
   d88bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d88c0:	ee17 0a90 	vmov	r0, s15
   d88c4:	f005 f83c 	bl	dd940 <__aeabi_f2d>
   d88c8:	a383      	add	r3, pc, #524	; (adr r3, d8ad8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x268>)
   d88ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d88ce:	f005 f9b5 	bl	ddc3c <__aeabi_ddiv>
   d88d2:	4602      	mov	r2, r0
   d88d4:	460b      	mov	r3, r1
   d88d6:	a80c      	add	r0, sp, #48	; 0x30
   d88d8:	4639      	mov	r1, r7
   d88da:	f001 fb89 	bl	d9ff0 <_ZN6String6formatEPKcz>
   d88de:	2301      	movs	r3, #1
   d88e0:	aa0c      	add	r2, sp, #48	; 0x30
   d88e2:	4631      	mov	r1, r6
   d88e4:	a810      	add	r0, sp, #64	; 0x40
   d88e6:	f7ff ff8d 	bl	d8804 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d88ea:	a910      	add	r1, sp, #64	; 0x40
   d88ec:	4648      	mov	r0, r9
   d88ee:	f001 fb1c 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
  ","+
   d88f2:	4629      	mov	r1, r5
   d88f4:	f001 fb25 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
  String(sensorReadings.humid)+
   d88f8:	220a      	movs	r2, #10
  String(sensorReadings.unixTime)+
  ","+
  String(sensorReadings.windDegrees)+
  ","+
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
  ","+
   d88fa:	4681      	mov	r9, r0
  String(sensorReadings.humid)+
   d88fc:	7a21      	ldrb	r1, [r4, #8]
   d88fe:	a814      	add	r0, sp, #80	; 0x50
   d8900:	f001 faa9 	bl	d9e56 <_ZN6StringC1Ehh>
   d8904:	a914      	add	r1, sp, #80	; 0x50
   d8906:	4648      	mov	r0, r9
   d8908:	f001 fb0f 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
  ","+
   d890c:	4629      	mov	r1, r5
   d890e:	f001 fb18 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d8912:	4681      	mov	r9, r0
  minimiseNumericString(String::format("%.1f",(((float)sensorReadings.airTempKx10-2731.5)*9.0/50.0+32.0)),1)+
   d8914:	8960      	ldrh	r0, [r4, #10]
   d8916:	ee07 0a90 	vmov	s15, r0
   d891a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d891e:	ee17 0a90 	vmov	r0, s15
   d8922:	f005 f80d 	bl	dd940 <__aeabi_f2d>
   d8926:	a36e      	add	r3, pc, #440	; (adr r3, d8ae0 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x270>)
   d8928:	e9d3 2300 	ldrd	r2, r3, [r3]
   d892c:	f004 fea8 	bl	dd680 <__aeabi_dsub>
   d8930:	2200      	movs	r2, #0
   d8932:	4b72      	ldr	r3, [pc, #456]	; (d8afc <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x28c>)
   d8934:	f005 f858 	bl	dd9e8 <__aeabi_dmul>
   d8938:	2200      	movs	r2, #0
   d893a:	4b71      	ldr	r3, [pc, #452]	; (d8b00 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x290>)
   d893c:	f005 f97e 	bl	ddc3c <__aeabi_ddiv>
   d8940:	2200      	movs	r2, #0
   d8942:	4b70      	ldr	r3, [pc, #448]	; (d8b04 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x294>)
   d8944:	f004 fe9e 	bl	dd684 <__adddf3>
   d8948:	4602      	mov	r2, r0
   d894a:	460b      	mov	r3, r1
   d894c:	a818      	add	r0, sp, #96	; 0x60
   d894e:	4639      	mov	r1, r7
   d8950:	f001 fb4e 	bl	d9ff0 <_ZN6String6formatEPKcz>
   d8954:	aa18      	add	r2, sp, #96	; 0x60
   d8956:	2301      	movs	r3, #1
   d8958:	4631      	mov	r1, r6
   d895a:	a81c      	add	r0, sp, #112	; 0x70
   d895c:	f7ff ff52 	bl	d8804 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d8960:	a91c      	add	r1, sp, #112	; 0x70
   d8962:	4648      	mov	r0, r9
   d8964:	f001 fae1 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
  ","+
   d8968:	4629      	mov	r1, r5
   d896a:	f001 faea 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   d896e:	89a3      	ldrh	r3, [r4, #12]
   d8970:	ed9f 7a65 	vldr	s14, [pc, #404]	; d8b08 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x298>
   d8974:	f8df 919c 	ldr.w	r9, [pc, #412]	; d8b14 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a4>
   d8978:	ee07 3a90 	vmov	s15, r3
   d897c:	eef8 7a67 	vcvt.f32.u32	s15, s15
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
  ","+
  String(sensorReadings.humid)+
  ","+
  minimiseNumericString(String::format("%.1f",(((float)sensorReadings.airTempKx10-2731.5)*9.0/50.0+32.0)),1)+
  ","+
   d8980:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   d8982:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d8986:	ee16 0a90 	vmov	r0, s13
   d898a:	f004 ffd9 	bl	dd940 <__aeabi_f2d>
   d898e:	4602      	mov	r2, r0
   d8990:	460b      	mov	r3, r1
   d8992:	a820      	add	r0, sp, #128	; 0x80
   d8994:	4649      	mov	r1, r9
   d8996:	f001 fb2b 	bl	d9ff0 <_ZN6String6formatEPKcz>
   d899a:	aa20      	add	r2, sp, #128	; 0x80
   d899c:	2303      	movs	r3, #3
   d899e:	4631      	mov	r1, r6
   d89a0:	a824      	add	r0, sp, #144	; 0x90
   d89a2:	f7ff ff2f 	bl	d8804 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d89a6:	a924      	add	r1, sp, #144	; 0x90
   d89a8:	4650      	mov	r0, sl
   d89aa:	f001 fabe 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
  ","+
   d89ae:	4629      	mov	r1, r5
   d89b0:	f001 fac7 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d89b4:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.2f",(float)sensorReadings.barometerhPa/338.6389),2)+
   d89b6:	6920      	ldr	r0, [r4, #16]
   d89b8:	f004 ffc2 	bl	dd940 <__aeabi_f2d>
   d89bc:	a34a      	add	r3, pc, #296	; (adr r3, d8ae8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x278>)
   d89be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89c2:	f005 f93b 	bl	ddc3c <__aeabi_ddiv>
   d89c6:	4602      	mov	r2, r0
   d89c8:	460b      	mov	r3, r1
   d89ca:	a828      	add	r0, sp, #160	; 0xa0
   d89cc:	494f      	ldr	r1, [pc, #316]	; (d8b0c <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x29c>)
   d89ce:	f001 fb0f 	bl	d9ff0 <_ZN6String6formatEPKcz>
   d89d2:	aa28      	add	r2, sp, #160	; 0xa0
   d89d4:	2302      	movs	r3, #2
   d89d6:	4631      	mov	r1, r6
   d89d8:	a82c      	add	r0, sp, #176	; 0xb0
   d89da:	f7ff ff13 	bl	d8804 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d89de:	a92c      	add	r1, sp, #176	; 0xb0
   d89e0:	4650      	mov	r0, sl
   d89e2:	f001 faa2 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
  ","+
   d89e6:	4629      	mov	r1, r5
   d89e8:	f001 faab 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d89ec:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.1f",(float)(sensorReadings.gust_metersph/1609.34)),1)+
   d89ee:	8aa0      	ldrh	r0, [r4, #20]
   d89f0:	f004 ff94 	bl	dd91c <__aeabi_i2d>
   d89f4:	a338      	add	r3, pc, #224	; (adr r3, d8ad8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x268>)
   d89f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89fa:	f005 f91f 	bl	ddc3c <__aeabi_ddiv>
   d89fe:	f005 faeb 	bl	ddfd8 <__aeabi_d2f>
   d8a02:	f004 ff9d 	bl	dd940 <__aeabi_f2d>
   d8a06:	4602      	mov	r2, r0
   d8a08:	460b      	mov	r3, r1
   d8a0a:	a830      	add	r0, sp, #192	; 0xc0
   d8a0c:	4639      	mov	r1, r7
   d8a0e:	f001 faef 	bl	d9ff0 <_ZN6String6formatEPKcz>
   d8a12:	aa30      	add	r2, sp, #192	; 0xc0
   d8a14:	2301      	movs	r3, #1
   d8a16:	4631      	mov	r1, r6
   d8a18:	a834      	add	r0, sp, #208	; 0xd0
   d8a1a:	f7ff fef3 	bl	d8804 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d8a1e:	a934      	add	r1, sp, #208	; 0xd0
   d8a20:	4650      	mov	r0, sl
   d8a22:	f001 fa82 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
  ","+
   d8a26:	4629      	mov	r1, r5
   d8a28:	f001 fa8b 	bl	d9f42 <_ZplRK15StringSumHelperPKc>
   d8a2c:	4605      	mov	r5, r0
  minimiseNumericString(String::format("%.3f",(float)sensorReadings.millivolts/1000.0),3); // replace with voltage/lux
   d8a2e:	8ae0      	ldrh	r0, [r4, #22]
   d8a30:	ee07 0a90 	vmov	s15, r0
   d8a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d8a38:	ee17 0a90 	vmov	r0, s15
   d8a3c:	f004 ff80 	bl	dd940 <__aeabi_f2d>
   d8a40:	2200      	movs	r2, #0
   d8a42:	4b33      	ldr	r3, [pc, #204]	; (d8b10 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a0>)
   d8a44:	f005 f8fa 	bl	ddc3c <__aeabi_ddiv>
   d8a48:	4602      	mov	r2, r0
   d8a4a:	460b      	mov	r3, r1
   d8a4c:	a838      	add	r0, sp, #224	; 0xe0
   d8a4e:	4649      	mov	r1, r9
   d8a50:	f001 face 	bl	d9ff0 <_ZN6String6formatEPKcz>
   d8a54:	2303      	movs	r3, #3
   d8a56:	aa38      	add	r2, sp, #224	; 0xe0
   d8a58:	4631      	mov	r1, r6
   d8a5a:	a83c      	add	r0, sp, #240	; 0xf0
   d8a5c:	f7ff fed2 	bl	d8804 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d8a60:	a93c      	add	r1, sp, #240	; 0xf0
   d8a62:	4628      	mov	r0, r5
   d8a64:	f001 fa61 	bl	d9f2a <_ZplRK15StringSumHelperRK6String>
   d8a68:	4601      	mov	r1, r0
   d8a6a:	4640      	mov	r0, r8
   d8a6c:	f001 f9be 	bl	d9dec <_ZN6StringC1ERKS_>
   d8a70:	a83c      	add	r0, sp, #240	; 0xf0
   d8a72:	f001 f935 	bl	d9ce0 <_ZN6StringD1Ev>
   d8a76:	a838      	add	r0, sp, #224	; 0xe0
   d8a78:	f001 f932 	bl	d9ce0 <_ZN6StringD1Ev>
   d8a7c:	a834      	add	r0, sp, #208	; 0xd0
   d8a7e:	f001 f92f 	bl	d9ce0 <_ZN6StringD1Ev>
   d8a82:	a830      	add	r0, sp, #192	; 0xc0
   d8a84:	f001 f92c 	bl	d9ce0 <_ZN6StringD1Ev>
   d8a88:	a82c      	add	r0, sp, #176	; 0xb0
   d8a8a:	f001 f929 	bl	d9ce0 <_ZN6StringD1Ev>
   d8a8e:	a828      	add	r0, sp, #160	; 0xa0
   d8a90:	f001 f926 	bl	d9ce0 <_ZN6StringD1Ev>
   d8a94:	a824      	add	r0, sp, #144	; 0x90
   d8a96:	f001 f923 	bl	d9ce0 <_ZN6StringD1Ev>
   d8a9a:	a820      	add	r0, sp, #128	; 0x80
   d8a9c:	f001 f920 	bl	d9ce0 <_ZN6StringD1Ev>
   d8aa0:	a81c      	add	r0, sp, #112	; 0x70
   d8aa2:	f001 f91d 	bl	d9ce0 <_ZN6StringD1Ev>
   d8aa6:	a818      	add	r0, sp, #96	; 0x60
   d8aa8:	f001 f91a 	bl	d9ce0 <_ZN6StringD1Ev>
   d8aac:	a814      	add	r0, sp, #80	; 0x50
   d8aae:	f001 f917 	bl	d9ce0 <_ZN6StringD1Ev>
   d8ab2:	a810      	add	r0, sp, #64	; 0x40
   d8ab4:	f001 f914 	bl	d9ce0 <_ZN6StringD1Ev>
   d8ab8:	a80c      	add	r0, sp, #48	; 0x30
   d8aba:	f001 f911 	bl	d9ce0 <_ZN6StringD1Ev>
   d8abe:	a808      	add	r0, sp, #32
   d8ac0:	f001 f90e 	bl	d9ce0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d8ac4:	a804      	add	r0, sp, #16
   d8ac6:	f001 f90b 	bl	d9ce0 <_ZN6StringD1Ev>
   d8aca:	4668      	mov	r0, sp
   d8acc:	f001 f908 	bl	d9ce0 <_ZN6StringD1Ev>
  //","+
  //String(sensorReadings.lux)
  //;
  return csvData;
}
   d8ad0:	4640      	mov	r0, r8
   d8ad2:	b040      	add	sp, #256	; 0x100
   d8ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ad8:	28f5c28f 	.word	0x28f5c28f
   d8adc:	4099255c 	.word	0x4099255c
   d8ae0:	00000000 	.word	0x00000000
   d8ae4:	40a55700 	.word	0x40a55700
   d8ae8:	ef34d6a1 	.word	0xef34d6a1
   d8aec:	40752a38 	.word	0x40752a38
   d8af0:	2003d80c 	.word	0x2003d80c
   d8af4:	000e03a4 	.word	0x000e03a4
   d8af8:	000e03a6 	.word	0x000e03a6
   d8afc:	40220000 	.word	0x40220000
   d8b00:	40490000 	.word	0x40490000
   d8b04:	40400000 	.word	0x40400000
   d8b08:	46c67000 	.word	0x46c67000
   d8b0c:	000e03b0 	.word	0x000e03b0
   d8b10:	408f4000 	.word	0x408f4000
   d8b14:	000e03ab 	.word	0x000e03ab

000d8b18 <_ZN5Print5printIlLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d8b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8b1c:	4607      	mov	r7, r0
   d8b1e:	460c      	mov	r4, r1
{
    if (base == 0) {
   d8b20:	4615      	mov	r5, r2
   d8b22:	b92a      	cbnz	r2, d8b30 <_ZN5Print5printIlLi0EEEjT_i+0x18>
        return write(n);
   d8b24:	6803      	ldr	r3, [r0, #0]
   d8b26:	b2c9      	uxtb	r1, r1
   d8b28:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d8b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d8b2e:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d8b30:	2900      	cmp	r1, #0
   d8b32:	da07      	bge.n	d8b44 <_ZN5Print5printIlLi0EEEjT_i+0x2c>
   d8b34:	2a0a      	cmp	r2, #10
   d8b36:	d105      	bne.n	d8b44 <_ZN5Print5printIlLi0EEEjT_i+0x2c>
            t = print('-');
   d8b38:	212d      	movs	r1, #45	; 0x2d
   d8b3a:	f001 fabf 	bl	da0bc <_ZN5Print5printEc>
            val = -n;
   d8b3e:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d8b40:	4606      	mov	r6, r0
            val = -n;
   d8b42:	e001      	b.n	d8b48 <_ZN5Print5printIlLi0EEEjT_i+0x30>
        } else {
            val = n;
   d8b44:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d8b46:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8b48:	b2ea      	uxtb	r2, r5
   d8b4a:	4638      	mov	r0, r7
   d8b4c:	f001 fad5 	bl	da0fa <_ZN5Print11printNumberEmh>
    }
}
   d8b50:	4430      	add	r0, r6
   d8b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8b56 <_GLOBAL__sub_I__ZN14WeatherSensors5beginEv>:
   d8b56:	f000 bb57 	b.w	d9208 <HAL_Pin_Map>
	...

000d8b5c <_ZN14WeatherSensors5beginEv>:
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
   d8b5c:	f241 6274 	movw	r2, #5748	; 0x1674
   d8b60:	2300      	movs	r3, #0
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   d8b62:	b530      	push	{r4, r5, lr}

  AnemoneterPeriodTotal = 0;
   d8b64:	5083      	str	r3, [r0, r2]
  AnemoneterPeriodReadingCount = 0;
   d8b66:	f241 6278 	movw	r2, #5752	; 0x1678
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   d8b6a:	f04f 31ff 	mov.w	r1, #4294967295
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
   d8b6e:	5083      	str	r3, [r0, r2]
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   d8b70:	f241 627c 	movw	r2, #5756	; 0x167c
  lastAnemoneterEvent = 0;


  barom.begin();
   d8b74:	f100 0508 	add.w	r5, r0, #8
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   d8b78:	5081      	str	r1, [r0, r2]
  lastAnemoneterEvent = 0;
   d8b7a:	f500 52b4 	add.w	r2, r0, #5760	; 0x1680
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   d8b7e:	b08b      	sub	sp, #44	; 0x2c

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
  lastAnemoneterEvent = 0;
   d8b80:	6013      	str	r3, [r2, #0]
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   d8b82:	4604      	mov	r4, r0
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
  lastAnemoneterEvent = 0;


  barom.begin();
   d8b84:	4628      	mov	r0, r5
   d8b86:	f7ff f9f0 	bl	d7f6a <_ZN9MPL3115A25beginEv>
  barom.setModeBarometer();
   d8b8a:	4628      	mov	r0, r5
   d8b8c:	f7ff fa17 	bl	d7fbe <_ZN9MPL3115A216setModeBarometerEv>
  barom.setOversampleRate(7);
   d8b90:	2107      	movs	r1, #7
   d8b92:	4628      	mov	r0, r5
   d8b94:	f7ff fa20 	bl	d7fd8 <_ZN9MPL3115A217setOversampleRateEh>
  barom.enableEventFlags();
   d8b98:	4628      	mov	r0, r5
   d8b9a:	f7ff fa31 	bl	d8000 <_ZN9MPL3115A216enableEventFlagsEv>

  am2315.begin();
   d8b9e:	4620      	mov	r0, r4
   d8ba0:	f7fd fb82 	bl	d62a8 <_ZN15Adafruit_AM23155beginEv>

  Serial.begin(9600);

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
  
  if (tsl.begin()) 
   d8ba4:	f504 54b2 	add.w	r4, r4, #5696	; 0x1640
  barom.setOversampleRate(7);
  barom.enableEventFlags();

  am2315.begin();

  Serial.begin(9600);
   d8ba8:	f002 f9be 	bl	daf28 <_Z16_fetch_usbserialv>
   d8bac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d8bb0:	f002 f9ae 	bl	daf10 <_ZN9USBSerial5beginEl>

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
  
  if (tsl.begin()) 
   d8bb4:	340c      	adds	r4, #12

  am2315.begin();

  Serial.begin(9600);

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
   d8bb6:	f002 f9b7 	bl	daf28 <_Z16_fetch_usbserialv>
   d8bba:	4969      	ldr	r1, [pc, #420]	; (d8d60 <_ZN14WeatherSensors5beginEv+0x204>)
   d8bbc:	f001 fa9b 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  
  if (tsl.begin()) 
   d8bc0:	4620      	mov	r0, r4
   d8bc2:	f7fd fa54 	bl	d606e <_ZN16Adafruit_TSL25915beginEv>
   d8bc6:	b118      	cbz	r0, d8bd0 <_ZN14WeatherSensors5beginEv+0x74>
  {
    Serial.println(F("Found a TSL2591 sensor"));
   d8bc8:	f002 f9ae 	bl	daf28 <_Z16_fetch_usbserialv>
   d8bcc:	4965      	ldr	r1, [pc, #404]	; (d8d64 <_ZN14WeatherSensors5beginEv+0x208>)
   d8bce:	e002      	b.n	d8bd6 <_ZN14WeatherSensors5beginEv+0x7a>
  } 
  else 
  {
    Serial.println(F("No sensor found ... check your wiring?"));
   d8bd0:	f002 f9aa 	bl	daf28 <_Z16_fetch_usbserialv>
   d8bd4:	4964      	ldr	r1, [pc, #400]	; (d8d68 <_ZN14WeatherSensors5beginEv+0x20c>)
   d8bd6:	f001 fa8e 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
    
  /* Display some basic information on this sensor */
  sensor_t sensor;
  tsl.getSensor(&sensor);
   d8bda:	4669      	mov	r1, sp
   d8bdc:	4620      	mov	r0, r4
   d8bde:	f7fd f945 	bl	d5e6c <_ZN16Adafruit_TSL25919getSensorEP8sensor_t>
  Serial.println(F("------------------------------------"));
   d8be2:	f002 f9a1 	bl	daf28 <_Z16_fetch_usbserialv>
   d8be6:	4961      	ldr	r1, [pc, #388]	; (d8d6c <_ZN14WeatherSensors5beginEv+0x210>)
   d8be8:	f001 fa85 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Sensor:       ")); Serial.println(sensor.name);
   d8bec:	f002 f99c 	bl	daf28 <_Z16_fetch_usbserialv>
   d8bf0:	495f      	ldr	r1, [pc, #380]	; (d8d70 <_ZN14WeatherSensors5beginEv+0x214>)
   d8bf2:	f001 fa66 	bl	da0c2 <_ZN5Print5printEPK19__FlashStringHelper>
   d8bf6:	f002 f997 	bl	daf28 <_Z16_fetch_usbserialv>
   d8bfa:	4669      	mov	r1, sp
   d8bfc:	f001 fa71 	bl	da0e2 <_ZN5Print7printlnEPKc>
  Serial.print  (F("Driver Ver:   ")); Serial.println(sensor.version);
   d8c00:	f002 f992 	bl	daf28 <_Z16_fetch_usbserialv>
   d8c04:	495b      	ldr	r1, [pc, #364]	; (d8d74 <_ZN14WeatherSensors5beginEv+0x218>)
   d8c06:	f001 fa5c 	bl	da0c2 <_ZN5Print5printEPK19__FlashStringHelper>
   d8c0a:	f002 f98d 	bl	daf28 <_Z16_fetch_usbserialv>
    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
   d8c0e:	220a      	movs	r2, #10
   d8c10:	9903      	ldr	r1, [sp, #12]
   d8c12:	4605      	mov	r5, r0
   d8c14:	f7ff ff80 	bl	d8b18 <_ZN5Print5printIlLi0EEEjT_i>
        n += println();
   d8c18:	4628      	mov	r0, r5
   d8c1a:	f001 fa56 	bl	da0ca <_ZN5Print7printlnEv>
  Serial.print  (F("Unique ID:    ")); Serial.println(sensor.sensor_id);
   d8c1e:	f002 f983 	bl	daf28 <_Z16_fetch_usbserialv>
   d8c22:	4955      	ldr	r1, [pc, #340]	; (d8d78 <_ZN14WeatherSensors5beginEv+0x21c>)
   d8c24:	f001 fa4d 	bl	da0c2 <_ZN5Print5printEPK19__FlashStringHelper>
   d8c28:	f002 f97e 	bl	daf28 <_Z16_fetch_usbserialv>
    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
   d8c2c:	220a      	movs	r2, #10
   d8c2e:	9904      	ldr	r1, [sp, #16]
   d8c30:	4605      	mov	r5, r0
   d8c32:	f7ff ff71 	bl	d8b18 <_ZN5Print5printIlLi0EEEjT_i>
        n += println();
   d8c36:	4628      	mov	r0, r5
   d8c38:	f001 fa47 	bl	da0ca <_ZN5Print7printlnEv>
  Serial.print  (F("Max Value:    ")); Serial.print(sensor.max_value); Serial.println(F(" lux"));
   d8c3c:	f002 f974 	bl	daf28 <_Z16_fetch_usbserialv>
   d8c40:	494e      	ldr	r1, [pc, #312]	; (d8d7c <_ZN14WeatherSensors5beginEv+0x220>)
   d8c42:	f001 fa3e 	bl	da0c2 <_ZN5Print5printEPK19__FlashStringHelper>
   d8c46:	f002 f96f 	bl	daf28 <_Z16_fetch_usbserialv>
   d8c4a:	ed9d 0a06 	vldr	s0, [sp, #24]
   d8c4e:	2102      	movs	r1, #2
   d8c50:	f001 fb32 	bl	da2b8 <_ZN5Print5printEfi>
   d8c54:	f002 f968 	bl	daf28 <_Z16_fetch_usbserialv>
   d8c58:	4949      	ldr	r1, [pc, #292]	; (d8d80 <_ZN14WeatherSensors5beginEv+0x224>)
   d8c5a:	f001 fa4c 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Min Value:    ")); Serial.print(sensor.min_value); Serial.println(F(" lux"));
   d8c5e:	f002 f963 	bl	daf28 <_Z16_fetch_usbserialv>
   d8c62:	4948      	ldr	r1, [pc, #288]	; (d8d84 <_ZN14WeatherSensors5beginEv+0x228>)
   d8c64:	f001 fa2d 	bl	da0c2 <_ZN5Print5printEPK19__FlashStringHelper>
   d8c68:	f002 f95e 	bl	daf28 <_Z16_fetch_usbserialv>
   d8c6c:	ed9d 0a07 	vldr	s0, [sp, #28]
   d8c70:	2102      	movs	r1, #2
   d8c72:	f001 fb21 	bl	da2b8 <_ZN5Print5printEfi>
   d8c76:	f002 f957 	bl	daf28 <_Z16_fetch_usbserialv>
   d8c7a:	4941      	ldr	r1, [pc, #260]	; (d8d80 <_ZN14WeatherSensors5beginEv+0x224>)
   d8c7c:	f001 fa3b 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Resolution:   ")); Serial.print(sensor.resolution, 4); Serial.println(F(" lux"));  
   d8c80:	f002 f952 	bl	daf28 <_Z16_fetch_usbserialv>
   d8c84:	4940      	ldr	r1, [pc, #256]	; (d8d88 <_ZN14WeatherSensors5beginEv+0x22c>)
   d8c86:	f001 fa1c 	bl	da0c2 <_ZN5Print5printEPK19__FlashStringHelper>
   d8c8a:	f002 f94d 	bl	daf28 <_Z16_fetch_usbserialv>
   d8c8e:	ed9d 0a08 	vldr	s0, [sp, #32]
   d8c92:	2104      	movs	r1, #4
   d8c94:	f001 fb10 	bl	da2b8 <_ZN5Print5printEfi>
   d8c98:	f002 f946 	bl	daf28 <_Z16_fetch_usbserialv>
   d8c9c:	4938      	ldr	r1, [pc, #224]	; (d8d80 <_ZN14WeatherSensors5beginEv+0x224>)
   d8c9e:	f001 fa2a 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("------------------------------------"));
   d8ca2:	f002 f941 	bl	daf28 <_Z16_fetch_usbserialv>
   d8ca6:	4931      	ldr	r1, [pc, #196]	; (d8d6c <_ZN14WeatherSensors5beginEv+0x210>)
   d8ca8:	f001 fa25 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F(""));
   d8cac:	f002 f93c 	bl	daf28 <_Z16_fetch_usbserialv>
   d8cb0:	4936      	ldr	r1, [pc, #216]	; (d8d8c <_ZN14WeatherSensors5beginEv+0x230>)
   d8cb2:	f001 fa20 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  delay(500);
   d8cb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d8cba:	f001 fced 	bl	da698 <delay>
  
  /* Configure the sensor */
  // You can change the gain on the fly, to adapt to brighter/dimmer light situations
  //tsl.setGain(TSL2591_GAIN_LOW);    // 1x gain (bright light)
  tsl.setGain(TSL2591_GAIN_MED);      // 25x gain
   d8cbe:	2110      	movs	r1, #16
   d8cc0:	4620      	mov	r0, r4
   d8cc2:	f7fd f9bb 	bl	d603c <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>
  
  // Changing the integration time gives you a longer time over which to sense light
  // longer timelines are slower, but are good in very low light situtations!
  //tsl.setTiming(TSL2591_INTEGRATIONTIME_100MS);  // shortest integration time (bright light)
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_200MS);
  tsl.setTiming(TSL2591_INTEGRATIONTIME_300MS);
   d8cc6:	2102      	movs	r1, #2
   d8cc8:	4620      	mov	r0, r4
   d8cca:	f7fd fa0d 	bl	d60e8 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_400MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_500MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_600MS);  // longest integration time (dim light)

  /* Display the gain and integration time for reference sake */  
  Serial.println(F("------------------------------------"));
   d8cce:	f002 f92b 	bl	daf28 <_Z16_fetch_usbserialv>
   d8cd2:	4926      	ldr	r1, [pc, #152]	; (d8d6c <_ZN14WeatherSensors5beginEv+0x210>)
   d8cd4:	f001 fa0f 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Gain:         "));
   d8cd8:	f002 f926 	bl	daf28 <_Z16_fetch_usbserialv>
   d8cdc:	492c      	ldr	r1, [pc, #176]	; (d8d90 <_ZN14WeatherSensors5beginEv+0x234>)
   d8cde:	f001 f9f0 	bl	da0c2 <_ZN5Print5printEPK19__FlashStringHelper>
  tsl2591Gain_t gain = tsl.getGain();
   d8ce2:	4620      	mov	r0, r4
   d8ce4:	f7fd f8fa 	bl	d5edc <_ZN16Adafruit_TSL25917getGainEv>
  switch(gain)
   d8ce8:	2810      	cmp	r0, #16
   d8cea:	d00d      	beq.n	d8d08 <_ZN14WeatherSensors5beginEv+0x1ac>
   d8cec:	d804      	bhi.n	d8cf8 <_ZN14WeatherSensors5beginEv+0x19c>
   d8cee:	b9a0      	cbnz	r0, d8d1a <_ZN14WeatherSensors5beginEv+0x1be>
  {
    case TSL2591_GAIN_LOW:
      Serial.println(F("1x (Low)"));
   d8cf0:	f002 f91a 	bl	daf28 <_Z16_fetch_usbserialv>
   d8cf4:	4927      	ldr	r1, [pc, #156]	; (d8d94 <_ZN14WeatherSensors5beginEv+0x238>)
   d8cf6:	e00e      	b.n	d8d16 <_ZN14WeatherSensors5beginEv+0x1ba>

  /* Display the gain and integration time for reference sake */  
  Serial.println(F("------------------------------------"));
  Serial.print  (F("Gain:         "));
  tsl2591Gain_t gain = tsl.getGain();
  switch(gain)
   d8cf8:	2820      	cmp	r0, #32
   d8cfa:	d009      	beq.n	d8d10 <_ZN14WeatherSensors5beginEv+0x1b4>
   d8cfc:	2830      	cmp	r0, #48	; 0x30
   d8cfe:	d10c      	bne.n	d8d1a <_ZN14WeatherSensors5beginEv+0x1be>
      break;
    case TSL2591_GAIN_HIGH:
      Serial.println(F("428x (High)"));
      break;
    case TSL2591_GAIN_MAX:
      Serial.println(F("9876x (Max)"));
   d8d00:	f002 f912 	bl	daf28 <_Z16_fetch_usbserialv>
   d8d04:	4924      	ldr	r1, [pc, #144]	; (d8d98 <_ZN14WeatherSensors5beginEv+0x23c>)
   d8d06:	e006      	b.n	d8d16 <_ZN14WeatherSensors5beginEv+0x1ba>
  {
    case TSL2591_GAIN_LOW:
      Serial.println(F("1x (Low)"));
      break;
    case TSL2591_GAIN_MED:
      Serial.println(F("25x (Medium)"));
   d8d08:	f002 f90e 	bl	daf28 <_Z16_fetch_usbserialv>
   d8d0c:	4923      	ldr	r1, [pc, #140]	; (d8d9c <_ZN14WeatherSensors5beginEv+0x240>)
   d8d0e:	e002      	b.n	d8d16 <_ZN14WeatherSensors5beginEv+0x1ba>
      break;
    case TSL2591_GAIN_HIGH:
      Serial.println(F("428x (High)"));
   d8d10:	f002 f90a 	bl	daf28 <_Z16_fetch_usbserialv>
   d8d14:	4922      	ldr	r1, [pc, #136]	; (d8da0 <_ZN14WeatherSensors5beginEv+0x244>)
      break;
    case TSL2591_GAIN_MAX:
      Serial.println(F("9876x (Max)"));
   d8d16:	f001 f9ee 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
      break;
  }
  Serial.print  (F("Timing:       "));
   d8d1a:	f002 f905 	bl	daf28 <_Z16_fetch_usbserialv>
   d8d1e:	4921      	ldr	r1, [pc, #132]	; (d8da4 <_ZN14WeatherSensors5beginEv+0x248>)
   d8d20:	f001 f9cf 	bl	da0c2 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((tsl.getTiming() + 1) * 100, DEC); 
   d8d24:	f002 f900 	bl	daf28 <_Z16_fetch_usbserialv>
   d8d28:	4605      	mov	r5, r0
   d8d2a:	4620      	mov	r0, r4
   d8d2c:	f7fd f8d8 	bl	d5ee0 <_ZN16Adafruit_TSL25919getTimingEv>
   d8d30:	2164      	movs	r1, #100	; 0x64
   d8d32:	220a      	movs	r2, #10
   d8d34:	fb00 1101 	mla	r1, r0, r1, r1
   d8d38:	4628      	mov	r0, r5
   d8d3a:	f7ff feed 	bl	d8b18 <_ZN5Print5printIlLi0EEEjT_i>
  Serial.println(F(" ms"));
   d8d3e:	f002 f8f3 	bl	daf28 <_Z16_fetch_usbserialv>
   d8d42:	4919      	ldr	r1, [pc, #100]	; (d8da8 <_ZN14WeatherSensors5beginEv+0x24c>)
   d8d44:	f001 f9d7 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("------------------------------------"));
   d8d48:	f002 f8ee 	bl	daf28 <_Z16_fetch_usbserialv>
   d8d4c:	4907      	ldr	r1, [pc, #28]	; (d8d6c <_ZN14WeatherSensors5beginEv+0x210>)
   d8d4e:	f001 f9d2 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F(""));
   d8d52:	f002 f8e9 	bl	daf28 <_Z16_fetch_usbserialv>
   d8d56:	490d      	ldr	r1, [pc, #52]	; (d8d8c <_ZN14WeatherSensors5beginEv+0x230>)
   d8d58:	f001 f9cd 	bl	da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   d8d5c:	b00b      	add	sp, #44	; 0x2c
   d8d5e:	bd30      	pop	{r4, r5, pc}
   d8d60:	000e03b5 	.word	0x000e03b5
   d8d64:	000e03d5 	.word	0x000e03d5
   d8d68:	000e03ec 	.word	0x000e03ec
   d8d6c:	000e0413 	.word	0x000e0413
   d8d70:	000e0438 	.word	0x000e0438
   d8d74:	000e0447 	.word	0x000e0447
   d8d78:	000e0456 	.word	0x000e0456
   d8d7c:	000e0465 	.word	0x000e0465
   d8d80:	000e0474 	.word	0x000e0474
   d8d84:	000e0479 	.word	0x000e0479
   d8d88:	000e0488 	.word	0x000e0488
   d8d8c:	000e05d4 	.word	0x000e05d4
   d8d90:	000e0497 	.word	0x000e0497
   d8d94:	000e04a6 	.word	0x000e04a6
   d8d98:	000e04c8 	.word	0x000e04c8
   d8d9c:	000e04af 	.word	0x000e04af
   d8da0:	000e04bc 	.word	0x000e04bc
   d8da4:	000e04d4 	.word	0x000e04d4
   d8da8:	000e04e3 	.word	0x000e04e3

000d8dac <_ZN7FramI2CC1E14framPartNumber>:
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   d8dac:	2250      	movs	r2, #80	; 0x50
   d8dae:	7042      	strb	r2, [r0, #1]
{
//	_topAddressForPartNumber[MB85RC16]		= 0x0007FFUL;
	_topAddressForPartNumber[MB85RC64]		= 0x001FFFUL;
   d8db0:	f641 72ff 	movw	r2, #8191	; 0x1fff
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   d8db4:	b510      	push	{r4, lr}
{
//	_topAddressForPartNumber[MB85RC16]		= 0x0007FFUL;
	_topAddressForPartNumber[MB85RC64]		= 0x001FFFUL;
   d8db6:	6042      	str	r2, [r0, #4]
	_topAddressForPartNumber[MB85RC128A]	= 0x003FFFUL;
   d8db8:	f643 72ff 	movw	r2, #16383	; 0x3fff
   d8dbc:	6082      	str	r2, [r0, #8]
	_topAddressForPartNumber[MB85RC128B]	= 0x003FFFUL;
   d8dbe:	60c2      	str	r2, [r0, #12]
	_topAddressForPartNumber[MB85RC256A]	= 0x007FFFUL;
   d8dc0:	f647 72ff 	movw	r2, #32767	; 0x7fff
   d8dc4:	6102      	str	r2, [r0, #16]
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
   d8dc6:	6142      	str	r2, [r0, #20]
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
   d8dc8:	6182      	str	r2, [r0, #24]
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
   d8dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   d8dce:	7001      	strb	r1, [r0, #0]
	_topAddressForPartNumber[MB85RC128A]	= 0x003FFFUL;
	_topAddressForPartNumber[MB85RC128B]	= 0x003FFFUL;
	_topAddressForPartNumber[MB85RC256A]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
   d8dd0:	61c2      	str	r2, [r0, #28]
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
	_bottomAddress = _baseAddress + _maxBufferSize;
   d8dd2:	2480      	movs	r4, #128	; 0x80
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
   d8dd4:	2200      	movs	r2, #0
	_bottomAddress = _baseAddress + _maxBufferSize;
	_topAddress = _topAddressForPartNumber[_partNumber];
   d8dd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
   d8dda:	6202      	str	r2, [r0, #32]
	_bottomAddress = _baseAddress + _maxBufferSize;
   d8ddc:	6244      	str	r4, [r0, #36]	; 0x24
	_topAddress = _topAddressForPartNumber[_partNumber];
   d8dde:	684a      	ldr	r2, [r1, #4]
   d8de0:	6282      	str	r2, [r0, #40]	; 0x28
	_numberOfBuffers = (_topAddress - _bottomAddress + 1) / _maxBufferSize;
   d8de2:	3a7f      	subs	r2, #127	; 0x7f
   d8de4:	09d2      	lsrs	r2, r2, #7
   d8de6:	62c2      	str	r2, [r0, #44]	; 0x2c
	_nextFreeByte = _bottomAddress;
   d8de8:	6304      	str	r4, [r0, #48]	; 0x30
}
   d8dea:	bd10      	pop	{r4, pc}

000d8dec <_ZN7FramI2C11_readMemoryEmhPh>:
//
// PLATFORM SPECIFIC, LOW LEVEL METHODS
//

void FramI2C::_readMemory(uint32_t address, uint8_t numberOfBytes, uint8_t *buffer)
{
   d8dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8df0:	461e      	mov	r6, r3
   d8df2:	4614      	mov	r4, r2
   d8df4:	460f      	mov	r7, r1
   d8df6:	4605      	mov	r5, r0
	WITH_LOCK(Wire)
   d8df8:	f002 fc98 	bl	db72c <_Z19__fetch_global_Wirev>
   d8dfc:	4680      	mov	r8, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d8dfe:	f002 fa8f 	bl	db320 <_ZN7TwoWire4lockEv>
	{
		uint16_t framAddr = (uint16_t)address;
		// Address only correct for 64 through 512 kbit devices
		Wire.beginTransmission(framI2CAddress);
   d8e02:	f002 fc93 	bl	db72c <_Z19__fetch_global_Wirev>
   d8e06:	7869      	ldrb	r1, [r5, #1]
   d8e08:	f002 fa73 	bl	db2f2 <_ZN7TwoWire17beginTransmissionEh>

		Wire.write(framAddr >> 8);
   d8e0c:	f002 fc8e 	bl	db72c <_Z19__fetch_global_Wirev>
   d8e10:	f3c7 2107 	ubfx	r1, r7, #8, #8
   d8e14:	f7fc fe61 	bl	d5ada <_ZN7TwoWire5writeEi>
		Wire.write(framAddr & 0xFF);
   d8e18:	f002 fc88 	bl	db72c <_Z19__fetch_global_Wirev>
   d8e1c:	b2f9      	uxtb	r1, r7
   d8e1e:	f7fc fe5c 	bl	d5ada <_ZN7TwoWire5writeEi>

		Wire.endTransmission();
   d8e22:	f002 fc83 	bl	db72c <_Z19__fetch_global_Wirev>
   d8e26:	f002 fa6f 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

		// Maximum request size of 32 bytes
		Wire.requestFrom(framI2CAddress, (uint8_t)numberOfBytes);
   d8e2a:	f002 fc7f 	bl	db72c <_Z19__fetch_global_Wirev>
   d8e2e:	4622      	mov	r2, r4
   d8e30:	7869      	ldrb	r1, [r5, #1]
   d8e32:	f002 fa5b 	bl	db2ec <_ZN7TwoWire11requestFromEhj>
   d8e36:	3c01      	subs	r4, #1
   d8e38:	1e75      	subs	r5, r6, #1
   d8e3a:	4434      	add	r4, r6
		for (byte i=0; i < numberOfBytes; i++) {
   d8e3c:	42a5      	cmp	r5, r4
   d8e3e:	d007      	beq.n	d8e50 <_ZN7FramI2C11_readMemoryEmhPh+0x64>
			buffer[i] = Wire.read();
   d8e40:	f002 fc74 	bl	db72c <_Z19__fetch_global_Wirev>
   d8e44:	6803      	ldr	r3, [r0, #0]
   d8e46:	695b      	ldr	r3, [r3, #20]
   d8e48:	4798      	blx	r3
   d8e4a:	f805 0f01 	strb.w	r0, [r5, #1]!

		Wire.endTransmission();

		// Maximum request size of 32 bytes
		Wire.requestFrom(framI2CAddress, (uint8_t)numberOfBytes);
		for (byte i=0; i < numberOfBytes; i++) {
   d8e4e:	e7f5      	b.n	d8e3c <_ZN7FramI2C11_readMemoryEmhPh+0x50>
			buffer[i] = Wire.read();
		}
		Wire.endTransmission();
   d8e50:	f002 fc6c 	bl	db72c <_Z19__fetch_global_Wirev>
   d8e54:	f002 fa58 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d8e58:	4640      	mov	r0, r8
	}
}
   d8e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8e5e:	f002 ba68 	b.w	db332 <_ZN7TwoWire6unlockEv>

000d8e62 <_ZN7FramI2C12_writeMemoryEmhPh>:


void FramI2C::_writeMemory(uint32_t address, uint8_t numberOfBytes, uint8_t *buffer)
{
   d8e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8e66:	461e      	mov	r6, r3
   d8e68:	4614      	mov	r4, r2
   d8e6a:	460d      	mov	r5, r1
   d8e6c:	4680      	mov	r8, r0
	WITH_LOCK(Wire)
   d8e6e:	f002 fc5d 	bl	db72c <_Z19__fetch_global_Wirev>
   d8e72:	4607      	mov	r7, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d8e74:	f002 fa54 	bl	db320 <_ZN7TwoWire4lockEv>
	{	
		uint16_t framAddr = (uint16_t)address;
		// Address only correct for 64 through 512 kbit devices

		Wire.beginTransmission(framI2CAddress);
   d8e78:	f002 fc58 	bl	db72c <_Z19__fetch_global_Wirev>
   d8e7c:	f898 1001 	ldrb.w	r1, [r8, #1]
   d8e80:	f002 fa37 	bl	db2f2 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(framAddr >> 8);
   d8e84:	f002 fc52 	bl	db72c <_Z19__fetch_global_Wirev>
   d8e88:	f3c5 2107 	ubfx	r1, r5, #8, #8
   d8e8c:	f7fc fe25 	bl	d5ada <_ZN7TwoWire5writeEi>
		Wire.write(framAddr & 0xFF);
   d8e90:	f002 fc4c 	bl	db72c <_Z19__fetch_global_Wirev>
   d8e94:	b2e9      	uxtb	r1, r5
   d8e96:	f7fc fe20 	bl	d5ada <_ZN7TwoWire5writeEi>
   d8e9a:	3c01      	subs	r4, #1
   d8e9c:	1e75      	subs	r5, r6, #1
   d8e9e:	4434      	add	r4, r6


		for (uint8_t i=0; i < numberOfBytes; i++) {
   d8ea0:	42a5      	cmp	r5, r4
   d8ea2:	d007      	beq.n	d8eb4 <_ZN7FramI2C12_writeMemoryEmhPh+0x52>
			Wire.write(buffer[i]);
   d8ea4:	f002 fc42 	bl	db72c <_Z19__fetch_global_Wirev>
   d8ea8:	6803      	ldr	r3, [r0, #0]
   d8eaa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d8eae:	689b      	ldr	r3, [r3, #8]
   d8eb0:	4798      	blx	r3
		Wire.beginTransmission(framI2CAddress);
		Wire.write(framAddr >> 8);
		Wire.write(framAddr & 0xFF);


		for (uint8_t i=0; i < numberOfBytes; i++) {
   d8eb2:	e7f5      	b.n	d8ea0 <_ZN7FramI2C12_writeMemoryEmhPh+0x3e>
			Wire.write(buffer[i]);
		}
		Wire.endTransmission();
   d8eb4:	f002 fc3a 	bl	db72c <_Z19__fetch_global_Wirev>
   d8eb8:	f002 fa26 	bl	db308 <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d8ebc:	4638      	mov	r0, r7
	}
}
   d8ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8ec2:	f002 ba36 	b.w	db332 <_ZN7TwoWire6unlockEv>

000d8ec6 <_ZN7FramI2C4readEmjPh>:
  read((uint32_t) _baseAddress, (unsigned int) _maxBufferSize, buffer);
}


framResult FramI2C::read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   d8ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8ec8:	4614      	mov	r4, r2
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   d8eca:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d8ecc:	428a      	cmp	r2, r1
  read((uint32_t) _baseAddress, (unsigned int) _maxBufferSize, buffer);
}


framResult FramI2C::read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   d8ece:	4607      	mov	r7, r0
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   d8ed0:	d81e      	bhi.n	d8f10 <_ZN7FramI2C4readEmjPh+0x4a>
   d8ed2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d8ed4:	4281      	cmp	r1, r0
   d8ed6:	d81b      	bhi.n	d8f10 <_ZN7FramI2C4readEmjPh+0x4a>
	{
		return framBadStartAddress;
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
   d8ed8:	1e62      	subs	r2, r4, #1
   d8eda:	2a7f      	cmp	r2, #127	; 0x7f
   d8edc:	d81a      	bhi.n	d8f14 <_ZN7FramI2C4readEmjPh+0x4e>
	{
		return framBadNumberOfBytes;
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
   d8ede:	440a      	add	r2, r1
   d8ee0:	4290      	cmp	r0, r2
   d8ee2:	d319      	bcc.n	d8f18 <_ZN7FramI2C4readEmjPh+0x52>
   d8ee4:	461d      	mov	r5, r3
   d8ee6:	1ace      	subs	r6, r1, r3
// Read in 30 byte blocks due to wire requestFrom() limit
  const uint8_t blockSize = 30;
  byte* buf = buffer;
  uint32_t address = startAddress;

  while (numberOfBytes >= blockSize)
   d8ee8:	2c1d      	cmp	r4, #29
   d8eea:	eb05 0106 	add.w	r1, r5, r6
   d8eee:	d907      	bls.n	d8f00 <_ZN7FramI2C4readEmjPh+0x3a>
  {
		_readMemory(address, blockSize, buf);
   d8ef0:	462b      	mov	r3, r5
   d8ef2:	221e      	movs	r2, #30
   d8ef4:	4638      	mov	r0, r7
   d8ef6:	f7ff ff79 	bl	d8dec <_ZN7FramI2C11_readMemoryEmhPh>
	  address += blockSize;
		buf += blockSize;
   d8efa:	351e      	adds	r5, #30
	  numberOfBytes -= blockSize;
   d8efc:	3c1e      	subs	r4, #30
   d8efe:	e7f3      	b.n	d8ee8 <_ZN7FramI2C4readEmjPh+0x22>
  }
  if (numberOfBytes > 0)
   d8f00:	b124      	cbz	r4, d8f0c <_ZN7FramI2C4readEmjPh+0x46>
  {
    _readMemory(address, numberOfBytes, buf);
   d8f02:	462b      	mov	r3, r5
   d8f04:	b2e2      	uxtb	r2, r4
   d8f06:	4638      	mov	r0, r7
   d8f08:	f7ff ff70 	bl	d8dec <_ZN7FramI2C11_readMemoryEmhPh>
   d8f0c:	2000      	movs	r0, #0
   d8f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
	{
		return framBadStartAddress;
   d8f10:	2001      	movs	r0, #1
   d8f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
	{
		return framBadNumberOfBytes;
   d8f14:	2002      	movs	r0, #2
   d8f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
	{
		return framBadFinishAddress;
   d8f18:	2003      	movs	r0, #3
   d8f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8f1c <_ZN7FramI2C5writeEmjPh>:
	return framOK;
}


framResult FramI2C::write(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   d8f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f1e:	4614      	mov	r4, r2
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   d8f20:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d8f22:	428a      	cmp	r2, r1
	return framOK;
}


framResult FramI2C::write(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   d8f24:	4607      	mov	r7, r0
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   d8f26:	d81e      	bhi.n	d8f66 <_ZN7FramI2C5writeEmjPh+0x4a>
   d8f28:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d8f2a:	4281      	cmp	r1, r0
   d8f2c:	d81b      	bhi.n	d8f66 <_ZN7FramI2C5writeEmjPh+0x4a>
	{
		return framBadStartAddress;
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
   d8f2e:	1e62      	subs	r2, r4, #1
   d8f30:	2a7f      	cmp	r2, #127	; 0x7f
   d8f32:	d81a      	bhi.n	d8f6a <_ZN7FramI2C5writeEmjPh+0x4e>
	{
		return framBadNumberOfBytes;
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
   d8f34:	440a      	add	r2, r1
   d8f36:	4290      	cmp	r0, r2
   d8f38:	d319      	bcc.n	d8f6e <_ZN7FramI2C5writeEmjPh+0x52>
   d8f3a:	461d      	mov	r5, r3
   d8f3c:	1ace      	subs	r6, r1, r3
	// Write in 32 byte blocks due to wire limit
	  const uint8_t blockSize = 30;
	  byte* buf = buffer;
	  uint32_t address = startAddress;

	  while (numberOfBytes >= blockSize)
   d8f3e:	2c1d      	cmp	r4, #29
   d8f40:	eb05 0106 	add.w	r1, r5, r6
   d8f44:	d907      	bls.n	d8f56 <_ZN7FramI2C5writeEmjPh+0x3a>
	  {
			_writeMemory(address, blockSize, buf);
   d8f46:	462b      	mov	r3, r5
   d8f48:	221e      	movs	r2, #30
   d8f4a:	4638      	mov	r0, r7
   d8f4c:	f7ff ff89 	bl	d8e62 <_ZN7FramI2C12_writeMemoryEmhPh>
		  address += blockSize;
			buf += blockSize;
   d8f50:	351e      	adds	r5, #30
		  numberOfBytes -= blockSize;
   d8f52:	3c1e      	subs	r4, #30
   d8f54:	e7f3      	b.n	d8f3e <_ZN7FramI2C5writeEmjPh+0x22>
	  }
	  if (numberOfBytes > 0)
   d8f56:	b124      	cbz	r4, d8f62 <_ZN7FramI2C5writeEmjPh+0x46>
	  {
	    _writeMemory(address, numberOfBytes, buf);
   d8f58:	462b      	mov	r3, r5
   d8f5a:	b2e2      	uxtb	r2, r4
   d8f5c:	4638      	mov	r0, r7
   d8f5e:	f7ff ff80 	bl	d8e62 <_ZN7FramI2C12_writeMemoryEmhPh>
   d8f62:	2000      	movs	r0, #0
   d8f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
	{
		return framBadStartAddress;
   d8f66:	2001      	movs	r0, #1
   d8f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
	{
		return framBadNumberOfBytes;
   d8f6a:	2002      	movs	r0, #2
   d8f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
	{
		return framBadFinishAddress;
   d8f6e:	2003      	movs	r0, #3
   d8f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8f72 <_ZN7FramI2C14allocateMemoryEmR10framResult>:
	return framOK;
}


uint32_t FramI2C::allocateMemory(uint32_t numberOfBytes, framResult& result)
{
   d8f72:	b510      	push	{r4, lr}

	if ((_nextFreeByte + numberOfBytes) < _topAddress)
   d8f74:	6b04      	ldr	r4, [r0, #48]	; 0x30
   d8f76:	6a83      	ldr	r3, [r0, #40]	; 0x28
   d8f78:	4421      	add	r1, r4
   d8f7a:	4299      	cmp	r1, r3
	{
		uint16_t base = _nextFreeByte;
		_nextFreeByte += numberOfBytes;
   d8f7c:	bf38      	it	cc
   d8f7e:	6301      	strcc	r1, [r0, #48]	; 0x30
   d8f80:	f04f 0300 	mov.w	r3, #0
		result = framOK;
		return base;
	}
	else
	{
		result = framBadFinishAddress;
   d8f84:	bf2d      	iteet	cs
   d8f86:	2103      	movcs	r1, #3
   d8f88:	b2a0      	uxthcc	r0, r4

	if ((_nextFreeByte + numberOfBytes) < _topAddress)
	{
		uint16_t base = _nextFreeByte;
		_nextFreeByte += numberOfBytes;
		result = framOK;
   d8f8a:	7013      	strbcc	r3, [r2, #0]
		return base;
	}
	else
	{
		result = framBadFinishAddress;
   d8f8c:	7011      	strbcs	r1, [r2, #0]
		return 0;
   d8f8e:	bf28      	it	cs
   d8f90:	4618      	movcs	r0, r3
	}
}
   d8f92:	bd10      	pop	{r4, pc}

000d8f94 <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult>:
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d8f94:	b510      	push	{r4, lr}
   d8f96:	4604      	mov	r4, r0
	// Returns result code

	// Validations:
	//		_sizeOfElement <= _bufferSize

	if (_sizeOfElement < _f.getMaxBufferSize())
   d8f98:	2b80      	cmp	r3, #128	; 0x80
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d8f9a:	4608      	mov	r0, r1
   d8f9c:	4611      	mov	r1, r2
		_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   d8f9e:	6021      	str	r1, [r4, #0]
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d8fa0:	9a02      	ldr	r2, [sp, #8]
		_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   d8fa2:	7123      	strb	r3, [r4, #4]
   d8fa4:	60e0      	str	r0, [r4, #12]
	// Returns result code

	// Validations:
	//		_sizeOfElement <= _bufferSize

	if (_sizeOfElement < _f.getMaxBufferSize())
   d8fa6:	d204      	bcs.n	d8fb2 <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult+0x1e>
	{
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement, result);
   d8fa8:	4359      	muls	r1, r3
   d8faa:	f7ff ffe2 	bl	d8f72 <_ZN7FramI2C14allocateMemoryEmR10framResult>
   d8fae:	60a0      	str	r0, [r4, #8]
   d8fb0:	e003      	b.n	d8fba <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult+0x26>
	}
	else
	{
		result = framArrayElementTooBig;
   d8fb2:	2304      	movs	r3, #4
   d8fb4:	7013      	strb	r3, [r2, #0]
		_startAddress = 0;
   d8fb6:	2300      	movs	r3, #0
   d8fb8:	60a3      	str	r3, [r4, #8]
	}
}
   d8fba:	4620      	mov	r0, r4
   d8fbc:	bd10      	pop	{r4, pc}

000d8fbe <_ZN12FramI2CArray11readElementEmPhR10framResult>:


void FramI2CArray::readElement(uint32_t index, byte *buffer, framResult &result)
{
   d8fbe:	b570      	push	{r4, r5, r6, lr}

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   d8fc0:	6885      	ldr	r5, [r0, #8]
	}
}


void FramI2CArray::readElement(uint32_t index, byte *buffer, framResult &result)
{
   d8fc2:	4616      	mov	r6, r2
   d8fc4:	461c      	mov	r4, r3

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   d8fc6:	b90d      	cbnz	r5, d8fcc <_ZN12FramI2CArray11readElementEmPhR10framResult+0xe>
	{
		result = framBadArrayStartAddress;
   d8fc8:	2306      	movs	r3, #6
   d8fca:	e003      	b.n	d8fd4 <_ZN12FramI2CArray11readElementEmPhR10framResult+0x16>
	}
	else if (index >= _numberOfElements)
   d8fcc:	6803      	ldr	r3, [r0, #0]
   d8fce:	428b      	cmp	r3, r1
   d8fd0:	d802      	bhi.n	d8fd8 <_ZN12FramI2CArray11readElementEmPhR10framResult+0x1a>
	{
		result = framBadArrayIndex;
   d8fd2:	2305      	movs	r3, #5
   d8fd4:	7023      	strb	r3, [r4, #0]
   d8fd6:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		result = _f.read(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
   d8fd8:	7902      	ldrb	r2, [r0, #4]
   d8fda:	68c0      	ldr	r0, [r0, #12]
   d8fdc:	4633      	mov	r3, r6
   d8fde:	fb02 5101 	mla	r1, r2, r1, r5
   d8fe2:	f7ff ff70 	bl	d8ec6 <_ZN7FramI2C4readEmjPh>
   d8fe6:	7020      	strb	r0, [r4, #0]
   d8fe8:	bd70      	pop	{r4, r5, r6, pc}

000d8fea <_ZN12FramI2CArray12writeElementEmPhR10framResult>:
}



void FramI2CArray::writeElement(uint32_t index, byte *buffer, framResult &result)
{
   d8fea:	b570      	push	{r4, r5, r6, lr}

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   d8fec:	6885      	ldr	r5, [r0, #8]
}



void FramI2CArray::writeElement(uint32_t index, byte *buffer, framResult &result)
{
   d8fee:	4616      	mov	r6, r2
   d8ff0:	461c      	mov	r4, r3

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   d8ff2:	b90d      	cbnz	r5, d8ff8 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0xe>
	{
		result = framBadArrayStartAddress;
   d8ff4:	2306      	movs	r3, #6
   d8ff6:	e003      	b.n	d9000 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0x16>
	}
	else if (index >= _numberOfElements)
   d8ff8:	6803      	ldr	r3, [r0, #0]
   d8ffa:	428b      	cmp	r3, r1
   d8ffc:	d802      	bhi.n	d9004 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0x1a>
	{
		result = framBadArrayIndex;
   d8ffe:	2305      	movs	r3, #5
   d9000:	7023      	strb	r3, [r4, #0]
   d9002:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		result = _f.write(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
   d9004:	7902      	ldrb	r2, [r0, #4]
   d9006:	68c0      	ldr	r0, [r0, #12]
   d9008:	4633      	mov	r3, r6
   d900a:	fb02 5101 	mla	r1, r2, r1, r5
   d900e:	f7ff ff85 	bl	d8f1c <_ZN7FramI2C5writeEmjPh>
   d9012:	7020      	strb	r0, [r4, #0]
   d9014:	bd70      	pop	{r4, r5, r6, pc}

000d9016 <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult>:
	{
		return (uint32_t)(x+b);
	}
}

Ring_FramArray::Ring_FramArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d9016:	b538      	push	{r3, r4, r5, lr}
   d9018:	4604      	mov	r4, r0
   d901a:	4615      	mov	r5, r2
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
{
	if (_sizeOfElement < _f.getMaxBufferSize())
   d901c:	2b80      	cmp	r3, #128	; 0x80
	{
		return (uint32_t)(x+b);
	}
}

Ring_FramArray::Ring_FramArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d901e:	4608      	mov	r0, r1
   d9020:	9a04      	ldr	r2, [sp, #16]
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   d9022:	6025      	str	r5, [r4, #0]
   d9024:	7123      	strb	r3, [r4, #4]
   d9026:	60e1      	str	r1, [r4, #12]
{
	if (_sizeOfElement < _f.getMaxBufferSize())
   d9028:	d20b      	bcs.n	d9042 <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult+0x2c>
	{
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
   d902a:	3501      	adds	r5, #1
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   d902c:	fb05 f103 	mul.w	r1, r5, r3
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
{
	if (_sizeOfElement < _f.getMaxBufferSize())
	{
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
   d9030:	6025      	str	r5, [r4, #0]
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   d9032:	310c      	adds	r1, #12
   d9034:	f7ff ff9d 	bl	d8f72 <_ZN7FramI2C14allocateMemoryEmR10framResult>
	return _topAddress;
}

uint32_t FramI2C::getNextFreeByte()
{
	return _nextFreeByte;
   d9038:	68e3      	ldr	r3, [r4, #12]
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   d903a:	60a0      	str	r0, [r4, #8]
	return _topAddress;
}

uint32_t FramI2C::getNextFreeByte()
{
	return _nextFreeByte;
   d903c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		_numberOfElements = _numberOfElements + 1;
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
		_ringEndAddress = _f.getNextFreeByte();
   d903e:	61a3      	str	r3, [r4, #24]
   d9040:	e003      	b.n	d904a <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult+0x34>
		// 	}
		// }
	}
	else
	{
		result = framArrayElementTooBig;
   d9042:	2304      	movs	r3, #4
   d9044:	7013      	strb	r3, [r2, #0]
		// Add checks in the other functions to use start address
		_startAddress = 0;
   d9046:	2300      	movs	r3, #0
   d9048:	60a3      	str	r3, [r4, #8]
		// _tailAddress = 0;
		// _headAddress = 0;
	}
}
   d904a:	4620      	mov	r0, r4
   d904c:	bd38      	pop	{r3, r4, r5, pc}

000d904e <_ZN14Ring_FramArray11setPointersEv>:
	}
}

void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
   d904e:	6883      	ldr	r3, [r0, #8]
   d9050:	b16b      	cbz	r3, d906e <_ZN14Ring_FramArray11setPointersEv+0x20>
	{
		_pointers.head = _headAddress;
   d9052:	6942      	ldr	r2, [r0, #20]
		_pointers.tail = _tailAddress;
   d9054:	6903      	ldr	r3, [r0, #16]
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   d9056:	6a81      	ldr	r1, [r0, #40]	; 0x28
void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
	{
		_pointers.head = _headAddress;
		_pointers.tail = _tailAddress;
   d9058:	6203      	str	r3, [r0, #32]
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   d905a:	4413      	add	r3, r2

void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
	{
		_pointers.head = _headAddress;
   d905c:	6242      	str	r2, [r0, #36]	; 0x24
		_pointers.tail = _tailAddress;
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   d905e:	185a      	adds	r2, r3, r1
   d9060:	4603      	mov	r3, r0
   d9062:	f843 2f1c 	str.w	r2, [r3, #28]!
		// Save pointers to fram
		_f.write(_pointersAddress, sizeof(_pointers),(uint8_t*)&_pointers);
   d9066:	220c      	movs	r2, #12
   d9068:	68c0      	ldr	r0, [r0, #12]
   d906a:	f7ff bf57 	b.w	d8f1c <_ZN7FramI2C5writeEmjPh>
   d906e:	4770      	bx	lr

000d9070 <_ZN14Ring_FramArray11getPointersEv>:
	}
}

void Ring_FramArray::getPointers()
{
_pointers.tail=99;
   d9070:	2363      	movs	r3, #99	; 0x63
   d9072:	6203      	str	r3, [r0, #32]
_pointers.head=100;
   d9074:	2364      	movs	r3, #100	; 0x64
   d9076:	6243      	str	r3, [r0, #36]	; 0x24

framResult checkresult;
	//read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
	checkresult = _f.read(_pointersAddress, sizeof(_pointers), (uint8_t*)&_pointers);
   d9078:	6a81      	ldr	r1, [r0, #40]	; 0x28
   d907a:	f100 031c 	add.w	r3, r0, #28
   d907e:	220c      	movs	r2, #12
   d9080:	68c0      	ldr	r0, [r0, #12]
   d9082:	f7ff bf20 	b.w	d8ec6 <_ZN7FramI2C4readEmjPh>

000d9086 <_ZN14Ring_FramArray10initializeEv>:
		// _headAddress = 0;
	}
}

void Ring_FramArray::initialize()
{
   d9086:	b510      	push	{r4, lr}
   d9088:	4604      	mov	r4, r0
	// if (result==framOK)
	// {
		if (!Wire.isEnabled())
   d908a:	f002 fb4f 	bl	db72c <_Z19__fetch_global_Wirev>
   d908e:	f002 f93e 	bl	db30e <_ZN7TwoWire9isEnabledEv>
   d9092:	b918      	cbnz	r0, d909c <_ZN14Ring_FramArray10initializeEv+0x16>
		{
			Wire.begin();
   d9094:	f002 fb4a 	bl	db72c <_Z19__fetch_global_Wirev>
   d9098:	f002 f8f4 	bl	db284 <_ZN7TwoWire5beginEv>
		}

		_pointersAddress = _ringEndAddress - (uint32_t)sizeof(_pointers);
   d909c:	69a3      	ldr	r3, [r4, #24]
   d909e:	3b0c      	subs	r3, #12
   d90a0:	62a3      	str	r3, [r4, #40]	; 0x28

		// Load pointers from FRAM
		getPointers();
   d90a2:	4620      	mov	r0, r4
   d90a4:	f7ff ffe4 	bl	d9070 <_ZN14Ring_FramArray11getPointersEv>
		// Check for initialization or existance of pointers
		// Rule to check _pointers.pointerCheck = _pointersAddress+_pointers.tail+pointers.head
		uint32_t check = _pointersAddress + _pointers.tail + _pointers.head;
		if (check==_pointers.pointerCheck)
   d90a8:	f104 0120 	add.w	r1, r4, #32
   d90ac:	c90e      	ldmia	r1, {r1, r2, r3}
   d90ae:	69e0      	ldr	r0, [r4, #28]
   d90b0:	440b      	add	r3, r1
   d90b2:	4413      	add	r3, r2
   d90b4:	4283      	cmp	r3, r0
			_headAddress = _pointers.head;
		}
		else
		{
			// First run
			_tailAddress = 0;
   d90b6:	bf13      	iteet	ne
   d90b8:	2300      	movne	r3, #0
		// Rule to check _pointers.pointerCheck = _pointersAddress+_pointers.tail+pointers.head
		uint32_t check = _pointersAddress + _pointers.tail + _pointers.head;
		if (check==_pointers.pointerCheck)
		{
			// Not first run so initialize from FRAM
			_tailAddress = _pointers.tail;
   d90ba:	6121      	streq	r1, [r4, #16]
			_headAddress = _pointers.head;
   d90bc:	6162      	streq	r2, [r4, #20]
		}
		else
		{
			// First run
			_tailAddress = 0;
   d90be:	6123      	strne	r3, [r4, #16]
			_headAddress = 0;			
   d90c0:	bf18      	it	ne
   d90c2:	6163      	strne	r3, [r4, #20]
		}
		setPointers();
   d90c4:	4620      	mov	r0, r4
	// }
}
   d90c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		{
			// First run
			_tailAddress = 0;
			_headAddress = 0;			
		}
		setPointers();
   d90ca:	f7ff bfc0 	b.w	d904e <_ZN14Ring_FramArray11setPointersEv>

000d90ce <_GLOBAL__sub_I__ZN7FramI2CC2E14framPartNumber>:
   d90ce:	f000 b89b 	b.w	d9208 <HAL_Pin_Map>

000d90d2 <_ZN13RunningMedianD1Ev>:
{
#ifdef RUNNING_MEDIAN_USE_MALLOC
  free(_ar);
  free(_p);
#endif
}
   d90d2:	4770      	bx	lr

000d90d4 <_ZN13RunningMedian5clearEv>:

// resets all counters
void RunningMedian::clear()
{
  _cnt = 0;
   d90d4:	2300      	movs	r3, #0
   d90d6:	8083      	strh	r3, [r0, #4]
  _idx = 0;
   d90d8:	80c3      	strh	r3, [r0, #6]
  _sorted = false;
   d90da:	7003      	strb	r3, [r0, #0]
  for (uint16_t i = 0; i < _size; i++) _p[i] = i;
   d90dc:	8841      	ldrh	r1, [r0, #2]
   d90de:	f500 60b0 	add.w	r0, r0, #1408	; 0x580
   d90e2:	b29a      	uxth	r2, r3
   d90e4:	428a      	cmp	r2, r1
   d90e6:	d203      	bcs.n	d90f0 <_ZN13RunningMedian5clearEv+0x1c>
   d90e8:	f820 2f02 	strh.w	r2, [r0, #2]!
   d90ec:	3301      	adds	r3, #1
   d90ee:	e7f8      	b.n	d90e2 <_ZN13RunningMedian5clearEv+0xe>
   d90f0:	4770      	bx	lr

000d90f2 <_ZN13RunningMedianC1Et>:
//
// Modified by Robert Mawrey for uint16_t values
#include "RunningMedian16Bit.h"

//RunningMedian::RunningMedian(const uint8_t size)
RunningMedian::RunningMedian(const uint16_t size)
   d90f2:	b510      	push	{r4, lr}
   d90f4:	4604      	mov	r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d90f6:	b129      	cbz	r1, d9104 <_ZN13RunningMedianC1Et+0x12>
   d90f8:	f240 23bd 	movw	r3, #701	; 0x2bd
   d90fc:	4299      	cmp	r1, r3
   d90fe:	bfa8      	it	ge
   d9100:	4619      	movge	r1, r3
   d9102:	e000      	b.n	d9106 <_ZN13RunningMedianC1Et+0x14>
   d9104:	2101      	movs	r1, #1
//  _ar = (float *) malloc(_size * sizeof(float));
_ar = (uint16_t *) malloc(_size * sizeof(uint16_t));
  _p = (uint16_t *) malloc(_size * sizeof(uint16_t));
#endif

  clear();
   d9106:	4620      	mov	r0, r4
#include "RunningMedian16Bit.h"

//RunningMedian::RunningMedian(const uint8_t size)
RunningMedian::RunningMedian(const uint16_t size)
{
  _size = constrain(size, MEDIAN_MIN_SIZE, MEDIAN_MAX_SIZE);
   d9108:	8061      	strh	r1, [r4, #2]
//  _ar = (float *) malloc(_size * sizeof(float));
_ar = (uint16_t *) malloc(_size * sizeof(uint16_t));
  _p = (uint16_t *) malloc(_size * sizeof(uint16_t));
#endif

  clear();
   d910a:	f7ff ffe3 	bl	d90d4 <_ZN13RunningMedian5clearEv>
}
   d910e:	4620      	mov	r0, r4
   d9110:	bd10      	pop	{r4, pc}

000d9112 <_ZN13RunningMedian3addEt>:

// adds a new value to the data-set
// or overwrites the oldest if full.
void RunningMedian::add(uint16_t value)
{
  _ar[_idx++] = value;
   d9112:	88c2      	ldrh	r2, [r0, #6]
   d9114:	1c53      	adds	r3, r2, #1
   d9116:	3204      	adds	r2, #4
   d9118:	b29b      	uxth	r3, r3
   d911a:	80c3      	strh	r3, [r0, #6]
   d911c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  if (_idx >= _size) _idx = 0; // wrap around
   d9120:	8842      	ldrh	r2, [r0, #2]
   d9122:	4293      	cmp	r3, r2
   d9124:	bf24      	itt	cs
   d9126:	2300      	movcs	r3, #0
   d9128:	80c3      	strhcs	r3, [r0, #6]
  if (_cnt < _size) _cnt++;
   d912a:	8883      	ldrh	r3, [r0, #4]
   d912c:	429a      	cmp	r2, r3
   d912e:	bf84      	itt	hi
   d9130:	3301      	addhi	r3, #1
   d9132:	8083      	strhhi	r3, [r0, #4]
  _sorted = false;
   d9134:	2300      	movs	r3, #0
   d9136:	7003      	strb	r3, [r0, #0]
   d9138:	4770      	bx	lr

000d913a <_ZN13RunningMedian4sortEv>:
  }
}
#endif

void RunningMedian::sort()
{
   d913a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // bubble sort with flag
  for (uint16_t i = 0; i < _cnt-1; i++)
   d913e:	f8b0 e004 	ldrh.w	lr, [r0, #4]
   d9142:	2600      	movs	r6, #0
   d9144:	f10e 3cff 	add.w	ip, lr, #4294967295
   d9148:	b2b2      	uxth	r2, r6
   d914a:	4562      	cmp	r2, ip
   d914c:	da20      	bge.n	d9190 <_ZN13RunningMedian4sortEv+0x56>
   d914e:	2301      	movs	r3, #1
   d9150:	461f      	mov	r7, r3
  {
    bool flag = true;
    for (uint16_t j = 1; j < _cnt-i; j++)
   d9152:	ebc2 050e 	rsb	r5, r2, lr
   d9156:	42ab      	cmp	r3, r5
   d9158:	da17      	bge.n	d918a <_ZN13RunningMedian4sortEv+0x50>
   d915a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
   d915e:	3301      	adds	r3, #1
    {
      if (_ar[_p[j-1]] > _ar[_p[j]])
   d9160:	f8b2 1580 	ldrh.w	r1, [r2, #1408]	; 0x580
   d9164:	f8b2 4582 	ldrh.w	r4, [r2, #1410]	; 0x582
   d9168:	f101 0904 	add.w	r9, r1, #4
   d916c:	f104 0804 	add.w	r8, r4, #4
   d9170:	f830 9019 	ldrh.w	r9, [r0, r9, lsl #1]
   d9174:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
   d9178:	45c1      	cmp	r9, r8
      {
        uint16_t t = _p[j-1];
        _p[j-1] = _p[j];
   d917a:	bf82      	ittt	hi
   d917c:	f8a2 4580 	strhhi.w	r4, [r2, #1408]	; 0x580
        _p[j] = t;
   d9180:	f8a2 1582 	strhhi.w	r1, [r2, #1410]	; 0x582
        flag = false;
   d9184:	2700      	movhi	r7, #0
{
  // bubble sort with flag
  for (uint16_t i = 0; i < _cnt-1; i++)
  {
    bool flag = true;
    for (uint16_t j = 1; j < _cnt-i; j++)
   d9186:	b29b      	uxth	r3, r3
   d9188:	e7e5      	b.n	d9156 <_ZN13RunningMedian4sortEv+0x1c>
   d918a:	3601      	adds	r6, #1
        _p[j-1] = _p[j];
        _p[j] = t;
        flag = false;
      }
    }
    if (flag) break;
   d918c:	2f00      	cmp	r7, #0
   d918e:	d0db      	beq.n	d9148 <_ZN13RunningMedian4sortEv+0xe>
  }
  _sorted = true;
   d9190:	2301      	movs	r3, #1
   d9192:	7003      	strb	r3, [r0, #0]
   d9194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9198 <_ZN13RunningMedian9getMedianEv>:
  if (_cnt < _size) _cnt++;
  _sorted = false;
}

uint16_t RunningMedian::getMedian()
{
   d9198:	b510      	push	{r4, lr}
  if (_cnt == 0) return NAN;
   d919a:	8883      	ldrh	r3, [r0, #4]
  if (_cnt < _size) _cnt++;
  _sorted = false;
}

uint16_t RunningMedian::getMedian()
{
   d919c:	4604      	mov	r4, r0
  if (_cnt == 0) return NAN;
   d919e:	b1f3      	cbz	r3, d91de <_ZN13RunningMedian9getMedianEv+0x46>

  if (_sorted == false) sort();
   d91a0:	7803      	ldrb	r3, [r0, #0]
   d91a2:	b90b      	cbnz	r3, d91a8 <_ZN13RunningMedian9getMedianEv+0x10>
   d91a4:	f7ff ffc9 	bl	d913a <_ZN13RunningMedian4sortEv>

  if (_cnt & 0x01) return _ar[_p[_cnt/2]];
   d91a8:	88a3      	ldrh	r3, [r4, #4]
   d91aa:	f013 0f01 	tst.w	r3, #1
   d91ae:	ea4f 0353 	mov.w	r3, r3, lsr #1
   d91b2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d91b6:	d005      	beq.n	d91c4 <_ZN13RunningMedian9getMedianEv+0x2c>
   d91b8:	f8b3 3582 	ldrh.w	r3, [r3, #1410]	; 0x582
   d91bc:	3304      	adds	r3, #4
   d91be:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   d91c2:	e00c      	b.n	d91de <_ZN13RunningMedian9getMedianEv+0x46>
  else return (_ar[_p[_cnt/2]] + _ar[_p[_cnt/2 - 1]]) / 2;
   d91c4:	f8b3 2582 	ldrh.w	r2, [r3, #1410]	; 0x582
   d91c8:	3204      	adds	r2, #4
   d91ca:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
   d91ce:	f8b3 2580 	ldrh.w	r2, [r3, #1408]	; 0x580
   d91d2:	3204      	adds	r2, #4
   d91d4:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
   d91d8:	440b      	add	r3, r1
   d91da:	f3c3 034f 	ubfx	r3, r3, #1, #16
}
   d91de:	4618      	mov	r0, r3
   d91e0:	bd10      	pop	{r4, pc}

000d91e2 <_GLOBAL__sub_I__ZN13RunningMedianC2Et>:
   d91e2:	f000 b811 	b.w	d9208 <HAL_Pin_Map>
	...

000d91e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d91e8:	b508      	push	{r3, lr}
   d91ea:	4b02      	ldr	r3, [pc, #8]	; (d91f4 <netdb_freeaddrinfo+0xc>)
   d91ec:	681b      	ldr	r3, [r3, #0]
   d91ee:	689b      	ldr	r3, [r3, #8]
   d91f0:	9301      	str	r3, [sp, #4]
   d91f2:	bd08      	pop	{r3, pc}
   d91f4:	00030268 	.word	0x00030268

000d91f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d91f8:	b508      	push	{r3, lr}
   d91fa:	4b02      	ldr	r3, [pc, #8]	; (d9204 <netdb_getaddrinfo+0xc>)
   d91fc:	681b      	ldr	r3, [r3, #0]
   d91fe:	68db      	ldr	r3, [r3, #12]
   d9200:	9301      	str	r3, [sp, #4]
   d9202:	bd08      	pop	{r3, pc}
   d9204:	00030268 	.word	0x00030268

000d9208 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d9208:	b508      	push	{r3, lr}
   d920a:	4b02      	ldr	r3, [pc, #8]	; (d9214 <HAL_Pin_Map+0xc>)
   d920c:	681b      	ldr	r3, [r3, #0]
   d920e:	681b      	ldr	r3, [r3, #0]
   d9210:	9301      	str	r3, [sp, #4]
   d9212:	bd08      	pop	{r3, pc}
   d9214:	0003022c 	.word	0x0003022c

000d9218 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d9218:	b508      	push	{r3, lr}
   d921a:	4b02      	ldr	r3, [pc, #8]	; (d9224 <HAL_Validate_Pin_Function+0xc>)
   d921c:	681b      	ldr	r3, [r3, #0]
   d921e:	685b      	ldr	r3, [r3, #4]
   d9220:	9301      	str	r3, [sp, #4]
   d9222:	bd08      	pop	{r3, pc}
   d9224:	0003022c 	.word	0x0003022c

000d9228 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d9228:	b508      	push	{r3, lr}
   d922a:	4b02      	ldr	r3, [pc, #8]	; (d9234 <HAL_Pin_Mode+0xc>)
   d922c:	681b      	ldr	r3, [r3, #0]
   d922e:	689b      	ldr	r3, [r3, #8]
   d9230:	9301      	str	r3, [sp, #4]
   d9232:	bd08      	pop	{r3, pc}
   d9234:	0003022c 	.word	0x0003022c

000d9238 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d9238:	b508      	push	{r3, lr}
   d923a:	4b02      	ldr	r3, [pc, #8]	; (d9244 <HAL_Get_Pin_Mode+0xc>)
   d923c:	681b      	ldr	r3, [r3, #0]
   d923e:	68db      	ldr	r3, [r3, #12]
   d9240:	9301      	str	r3, [sp, #4]
   d9242:	bd08      	pop	{r3, pc}
   d9244:	0003022c 	.word	0x0003022c

000d9248 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d9248:	b508      	push	{r3, lr}
   d924a:	4b02      	ldr	r3, [pc, #8]	; (d9254 <HAL_GPIO_Write+0xc>)
   d924c:	681b      	ldr	r3, [r3, #0]
   d924e:	691b      	ldr	r3, [r3, #16]
   d9250:	9301      	str	r3, [sp, #4]
   d9252:	bd08      	pop	{r3, pc}
   d9254:	0003022c 	.word	0x0003022c

000d9258 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d9258:	b508      	push	{r3, lr}
   d925a:	4b02      	ldr	r3, [pc, #8]	; (d9264 <HAL_Interrupts_Attach+0xc>)
   d925c:	681b      	ldr	r3, [r3, #0]
   d925e:	699b      	ldr	r3, [r3, #24]
   d9260:	9301      	str	r3, [sp, #4]
   d9262:	bd08      	pop	{r3, pc}
   d9264:	0003022c 	.word	0x0003022c

000d9268 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d9268:	b508      	push	{r3, lr}
   d926a:	4b02      	ldr	r3, [pc, #8]	; (d9274 <HAL_Interrupts_Detach+0xc>)
   d926c:	681b      	ldr	r3, [r3, #0]
   d926e:	69db      	ldr	r3, [r3, #28]
   d9270:	9301      	str	r3, [sp, #4]
   d9272:	bd08      	pop	{r3, pc}
   d9274:	0003022c 	.word	0x0003022c

000d9278 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d9278:	b508      	push	{r3, lr}
   d927a:	4b02      	ldr	r3, [pc, #8]	; (d9284 <HAL_ADC_Read+0xc>)
   d927c:	681b      	ldr	r3, [r3, #0]
   d927e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9280:	9301      	str	r3, [sp, #4]
   d9282:	bd08      	pop	{r3, pc}
   d9284:	0003022c 	.word	0x0003022c

000d9288 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d9288:	b508      	push	{r3, lr}
   d928a:	4b02      	ldr	r3, [pc, #8]	; (d9294 <HAL_SPI_Begin+0xc>)
   d928c:	681b      	ldr	r3, [r3, #0]
   d928e:	681b      	ldr	r3, [r3, #0]
   d9290:	9301      	str	r3, [sp, #4]
   d9292:	bd08      	pop	{r3, pc}
   d9294:	00030230 	.word	0x00030230

000d9298 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d9298:	b508      	push	{r3, lr}
   d929a:	4b02      	ldr	r3, [pc, #8]	; (d92a4 <HAL_SPI_Send_Receive_Data+0xc>)
   d929c:	681b      	ldr	r3, [r3, #0]
   d929e:	695b      	ldr	r3, [r3, #20]
   d92a0:	9301      	str	r3, [sp, #4]
   d92a2:	bd08      	pop	{r3, pc}
   d92a4:	00030230 	.word	0x00030230

000d92a8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d92a8:	b508      	push	{r3, lr}
   d92aa:	4b02      	ldr	r3, [pc, #8]	; (d92b4 <HAL_SPI_Init+0xc>)
   d92ac:	681b      	ldr	r3, [r3, #0]
   d92ae:	69db      	ldr	r3, [r3, #28]
   d92b0:	9301      	str	r3, [sp, #4]
   d92b2:	bd08      	pop	{r3, pc}
   d92b4:	00030230 	.word	0x00030230

000d92b8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d92b8:	b508      	push	{r3, lr}
   d92ba:	4b02      	ldr	r3, [pc, #8]	; (d92c4 <HAL_SPI_Is_Enabled+0xc>)
   d92bc:	681b      	ldr	r3, [r3, #0]
   d92be:	6a1b      	ldr	r3, [r3, #32]
   d92c0:	9301      	str	r3, [sp, #4]
   d92c2:	bd08      	pop	{r3, pc}
   d92c4:	00030230 	.word	0x00030230

000d92c8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d92c8:	b508      	push	{r3, lr}
   d92ca:	4b02      	ldr	r3, [pc, #8]	; (d92d4 <HAL_SPI_Info+0xc>)
   d92cc:	681b      	ldr	r3, [r3, #0]
   d92ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d92d0:	9301      	str	r3, [sp, #4]
   d92d2:	bd08      	pop	{r3, pc}
   d92d4:	00030230 	.word	0x00030230

000d92d8 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d92d8:	b508      	push	{r3, lr}
   d92da:	4b02      	ldr	r3, [pc, #8]	; (d92e4 <HAL_SPI_DMA_Transfer+0xc>)
   d92dc:	681b      	ldr	r3, [r3, #0]
   d92de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d92e0:	9301      	str	r3, [sp, #4]
   d92e2:	bd08      	pop	{r3, pc}
   d92e4:	00030230 	.word	0x00030230

000d92e8 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d92e8:	b508      	push	{r3, lr}
   d92ea:	4b02      	ldr	r3, [pc, #8]	; (d92f4 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d92ec:	681b      	ldr	r3, [r3, #0]
   d92ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d92f0:	9301      	str	r3, [sp, #4]
   d92f2:	bd08      	pop	{r3, pc}
   d92f4:	00030230 	.word	0x00030230

000d92f8 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d92f8:	b508      	push	{r3, lr}
   d92fa:	4b02      	ldr	r3, [pc, #8]	; (d9304 <HAL_SPI_Set_Settings+0xc>)
   d92fc:	681b      	ldr	r3, [r3, #0]
   d92fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d9300:	9301      	str	r3, [sp, #4]
   d9302:	bd08      	pop	{r3, pc}
   d9304:	00030230 	.word	0x00030230

000d9308 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d9308:	b508      	push	{r3, lr}
   d930a:	4b02      	ldr	r3, [pc, #8]	; (d9314 <HAL_SPI_Acquire+0xc>)
   d930c:	681b      	ldr	r3, [r3, #0]
   d930e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9310:	9301      	str	r3, [sp, #4]
   d9312:	bd08      	pop	{r3, pc}
   d9314:	00030230 	.word	0x00030230

000d9318 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d9318:	b508      	push	{r3, lr}
   d931a:	4b02      	ldr	r3, [pc, #8]	; (d9324 <HAL_SPI_Release+0xc>)
   d931c:	681b      	ldr	r3, [r3, #0]
   d931e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9320:	9301      	str	r3, [sp, #4]
   d9322:	bd08      	pop	{r3, pc}
   d9324:	00030230 	.word	0x00030230

000d9328 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d9328:	b508      	push	{r3, lr}
   d932a:	4b02      	ldr	r3, [pc, #8]	; (d9334 <HAL_RNG_GetRandomNumber+0xc>)
   d932c:	681b      	ldr	r3, [r3, #0]
   d932e:	685b      	ldr	r3, [r3, #4]
   d9330:	9301      	str	r3, [sp, #4]
   d9332:	bd08      	pop	{r3, pc}
   d9334:	00030218 	.word	0x00030218

000d9338 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d9338:	b508      	push	{r3, lr}
   d933a:	4b02      	ldr	r3, [pc, #8]	; (d9344 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d933c:	681b      	ldr	r3, [r3, #0]
   d933e:	691b      	ldr	r3, [r3, #16]
   d9340:	9301      	str	r3, [sp, #4]
   d9342:	bd08      	pop	{r3, pc}
   d9344:	00030218 	.word	0x00030218

000d9348 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d9348:	b508      	push	{r3, lr}
   d934a:	4b02      	ldr	r3, [pc, #8]	; (d9354 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d934c:	681b      	ldr	r3, [r3, #0]
   d934e:	695b      	ldr	r3, [r3, #20]
   d9350:	9301      	str	r3, [sp, #4]
   d9352:	bd08      	pop	{r3, pc}
   d9354:	00030218 	.word	0x00030218

000d9358 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d9358:	b508      	push	{r3, lr}
   d935a:	4b02      	ldr	r3, [pc, #8]	; (d9364 <HAL_RTC_Get_UnixTime+0xc>)
   d935c:	681b      	ldr	r3, [r3, #0]
   d935e:	69db      	ldr	r3, [r3, #28]
   d9360:	9301      	str	r3, [sp, #4]
   d9362:	bd08      	pop	{r3, pc}
   d9364:	00030218 	.word	0x00030218

000d9368 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d9368:	b508      	push	{r3, lr}
   d936a:	4b02      	ldr	r3, [pc, #8]	; (d9374 <HAL_RTC_Time_Is_Valid+0xc>)
   d936c:	681b      	ldr	r3, [r3, #0]
   d936e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d9370:	9301      	str	r3, [sp, #4]
   d9372:	bd08      	pop	{r3, pc}
   d9374:	00030218 	.word	0x00030218

000d9378 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d9378:	b508      	push	{r3, lr}
   d937a:	4b02      	ldr	r3, [pc, #8]	; (d9384 <hal_timer_millis+0xc>)
   d937c:	681b      	ldr	r3, [r3, #0]
   d937e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d9380:	9301      	str	r3, [sp, #4]
   d9382:	bd08      	pop	{r3, pc}
   d9384:	00030218 	.word	0x00030218

000d9388 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d9388:	b508      	push	{r3, lr}
   d938a:	4b02      	ldr	r3, [pc, #8]	; (d9394 <HAL_Core_System_Reset_Ex+0xc>)
   d938c:	681b      	ldr	r3, [r3, #0]
   d938e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d9390:	9301      	str	r3, [sp, #4]
   d9392:	bd08      	pop	{r3, pc}
   d9394:	00030234 	.word	0x00030234

000d9398 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d9398:	b508      	push	{r3, lr}
   d939a:	4b02      	ldr	r3, [pc, #8]	; (d93a4 <os_thread_is_current+0xc>)
   d939c:	681b      	ldr	r3, [r3, #0]
   d939e:	689b      	ldr	r3, [r3, #8]
   d93a0:	9301      	str	r3, [sp, #4]
   d93a2:	bd08      	pop	{r3, pc}
   d93a4:	00030248 	.word	0x00030248

000d93a8 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d93a8:	b508      	push	{r3, lr}
   d93aa:	4b02      	ldr	r3, [pc, #8]	; (d93b4 <os_thread_yield+0xc>)
   d93ac:	681b      	ldr	r3, [r3, #0]
   d93ae:	68db      	ldr	r3, [r3, #12]
   d93b0:	9301      	str	r3, [sp, #4]
   d93b2:	bd08      	pop	{r3, pc}
   d93b4:	00030248 	.word	0x00030248

000d93b8 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d93b8:	b508      	push	{r3, lr}
   d93ba:	4b02      	ldr	r3, [pc, #8]	; (d93c4 <os_thread_join+0xc>)
   d93bc:	681b      	ldr	r3, [r3, #0]
   d93be:	691b      	ldr	r3, [r3, #16]
   d93c0:	9301      	str	r3, [sp, #4]
   d93c2:	bd08      	pop	{r3, pc}
   d93c4:	00030248 	.word	0x00030248

000d93c8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d93c8:	b508      	push	{r3, lr}
   d93ca:	4b02      	ldr	r3, [pc, #8]	; (d93d4 <os_thread_cleanup+0xc>)
   d93cc:	681b      	ldr	r3, [r3, #0]
   d93ce:	695b      	ldr	r3, [r3, #20]
   d93d0:	9301      	str	r3, [sp, #4]
   d93d2:	bd08      	pop	{r3, pc}
   d93d4:	00030248 	.word	0x00030248

000d93d8 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d93d8:	b508      	push	{r3, lr}
   d93da:	4b02      	ldr	r3, [pc, #8]	; (d93e4 <os_thread_scheduling+0xc>)
   d93dc:	681b      	ldr	r3, [r3, #0]
   d93de:	69db      	ldr	r3, [r3, #28]
   d93e0:	9301      	str	r3, [sp, #4]
   d93e2:	bd08      	pop	{r3, pc}
   d93e4:	00030248 	.word	0x00030248

000d93e8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d93e8:	b508      	push	{r3, lr}
   d93ea:	4b02      	ldr	r3, [pc, #8]	; (d93f4 <os_timer_create+0xc>)
   d93ec:	681b      	ldr	r3, [r3, #0]
   d93ee:	6a1b      	ldr	r3, [r3, #32]
   d93f0:	9301      	str	r3, [sp, #4]
   d93f2:	bd08      	pop	{r3, pc}
   d93f4:	00030248 	.word	0x00030248

000d93f8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d93f8:	b508      	push	{r3, lr}
   d93fa:	4b02      	ldr	r3, [pc, #8]	; (d9404 <os_timer_destroy+0xc>)
   d93fc:	681b      	ldr	r3, [r3, #0]
   d93fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9400:	9301      	str	r3, [sp, #4]
   d9402:	bd08      	pop	{r3, pc}
   d9404:	00030248 	.word	0x00030248

000d9408 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d9408:	b508      	push	{r3, lr}
   d940a:	4b02      	ldr	r3, [pc, #8]	; (d9414 <os_timer_get_id+0xc>)
   d940c:	681b      	ldr	r3, [r3, #0]
   d940e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9410:	9301      	str	r3, [sp, #4]
   d9412:	bd08      	pop	{r3, pc}
   d9414:	00030248 	.word	0x00030248

000d9418 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d9418:	b508      	push	{r3, lr}
   d941a:	4b02      	ldr	r3, [pc, #8]	; (d9424 <os_timer_change+0xc>)
   d941c:	681b      	ldr	r3, [r3, #0]
   d941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9420:	9301      	str	r3, [sp, #4]
   d9422:	bd08      	pop	{r3, pc}
   d9424:	00030248 	.word	0x00030248

000d9428 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d9428:	b508      	push	{r3, lr}
   d942a:	4b02      	ldr	r3, [pc, #8]	; (d9434 <os_mutex_recursive_create+0xc>)
   d942c:	681b      	ldr	r3, [r3, #0]
   d942e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9430:	9301      	str	r3, [sp, #4]
   d9432:	bd08      	pop	{r3, pc}
   d9434:	00030248 	.word	0x00030248

000d9438 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d9438:	b508      	push	{r3, lr}
   d943a:	4b02      	ldr	r3, [pc, #8]	; (d9444 <os_mutex_recursive_destroy+0xc>)
   d943c:	681b      	ldr	r3, [r3, #0]
   d943e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9440:	9301      	str	r3, [sp, #4]
   d9442:	bd08      	pop	{r3, pc}
   d9444:	00030248 	.word	0x00030248

000d9448 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d9448:	b508      	push	{r3, lr}
   d944a:	4b02      	ldr	r3, [pc, #8]	; (d9454 <os_timer_set_id+0xc>)
   d944c:	681b      	ldr	r3, [r3, #0]
   d944e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d9450:	9301      	str	r3, [sp, #4]
   d9452:	bd08      	pop	{r3, pc}
   d9454:	00030248 	.word	0x00030248

000d9458 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d9458:	b508      	push	{r3, lr}
   d945a:	4b02      	ldr	r3, [pc, #8]	; (d9464 <inet_inet_ntop+0xc>)
   d945c:	681b      	ldr	r3, [r3, #0]
   d945e:	695b      	ldr	r3, [r3, #20]
   d9460:	9301      	str	r3, [sp, #4]
   d9462:	bd08      	pop	{r3, pc}
   d9464:	00030264 	.word	0x00030264

000d9468 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d9468:	b508      	push	{r3, lr}
   d946a:	4b02      	ldr	r3, [pc, #8]	; (d9474 <HAL_USART_Init+0xc>)
   d946c:	681b      	ldr	r3, [r3, #0]
   d946e:	681b      	ldr	r3, [r3, #0]
   d9470:	9301      	str	r3, [sp, #4]
   d9472:	bd08      	pop	{r3, pc}
   d9474:	0003023c 	.word	0x0003023c

000d9478 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d9478:	b508      	push	{r3, lr}
   d947a:	4b02      	ldr	r3, [pc, #8]	; (d9484 <HAL_USART_Write_Data+0xc>)
   d947c:	681b      	ldr	r3, [r3, #0]
   d947e:	68db      	ldr	r3, [r3, #12]
   d9480:	9301      	str	r3, [sp, #4]
   d9482:	bd08      	pop	{r3, pc}
   d9484:	0003023c 	.word	0x0003023c

000d9488 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d9488:	b508      	push	{r3, lr}
   d948a:	4b02      	ldr	r3, [pc, #8]	; (d9494 <HAL_USART_Available_Data+0xc>)
   d948c:	681b      	ldr	r3, [r3, #0]
   d948e:	691b      	ldr	r3, [r3, #16]
   d9490:	9301      	str	r3, [sp, #4]
   d9492:	bd08      	pop	{r3, pc}
   d9494:	0003023c 	.word	0x0003023c

000d9498 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d9498:	b508      	push	{r3, lr}
   d949a:	4b02      	ldr	r3, [pc, #8]	; (d94a4 <HAL_USART_Read_Data+0xc>)
   d949c:	681b      	ldr	r3, [r3, #0]
   d949e:	695b      	ldr	r3, [r3, #20]
   d94a0:	9301      	str	r3, [sp, #4]
   d94a2:	bd08      	pop	{r3, pc}
   d94a4:	0003023c 	.word	0x0003023c

000d94a8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d94a8:	b508      	push	{r3, lr}
   d94aa:	4b02      	ldr	r3, [pc, #8]	; (d94b4 <HAL_USART_Peek_Data+0xc>)
   d94ac:	681b      	ldr	r3, [r3, #0]
   d94ae:	699b      	ldr	r3, [r3, #24]
   d94b0:	9301      	str	r3, [sp, #4]
   d94b2:	bd08      	pop	{r3, pc}
   d94b4:	0003023c 	.word	0x0003023c

000d94b8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d94b8:	b508      	push	{r3, lr}
   d94ba:	4b02      	ldr	r3, [pc, #8]	; (d94c4 <HAL_USART_Flush_Data+0xc>)
   d94bc:	681b      	ldr	r3, [r3, #0]
   d94be:	69db      	ldr	r3, [r3, #28]
   d94c0:	9301      	str	r3, [sp, #4]
   d94c2:	bd08      	pop	{r3, pc}
   d94c4:	0003023c 	.word	0x0003023c

000d94c8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d94c8:	b508      	push	{r3, lr}
   d94ca:	4b02      	ldr	r3, [pc, #8]	; (d94d4 <HAL_USART_Is_Enabled+0xc>)
   d94cc:	681b      	ldr	r3, [r3, #0]
   d94ce:	6a1b      	ldr	r3, [r3, #32]
   d94d0:	9301      	str	r3, [sp, #4]
   d94d2:	bd08      	pop	{r3, pc}
   d94d4:	0003023c 	.word	0x0003023c

000d94d8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d94d8:	b508      	push	{r3, lr}
   d94da:	4b02      	ldr	r3, [pc, #8]	; (d94e4 <HAL_USART_Available_Data_For_Write+0xc>)
   d94dc:	681b      	ldr	r3, [r3, #0]
   d94de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d94e0:	9301      	str	r3, [sp, #4]
   d94e2:	bd08      	pop	{r3, pc}
   d94e4:	0003023c 	.word	0x0003023c

000d94e8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d94e8:	b508      	push	{r3, lr}
   d94ea:	4b02      	ldr	r3, [pc, #8]	; (d94f4 <HAL_USART_BeginConfig+0xc>)
   d94ec:	681b      	ldr	r3, [r3, #0]
   d94ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d94f0:	9301      	str	r3, [sp, #4]
   d94f2:	bd08      	pop	{r3, pc}
   d94f4:	0003023c 	.word	0x0003023c

000d94f8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d94f8:	b508      	push	{r3, lr}
   d94fa:	4b02      	ldr	r3, [pc, #8]	; (d9504 <HAL_I2C_Begin+0xc>)
   d94fc:	681b      	ldr	r3, [r3, #0]
   d94fe:	68db      	ldr	r3, [r3, #12]
   d9500:	9301      	str	r3, [sp, #4]
   d9502:	bd08      	pop	{r3, pc}
   d9504:	00030228 	.word	0x00030228

000d9508 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d9508:	b508      	push	{r3, lr}
   d950a:	4b02      	ldr	r3, [pc, #8]	; (d9514 <HAL_I2C_Begin_Transmission+0xc>)
   d950c:	681b      	ldr	r3, [r3, #0]
   d950e:	699b      	ldr	r3, [r3, #24]
   d9510:	9301      	str	r3, [sp, #4]
   d9512:	bd08      	pop	{r3, pc}
   d9514:	00030228 	.word	0x00030228

000d9518 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d9518:	b508      	push	{r3, lr}
   d951a:	4b02      	ldr	r3, [pc, #8]	; (d9524 <HAL_I2C_End_Transmission+0xc>)
   d951c:	681b      	ldr	r3, [r3, #0]
   d951e:	69db      	ldr	r3, [r3, #28]
   d9520:	9301      	str	r3, [sp, #4]
   d9522:	bd08      	pop	{r3, pc}
   d9524:	00030228 	.word	0x00030228

000d9528 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d9528:	b508      	push	{r3, lr}
   d952a:	4b02      	ldr	r3, [pc, #8]	; (d9534 <HAL_I2C_Write_Data+0xc>)
   d952c:	681b      	ldr	r3, [r3, #0]
   d952e:	6a1b      	ldr	r3, [r3, #32]
   d9530:	9301      	str	r3, [sp, #4]
   d9532:	bd08      	pop	{r3, pc}
   d9534:	00030228 	.word	0x00030228

000d9538 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d9538:	b508      	push	{r3, lr}
   d953a:	4b02      	ldr	r3, [pc, #8]	; (d9544 <HAL_I2C_Available_Data+0xc>)
   d953c:	681b      	ldr	r3, [r3, #0]
   d953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9540:	9301      	str	r3, [sp, #4]
   d9542:	bd08      	pop	{r3, pc}
   d9544:	00030228 	.word	0x00030228

000d9548 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d9548:	b508      	push	{r3, lr}
   d954a:	4b02      	ldr	r3, [pc, #8]	; (d9554 <HAL_I2C_Read_Data+0xc>)
   d954c:	681b      	ldr	r3, [r3, #0]
   d954e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9550:	9301      	str	r3, [sp, #4]
   d9552:	bd08      	pop	{r3, pc}
   d9554:	00030228 	.word	0x00030228

000d9558 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d9558:	b508      	push	{r3, lr}
   d955a:	4b02      	ldr	r3, [pc, #8]	; (d9564 <HAL_I2C_Peek_Data+0xc>)
   d955c:	681b      	ldr	r3, [r3, #0]
   d955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9560:	9301      	str	r3, [sp, #4]
   d9562:	bd08      	pop	{r3, pc}
   d9564:	00030228 	.word	0x00030228

000d9568 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d9568:	b508      	push	{r3, lr}
   d956a:	4b02      	ldr	r3, [pc, #8]	; (d9574 <HAL_I2C_Flush_Data+0xc>)
   d956c:	681b      	ldr	r3, [r3, #0]
   d956e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9570:	9301      	str	r3, [sp, #4]
   d9572:	bd08      	pop	{r3, pc}
   d9574:	00030228 	.word	0x00030228

000d9578 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d9578:	b508      	push	{r3, lr}
   d957a:	4b02      	ldr	r3, [pc, #8]	; (d9584 <HAL_I2C_Is_Enabled+0xc>)
   d957c:	681b      	ldr	r3, [r3, #0]
   d957e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d9580:	9301      	str	r3, [sp, #4]
   d9582:	bd08      	pop	{r3, pc}
   d9584:	00030228 	.word	0x00030228

000d9588 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d9588:	b508      	push	{r3, lr}
   d958a:	4b02      	ldr	r3, [pc, #8]	; (d9594 <HAL_I2C_Init+0xc>)
   d958c:	681b      	ldr	r3, [r3, #0]
   d958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9590:	9301      	str	r3, [sp, #4]
   d9592:	bd08      	pop	{r3, pc}
   d9594:	00030228 	.word	0x00030228

000d9598 <HAL_I2C_Reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
   d9598:	b508      	push	{r3, lr}
   d959a:	4b02      	ldr	r3, [pc, #8]	; (d95a4 <HAL_I2C_Reset+0xc>)
   d959c:	681b      	ldr	r3, [r3, #0]
   d959e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d95a0:	9301      	str	r3, [sp, #4]
   d95a2:	bd08      	pop	{r3, pc}
   d95a4:	00030228 	.word	0x00030228

000d95a8 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d95a8:	b508      	push	{r3, lr}
   d95aa:	4b02      	ldr	r3, [pc, #8]	; (d95b4 <HAL_I2C_Acquire+0xc>)
   d95ac:	681b      	ldr	r3, [r3, #0]
   d95ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d95b0:	9301      	str	r3, [sp, #4]
   d95b2:	bd08      	pop	{r3, pc}
   d95b4:	00030228 	.word	0x00030228

000d95b8 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d95b8:	b508      	push	{r3, lr}
   d95ba:	4b02      	ldr	r3, [pc, #8]	; (d95c4 <HAL_I2C_Release+0xc>)
   d95bc:	681b      	ldr	r3, [r3, #0]
   d95be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d95c0:	9301      	str	r3, [sp, #4]
   d95c2:	bd08      	pop	{r3, pc}
   d95c4:	00030228 	.word	0x00030228

000d95c8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d95c8:	b508      	push	{r3, lr}
   d95ca:	4b02      	ldr	r3, [pc, #8]	; (d95d4 <HAL_I2C_Request_Data_Ex+0xc>)
   d95cc:	681b      	ldr	r3, [r3, #0]
   d95ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d95d0:	9301      	str	r3, [sp, #4]
   d95d2:	bd08      	pop	{r3, pc}
   d95d4:	00030228 	.word	0x00030228

000d95d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d95d8:	b508      	push	{r3, lr}
   d95da:	4b02      	ldr	r3, [pc, #8]	; (d95e4 <HAL_USB_USART_Init+0xc>)
   d95dc:	681b      	ldr	r3, [r3, #0]
   d95de:	681b      	ldr	r3, [r3, #0]
   d95e0:	9301      	str	r3, [sp, #4]
   d95e2:	bd08      	pop	{r3, pc}
   d95e4:	0003024c 	.word	0x0003024c

000d95e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d95e8:	b508      	push	{r3, lr}
   d95ea:	4b02      	ldr	r3, [pc, #8]	; (d95f4 <HAL_USB_USART_Begin+0xc>)
   d95ec:	681b      	ldr	r3, [r3, #0]
   d95ee:	685b      	ldr	r3, [r3, #4]
   d95f0:	9301      	str	r3, [sp, #4]
   d95f2:	bd08      	pop	{r3, pc}
   d95f4:	0003024c 	.word	0x0003024c

000d95f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d95f8:	b508      	push	{r3, lr}
   d95fa:	4b02      	ldr	r3, [pc, #8]	; (d9604 <HAL_USB_USART_Available_Data+0xc>)
   d95fc:	681b      	ldr	r3, [r3, #0]
   d95fe:	691b      	ldr	r3, [r3, #16]
   d9600:	9301      	str	r3, [sp, #4]
   d9602:	bd08      	pop	{r3, pc}
   d9604:	0003024c 	.word	0x0003024c

000d9608 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d9608:	b508      	push	{r3, lr}
   d960a:	4b02      	ldr	r3, [pc, #8]	; (d9614 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d960c:	681b      	ldr	r3, [r3, #0]
   d960e:	695b      	ldr	r3, [r3, #20]
   d9610:	9301      	str	r3, [sp, #4]
   d9612:	bd08      	pop	{r3, pc}
   d9614:	0003024c 	.word	0x0003024c

000d9618 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9618:	b508      	push	{r3, lr}
   d961a:	4b02      	ldr	r3, [pc, #8]	; (d9624 <HAL_USB_USART_Receive_Data+0xc>)
   d961c:	681b      	ldr	r3, [r3, #0]
   d961e:	699b      	ldr	r3, [r3, #24]
   d9620:	9301      	str	r3, [sp, #4]
   d9622:	bd08      	pop	{r3, pc}
   d9624:	0003024c 	.word	0x0003024c

000d9628 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9628:	b508      	push	{r3, lr}
   d962a:	4b02      	ldr	r3, [pc, #8]	; (d9634 <HAL_USB_USART_Send_Data+0xc>)
   d962c:	681b      	ldr	r3, [r3, #0]
   d962e:	69db      	ldr	r3, [r3, #28]
   d9630:	9301      	str	r3, [sp, #4]
   d9632:	bd08      	pop	{r3, pc}
   d9634:	0003024c 	.word	0x0003024c

000d9638 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d9638:	b508      	push	{r3, lr}
   d963a:	4b02      	ldr	r3, [pc, #8]	; (d9644 <HAL_USB_USART_Flush_Data+0xc>)
   d963c:	681b      	ldr	r3, [r3, #0]
   d963e:	6a1b      	ldr	r3, [r3, #32]
   d9640:	9301      	str	r3, [sp, #4]
   d9642:	bd08      	pop	{r3, pc}
   d9644:	0003024c 	.word	0x0003024c

000d9648 <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   d9648:	b508      	push	{r3, lr}
   d964a:	4b03      	ldr	r3, [pc, #12]	; (d9658 <led_set_status_active+0x10>)
   d964c:	681b      	ldr	r3, [r3, #0]
   d964e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9652:	9301      	str	r3, [sp, #4]
   d9654:	bd08      	pop	{r3, pc}
   d9656:	0000      	.short	0x0000
   d9658:	00030260 	.word	0x00030260

000d965c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d965c:	b508      	push	{r3, lr}
   d965e:	4b02      	ldr	r3, [pc, #8]	; (d9668 <system_mode+0xc>)
   d9660:	681b      	ldr	r3, [r3, #0]
   d9662:	681b      	ldr	r3, [r3, #0]
   d9664:	9301      	str	r3, [sp, #4]
   d9666:	bd08      	pop	{r3, pc}
   d9668:	00030220 	.word	0x00030220

000d966c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d966c:	b508      	push	{r3, lr}
   d966e:	4b02      	ldr	r3, [pc, #8]	; (d9678 <set_system_mode+0xc>)
   d9670:	681b      	ldr	r3, [r3, #0]
   d9672:	685b      	ldr	r3, [r3, #4]
   d9674:	9301      	str	r3, [sp, #4]
   d9676:	bd08      	pop	{r3, pc}
   d9678:	00030220 	.word	0x00030220

000d967c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d967c:	b508      	push	{r3, lr}
   d967e:	4b02      	ldr	r3, [pc, #8]	; (d9688 <system_delay_ms+0xc>)
   d9680:	681b      	ldr	r3, [r3, #0]
   d9682:	695b      	ldr	r3, [r3, #20]
   d9684:	9301      	str	r3, [sp, #4]
   d9686:	bd08      	pop	{r3, pc}
   d9688:	00030220 	.word	0x00030220

000d968c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d968c:	b508      	push	{r3, lr}
   d968e:	4b02      	ldr	r3, [pc, #8]	; (d9698 <system_thread_set_state+0xc>)
   d9690:	681b      	ldr	r3, [r3, #0]
   d9692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9694:	9301      	str	r3, [sp, #4]
   d9696:	bd08      	pop	{r3, pc}
   d9698:	00030220 	.word	0x00030220

000d969c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d969c:	b508      	push	{r3, lr}
   d969e:	4b02      	ldr	r3, [pc, #8]	; (d96a8 <application_thread_current+0xc>)
   d96a0:	681b      	ldr	r3, [r3, #0]
   d96a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d96a4:	9301      	str	r3, [sp, #4]
   d96a6:	bd08      	pop	{r3, pc}
   d96a8:	00030220 	.word	0x00030220

000d96ac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d96ac:	b508      	push	{r3, lr}
   d96ae:	4b02      	ldr	r3, [pc, #8]	; (d96b8 <application_thread_invoke+0xc>)
   d96b0:	681b      	ldr	r3, [r3, #0]
   d96b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d96b4:	9301      	str	r3, [sp, #4]
   d96b6:	bd08      	pop	{r3, pc}
   d96b8:	00030220 	.word	0x00030220

000d96bc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d96bc:	b508      	push	{r3, lr}
   d96be:	4b02      	ldr	r3, [pc, #8]	; (d96c8 <system_thread_get_state+0xc>)
   d96c0:	681b      	ldr	r3, [r3, #0]
   d96c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d96c4:	9301      	str	r3, [sp, #4]
   d96c6:	bd08      	pop	{r3, pc}
   d96c8:	00030220 	.word	0x00030220

000d96cc <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   d96cc:	b508      	push	{r3, lr}
   d96ce:	4b02      	ldr	r3, [pc, #8]	; (d96d8 <led_pattern_period+0xc>)
   d96d0:	681b      	ldr	r3, [r3, #0]
   d96d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d96d4:	9301      	str	r3, [sp, #4]
   d96d6:	bd08      	pop	{r3, pc}
   d96d8:	00030220 	.word	0x00030220

000d96dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d96dc:	b508      	push	{r3, lr}
   d96de:	4b03      	ldr	r3, [pc, #12]	; (d96ec <system_ctrl_set_app_request_handler+0x10>)
   d96e0:	681b      	ldr	r3, [r3, #0]
   d96e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d96e6:	9301      	str	r3, [sp, #4]
   d96e8:	bd08      	pop	{r3, pc}
   d96ea:	0000      	.short	0x0000
   d96ec:	00030220 	.word	0x00030220

000d96f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d96f0:	b508      	push	{r3, lr}
   d96f2:	4b03      	ldr	r3, [pc, #12]	; (d9700 <system_ctrl_set_result+0x10>)
   d96f4:	681b      	ldr	r3, [r3, #0]
   d96f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d96fa:	9301      	str	r3, [sp, #4]
   d96fc:	bd08      	pop	{r3, pc}
   d96fe:	0000      	.short	0x0000
   d9700:	00030220 	.word	0x00030220

000d9704 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d9704:	b508      	push	{r3, lr}
   d9706:	4b02      	ldr	r3, [pc, #8]	; (d9710 <network_connect+0xc>)
   d9708:	681b      	ldr	r3, [r3, #0]
   d970a:	685b      	ldr	r3, [r3, #4]
   d970c:	9301      	str	r3, [sp, #4]
   d970e:	bd08      	pop	{r3, pc}
   d9710:	00030240 	.word	0x00030240

000d9714 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d9714:	b508      	push	{r3, lr}
   d9716:	4b02      	ldr	r3, [pc, #8]	; (d9720 <network_connecting+0xc>)
   d9718:	681b      	ldr	r3, [r3, #0]
   d971a:	689b      	ldr	r3, [r3, #8]
   d971c:	9301      	str	r3, [sp, #4]
   d971e:	bd08      	pop	{r3, pc}
   d9720:	00030240 	.word	0x00030240

000d9724 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d9724:	b508      	push	{r3, lr}
   d9726:	4b02      	ldr	r3, [pc, #8]	; (d9730 <network_disconnect+0xc>)
   d9728:	681b      	ldr	r3, [r3, #0]
   d972a:	68db      	ldr	r3, [r3, #12]
   d972c:	9301      	str	r3, [sp, #4]
   d972e:	bd08      	pop	{r3, pc}
   d9730:	00030240 	.word	0x00030240

000d9734 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d9734:	b508      	push	{r3, lr}
   d9736:	4b02      	ldr	r3, [pc, #8]	; (d9740 <network_ready+0xc>)
   d9738:	681b      	ldr	r3, [r3, #0]
   d973a:	691b      	ldr	r3, [r3, #16]
   d973c:	9301      	str	r3, [sp, #4]
   d973e:	bd08      	pop	{r3, pc}
   d9740:	00030240 	.word	0x00030240

000d9744 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d9744:	b508      	push	{r3, lr}
   d9746:	4b02      	ldr	r3, [pc, #8]	; (d9750 <network_on+0xc>)
   d9748:	681b      	ldr	r3, [r3, #0]
   d974a:	695b      	ldr	r3, [r3, #20]
   d974c:	9301      	str	r3, [sp, #4]
   d974e:	bd08      	pop	{r3, pc}
   d9750:	00030240 	.word	0x00030240

000d9754 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d9754:	b508      	push	{r3, lr}
   d9756:	4b02      	ldr	r3, [pc, #8]	; (d9760 <network_off+0xc>)
   d9758:	681b      	ldr	r3, [r3, #0]
   d975a:	699b      	ldr	r3, [r3, #24]
   d975c:	9301      	str	r3, [sp, #4]
   d975e:	bd08      	pop	{r3, pc}
   d9760:	00030240 	.word	0x00030240

000d9764 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d9764:	b508      	push	{r3, lr}
   d9766:	4b02      	ldr	r3, [pc, #8]	; (d9770 <network_listen+0xc>)
   d9768:	681b      	ldr	r3, [r3, #0]
   d976a:	69db      	ldr	r3, [r3, #28]
   d976c:	9301      	str	r3, [sp, #4]
   d976e:	bd08      	pop	{r3, pc}
   d9770:	00030240 	.word	0x00030240

000d9774 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d9774:	b508      	push	{r3, lr}
   d9776:	4b02      	ldr	r3, [pc, #8]	; (d9780 <network_listening+0xc>)
   d9778:	681b      	ldr	r3, [r3, #0]
   d977a:	6a1b      	ldr	r3, [r3, #32]
   d977c:	9301      	str	r3, [sp, #4]
   d977e:	bd08      	pop	{r3, pc}
   d9780:	00030240 	.word	0x00030240

000d9784 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d9784:	b508      	push	{r3, lr}
   d9786:	4b02      	ldr	r3, [pc, #8]	; (d9790 <network_set_listen_timeout+0xc>)
   d9788:	681b      	ldr	r3, [r3, #0]
   d978a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d978c:	9301      	str	r3, [sp, #4]
   d978e:	bd08      	pop	{r3, pc}
   d9790:	00030240 	.word	0x00030240

000d9794 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d9794:	b508      	push	{r3, lr}
   d9796:	4b02      	ldr	r3, [pc, #8]	; (d97a0 <network_get_listen_timeout+0xc>)
   d9798:	681b      	ldr	r3, [r3, #0]
   d979a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d979c:	9301      	str	r3, [sp, #4]
   d979e:	bd08      	pop	{r3, pc}
   d97a0:	00030240 	.word	0x00030240

000d97a4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d97a4:	b508      	push	{r3, lr}
   d97a6:	4b02      	ldr	r3, [pc, #8]	; (d97b0 <spark_variable+0xc>)
   d97a8:	681b      	ldr	r3, [r3, #0]
   d97aa:	681b      	ldr	r3, [r3, #0]
   d97ac:	9301      	str	r3, [sp, #4]
   d97ae:	bd08      	pop	{r3, pc}
   d97b0:	00030244 	.word	0x00030244

000d97b4 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d97b4:	b508      	push	{r3, lr}
   d97b6:	4b02      	ldr	r3, [pc, #8]	; (d97c0 <spark_process+0xc>)
   d97b8:	681b      	ldr	r3, [r3, #0]
   d97ba:	689b      	ldr	r3, [r3, #8]
   d97bc:	9301      	str	r3, [sp, #4]
   d97be:	bd08      	pop	{r3, pc}
   d97c0:	00030244 	.word	0x00030244

000d97c4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d97c4:	b508      	push	{r3, lr}
   d97c6:	4b02      	ldr	r3, [pc, #8]	; (d97d0 <spark_cloud_flag_connect+0xc>)
   d97c8:	681b      	ldr	r3, [r3, #0]
   d97ca:	68db      	ldr	r3, [r3, #12]
   d97cc:	9301      	str	r3, [sp, #4]
   d97ce:	bd08      	pop	{r3, pc}
   d97d0:	00030244 	.word	0x00030244

000d97d4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d97d4:	b508      	push	{r3, lr}
   d97d6:	4b02      	ldr	r3, [pc, #8]	; (d97e0 <spark_cloud_flag_connected+0xc>)
   d97d8:	681b      	ldr	r3, [r3, #0]
   d97da:	695b      	ldr	r3, [r3, #20]
   d97dc:	9301      	str	r3, [sp, #4]
   d97de:	bd08      	pop	{r3, pc}
   d97e0:	00030244 	.word	0x00030244

000d97e4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d97e4:	b508      	push	{r3, lr}
   d97e6:	4b02      	ldr	r3, [pc, #8]	; (d97f0 <spark_send_event+0xc>)
   d97e8:	681b      	ldr	r3, [r3, #0]
   d97ea:	6a1b      	ldr	r3, [r3, #32]
   d97ec:	9301      	str	r3, [sp, #4]
   d97ee:	bd08      	pop	{r3, pc}
   d97f0:	00030244 	.word	0x00030244

000d97f4 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d97f4:	b508      	push	{r3, lr}
   d97f6:	4b02      	ldr	r3, [pc, #8]	; (d9800 <spark_sync_time_pending+0xc>)
   d97f8:	681b      	ldr	r3, [r3, #0]
   d97fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d97fc:	9301      	str	r3, [sp, #4]
   d97fe:	bd08      	pop	{r3, pc}
   d9800:	00030244 	.word	0x00030244

000d9804 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d9804:	b508      	push	{r3, lr}
   d9806:	4b02      	ldr	r3, [pc, #8]	; (d9810 <spark_set_random_seed_from_cloud_handler+0xc>)
   d9808:	681b      	ldr	r3, [r3, #0]
   d980a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d980c:	9301      	str	r3, [sp, #4]
   d980e:	bd08      	pop	{r3, pc}
   d9810:	00030244 	.word	0x00030244

000d9814 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d9814:	b508      	push	{r3, lr}
   d9816:	4b02      	ldr	r3, [pc, #8]	; (d9820 <malloc+0xc>)
   d9818:	681b      	ldr	r3, [r3, #0]
   d981a:	681b      	ldr	r3, [r3, #0]
   d981c:	9301      	str	r3, [sp, #4]
   d981e:	bd08      	pop	{r3, pc}
   d9820:	0003021c 	.word	0x0003021c

000d9824 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d9824:	b508      	push	{r3, lr}
   d9826:	4b02      	ldr	r3, [pc, #8]	; (d9830 <free+0xc>)
   d9828:	681b      	ldr	r3, [r3, #0]
   d982a:	685b      	ldr	r3, [r3, #4]
   d982c:	9301      	str	r3, [sp, #4]
   d982e:	bd08      	pop	{r3, pc}
   d9830:	0003021c 	.word	0x0003021c

000d9834 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d9834:	b508      	push	{r3, lr}
   d9836:	4b02      	ldr	r3, [pc, #8]	; (d9840 <realloc+0xc>)
   d9838:	681b      	ldr	r3, [r3, #0]
   d983a:	689b      	ldr	r3, [r3, #8]
   d983c:	9301      	str	r3, [sp, #4]
   d983e:	bd08      	pop	{r3, pc}
   d9840:	0003021c 	.word	0x0003021c

000d9844 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d9844:	b508      	push	{r3, lr}
   d9846:	4b02      	ldr	r3, [pc, #8]	; (d9850 <siprintf+0xc>)
   d9848:	681b      	ldr	r3, [r3, #0]
   d984a:	691b      	ldr	r3, [r3, #16]
   d984c:	9301      	str	r3, [sp, #4]
   d984e:	bd08      	pop	{r3, pc}
   d9850:	0003021c 	.word	0x0003021c

000d9854 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d9854:	b508      	push	{r3, lr}
   d9856:	4b02      	ldr	r3, [pc, #8]	; (d9860 <siscanf+0xc>)
   d9858:	681b      	ldr	r3, [r3, #0]
   d985a:	699b      	ldr	r3, [r3, #24]
   d985c:	9301      	str	r3, [sp, #4]
   d985e:	bd08      	pop	{r3, pc}
   d9860:	0003021c 	.word	0x0003021c

000d9864 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d9864:	b508      	push	{r3, lr}
   d9866:	4b02      	ldr	r3, [pc, #8]	; (d9870 <snprintf+0xc>)
   d9868:	681b      	ldr	r3, [r3, #0]
   d986a:	69db      	ldr	r3, [r3, #28]
   d986c:	9301      	str	r3, [sp, #4]
   d986e:	bd08      	pop	{r3, pc}
   d9870:	0003021c 	.word	0x0003021c

000d9874 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d9874:	b508      	push	{r3, lr}
   d9876:	4b02      	ldr	r3, [pc, #8]	; (d9880 <sniprintf+0xc>)
   d9878:	681b      	ldr	r3, [r3, #0]
   d987a:	6a1b      	ldr	r3, [r3, #32]
   d987c:	9301      	str	r3, [sp, #4]
   d987e:	bd08      	pop	{r3, pc}
   d9880:	0003021c 	.word	0x0003021c

000d9884 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d9884:	b508      	push	{r3, lr}
   d9886:	4b02      	ldr	r3, [pc, #8]	; (d9890 <vsnprintf+0xc>)
   d9888:	681b      	ldr	r3, [r3, #0]
   d988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d988c:	9301      	str	r3, [sp, #4]
   d988e:	bd08      	pop	{r3, pc}
   d9890:	0003021c 	.word	0x0003021c

000d9894 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d9894:	b508      	push	{r3, lr}
   d9896:	4b02      	ldr	r3, [pc, #8]	; (d98a0 <abort+0xc>)
   d9898:	681b      	ldr	r3, [r3, #0]
   d989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d989c:	9301      	str	r3, [sp, #4]
   d989e:	bd08      	pop	{r3, pc}
   d98a0:	0003021c 	.word	0x0003021c

000d98a4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d98a4:	b508      	push	{r3, lr}
   d98a6:	4b02      	ldr	r3, [pc, #8]	; (d98b0 <_malloc_r+0xc>)
   d98a8:	681b      	ldr	r3, [r3, #0]
   d98aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d98ac:	9301      	str	r3, [sp, #4]
   d98ae:	bd08      	pop	{r3, pc}
   d98b0:	0003021c 	.word	0x0003021c

000d98b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d98b4:	2200      	movs	r2, #0
   d98b6:	4611      	mov	r1, r2
   d98b8:	6840      	ldr	r0, [r0, #4]
   d98ba:	f7ff bf5b 	b.w	d9774 <network_listening>

000d98be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d98be:	2200      	movs	r2, #0
   d98c0:	4611      	mov	r1, r2
   d98c2:	6840      	ldr	r0, [r0, #4]
   d98c4:	f7ff bf66 	b.w	d9794 <network_get_listen_timeout>

000d98c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d98c8:	2200      	movs	r2, #0
   d98ca:	6840      	ldr	r0, [r0, #4]
   d98cc:	f7ff bf5a 	b.w	d9784 <network_set_listen_timeout>

000d98d0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d98d0:	2200      	movs	r2, #0
   d98d2:	f081 0101 	eor.w	r1, r1, #1
   d98d6:	6840      	ldr	r0, [r0, #4]
   d98d8:	f7ff bf44 	b.w	d9764 <network_listen>

000d98dc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d98dc:	2300      	movs	r3, #0
   d98de:	461a      	mov	r2, r3
   d98e0:	4619      	mov	r1, r3
   d98e2:	6840      	ldr	r0, [r0, #4]
   d98e4:	f7ff bf36 	b.w	d9754 <network_off>

000d98e8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d98e8:	2300      	movs	r3, #0
   d98ea:	461a      	mov	r2, r3
   d98ec:	4619      	mov	r1, r3
   d98ee:	6840      	ldr	r0, [r0, #4]
   d98f0:	f7ff bf28 	b.w	d9744 <network_on>

000d98f4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d98f4:	2200      	movs	r2, #0
   d98f6:	4611      	mov	r1, r2
   d98f8:	6840      	ldr	r0, [r0, #4]
   d98fa:	f7ff bf1b 	b.w	d9734 <network_ready>

000d98fe <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d98fe:	2200      	movs	r2, #0
   d9900:	4611      	mov	r1, r2
   d9902:	6840      	ldr	r0, [r0, #4]
   d9904:	f7ff bf06 	b.w	d9714 <network_connecting>

000d9908 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9908:	2200      	movs	r2, #0
   d990a:	2102      	movs	r1, #2
   d990c:	6840      	ldr	r0, [r0, #4]
   d990e:	f7ff bf09 	b.w	d9724 <network_disconnect>

000d9912 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9912:	2300      	movs	r3, #0
   d9914:	461a      	mov	r2, r3
   d9916:	6840      	ldr	r0, [r0, #4]
   d9918:	f7ff bef4 	b.w	d9704 <network_connect>

000d991c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d991c:	4b02      	ldr	r3, [pc, #8]	; (d9928 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d991e:	2203      	movs	r2, #3
   d9920:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9922:	4a02      	ldr	r2, [pc, #8]	; (d992c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9924:	601a      	str	r2, [r3, #0]
   d9926:	4770      	bx	lr
   d9928:	2003e1c8 	.word	0x2003e1c8
   d992c:	000e04f0 	.word	0x000e04f0

000d9930 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d9930:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   d9932:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d9934:	6892      	ldr	r2, [r2, #8]
   d9936:	4601      	mov	r1, r0
   d9938:	4618      	mov	r0, r3
   d993a:	4710      	bx	r2

000d993c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   d993c:	b570      	push	{r4, r5, r6, lr}
   d993e:	4c0e      	ldr	r4, [pc, #56]	; (d9978 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   d9940:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   d9942:	241c      	movs	r4, #28
   d9944:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d9946:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d994a:	f89d 6010 	ldrb.w	r6, [sp, #16]
   d994e:	f004 0403 	and.w	r4, r4, #3
   d9952:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d9956:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d9958:	b2e4      	uxtb	r4, r4
   d995a:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   d995c:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   d995e:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   d9960:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d9962:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d9964:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d9966:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   d9968:	bf08      	it	eq
   d996a:	4b04      	ldreq	r3, [pc, #16]	; (d997c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   d996c:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   d996e:	bf06      	itte	eq
   d9970:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   d9972:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   d9974:	8303      	strhne	r3, [r0, #24]
    }
}
   d9976:	bd70      	pop	{r4, r5, r6, pc}
   d9978:	000dff84 	.word	0x000dff84
   d997c:	000d9931 	.word	0x000d9931

000d9980 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d9980:	2100      	movs	r1, #0
   d9982:	f7ff bcc1 	b.w	d9308 <HAL_SPI_Acquire>

000d9986 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d9986:	2100      	movs	r1, #0
   d9988:	f7ff bcc6 	b.w	d9318 <HAL_SPI_Release>

000d998c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d998c:	b510      	push	{r4, lr}
   d998e:	4604      	mov	r4, r0
{
    _spi = spi;
   d9990:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d9992:	4608      	mov	r0, r1
   d9994:	f7ff fc88 	bl	d92a8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9998:	2300      	movs	r3, #0
   d999a:	6063      	str	r3, [r4, #4]
}
   d999c:	4620      	mov	r0, r4
   d999e:	bd10      	pop	{r4, pc}

000d99a0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d99a0:	b510      	push	{r4, lr}
   d99a2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d99a4:	7800      	ldrb	r0, [r0, #0]
   d99a6:	f7ff ffeb 	bl	d9980 <_ZN8SPIClass4lockEv.isra.0>
   d99aa:	b948      	cbnz	r0, d99c0 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d99ac:	7820      	ldrb	r0, [r4, #0]
   d99ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d99b2:	f7ff fc69 	bl	d9288 <HAL_SPI_Begin>
        unlock();
   d99b6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d99b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d99bc:	f7ff bfe3 	b.w	d9986 <_ZN8SPIClass6unlockEv.isra.1>
   d99c0:	bd10      	pop	{r4, pc}

000d99c2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d99c2:	7800      	ldrb	r0, [r0, #0]
   d99c4:	f7ff bfdf 	b.w	d9986 <_ZN8SPIClass6unlockEv.isra.1>

000d99c8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d99c8:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d99ca:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d99cc:	6018      	str	r0, [r3, #0]
   d99ce:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d99d0:	6818      	ldr	r0, [r3, #0]
   d99d2:	4288      	cmp	r0, r1
   d99d4:	b2e5      	uxtb	r5, r4
   d99d6:	d906      	bls.n	d99e6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d99d8:	3401      	adds	r4, #1
   d99da:	2c08      	cmp	r4, #8
   d99dc:	d002      	beq.n	d99e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d99de:	0840      	lsrs	r0, r0, #1
   d99e0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d99e2:	e7f5      	b.n	d99d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d99e4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d99e6:	4b02      	ldr	r3, [pc, #8]	; (d99f0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d99e8:	5d5b      	ldrb	r3, [r3, r5]
   d99ea:	7013      	strb	r3, [r2, #0]
   d99ec:	bd30      	pop	{r4, r5, pc}
   d99ee:	bf00      	nop
   d99f0:	000e051c 	.word	0x000e051c

000d99f4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d99f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d99f8:	4607      	mov	r7, r0
   d99fa:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d99fc:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d99fe:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d9a00:	f7ff ffbe 	bl	d9980 <_ZN8SPIClass4lockEv.isra.0>
   d9a04:	2800      	cmp	r0, #0
   d9a06:	db62      	blt.n	d9ace <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d9a08:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d9a0a:	2214      	movs	r2, #20
   d9a0c:	2100      	movs	r1, #0
   d9a0e:	a809      	add	r0, sp, #36	; 0x24
   d9a10:	f004 fe46 	bl	de6a0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9a14:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d9a16:	4620      	mov	r0, r4
   d9a18:	2200      	movs	r2, #0
   d9a1a:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d9a1c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d9a20:	f7ff fc52 	bl	d92c8 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d9a24:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d9a28:	b154      	cbz	r4, d9a40 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d9a2a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d9a2e:	b935      	cbnz	r5, d9a3e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d9a30:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9a34:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9a38:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d9a3c:	e003      	b.n	d9a46 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d9a3e:	2400      	movs	r4, #0
   d9a40:	46a1      	mov	r9, r4
   d9a42:	46a0      	mov	r8, r4
   d9a44:	2501      	movs	r5, #1
   d9a46:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d9a48:	b105      	cbz	r5, d9a4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d9a4a:	b9bb      	cbnz	r3, d9a7c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d9a4c:	429d      	cmp	r5, r3
   d9a4e:	d10b      	bne.n	d9a68 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d9a50:	68b2      	ldr	r2, [r6, #8]
   d9a52:	4542      	cmp	r2, r8
   d9a54:	d108      	bne.n	d9a68 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9a56:	f88d 9020 	strb.w	r9, [sp, #32]
   d9a5a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d9a5e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d9a62:	89b2      	ldrh	r2, [r6, #12]
   d9a64:	4291      	cmp	r1, r2
   d9a66:	d009      	beq.n	d9a7c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d9a68:	b153      	cbz	r3, d9a80 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9a6a:	2400      	movs	r4, #0
   d9a6c:	7838      	ldrb	r0, [r7, #0]
   d9a6e:	9401      	str	r4, [sp, #4]
   d9a70:	9400      	str	r4, [sp, #0]
   d9a72:	4623      	mov	r3, r4
   d9a74:	4622      	mov	r2, r4
   d9a76:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d9a78:	f7ff fc3e 	bl	d92f8 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d9a7c:	2000      	movs	r0, #0
   d9a7e:	e026      	b.n	d9ace <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d9a80:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d9a84:	68b1      	ldr	r1, [r6, #8]
   d9a86:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9a88:	ab04      	add	r3, sp, #16
   d9a8a:	f10d 020f 	add.w	r2, sp, #15
   d9a8e:	f7ff ff9b 	bl	d99c8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d9a92:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d9a94:	b105      	cbz	r5, d9a98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d9a96:	b9b1      	cbnz	r1, d9ac6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d9a98:	42a9      	cmp	r1, r5
   d9a9a:	d008      	beq.n	d9aae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d9a9c:	2400      	movs	r4, #0
   d9a9e:	7838      	ldrb	r0, [r7, #0]
   d9aa0:	9401      	str	r4, [sp, #4]
   d9aa2:	7b74      	ldrb	r4, [r6, #13]
   d9aa4:	7b33      	ldrb	r3, [r6, #12]
   d9aa6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9aaa:	9400      	str	r4, [sp, #0]
   d9aac:	e7e4      	b.n	d9a78 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d9aae:	68b3      	ldr	r3, [r6, #8]
   d9ab0:	4543      	cmp	r3, r8
   d9ab2:	d3f3      	bcc.n	d9a9c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9ab4:	f88d 9020 	strb.w	r9, [sp, #32]
   d9ab8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d9abc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9ac0:	89b3      	ldrh	r3, [r6, #12]
   d9ac2:	429a      	cmp	r2, r3
   d9ac4:	d1ea      	bne.n	d9a9c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9ac6:	9b04      	ldr	r3, [sp, #16]
   d9ac8:	4543      	cmp	r3, r8
   d9aca:	d1e7      	bne.n	d9a9c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d9acc:	e7d6      	b.n	d9a7c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d9ace:	b00f      	add	sp, #60	; 0x3c
   d9ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9ad4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9ad4:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d9ad6:	7800      	ldrb	r0, [r0, #0]
   d9ad8:	f7ff fbde 	bl	d9298 <HAL_SPI_Send_Receive_Data>
}
   d9adc:	b2c0      	uxtb	r0, r0
   d9ade:	bd08      	pop	{r3, pc}

000d9ae0 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d9ae0:	b530      	push	{r4, r5, lr}
   d9ae2:	b087      	sub	sp, #28
   d9ae4:	4604      	mov	r4, r0
   d9ae6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9ae8:	7800      	ldrb	r0, [r0, #0]
   d9aea:	9500      	str	r5, [sp, #0]
   d9aec:	f7ff fbf4 	bl	d92d8 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d9af0:	b93d      	cbnz	r5, d9b02 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d9af2:	a902      	add	r1, sp, #8
   d9af4:	7820      	ldrb	r0, [r4, #0]
   d9af6:	f7ff fbf7 	bl	d92e8 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d9afa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d9afe:	07db      	lsls	r3, r3, #31
   d9b00:	d4f7      	bmi.n	d9af2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d9b02:	b007      	add	sp, #28
   d9b04:	bd30      	pop	{r4, r5, pc}

000d9b06 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d9b06:	7800      	ldrb	r0, [r0, #0]
   d9b08:	f7ff bbd6 	b.w	d92b8 <HAL_SPI_Is_Enabled>

000d9b0c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d9b0c:	b510      	push	{r4, lr}
   d9b0e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d9b10:	6800      	ldr	r0, [r0, #0]
   d9b12:	b118      	cbz	r0, d9b1c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d9b14:	f7ff fe86 	bl	d9824 <free>
            wakeupSource_ = nullptr;
   d9b18:	2300      	movs	r3, #0
   d9b1a:	6023      	str	r3, [r4, #0]
   d9b1c:	bd10      	pop	{r4, pc}

000d9b1e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d9b1e:	b510      	push	{r4, lr}
   d9b20:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d9b22:	f7ff fff3 	bl	d9b0c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d9b26:	4620      	mov	r0, r4
   d9b28:	bd10      	pop	{r4, pc}

000d9b2a <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d9b2a:	4601      	mov	r1, r0
   d9b2c:	2200      	movs	r2, #0
   d9b2e:	208c      	movs	r0, #140	; 0x8c
   d9b30:	f7ff bc2a 	b.w	d9388 <HAL_Core_System_Reset_Ex>

000d9b34 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d9b34:	2000      	movs	r0, #0
   d9b36:	f7ff bff8 	b.w	d9b2a <_ZN11SystemClass5resetEm>
	...

000d9b3c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9b3c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9b3e:	4c09      	ldr	r4, [pc, #36]	; (d9b64 <_GLOBAL__sub_I_System+0x28>)
   d9b40:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d9b42:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9b46:	6020      	str	r0, [r4, #0]
   d9b48:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d9b4a:	71a0      	strb	r0, [r4, #6]
   d9b4c:	8120      	strh	r0, [r4, #8]
   d9b4e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9b50:	f7ff fd8c 	bl	d966c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9b54:	4620      	mov	r0, r4
   d9b56:	4a04      	ldr	r2, [pc, #16]	; (d9b68 <_GLOBAL__sub_I_System+0x2c>)
   d9b58:	4904      	ldr	r1, [pc, #16]	; (d9b6c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9b5e:	f001 be0b 	b.w	db778 <__aeabi_atexit>
   d9b62:	bf00      	nop
   d9b64:	2003e1d0 	.word	0x2003e1d0
   d9b68:	2003be74 	.word	0x2003be74
   d9b6c:	000d9b1f 	.word	0x000d9b1f

000d9b70 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d9b70:	b510      	push	{r4, lr}
   d9b72:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9b74:	f005 fd62 	bl	df63c <strlen>
   d9b78:	3801      	subs	r0, #1
   d9b7a:	1823      	adds	r3, r4, r0
   d9b7c:	4620      	mov	r0, r4
	while(i<j){
   d9b7e:	4298      	cmp	r0, r3
   d9b80:	d206      	bcs.n	d9b90 <_Z11str_reversePc+0x20>
		c = *i;
   d9b82:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d9b84:	7819      	ldrb	r1, [r3, #0]
   d9b86:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d9b8a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d9b8e:	e7f6      	b.n	d9b7e <_Z11str_reversePc+0xe>
   d9b90:	bd10      	pop	{r4, pc}

000d9b92 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9b92:	b570      	push	{r4, r5, r6, lr}
   d9b94:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d9b96:	1e91      	subs	r1, r2, #2
   d9b98:	2922      	cmp	r1, #34	; 0x22
   d9b9a:	d820      	bhi.n	d9bde <ultoa+0x4c>
   d9b9c:	4625      	mov	r5, r4
   d9b9e:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d9ba0:	b910      	cbnz	r0, d9ba8 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9ba2:	4423      	add	r3, r4
            *ptr++ = '0';
   d9ba4:	2230      	movs	r2, #48	; 0x30
   d9ba6:	e00e      	b.n	d9bc6 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d9ba8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d9bac:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d9bb0:	b2c1      	uxtb	r1, r0
   d9bb2:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d9bb6:	2809      	cmp	r0, #9
                *ptr += '0';
   d9bb8:	bf94      	ite	ls
   d9bba:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d9bbc:	3157      	addhi	r1, #87	; 0x57
   d9bbe:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d9bc2:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d9bc4:	e7eb      	b.n	d9b9e <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9bc6:	4299      	cmp	r1, r3
   d9bc8:	d202      	bcs.n	d9bd0 <ultoa+0x3e>
            *ptr++ = '0';
   d9bca:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9bce:	e7fa      	b.n	d9bc6 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d9bd0:	2300      	movs	r3, #0
	str_reverse(buffer);
   d9bd2:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d9bd4:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d9bd6:	f7ff ffcb 	bl	d9b70 <_Z11str_reversePc>
	return buffer;
   d9bda:	4620      	mov	r0, r4
   d9bdc:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d9bde:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d9be0:	bd70      	pop	{r4, r5, r6, pc}

000d9be2 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9be2:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d9be4:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9be6:	460c      	mov	r4, r1
   d9be8:	4615      	mov	r5, r2
	if(a<0){
   d9bea:	da0b      	bge.n	d9c04 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d9bf0:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9bf4:	bf14      	ite	ne
   d9bf6:	4258      	negne	r0, r3
   d9bf8:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d9bfa:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d9bfc:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d9bfe:	462a      	mov	r2, r5
   d9c00:	4419      	add	r1, r3
   d9c02:	e000      	b.n	d9c06 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d9c04:	2301      	movs	r3, #1
   d9c06:	f7ff ffc4 	bl	d9b92 <ultoa>
	}
	return buffer;
}
   d9c0a:	4620      	mov	r0, r4
   d9c0c:	bd38      	pop	{r3, r4, r5, pc}

000d9c0e <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d9c0e:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d9c10:	2301      	movs	r3, #1
   d9c12:	f7ff ffbe 	bl	d9b92 <ultoa>
}
   d9c16:	bd08      	pop	{r3, pc}

000d9c18 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d9c18:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9c1c:	ec59 8b10 	vmov	r8, r9, d0
   d9c20:	4607      	mov	r7, r0
   d9c22:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d9c24:	2200      	movs	r2, #0
   d9c26:	2300      	movs	r3, #0
   d9c28:	ee10 0a10 	vmov	r0, s0
   d9c2c:	4649      	mov	r1, r9
   d9c2e:	f004 f94d 	bl	ddecc <__aeabi_dcmplt>
   d9c32:	b128      	cbz	r0, d9c40 <_Z4dtoadhPc+0x28>
        val = -val;
   d9c34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d9c38:	4699      	mov	r9, r3
        *sout++ = '-';
   d9c3a:	232d      	movs	r3, #45	; 0x2d
   d9c3c:	7033      	strb	r3, [r6, #0]
   d9c3e:	3601      	adds	r6, #1
   d9c40:	2300      	movs	r3, #0
    }
    long scale = 1;
   d9c42:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d9c44:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d9c46:	b2d9      	uxtb	r1, r3
   d9c48:	428f      	cmp	r7, r1
   d9c4a:	d902      	bls.n	d9c52 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d9c4c:	4354      	muls	r4, r2
   d9c4e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d9c50:	e7f9      	b.n	d9c46 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d9c52:	4620      	mov	r0, r4
   d9c54:	f003 fe62 	bl	dd91c <__aeabi_i2d>
   d9c58:	4642      	mov	r2, r8
   d9c5a:	464b      	mov	r3, r9
   d9c5c:	f003 fec4 	bl	dd9e8 <__aeabi_dmul>
   d9c60:	4682      	mov	sl, r0
   d9c62:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d9c64:	f004 fa20 	bl	de0a8 <__aeabi_d2ulz>
   d9c68:	4680      	mov	r8, r0
   d9c6a:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d9c6c:	f003 fe86 	bl	dd97c <__aeabi_ul2d>
   d9c70:	4602      	mov	r2, r0
   d9c72:	460b      	mov	r3, r1
   d9c74:	4650      	mov	r0, sl
   d9c76:	4659      	mov	r1, fp
   d9c78:	f003 fd02 	bl	dd680 <__aeabi_dsub>
   d9c7c:	2200      	movs	r2, #0
   d9c7e:	4b17      	ldr	r3, [pc, #92]	; (d9cdc <_Z4dtoadhPc+0xc4>)
   d9c80:	f004 f938 	bl	ddef4 <__aeabi_dcmpge>
   d9c84:	b118      	cbz	r0, d9c8e <_Z4dtoadhPc+0x76>
        fixed++;
   d9c86:	f118 0801 	adds.w	r8, r8, #1
   d9c8a:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d9c8e:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d9c90:	4622      	mov	r2, r4
   d9c92:	462b      	mov	r3, r5
   d9c94:	4640      	mov	r0, r8
   d9c96:	4649      	mov	r1, r9
   d9c98:	f004 f9ee 	bl	de078 <__aeabi_uldivmod>
   d9c9c:	2301      	movs	r3, #1
   d9c9e:	220a      	movs	r2, #10
   d9ca0:	4631      	mov	r1, r6
   d9ca2:	f7ff ff76 	bl	d9b92 <ultoa>
    if (prec) {
   d9ca6:	b1af      	cbz	r7, d9cd4 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d9ca8:	4630      	mov	r0, r6
   d9caa:	f005 fcc7 	bl	df63c <strlen>
        *sout++ = '.';
   d9cae:	232e      	movs	r3, #46	; 0x2e
   d9cb0:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d9cb2:	3001      	adds	r0, #1
   d9cb4:	4406      	add	r6, r0
   d9cb6:	4622      	mov	r2, r4
   d9cb8:	462b      	mov	r3, r5
   d9cba:	4640      	mov	r0, r8
   d9cbc:	4649      	mov	r1, r9
   d9cbe:	f004 f9db 	bl	de078 <__aeabi_uldivmod>
   d9cc2:	463b      	mov	r3, r7
   d9cc4:	4610      	mov	r0, r2
   d9cc6:	4631      	mov	r1, r6
   d9cc8:	220a      	movs	r2, #10
    }
}
   d9cca:	b001      	add	sp, #4
   d9ccc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d9cd0:	f7ff bf5f 	b.w	d9b92 <ultoa>
    }
}
   d9cd4:	b001      	add	sp, #4
   d9cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9cda:	bf00      	nop
   d9cdc:	3fe00000 	.word	0x3fe00000

000d9ce0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9ce0:	b510      	push	{r4, lr}
   d9ce2:	4604      	mov	r4, r0
{
	free(buffer);
   d9ce4:	6800      	ldr	r0, [r0, #0]
   d9ce6:	f7ff fd9d 	bl	d9824 <free>
}
   d9cea:	4620      	mov	r0, r4
   d9cec:	bd10      	pop	{r4, pc}

000d9cee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9cee:	b510      	push	{r4, lr}
   d9cf0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9cf2:	6800      	ldr	r0, [r0, #0]
   d9cf4:	b108      	cbz	r0, d9cfa <_ZN6String10invalidateEv+0xc>
   d9cf6:	f7ff fd95 	bl	d9824 <free>
	buffer = NULL;
   d9cfa:	2300      	movs	r3, #0
   d9cfc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d9cfe:	60a3      	str	r3, [r4, #8]
   d9d00:	6063      	str	r3, [r4, #4]
   d9d02:	bd10      	pop	{r4, pc}

000d9d04 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9d04:	b538      	push	{r3, r4, r5, lr}
   d9d06:	4604      	mov	r4, r0
   d9d08:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9d0a:	6800      	ldr	r0, [r0, #0]
   d9d0c:	3101      	adds	r1, #1
   d9d0e:	f7ff fd91 	bl	d9834 <realloc>
	if (newbuffer) {
   d9d12:	b110      	cbz	r0, d9d1a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9d14:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d9d18:	2001      	movs	r0, #1
	}
	return 0;
}
   d9d1a:	bd38      	pop	{r3, r4, r5, pc}

000d9d1c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9d1c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9d1e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9d20:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9d22:	b113      	cbz	r3, d9d2a <_ZN6String7reserveEj+0xe>
   d9d24:	6843      	ldr	r3, [r0, #4]
   d9d26:	428b      	cmp	r3, r1
   d9d28:	d207      	bcs.n	d9d3a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d9d2a:	4620      	mov	r0, r4
   d9d2c:	f7ff ffea 	bl	d9d04 <_ZN6String12changeBufferEj>
   d9d30:	b120      	cbz	r0, d9d3c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d9d32:	68a3      	ldr	r3, [r4, #8]
   d9d34:	b90b      	cbnz	r3, d9d3a <_ZN6String7reserveEj+0x1e>
   d9d36:	6822      	ldr	r2, [r4, #0]
   d9d38:	7013      	strb	r3, [r2, #0]
   d9d3a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d9d3c:	bd10      	pop	{r4, pc}

000d9d3e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9d3e:	b570      	push	{r4, r5, r6, lr}
   d9d40:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d9d42:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9d44:	4604      	mov	r4, r0
   d9d46:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d9d48:	f7ff ffe8 	bl	d9d1c <_ZN6String7reserveEj>
   d9d4c:	b918      	cbnz	r0, d9d56 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d9d4e:	4620      	mov	r0, r4
   d9d50:	f7ff ffcd 	bl	d9cee <_ZN6String10invalidateEv>
		return *this;
   d9d54:	e009      	b.n	d9d6a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d9d56:	462a      	mov	r2, r5
   d9d58:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d9d5a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d9d5c:	6820      	ldr	r0, [r4, #0]
   d9d5e:	f004 fc94 	bl	de68a <memcpy>
	buffer[len] = 0;
   d9d62:	6822      	ldr	r2, [r4, #0]
   d9d64:	68a3      	ldr	r3, [r4, #8]
   d9d66:	2100      	movs	r1, #0
   d9d68:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d9d6a:	4620      	mov	r0, r4
   d9d6c:	bd70      	pop	{r4, r5, r6, pc}

000d9d6e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9d6e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9d70:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9d72:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9d74:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9d76:	6043      	str	r3, [r0, #4]
	len = 0;
   d9d78:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9d7a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d9d7c:	460d      	mov	r5, r1
   d9d7e:	b139      	cbz	r1, d9d90 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d9d80:	4608      	mov	r0, r1
   d9d82:	f005 fc5b 	bl	df63c <strlen>
   d9d86:	4629      	mov	r1, r5
   d9d88:	4602      	mov	r2, r0
   d9d8a:	4620      	mov	r0, r4
   d9d8c:	f7ff ffd7 	bl	d9d3e <_ZN6String4copyEPKcj>
}
   d9d90:	4620      	mov	r0, r4
   d9d92:	bd38      	pop	{r3, r4, r5, pc}

000d9d94 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9d94:	b538      	push	{r3, r4, r5, lr}
   d9d96:	4605      	mov	r5, r0
	if (buffer) {
   d9d98:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9d9a:	460c      	mov	r4, r1
	if (buffer) {
   d9d9c:	b160      	cbz	r0, d9db8 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d9d9e:	686a      	ldr	r2, [r5, #4]
   d9da0:	688b      	ldr	r3, [r1, #8]
   d9da2:	429a      	cmp	r2, r3
   d9da4:	d306      	bcc.n	d9db4 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d9da6:	6809      	ldr	r1, [r1, #0]
   d9da8:	f004 ff10 	bl	debcc <strcpy>
			len = rhs.len;
   d9dac:	68a3      	ldr	r3, [r4, #8]
   d9dae:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9db0:	2300      	movs	r3, #0
   d9db2:	e00a      	b.n	d9dca <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d9db4:	f7ff fd36 	bl	d9824 <free>
		}
	}
	buffer = rhs.buffer;
   d9db8:	6823      	ldr	r3, [r4, #0]
   d9dba:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9dbc:	6863      	ldr	r3, [r4, #4]
   d9dbe:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9dc0:	68a3      	ldr	r3, [r4, #8]
   d9dc2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9dc4:	2300      	movs	r3, #0
   d9dc6:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d9dc8:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d9dca:	60a3      	str	r3, [r4, #8]
   d9dcc:	bd38      	pop	{r3, r4, r5, pc}

000d9dce <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9dce:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d9dd0:	b510      	push	{r4, lr}
   d9dd2:	460b      	mov	r3, r1
   d9dd4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9dd6:	d007      	beq.n	d9de8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9dd8:	6809      	ldr	r1, [r1, #0]
   d9dda:	b119      	cbz	r1, d9de4 <_ZN6StringaSERKS_+0x16>
   d9ddc:	689a      	ldr	r2, [r3, #8]
   d9dde:	f7ff ffae 	bl	d9d3e <_ZN6String4copyEPKcj>
   d9de2:	e001      	b.n	d9de8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d9de4:	f7ff ff83 	bl	d9cee <_ZN6String10invalidateEv>

	return *this;
}
   d9de8:	4620      	mov	r0, r4
   d9dea:	bd10      	pop	{r4, pc}

000d9dec <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9dec:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9dee:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9df0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9df2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9df4:	6043      	str	r3, [r0, #4]
	len = 0;
   d9df6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9df8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d9dfa:	f7ff ffe8 	bl	d9dce <_ZN6StringaSERKS_>
}
   d9dfe:	4620      	mov	r0, r4
   d9e00:	bd10      	pop	{r4, pc}

000d9e02 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9e02:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d9e04:	b510      	push	{r4, lr}
   d9e06:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d9e08:	d001      	beq.n	d9e0e <_ZN6StringaSEOS_+0xc>
   d9e0a:	f7ff ffc3 	bl	d9d94 <_ZN6String4moveERS_>
	return *this;
}
   d9e0e:	4620      	mov	r0, r4
   d9e10:	bd10      	pop	{r4, pc}

000d9e12 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9e12:	b538      	push	{r3, r4, r5, lr}
   d9e14:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9e16:	460c      	mov	r4, r1
   d9e18:	b141      	cbz	r1, d9e2c <_ZN6StringaSEPKc+0x1a>
   d9e1a:	4608      	mov	r0, r1
   d9e1c:	f005 fc0e 	bl	df63c <strlen>
   d9e20:	4621      	mov	r1, r4
   d9e22:	4602      	mov	r2, r0
   d9e24:	4628      	mov	r0, r5
   d9e26:	f7ff ff8a 	bl	d9d3e <_ZN6String4copyEPKcj>
   d9e2a:	e001      	b.n	d9e30 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d9e2c:	f7ff ff5f 	bl	d9cee <_ZN6String10invalidateEv>

	return *this;
}
   d9e30:	4628      	mov	r0, r5
   d9e32:	bd38      	pop	{r3, r4, r5, pc}

000d9e34 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   d9e34:	b513      	push	{r0, r1, r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9e36:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
   d9e38:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9e3c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9e3e:	6043      	str	r3, [r0, #4]
	len = 0;
   d9e40:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9e42:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
   d9e44:	a901      	add	r1, sp, #4
	init();
	move(rval);
}
#endif

String::String(char c)
   d9e46:	4604      	mov	r4, r0
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d9e48:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d9e4c:	f7ff ffe1 	bl	d9e12 <_ZN6StringaSEPKc>
}
   d9e50:	4620      	mov	r0, r4
   d9e52:	b002      	add	sp, #8
   d9e54:	bd10      	pop	{r4, pc}

000d9e56 <_ZN6StringC1Ehh>:

String::String(unsigned char value, unsigned char base)
   d9e56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9e58:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9e5a:	2300      	movs	r3, #0
   d9e5c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d9e5e:	6063      	str	r3, [r4, #4]
	len = 0;
   d9e60:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9e62:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d9e64:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   d9e66:	a901      	add	r1, sp, #4
   d9e68:	f7ff fed1 	bl	d9c0e <utoa>
	*this = buf;
   d9e6c:	a901      	add	r1, sp, #4
   d9e6e:	4620      	mov	r0, r4
   d9e70:	f7ff ffcf 	bl	d9e12 <_ZN6StringaSEPKc>
}
   d9e74:	4620      	mov	r0, r4
   d9e76:	b004      	add	sp, #16
   d9e78:	bd10      	pop	{r4, pc}

000d9e7a <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   d9e7a:	b510      	push	{r4, lr}
   d9e7c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9e7e:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d9e80:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9e82:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d9e84:	6063      	str	r3, [r4, #4]
	len = 0;
   d9e86:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9e88:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d9e8a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d9e8c:	a901      	add	r1, sp, #4
   d9e8e:	f7ff fea8 	bl	d9be2 <itoa>
	*this = buf;
   d9e92:	a901      	add	r1, sp, #4
   d9e94:	4620      	mov	r0, r4
   d9e96:	f7ff ffbc 	bl	d9e12 <_ZN6StringaSEPKc>
}
   d9e9a:	4620      	mov	r0, r4
   d9e9c:	b00a      	add	sp, #40	; 0x28
   d9e9e:	bd10      	pop	{r4, pc}

000d9ea0 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   d9ea0:	b510      	push	{r4, lr}
   d9ea2:	4604      	mov	r4, r0
   d9ea4:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9ea6:	2300      	movs	r3, #0
   d9ea8:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d9eaa:	6063      	str	r3, [r4, #4]
	len = 0;
   d9eac:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9eae:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   d9eb0:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
   d9eb2:	2301      	movs	r3, #1
   d9eb4:	a901      	add	r1, sp, #4
   d9eb6:	f7ff fe6c 	bl	d9b92 <ultoa>
	*this = buf;
   d9eba:	a901      	add	r1, sp, #4
   d9ebc:	4620      	mov	r0, r4
   d9ebe:	f7ff ffa8 	bl	d9e12 <_ZN6StringaSEPKc>
}
   d9ec2:	4620      	mov	r0, r4
   d9ec4:	b00a      	add	sp, #40	; 0x28
   d9ec6:	bd10      	pop	{r4, pc}

000d9ec8 <_ZN6StringC1Efi>:

String::String(float value, int decimalPlaces)
   d9ec8:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9eca:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d9ecc:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9ece:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9ed0:	6043      	str	r3, [r0, #4]
	len = 0;
   d9ed2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9ed4:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d9ed6:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d9ed8:	ee10 0a10 	vmov	r0, s0
   d9edc:	b2cd      	uxtb	r5, r1
   d9ede:	f003 fd2f 	bl	dd940 <__aeabi_f2d>
   d9ee2:	ec41 0b10 	vmov	d0, r0, r1
   d9ee6:	a901      	add	r1, sp, #4
   d9ee8:	4628      	mov	r0, r5
   d9eea:	f7ff fe95 	bl	d9c18 <_Z4dtoadhPc>
        *this = buf;
   d9eee:	a901      	add	r1, sp, #4
   d9ef0:	4620      	mov	r0, r4
   d9ef2:	f7ff ff8e 	bl	d9e12 <_ZN6StringaSEPKc>
}
   d9ef6:	4620      	mov	r0, r4
   d9ef8:	b00b      	add	sp, #44	; 0x2c
   d9efa:	bd30      	pop	{r4, r5, pc}

000d9efc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d9efc:	b570      	push	{r4, r5, r6, lr}
   d9efe:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d9f00:	460e      	mov	r6, r1
   d9f02:	b909      	cbnz	r1, d9f08 <_ZN6String6concatEPKcj+0xc>
   d9f04:	2000      	movs	r0, #0
   d9f06:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9f08:	b16a      	cbz	r2, d9f26 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d9f0a:	6883      	ldr	r3, [r0, #8]
   d9f0c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d9f0e:	4629      	mov	r1, r5
   d9f10:	f7ff ff04 	bl	d9d1c <_ZN6String7reserveEj>
   d9f14:	2800      	cmp	r0, #0
   d9f16:	d0f5      	beq.n	d9f04 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9f18:	6820      	ldr	r0, [r4, #0]
   d9f1a:	68a3      	ldr	r3, [r4, #8]
   d9f1c:	4631      	mov	r1, r6
   d9f1e:	4418      	add	r0, r3
   d9f20:	f004 fe54 	bl	debcc <strcpy>
	len = newlen;
   d9f24:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d9f26:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9f28:	bd70      	pop	{r4, r5, r6, pc}

000d9f2a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d9f2a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9f2c:	688a      	ldr	r2, [r1, #8]
   d9f2e:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d9f30:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9f32:	f7ff ffe3 	bl	d9efc <_ZN6String6concatEPKcj>
   d9f36:	b910      	cbnz	r0, d9f3e <_ZplRK15StringSumHelperRK6String+0x14>
   d9f38:	4620      	mov	r0, r4
   d9f3a:	f7ff fed8 	bl	d9cee <_ZN6String10invalidateEv>
	return a;
}
   d9f3e:	4620      	mov	r0, r4
   d9f40:	bd10      	pop	{r4, pc}

000d9f42 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d9f42:	b538      	push	{r3, r4, r5, lr}
   d9f44:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9f46:	460d      	mov	r5, r1
   d9f48:	b141      	cbz	r1, d9f5c <_ZplRK15StringSumHelperPKc+0x1a>
   d9f4a:	4608      	mov	r0, r1
   d9f4c:	f005 fb76 	bl	df63c <strlen>
   d9f50:	4629      	mov	r1, r5
   d9f52:	4602      	mov	r2, r0
   d9f54:	4620      	mov	r0, r4
   d9f56:	f7ff ffd1 	bl	d9efc <_ZN6String6concatEPKcj>
   d9f5a:	b910      	cbnz	r0, d9f62 <_ZplRK15StringSumHelperPKc+0x20>
   d9f5c:	4620      	mov	r0, r4
   d9f5e:	f7ff fec6 	bl	d9cee <_ZN6String10invalidateEv>
	return a;
}
   d9f62:	4620      	mov	r0, r4
   d9f64:	bd38      	pop	{r3, r4, r5, pc}

000d9f66 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d9f66:	b570      	push	{r4, r5, r6, lr}
   d9f68:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d9f6a:	b19a      	cbz	r2, d9f94 <_ZNK6String8getBytesEPhjj+0x2e>
   d9f6c:	b191      	cbz	r1, d9f94 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d9f6e:	6885      	ldr	r5, [r0, #8]
   d9f70:	429d      	cmp	r5, r3
   d9f72:	d802      	bhi.n	d9f7a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d9f74:	2300      	movs	r3, #0
   d9f76:	700b      	strb	r3, [r1, #0]
		return;
   d9f78:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d9f7a:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d9f7c:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d9f7e:	6801      	ldr	r1, [r0, #0]
   d9f80:	42ac      	cmp	r4, r5
   d9f82:	bf28      	it	cs
   d9f84:	462c      	movcs	r4, r5
   d9f86:	4419      	add	r1, r3
   d9f88:	4622      	mov	r2, r4
   d9f8a:	4630      	mov	r0, r6
   d9f8c:	f005 fb73 	bl	df676 <strncpy>
	buf[n] = 0;
   d9f90:	2300      	movs	r3, #0
   d9f92:	5533      	strb	r3, [r6, r4]
   d9f94:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9f98 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d9f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d9f9a:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d9f9c:	460f      	mov	r7, r1
   d9f9e:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d9fa0:	490c      	ldr	r1, [pc, #48]	; (d9fd4 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d9fa2:	bf88      	it	hi
   d9fa4:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d9fa6:	4614      	mov	r4, r2
   d9fa8:	4606      	mov	r6, r0
	if (left > right) {
   d9faa:	bf84      	itt	hi
   d9fac:	462c      	movhi	r4, r5
   d9fae:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d9fb0:	f7ff fedd 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d9fb4:	68ba      	ldr	r2, [r7, #8]
   d9fb6:	4294      	cmp	r4, r2
   d9fb8:	d80a      	bhi.n	d9fd0 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d9fba:	6839      	ldr	r1, [r7, #0]
   d9fbc:	4295      	cmp	r5, r2
   d9fbe:	bf94      	ite	ls
   d9fc0:	ebc4 0205 	rsbls	r2, r4, r5
   d9fc4:	ebc4 0202 	rsbhi	r2, r4, r2
   d9fc8:	4421      	add	r1, r4
   d9fca:	4630      	mov	r0, r6
   d9fcc:	f7ff feb7 	bl	d9d3e <_ZN6String4copyEPKcj>
	return out;
}
   d9fd0:	4630      	mov	r0, r6
   d9fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9fd4:	000e05d4 	.word	0x000e05d4

000d9fd8 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   d9fd8:	b510      	push	{r4, lr}
   d9fda:	4604      	mov	r4, r0
	return substring(left, len);
   d9fdc:	688b      	ldr	r3, [r1, #8]
   d9fde:	f7ff ffdb 	bl	d9f98 <_ZNK6String9substringEjj>
}
   d9fe2:	4620      	mov	r0, r4
   d9fe4:	bd10      	pop	{r4, pc}

000d9fe6 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d9fe6:	6800      	ldr	r0, [r0, #0]
   d9fe8:	b108      	cbz	r0, d9fee <_ZNK6String5toIntEv+0x8>
   d9fea:	f004 ba35 	b.w	de458 <atol>
	return 0;
}
   d9fee:	4770      	bx	lr

000d9ff0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d9ff0:	b40e      	push	{r1, r2, r3}
   d9ff2:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d9ff4:	ac09      	add	r4, sp, #36	; 0x24
   d9ff6:	4605      	mov	r5, r0
   d9ff8:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d9ffc:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9ffe:	4623      	mov	r3, r4
   da000:	463a      	mov	r2, r7
   da002:	2105      	movs	r1, #5
   da004:	a802      	add	r0, sp, #8
   da006:	f7ff fc3d 	bl	d9884 <vsnprintf>
    va_end(marker);

    String result;
   da00a:	490c      	ldr	r1, [pc, #48]	; (da03c <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da00c:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   da00e:	4628      	mov	r0, r5
   da010:	f7ff fead 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   da014:	4631      	mov	r1, r6
   da016:	4628      	mov	r0, r5
   da018:	f7ff fe80 	bl	d9d1c <_ZN6String7reserveEj>
    if (result.buffer) {
   da01c:	6828      	ldr	r0, [r5, #0]
   da01e:	b130      	cbz	r0, da02e <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da020:	4623      	mov	r3, r4
   da022:	463a      	mov	r2, r7
   da024:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   da026:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da028:	f7ff fc2c 	bl	d9884 <vsnprintf>
        va_end(marker);
        result.len = n;
   da02c:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   da02e:	4628      	mov	r0, r5
   da030:	b004      	add	sp, #16
   da032:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   da036:	b003      	add	sp, #12
   da038:	4770      	bx	lr
   da03a:	bf00      	nop
   da03c:	000e05d4 	.word	0x000e05d4

000da040 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   da040:	b510      	push	{r4, lr}
   da042:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da044:	6800      	ldr	r0, [r0, #0]
   da046:	b108      	cbz	r0, da04c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   da048:	f7ff f9f6 	bl	d9438 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   da04c:	4620      	mov	r0, r4
   da04e:	bd10      	pop	{r4, pc}

000da050 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   da050:	680b      	ldr	r3, [r1, #0]
   da052:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   da054:	b113      	cbz	r3, da05c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   da056:	685a      	ldr	r2, [r3, #4]
   da058:	3201      	adds	r2, #1
   da05a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   da05c:	4770      	bx	lr
	...

000da060 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   da060:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da062:	4c06      	ldr	r4, [pc, #24]	; (da07c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   da064:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   da066:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da068:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   da06a:	f7ff f9dd 	bl	d9428 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   da06e:	4620      	mov	r0, r4
   da070:	4a03      	ldr	r2, [pc, #12]	; (da080 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   da072:	4904      	ldr	r1, [pc, #16]	; (da084 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   da074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   da078:	f001 bb7e 	b.w	db778 <__aeabi_atexit>
   da07c:	2003e1dc 	.word	0x2003e1dc
   da080:	2003be74 	.word	0x2003be74
   da084:	000da041 	.word	0x000da041

000da088 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da08a:	4606      	mov	r6, r0
   da08c:	460d      	mov	r5, r1
   da08e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   da090:	2400      	movs	r4, #0
  while (size--) {
   da092:	42bd      	cmp	r5, r7
   da094:	d00c      	beq.n	da0b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da096:	6833      	ldr	r3, [r6, #0]
   da098:	f815 1b01 	ldrb.w	r1, [r5], #1
   da09c:	689b      	ldr	r3, [r3, #8]
   da09e:	4630      	mov	r0, r6
   da0a0:	4798      	blx	r3
     if (chunk>=0)
   da0a2:	2800      	cmp	r0, #0
   da0a4:	db01      	blt.n	da0aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da0a6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   da0a8:	e7f3      	b.n	da092 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da0aa:	2c00      	cmp	r4, #0
   da0ac:	bf08      	it	eq
   da0ae:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   da0b0:	4620      	mov	r0, r4
   da0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da0b4 <_ZN5Print5printEPKc>:
   da0b4:	b508      	push	{r3, lr}
   da0b6:	f7fd f9e9 	bl	d748c <_ZN5Print5writeEPKc>
   da0ba:	bd08      	pop	{r3, pc}

000da0bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   da0bc:	6803      	ldr	r3, [r0, #0]
   da0be:	689b      	ldr	r3, [r3, #8]
   da0c0:	4718      	bx	r3

000da0c2 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   da0c2:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da0c4:	f7fd f9e2 	bl	d748c <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   da0c8:	bd08      	pop	{r3, pc}

000da0ca <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   da0ca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da0cc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da0ce:	4605      	mov	r5, r0
  size_t n = print('\r');
   da0d0:	f7ff fff4 	bl	da0bc <_ZN5Print5printEc>
  n += print('\n');
   da0d4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   da0d6:	4604      	mov	r4, r0
  n += print('\n');
   da0d8:	4628      	mov	r0, r5
   da0da:	f7ff ffef 	bl	da0bc <_ZN5Print5printEc>
  return n;
}
   da0de:	4420      	add	r0, r4
   da0e0:	bd38      	pop	{r3, r4, r5, pc}

000da0e2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   da0e2:	b538      	push	{r3, r4, r5, lr}
   da0e4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da0e6:	f7fd f9d1 	bl	d748c <_ZN5Print5writeEPKc>
   da0ea:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   da0ec:	4628      	mov	r0, r5
   da0ee:	f7ff ffec 	bl	da0ca <_ZN5Print7printlnEv>
  return n;
}
   da0f2:	4420      	add	r0, r4
   da0f4:	bd38      	pop	{r3, r4, r5, pc}

000da0f6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   da0f6:	f7ff bff4 	b.w	da0e2 <_ZN5Print7printlnEPKc>

000da0fa <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da0fa:	b530      	push	{r4, r5, lr}
   da0fc:	b08b      	sub	sp, #44	; 0x2c
   da0fe:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da100:	2100      	movs	r1, #0
   da102:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da106:	2a01      	cmp	r2, #1
   da108:	bf98      	it	ls
   da10a:	220a      	movls	r2, #10
   da10c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   da110:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   da114:	fb05 3312 	mls	r3, r5, r2, r3
   da118:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da11c:	2b09      	cmp	r3, #9
   da11e:	bf94      	ite	ls
   da120:	3330      	addls	r3, #48	; 0x30
   da122:	3337      	addhi	r3, #55	; 0x37
   da124:	b2db      	uxtb	r3, r3
   da126:	4621      	mov	r1, r4
   da128:	f804 3901 	strb.w	r3, [r4], #-1
   da12c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   da12e:	2d00      	cmp	r5, #0
   da130:	d1ee      	bne.n	da110 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   da132:	f7fd f9ab 	bl	d748c <_ZN5Print5writeEPKc>
}
   da136:	b00b      	add	sp, #44	; 0x2c
   da138:	bd30      	pop	{r4, r5, pc}
	...

000da13c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   da13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da140:	ec57 6b10 	vmov	r6, r7, d0
   da144:	4682      	mov	sl, r0
   da146:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   da148:	ee10 2a10 	vmov	r2, s0
   da14c:	463b      	mov	r3, r7
   da14e:	ee10 0a10 	vmov	r0, s0
   da152:	4639      	mov	r1, r7
   da154:	f003 fee2 	bl	ddf1c <__aeabi_dcmpun>
   da158:	b108      	cbz	r0, da15e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da15a:	494e      	ldr	r1, [pc, #312]	; (da294 <_ZN5Print10printFloatEdh+0x158>)
   da15c:	e012      	b.n	da184 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   da15e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   da162:	f04f 32ff 	mov.w	r2, #4294967295
   da166:	4b4c      	ldr	r3, [pc, #304]	; (da298 <_ZN5Print10printFloatEdh+0x15c>)
   da168:	4630      	mov	r0, r6
   da16a:	4649      	mov	r1, r9
   da16c:	f003 fed6 	bl	ddf1c <__aeabi_dcmpun>
   da170:	b968      	cbnz	r0, da18e <_ZN5Print10printFloatEdh+0x52>
   da172:	f04f 32ff 	mov.w	r2, #4294967295
   da176:	4b48      	ldr	r3, [pc, #288]	; (da298 <_ZN5Print10printFloatEdh+0x15c>)
   da178:	4630      	mov	r0, r6
   da17a:	4649      	mov	r1, r9
   da17c:	f003 feb0 	bl	ddee0 <__aeabi_dcmple>
   da180:	b928      	cbnz	r0, da18e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da182:	4946      	ldr	r1, [pc, #280]	; (da29c <_ZN5Print10printFloatEdh+0x160>)
   da184:	4650      	mov	r0, sl
   da186:	f7fd f981 	bl	d748c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   da18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   da18e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da192:	4b43      	ldr	r3, [pc, #268]	; (da2a0 <_ZN5Print10printFloatEdh+0x164>)
   da194:	4630      	mov	r0, r6
   da196:	4639      	mov	r1, r7
   da198:	f003 feb6 	bl	ddf08 <__aeabi_dcmpgt>
   da19c:	b108      	cbz	r0, da1a2 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da19e:	4941      	ldr	r1, [pc, #260]	; (da2a4 <_ZN5Print10printFloatEdh+0x168>)
   da1a0:	e7f0      	b.n	da184 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   da1a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da1a6:	4b40      	ldr	r3, [pc, #256]	; (da2a8 <_ZN5Print10printFloatEdh+0x16c>)
   da1a8:	4630      	mov	r0, r6
   da1aa:	4639      	mov	r1, r7
   da1ac:	f003 fe8e 	bl	ddecc <__aeabi_dcmplt>
   da1b0:	2800      	cmp	r0, #0
   da1b2:	d1f4      	bne.n	da19e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   da1b4:	2200      	movs	r2, #0
   da1b6:	2300      	movs	r3, #0
   da1b8:	4630      	mov	r0, r6
   da1ba:	4639      	mov	r1, r7
   da1bc:	f003 fe86 	bl	ddecc <__aeabi_dcmplt>
   da1c0:	b140      	cbz	r0, da1d4 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   da1c2:	212d      	movs	r1, #45	; 0x2d
   da1c4:	4650      	mov	r0, sl
   da1c6:	f7ff ff79 	bl	da0bc <_ZN5Print5printEc>
     number = -number;
   da1ca:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   da1ce:	4604      	mov	r4, r0
     number = -number;
   da1d0:	461f      	mov	r7, r3
   da1d2:	e000      	b.n	da1d6 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   da1d4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   da1d6:	4935      	ldr	r1, [pc, #212]	; (da2ac <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   da1d8:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   da1dc:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   da1de:	fa5f f388 	uxtb.w	r3, r8
   da1e2:	429d      	cmp	r5, r3
   da1e4:	d906      	bls.n	da1f4 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   da1e6:	2200      	movs	r2, #0
   da1e8:	4b31      	ldr	r3, [pc, #196]	; (da2b0 <_ZN5Print10printFloatEdh+0x174>)
   da1ea:	f003 fd27 	bl	ddc3c <__aeabi_ddiv>
   da1ee:	f108 0801 	add.w	r8, r8, #1
   da1f2:	e7f4      	b.n	da1de <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   da1f4:	4632      	mov	r2, r6
   da1f6:	463b      	mov	r3, r7
   da1f8:	f003 fa44 	bl	dd684 <__adddf3>
   da1fc:	460f      	mov	r7, r1
   da1fe:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   da200:	f003 feca 	bl	ddf98 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   da204:	220a      	movs	r2, #10
   da206:	4601      	mov	r1, r0
   da208:	4680      	mov	r8, r0
   da20a:	4650      	mov	r0, sl
   da20c:	f7ff ff75 	bl	da0fa <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   da210:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   da212:	b3e5      	cbz	r5, da28e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   da214:	4640      	mov	r0, r8
   da216:	f003 fb71 	bl	dd8fc <__aeabi_ui2d>
   da21a:	4602      	mov	r2, r0
   da21c:	460b      	mov	r3, r1
   da21e:	4630      	mov	r0, r6
   da220:	4639      	mov	r1, r7
   da222:	f003 fa2d 	bl	dd680 <__aeabi_dsub>
   da226:	4606      	mov	r6, r0
   da228:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da22a:	4650      	mov	r0, sl
   da22c:	4921      	ldr	r1, [pc, #132]	; (da2b4 <_ZN5Print10printFloatEdh+0x178>)
   da22e:	f7fd f92d 	bl	d748c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   da232:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   da234:	2200      	movs	r2, #0
   da236:	4b1e      	ldr	r3, [pc, #120]	; (da2b0 <_ZN5Print10printFloatEdh+0x174>)
   da238:	4630      	mov	r0, r6
   da23a:	4639      	mov	r1, r7
   da23c:	f003 fbd4 	bl	dd9e8 <__aeabi_dmul>
   da240:	4606      	mov	r6, r0
   da242:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   da244:	f003 fe80 	bl	ddf48 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   da248:	f1b0 0900 	subs.w	r9, r0, #0
   da24c:	da07      	bge.n	da25e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   da24e:	212d      	movs	r1, #45	; 0x2d
   da250:	4650      	mov	r0, sl
   da252:	f7ff ff33 	bl	da0bc <_ZN5Print5printEc>
            val = -n;
   da256:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   da25a:	4680      	mov	r8, r0
   da25c:	e002      	b.n	da264 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   da25e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   da260:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   da264:	220a      	movs	r2, #10
   da266:	4650      	mov	r0, sl
   da268:	f7ff ff47 	bl	da0fa <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   da26c:	4440      	add	r0, r8
   da26e:	4404      	add	r4, r0
    remainder -= toPrint;
   da270:	4648      	mov	r0, r9
   da272:	f003 fb53 	bl	dd91c <__aeabi_i2d>
   da276:	4602      	mov	r2, r0
   da278:	460b      	mov	r3, r1
   da27a:	4630      	mov	r0, r6
   da27c:	4639      	mov	r1, r7
   da27e:	f003 f9ff 	bl	dd680 <__aeabi_dsub>
   da282:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   da284:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   da288:	4606      	mov	r6, r0
   da28a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   da28c:	d1d2      	bne.n	da234 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   da28e:	4620      	mov	r0, r4
   da290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da294:	000e0524 	.word	0x000e0524
   da298:	7fefffff 	.word	0x7fefffff
   da29c:	000e052c 	.word	0x000e052c
   da2a0:	41efffff 	.word	0x41efffff
   da2a4:	000e0528 	.word	0x000e0528
   da2a8:	c1efffff 	.word	0xc1efffff
   da2ac:	3fe00000 	.word	0x3fe00000
   da2b0:	40240000 	.word	0x40240000
   da2b4:	000e00aa 	.word	0x000e00aa

000da2b8 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   da2b8:	b538      	push	{r3, r4, r5, lr}
   da2ba:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   da2bc:	ee10 0a10 	vmov	r0, s0
   da2c0:	b2cd      	uxtb	r5, r1
   da2c2:	f003 fb3d 	bl	dd940 <__aeabi_f2d>
   da2c6:	ec41 0b10 	vmov	d0, r0, r1
   da2ca:	4629      	mov	r1, r5
   da2cc:	4620      	mov	r0, r4
}
   da2ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   da2d2:	f7ff bf33 	b.w	da13c <_ZN5Print10printFloatEdh>

000da2d6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   da2d6:	b40c      	push	{r2, r3}
   da2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da2dc:	b087      	sub	sp, #28
   da2de:	af00      	add	r7, sp, #0
   da2e0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   da2e4:	4605      	mov	r5, r0
   da2e6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   da2ea:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   da2ec:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   da2ee:	4623      	mov	r3, r4
   da2f0:	464a      	mov	r2, r9
   da2f2:	2114      	movs	r1, #20
   da2f4:	1d38      	adds	r0, r7, #4
   da2f6:	f7ff fac5 	bl	d9884 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   da2fa:	2813      	cmp	r0, #19
   da2fc:	d805      	bhi.n	da30a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da2fe:	1d39      	adds	r1, r7, #4
   da300:	4628      	mov	r0, r5
   da302:	f7fd f8c3 	bl	d748c <_ZN5Print5writeEPKc>
   da306:	4604      	mov	r4, r0
   da308:	e013      	b.n	da332 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   da30a:	f100 0308 	add.w	r3, r0, #8
   da30e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   da312:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   da314:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   da318:	1c41      	adds	r1, r0, #1
   da31a:	4623      	mov	r3, r4
   da31c:	464a      	mov	r2, r9
   da31e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   da320:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   da322:	f7ff faaf 	bl	d9884 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da326:	4669      	mov	r1, sp
   da328:	4628      	mov	r0, r5
   da32a:	f7fd f8af 	bl	d748c <_ZN5Print5writeEPKc>
   da32e:	4604      	mov	r4, r0
   da330:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   da332:	b11e      	cbz	r6, da33c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   da334:	4628      	mov	r0, r5
   da336:	f7ff fec8 	bl	da0ca <_ZN5Print7printlnEv>
   da33a:	4404      	add	r4, r0
    return n;
}
   da33c:	4620      	mov	r0, r4
   da33e:	371c      	adds	r7, #28
   da340:	46bd      	mov	sp, r7
   da342:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da346:	b002      	add	sp, #8
   da348:	4770      	bx	lr
	...

000da34c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   da34c:	4b01      	ldr	r3, [pc, #4]	; (da354 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da34e:	4a02      	ldr	r2, [pc, #8]	; (da358 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da350:	601a      	str	r2, [r3, #0]
   da352:	4770      	bx	lr
   da354:	2003e1e0 	.word	0x2003e1e0
   da358:	000e05a3 	.word	0x000e05a3

000da35c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da35c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   da35e:	4b14      	ldr	r3, [pc, #80]	; (da3b0 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da360:	4f14      	ldr	r7, [pc, #80]	; (da3b4 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   da362:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   da364:	4b14      	ldr	r3, [pc, #80]	; (da3b8 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   da366:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   da368:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   da36a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   da36c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   da36e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da370:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da372:	d01b      	beq.n	da3ac <_ZL22Refresh_UnixTime_Cachel+0x50>
   da374:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   da376:	ad01      	add	r5, sp, #4
   da378:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   da37c:	f004 f87e 	bl	de47c <localtime>
	calendar_time->tm_year += 1900;
   da380:	6943      	ldr	r3, [r0, #20]
   da382:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   da386:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   da388:	4604      	mov	r4, r0
   da38a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da38c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da38e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da392:	f8d4 e000 	ldr.w	lr, [r4]
   da396:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da39a:	ad01      	add	r5, sp, #4
   da39c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da39e:	4c07      	ldr	r4, [pc, #28]	; (da3bc <_ZL22Refresh_UnixTime_Cachel+0x60>)
   da3a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da3a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da3a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da3a6:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da3a8:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   da3ac:	b00b      	add	sp, #44	; 0x2c
   da3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da3b0:	2003e214 	.word	0x2003e214
   da3b4:	2003e210 	.word	0x2003e210
   da3b8:	2003e20c 	.word	0x2003e20c
   da3bc:	2003e1e4 	.word	0x2003e1e4

000da3c0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   da3c0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   da3c2:	2000      	movs	r0, #0
   da3c4:	f7ff fa16 	bl	d97f4 <spark_sync_time_pending>
   da3c8:	b128      	cbz	r0, da3d6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   da3ca:	f7ff fa03 	bl	d97d4 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   da3ce:	f080 0001 	eor.w	r0, r0, #1
   da3d2:	b2c0      	uxtb	r0, r0
   da3d4:	bd08      	pop	{r3, pc}
   da3d6:	2001      	movs	r0, #1
    }
   da3d8:	bd08      	pop	{r3, pc}
	...

000da3dc <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   da3dc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da3de:	f7ff ffbd 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   da3e2:	4b01      	ldr	r3, [pc, #4]	; (da3e8 <_ZN9TimeClass4hourEl+0xc>)
   da3e4:	6898      	ldr	r0, [r3, #8]
   da3e6:	bd08      	pop	{r3, pc}
   da3e8:	2003e1e4 	.word	0x2003e1e4

000da3ec <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   da3ec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da3ee:	f7ff ffb5 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   da3f2:	4b01      	ldr	r3, [pc, #4]	; (da3f8 <_ZN9TimeClass6minuteEl+0xc>)
   da3f4:	6858      	ldr	r0, [r3, #4]
   da3f6:	bd08      	pop	{r3, pc}
   da3f8:	2003e1e4 	.word	0x2003e1e4

000da3fc <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   da3fc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da3fe:	f7ff ffad 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   da402:	4b01      	ldr	r3, [pc, #4]	; (da408 <_ZN9TimeClass6secondEl+0xc>)
   da404:	6818      	ldr	r0, [r3, #0]
   da406:	bd08      	pop	{r3, pc}
   da408:	2003e1e4 	.word	0x2003e1e4

000da40c <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   da40c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da40e:	f7ff ffa5 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   da412:	4b01      	ldr	r3, [pc, #4]	; (da418 <_ZN9TimeClass3dayEl+0xc>)
   da414:	68d8      	ldr	r0, [r3, #12]
   da416:	bd08      	pop	{r3, pc}
   da418:	2003e1e4 	.word	0x2003e1e4

000da41c <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   da41c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da41e:	f7ff ff9d 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   da422:	4b02      	ldr	r3, [pc, #8]	; (da42c <_ZN9TimeClass7weekdayEl+0x10>)
   da424:	6998      	ldr	r0, [r3, #24]
}
   da426:	3001      	adds	r0, #1
   da428:	bd08      	pop	{r3, pc}
   da42a:	bf00      	nop
   da42c:	2003e1e4 	.word	0x2003e1e4

000da430 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   da430:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da432:	f7ff ff93 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   da436:	4b02      	ldr	r3, [pc, #8]	; (da440 <_ZN9TimeClass5monthEl+0x10>)
   da438:	6918      	ldr	r0, [r3, #16]
}
   da43a:	3001      	adds	r0, #1
   da43c:	bd08      	pop	{r3, pc}
   da43e:	bf00      	nop
   da440:	2003e1e4 	.word	0x2003e1e4

000da444 <_ZN9TimeClass4yearEl>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   da444:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da446:	f7ff ff89 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_year;
}
   da44a:	4b01      	ldr	r3, [pc, #4]	; (da450 <_ZN9TimeClass4yearEl+0xc>)
   da44c:	6958      	ldr	r0, [r3, #20]
   da44e:	bd08      	pop	{r3, pc}
   da450:	2003e1e4 	.word	0x2003e1e4

000da454 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da454:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   da456:	4b0e      	ldr	r3, [pc, #56]	; (da490 <_ZN9TimeClass7timeStrEl+0x3c>)
   da458:	681b      	ldr	r3, [r3, #0]
   da45a:	4419      	add	r1, r3
   da45c:	4b0d      	ldr	r3, [pc, #52]	; (da494 <_ZN9TimeClass7timeStrEl+0x40>)
   da45e:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da460:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   da462:	a802      	add	r0, sp, #8
   da464:	4419      	add	r1, r3
   da466:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   da46a:	f004 f807 	bl	de47c <localtime>
        char* ascstr = asctime(calendar_time);
   da46e:	f003 ffb3 	bl	de3d8 <asctime>
   da472:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   da474:	f005 f8e2 	bl	df63c <strlen>
        ascstr[len-1] = 0; // remove final newline
   da478:	4428      	add	r0, r5
   da47a:	2300      	movs	r3, #0
   da47c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   da480:	4629      	mov	r1, r5
   da482:	4620      	mov	r0, r4
   da484:	f7ff fc73 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
}
   da488:	4620      	mov	r0, r4
   da48a:	b003      	add	sp, #12
   da48c:	bd30      	pop	{r4, r5, pc}
   da48e:	bf00      	nop
   da490:	2003e214 	.word	0x2003e214
   da494:	2003e20c 	.word	0x2003e20c

000da498 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da49c:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da49e:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da4a0:	4607      	mov	r7, r0
   da4a2:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da4a4:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da4a6:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da4a8:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da4aa:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da4ac:	f005 f8e3 	bl	df676 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da4b0:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da4b2:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da4b4:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da4b8:	f005 f8c0 	bl	df63c <strlen>
   da4bc:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da4be:	b925      	cbnz	r5, da4ca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   da4c0:	4924      	ldr	r1, [pc, #144]	; (da554 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   da4c2:	a803      	add	r0, sp, #12
   da4c4:	f004 fb82 	bl	debcc <strcpy>
   da4c8:	e013      	b.n	da4f2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da4ca:	213c      	movs	r1, #60	; 0x3c
   da4cc:	fb95 f2f1 	sdiv	r2, r5, r1
   da4d0:	2a00      	cmp	r2, #0
   da4d2:	bfb8      	it	lt
   da4d4:	4252      	neglt	r2, r2
   da4d6:	fb92 f3f1 	sdiv	r3, r2, r1
   da4da:	fb01 2213 	mls	r2, r1, r3, r2
   da4de:	9200      	str	r2, [sp, #0]
   da4e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da4e4:	4a1c      	ldr	r2, [pc, #112]	; (da558 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   da4e6:	fb95 f3f3 	sdiv	r3, r5, r3
   da4ea:	2110      	movs	r1, #16
   da4ec:	a803      	add	r0, sp, #12
   da4ee:	f7ff f9b9 	bl	d9864 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da4f2:	4625      	mov	r5, r4
   da4f4:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da4f6:	f108 3aff 	add.w	sl, r8, #4294967295
   da4fa:	45b2      	cmp	sl, r6
   da4fc:	d91b      	bls.n	da536 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da4fe:	782b      	ldrb	r3, [r5, #0]
   da500:	2b25      	cmp	r3, #37	; 0x25
   da502:	d116      	bne.n	da532 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   da504:	786b      	ldrb	r3, [r5, #1]
   da506:	2b7a      	cmp	r3, #122	; 0x7a
   da508:	d113      	bne.n	da532 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   da50a:	a803      	add	r0, sp, #12
   da50c:	f005 f896 	bl	df63c <strlen>
   da510:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da512:	4430      	add	r0, r6
   da514:	ebc6 020a 	rsb	r2, r6, sl
   da518:	1ca9      	adds	r1, r5, #2
   da51a:	4420      	add	r0, r4
   da51c:	f004 f8b5 	bl	de68a <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da520:	4642      	mov	r2, r8
   da522:	a903      	add	r1, sp, #12
   da524:	4628      	mov	r0, r5
   da526:	f004 f8b0 	bl	de68a <memcpy>
            len = strlen(format_str);
   da52a:	4620      	mov	r0, r4
   da52c:	f005 f886 	bl	df63c <strlen>
   da530:	4680      	mov	r8, r0
   da532:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da534:	e7de      	b.n	da4f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   da536:	464b      	mov	r3, r9
   da538:	4622      	mov	r2, r4
   da53a:	2132      	movs	r1, #50	; 0x32
   da53c:	a807      	add	r0, sp, #28
   da53e:	f004 fbc9 	bl	decd4 <strftime>
    return String(buf);
   da542:	a907      	add	r1, sp, #28
   da544:	4638      	mov	r0, r7
   da546:	f7ff fc12 	bl	d9d6e <_ZN6StringC1EPK19__FlashStringHelper>
}
   da54a:	4638      	mov	r0, r7
   da54c:	b024      	add	sp, #144	; 0x90
   da54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da552:	bf00      	nop
   da554:	000e0ea9 	.word	0x000e0ea9
   da558:	000e060c 	.word	0x000e060c

000da55c <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   da55c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da55e:	4605      	mov	r5, r0
   da560:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   da562:	461c      	mov	r4, r3
   da564:	b913      	cbnz	r3, da56c <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   da566:	4b12      	ldr	r3, [pc, #72]	; (da5b0 <_ZN9TimeClass6formatElPKc+0x54>)
   da568:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   da56a:	b12c      	cbz	r4, da578 <_ZN9TimeClass6formatElPKc+0x1c>
   da56c:	4b11      	ldr	r3, [pc, #68]	; (da5b4 <_ZN9TimeClass6formatElPKc+0x58>)
   da56e:	4620      	mov	r0, r4
   da570:	6819      	ldr	r1, [r3, #0]
   da572:	f004 fb21 	bl	debb8 <strcmp>
   da576:	b920      	cbnz	r0, da582 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   da578:	9901      	ldr	r1, [sp, #4]
   da57a:	4628      	mov	r0, r5
   da57c:	f7ff ff6a 	bl	da454 <_ZN9TimeClass7timeStrEl>
   da580:	e013      	b.n	da5aa <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   da582:	4f0d      	ldr	r7, [pc, #52]	; (da5b8 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   da584:	9a01      	ldr	r2, [sp, #4]
   da586:	683b      	ldr	r3, [r7, #0]
   da588:	4e0c      	ldr	r6, [pc, #48]	; (da5bc <_ZN9TimeClass6formatElPKc+0x60>)
   da58a:	441a      	add	r2, r3
   da58c:	6833      	ldr	r3, [r6, #0]
   da58e:	a802      	add	r0, sp, #8
   da590:	4413      	add	r3, r2
   da592:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   da596:	f003 ff71 	bl	de47c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da59a:	683a      	ldr	r2, [r7, #0]
   da59c:	6833      	ldr	r3, [r6, #0]
   da59e:	4601      	mov	r1, r0
   da5a0:	4413      	add	r3, r2
   da5a2:	4628      	mov	r0, r5
   da5a4:	4622      	mov	r2, r4
   da5a6:	f7ff ff77 	bl	da498 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   da5aa:	4628      	mov	r0, r5
   da5ac:	b003      	add	sp, #12
   da5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da5b0:	2003e208 	.word	0x2003e208
   da5b4:	2003bdbc 	.word	0x2003bdbc
   da5b8:	2003e214 	.word	0x2003e214
   da5bc:	2003e20c 	.word	0x2003e20c

000da5c0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   da5c0:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   da5c2:	2000      	movs	r0, #0
   da5c4:	f7fe fed0 	bl	d9368 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   da5c8:	4604      	mov	r4, r0
   da5ca:	b968      	cbnz	r0, da5e8 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da5cc:	f7ff f846 	bl	d965c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da5d0:	2801      	cmp	r0, #1
   da5d2:	d10b      	bne.n	da5ec <_ZN9TimeClass7isValidEv+0x2c>
   da5d4:	4620      	mov	r0, r4
   da5d6:	f7ff f871 	bl	d96bc <system_thread_get_state>
   da5da:	b938      	cbnz	r0, da5ec <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   da5dc:	f7ff fef0 	bl	da3c0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da5e0:	b930      	cbnz	r0, da5f0 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   da5e2:	f7ff f8e7 	bl	d97b4 <spark_process>
   da5e6:	e7f9      	b.n	da5dc <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   da5e8:	2001      	movs	r0, #1
   da5ea:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   da5ec:	2000      	movs	r0, #0
   da5ee:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   da5f0:	f7ff fee6 	bl	da3c0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   da5f4:	2000      	movs	r0, #0
   da5f6:	f7fe feb7 	bl	d9368 <HAL_RTC_Time_Is_Valid>
   da5fa:	3000      	adds	r0, #0
   da5fc:	bf18      	it	ne
   da5fe:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   da600:	bd10      	pop	{r4, pc}

000da602 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   da602:	b508      	push	{r3, lr}
    (void)isValid();
   da604:	f7ff ffdc 	bl	da5c0 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   da608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   da60c:	f7fe bea4 	b.w	d9358 <HAL_RTC_Get_UnixTime>

000da610 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   da610:	b508      	push	{r3, lr}
	return hour(now());
   da612:	f7ff fff6 	bl	da602 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   da616:	f7ff fea1 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   da61a:	4b01      	ldr	r3, [pc, #4]	; (da620 <_ZN9TimeClass4hourEv+0x10>)
   da61c:	6898      	ldr	r0, [r3, #8]
   da61e:	bd08      	pop	{r3, pc}
   da620:	2003e1e4 	.word	0x2003e1e4

000da624 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   da624:	b508      	push	{r3, lr}
	return minute(now());
   da626:	f7ff ffec 	bl	da602 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   da62a:	f7ff fe97 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   da62e:	4b01      	ldr	r3, [pc, #4]	; (da634 <_ZN9TimeClass6minuteEv+0x10>)
   da630:	6858      	ldr	r0, [r3, #4]
   da632:	bd08      	pop	{r3, pc}
   da634:	2003e1e4 	.word	0x2003e1e4

000da638 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   da638:	b508      	push	{r3, lr}
	return second(now());
   da63a:	f7ff ffe2 	bl	da602 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   da63e:	f7ff fe8d 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   da642:	4b01      	ldr	r3, [pc, #4]	; (da648 <_ZN9TimeClass6secondEv+0x10>)
   da644:	6818      	ldr	r0, [r3, #0]
   da646:	bd08      	pop	{r3, pc}
   da648:	2003e1e4 	.word	0x2003e1e4

000da64c <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   da64c:	b508      	push	{r3, lr}
	return day(now());
   da64e:	f7ff ffd8 	bl	da602 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   da652:	f7ff fe83 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   da656:	4b01      	ldr	r3, [pc, #4]	; (da65c <_ZN9TimeClass3dayEv+0x10>)
   da658:	68d8      	ldr	r0, [r3, #12]
   da65a:	bd08      	pop	{r3, pc}
   da65c:	2003e1e4 	.word	0x2003e1e4

000da660 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   da660:	b508      	push	{r3, lr}
	return month(now());
   da662:	f7ff ffce 	bl	da602 <_ZN9TimeClass3nowEv>
}
   da666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   da66a:	f7ff bee1 	b.w	da430 <_ZN9TimeClass5monthEl>
	...

000da670 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   da670:	b508      	push	{r3, lr}
	return year(now());
   da672:	f7ff ffc6 	bl	da602 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   da676:	f7ff fe71 	bl	da35c <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   da67a:	4b01      	ldr	r3, [pc, #4]	; (da680 <_ZN9TimeClass4yearEv+0x10>)
   da67c:	6958      	ldr	r0, [r3, #20]
   da67e:	bd08      	pop	{r3, pc}
   da680:	2003e1e4 	.word	0x2003e1e4

000da684 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da684:	4b02      	ldr	r3, [pc, #8]	; (da690 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da686:	681a      	ldr	r2, [r3, #0]
   da688:	4b02      	ldr	r3, [pc, #8]	; (da694 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da68a:	601a      	str	r2, [r3, #0]
   da68c:	4770      	bx	lr
   da68e:	bf00      	nop
   da690:	2003bdbc 	.word	0x2003bdbc
   da694:	2003e208 	.word	0x2003e208

000da698 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   da698:	2100      	movs	r1, #0
   da69a:	f7fe bfef 	b.w	d967c <system_delay_ms>

000da69e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   da69e:	b510      	push	{r4, lr}
   da6a0:	4604      	mov	r4, r0
   da6a2:	f7f9 fe1c 	bl	d42de <_ZNSt14_Function_baseD1Ev>
   da6a6:	4620      	mov	r0, r4
   da6a8:	bd10      	pop	{r4, pc}

000da6aa <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   da6aa:	b513      	push	{r0, r1, r4, lr}
   da6ac:	460b      	mov	r3, r1
   da6ae:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da6b0:	c803      	ldmia	r0, {r0, r1}
   da6b2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   da6b6:	e893 0003 	ldmia.w	r3, {r0, r1}
   da6ba:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   da6be:	e89d 0003 	ldmia.w	sp, {r0, r1}
   da6c2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   da6c6:	b002      	add	sp, #8
   da6c8:	bd10      	pop	{r4, pc}
	...

000da6cc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   da6cc:	4803      	ldr	r0, [pc, #12]	; (da6dc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   da6ce:	4a04      	ldr	r2, [pc, #16]	; (da6e0 <_GLOBAL__sub_I_RGB+0x14>)
   da6d0:	4904      	ldr	r1, [pc, #16]	; (da6e4 <_GLOBAL__sub_I_RGB+0x18>)
   da6d2:	2300      	movs	r3, #0
   da6d4:	6083      	str	r3, [r0, #8]
   da6d6:	f001 b84f 	b.w	db778 <__aeabi_atexit>
   da6da:	bf00      	nop
   da6dc:	2003e21c 	.word	0x2003e21c
   da6e0:	2003be74 	.word	0x2003be74
   da6e4:	000da69f 	.word	0x000da69f

000da6e8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   da6e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da6ea:	4b0c      	ldr	r3, [pc, #48]	; (da71c <serialEventRun+0x34>)
   da6ec:	b133      	cbz	r3, da6fc <serialEventRun+0x14>
   da6ee:	f000 fc1b 	bl	daf28 <_Z16_fetch_usbserialv>
   da6f2:	6803      	ldr	r3, [r0, #0]
   da6f4:	691b      	ldr	r3, [r3, #16]
   da6f6:	4798      	blx	r3
   da6f8:	2800      	cmp	r0, #0
   da6fa:	dc09      	bgt.n	da710 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   da6fc:	4b08      	ldr	r3, [pc, #32]	; (da720 <serialEventRun+0x38>)
   da6fe:	b163      	cbz	r3, da71a <serialEventRun+0x32>
   da700:	f000 fd48 	bl	db194 <_Z22__fetch_global_Serial1v>
   da704:	6803      	ldr	r3, [r0, #0]
   da706:	691b      	ldr	r3, [r3, #16]
   da708:	4798      	blx	r3
   da70a:	2800      	cmp	r0, #0
   da70c:	dc03      	bgt.n	da716 <serialEventRun+0x2e>
   da70e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   da710:	f3af 8000 	nop.w
   da714:	e7f2      	b.n	da6fc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   da716:	f3af 8000 	nop.w
   da71a:	bd08      	pop	{r3, pc}
	...

000da724 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   da724:	b508      	push	{r3, lr}
	serialEventRun();
   da726:	f7ff ffdf 	bl	da6e8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da72a:	f7fe fe0d 	bl	d9348 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da72e:	4b01      	ldr	r3, [pc, #4]	; (da734 <_post_loop+0x10>)
   da730:	6018      	str	r0, [r3, #0]
   da732:	bd08      	pop	{r3, pc}
   da734:	2003e608 	.word	0x2003e608

000da738 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da738:	4802      	ldr	r0, [pc, #8]	; (da744 <_Z33system_initialize_user_backup_ramv+0xc>)
   da73a:	4a03      	ldr	r2, [pc, #12]	; (da748 <_Z33system_initialize_user_backup_ramv+0x10>)
   da73c:	4903      	ldr	r1, [pc, #12]	; (da74c <_Z33system_initialize_user_backup_ramv+0x14>)
   da73e:	1a12      	subs	r2, r2, r0
   da740:	f003 bfa3 	b.w	de68a <memcpy>
   da744:	2003f400 	.word	0x2003f400
   da748:	2003f404 	.word	0x2003f404
   da74c:	000e0f98 	.word	0x000e0f98

000da750 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da750:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da752:	2300      	movs	r3, #0
   da754:	9300      	str	r3, [sp, #0]
   da756:	461a      	mov	r2, r3
   da758:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da75c:	f7fe ffc8 	bl	d96f0 <system_ctrl_set_result>
}
   da760:	b003      	add	sp, #12
   da762:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da768 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   da768:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da76a:	8843      	ldrh	r3, [r0, #2]
   da76c:	2b0a      	cmp	r3, #10
   da76e:	d008      	beq.n	da782 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da770:	2b50      	cmp	r3, #80	; 0x50
   da772:	d109      	bne.n	da788 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   da774:	4b09      	ldr	r3, [pc, #36]	; (da79c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da776:	681b      	ldr	r3, [r3, #0]
   da778:	b13b      	cbz	r3, da78a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   da77a:	b003      	add	sp, #12
   da77c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   da780:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   da782:	f7ff ffe5 	bl	da750 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   da786:	e006      	b.n	da796 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da788:	2300      	movs	r3, #0
   da78a:	9300      	str	r3, [sp, #0]
   da78c:	461a      	mov	r2, r3
   da78e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da792:	f7fe ffad 	bl	d96f0 <system_ctrl_set_result>
        break;
    }
}
   da796:	b003      	add	sp, #12
   da798:	f85d fb04 	ldr.w	pc, [sp], #4
   da79c:	2003e22c 	.word	0x2003e22c

000da7a0 <module_user_init_hook>:

void module_user_init_hook()
{
   da7a0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da7a2:	4c10      	ldr	r4, [pc, #64]	; (da7e4 <module_user_init_hook+0x44>)
   da7a4:	4d10      	ldr	r5, [pc, #64]	; (da7e8 <module_user_init_hook+0x48>)
   da7a6:	6823      	ldr	r3, [r4, #0]
   da7a8:	42ab      	cmp	r3, r5
   da7aa:	4b10      	ldr	r3, [pc, #64]	; (da7ec <module_user_init_hook+0x4c>)
   da7ac:	bf0c      	ite	eq
   da7ae:	2201      	moveq	r2, #1
   da7b0:	2200      	movne	r2, #0
   da7b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da7b4:	d002      	beq.n	da7bc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   da7b6:	f7ff ffbf 	bl	da738 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   da7ba:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da7bc:	f7fe fdb4 	bl	d9328 <HAL_RNG_GetRandomNumber>
   da7c0:	4604      	mov	r4, r0
    srand(seed);
   da7c2:	f004 f9c3 	bl	deb4c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da7c6:	4b0a      	ldr	r3, [pc, #40]	; (da7f0 <module_user_init_hook+0x50>)
   da7c8:	b113      	cbz	r3, da7d0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   da7ca:	4620      	mov	r0, r4
   da7cc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da7d0:	2100      	movs	r1, #0
   da7d2:	4807      	ldr	r0, [pc, #28]	; (da7f0 <module_user_init_hook+0x50>)
   da7d4:	f7ff f816 	bl	d9804 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da7d8:	2100      	movs	r1, #0
   da7da:	4806      	ldr	r0, [pc, #24]	; (da7f4 <module_user_init_hook+0x54>)
}
   da7dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da7e0:	f7fe bf7c 	b.w	d96dc <system_ctrl_set_app_request_handler>
   da7e4:	2003f400 	.word	0x2003f400
   da7e8:	9a271c1e 	.word	0x9a271c1e
   da7ec:	2003e230 	.word	0x2003e230
   da7f0:	00000000 	.word	0x00000000
   da7f4:	000da769 	.word	0x000da769

000da7f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da7f8:	4770      	bx	lr

000da7fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   da7fa:	2000      	movs	r0, #0
   da7fc:	4770      	bx	lr

000da7fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da7fe:	b510      	push	{r4, lr}
   da800:	2110      	movs	r1, #16
   da802:	4604      	mov	r4, r0
   da804:	f000 ffc6 	bl	db794 <_ZdlPvj>
   da808:	4620      	mov	r0, r4
   da80a:	bd10      	pop	{r4, pc}

000da80c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   da80c:	b508      	push	{r3, lr}
      { delete this; }
   da80e:	b108      	cbz	r0, da814 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   da810:	f7ff fff5 	bl	da7fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   da814:	bd08      	pop	{r3, pc}

000da816 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   da816:	2200      	movs	r2, #0
   da818:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   da81a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   da81c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   da820:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   da822:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   da826:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   da828:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da82a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   da82c:	680c      	ldr	r4, [r1, #0]
   da82e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da830:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   da832:	bd10      	pop	{r4, pc}

000da834 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   da834:	b510      	push	{r4, lr}
   da836:	4604      	mov	r4, r0
    free((void*)msg_);
   da838:	6800      	ldr	r0, [r0, #0]
   da83a:	f7fe fff3 	bl	d9824 <free>
}
   da83e:	4620      	mov	r0, r4
   da840:	bd10      	pop	{r4, pc}

000da842 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   da842:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   da844:	68c4      	ldr	r4, [r0, #12]
   da846:	b1f4      	cbz	r4, da886 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   da848:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   da84a:	2b02      	cmp	r3, #2
   da84c:	d103      	bne.n	da856 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   da84e:	f104 000c 	add.w	r0, r4, #12
   da852:	f7ff ffef 	bl	da834 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   da856:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   da858:	b135      	cbz	r5, da868 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   da85a:	4628      	mov	r0, r5
   da85c:	f7f9 fd3f 	bl	d42de <_ZNSt14_Function_baseD1Ev>
   da860:	2110      	movs	r1, #16
   da862:	4628      	mov	r0, r5
   da864:	f000 ff96 	bl	db794 <_ZdlPvj>
   da868:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   da86a:	b135      	cbz	r5, da87a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   da86c:	4628      	mov	r0, r5
   da86e:	f7f9 fd36 	bl	d42de <_ZNSt14_Function_baseD1Ev>
   da872:	2110      	movs	r1, #16
   da874:	4628      	mov	r0, r5
   da876:	f000 ff8d 	bl	db794 <_ZdlPvj>
   da87a:	4620      	mov	r0, r4
   da87c:	2114      	movs	r1, #20
   da87e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da882:	f000 bf87 	b.w	db794 <_ZdlPvj>
   da886:	bd38      	pop	{r3, r4, r5, pc}

000da888 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   da888:	b513      	push	{r0, r1, r4, lr}
   da88a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   da88c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   da890:	2300      	movs	r3, #0
   da892:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   da894:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   da896:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   da898:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da89a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   da89c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   da89e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da8a0:	f7f9 ff7e 	bl	d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da8a4:	4620      	mov	r0, r4
   da8a6:	b002      	add	sp, #8
   da8a8:	bd10      	pop	{r4, pc}

000da8aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   da8aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   da8ac:	460c      	mov	r4, r1
   da8ae:	ad02      	add	r5, sp, #8
   da8b0:	f854 3b04 	ldr.w	r3, [r4], #4
   da8b4:	f845 3d08 	str.w	r3, [r5, #-8]!
   da8b8:	4606      	mov	r6, r0
   da8ba:	460f      	mov	r7, r1
   da8bc:	a801      	add	r0, sp, #4
   da8be:	4621      	mov	r1, r4
   da8c0:	f7ff fbc6 	bl	da050 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   da8c4:	4629      	mov	r1, r5
   da8c6:	4630      	mov	r0, r6
   da8c8:	f7ff ffde 	bl	da888 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da8cc:	a801      	add	r0, sp, #4
   da8ce:	f7f9 ff67 	bl	d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da8d2:	4620      	mov	r0, r4
   da8d4:	f7f9 ff64 	bl	d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   da8d8:	4638      	mov	r0, r7
   da8da:	2108      	movs	r1, #8
   da8dc:	f000 ff5a 	bl	db794 <_ZdlPvj>
        return p;
    }
   da8e0:	4630      	mov	r0, r6
   da8e2:	b003      	add	sp, #12
   da8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000da8e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   da8e8:	b538      	push	{r3, r4, r5, lr}
   da8ea:	2300      	movs	r3, #0
   da8ec:	4604      	mov	r4, r0
   da8ee:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da8f0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   da8f2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da8f4:	f7f9 fbd1 	bl	d409a <_Znwj>
   da8f8:	b128      	cbz	r0, da906 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   da8fa:	2301      	movs	r3, #1
   da8fc:	6043      	str	r3, [r0, #4]
   da8fe:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   da900:	4b02      	ldr	r3, [pc, #8]	; (da90c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   da902:	6003      	str	r3, [r0, #0]
   da904:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   da906:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   da908:	4620      	mov	r0, r4
   da90a:	bd38      	pop	{r3, r4, r5, pc}
   da90c:	000e063c 	.word	0x000e063c

000da910 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   da910:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   da912:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   da914:	b90a      	cbnz	r2, da91a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   da916:	f001 f8e1 	bl	dbadc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da91a:	68c3      	ldr	r3, [r0, #12]
    }
   da91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da920:	4718      	bx	r3

000da922 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da922:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   da924:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   da926:	f100 0110 	add.w	r1, r0, #16
   da92a:	f7ff fff1 	bl	da910 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   da92e:	bd08      	pop	{r3, pc}

000da930 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   da930:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   da932:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   da934:	b90a      	cbnz	r2, da93a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   da936:	f001 f8d1 	bl	dbadc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da93a:	68c3      	ldr	r3, [r0, #12]
    }
   da93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da940:	4718      	bx	r3

000da942 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da942:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   da944:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   da946:	f100 0110 	add.w	r1, r0, #16
   da94a:	f7ff fff1 	bl	da930 <_ZNKSt8functionIFvRKbEEclES1_>
   da94e:	bd08      	pop	{r3, pc}

000da950 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   da950:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   da952:	2300      	movs	r3, #0
   da954:	6083      	str	r3, [r0, #8]
   da956:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   da958:	4604      	mov	r4, r0
   da95a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   da95c:	b12b      	cbz	r3, da96a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da95e:	2202      	movs	r2, #2
   da960:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da962:	68eb      	ldr	r3, [r5, #12]
   da964:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da966:	68ab      	ldr	r3, [r5, #8]
   da968:	60a3      	str	r3, [r4, #8]
	}
    }
   da96a:	4620      	mov	r0, r4
   da96c:	bd38      	pop	{r3, r4, r5, pc}
	...

000da970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   da970:	b5f0      	push	{r4, r5, r6, r7, lr}
   da972:	b089      	sub	sp, #36	; 0x24
   da974:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   da976:	4668      	mov	r0, sp
   da978:	f7ff ff4d 	bl	da816 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   da97c:	2300      	movs	r3, #0
   da97e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   da982:	f04f 0202 	mov.w	r2, #2
   da986:	e8d4 3f4f 	ldrexb	r3, [r4]
   da98a:	2b00      	cmp	r3, #0
   da98c:	d103      	bne.n	da996 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   da98e:	e8c4 2f41 	strexb	r1, r2, [r4]
   da992:	2900      	cmp	r1, #0
   da994:	d1f7      	bne.n	da986 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   da996:	d002      	beq.n	da99e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   da998:	f88d 3008 	strb.w	r3, [sp, #8]
   da99c:	e063      	b.n	daa66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   da99e:	f114 050c 	adds.w	r5, r4, #12
   da9a2:	d003      	beq.n	da9ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   da9a4:	4669      	mov	r1, sp
   da9a6:	4628      	mov	r0, r5
   da9a8:	f7ff ff35 	bl	da816 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   da9ac:	f3bf 8f5f 	dmb	sy
   da9b0:	2301      	movs	r3, #1
   da9b2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   da9b4:	2000      	movs	r0, #0
   da9b6:	f104 0308 	add.w	r3, r4, #8
   da9ba:	f3bf 8f5f 	dmb	sy
   da9be:	e853 6f00 	ldrex	r6, [r3]
   da9c2:	e843 0200 	strex	r2, r0, [r3]
   da9c6:	2a00      	cmp	r2, #0
   da9c8:	d1f9      	bne.n	da9be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   da9ca:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   da9ce:	2e00      	cmp	r6, #0
   da9d0:	d049      	beq.n	daa66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   da9d2:	f7fe fe63 	bl	d969c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   da9d6:	b120      	cbz	r0, da9e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   da9d8:	4629      	mov	r1, r5
   da9da:	4630      	mov	r0, r6
   da9dc:	f7ff ff98 	bl	da910 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   da9e0:	e03a      	b.n	daa58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   da9e2:	4631      	mov	r1, r6
   da9e4:	a802      	add	r0, sp, #8
   da9e6:	f7ff ffb3 	bl	da950 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   da9ea:	68e0      	ldr	r0, [r4, #12]
   da9ec:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   da9f0:	b108      	cbz	r0, da9f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   da9f2:	f004 f8f3 	bl	debdc <strdup>
   da9f6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   da9f8:	2010      	movs	r0, #16
   da9fa:	f8ad 501c 	strh.w	r5, [sp, #28]
   da9fe:	f7f9 fb4c 	bl	d409a <_Znwj>
   daa02:	4605      	mov	r5, r0
   daa04:	b1e8      	cbz	r0, daa42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   daa06:	2700      	movs	r7, #0
   daa08:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daa0a:	2018      	movs	r0, #24
   daa0c:	f7f9 fb45 	bl	d409a <_Znwj>
   daa10:	4604      	mov	r4, r0
   daa12:	b188      	cbz	r0, daa38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   daa14:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   daa16:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   daa18:	a802      	add	r0, sp, #8
   daa1a:	f7ff fe46 	bl	da6aa <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daa1e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   daa20:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   daa22:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daa24:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   daa26:	9204      	str	r2, [sp, #16]
   daa28:	a906      	add	r1, sp, #24
   daa2a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   daa2c:	60e3      	str	r3, [r4, #12]
   daa2e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   daa32:	9205      	str	r2, [sp, #20]
   daa34:	f7ff feef 	bl	da816 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   daa38:	4b0d      	ldr	r3, [pc, #52]	; (daa70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   daa3a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   daa3c:	4b0d      	ldr	r3, [pc, #52]	; (daa74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daa3e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   daa40:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   daa42:	a806      	add	r0, sp, #24
   daa44:	f7ff fef6 	bl	da834 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   daa48:	a802      	add	r0, sp, #8
   daa4a:	f7f9 fc48 	bl	d42de <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   daa4e:	2200      	movs	r2, #0
   daa50:	4629      	mov	r1, r5
   daa52:	4809      	ldr	r0, [pc, #36]	; (daa78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   daa54:	f7fe fe2a 	bl	d96ac <application_thread_invoke>
   daa58:	4630      	mov	r0, r6
   daa5a:	f7f9 fc40 	bl	d42de <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   daa5e:	2110      	movs	r1, #16
   daa60:	4630      	mov	r0, r6
   daa62:	f000 fe97 	bl	db794 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   daa66:	4668      	mov	r0, sp
   daa68:	f7ff fee4 	bl	da834 <_ZN8particle5ErrorD1Ev>
    }
   daa6c:	b009      	add	sp, #36	; 0x24
   daa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   daa70:	000da923 	.word	0x000da923
   daa74:	000dab99 	.word	0x000dab99
   daa78:	000db1e1 	.word	0x000db1e1

000daa7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   daa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daa80:	b08b      	sub	sp, #44	; 0x2c
   daa82:	4606      	mov	r6, r0
   daa84:	460f      	mov	r7, r1
   daa86:	4690      	mov	r8, r2
   daa88:	4699      	mov	r9, r3
   daa8a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   daa8e:	f7fe fea1 	bl	d97d4 <spark_cloud_flag_connected>
   daa92:	ad07      	add	r5, sp, #28
    if (!connected()) {
   daa94:	4683      	mov	fp, r0
   daa96:	bb30      	cbnz	r0, daae6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   daa98:	f64f 732e 	movw	r3, #65326	; 0xff2e
   daa9c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   daa9e:	a905      	add	r1, sp, #20
   daaa0:	4628      	mov	r0, r5
   daaa2:	f8ad 3018 	strh.w	r3, [sp, #24]
   daaa6:	f7ff feb6 	bl	da816 <_ZN8particle5ErrorC1EOS0_>
   daaaa:	2014      	movs	r0, #20
   daaac:	f7f9 faf5 	bl	d409a <_Znwj>
   daab0:	4604      	mov	r4, r0
   daab2:	b158      	cbz	r0, daacc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   daab4:	2302      	movs	r3, #2
   daab6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   daab8:	2301      	movs	r3, #1
   daaba:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   daabc:	f8c0 b004 	str.w	fp, [r0, #4]
   daac0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   daac4:	4629      	mov	r1, r5
   daac6:	300c      	adds	r0, #12
   daac8:	f7ff fea5 	bl	da816 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   daacc:	4630      	mov	r0, r6
   daace:	4621      	mov	r1, r4
   daad0:	f840 4b04 	str.w	r4, [r0], #4
   daad4:	f7ff ff08 	bl	da8e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   daad8:	4628      	mov	r0, r5
   daada:	f7ff feab 	bl	da834 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   daade:	a805      	add	r0, sp, #20
   daae0:	f7ff fea8 	bl	da834 <_ZN8particle5ErrorD1Ev>
   daae4:	e052      	b.n	dab8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   daae6:	2400      	movs	r4, #0
   daae8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   daaea:	2014      	movs	r0, #20
   daaec:	606c      	str	r4, [r5, #4]
   daaee:	60ac      	str	r4, [r5, #8]
   daaf0:	9307      	str	r3, [sp, #28]
   daaf2:	f7f9 fad2 	bl	d409a <_Znwj>
   daaf6:	4601      	mov	r1, r0
   daaf8:	b118      	cbz	r0, dab02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   daafa:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   daafc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   daafe:	6044      	str	r4, [r0, #4]
   dab00:	6084      	str	r4, [r0, #8]
   dab02:	a804      	add	r0, sp, #16
   dab04:	9103      	str	r1, [sp, #12]
   dab06:	f7ff feef 	bl	da8e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   dab0a:	4b22      	ldr	r3, [pc, #136]	; (dab94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   dab0c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dab0e:	2008      	movs	r0, #8
   dab10:	f7f9 fac3 	bl	d409a <_Znwj>
   dab14:	4604      	mov	r4, r0
   dab16:	b128      	cbz	r0, dab24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dab18:	9b03      	ldr	r3, [sp, #12]
   dab1a:	f840 3b04 	str.w	r3, [r0], #4
   dab1e:	a904      	add	r1, sp, #16
   dab20:	f7ff fa96 	bl	da050 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dab24:	9500      	str	r5, [sp, #0]
   dab26:	fa5f f38a 	uxtb.w	r3, sl
   dab2a:	464a      	mov	r2, r9
   dab2c:	4641      	mov	r1, r8
   dab2e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   dab30:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dab32:	f7fe fe57 	bl	d97e4 <spark_send_event>
   dab36:	b920      	cbnz	r0, dab42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   dab38:	9b03      	ldr	r3, [sp, #12]
   dab3a:	785b      	ldrb	r3, [r3, #1]
   dab3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dab40:	b183      	cbz	r3, dab64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   dab42:	9b03      	ldr	r3, [sp, #12]
   dab44:	9305      	str	r3, [sp, #20]
   dab46:	a904      	add	r1, sp, #16
   dab48:	a806      	add	r0, sp, #24
   dab4a:	f7ff fa81 	bl	da050 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   dab4e:	a905      	add	r1, sp, #20
   dab50:	4630      	mov	r0, r6
   dab52:	f7ff fe99 	bl	da888 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dab56:	a806      	add	r0, sp, #24
   dab58:	f7f9 fe22 	bl	d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dab5c:	a804      	add	r0, sp, #16
   dab5e:	f7f9 fe1f 	bl	d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dab62:	e013      	b.n	dab8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   dab64:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   dab68:	a905      	add	r1, sp, #20
   dab6a:	a803      	add	r0, sp, #12
   dab6c:	9205      	str	r2, [sp, #20]
   dab6e:	f8ad 3018 	strh.w	r3, [sp, #24]
   dab72:	f7ff fefd 	bl	da970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dab76:	a805      	add	r0, sp, #20
   dab78:	f7ff fe5c 	bl	da834 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dab7c:	a805      	add	r0, sp, #20
   dab7e:	9909      	ldr	r1, [sp, #36]	; 0x24
   dab80:	f7ff fe93 	bl	da8aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   dab84:	a806      	add	r0, sp, #24
   dab86:	f7f9 fe0b 	bl	d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dab8a:	e7da      	b.n	dab42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   dab8c:	4630      	mov	r0, r6
   dab8e:	b00b      	add	sp, #44	; 0x2c
   dab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dab94:	000dad09 	.word	0x000dad09

000dab98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dab98:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dab9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dab9c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dab9e:	d006      	beq.n	dabae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   daba0:	2a03      	cmp	r2, #3
   daba2:	d017      	beq.n	dabd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   daba4:	2a01      	cmp	r2, #1
   daba6:	d122      	bne.n	dabee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   daba8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dabaa:	6003      	str	r3, [r0, #0]
	      break;
   dabac:	e01f      	b.n	dabee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dabae:	2018      	movs	r0, #24
   dabb0:	680e      	ldr	r6, [r1, #0]
   dabb2:	f7f9 fa72 	bl	d409a <_Znwj>
   dabb6:	4605      	mov	r5, r0
   dabb8:	b150      	cbz	r0, dabd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dabba:	4631      	mov	r1, r6
   dabbc:	f7ff fec8 	bl	da950 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dabc0:	6930      	ldr	r0, [r6, #16]
   dabc2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dabc6:	b108      	cbz	r0, dabcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   dabc8:	f004 f808 	bl	debdc <strdup>
   dabcc:	6128      	str	r0, [r5, #16]
   dabce:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dabd0:	6025      	str	r5, [r4, #0]
   dabd2:	e00c      	b.n	dabee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dabd4:	6804      	ldr	r4, [r0, #0]
   dabd6:	b154      	cbz	r4, dabee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   dabd8:	f104 0010 	add.w	r0, r4, #16
   dabdc:	f7ff fe2a 	bl	da834 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dabe0:	4620      	mov	r0, r4
   dabe2:	f7f9 fb7c 	bl	d42de <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dabe6:	2118      	movs	r1, #24
   dabe8:	4620      	mov	r0, r4
   dabea:	f000 fdd3 	bl	db794 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dabee:	2000      	movs	r0, #0
   dabf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dabf2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dabf2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dabf4:	2300      	movs	r3, #0
   dabf6:	6083      	str	r3, [r0, #8]
   dabf8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dabfa:	4604      	mov	r4, r0
   dabfc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dabfe:	b12b      	cbz	r3, dac0c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dac00:	2202      	movs	r2, #2
   dac02:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dac04:	68eb      	ldr	r3, [r5, #12]
   dac06:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dac08:	68ab      	ldr	r3, [r5, #8]
   dac0a:	60a3      	str	r3, [r4, #8]
	}
    }
   dac0c:	4620      	mov	r0, r4
   dac0e:	bd38      	pop	{r3, r4, r5, pc}

000dac10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dac10:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dac12:	b570      	push	{r4, r5, r6, lr}
   dac14:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dac16:	d006      	beq.n	dac26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   dac18:	2a03      	cmp	r2, #3
   dac1a:	d011      	beq.n	dac40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   dac1c:	2a01      	cmp	r2, #1
   dac1e:	d118      	bne.n	dac52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dac20:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dac22:	6003      	str	r3, [r0, #0]
	      break;
   dac24:	e015      	b.n	dac52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dac26:	2014      	movs	r0, #20
   dac28:	680e      	ldr	r6, [r1, #0]
   dac2a:	f7f9 fa36 	bl	d409a <_Znwj>
   dac2e:	4605      	mov	r5, r0
   dac30:	b120      	cbz	r0, dac3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dac32:	4631      	mov	r1, r6
   dac34:	f7ff ffdd 	bl	dabf2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dac38:	7c33      	ldrb	r3, [r6, #16]
   dac3a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dac3c:	6025      	str	r5, [r4, #0]
   dac3e:	e008      	b.n	dac52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dac40:	6804      	ldr	r4, [r0, #0]
   dac42:	b134      	cbz	r4, dac52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dac44:	4620      	mov	r0, r4
   dac46:	f7f9 fb4a 	bl	d42de <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dac4a:	2114      	movs	r1, #20
   dac4c:	4620      	mov	r0, r4
   dac4e:	f000 fda1 	bl	db794 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dac52:	2000      	movs	r0, #0
   dac54:	bd70      	pop	{r4, r5, r6, pc}
	...

000dac58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   dac58:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dac5a:	2300      	movs	r3, #0
   dac5c:	b087      	sub	sp, #28
   dac5e:	460c      	mov	r4, r1
   dac60:	f3bf 8f5f 	dmb	sy
   dac64:	e850 6f00 	ldrex	r6, [r0]
   dac68:	e840 3200 	strex	r2, r3, [r0]
   dac6c:	2a00      	cmp	r2, #0
   dac6e:	d1f9      	bne.n	dac64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   dac70:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dac74:	2e00      	cmp	r6, #0
   dac76:	d03f      	beq.n	dacf8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dac78:	4618      	mov	r0, r3
   dac7a:	f7fe fd0f 	bl	d969c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dac7e:	4607      	mov	r7, r0
   dac80:	b120      	cbz	r0, dac8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dac82:	4621      	mov	r1, r4
   dac84:	4630      	mov	r0, r6
   dac86:	f7ff fe53 	bl	da930 <_ZNKSt8functionIFvRKbEEclES1_>
   dac8a:	e02e      	b.n	dacea <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dac8c:	4631      	mov	r1, r6
   dac8e:	a801      	add	r0, sp, #4
   dac90:	f7ff ffaf 	bl	dabf2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dac94:	7823      	ldrb	r3, [r4, #0]
   dac96:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dac9a:	2010      	movs	r0, #16
   dac9c:	f7f9 f9fd 	bl	d409a <_Znwj>
   daca0:	4605      	mov	r5, r0
   daca2:	b1d0      	cbz	r0, dacda <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   daca4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daca6:	2014      	movs	r0, #20
   daca8:	f7f9 f9f7 	bl	d409a <_Znwj>
   dacac:	4604      	mov	r4, r0
   dacae:	b178      	cbz	r0, dacd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dacb0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dacb2:	4601      	mov	r1, r0
   dacb4:	a801      	add	r0, sp, #4
   dacb6:	f7ff fcf8 	bl	da6aa <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dacba:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   dacbc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dacbe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dacc0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dacc2:	9203      	str	r2, [sp, #12]
   dacc4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dacc6:	60e3      	str	r3, [r4, #12]
   dacc8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   daccc:	9204      	str	r2, [sp, #16]
   dacce:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dacd0:	4b0a      	ldr	r3, [pc, #40]	; (dacfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   dacd2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dacd4:	4b0a      	ldr	r3, [pc, #40]	; (dad00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dacd6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dacd8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dacda:	a801      	add	r0, sp, #4
   dacdc:	f7f9 faff 	bl	d42de <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dace0:	2200      	movs	r2, #0
   dace2:	4629      	mov	r1, r5
   dace4:	4807      	ldr	r0, [pc, #28]	; (dad04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   dace6:	f7fe fce1 	bl	d96ac <application_thread_invoke>
   dacea:	4630      	mov	r0, r6
   dacec:	f7f9 faf7 	bl	d42de <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dacf0:	2110      	movs	r1, #16
   dacf2:	4630      	mov	r0, r6
   dacf4:	f000 fd4e 	bl	db794 <_ZdlPvj>
        }
    }
   dacf8:	b007      	add	sp, #28
   dacfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dacfc:	000da943 	.word	0x000da943
   dad00:	000dac11 	.word	0x000dac11
   dad04:	000db1e1 	.word	0x000db1e1

000dad08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dad08:	b530      	push	{r4, r5, lr}
   dad0a:	b085      	sub	sp, #20
   dad0c:	4604      	mov	r4, r0
   dad0e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dad10:	4668      	mov	r0, sp
   dad12:	4611      	mov	r1, r2
   dad14:	f7ff fdc9 	bl	da8aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dad18:	b17c      	cbz	r4, dad3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   dad1a:	b224      	sxth	r4, r4
   dad1c:	4628      	mov	r0, r5
   dad1e:	b10d      	cbz	r5, dad24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   dad20:	f003 ff5c 	bl	debdc <strdup>
   dad24:	9002      	str	r0, [sp, #8]
   dad26:	a902      	add	r1, sp, #8
   dad28:	4668      	mov	r0, sp
   dad2a:	f8ad 400c 	strh.w	r4, [sp, #12]
   dad2e:	f7ff fe1f 	bl	da970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dad32:	a802      	add	r0, sp, #8
   dad34:	f7ff fd7e 	bl	da834 <_ZN8particle5ErrorD1Ev>
   dad38:	e01d      	b.n	dad76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   dad3a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dad3c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dad40:	f04f 0201 	mov.w	r2, #1
   dad44:	e8d0 3f4f 	ldrexb	r3, [r0]
   dad48:	42a3      	cmp	r3, r4
   dad4a:	d103      	bne.n	dad54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   dad4c:	e8c0 2f41 	strexb	r1, r2, [r0]
   dad50:	2900      	cmp	r1, #0
   dad52:	d1f7      	bne.n	dad44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   dad54:	d002      	beq.n	dad5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   dad56:	f88d 3008 	strb.w	r3, [sp, #8]
   dad5a:	e00c      	b.n	dad76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   dad5c:	f110 010c 	adds.w	r1, r0, #12
   dad60:	f04f 0301 	mov.w	r3, #1
   dad64:	bf18      	it	ne
   dad66:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dad68:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   dad6c:	3004      	adds	r0, #4
   dad6e:	f800 3c03 	strb.w	r3, [r0, #-3]
   dad72:	f7ff ff71 	bl	dac58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   dad76:	a801      	add	r0, sp, #4
   dad78:	f7f9 fd12 	bl	d47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   dad7c:	b005      	add	sp, #20
   dad7e:	bd30      	pop	{r4, r5, pc}

000dad80 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dad80:	4770      	bx	lr

000dad82 <_ZN9IPAddressD0Ev>:
   dad82:	b510      	push	{r4, lr}
   dad84:	2118      	movs	r1, #24
   dad86:	4604      	mov	r4, r0
   dad88:	f000 fd04 	bl	db794 <_ZdlPvj>
   dad8c:	4620      	mov	r0, r4
   dad8e:	bd10      	pop	{r4, pc}

000dad90 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dad90:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dad92:	7d03      	ldrb	r3, [r0, #20]
   dad94:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dad96:	b08d      	sub	sp, #52	; 0x34
   dad98:	460e      	mov	r6, r1
   dad9a:	f100 0704 	add.w	r7, r0, #4
   dad9e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dada2:	d002      	beq.n	dadaa <_ZNK9IPAddress7printToER5Print+0x1a>
   dada4:	f100 0508 	add.w	r5, r0, #8
   dada8:	e018      	b.n	daddc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dadaa:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dadac:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dadae:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dadb2:	232f      	movs	r3, #47	; 0x2f
   dadb4:	462a      	mov	r2, r5
   dadb6:	200a      	movs	r0, #10
   dadb8:	f7fe fb4e 	bl	d9458 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   dadbc:	4628      	mov	r0, r5
   dadbe:	f004 fc3d 	bl	df63c <strlen>
   dadc2:	6833      	ldr	r3, [r6, #0]
   dadc4:	4602      	mov	r2, r0
   dadc6:	68db      	ldr	r3, [r3, #12]
   dadc8:	4629      	mov	r1, r5
   dadca:	4630      	mov	r0, r6
   dadcc:	4798      	blx	r3
   dadce:	e00f      	b.n	dadf0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   dadd0:	b124      	cbz	r4, daddc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   dadd2:	212e      	movs	r1, #46	; 0x2e
   dadd4:	4630      	mov	r0, r6
   dadd6:	f7ff f971 	bl	da0bc <_ZN5Print5printEc>
   dadda:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   daddc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dade0:	220a      	movs	r2, #10
   dade2:	4630      	mov	r0, r6
   dade4:	f7ff f989 	bl	da0fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dade8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dadea:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dadec:	d1f0      	bne.n	dadd0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dadee:	4620      	mov	r0, r4
    }
    return n;
}
   dadf0:	b00d      	add	sp, #52	; 0x34
   dadf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dadf4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   dadf4:	b510      	push	{r4, lr}
   dadf6:	4b05      	ldr	r3, [pc, #20]	; (dae0c <_ZN9IPAddressC1Ev+0x18>)
   dadf8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dadfa:	2211      	movs	r2, #17
   dadfc:	f840 3b04 	str.w	r3, [r0], #4
   dae00:	2100      	movs	r1, #0
   dae02:	f003 fc4d 	bl	de6a0 <memset>
{
    clear();
}
   dae06:	4620      	mov	r0, r4
   dae08:	bd10      	pop	{r4, pc}
   dae0a:	bf00      	nop
   dae0c:	000e0658 	.word	0x000e0658

000dae10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   dae10:	4603      	mov	r3, r0
   dae12:	4a07      	ldr	r2, [pc, #28]	; (dae30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dae14:	b510      	push	{r4, lr}
   dae16:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   dae1a:	f101 0210 	add.w	r2, r1, #16
   dae1e:	f851 4b04 	ldr.w	r4, [r1], #4
   dae22:	f843 4b04 	str.w	r4, [r3], #4
   dae26:	4291      	cmp	r1, r2
   dae28:	d1f9      	bne.n	dae1e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dae2a:	780a      	ldrb	r2, [r1, #0]
   dae2c:	701a      	strb	r2, [r3, #0]
}
   dae2e:	bd10      	pop	{r4, pc}
   dae30:	000e0658 	.word	0x000e0658

000dae34 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   dae34:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dae36:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dae3a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dae3e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dae42:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   dae46:	2304      	movs	r3, #4
   dae48:	6041      	str	r1, [r0, #4]
   dae4a:	7503      	strb	r3, [r0, #20]
   dae4c:	bd10      	pop	{r4, pc}

000dae4e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   dae4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dae50:	780d      	ldrb	r5, [r1, #0]
   dae52:	788b      	ldrb	r3, [r1, #2]
   dae54:	784a      	ldrb	r2, [r1, #1]
   dae56:	78c9      	ldrb	r1, [r1, #3]
   dae58:	9100      	str	r1, [sp, #0]
   dae5a:	4629      	mov	r1, r5
   dae5c:	f7ff ffea 	bl	dae34 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   dae60:	b003      	add	sp, #12
   dae62:	bd30      	pop	{r4, r5, pc}

000dae64 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dae64:	7441      	strb	r1, [r0, #17]
   dae66:	4770      	bx	lr

000dae68 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dae68:	4770      	bx	lr

000dae6a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   dae6a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dae6c:	2100      	movs	r1, #0
   dae6e:	7c00      	ldrb	r0, [r0, #16]
   dae70:	f7fe fbd2 	bl	d9618 <HAL_USB_USART_Receive_Data>
}
   dae74:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dae78:	bf28      	it	cs
   dae7a:	f04f 30ff 	movcs.w	r0, #4294967295
   dae7e:	bd08      	pop	{r3, pc}

000dae80 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   dae80:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dae82:	2101      	movs	r1, #1
   dae84:	7c00      	ldrb	r0, [r0, #16]
   dae86:	f7fe fbc7 	bl	d9618 <HAL_USB_USART_Receive_Data>
}
   dae8a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dae8e:	bf28      	it	cs
   dae90:	f04f 30ff 	movcs.w	r0, #4294967295
   dae94:	bd08      	pop	{r3, pc}

000dae96 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   dae96:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dae98:	7c00      	ldrb	r0, [r0, #16]
   dae9a:	f7fe fbb5 	bl	d9608 <HAL_USB_USART_Available_Data_For_Write>
}
   dae9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   daea2:	bd08      	pop	{r3, pc}

000daea4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   daea4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   daea6:	7c00      	ldrb	r0, [r0, #16]
   daea8:	f7fe fba6 	bl	d95f8 <HAL_USB_USART_Available_Data>
}
   daeac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   daeb0:	bd08      	pop	{r3, pc}

000daeb2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   daeb2:	7c00      	ldrb	r0, [r0, #16]
   daeb4:	f7fe bbc0 	b.w	d9638 <HAL_USB_USART_Flush_Data>

000daeb8 <_ZN9USBSerialD0Ev>:
   daeb8:	b510      	push	{r4, lr}
   daeba:	2114      	movs	r1, #20
   daebc:	4604      	mov	r4, r0
   daebe:	f000 fc69 	bl	db794 <_ZdlPvj>
   daec2:	4620      	mov	r0, r4
   daec4:	bd10      	pop	{r4, pc}

000daec6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   daec6:	b538      	push	{r3, r4, r5, lr}
   daec8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   daeca:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   daecc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   daece:	f7fe fb9b 	bl	d9608 <HAL_USB_USART_Available_Data_For_Write>
   daed2:	2800      	cmp	r0, #0
   daed4:	dc01      	bgt.n	daeda <_ZN9USBSerial5writeEh+0x14>
   daed6:	7c60      	ldrb	r0, [r4, #17]
   daed8:	b128      	cbz	r0, daee6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   daeda:	4629      	mov	r1, r5
   daedc:	7c20      	ldrb	r0, [r4, #16]
   daede:	f7fe fba3 	bl	d9628 <HAL_USB_USART_Send_Data>
   daee2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   daee6:	bd38      	pop	{r3, r4, r5, pc}

000daee8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   daee8:	b510      	push	{r4, lr}
   daeea:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   daeec:	2300      	movs	r3, #0
   daeee:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   daef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   daef4:	60a3      	str	r3, [r4, #8]
   daef6:	4b05      	ldr	r3, [pc, #20]	; (daf0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   daef8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   daefa:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   daefc:	4608      	mov	r0, r1
{
  _serial = serial;
   daefe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   daf00:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   daf02:	4611      	mov	r1, r2
   daf04:	f7fe fb68 	bl	d95d8 <HAL_USB_USART_Init>
}
   daf08:	4620      	mov	r0, r4
   daf0a:	bd10      	pop	{r4, pc}
   daf0c:	000e066c 	.word	0x000e066c

000daf10 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   daf10:	2200      	movs	r2, #0
   daf12:	7c00      	ldrb	r0, [r0, #16]
   daf14:	f7fe bb68 	b.w	d95e8 <HAL_USB_USART_Begin>

000daf18 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   daf18:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   daf1a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   daf1c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   daf1e:	2100      	movs	r1, #0
   daf20:	f003 fbbe 	bl	de6a0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   daf24:	4620      	mov	r0, r4
   daf26:	bd10      	pop	{r4, pc}

000daf28 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   daf28:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   daf2a:	4d0e      	ldr	r5, [pc, #56]	; (daf64 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   daf2c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   daf2e:	a801      	add	r0, sp, #4
   daf30:	f7ff fff2 	bl	daf18 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   daf34:	6829      	ldr	r1, [r5, #0]
   daf36:	f011 0401 	ands.w	r4, r1, #1
   daf3a:	d110      	bne.n	daf5e <_Z16_fetch_usbserialv+0x36>
   daf3c:	4628      	mov	r0, r5
   daf3e:	f7f9 f8b2 	bl	d40a6 <__cxa_guard_acquire>
   daf42:	b160      	cbz	r0, daf5e <_Z16_fetch_usbserialv+0x36>
   daf44:	aa01      	add	r2, sp, #4
   daf46:	4621      	mov	r1, r4
   daf48:	4807      	ldr	r0, [pc, #28]	; (daf68 <_Z16_fetch_usbserialv+0x40>)
   daf4a:	f7ff ffcd 	bl	daee8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   daf4e:	4628      	mov	r0, r5
   daf50:	f7f9 f8ae 	bl	d40b0 <__cxa_guard_release>
   daf54:	4a05      	ldr	r2, [pc, #20]	; (daf6c <_Z16_fetch_usbserialv+0x44>)
   daf56:	4906      	ldr	r1, [pc, #24]	; (daf70 <_Z16_fetch_usbserialv+0x48>)
   daf58:	4803      	ldr	r0, [pc, #12]	; (daf68 <_Z16_fetch_usbserialv+0x40>)
   daf5a:	f000 fc0d 	bl	db778 <__aeabi_atexit>
	return _usbserial;
}
   daf5e:	4802      	ldr	r0, [pc, #8]	; (daf68 <_Z16_fetch_usbserialv+0x40>)
   daf60:	b007      	add	sp, #28
   daf62:	bd30      	pop	{r4, r5, pc}
   daf64:	2003e234 	.word	0x2003e234
   daf68:	2003e238 	.word	0x2003e238
   daf6c:	2003be74 	.word	0x2003be74
   daf70:	000dae69 	.word	0x000dae69

000daf74 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   daf74:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   daf76:	b510      	push	{r4, lr}
   daf78:	b90a      	cbnz	r2, daf7e <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   daf7a:	f000 fdaf 	bl	dbadc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daf7e:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   daf80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   daf84:	4718      	bx	r3

000daf86 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   daf86:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   daf88:	2300      	movs	r3, #0
   daf8a:	6083      	str	r3, [r0, #8]
   daf8c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   daf8e:	4604      	mov	r4, r0
   daf90:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   daf92:	b12b      	cbz	r3, dafa0 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   daf94:	2202      	movs	r2, #2
   daf96:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   daf98:	68eb      	ldr	r3, [r5, #12]
   daf9a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   daf9c:	68ab      	ldr	r3, [r5, #8]
   daf9e:	60a3      	str	r3, [r4, #8]
	}
    }
   dafa0:	4620      	mov	r0, r4
   dafa2:	bd38      	pop	{r3, r4, r5, pc}

000dafa4 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   dafa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   dafa6:	4b0d      	ldr	r3, [pc, #52]	; (dafdc <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
   dafa8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   dafac:	4606      	mov	r6, r0
   dafae:	460f      	mov	r7, r1
   dafb0:	461c      	mov	r4, r3
    delete handlers[pin];
   dafb2:	b135      	cbz	r5, dafc2 <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dafb4:	4628      	mov	r0, r5
   dafb6:	f7f9 f992 	bl	d42de <_ZNSt14_Function_baseD1Ev>
   dafba:	2110      	movs	r1, #16
   dafbc:	4628      	mov	r0, r5
   dafbe:	f000 fbe9 	bl	db794 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   dafc2:	2010      	movs	r0, #16
   dafc4:	f7f9 f869 	bl	d409a <_Znwj>
   dafc8:	4605      	mov	r5, r0
   dafca:	b110      	cbz	r0, dafd2 <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
   dafcc:	4639      	mov	r1, r7
   dafce:	f7ff ffda 	bl	daf86 <_ZNSt8functionIFvvEEC1ERKS1_>
   dafd2:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
   dafd6:	4628      	mov	r0, r5
   dafd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dafda:	bf00      	nop
   dafdc:	2003e24c 	.word	0x2003e24c

000dafe0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   dafe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dafe2:	460c      	mov	r4, r1
   dafe4:	b085      	sub	sp, #20
   dafe6:	4605      	mov	r5, r0
   dafe8:	4617      	mov	r7, r2
   dafea:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   dafec:	f7fe f93c 	bl	d9268 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   daff0:	4621      	mov	r1, r4
   daff2:	4628      	mov	r0, r5
   daff4:	f7ff ffd6 	bl	dafa4 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   daff8:	4604      	mov	r4, r0
   daffa:	b1c8      	cbz	r0, db030 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
        HAL_InterruptExtraConfiguration extra = {0};
   daffc:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   daffe:	2304      	movs	r3, #4
  if (priority >= 0) {
   db000:	428e      	cmp	r6, r1
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
   db002:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db004:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   db008:	bfa5      	ittet	ge
   db00a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   db00e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   db012:	460b      	movlt	r3, r1
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   db014:	ab03      	addge	r3, sp, #12
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db016:	9300      	str	r3, [sp, #0]
   db018:	4602      	mov	r2, r0
   db01a:	463b      	mov	r3, r7
   db01c:	4907      	ldr	r1, [pc, #28]	; (db03c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x5c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   db01e:	bfa8      	it	ge
   db020:	f88d 600d 	strbge.w	r6, [sp, #13]
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db024:	4628      	mov	r0, r5
   db026:	f7fe f917 	bl	d9258 <HAL_Interrupts_Attach>
   db02a:	b108      	cbz	r0, db030 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
            return false;
   db02c:	2000      	movs	r0, #0
   db02e:	e002      	b.n	db036 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x56>
        }
    }
    return handler!=NULL;
   db030:	1c20      	adds	r0, r4, #0
   db032:	bf18      	it	ne
   db034:	2001      	movne	r0, #1
}
   db036:	b005      	add	sp, #20
   db038:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db03a:	bf00      	nop
   db03c:	000daf75 	.word	0x000daf75

000db040 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db040:	2200      	movs	r2, #0
   db042:	4611      	mov	r1, r2
   db044:	6840      	ldr	r0, [r0, #4]
   db046:	f7fe bb95 	b.w	d9774 <network_listening>

000db04a <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db04a:	2200      	movs	r2, #0
   db04c:	4611      	mov	r1, r2
   db04e:	6840      	ldr	r0, [r0, #4]
   db050:	f7fe bba0 	b.w	d9794 <network_get_listen_timeout>

000db054 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db054:	2200      	movs	r2, #0
   db056:	6840      	ldr	r0, [r0, #4]
   db058:	f7fe bb94 	b.w	d9784 <network_set_listen_timeout>

000db05c <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db05c:	2200      	movs	r2, #0
   db05e:	f081 0101 	eor.w	r1, r1, #1
   db062:	6840      	ldr	r0, [r0, #4]
   db064:	f7fe bb7e 	b.w	d9764 <network_listen>

000db068 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   db068:	2300      	movs	r3, #0
   db06a:	461a      	mov	r2, r3
   db06c:	4619      	mov	r1, r3
   db06e:	6840      	ldr	r0, [r0, #4]
   db070:	f7fe bb70 	b.w	d9754 <network_off>

000db074 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   db074:	2300      	movs	r3, #0
   db076:	461a      	mov	r2, r3
   db078:	4619      	mov	r1, r3
   db07a:	6840      	ldr	r0, [r0, #4]
   db07c:	f7fe bb62 	b.w	d9744 <network_on>

000db080 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db080:	2200      	movs	r2, #0
   db082:	4611      	mov	r1, r2
   db084:	6840      	ldr	r0, [r0, #4]
   db086:	f7fe bb45 	b.w	d9714 <network_connecting>

000db08a <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db08a:	2200      	movs	r2, #0
   db08c:	2102      	movs	r1, #2
   db08e:	6840      	ldr	r0, [r0, #4]
   db090:	f7fe bb48 	b.w	d9724 <network_disconnect>

000db094 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db094:	2300      	movs	r3, #0
   db096:	461a      	mov	r2, r3
   db098:	6840      	ldr	r0, [r0, #4]
   db09a:	f7fe bb33 	b.w	d9704 <network_connect>
	...

000db0a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   db0a0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   db0a2:	4c08      	ldr	r4, [pc, #32]	; (db0c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   db0a4:	2528      	movs	r5, #40	; 0x28
   db0a6:	462a      	mov	r2, r5
   db0a8:	2100      	movs	r1, #0
   db0aa:	4620      	mov	r0, r4
   db0ac:	f003 faf8 	bl	de6a0 <memset>
        cid = -1;
   db0b0:	f04f 33ff 	mov.w	r3, #4294967295
   db0b4:	6063      	str	r3, [r4, #4]
   db0b6:	4b04      	ldr	r3, [pc, #16]	; (db0c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   db0b8:	8025      	strh	r5, [r4, #0]
   db0ba:	2204      	movs	r2, #4
   db0bc:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   db0be:	4a03      	ldr	r2, [pc, #12]	; (db0cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   db0c0:	601a      	str	r2, [r3, #0]
   db0c2:	bd38      	pop	{r3, r4, r5, pc}
   db0c4:	2003e2e4 	.word	0x2003e2e4
   db0c8:	2003e2dc 	.word	0x2003e2dc
   db0cc:	000e069c 	.word	0x000e069c

000db0d0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   db0d0:	4770      	bx	lr

000db0d2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db0d2:	7441      	strb	r1, [r0, #17]
   db0d4:	4770      	bx	lr

000db0d6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   db0d6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   db0d8:	7c00      	ldrb	r0, [r0, #16]
   db0da:	f7fe f9fd 	bl	d94d8 <HAL_USART_Available_Data_For_Write>
}
   db0de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db0e2:	bd08      	pop	{r3, pc}

000db0e4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   db0e4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   db0e6:	7c00      	ldrb	r0, [r0, #16]
   db0e8:	f7fe f9ce 	bl	d9488 <HAL_USART_Available_Data>
}
   db0ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db0f0:	bd08      	pop	{r3, pc}

000db0f2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   db0f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   db0f4:	7c00      	ldrb	r0, [r0, #16]
   db0f6:	f7fe f9d7 	bl	d94a8 <HAL_USART_Peek_Data>
}
   db0fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db0fe:	bf28      	it	cs
   db100:	f04f 30ff 	movcs.w	r0, #4294967295
   db104:	bd08      	pop	{r3, pc}

000db106 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   db106:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   db108:	7c00      	ldrb	r0, [r0, #16]
   db10a:	f7fe f9c5 	bl	d9498 <HAL_USART_Read_Data>
}
   db10e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db112:	bf28      	it	cs
   db114:	f04f 30ff 	movcs.w	r0, #4294967295
   db118:	bd08      	pop	{r3, pc}

000db11a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   db11a:	7c00      	ldrb	r0, [r0, #16]
   db11c:	f7fe b9cc 	b.w	d94b8 <HAL_USART_Flush_Data>

000db120 <_ZN11USARTSerialD0Ev>:
   db120:	b510      	push	{r4, lr}
   db122:	2114      	movs	r1, #20
   db124:	4604      	mov	r4, r0
   db126:	f000 fb35 	bl	db794 <_ZdlPvj>
   db12a:	4620      	mov	r0, r4
   db12c:	bd10      	pop	{r4, pc}

000db12e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db12e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db130:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   db132:	4604      	mov	r4, r0
   db134:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db136:	b925      	cbnz	r5, db142 <_ZN11USARTSerial5writeEh+0x14>
   db138:	7c00      	ldrb	r0, [r0, #16]
   db13a:	f7fe f9cd 	bl	d94d8 <HAL_USART_Available_Data_For_Write>
   db13e:	2800      	cmp	r0, #0
   db140:	dd05      	ble.n	db14e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db142:	4631      	mov	r1, r6
   db144:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db14a:	f7fe b995 	b.w	d9478 <HAL_USART_Write_Data>
  }
  return 0;
}
   db14e:	4628      	mov	r0, r5
   db150:	bd70      	pop	{r4, r5, r6, pc}
	...

000db154 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   db154:	b510      	push	{r4, lr}
   db156:	4604      	mov	r4, r0
   db158:	4608      	mov	r0, r1
   db15a:	4611      	mov	r1, r2
   db15c:	2200      	movs	r2, #0
   db15e:	6062      	str	r2, [r4, #4]
   db160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db164:	60a2      	str	r2, [r4, #8]
   db166:	4a05      	ldr	r2, [pc, #20]	; (db17c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   db168:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   db16a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   db16c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   db16e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   db170:	461a      	mov	r2, r3
   db172:	f7fe f979 	bl	d9468 <HAL_USART_Init>
}
   db176:	4620      	mov	r0, r4
   db178:	bd10      	pop	{r4, pc}
   db17a:	bf00      	nop
   db17c:	000e06d0 	.word	0x000e06d0

000db180 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   db180:	2300      	movs	r3, #0
   db182:	7c00      	ldrb	r0, [r0, #16]
   db184:	f7fe b9b0 	b.w	d94e8 <HAL_USART_BeginConfig>

000db188 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   db188:	2200      	movs	r2, #0
   db18a:	f7ff bff9 	b.w	db180 <_ZN11USARTSerial5beginEmm>

000db18e <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   db18e:	7c00      	ldrb	r0, [r0, #16]
   db190:	f7fe b99a 	b.w	d94c8 <HAL_USART_Is_Enabled>

000db194 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db194:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db196:	4d0c      	ldr	r5, [pc, #48]	; (db1c8 <_Z22__fetch_global_Serial1v+0x34>)
   db198:	6829      	ldr	r1, [r5, #0]
   db19a:	f011 0401 	ands.w	r4, r1, #1
   db19e:	d111      	bne.n	db1c4 <_Z22__fetch_global_Serial1v+0x30>
   db1a0:	4628      	mov	r0, r5
   db1a2:	f7f8 ff80 	bl	d40a6 <__cxa_guard_acquire>
   db1a6:	b168      	cbz	r0, db1c4 <_Z22__fetch_global_Serial1v+0x30>
   db1a8:	4a08      	ldr	r2, [pc, #32]	; (db1cc <_Z22__fetch_global_Serial1v+0x38>)
   db1aa:	4b09      	ldr	r3, [pc, #36]	; (db1d0 <_Z22__fetch_global_Serial1v+0x3c>)
   db1ac:	4809      	ldr	r0, [pc, #36]	; (db1d4 <_Z22__fetch_global_Serial1v+0x40>)
   db1ae:	4621      	mov	r1, r4
   db1b0:	f7ff ffd0 	bl	db154 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   db1b4:	4628      	mov	r0, r5
   db1b6:	f7f8 ff7b 	bl	d40b0 <__cxa_guard_release>
   db1ba:	4a07      	ldr	r2, [pc, #28]	; (db1d8 <_Z22__fetch_global_Serial1v+0x44>)
   db1bc:	4907      	ldr	r1, [pc, #28]	; (db1dc <_Z22__fetch_global_Serial1v+0x48>)
   db1be:	4805      	ldr	r0, [pc, #20]	; (db1d4 <_Z22__fetch_global_Serial1v+0x40>)
   db1c0:	f000 fada 	bl	db778 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db1c4:	4803      	ldr	r0, [pc, #12]	; (db1d4 <_Z22__fetch_global_Serial1v+0x40>)
   db1c6:	bd38      	pop	{r3, r4, r5, pc}
   db1c8:	2003e3a4 	.word	0x2003e3a4
   db1cc:	2003e3a8 	.word	0x2003e3a8
   db1d0:	2003e320 	.word	0x2003e320
   db1d4:	2003e30c 	.word	0x2003e30c
   db1d8:	2003be74 	.word	0x2003be74
   db1dc:	000db0d1 	.word	0x000db0d1

000db1e0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   db1e0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   db1e2:	6883      	ldr	r3, [r0, #8]
   db1e4:	4604      	mov	r4, r0
   db1e6:	b90b      	cbnz	r3, db1ec <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   db1e8:	f000 fc78 	bl	dbadc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db1ec:	68c3      	ldr	r3, [r0, #12]
   db1ee:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db1f0:	68a3      	ldr	r3, [r4, #8]
   db1f2:	b11b      	cbz	r3, db1fc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db1f4:	2203      	movs	r2, #3
   db1f6:	4621      	mov	r1, r4
   db1f8:	4620      	mov	r0, r4
   db1fa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   db1fc:	4620      	mov	r0, r4
   db1fe:	2110      	movs	r1, #16
}
   db200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   db204:	f000 bac6 	b.w	db794 <_ZdlPvj>

000db208 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   db208:	4770      	bx	lr

000db20a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   db20a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db20c:	4606      	mov	r6, r0
   db20e:	4615      	mov	r5, r2
   db210:	460c      	mov	r4, r1
   db212:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db214:	42bc      	cmp	r4, r7
   db216:	d006      	beq.n	db226 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   db218:	6833      	ldr	r3, [r6, #0]
   db21a:	f814 1b01 	ldrb.w	r1, [r4], #1
   db21e:	689b      	ldr	r3, [r3, #8]
   db220:	4630      	mov	r0, r6
   db222:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db224:	e7f6      	b.n	db214 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   db226:	4628      	mov	r0, r5
   db228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db22a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   db22a:	2200      	movs	r2, #0
   db22c:	7c00      	ldrb	r0, [r0, #16]
   db22e:	f7fe b97b 	b.w	d9528 <HAL_I2C_Write_Data>

000db232 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   db232:	2100      	movs	r1, #0
   db234:	7c00      	ldrb	r0, [r0, #16]
   db236:	f7fe b97f 	b.w	d9538 <HAL_I2C_Available_Data>

000db23a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   db23a:	2100      	movs	r1, #0
   db23c:	7c00      	ldrb	r0, [r0, #16]
   db23e:	f7fe b983 	b.w	d9548 <HAL_I2C_Read_Data>

000db242 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   db242:	2100      	movs	r1, #0
   db244:	7c00      	ldrb	r0, [r0, #16]
   db246:	f7fe b987 	b.w	d9558 <HAL_I2C_Peek_Data>

000db24a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   db24a:	2100      	movs	r1, #0
   db24c:	7c00      	ldrb	r0, [r0, #16]
   db24e:	f7fe b98b 	b.w	d9568 <HAL_I2C_Flush_Data>

000db252 <_ZN7TwoWireD0Ev>:
   db252:	b510      	push	{r4, lr}
   db254:	2114      	movs	r1, #20
   db256:	4604      	mov	r4, r0
   db258:	f000 fa9c 	bl	db794 <_ZdlPvj>
   db25c:	4620      	mov	r0, r4
   db25e:	bd10      	pop	{r4, pc}

000db260 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   db260:	b510      	push	{r4, lr}
   db262:	4604      	mov	r4, r0
   db264:	2300      	movs	r3, #0
   db266:	6063      	str	r3, [r4, #4]
   db268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db26c:	60a3      	str	r3, [r4, #8]
   db26e:	4b04      	ldr	r3, [pc, #16]	; (db280 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   db270:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   db272:	4608      	mov	r0, r1
   db274:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   db276:	4611      	mov	r1, r2
   db278:	f7fe f986 	bl	d9588 <HAL_I2C_Init>
}
   db27c:	4620      	mov	r0, r4
   db27e:	bd10      	pop	{r4, pc}
   db280:	000e0700 	.word	0x000e0700

000db284 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   db284:	2300      	movs	r3, #0
   db286:	461a      	mov	r2, r3
   db288:	4619      	mov	r1, r3
   db28a:	7c00      	ldrb	r0, [r0, #16]
   db28c:	f7fe b934 	b.w	d94f8 <HAL_I2C_Begin>

000db290 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   db290:	b570      	push	{r4, r5, r6, lr}
   db292:	460c      	mov	r4, r1
   db294:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   db296:	2514      	movs	r5, #20
   db298:	4606      	mov	r6, r0
   db29a:	462a      	mov	r2, r5
   db29c:	2100      	movs	r1, #0
   db29e:	a801      	add	r0, sp, #4
   db2a0:	f003 f9fe 	bl	de6a0 <memset>
   db2a4:	7823      	ldrb	r3, [r4, #0]
   db2a6:	f88d 3008 	strb.w	r3, [sp, #8]
   db2aa:	6863      	ldr	r3, [r4, #4]
   db2ac:	9303      	str	r3, [sp, #12]
   db2ae:	68e3      	ldr	r3, [r4, #12]
   db2b0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   db2b2:	2200      	movs	r2, #0
   db2b4:	7a23      	ldrb	r3, [r4, #8]
   db2b6:	7c30      	ldrb	r0, [r6, #16]
   db2b8:	f8ad 5004 	strh.w	r5, [sp, #4]
   db2bc:	a901      	add	r1, sp, #4
   db2be:	9305      	str	r3, [sp, #20]
   db2c0:	f7fe f982 	bl	d95c8 <HAL_I2C_Request_Data_Ex>
}
   db2c4:	b006      	add	sp, #24
   db2c6:	bd70      	pop	{r4, r5, r6, pc}

000db2c8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   db2c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   db2ca:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db2cc:	f88d 1000 	strb.w	r1, [sp]
   db2d0:	f04f 0164 	mov.w	r1, #100	; 0x64
   db2d4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   db2d6:	bf18      	it	ne
   db2d8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   db2da:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   db2dc:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   db2de:	f88d 3008 	strb.w	r3, [sp, #8]
   db2e2:	f7ff ffd5 	bl	db290 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   db2e6:	b005      	add	sp, #20
   db2e8:	f85d fb04 	ldr.w	pc, [sp], #4

000db2ec <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   db2ec:	2301      	movs	r3, #1
   db2ee:	f7ff bfeb 	b.w	db2c8 <_ZN7TwoWire11requestFromEhjh>

000db2f2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   db2f2:	2200      	movs	r2, #0
   db2f4:	7c00      	ldrb	r0, [r0, #16]
   db2f6:	f7fe b907 	b.w	d9508 <HAL_I2C_Begin_Transmission>

000db2fa <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   db2fa:	b2c9      	uxtb	r1, r1
   db2fc:	f7ff bff9 	b.w	db2f2 <_ZN7TwoWire17beginTransmissionEh>

000db300 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   db300:	2200      	movs	r2, #0
   db302:	7c00      	ldrb	r0, [r0, #16]
   db304:	f7fe b908 	b.w	d9518 <HAL_I2C_End_Transmission>

000db308 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   db308:	2101      	movs	r1, #1
   db30a:	f7ff bff9 	b.w	db300 <_ZN7TwoWire15endTransmissionEh>

000db30e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   db30e:	2100      	movs	r1, #0
   db310:	7c00      	ldrb	r0, [r0, #16]
   db312:	f7fe b931 	b.w	d9578 <HAL_I2C_Is_Enabled>

000db316 <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  HAL_I2C_Reset(_i2c, 0, NULL);
   db316:	2200      	movs	r2, #0
   db318:	4611      	mov	r1, r2
   db31a:	7c00      	ldrb	r0, [r0, #16]
   db31c:	f7fe b93c 	b.w	d9598 <HAL_I2C_Reset>

000db320 <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
   db320:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   db322:	2100      	movs	r1, #0
   db324:	7c00      	ldrb	r0, [r0, #16]
   db326:	f7fe f93f 	bl	d95a8 <HAL_I2C_Acquire>
}
   db32a:	fab0 f080 	clz	r0, r0
   db32e:	0940      	lsrs	r0, r0, #5
   db330:	bd08      	pop	{r3, pc}

000db332 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   db332:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   db334:	2100      	movs	r1, #0
   db336:	7c00      	ldrb	r0, [r0, #16]
   db338:	f7fe f93e 	bl	d95b8 <HAL_I2C_Release>
}
   db33c:	fab0 f080 	clz	r0, r0
   db340:	0940      	lsrs	r0, r0, #5
   db342:	bd08      	pop	{r3, pc}

000db344 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db344:	2200      	movs	r2, #0
   db346:	4611      	mov	r1, r2
   db348:	6840      	ldr	r0, [r0, #4]
   db34a:	f7fe ba13 	b.w	d9774 <network_listening>

000db34e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db34e:	2200      	movs	r2, #0
   db350:	4611      	mov	r1, r2
   db352:	6840      	ldr	r0, [r0, #4]
   db354:	f7fe ba1e 	b.w	d9794 <network_get_listen_timeout>

000db358 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db358:	2200      	movs	r2, #0
   db35a:	6840      	ldr	r0, [r0, #4]
   db35c:	f7fe ba12 	b.w	d9784 <network_set_listen_timeout>

000db360 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db360:	2200      	movs	r2, #0
   db362:	f081 0101 	eor.w	r1, r1, #1
   db366:	6840      	ldr	r0, [r0, #4]
   db368:	f7fe b9fc 	b.w	d9764 <network_listen>

000db36c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   db36c:	2300      	movs	r3, #0
   db36e:	461a      	mov	r2, r3
   db370:	2101      	movs	r1, #1
   db372:	6840      	ldr	r0, [r0, #4]
   db374:	f7fe b9ee 	b.w	d9754 <network_off>

000db378 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   db378:	2300      	movs	r3, #0
   db37a:	461a      	mov	r2, r3
   db37c:	4619      	mov	r1, r3
   db37e:	6840      	ldr	r0, [r0, #4]
   db380:	f7fe b9e0 	b.w	d9744 <network_on>

000db384 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   db384:	2200      	movs	r2, #0
   db386:	4611      	mov	r1, r2
   db388:	6840      	ldr	r0, [r0, #4]
   db38a:	f7fe b9d3 	b.w	d9734 <network_ready>

000db38e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db38e:	2200      	movs	r2, #0
   db390:	4611      	mov	r1, r2
   db392:	6840      	ldr	r0, [r0, #4]
   db394:	f7fe b9be 	b.w	d9714 <network_connecting>

000db398 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db398:	2200      	movs	r2, #0
   db39a:	2102      	movs	r1, #2
   db39c:	6840      	ldr	r0, [r0, #4]
   db39e:	f7fe b9c1 	b.w	d9724 <network_disconnect>

000db3a2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db3a2:	2300      	movs	r3, #0
   db3a4:	461a      	mov	r2, r3
   db3a6:	6840      	ldr	r0, [r0, #4]
   db3a8:	f7fe b9ac 	b.w	d9704 <network_connect>

000db3ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   db3ac:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db3ae:	4605      	mov	r5, r0
   db3b0:	b188      	cbz	r0, db3d6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db3b2:	6804      	ldr	r4, [r0, #0]
   db3b4:	b14c      	cbz	r4, db3ca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db3b6:	68a3      	ldr	r3, [r4, #8]
   db3b8:	b11b      	cbz	r3, db3c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db3ba:	2203      	movs	r2, #3
   db3bc:	4621      	mov	r1, r4
   db3be:	4620      	mov	r0, r4
   db3c0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db3c2:	2110      	movs	r1, #16
   db3c4:	4620      	mov	r0, r4
   db3c6:	f000 f9e5 	bl	db794 <_ZdlPvj>
   db3ca:	4628      	mov	r0, r5
   db3cc:	2114      	movs	r1, #20
      }
   db3ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db3d2:	f000 b9df 	b.w	db794 <_ZdlPvj>
   db3d6:	bd38      	pop	{r3, r4, r5, pc}

000db3d8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   db3d8:	b110      	cbz	r0, db3e0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   db3da:	6803      	ldr	r3, [r0, #0]
   db3dc:	685b      	ldr	r3, [r3, #4]
   db3de:	4718      	bx	r3
   db3e0:	4770      	bx	lr

000db3e2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   db3e2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   db3e4:	6803      	ldr	r3, [r0, #0]
   db3e6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   db3e8:	b1bb      	cbz	r3, db41a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   db3ea:	6858      	ldr	r0, [r3, #4]
   db3ec:	f7fd ffd4 	bl	d9398 <os_thread_is_current>
   db3f0:	b978      	cbnz	r0, db412 <_ZN6ThreadD1Ev+0x30>
   db3f2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   db3f4:	7c5a      	ldrb	r2, [r3, #17]
   db3f6:	b912      	cbnz	r2, db3fe <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   db3f8:	6858      	ldr	r0, [r3, #4]
   db3fa:	f7fd ffdd 	bl	d93b8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   db3fe:	6823      	ldr	r3, [r4, #0]
   db400:	6858      	ldr	r0, [r3, #4]
   db402:	f7fd ffe1 	bl	d93c8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db406:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   db408:	2300      	movs	r3, #0
   db40a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   db40c:	b128      	cbz	r0, db41a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   db40e:	f7ff ffcd 	bl	db3ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db412:	6820      	ldr	r0, [r4, #0]
   db414:	b108      	cbz	r0, db41a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   db416:	f7ff ffc9 	bl	db3ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   db41a:	4620      	mov	r0, r4
   db41c:	bd10      	pop	{r4, pc}

000db41e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   db41e:	b538      	push	{r3, r4, r5, lr}
   db420:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db422:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   db426:	b108      	cbz	r0, db42c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   db428:	f7f8 fe3b 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   db42c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   db430:	b108      	cbz	r0, db436 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   db432:	f7fe f801 	bl	d9438 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db436:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   db43a:	b135      	cbz	r5, db44a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db43c:	4628      	mov	r0, r5
   db43e:	f7ff ffd0 	bl	db3e2 <_ZN6ThreadD1Ev>
   db442:	2104      	movs	r1, #4
   db444:	4628      	mov	r0, r5
   db446:	f000 f9a5 	bl	db794 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db44a:	6820      	ldr	r0, [r4, #0]
   db44c:	b108      	cbz	r0, db452 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   db44e:	f7ff ffc3 	bl	db3d8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   db452:	4620      	mov	r0, r4
   db454:	bd38      	pop	{r3, r4, r5, pc}
	...

000db458 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   db458:	b510      	push	{r4, lr}
   db45a:	4b04      	ldr	r3, [pc, #16]	; (db46c <_ZN5spark9MeshClassD1Ev+0x14>)
   db45c:	4604      	mov	r4, r0
   db45e:	f840 3b08 	str.w	r3, [r0], #8
   db462:	f7ff ffdc 	bl	db41e <_ZN5spark11MeshPublishD1Ev>
   db466:	4620      	mov	r0, r4
   db468:	bd10      	pop	{r4, pc}
   db46a:	bf00      	nop
   db46c:	000e0728 	.word	0x000e0728

000db470 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   db470:	b538      	push	{r3, r4, r5, lr}
   db472:	4c0e      	ldr	r4, [pc, #56]	; (db4ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   db474:	4b0e      	ldr	r3, [pc, #56]	; (db4b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   db476:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   db478:	2500      	movs	r5, #0
   db47a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   db47c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   db480:	6063      	str	r3, [r4, #4]
   db482:	60a5      	str	r5, [r4, #8]
   db484:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   db488:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   db48c:	f7fd ffcc 	bl	d9428 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   db490:	4b08      	ldr	r3, [pc, #32]	; (db4b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   db492:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db496:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   db49a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   db49c:	4620      	mov	r0, r4
   db49e:	4a06      	ldr	r2, [pc, #24]	; (db4b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   db4a0:	4906      	ldr	r1, [pc, #24]	; (db4bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   db4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   db4a6:	f000 b967 	b.w	db778 <__aeabi_atexit>
   db4aa:	bf00      	nop
   db4ac:	2003e42c 	.word	0x2003e42c
   db4b0:	000e075c 	.word	0x000e075c
   db4b4:	000e0728 	.word	0x000e0728
   db4b8:	2003be74 	.word	0x2003be74
   db4bc:	000db459 	.word	0x000db459

000db4c0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   db4c0:	2300      	movs	r3, #0
   db4c2:	461a      	mov	r2, r3
   db4c4:	6840      	ldr	r0, [r0, #4]
   db4c6:	f7fe b91d 	b.w	d9704 <network_connect>

000db4ca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   db4ca:	2200      	movs	r2, #0
   db4cc:	2102      	movs	r1, #2
   db4ce:	6840      	ldr	r0, [r0, #4]
   db4d0:	f7fe b928 	b.w	d9724 <network_disconnect>

000db4d4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   db4d4:	2200      	movs	r2, #0
   db4d6:	4611      	mov	r1, r2
   db4d8:	6840      	ldr	r0, [r0, #4]
   db4da:	f7fe b91b 	b.w	d9714 <network_connecting>

000db4de <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   db4de:	2200      	movs	r2, #0
   db4e0:	4611      	mov	r1, r2
   db4e2:	6840      	ldr	r0, [r0, #4]
   db4e4:	f7fe b926 	b.w	d9734 <network_ready>

000db4e8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   db4e8:	2300      	movs	r3, #0
   db4ea:	461a      	mov	r2, r3
   db4ec:	4619      	mov	r1, r3
   db4ee:	6840      	ldr	r0, [r0, #4]
   db4f0:	f7fe b928 	b.w	d9744 <network_on>

000db4f4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   db4f4:	2300      	movs	r3, #0
   db4f6:	461a      	mov	r2, r3
   db4f8:	4619      	mov	r1, r3
   db4fa:	6840      	ldr	r0, [r0, #4]
   db4fc:	f7fe b92a 	b.w	d9754 <network_off>

000db500 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   db500:	2200      	movs	r2, #0
   db502:	f081 0101 	eor.w	r1, r1, #1
   db506:	6840      	ldr	r0, [r0, #4]
   db508:	f7fe b92c 	b.w	d9764 <network_listen>

000db50c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   db50c:	2200      	movs	r2, #0
   db50e:	6840      	ldr	r0, [r0, #4]
   db510:	f7fe b938 	b.w	d9784 <network_set_listen_timeout>

000db514 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   db514:	2200      	movs	r2, #0
   db516:	4611      	mov	r1, r2
   db518:	6840      	ldr	r0, [r0, #4]
   db51a:	f7fe b93b 	b.w	d9794 <network_get_listen_timeout>

000db51e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   db51e:	2200      	movs	r2, #0
   db520:	4611      	mov	r1, r2
   db522:	6840      	ldr	r0, [r0, #4]
   db524:	f7fe b926 	b.w	d9774 <network_listening>

000db528 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   db528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db52c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   db52e:	b095      	sub	sp, #84	; 0x54
   db530:	4616      	mov	r6, r2
   db532:	460d      	mov	r5, r1
   db534:	4607      	mov	r7, r0
    IPAddress addr;
   db536:	f7ff fc5d 	bl	dadf4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   db53a:	4621      	mov	r1, r4
   db53c:	2220      	movs	r2, #32
   db53e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db540:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   db542:	f003 f8ad 	bl	de6a0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   db546:	2340      	movs	r3, #64	; 0x40
   db548:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   db54a:	4621      	mov	r1, r4
   db54c:	466b      	mov	r3, sp
   db54e:	aa0c      	add	r2, sp, #48	; 0x30
   db550:	4630      	mov	r0, r6
   db552:	f7fd fe51 	bl	d91f8 <netdb_getaddrinfo>
    if (!r) {
   db556:	4604      	mov	r4, r0
   db558:	2800      	cmp	r0, #0
   db55a:	d144      	bne.n	db5e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db55c:	4602      	mov	r2, r0
   db55e:	2101      	movs	r1, #1
   db560:	6868      	ldr	r0, [r5, #4]
   db562:	f7fe f8e7 	bl	d9734 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db566:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db568:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db56a:	4622      	mov	r2, r4
   db56c:	6868      	ldr	r0, [r5, #4]
   db56e:	f7fe f8e1 	bl	d9734 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db572:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db574:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   db576:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db578:	2e00      	cmp	r6, #0
   db57a:	d034      	beq.n	db5e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   db57c:	2900      	cmp	r1, #0
   db57e:	d132      	bne.n	db5e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   db580:	6873      	ldr	r3, [r6, #4]
   db582:	2b02      	cmp	r3, #2
   db584:	d002      	beq.n	db58c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   db586:	2b0a      	cmp	r3, #10
   db588:	d009      	beq.n	db59e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   db58a:	e02a      	b.n	db5e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   db58c:	f1b8 0f00 	cmp.w	r8, #0
   db590:	d027      	beq.n	db5e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   db592:	6971      	ldr	r1, [r6, #20]
   db594:	4638      	mov	r0, r7
   db596:	3104      	adds	r1, #4
   db598:	f7ff fc59 	bl	dae4e <_ZN9IPAddressaSEPKh>
   db59c:	e020      	b.n	db5e0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   db59e:	f1b9 0f00 	cmp.w	r9, #0
   db5a2:	d01e      	beq.n	db5e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   db5a4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   db5a6:	2211      	movs	r2, #17
   db5a8:	a801      	add	r0, sp, #4
   db5aa:	f003 f879 	bl	de6a0 <memset>
                    a.v = 6;
   db5ae:	2306      	movs	r3, #6
   db5b0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   db5b4:	ad01      	add	r5, sp, #4
   db5b6:	f104 0308 	add.w	r3, r4, #8
   db5ba:	3418      	adds	r4, #24
   db5bc:	6818      	ldr	r0, [r3, #0]
   db5be:	6859      	ldr	r1, [r3, #4]
   db5c0:	462a      	mov	r2, r5
   db5c2:	c203      	stmia	r2!, {r0, r1}
   db5c4:	3308      	adds	r3, #8
   db5c6:	42a3      	cmp	r3, r4
   db5c8:	4615      	mov	r5, r2
   db5ca:	d1f7      	bne.n	db5bc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   db5cc:	a901      	add	r1, sp, #4
   db5ce:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   db5d0:	ad07      	add	r5, sp, #28
   db5d2:	f7ff fc1d 	bl	dae10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db5d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db5d8:	1d3c      	adds	r4, r7, #4
   db5da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db5dc:	682b      	ldr	r3, [r5, #0]
   db5de:	7023      	strb	r3, [r4, #0]
                    ok = true;
   db5e0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db5e2:	69f6      	ldr	r6, [r6, #28]
   db5e4:	e7c8      	b.n	db578 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   db5e6:	9800      	ldr	r0, [sp, #0]
   db5e8:	f7fd fdfe 	bl	d91e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   db5ec:	4638      	mov	r0, r7
   db5ee:	b015      	add	sp, #84	; 0x54
   db5f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db5f4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   db5f4:	4b02      	ldr	r3, [pc, #8]	; (db600 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   db5f6:	4a03      	ldr	r2, [pc, #12]	; (db604 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   db5f8:	601a      	str	r2, [r3, #0]
   db5fa:	2200      	movs	r2, #0
   db5fc:	605a      	str	r2, [r3, #4]
   db5fe:	4770      	bx	lr
   db600:	2003e600 	.word	0x2003e600
   db604:	000e075c 	.word	0x000e075c

000db608 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   db608:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db60a:	4e18      	ldr	r6, [pc, #96]	; (db66c <pinAvailable+0x64>)
   db60c:	6831      	ldr	r1, [r6, #0]
   db60e:	f011 0501 	ands.w	r5, r1, #1
   db612:	4604      	mov	r4, r0
   db614:	d10a      	bne.n	db62c <pinAvailable+0x24>
   db616:	4630      	mov	r0, r6
   db618:	f7f8 fd45 	bl	d40a6 <__cxa_guard_acquire>
   db61c:	b130      	cbz	r0, db62c <pinAvailable+0x24>
   db61e:	4629      	mov	r1, r5
   db620:	4813      	ldr	r0, [pc, #76]	; (db670 <pinAvailable+0x68>)
   db622:	f7fe f9b3 	bl	d998c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   db626:	4630      	mov	r0, r6
   db628:	f7f8 fd42 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   db62c:	4810      	ldr	r0, [pc, #64]	; (db670 <pinAvailable+0x68>)
   db62e:	f7fe fa6a 	bl	d9b06 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   db632:	b128      	cbz	r0, db640 <pinAvailable+0x38>
   db634:	f1a4 030b 	sub.w	r3, r4, #11
   db638:	2b02      	cmp	r3, #2
   db63a:	d801      	bhi.n	db640 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   db63c:	2000      	movs	r0, #0
   db63e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   db640:	f000 f874 	bl	db72c <_Z19__fetch_global_Wirev>
   db644:	f7ff fe63 	bl	db30e <_ZN7TwoWire9isEnabledEv>
   db648:	b108      	cbz	r0, db64e <pinAvailable+0x46>
   db64a:	2c01      	cmp	r4, #1
   db64c:	d9f6      	bls.n	db63c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   db64e:	f7ff fda1 	bl	db194 <_Z22__fetch_global_Serial1v>
   db652:	f7ff fd9c 	bl	db18e <_ZN11USARTSerial9isEnabledEv>
   db656:	b118      	cbz	r0, db660 <pinAvailable+0x58>
   db658:	f1a4 0309 	sub.w	r3, r4, #9
   db65c:	2b01      	cmp	r3, #1
   db65e:	d9ed      	bls.n	db63c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   db660:	2c23      	cmp	r4, #35	; 0x23
   db662:	bf8c      	ite	hi
   db664:	2000      	movhi	r0, #0
   db666:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   db668:	bd70      	pop	{r4, r5, r6, pc}
   db66a:	bf00      	nop
   db66c:	2003be78 	.word	0x2003be78
   db670:	2003be7c 	.word	0x2003be7c

000db674 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db674:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   db676:	b538      	push	{r3, r4, r5, lr}
   db678:	4604      	mov	r4, r0
   db67a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db67c:	d80a      	bhi.n	db694 <pinMode+0x20>
   db67e:	29ff      	cmp	r1, #255	; 0xff
   db680:	d008      	beq.n	db694 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db682:	f7ff ffc1 	bl	db608 <pinAvailable>
   db686:	b128      	cbz	r0, db694 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   db688:	4629      	mov	r1, r5
   db68a:	4620      	mov	r0, r4
}
   db68c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   db690:	f7fd bdca 	b.w	d9228 <HAL_Pin_Mode>
   db694:	bd38      	pop	{r3, r4, r5, pc}

000db696 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db696:	b538      	push	{r3, r4, r5, lr}
   db698:	4604      	mov	r4, r0
   db69a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db69c:	f7fd fdcc 	bl	d9238 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db6a0:	28ff      	cmp	r0, #255	; 0xff
   db6a2:	d010      	beq.n	db6c6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   db6a4:	2806      	cmp	r0, #6
   db6a6:	d804      	bhi.n	db6b2 <digitalWrite+0x1c>
   db6a8:	234d      	movs	r3, #77	; 0x4d
   db6aa:	fa23 f000 	lsr.w	r0, r3, r0
   db6ae:	07c3      	lsls	r3, r0, #31
   db6b0:	d409      	bmi.n	db6c6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db6b2:	4620      	mov	r0, r4
   db6b4:	f7ff ffa8 	bl	db608 <pinAvailable>
   db6b8:	b128      	cbz	r0, db6c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db6ba:	4629      	mov	r1, r5
   db6bc:	4620      	mov	r0, r4
}
   db6be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   db6c2:	f7fd bdc1 	b.w	d9248 <HAL_GPIO_Write>
   db6c6:	bd38      	pop	{r3, r4, r5, pc}

000db6c8 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   db6c8:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   db6ca:	b510      	push	{r4, lr}
   db6cc:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   db6ce:	bf9c      	itt	ls
   db6d0:	340e      	addls	r4, #14
   db6d2:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db6d4:	4620      	mov	r0, r4
   db6d6:	f7ff ff97 	bl	db608 <pinAvailable>
   db6da:	b150      	cbz	r0, db6f2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   db6dc:	2103      	movs	r1, #3
   db6de:	4620      	mov	r0, r4
   db6e0:	f7fd fd9a 	bl	d9218 <HAL_Validate_Pin_Function>
   db6e4:	2803      	cmp	r0, #3
   db6e6:	d104      	bne.n	db6f2 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   db6e8:	4620      	mov	r0, r4
}
   db6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   db6ee:	f7fd bdc3 	b.w	d9278 <HAL_ADC_Read>
}
   db6f2:	2000      	movs	r0, #0
   db6f4:	bd10      	pop	{r4, pc}
	...

000db6f8 <_Z17acquireWireBufferv>:
   db6f8:	b570      	push	{r4, r5, r6, lr}
   db6fa:	4604      	mov	r4, r0
   db6fc:	2514      	movs	r5, #20
   db6fe:	462a      	mov	r2, r5
   db700:	4e09      	ldr	r6, [pc, #36]	; (db728 <_Z17acquireWireBufferv+0x30>)
   db702:	2100      	movs	r1, #0
   db704:	f002 ffcc 	bl	de6a0 <memset>
   db708:	8025      	strh	r5, [r4, #0]
   db70a:	2520      	movs	r5, #32
   db70c:	4631      	mov	r1, r6
   db70e:	60a5      	str	r5, [r4, #8]
   db710:	6125      	str	r5, [r4, #16]
   db712:	4628      	mov	r0, r5
   db714:	f000 f840 	bl	db798 <_ZnajRKSt9nothrow_t>
   db718:	4631      	mov	r1, r6
   db71a:	6060      	str	r0, [r4, #4]
   db71c:	4628      	mov	r0, r5
   db71e:	f000 f83b 	bl	db798 <_ZnajRKSt9nothrow_t>
   db722:	60e0      	str	r0, [r4, #12]
   db724:	4620      	mov	r0, r4
   db726:	bd70      	pop	{r4, r5, r6, pc}
   db728:	000e0788 	.word	0x000e0788

000db72c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   db72c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db72e:	4d0e      	ldr	r5, [pc, #56]	; (db768 <_Z19__fetch_global_Wirev+0x3c>)
   db730:	6829      	ldr	r1, [r5, #0]
   db732:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   db736:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db738:	d113      	bne.n	db762 <_Z19__fetch_global_Wirev+0x36>
   db73a:	4628      	mov	r0, r5
   db73c:	f7f8 fcb3 	bl	d40a6 <__cxa_guard_acquire>
   db740:	b178      	cbz	r0, db762 <_Z19__fetch_global_Wirev+0x36>
   db742:	a801      	add	r0, sp, #4
   db744:	f7ff ffd8 	bl	db6f8 <_Z17acquireWireBufferv>
   db748:	aa01      	add	r2, sp, #4
   db74a:	4621      	mov	r1, r4
   db74c:	4807      	ldr	r0, [pc, #28]	; (db76c <_Z19__fetch_global_Wirev+0x40>)
   db74e:	f7ff fd87 	bl	db260 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   db752:	4628      	mov	r0, r5
   db754:	f7f8 fcac 	bl	d40b0 <__cxa_guard_release>
   db758:	4a05      	ldr	r2, [pc, #20]	; (db770 <_Z19__fetch_global_Wirev+0x44>)
   db75a:	4906      	ldr	r1, [pc, #24]	; (db774 <_Z19__fetch_global_Wirev+0x48>)
   db75c:	4803      	ldr	r0, [pc, #12]	; (db76c <_Z19__fetch_global_Wirev+0x40>)
   db75e:	f000 f80b 	bl	db778 <__aeabi_atexit>
	return wire;
}
   db762:	4802      	ldr	r0, [pc, #8]	; (db76c <_Z19__fetch_global_Wirev+0x40>)
   db764:	b007      	add	sp, #28
   db766:	bd30      	pop	{r4, r5, pc}
   db768:	2003e60c 	.word	0x2003e60c
   db76c:	2003e610 	.word	0x2003e610
   db770:	2003be74 	.word	0x2003be74
   db774:	000db209 	.word	0x000db209

000db778 <__aeabi_atexit>:
   db778:	460b      	mov	r3, r1
   db77a:	4601      	mov	r1, r0
   db77c:	4618      	mov	r0, r3
   db77e:	f002 be6f 	b.w	de460 <__cxa_atexit>
	...

000db784 <_ZSt15get_new_handlerv>:
   db784:	4b02      	ldr	r3, [pc, #8]	; (db790 <_ZSt15get_new_handlerv+0xc>)
   db786:	6818      	ldr	r0, [r3, #0]
   db788:	f3bf 8f5f 	dmb	sy
   db78c:	4770      	bx	lr
   db78e:	bf00      	nop
   db790:	2003e624 	.word	0x2003e624

000db794 <_ZdlPvj>:
   db794:	f7f8 bc83 	b.w	d409e <_ZdlPv>

000db798 <_ZnajRKSt9nothrow_t>:
   db798:	f000 b800 	b.w	db79c <_ZnwjRKSt9nothrow_t>

000db79c <_ZnwjRKSt9nothrow_t>:
   db79c:	b510      	push	{r4, lr}
   db79e:	2800      	cmp	r0, #0
   db7a0:	bf14      	ite	ne
   db7a2:	4604      	movne	r4, r0
   db7a4:	2401      	moveq	r4, #1
   db7a6:	4620      	mov	r0, r4
   db7a8:	f7fe f834 	bl	d9814 <malloc>
   db7ac:	b920      	cbnz	r0, db7b8 <_ZnwjRKSt9nothrow_t+0x1c>
   db7ae:	f7ff ffe9 	bl	db784 <_ZSt15get_new_handlerv>
   db7b2:	b108      	cbz	r0, db7b8 <_ZnwjRKSt9nothrow_t+0x1c>
   db7b4:	4780      	blx	r0
   db7b6:	e7f6      	b.n	db7a6 <_ZnwjRKSt9nothrow_t+0xa>
   db7b8:	bd10      	pop	{r4, pc}

000db7ba <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   db7ba:	68c3      	ldr	r3, [r0, #12]
   db7bc:	689a      	ldr	r2, [r3, #8]
   db7be:	60c2      	str	r2, [r0, #12]
   db7c0:	b102      	cbz	r2, db7c4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
   db7c2:	6050      	str	r0, [r2, #4]
   db7c4:	6842      	ldr	r2, [r0, #4]
   db7c6:	605a      	str	r2, [r3, #4]
   db7c8:	680a      	ldr	r2, [r1, #0]
   db7ca:	4290      	cmp	r0, r2
   db7cc:	d101      	bne.n	db7d2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
   db7ce:	600b      	str	r3, [r1, #0]
   db7d0:	e005      	b.n	db7de <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
   db7d2:	6842      	ldr	r2, [r0, #4]
   db7d4:	6891      	ldr	r1, [r2, #8]
   db7d6:	4288      	cmp	r0, r1
   db7d8:	bf0c      	ite	eq
   db7da:	6093      	streq	r3, [r2, #8]
   db7dc:	60d3      	strne	r3, [r2, #12]
   db7de:	6098      	str	r0, [r3, #8]
   db7e0:	6043      	str	r3, [r0, #4]
   db7e2:	4770      	bx	lr

000db7e4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   db7e4:	6883      	ldr	r3, [r0, #8]
   db7e6:	68da      	ldr	r2, [r3, #12]
   db7e8:	6082      	str	r2, [r0, #8]
   db7ea:	b102      	cbz	r2, db7ee <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
   db7ec:	6050      	str	r0, [r2, #4]
   db7ee:	6842      	ldr	r2, [r0, #4]
   db7f0:	605a      	str	r2, [r3, #4]
   db7f2:	680a      	ldr	r2, [r1, #0]
   db7f4:	4290      	cmp	r0, r2
   db7f6:	d101      	bne.n	db7fc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
   db7f8:	600b      	str	r3, [r1, #0]
   db7fa:	e005      	b.n	db808 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
   db7fc:	6842      	ldr	r2, [r0, #4]
   db7fe:	68d1      	ldr	r1, [r2, #12]
   db800:	4288      	cmp	r0, r1
   db802:	bf0c      	ite	eq
   db804:	60d3      	streq	r3, [r2, #12]
   db806:	6093      	strne	r3, [r2, #8]
   db808:	60d8      	str	r0, [r3, #12]
   db80a:	6043      	str	r3, [r0, #4]
   db80c:	4770      	bx	lr

000db80e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db80e:	7803      	ldrb	r3, [r0, #0]
   db810:	b92b      	cbnz	r3, db81e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   db812:	6843      	ldr	r3, [r0, #4]
   db814:	685b      	ldr	r3, [r3, #4]
   db816:	4298      	cmp	r0, r3
   db818:	d101      	bne.n	db81e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   db81a:	68c3      	ldr	r3, [r0, #12]
   db81c:	e00c      	b.n	db838 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   db81e:	6883      	ldr	r3, [r0, #8]
   db820:	b11b      	cbz	r3, db82a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
   db822:	68da      	ldr	r2, [r3, #12]
   db824:	b142      	cbz	r2, db838 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   db826:	4613      	mov	r3, r2
   db828:	e7fb      	b.n	db822 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
   db82a:	6843      	ldr	r3, [r0, #4]
   db82c:	689a      	ldr	r2, [r3, #8]
   db82e:	4282      	cmp	r2, r0
   db830:	d102      	bne.n	db838 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   db832:	4618      	mov	r0, r3
   db834:	685b      	ldr	r3, [r3, #4]
   db836:	e7f9      	b.n	db82c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
   db838:	4618      	mov	r0, r3
   db83a:	4770      	bx	lr

000db83c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
   db83c:	68c3      	ldr	r3, [r0, #12]
   db83e:	b123      	cbz	r3, db84a <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0xe>
   db840:	4618      	mov	r0, r3
   db842:	689b      	ldr	r3, [r3, #8]
   db844:	2b00      	cmp	r3, #0
   db846:	d1fb      	bne.n	db840 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x4>
   db848:	e00a      	b.n	db860 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x24>
   db84a:	6843      	ldr	r3, [r0, #4]
   db84c:	68da      	ldr	r2, [r3, #12]
   db84e:	4282      	cmp	r2, r0
   db850:	d102      	bne.n	db858 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x1c>
   db852:	4618      	mov	r0, r3
   db854:	685b      	ldr	r3, [r3, #4]
   db856:	e7f9      	b.n	db84c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x10>
   db858:	68c2      	ldr	r2, [r0, #12]
   db85a:	4293      	cmp	r3, r2
   db85c:	bf18      	it	ne
   db85e:	4618      	movne	r0, r3
   db860:	4770      	bx	lr

000db862 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db862:	f7ff bfd4 	b.w	db80e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000db866 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   db866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db86a:	461f      	mov	r7, r3
   db86c:	f103 0904 	add.w	r9, r3, #4
   db870:	2300      	movs	r3, #0
   db872:	460c      	mov	r4, r1
   db874:	604a      	str	r2, [r1, #4]
   db876:	608b      	str	r3, [r1, #8]
   db878:	60cb      	str	r3, [r1, #12]
   db87a:	700b      	strb	r3, [r1, #0]
   db87c:	b168      	cbz	r0, db89a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
   db87e:	4297      	cmp	r7, r2
   db880:	6091      	str	r1, [r2, #8]
   db882:	d101      	bne.n	db888 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db884:	6079      	str	r1, [r7, #4]
   db886:	e00c      	b.n	db8a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
   db888:	68bb      	ldr	r3, [r7, #8]
   db88a:	429a      	cmp	r2, r3
   db88c:	bf08      	it	eq
   db88e:	60b9      	streq	r1, [r7, #8]
   db890:	f04f 0801 	mov.w	r8, #1
   db894:	f04f 0a00 	mov.w	sl, #0
   db898:	e017      	b.n	db8ca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   db89a:	60d1      	str	r1, [r2, #12]
   db89c:	68fb      	ldr	r3, [r7, #12]
   db89e:	429a      	cmp	r2, r3
   db8a0:	d1f6      	bne.n	db890 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   db8a2:	60fc      	str	r4, [r7, #12]
   db8a4:	e7f4      	b.n	db890 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   db8a6:	6866      	ldr	r6, [r4, #4]
   db8a8:	7832      	ldrb	r2, [r6, #0]
   db8aa:	2a00      	cmp	r2, #0
   db8ac:	d13a      	bne.n	db924 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   db8ae:	6875      	ldr	r5, [r6, #4]
   db8b0:	68ab      	ldr	r3, [r5, #8]
   db8b2:	429e      	cmp	r6, r3
   db8b4:	d11f      	bne.n	db8f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
   db8b6:	68eb      	ldr	r3, [r5, #12]
   db8b8:	b15b      	cbz	r3, db8d2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   db8ba:	781a      	ldrb	r2, [r3, #0]
   db8bc:	b94a      	cbnz	r2, db8d2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   db8be:	f886 8000 	strb.w	r8, [r6]
   db8c2:	f883 8000 	strb.w	r8, [r3]
   db8c6:	702a      	strb	r2, [r5, #0]
   db8c8:	462c      	mov	r4, r5
   db8ca:	687b      	ldr	r3, [r7, #4]
   db8cc:	429c      	cmp	r4, r3
   db8ce:	d1ea      	bne.n	db8a6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
   db8d0:	e028      	b.n	db924 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   db8d2:	68f3      	ldr	r3, [r6, #12]
   db8d4:	429c      	cmp	r4, r3
   db8d6:	d104      	bne.n	db8e2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
   db8d8:	4649      	mov	r1, r9
   db8da:	4630      	mov	r0, r6
   db8dc:	f7ff ff6d 	bl	db7ba <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db8e0:	4634      	mov	r4, r6
   db8e2:	6863      	ldr	r3, [r4, #4]
   db8e4:	4649      	mov	r1, r9
   db8e6:	f883 8000 	strb.w	r8, [r3]
   db8ea:	4628      	mov	r0, r5
   db8ec:	f885 a000 	strb.w	sl, [r5]
   db8f0:	f7ff ff78 	bl	db7e4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db8f4:	e014      	b.n	db920 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
   db8f6:	b113      	cbz	r3, db8fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
   db8f8:	781a      	ldrb	r2, [r3, #0]
   db8fa:	2a00      	cmp	r2, #0
   db8fc:	d0df      	beq.n	db8be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
   db8fe:	68b3      	ldr	r3, [r6, #8]
   db900:	429c      	cmp	r4, r3
   db902:	d104      	bne.n	db90e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
   db904:	4649      	mov	r1, r9
   db906:	4630      	mov	r0, r6
   db908:	f7ff ff6c 	bl	db7e4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db90c:	4634      	mov	r4, r6
   db90e:	6863      	ldr	r3, [r4, #4]
   db910:	4649      	mov	r1, r9
   db912:	f883 8000 	strb.w	r8, [r3]
   db916:	4628      	mov	r0, r5
   db918:	f885 a000 	strb.w	sl, [r5]
   db91c:	f7ff ff4d 	bl	db7ba <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db920:	4625      	mov	r5, r4
   db922:	e7d1      	b.n	db8c8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
   db924:	2201      	movs	r2, #1
   db926:	701a      	strb	r2, [r3, #0]
   db928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000db92c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
   db92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db930:	460f      	mov	r7, r1
   db932:	6881      	ldr	r1, [r0, #8]
   db934:	68c2      	ldr	r2, [r0, #12]
   db936:	4605      	mov	r5, r0
   db938:	b909      	cbnz	r1, db93e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x12>
   db93a:	4616      	mov	r6, r2
   db93c:	e029      	b.n	db992 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x66>
   db93e:	4614      	mov	r4, r2
   db940:	2a00      	cmp	r2, #0
   db942:	f000 80c5 	beq.w	dbad0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a4>
   db946:	4613      	mov	r3, r2
   db948:	6898      	ldr	r0, [r3, #8]
   db94a:	b108      	cbz	r0, db950 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x24>
   db94c:	4603      	mov	r3, r0
   db94e:	e7fb      	b.n	db948 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c>
   db950:	42ab      	cmp	r3, r5
   db952:	68de      	ldr	r6, [r3, #12]
   db954:	d01d      	beq.n	db992 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x66>
   db956:	4293      	cmp	r3, r2
   db958:	604b      	str	r3, [r1, #4]
   db95a:	6099      	str	r1, [r3, #8]
   db95c:	d007      	beq.n	db96e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x42>
   db95e:	685c      	ldr	r4, [r3, #4]
   db960:	b106      	cbz	r6, db964 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x38>
   db962:	6074      	str	r4, [r6, #4]
   db964:	6859      	ldr	r1, [r3, #4]
   db966:	608e      	str	r6, [r1, #8]
   db968:	60da      	str	r2, [r3, #12]
   db96a:	68ea      	ldr	r2, [r5, #12]
   db96c:	6053      	str	r3, [r2, #4]
   db96e:	687a      	ldr	r2, [r7, #4]
   db970:	4295      	cmp	r5, r2
   db972:	d101      	bne.n	db978 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x4c>
   db974:	607b      	str	r3, [r7, #4]
   db976:	e005      	b.n	db984 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x58>
   db978:	686a      	ldr	r2, [r5, #4]
   db97a:	6891      	ldr	r1, [r2, #8]
   db97c:	428d      	cmp	r5, r1
   db97e:	bf0c      	ite	eq
   db980:	6093      	streq	r3, [r2, #8]
   db982:	60d3      	strne	r3, [r2, #12]
   db984:	686a      	ldr	r2, [r5, #4]
   db986:	605a      	str	r2, [r3, #4]
   db988:	7829      	ldrb	r1, [r5, #0]
   db98a:	781a      	ldrb	r2, [r3, #0]
   db98c:	7019      	strb	r1, [r3, #0]
   db98e:	702a      	strb	r2, [r5, #0]
   db990:	e027      	b.n	db9e2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb6>
   db992:	686c      	ldr	r4, [r5, #4]
   db994:	b106      	cbz	r6, db998 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x6c>
   db996:	6074      	str	r4, [r6, #4]
   db998:	687b      	ldr	r3, [r7, #4]
   db99a:	429d      	cmp	r5, r3
   db99c:	d101      	bne.n	db9a2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
   db99e:	607e      	str	r6, [r7, #4]
   db9a0:	e005      	b.n	db9ae <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x82>
   db9a2:	686b      	ldr	r3, [r5, #4]
   db9a4:	689a      	ldr	r2, [r3, #8]
   db9a6:	4295      	cmp	r5, r2
   db9a8:	bf0c      	ite	eq
   db9aa:	609e      	streq	r6, [r3, #8]
   db9ac:	60de      	strne	r6, [r3, #12]
   db9ae:	68bb      	ldr	r3, [r7, #8]
   db9b0:	429d      	cmp	r5, r3
   db9b2:	d109      	bne.n	db9c8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9c>
   db9b4:	68eb      	ldr	r3, [r5, #12]
   db9b6:	b90b      	cbnz	r3, db9bc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   db9b8:	686b      	ldr	r3, [r5, #4]
   db9ba:	e004      	b.n	db9c6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9a>
   db9bc:	4633      	mov	r3, r6
   db9be:	689a      	ldr	r2, [r3, #8]
   db9c0:	b10a      	cbz	r2, db9c6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9a>
   db9c2:	4613      	mov	r3, r2
   db9c4:	e7fb      	b.n	db9be <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x92>
   db9c6:	60bb      	str	r3, [r7, #8]
   db9c8:	68fb      	ldr	r3, [r7, #12]
   db9ca:	429d      	cmp	r5, r3
   db9cc:	d109      	bne.n	db9e2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb6>
   db9ce:	68ab      	ldr	r3, [r5, #8]
   db9d0:	b90b      	cbnz	r3, db9d6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xaa>
   db9d2:	686b      	ldr	r3, [r5, #4]
   db9d4:	e004      	b.n	db9e0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb4>
   db9d6:	4633      	mov	r3, r6
   db9d8:	68da      	ldr	r2, [r3, #12]
   db9da:	b10a      	cbz	r2, db9e0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb4>
   db9dc:	4613      	mov	r3, r2
   db9de:	e7fb      	b.n	db9d8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   db9e0:	60fb      	str	r3, [r7, #12]
   db9e2:	782b      	ldrb	r3, [r5, #0]
   db9e4:	2b00      	cmp	r3, #0
   db9e6:	d076      	beq.n	dbad6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   db9e8:	f107 0804 	add.w	r8, r7, #4
   db9ec:	f04f 0900 	mov.w	r9, #0
   db9f0:	f04f 0a01 	mov.w	sl, #1
   db9f4:	687b      	ldr	r3, [r7, #4]
   db9f6:	429e      	cmp	r6, r3
   db9f8:	d067      	beq.n	dbaca <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19e>
   db9fa:	b12e      	cbz	r6, dba08 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   db9fc:	7833      	ldrb	r3, [r6, #0]
   db9fe:	2b01      	cmp	r3, #1
   dba00:	d002      	beq.n	dba08 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   dba02:	2301      	movs	r3, #1
   dba04:	7033      	strb	r3, [r6, #0]
   dba06:	e066      	b.n	dbad6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   dba08:	68a0      	ldr	r0, [r4, #8]
   dba0a:	4286      	cmp	r6, r0
   dba0c:	d12c      	bne.n	dba68 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x13c>
   dba0e:	68e0      	ldr	r0, [r4, #12]
   dba10:	7803      	ldrb	r3, [r0, #0]
   dba12:	b93b      	cbnz	r3, dba24 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xf8>
   dba14:	f880 a000 	strb.w	sl, [r0]
   dba18:	4641      	mov	r1, r8
   dba1a:	4620      	mov	r0, r4
   dba1c:	7023      	strb	r3, [r4, #0]
   dba1e:	f7ff fecc 	bl	db7ba <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   dba22:	68e0      	ldr	r0, [r4, #12]
   dba24:	6882      	ldr	r2, [r0, #8]
   dba26:	68c3      	ldr	r3, [r0, #12]
   dba28:	b112      	cbz	r2, dba30 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x104>
   dba2a:	7811      	ldrb	r1, [r2, #0]
   dba2c:	2901      	cmp	r1, #1
   dba2e:	d103      	bne.n	dba38 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x10c>
   dba30:	b373      	cbz	r3, dba90 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   dba32:	7819      	ldrb	r1, [r3, #0]
   dba34:	2901      	cmp	r1, #1
   dba36:	d02b      	beq.n	dba90 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   dba38:	b113      	cbz	r3, dba40 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x114>
   dba3a:	781b      	ldrb	r3, [r3, #0]
   dba3c:	2b01      	cmp	r3, #1
   dba3e:	d107      	bne.n	dba50 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   dba40:	2301      	movs	r3, #1
   dba42:	7013      	strb	r3, [r2, #0]
   dba44:	2300      	movs	r3, #0
   dba46:	7003      	strb	r3, [r0, #0]
   dba48:	4641      	mov	r1, r8
   dba4a:	f7ff fecb 	bl	db7e4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   dba4e:	68e0      	ldr	r0, [r4, #12]
   dba50:	7823      	ldrb	r3, [r4, #0]
   dba52:	7003      	strb	r3, [r0, #0]
   dba54:	68c3      	ldr	r3, [r0, #12]
   dba56:	2201      	movs	r2, #1
   dba58:	7022      	strb	r2, [r4, #0]
   dba5a:	b103      	cbz	r3, dba5e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x132>
   dba5c:	701a      	strb	r2, [r3, #0]
   dba5e:	4641      	mov	r1, r8
   dba60:	4620      	mov	r0, r4
   dba62:	f7ff feaa 	bl	db7ba <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   dba66:	e030      	b.n	dbaca <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19e>
   dba68:	7803      	ldrb	r3, [r0, #0]
   dba6a:	b93b      	cbnz	r3, dba7c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x150>
   dba6c:	f880 a000 	strb.w	sl, [r0]
   dba70:	4641      	mov	r1, r8
   dba72:	4620      	mov	r0, r4
   dba74:	7023      	strb	r3, [r4, #0]
   dba76:	f7ff feb5 	bl	db7e4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   dba7a:	68a0      	ldr	r0, [r4, #8]
   dba7c:	68c2      	ldr	r2, [r0, #12]
   dba7e:	6883      	ldr	r3, [r0, #8]
   dba80:	b112      	cbz	r2, dba88 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15c>
   dba82:	7811      	ldrb	r1, [r2, #0]
   dba84:	2901      	cmp	r1, #1
   dba86:	d109      	bne.n	dba9c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x170>
   dba88:	b113      	cbz	r3, dba90 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   dba8a:	7819      	ldrb	r1, [r3, #0]
   dba8c:	2901      	cmp	r1, #1
   dba8e:	d105      	bne.n	dba9c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x170>
   dba90:	6863      	ldr	r3, [r4, #4]
   dba92:	f880 9000 	strb.w	r9, [r0]
   dba96:	4626      	mov	r6, r4
   dba98:	461c      	mov	r4, r3
   dba9a:	e7ab      	b.n	db9f4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc8>
   dba9c:	b113      	cbz	r3, dbaa4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x178>
   dba9e:	781b      	ldrb	r3, [r3, #0]
   dbaa0:	2b01      	cmp	r3, #1
   dbaa2:	d107      	bne.n	dbab4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x188>
   dbaa4:	2301      	movs	r3, #1
   dbaa6:	7013      	strb	r3, [r2, #0]
   dbaa8:	2300      	movs	r3, #0
   dbaaa:	7003      	strb	r3, [r0, #0]
   dbaac:	4641      	mov	r1, r8
   dbaae:	f7ff fe84 	bl	db7ba <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   dbab2:	68a0      	ldr	r0, [r4, #8]
   dbab4:	7823      	ldrb	r3, [r4, #0]
   dbab6:	7003      	strb	r3, [r0, #0]
   dbab8:	6883      	ldr	r3, [r0, #8]
   dbaba:	2201      	movs	r2, #1
   dbabc:	7022      	strb	r2, [r4, #0]
   dbabe:	b103      	cbz	r3, dbac2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x196>
   dbac0:	701a      	strb	r2, [r3, #0]
   dbac2:	4641      	mov	r1, r8
   dbac4:	4620      	mov	r0, r4
   dbac6:	f7ff fe8d 	bl	db7e4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   dbaca:	2e00      	cmp	r6, #0
   dbacc:	d199      	bne.n	dba02 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd6>
   dbace:	e002      	b.n	dbad6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   dbad0:	6844      	ldr	r4, [r0, #4]
   dbad2:	460e      	mov	r6, r1
   dbad4:	e75f      	b.n	db996 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x6a>
   dbad6:	4628      	mov	r0, r5
   dbad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dbadc <_ZSt25__throw_bad_function_callv>:
   dbadc:	b508      	push	{r3, lr}
   dbade:	f7fd fed9 	bl	d9894 <abort>
	...

000dbae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dbae4:	4b18      	ldr	r3, [pc, #96]	; (dbb48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dbae6:	681a      	ldr	r2, [r3, #0]
   dbae8:	07d1      	lsls	r1, r2, #31
   dbaea:	bf5c      	itt	pl
   dbaec:	2201      	movpl	r2, #1
   dbaee:	601a      	strpl	r2, [r3, #0]
   dbaf0:	4b16      	ldr	r3, [pc, #88]	; (dbb4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dbaf2:	681a      	ldr	r2, [r3, #0]
   dbaf4:	07d2      	lsls	r2, r2, #31
   dbaf6:	bf5c      	itt	pl
   dbaf8:	2201      	movpl	r2, #1
   dbafa:	601a      	strpl	r2, [r3, #0]
   dbafc:	4b14      	ldr	r3, [pc, #80]	; (dbb50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dbafe:	681a      	ldr	r2, [r3, #0]
   dbb00:	07d0      	lsls	r0, r2, #31
   dbb02:	bf5c      	itt	pl
   dbb04:	2201      	movpl	r2, #1
   dbb06:	601a      	strpl	r2, [r3, #0]
   dbb08:	4b12      	ldr	r3, [pc, #72]	; (dbb54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dbb0a:	681a      	ldr	r2, [r3, #0]
   dbb0c:	07d1      	lsls	r1, r2, #31
   dbb0e:	bf5c      	itt	pl
   dbb10:	2201      	movpl	r2, #1
   dbb12:	601a      	strpl	r2, [r3, #0]
   dbb14:	4b10      	ldr	r3, [pc, #64]	; (dbb58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dbb16:	681a      	ldr	r2, [r3, #0]
   dbb18:	07d2      	lsls	r2, r2, #31
   dbb1a:	bf5c      	itt	pl
   dbb1c:	2201      	movpl	r2, #1
   dbb1e:	601a      	strpl	r2, [r3, #0]
   dbb20:	4b0e      	ldr	r3, [pc, #56]	; (dbb5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dbb22:	681a      	ldr	r2, [r3, #0]
   dbb24:	07d0      	lsls	r0, r2, #31
   dbb26:	bf5c      	itt	pl
   dbb28:	2201      	movpl	r2, #1
   dbb2a:	601a      	strpl	r2, [r3, #0]
   dbb2c:	4b0c      	ldr	r3, [pc, #48]	; (dbb60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dbb2e:	681a      	ldr	r2, [r3, #0]
   dbb30:	07d1      	lsls	r1, r2, #31
   dbb32:	bf5c      	itt	pl
   dbb34:	2201      	movpl	r2, #1
   dbb36:	601a      	strpl	r2, [r3, #0]
   dbb38:	4b0a      	ldr	r3, [pc, #40]	; (dbb64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dbb3a:	681a      	ldr	r2, [r3, #0]
   dbb3c:	07d2      	lsls	r2, r2, #31
   dbb3e:	bf5c      	itt	pl
   dbb40:	2201      	movpl	r2, #1
   dbb42:	601a      	strpl	r2, [r3, #0]
   dbb44:	4770      	bx	lr
   dbb46:	bf00      	nop
   dbb48:	2003e644 	.word	0x2003e644
   dbb4c:	2003e640 	.word	0x2003e640
   dbb50:	2003e63c 	.word	0x2003e63c
   dbb54:	2003e638 	.word	0x2003e638
   dbb58:	2003e634 	.word	0x2003e634
   dbb5c:	2003e630 	.word	0x2003e630
   dbb60:	2003e62c 	.word	0x2003e62c
   dbb64:	2003e628 	.word	0x2003e628

000dbb68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dbb68:	4b24      	ldr	r3, [pc, #144]	; (dbbfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dbb6a:	681a      	ldr	r2, [r3, #0]
   dbb6c:	07d0      	lsls	r0, r2, #31
   dbb6e:	bf5c      	itt	pl
   dbb70:	2201      	movpl	r2, #1
   dbb72:	601a      	strpl	r2, [r3, #0]
   dbb74:	4b22      	ldr	r3, [pc, #136]	; (dbc00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dbb76:	681a      	ldr	r2, [r3, #0]
   dbb78:	07d1      	lsls	r1, r2, #31
   dbb7a:	bf5c      	itt	pl
   dbb7c:	2201      	movpl	r2, #1
   dbb7e:	601a      	strpl	r2, [r3, #0]
   dbb80:	4b20      	ldr	r3, [pc, #128]	; (dbc04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dbb82:	681a      	ldr	r2, [r3, #0]
   dbb84:	07d2      	lsls	r2, r2, #31
   dbb86:	bf5c      	itt	pl
   dbb88:	2201      	movpl	r2, #1
   dbb8a:	601a      	strpl	r2, [r3, #0]
   dbb8c:	4b1e      	ldr	r3, [pc, #120]	; (dbc08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dbb8e:	681a      	ldr	r2, [r3, #0]
   dbb90:	07d0      	lsls	r0, r2, #31
   dbb92:	bf5c      	itt	pl
   dbb94:	2201      	movpl	r2, #1
   dbb96:	601a      	strpl	r2, [r3, #0]
   dbb98:	4b1c      	ldr	r3, [pc, #112]	; (dbc0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dbb9a:	681a      	ldr	r2, [r3, #0]
   dbb9c:	07d1      	lsls	r1, r2, #31
   dbb9e:	bf5c      	itt	pl
   dbba0:	2201      	movpl	r2, #1
   dbba2:	601a      	strpl	r2, [r3, #0]
   dbba4:	4b1a      	ldr	r3, [pc, #104]	; (dbc10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dbba6:	681a      	ldr	r2, [r3, #0]
   dbba8:	07d2      	lsls	r2, r2, #31
   dbbaa:	bf5c      	itt	pl
   dbbac:	2201      	movpl	r2, #1
   dbbae:	601a      	strpl	r2, [r3, #0]
   dbbb0:	4b18      	ldr	r3, [pc, #96]	; (dbc14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dbbb2:	681a      	ldr	r2, [r3, #0]
   dbbb4:	07d0      	lsls	r0, r2, #31
   dbbb6:	bf5c      	itt	pl
   dbbb8:	2201      	movpl	r2, #1
   dbbba:	601a      	strpl	r2, [r3, #0]
   dbbbc:	4b16      	ldr	r3, [pc, #88]	; (dbc18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dbbbe:	681a      	ldr	r2, [r3, #0]
   dbbc0:	07d1      	lsls	r1, r2, #31
   dbbc2:	bf5c      	itt	pl
   dbbc4:	2201      	movpl	r2, #1
   dbbc6:	601a      	strpl	r2, [r3, #0]
   dbbc8:	4b14      	ldr	r3, [pc, #80]	; (dbc1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dbbca:	681a      	ldr	r2, [r3, #0]
   dbbcc:	07d2      	lsls	r2, r2, #31
   dbbce:	bf5c      	itt	pl
   dbbd0:	2201      	movpl	r2, #1
   dbbd2:	601a      	strpl	r2, [r3, #0]
   dbbd4:	4b12      	ldr	r3, [pc, #72]	; (dbc20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dbbd6:	681a      	ldr	r2, [r3, #0]
   dbbd8:	07d0      	lsls	r0, r2, #31
   dbbda:	bf5c      	itt	pl
   dbbdc:	2201      	movpl	r2, #1
   dbbde:	601a      	strpl	r2, [r3, #0]
   dbbe0:	4b10      	ldr	r3, [pc, #64]	; (dbc24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dbbe2:	681a      	ldr	r2, [r3, #0]
   dbbe4:	07d1      	lsls	r1, r2, #31
   dbbe6:	bf5c      	itt	pl
   dbbe8:	2201      	movpl	r2, #1
   dbbea:	601a      	strpl	r2, [r3, #0]
   dbbec:	4b0e      	ldr	r3, [pc, #56]	; (dbc28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dbbee:	681a      	ldr	r2, [r3, #0]
   dbbf0:	07d2      	lsls	r2, r2, #31
   dbbf2:	bf5c      	itt	pl
   dbbf4:	2201      	movpl	r2, #1
   dbbf6:	601a      	strpl	r2, [r3, #0]
   dbbf8:	4770      	bx	lr
   dbbfa:	bf00      	nop
   dbbfc:	2003e674 	.word	0x2003e674
   dbc00:	2003e670 	.word	0x2003e670
   dbc04:	2003e66c 	.word	0x2003e66c
   dbc08:	2003e668 	.word	0x2003e668
   dbc0c:	2003e664 	.word	0x2003e664
   dbc10:	2003e660 	.word	0x2003e660
   dbc14:	2003e65c 	.word	0x2003e65c
   dbc18:	2003e658 	.word	0x2003e658
   dbc1c:	2003e654 	.word	0x2003e654
   dbc20:	2003e650 	.word	0x2003e650
   dbc24:	2003e64c 	.word	0x2003e64c
   dbc28:	2003e648 	.word	0x2003e648

000dbc2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dbc2c:	4b24      	ldr	r3, [pc, #144]	; (dbcc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dbc2e:	681a      	ldr	r2, [r3, #0]
   dbc30:	07d0      	lsls	r0, r2, #31
   dbc32:	bf5c      	itt	pl
   dbc34:	2201      	movpl	r2, #1
   dbc36:	601a      	strpl	r2, [r3, #0]
   dbc38:	4b22      	ldr	r3, [pc, #136]	; (dbcc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dbc3a:	681a      	ldr	r2, [r3, #0]
   dbc3c:	07d1      	lsls	r1, r2, #31
   dbc3e:	bf5c      	itt	pl
   dbc40:	2201      	movpl	r2, #1
   dbc42:	601a      	strpl	r2, [r3, #0]
   dbc44:	4b20      	ldr	r3, [pc, #128]	; (dbcc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dbc46:	681a      	ldr	r2, [r3, #0]
   dbc48:	07d2      	lsls	r2, r2, #31
   dbc4a:	bf5c      	itt	pl
   dbc4c:	2201      	movpl	r2, #1
   dbc4e:	601a      	strpl	r2, [r3, #0]
   dbc50:	4b1e      	ldr	r3, [pc, #120]	; (dbccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dbc52:	681a      	ldr	r2, [r3, #0]
   dbc54:	07d0      	lsls	r0, r2, #31
   dbc56:	bf5c      	itt	pl
   dbc58:	2201      	movpl	r2, #1
   dbc5a:	601a      	strpl	r2, [r3, #0]
   dbc5c:	4b1c      	ldr	r3, [pc, #112]	; (dbcd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dbc5e:	681a      	ldr	r2, [r3, #0]
   dbc60:	07d1      	lsls	r1, r2, #31
   dbc62:	bf5c      	itt	pl
   dbc64:	2201      	movpl	r2, #1
   dbc66:	601a      	strpl	r2, [r3, #0]
   dbc68:	4b1a      	ldr	r3, [pc, #104]	; (dbcd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dbc6a:	681a      	ldr	r2, [r3, #0]
   dbc6c:	07d2      	lsls	r2, r2, #31
   dbc6e:	bf5c      	itt	pl
   dbc70:	2201      	movpl	r2, #1
   dbc72:	601a      	strpl	r2, [r3, #0]
   dbc74:	4b18      	ldr	r3, [pc, #96]	; (dbcd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dbc76:	681a      	ldr	r2, [r3, #0]
   dbc78:	07d0      	lsls	r0, r2, #31
   dbc7a:	bf5c      	itt	pl
   dbc7c:	2201      	movpl	r2, #1
   dbc7e:	601a      	strpl	r2, [r3, #0]
   dbc80:	4b16      	ldr	r3, [pc, #88]	; (dbcdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dbc82:	681a      	ldr	r2, [r3, #0]
   dbc84:	07d1      	lsls	r1, r2, #31
   dbc86:	bf5c      	itt	pl
   dbc88:	2201      	movpl	r2, #1
   dbc8a:	601a      	strpl	r2, [r3, #0]
   dbc8c:	4b14      	ldr	r3, [pc, #80]	; (dbce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dbc8e:	681a      	ldr	r2, [r3, #0]
   dbc90:	07d2      	lsls	r2, r2, #31
   dbc92:	bf5c      	itt	pl
   dbc94:	2201      	movpl	r2, #1
   dbc96:	601a      	strpl	r2, [r3, #0]
   dbc98:	4b12      	ldr	r3, [pc, #72]	; (dbce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dbc9a:	681a      	ldr	r2, [r3, #0]
   dbc9c:	07d0      	lsls	r0, r2, #31
   dbc9e:	bf5c      	itt	pl
   dbca0:	2201      	movpl	r2, #1
   dbca2:	601a      	strpl	r2, [r3, #0]
   dbca4:	4b10      	ldr	r3, [pc, #64]	; (dbce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dbca6:	681a      	ldr	r2, [r3, #0]
   dbca8:	07d1      	lsls	r1, r2, #31
   dbcaa:	bf5c      	itt	pl
   dbcac:	2201      	movpl	r2, #1
   dbcae:	601a      	strpl	r2, [r3, #0]
   dbcb0:	4b0e      	ldr	r3, [pc, #56]	; (dbcec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dbcb2:	681a      	ldr	r2, [r3, #0]
   dbcb4:	07d2      	lsls	r2, r2, #31
   dbcb6:	bf5c      	itt	pl
   dbcb8:	2201      	movpl	r2, #1
   dbcba:	601a      	strpl	r2, [r3, #0]
   dbcbc:	4770      	bx	lr
   dbcbe:	bf00      	nop
   dbcc0:	2003e6a4 	.word	0x2003e6a4
   dbcc4:	2003e6a0 	.word	0x2003e6a0
   dbcc8:	2003e69c 	.word	0x2003e69c
   dbccc:	2003e698 	.word	0x2003e698
   dbcd0:	2003e694 	.word	0x2003e694
   dbcd4:	2003e690 	.word	0x2003e690
   dbcd8:	2003e68c 	.word	0x2003e68c
   dbcdc:	2003e688 	.word	0x2003e688
   dbce0:	2003e684 	.word	0x2003e684
   dbce4:	2003e680 	.word	0x2003e680
   dbce8:	2003e67c 	.word	0x2003e67c
   dbcec:	2003e678 	.word	0x2003e678

000dbcf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dbcf0:	4b18      	ldr	r3, [pc, #96]	; (dbd54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dbcf2:	681a      	ldr	r2, [r3, #0]
   dbcf4:	07d1      	lsls	r1, r2, #31
   dbcf6:	bf5c      	itt	pl
   dbcf8:	2201      	movpl	r2, #1
   dbcfa:	601a      	strpl	r2, [r3, #0]
   dbcfc:	4b16      	ldr	r3, [pc, #88]	; (dbd58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dbcfe:	681a      	ldr	r2, [r3, #0]
   dbd00:	07d2      	lsls	r2, r2, #31
   dbd02:	bf5c      	itt	pl
   dbd04:	2201      	movpl	r2, #1
   dbd06:	601a      	strpl	r2, [r3, #0]
   dbd08:	4b14      	ldr	r3, [pc, #80]	; (dbd5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dbd0a:	681a      	ldr	r2, [r3, #0]
   dbd0c:	07d0      	lsls	r0, r2, #31
   dbd0e:	bf5c      	itt	pl
   dbd10:	2201      	movpl	r2, #1
   dbd12:	601a      	strpl	r2, [r3, #0]
   dbd14:	4b12      	ldr	r3, [pc, #72]	; (dbd60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dbd16:	681a      	ldr	r2, [r3, #0]
   dbd18:	07d1      	lsls	r1, r2, #31
   dbd1a:	bf5c      	itt	pl
   dbd1c:	2201      	movpl	r2, #1
   dbd1e:	601a      	strpl	r2, [r3, #0]
   dbd20:	4b10      	ldr	r3, [pc, #64]	; (dbd64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dbd22:	681a      	ldr	r2, [r3, #0]
   dbd24:	07d2      	lsls	r2, r2, #31
   dbd26:	bf5c      	itt	pl
   dbd28:	2201      	movpl	r2, #1
   dbd2a:	601a      	strpl	r2, [r3, #0]
   dbd2c:	4b0e      	ldr	r3, [pc, #56]	; (dbd68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dbd2e:	681a      	ldr	r2, [r3, #0]
   dbd30:	07d0      	lsls	r0, r2, #31
   dbd32:	bf5c      	itt	pl
   dbd34:	2201      	movpl	r2, #1
   dbd36:	601a      	strpl	r2, [r3, #0]
   dbd38:	4b0c      	ldr	r3, [pc, #48]	; (dbd6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dbd3a:	681a      	ldr	r2, [r3, #0]
   dbd3c:	07d1      	lsls	r1, r2, #31
   dbd3e:	bf5c      	itt	pl
   dbd40:	2201      	movpl	r2, #1
   dbd42:	601a      	strpl	r2, [r3, #0]
   dbd44:	4b0a      	ldr	r3, [pc, #40]	; (dbd70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dbd46:	681a      	ldr	r2, [r3, #0]
   dbd48:	07d2      	lsls	r2, r2, #31
   dbd4a:	bf5c      	itt	pl
   dbd4c:	2201      	movpl	r2, #1
   dbd4e:	601a      	strpl	r2, [r3, #0]
   dbd50:	4770      	bx	lr
   dbd52:	bf00      	nop
   dbd54:	2003e6c4 	.word	0x2003e6c4
   dbd58:	2003e6c0 	.word	0x2003e6c0
   dbd5c:	2003e6bc 	.word	0x2003e6bc
   dbd60:	2003e6b8 	.word	0x2003e6b8
   dbd64:	2003e6b4 	.word	0x2003e6b4
   dbd68:	2003e6b0 	.word	0x2003e6b0
   dbd6c:	2003e6ac 	.word	0x2003e6ac
   dbd70:	2003e6a8 	.word	0x2003e6a8
   dbd74:	00000000 	.word	0x00000000

000dbd78 <atan>:
   dbd78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbd7c:	ec55 4b10 	vmov	r4, r5, d0
   dbd80:	4bd1      	ldr	r3, [pc, #836]	; (dc0c8 <atan+0x350>)
   dbd82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dbd86:	429e      	cmp	r6, r3
   dbd88:	46ab      	mov	fp, r5
   dbd8a:	dd10      	ble.n	dbdae <atan+0x36>
   dbd8c:	4bcf      	ldr	r3, [pc, #828]	; (dc0cc <atan+0x354>)
   dbd8e:	429e      	cmp	r6, r3
   dbd90:	f300 80b2 	bgt.w	dbef8 <atan+0x180>
   dbd94:	f000 80ad 	beq.w	dbef2 <atan+0x17a>
   dbd98:	f1bb 0f00 	cmp.w	fp, #0
   dbd9c:	f340 80fd 	ble.w	dbf9a <atan+0x222>
   dbda0:	a5ad      	add	r5, pc, #692	; (adr r5, dc058 <atan+0x2e0>)
   dbda2:	e9d5 4500 	ldrd	r4, r5, [r5]
   dbda6:	ec45 4b10 	vmov	d0, r4, r5
   dbdaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbdae:	4bc8      	ldr	r3, [pc, #800]	; (dc0d0 <atan+0x358>)
   dbdb0:	429e      	cmp	r6, r3
   dbdb2:	f300 80c0 	bgt.w	dbf36 <atan+0x1be>
   dbdb6:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dbdba:	429e      	cmp	r6, r3
   dbdbc:	f340 80a8 	ble.w	dbf10 <atan+0x198>
   dbdc0:	f04f 3aff 	mov.w	sl, #4294967295
   dbdc4:	4622      	mov	r2, r4
   dbdc6:	462b      	mov	r3, r5
   dbdc8:	4620      	mov	r0, r4
   dbdca:	4629      	mov	r1, r5
   dbdcc:	f001 fe0c 	bl	dd9e8 <__aeabi_dmul>
   dbdd0:	4602      	mov	r2, r0
   dbdd2:	460b      	mov	r3, r1
   dbdd4:	4680      	mov	r8, r0
   dbdd6:	4689      	mov	r9, r1
   dbdd8:	f001 fe06 	bl	dd9e8 <__aeabi_dmul>
   dbddc:	a3a0      	add	r3, pc, #640	; (adr r3, dc060 <atan+0x2e8>)
   dbdde:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbde2:	4606      	mov	r6, r0
   dbde4:	460f      	mov	r7, r1
   dbde6:	f001 fdff 	bl	dd9e8 <__aeabi_dmul>
   dbdea:	a39f      	add	r3, pc, #636	; (adr r3, dc068 <atan+0x2f0>)
   dbdec:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbdf0:	f001 fc48 	bl	dd684 <__adddf3>
   dbdf4:	4632      	mov	r2, r6
   dbdf6:	463b      	mov	r3, r7
   dbdf8:	f001 fdf6 	bl	dd9e8 <__aeabi_dmul>
   dbdfc:	a39c      	add	r3, pc, #624	; (adr r3, dc070 <atan+0x2f8>)
   dbdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe02:	f001 fc3f 	bl	dd684 <__adddf3>
   dbe06:	4632      	mov	r2, r6
   dbe08:	463b      	mov	r3, r7
   dbe0a:	f001 fded 	bl	dd9e8 <__aeabi_dmul>
   dbe0e:	a39a      	add	r3, pc, #616	; (adr r3, dc078 <atan+0x300>)
   dbe10:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe14:	f001 fc36 	bl	dd684 <__adddf3>
   dbe18:	4632      	mov	r2, r6
   dbe1a:	463b      	mov	r3, r7
   dbe1c:	f001 fde4 	bl	dd9e8 <__aeabi_dmul>
   dbe20:	a397      	add	r3, pc, #604	; (adr r3, dc080 <atan+0x308>)
   dbe22:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe26:	f001 fc2d 	bl	dd684 <__adddf3>
   dbe2a:	4632      	mov	r2, r6
   dbe2c:	463b      	mov	r3, r7
   dbe2e:	f001 fddb 	bl	dd9e8 <__aeabi_dmul>
   dbe32:	a395      	add	r3, pc, #596	; (adr r3, dc088 <atan+0x310>)
   dbe34:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe38:	f001 fc24 	bl	dd684 <__adddf3>
   dbe3c:	4642      	mov	r2, r8
   dbe3e:	464b      	mov	r3, r9
   dbe40:	f001 fdd2 	bl	dd9e8 <__aeabi_dmul>
   dbe44:	a392      	add	r3, pc, #584	; (adr r3, dc090 <atan+0x318>)
   dbe46:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe4a:	4680      	mov	r8, r0
   dbe4c:	4689      	mov	r9, r1
   dbe4e:	4630      	mov	r0, r6
   dbe50:	4639      	mov	r1, r7
   dbe52:	f001 fdc9 	bl	dd9e8 <__aeabi_dmul>
   dbe56:	a390      	add	r3, pc, #576	; (adr r3, dc098 <atan+0x320>)
   dbe58:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe5c:	f001 fc10 	bl	dd680 <__aeabi_dsub>
   dbe60:	4632      	mov	r2, r6
   dbe62:	463b      	mov	r3, r7
   dbe64:	f001 fdc0 	bl	dd9e8 <__aeabi_dmul>
   dbe68:	a38d      	add	r3, pc, #564	; (adr r3, dc0a0 <atan+0x328>)
   dbe6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe6e:	f001 fc07 	bl	dd680 <__aeabi_dsub>
   dbe72:	4632      	mov	r2, r6
   dbe74:	463b      	mov	r3, r7
   dbe76:	f001 fdb7 	bl	dd9e8 <__aeabi_dmul>
   dbe7a:	a38b      	add	r3, pc, #556	; (adr r3, dc0a8 <atan+0x330>)
   dbe7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe80:	f001 fbfe 	bl	dd680 <__aeabi_dsub>
   dbe84:	4632      	mov	r2, r6
   dbe86:	463b      	mov	r3, r7
   dbe88:	f001 fdae 	bl	dd9e8 <__aeabi_dmul>
   dbe8c:	a388      	add	r3, pc, #544	; (adr r3, dc0b0 <atan+0x338>)
   dbe8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe92:	f001 fbf5 	bl	dd680 <__aeabi_dsub>
   dbe96:	4632      	mov	r2, r6
   dbe98:	463b      	mov	r3, r7
   dbe9a:	f001 fda5 	bl	dd9e8 <__aeabi_dmul>
   dbe9e:	f1ba 3fff 	cmp.w	sl, #4294967295
   dbea2:	4602      	mov	r2, r0
   dbea4:	460b      	mov	r3, r1
   dbea6:	d07c      	beq.n	dbfa2 <atan+0x22a>
   dbea8:	4640      	mov	r0, r8
   dbeaa:	4649      	mov	r1, r9
   dbeac:	f001 fbea 	bl	dd684 <__adddf3>
   dbeb0:	4622      	mov	r2, r4
   dbeb2:	462b      	mov	r3, r5
   dbeb4:	f001 fd98 	bl	dd9e8 <__aeabi_dmul>
   dbeb8:	4e86      	ldr	r6, [pc, #536]	; (dc0d4 <atan+0x35c>)
   dbeba:	4b87      	ldr	r3, [pc, #540]	; (dc0d8 <atan+0x360>)
   dbebc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   dbec0:	4456      	add	r6, sl
   dbec2:	449a      	add	sl, r3
   dbec4:	e9da 2300 	ldrd	r2, r3, [sl]
   dbec8:	f001 fbda 	bl	dd680 <__aeabi_dsub>
   dbecc:	4622      	mov	r2, r4
   dbece:	462b      	mov	r3, r5
   dbed0:	f001 fbd6 	bl	dd680 <__aeabi_dsub>
   dbed4:	4602      	mov	r2, r0
   dbed6:	460b      	mov	r3, r1
   dbed8:	e9d6 0100 	ldrd	r0, r1, [r6]
   dbedc:	f001 fbd0 	bl	dd680 <__aeabi_dsub>
   dbee0:	f1bb 0f00 	cmp.w	fp, #0
   dbee4:	db52      	blt.n	dbf8c <atan+0x214>
   dbee6:	4604      	mov	r4, r0
   dbee8:	460d      	mov	r5, r1
   dbeea:	ec45 4b10 	vmov	d0, r4, r5
   dbeee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbef2:	2c00      	cmp	r4, #0
   dbef4:	f43f af50 	beq.w	dbd98 <atan+0x20>
   dbef8:	4622      	mov	r2, r4
   dbefa:	462b      	mov	r3, r5
   dbefc:	4620      	mov	r0, r4
   dbefe:	4629      	mov	r1, r5
   dbf00:	f001 fbc0 	bl	dd684 <__adddf3>
   dbf04:	4604      	mov	r4, r0
   dbf06:	460d      	mov	r5, r1
   dbf08:	ec45 4b10 	vmov	d0, r4, r5
   dbf0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbf10:	a369      	add	r3, pc, #420	; (adr r3, dc0b8 <atan+0x340>)
   dbf12:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf16:	ee10 0a10 	vmov	r0, s0
   dbf1a:	4629      	mov	r1, r5
   dbf1c:	f001 fbb2 	bl	dd684 <__adddf3>
   dbf20:	2200      	movs	r2, #0
   dbf22:	4b6e      	ldr	r3, [pc, #440]	; (dc0dc <atan+0x364>)
   dbf24:	f001 fff0 	bl	ddf08 <__aeabi_dcmpgt>
   dbf28:	2800      	cmp	r0, #0
   dbf2a:	f43f af49 	beq.w	dbdc0 <atan+0x48>
   dbf2e:	ec45 4b10 	vmov	d0, r4, r5
   dbf32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbf36:	f000 f9cb 	bl	dc2d0 <fabs>
   dbf3a:	4b69      	ldr	r3, [pc, #420]	; (dc0e0 <atan+0x368>)
   dbf3c:	429e      	cmp	r6, r3
   dbf3e:	ec55 4b10 	vmov	r4, r5, d0
   dbf42:	dc3f      	bgt.n	dbfc4 <atan+0x24c>
   dbf44:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dbf48:	429e      	cmp	r6, r3
   dbf4a:	dc68      	bgt.n	dc01e <atan+0x2a6>
   dbf4c:	ee10 2a10 	vmov	r2, s0
   dbf50:	ee10 0a10 	vmov	r0, s0
   dbf54:	462b      	mov	r3, r5
   dbf56:	4629      	mov	r1, r5
   dbf58:	f001 fb94 	bl	dd684 <__adddf3>
   dbf5c:	2200      	movs	r2, #0
   dbf5e:	4b5f      	ldr	r3, [pc, #380]	; (dc0dc <atan+0x364>)
   dbf60:	f001 fb8e 	bl	dd680 <__aeabi_dsub>
   dbf64:	2200      	movs	r2, #0
   dbf66:	4606      	mov	r6, r0
   dbf68:	460f      	mov	r7, r1
   dbf6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dbf6e:	4620      	mov	r0, r4
   dbf70:	4629      	mov	r1, r5
   dbf72:	f001 fb87 	bl	dd684 <__adddf3>
   dbf76:	4602      	mov	r2, r0
   dbf78:	460b      	mov	r3, r1
   dbf7a:	4630      	mov	r0, r6
   dbf7c:	4639      	mov	r1, r7
   dbf7e:	f001 fe5d 	bl	ddc3c <__aeabi_ddiv>
   dbf82:	f04f 0a00 	mov.w	sl, #0
   dbf86:	4604      	mov	r4, r0
   dbf88:	460d      	mov	r5, r1
   dbf8a:	e71b      	b.n	dbdc4 <atan+0x4c>
   dbf8c:	4604      	mov	r4, r0
   dbf8e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   dbf92:	ec45 4b10 	vmov	d0, r4, r5
   dbf96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbf9a:	a549      	add	r5, pc, #292	; (adr r5, dc0c0 <atan+0x348>)
   dbf9c:	e9d5 4500 	ldrd	r4, r5, [r5]
   dbfa0:	e7b2      	b.n	dbf08 <atan+0x190>
   dbfa2:	4640      	mov	r0, r8
   dbfa4:	4649      	mov	r1, r9
   dbfa6:	f001 fb6d 	bl	dd684 <__adddf3>
   dbfaa:	4622      	mov	r2, r4
   dbfac:	462b      	mov	r3, r5
   dbfae:	f001 fd1b 	bl	dd9e8 <__aeabi_dmul>
   dbfb2:	4602      	mov	r2, r0
   dbfb4:	460b      	mov	r3, r1
   dbfb6:	4620      	mov	r0, r4
   dbfb8:	4629      	mov	r1, r5
   dbfba:	f001 fb61 	bl	dd680 <__aeabi_dsub>
   dbfbe:	4604      	mov	r4, r0
   dbfc0:	460d      	mov	r5, r1
   dbfc2:	e7a1      	b.n	dbf08 <atan+0x190>
   dbfc4:	4b47      	ldr	r3, [pc, #284]	; (dc0e4 <atan+0x36c>)
   dbfc6:	429e      	cmp	r6, r3
   dbfc8:	dc1d      	bgt.n	dc006 <atan+0x28e>
   dbfca:	ee10 0a10 	vmov	r0, s0
   dbfce:	2200      	movs	r2, #0
   dbfd0:	4b45      	ldr	r3, [pc, #276]	; (dc0e8 <atan+0x370>)
   dbfd2:	4629      	mov	r1, r5
   dbfd4:	f001 fb54 	bl	dd680 <__aeabi_dsub>
   dbfd8:	2200      	movs	r2, #0
   dbfda:	4606      	mov	r6, r0
   dbfdc:	460f      	mov	r7, r1
   dbfde:	4b42      	ldr	r3, [pc, #264]	; (dc0e8 <atan+0x370>)
   dbfe0:	4620      	mov	r0, r4
   dbfe2:	4629      	mov	r1, r5
   dbfe4:	f001 fd00 	bl	dd9e8 <__aeabi_dmul>
   dbfe8:	2200      	movs	r2, #0
   dbfea:	4b3c      	ldr	r3, [pc, #240]	; (dc0dc <atan+0x364>)
   dbfec:	f001 fb4a 	bl	dd684 <__adddf3>
   dbff0:	4602      	mov	r2, r0
   dbff2:	460b      	mov	r3, r1
   dbff4:	4630      	mov	r0, r6
   dbff6:	4639      	mov	r1, r7
   dbff8:	f001 fe20 	bl	ddc3c <__aeabi_ddiv>
   dbffc:	f04f 0a02 	mov.w	sl, #2
   dc000:	4604      	mov	r4, r0
   dc002:	460d      	mov	r5, r1
   dc004:	e6de      	b.n	dbdc4 <atan+0x4c>
   dc006:	462b      	mov	r3, r5
   dc008:	ee10 2a10 	vmov	r2, s0
   dc00c:	2000      	movs	r0, #0
   dc00e:	4937      	ldr	r1, [pc, #220]	; (dc0ec <atan+0x374>)
   dc010:	f001 fe14 	bl	ddc3c <__aeabi_ddiv>
   dc014:	f04f 0a03 	mov.w	sl, #3
   dc018:	4604      	mov	r4, r0
   dc01a:	460d      	mov	r5, r1
   dc01c:	e6d2      	b.n	dbdc4 <atan+0x4c>
   dc01e:	ee10 0a10 	vmov	r0, s0
   dc022:	2200      	movs	r2, #0
   dc024:	4b2d      	ldr	r3, [pc, #180]	; (dc0dc <atan+0x364>)
   dc026:	4629      	mov	r1, r5
   dc028:	f001 fb2a 	bl	dd680 <__aeabi_dsub>
   dc02c:	2200      	movs	r2, #0
   dc02e:	4606      	mov	r6, r0
   dc030:	460f      	mov	r7, r1
   dc032:	4b2a      	ldr	r3, [pc, #168]	; (dc0dc <atan+0x364>)
   dc034:	4620      	mov	r0, r4
   dc036:	4629      	mov	r1, r5
   dc038:	f001 fb24 	bl	dd684 <__adddf3>
   dc03c:	4602      	mov	r2, r0
   dc03e:	460b      	mov	r3, r1
   dc040:	4630      	mov	r0, r6
   dc042:	4639      	mov	r1, r7
   dc044:	f001 fdfa 	bl	ddc3c <__aeabi_ddiv>
   dc048:	f04f 0a01 	mov.w	sl, #1
   dc04c:	4604      	mov	r4, r0
   dc04e:	460d      	mov	r5, r1
   dc050:	e6b8      	b.n	dbdc4 <atan+0x4c>
   dc052:	bf00      	nop
   dc054:	f3af 8000 	nop.w
   dc058:	54442d18 	.word	0x54442d18
   dc05c:	3ff921fb 	.word	0x3ff921fb
   dc060:	e322da11 	.word	0xe322da11
   dc064:	3f90ad3a 	.word	0x3f90ad3a
   dc068:	24760deb 	.word	0x24760deb
   dc06c:	3fa97b4b 	.word	0x3fa97b4b
   dc070:	a0d03d51 	.word	0xa0d03d51
   dc074:	3fb10d66 	.word	0x3fb10d66
   dc078:	c54c206e 	.word	0xc54c206e
   dc07c:	3fb745cd 	.word	0x3fb745cd
   dc080:	920083ff 	.word	0x920083ff
   dc084:	3fc24924 	.word	0x3fc24924
   dc088:	5555550d 	.word	0x5555550d
   dc08c:	3fd55555 	.word	0x3fd55555
   dc090:	2c6a6c2f 	.word	0x2c6a6c2f
   dc094:	bfa2b444 	.word	0xbfa2b444
   dc098:	52defd9a 	.word	0x52defd9a
   dc09c:	3fadde2d 	.word	0x3fadde2d
   dc0a0:	af749a6d 	.word	0xaf749a6d
   dc0a4:	3fb3b0f2 	.word	0x3fb3b0f2
   dc0a8:	fe231671 	.word	0xfe231671
   dc0ac:	3fbc71c6 	.word	0x3fbc71c6
   dc0b0:	9998ebc4 	.word	0x9998ebc4
   dc0b4:	3fc99999 	.word	0x3fc99999
   dc0b8:	8800759c 	.word	0x8800759c
   dc0bc:	7e37e43c 	.word	0x7e37e43c
   dc0c0:	54442d18 	.word	0x54442d18
   dc0c4:	bff921fb 	.word	0xbff921fb
   dc0c8:	440fffff 	.word	0x440fffff
   dc0cc:	7ff00000 	.word	0x7ff00000
   dc0d0:	3fdbffff 	.word	0x3fdbffff
   dc0d4:	000e07b0 	.word	0x000e07b0
   dc0d8:	000e0790 	.word	0x000e0790
   dc0dc:	3ff00000 	.word	0x3ff00000
   dc0e0:	3ff2ffff 	.word	0x3ff2ffff
   dc0e4:	40037fff 	.word	0x40037fff
   dc0e8:	3ff80000 	.word	0x3ff80000
   dc0ec:	bff00000 	.word	0xbff00000

000dc0f0 <ceil>:
   dc0f0:	ec51 0b10 	vmov	r0, r1, d0
   dc0f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dc0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc0fc:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dc100:	2d13      	cmp	r5, #19
   dc102:	460c      	mov	r4, r1
   dc104:	460f      	mov	r7, r1
   dc106:	ee10 6a10 	vmov	r6, s0
   dc10a:	dc22      	bgt.n	dc152 <ceil+0x62>
   dc10c:	2d00      	cmp	r5, #0
   dc10e:	db52      	blt.n	dc1b6 <ceil+0xc6>
   dc110:	4b3d      	ldr	r3, [pc, #244]	; (dc208 <ceil+0x118>)
   dc112:	fa43 f805 	asr.w	r8, r3, r5
   dc116:	ea01 0308 	and.w	r3, r1, r8
   dc11a:	4303      	orrs	r3, r0
   dc11c:	d01e      	beq.n	dc15c <ceil+0x6c>
   dc11e:	a338      	add	r3, pc, #224	; (adr r3, dc200 <ceil+0x110>)
   dc120:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc124:	f001 faae 	bl	dd684 <__adddf3>
   dc128:	2200      	movs	r2, #0
   dc12a:	2300      	movs	r3, #0
   dc12c:	f001 feec 	bl	ddf08 <__aeabi_dcmpgt>
   dc130:	b148      	cbz	r0, dc146 <ceil+0x56>
   dc132:	2c00      	cmp	r4, #0
   dc134:	dd04      	ble.n	dc140 <ceil+0x50>
   dc136:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dc13a:	fa43 f505 	asr.w	r5, r3, r5
   dc13e:	442f      	add	r7, r5
   dc140:	ea27 0408 	bic.w	r4, r7, r8
   dc144:	2600      	movs	r6, #0
   dc146:	4623      	mov	r3, r4
   dc148:	4632      	mov	r2, r6
   dc14a:	ec43 2b10 	vmov	d0, r2, r3
   dc14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc152:	2d33      	cmp	r5, #51	; 0x33
   dc154:	dd06      	ble.n	dc164 <ceil+0x74>
   dc156:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dc15a:	d03e      	beq.n	dc1da <ceil+0xea>
   dc15c:	ec41 0b10 	vmov	d0, r0, r1
   dc160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc164:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dc168:	f04f 38ff 	mov.w	r8, #4294967295
   dc16c:	fa28 f803 	lsr.w	r8, r8, r3
   dc170:	ea10 0f08 	tst.w	r0, r8
   dc174:	d0f2      	beq.n	dc15c <ceil+0x6c>
   dc176:	a322      	add	r3, pc, #136	; (adr r3, dc200 <ceil+0x110>)
   dc178:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc17c:	f001 fa82 	bl	dd684 <__adddf3>
   dc180:	2200      	movs	r2, #0
   dc182:	2300      	movs	r3, #0
   dc184:	f001 fec0 	bl	ddf08 <__aeabi_dcmpgt>
   dc188:	2800      	cmp	r0, #0
   dc18a:	d0dc      	beq.n	dc146 <ceil+0x56>
   dc18c:	2c00      	cmp	r4, #0
   dc18e:	dd09      	ble.n	dc1a4 <ceil+0xb4>
   dc190:	2d14      	cmp	r5, #20
   dc192:	d031      	beq.n	dc1f8 <ceil+0x108>
   dc194:	2301      	movs	r3, #1
   dc196:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dc19a:	fa03 f505 	lsl.w	r5, r3, r5
   dc19e:	19ae      	adds	r6, r5, r6
   dc1a0:	bf28      	it	cs
   dc1a2:	18ff      	addcs	r7, r7, r3
   dc1a4:	463c      	mov	r4, r7
   dc1a6:	ea26 0608 	bic.w	r6, r6, r8
   dc1aa:	4623      	mov	r3, r4
   dc1ac:	4632      	mov	r2, r6
   dc1ae:	ec43 2b10 	vmov	d0, r2, r3
   dc1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc1b6:	a312      	add	r3, pc, #72	; (adr r3, dc200 <ceil+0x110>)
   dc1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1bc:	f001 fa62 	bl	dd684 <__adddf3>
   dc1c0:	2200      	movs	r2, #0
   dc1c2:	2300      	movs	r3, #0
   dc1c4:	f001 fea0 	bl	ddf08 <__aeabi_dcmpgt>
   dc1c8:	2800      	cmp	r0, #0
   dc1ca:	d0bc      	beq.n	dc146 <ceil+0x56>
   dc1cc:	2c00      	cmp	r4, #0
   dc1ce:	db0f      	blt.n	dc1f0 <ceil+0x100>
   dc1d0:	4326      	orrs	r6, r4
   dc1d2:	d00b      	beq.n	dc1ec <ceil+0xfc>
   dc1d4:	2600      	movs	r6, #0
   dc1d6:	4c0d      	ldr	r4, [pc, #52]	; (dc20c <ceil+0x11c>)
   dc1d8:	e7b5      	b.n	dc146 <ceil+0x56>
   dc1da:	ee10 2a10 	vmov	r2, s0
   dc1de:	460b      	mov	r3, r1
   dc1e0:	f001 fa50 	bl	dd684 <__adddf3>
   dc1e4:	ec41 0b10 	vmov	d0, r0, r1
   dc1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc1ec:	4634      	mov	r4, r6
   dc1ee:	e7aa      	b.n	dc146 <ceil+0x56>
   dc1f0:	2600      	movs	r6, #0
   dc1f2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   dc1f6:	e7a6      	b.n	dc146 <ceil+0x56>
   dc1f8:	3701      	adds	r7, #1
   dc1fa:	e7d3      	b.n	dc1a4 <ceil+0xb4>
   dc1fc:	f3af 8000 	nop.w
   dc200:	8800759c 	.word	0x8800759c
   dc204:	7e37e43c 	.word	0x7e37e43c
   dc208:	000fffff 	.word	0x000fffff
   dc20c:	3ff00000 	.word	0x3ff00000

000dc210 <cos>:
   dc210:	b500      	push	{lr}
   dc212:	ec51 0b10 	vmov	r0, r1, d0
   dc216:	4a2c      	ldr	r2, [pc, #176]	; (dc2c8 <cos+0xb8>)
   dc218:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc21c:	4293      	cmp	r3, r2
   dc21e:	b085      	sub	sp, #20
   dc220:	dd20      	ble.n	dc264 <cos+0x54>
   dc222:	4a2a      	ldr	r2, [pc, #168]	; (dc2cc <cos+0xbc>)
   dc224:	4293      	cmp	r3, r2
   dc226:	dd09      	ble.n	dc23c <cos+0x2c>
   dc228:	ee10 2a10 	vmov	r2, s0
   dc22c:	460b      	mov	r3, r1
   dc22e:	f001 fa27 	bl	dd680 <__aeabi_dsub>
   dc232:	ec41 0b10 	vmov	d0, r0, r1
   dc236:	b005      	add	sp, #20
   dc238:	f85d fb04 	ldr.w	pc, [sp], #4
   dc23c:	4668      	mov	r0, sp
   dc23e:	f000 f8af 	bl	dc3a0 <__ieee754_rem_pio2>
   dc242:	f000 0003 	and.w	r0, r0, #3
   dc246:	2801      	cmp	r0, #1
   dc248:	d028      	beq.n	dc29c <cos+0x8c>
   dc24a:	2802      	cmp	r0, #2
   dc24c:	d015      	beq.n	dc27a <cos+0x6a>
   dc24e:	b360      	cbz	r0, dc2aa <cos+0x9a>
   dc250:	2001      	movs	r0, #1
   dc252:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc256:	ed9d 0b00 	vldr	d0, [sp]
   dc25a:	f001 f81d 	bl	dd298 <__kernel_sin>
   dc25e:	ec51 0b10 	vmov	r0, r1, d0
   dc262:	e7e6      	b.n	dc232 <cos+0x22>
   dc264:	ed9f 1b16 	vldr	d1, [pc, #88]	; dc2c0 <cos+0xb0>
   dc268:	f000 fac2 	bl	dc7f0 <__kernel_cos>
   dc26c:	ec51 0b10 	vmov	r0, r1, d0
   dc270:	ec41 0b10 	vmov	d0, r0, r1
   dc274:	b005      	add	sp, #20
   dc276:	f85d fb04 	ldr.w	pc, [sp], #4
   dc27a:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc27e:	ed9d 0b00 	vldr	d0, [sp]
   dc282:	f000 fab5 	bl	dc7f0 <__kernel_cos>
   dc286:	ec53 2b10 	vmov	r2, r3, d0
   dc28a:	ee10 0a10 	vmov	r0, s0
   dc28e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dc292:	ec41 0b10 	vmov	d0, r0, r1
   dc296:	b005      	add	sp, #20
   dc298:	f85d fb04 	ldr.w	pc, [sp], #4
   dc29c:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc2a0:	ed9d 0b00 	vldr	d0, [sp]
   dc2a4:	f000 fff8 	bl	dd298 <__kernel_sin>
   dc2a8:	e7ed      	b.n	dc286 <cos+0x76>
   dc2aa:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc2ae:	ed9d 0b00 	vldr	d0, [sp]
   dc2b2:	f000 fa9d 	bl	dc7f0 <__kernel_cos>
   dc2b6:	ec51 0b10 	vmov	r0, r1, d0
   dc2ba:	e7ba      	b.n	dc232 <cos+0x22>
   dc2bc:	f3af 8000 	nop.w
	...
   dc2c8:	3fe921fb 	.word	0x3fe921fb
   dc2cc:	7fefffff 	.word	0x7fefffff

000dc2d0 <fabs>:
   dc2d0:	ec53 2b10 	vmov	r2, r3, d0
   dc2d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dc2d8:	ec43 2b10 	vmov	d0, r2, r3
   dc2dc:	4770      	bx	lr
   dc2de:	bf00      	nop

000dc2e0 <sin>:
   dc2e0:	b500      	push	{lr}
   dc2e2:	ec51 0b10 	vmov	r0, r1, d0
   dc2e6:	4a2c      	ldr	r2, [pc, #176]	; (dc398 <sin+0xb8>)
   dc2e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc2ec:	4293      	cmp	r3, r2
   dc2ee:	b085      	sub	sp, #20
   dc2f0:	dd27      	ble.n	dc342 <sin+0x62>
   dc2f2:	4a2a      	ldr	r2, [pc, #168]	; (dc39c <sin+0xbc>)
   dc2f4:	4293      	cmp	r3, r2
   dc2f6:	dd09      	ble.n	dc30c <sin+0x2c>
   dc2f8:	ee10 2a10 	vmov	r2, s0
   dc2fc:	460b      	mov	r3, r1
   dc2fe:	f001 f9bf 	bl	dd680 <__aeabi_dsub>
   dc302:	ec41 0b10 	vmov	d0, r0, r1
   dc306:	b005      	add	sp, #20
   dc308:	f85d fb04 	ldr.w	pc, [sp], #4
   dc30c:	4668      	mov	r0, sp
   dc30e:	f000 f847 	bl	dc3a0 <__ieee754_rem_pio2>
   dc312:	f000 0003 	and.w	r0, r0, #3
   dc316:	2801      	cmp	r0, #1
   dc318:	d027      	beq.n	dc36a <sin+0x8a>
   dc31a:	2802      	cmp	r0, #2
   dc31c:	d01d      	beq.n	dc35a <sin+0x7a>
   dc31e:	b368      	cbz	r0, dc37c <sin+0x9c>
   dc320:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc324:	ed9d 0b00 	vldr	d0, [sp]
   dc328:	f000 fa62 	bl	dc7f0 <__kernel_cos>
   dc32c:	ec53 2b10 	vmov	r2, r3, d0
   dc330:	ee10 0a10 	vmov	r0, s0
   dc334:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dc338:	ec41 0b10 	vmov	d0, r0, r1
   dc33c:	b005      	add	sp, #20
   dc33e:	f85d fb04 	ldr.w	pc, [sp], #4
   dc342:	2000      	movs	r0, #0
   dc344:	ed9f 1b12 	vldr	d1, [pc, #72]	; dc390 <sin+0xb0>
   dc348:	f000 ffa6 	bl	dd298 <__kernel_sin>
   dc34c:	ec51 0b10 	vmov	r0, r1, d0
   dc350:	ec41 0b10 	vmov	d0, r0, r1
   dc354:	b005      	add	sp, #20
   dc356:	f85d fb04 	ldr.w	pc, [sp], #4
   dc35a:	2001      	movs	r0, #1
   dc35c:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc360:	ed9d 0b00 	vldr	d0, [sp]
   dc364:	f000 ff98 	bl	dd298 <__kernel_sin>
   dc368:	e7e0      	b.n	dc32c <sin+0x4c>
   dc36a:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc36e:	ed9d 0b00 	vldr	d0, [sp]
   dc372:	f000 fa3d 	bl	dc7f0 <__kernel_cos>
   dc376:	ec51 0b10 	vmov	r0, r1, d0
   dc37a:	e7c2      	b.n	dc302 <sin+0x22>
   dc37c:	2001      	movs	r0, #1
   dc37e:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc382:	ed9d 0b00 	vldr	d0, [sp]
   dc386:	f000 ff87 	bl	dd298 <__kernel_sin>
   dc38a:	ec51 0b10 	vmov	r0, r1, d0
   dc38e:	e7b8      	b.n	dc302 <sin+0x22>
	...
   dc398:	3fe921fb 	.word	0x3fe921fb
   dc39c:	7fefffff 	.word	0x7fefffff

000dc3a0 <__ieee754_rem_pio2>:
   dc3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc3a4:	ec53 2b10 	vmov	r2, r3, d0
   dc3a8:	4997      	ldr	r1, [pc, #604]	; (dc608 <__ieee754_rem_pio2+0x268>)
   dc3aa:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   dc3ae:	458b      	cmp	fp, r1
   dc3b0:	b08f      	sub	sp, #60	; 0x3c
   dc3b2:	f340 8087 	ble.w	dc4c4 <__ieee754_rem_pio2+0x124>
   dc3b6:	4995      	ldr	r1, [pc, #596]	; (dc60c <__ieee754_rem_pio2+0x26c>)
   dc3b8:	458b      	cmp	fp, r1
   dc3ba:	461c      	mov	r4, r3
   dc3bc:	4682      	mov	sl, r0
   dc3be:	dc29      	bgt.n	dc414 <__ieee754_rem_pio2+0x74>
   dc3c0:	2c00      	cmp	r4, #0
   dc3c2:	4619      	mov	r1, r3
   dc3c4:	ee10 0a10 	vmov	r0, s0
   dc3c8:	a385      	add	r3, pc, #532	; (adr r3, dc5e0 <__ieee754_rem_pio2+0x240>)
   dc3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3ce:	f340 81a5 	ble.w	dc71c <__ieee754_rem_pio2+0x37c>
   dc3d2:	f001 f955 	bl	dd680 <__aeabi_dsub>
   dc3d6:	4b8e      	ldr	r3, [pc, #568]	; (dc610 <__ieee754_rem_pio2+0x270>)
   dc3d8:	459b      	cmp	fp, r3
   dc3da:	4604      	mov	r4, r0
   dc3dc:	460d      	mov	r5, r1
   dc3de:	f000 8087 	beq.w	dc4f0 <__ieee754_rem_pio2+0x150>
   dc3e2:	a381      	add	r3, pc, #516	; (adr r3, dc5e8 <__ieee754_rem_pio2+0x248>)
   dc3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3e8:	f001 f94a 	bl	dd680 <__aeabi_dsub>
   dc3ec:	4602      	mov	r2, r0
   dc3ee:	460b      	mov	r3, r1
   dc3f0:	e9ca 2300 	strd	r2, r3, [sl]
   dc3f4:	4620      	mov	r0, r4
   dc3f6:	4629      	mov	r1, r5
   dc3f8:	f001 f942 	bl	dd680 <__aeabi_dsub>
   dc3fc:	a37a      	add	r3, pc, #488	; (adr r3, dc5e8 <__ieee754_rem_pio2+0x248>)
   dc3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc402:	f001 f93d 	bl	dd680 <__aeabi_dsub>
   dc406:	2501      	movs	r5, #1
   dc408:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc40c:	4628      	mov	r0, r5
   dc40e:	b00f      	add	sp, #60	; 0x3c
   dc410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc414:	497f      	ldr	r1, [pc, #508]	; (dc614 <__ieee754_rem_pio2+0x274>)
   dc416:	458b      	cmp	fp, r1
   dc418:	f340 8087 	ble.w	dc52a <__ieee754_rem_pio2+0x18a>
   dc41c:	497e      	ldr	r1, [pc, #504]	; (dc618 <__ieee754_rem_pio2+0x278>)
   dc41e:	458b      	cmp	fp, r1
   dc420:	dc5b      	bgt.n	dc4da <__ieee754_rem_pio2+0x13a>
   dc422:	ea4f 552b 	mov.w	r5, fp, asr #20
   dc426:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   dc42a:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   dc42e:	4610      	mov	r0, r2
   dc430:	4639      	mov	r1, r7
   dc432:	ee10 6a10 	vmov	r6, s0
   dc436:	f001 fd87 	bl	ddf48 <__aeabi_d2iz>
   dc43a:	f001 fa6f 	bl	dd91c <__aeabi_i2d>
   dc43e:	4680      	mov	r8, r0
   dc440:	4689      	mov	r9, r1
   dc442:	4642      	mov	r2, r8
   dc444:	464b      	mov	r3, r9
   dc446:	4630      	mov	r0, r6
   dc448:	4639      	mov	r1, r7
   dc44a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   dc44e:	f001 f917 	bl	dd680 <__aeabi_dsub>
   dc452:	2200      	movs	r2, #0
   dc454:	4b71      	ldr	r3, [pc, #452]	; (dc61c <__ieee754_rem_pio2+0x27c>)
   dc456:	f001 fac7 	bl	dd9e8 <__aeabi_dmul>
   dc45a:	4689      	mov	r9, r1
   dc45c:	4680      	mov	r8, r0
   dc45e:	f001 fd73 	bl	ddf48 <__aeabi_d2iz>
   dc462:	f001 fa5b 	bl	dd91c <__aeabi_i2d>
   dc466:	4606      	mov	r6, r0
   dc468:	460f      	mov	r7, r1
   dc46a:	4632      	mov	r2, r6
   dc46c:	463b      	mov	r3, r7
   dc46e:	4640      	mov	r0, r8
   dc470:	4649      	mov	r1, r9
   dc472:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   dc476:	f001 f903 	bl	dd680 <__aeabi_dsub>
   dc47a:	2200      	movs	r2, #0
   dc47c:	4b67      	ldr	r3, [pc, #412]	; (dc61c <__ieee754_rem_pio2+0x27c>)
   dc47e:	f001 fab3 	bl	dd9e8 <__aeabi_dmul>
   dc482:	2200      	movs	r2, #0
   dc484:	2300      	movs	r3, #0
   dc486:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc48a:	f001 fd15 	bl	ddeb8 <__aeabi_dcmpeq>
   dc48e:	2800      	cmp	r0, #0
   dc490:	f000 8170 	beq.w	dc774 <__ieee754_rem_pio2+0x3d4>
   dc494:	2300      	movs	r3, #0
   dc496:	4630      	mov	r0, r6
   dc498:	4639      	mov	r1, r7
   dc49a:	2200      	movs	r2, #0
   dc49c:	f001 fd0c 	bl	ddeb8 <__aeabi_dcmpeq>
   dc4a0:	2800      	cmp	r0, #0
   dc4a2:	bf14      	ite	ne
   dc4a4:	2301      	movne	r3, #1
   dc4a6:	2302      	moveq	r3, #2
   dc4a8:	4a5d      	ldr	r2, [pc, #372]	; (dc620 <__ieee754_rem_pio2+0x280>)
   dc4aa:	9201      	str	r2, [sp, #4]
   dc4ac:	2102      	movs	r1, #2
   dc4ae:	9100      	str	r1, [sp, #0]
   dc4b0:	462a      	mov	r2, r5
   dc4b2:	4651      	mov	r1, sl
   dc4b4:	a808      	add	r0, sp, #32
   dc4b6:	f000 fadf 	bl	dca78 <__kernel_rem_pio2>
   dc4ba:	2c00      	cmp	r4, #0
   dc4bc:	f2c0 814c 	blt.w	dc758 <__ieee754_rem_pio2+0x3b8>
   dc4c0:	4605      	mov	r5, r0
   dc4c2:	e006      	b.n	dc4d2 <__ieee754_rem_pio2+0x132>
   dc4c4:	ed80 0b00 	vstr	d0, [r0]
   dc4c8:	2500      	movs	r5, #0
   dc4ca:	2400      	movs	r4, #0
   dc4cc:	e9c0 4502 	strd	r4, r5, [r0, #8]
   dc4d0:	2500      	movs	r5, #0
   dc4d2:	4628      	mov	r0, r5
   dc4d4:	b00f      	add	sp, #60	; 0x3c
   dc4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc4da:	ee10 0a10 	vmov	r0, s0
   dc4de:	4619      	mov	r1, r3
   dc4e0:	f001 f8ce 	bl	dd680 <__aeabi_dsub>
   dc4e4:	2500      	movs	r5, #0
   dc4e6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc4ea:	e9ca 0100 	strd	r0, r1, [sl]
   dc4ee:	e7f0      	b.n	dc4d2 <__ieee754_rem_pio2+0x132>
   dc4f0:	a33f      	add	r3, pc, #252	; (adr r3, dc5f0 <__ieee754_rem_pio2+0x250>)
   dc4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc4f6:	f001 f8c3 	bl	dd680 <__aeabi_dsub>
   dc4fa:	a33f      	add	r3, pc, #252	; (adr r3, dc5f8 <__ieee754_rem_pio2+0x258>)
   dc4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc500:	460d      	mov	r5, r1
   dc502:	4604      	mov	r4, r0
   dc504:	f001 f8bc 	bl	dd680 <__aeabi_dsub>
   dc508:	4602      	mov	r2, r0
   dc50a:	460b      	mov	r3, r1
   dc50c:	e9ca 2300 	strd	r2, r3, [sl]
   dc510:	4629      	mov	r1, r5
   dc512:	4620      	mov	r0, r4
   dc514:	f001 f8b4 	bl	dd680 <__aeabi_dsub>
   dc518:	a337      	add	r3, pc, #220	; (adr r3, dc5f8 <__ieee754_rem_pio2+0x258>)
   dc51a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc51e:	f001 f8af 	bl	dd680 <__aeabi_dsub>
   dc522:	2501      	movs	r5, #1
   dc524:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc528:	e7d3      	b.n	dc4d2 <__ieee754_rem_pio2+0x132>
   dc52a:	f7ff fed1 	bl	dc2d0 <fabs>
   dc52e:	ec57 6b10 	vmov	r6, r7, d0
   dc532:	ee10 0a10 	vmov	r0, s0
   dc536:	a332      	add	r3, pc, #200	; (adr r3, dc600 <__ieee754_rem_pio2+0x260>)
   dc538:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc53c:	4639      	mov	r1, r7
   dc53e:	f001 fa53 	bl	dd9e8 <__aeabi_dmul>
   dc542:	2200      	movs	r2, #0
   dc544:	4b37      	ldr	r3, [pc, #220]	; (dc624 <__ieee754_rem_pio2+0x284>)
   dc546:	f001 f89d 	bl	dd684 <__adddf3>
   dc54a:	f001 fcfd 	bl	ddf48 <__aeabi_d2iz>
   dc54e:	4605      	mov	r5, r0
   dc550:	f001 f9e4 	bl	dd91c <__aeabi_i2d>
   dc554:	a322      	add	r3, pc, #136	; (adr r3, dc5e0 <__ieee754_rem_pio2+0x240>)
   dc556:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc55a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   dc55e:	f001 fa43 	bl	dd9e8 <__aeabi_dmul>
   dc562:	4602      	mov	r2, r0
   dc564:	460b      	mov	r3, r1
   dc566:	4630      	mov	r0, r6
   dc568:	4639      	mov	r1, r7
   dc56a:	f001 f889 	bl	dd680 <__aeabi_dsub>
   dc56e:	a31e      	add	r3, pc, #120	; (adr r3, dc5e8 <__ieee754_rem_pio2+0x248>)
   dc570:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc574:	4680      	mov	r8, r0
   dc576:	4689      	mov	r9, r1
   dc578:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dc57c:	f001 fa34 	bl	dd9e8 <__aeabi_dmul>
   dc580:	2d1f      	cmp	r5, #31
   dc582:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dc586:	dc51      	bgt.n	dc62c <__ieee754_rem_pio2+0x28c>
   dc588:	4b27      	ldr	r3, [pc, #156]	; (dc628 <__ieee754_rem_pio2+0x288>)
   dc58a:	1e6a      	subs	r2, r5, #1
   dc58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   dc590:	459b      	cmp	fp, r3
   dc592:	d04b      	beq.n	dc62c <__ieee754_rem_pio2+0x28c>
   dc594:	4602      	mov	r2, r0
   dc596:	460b      	mov	r3, r1
   dc598:	4640      	mov	r0, r8
   dc59a:	4649      	mov	r1, r9
   dc59c:	f001 f870 	bl	dd680 <__aeabi_dsub>
   dc5a0:	4606      	mov	r6, r0
   dc5a2:	460f      	mov	r7, r1
   dc5a4:	e9ca 6700 	strd	r6, r7, [sl]
   dc5a8:	4632      	mov	r2, r6
   dc5aa:	463b      	mov	r3, r7
   dc5ac:	4640      	mov	r0, r8
   dc5ae:	4649      	mov	r1, r9
   dc5b0:	f001 f866 	bl	dd680 <__aeabi_dsub>
   dc5b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc5b8:	f001 f862 	bl	dd680 <__aeabi_dsub>
   dc5bc:	2c00      	cmp	r4, #0
   dc5be:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc5c2:	da86      	bge.n	dc4d2 <__ieee754_rem_pio2+0x132>
   dc5c4:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   dc5c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc5cc:	426d      	negs	r5, r5
   dc5ce:	f8ca 6000 	str.w	r6, [sl]
   dc5d2:	f8ca 4004 	str.w	r4, [sl, #4]
   dc5d6:	f8ca 0008 	str.w	r0, [sl, #8]
   dc5da:	f8ca 300c 	str.w	r3, [sl, #12]
   dc5de:	e778      	b.n	dc4d2 <__ieee754_rem_pio2+0x132>
   dc5e0:	54400000 	.word	0x54400000
   dc5e4:	3ff921fb 	.word	0x3ff921fb
   dc5e8:	1a626331 	.word	0x1a626331
   dc5ec:	3dd0b461 	.word	0x3dd0b461
   dc5f0:	1a600000 	.word	0x1a600000
   dc5f4:	3dd0b461 	.word	0x3dd0b461
   dc5f8:	2e037073 	.word	0x2e037073
   dc5fc:	3ba3198a 	.word	0x3ba3198a
   dc600:	6dc9c883 	.word	0x6dc9c883
   dc604:	3fe45f30 	.word	0x3fe45f30
   dc608:	3fe921fb 	.word	0x3fe921fb
   dc60c:	4002d97b 	.word	0x4002d97b
   dc610:	3ff921fb 	.word	0x3ff921fb
   dc614:	413921fb 	.word	0x413921fb
   dc618:	7fefffff 	.word	0x7fefffff
   dc61c:	41700000 	.word	0x41700000
   dc620:	000e0850 	.word	0x000e0850
   dc624:	3fe00000 	.word	0x3fe00000
   dc628:	000e07d0 	.word	0x000e07d0
   dc62c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc630:	4640      	mov	r0, r8
   dc632:	4649      	mov	r1, r9
   dc634:	f001 f824 	bl	dd680 <__aeabi_dsub>
   dc638:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   dc63c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dc640:	ebc3 030b 	rsb	r3, r3, fp
   dc644:	4606      	mov	r6, r0
   dc646:	460f      	mov	r7, r1
   dc648:	2b10      	cmp	r3, #16
   dc64a:	e9ca 6700 	strd	r6, r7, [sl]
   dc64e:	ddab      	ble.n	dc5a8 <__ieee754_rem_pio2+0x208>
   dc650:	a35d      	add	r3, pc, #372	; (adr r3, dc7c8 <__ieee754_rem_pio2+0x428>)
   dc652:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dc65a:	f001 f9c5 	bl	dd9e8 <__aeabi_dmul>
   dc65e:	4606      	mov	r6, r0
   dc660:	460f      	mov	r7, r1
   dc662:	4602      	mov	r2, r0
   dc664:	460b      	mov	r3, r1
   dc666:	4640      	mov	r0, r8
   dc668:	4649      	mov	r1, r9
   dc66a:	f001 f809 	bl	dd680 <__aeabi_dsub>
   dc66e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dc672:	4602      	mov	r2, r0
   dc674:	460b      	mov	r3, r1
   dc676:	4640      	mov	r0, r8
   dc678:	4649      	mov	r1, r9
   dc67a:	f001 f801 	bl	dd680 <__aeabi_dsub>
   dc67e:	4632      	mov	r2, r6
   dc680:	463b      	mov	r3, r7
   dc682:	f000 fffd 	bl	dd680 <__aeabi_dsub>
   dc686:	a352      	add	r3, pc, #328	; (adr r3, dc7d0 <__ieee754_rem_pio2+0x430>)
   dc688:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc68c:	4606      	mov	r6, r0
   dc68e:	460f      	mov	r7, r1
   dc690:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dc694:	f001 f9a8 	bl	dd9e8 <__aeabi_dmul>
   dc698:	4632      	mov	r2, r6
   dc69a:	463b      	mov	r3, r7
   dc69c:	f000 fff0 	bl	dd680 <__aeabi_dsub>
   dc6a0:	460b      	mov	r3, r1
   dc6a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dc6a6:	4602      	mov	r2, r0
   dc6a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dc6ac:	f000 ffe8 	bl	dd680 <__aeabi_dsub>
   dc6b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dc6b4:	ebc3 0b0b 	rsb	fp, r3, fp
   dc6b8:	4606      	mov	r6, r0
   dc6ba:	460f      	mov	r7, r1
   dc6bc:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   dc6c0:	e9ca 6700 	strd	r6, r7, [sl]
   dc6c4:	dd76      	ble.n	dc7b4 <__ieee754_rem_pio2+0x414>
   dc6c6:	a345      	add	r3, pc, #276	; (adr r3, dc7dc <__ieee754_rem_pio2+0x43c>)
   dc6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc6cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dc6d0:	f001 f98a 	bl	dd9e8 <__aeabi_dmul>
   dc6d4:	4606      	mov	r6, r0
   dc6d6:	460f      	mov	r7, r1
   dc6d8:	4602      	mov	r2, r0
   dc6da:	460b      	mov	r3, r1
   dc6dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dc6e0:	f000 ffce 	bl	dd680 <__aeabi_dsub>
   dc6e4:	4602      	mov	r2, r0
   dc6e6:	460b      	mov	r3, r1
   dc6e8:	4680      	mov	r8, r0
   dc6ea:	4689      	mov	r9, r1
   dc6ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dc6f0:	f000 ffc6 	bl	dd680 <__aeabi_dsub>
   dc6f4:	4632      	mov	r2, r6
   dc6f6:	463b      	mov	r3, r7
   dc6f8:	f000 ffc2 	bl	dd680 <__aeabi_dsub>
   dc6fc:	a339      	add	r3, pc, #228	; (adr r3, dc7e4 <__ieee754_rem_pio2+0x444>)
   dc6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc702:	4606      	mov	r6, r0
   dc704:	460f      	mov	r7, r1
   dc706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dc70a:	f001 f96d 	bl	dd9e8 <__aeabi_dmul>
   dc70e:	4632      	mov	r2, r6
   dc710:	463b      	mov	r3, r7
   dc712:	f000 ffb5 	bl	dd680 <__aeabi_dsub>
   dc716:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dc71a:	e73b      	b.n	dc594 <__ieee754_rem_pio2+0x1f4>
   dc71c:	f000 ffb2 	bl	dd684 <__adddf3>
   dc720:	4b2d      	ldr	r3, [pc, #180]	; (dc7d8 <__ieee754_rem_pio2+0x438>)
   dc722:	459b      	cmp	fp, r3
   dc724:	4604      	mov	r4, r0
   dc726:	460d      	mov	r5, r1
   dc728:	d026      	beq.n	dc778 <__ieee754_rem_pio2+0x3d8>
   dc72a:	a325      	add	r3, pc, #148	; (adr r3, dc7c0 <__ieee754_rem_pio2+0x420>)
   dc72c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc730:	f000 ffa8 	bl	dd684 <__adddf3>
   dc734:	4602      	mov	r2, r0
   dc736:	460b      	mov	r3, r1
   dc738:	e9ca 2300 	strd	r2, r3, [sl]
   dc73c:	4629      	mov	r1, r5
   dc73e:	4620      	mov	r0, r4
   dc740:	f000 ff9e 	bl	dd680 <__aeabi_dsub>
   dc744:	a31e      	add	r3, pc, #120	; (adr r3, dc7c0 <__ieee754_rem_pio2+0x420>)
   dc746:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc74a:	f000 ff9b 	bl	dd684 <__adddf3>
   dc74e:	f04f 35ff 	mov.w	r5, #4294967295
   dc752:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc756:	e6bc      	b.n	dc4d2 <__ieee754_rem_pio2+0x132>
   dc758:	f8da 2004 	ldr.w	r2, [sl, #4]
   dc75c:	f8da 300c 	ldr.w	r3, [sl, #12]
   dc760:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   dc764:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   dc768:	4245      	negs	r5, r0
   dc76a:	f8ca 2004 	str.w	r2, [sl, #4]
   dc76e:	f8ca 300c 	str.w	r3, [sl, #12]
   dc772:	e6ae      	b.n	dc4d2 <__ieee754_rem_pio2+0x132>
   dc774:	2303      	movs	r3, #3
   dc776:	e697      	b.n	dc4a8 <__ieee754_rem_pio2+0x108>
   dc778:	a313      	add	r3, pc, #76	; (adr r3, dc7c8 <__ieee754_rem_pio2+0x428>)
   dc77a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc77e:	f000 ff81 	bl	dd684 <__adddf3>
   dc782:	a313      	add	r3, pc, #76	; (adr r3, dc7d0 <__ieee754_rem_pio2+0x430>)
   dc784:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc788:	460d      	mov	r5, r1
   dc78a:	4604      	mov	r4, r0
   dc78c:	f000 ff7a 	bl	dd684 <__adddf3>
   dc790:	4602      	mov	r2, r0
   dc792:	460b      	mov	r3, r1
   dc794:	e9ca 2300 	strd	r2, r3, [sl]
   dc798:	4629      	mov	r1, r5
   dc79a:	4620      	mov	r0, r4
   dc79c:	f000 ff70 	bl	dd680 <__aeabi_dsub>
   dc7a0:	a30b      	add	r3, pc, #44	; (adr r3, dc7d0 <__ieee754_rem_pio2+0x430>)
   dc7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc7a6:	f000 ff6d 	bl	dd684 <__adddf3>
   dc7aa:	f04f 35ff 	mov.w	r5, #4294967295
   dc7ae:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc7b2:	e68e      	b.n	dc4d2 <__ieee754_rem_pio2+0x132>
   dc7b4:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   dc7b8:	e6f6      	b.n	dc5a8 <__ieee754_rem_pio2+0x208>
   dc7ba:	bf00      	nop
   dc7bc:	f3af 8000 	nop.w
   dc7c0:	1a626331 	.word	0x1a626331
   dc7c4:	3dd0b461 	.word	0x3dd0b461
   dc7c8:	1a600000 	.word	0x1a600000
   dc7cc:	3dd0b461 	.word	0x3dd0b461
   dc7d0:	2e037073 	.word	0x2e037073
   dc7d4:	3ba3198a 	.word	0x3ba3198a
   dc7d8:	3ff921fb 	.word	0x3ff921fb
   dc7dc:	2e000000 	.word	0x2e000000
   dc7e0:	3ba3198a 	.word	0x3ba3198a
   dc7e4:	252049c1 	.word	0x252049c1
   dc7e8:	397b839a 	.word	0x397b839a
   dc7ec:	00000000 	.word	0x00000000

000dc7f0 <__kernel_cos>:
   dc7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc7f4:	ec57 6b10 	vmov	r6, r7, d0
   dc7f8:	ed2d 8b02 	vpush	{d8}
   dc7fc:	eeb0 8a41 	vmov.f32	s16, s2
   dc800:	eef0 8a61 	vmov.f32	s17, s3
   dc804:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   dc808:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   dc80c:	b083      	sub	sp, #12
   dc80e:	da72      	bge.n	dc8f6 <__kernel_cos+0x106>
   dc810:	ee10 0a10 	vmov	r0, s0
   dc814:	4639      	mov	r1, r7
   dc816:	f001 fb97 	bl	ddf48 <__aeabi_d2iz>
   dc81a:	2800      	cmp	r0, #0
   dc81c:	f000 80f6 	beq.w	dca0c <__kernel_cos+0x21c>
   dc820:	4632      	mov	r2, r6
   dc822:	463b      	mov	r3, r7
   dc824:	4630      	mov	r0, r6
   dc826:	4639      	mov	r1, r7
   dc828:	f001 f8de 	bl	dd9e8 <__aeabi_dmul>
   dc82c:	a37c      	add	r3, pc, #496	; (adr r3, dca20 <__kernel_cos+0x230>)
   dc82e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc832:	4604      	mov	r4, r0
   dc834:	460d      	mov	r5, r1
   dc836:	f001 f8d7 	bl	dd9e8 <__aeabi_dmul>
   dc83a:	a37b      	add	r3, pc, #492	; (adr r3, dca28 <__kernel_cos+0x238>)
   dc83c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc840:	f000 ff20 	bl	dd684 <__adddf3>
   dc844:	4622      	mov	r2, r4
   dc846:	462b      	mov	r3, r5
   dc848:	f001 f8ce 	bl	dd9e8 <__aeabi_dmul>
   dc84c:	a378      	add	r3, pc, #480	; (adr r3, dca30 <__kernel_cos+0x240>)
   dc84e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc852:	f000 ff15 	bl	dd680 <__aeabi_dsub>
   dc856:	4622      	mov	r2, r4
   dc858:	462b      	mov	r3, r5
   dc85a:	f001 f8c5 	bl	dd9e8 <__aeabi_dmul>
   dc85e:	a376      	add	r3, pc, #472	; (adr r3, dca38 <__kernel_cos+0x248>)
   dc860:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc864:	f000 ff0e 	bl	dd684 <__adddf3>
   dc868:	4622      	mov	r2, r4
   dc86a:	462b      	mov	r3, r5
   dc86c:	f001 f8bc 	bl	dd9e8 <__aeabi_dmul>
   dc870:	a373      	add	r3, pc, #460	; (adr r3, dca40 <__kernel_cos+0x250>)
   dc872:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc876:	f000 ff03 	bl	dd680 <__aeabi_dsub>
   dc87a:	4622      	mov	r2, r4
   dc87c:	462b      	mov	r3, r5
   dc87e:	f001 f8b3 	bl	dd9e8 <__aeabi_dmul>
   dc882:	a371      	add	r3, pc, #452	; (adr r3, dca48 <__kernel_cos+0x258>)
   dc884:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc888:	f000 fefc 	bl	dd684 <__adddf3>
   dc88c:	4622      	mov	r2, r4
   dc88e:	462b      	mov	r3, r5
   dc890:	f001 f8aa 	bl	dd9e8 <__aeabi_dmul>
   dc894:	4682      	mov	sl, r0
   dc896:	468b      	mov	fp, r1
   dc898:	2200      	movs	r2, #0
   dc89a:	4b71      	ldr	r3, [pc, #452]	; (dca60 <__kernel_cos+0x270>)
   dc89c:	4620      	mov	r0, r4
   dc89e:	4629      	mov	r1, r5
   dc8a0:	f001 f8a2 	bl	dd9e8 <__aeabi_dmul>
   dc8a4:	4652      	mov	r2, sl
   dc8a6:	4680      	mov	r8, r0
   dc8a8:	4689      	mov	r9, r1
   dc8aa:	465b      	mov	r3, fp
   dc8ac:	4620      	mov	r0, r4
   dc8ae:	4629      	mov	r1, r5
   dc8b0:	f001 f89a 	bl	dd9e8 <__aeabi_dmul>
   dc8b4:	ec53 2b18 	vmov	r2, r3, d8
   dc8b8:	4604      	mov	r4, r0
   dc8ba:	460d      	mov	r5, r1
   dc8bc:	4630      	mov	r0, r6
   dc8be:	4639      	mov	r1, r7
   dc8c0:	f001 f892 	bl	dd9e8 <__aeabi_dmul>
   dc8c4:	4602      	mov	r2, r0
   dc8c6:	460b      	mov	r3, r1
   dc8c8:	4620      	mov	r0, r4
   dc8ca:	4629      	mov	r1, r5
   dc8cc:	f000 fed8 	bl	dd680 <__aeabi_dsub>
   dc8d0:	4602      	mov	r2, r0
   dc8d2:	460b      	mov	r3, r1
   dc8d4:	4640      	mov	r0, r8
   dc8d6:	4649      	mov	r1, r9
   dc8d8:	f000 fed2 	bl	dd680 <__aeabi_dsub>
   dc8dc:	4602      	mov	r2, r0
   dc8de:	460b      	mov	r3, r1
   dc8e0:	2000      	movs	r0, #0
   dc8e2:	4960      	ldr	r1, [pc, #384]	; (dca64 <__kernel_cos+0x274>)
   dc8e4:	f000 fecc 	bl	dd680 <__aeabi_dsub>
   dc8e8:	ec41 0b10 	vmov	d0, r0, r1
   dc8ec:	b003      	add	sp, #12
   dc8ee:	ecbd 8b02 	vpop	{d8}
   dc8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc8f6:	ee10 2a10 	vmov	r2, s0
   dc8fa:	ee10 0a10 	vmov	r0, s0
   dc8fe:	463b      	mov	r3, r7
   dc900:	4639      	mov	r1, r7
   dc902:	f001 f871 	bl	dd9e8 <__aeabi_dmul>
   dc906:	a346      	add	r3, pc, #280	; (adr r3, dca20 <__kernel_cos+0x230>)
   dc908:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc90c:	4604      	mov	r4, r0
   dc90e:	460d      	mov	r5, r1
   dc910:	f001 f86a 	bl	dd9e8 <__aeabi_dmul>
   dc914:	a344      	add	r3, pc, #272	; (adr r3, dca28 <__kernel_cos+0x238>)
   dc916:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc91a:	f000 feb3 	bl	dd684 <__adddf3>
   dc91e:	4622      	mov	r2, r4
   dc920:	462b      	mov	r3, r5
   dc922:	f001 f861 	bl	dd9e8 <__aeabi_dmul>
   dc926:	a342      	add	r3, pc, #264	; (adr r3, dca30 <__kernel_cos+0x240>)
   dc928:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc92c:	f000 fea8 	bl	dd680 <__aeabi_dsub>
   dc930:	4622      	mov	r2, r4
   dc932:	462b      	mov	r3, r5
   dc934:	f001 f858 	bl	dd9e8 <__aeabi_dmul>
   dc938:	a33f      	add	r3, pc, #252	; (adr r3, dca38 <__kernel_cos+0x248>)
   dc93a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc93e:	f000 fea1 	bl	dd684 <__adddf3>
   dc942:	4622      	mov	r2, r4
   dc944:	462b      	mov	r3, r5
   dc946:	f001 f84f 	bl	dd9e8 <__aeabi_dmul>
   dc94a:	a33d      	add	r3, pc, #244	; (adr r3, dca40 <__kernel_cos+0x250>)
   dc94c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc950:	f000 fe96 	bl	dd680 <__aeabi_dsub>
   dc954:	4622      	mov	r2, r4
   dc956:	462b      	mov	r3, r5
   dc958:	f001 f846 	bl	dd9e8 <__aeabi_dmul>
   dc95c:	a33a      	add	r3, pc, #232	; (adr r3, dca48 <__kernel_cos+0x258>)
   dc95e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc962:	f000 fe8f 	bl	dd684 <__adddf3>
   dc966:	462b      	mov	r3, r5
   dc968:	4622      	mov	r2, r4
   dc96a:	f001 f83d 	bl	dd9e8 <__aeabi_dmul>
   dc96e:	4b3e      	ldr	r3, [pc, #248]	; (dca68 <__kernel_cos+0x278>)
   dc970:	4599      	cmp	r9, r3
   dc972:	4682      	mov	sl, r0
   dc974:	468b      	mov	fp, r1
   dc976:	dd8f      	ble.n	dc898 <__kernel_cos+0xa8>
   dc978:	4b3c      	ldr	r3, [pc, #240]	; (dca6c <__kernel_cos+0x27c>)
   dc97a:	4599      	cmp	r9, r3
   dc97c:	dc3d      	bgt.n	dc9fa <__kernel_cos+0x20a>
   dc97e:	2200      	movs	r2, #0
   dc980:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   dc984:	2000      	movs	r0, #0
   dc986:	4937      	ldr	r1, [pc, #220]	; (dca64 <__kernel_cos+0x274>)
   dc988:	4690      	mov	r8, r2
   dc98a:	4699      	mov	r9, r3
   dc98c:	f000 fe78 	bl	dd680 <__aeabi_dsub>
   dc990:	e9cd 0100 	strd	r0, r1, [sp]
   dc994:	2200      	movs	r2, #0
   dc996:	4b32      	ldr	r3, [pc, #200]	; (dca60 <__kernel_cos+0x270>)
   dc998:	4620      	mov	r0, r4
   dc99a:	4629      	mov	r1, r5
   dc99c:	f001 f824 	bl	dd9e8 <__aeabi_dmul>
   dc9a0:	4642      	mov	r2, r8
   dc9a2:	464b      	mov	r3, r9
   dc9a4:	f000 fe6c 	bl	dd680 <__aeabi_dsub>
   dc9a8:	4652      	mov	r2, sl
   dc9aa:	4680      	mov	r8, r0
   dc9ac:	4689      	mov	r9, r1
   dc9ae:	465b      	mov	r3, fp
   dc9b0:	4620      	mov	r0, r4
   dc9b2:	4629      	mov	r1, r5
   dc9b4:	f001 f818 	bl	dd9e8 <__aeabi_dmul>
   dc9b8:	ec53 2b18 	vmov	r2, r3, d8
   dc9bc:	4604      	mov	r4, r0
   dc9be:	460d      	mov	r5, r1
   dc9c0:	4630      	mov	r0, r6
   dc9c2:	4639      	mov	r1, r7
   dc9c4:	f001 f810 	bl	dd9e8 <__aeabi_dmul>
   dc9c8:	4602      	mov	r2, r0
   dc9ca:	460b      	mov	r3, r1
   dc9cc:	4620      	mov	r0, r4
   dc9ce:	4629      	mov	r1, r5
   dc9d0:	f000 fe56 	bl	dd680 <__aeabi_dsub>
   dc9d4:	4602      	mov	r2, r0
   dc9d6:	460b      	mov	r3, r1
   dc9d8:	4640      	mov	r0, r8
   dc9da:	4649      	mov	r1, r9
   dc9dc:	f000 fe50 	bl	dd680 <__aeabi_dsub>
   dc9e0:	4602      	mov	r2, r0
   dc9e2:	460b      	mov	r3, r1
   dc9e4:	e9dd 0100 	ldrd	r0, r1, [sp]
   dc9e8:	f000 fe4a 	bl	dd680 <__aeabi_dsub>
   dc9ec:	ec41 0b10 	vmov	d0, r0, r1
   dc9f0:	b003      	add	sp, #12
   dc9f2:	ecbd 8b02 	vpop	{d8}
   dc9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc9fa:	ed9f 7b15 	vldr	d7, [pc, #84]	; dca50 <__kernel_cos+0x260>
   dc9fe:	f04f 0800 	mov.w	r8, #0
   dca02:	ed8d 7b00 	vstr	d7, [sp]
   dca06:	f8df 9068 	ldr.w	r9, [pc, #104]	; dca70 <__kernel_cos+0x280>
   dca0a:	e7c3      	b.n	dc994 <__kernel_cos+0x1a4>
   dca0c:	ed9f 0b12 	vldr	d0, [pc, #72]	; dca58 <__kernel_cos+0x268>
   dca10:	b003      	add	sp, #12
   dca12:	ecbd 8b02 	vpop	{d8}
   dca16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dca1a:	bf00      	nop
   dca1c:	f3af 8000 	nop.w
   dca20:	be8838d4 	.word	0xbe8838d4
   dca24:	bda8fae9 	.word	0xbda8fae9
   dca28:	bdb4b1c4 	.word	0xbdb4b1c4
   dca2c:	3e21ee9e 	.word	0x3e21ee9e
   dca30:	809c52ad 	.word	0x809c52ad
   dca34:	3e927e4f 	.word	0x3e927e4f
   dca38:	19cb1590 	.word	0x19cb1590
   dca3c:	3efa01a0 	.word	0x3efa01a0
   dca40:	16c15177 	.word	0x16c15177
   dca44:	3f56c16c 	.word	0x3f56c16c
   dca48:	5555554c 	.word	0x5555554c
   dca4c:	3fa55555 	.word	0x3fa55555
   dca50:	00000000 	.word	0x00000000
   dca54:	3fe70000 	.word	0x3fe70000
   dca58:	00000000 	.word	0x00000000
   dca5c:	3ff00000 	.word	0x3ff00000
   dca60:	3fe00000 	.word	0x3fe00000
   dca64:	3ff00000 	.word	0x3ff00000
   dca68:	3fd33332 	.word	0x3fd33332
   dca6c:	3fe90000 	.word	0x3fe90000
   dca70:	3fd20000 	.word	0x3fd20000
   dca74:	00000000 	.word	0x00000000

000dca78 <__kernel_rem_pio2>:
   dca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dca7c:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   dca80:	4c81      	ldr	r4, [pc, #516]	; (dcc88 <__kernel_rem_pio2+0x210>)
   dca82:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   dca84:	4d81      	ldr	r5, [pc, #516]	; (dcc8c <__kernel_rem_pio2+0x214>)
   dca86:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   dca8a:	9407      	str	r4, [sp, #28]
   dca8c:	4626      	mov	r6, r4
   dca8e:	1ed4      	subs	r4, r2, #3
   dca90:	fb85 7504 	smull	r7, r5, r5, r4
   dca94:	17e4      	asrs	r4, r4, #31
   dca96:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   dca9a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   dca9e:	461d      	mov	r5, r3
   dcaa0:	930a      	str	r3, [sp, #40]	; 0x28
   dcaa2:	1c63      	adds	r3, r4, #1
   dcaa4:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   dcaa8:	3d01      	subs	r5, #1
   dcaaa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   dcaae:	9306      	str	r3, [sp, #24]
   dcab0:	462b      	mov	r3, r5
   dcab2:	940b      	str	r4, [sp, #44]	; 0x2c
   dcab4:	9500      	str	r5, [sp, #0]
   dcab6:	1b65      	subs	r5, r4, r5
   dcab8:	18f4      	adds	r4, r6, r3
   dcaba:	9003      	str	r0, [sp, #12]
   dcabc:	9108      	str	r1, [sp, #32]
   dcabe:	d416      	bmi.n	dcaee <__kernel_rem_pio2+0x76>
   dcac0:	442c      	add	r4, r5
   dcac2:	3401      	adds	r4, #1
   dcac4:	ae22      	add	r6, sp, #136	; 0x88
   dcac6:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   dcac8:	e008      	b.n	dcadc <__kernel_rem_pio2+0x64>
   dcaca:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   dcace:	f000 ff25 	bl	dd91c <__aeabi_i2d>
   dcad2:	3501      	adds	r5, #1
   dcad4:	42a5      	cmp	r5, r4
   dcad6:	e8e6 0102 	strd	r0, r1, [r6], #8
   dcada:	d008      	beq.n	dcaee <__kernel_rem_pio2+0x76>
   dcadc:	2d00      	cmp	r5, #0
   dcade:	daf4      	bge.n	dcaca <__kernel_rem_pio2+0x52>
   dcae0:	3501      	adds	r5, #1
   dcae2:	2000      	movs	r0, #0
   dcae4:	2100      	movs	r1, #0
   dcae6:	42a5      	cmp	r5, r4
   dcae8:	e8e6 0102 	strd	r0, r1, [r6], #8
   dcaec:	d1f6      	bne.n	dcadc <__kernel_rem_pio2+0x64>
   dcaee:	9b07      	ldr	r3, [sp, #28]
   dcaf0:	2b00      	cmp	r3, #0
   dcaf2:	f2c0 83c2 	blt.w	dd27a <__kernel_rem_pio2+0x802>
   dcaf6:	9b07      	ldr	r3, [sp, #28]
   dcaf8:	f103 0b01 	add.w	fp, r3, #1
   dcafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dcafe:	a922      	add	r1, sp, #136	; 0x88
   dcb00:	00db      	lsls	r3, r3, #3
   dcb02:	461a      	mov	r2, r3
   dcb04:	eb01 0903 	add.w	r9, r1, r3
   dcb08:	9304      	str	r3, [sp, #16]
   dcb0a:	9b03      	ldr	r3, [sp, #12]
   dcb0c:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   dcb10:	4619      	mov	r1, r3
   dcb12:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   dcb16:	eb01 0802 	add.w	r8, r1, r2
   dcb1a:	9b00      	ldr	r3, [sp, #0]
   dcb1c:	2b00      	cmp	r3, #0
   dcb1e:	f2c0 818f 	blt.w	dce40 <__kernel_rem_pio2+0x3c8>
   dcb22:	9c03      	ldr	r4, [sp, #12]
   dcb24:	464d      	mov	r5, r9
   dcb26:	2600      	movs	r6, #0
   dcb28:	2700      	movs	r7, #0
   dcb2a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   dcb2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   dcb32:	f000 ff59 	bl	dd9e8 <__aeabi_dmul>
   dcb36:	4602      	mov	r2, r0
   dcb38:	460b      	mov	r3, r1
   dcb3a:	4630      	mov	r0, r6
   dcb3c:	4639      	mov	r1, r7
   dcb3e:	f000 fda1 	bl	dd684 <__adddf3>
   dcb42:	4544      	cmp	r4, r8
   dcb44:	4606      	mov	r6, r0
   dcb46:	460f      	mov	r7, r1
   dcb48:	d1ef      	bne.n	dcb2a <__kernel_rem_pio2+0xb2>
   dcb4a:	e8ea 6702 	strd	r6, r7, [sl], #8
   dcb4e:	45da      	cmp	sl, fp
   dcb50:	f109 0908 	add.w	r9, r9, #8
   dcb54:	d1e1      	bne.n	dcb1a <__kernel_rem_pio2+0xa2>
   dcb56:	9907      	ldr	r1, [sp, #28]
   dcb58:	9804      	ldr	r0, [sp, #16]
   dcb5a:	9c03      	ldr	r4, [sp, #12]
   dcb5c:	9104      	str	r1, [sp, #16]
   dcb5e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   dcb62:	3b02      	subs	r3, #2
   dcb64:	009b      	lsls	r3, r3, #2
   dcb66:	4420      	add	r0, r4
   dcb68:	1d1a      	adds	r2, r3, #4
   dcb6a:	4683      	mov	fp, r0
   dcb6c:	a80e      	add	r0, sp, #56	; 0x38
   dcb6e:	4402      	add	r2, r0
   dcb70:	4403      	add	r3, r0
   dcb72:	920d      	str	r2, [sp, #52]	; 0x34
   dcb74:	930c      	str	r3, [sp, #48]	; 0x30
   dcb76:	9a04      	ldr	r2, [sp, #16]
   dcb78:	a99a      	add	r1, sp, #616	; 0x268
   dcb7a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   dcb7e:	2a00      	cmp	r2, #0
   dcb80:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   dcb84:	dd29      	ble.n	dcbda <__kernel_rem_pio2+0x162>
   dcb86:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   dcb8a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   dcb8e:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   dcb92:	2200      	movs	r2, #0
   dcb94:	4b3e      	ldr	r3, [pc, #248]	; (dcc90 <__kernel_rem_pio2+0x218>)
   dcb96:	4620      	mov	r0, r4
   dcb98:	4629      	mov	r1, r5
   dcb9a:	f000 ff25 	bl	dd9e8 <__aeabi_dmul>
   dcb9e:	f001 f9d3 	bl	ddf48 <__aeabi_d2iz>
   dcba2:	f000 febb 	bl	dd91c <__aeabi_i2d>
   dcba6:	2200      	movs	r2, #0
   dcba8:	4b3a      	ldr	r3, [pc, #232]	; (dcc94 <__kernel_rem_pio2+0x21c>)
   dcbaa:	4606      	mov	r6, r0
   dcbac:	460f      	mov	r7, r1
   dcbae:	f000 ff1b 	bl	dd9e8 <__aeabi_dmul>
   dcbb2:	4602      	mov	r2, r0
   dcbb4:	460b      	mov	r3, r1
   dcbb6:	4620      	mov	r0, r4
   dcbb8:	4629      	mov	r1, r5
   dcbba:	f000 fd61 	bl	dd680 <__aeabi_dsub>
   dcbbe:	f001 f9c3 	bl	ddf48 <__aeabi_d2iz>
   dcbc2:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   dcbc6:	f849 0f04 	str.w	r0, [r9, #4]!
   dcbca:	4639      	mov	r1, r7
   dcbcc:	4630      	mov	r0, r6
   dcbce:	f000 fd59 	bl	dd684 <__adddf3>
   dcbd2:	45d0      	cmp	r8, sl
   dcbd4:	4604      	mov	r4, r0
   dcbd6:	460d      	mov	r5, r1
   dcbd8:	d1db      	bne.n	dcb92 <__kernel_rem_pio2+0x11a>
   dcbda:	f8dd 9018 	ldr.w	r9, [sp, #24]
   dcbde:	ec45 4b10 	vmov	d0, r4, r5
   dcbe2:	4648      	mov	r0, r9
   dcbe4:	f000 fcb4 	bl	dd550 <scalbn>
   dcbe8:	ec55 4b10 	vmov	r4, r5, d0
   dcbec:	2200      	movs	r2, #0
   dcbee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   dcbf2:	ee10 0a10 	vmov	r0, s0
   dcbf6:	4629      	mov	r1, r5
   dcbf8:	f000 fef6 	bl	dd9e8 <__aeabi_dmul>
   dcbfc:	ec41 0b10 	vmov	d0, r0, r1
   dcc00:	f000 fc16 	bl	dd430 <floor>
   dcc04:	2200      	movs	r2, #0
   dcc06:	ec51 0b10 	vmov	r0, r1, d0
   dcc0a:	4b23      	ldr	r3, [pc, #140]	; (dcc98 <__kernel_rem_pio2+0x220>)
   dcc0c:	f000 feec 	bl	dd9e8 <__aeabi_dmul>
   dcc10:	4602      	mov	r2, r0
   dcc12:	460b      	mov	r3, r1
   dcc14:	4620      	mov	r0, r4
   dcc16:	4629      	mov	r1, r5
   dcc18:	f000 fd32 	bl	dd680 <__aeabi_dsub>
   dcc1c:	460d      	mov	r5, r1
   dcc1e:	4604      	mov	r4, r0
   dcc20:	f001 f992 	bl	ddf48 <__aeabi_d2iz>
   dcc24:	4680      	mov	r8, r0
   dcc26:	f000 fe79 	bl	dd91c <__aeabi_i2d>
   dcc2a:	460b      	mov	r3, r1
   dcc2c:	4602      	mov	r2, r0
   dcc2e:	4629      	mov	r1, r5
   dcc30:	4620      	mov	r0, r4
   dcc32:	f000 fd25 	bl	dd680 <__aeabi_dsub>
   dcc36:	464b      	mov	r3, r9
   dcc38:	2b00      	cmp	r3, #0
   dcc3a:	4606      	mov	r6, r0
   dcc3c:	460f      	mov	r7, r1
   dcc3e:	f340 80e5 	ble.w	dce0c <__kernel_rem_pio2+0x394>
   dcc42:	9a04      	ldr	r2, [sp, #16]
   dcc44:	a90e      	add	r1, sp, #56	; 0x38
   dcc46:	3a01      	subs	r2, #1
   dcc48:	f1c9 0318 	rsb	r3, r9, #24
   dcc4c:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   dcc50:	fa45 f103 	asr.w	r1, r5, r3
   dcc54:	fa01 f303 	lsl.w	r3, r1, r3
   dcc58:	a80e      	add	r0, sp, #56	; 0x38
   dcc5a:	1aeb      	subs	r3, r5, r3
   dcc5c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   dcc60:	f1c9 0517 	rsb	r5, r9, #23
   dcc64:	4488      	add	r8, r1
   dcc66:	fa43 f505 	asr.w	r5, r3, r5
   dcc6a:	2d00      	cmp	r5, #0
   dcc6c:	dd41      	ble.n	dccf2 <__kernel_rem_pio2+0x27a>
   dcc6e:	9b04      	ldr	r3, [sp, #16]
   dcc70:	2b00      	cmp	r3, #0
   dcc72:	f108 0801 	add.w	r8, r8, #1
   dcc76:	f340 82c9 	ble.w	dd20c <__kernel_rem_pio2+0x794>
   dcc7a:	2200      	movs	r2, #0
   dcc7c:	4614      	mov	r4, r2
   dcc7e:	a90d      	add	r1, sp, #52	; 0x34
   dcc80:	9804      	ldr	r0, [sp, #16]
   dcc82:	46ae      	mov	lr, r5
   dcc84:	e012      	b.n	dccac <__kernel_rem_pio2+0x234>
   dcc86:	bf00      	nop
   dcc88:	000e0958 	.word	0x000e0958
   dcc8c:	2aaaaaab 	.word	0x2aaaaaab
   dcc90:	3e700000 	.word	0x3e700000
   dcc94:	41700000 	.word	0x41700000
   dcc98:	40200000 	.word	0x40200000
   dcc9c:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   dcca0:	b10b      	cbz	r3, dcca6 <__kernel_rem_pio2+0x22e>
   dcca2:	600d      	str	r5, [r1, #0]
   dcca4:	2401      	movs	r4, #1
   dcca6:	3201      	adds	r2, #1
   dcca8:	4290      	cmp	r0, r2
   dccaa:	dd0d      	ble.n	dccc8 <__kernel_rem_pio2+0x250>
   dccac:	f851 3f04 	ldr.w	r3, [r1, #4]!
   dccb0:	2c00      	cmp	r4, #0
   dccb2:	d0f3      	beq.n	dcc9c <__kernel_rem_pio2+0x224>
   dccb4:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   dccb8:	3201      	adds	r2, #1
   dccba:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   dccbe:	4290      	cmp	r0, r2
   dccc0:	600b      	str	r3, [r1, #0]
   dccc2:	f04f 0401 	mov.w	r4, #1
   dccc6:	dcf1      	bgt.n	dccac <__kernel_rem_pio2+0x234>
   dccc8:	4675      	mov	r5, lr
   dccca:	9b06      	ldr	r3, [sp, #24]
   dcccc:	2b00      	cmp	r3, #0
   dccce:	dd0e      	ble.n	dccee <__kernel_rem_pio2+0x276>
   dccd0:	2b01      	cmp	r3, #1
   dccd2:	f000 80a3 	beq.w	dce1c <__kernel_rem_pio2+0x3a4>
   dccd6:	2b02      	cmp	r3, #2
   dccd8:	d109      	bne.n	dccee <__kernel_rem_pio2+0x276>
   dccda:	9b04      	ldr	r3, [sp, #16]
   dccdc:	1e5a      	subs	r2, r3, #1
   dccde:	ab0e      	add	r3, sp, #56	; 0x38
   dcce0:	a90e      	add	r1, sp, #56	; 0x38
   dcce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   dcce6:	f3c3 0315 	ubfx	r3, r3, #0, #22
   dccea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   dccee:	2d02      	cmp	r5, #2
   dccf0:	d074      	beq.n	dcddc <__kernel_rem_pio2+0x364>
   dccf2:	2200      	movs	r2, #0
   dccf4:	2300      	movs	r3, #0
   dccf6:	4630      	mov	r0, r6
   dccf8:	4639      	mov	r1, r7
   dccfa:	f001 f8dd 	bl	ddeb8 <__aeabi_dcmpeq>
   dccfe:	2800      	cmp	r0, #0
   dcd00:	f000 8249 	beq.w	dd196 <__kernel_rem_pio2+0x71e>
   dcd04:	9a04      	ldr	r2, [sp, #16]
   dcd06:	9b07      	ldr	r3, [sp, #28]
   dcd08:	1e50      	subs	r0, r2, #1
   dcd0a:	4283      	cmp	r3, r0
   dcd0c:	dc10      	bgt.n	dcd30 <__kernel_rem_pio2+0x2b8>
   dcd0e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   dcd12:	3b01      	subs	r3, #1
   dcd14:	aa0e      	add	r2, sp, #56	; 0x38
   dcd16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   dcd18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dcd1c:	2200      	movs	r2, #0
   dcd1e:	f853 1904 	ldr.w	r1, [r3], #-4
   dcd22:	42a3      	cmp	r3, r4
   dcd24:	ea42 0201 	orr.w	r2, r2, r1
   dcd28:	d1f9      	bne.n	dcd1e <__kernel_rem_pio2+0x2a6>
   dcd2a:	2a00      	cmp	r2, #0
   dcd2c:	f040 80a4 	bne.w	dce78 <__kernel_rem_pio2+0x400>
   dcd30:	9b07      	ldr	r3, [sp, #28]
   dcd32:	aa0e      	add	r2, sp, #56	; 0x38
   dcd34:	3b01      	subs	r3, #1
   dcd36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   dcd3a:	2b00      	cmp	r3, #0
   dcd3c:	f040 8264 	bne.w	dd208 <__kernel_rem_pio2+0x790>
   dcd40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   dcd42:	2301      	movs	r3, #1
   dcd44:	f852 1904 	ldr.w	r1, [r2], #-4
   dcd48:	3301      	adds	r3, #1
   dcd4a:	2900      	cmp	r1, #0
   dcd4c:	d0fa      	beq.n	dcd44 <__kernel_rem_pio2+0x2cc>
   dcd4e:	9a04      	ldr	r2, [sp, #16]
   dcd50:	18d3      	adds	r3, r2, r3
   dcd52:	f102 0a01 	add.w	sl, r2, #1
   dcd56:	459a      	cmp	sl, r3
   dcd58:	9309      	str	r3, [sp, #36]	; 0x24
   dcd5a:	dc3c      	bgt.n	dcdd6 <__kernel_rem_pio2+0x35e>
   dcd5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dcd5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dcd60:	9909      	ldr	r1, [sp, #36]	; 0x24
   dcd62:	eb0a 0903 	add.w	r9, sl, r3
   dcd66:	9b04      	ldr	r3, [sp, #16]
   dcd68:	4698      	mov	r8, r3
   dcd6a:	4490      	add	r8, r2
   dcd6c:	188b      	adds	r3, r1, r2
   dcd6e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   dcd72:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   dcd74:	f109 39ff 	add.w	r9, r9, #4294967295
   dcd78:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   dcd7c:	aa22      	add	r2, sp, #136	; 0x88
   dcd7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   dcd82:	9304      	str	r3, [sp, #16]
   dcd84:	ab72      	add	r3, sp, #456	; 0x1c8
   dcd86:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   dcd8a:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   dcd8e:	f859 0f04 	ldr.w	r0, [r9, #4]!
   dcd92:	f000 fdc3 	bl	dd91c <__aeabi_i2d>
   dcd96:	9b00      	ldr	r3, [sp, #0]
   dcd98:	2b00      	cmp	r3, #0
   dcd9a:	e8e8 0102 	strd	r0, r1, [r8], #8
   dcd9e:	f04f 0600 	mov.w	r6, #0
   dcda2:	f04f 0700 	mov.w	r7, #0
   dcda6:	db11      	blt.n	dcdcc <__kernel_rem_pio2+0x354>
   dcda8:	9c03      	ldr	r4, [sp, #12]
   dcdaa:	4645      	mov	r5, r8
   dcdac:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   dcdb0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   dcdb4:	f000 fe18 	bl	dd9e8 <__aeabi_dmul>
   dcdb8:	4602      	mov	r2, r0
   dcdba:	460b      	mov	r3, r1
   dcdbc:	4630      	mov	r0, r6
   dcdbe:	4639      	mov	r1, r7
   dcdc0:	f000 fc60 	bl	dd684 <__adddf3>
   dcdc4:	455c      	cmp	r4, fp
   dcdc6:	4606      	mov	r6, r0
   dcdc8:	460f      	mov	r7, r1
   dcdca:	d1ef      	bne.n	dcdac <__kernel_rem_pio2+0x334>
   dcdcc:	9b04      	ldr	r3, [sp, #16]
   dcdce:	4598      	cmp	r8, r3
   dcdd0:	e8ea 6702 	strd	r6, r7, [sl], #8
   dcdd4:	d1db      	bne.n	dcd8e <__kernel_rem_pio2+0x316>
   dcdd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dcdd8:	9304      	str	r3, [sp, #16]
   dcdda:	e6cc      	b.n	dcb76 <__kernel_rem_pio2+0xfe>
   dcddc:	4632      	mov	r2, r6
   dcdde:	463b      	mov	r3, r7
   dcde0:	2000      	movs	r0, #0
   dcde2:	49b3      	ldr	r1, [pc, #716]	; (dd0b0 <__kernel_rem_pio2+0x638>)
   dcde4:	f000 fc4c 	bl	dd680 <__aeabi_dsub>
   dcde8:	4606      	mov	r6, r0
   dcdea:	460f      	mov	r7, r1
   dcdec:	2c00      	cmp	r4, #0
   dcdee:	d080      	beq.n	dccf2 <__kernel_rem_pio2+0x27a>
   dcdf0:	9806      	ldr	r0, [sp, #24]
   dcdf2:	ed9f 0bab 	vldr	d0, [pc, #684]	; dd0a0 <__kernel_rem_pio2+0x628>
   dcdf6:	f000 fbab 	bl	dd550 <scalbn>
   dcdfa:	4630      	mov	r0, r6
   dcdfc:	4639      	mov	r1, r7
   dcdfe:	ec53 2b10 	vmov	r2, r3, d0
   dce02:	f000 fc3d 	bl	dd680 <__aeabi_dsub>
   dce06:	4606      	mov	r6, r0
   dce08:	460f      	mov	r7, r1
   dce0a:	e772      	b.n	dccf2 <__kernel_rem_pio2+0x27a>
   dce0c:	d111      	bne.n	dce32 <__kernel_rem_pio2+0x3ba>
   dce0e:	9b04      	ldr	r3, [sp, #16]
   dce10:	aa0e      	add	r2, sp, #56	; 0x38
   dce12:	3b01      	subs	r3, #1
   dce14:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   dce18:	15ed      	asrs	r5, r5, #23
   dce1a:	e726      	b.n	dcc6a <__kernel_rem_pio2+0x1f2>
   dce1c:	9b04      	ldr	r3, [sp, #16]
   dce1e:	1e5a      	subs	r2, r3, #1
   dce20:	ab0e      	add	r3, sp, #56	; 0x38
   dce22:	a90e      	add	r1, sp, #56	; 0x38
   dce24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   dce28:	f3c3 0316 	ubfx	r3, r3, #0, #23
   dce2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   dce30:	e75d      	b.n	dccee <__kernel_rem_pio2+0x276>
   dce32:	2200      	movs	r2, #0
   dce34:	4b9f      	ldr	r3, [pc, #636]	; (dd0b4 <__kernel_rem_pio2+0x63c>)
   dce36:	f001 f85d 	bl	ddef4 <__aeabi_dcmpge>
   dce3a:	b958      	cbnz	r0, dce54 <__kernel_rem_pio2+0x3dc>
   dce3c:	4605      	mov	r5, r0
   dce3e:	e758      	b.n	dccf2 <__kernel_rem_pio2+0x27a>
   dce40:	2600      	movs	r6, #0
   dce42:	2700      	movs	r7, #0
   dce44:	e8ea 6702 	strd	r6, r7, [sl], #8
   dce48:	45da      	cmp	sl, fp
   dce4a:	f109 0908 	add.w	r9, r9, #8
   dce4e:	f47f ae64 	bne.w	dcb1a <__kernel_rem_pio2+0xa2>
   dce52:	e680      	b.n	dcb56 <__kernel_rem_pio2+0xde>
   dce54:	9b04      	ldr	r3, [sp, #16]
   dce56:	2b00      	cmp	r3, #0
   dce58:	f108 0801 	add.w	r8, r8, #1
   dce5c:	bfc8      	it	gt
   dce5e:	2502      	movgt	r5, #2
   dce60:	f73f af0b 	bgt.w	dcc7a <__kernel_rem_pio2+0x202>
   dce64:	4632      	mov	r2, r6
   dce66:	463b      	mov	r3, r7
   dce68:	2000      	movs	r0, #0
   dce6a:	4991      	ldr	r1, [pc, #580]	; (dd0b0 <__kernel_rem_pio2+0x638>)
   dce6c:	f000 fc08 	bl	dd680 <__aeabi_dsub>
   dce70:	2502      	movs	r5, #2
   dce72:	4606      	mov	r6, r0
   dce74:	460f      	mov	r7, r1
   dce76:	e73c      	b.n	dccf2 <__kernel_rem_pio2+0x27a>
   dce78:	a90e      	add	r1, sp, #56	; 0x38
   dce7a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   dce7e:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   dce82:	9906      	ldr	r1, [sp, #24]
   dce84:	9000      	str	r0, [sp, #0]
   dce86:	3918      	subs	r1, #24
   dce88:	4602      	mov	r2, r0
   dce8a:	9503      	str	r5, [sp, #12]
   dce8c:	9106      	str	r1, [sp, #24]
   dce8e:	b96b      	cbnz	r3, dceac <__kernel_rem_pio2+0x434>
   dce90:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   dce94:	3b01      	subs	r3, #1
   dce96:	a80e      	add	r0, sp, #56	; 0x38
   dce98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   dce9c:	f853 0904 	ldr.w	r0, [r3], #-4
   dcea0:	3a01      	subs	r2, #1
   dcea2:	3918      	subs	r1, #24
   dcea4:	2800      	cmp	r0, #0
   dcea6:	d0f9      	beq.n	dce9c <__kernel_rem_pio2+0x424>
   dcea8:	9200      	str	r2, [sp, #0]
   dceaa:	9106      	str	r1, [sp, #24]
   dceac:	9806      	ldr	r0, [sp, #24]
   dceae:	ed9f 0b7c 	vldr	d0, [pc, #496]	; dd0a0 <__kernel_rem_pio2+0x628>
   dceb2:	f000 fb4d 	bl	dd550 <scalbn>
   dceb6:	9b00      	ldr	r3, [sp, #0]
   dceb8:	2b00      	cmp	r3, #0
   dceba:	ec55 4b10 	vmov	r4, r5, d0
   dcebe:	f2c0 81c1 	blt.w	dd244 <__kernel_rem_pio2+0x7cc>
   dcec2:	00da      	lsls	r2, r3, #3
   dcec4:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   dcec8:	a90e      	add	r1, sp, #56	; 0x38
   dceca:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   dcece:	eb08 0b02 	add.w	fp, r8, r2
   dced2:	9206      	str	r2, [sp, #24]
   dced4:	3604      	adds	r6, #4
   dced6:	f10b 0708 	add.w	r7, fp, #8
   dceda:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   dcede:	f000 fd1d 	bl	dd91c <__aeabi_i2d>
   dcee2:	4622      	mov	r2, r4
   dcee4:	462b      	mov	r3, r5
   dcee6:	f000 fd7f 	bl	dd9e8 <__aeabi_dmul>
   dceea:	2200      	movs	r2, #0
   dceec:	e967 0102 	strd	r0, r1, [r7, #-8]!
   dcef0:	4b71      	ldr	r3, [pc, #452]	; (dd0b8 <__kernel_rem_pio2+0x640>)
   dcef2:	4620      	mov	r0, r4
   dcef4:	4629      	mov	r1, r5
   dcef6:	f000 fd77 	bl	dd9e8 <__aeabi_dmul>
   dcefa:	4547      	cmp	r7, r8
   dcefc:	4604      	mov	r4, r0
   dcefe:	460d      	mov	r5, r1
   dcf00:	d1eb      	bne.n	dceda <__kernel_rem_pio2+0x462>
   dcf02:	ac4a      	add	r4, sp, #296	; 0x128
   dcf04:	f8dd 901c 	ldr.w	r9, [sp, #28]
   dcf08:	9404      	str	r4, [sp, #16]
   dcf0a:	f04f 0a00 	mov.w	sl, #0
   dcf0e:	f1b9 0f00 	cmp.w	r9, #0
   dcf12:	f2c0 812b 	blt.w	dd16c <__kernel_rem_pio2+0x6f4>
   dcf16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; dd0bc <__kernel_rem_pio2+0x644>
   dcf1a:	465d      	mov	r5, fp
   dcf1c:	a362      	add	r3, pc, #392	; (adr r3, dd0a8 <__kernel_rem_pio2+0x630>)
   dcf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf22:	2600      	movs	r6, #0
   dcf24:	2700      	movs	r7, #0
   dcf26:	2400      	movs	r4, #0
   dcf28:	e003      	b.n	dcf32 <__kernel_rem_pio2+0x4ba>
   dcf2a:	45a2      	cmp	sl, r4
   dcf2c:	db10      	blt.n	dcf50 <__kernel_rem_pio2+0x4d8>
   dcf2e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   dcf32:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   dcf36:	f000 fd57 	bl	dd9e8 <__aeabi_dmul>
   dcf3a:	4602      	mov	r2, r0
   dcf3c:	460b      	mov	r3, r1
   dcf3e:	4630      	mov	r0, r6
   dcf40:	4639      	mov	r1, r7
   dcf42:	f000 fb9f 	bl	dd684 <__adddf3>
   dcf46:	3401      	adds	r4, #1
   dcf48:	45a1      	cmp	r9, r4
   dcf4a:	4606      	mov	r6, r0
   dcf4c:	460f      	mov	r7, r1
   dcf4e:	daec      	bge.n	dcf2a <__kernel_rem_pio2+0x4b2>
   dcf50:	9b04      	ldr	r3, [sp, #16]
   dcf52:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   dcf56:	f1ab 0b08 	sub.w	fp, fp, #8
   dcf5a:	e9c3 6700 	strd	r6, r7, [r3]
   dcf5e:	ab70      	add	r3, sp, #448	; 0x1c0
   dcf60:	459b      	cmp	fp, r3
   dcf62:	f10a 0a01 	add.w	sl, sl, #1
   dcf66:	d1d2      	bne.n	dcf0e <__kernel_rem_pio2+0x496>
   dcf68:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   dcf6a:	9c04      	ldr	r4, [sp, #16]
   dcf6c:	2b03      	cmp	r3, #3
   dcf6e:	f200 808d 	bhi.w	dd08c <__kernel_rem_pio2+0x614>
   dcf72:	e8df f013 	tbh	[pc, r3, lsl #1]
   dcf76:	00dd      	.short	0x00dd
   dcf78:	00a500a5 	.word	0x00a500a5
   dcf7c:	0004      	.short	0x0004
   dcf7e:	9b00      	ldr	r3, [sp, #0]
   dcf80:	2b00      	cmp	r3, #0
   dcf82:	f340 815c 	ble.w	dd23e <__kernel_rem_pio2+0x7c6>
   dcf86:	9b00      	ldr	r3, [sp, #0]
   dcf88:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   dcf8c:	9b06      	ldr	r3, [sp, #24]
   dcf8e:	f10b 3bff 	add.w	fp, fp, #4294967295
   dcf92:	18e2      	adds	r2, r4, r3
   dcf94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   dcf98:	e9d2 8900 	ldrd	r8, r9, [r2]
   dcf9c:	f103 0208 	add.w	r2, r3, #8
   dcfa0:	3310      	adds	r3, #16
   dcfa2:	eb04 0a02 	add.w	sl, r4, r2
   dcfa6:	18e5      	adds	r5, r4, r3
   dcfa8:	ed3a 7b02 	vldmdb	sl!, {d7}
   dcfac:	4642      	mov	r2, r8
   dcfae:	464b      	mov	r3, r9
   dcfb0:	ec51 0b17 	vmov	r0, r1, d7
   dcfb4:	ed8d 7b04 	vstr	d7, [sp, #16]
   dcfb8:	f000 fb64 	bl	dd684 <__adddf3>
   dcfbc:	4606      	mov	r6, r0
   dcfbe:	460f      	mov	r7, r1
   dcfc0:	4602      	mov	r2, r0
   dcfc2:	460b      	mov	r3, r1
   dcfc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dcfc8:	f000 fb5a 	bl	dd680 <__aeabi_dsub>
   dcfcc:	464b      	mov	r3, r9
   dcfce:	4642      	mov	r2, r8
   dcfd0:	f000 fb58 	bl	dd684 <__adddf3>
   dcfd4:	e965 0102 	strd	r0, r1, [r5, #-8]!
   dcfd8:	ab4c      	add	r3, sp, #304	; 0x130
   dcfda:	429d      	cmp	r5, r3
   dcfdc:	46b0      	mov	r8, r6
   dcfde:	46b9      	mov	r9, r7
   dcfe0:	e9ca 6700 	strd	r6, r7, [sl]
   dcfe4:	d1e0      	bne.n	dcfa8 <__kernel_rem_pio2+0x530>
   dcfe6:	9b00      	ldr	r3, [sp, #0]
   dcfe8:	2b01      	cmp	r3, #1
   dcfea:	f340 8128 	ble.w	dd23e <__kernel_rem_pio2+0x7c6>
   dcfee:	9b06      	ldr	r3, [sp, #24]
   dcff0:	4423      	add	r3, r4
   dcff2:	ed93 7b00 	vldr	d7, [r3]
   dcff6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   dcffa:	f10b 0a10 	add.w	sl, fp, #16
   dcffe:	ed8d 7b00 	vstr	d7, [sp]
   dd002:	44a2      	add	sl, r4
   dd004:	f10b 0b08 	add.w	fp, fp, #8
   dd008:	eb04 050b 	add.w	r5, r4, fp
   dd00c:	46d0      	mov	r8, sl
   dd00e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   dd012:	f8cd a010 	str.w	sl, [sp, #16]
   dd016:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   dd01a:	e9dd 0100 	ldrd	r0, r1, [sp]
   dd01e:	464a      	mov	r2, r9
   dd020:	4653      	mov	r3, sl
   dd022:	f000 fb2f 	bl	dd684 <__adddf3>
   dd026:	4606      	mov	r6, r0
   dd028:	460f      	mov	r7, r1
   dd02a:	4602      	mov	r2, r0
   dd02c:	460b      	mov	r3, r1
   dd02e:	4648      	mov	r0, r9
   dd030:	4651      	mov	r1, sl
   dd032:	f000 fb25 	bl	dd680 <__aeabi_dsub>
   dd036:	e9dd 2300 	ldrd	r2, r3, [sp]
   dd03a:	f000 fb23 	bl	dd684 <__adddf3>
   dd03e:	e968 0102 	strd	r0, r1, [r8, #-8]!
   dd042:	45c3      	cmp	fp, r8
   dd044:	e9cd 6700 	strd	r6, r7, [sp]
   dd048:	e9c5 6700 	strd	r6, r7, [r5]
   dd04c:	d1e3      	bne.n	dd016 <__kernel_rem_pio2+0x59e>
   dd04e:	f8dd a010 	ldr.w	sl, [sp, #16]
   dd052:	2000      	movs	r0, #0
   dd054:	2100      	movs	r1, #0
   dd056:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   dd05a:	f000 fb13 	bl	dd684 <__adddf3>
   dd05e:	45d3      	cmp	fp, sl
   dd060:	d1f9      	bne.n	dd056 <__kernel_rem_pio2+0x5de>
   dd062:	9b03      	ldr	r3, [sp, #12]
   dd064:	2b00      	cmp	r3, #0
   dd066:	f000 80d3 	beq.w	dd210 <__kernel_rem_pio2+0x798>
   dd06a:	6862      	ldr	r2, [r4, #4]
   dd06c:	68e3      	ldr	r3, [r4, #12]
   dd06e:	9f08      	ldr	r7, [sp, #32]
   dd070:	6825      	ldr	r5, [r4, #0]
   dd072:	68a4      	ldr	r4, [r4, #8]
   dd074:	603d      	str	r5, [r7, #0]
   dd076:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   dd07a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   dd07e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   dd082:	607a      	str	r2, [r7, #4]
   dd084:	60fb      	str	r3, [r7, #12]
   dd086:	60bc      	str	r4, [r7, #8]
   dd088:	6138      	str	r0, [r7, #16]
   dd08a:	6179      	str	r1, [r7, #20]
   dd08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd08e:	f003 0007 	and.w	r0, r3, #7
   dd092:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   dd096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd09a:	bf00      	nop
   dd09c:	f3af 8000 	nop.w
   dd0a0:	00000000 	.word	0x00000000
   dd0a4:	3ff00000 	.word	0x3ff00000
   dd0a8:	40000000 	.word	0x40000000
   dd0ac:	3ff921fb 	.word	0x3ff921fb
   dd0b0:	3ff00000 	.word	0x3ff00000
   dd0b4:	3fe00000 	.word	0x3fe00000
   dd0b8:	3e700000 	.word	0x3e700000
   dd0bc:	000e0970 	.word	0x000e0970
   dd0c0:	9d06      	ldr	r5, [sp, #24]
   dd0c2:	3508      	adds	r5, #8
   dd0c4:	4425      	add	r5, r4
   dd0c6:	2000      	movs	r0, #0
   dd0c8:	2100      	movs	r1, #0
   dd0ca:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   dd0ce:	f000 fad9 	bl	dd684 <__adddf3>
   dd0d2:	42a5      	cmp	r5, r4
   dd0d4:	d1f9      	bne.n	dd0ca <__kernel_rem_pio2+0x652>
   dd0d6:	9b03      	ldr	r3, [sp, #12]
   dd0d8:	2b00      	cmp	r3, #0
   dd0da:	d04a      	beq.n	dd172 <__kernel_rem_pio2+0x6fa>
   dd0dc:	9e08      	ldr	r6, [sp, #32]
   dd0de:	4602      	mov	r2, r0
   dd0e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd0e4:	e886 000c 	stmia.w	r6, {r2, r3}
   dd0e8:	460b      	mov	r3, r1
   dd0ea:	4602      	mov	r2, r0
   dd0ec:	e9d4 0100 	ldrd	r0, r1, [r4]
   dd0f0:	f000 fac6 	bl	dd680 <__aeabi_dsub>
   dd0f4:	9b00      	ldr	r3, [sp, #0]
   dd0f6:	2b00      	cmp	r3, #0
   dd0f8:	dd0d      	ble.n	dd116 <__kernel_rem_pio2+0x69e>
   dd0fa:	ad4c      	add	r5, sp, #304	; 0x130
   dd0fc:	2401      	movs	r4, #1
   dd0fe:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   dd102:	f000 fabf 	bl	dd684 <__adddf3>
   dd106:	9b00      	ldr	r3, [sp, #0]
   dd108:	3401      	adds	r4, #1
   dd10a:	42a3      	cmp	r3, r4
   dd10c:	daf7      	bge.n	dd0fe <__kernel_rem_pio2+0x686>
   dd10e:	9b03      	ldr	r3, [sp, #12]
   dd110:	2b00      	cmp	r3, #0
   dd112:	f000 80a7 	beq.w	dd264 <__kernel_rem_pio2+0x7ec>
   dd116:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd11a:	9908      	ldr	r1, [sp, #32]
   dd11c:	4602      	mov	r2, r0
   dd11e:	e9c1 2302 	strd	r2, r3, [r1, #8]
   dd122:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd124:	f003 0007 	and.w	r0, r3, #7
   dd128:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   dd12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd130:	9b06      	ldr	r3, [sp, #24]
   dd132:	9d00      	ldr	r5, [sp, #0]
   dd134:	3308      	adds	r3, #8
   dd136:	2000      	movs	r0, #0
   dd138:	2100      	movs	r1, #0
   dd13a:	441c      	add	r4, r3
   dd13c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   dd140:	3d01      	subs	r5, #1
   dd142:	f000 fa9f 	bl	dd684 <__adddf3>
   dd146:	1c6b      	adds	r3, r5, #1
   dd148:	d1f8      	bne.n	dd13c <__kernel_rem_pio2+0x6c4>
   dd14a:	9b03      	ldr	r3, [sp, #12]
   dd14c:	4602      	mov	r2, r0
   dd14e:	2b00      	cmp	r3, #0
   dd150:	f000 808e 	beq.w	dd270 <__kernel_rem_pio2+0x7f8>
   dd154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd158:	9908      	ldr	r1, [sp, #32]
   dd15a:	e9c1 2300 	strd	r2, r3, [r1]
   dd15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd160:	f003 0007 	and.w	r0, r3, #7
   dd164:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   dd168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd16c:	2600      	movs	r6, #0
   dd16e:	2700      	movs	r7, #0
   dd170:	e6ee      	b.n	dcf50 <__kernel_rem_pio2+0x4d8>
   dd172:	9b08      	ldr	r3, [sp, #32]
   dd174:	4602      	mov	r2, r0
   dd176:	e9c3 0100 	strd	r0, r1, [r3]
   dd17a:	460b      	mov	r3, r1
   dd17c:	e9d4 0100 	ldrd	r0, r1, [r4]
   dd180:	f000 fa7e 	bl	dd680 <__aeabi_dsub>
   dd184:	9c00      	ldr	r4, [sp, #0]
   dd186:	2c00      	cmp	r4, #0
   dd188:	4602      	mov	r2, r0
   dd18a:	460b      	mov	r3, r1
   dd18c:	dcb5      	bgt.n	dd0fa <__kernel_rem_pio2+0x682>
   dd18e:	9908      	ldr	r1, [sp, #32]
   dd190:	e9c1 2302 	strd	r2, r3, [r1, #8]
   dd194:	e7c5      	b.n	dd122 <__kernel_rem_pio2+0x6aa>
   dd196:	9b06      	ldr	r3, [sp, #24]
   dd198:	9503      	str	r5, [sp, #12]
   dd19a:	4258      	negs	r0, r3
   dd19c:	ec47 6b10 	vmov	d0, r6, r7
   dd1a0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   dd1a4:	f000 f9d4 	bl	dd550 <scalbn>
   dd1a8:	ec55 4b10 	vmov	r4, r5, d0
   dd1ac:	2200      	movs	r2, #0
   dd1ae:	4b38      	ldr	r3, [pc, #224]	; (dd290 <__kernel_rem_pio2+0x818>)
   dd1b0:	ee10 0a10 	vmov	r0, s0
   dd1b4:	4629      	mov	r1, r5
   dd1b6:	f000 fe9d 	bl	ddef4 <__aeabi_dcmpge>
   dd1ba:	2800      	cmp	r0, #0
   dd1bc:	d034      	beq.n	dd228 <__kernel_rem_pio2+0x7b0>
   dd1be:	2200      	movs	r2, #0
   dd1c0:	4b34      	ldr	r3, [pc, #208]	; (dd294 <__kernel_rem_pio2+0x81c>)
   dd1c2:	4620      	mov	r0, r4
   dd1c4:	4629      	mov	r1, r5
   dd1c6:	f000 fc0f 	bl	dd9e8 <__aeabi_dmul>
   dd1ca:	f000 febd 	bl	ddf48 <__aeabi_d2iz>
   dd1ce:	4606      	mov	r6, r0
   dd1d0:	f000 fba4 	bl	dd91c <__aeabi_i2d>
   dd1d4:	2200      	movs	r2, #0
   dd1d6:	4b2e      	ldr	r3, [pc, #184]	; (dd290 <__kernel_rem_pio2+0x818>)
   dd1d8:	f000 fc06 	bl	dd9e8 <__aeabi_dmul>
   dd1dc:	4602      	mov	r2, r0
   dd1de:	460b      	mov	r3, r1
   dd1e0:	4620      	mov	r0, r4
   dd1e2:	4629      	mov	r1, r5
   dd1e4:	f000 fa4c 	bl	dd680 <__aeabi_dsub>
   dd1e8:	f000 feae 	bl	ddf48 <__aeabi_d2iz>
   dd1ec:	9904      	ldr	r1, [sp, #16]
   dd1ee:	9b06      	ldr	r3, [sp, #24]
   dd1f0:	460a      	mov	r2, r1
   dd1f2:	3318      	adds	r3, #24
   dd1f4:	3201      	adds	r2, #1
   dd1f6:	9306      	str	r3, [sp, #24]
   dd1f8:	460b      	mov	r3, r1
   dd1fa:	a90e      	add	r1, sp, #56	; 0x38
   dd1fc:	9200      	str	r2, [sp, #0]
   dd1fe:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   dd202:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   dd206:	e651      	b.n	dceac <__kernel_rem_pio2+0x434>
   dd208:	2301      	movs	r3, #1
   dd20a:	e5a0      	b.n	dcd4e <__kernel_rem_pio2+0x2d6>
   dd20c:	2400      	movs	r4, #0
   dd20e:	e55c      	b.n	dccca <__kernel_rem_pio2+0x252>
   dd210:	e9d4 6700 	ldrd	r6, r7, [r4]
   dd214:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   dd218:	9d08      	ldr	r5, [sp, #32]
   dd21a:	e9c5 0104 	strd	r0, r1, [r5, #16]
   dd21e:	e9c5 6700 	strd	r6, r7, [r5]
   dd222:	e9c5 2302 	strd	r2, r3, [r5, #8]
   dd226:	e731      	b.n	dd08c <__kernel_rem_pio2+0x614>
   dd228:	4629      	mov	r1, r5
   dd22a:	4620      	mov	r0, r4
   dd22c:	f000 fe8c 	bl	ddf48 <__aeabi_d2iz>
   dd230:	9a04      	ldr	r2, [sp, #16]
   dd232:	9200      	str	r2, [sp, #0]
   dd234:	a90e      	add	r1, sp, #56	; 0x38
   dd236:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   dd23a:	e637      	b.n	dceac <__kernel_rem_pio2+0x434>
   dd23c:	ac4a      	add	r4, sp, #296	; 0x128
   dd23e:	2000      	movs	r0, #0
   dd240:	2100      	movs	r1, #0
   dd242:	e70e      	b.n	dd062 <__kernel_rem_pio2+0x5ea>
   dd244:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   dd246:	2b03      	cmp	r3, #3
   dd248:	f63f af20 	bhi.w	dd08c <__kernel_rem_pio2+0x614>
   dd24c:	a201      	add	r2, pc, #4	; (adr r2, dd254 <__kernel_rem_pio2+0x7dc>)
   dd24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   dd252:	bf00      	nop
   dd254:	000dd28b 	.word	0x000dd28b
   dd258:	000dd283 	.word	0x000dd283
   dd25c:	000dd283 	.word	0x000dd283
   dd260:	000dd23d 	.word	0x000dd23d
   dd264:	460b      	mov	r3, r1
   dd266:	9908      	ldr	r1, [sp, #32]
   dd268:	4602      	mov	r2, r0
   dd26a:	e9c1 2302 	strd	r2, r3, [r1, #8]
   dd26e:	e758      	b.n	dd122 <__kernel_rem_pio2+0x6aa>
   dd270:	460b      	mov	r3, r1
   dd272:	9908      	ldr	r1, [sp, #32]
   dd274:	e9c1 2300 	strd	r2, r3, [r1]
   dd278:	e771      	b.n	dd15e <__kernel_rem_pio2+0x6e6>
   dd27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dd27c:	00db      	lsls	r3, r3, #3
   dd27e:	9304      	str	r3, [sp, #16]
   dd280:	e469      	b.n	dcb56 <__kernel_rem_pio2+0xde>
   dd282:	2000      	movs	r0, #0
   dd284:	2100      	movs	r1, #0
   dd286:	ac4a      	add	r4, sp, #296	; 0x128
   dd288:	e725      	b.n	dd0d6 <__kernel_rem_pio2+0x65e>
   dd28a:	2000      	movs	r0, #0
   dd28c:	2100      	movs	r1, #0
   dd28e:	e75c      	b.n	dd14a <__kernel_rem_pio2+0x6d2>
   dd290:	41700000 	.word	0x41700000
   dd294:	3e700000 	.word	0x3e700000

000dd298 <__kernel_sin>:
   dd298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd29c:	ec55 4b10 	vmov	r4, r5, d0
   dd2a0:	ed2d 8b02 	vpush	{d8}
   dd2a4:	eeb0 8a41 	vmov.f32	s16, s2
   dd2a8:	eef0 8a61 	vmov.f32	s17, s3
   dd2ac:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   dd2b0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   dd2b4:	b083      	sub	sp, #12
   dd2b6:	4682      	mov	sl, r0
   dd2b8:	da07      	bge.n	dd2ca <__kernel_sin+0x32>
   dd2ba:	ee10 0a10 	vmov	r0, s0
   dd2be:	4629      	mov	r1, r5
   dd2c0:	f000 fe42 	bl	ddf48 <__aeabi_d2iz>
   dd2c4:	2800      	cmp	r0, #0
   dd2c6:	f000 808e 	beq.w	dd3e6 <__kernel_sin+0x14e>
   dd2ca:	4622      	mov	r2, r4
   dd2cc:	462b      	mov	r3, r5
   dd2ce:	4620      	mov	r0, r4
   dd2d0:	4629      	mov	r1, r5
   dd2d2:	f000 fb89 	bl	dd9e8 <__aeabi_dmul>
   dd2d6:	4606      	mov	r6, r0
   dd2d8:	460f      	mov	r7, r1
   dd2da:	4602      	mov	r2, r0
   dd2dc:	460b      	mov	r3, r1
   dd2de:	4620      	mov	r0, r4
   dd2e0:	4629      	mov	r1, r5
   dd2e2:	f000 fb81 	bl	dd9e8 <__aeabi_dmul>
   dd2e6:	a347      	add	r3, pc, #284	; (adr r3, dd404 <__kernel_sin+0x16c>)
   dd2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd2ec:	4680      	mov	r8, r0
   dd2ee:	4689      	mov	r9, r1
   dd2f0:	4630      	mov	r0, r6
   dd2f2:	4639      	mov	r1, r7
   dd2f4:	f000 fb78 	bl	dd9e8 <__aeabi_dmul>
   dd2f8:	a344      	add	r3, pc, #272	; (adr r3, dd40c <__kernel_sin+0x174>)
   dd2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd2fe:	f000 f9bf 	bl	dd680 <__aeabi_dsub>
   dd302:	4632      	mov	r2, r6
   dd304:	463b      	mov	r3, r7
   dd306:	f000 fb6f 	bl	dd9e8 <__aeabi_dmul>
   dd30a:	a342      	add	r3, pc, #264	; (adr r3, dd414 <__kernel_sin+0x17c>)
   dd30c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd310:	f000 f9b8 	bl	dd684 <__adddf3>
   dd314:	4632      	mov	r2, r6
   dd316:	463b      	mov	r3, r7
   dd318:	f000 fb66 	bl	dd9e8 <__aeabi_dmul>
   dd31c:	a33f      	add	r3, pc, #252	; (adr r3, dd41c <__kernel_sin+0x184>)
   dd31e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd322:	f000 f9ad 	bl	dd680 <__aeabi_dsub>
   dd326:	4632      	mov	r2, r6
   dd328:	463b      	mov	r3, r7
   dd32a:	f000 fb5d 	bl	dd9e8 <__aeabi_dmul>
   dd32e:	a33d      	add	r3, pc, #244	; (adr r3, dd424 <__kernel_sin+0x18c>)
   dd330:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd334:	f000 f9a6 	bl	dd684 <__adddf3>
   dd338:	e9cd 0100 	strd	r0, r1, [sp]
   dd33c:	f1ba 0f00 	cmp.w	sl, #0
   dd340:	d037      	beq.n	dd3b2 <__kernel_sin+0x11a>
   dd342:	2200      	movs	r2, #0
   dd344:	4b2e      	ldr	r3, [pc, #184]	; (dd400 <__kernel_sin+0x168>)
   dd346:	ec51 0b18 	vmov	r0, r1, d8
   dd34a:	f000 fb4d 	bl	dd9e8 <__aeabi_dmul>
   dd34e:	e9dd 2300 	ldrd	r2, r3, [sp]
   dd352:	4682      	mov	sl, r0
   dd354:	468b      	mov	fp, r1
   dd356:	4640      	mov	r0, r8
   dd358:	4649      	mov	r1, r9
   dd35a:	f000 fb45 	bl	dd9e8 <__aeabi_dmul>
   dd35e:	4602      	mov	r2, r0
   dd360:	460b      	mov	r3, r1
   dd362:	4650      	mov	r0, sl
   dd364:	4659      	mov	r1, fp
   dd366:	f000 f98b 	bl	dd680 <__aeabi_dsub>
   dd36a:	4632      	mov	r2, r6
   dd36c:	463b      	mov	r3, r7
   dd36e:	f000 fb3b 	bl	dd9e8 <__aeabi_dmul>
   dd372:	ec53 2b18 	vmov	r2, r3, d8
   dd376:	f000 f983 	bl	dd680 <__aeabi_dsub>
   dd37a:	a31f      	add	r3, pc, #124	; (adr r3, dd3f8 <__kernel_sin+0x160>)
   dd37c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd380:	4606      	mov	r6, r0
   dd382:	460f      	mov	r7, r1
   dd384:	4640      	mov	r0, r8
   dd386:	4649      	mov	r1, r9
   dd388:	f000 fb2e 	bl	dd9e8 <__aeabi_dmul>
   dd38c:	4602      	mov	r2, r0
   dd38e:	460b      	mov	r3, r1
   dd390:	4630      	mov	r0, r6
   dd392:	4639      	mov	r1, r7
   dd394:	f000 f976 	bl	dd684 <__adddf3>
   dd398:	4602      	mov	r2, r0
   dd39a:	460b      	mov	r3, r1
   dd39c:	4620      	mov	r0, r4
   dd39e:	4629      	mov	r1, r5
   dd3a0:	f000 f96e 	bl	dd680 <__aeabi_dsub>
   dd3a4:	ec41 0b10 	vmov	d0, r0, r1
   dd3a8:	b003      	add	sp, #12
   dd3aa:	ecbd 8b02 	vpop	{d8}
   dd3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd3b2:	4602      	mov	r2, r0
   dd3b4:	460b      	mov	r3, r1
   dd3b6:	4630      	mov	r0, r6
   dd3b8:	4639      	mov	r1, r7
   dd3ba:	f000 fb15 	bl	dd9e8 <__aeabi_dmul>
   dd3be:	a30e      	add	r3, pc, #56	; (adr r3, dd3f8 <__kernel_sin+0x160>)
   dd3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd3c4:	f000 f95c 	bl	dd680 <__aeabi_dsub>
   dd3c8:	4642      	mov	r2, r8
   dd3ca:	464b      	mov	r3, r9
   dd3cc:	f000 fb0c 	bl	dd9e8 <__aeabi_dmul>
   dd3d0:	4622      	mov	r2, r4
   dd3d2:	462b      	mov	r3, r5
   dd3d4:	f000 f956 	bl	dd684 <__adddf3>
   dd3d8:	ec41 0b10 	vmov	d0, r0, r1
   dd3dc:	b003      	add	sp, #12
   dd3de:	ecbd 8b02 	vpop	{d8}
   dd3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd3e6:	ec45 4b10 	vmov	d0, r4, r5
   dd3ea:	b003      	add	sp, #12
   dd3ec:	ecbd 8b02 	vpop	{d8}
   dd3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd3f4:	f3af 8000 	nop.w
   dd3f8:	55555549 	.word	0x55555549
   dd3fc:	3fc55555 	.word	0x3fc55555
   dd400:	3fe00000 	.word	0x3fe00000
   dd404:	5acfd57c 	.word	0x5acfd57c
   dd408:	3de5d93a 	.word	0x3de5d93a
   dd40c:	8a2b9ceb 	.word	0x8a2b9ceb
   dd410:	3e5ae5e6 	.word	0x3e5ae5e6
   dd414:	57b1fe7d 	.word	0x57b1fe7d
   dd418:	3ec71de3 	.word	0x3ec71de3
   dd41c:	19c161d5 	.word	0x19c161d5
   dd420:	3f2a01a0 	.word	0x3f2a01a0
   dd424:	1110f8a6 	.word	0x1110f8a6
   dd428:	3f811111 	.word	0x3f811111
   dd42c:	00000000 	.word	0x00000000

000dd430 <floor>:
   dd430:	ec51 0b10 	vmov	r0, r1, d0
   dd434:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dd438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd43c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dd440:	2d13      	cmp	r5, #19
   dd442:	460c      	mov	r4, r1
   dd444:	460f      	mov	r7, r1
   dd446:	ee10 6a10 	vmov	r6, s0
   dd44a:	dc1d      	bgt.n	dd488 <floor+0x58>
   dd44c:	2d00      	cmp	r5, #0
   dd44e:	db43      	blt.n	dd4d8 <floor+0xa8>
   dd450:	4b3d      	ldr	r3, [pc, #244]	; (dd548 <floor+0x118>)
   dd452:	fa43 f805 	asr.w	r8, r3, r5
   dd456:	ea01 0308 	and.w	r3, r1, r8
   dd45a:	4303      	orrs	r3, r0
   dd45c:	d019      	beq.n	dd492 <floor+0x62>
   dd45e:	a338      	add	r3, pc, #224	; (adr r3, dd540 <floor+0x110>)
   dd460:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd464:	f000 f90e 	bl	dd684 <__adddf3>
   dd468:	2200      	movs	r2, #0
   dd46a:	2300      	movs	r3, #0
   dd46c:	f000 fd4c 	bl	ddf08 <__aeabi_dcmpgt>
   dd470:	b120      	cbz	r0, dd47c <floor+0x4c>
   dd472:	2c00      	cmp	r4, #0
   dd474:	db49      	blt.n	dd50a <floor+0xda>
   dd476:	ea27 0408 	bic.w	r4, r7, r8
   dd47a:	2600      	movs	r6, #0
   dd47c:	4623      	mov	r3, r4
   dd47e:	4632      	mov	r2, r6
   dd480:	ec43 2b10 	vmov	d0, r2, r3
   dd484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd488:	2d33      	cmp	r5, #51	; 0x33
   dd48a:	dd06      	ble.n	dd49a <floor+0x6a>
   dd48c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dd490:	d032      	beq.n	dd4f8 <floor+0xc8>
   dd492:	ec41 0b10 	vmov	d0, r0, r1
   dd496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd49a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dd49e:	f04f 38ff 	mov.w	r8, #4294967295
   dd4a2:	fa28 f803 	lsr.w	r8, r8, r3
   dd4a6:	ea10 0f08 	tst.w	r0, r8
   dd4aa:	d0f2      	beq.n	dd492 <floor+0x62>
   dd4ac:	a324      	add	r3, pc, #144	; (adr r3, dd540 <floor+0x110>)
   dd4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd4b2:	f000 f8e7 	bl	dd684 <__adddf3>
   dd4b6:	2200      	movs	r2, #0
   dd4b8:	2300      	movs	r3, #0
   dd4ba:	f000 fd25 	bl	ddf08 <__aeabi_dcmpgt>
   dd4be:	2800      	cmp	r0, #0
   dd4c0:	d0dc      	beq.n	dd47c <floor+0x4c>
   dd4c2:	2c00      	cmp	r4, #0
   dd4c4:	db27      	blt.n	dd516 <floor+0xe6>
   dd4c6:	463c      	mov	r4, r7
   dd4c8:	ea26 0608 	bic.w	r6, r6, r8
   dd4cc:	4623      	mov	r3, r4
   dd4ce:	4632      	mov	r2, r6
   dd4d0:	ec43 2b10 	vmov	d0, r2, r3
   dd4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd4d8:	a319      	add	r3, pc, #100	; (adr r3, dd540 <floor+0x110>)
   dd4da:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd4de:	f000 f8d1 	bl	dd684 <__adddf3>
   dd4e2:	2200      	movs	r2, #0
   dd4e4:	2300      	movs	r3, #0
   dd4e6:	f000 fd0f 	bl	ddf08 <__aeabi_dcmpgt>
   dd4ea:	2800      	cmp	r0, #0
   dd4ec:	d0c6      	beq.n	dd47c <floor+0x4c>
   dd4ee:	2c00      	cmp	r4, #0
   dd4f0:	db1c      	blt.n	dd52c <floor+0xfc>
   dd4f2:	2600      	movs	r6, #0
   dd4f4:	4634      	mov	r4, r6
   dd4f6:	e7c1      	b.n	dd47c <floor+0x4c>
   dd4f8:	ee10 2a10 	vmov	r2, s0
   dd4fc:	460b      	mov	r3, r1
   dd4fe:	f000 f8c1 	bl	dd684 <__adddf3>
   dd502:	ec41 0b10 	vmov	d0, r0, r1
   dd506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd50a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dd50e:	fa43 f505 	asr.w	r5, r3, r5
   dd512:	442f      	add	r7, r5
   dd514:	e7af      	b.n	dd476 <floor+0x46>
   dd516:	2d14      	cmp	r5, #20
   dd518:	d010      	beq.n	dd53c <floor+0x10c>
   dd51a:	2301      	movs	r3, #1
   dd51c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dd520:	fa03 f505 	lsl.w	r5, r3, r5
   dd524:	19ae      	adds	r6, r5, r6
   dd526:	bf28      	it	cs
   dd528:	18ff      	addcs	r7, r7, r3
   dd52a:	e7cc      	b.n	dd4c6 <floor+0x96>
   dd52c:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   dd530:	4b06      	ldr	r3, [pc, #24]	; (dd54c <floor+0x11c>)
   dd532:	4332      	orrs	r2, r6
   dd534:	bf18      	it	ne
   dd536:	461c      	movne	r4, r3
   dd538:	2600      	movs	r6, #0
   dd53a:	e79f      	b.n	dd47c <floor+0x4c>
   dd53c:	3701      	adds	r7, #1
   dd53e:	e7c2      	b.n	dd4c6 <floor+0x96>
   dd540:	8800759c 	.word	0x8800759c
   dd544:	7e37e43c 	.word	0x7e37e43c
   dd548:	000fffff 	.word	0x000fffff
   dd54c:	bff00000 	.word	0xbff00000

000dd550 <scalbn>:
   dd550:	ec53 2b10 	vmov	r2, r3, d0
   dd554:	b570      	push	{r4, r5, r6, lr}
   dd556:	f3c3 540a 	ubfx	r4, r3, #20, #11
   dd55a:	4619      	mov	r1, r3
   dd55c:	4605      	mov	r5, r0
   dd55e:	bb14      	cbnz	r4, dd5a6 <scalbn+0x56>
   dd560:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   dd564:	4311      	orrs	r1, r2
   dd566:	d02a      	beq.n	dd5be <scalbn+0x6e>
   dd568:	4619      	mov	r1, r3
   dd56a:	2200      	movs	r2, #0
   dd56c:	4b38      	ldr	r3, [pc, #224]	; (dd650 <scalbn+0x100>)
   dd56e:	4e39      	ldr	r6, [pc, #228]	; (dd654 <scalbn+0x104>)
   dd570:	ee10 0a10 	vmov	r0, s0
   dd574:	f000 fa38 	bl	dd9e8 <__aeabi_dmul>
   dd578:	42b5      	cmp	r5, r6
   dd57a:	4602      	mov	r2, r0
   dd57c:	460b      	mov	r3, r1
   dd57e:	db1f      	blt.n	dd5c0 <scalbn+0x70>
   dd580:	f3c1 540a 	ubfx	r4, r1, #20, #11
   dd584:	3c36      	subs	r4, #54	; 0x36
   dd586:	442c      	add	r4, r5
   dd588:	f240 70fe 	movw	r0, #2046	; 0x7fe
   dd58c:	4284      	cmp	r4, r0
   dd58e:	dc1f      	bgt.n	dd5d0 <scalbn+0x80>
   dd590:	2c00      	cmp	r4, #0
   dd592:	dd2d      	ble.n	dd5f0 <scalbn+0xa0>
   dd594:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   dd598:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   dd59c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   dd5a0:	ec43 2b10 	vmov	d0, r2, r3
   dd5a4:	bd70      	pop	{r4, r5, r6, pc}
   dd5a6:	f240 70ff 	movw	r0, #2047	; 0x7ff
   dd5aa:	4284      	cmp	r4, r0
   dd5ac:	d1eb      	bne.n	dd586 <scalbn+0x36>
   dd5ae:	ee10 0a10 	vmov	r0, s0
   dd5b2:	4619      	mov	r1, r3
   dd5b4:	f000 f866 	bl	dd684 <__adddf3>
   dd5b8:	ec41 0b10 	vmov	d0, r0, r1
   dd5bc:	bd70      	pop	{r4, r5, r6, pc}
   dd5be:	bd70      	pop	{r4, r5, r6, pc}
   dd5c0:	a31f      	add	r3, pc, #124	; (adr r3, dd640 <scalbn+0xf0>)
   dd5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5c6:	f000 fa0f 	bl	dd9e8 <__aeabi_dmul>
   dd5ca:	ec41 0b10 	vmov	d0, r0, r1
   dd5ce:	bd70      	pop	{r4, r5, r6, pc}
   dd5d0:	ec43 2b11 	vmov	d1, r2, r3
   dd5d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; dd648 <scalbn+0xf8>
   dd5d8:	f000 f840 	bl	dd65c <copysign>
   dd5dc:	a31a      	add	r3, pc, #104	; (adr r3, dd648 <scalbn+0xf8>)
   dd5de:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5e2:	ec51 0b10 	vmov	r0, r1, d0
   dd5e6:	f000 f9ff 	bl	dd9e8 <__aeabi_dmul>
   dd5ea:	ec41 0b10 	vmov	d0, r0, r1
   dd5ee:	bd70      	pop	{r4, r5, r6, pc}
   dd5f0:	f114 0f35 	cmn.w	r4, #53	; 0x35
   dd5f4:	da13      	bge.n	dd61e <scalbn+0xce>
   dd5f6:	f24c 3150 	movw	r1, #50000	; 0xc350
   dd5fa:	428d      	cmp	r5, r1
   dd5fc:	ec43 2b11 	vmov	d1, r2, r3
   dd600:	dce8      	bgt.n	dd5d4 <scalbn+0x84>
   dd602:	ed9f 0b0f 	vldr	d0, [pc, #60]	; dd640 <scalbn+0xf0>
   dd606:	f000 f829 	bl	dd65c <copysign>
   dd60a:	a30d      	add	r3, pc, #52	; (adr r3, dd640 <scalbn+0xf0>)
   dd60c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd610:	ec51 0b10 	vmov	r0, r1, d0
   dd614:	f000 f9e8 	bl	dd9e8 <__aeabi_dmul>
   dd618:	ec41 0b10 	vmov	d0, r0, r1
   dd61c:	bd70      	pop	{r4, r5, r6, pc}
   dd61e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   dd622:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   dd626:	3436      	adds	r4, #54	; 0x36
   dd628:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   dd62c:	4610      	mov	r0, r2
   dd62e:	4619      	mov	r1, r3
   dd630:	2200      	movs	r2, #0
   dd632:	4b09      	ldr	r3, [pc, #36]	; (dd658 <scalbn+0x108>)
   dd634:	f000 f9d8 	bl	dd9e8 <__aeabi_dmul>
   dd638:	ec41 0b10 	vmov	d0, r0, r1
   dd63c:	bd70      	pop	{r4, r5, r6, pc}
   dd63e:	bf00      	nop
   dd640:	c2f8f359 	.word	0xc2f8f359
   dd644:	01a56e1f 	.word	0x01a56e1f
   dd648:	8800759c 	.word	0x8800759c
   dd64c:	7e37e43c 	.word	0x7e37e43c
   dd650:	43500000 	.word	0x43500000
   dd654:	ffff3cb0 	.word	0xffff3cb0
   dd658:	3c900000 	.word	0x3c900000

000dd65c <copysign>:
   dd65c:	ec53 2b10 	vmov	r2, r3, d0
   dd660:	ee11 0a90 	vmov	r0, s3
   dd664:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   dd668:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   dd66c:	ea41 0300 	orr.w	r3, r1, r0
   dd670:	ec43 2b10 	vmov	d0, r2, r3
   dd674:	4770      	bx	lr
   dd676:	bf00      	nop

000dd678 <__aeabi_drsub>:
   dd678:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dd67c:	e002      	b.n	dd684 <__adddf3>
   dd67e:	bf00      	nop

000dd680 <__aeabi_dsub>:
   dd680:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dd684 <__adddf3>:
   dd684:	b530      	push	{r4, r5, lr}
   dd686:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dd68a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dd68e:	ea94 0f05 	teq	r4, r5
   dd692:	bf08      	it	eq
   dd694:	ea90 0f02 	teqeq	r0, r2
   dd698:	bf1f      	itttt	ne
   dd69a:	ea54 0c00 	orrsne.w	ip, r4, r0
   dd69e:	ea55 0c02 	orrsne.w	ip, r5, r2
   dd6a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dd6a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dd6aa:	f000 80e2 	beq.w	dd872 <__adddf3+0x1ee>
   dd6ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dd6b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dd6b6:	bfb8      	it	lt
   dd6b8:	426d      	neglt	r5, r5
   dd6ba:	dd0c      	ble.n	dd6d6 <__adddf3+0x52>
   dd6bc:	442c      	add	r4, r5
   dd6be:	ea80 0202 	eor.w	r2, r0, r2
   dd6c2:	ea81 0303 	eor.w	r3, r1, r3
   dd6c6:	ea82 0000 	eor.w	r0, r2, r0
   dd6ca:	ea83 0101 	eor.w	r1, r3, r1
   dd6ce:	ea80 0202 	eor.w	r2, r0, r2
   dd6d2:	ea81 0303 	eor.w	r3, r1, r3
   dd6d6:	2d36      	cmp	r5, #54	; 0x36
   dd6d8:	bf88      	it	hi
   dd6da:	bd30      	pophi	{r4, r5, pc}
   dd6dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dd6e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dd6e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dd6e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dd6ec:	d002      	beq.n	dd6f4 <__adddf3+0x70>
   dd6ee:	4240      	negs	r0, r0
   dd6f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd6f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dd6f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dd6fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dd700:	d002      	beq.n	dd708 <__adddf3+0x84>
   dd702:	4252      	negs	r2, r2
   dd704:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd708:	ea94 0f05 	teq	r4, r5
   dd70c:	f000 80a7 	beq.w	dd85e <__adddf3+0x1da>
   dd710:	f1a4 0401 	sub.w	r4, r4, #1
   dd714:	f1d5 0e20 	rsbs	lr, r5, #32
   dd718:	db0d      	blt.n	dd736 <__adddf3+0xb2>
   dd71a:	fa02 fc0e 	lsl.w	ip, r2, lr
   dd71e:	fa22 f205 	lsr.w	r2, r2, r5
   dd722:	1880      	adds	r0, r0, r2
   dd724:	f141 0100 	adc.w	r1, r1, #0
   dd728:	fa03 f20e 	lsl.w	r2, r3, lr
   dd72c:	1880      	adds	r0, r0, r2
   dd72e:	fa43 f305 	asr.w	r3, r3, r5
   dd732:	4159      	adcs	r1, r3
   dd734:	e00e      	b.n	dd754 <__adddf3+0xd0>
   dd736:	f1a5 0520 	sub.w	r5, r5, #32
   dd73a:	f10e 0e20 	add.w	lr, lr, #32
   dd73e:	2a01      	cmp	r2, #1
   dd740:	fa03 fc0e 	lsl.w	ip, r3, lr
   dd744:	bf28      	it	cs
   dd746:	f04c 0c02 	orrcs.w	ip, ip, #2
   dd74a:	fa43 f305 	asr.w	r3, r3, r5
   dd74e:	18c0      	adds	r0, r0, r3
   dd750:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dd754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd758:	d507      	bpl.n	dd76a <__adddf3+0xe6>
   dd75a:	f04f 0e00 	mov.w	lr, #0
   dd75e:	f1dc 0c00 	rsbs	ip, ip, #0
   dd762:	eb7e 0000 	sbcs.w	r0, lr, r0
   dd766:	eb6e 0101 	sbc.w	r1, lr, r1
   dd76a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dd76e:	d31b      	bcc.n	dd7a8 <__adddf3+0x124>
   dd770:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dd774:	d30c      	bcc.n	dd790 <__adddf3+0x10c>
   dd776:	0849      	lsrs	r1, r1, #1
   dd778:	ea5f 0030 	movs.w	r0, r0, rrx
   dd77c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dd780:	f104 0401 	add.w	r4, r4, #1
   dd784:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dd788:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dd78c:	f080 809a 	bcs.w	dd8c4 <__adddf3+0x240>
   dd790:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dd794:	bf08      	it	eq
   dd796:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dd79a:	f150 0000 	adcs.w	r0, r0, #0
   dd79e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dd7a2:	ea41 0105 	orr.w	r1, r1, r5
   dd7a6:	bd30      	pop	{r4, r5, pc}
   dd7a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dd7ac:	4140      	adcs	r0, r0
   dd7ae:	eb41 0101 	adc.w	r1, r1, r1
   dd7b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dd7b6:	f1a4 0401 	sub.w	r4, r4, #1
   dd7ba:	d1e9      	bne.n	dd790 <__adddf3+0x10c>
   dd7bc:	f091 0f00 	teq	r1, #0
   dd7c0:	bf04      	itt	eq
   dd7c2:	4601      	moveq	r1, r0
   dd7c4:	2000      	moveq	r0, #0
   dd7c6:	fab1 f381 	clz	r3, r1
   dd7ca:	bf08      	it	eq
   dd7cc:	3320      	addeq	r3, #32
   dd7ce:	f1a3 030b 	sub.w	r3, r3, #11
   dd7d2:	f1b3 0220 	subs.w	r2, r3, #32
   dd7d6:	da0c      	bge.n	dd7f2 <__adddf3+0x16e>
   dd7d8:	320c      	adds	r2, #12
   dd7da:	dd08      	ble.n	dd7ee <__adddf3+0x16a>
   dd7dc:	f102 0c14 	add.w	ip, r2, #20
   dd7e0:	f1c2 020c 	rsb	r2, r2, #12
   dd7e4:	fa01 f00c 	lsl.w	r0, r1, ip
   dd7e8:	fa21 f102 	lsr.w	r1, r1, r2
   dd7ec:	e00c      	b.n	dd808 <__adddf3+0x184>
   dd7ee:	f102 0214 	add.w	r2, r2, #20
   dd7f2:	bfd8      	it	le
   dd7f4:	f1c2 0c20 	rsble	ip, r2, #32
   dd7f8:	fa01 f102 	lsl.w	r1, r1, r2
   dd7fc:	fa20 fc0c 	lsr.w	ip, r0, ip
   dd800:	bfdc      	itt	le
   dd802:	ea41 010c 	orrle.w	r1, r1, ip
   dd806:	4090      	lslle	r0, r2
   dd808:	1ae4      	subs	r4, r4, r3
   dd80a:	bfa2      	ittt	ge
   dd80c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dd810:	4329      	orrge	r1, r5
   dd812:	bd30      	popge	{r4, r5, pc}
   dd814:	ea6f 0404 	mvn.w	r4, r4
   dd818:	3c1f      	subs	r4, #31
   dd81a:	da1c      	bge.n	dd856 <__adddf3+0x1d2>
   dd81c:	340c      	adds	r4, #12
   dd81e:	dc0e      	bgt.n	dd83e <__adddf3+0x1ba>
   dd820:	f104 0414 	add.w	r4, r4, #20
   dd824:	f1c4 0220 	rsb	r2, r4, #32
   dd828:	fa20 f004 	lsr.w	r0, r0, r4
   dd82c:	fa01 f302 	lsl.w	r3, r1, r2
   dd830:	ea40 0003 	orr.w	r0, r0, r3
   dd834:	fa21 f304 	lsr.w	r3, r1, r4
   dd838:	ea45 0103 	orr.w	r1, r5, r3
   dd83c:	bd30      	pop	{r4, r5, pc}
   dd83e:	f1c4 040c 	rsb	r4, r4, #12
   dd842:	f1c4 0220 	rsb	r2, r4, #32
   dd846:	fa20 f002 	lsr.w	r0, r0, r2
   dd84a:	fa01 f304 	lsl.w	r3, r1, r4
   dd84e:	ea40 0003 	orr.w	r0, r0, r3
   dd852:	4629      	mov	r1, r5
   dd854:	bd30      	pop	{r4, r5, pc}
   dd856:	fa21 f004 	lsr.w	r0, r1, r4
   dd85a:	4629      	mov	r1, r5
   dd85c:	bd30      	pop	{r4, r5, pc}
   dd85e:	f094 0f00 	teq	r4, #0
   dd862:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dd866:	bf06      	itte	eq
   dd868:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dd86c:	3401      	addeq	r4, #1
   dd86e:	3d01      	subne	r5, #1
   dd870:	e74e      	b.n	dd710 <__adddf3+0x8c>
   dd872:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dd876:	bf18      	it	ne
   dd878:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dd87c:	d029      	beq.n	dd8d2 <__adddf3+0x24e>
   dd87e:	ea94 0f05 	teq	r4, r5
   dd882:	bf08      	it	eq
   dd884:	ea90 0f02 	teqeq	r0, r2
   dd888:	d005      	beq.n	dd896 <__adddf3+0x212>
   dd88a:	ea54 0c00 	orrs.w	ip, r4, r0
   dd88e:	bf04      	itt	eq
   dd890:	4619      	moveq	r1, r3
   dd892:	4610      	moveq	r0, r2
   dd894:	bd30      	pop	{r4, r5, pc}
   dd896:	ea91 0f03 	teq	r1, r3
   dd89a:	bf1e      	ittt	ne
   dd89c:	2100      	movne	r1, #0
   dd89e:	2000      	movne	r0, #0
   dd8a0:	bd30      	popne	{r4, r5, pc}
   dd8a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dd8a6:	d105      	bne.n	dd8b4 <__adddf3+0x230>
   dd8a8:	0040      	lsls	r0, r0, #1
   dd8aa:	4149      	adcs	r1, r1
   dd8ac:	bf28      	it	cs
   dd8ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dd8b2:	bd30      	pop	{r4, r5, pc}
   dd8b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dd8b8:	bf3c      	itt	cc
   dd8ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dd8be:	bd30      	popcc	{r4, r5, pc}
   dd8c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd8c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dd8c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dd8cc:	f04f 0000 	mov.w	r0, #0
   dd8d0:	bd30      	pop	{r4, r5, pc}
   dd8d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dd8d6:	bf1a      	itte	ne
   dd8d8:	4619      	movne	r1, r3
   dd8da:	4610      	movne	r0, r2
   dd8dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dd8e0:	bf1c      	itt	ne
   dd8e2:	460b      	movne	r3, r1
   dd8e4:	4602      	movne	r2, r0
   dd8e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dd8ea:	bf06      	itte	eq
   dd8ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dd8f0:	ea91 0f03 	teqeq	r1, r3
   dd8f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dd8f8:	bd30      	pop	{r4, r5, pc}
   dd8fa:	bf00      	nop

000dd8fc <__aeabi_ui2d>:
   dd8fc:	f090 0f00 	teq	r0, #0
   dd900:	bf04      	itt	eq
   dd902:	2100      	moveq	r1, #0
   dd904:	4770      	bxeq	lr
   dd906:	b530      	push	{r4, r5, lr}
   dd908:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dd90c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dd910:	f04f 0500 	mov.w	r5, #0
   dd914:	f04f 0100 	mov.w	r1, #0
   dd918:	e750      	b.n	dd7bc <__adddf3+0x138>
   dd91a:	bf00      	nop

000dd91c <__aeabi_i2d>:
   dd91c:	f090 0f00 	teq	r0, #0
   dd920:	bf04      	itt	eq
   dd922:	2100      	moveq	r1, #0
   dd924:	4770      	bxeq	lr
   dd926:	b530      	push	{r4, r5, lr}
   dd928:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dd92c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dd930:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dd934:	bf48      	it	mi
   dd936:	4240      	negmi	r0, r0
   dd938:	f04f 0100 	mov.w	r1, #0
   dd93c:	e73e      	b.n	dd7bc <__adddf3+0x138>
   dd93e:	bf00      	nop

000dd940 <__aeabi_f2d>:
   dd940:	0042      	lsls	r2, r0, #1
   dd942:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dd946:	ea4f 0131 	mov.w	r1, r1, rrx
   dd94a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dd94e:	bf1f      	itttt	ne
   dd950:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dd954:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dd958:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dd95c:	4770      	bxne	lr
   dd95e:	f092 0f00 	teq	r2, #0
   dd962:	bf14      	ite	ne
   dd964:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dd968:	4770      	bxeq	lr
   dd96a:	b530      	push	{r4, r5, lr}
   dd96c:	f44f 7460 	mov.w	r4, #896	; 0x380
   dd970:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd974:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dd978:	e720      	b.n	dd7bc <__adddf3+0x138>
   dd97a:	bf00      	nop

000dd97c <__aeabi_ul2d>:
   dd97c:	ea50 0201 	orrs.w	r2, r0, r1
   dd980:	bf08      	it	eq
   dd982:	4770      	bxeq	lr
   dd984:	b530      	push	{r4, r5, lr}
   dd986:	f04f 0500 	mov.w	r5, #0
   dd98a:	e00a      	b.n	dd9a2 <__aeabi_l2d+0x16>

000dd98c <__aeabi_l2d>:
   dd98c:	ea50 0201 	orrs.w	r2, r0, r1
   dd990:	bf08      	it	eq
   dd992:	4770      	bxeq	lr
   dd994:	b530      	push	{r4, r5, lr}
   dd996:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dd99a:	d502      	bpl.n	dd9a2 <__aeabi_l2d+0x16>
   dd99c:	4240      	negs	r0, r0
   dd99e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd9a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dd9a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dd9aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dd9ae:	f43f aedc 	beq.w	dd76a <__adddf3+0xe6>
   dd9b2:	f04f 0203 	mov.w	r2, #3
   dd9b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dd9ba:	bf18      	it	ne
   dd9bc:	3203      	addne	r2, #3
   dd9be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dd9c2:	bf18      	it	ne
   dd9c4:	3203      	addne	r2, #3
   dd9c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dd9ca:	f1c2 0320 	rsb	r3, r2, #32
   dd9ce:	fa00 fc03 	lsl.w	ip, r0, r3
   dd9d2:	fa20 f002 	lsr.w	r0, r0, r2
   dd9d6:	fa01 fe03 	lsl.w	lr, r1, r3
   dd9da:	ea40 000e 	orr.w	r0, r0, lr
   dd9de:	fa21 f102 	lsr.w	r1, r1, r2
   dd9e2:	4414      	add	r4, r2
   dd9e4:	e6c1      	b.n	dd76a <__adddf3+0xe6>
   dd9e6:	bf00      	nop

000dd9e8 <__aeabi_dmul>:
   dd9e8:	b570      	push	{r4, r5, r6, lr}
   dd9ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dd9ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dd9f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dd9f6:	bf1d      	ittte	ne
   dd9f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dd9fc:	ea94 0f0c 	teqne	r4, ip
   dda00:	ea95 0f0c 	teqne	r5, ip
   dda04:	f000 f8de 	bleq	ddbc4 <__aeabi_dmul+0x1dc>
   dda08:	442c      	add	r4, r5
   dda0a:	ea81 0603 	eor.w	r6, r1, r3
   dda0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dda12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dda16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dda1a:	bf18      	it	ne
   dda1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dda20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dda24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dda28:	d038      	beq.n	dda9c <__aeabi_dmul+0xb4>
   dda2a:	fba0 ce02 	umull	ip, lr, r0, r2
   dda2e:	f04f 0500 	mov.w	r5, #0
   dda32:	fbe1 e502 	umlal	lr, r5, r1, r2
   dda36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dda3a:	fbe0 e503 	umlal	lr, r5, r0, r3
   dda3e:	f04f 0600 	mov.w	r6, #0
   dda42:	fbe1 5603 	umlal	r5, r6, r1, r3
   dda46:	f09c 0f00 	teq	ip, #0
   dda4a:	bf18      	it	ne
   dda4c:	f04e 0e01 	orrne.w	lr, lr, #1
   dda50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dda54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dda58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dda5c:	d204      	bcs.n	dda68 <__aeabi_dmul+0x80>
   dda5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dda62:	416d      	adcs	r5, r5
   dda64:	eb46 0606 	adc.w	r6, r6, r6
   dda68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dda6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dda70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dda74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dda78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dda7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dda80:	bf88      	it	hi
   dda82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dda86:	d81e      	bhi.n	ddac6 <__aeabi_dmul+0xde>
   dda88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dda8c:	bf08      	it	eq
   dda8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dda92:	f150 0000 	adcs.w	r0, r0, #0
   dda96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dda9a:	bd70      	pop	{r4, r5, r6, pc}
   dda9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ddaa0:	ea46 0101 	orr.w	r1, r6, r1
   ddaa4:	ea40 0002 	orr.w	r0, r0, r2
   ddaa8:	ea81 0103 	eor.w	r1, r1, r3
   ddaac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ddab0:	bfc2      	ittt	gt
   ddab2:	ebd4 050c 	rsbsgt	r5, r4, ip
   ddab6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ddaba:	bd70      	popgt	{r4, r5, r6, pc}
   ddabc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ddac0:	f04f 0e00 	mov.w	lr, #0
   ddac4:	3c01      	subs	r4, #1
   ddac6:	f300 80ab 	bgt.w	ddc20 <__aeabi_dmul+0x238>
   ddaca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ddace:	bfde      	ittt	le
   ddad0:	2000      	movle	r0, #0
   ddad2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ddad6:	bd70      	pople	{r4, r5, r6, pc}
   ddad8:	f1c4 0400 	rsb	r4, r4, #0
   ddadc:	3c20      	subs	r4, #32
   ddade:	da35      	bge.n	ddb4c <__aeabi_dmul+0x164>
   ddae0:	340c      	adds	r4, #12
   ddae2:	dc1b      	bgt.n	ddb1c <__aeabi_dmul+0x134>
   ddae4:	f104 0414 	add.w	r4, r4, #20
   ddae8:	f1c4 0520 	rsb	r5, r4, #32
   ddaec:	fa00 f305 	lsl.w	r3, r0, r5
   ddaf0:	fa20 f004 	lsr.w	r0, r0, r4
   ddaf4:	fa01 f205 	lsl.w	r2, r1, r5
   ddaf8:	ea40 0002 	orr.w	r0, r0, r2
   ddafc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ddb00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ddb04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ddb08:	fa21 f604 	lsr.w	r6, r1, r4
   ddb0c:	eb42 0106 	adc.w	r1, r2, r6
   ddb10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ddb14:	bf08      	it	eq
   ddb16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ddb1a:	bd70      	pop	{r4, r5, r6, pc}
   ddb1c:	f1c4 040c 	rsb	r4, r4, #12
   ddb20:	f1c4 0520 	rsb	r5, r4, #32
   ddb24:	fa00 f304 	lsl.w	r3, r0, r4
   ddb28:	fa20 f005 	lsr.w	r0, r0, r5
   ddb2c:	fa01 f204 	lsl.w	r2, r1, r4
   ddb30:	ea40 0002 	orr.w	r0, r0, r2
   ddb34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ddb38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ddb3c:	f141 0100 	adc.w	r1, r1, #0
   ddb40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ddb44:	bf08      	it	eq
   ddb46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ddb4a:	bd70      	pop	{r4, r5, r6, pc}
   ddb4c:	f1c4 0520 	rsb	r5, r4, #32
   ddb50:	fa00 f205 	lsl.w	r2, r0, r5
   ddb54:	ea4e 0e02 	orr.w	lr, lr, r2
   ddb58:	fa20 f304 	lsr.w	r3, r0, r4
   ddb5c:	fa01 f205 	lsl.w	r2, r1, r5
   ddb60:	ea43 0302 	orr.w	r3, r3, r2
   ddb64:	fa21 f004 	lsr.w	r0, r1, r4
   ddb68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ddb6c:	fa21 f204 	lsr.w	r2, r1, r4
   ddb70:	ea20 0002 	bic.w	r0, r0, r2
   ddb74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ddb78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ddb7c:	bf08      	it	eq
   ddb7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ddb82:	bd70      	pop	{r4, r5, r6, pc}
   ddb84:	f094 0f00 	teq	r4, #0
   ddb88:	d10f      	bne.n	ddbaa <__aeabi_dmul+0x1c2>
   ddb8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ddb8e:	0040      	lsls	r0, r0, #1
   ddb90:	eb41 0101 	adc.w	r1, r1, r1
   ddb94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ddb98:	bf08      	it	eq
   ddb9a:	3c01      	subeq	r4, #1
   ddb9c:	d0f7      	beq.n	ddb8e <__aeabi_dmul+0x1a6>
   ddb9e:	ea41 0106 	orr.w	r1, r1, r6
   ddba2:	f095 0f00 	teq	r5, #0
   ddba6:	bf18      	it	ne
   ddba8:	4770      	bxne	lr
   ddbaa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ddbae:	0052      	lsls	r2, r2, #1
   ddbb0:	eb43 0303 	adc.w	r3, r3, r3
   ddbb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ddbb8:	bf08      	it	eq
   ddbba:	3d01      	subeq	r5, #1
   ddbbc:	d0f7      	beq.n	ddbae <__aeabi_dmul+0x1c6>
   ddbbe:	ea43 0306 	orr.w	r3, r3, r6
   ddbc2:	4770      	bx	lr
   ddbc4:	ea94 0f0c 	teq	r4, ip
   ddbc8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ddbcc:	bf18      	it	ne
   ddbce:	ea95 0f0c 	teqne	r5, ip
   ddbd2:	d00c      	beq.n	ddbee <__aeabi_dmul+0x206>
   ddbd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ddbd8:	bf18      	it	ne
   ddbda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ddbde:	d1d1      	bne.n	ddb84 <__aeabi_dmul+0x19c>
   ddbe0:	ea81 0103 	eor.w	r1, r1, r3
   ddbe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ddbe8:	f04f 0000 	mov.w	r0, #0
   ddbec:	bd70      	pop	{r4, r5, r6, pc}
   ddbee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ddbf2:	bf06      	itte	eq
   ddbf4:	4610      	moveq	r0, r2
   ddbf6:	4619      	moveq	r1, r3
   ddbf8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ddbfc:	d019      	beq.n	ddc32 <__aeabi_dmul+0x24a>
   ddbfe:	ea94 0f0c 	teq	r4, ip
   ddc02:	d102      	bne.n	ddc0a <__aeabi_dmul+0x222>
   ddc04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ddc08:	d113      	bne.n	ddc32 <__aeabi_dmul+0x24a>
   ddc0a:	ea95 0f0c 	teq	r5, ip
   ddc0e:	d105      	bne.n	ddc1c <__aeabi_dmul+0x234>
   ddc10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   ddc14:	bf1c      	itt	ne
   ddc16:	4610      	movne	r0, r2
   ddc18:	4619      	movne	r1, r3
   ddc1a:	d10a      	bne.n	ddc32 <__aeabi_dmul+0x24a>
   ddc1c:	ea81 0103 	eor.w	r1, r1, r3
   ddc20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ddc24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ddc28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ddc2c:	f04f 0000 	mov.w	r0, #0
   ddc30:	bd70      	pop	{r4, r5, r6, pc}
   ddc32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ddc36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   ddc3a:	bd70      	pop	{r4, r5, r6, pc}

000ddc3c <__aeabi_ddiv>:
   ddc3c:	b570      	push	{r4, r5, r6, lr}
   ddc3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ddc42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ddc46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ddc4a:	bf1d      	ittte	ne
   ddc4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ddc50:	ea94 0f0c 	teqne	r4, ip
   ddc54:	ea95 0f0c 	teqne	r5, ip
   ddc58:	f000 f8a7 	bleq	dddaa <__aeabi_ddiv+0x16e>
   ddc5c:	eba4 0405 	sub.w	r4, r4, r5
   ddc60:	ea81 0e03 	eor.w	lr, r1, r3
   ddc64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ddc68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ddc6c:	f000 8088 	beq.w	ddd80 <__aeabi_ddiv+0x144>
   ddc70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ddc74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   ddc78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   ddc7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   ddc80:	ea4f 2202 	mov.w	r2, r2, lsl #8
   ddc84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   ddc88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   ddc8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   ddc90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   ddc94:	429d      	cmp	r5, r3
   ddc96:	bf08      	it	eq
   ddc98:	4296      	cmpeq	r6, r2
   ddc9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   ddc9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   ddca2:	d202      	bcs.n	ddcaa <__aeabi_ddiv+0x6e>
   ddca4:	085b      	lsrs	r3, r3, #1
   ddca6:	ea4f 0232 	mov.w	r2, r2, rrx
   ddcaa:	1ab6      	subs	r6, r6, r2
   ddcac:	eb65 0503 	sbc.w	r5, r5, r3
   ddcb0:	085b      	lsrs	r3, r3, #1
   ddcb2:	ea4f 0232 	mov.w	r2, r2, rrx
   ddcb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   ddcba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   ddcbe:	ebb6 0e02 	subs.w	lr, r6, r2
   ddcc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   ddcc6:	bf22      	ittt	cs
   ddcc8:	1ab6      	subcs	r6, r6, r2
   ddcca:	4675      	movcs	r5, lr
   ddccc:	ea40 000c 	orrcs.w	r0, r0, ip
   ddcd0:	085b      	lsrs	r3, r3, #1
   ddcd2:	ea4f 0232 	mov.w	r2, r2, rrx
   ddcd6:	ebb6 0e02 	subs.w	lr, r6, r2
   ddcda:	eb75 0e03 	sbcs.w	lr, r5, r3
   ddcde:	bf22      	ittt	cs
   ddce0:	1ab6      	subcs	r6, r6, r2
   ddce2:	4675      	movcs	r5, lr
   ddce4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   ddce8:	085b      	lsrs	r3, r3, #1
   ddcea:	ea4f 0232 	mov.w	r2, r2, rrx
   ddcee:	ebb6 0e02 	subs.w	lr, r6, r2
   ddcf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   ddcf6:	bf22      	ittt	cs
   ddcf8:	1ab6      	subcs	r6, r6, r2
   ddcfa:	4675      	movcs	r5, lr
   ddcfc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   ddd00:	085b      	lsrs	r3, r3, #1
   ddd02:	ea4f 0232 	mov.w	r2, r2, rrx
   ddd06:	ebb6 0e02 	subs.w	lr, r6, r2
   ddd0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   ddd0e:	bf22      	ittt	cs
   ddd10:	1ab6      	subcs	r6, r6, r2
   ddd12:	4675      	movcs	r5, lr
   ddd14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   ddd18:	ea55 0e06 	orrs.w	lr, r5, r6
   ddd1c:	d018      	beq.n	ddd50 <__aeabi_ddiv+0x114>
   ddd1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   ddd22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   ddd26:	ea4f 1606 	mov.w	r6, r6, lsl #4
   ddd2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   ddd2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   ddd32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   ddd36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   ddd3a:	d1c0      	bne.n	ddcbe <__aeabi_ddiv+0x82>
   ddd3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ddd40:	d10b      	bne.n	ddd5a <__aeabi_ddiv+0x11e>
   ddd42:	ea41 0100 	orr.w	r1, r1, r0
   ddd46:	f04f 0000 	mov.w	r0, #0
   ddd4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   ddd4e:	e7b6      	b.n	ddcbe <__aeabi_ddiv+0x82>
   ddd50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ddd54:	bf04      	itt	eq
   ddd56:	4301      	orreq	r1, r0
   ddd58:	2000      	moveq	r0, #0
   ddd5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ddd5e:	bf88      	it	hi
   ddd60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ddd64:	f63f aeaf 	bhi.w	ddac6 <__aeabi_dmul+0xde>
   ddd68:	ebb5 0c03 	subs.w	ip, r5, r3
   ddd6c:	bf04      	itt	eq
   ddd6e:	ebb6 0c02 	subseq.w	ip, r6, r2
   ddd72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ddd76:	f150 0000 	adcs.w	r0, r0, #0
   ddd7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ddd7e:	bd70      	pop	{r4, r5, r6, pc}
   ddd80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   ddd84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   ddd88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   ddd8c:	bfc2      	ittt	gt
   ddd8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   ddd92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ddd96:	bd70      	popgt	{r4, r5, r6, pc}
   ddd98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ddd9c:	f04f 0e00 	mov.w	lr, #0
   ddda0:	3c01      	subs	r4, #1
   ddda2:	e690      	b.n	ddac6 <__aeabi_dmul+0xde>
   ddda4:	ea45 0e06 	orr.w	lr, r5, r6
   ddda8:	e68d      	b.n	ddac6 <__aeabi_dmul+0xde>
   dddaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dddae:	ea94 0f0c 	teq	r4, ip
   dddb2:	bf08      	it	eq
   dddb4:	ea95 0f0c 	teqeq	r5, ip
   dddb8:	f43f af3b 	beq.w	ddc32 <__aeabi_dmul+0x24a>
   dddbc:	ea94 0f0c 	teq	r4, ip
   dddc0:	d10a      	bne.n	dddd8 <__aeabi_ddiv+0x19c>
   dddc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dddc6:	f47f af34 	bne.w	ddc32 <__aeabi_dmul+0x24a>
   dddca:	ea95 0f0c 	teq	r5, ip
   dddce:	f47f af25 	bne.w	ddc1c <__aeabi_dmul+0x234>
   dddd2:	4610      	mov	r0, r2
   dddd4:	4619      	mov	r1, r3
   dddd6:	e72c      	b.n	ddc32 <__aeabi_dmul+0x24a>
   dddd8:	ea95 0f0c 	teq	r5, ip
   ddddc:	d106      	bne.n	dddec <__aeabi_ddiv+0x1b0>
   dddde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ddde2:	f43f aefd 	beq.w	ddbe0 <__aeabi_dmul+0x1f8>
   ddde6:	4610      	mov	r0, r2
   ddde8:	4619      	mov	r1, r3
   dddea:	e722      	b.n	ddc32 <__aeabi_dmul+0x24a>
   dddec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dddf0:	bf18      	it	ne
   dddf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dddf6:	f47f aec5 	bne.w	ddb84 <__aeabi_dmul+0x19c>
   dddfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dddfe:	f47f af0d 	bne.w	ddc1c <__aeabi_dmul+0x234>
   dde02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dde06:	f47f aeeb 	bne.w	ddbe0 <__aeabi_dmul+0x1f8>
   dde0a:	e712      	b.n	ddc32 <__aeabi_dmul+0x24a>

000dde0c <__gedf2>:
   dde0c:	f04f 3cff 	mov.w	ip, #4294967295
   dde10:	e006      	b.n	dde20 <__cmpdf2+0x4>
   dde12:	bf00      	nop

000dde14 <__ledf2>:
   dde14:	f04f 0c01 	mov.w	ip, #1
   dde18:	e002      	b.n	dde20 <__cmpdf2+0x4>
   dde1a:	bf00      	nop

000dde1c <__cmpdf2>:
   dde1c:	f04f 0c01 	mov.w	ip, #1
   dde20:	f84d cd04 	str.w	ip, [sp, #-4]!
   dde24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dde28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dde2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dde30:	bf18      	it	ne
   dde32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dde36:	d01b      	beq.n	dde70 <__cmpdf2+0x54>
   dde38:	b001      	add	sp, #4
   dde3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dde3e:	bf0c      	ite	eq
   dde40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dde44:	ea91 0f03 	teqne	r1, r3
   dde48:	bf02      	ittt	eq
   dde4a:	ea90 0f02 	teqeq	r0, r2
   dde4e:	2000      	moveq	r0, #0
   dde50:	4770      	bxeq	lr
   dde52:	f110 0f00 	cmn.w	r0, #0
   dde56:	ea91 0f03 	teq	r1, r3
   dde5a:	bf58      	it	pl
   dde5c:	4299      	cmppl	r1, r3
   dde5e:	bf08      	it	eq
   dde60:	4290      	cmpeq	r0, r2
   dde62:	bf2c      	ite	cs
   dde64:	17d8      	asrcs	r0, r3, #31
   dde66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dde6a:	f040 0001 	orr.w	r0, r0, #1
   dde6e:	4770      	bx	lr
   dde70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dde74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dde78:	d102      	bne.n	dde80 <__cmpdf2+0x64>
   dde7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dde7e:	d107      	bne.n	dde90 <__cmpdf2+0x74>
   dde80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dde84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dde88:	d1d6      	bne.n	dde38 <__cmpdf2+0x1c>
   dde8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dde8e:	d0d3      	beq.n	dde38 <__cmpdf2+0x1c>
   dde90:	f85d 0b04 	ldr.w	r0, [sp], #4
   dde94:	4770      	bx	lr
   dde96:	bf00      	nop

000dde98 <__aeabi_cdrcmple>:
   dde98:	4684      	mov	ip, r0
   dde9a:	4610      	mov	r0, r2
   dde9c:	4662      	mov	r2, ip
   dde9e:	468c      	mov	ip, r1
   ddea0:	4619      	mov	r1, r3
   ddea2:	4663      	mov	r3, ip
   ddea4:	e000      	b.n	ddea8 <__aeabi_cdcmpeq>
   ddea6:	bf00      	nop

000ddea8 <__aeabi_cdcmpeq>:
   ddea8:	b501      	push	{r0, lr}
   ddeaa:	f7ff ffb7 	bl	dde1c <__cmpdf2>
   ddeae:	2800      	cmp	r0, #0
   ddeb0:	bf48      	it	mi
   ddeb2:	f110 0f00 	cmnmi.w	r0, #0
   ddeb6:	bd01      	pop	{r0, pc}

000ddeb8 <__aeabi_dcmpeq>:
   ddeb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   ddebc:	f7ff fff4 	bl	ddea8 <__aeabi_cdcmpeq>
   ddec0:	bf0c      	ite	eq
   ddec2:	2001      	moveq	r0, #1
   ddec4:	2000      	movne	r0, #0
   ddec6:	f85d fb08 	ldr.w	pc, [sp], #8
   ddeca:	bf00      	nop

000ddecc <__aeabi_dcmplt>:
   ddecc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dded0:	f7ff ffea 	bl	ddea8 <__aeabi_cdcmpeq>
   dded4:	bf34      	ite	cc
   dded6:	2001      	movcc	r0, #1
   dded8:	2000      	movcs	r0, #0
   ddeda:	f85d fb08 	ldr.w	pc, [sp], #8
   ddede:	bf00      	nop

000ddee0 <__aeabi_dcmple>:
   ddee0:	f84d ed08 	str.w	lr, [sp, #-8]!
   ddee4:	f7ff ffe0 	bl	ddea8 <__aeabi_cdcmpeq>
   ddee8:	bf94      	ite	ls
   ddeea:	2001      	movls	r0, #1
   ddeec:	2000      	movhi	r0, #0
   ddeee:	f85d fb08 	ldr.w	pc, [sp], #8
   ddef2:	bf00      	nop

000ddef4 <__aeabi_dcmpge>:
   ddef4:	f84d ed08 	str.w	lr, [sp, #-8]!
   ddef8:	f7ff ffce 	bl	dde98 <__aeabi_cdrcmple>
   ddefc:	bf94      	ite	ls
   ddefe:	2001      	movls	r0, #1
   ddf00:	2000      	movhi	r0, #0
   ddf02:	f85d fb08 	ldr.w	pc, [sp], #8
   ddf06:	bf00      	nop

000ddf08 <__aeabi_dcmpgt>:
   ddf08:	f84d ed08 	str.w	lr, [sp, #-8]!
   ddf0c:	f7ff ffc4 	bl	dde98 <__aeabi_cdrcmple>
   ddf10:	bf34      	ite	cc
   ddf12:	2001      	movcc	r0, #1
   ddf14:	2000      	movcs	r0, #0
   ddf16:	f85d fb08 	ldr.w	pc, [sp], #8
   ddf1a:	bf00      	nop

000ddf1c <__aeabi_dcmpun>:
   ddf1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ddf20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ddf24:	d102      	bne.n	ddf2c <__aeabi_dcmpun+0x10>
   ddf26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ddf2a:	d10a      	bne.n	ddf42 <__aeabi_dcmpun+0x26>
   ddf2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ddf30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ddf34:	d102      	bne.n	ddf3c <__aeabi_dcmpun+0x20>
   ddf36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ddf3a:	d102      	bne.n	ddf42 <__aeabi_dcmpun+0x26>
   ddf3c:	f04f 0000 	mov.w	r0, #0
   ddf40:	4770      	bx	lr
   ddf42:	f04f 0001 	mov.w	r0, #1
   ddf46:	4770      	bx	lr

000ddf48 <__aeabi_d2iz>:
   ddf48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   ddf4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ddf50:	d215      	bcs.n	ddf7e <__aeabi_d2iz+0x36>
   ddf52:	d511      	bpl.n	ddf78 <__aeabi_d2iz+0x30>
   ddf54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ddf58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ddf5c:	d912      	bls.n	ddf84 <__aeabi_d2iz+0x3c>
   ddf5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ddf62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ddf66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ddf6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ddf6e:	fa23 f002 	lsr.w	r0, r3, r2
   ddf72:	bf18      	it	ne
   ddf74:	4240      	negne	r0, r0
   ddf76:	4770      	bx	lr
   ddf78:	f04f 0000 	mov.w	r0, #0
   ddf7c:	4770      	bx	lr
   ddf7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ddf82:	d105      	bne.n	ddf90 <__aeabi_d2iz+0x48>
   ddf84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   ddf88:	bf08      	it	eq
   ddf8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   ddf8e:	4770      	bx	lr
   ddf90:	f04f 0000 	mov.w	r0, #0
   ddf94:	4770      	bx	lr
   ddf96:	bf00      	nop

000ddf98 <__aeabi_d2uiz>:
   ddf98:	004a      	lsls	r2, r1, #1
   ddf9a:	d211      	bcs.n	ddfc0 <__aeabi_d2uiz+0x28>
   ddf9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ddfa0:	d211      	bcs.n	ddfc6 <__aeabi_d2uiz+0x2e>
   ddfa2:	d50d      	bpl.n	ddfc0 <__aeabi_d2uiz+0x28>
   ddfa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ddfa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ddfac:	d40e      	bmi.n	ddfcc <__aeabi_d2uiz+0x34>
   ddfae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ddfb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ddfb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ddfba:	fa23 f002 	lsr.w	r0, r3, r2
   ddfbe:	4770      	bx	lr
   ddfc0:	f04f 0000 	mov.w	r0, #0
   ddfc4:	4770      	bx	lr
   ddfc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ddfca:	d102      	bne.n	ddfd2 <__aeabi_d2uiz+0x3a>
   ddfcc:	f04f 30ff 	mov.w	r0, #4294967295
   ddfd0:	4770      	bx	lr
   ddfd2:	f04f 0000 	mov.w	r0, #0
   ddfd6:	4770      	bx	lr

000ddfd8 <__aeabi_d2f>:
   ddfd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   ddfdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   ddfe0:	bf24      	itt	cs
   ddfe2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   ddfe6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   ddfea:	d90d      	bls.n	de008 <__aeabi_d2f+0x30>
   ddfec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   ddff0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   ddff4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   ddff8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   ddffc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   de000:	bf08      	it	eq
   de002:	f020 0001 	biceq.w	r0, r0, #1
   de006:	4770      	bx	lr
   de008:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   de00c:	d121      	bne.n	de052 <__aeabi_d2f+0x7a>
   de00e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   de012:	bfbc      	itt	lt
   de014:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   de018:	4770      	bxlt	lr
   de01a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de01e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   de022:	f1c2 0218 	rsb	r2, r2, #24
   de026:	f1c2 0c20 	rsb	ip, r2, #32
   de02a:	fa10 f30c 	lsls.w	r3, r0, ip
   de02e:	fa20 f002 	lsr.w	r0, r0, r2
   de032:	bf18      	it	ne
   de034:	f040 0001 	orrne.w	r0, r0, #1
   de038:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de03c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   de040:	fa03 fc0c 	lsl.w	ip, r3, ip
   de044:	ea40 000c 	orr.w	r0, r0, ip
   de048:	fa23 f302 	lsr.w	r3, r3, r2
   de04c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   de050:	e7cc      	b.n	ddfec <__aeabi_d2f+0x14>
   de052:	ea7f 5362 	mvns.w	r3, r2, asr #21
   de056:	d107      	bne.n	de068 <__aeabi_d2f+0x90>
   de058:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   de05c:	bf1e      	ittt	ne
   de05e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   de062:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   de066:	4770      	bxne	lr
   de068:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   de06c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   de070:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   de074:	4770      	bx	lr
   de076:	bf00      	nop

000de078 <__aeabi_uldivmod>:
   de078:	b953      	cbnz	r3, de090 <__aeabi_uldivmod+0x18>
   de07a:	b94a      	cbnz	r2, de090 <__aeabi_uldivmod+0x18>
   de07c:	2900      	cmp	r1, #0
   de07e:	bf08      	it	eq
   de080:	2800      	cmpeq	r0, #0
   de082:	bf1c      	itt	ne
   de084:	f04f 31ff 	movne.w	r1, #4294967295
   de088:	f04f 30ff 	movne.w	r0, #4294967295
   de08c:	f000 b9a2 	b.w	de3d4 <__aeabi_idiv0>
   de090:	f1ad 0c08 	sub.w	ip, sp, #8
   de094:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   de098:	f000 f82a 	bl	de0f0 <__udivmoddi4>
   de09c:	f8dd e004 	ldr.w	lr, [sp, #4]
   de0a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   de0a4:	b004      	add	sp, #16
   de0a6:	4770      	bx	lr

000de0a8 <__aeabi_d2ulz>:
   de0a8:	b5d0      	push	{r4, r6, r7, lr}
   de0aa:	2200      	movs	r2, #0
   de0ac:	4b0e      	ldr	r3, [pc, #56]	; (de0e8 <__aeabi_d2ulz+0x40>)
   de0ae:	4606      	mov	r6, r0
   de0b0:	460f      	mov	r7, r1
   de0b2:	f7ff fc99 	bl	dd9e8 <__aeabi_dmul>
   de0b6:	f7ff ff6f 	bl	ddf98 <__aeabi_d2uiz>
   de0ba:	4604      	mov	r4, r0
   de0bc:	f7ff fc1e 	bl	dd8fc <__aeabi_ui2d>
   de0c0:	2200      	movs	r2, #0
   de0c2:	4b0a      	ldr	r3, [pc, #40]	; (de0ec <__aeabi_d2ulz+0x44>)
   de0c4:	f7ff fc90 	bl	dd9e8 <__aeabi_dmul>
   de0c8:	4602      	mov	r2, r0
   de0ca:	460b      	mov	r3, r1
   de0cc:	4630      	mov	r0, r6
   de0ce:	4639      	mov	r1, r7
   de0d0:	f7ff fad6 	bl	dd680 <__aeabi_dsub>
   de0d4:	f7ff ff60 	bl	ddf98 <__aeabi_d2uiz>
   de0d8:	4623      	mov	r3, r4
   de0da:	2200      	movs	r2, #0
   de0dc:	ea42 0200 	orr.w	r2, r2, r0
   de0e0:	4610      	mov	r0, r2
   de0e2:	4619      	mov	r1, r3
   de0e4:	bdd0      	pop	{r4, r6, r7, pc}
   de0e6:	bf00      	nop
   de0e8:	3df00000 	.word	0x3df00000
   de0ec:	41f00000 	.word	0x41f00000

000de0f0 <__udivmoddi4>:
   de0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de0f4:	468c      	mov	ip, r1
   de0f6:	460e      	mov	r6, r1
   de0f8:	4604      	mov	r4, r0
   de0fa:	9d08      	ldr	r5, [sp, #32]
   de0fc:	2b00      	cmp	r3, #0
   de0fe:	d150      	bne.n	de1a2 <__udivmoddi4+0xb2>
   de100:	428a      	cmp	r2, r1
   de102:	4617      	mov	r7, r2
   de104:	d96c      	bls.n	de1e0 <__udivmoddi4+0xf0>
   de106:	fab2 fe82 	clz	lr, r2
   de10a:	f1be 0f00 	cmp.w	lr, #0
   de10e:	d00b      	beq.n	de128 <__udivmoddi4+0x38>
   de110:	f1ce 0420 	rsb	r4, lr, #32
   de114:	fa20 f404 	lsr.w	r4, r0, r4
   de118:	fa01 f60e 	lsl.w	r6, r1, lr
   de11c:	ea44 0c06 	orr.w	ip, r4, r6
   de120:	fa02 f70e 	lsl.w	r7, r2, lr
   de124:	fa00 f40e 	lsl.w	r4, r0, lr
   de128:	ea4f 4917 	mov.w	r9, r7, lsr #16
   de12c:	0c22      	lsrs	r2, r4, #16
   de12e:	fbbc f0f9 	udiv	r0, ip, r9
   de132:	fa1f f887 	uxth.w	r8, r7
   de136:	fb09 c610 	mls	r6, r9, r0, ip
   de13a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   de13e:	fb00 f308 	mul.w	r3, r0, r8
   de142:	42b3      	cmp	r3, r6
   de144:	d909      	bls.n	de15a <__udivmoddi4+0x6a>
   de146:	19f6      	adds	r6, r6, r7
   de148:	f100 32ff 	add.w	r2, r0, #4294967295
   de14c:	f080 8122 	bcs.w	de394 <__udivmoddi4+0x2a4>
   de150:	42b3      	cmp	r3, r6
   de152:	f240 811f 	bls.w	de394 <__udivmoddi4+0x2a4>
   de156:	3802      	subs	r0, #2
   de158:	443e      	add	r6, r7
   de15a:	1af6      	subs	r6, r6, r3
   de15c:	b2a2      	uxth	r2, r4
   de15e:	fbb6 f3f9 	udiv	r3, r6, r9
   de162:	fb09 6613 	mls	r6, r9, r3, r6
   de166:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   de16a:	fb03 f808 	mul.w	r8, r3, r8
   de16e:	45a0      	cmp	r8, r4
   de170:	d909      	bls.n	de186 <__udivmoddi4+0x96>
   de172:	19e4      	adds	r4, r4, r7
   de174:	f103 32ff 	add.w	r2, r3, #4294967295
   de178:	f080 810a 	bcs.w	de390 <__udivmoddi4+0x2a0>
   de17c:	45a0      	cmp	r8, r4
   de17e:	f240 8107 	bls.w	de390 <__udivmoddi4+0x2a0>
   de182:	3b02      	subs	r3, #2
   de184:	443c      	add	r4, r7
   de186:	ebc8 0404 	rsb	r4, r8, r4
   de18a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   de18e:	2100      	movs	r1, #0
   de190:	2d00      	cmp	r5, #0
   de192:	d062      	beq.n	de25a <__udivmoddi4+0x16a>
   de194:	fa24 f40e 	lsr.w	r4, r4, lr
   de198:	2300      	movs	r3, #0
   de19a:	602c      	str	r4, [r5, #0]
   de19c:	606b      	str	r3, [r5, #4]
   de19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de1a2:	428b      	cmp	r3, r1
   de1a4:	d907      	bls.n	de1b6 <__udivmoddi4+0xc6>
   de1a6:	2d00      	cmp	r5, #0
   de1a8:	d055      	beq.n	de256 <__udivmoddi4+0x166>
   de1aa:	2100      	movs	r1, #0
   de1ac:	e885 0041 	stmia.w	r5, {r0, r6}
   de1b0:	4608      	mov	r0, r1
   de1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de1b6:	fab3 f183 	clz	r1, r3
   de1ba:	2900      	cmp	r1, #0
   de1bc:	f040 8090 	bne.w	de2e0 <__udivmoddi4+0x1f0>
   de1c0:	42b3      	cmp	r3, r6
   de1c2:	d302      	bcc.n	de1ca <__udivmoddi4+0xda>
   de1c4:	4282      	cmp	r2, r0
   de1c6:	f200 80f8 	bhi.w	de3ba <__udivmoddi4+0x2ca>
   de1ca:	1a84      	subs	r4, r0, r2
   de1cc:	eb66 0603 	sbc.w	r6, r6, r3
   de1d0:	2001      	movs	r0, #1
   de1d2:	46b4      	mov	ip, r6
   de1d4:	2d00      	cmp	r5, #0
   de1d6:	d040      	beq.n	de25a <__udivmoddi4+0x16a>
   de1d8:	e885 1010 	stmia.w	r5, {r4, ip}
   de1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de1e0:	b912      	cbnz	r2, de1e8 <__udivmoddi4+0xf8>
   de1e2:	2701      	movs	r7, #1
   de1e4:	fbb7 f7f2 	udiv	r7, r7, r2
   de1e8:	fab7 fe87 	clz	lr, r7
   de1ec:	f1be 0f00 	cmp.w	lr, #0
   de1f0:	d135      	bne.n	de25e <__udivmoddi4+0x16e>
   de1f2:	1bf3      	subs	r3, r6, r7
   de1f4:	ea4f 4817 	mov.w	r8, r7, lsr #16
   de1f8:	fa1f fc87 	uxth.w	ip, r7
   de1fc:	2101      	movs	r1, #1
   de1fe:	fbb3 f0f8 	udiv	r0, r3, r8
   de202:	0c22      	lsrs	r2, r4, #16
   de204:	fb08 3610 	mls	r6, r8, r0, r3
   de208:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   de20c:	fb0c f300 	mul.w	r3, ip, r0
   de210:	42b3      	cmp	r3, r6
   de212:	d907      	bls.n	de224 <__udivmoddi4+0x134>
   de214:	19f6      	adds	r6, r6, r7
   de216:	f100 32ff 	add.w	r2, r0, #4294967295
   de21a:	d202      	bcs.n	de222 <__udivmoddi4+0x132>
   de21c:	42b3      	cmp	r3, r6
   de21e:	f200 80ce 	bhi.w	de3be <__udivmoddi4+0x2ce>
   de222:	4610      	mov	r0, r2
   de224:	1af6      	subs	r6, r6, r3
   de226:	b2a2      	uxth	r2, r4
   de228:	fbb6 f3f8 	udiv	r3, r6, r8
   de22c:	fb08 6613 	mls	r6, r8, r3, r6
   de230:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   de234:	fb0c fc03 	mul.w	ip, ip, r3
   de238:	45a4      	cmp	ip, r4
   de23a:	d907      	bls.n	de24c <__udivmoddi4+0x15c>
   de23c:	19e4      	adds	r4, r4, r7
   de23e:	f103 32ff 	add.w	r2, r3, #4294967295
   de242:	d202      	bcs.n	de24a <__udivmoddi4+0x15a>
   de244:	45a4      	cmp	ip, r4
   de246:	f200 80b5 	bhi.w	de3b4 <__udivmoddi4+0x2c4>
   de24a:	4613      	mov	r3, r2
   de24c:	ebcc 0404 	rsb	r4, ip, r4
   de250:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   de254:	e79c      	b.n	de190 <__udivmoddi4+0xa0>
   de256:	4629      	mov	r1, r5
   de258:	4628      	mov	r0, r5
   de25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de25e:	f1ce 0120 	rsb	r1, lr, #32
   de262:	fa06 f30e 	lsl.w	r3, r6, lr
   de266:	fa07 f70e 	lsl.w	r7, r7, lr
   de26a:	fa20 f901 	lsr.w	r9, r0, r1
   de26e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   de272:	40ce      	lsrs	r6, r1
   de274:	ea49 0903 	orr.w	r9, r9, r3
   de278:	fbb6 faf8 	udiv	sl, r6, r8
   de27c:	ea4f 4419 	mov.w	r4, r9, lsr #16
   de280:	fb08 661a 	mls	r6, r8, sl, r6
   de284:	fa1f fc87 	uxth.w	ip, r7
   de288:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   de28c:	fb0a f20c 	mul.w	r2, sl, ip
   de290:	429a      	cmp	r2, r3
   de292:	fa00 f40e 	lsl.w	r4, r0, lr
   de296:	d90a      	bls.n	de2ae <__udivmoddi4+0x1be>
   de298:	19db      	adds	r3, r3, r7
   de29a:	f10a 31ff 	add.w	r1, sl, #4294967295
   de29e:	f080 8087 	bcs.w	de3b0 <__udivmoddi4+0x2c0>
   de2a2:	429a      	cmp	r2, r3
   de2a4:	f240 8084 	bls.w	de3b0 <__udivmoddi4+0x2c0>
   de2a8:	f1aa 0a02 	sub.w	sl, sl, #2
   de2ac:	443b      	add	r3, r7
   de2ae:	1a9b      	subs	r3, r3, r2
   de2b0:	fa1f f989 	uxth.w	r9, r9
   de2b4:	fbb3 f1f8 	udiv	r1, r3, r8
   de2b8:	fb08 3311 	mls	r3, r8, r1, r3
   de2bc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   de2c0:	fb01 f60c 	mul.w	r6, r1, ip
   de2c4:	429e      	cmp	r6, r3
   de2c6:	d907      	bls.n	de2d8 <__udivmoddi4+0x1e8>
   de2c8:	19db      	adds	r3, r3, r7
   de2ca:	f101 32ff 	add.w	r2, r1, #4294967295
   de2ce:	d26b      	bcs.n	de3a8 <__udivmoddi4+0x2b8>
   de2d0:	429e      	cmp	r6, r3
   de2d2:	d969      	bls.n	de3a8 <__udivmoddi4+0x2b8>
   de2d4:	3902      	subs	r1, #2
   de2d6:	443b      	add	r3, r7
   de2d8:	1b9b      	subs	r3, r3, r6
   de2da:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   de2de:	e78e      	b.n	de1fe <__udivmoddi4+0x10e>
   de2e0:	f1c1 0e20 	rsb	lr, r1, #32
   de2e4:	fa22 f40e 	lsr.w	r4, r2, lr
   de2e8:	408b      	lsls	r3, r1
   de2ea:	4323      	orrs	r3, r4
   de2ec:	fa20 f70e 	lsr.w	r7, r0, lr
   de2f0:	fa06 f401 	lsl.w	r4, r6, r1
   de2f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   de2f8:	fa26 f60e 	lsr.w	r6, r6, lr
   de2fc:	433c      	orrs	r4, r7
   de2fe:	fbb6 f9fc 	udiv	r9, r6, ip
   de302:	0c27      	lsrs	r7, r4, #16
   de304:	fb0c 6619 	mls	r6, ip, r9, r6
   de308:	fa1f f883 	uxth.w	r8, r3
   de30c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   de310:	fb09 f708 	mul.w	r7, r9, r8
   de314:	42b7      	cmp	r7, r6
   de316:	fa02 f201 	lsl.w	r2, r2, r1
   de31a:	fa00 fa01 	lsl.w	sl, r0, r1
   de31e:	d908      	bls.n	de332 <__udivmoddi4+0x242>
   de320:	18f6      	adds	r6, r6, r3
   de322:	f109 30ff 	add.w	r0, r9, #4294967295
   de326:	d241      	bcs.n	de3ac <__udivmoddi4+0x2bc>
   de328:	42b7      	cmp	r7, r6
   de32a:	d93f      	bls.n	de3ac <__udivmoddi4+0x2bc>
   de32c:	f1a9 0902 	sub.w	r9, r9, #2
   de330:	441e      	add	r6, r3
   de332:	1bf6      	subs	r6, r6, r7
   de334:	b2a0      	uxth	r0, r4
   de336:	fbb6 f4fc 	udiv	r4, r6, ip
   de33a:	fb0c 6614 	mls	r6, ip, r4, r6
   de33e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   de342:	fb04 f808 	mul.w	r8, r4, r8
   de346:	45b8      	cmp	r8, r7
   de348:	d907      	bls.n	de35a <__udivmoddi4+0x26a>
   de34a:	18ff      	adds	r7, r7, r3
   de34c:	f104 30ff 	add.w	r0, r4, #4294967295
   de350:	d228      	bcs.n	de3a4 <__udivmoddi4+0x2b4>
   de352:	45b8      	cmp	r8, r7
   de354:	d926      	bls.n	de3a4 <__udivmoddi4+0x2b4>
   de356:	3c02      	subs	r4, #2
   de358:	441f      	add	r7, r3
   de35a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   de35e:	ebc8 0707 	rsb	r7, r8, r7
   de362:	fba0 8902 	umull	r8, r9, r0, r2
   de366:	454f      	cmp	r7, r9
   de368:	4644      	mov	r4, r8
   de36a:	464e      	mov	r6, r9
   de36c:	d314      	bcc.n	de398 <__udivmoddi4+0x2a8>
   de36e:	d029      	beq.n	de3c4 <__udivmoddi4+0x2d4>
   de370:	b365      	cbz	r5, de3cc <__udivmoddi4+0x2dc>
   de372:	ebba 0304 	subs.w	r3, sl, r4
   de376:	eb67 0706 	sbc.w	r7, r7, r6
   de37a:	fa07 fe0e 	lsl.w	lr, r7, lr
   de37e:	40cb      	lsrs	r3, r1
   de380:	40cf      	lsrs	r7, r1
   de382:	ea4e 0303 	orr.w	r3, lr, r3
   de386:	e885 0088 	stmia.w	r5, {r3, r7}
   de38a:	2100      	movs	r1, #0
   de38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de390:	4613      	mov	r3, r2
   de392:	e6f8      	b.n	de186 <__udivmoddi4+0x96>
   de394:	4610      	mov	r0, r2
   de396:	e6e0      	b.n	de15a <__udivmoddi4+0x6a>
   de398:	ebb8 0402 	subs.w	r4, r8, r2
   de39c:	eb69 0603 	sbc.w	r6, r9, r3
   de3a0:	3801      	subs	r0, #1
   de3a2:	e7e5      	b.n	de370 <__udivmoddi4+0x280>
   de3a4:	4604      	mov	r4, r0
   de3a6:	e7d8      	b.n	de35a <__udivmoddi4+0x26a>
   de3a8:	4611      	mov	r1, r2
   de3aa:	e795      	b.n	de2d8 <__udivmoddi4+0x1e8>
   de3ac:	4681      	mov	r9, r0
   de3ae:	e7c0      	b.n	de332 <__udivmoddi4+0x242>
   de3b0:	468a      	mov	sl, r1
   de3b2:	e77c      	b.n	de2ae <__udivmoddi4+0x1be>
   de3b4:	3b02      	subs	r3, #2
   de3b6:	443c      	add	r4, r7
   de3b8:	e748      	b.n	de24c <__udivmoddi4+0x15c>
   de3ba:	4608      	mov	r0, r1
   de3bc:	e70a      	b.n	de1d4 <__udivmoddi4+0xe4>
   de3be:	3802      	subs	r0, #2
   de3c0:	443e      	add	r6, r7
   de3c2:	e72f      	b.n	de224 <__udivmoddi4+0x134>
   de3c4:	45c2      	cmp	sl, r8
   de3c6:	d3e7      	bcc.n	de398 <__udivmoddi4+0x2a8>
   de3c8:	463e      	mov	r6, r7
   de3ca:	e7d1      	b.n	de370 <__udivmoddi4+0x280>
   de3cc:	4629      	mov	r1, r5
   de3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de3d2:	bf00      	nop

000de3d4 <__aeabi_idiv0>:
   de3d4:	4770      	bx	lr
   de3d6:	bf00      	nop

000de3d8 <asctime>:
   de3d8:	4b09      	ldr	r3, [pc, #36]	; (de400 <asctime+0x28>)
   de3da:	b570      	push	{r4, r5, r6, lr}
   de3dc:	681c      	ldr	r4, [r3, #0]
   de3de:	6c25      	ldr	r5, [r4, #64]	; 0x40
   de3e0:	4606      	mov	r6, r0
   de3e2:	b93d      	cbnz	r5, de3f4 <asctime+0x1c>
   de3e4:	201a      	movs	r0, #26
   de3e6:	f7fb fa15 	bl	d9814 <malloc>
   de3ea:	221a      	movs	r2, #26
   de3ec:	6420      	str	r0, [r4, #64]	; 0x40
   de3ee:	4629      	mov	r1, r5
   de3f0:	f000 f956 	bl	de6a0 <memset>
   de3f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   de3f6:	4630      	mov	r0, r6
   de3f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   de3fc:	f000 b802 	b.w	de404 <asctime_r>
   de400:	2003be24 	.word	0x2003be24

000de404 <asctime_r>:
   de404:	b510      	push	{r4, lr}
   de406:	460c      	mov	r4, r1
   de408:	6941      	ldr	r1, [r0, #20]
   de40a:	6903      	ldr	r3, [r0, #16]
   de40c:	6982      	ldr	r2, [r0, #24]
   de40e:	b086      	sub	sp, #24
   de410:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   de414:	9104      	str	r1, [sp, #16]
   de416:	6801      	ldr	r1, [r0, #0]
   de418:	9103      	str	r1, [sp, #12]
   de41a:	6841      	ldr	r1, [r0, #4]
   de41c:	9102      	str	r1, [sp, #8]
   de41e:	6881      	ldr	r1, [r0, #8]
   de420:	9101      	str	r1, [sp, #4]
   de422:	68c1      	ldr	r1, [r0, #12]
   de424:	9100      	str	r1, [sp, #0]
   de426:	4907      	ldr	r1, [pc, #28]	; (de444 <asctime_r+0x40>)
   de428:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   de42c:	440b      	add	r3, r1
   de42e:	4906      	ldr	r1, [pc, #24]	; (de448 <asctime_r+0x44>)
   de430:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   de434:	440a      	add	r2, r1
   de436:	4620      	mov	r0, r4
   de438:	4904      	ldr	r1, [pc, #16]	; (de44c <asctime_r+0x48>)
   de43a:	f7fb fa03 	bl	d9844 <siprintf>
   de43e:	4620      	mov	r0, r4
   de440:	b006      	add	sp, #24
   de442:	bd10      	pop	{r4, pc}
   de444:	000e09bd 	.word	0x000e09bd
   de448:	000e09a8 	.word	0x000e09a8
   de44c:	000e09e1 	.word	0x000e09e1

000de450 <atoi>:
   de450:	220a      	movs	r2, #10
   de452:	2100      	movs	r1, #0
   de454:	f001 b9a8 	b.w	df7a8 <strtol>

000de458 <atol>:
   de458:	220a      	movs	r2, #10
   de45a:	2100      	movs	r1, #0
   de45c:	f001 b9a4 	b.w	df7a8 <strtol>

000de460 <__cxa_atexit>:
   de460:	b510      	push	{r4, lr}
   de462:	4c05      	ldr	r4, [pc, #20]	; (de478 <__cxa_atexit+0x18>)
   de464:	4613      	mov	r3, r2
   de466:	b12c      	cbz	r4, de474 <__cxa_atexit+0x14>
   de468:	460a      	mov	r2, r1
   de46a:	4601      	mov	r1, r0
   de46c:	2002      	movs	r0, #2
   de46e:	f3af 8000 	nop.w
   de472:	bd10      	pop	{r4, pc}
   de474:	4620      	mov	r0, r4
   de476:	bd10      	pop	{r4, pc}
   de478:	00000000 	.word	0x00000000

000de47c <localtime>:
   de47c:	b538      	push	{r3, r4, r5, lr}
   de47e:	4b07      	ldr	r3, [pc, #28]	; (de49c <localtime+0x20>)
   de480:	681c      	ldr	r4, [r3, #0]
   de482:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   de484:	4605      	mov	r5, r0
   de486:	b91b      	cbnz	r3, de490 <localtime+0x14>
   de488:	2024      	movs	r0, #36	; 0x24
   de48a:	f7fb f9c3 	bl	d9814 <malloc>
   de48e:	63e0      	str	r0, [r4, #60]	; 0x3c
   de490:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   de492:	4628      	mov	r0, r5
   de494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   de498:	f000 b802 	b.w	de4a0 <localtime_r>
   de49c:	2003be24 	.word	0x2003be24

000de4a0 <localtime_r>:
   de4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de4a4:	460c      	mov	r4, r1
   de4a6:	4680      	mov	r8, r0
   de4a8:	f001 fcac 	bl	dfe04 <__gettzinfo>
   de4ac:	4621      	mov	r1, r4
   de4ae:	4607      	mov	r7, r0
   de4b0:	4640      	mov	r0, r8
   de4b2:	f001 fcab 	bl	dfe0c <gmtime_r>
   de4b6:	6946      	ldr	r6, [r0, #20]
   de4b8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   de4bc:	07b3      	lsls	r3, r6, #30
   de4be:	4604      	mov	r4, r0
   de4c0:	d105      	bne.n	de4ce <localtime_r+0x2e>
   de4c2:	2264      	movs	r2, #100	; 0x64
   de4c4:	fb96 f3f2 	sdiv	r3, r6, r2
   de4c8:	fb02 6313 	mls	r3, r2, r3, r6
   de4cc:	b94b      	cbnz	r3, de4e2 <localtime_r+0x42>
   de4ce:	f44f 75c8 	mov.w	r5, #400	; 0x190
   de4d2:	fb96 f3f5 	sdiv	r3, r6, r5
   de4d6:	fb05 6513 	mls	r5, r5, r3, r6
   de4da:	fab5 f385 	clz	r3, r5
   de4de:	095b      	lsrs	r3, r3, #5
   de4e0:	e000      	b.n	de4e4 <localtime_r+0x44>
   de4e2:	2301      	movs	r3, #1
   de4e4:	4a5f      	ldr	r2, [pc, #380]	; (de664 <localtime_r+0x1c4>)
   de4e6:	2530      	movs	r5, #48	; 0x30
   de4e8:	fb05 2503 	mla	r5, r5, r3, r2
   de4ec:	f001 faa6 	bl	dfa3c <__tz_lock>
   de4f0:	f001 faa6 	bl	dfa40 <_tzset_unlocked>
   de4f4:	4b5c      	ldr	r3, [pc, #368]	; (de668 <localtime_r+0x1c8>)
   de4f6:	681b      	ldr	r3, [r3, #0]
   de4f8:	b1f3      	cbz	r3, de538 <localtime_r+0x98>
   de4fa:	687b      	ldr	r3, [r7, #4]
   de4fc:	429e      	cmp	r6, r3
   de4fe:	d105      	bne.n	de50c <localtime_r+0x6c>
   de500:	6839      	ldr	r1, [r7, #0]
   de502:	f8d8 3000 	ldr.w	r3, [r8]
   de506:	69fa      	ldr	r2, [r7, #28]
   de508:	b941      	cbnz	r1, de51c <localtime_r+0x7c>
   de50a:	e00a      	b.n	de522 <localtime_r+0x82>
   de50c:	4630      	mov	r0, r6
   de50e:	f001 f9ed 	bl	df8ec <__tzcalc_limits>
   de512:	2800      	cmp	r0, #0
   de514:	d1f4      	bne.n	de500 <localtime_r+0x60>
   de516:	f04f 33ff 	mov.w	r3, #4294967295
   de51a:	e00d      	b.n	de538 <localtime_r+0x98>
   de51c:	4293      	cmp	r3, r2
   de51e:	db08      	blt.n	de532 <localtime_r+0x92>
   de520:	e001      	b.n	de526 <localtime_r+0x86>
   de522:	4293      	cmp	r3, r2
   de524:	da07      	bge.n	de536 <localtime_r+0x96>
   de526:	6bba      	ldr	r2, [r7, #56]	; 0x38
   de528:	4293      	cmp	r3, r2
   de52a:	bfac      	ite	ge
   de52c:	2300      	movge	r3, #0
   de52e:	2301      	movlt	r3, #1
   de530:	e002      	b.n	de538 <localtime_r+0x98>
   de532:	2300      	movs	r3, #0
   de534:	e000      	b.n	de538 <localtime_r+0x98>
   de536:	2301      	movs	r3, #1
   de538:	6223      	str	r3, [r4, #32]
   de53a:	6a23      	ldr	r3, [r4, #32]
   de53c:	2b01      	cmp	r3, #1
   de53e:	bf0c      	ite	eq
   de540:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   de542:	6a39      	ldrne	r1, [r7, #32]
   de544:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   de548:	203c      	movs	r0, #60	; 0x3c
   de54a:	fb91 f6f3 	sdiv	r6, r1, r3
   de54e:	fb03 1316 	mls	r3, r3, r6, r1
   de552:	6861      	ldr	r1, [r4, #4]
   de554:	fb93 f2f0 	sdiv	r2, r3, r0
   de558:	fb00 3012 	mls	r0, r0, r2, r3
   de55c:	6823      	ldr	r3, [r4, #0]
   de55e:	1a89      	subs	r1, r1, r2
   de560:	68a2      	ldr	r2, [r4, #8]
   de562:	6061      	str	r1, [r4, #4]
   de564:	1a1b      	subs	r3, r3, r0
   de566:	1b92      	subs	r2, r2, r6
   de568:	2b3b      	cmp	r3, #59	; 0x3b
   de56a:	6023      	str	r3, [r4, #0]
   de56c:	60a2      	str	r2, [r4, #8]
   de56e:	dd03      	ble.n	de578 <localtime_r+0xd8>
   de570:	3101      	adds	r1, #1
   de572:	6061      	str	r1, [r4, #4]
   de574:	3b3c      	subs	r3, #60	; 0x3c
   de576:	e004      	b.n	de582 <localtime_r+0xe2>
   de578:	2b00      	cmp	r3, #0
   de57a:	da03      	bge.n	de584 <localtime_r+0xe4>
   de57c:	3901      	subs	r1, #1
   de57e:	6061      	str	r1, [r4, #4]
   de580:	333c      	adds	r3, #60	; 0x3c
   de582:	6023      	str	r3, [r4, #0]
   de584:	6863      	ldr	r3, [r4, #4]
   de586:	2b3b      	cmp	r3, #59	; 0x3b
   de588:	dd03      	ble.n	de592 <localtime_r+0xf2>
   de58a:	3201      	adds	r2, #1
   de58c:	60a2      	str	r2, [r4, #8]
   de58e:	3b3c      	subs	r3, #60	; 0x3c
   de590:	e004      	b.n	de59c <localtime_r+0xfc>
   de592:	2b00      	cmp	r3, #0
   de594:	da03      	bge.n	de59e <localtime_r+0xfe>
   de596:	3a01      	subs	r2, #1
   de598:	60a2      	str	r2, [r4, #8]
   de59a:	333c      	adds	r3, #60	; 0x3c
   de59c:	6063      	str	r3, [r4, #4]
   de59e:	68a3      	ldr	r3, [r4, #8]
   de5a0:	2b17      	cmp	r3, #23
   de5a2:	dd22      	ble.n	de5ea <localtime_r+0x14a>
   de5a4:	69e2      	ldr	r2, [r4, #28]
   de5a6:	3201      	adds	r2, #1
   de5a8:	61e2      	str	r2, [r4, #28]
   de5aa:	69a2      	ldr	r2, [r4, #24]
   de5ac:	3201      	adds	r2, #1
   de5ae:	2a06      	cmp	r2, #6
   de5b0:	bfc8      	it	gt
   de5b2:	2200      	movgt	r2, #0
   de5b4:	61a2      	str	r2, [r4, #24]
   de5b6:	68e2      	ldr	r2, [r4, #12]
   de5b8:	3b18      	subs	r3, #24
   de5ba:	3201      	adds	r2, #1
   de5bc:	60a3      	str	r3, [r4, #8]
   de5be:	6923      	ldr	r3, [r4, #16]
   de5c0:	60e2      	str	r2, [r4, #12]
   de5c2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   de5c6:	428a      	cmp	r2, r1
   de5c8:	dd46      	ble.n	de658 <localtime_r+0x1b8>
   de5ca:	3301      	adds	r3, #1
   de5cc:	2b0c      	cmp	r3, #12
   de5ce:	bf0c      	ite	eq
   de5d0:	6963      	ldreq	r3, [r4, #20]
   de5d2:	6123      	strne	r3, [r4, #16]
   de5d4:	eba2 0201 	sub.w	r2, r2, r1
   de5d8:	60e2      	str	r2, [r4, #12]
   de5da:	bf01      	itttt	eq
   de5dc:	3301      	addeq	r3, #1
   de5de:	2200      	moveq	r2, #0
   de5e0:	6122      	streq	r2, [r4, #16]
   de5e2:	6163      	streq	r3, [r4, #20]
   de5e4:	bf08      	it	eq
   de5e6:	61e2      	streq	r2, [r4, #28]
   de5e8:	e036      	b.n	de658 <localtime_r+0x1b8>
   de5ea:	2b00      	cmp	r3, #0
   de5ec:	da34      	bge.n	de658 <localtime_r+0x1b8>
   de5ee:	69e2      	ldr	r2, [r4, #28]
   de5f0:	3a01      	subs	r2, #1
   de5f2:	61e2      	str	r2, [r4, #28]
   de5f4:	69a2      	ldr	r2, [r4, #24]
   de5f6:	3a01      	subs	r2, #1
   de5f8:	bf48      	it	mi
   de5fa:	2206      	movmi	r2, #6
   de5fc:	61a2      	str	r2, [r4, #24]
   de5fe:	68e2      	ldr	r2, [r4, #12]
   de600:	3318      	adds	r3, #24
   de602:	3a01      	subs	r2, #1
   de604:	60e2      	str	r2, [r4, #12]
   de606:	60a3      	str	r3, [r4, #8]
   de608:	bb32      	cbnz	r2, de658 <localtime_r+0x1b8>
   de60a:	6923      	ldr	r3, [r4, #16]
   de60c:	3b01      	subs	r3, #1
   de60e:	d401      	bmi.n	de614 <localtime_r+0x174>
   de610:	6123      	str	r3, [r4, #16]
   de612:	e01d      	b.n	de650 <localtime_r+0x1b0>
   de614:	230b      	movs	r3, #11
   de616:	6123      	str	r3, [r4, #16]
   de618:	6963      	ldr	r3, [r4, #20]
   de61a:	1e5a      	subs	r2, r3, #1
   de61c:	f012 0f03 	tst.w	r2, #3
   de620:	6162      	str	r2, [r4, #20]
   de622:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   de626:	d105      	bne.n	de634 <localtime_r+0x194>
   de628:	2164      	movs	r1, #100	; 0x64
   de62a:	fb93 f2f1 	sdiv	r2, r3, r1
   de62e:	fb01 3212 	mls	r2, r1, r2, r3
   de632:	b94a      	cbnz	r2, de648 <localtime_r+0x1a8>
   de634:	f44f 71c8 	mov.w	r1, #400	; 0x190
   de638:	fb93 f2f1 	sdiv	r2, r3, r1
   de63c:	fb01 3312 	mls	r3, r1, r2, r3
   de640:	fab3 f383 	clz	r3, r3
   de644:	095b      	lsrs	r3, r3, #5
   de646:	e000      	b.n	de64a <localtime_r+0x1aa>
   de648:	2301      	movs	r3, #1
   de64a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   de64e:	61e3      	str	r3, [r4, #28]
   de650:	6923      	ldr	r3, [r4, #16]
   de652:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   de656:	60e3      	str	r3, [r4, #12]
   de658:	f001 f9f1 	bl	dfa3e <__tz_unlock>
   de65c:	4620      	mov	r0, r4
   de65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de662:	bf00      	nop
   de664:	000e0bc4 	.word	0x000e0bc4
   de668:	2003e7e4 	.word	0x2003e7e4

000de66c <memcmp>:
   de66c:	b510      	push	{r4, lr}
   de66e:	3901      	subs	r1, #1
   de670:	4402      	add	r2, r0
   de672:	4290      	cmp	r0, r2
   de674:	d007      	beq.n	de686 <memcmp+0x1a>
   de676:	f810 3b01 	ldrb.w	r3, [r0], #1
   de67a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   de67e:	42a3      	cmp	r3, r4
   de680:	d0f7      	beq.n	de672 <memcmp+0x6>
   de682:	1b18      	subs	r0, r3, r4
   de684:	bd10      	pop	{r4, pc}
   de686:	2000      	movs	r0, #0
   de688:	bd10      	pop	{r4, pc}

000de68a <memcpy>:
   de68a:	b510      	push	{r4, lr}
   de68c:	1e43      	subs	r3, r0, #1
   de68e:	440a      	add	r2, r1
   de690:	4291      	cmp	r1, r2
   de692:	d004      	beq.n	de69e <memcpy+0x14>
   de694:	f811 4b01 	ldrb.w	r4, [r1], #1
   de698:	f803 4f01 	strb.w	r4, [r3, #1]!
   de69c:	e7f8      	b.n	de690 <memcpy+0x6>
   de69e:	bd10      	pop	{r4, pc}

000de6a0 <memset>:
   de6a0:	4402      	add	r2, r0
   de6a2:	4603      	mov	r3, r0
   de6a4:	4293      	cmp	r3, r2
   de6a6:	d002      	beq.n	de6ae <memset+0xe>
   de6a8:	f803 1b01 	strb.w	r1, [r3], #1
   de6ac:	e7fa      	b.n	de6a4 <memset+0x4>
   de6ae:	4770      	bx	lr

000de6b0 <validate_structure>:
   de6b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   de6b2:	6801      	ldr	r1, [r0, #0]
   de6b4:	293b      	cmp	r1, #59	; 0x3b
   de6b6:	4604      	mov	r4, r0
   de6b8:	d911      	bls.n	de6de <validate_structure+0x2e>
   de6ba:	223c      	movs	r2, #60	; 0x3c
   de6bc:	4668      	mov	r0, sp
   de6be:	f001 fb49 	bl	dfd54 <div>
   de6c2:	9a01      	ldr	r2, [sp, #4]
   de6c4:	6863      	ldr	r3, [r4, #4]
   de6c6:	9900      	ldr	r1, [sp, #0]
   de6c8:	2a00      	cmp	r2, #0
   de6ca:	440b      	add	r3, r1
   de6cc:	6063      	str	r3, [r4, #4]
   de6ce:	bfbb      	ittet	lt
   de6d0:	323c      	addlt	r2, #60	; 0x3c
   de6d2:	f103 33ff 	addlt.w	r3, r3, #4294967295
   de6d6:	6022      	strge	r2, [r4, #0]
   de6d8:	6022      	strlt	r2, [r4, #0]
   de6da:	bfb8      	it	lt
   de6dc:	6063      	strlt	r3, [r4, #4]
   de6de:	6861      	ldr	r1, [r4, #4]
   de6e0:	293b      	cmp	r1, #59	; 0x3b
   de6e2:	d911      	bls.n	de708 <validate_structure+0x58>
   de6e4:	223c      	movs	r2, #60	; 0x3c
   de6e6:	4668      	mov	r0, sp
   de6e8:	f001 fb34 	bl	dfd54 <div>
   de6ec:	9a01      	ldr	r2, [sp, #4]
   de6ee:	68a1      	ldr	r1, [r4, #8]
   de6f0:	9b00      	ldr	r3, [sp, #0]
   de6f2:	2a00      	cmp	r2, #0
   de6f4:	440b      	add	r3, r1
   de6f6:	60a3      	str	r3, [r4, #8]
   de6f8:	bfbb      	ittet	lt
   de6fa:	323c      	addlt	r2, #60	; 0x3c
   de6fc:	f103 33ff 	addlt.w	r3, r3, #4294967295
   de700:	6062      	strge	r2, [r4, #4]
   de702:	6062      	strlt	r2, [r4, #4]
   de704:	bfb8      	it	lt
   de706:	60a3      	strlt	r3, [r4, #8]
   de708:	68a1      	ldr	r1, [r4, #8]
   de70a:	2917      	cmp	r1, #23
   de70c:	d911      	bls.n	de732 <validate_structure+0x82>
   de70e:	2218      	movs	r2, #24
   de710:	4668      	mov	r0, sp
   de712:	f001 fb1f 	bl	dfd54 <div>
   de716:	9a01      	ldr	r2, [sp, #4]
   de718:	68e1      	ldr	r1, [r4, #12]
   de71a:	9b00      	ldr	r3, [sp, #0]
   de71c:	2a00      	cmp	r2, #0
   de71e:	440b      	add	r3, r1
   de720:	60e3      	str	r3, [r4, #12]
   de722:	bfbb      	ittet	lt
   de724:	3218      	addlt	r2, #24
   de726:	f103 33ff 	addlt.w	r3, r3, #4294967295
   de72a:	60a2      	strge	r2, [r4, #8]
   de72c:	60a2      	strlt	r2, [r4, #8]
   de72e:	bfb8      	it	lt
   de730:	60e3      	strlt	r3, [r4, #12]
   de732:	6921      	ldr	r1, [r4, #16]
   de734:	290b      	cmp	r1, #11
   de736:	d911      	bls.n	de75c <validate_structure+0xac>
   de738:	220c      	movs	r2, #12
   de73a:	4668      	mov	r0, sp
   de73c:	f001 fb0a 	bl	dfd54 <div>
   de740:	9a01      	ldr	r2, [sp, #4]
   de742:	6961      	ldr	r1, [r4, #20]
   de744:	9b00      	ldr	r3, [sp, #0]
   de746:	2a00      	cmp	r2, #0
   de748:	440b      	add	r3, r1
   de74a:	6163      	str	r3, [r4, #20]
   de74c:	bfbb      	ittet	lt
   de74e:	320c      	addlt	r2, #12
   de750:	f103 33ff 	addlt.w	r3, r3, #4294967295
   de754:	6122      	strge	r2, [r4, #16]
   de756:	6122      	strlt	r2, [r4, #16]
   de758:	bfb8      	it	lt
   de75a:	6163      	strlt	r3, [r4, #20]
   de75c:	6963      	ldr	r3, [r4, #20]
   de75e:	0799      	lsls	r1, r3, #30
   de760:	d112      	bne.n	de788 <validate_structure+0xd8>
   de762:	2164      	movs	r1, #100	; 0x64
   de764:	fb93 f2f1 	sdiv	r2, r3, r1
   de768:	fb01 3212 	mls	r2, r1, r2, r3
   de76c:	b972      	cbnz	r2, de78c <validate_structure+0xdc>
   de76e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   de772:	f44f 71c8 	mov.w	r1, #400	; 0x190
   de776:	fb93 f2f1 	sdiv	r2, r3, r1
   de77a:	fb01 3312 	mls	r3, r1, r2, r3
   de77e:	2b00      	cmp	r3, #0
   de780:	bf14      	ite	ne
   de782:	231c      	movne	r3, #28
   de784:	231d      	moveq	r3, #29
   de786:	e002      	b.n	de78e <validate_structure+0xde>
   de788:	231c      	movs	r3, #28
   de78a:	e000      	b.n	de78e <validate_structure+0xde>
   de78c:	231d      	movs	r3, #29
   de78e:	68e2      	ldr	r2, [r4, #12]
   de790:	2a00      	cmp	r2, #0
   de792:	dd06      	ble.n	de7a2 <validate_structure+0xf2>
   de794:	4f33      	ldr	r7, [pc, #204]	; (de864 <validate_structure+0x1b4>)
   de796:	f04f 0e00 	mov.w	lr, #0
   de79a:	2564      	movs	r5, #100	; 0x64
   de79c:	f44f 76c8 	mov.w	r6, #400	; 0x190
   de7a0:	e039      	b.n	de816 <validate_structure+0x166>
   de7a2:	4f30      	ldr	r7, [pc, #192]	; (de864 <validate_structure+0x1b4>)
   de7a4:	260b      	movs	r6, #11
   de7a6:	2064      	movs	r0, #100	; 0x64
   de7a8:	f44f 75c8 	mov.w	r5, #400	; 0x190
   de7ac:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   de7b0:	f1be 0f00 	cmp.w	lr, #0
   de7b4:	dc53      	bgt.n	de85e <validate_structure+0x1ae>
   de7b6:	6921      	ldr	r1, [r4, #16]
   de7b8:	3901      	subs	r1, #1
   de7ba:	6121      	str	r1, [r4, #16]
   de7bc:	3101      	adds	r1, #1
   de7be:	d118      	bne.n	de7f2 <validate_structure+0x142>
   de7c0:	6963      	ldr	r3, [r4, #20]
   de7c2:	6126      	str	r6, [r4, #16]
   de7c4:	1e59      	subs	r1, r3, #1
   de7c6:	078a      	lsls	r2, r1, #30
   de7c8:	6161      	str	r1, [r4, #20]
   de7ca:	d10f      	bne.n	de7ec <validate_structure+0x13c>
   de7cc:	fb91 f2f0 	sdiv	r2, r1, r0
   de7d0:	fb00 1112 	mls	r1, r0, r2, r1
   de7d4:	b961      	cbnz	r1, de7f0 <validate_structure+0x140>
   de7d6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   de7da:	fb93 f2f5 	sdiv	r2, r3, r5
   de7de:	fb05 3312 	mls	r3, r5, r2, r3
   de7e2:	2b00      	cmp	r3, #0
   de7e4:	bf14      	ite	ne
   de7e6:	231c      	movne	r3, #28
   de7e8:	231d      	moveq	r3, #29
   de7ea:	e002      	b.n	de7f2 <validate_structure+0x142>
   de7ec:	231c      	movs	r3, #28
   de7ee:	e000      	b.n	de7f2 <validate_structure+0x142>
   de7f0:	231d      	movs	r3, #29
   de7f2:	6922      	ldr	r2, [r4, #16]
   de7f4:	2a01      	cmp	r2, #1
   de7f6:	bf14      	ite	ne
   de7f8:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   de7fc:	461a      	moveq	r2, r3
   de7fe:	4472      	add	r2, lr
   de800:	60e2      	str	r2, [r4, #12]
   de802:	e7d3      	b.n	de7ac <validate_structure+0xfc>
   de804:	428b      	cmp	r3, r1
   de806:	da2a      	bge.n	de85e <validate_structure+0x1ae>
   de808:	4618      	mov	r0, r3
   de80a:	3201      	adds	r2, #1
   de80c:	1a09      	subs	r1, r1, r0
   de80e:	2a0c      	cmp	r2, #12
   de810:	60e1      	str	r1, [r4, #12]
   de812:	6122      	str	r2, [r4, #16]
   de814:	d008      	beq.n	de828 <validate_structure+0x178>
   de816:	6922      	ldr	r2, [r4, #16]
   de818:	68e1      	ldr	r1, [r4, #12]
   de81a:	2a01      	cmp	r2, #1
   de81c:	d0f2      	beq.n	de804 <validate_structure+0x154>
   de81e:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   de822:	4281      	cmp	r1, r0
   de824:	dcf1      	bgt.n	de80a <validate_structure+0x15a>
   de826:	e01a      	b.n	de85e <validate_structure+0x1ae>
   de828:	6963      	ldr	r3, [r4, #20]
   de82a:	f8c4 e010 	str.w	lr, [r4, #16]
   de82e:	1c5a      	adds	r2, r3, #1
   de830:	0791      	lsls	r1, r2, #30
   de832:	6162      	str	r2, [r4, #20]
   de834:	d10f      	bne.n	de856 <validate_structure+0x1a6>
   de836:	fb92 f1f5 	sdiv	r1, r2, r5
   de83a:	fb05 2211 	mls	r2, r5, r1, r2
   de83e:	b962      	cbnz	r2, de85a <validate_structure+0x1aa>
   de840:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   de844:	fb93 f2f6 	sdiv	r2, r3, r6
   de848:	fb06 3312 	mls	r3, r6, r2, r3
   de84c:	2b00      	cmp	r3, #0
   de84e:	bf14      	ite	ne
   de850:	231c      	movne	r3, #28
   de852:	231d      	moveq	r3, #29
   de854:	e7df      	b.n	de816 <validate_structure+0x166>
   de856:	231c      	movs	r3, #28
   de858:	e7dd      	b.n	de816 <validate_structure+0x166>
   de85a:	231d      	movs	r3, #29
   de85c:	e7db      	b.n	de816 <validate_structure+0x166>
   de85e:	b003      	add	sp, #12
   de860:	bdf0      	pop	{r4, r5, r6, r7, pc}
   de862:	bf00      	nop
   de864:	000e0b94 	.word	0x000e0b94

000de868 <mktime>:
   de868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de86c:	4605      	mov	r5, r0
   de86e:	f001 fac9 	bl	dfe04 <__gettzinfo>
   de872:	4681      	mov	r9, r0
   de874:	4628      	mov	r0, r5
   de876:	f7ff ff1b 	bl	de6b0 <validate_structure>
   de87a:	e895 000c 	ldmia.w	r5, {r2, r3}
   de87e:	213c      	movs	r1, #60	; 0x3c
   de880:	fb01 2303 	mla	r3, r1, r3, r2
   de884:	68aa      	ldr	r2, [r5, #8]
   de886:	68ec      	ldr	r4, [r5, #12]
   de888:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   de88c:	fb08 3102 	mla	r1, r8, r2, r3
   de890:	692b      	ldr	r3, [r5, #16]
   de892:	4aab      	ldr	r2, [pc, #684]	; (deb40 <mktime+0x2d8>)
   de894:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   de898:	3c01      	subs	r4, #1
   de89a:	2b01      	cmp	r3, #1
   de89c:	4414      	add	r4, r2
   de89e:	696b      	ldr	r3, [r5, #20]
   de8a0:	dd11      	ble.n	de8c6 <mktime+0x5e>
   de8a2:	079e      	lsls	r6, r3, #30
   de8a4:	d10f      	bne.n	de8c6 <mktime+0x5e>
   de8a6:	2064      	movs	r0, #100	; 0x64
   de8a8:	fb93 f2f0 	sdiv	r2, r3, r0
   de8ac:	fb00 3212 	mls	r2, r0, r2, r3
   de8b0:	b942      	cbnz	r2, de8c4 <mktime+0x5c>
   de8b2:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   de8b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   de8ba:	fb96 f0f2 	sdiv	r0, r6, r2
   de8be:	fb02 6210 	mls	r2, r2, r0, r6
   de8c2:	b902      	cbnz	r2, de8c6 <mktime+0x5e>
   de8c4:	3401      	adds	r4, #1
   de8c6:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   de8ca:	3210      	adds	r2, #16
   de8cc:	f644 6020 	movw	r0, #20000	; 0x4e20
   de8d0:	4282      	cmp	r2, r0
   de8d2:	61ec      	str	r4, [r5, #28]
   de8d4:	461f      	mov	r7, r3
   de8d6:	f200 812e 	bhi.w	deb36 <mktime+0x2ce>
   de8da:	2b46      	cmp	r3, #70	; 0x46
   de8dc:	dd22      	ble.n	de924 <mktime+0xbc>
   de8de:	2246      	movs	r2, #70	; 0x46
   de8e0:	f240 1c6d 	movw	ip, #365	; 0x16d
   de8e4:	2664      	movs	r6, #100	; 0x64
   de8e6:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   de8ea:	0790      	lsls	r0, r2, #30
   de8ec:	d110      	bne.n	de910 <mktime+0xa8>
   de8ee:	fb92 f0f6 	sdiv	r0, r2, r6
   de8f2:	fb06 2010 	mls	r0, r6, r0, r2
   de8f6:	b970      	cbnz	r0, de916 <mktime+0xae>
   de8f8:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   de8fc:	fb98 f0fe 	sdiv	r0, r8, lr
   de900:	fb0e 8010 	mls	r0, lr, r0, r8
   de904:	2800      	cmp	r0, #0
   de906:	bf14      	ite	ne
   de908:	4660      	movne	r0, ip
   de90a:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   de90e:	e004      	b.n	de91a <mktime+0xb2>
   de910:	f240 106d 	movw	r0, #365	; 0x16d
   de914:	e001      	b.n	de91a <mktime+0xb2>
   de916:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   de91a:	3201      	adds	r2, #1
   de91c:	4293      	cmp	r3, r2
   de91e:	4404      	add	r4, r0
   de920:	d1e3      	bne.n	de8ea <mktime+0x82>
   de922:	e044      	b.n	de9ae <mktime+0x146>
   de924:	d043      	beq.n	de9ae <mktime+0x146>
   de926:	2245      	movs	r2, #69	; 0x45
   de928:	f240 1e6d 	movw	lr, #365	; 0x16d
   de92c:	2664      	movs	r6, #100	; 0x64
   de92e:	f44f 77c8 	mov.w	r7, #400	; 0x190
   de932:	429a      	cmp	r2, r3
   de934:	dd1a      	ble.n	de96c <mktime+0x104>
   de936:	0790      	lsls	r0, r2, #30
   de938:	d110      	bne.n	de95c <mktime+0xf4>
   de93a:	fb92 f0f6 	sdiv	r0, r2, r6
   de93e:	fb06 2010 	mls	r0, r6, r0, r2
   de942:	b970      	cbnz	r0, de962 <mktime+0xfa>
   de944:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   de948:	fb9c f0f7 	sdiv	r0, ip, r7
   de94c:	fb07 c010 	mls	r0, r7, r0, ip
   de950:	2800      	cmp	r0, #0
   de952:	bf14      	ite	ne
   de954:	4670      	movne	r0, lr
   de956:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   de95a:	e004      	b.n	de966 <mktime+0xfe>
   de95c:	f240 106d 	movw	r0, #365	; 0x16d
   de960:	e001      	b.n	de966 <mktime+0xfe>
   de962:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   de966:	1a24      	subs	r4, r4, r0
   de968:	3a01      	subs	r2, #1
   de96a:	e7e2      	b.n	de932 <mktime+0xca>
   de96c:	2b45      	cmp	r3, #69	; 0x45
   de96e:	bfa8      	it	ge
   de970:	2345      	movge	r3, #69	; 0x45
   de972:	079e      	lsls	r6, r3, #30
   de974:	461f      	mov	r7, r3
   de976:	d114      	bne.n	de9a2 <mktime+0x13a>
   de978:	2264      	movs	r2, #100	; 0x64
   de97a:	fb93 f3f2 	sdiv	r3, r3, r2
   de97e:	fb02 7313 	mls	r3, r2, r3, r7
   de982:	b98b      	cbnz	r3, de9a8 <mktime+0x140>
   de984:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   de988:	f44f 73c8 	mov.w	r3, #400	; 0x190
   de98c:	fb90 f2f3 	sdiv	r2, r0, r3
   de990:	fb03 0312 	mls	r3, r3, r2, r0
   de994:	2b00      	cmp	r3, #0
   de996:	f240 136d 	movw	r3, #365	; 0x16d
   de99a:	bf08      	it	eq
   de99c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   de9a0:	e004      	b.n	de9ac <mktime+0x144>
   de9a2:	f240 136d 	movw	r3, #365	; 0x16d
   de9a6:	e001      	b.n	de9ac <mktime+0x144>
   de9a8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   de9ac:	1ae4      	subs	r4, r4, r3
   de9ae:	4865      	ldr	r0, [pc, #404]	; (deb44 <mktime+0x2dc>)
   de9b0:	fb00 1804 	mla	r8, r0, r4, r1
   de9b4:	f001 f842 	bl	dfa3c <__tz_lock>
   de9b8:	f001 f842 	bl	dfa40 <_tzset_unlocked>
   de9bc:	4b62      	ldr	r3, [pc, #392]	; (deb48 <mktime+0x2e0>)
   de9be:	681e      	ldr	r6, [r3, #0]
   de9c0:	2e00      	cmp	r6, #0
   de9c2:	f000 80a4 	beq.w	deb0e <mktime+0x2a6>
   de9c6:	6a2b      	ldr	r3, [r5, #32]
   de9c8:	6968      	ldr	r0, [r5, #20]
   de9ca:	2b01      	cmp	r3, #1
   de9cc:	bfa8      	it	ge
   de9ce:	2301      	movge	r3, #1
   de9d0:	469a      	mov	sl, r3
   de9d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   de9d6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   de9da:	4298      	cmp	r0, r3
   de9dc:	d10d      	bne.n	de9fa <mktime+0x192>
   de9de:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   de9e2:	f8d9 3020 	ldr.w	r3, [r9, #32]
   de9e6:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   de9ea:	f8d9 101c 	ldr.w	r1, [r9, #28]
   de9ee:	1ad6      	subs	r6, r2, r3
   de9f0:	45b0      	cmp	r8, r6
   de9f2:	eba1 0100 	sub.w	r1, r1, r0
   de9f6:	da05      	bge.n	dea04 <mktime+0x19c>
   de9f8:	e007      	b.n	dea0a <mktime+0x1a2>
   de9fa:	f000 ff77 	bl	df8ec <__tzcalc_limits>
   de9fe:	2800      	cmp	r0, #0
   dea00:	d1ed      	bne.n	de9de <mktime+0x176>
   dea02:	e076      	b.n	deaf2 <mktime+0x28a>
   dea04:	1a12      	subs	r2, r2, r0
   dea06:	4590      	cmp	r8, r2
   dea08:	db73      	blt.n	deaf2 <mktime+0x28a>
   dea0a:	f8d9 2000 	ldr.w	r2, [r9]
   dea0e:	b112      	cbz	r2, dea16 <mktime+0x1ae>
   dea10:	4588      	cmp	r8, r1
   dea12:	db77      	blt.n	deb04 <mktime+0x29c>
   dea14:	e001      	b.n	dea1a <mktime+0x1b2>
   dea16:	4588      	cmp	r8, r1
   dea18:	da07      	bge.n	dea2a <mktime+0x1c2>
   dea1a:	45b0      	cmp	r8, r6
   dea1c:	bfac      	ite	ge
   dea1e:	2600      	movge	r6, #0
   dea20:	2601      	movlt	r6, #1
   dea22:	f1ba 0f00 	cmp.w	sl, #0
   dea26:	da04      	bge.n	dea32 <mktime+0x1ca>
   dea28:	e064      	b.n	deaf4 <mktime+0x28c>
   dea2a:	f1ba 0f00 	cmp.w	sl, #0
   dea2e:	db63      	blt.n	deaf8 <mktime+0x290>
   dea30:	2601      	movs	r6, #1
   dea32:	ea8a 0a06 	eor.w	sl, sl, r6
   dea36:	f1ba 0f01 	cmp.w	sl, #1
   dea3a:	d15b      	bne.n	deaf4 <mktime+0x28c>
   dea3c:	1a1b      	subs	r3, r3, r0
   dea3e:	b906      	cbnz	r6, dea42 <mktime+0x1da>
   dea40:	425b      	negs	r3, r3
   dea42:	682a      	ldr	r2, [r5, #0]
   dea44:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   dea48:	441a      	add	r2, r3
   dea4a:	602a      	str	r2, [r5, #0]
   dea4c:	4628      	mov	r0, r5
   dea4e:	4498      	add	r8, r3
   dea50:	f7ff fe2e 	bl	de6b0 <validate_structure>
   dea54:	68eb      	ldr	r3, [r5, #12]
   dea56:	ebb3 030a 	subs.w	r3, r3, sl
   dea5a:	d04b      	beq.n	deaf4 <mktime+0x28c>
   dea5c:	2b01      	cmp	r3, #1
   dea5e:	dc03      	bgt.n	dea68 <mktime+0x200>
   dea60:	1c98      	adds	r0, r3, #2
   dea62:	bfd8      	it	le
   dea64:	2301      	movle	r3, #1
   dea66:	e001      	b.n	dea6c <mktime+0x204>
   dea68:	f04f 33ff 	mov.w	r3, #4294967295
   dea6c:	69ea      	ldr	r2, [r5, #28]
   dea6e:	441c      	add	r4, r3
   dea70:	189b      	adds	r3, r3, r2
   dea72:	d51d      	bpl.n	deab0 <mktime+0x248>
   dea74:	1e7b      	subs	r3, r7, #1
   dea76:	0799      	lsls	r1, r3, #30
   dea78:	d114      	bne.n	deaa4 <mktime+0x23c>
   dea7a:	2164      	movs	r1, #100	; 0x64
   dea7c:	fb93 f2f1 	sdiv	r2, r3, r1
   dea80:	fb01 3312 	mls	r3, r1, r2, r3
   dea84:	b98b      	cbnz	r3, deaaa <mktime+0x242>
   dea86:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   dea8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dea8e:	fb97 f3f2 	sdiv	r3, r7, r2
   dea92:	fb02 7713 	mls	r7, r2, r3, r7
   dea96:	2f00      	cmp	r7, #0
   dea98:	f240 136d 	movw	r3, #365	; 0x16d
   dea9c:	bf18      	it	ne
   dea9e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   deaa2:	e024      	b.n	deaee <mktime+0x286>
   deaa4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   deaa8:	e021      	b.n	deaee <mktime+0x286>
   deaaa:	f240 136d 	movw	r3, #365	; 0x16d
   deaae:	e01e      	b.n	deaee <mktime+0x286>
   deab0:	07ba      	lsls	r2, r7, #30
   deab2:	d114      	bne.n	deade <mktime+0x276>
   deab4:	2164      	movs	r1, #100	; 0x64
   deab6:	fb97 f2f1 	sdiv	r2, r7, r1
   deaba:	fb01 7212 	mls	r2, r1, r2, r7
   deabe:	b98a      	cbnz	r2, deae4 <mktime+0x27c>
   deac0:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   deac4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   deac8:	fb97 f2f1 	sdiv	r2, r7, r1
   deacc:	fb01 7712 	mls	r7, r1, r2, r7
   dead0:	2f00      	cmp	r7, #0
   dead2:	f240 126d 	movw	r2, #365	; 0x16d
   dead6:	bf08      	it	eq
   dead8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   deadc:	e004      	b.n	deae8 <mktime+0x280>
   deade:	f240 126d 	movw	r2, #365	; 0x16d
   deae2:	e001      	b.n	deae8 <mktime+0x280>
   deae4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   deae8:	429a      	cmp	r2, r3
   deaea:	bfd8      	it	le
   deaec:	1a9b      	suble	r3, r3, r2
   deaee:	61eb      	str	r3, [r5, #28]
   deaf0:	e000      	b.n	deaf4 <mktime+0x28c>
   deaf2:	4656      	mov	r6, sl
   deaf4:	2e01      	cmp	r6, #1
   deaf6:	d10a      	bne.n	deb0e <mktime+0x2a6>
   deaf8:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   deafc:	2601      	movs	r6, #1
   deafe:	eb08 0700 	add.w	r7, r8, r0
   deb02:	e008      	b.n	deb16 <mktime+0x2ae>
   deb04:	f1ba 0f00 	cmp.w	sl, #0
   deb08:	f04f 0600 	mov.w	r6, #0
   deb0c:	da91      	bge.n	dea32 <mktime+0x1ca>
   deb0e:	f8d9 0020 	ldr.w	r0, [r9, #32]
   deb12:	eb08 0700 	add.w	r7, r8, r0
   deb16:	f000 ff92 	bl	dfa3e <__tz_unlock>
   deb1a:	3404      	adds	r4, #4
   deb1c:	2307      	movs	r3, #7
   deb1e:	fb94 f3f3 	sdiv	r3, r4, r3
   deb22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   deb26:	1ae4      	subs	r4, r4, r3
   deb28:	bf48      	it	mi
   deb2a:	3407      	addmi	r4, #7
   deb2c:	622e      	str	r6, [r5, #32]
   deb2e:	61ac      	str	r4, [r5, #24]
   deb30:	4638      	mov	r0, r7
   deb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   deb36:	f04f 30ff 	mov.w	r0, #4294967295
   deb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   deb3e:	bf00      	nop
   deb40:	000e0b64 	.word	0x000e0b64
   deb44:	00015180 	.word	0x00015180
   deb48:	2003e7e4 	.word	0x2003e7e4

000deb4c <srand>:
   deb4c:	b538      	push	{r3, r4, r5, lr}
   deb4e:	4b12      	ldr	r3, [pc, #72]	; (deb98 <srand+0x4c>)
   deb50:	681c      	ldr	r4, [r3, #0]
   deb52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   deb54:	4605      	mov	r5, r0
   deb56:	b9d3      	cbnz	r3, deb8e <srand+0x42>
   deb58:	2018      	movs	r0, #24
   deb5a:	f7fa fe5b 	bl	d9814 <malloc>
   deb5e:	f243 330e 	movw	r3, #13070	; 0x330e
   deb62:	63a0      	str	r0, [r4, #56]	; 0x38
   deb64:	8003      	strh	r3, [r0, #0]
   deb66:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   deb6a:	8043      	strh	r3, [r0, #2]
   deb6c:	f241 2334 	movw	r3, #4660	; 0x1234
   deb70:	8083      	strh	r3, [r0, #4]
   deb72:	f24e 636d 	movw	r3, #58989	; 0xe66d
   deb76:	80c3      	strh	r3, [r0, #6]
   deb78:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   deb7c:	8103      	strh	r3, [r0, #8]
   deb7e:	2305      	movs	r3, #5
   deb80:	8143      	strh	r3, [r0, #10]
   deb82:	230b      	movs	r3, #11
   deb84:	8183      	strh	r3, [r0, #12]
   deb86:	2201      	movs	r2, #1
   deb88:	2300      	movs	r3, #0
   deb8a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   deb8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   deb90:	2200      	movs	r2, #0
   deb92:	611d      	str	r5, [r3, #16]
   deb94:	615a      	str	r2, [r3, #20]
   deb96:	bd38      	pop	{r3, r4, r5, pc}
   deb98:	2003be24 	.word	0x2003be24

000deb9c <strchr>:
   deb9c:	b2c9      	uxtb	r1, r1
   deb9e:	4603      	mov	r3, r0
   deba0:	f810 2b01 	ldrb.w	r2, [r0], #1
   deba4:	b11a      	cbz	r2, debae <strchr+0x12>
   deba6:	4291      	cmp	r1, r2
   deba8:	d1f9      	bne.n	deb9e <strchr+0x2>
   debaa:	4618      	mov	r0, r3
   debac:	4770      	bx	lr
   debae:	2900      	cmp	r1, #0
   debb0:	bf0c      	ite	eq
   debb2:	4618      	moveq	r0, r3
   debb4:	2000      	movne	r0, #0
   debb6:	4770      	bx	lr

000debb8 <strcmp>:
   debb8:	f810 2b01 	ldrb.w	r2, [r0], #1
   debbc:	f811 3b01 	ldrb.w	r3, [r1], #1
   debc0:	2a01      	cmp	r2, #1
   debc2:	bf28      	it	cs
   debc4:	429a      	cmpcs	r2, r3
   debc6:	d0f7      	beq.n	debb8 <strcmp>
   debc8:	1ad0      	subs	r0, r2, r3
   debca:	4770      	bx	lr

000debcc <strcpy>:
   debcc:	4603      	mov	r3, r0
   debce:	f811 2b01 	ldrb.w	r2, [r1], #1
   debd2:	f803 2b01 	strb.w	r2, [r3], #1
   debd6:	2a00      	cmp	r2, #0
   debd8:	d1f9      	bne.n	debce <strcpy+0x2>
   debda:	4770      	bx	lr

000debdc <strdup>:
   debdc:	4b02      	ldr	r3, [pc, #8]	; (debe8 <strdup+0xc>)
   debde:	4601      	mov	r1, r0
   debe0:	6818      	ldr	r0, [r3, #0]
   debe2:	f000 b803 	b.w	debec <_strdup_r>
   debe6:	bf00      	nop
   debe8:	2003be24 	.word	0x2003be24

000debec <_strdup_r>:
   debec:	b570      	push	{r4, r5, r6, lr}
   debee:	4606      	mov	r6, r0
   debf0:	4608      	mov	r0, r1
   debf2:	460c      	mov	r4, r1
   debf4:	f000 fd22 	bl	df63c <strlen>
   debf8:	1c45      	adds	r5, r0, #1
   debfa:	4629      	mov	r1, r5
   debfc:	4630      	mov	r0, r6
   debfe:	f7fa fe51 	bl	d98a4 <_malloc_r>
   dec02:	4606      	mov	r6, r0
   dec04:	b118      	cbz	r0, dec0e <_strdup_r+0x22>
   dec06:	462a      	mov	r2, r5
   dec08:	4621      	mov	r1, r4
   dec0a:	f7ff fd3e 	bl	de68a <memcpy>
   dec0e:	4630      	mov	r0, r6
   dec10:	bd70      	pop	{r4, r5, r6, pc}

000dec12 <iso_year_adjust>:
   dec12:	6941      	ldr	r1, [r0, #20]
   dec14:	078b      	lsls	r3, r1, #30
   dec16:	b510      	push	{r4, lr}
   dec18:	d10c      	bne.n	dec34 <iso_year_adjust+0x22>
   dec1a:	2900      	cmp	r1, #0
   dec1c:	f240 736c 	movw	r3, #1900	; 0x76c
   dec20:	bfa8      	it	ge
   dec22:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   dec26:	440b      	add	r3, r1
   dec28:	2464      	movs	r4, #100	; 0x64
   dec2a:	fb93 f2f4 	sdiv	r2, r3, r4
   dec2e:	fb04 3312 	mls	r3, r4, r2, r3
   dec32:	b983      	cbnz	r3, dec56 <iso_year_adjust+0x44>
   dec34:	2900      	cmp	r1, #0
   dec36:	f240 736c 	movw	r3, #1900	; 0x76c
   dec3a:	bfa8      	it	ge
   dec3c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   dec40:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dec44:	440b      	add	r3, r1
   dec46:	fb93 f1f2 	sdiv	r1, r3, r2
   dec4a:	fb02 3311 	mls	r3, r2, r1, r3
   dec4e:	fab3 f283 	clz	r2, r3
   dec52:	0952      	lsrs	r2, r2, #5
   dec54:	e000      	b.n	dec58 <iso_year_adjust+0x46>
   dec56:	2201      	movs	r2, #1
   dec58:	6983      	ldr	r3, [r0, #24]
   dec5a:	69c1      	ldr	r1, [r0, #28]
   dec5c:	005b      	lsls	r3, r3, #1
   dec5e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   dec62:	4413      	add	r3, r2
   dec64:	2b21      	cmp	r3, #33	; 0x21
   dec66:	dc0e      	bgt.n	dec86 <iso_year_adjust+0x74>
   dec68:	2b20      	cmp	r3, #32
   dec6a:	da2f      	bge.n	deccc <iso_year_adjust+0xba>
   dec6c:	2b0d      	cmp	r3, #13
   dec6e:	dc02      	bgt.n	dec76 <iso_year_adjust+0x64>
   dec70:	2b0a      	cmp	r3, #10
   dec72:	db05      	blt.n	dec80 <iso_year_adjust+0x6e>
   dec74:	e02a      	b.n	deccc <iso_year_adjust+0xba>
   dec76:	2b10      	cmp	r3, #16
   dec78:	db26      	blt.n	decc8 <iso_year_adjust+0xb6>
   dec7a:	2b11      	cmp	r3, #17
   dec7c:	dd26      	ble.n	deccc <iso_year_adjust+0xba>
   dec7e:	3b1c      	subs	r3, #28
   dec80:	2b01      	cmp	r3, #1
   dec82:	d923      	bls.n	deccc <iso_year_adjust+0xba>
   dec84:	e020      	b.n	decc8 <iso_year_adjust+0xb6>
   dec86:	f241 62c6 	movw	r2, #5830	; 0x16c6
   dec8a:	4293      	cmp	r3, r2
   dec8c:	dc0e      	bgt.n	decac <iso_year_adjust+0x9a>
   dec8e:	f241 62c2 	movw	r2, #5826	; 0x16c2
   dec92:	4293      	cmp	r3, r2
   dec94:	da16      	bge.n	decc4 <iso_year_adjust+0xb2>
   dec96:	f241 62a2 	movw	r2, #5794	; 0x16a2
   dec9a:	4293      	cmp	r3, r2
   dec9c:	d012      	beq.n	decc4 <iso_year_adjust+0xb2>
   dec9e:	db13      	blt.n	decc8 <iso_year_adjust+0xb6>
   deca0:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   deca4:	3b12      	subs	r3, #18
   deca6:	2b02      	cmp	r3, #2
   deca8:	d90c      	bls.n	decc4 <iso_year_adjust+0xb2>
   decaa:	e00d      	b.n	decc8 <iso_year_adjust+0xb6>
   decac:	f241 62d5 	movw	r2, #5845	; 0x16d5
   decb0:	4293      	cmp	r3, r2
   decb2:	d007      	beq.n	decc4 <iso_year_adjust+0xb2>
   decb4:	f241 62d7 	movw	r2, #5847	; 0x16d7
   decb8:	4293      	cmp	r3, r2
   decba:	d003      	beq.n	decc4 <iso_year_adjust+0xb2>
   decbc:	f241 62d3 	movw	r2, #5843	; 0x16d3
   decc0:	4293      	cmp	r3, r2
   decc2:	d101      	bne.n	decc8 <iso_year_adjust+0xb6>
   decc4:	2001      	movs	r0, #1
   decc6:	bd10      	pop	{r4, pc}
   decc8:	2000      	movs	r0, #0
   decca:	bd10      	pop	{r4, pc}
   deccc:	f04f 30ff 	mov.w	r0, #4294967295
   decd0:	bd10      	pop	{r4, pc}
	...

000decd4 <strftime>:
   decd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   decd8:	b093      	sub	sp, #76	; 0x4c
   decda:	460e      	mov	r6, r1
   decdc:	461d      	mov	r5, r3
   decde:	4607      	mov	r7, r0
   dece0:	4691      	mov	r9, r2
   dece2:	f000 fdf3 	bl	df8cc <__get_current_time_locale>
   dece6:	2300      	movs	r3, #0
   dece8:	9306      	str	r3, [sp, #24]
   decea:	461c      	mov	r4, r3
   decec:	1e73      	subs	r3, r6, #1
   decee:	9003      	str	r0, [sp, #12]
   decf0:	9302      	str	r3, [sp, #8]
   decf2:	f899 3000 	ldrb.w	r3, [r9]
   decf6:	2b00      	cmp	r3, #0
   decf8:	f000 8492 	beq.w	df620 <strftime+0x94c>
   decfc:	2b25      	cmp	r3, #37	; 0x25
   decfe:	d008      	beq.n	ded12 <strftime+0x3e>
   ded00:	9a02      	ldr	r2, [sp, #8]
   ded02:	4294      	cmp	r4, r2
   ded04:	f080 8490 	bcs.w	df628 <strftime+0x954>
   ded08:	553b      	strb	r3, [r7, r4]
   ded0a:	f109 0901 	add.w	r9, r9, #1
   ded0e:	3401      	adds	r4, #1
   ded10:	e7ef      	b.n	decf2 <strftime+0x1e>
   ded12:	f899 a001 	ldrb.w	sl, [r9, #1]
   ded16:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   ded1a:	d007      	beq.n	ded2c <strftime+0x58>
   ded1c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   ded20:	d004      	beq.n	ded2c <strftime+0x58>
   ded22:	f109 0901 	add.w	r9, r9, #1
   ded26:	f04f 0a00 	mov.w	sl, #0
   ded2a:	e001      	b.n	ded30 <strftime+0x5c>
   ded2c:	f109 0902 	add.w	r9, r9, #2
   ded30:	f899 3000 	ldrb.w	r3, [r9]
   ded34:	3b31      	subs	r3, #49	; 0x31
   ded36:	2b08      	cmp	r3, #8
   ded38:	d808      	bhi.n	ded4c <strftime+0x78>
   ded3a:	4648      	mov	r0, r9
   ded3c:	220a      	movs	r2, #10
   ded3e:	a90a      	add	r1, sp, #40	; 0x28
   ded40:	f000 fdba 	bl	df8b8 <strtoul>
   ded44:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   ded48:	4680      	mov	r8, r0
   ded4a:	e001      	b.n	ded50 <strftime+0x7c>
   ded4c:	f04f 0800 	mov.w	r8, #0
   ded50:	f899 3000 	ldrb.w	r3, [r9]
   ded54:	2b45      	cmp	r3, #69	; 0x45
   ded56:	d001      	beq.n	ded5c <strftime+0x88>
   ded58:	2b4f      	cmp	r3, #79	; 0x4f
   ded5a:	d101      	bne.n	ded60 <strftime+0x8c>
   ded5c:	f109 0901 	add.w	r9, r9, #1
   ded60:	f899 0000 	ldrb.w	r0, [r9]
   ded64:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   ded68:	2b55      	cmp	r3, #85	; 0x55
   ded6a:	f200 845d 	bhi.w	df628 <strftime+0x954>
   ded6e:	e8df f013 	tbh	[pc, r3, lsl #1]
   ded72:	044a      	.short	0x044a
   ded74:	045b045b 	.word	0x045b045b
   ded78:	045b045b 	.word	0x045b045b
   ded7c:	045b045b 	.word	0x045b045b
   ded80:	045b045b 	.word	0x045b045b
   ded84:	045b045b 	.word	0x045b045b
   ded88:	045b045b 	.word	0x045b045b
   ded8c:	045b045b 	.word	0x045b045b
   ded90:	045b045b 	.word	0x045b045b
   ded94:	045b045b 	.word	0x045b045b
   ded98:	045b045b 	.word	0x045b045b
   ded9c:	045b045b 	.word	0x045b045b
   deda0:	045b045b 	.word	0x045b045b
   deda4:	045b045b 	.word	0x045b045b
   deda8:	006f045b 	.word	0x006f045b
   dedac:	00d400a1 	.word	0x00d400a1
   dedb0:	045b011a 	.word	0x045b011a
   dedb4:	01a0013f 	.word	0x01a0013f
   dedb8:	022d0226 	.word	0x022d0226
   dedbc:	045b045b 	.word	0x045b045b
   dedc0:	0260045b 	.word	0x0260045b
   dedc4:	045b045b 	.word	0x045b045b
   dedc8:	045b0268 	.word	0x045b0268
   dedcc:	031d0297 	.word	0x031d0297
   dedd0:	033b0325 	.word	0x033b0325
   dedd4:	03860343 	.word	0x03860343
   dedd8:	03a000c6 	.word	0x03a000c6
   deddc:	045b041f 	.word	0x045b041f
   dede0:	045b045b 	.word	0x045b045b
   dede4:	045b045b 	.word	0x045b045b
   dede8:	0056045b 	.word	0x0056045b
   dedec:	00ba0089 	.word	0x00ba0089
   dedf0:	010c010c 	.word	0x010c010c
   dedf4:	0171045b 	.word	0x0171045b
   dedf8:	045b0089 	.word	0x045b0089
   dedfc:	0226023d 	.word	0x0226023d
   dee00:	025d022d 	.word	0x025d022d
   dee04:	045b0262 	.word	0x045b0262
   dee08:	045b0268 	.word	0x045b0268
   dee0c:	029c00be 	.word	0x029c00be
   dee10:	032e031f 	.word	0x032e031f
   dee14:	037f045b 	.word	0x037f045b
   dee18:	039200c2 	.word	0x039200c2
   dee1c:	03e7      	.short	0x03e7
   dee1e:	69ab      	ldr	r3, [r5, #24]
   dee20:	9a03      	ldr	r2, [sp, #12]
   dee22:	3318      	adds	r3, #24
   dee24:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dee28:	4640      	mov	r0, r8
   dee2a:	f000 fc07 	bl	df63c <strlen>
   dee2e:	f108 38ff 	add.w	r8, r8, #4294967295
   dee32:	193b      	adds	r3, r7, r4
   dee34:	4420      	add	r0, r4
   dee36:	4284      	cmp	r4, r0
   dee38:	f000 83eb 	beq.w	df612 <strftime+0x93e>
   dee3c:	9a02      	ldr	r2, [sp, #8]
   dee3e:	4294      	cmp	r4, r2
   dee40:	f080 83f2 	bcs.w	df628 <strftime+0x954>
   dee44:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dee48:	f803 2b01 	strb.w	r2, [r3], #1
   dee4c:	3401      	adds	r4, #1
   dee4e:	e7f2      	b.n	dee36 <strftime+0x162>
   dee50:	69ab      	ldr	r3, [r5, #24]
   dee52:	9a03      	ldr	r2, [sp, #12]
   dee54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dee58:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   dee5c:	4640      	mov	r0, r8
   dee5e:	f000 fbed 	bl	df63c <strlen>
   dee62:	f108 38ff 	add.w	r8, r8, #4294967295
   dee66:	193b      	adds	r3, r7, r4
   dee68:	4420      	add	r0, r4
   dee6a:	4284      	cmp	r4, r0
   dee6c:	f000 83d1 	beq.w	df612 <strftime+0x93e>
   dee70:	9a02      	ldr	r2, [sp, #8]
   dee72:	4294      	cmp	r4, r2
   dee74:	f080 83d8 	bcs.w	df628 <strftime+0x954>
   dee78:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dee7c:	f803 2b01 	strb.w	r2, [r3], #1
   dee80:	3401      	adds	r4, #1
   dee82:	e7f2      	b.n	dee6a <strftime+0x196>
   dee84:	692b      	ldr	r3, [r5, #16]
   dee86:	9a03      	ldr	r2, [sp, #12]
   dee88:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dee8c:	4640      	mov	r0, r8
   dee8e:	f000 fbd5 	bl	df63c <strlen>
   dee92:	f108 38ff 	add.w	r8, r8, #4294967295
   dee96:	193b      	adds	r3, r7, r4
   dee98:	4420      	add	r0, r4
   dee9a:	4284      	cmp	r4, r0
   dee9c:	f000 83b9 	beq.w	df612 <strftime+0x93e>
   deea0:	9a02      	ldr	r2, [sp, #8]
   deea2:	4294      	cmp	r4, r2
   deea4:	f080 83c0 	bcs.w	df628 <strftime+0x954>
   deea8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   deeac:	f803 2b01 	strb.w	r2, [r3], #1
   deeb0:	3401      	adds	r4, #1
   deeb2:	e7f2      	b.n	dee9a <strftime+0x1c6>
   deeb4:	692b      	ldr	r3, [r5, #16]
   deeb6:	9a03      	ldr	r2, [sp, #12]
   deeb8:	330c      	adds	r3, #12
   deeba:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   deebe:	4640      	mov	r0, r8
   deec0:	f000 fbbc 	bl	df63c <strlen>
   deec4:	f108 38ff 	add.w	r8, r8, #4294967295
   deec8:	193b      	adds	r3, r7, r4
   deeca:	4420      	add	r0, r4
   deecc:	4284      	cmp	r4, r0
   deece:	f000 83a0 	beq.w	df612 <strftime+0x93e>
   deed2:	9a02      	ldr	r2, [sp, #8]
   deed4:	4294      	cmp	r4, r2
   deed6:	f080 83a7 	bcs.w	df628 <strftime+0x954>
   deeda:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   deede:	f803 2b01 	strb.w	r2, [r3], #1
   deee2:	3401      	adds	r4, #1
   deee4:	e7f2      	b.n	deecc <strftime+0x1f8>
   deee6:	9b03      	ldr	r3, [sp, #12]
   deee8:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   deeec:	e00a      	b.n	def04 <strftime+0x230>
   deeee:	9b03      	ldr	r3, [sp, #12]
   deef0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   deef4:	e006      	b.n	def04 <strftime+0x230>
   deef6:	9b03      	ldr	r3, [sp, #12]
   deef8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   deefc:	e002      	b.n	def04 <strftime+0x230>
   deefe:	9b03      	ldr	r3, [sp, #12]
   def00:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   def04:	4640      	mov	r0, r8
   def06:	f000 fb99 	bl	df63c <strlen>
   def0a:	f898 3000 	ldrb.w	r3, [r8]
   def0e:	2b00      	cmp	r3, #0
   def10:	f000 837f 	beq.w	df612 <strftime+0x93e>
   def14:	462b      	mov	r3, r5
   def16:	4642      	mov	r2, r8
   def18:	e093      	b.n	df042 <strftime+0x36e>
   def1a:	49b6      	ldr	r1, [pc, #728]	; (df1f4 <strftime+0x520>)
   def1c:	f8d5 b014 	ldr.w	fp, [r5, #20]
   def20:	458b      	cmp	fp, r1
   def22:	bfac      	ite	ge
   def24:	2100      	movge	r1, #0
   def26:	2101      	movlt	r1, #1
   def28:	f1bb 0f00 	cmp.w	fp, #0
   def2c:	db04      	blt.n	def38 <strftime+0x264>
   def2e:	2064      	movs	r0, #100	; 0x64
   def30:	fb9b f0f0 	sdiv	r0, fp, r0
   def34:	3013      	adds	r0, #19
   def36:	e008      	b.n	def4a <strftime+0x276>
   def38:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   def3c:	9107      	str	r1, [sp, #28]
   def3e:	f000 ff05 	bl	dfd4c <abs>
   def42:	9907      	ldr	r1, [sp, #28]
   def44:	2364      	movs	r3, #100	; 0x64
   def46:	fb90 f0f3 	sdiv	r0, r0, r3
   def4a:	f1ba 0f00 	cmp.w	sl, #0
   def4e:	d008      	beq.n	def62 <strftime+0x28e>
   def50:	2863      	cmp	r0, #99	; 0x63
   def52:	dd09      	ble.n	def68 <strftime+0x294>
   def54:	4ba8      	ldr	r3, [pc, #672]	; (df1f8 <strftime+0x524>)
   def56:	4aa9      	ldr	r2, [pc, #676]	; (df1fc <strftime+0x528>)
   def58:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   def5c:	bf18      	it	ne
   def5e:	4613      	movne	r3, r2
   def60:	e003      	b.n	def6a <strftime+0x296>
   def62:	4ba6      	ldr	r3, [pc, #664]	; (df1fc <strftime+0x528>)
   def64:	4aa6      	ldr	r2, [pc, #664]	; (df200 <strftime+0x52c>)
   def66:	e001      	b.n	def6c <strftime+0x298>
   def68:	4ba4      	ldr	r3, [pc, #656]	; (df1fc <strftime+0x528>)
   def6a:	4aa6      	ldr	r2, [pc, #664]	; (df204 <strftime+0x530>)
   def6c:	9001      	str	r0, [sp, #4]
   def6e:	f1b8 0f01 	cmp.w	r8, #1
   def72:	bf98      	it	ls
   def74:	f04f 0802 	movls.w	r8, #2
   def78:	ebc1 0108 	rsb	r1, r1, r8
   def7c:	9100      	str	r1, [sp, #0]
   def7e:	489d      	ldr	r0, [pc, #628]	; (df1f4 <strftime+0x520>)
   def80:	49a1      	ldr	r1, [pc, #644]	; (df208 <strftime+0x534>)
   def82:	4583      	cmp	fp, r0
   def84:	bfb8      	it	lt
   def86:	460b      	movlt	r3, r1
   def88:	e21e      	b.n	df3c8 <strftime+0x6f4>
   def8a:	4aa0      	ldr	r2, [pc, #640]	; (df20c <strftime+0x538>)
   def8c:	49a0      	ldr	r1, [pc, #640]	; (df210 <strftime+0x53c>)
   def8e:	68eb      	ldr	r3, [r5, #12]
   def90:	2864      	cmp	r0, #100	; 0x64
   def92:	bf08      	it	eq
   def94:	460a      	moveq	r2, r1
   def96:	1b31      	subs	r1, r6, r4
   def98:	1938      	adds	r0, r7, r4
   def9a:	f7fa fc6b 	bl	d9874 <sniprintf>
   def9e:	2800      	cmp	r0, #0
   defa0:	f280 8302 	bge.w	df5a8 <strftime+0x8d4>
   defa4:	e340      	b.n	df628 <strftime+0x954>
   defa6:	6968      	ldr	r0, [r5, #20]
   defa8:	692b      	ldr	r3, [r5, #16]
   defaa:	2800      	cmp	r0, #0
   defac:	f103 0b01 	add.w	fp, r3, #1
   defb0:	eb07 0804 	add.w	r8, r7, r4
   defb4:	ebc4 0a06 	rsb	sl, r4, r6
   defb8:	68eb      	ldr	r3, [r5, #12]
   defba:	db05      	blt.n	defc8 <strftime+0x2f4>
   defbc:	2264      	movs	r2, #100	; 0x64
   defbe:	fb90 f1f2 	sdiv	r1, r0, r2
   defc2:	fb02 0011 	mls	r0, r2, r1, r0
   defc6:	e00a      	b.n	defde <strftime+0x30a>
   defc8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   defcc:	9307      	str	r3, [sp, #28]
   defce:	f000 febd 	bl	dfd4c <abs>
   defd2:	2264      	movs	r2, #100	; 0x64
   defd4:	9b07      	ldr	r3, [sp, #28]
   defd6:	fb90 f1f2 	sdiv	r1, r0, r2
   defda:	fb01 0012 	mls	r0, r1, r2, r0
   defde:	4a8d      	ldr	r2, [pc, #564]	; (df214 <strftime+0x540>)
   defe0:	9001      	str	r0, [sp, #4]
   defe2:	9300      	str	r3, [sp, #0]
   defe4:	4651      	mov	r1, sl
   defe6:	465b      	mov	r3, fp
   defe8:	4640      	mov	r0, r8
   defea:	f7fa fc43 	bl	d9874 <sniprintf>
   defee:	e7d6      	b.n	def9e <strftime+0x2ca>
   deff0:	2325      	movs	r3, #37	; 0x25
   deff2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   deff6:	f1ba 0f00 	cmp.w	sl, #0
   deffa:	d007      	beq.n	df00c <strftime+0x338>
   deffc:	f1b8 0f05 	cmp.w	r8, #5
   df000:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   df004:	bf98      	it	ls
   df006:	f04f 0806 	movls.w	r8, #6
   df00a:	e004      	b.n	df016 <strftime+0x342>
   df00c:	232b      	movs	r3, #43	; 0x2b
   df00e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   df012:	f04f 080a 	mov.w	r8, #10
   df016:	f1b8 0306 	subs.w	r3, r8, #6
   df01a:	d102      	bne.n	df022 <strftime+0x34e>
   df01c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   df020:	e00a      	b.n	df038 <strftime+0x364>
   df022:	4a7d      	ldr	r2, [pc, #500]	; (df218 <strftime+0x544>)
   df024:	211e      	movs	r1, #30
   df026:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   df02a:	f7fa fc23 	bl	d9874 <sniprintf>
   df02e:	2800      	cmp	r0, #0
   df030:	ddf4      	ble.n	df01c <strftime+0x348>
   df032:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   df036:	4418      	add	r0, r3
   df038:	4978      	ldr	r1, [pc, #480]	; (df21c <strftime+0x548>)
   df03a:	f7ff fdc7 	bl	debcc <strcpy>
   df03e:	462b      	mov	r3, r5
   df040:	aa0a      	add	r2, sp, #40	; 0x28
   df042:	1b31      	subs	r1, r6, r4
   df044:	1938      	adds	r0, r7, r4
   df046:	f7ff fe45 	bl	decd4 <strftime>
   df04a:	2800      	cmp	r0, #0
   df04c:	f340 82ec 	ble.w	df628 <strftime+0x954>
   df050:	4404      	add	r4, r0
   df052:	e2de      	b.n	df612 <strftime+0x93e>
   df054:	4628      	mov	r0, r5
   df056:	f7ff fddc 	bl	dec12 <iso_year_adjust>
   df05a:	4680      	mov	r8, r0
   df05c:	6968      	ldr	r0, [r5, #20]
   df05e:	2800      	cmp	r0, #0
   df060:	db05      	blt.n	df06e <strftime+0x39a>
   df062:	2264      	movs	r2, #100	; 0x64
   df064:	fb90 f1f2 	sdiv	r1, r0, r2
   df068:	fb02 0011 	mls	r0, r2, r1, r0
   df06c:	e008      	b.n	df080 <strftime+0x3ac>
   df06e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   df072:	f000 fe6b 	bl	dfd4c <abs>
   df076:	2264      	movs	r2, #100	; 0x64
   df078:	fb90 f3f2 	sdiv	r3, r0, r2
   df07c:	fb03 0012 	mls	r0, r3, r2, r0
   df080:	f1b8 0f00 	cmp.w	r8, #0
   df084:	da06      	bge.n	df094 <strftime+0x3c0>
   df086:	696a      	ldr	r2, [r5, #20]
   df088:	4b65      	ldr	r3, [pc, #404]	; (df220 <strftime+0x54c>)
   df08a:	429a      	cmp	r2, r3
   df08c:	bfb8      	it	lt
   df08e:	f04f 0801 	movlt.w	r8, #1
   df092:	e006      	b.n	df0a2 <strftime+0x3ce>
   df094:	d005      	beq.n	df0a2 <strftime+0x3ce>
   df096:	696a      	ldr	r2, [r5, #20]
   df098:	4b56      	ldr	r3, [pc, #344]	; (df1f4 <strftime+0x520>)
   df09a:	429a      	cmp	r2, r3
   df09c:	bfb8      	it	lt
   df09e:	f04f 38ff 	movlt.w	r8, #4294967295
   df0a2:	2364      	movs	r3, #100	; 0x64
   df0a4:	4440      	add	r0, r8
   df0a6:	fb90 f2f3 	sdiv	r2, r0, r3
   df0aa:	fb03 0012 	mls	r0, r3, r2, r0
   df0ae:	4418      	add	r0, r3
   df0b0:	e1f9      	b.n	df4a6 <strftime+0x7d2>
   df0b2:	4b50      	ldr	r3, [pc, #320]	; (df1f4 <strftime+0x520>)
   df0b4:	6969      	ldr	r1, [r5, #20]
   df0b6:	9108      	str	r1, [sp, #32]
   df0b8:	4299      	cmp	r1, r3
   df0ba:	bfac      	ite	ge
   df0bc:	2300      	movge	r3, #0
   df0be:	2301      	movlt	r3, #1
   df0c0:	4628      	mov	r0, r5
   df0c2:	9307      	str	r3, [sp, #28]
   df0c4:	f7ff fda5 	bl	dec12 <iso_year_adjust>
   df0c8:	9908      	ldr	r1, [sp, #32]
   df0ca:	2900      	cmp	r1, #0
   df0cc:	4683      	mov	fp, r0
   df0ce:	db04      	blt.n	df0da <strftime+0x406>
   df0d0:	2364      	movs	r3, #100	; 0x64
   df0d2:	fb91 f3f3 	sdiv	r3, r1, r3
   df0d6:	3313      	adds	r3, #19
   df0d8:	e008      	b.n	df0ec <strftime+0x418>
   df0da:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   df0de:	9108      	str	r1, [sp, #32]
   df0e0:	f000 fe34 	bl	dfd4c <abs>
   df0e4:	9908      	ldr	r1, [sp, #32]
   df0e6:	2364      	movs	r3, #100	; 0x64
   df0e8:	fb90 f3f3 	sdiv	r3, r0, r3
   df0ec:	6968      	ldr	r0, [r5, #20]
   df0ee:	2800      	cmp	r0, #0
   df0f0:	db06      	blt.n	df100 <strftime+0x42c>
   df0f2:	f04f 0e64 	mov.w	lr, #100	; 0x64
   df0f6:	fb90 fcfe 	sdiv	ip, r0, lr
   df0fa:	fb0e 001c 	mls	r0, lr, ip, r0
   df0fe:	e00d      	b.n	df11c <strftime+0x448>
   df100:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   df104:	9109      	str	r1, [sp, #36]	; 0x24
   df106:	9308      	str	r3, [sp, #32]
   df108:	f000 fe20 	bl	dfd4c <abs>
   df10c:	f04f 0e64 	mov.w	lr, #100	; 0x64
   df110:	9909      	ldr	r1, [sp, #36]	; 0x24
   df112:	9b08      	ldr	r3, [sp, #32]
   df114:	fb90 fcfe 	sdiv	ip, r0, lr
   df118:	fb0c 001e 	mls	r0, ip, lr, r0
   df11c:	f1bb 0f00 	cmp.w	fp, #0
   df120:	da08      	bge.n	df134 <strftime+0x460>
   df122:	6969      	ldr	r1, [r5, #20]
   df124:	4a3e      	ldr	r2, [pc, #248]	; (df220 <strftime+0x54c>)
   df126:	4291      	cmp	r1, r2
   df128:	da0a      	bge.n	df140 <strftime+0x46c>
   df12a:	f04f 0b01 	mov.w	fp, #1
   df12e:	f8cd b01c 	str.w	fp, [sp, #28]
   df132:	e005      	b.n	df140 <strftime+0x46c>
   df134:	d004      	beq.n	df140 <strftime+0x46c>
   df136:	4a2f      	ldr	r2, [pc, #188]	; (df1f4 <strftime+0x520>)
   df138:	4291      	cmp	r1, r2
   df13a:	bfb8      	it	lt
   df13c:	f04f 3bff 	movlt.w	fp, #4294967295
   df140:	eb0b 0200 	add.w	r2, fp, r0
   df144:	1c50      	adds	r0, r2, #1
   df146:	d102      	bne.n	df14e <strftime+0x47a>
   df148:	3b01      	subs	r3, #1
   df14a:	2263      	movs	r2, #99	; 0x63
   df14c:	e003      	b.n	df156 <strftime+0x482>
   df14e:	2a64      	cmp	r2, #100	; 0x64
   df150:	bf04      	itt	eq
   df152:	3301      	addeq	r3, #1
   df154:	2200      	moveq	r2, #0
   df156:	2064      	movs	r0, #100	; 0x64
   df158:	fb00 2303 	mla	r3, r0, r3, r2
   df15c:	9a07      	ldr	r2, [sp, #28]
   df15e:	b142      	cbz	r2, df172 <strftime+0x49e>
   df160:	222d      	movs	r2, #45	; 0x2d
   df162:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   df166:	f1b8 0f00 	cmp.w	r8, #0
   df16a:	d013      	beq.n	df194 <strftime+0x4c0>
   df16c:	f108 38ff 	add.w	r8, r8, #4294967295
   df170:	e010      	b.n	df194 <strftime+0x4c0>
   df172:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   df176:	d110      	bne.n	df19a <strftime+0x4c6>
   df178:	f242 720f 	movw	r2, #9999	; 0x270f
   df17c:	4293      	cmp	r3, r2
   df17e:	d90c      	bls.n	df19a <strftime+0x4c6>
   df180:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   df184:	f1b8 0f00 	cmp.w	r8, #0
   df188:	d1f0      	bne.n	df16c <strftime+0x498>
   df18a:	aa12      	add	r2, sp, #72	; 0x48
   df18c:	2125      	movs	r1, #37	; 0x25
   df18e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   df192:	e00a      	b.n	df1aa <strftime+0x4d6>
   df194:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   df198:	e000      	b.n	df19c <strftime+0x4c8>
   df19a:	aa0a      	add	r2, sp, #40	; 0x28
   df19c:	2125      	movs	r1, #37	; 0x25
   df19e:	7011      	strb	r1, [r2, #0]
   df1a0:	f1ba 0f00 	cmp.w	sl, #0
   df1a4:	d101      	bne.n	df1aa <strftime+0x4d6>
   df1a6:	1c50      	adds	r0, r2, #1
   df1a8:	e002      	b.n	df1b0 <strftime+0x4dc>
   df1aa:	2130      	movs	r1, #48	; 0x30
   df1ac:	1c90      	adds	r0, r2, #2
   df1ae:	7051      	strb	r1, [r2, #1]
   df1b0:	491c      	ldr	r1, [pc, #112]	; (df224 <strftime+0x550>)
   df1b2:	9307      	str	r3, [sp, #28]
   df1b4:	f7ff fd0a 	bl	debcc <strcpy>
   df1b8:	9b07      	ldr	r3, [sp, #28]
   df1ba:	9300      	str	r3, [sp, #0]
   df1bc:	e1ad      	b.n	df51a <strftime+0x846>
   df1be:	4a14      	ldr	r2, [pc, #80]	; (df210 <strftime+0x53c>)
   df1c0:	4912      	ldr	r1, [pc, #72]	; (df20c <strftime+0x538>)
   df1c2:	68ab      	ldr	r3, [r5, #8]
   df1c4:	286b      	cmp	r0, #107	; 0x6b
   df1c6:	bf08      	it	eq
   df1c8:	460a      	moveq	r2, r1
   df1ca:	e6e4      	b.n	def96 <strftime+0x2c2>
   df1cc:	68a9      	ldr	r1, [r5, #8]
   df1ce:	230c      	movs	r3, #12
   df1d0:	b131      	cbz	r1, df1e0 <strftime+0x50c>
   df1d2:	4299      	cmp	r1, r3
   df1d4:	bf0e      	itee	eq
   df1d6:	460b      	moveq	r3, r1
   df1d8:	fb91 f2f3 	sdivne	r2, r1, r3
   df1dc:	fb03 1312 	mlsne	r3, r3, r2, r1
   df1e0:	4a0a      	ldr	r2, [pc, #40]	; (df20c <strftime+0x538>)
   df1e2:	490b      	ldr	r1, [pc, #44]	; (df210 <strftime+0x53c>)
   df1e4:	2849      	cmp	r0, #73	; 0x49
   df1e6:	bf08      	it	eq
   df1e8:	460a      	moveq	r2, r1
   df1ea:	e6d4      	b.n	def96 <strftime+0x2c2>
   df1ec:	69eb      	ldr	r3, [r5, #28]
   df1ee:	4a0e      	ldr	r2, [pc, #56]	; (df228 <strftime+0x554>)
   df1f0:	3301      	adds	r3, #1
   df1f2:	e6d0      	b.n	def96 <strftime+0x2c2>
   df1f4:	fffff894 	.word	0xfffff894
   df1f8:	000e0c33 	.word	0x000e0c33
   df1fc:	000e05d4 	.word	0x000e05d4
   df200:	000e0c24 	.word	0x000e0c24
   df204:	000e0c2b 	.word	0x000e0c2b
   df208:	000e0436 	.word	0x000e0436
   df20c:	000e0c35 	.word	0x000e0c35
   df210:	000e0c43 	.word	0x000e0c43
   df214:	000e0c39 	.word	0x000e0c39
   df218:	000e0c48 	.word	0x000e0c48
   df21c:	000e0c4c 	.word	0x000e0c4c
   df220:	fffff895 	.word	0xfffff895
   df224:	000e0c54 	.word	0x000e0c54
   df228:	000e0c58 	.word	0x000e0c58
   df22c:	692b      	ldr	r3, [r5, #16]
   df22e:	3301      	adds	r3, #1
   df230:	e13d      	b.n	df4ae <strftime+0x7da>
   df232:	686b      	ldr	r3, [r5, #4]
   df234:	e13b      	b.n	df4ae <strftime+0x7da>
   df236:	9b02      	ldr	r3, [sp, #8]
   df238:	429c      	cmp	r4, r3
   df23a:	f080 81f5 	bcs.w	df628 <strftime+0x954>
   df23e:	230a      	movs	r3, #10
   df240:	e1e5      	b.n	df60e <strftime+0x93a>
   df242:	68ab      	ldr	r3, [r5, #8]
   df244:	9a03      	ldr	r2, [sp, #12]
   df246:	2b0b      	cmp	r3, #11
   df248:	bfcc      	ite	gt
   df24a:	23a4      	movgt	r3, #164	; 0xa4
   df24c:	23a0      	movle	r3, #160	; 0xa0
   df24e:	4413      	add	r3, r2
   df250:	f8d3 8004 	ldr.w	r8, [r3, #4]
   df254:	4640      	mov	r0, r8
   df256:	f000 f9f1 	bl	df63c <strlen>
   df25a:	4bb2      	ldr	r3, [pc, #712]	; (df524 <strftime+0x850>)
   df25c:	f8d3 e000 	ldr.w	lr, [r3]
   df260:	1939      	adds	r1, r7, r4
   df262:	4642      	mov	r2, r8
   df264:	4420      	add	r0, r4
   df266:	4284      	cmp	r4, r0
   df268:	f000 81d3 	beq.w	df612 <strftime+0x93e>
   df26c:	9b02      	ldr	r3, [sp, #8]
   df26e:	429c      	cmp	r4, r3
   df270:	f080 81da 	bcs.w	df628 <strftime+0x954>
   df274:	f899 3000 	ldrb.w	r3, [r9]
   df278:	2b50      	cmp	r3, #80	; 0x50
   df27a:	f104 0401 	add.w	r4, r4, #1
   df27e:	7813      	ldrb	r3, [r2, #0]
   df280:	d10a      	bne.n	df298 <strftime+0x5c4>
   df282:	eb0e 0c03 	add.w	ip, lr, r3
   df286:	f89c c001 	ldrb.w	ip, [ip, #1]
   df28a:	f00c 0c03 	and.w	ip, ip, #3
   df28e:	f1bc 0f01 	cmp.w	ip, #1
   df292:	bf08      	it	eq
   df294:	3320      	addeq	r3, #32
   df296:	b2db      	uxtb	r3, r3
   df298:	f801 3b01 	strb.w	r3, [r1], #1
   df29c:	3201      	adds	r2, #1
   df29e:	e7e2      	b.n	df266 <strftime+0x592>
   df2a0:	686b      	ldr	r3, [r5, #4]
   df2a2:	9300      	str	r3, [sp, #0]
   df2a4:	4aa0      	ldr	r2, [pc, #640]	; (df528 <strftime+0x854>)
   df2a6:	68ab      	ldr	r3, [r5, #8]
   df2a8:	e139      	b.n	df51e <strftime+0x84a>
   df2aa:	6a2b      	ldr	r3, [r5, #32]
   df2ac:	2b00      	cmp	r3, #0
   df2ae:	db17      	blt.n	df2e0 <strftime+0x60c>
   df2b0:	f000 fbc4 	bl	dfa3c <__tz_lock>
   df2b4:	9b06      	ldr	r3, [sp, #24]
   df2b6:	b91b      	cbnz	r3, df2c0 <strftime+0x5ec>
   df2b8:	f000 fbc2 	bl	dfa40 <_tzset_unlocked>
   df2bc:	2301      	movs	r3, #1
   df2be:	9306      	str	r3, [sp, #24]
   df2c0:	f000 fda0 	bl	dfe04 <__gettzinfo>
   df2c4:	6a2b      	ldr	r3, [r5, #32]
   df2c6:	2b00      	cmp	r3, #0
   df2c8:	bfd4      	ite	le
   df2ca:	2300      	movle	r3, #0
   df2cc:	2301      	movgt	r3, #1
   df2ce:	221c      	movs	r2, #28
   df2d0:	fb02 0003 	mla	r0, r2, r3, r0
   df2d4:	6a03      	ldr	r3, [r0, #32]
   df2d6:	f1c3 0800 	rsb	r8, r3, #0
   df2da:	f000 fbb0 	bl	dfa3e <__tz_unlock>
   df2de:	e001      	b.n	df2e4 <strftime+0x610>
   df2e0:	f04f 0800 	mov.w	r8, #0
   df2e4:	f8d5 e014 	ldr.w	lr, [r5, #20]
   df2e8:	4670      	mov	r0, lr
   df2ea:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   df2ee:	ea4f 71e0 	mov.w	r1, r0, asr #31
   df2f2:	f141 33ff 	adc.w	r3, r1, #4294967295
   df2f6:	2a00      	cmp	r2, #0
   df2f8:	f173 0b00 	sbcs.w	fp, r3, #0
   df2fc:	ebc4 0c06 	rsb	ip, r4, r6
   df300:	eb07 0a04 	add.w	sl, r7, r4
   df304:	da03      	bge.n	df30e <strftime+0x63a>
   df306:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   df30a:	f141 33ff 	adc.w	r3, r1, #4294967295
   df30e:	0891      	lsrs	r1, r2, #2
   df310:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   df314:	109b      	asrs	r3, r3, #2
   df316:	9104      	str	r1, [sp, #16]
   df318:	9305      	str	r3, [sp, #20]
   df31a:	f10e 31ff 	add.w	r1, lr, #4294967295
   df31e:	2364      	movs	r3, #100	; 0x64
   df320:	fb91 f1f3 	sdiv	r1, r1, r3
   df324:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   df328:	1a52      	subs	r2, r2, r1
   df32a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   df32e:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   df332:	f44f 71c8 	mov.w	r1, #400	; 0x190
   df336:	fb90 f1f1 	sdiv	r1, r0, r1
   df33a:	1852      	adds	r2, r2, r1
   df33c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   df340:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   df344:	f240 116d 	movw	r1, #365	; 0x16d
   df348:	fb01 fe0e 	mul.w	lr, r1, lr
   df34c:	69e9      	ldr	r1, [r5, #28]
   df34e:	eb12 020e 	adds.w	r2, r2, lr
   df352:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   df356:	1852      	adds	r2, r2, r1
   df358:	f04f 0e18 	mov.w	lr, #24
   df35c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   df360:	fba2 010e 	umull	r0, r1, r2, lr
   df364:	fb0e 1103 	mla	r1, lr, r3, r1
   df368:	68ab      	ldr	r3, [r5, #8]
   df36a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   df36e:	18c0      	adds	r0, r0, r3
   df370:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   df374:	fba0 230e 	umull	r2, r3, r0, lr
   df378:	fb0e 3301 	mla	r3, lr, r1, r3
   df37c:	6869      	ldr	r1, [r5, #4]
   df37e:	1852      	adds	r2, r2, r1
   df380:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   df384:	fba2 010e 	umull	r0, r1, r2, lr
   df388:	fb0e 1103 	mla	r1, lr, r3, r1
   df38c:	682b      	ldr	r3, [r5, #0]
   df38e:	4a67      	ldr	r2, [pc, #412]	; (df52c <strftime+0x858>)
   df390:	18c0      	adds	r0, r0, r3
   df392:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   df396:	ebb0 0008 	subs.w	r0, r0, r8
   df39a:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   df39e:	e9cd 0100 	strd	r0, r1, [sp]
   df3a2:	4661      	mov	r1, ip
   df3a4:	4650      	mov	r0, sl
   df3a6:	f7fa fa65 	bl	d9874 <sniprintf>
   df3aa:	e5f8      	b.n	def9e <strftime+0x2ca>
   df3ac:	682b      	ldr	r3, [r5, #0]
   df3ae:	e07e      	b.n	df4ae <strftime+0x7da>
   df3b0:	9b02      	ldr	r3, [sp, #8]
   df3b2:	429c      	cmp	r4, r3
   df3b4:	f080 8138 	bcs.w	df628 <strftime+0x954>
   df3b8:	2309      	movs	r3, #9
   df3ba:	e128      	b.n	df60e <strftime+0x93a>
   df3bc:	682b      	ldr	r3, [r5, #0]
   df3be:	9301      	str	r3, [sp, #4]
   df3c0:	686b      	ldr	r3, [r5, #4]
   df3c2:	9300      	str	r3, [sp, #0]
   df3c4:	4a5a      	ldr	r2, [pc, #360]	; (df530 <strftime+0x85c>)
   df3c6:	68ab      	ldr	r3, [r5, #8]
   df3c8:	1b31      	subs	r1, r6, r4
   df3ca:	1938      	adds	r0, r7, r4
   df3cc:	e60d      	b.n	defea <strftime+0x316>
   df3ce:	9b02      	ldr	r3, [sp, #8]
   df3d0:	429c      	cmp	r4, r3
   df3d2:	f080 8129 	bcs.w	df628 <strftime+0x954>
   df3d6:	69ab      	ldr	r3, [r5, #24]
   df3d8:	1c62      	adds	r2, r4, #1
   df3da:	b90b      	cbnz	r3, df3e0 <strftime+0x70c>
   df3dc:	2337      	movs	r3, #55	; 0x37
   df3de:	e000      	b.n	df3e2 <strftime+0x70e>
   df3e0:	3330      	adds	r3, #48	; 0x30
   df3e2:	553b      	strb	r3, [r7, r4]
   df3e4:	4614      	mov	r4, r2
   df3e6:	e114      	b.n	df612 <strftime+0x93e>
   df3e8:	69eb      	ldr	r3, [r5, #28]
   df3ea:	69aa      	ldr	r2, [r5, #24]
   df3ec:	3307      	adds	r3, #7
   df3ee:	1a9b      	subs	r3, r3, r2
   df3f0:	2207      	movs	r2, #7
   df3f2:	fb93 f3f2 	sdiv	r3, r3, r2
   df3f6:	e05a      	b.n	df4ae <strftime+0x7da>
   df3f8:	4628      	mov	r0, r5
   df3fa:	f7ff fc0a 	bl	dec12 <iso_year_adjust>
   df3fe:	69aa      	ldr	r2, [r5, #24]
   df400:	b10a      	cbz	r2, df406 <strftime+0x732>
   df402:	1e53      	subs	r3, r2, #1
   df404:	e000      	b.n	df408 <strftime+0x734>
   df406:	2306      	movs	r3, #6
   df408:	2800      	cmp	r0, #0
   df40a:	dc2f      	bgt.n	df46c <strftime+0x798>
   df40c:	69ea      	ldr	r2, [r5, #28]
   df40e:	d101      	bne.n	df414 <strftime+0x740>
   df410:	320a      	adds	r2, #10
   df412:	e03b      	b.n	df48c <strftime+0x7b8>
   df414:	1a9a      	subs	r2, r3, r2
   df416:	696b      	ldr	r3, [r5, #20]
   df418:	f240 716b 	movw	r1, #1899	; 0x76b
   df41c:	2b00      	cmp	r3, #0
   df41e:	bfb4      	ite	lt
   df420:	4608      	movlt	r0, r1
   df422:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   df426:	4418      	add	r0, r3
   df428:	0781      	lsls	r1, r0, #30
   df42a:	d107      	bne.n	df43c <strftime+0x768>
   df42c:	4601      	mov	r1, r0
   df42e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   df432:	fb90 f0fe 	sdiv	r0, r0, lr
   df436:	fb0e 1110 	mls	r1, lr, r0, r1
   df43a:	b981      	cbnz	r1, df45e <strftime+0x78a>
   df43c:	2b00      	cmp	r3, #0
   df43e:	f240 716b 	movw	r1, #1899	; 0x76b
   df442:	bfa8      	it	ge
   df444:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   df448:	4419      	add	r1, r3
   df44a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   df44e:	fb91 f0f3 	sdiv	r0, r1, r3
   df452:	fb03 1110 	mls	r1, r3, r0, r1
   df456:	fab1 f181 	clz	r1, r1
   df45a:	0949      	lsrs	r1, r1, #5
   df45c:	e000      	b.n	df460 <strftime+0x78c>
   df45e:	2101      	movs	r1, #1
   df460:	1a52      	subs	r2, r2, r1
   df462:	2a05      	cmp	r2, #5
   df464:	bfb4      	ite	lt
   df466:	2335      	movlt	r3, #53	; 0x35
   df468:	2334      	movge	r3, #52	; 0x34
   df46a:	e020      	b.n	df4ae <strftime+0x7da>
   df46c:	2301      	movs	r3, #1
   df46e:	e01e      	b.n	df4ae <strftime+0x7da>
   df470:	9b02      	ldr	r3, [sp, #8]
   df472:	429c      	cmp	r4, r3
   df474:	f080 80d8 	bcs.w	df628 <strftime+0x954>
   df478:	69ab      	ldr	r3, [r5, #24]
   df47a:	3330      	adds	r3, #48	; 0x30
   df47c:	e0c7      	b.n	df60e <strftime+0x93a>
   df47e:	69aa      	ldr	r2, [r5, #24]
   df480:	b10a      	cbz	r2, df486 <strftime+0x7b2>
   df482:	1e53      	subs	r3, r2, #1
   df484:	e000      	b.n	df488 <strftime+0x7b4>
   df486:	2306      	movs	r3, #6
   df488:	69ea      	ldr	r2, [r5, #28]
   df48a:	3207      	adds	r2, #7
   df48c:	1ad2      	subs	r2, r2, r3
   df48e:	2307      	movs	r3, #7
   df490:	fb92 f3f3 	sdiv	r3, r2, r3
   df494:	e00b      	b.n	df4ae <strftime+0x7da>
   df496:	6968      	ldr	r0, [r5, #20]
   df498:	2800      	cmp	r0, #0
   df49a:	da03      	bge.n	df4a4 <strftime+0x7d0>
   df49c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   df4a0:	f000 fc54 	bl	dfd4c <abs>
   df4a4:	2364      	movs	r3, #100	; 0x64
   df4a6:	fb90 f2f3 	sdiv	r2, r0, r3
   df4aa:	fb02 0313 	mls	r3, r2, r3, r0
   df4ae:	4a21      	ldr	r2, [pc, #132]	; (df534 <strftime+0x860>)
   df4b0:	e571      	b.n	def96 <strftime+0x2c2>
   df4b2:	696b      	ldr	r3, [r5, #20]
   df4b4:	4a20      	ldr	r2, [pc, #128]	; (df538 <strftime+0x864>)
   df4b6:	4293      	cmp	r3, r2
   df4b8:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   df4bc:	da05      	bge.n	df4ca <strftime+0x7f6>
   df4be:	232d      	movs	r3, #45	; 0x2d
   df4c0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   df4c4:	f1cb 0b00 	rsb	fp, fp, #0
   df4c8:	e008      	b.n	df4dc <strftime+0x808>
   df4ca:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   df4ce:	d10d      	bne.n	df4ec <strftime+0x818>
   df4d0:	f242 730f 	movw	r3, #9999	; 0x270f
   df4d4:	459b      	cmp	fp, r3
   df4d6:	d911      	bls.n	df4fc <strftime+0x828>
   df4d8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   df4dc:	f1b8 0f00 	cmp.w	r8, #0
   df4e0:	d001      	beq.n	df4e6 <strftime+0x812>
   df4e2:	f108 38ff 	add.w	r8, r8, #4294967295
   df4e6:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   df4ea:	e000      	b.n	df4ee <strftime+0x81a>
   df4ec:	ab0a      	add	r3, sp, #40	; 0x28
   df4ee:	2225      	movs	r2, #37	; 0x25
   df4f0:	701a      	strb	r2, [r3, #0]
   df4f2:	f1ba 0f00 	cmp.w	sl, #0
   df4f6:	d108      	bne.n	df50a <strftime+0x836>
   df4f8:	1c58      	adds	r0, r3, #1
   df4fa:	e009      	b.n	df510 <strftime+0x83c>
   df4fc:	f1b8 0f00 	cmp.w	r8, #0
   df500:	d1f4      	bne.n	df4ec <strftime+0x818>
   df502:	2325      	movs	r3, #37	; 0x25
   df504:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   df508:	ab0a      	add	r3, sp, #40	; 0x28
   df50a:	2230      	movs	r2, #48	; 0x30
   df50c:	1c98      	adds	r0, r3, #2
   df50e:	705a      	strb	r2, [r3, #1]
   df510:	490a      	ldr	r1, [pc, #40]	; (df53c <strftime+0x868>)
   df512:	f7ff fb5b 	bl	debcc <strcpy>
   df516:	f8cd b000 	str.w	fp, [sp]
   df51a:	4643      	mov	r3, r8
   df51c:	aa0a      	add	r2, sp, #40	; 0x28
   df51e:	1b31      	subs	r1, r6, r4
   df520:	1938      	adds	r0, r7, r4
   df522:	e03e      	b.n	df5a2 <strftime+0x8ce>
   df524:	2003bdc0 	.word	0x2003bdc0
   df528:	000e0c67 	.word	0x000e0c67
   df52c:	000e0c5d 	.word	0x000e0c5d
   df530:	000e0c62 	.word	0x000e0c62
   df534:	000e0c43 	.word	0x000e0c43
   df538:	fffff894 	.word	0xfffff894
   df53c:	000e0c54 	.word	0x000e0c54
   df540:	6a2b      	ldr	r3, [r5, #32]
   df542:	2b00      	cmp	r3, #0
   df544:	db65      	blt.n	df612 <strftime+0x93e>
   df546:	f000 fa79 	bl	dfa3c <__tz_lock>
   df54a:	9b06      	ldr	r3, [sp, #24]
   df54c:	b91b      	cbnz	r3, df556 <strftime+0x882>
   df54e:	f000 fa77 	bl	dfa40 <_tzset_unlocked>
   df552:	2301      	movs	r3, #1
   df554:	9306      	str	r3, [sp, #24]
   df556:	f000 fc55 	bl	dfe04 <__gettzinfo>
   df55a:	6a2b      	ldr	r3, [r5, #32]
   df55c:	2b00      	cmp	r3, #0
   df55e:	bfd4      	ite	le
   df560:	2300      	movle	r3, #0
   df562:	2301      	movgt	r3, #1
   df564:	221c      	movs	r2, #28
   df566:	fb02 0003 	mla	r0, r2, r3, r0
   df56a:	eb07 0a04 	add.w	sl, r7, r4
   df56e:	6a03      	ldr	r3, [r0, #32]
   df570:	f1c3 0800 	rsb	r8, r3, #0
   df574:	f000 fa63 	bl	dfa3e <__tz_unlock>
   df578:	233c      	movs	r3, #60	; 0x3c
   df57a:	fb98 f0f3 	sdiv	r0, r8, r3
   df57e:	9307      	str	r3, [sp, #28]
   df580:	f000 fcdc 	bl	dff3c <labs>
   df584:	9b07      	ldr	r3, [sp, #28]
   df586:	fb90 f2f3 	sdiv	r2, r0, r3
   df58a:	ebc4 0b06 	rsb	fp, r4, r6
   df58e:	fb02 0013 	mls	r0, r2, r3, r0
   df592:	4a28      	ldr	r2, [pc, #160]	; (df634 <strftime+0x960>)
   df594:	9000      	str	r0, [sp, #0]
   df596:	4659      	mov	r1, fp
   df598:	4650      	mov	r0, sl
   df59a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   df59e:	fb98 f3f3 	sdiv	r3, r8, r3
   df5a2:	f7fa f967 	bl	d9874 <sniprintf>
   df5a6:	e4fa      	b.n	def9e <strftime+0x2ca>
   df5a8:	4404      	add	r4, r0
   df5aa:	42a6      	cmp	r6, r4
   df5ac:	d831      	bhi.n	df612 <strftime+0x93e>
   df5ae:	e03b      	b.n	df628 <strftime+0x954>
   df5b0:	6a2b      	ldr	r3, [r5, #32]
   df5b2:	2b00      	cmp	r3, #0
   df5b4:	db2d      	blt.n	df612 <strftime+0x93e>
   df5b6:	f000 fa41 	bl	dfa3c <__tz_lock>
   df5ba:	9b06      	ldr	r3, [sp, #24]
   df5bc:	b91b      	cbnz	r3, df5c6 <strftime+0x8f2>
   df5be:	f000 fa3f 	bl	dfa40 <_tzset_unlocked>
   df5c2:	2301      	movs	r3, #1
   df5c4:	9306      	str	r3, [sp, #24]
   df5c6:	6a2b      	ldr	r3, [r5, #32]
   df5c8:	4a1b      	ldr	r2, [pc, #108]	; (df638 <strftime+0x964>)
   df5ca:	2b00      	cmp	r3, #0
   df5cc:	bfd4      	ite	le
   df5ce:	2300      	movle	r3, #0
   df5d0:	2301      	movgt	r3, #1
   df5d2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   df5d6:	4640      	mov	r0, r8
   df5d8:	f000 f830 	bl	df63c <strlen>
   df5dc:	f108 38ff 	add.w	r8, r8, #4294967295
   df5e0:	193b      	adds	r3, r7, r4
   df5e2:	4420      	add	r0, r4
   df5e4:	4284      	cmp	r4, r0
   df5e6:	d00b      	beq.n	df600 <strftime+0x92c>
   df5e8:	9a02      	ldr	r2, [sp, #8]
   df5ea:	4294      	cmp	r4, r2
   df5ec:	d205      	bcs.n	df5fa <strftime+0x926>
   df5ee:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   df5f2:	f803 2b01 	strb.w	r2, [r3], #1
   df5f6:	3401      	adds	r4, #1
   df5f8:	e7f4      	b.n	df5e4 <strftime+0x910>
   df5fa:	f000 fa20 	bl	dfa3e <__tz_unlock>
   df5fe:	e013      	b.n	df628 <strftime+0x954>
   df600:	f000 fa1d 	bl	dfa3e <__tz_unlock>
   df604:	e005      	b.n	df612 <strftime+0x93e>
   df606:	9b02      	ldr	r3, [sp, #8]
   df608:	429c      	cmp	r4, r3
   df60a:	d20d      	bcs.n	df628 <strftime+0x954>
   df60c:	2325      	movs	r3, #37	; 0x25
   df60e:	553b      	strb	r3, [r7, r4]
   df610:	3401      	adds	r4, #1
   df612:	f899 3000 	ldrb.w	r3, [r9]
   df616:	b11b      	cbz	r3, df620 <strftime+0x94c>
   df618:	f109 0901 	add.w	r9, r9, #1
   df61c:	f7ff bb69 	b.w	decf2 <strftime+0x1e>
   df620:	b126      	cbz	r6, df62c <strftime+0x958>
   df622:	2300      	movs	r3, #0
   df624:	553b      	strb	r3, [r7, r4]
   df626:	e001      	b.n	df62c <strftime+0x958>
   df628:	2000      	movs	r0, #0
   df62a:	e000      	b.n	df62e <strftime+0x95a>
   df62c:	4620      	mov	r0, r4
   df62e:	b013      	add	sp, #76	; 0x4c
   df630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df634:	000e0c71 	.word	0x000e0c71
   df638:	2003be28 	.word	0x2003be28

000df63c <strlen>:
   df63c:	4603      	mov	r3, r0
   df63e:	f813 2b01 	ldrb.w	r2, [r3], #1
   df642:	2a00      	cmp	r2, #0
   df644:	d1fb      	bne.n	df63e <strlen+0x2>
   df646:	1a18      	subs	r0, r3, r0
   df648:	3801      	subs	r0, #1
   df64a:	4770      	bx	lr

000df64c <strncmp>:
   df64c:	b530      	push	{r4, r5, lr}
   df64e:	b182      	cbz	r2, df672 <strncmp+0x26>
   df650:	1e45      	subs	r5, r0, #1
   df652:	3901      	subs	r1, #1
   df654:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   df658:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   df65c:	42a3      	cmp	r3, r4
   df65e:	d106      	bne.n	df66e <strncmp+0x22>
   df660:	43ec      	mvns	r4, r5
   df662:	4414      	add	r4, r2
   df664:	42e0      	cmn	r0, r4
   df666:	d001      	beq.n	df66c <strncmp+0x20>
   df668:	2b00      	cmp	r3, #0
   df66a:	d1f3      	bne.n	df654 <strncmp+0x8>
   df66c:	461c      	mov	r4, r3
   df66e:	1b18      	subs	r0, r3, r4
   df670:	bd30      	pop	{r4, r5, pc}
   df672:	4610      	mov	r0, r2
   df674:	bd30      	pop	{r4, r5, pc}

000df676 <strncpy>:
   df676:	b510      	push	{r4, lr}
   df678:	4603      	mov	r3, r0
   df67a:	b142      	cbz	r2, df68e <strncpy+0x18>
   df67c:	f811 4b01 	ldrb.w	r4, [r1], #1
   df680:	f803 4b01 	strb.w	r4, [r3], #1
   df684:	3a01      	subs	r2, #1
   df686:	2c00      	cmp	r4, #0
   df688:	d1f7      	bne.n	df67a <strncpy+0x4>
   df68a:	441a      	add	r2, r3
   df68c:	e000      	b.n	df690 <strncpy+0x1a>
   df68e:	bd10      	pop	{r4, pc}
   df690:	4293      	cmp	r3, r2
   df692:	d002      	beq.n	df69a <strncpy+0x24>
   df694:	f803 4b01 	strb.w	r4, [r3], #1
   df698:	e7fa      	b.n	df690 <strncpy+0x1a>
   df69a:	bd10      	pop	{r4, pc}

000df69c <_strtol_r>:
   df69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df6a0:	4680      	mov	r8, r0
   df6a2:	4840      	ldr	r0, [pc, #256]	; (df7a4 <_strtol_r+0x108>)
   df6a4:	f8d0 9000 	ldr.w	r9, [r0]
   df6a8:	460f      	mov	r7, r1
   df6aa:	463d      	mov	r5, r7
   df6ac:	f815 4b01 	ldrb.w	r4, [r5], #1
   df6b0:	eb09 0004 	add.w	r0, r9, r4
   df6b4:	7840      	ldrb	r0, [r0, #1]
   df6b6:	f000 0008 	and.w	r0, r0, #8
   df6ba:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   df6be:	b108      	cbz	r0, df6c4 <_strtol_r+0x28>
   df6c0:	462f      	mov	r7, r5
   df6c2:	e7f2      	b.n	df6aa <_strtol_r+0xe>
   df6c4:	2c2d      	cmp	r4, #45	; 0x2d
   df6c6:	d103      	bne.n	df6d0 <_strtol_r+0x34>
   df6c8:	1cbd      	adds	r5, r7, #2
   df6ca:	787c      	ldrb	r4, [r7, #1]
   df6cc:	2601      	movs	r6, #1
   df6ce:	e003      	b.n	df6d8 <_strtol_r+0x3c>
   df6d0:	2c2b      	cmp	r4, #43	; 0x2b
   df6d2:	bf04      	itt	eq
   df6d4:	787c      	ldrbeq	r4, [r7, #1]
   df6d6:	1cbd      	addeq	r5, r7, #2
   df6d8:	b113      	cbz	r3, df6e0 <_strtol_r+0x44>
   df6da:	2b10      	cmp	r3, #16
   df6dc:	d10a      	bne.n	df6f4 <_strtol_r+0x58>
   df6de:	e05b      	b.n	df798 <_strtol_r+0xfc>
   df6e0:	2c30      	cmp	r4, #48	; 0x30
   df6e2:	d157      	bne.n	df794 <_strtol_r+0xf8>
   df6e4:	7828      	ldrb	r0, [r5, #0]
   df6e6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   df6ea:	2858      	cmp	r0, #88	; 0x58
   df6ec:	d14d      	bne.n	df78a <_strtol_r+0xee>
   df6ee:	786c      	ldrb	r4, [r5, #1]
   df6f0:	2310      	movs	r3, #16
   df6f2:	3502      	adds	r5, #2
   df6f4:	2e00      	cmp	r6, #0
   df6f6:	bf14      	ite	ne
   df6f8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   df6fc:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   df700:	2700      	movs	r7, #0
   df702:	fbbc faf3 	udiv	sl, ip, r3
   df706:	4638      	mov	r0, r7
   df708:	fb03 cc1a 	mls	ip, r3, sl, ip
   df70c:	eb09 0e04 	add.w	lr, r9, r4
   df710:	f89e e001 	ldrb.w	lr, [lr, #1]
   df714:	f01e 0f04 	tst.w	lr, #4
   df718:	d001      	beq.n	df71e <_strtol_r+0x82>
   df71a:	3c30      	subs	r4, #48	; 0x30
   df71c:	e00b      	b.n	df736 <_strtol_r+0x9a>
   df71e:	f01e 0e03 	ands.w	lr, lr, #3
   df722:	d01b      	beq.n	df75c <_strtol_r+0xc0>
   df724:	f1be 0f01 	cmp.w	lr, #1
   df728:	bf0c      	ite	eq
   df72a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   df72e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   df732:	ebce 0404 	rsb	r4, lr, r4
   df736:	42a3      	cmp	r3, r4
   df738:	dd10      	ble.n	df75c <_strtol_r+0xc0>
   df73a:	f1b7 3fff 	cmp.w	r7, #4294967295
   df73e:	d00a      	beq.n	df756 <_strtol_r+0xba>
   df740:	4550      	cmp	r0, sl
   df742:	d806      	bhi.n	df752 <_strtol_r+0xb6>
   df744:	d101      	bne.n	df74a <_strtol_r+0xae>
   df746:	4564      	cmp	r4, ip
   df748:	dc03      	bgt.n	df752 <_strtol_r+0xb6>
   df74a:	fb03 4000 	mla	r0, r3, r0, r4
   df74e:	2701      	movs	r7, #1
   df750:	e001      	b.n	df756 <_strtol_r+0xba>
   df752:	f04f 37ff 	mov.w	r7, #4294967295
   df756:	f815 4b01 	ldrb.w	r4, [r5], #1
   df75a:	e7d7      	b.n	df70c <_strtol_r+0x70>
   df75c:	1c7b      	adds	r3, r7, #1
   df75e:	d10c      	bne.n	df77a <_strtol_r+0xde>
   df760:	2e00      	cmp	r6, #0
   df762:	f04f 0322 	mov.w	r3, #34	; 0x22
   df766:	bf14      	ite	ne
   df768:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   df76c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   df770:	f8c8 3000 	str.w	r3, [r8]
   df774:	b92a      	cbnz	r2, df782 <_strtol_r+0xe6>
   df776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df77a:	b106      	cbz	r6, df77e <_strtol_r+0xe2>
   df77c:	4240      	negs	r0, r0
   df77e:	b172      	cbz	r2, df79e <_strtol_r+0x102>
   df780:	b107      	cbz	r7, df784 <_strtol_r+0xe8>
   df782:	1e69      	subs	r1, r5, #1
   df784:	6011      	str	r1, [r2, #0]
   df786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df78a:	2430      	movs	r4, #48	; 0x30
   df78c:	2b00      	cmp	r3, #0
   df78e:	d1b1      	bne.n	df6f4 <_strtol_r+0x58>
   df790:	2308      	movs	r3, #8
   df792:	e7af      	b.n	df6f4 <_strtol_r+0x58>
   df794:	230a      	movs	r3, #10
   df796:	e7ad      	b.n	df6f4 <_strtol_r+0x58>
   df798:	2c30      	cmp	r4, #48	; 0x30
   df79a:	d0a3      	beq.n	df6e4 <_strtol_r+0x48>
   df79c:	e7aa      	b.n	df6f4 <_strtol_r+0x58>
   df79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df7a2:	bf00      	nop
   df7a4:	2003bdc0 	.word	0x2003bdc0

000df7a8 <strtol>:
   df7a8:	4613      	mov	r3, r2
   df7aa:	460a      	mov	r2, r1
   df7ac:	4601      	mov	r1, r0
   df7ae:	4802      	ldr	r0, [pc, #8]	; (df7b8 <strtol+0x10>)
   df7b0:	6800      	ldr	r0, [r0, #0]
   df7b2:	f7ff bf73 	b.w	df69c <_strtol_r>
   df7b6:	bf00      	nop
   df7b8:	2003be24 	.word	0x2003be24

000df7bc <_strtoul_r>:
   df7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df7c0:	4680      	mov	r8, r0
   df7c2:	483c      	ldr	r0, [pc, #240]	; (df8b4 <_strtoul_r+0xf8>)
   df7c4:	f8d0 9000 	ldr.w	r9, [r0]
   df7c8:	460e      	mov	r6, r1
   df7ca:	4635      	mov	r5, r6
   df7cc:	f815 4b01 	ldrb.w	r4, [r5], #1
   df7d0:	eb09 0004 	add.w	r0, r9, r4
   df7d4:	7840      	ldrb	r0, [r0, #1]
   df7d6:	f000 0008 	and.w	r0, r0, #8
   df7da:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   df7de:	b108      	cbz	r0, df7e4 <_strtoul_r+0x28>
   df7e0:	462e      	mov	r6, r5
   df7e2:	e7f2      	b.n	df7ca <_strtoul_r+0xe>
   df7e4:	2c2d      	cmp	r4, #45	; 0x2d
   df7e6:	d103      	bne.n	df7f0 <_strtoul_r+0x34>
   df7e8:	1cb5      	adds	r5, r6, #2
   df7ea:	7874      	ldrb	r4, [r6, #1]
   df7ec:	2701      	movs	r7, #1
   df7ee:	e003      	b.n	df7f8 <_strtoul_r+0x3c>
   df7f0:	2c2b      	cmp	r4, #43	; 0x2b
   df7f2:	bf04      	itt	eq
   df7f4:	7874      	ldrbeq	r4, [r6, #1]
   df7f6:	1cb5      	addeq	r5, r6, #2
   df7f8:	b113      	cbz	r3, df800 <_strtoul_r+0x44>
   df7fa:	2b10      	cmp	r3, #16
   df7fc:	d10a      	bne.n	df814 <_strtoul_r+0x58>
   df7fe:	e053      	b.n	df8a8 <_strtoul_r+0xec>
   df800:	2c30      	cmp	r4, #48	; 0x30
   df802:	d14f      	bne.n	df8a4 <_strtoul_r+0xe8>
   df804:	7828      	ldrb	r0, [r5, #0]
   df806:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   df80a:	2858      	cmp	r0, #88	; 0x58
   df80c:	d145      	bne.n	df89a <_strtoul_r+0xde>
   df80e:	786c      	ldrb	r4, [r5, #1]
   df810:	2310      	movs	r3, #16
   df812:	3502      	adds	r5, #2
   df814:	f04f 3cff 	mov.w	ip, #4294967295
   df818:	2600      	movs	r6, #0
   df81a:	fbbc fcf3 	udiv	ip, ip, r3
   df81e:	fb03 fa0c 	mul.w	sl, r3, ip
   df822:	ea6f 0a0a 	mvn.w	sl, sl
   df826:	4630      	mov	r0, r6
   df828:	eb09 0e04 	add.w	lr, r9, r4
   df82c:	f89e e001 	ldrb.w	lr, [lr, #1]
   df830:	f01e 0f04 	tst.w	lr, #4
   df834:	d001      	beq.n	df83a <_strtoul_r+0x7e>
   df836:	3c30      	subs	r4, #48	; 0x30
   df838:	e00b      	b.n	df852 <_strtoul_r+0x96>
   df83a:	f01e 0e03 	ands.w	lr, lr, #3
   df83e:	d01a      	beq.n	df876 <_strtoul_r+0xba>
   df840:	f1be 0f01 	cmp.w	lr, #1
   df844:	bf0c      	ite	eq
   df846:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   df84a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   df84e:	ebce 0404 	rsb	r4, lr, r4
   df852:	42a3      	cmp	r3, r4
   df854:	dd0f      	ble.n	df876 <_strtoul_r+0xba>
   df856:	2e00      	cmp	r6, #0
   df858:	db08      	blt.n	df86c <_strtoul_r+0xb0>
   df85a:	4560      	cmp	r0, ip
   df85c:	d806      	bhi.n	df86c <_strtoul_r+0xb0>
   df85e:	d101      	bne.n	df864 <_strtoul_r+0xa8>
   df860:	4554      	cmp	r4, sl
   df862:	dc03      	bgt.n	df86c <_strtoul_r+0xb0>
   df864:	fb03 4000 	mla	r0, r3, r0, r4
   df868:	2601      	movs	r6, #1
   df86a:	e001      	b.n	df870 <_strtoul_r+0xb4>
   df86c:	f04f 36ff 	mov.w	r6, #4294967295
   df870:	f815 4b01 	ldrb.w	r4, [r5], #1
   df874:	e7d8      	b.n	df828 <_strtoul_r+0x6c>
   df876:	2e00      	cmp	r6, #0
   df878:	da07      	bge.n	df88a <_strtoul_r+0xce>
   df87a:	2322      	movs	r3, #34	; 0x22
   df87c:	f8c8 3000 	str.w	r3, [r8]
   df880:	f04f 30ff 	mov.w	r0, #4294967295
   df884:	b92a      	cbnz	r2, df892 <_strtoul_r+0xd6>
   df886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df88a:	b107      	cbz	r7, df88e <_strtoul_r+0xd2>
   df88c:	4240      	negs	r0, r0
   df88e:	b172      	cbz	r2, df8ae <_strtoul_r+0xf2>
   df890:	b106      	cbz	r6, df894 <_strtoul_r+0xd8>
   df892:	1e69      	subs	r1, r5, #1
   df894:	6011      	str	r1, [r2, #0]
   df896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df89a:	2430      	movs	r4, #48	; 0x30
   df89c:	2b00      	cmp	r3, #0
   df89e:	d1b9      	bne.n	df814 <_strtoul_r+0x58>
   df8a0:	2308      	movs	r3, #8
   df8a2:	e7b7      	b.n	df814 <_strtoul_r+0x58>
   df8a4:	230a      	movs	r3, #10
   df8a6:	e7b5      	b.n	df814 <_strtoul_r+0x58>
   df8a8:	2c30      	cmp	r4, #48	; 0x30
   df8aa:	d0ab      	beq.n	df804 <_strtoul_r+0x48>
   df8ac:	e7b2      	b.n	df814 <_strtoul_r+0x58>
   df8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df8b2:	bf00      	nop
   df8b4:	2003bdc0 	.word	0x2003bdc0

000df8b8 <strtoul>:
   df8b8:	4613      	mov	r3, r2
   df8ba:	460a      	mov	r2, r1
   df8bc:	4601      	mov	r1, r0
   df8be:	4802      	ldr	r0, [pc, #8]	; (df8c8 <strtoul+0x10>)
   df8c0:	6800      	ldr	r0, [r0, #0]
   df8c2:	f7ff bf7b 	b.w	df7bc <_strtoul_r>
   df8c6:	bf00      	nop
   df8c8:	2003be24 	.word	0x2003be24

000df8cc <__get_current_time_locale>:
   df8cc:	4b04      	ldr	r3, [pc, #16]	; (df8e0 <__get_current_time_locale+0x14>)
   df8ce:	4a05      	ldr	r2, [pc, #20]	; (df8e4 <__get_current_time_locale+0x18>)
   df8d0:	6818      	ldr	r0, [r3, #0]
   df8d2:	4b05      	ldr	r3, [pc, #20]	; (df8e8 <__get_current_time_locale+0x1c>)
   df8d4:	2800      	cmp	r0, #0
   df8d6:	bf14      	ite	ne
   df8d8:	4610      	movne	r0, r2
   df8da:	4618      	moveq	r0, r3
   df8dc:	4770      	bx	lr
   df8de:	bf00      	nop
   df8e0:	2003e6c8 	.word	0x2003e6c8
   df8e4:	2003e6cc 	.word	0x2003e6cc
   df8e8:	000e0dac 	.word	0x000e0dac

000df8ec <__tzcalc_limits>:
   df8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df8f0:	4604      	mov	r4, r0
   df8f2:	f000 fa87 	bl	dfe04 <__gettzinfo>
   df8f6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   df8fa:	429c      	cmp	r4, r3
   df8fc:	f340 8096 	ble.w	dfa2c <__tzcalc_limits+0x140>
   df900:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   df904:	18e3      	adds	r3, r4, r3
   df906:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   df90a:	109b      	asrs	r3, r3, #2
   df90c:	f240 156d 	movw	r5, #365	; 0x16d
   df910:	fb05 3502 	mla	r5, r5, r2, r3
   df914:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   df918:	f06f 0363 	mvn.w	r3, #99	; 0x63
   df91c:	fb92 f3f3 	sdiv	r3, r2, r3
   df920:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   df924:	442b      	add	r3, r5
   df926:	18a5      	adds	r5, r4, r2
   df928:	f44f 72c8 	mov.w	r2, #400	; 0x190
   df92c:	fb95 f5f2 	sdiv	r5, r5, r2
   df930:	441d      	add	r5, r3
   df932:	2364      	movs	r3, #100	; 0x64
   df934:	fb94 f7f2 	sdiv	r7, r4, r2
   df938:	fb94 f6f3 	sdiv	r6, r4, r3
   df93c:	fb02 4717 	mls	r7, r2, r7, r4
   df940:	fb03 4616 	mls	r6, r3, r6, r4
   df944:	f100 0338 	add.w	r3, r0, #56	; 0x38
   df948:	fab7 fe87 	clz	lr, r7
   df94c:	9301      	str	r3, [sp, #4]
   df94e:	f004 0303 	and.w	r3, r4, #3
   df952:	6044      	str	r4, [r0, #4]
   df954:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   df958:	4601      	mov	r1, r0
   df95a:	9300      	str	r3, [sp, #0]
   df95c:	f04f 0c07 	mov.w	ip, #7
   df960:	7a0b      	ldrb	r3, [r1, #8]
   df962:	2b4a      	cmp	r3, #74	; 0x4a
   df964:	d10e      	bne.n	df984 <__tzcalc_limits+0x98>
   df966:	694b      	ldr	r3, [r1, #20]
   df968:	9a00      	ldr	r2, [sp, #0]
   df96a:	18ec      	adds	r4, r5, r3
   df96c:	b902      	cbnz	r2, df970 <__tzcalc_limits+0x84>
   df96e:	b906      	cbnz	r6, df972 <__tzcalc_limits+0x86>
   df970:	b927      	cbnz	r7, df97c <__tzcalc_limits+0x90>
   df972:	2b3b      	cmp	r3, #59	; 0x3b
   df974:	bfd4      	ite	le
   df976:	2300      	movle	r3, #0
   df978:	2301      	movgt	r3, #1
   df97a:	e000      	b.n	df97e <__tzcalc_limits+0x92>
   df97c:	2300      	movs	r3, #0
   df97e:	4423      	add	r3, r4
   df980:	3b01      	subs	r3, #1
   df982:	e03f      	b.n	dfa04 <__tzcalc_limits+0x118>
   df984:	2b44      	cmp	r3, #68	; 0x44
   df986:	d102      	bne.n	df98e <__tzcalc_limits+0xa2>
   df988:	694b      	ldr	r3, [r1, #20]
   df98a:	442b      	add	r3, r5
   df98c:	e03a      	b.n	dfa04 <__tzcalc_limits+0x118>
   df98e:	9b00      	ldr	r3, [sp, #0]
   df990:	b92b      	cbnz	r3, df99e <__tzcalc_limits+0xb2>
   df992:	2e00      	cmp	r6, #0
   df994:	bf0c      	ite	eq
   df996:	46f0      	moveq	r8, lr
   df998:	f04f 0801 	movne.w	r8, #1
   df99c:	e000      	b.n	df9a0 <__tzcalc_limits+0xb4>
   df99e:	46f0      	mov	r8, lr
   df9a0:	4b24      	ldr	r3, [pc, #144]	; (dfa34 <__tzcalc_limits+0x148>)
   df9a2:	68cc      	ldr	r4, [r1, #12]
   df9a4:	2230      	movs	r2, #48	; 0x30
   df9a6:	fb02 3808 	mla	r8, r2, r8, r3
   df9aa:	f1a8 0a04 	sub.w	sl, r8, #4
   df9ae:	46a9      	mov	r9, r5
   df9b0:	2301      	movs	r3, #1
   df9b2:	42a3      	cmp	r3, r4
   df9b4:	da04      	bge.n	df9c0 <__tzcalc_limits+0xd4>
   df9b6:	f85a bf04 	ldr.w	fp, [sl, #4]!
   df9ba:	3301      	adds	r3, #1
   df9bc:	44d9      	add	r9, fp
   df9be:	e7f8      	b.n	df9b2 <__tzcalc_limits+0xc6>
   df9c0:	f109 0304 	add.w	r3, r9, #4
   df9c4:	fb93 fbfc 	sdiv	fp, r3, ip
   df9c8:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   df9cc:	2c01      	cmp	r4, #1
   df9ce:	ebca 0a03 	rsb	sl, sl, r3
   df9d2:	694b      	ldr	r3, [r1, #20]
   df9d4:	bfb8      	it	lt
   df9d6:	2401      	movlt	r4, #1
   df9d8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   df9dc:	ebb3 0a0a 	subs.w	sl, r3, sl
   df9e0:	690b      	ldr	r3, [r1, #16]
   df9e2:	f104 34ff 	add.w	r4, r4, #4294967295
   df9e6:	f103 33ff 	add.w	r3, r3, #4294967295
   df9ea:	bf48      	it	mi
   df9ec:	f10a 0a07 	addmi.w	sl, sl, #7
   df9f0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   df9f4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   df9f8:	4453      	add	r3, sl
   df9fa:	42a3      	cmp	r3, r4
   df9fc:	db01      	blt.n	dfa02 <__tzcalc_limits+0x116>
   df9fe:	3b07      	subs	r3, #7
   dfa00:	e7fb      	b.n	df9fa <__tzcalc_limits+0x10e>
   dfa02:	444b      	add	r3, r9
   dfa04:	698c      	ldr	r4, [r1, #24]
   dfa06:	4a0c      	ldr	r2, [pc, #48]	; (dfa38 <__tzcalc_limits+0x14c>)
   dfa08:	fb02 4303 	mla	r3, r2, r3, r4
   dfa0c:	6a0c      	ldr	r4, [r1, #32]
   dfa0e:	4423      	add	r3, r4
   dfa10:	f841 3f1c 	str.w	r3, [r1, #28]!
   dfa14:	9b01      	ldr	r3, [sp, #4]
   dfa16:	4299      	cmp	r1, r3
   dfa18:	d1a2      	bne.n	df960 <__tzcalc_limits+0x74>
   dfa1a:	69c3      	ldr	r3, [r0, #28]
   dfa1c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dfa1e:	4293      	cmp	r3, r2
   dfa20:	bfac      	ite	ge
   dfa22:	2300      	movge	r3, #0
   dfa24:	2301      	movlt	r3, #1
   dfa26:	6003      	str	r3, [r0, #0]
   dfa28:	2001      	movs	r0, #1
   dfa2a:	e000      	b.n	dfa2e <__tzcalc_limits+0x142>
   dfa2c:	2000      	movs	r0, #0
   dfa2e:	b003      	add	sp, #12
   dfa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfa34:	000e0bc4 	.word	0x000e0bc4
   dfa38:	00015180 	.word	0x00015180

000dfa3c <__tz_lock>:
   dfa3c:	4770      	bx	lr

000dfa3e <__tz_unlock>:
   dfa3e:	4770      	bx	lr

000dfa40 <_tzset_unlocked>:
   dfa40:	4b01      	ldr	r3, [pc, #4]	; (dfa48 <_tzset_unlocked+0x8>)
   dfa42:	6818      	ldr	r0, [r3, #0]
   dfa44:	f000 b802 	b.w	dfa4c <_tzset_unlocked_r>
   dfa48:	2003be24 	.word	0x2003be24

000dfa4c <_tzset_unlocked_r>:
   dfa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfa50:	b08d      	sub	sp, #52	; 0x34
   dfa52:	4607      	mov	r7, r0
   dfa54:	f000 f9d6 	bl	dfe04 <__gettzinfo>
   dfa58:	49b0      	ldr	r1, [pc, #704]	; (dfd1c <_tzset_unlocked_r+0x2d0>)
   dfa5a:	4eb1      	ldr	r6, [pc, #708]	; (dfd20 <_tzset_unlocked_r+0x2d4>)
   dfa5c:	4604      	mov	r4, r0
   dfa5e:	4638      	mov	r0, r7
   dfa60:	f000 f9c8 	bl	dfdf4 <_getenv_r>
   dfa64:	4605      	mov	r5, r0
   dfa66:	b960      	cbnz	r0, dfa82 <_tzset_unlocked_r+0x36>
   dfa68:	4bae      	ldr	r3, [pc, #696]	; (dfd24 <_tzset_unlocked_r+0x2d8>)
   dfa6a:	4aaf      	ldr	r2, [pc, #700]	; (dfd28 <_tzset_unlocked_r+0x2dc>)
   dfa6c:	6018      	str	r0, [r3, #0]
   dfa6e:	4baf      	ldr	r3, [pc, #700]	; (dfd2c <_tzset_unlocked_r+0x2e0>)
   dfa70:	6018      	str	r0, [r3, #0]
   dfa72:	4baf      	ldr	r3, [pc, #700]	; (dfd30 <_tzset_unlocked_r+0x2e4>)
   dfa74:	6830      	ldr	r0, [r6, #0]
   dfa76:	601a      	str	r2, [r3, #0]
   dfa78:	605a      	str	r2, [r3, #4]
   dfa7a:	f7f9 fed3 	bl	d9824 <free>
   dfa7e:	6035      	str	r5, [r6, #0]
   dfa80:	e148      	b.n	dfd14 <_tzset_unlocked_r+0x2c8>
   dfa82:	6831      	ldr	r1, [r6, #0]
   dfa84:	b979      	cbnz	r1, dfaa6 <_tzset_unlocked_r+0x5a>
   dfa86:	6830      	ldr	r0, [r6, #0]
   dfa88:	f7f9 fecc 	bl	d9824 <free>
   dfa8c:	4628      	mov	r0, r5
   dfa8e:	f7ff fdd5 	bl	df63c <strlen>
   dfa92:	1c41      	adds	r1, r0, #1
   dfa94:	4638      	mov	r0, r7
   dfa96:	f7f9 ff05 	bl	d98a4 <_malloc_r>
   dfa9a:	6030      	str	r0, [r6, #0]
   dfa9c:	b148      	cbz	r0, dfab2 <_tzset_unlocked_r+0x66>
   dfa9e:	4629      	mov	r1, r5
   dfaa0:	f7ff f894 	bl	debcc <strcpy>
   dfaa4:	e005      	b.n	dfab2 <_tzset_unlocked_r+0x66>
   dfaa6:	f7ff f887 	bl	debb8 <strcmp>
   dfaaa:	2800      	cmp	r0, #0
   dfaac:	f000 8132 	beq.w	dfd14 <_tzset_unlocked_r+0x2c8>
   dfab0:	e7e9      	b.n	dfa86 <_tzset_unlocked_r+0x3a>
   dfab2:	782b      	ldrb	r3, [r5, #0]
   dfab4:	4a9f      	ldr	r2, [pc, #636]	; (dfd34 <_tzset_unlocked_r+0x2e8>)
   dfab6:	49a0      	ldr	r1, [pc, #640]	; (dfd38 <_tzset_unlocked_r+0x2ec>)
   dfab8:	2b3a      	cmp	r3, #58	; 0x3a
   dfaba:	bf08      	it	eq
   dfabc:	3501      	addeq	r5, #1
   dfabe:	ae0a      	add	r6, sp, #40	; 0x28
   dfac0:	4633      	mov	r3, r6
   dfac2:	4628      	mov	r0, r5
   dfac4:	f7f9 fec6 	bl	d9854 <siscanf>
   dfac8:	2800      	cmp	r0, #0
   dfaca:	f340 8123 	ble.w	dfd14 <_tzset_unlocked_r+0x2c8>
   dface:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dfad0:	18ef      	adds	r7, r5, r3
   dfad2:	5ceb      	ldrb	r3, [r5, r3]
   dfad4:	2b2d      	cmp	r3, #45	; 0x2d
   dfad6:	d103      	bne.n	dfae0 <_tzset_unlocked_r+0x94>
   dfad8:	3701      	adds	r7, #1
   dfada:	f04f 35ff 	mov.w	r5, #4294967295
   dfade:	e003      	b.n	dfae8 <_tzset_unlocked_r+0x9c>
   dfae0:	2b2b      	cmp	r3, #43	; 0x2b
   dfae2:	bf08      	it	eq
   dfae4:	3701      	addeq	r7, #1
   dfae6:	2501      	movs	r5, #1
   dfae8:	f10d 0a20 	add.w	sl, sp, #32
   dfaec:	f10d 0b1e 	add.w	fp, sp, #30
   dfaf0:	f04f 0800 	mov.w	r8, #0
   dfaf4:	9603      	str	r6, [sp, #12]
   dfaf6:	f8cd a008 	str.w	sl, [sp, #8]
   dfafa:	9601      	str	r6, [sp, #4]
   dfafc:	f8cd b000 	str.w	fp, [sp]
   dfb00:	4633      	mov	r3, r6
   dfb02:	aa07      	add	r2, sp, #28
   dfb04:	498d      	ldr	r1, [pc, #564]	; (dfd3c <_tzset_unlocked_r+0x2f0>)
   dfb06:	f8ad 801e 	strh.w	r8, [sp, #30]
   dfb0a:	4638      	mov	r0, r7
   dfb0c:	f8ad 8020 	strh.w	r8, [sp, #32]
   dfb10:	f7f9 fea0 	bl	d9854 <siscanf>
   dfb14:	4540      	cmp	r0, r8
   dfb16:	f340 80fd 	ble.w	dfd14 <_tzset_unlocked_r+0x2c8>
   dfb1a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dfb1e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dfb22:	f8df 9224 	ldr.w	r9, [pc, #548]	; dfd48 <_tzset_unlocked_r+0x2fc>
   dfb26:	213c      	movs	r1, #60	; 0x3c
   dfb28:	fb01 3302 	mla	r3, r1, r2, r3
   dfb2c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dfb30:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dfb34:	fb01 3302 	mla	r3, r1, r2, r3
   dfb38:	435d      	muls	r5, r3
   dfb3a:	6225      	str	r5, [r4, #32]
   dfb3c:	4d7c      	ldr	r5, [pc, #496]	; (dfd30 <_tzset_unlocked_r+0x2e4>)
   dfb3e:	4b7d      	ldr	r3, [pc, #500]	; (dfd34 <_tzset_unlocked_r+0x2e8>)
   dfb40:	602b      	str	r3, [r5, #0]
   dfb42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dfb44:	497c      	ldr	r1, [pc, #496]	; (dfd38 <_tzset_unlocked_r+0x2ec>)
   dfb46:	441f      	add	r7, r3
   dfb48:	464a      	mov	r2, r9
   dfb4a:	4633      	mov	r3, r6
   dfb4c:	4638      	mov	r0, r7
   dfb4e:	f7f9 fe81 	bl	d9854 <siscanf>
   dfb52:	4540      	cmp	r0, r8
   dfb54:	dc08      	bgt.n	dfb68 <_tzset_unlocked_r+0x11c>
   dfb56:	682b      	ldr	r3, [r5, #0]
   dfb58:	606b      	str	r3, [r5, #4]
   dfb5a:	4b72      	ldr	r3, [pc, #456]	; (dfd24 <_tzset_unlocked_r+0x2d8>)
   dfb5c:	6a22      	ldr	r2, [r4, #32]
   dfb5e:	601a      	str	r2, [r3, #0]
   dfb60:	4b72      	ldr	r3, [pc, #456]	; (dfd2c <_tzset_unlocked_r+0x2e0>)
   dfb62:	f8c3 8000 	str.w	r8, [r3]
   dfb66:	e0d5      	b.n	dfd14 <_tzset_unlocked_r+0x2c8>
   dfb68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dfb6a:	f8c5 9004 	str.w	r9, [r5, #4]
   dfb6e:	18fd      	adds	r5, r7, r3
   dfb70:	5cfb      	ldrb	r3, [r7, r3]
   dfb72:	2b2d      	cmp	r3, #45	; 0x2d
   dfb74:	d103      	bne.n	dfb7e <_tzset_unlocked_r+0x132>
   dfb76:	3501      	adds	r5, #1
   dfb78:	f04f 37ff 	mov.w	r7, #4294967295
   dfb7c:	e003      	b.n	dfb86 <_tzset_unlocked_r+0x13a>
   dfb7e:	2b2b      	cmp	r3, #43	; 0x2b
   dfb80:	bf08      	it	eq
   dfb82:	3501      	addeq	r5, #1
   dfb84:	2701      	movs	r7, #1
   dfb86:	2300      	movs	r3, #0
   dfb88:	f8ad 301c 	strh.w	r3, [sp, #28]
   dfb8c:	f8ad 301e 	strh.w	r3, [sp, #30]
   dfb90:	f8ad 3020 	strh.w	r3, [sp, #32]
   dfb94:	930a      	str	r3, [sp, #40]	; 0x28
   dfb96:	9603      	str	r6, [sp, #12]
   dfb98:	f8cd a008 	str.w	sl, [sp, #8]
   dfb9c:	9601      	str	r6, [sp, #4]
   dfb9e:	f8cd b000 	str.w	fp, [sp]
   dfba2:	4633      	mov	r3, r6
   dfba4:	aa07      	add	r2, sp, #28
   dfba6:	4965      	ldr	r1, [pc, #404]	; (dfd3c <_tzset_unlocked_r+0x2f0>)
   dfba8:	4628      	mov	r0, r5
   dfbaa:	f7f9 fe53 	bl	d9854 <siscanf>
   dfbae:	2800      	cmp	r0, #0
   dfbb0:	dc04      	bgt.n	dfbbc <_tzset_unlocked_r+0x170>
   dfbb2:	6a23      	ldr	r3, [r4, #32]
   dfbb4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dfbb8:	63e3      	str	r3, [r4, #60]	; 0x3c
   dfbba:	e00e      	b.n	dfbda <_tzset_unlocked_r+0x18e>
   dfbbc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dfbc0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dfbc4:	213c      	movs	r1, #60	; 0x3c
   dfbc6:	fb01 3302 	mla	r3, r1, r2, r3
   dfbca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dfbce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dfbd2:	fb01 3302 	mla	r3, r1, r2, r3
   dfbd6:	435f      	muls	r7, r3
   dfbd8:	63e7      	str	r7, [r4, #60]	; 0x3c
   dfbda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dfbdc:	4627      	mov	r7, r4
   dfbde:	441d      	add	r5, r3
   dfbe0:	f04f 0900 	mov.w	r9, #0
   dfbe4:	782b      	ldrb	r3, [r5, #0]
   dfbe6:	2b2c      	cmp	r3, #44	; 0x2c
   dfbe8:	bf08      	it	eq
   dfbea:	3501      	addeq	r5, #1
   dfbec:	f895 8000 	ldrb.w	r8, [r5]
   dfbf0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dfbf4:	d126      	bne.n	dfc44 <_tzset_unlocked_r+0x1f8>
   dfbf6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dfbfa:	9302      	str	r3, [sp, #8]
   dfbfc:	ab09      	add	r3, sp, #36	; 0x24
   dfbfe:	9300      	str	r3, [sp, #0]
   dfc00:	9603      	str	r6, [sp, #12]
   dfc02:	9601      	str	r6, [sp, #4]
   dfc04:	4633      	mov	r3, r6
   dfc06:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dfc0a:	494d      	ldr	r1, [pc, #308]	; (dfd40 <_tzset_unlocked_r+0x2f4>)
   dfc0c:	4628      	mov	r0, r5
   dfc0e:	f7f9 fe21 	bl	d9854 <siscanf>
   dfc12:	2803      	cmp	r0, #3
   dfc14:	d17e      	bne.n	dfd14 <_tzset_unlocked_r+0x2c8>
   dfc16:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dfc1a:	1e4b      	subs	r3, r1, #1
   dfc1c:	2b0b      	cmp	r3, #11
   dfc1e:	d879      	bhi.n	dfd14 <_tzset_unlocked_r+0x2c8>
   dfc20:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dfc24:	1e53      	subs	r3, r2, #1
   dfc26:	2b04      	cmp	r3, #4
   dfc28:	d874      	bhi.n	dfd14 <_tzset_unlocked_r+0x2c8>
   dfc2a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dfc2e:	2b06      	cmp	r3, #6
   dfc30:	d870      	bhi.n	dfd14 <_tzset_unlocked_r+0x2c8>
   dfc32:	f887 8008 	strb.w	r8, [r7, #8]
   dfc36:	60f9      	str	r1, [r7, #12]
   dfc38:	613a      	str	r2, [r7, #16]
   dfc3a:	617b      	str	r3, [r7, #20]
   dfc3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dfc3e:	eb05 0803 	add.w	r8, r5, r3
   dfc42:	e02a      	b.n	dfc9a <_tzset_unlocked_r+0x24e>
   dfc44:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dfc48:	bf06      	itte	eq
   dfc4a:	3501      	addeq	r5, #1
   dfc4c:	4643      	moveq	r3, r8
   dfc4e:	2344      	movne	r3, #68	; 0x44
   dfc50:	220a      	movs	r2, #10
   dfc52:	a90b      	add	r1, sp, #44	; 0x2c
   dfc54:	4628      	mov	r0, r5
   dfc56:	9305      	str	r3, [sp, #20]
   dfc58:	f7ff fe2e 	bl	df8b8 <strtoul>
   dfc5c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dfc60:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dfc64:	4545      	cmp	r5, r8
   dfc66:	9b05      	ldr	r3, [sp, #20]
   dfc68:	d114      	bne.n	dfc94 <_tzset_unlocked_r+0x248>
   dfc6a:	234d      	movs	r3, #77	; 0x4d
   dfc6c:	f1b9 0f00 	cmp.w	r9, #0
   dfc70:	d107      	bne.n	dfc82 <_tzset_unlocked_r+0x236>
   dfc72:	7223      	strb	r3, [r4, #8]
   dfc74:	2303      	movs	r3, #3
   dfc76:	60e3      	str	r3, [r4, #12]
   dfc78:	2302      	movs	r3, #2
   dfc7a:	6123      	str	r3, [r4, #16]
   dfc7c:	f8c4 9014 	str.w	r9, [r4, #20]
   dfc80:	e00b      	b.n	dfc9a <_tzset_unlocked_r+0x24e>
   dfc82:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dfc86:	230b      	movs	r3, #11
   dfc88:	62a3      	str	r3, [r4, #40]	; 0x28
   dfc8a:	2301      	movs	r3, #1
   dfc8c:	62e3      	str	r3, [r4, #44]	; 0x2c
   dfc8e:	2300      	movs	r3, #0
   dfc90:	6323      	str	r3, [r4, #48]	; 0x30
   dfc92:	e002      	b.n	dfc9a <_tzset_unlocked_r+0x24e>
   dfc94:	b280      	uxth	r0, r0
   dfc96:	723b      	strb	r3, [r7, #8]
   dfc98:	6178      	str	r0, [r7, #20]
   dfc9a:	2302      	movs	r3, #2
   dfc9c:	f8ad 301c 	strh.w	r3, [sp, #28]
   dfca0:	2300      	movs	r3, #0
   dfca2:	f8ad 301e 	strh.w	r3, [sp, #30]
   dfca6:	f8ad 3020 	strh.w	r3, [sp, #32]
   dfcaa:	930a      	str	r3, [sp, #40]	; 0x28
   dfcac:	f898 3000 	ldrb.w	r3, [r8]
   dfcb0:	2b2f      	cmp	r3, #47	; 0x2f
   dfcb2:	d10b      	bne.n	dfccc <_tzset_unlocked_r+0x280>
   dfcb4:	9603      	str	r6, [sp, #12]
   dfcb6:	f8cd a008 	str.w	sl, [sp, #8]
   dfcba:	9601      	str	r6, [sp, #4]
   dfcbc:	f8cd b000 	str.w	fp, [sp]
   dfcc0:	4633      	mov	r3, r6
   dfcc2:	aa07      	add	r2, sp, #28
   dfcc4:	491f      	ldr	r1, [pc, #124]	; (dfd44 <_tzset_unlocked_r+0x2f8>)
   dfcc6:	4640      	mov	r0, r8
   dfcc8:	f7f9 fdc4 	bl	d9854 <siscanf>
   dfccc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dfcd0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dfcd4:	213c      	movs	r1, #60	; 0x3c
   dfcd6:	fb01 3302 	mla	r3, r1, r2, r3
   dfcda:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dfcde:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dfce2:	fb01 3302 	mla	r3, r1, r2, r3
   dfce6:	61bb      	str	r3, [r7, #24]
   dfce8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dfcea:	f109 0901 	add.w	r9, r9, #1
   dfcee:	f1b9 0f02 	cmp.w	r9, #2
   dfcf2:	4445      	add	r5, r8
   dfcf4:	f107 071c 	add.w	r7, r7, #28
   dfcf8:	f47f af74 	bne.w	dfbe4 <_tzset_unlocked_r+0x198>
   dfcfc:	6860      	ldr	r0, [r4, #4]
   dfcfe:	f7ff fdf5 	bl	df8ec <__tzcalc_limits>
   dfd02:	4b08      	ldr	r3, [pc, #32]	; (dfd24 <_tzset_unlocked_r+0x2d8>)
   dfd04:	6a22      	ldr	r2, [r4, #32]
   dfd06:	601a      	str	r2, [r3, #0]
   dfd08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dfd0a:	1a9b      	subs	r3, r3, r2
   dfd0c:	4a07      	ldr	r2, [pc, #28]	; (dfd2c <_tzset_unlocked_r+0x2e0>)
   dfd0e:	bf18      	it	ne
   dfd10:	2301      	movne	r3, #1
   dfd12:	6013      	str	r3, [r2, #0]
   dfd14:	b00d      	add	sp, #52	; 0x34
   dfd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfd1a:	bf00      	nop
   dfd1c:	000e0ea8 	.word	0x000e0ea8
   dfd20:	2003e7e0 	.word	0x2003e7e0
   dfd24:	2003e7e8 	.word	0x2003e7e8
   dfd28:	000e0eab 	.word	0x000e0eab
   dfd2c:	2003e7e4 	.word	0x2003e7e4
   dfd30:	2003be28 	.word	0x2003be28
   dfd34:	2003e7d3 	.word	0x2003e7d3
   dfd38:	000e0eaf 	.word	0x000e0eaf
   dfd3c:	000e0ed2 	.word	0x000e0ed2
   dfd40:	000e0ebe 	.word	0x000e0ebe
   dfd44:	000e0ed1 	.word	0x000e0ed1
   dfd48:	2003e7c8 	.word	0x2003e7c8

000dfd4c <abs>:
   dfd4c:	2800      	cmp	r0, #0
   dfd4e:	bfb8      	it	lt
   dfd50:	4240      	neglt	r0, r0
   dfd52:	4770      	bx	lr

000dfd54 <div>:
   dfd54:	2900      	cmp	r1, #0
   dfd56:	b510      	push	{r4, lr}
   dfd58:	fb91 f4f2 	sdiv	r4, r1, r2
   dfd5c:	fb02 1314 	mls	r3, r2, r4, r1
   dfd60:	db04      	blt.n	dfd6c <div+0x18>
   dfd62:	2b00      	cmp	r3, #0
   dfd64:	da07      	bge.n	dfd76 <div+0x22>
   dfd66:	3401      	adds	r4, #1
   dfd68:	1a9b      	subs	r3, r3, r2
   dfd6a:	e004      	b.n	dfd76 <div+0x22>
   dfd6c:	2b00      	cmp	r3, #0
   dfd6e:	bfc4      	itt	gt
   dfd70:	f104 34ff 	addgt.w	r4, r4, #4294967295
   dfd74:	189b      	addgt	r3, r3, r2
   dfd76:	6004      	str	r4, [r0, #0]
   dfd78:	6043      	str	r3, [r0, #4]
   dfd7a:	bd10      	pop	{r4, pc}

000dfd7c <_findenv_r>:
   dfd7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfd80:	4607      	mov	r7, r0
   dfd82:	468b      	mov	fp, r1
   dfd84:	4690      	mov	r8, r2
   dfd86:	f000 f8dd 	bl	dff44 <__env_lock>
   dfd8a:	4b19      	ldr	r3, [pc, #100]	; (dfdf0 <_findenv_r+0x74>)
   dfd8c:	681d      	ldr	r5, [r3, #0]
   dfd8e:	469a      	mov	sl, r3
   dfd90:	b13d      	cbz	r5, dfda2 <_findenv_r+0x26>
   dfd92:	465c      	mov	r4, fp
   dfd94:	4623      	mov	r3, r4
   dfd96:	f813 2b01 	ldrb.w	r2, [r3], #1
   dfd9a:	b142      	cbz	r2, dfdae <_findenv_r+0x32>
   dfd9c:	2a3d      	cmp	r2, #61	; 0x3d
   dfd9e:	461c      	mov	r4, r3
   dfda0:	d1f8      	bne.n	dfd94 <_findenv_r+0x18>
   dfda2:	4638      	mov	r0, r7
   dfda4:	f000 f8cf 	bl	dff46 <__env_unlock>
   dfda8:	2000      	movs	r0, #0
   dfdaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfdae:	ebcb 0404 	rsb	r4, fp, r4
   dfdb2:	46a9      	mov	r9, r5
   dfdb4:	f859 0b04 	ldr.w	r0, [r9], #4
   dfdb8:	2800      	cmp	r0, #0
   dfdba:	d0f2      	beq.n	dfda2 <_findenv_r+0x26>
   dfdbc:	4622      	mov	r2, r4
   dfdbe:	4659      	mov	r1, fp
   dfdc0:	f7ff fc44 	bl	df64c <strncmp>
   dfdc4:	b988      	cbnz	r0, dfdea <_findenv_r+0x6e>
   dfdc6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dfdca:	191e      	adds	r6, r3, r4
   dfdcc:	5d1b      	ldrb	r3, [r3, r4]
   dfdce:	2b3d      	cmp	r3, #61	; 0x3d
   dfdd0:	d10b      	bne.n	dfdea <_findenv_r+0x6e>
   dfdd2:	f8da 3000 	ldr.w	r3, [sl]
   dfdd6:	1aed      	subs	r5, r5, r3
   dfdd8:	10ad      	asrs	r5, r5, #2
   dfdda:	4638      	mov	r0, r7
   dfddc:	f8c8 5000 	str.w	r5, [r8]
   dfde0:	f000 f8b1 	bl	dff46 <__env_unlock>
   dfde4:	1c70      	adds	r0, r6, #1
   dfde6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfdea:	464d      	mov	r5, r9
   dfdec:	e7e1      	b.n	dfdb2 <_findenv_r+0x36>
   dfdee:	bf00      	nop
   dfdf0:	2003be70 	.word	0x2003be70

000dfdf4 <_getenv_r>:
   dfdf4:	b507      	push	{r0, r1, r2, lr}
   dfdf6:	aa01      	add	r2, sp, #4
   dfdf8:	f7ff ffc0 	bl	dfd7c <_findenv_r>
   dfdfc:	b003      	add	sp, #12
   dfdfe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dfe04 <__gettzinfo>:
   dfe04:	4800      	ldr	r0, [pc, #0]	; (dfe08 <__gettzinfo+0x4>)
   dfe06:	4770      	bx	lr
   dfe08:	2003be30 	.word	0x2003be30

000dfe0c <gmtime_r>:
   dfe0c:	6802      	ldr	r2, [r0, #0]
   dfe0e:	4b47      	ldr	r3, [pc, #284]	; (dff2c <gmtime_r+0x120>)
   dfe10:	b5f0      	push	{r4, r5, r6, r7, lr}
   dfe12:	fb92 f4f3 	sdiv	r4, r2, r3
   dfe16:	fb03 2214 	mls	r2, r3, r4, r2
   dfe1a:	2a00      	cmp	r2, #0
   dfe1c:	bfbc      	itt	lt
   dfe1e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dfe22:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dfe26:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dfe2a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dfe2e:	fb92 f3f0 	sdiv	r3, r2, r0
   dfe32:	fb00 2213 	mls	r2, r0, r3, r2
   dfe36:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dfe3a:	bfac      	ite	ge
   dfe3c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dfe40:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dfe44:	608b      	str	r3, [r1, #8]
   dfe46:	fb92 f3f0 	sdiv	r3, r2, r0
   dfe4a:	fb00 2213 	mls	r2, r0, r3, r2
   dfe4e:	604b      	str	r3, [r1, #4]
   dfe50:	600a      	str	r2, [r1, #0]
   dfe52:	2307      	movs	r3, #7
   dfe54:	1ce2      	adds	r2, r4, #3
   dfe56:	fb92 f3f3 	sdiv	r3, r2, r3
   dfe5a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dfe5e:	1ad3      	subs	r3, r2, r3
   dfe60:	618b      	str	r3, [r1, #24]
   dfe62:	4b33      	ldr	r3, [pc, #204]	; (dff30 <gmtime_r+0x124>)
   dfe64:	4d33      	ldr	r5, [pc, #204]	; (dff34 <gmtime_r+0x128>)
   dfe66:	fb94 f5f5 	sdiv	r5, r4, r5
   dfe6a:	fb03 4405 	mla	r4, r3, r5, r4
   dfe6e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dfe72:	fbb4 f2f2 	udiv	r2, r4, r2
   dfe76:	4422      	add	r2, r4
   dfe78:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dfe7c:	fbb4 f3f7 	udiv	r3, r4, r7
   dfe80:	1ad2      	subs	r2, r2, r3
   dfe82:	482d      	ldr	r0, [pc, #180]	; (dff38 <gmtime_r+0x12c>)
   dfe84:	fbb4 f0f0 	udiv	r0, r4, r0
   dfe88:	f648 6694 	movw	r6, #36500	; 0x8e94
   dfe8c:	1a13      	subs	r3, r2, r0
   dfe8e:	fbb3 f6f6 	udiv	r6, r3, r6
   dfe92:	4434      	add	r4, r6
   dfe94:	f240 126d 	movw	r2, #365	; 0x16d
   dfe98:	fbb3 f0f2 	udiv	r0, r3, r2
   dfe9c:	fbb3 f3f7 	udiv	r3, r3, r7
   dfea0:	1ae3      	subs	r3, r4, r3
   dfea2:	fb02 3310 	mls	r3, r2, r0, r3
   dfea6:	2499      	movs	r4, #153	; 0x99
   dfea8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dfeac:	3202      	adds	r2, #2
   dfeae:	fbb2 f2f4 	udiv	r2, r2, r4
   dfeb2:	2a0a      	cmp	r2, #10
   dfeb4:	fb04 f402 	mul.w	r4, r4, r2
   dfeb8:	f104 0602 	add.w	r6, r4, #2
   dfebc:	f04f 0405 	mov.w	r4, #5
   dfec0:	fbb6 f4f4 	udiv	r4, r6, r4
   dfec4:	bf34      	ite	cc
   dfec6:	2602      	movcc	r6, #2
   dfec8:	f06f 0609 	mvncs.w	r6, #9
   dfecc:	4416      	add	r6, r2
   dfece:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dfed2:	fb02 0505 	mla	r5, r2, r5, r0
   dfed6:	1c5f      	adds	r7, r3, #1
   dfed8:	2e01      	cmp	r6, #1
   dfeda:	bf98      	it	ls
   dfedc:	3501      	addls	r5, #1
   dfede:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dfee2:	eba7 0704 	sub.w	r7, r7, r4
   dfee6:	d302      	bcc.n	dfeee <gmtime_r+0xe2>
   dfee8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dfeec:	e014      	b.n	dff18 <gmtime_r+0x10c>
   dfeee:	0782      	lsls	r2, r0, #30
   dfef0:	d105      	bne.n	dfefe <gmtime_r+0xf2>
   dfef2:	2464      	movs	r4, #100	; 0x64
   dfef4:	fbb0 f2f4 	udiv	r2, r0, r4
   dfef8:	fb04 0212 	mls	r2, r4, r2, r0
   dfefc:	b94a      	cbnz	r2, dff12 <gmtime_r+0x106>
   dfefe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dff02:	fbb0 f4f2 	udiv	r4, r0, r2
   dff06:	fb02 0014 	mls	r0, r2, r4, r0
   dff0a:	fab0 f280 	clz	r2, r0
   dff0e:	0952      	lsrs	r2, r2, #5
   dff10:	e000      	b.n	dff14 <gmtime_r+0x108>
   dff12:	2201      	movs	r2, #1
   dff14:	333b      	adds	r3, #59	; 0x3b
   dff16:	441a      	add	r2, r3
   dff18:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dff1c:	2300      	movs	r3, #0
   dff1e:	61ca      	str	r2, [r1, #28]
   dff20:	614d      	str	r5, [r1, #20]
   dff22:	610e      	str	r6, [r1, #16]
   dff24:	60cf      	str	r7, [r1, #12]
   dff26:	620b      	str	r3, [r1, #32]
   dff28:	4608      	mov	r0, r1
   dff2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dff2c:	00015180 	.word	0x00015180
   dff30:	fffdc54f 	.word	0xfffdc54f
   dff34:	00023ab1 	.word	0x00023ab1
   dff38:	00023ab0 	.word	0x00023ab0

000dff3c <labs>:
   dff3c:	2800      	cmp	r0, #0
   dff3e:	bfb8      	it	lt
   dff40:	4240      	neglt	r0, r0
   dff42:	4770      	bx	lr

000dff44 <__env_lock>:
   dff44:	4770      	bx	lr

000dff46 <__env_unlock>:
   dff46:	4770      	bx	lr

000dff48 <dynalib_user>:
   dff48:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dff58:	0000 0000                                   ....

000dff5c <_ZTVN8particle13__SPISettingsE>:
	...
   dff64:	41d9 000d                                   .A..

000dff68 <_ZTV5Timer>:
	...
   dff70:	4375 000d 43bd 000d 41cb 000d               uC...C...A..

000dff7c <_ZTVN8particle9LEDStatusE>:
	...
   dff84:	42a5 000d 42c1 000d 40bb 000d 6564 6166     .B...B...@..defa
   dff94:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   dffa4:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   dffb4:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   dffc4:	7325 6c25 2075 7325 4d20 444f 2545 3e64     %s%lu %s MODE%d>
   dffd4:	4400 7665 6369 2065 2000 4f4e 2054 7461     .Device . NOT at
   dffe4:	2000 6461 7264 7365 3a73 7830 5300 6163     . address:0x.Sca
   dfff4:	6e6e 6e69 2e67 2e2e 5500 6b6e 6f6e 6e77     nning....Unknown
   e0004:	6520 7272 726f 6120 2074 6461 7264 7365      error at addres
   e0014:	2073 7830 3000 4e00 206f 3249 2043 6564     s 0x.0.No I2C de
   e0024:	6976 6563 2073 6f66 6e75 0a64 6400 6e6f     vices found..don
   e0034:	0a65 4100 7474 6d65 7470 6e69 2067 6f74     e..Attempting to
   e0044:	6320 6e6f 656e 7463 6320 6c65 756c 616c      connect cellula
   e0054:	2e72 2e2e 4300 6c65 756c 616c 2072 6f6e     r....Cellular no
   e0064:	2074 6572 6461 2079 202d 6572 6573 7474     t ready - resett
   e0074:	6e69 0067 6543 6c6c 6c75 7261 7220 6165     ing.Cellular rea
   e0084:	7964 4100 7474 6d65 7470 6e69 2067 6f74     dy.Attempting to
   e0094:	6320 6e6f 656e 7463 7420 206f 6150 7472      connect to Part
   e00a4:	6369 656c 2e2e 002e 6150 7472 6369 656c     icle....Particle
   e00b4:	6e20 746f 6320 6e6f 656e 7463 6465 2d20      not connected -
   e00c4:	7220 7365 7465 6974 676e 5000 7261 6974      resetting.Parti
   e00d4:	6c63 2065 6f63 6e6e 6365 6574 0064 6e75     cle connected.un
   e00e4:	7869 6954 656d 203a 6425 202c 6977 646e     ixTime: %d, wind
   e00f4:	6d5f 7465 7265 7073 3a68 2520 312e 2066     _metersph: %.1f 
   e0104:	686d 202c 6172 6e69 203a 2e25 6633 6d20     mh, rain: %.3f m
   e0114:	2c6d 7720 6e69 4464 6765 6572 7365 203a     m, windDegrees: 
   e0124:	6425 c220 2cb0 6120 7269 203a 2e25 6631     %d .., air: %.1f
   e0134:	4b20 682c 6d75 6469 203a 6425 2520 2025      K,humid: %d %% 
   e0144:	202c 6162 6f72 203a 2e25 6631 6820 6150     , baro: %.1f hPa
   e0154:	202c 696d 696c 203a 6425 6d20 0056 6572     , mili: %d mV.re
   e0164:	6461 5479 476f 7465 6552 6573 4174 646e     adyToGetResetAnd
   e0174:	6553 646e 6553 736e 726f 0073 007c 6143     SendSensors.|.Ca
   e0184:	7470 7275 6e69 2067 6573 736e 726f 0073     pturing sensors.
   e0194:	6163 7470 7275 0065 6954 656d 4e20 544f     capture.Time NOT
   e01a4:	7320 6e79 6563 0064 6576 7372 6f69 006e      synced.version.
   e01b4:	6564 6976 6563 7473 7461 7375 5000 756c     devicestatus.Plu
   e01c4:	2067 6874 2065 6564 6976 6563 6920 746e     g the device int
   e01d4:	206f 6874 2065 6f49 2054 6f4e 6564 4400     o the IoT Node.D
   e01e4:	7665 6369 2065 7369 6e20 746f 7020 756c     evice is not plu
   e01f4:	6767 6465 6920 746e 206f 6874 2065 6f49     gged into the Io
   e0204:	4e54 646f 0065 6552 6573 7474 6e69 2067     TNode.Resetting 
   e0214:	6e69 3120 2030 6573 6f63 646e 0073 5452     in 10 seconds.RT
   e0224:	2043 7973 636e 6527 2064 6977 6874 6320     C sync'ed with c
   e0234:	6f6c 6475 5200 4354 6e20 746f 7320 6e79     loud.RTC not syn
   e0244:	2763 6465 7720 7469 2068 6c63 756f 0064     c'ed with cloud.
   e0254:	6e55 6c70 6775 6567 0064 5452 0043 7845     Unplugged.RTC.Ex
   e0264:	0070 5452 2043 4545 5250 4d4f 4100 4344     p.RTC EEPROM.ADC
   e0274:	4600 4152 004d 4d41 3332 3531 4d00 4c50     .FRAM.AM2315.MPL
   e0284:	3133 3531 5400 4c53 3532 3139 0000 0000     3115.TSL2591....

000e0294 <_ZL15firmwareVersion>:
   e0294:	0000 0000                                   ....

000e0298 <_ZTV4File>:
	...
   e02a0:	50e9 000d 5135 000d 511d 000d 5117 000d     .P..5Q...Q...Q..
   e02b0:	50cd 000d 50f7 000d 50f1 000d 50eb 000d     .P...P...P...P..
   e02c0:	206f 4d57 6c50 676f 0073 3025 7536 742e     o WMPlogs.%06u.t
   e02d0:	7478 7200 6d65 766f 6e69 2067 6c6f 2064     xt.removing old 
   e02e0:	6f6c 2067 6966 656c 2520 0073 6b6d 6964     log file %s.mkdi
   e02f0:	2072 6166 6c69 6465 6600 6961 656c 2064     r failed.failed 
   e0300:	6f74 6f20 6570 206e 6f6c 7367 6420 7269     to open logs dir
   e0310:	6300 6572 7461 6e69 2067 6f6c 7367 6420     .creating logs d
   e0320:	7269 2520 0073 7263 6165 6974 676e 6e20     ir %s.creating n
   e0330:	7765 6c20 676f 6620 6c69 2065 3025 6434     ew log file %04d
   e0340:	7700 6972 6574 7420 206f 6473 6320 7261     .write to sd car
   e0350:	2064 6166 6c69 6465 0000 0000               d failed....

000e035c <_ZTV18SdCardPrintHandler>:
	...
   e0364:	5789 000d 57a5 000d 5ab9 000d a089 000d     .W...W...Z......

000e0374 <CSWTCH.22>:
   e0374:	0000 4348 0000 4396 0000 43c8 0000 43fa     ..HC...C...C...C
   e0384:	0000 4416                                   ...D

000e0388 <_ZTV16Adafruit_TSL2591>:
	...
   e0390:	5e69 000d 5eb5 000d 40bd 000d 616b 000d     i^...^...@..ka..
   e03a0:	5e6d 000d 002c 2e25 6631 2500 332e 0066     m^..,.%.1f.%.3f.
   e03b0:	2e25 6632 5300 6174 7472 6e69 2067 6441     %.2f.Starting Ad
   e03c0:	6661 7572 7469 5420 4c53 3532 3139 5420     afruit TSL2591 T
   e03d0:	7365 2174 4600 756f 646e 6120 5420 4c53     est!.Found a TSL
   e03e0:	3532 3139 7320 6e65 6f73 0072 6f4e 7320     2591 sensor.No s
   e03f0:	6e65 6f73 2072 6f66 6e75 2064 2e2e 202e     ensor found ... 
   e0400:	6863 6365 206b 6f79 7275 7720 7269 6e69     check your wirin
   e0410:	3f67 2d00 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     g?.-------------
   e0420:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   e0430:	2d2d 2d2d 2d2d 002d 6553 736e 726f 203a     -------.Sensor: 
   e0440:	2020 2020 2020 4400 6972 6576 2072 6556           .Driver Ve
   e0450:	3a72 2020 0020 6e55 7169 6575 4920 3a44     r:   .Unique ID:
   e0460:	2020 2020 4d00 7861 5620 6c61 6575 203a         .Max Value: 
   e0470:	2020 0020 6c20 7875 4d00 6e69 5620 6c61        . lux.Min Val
   e0480:	6575 203a 2020 0020 6552 6f73 756c 6974     ue:    .Resoluti
   e0490:	6e6f 203a 2020 4700 6961 3a6e 2020 2020     on:   .Gain:    
   e04a0:	2020 2020 0020 7831 2820 6f4c 2977 3200          .1x (Low).2
   e04b0:	7835 2820 654d 6964 6d75 0029 3234 7838     5x (Medium).428x
   e04c0:	2820 6948 6867 0029 3839 3637 2078 4d28      (High).9876x (M
   e04d0:	7861 0029 6954 696d 676e 203a 2020 2020     ax).Timing:     
   e04e0:	2020 2000 736d 0000                           . ms..

000e04e8 <_ZTVN5spark13EthernetClassE>:
	...
   e04f0:	9913 000d 9909 000d 98ff 000d 98f5 000d     ................
   e0500:	98e9 000d 98dd 000d 98d1 000d 98c9 000d     ................
   e0510:	98bf 000d 98b5 000d b529 000d               ........)...

000e051c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   e051c:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   e052c:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   e053c:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   e054c:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   e055c:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   e056c:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   e057c:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   e058c:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   e059c:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   e05ac:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   e05bc:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   e05cc:	736c 3d20 0020 0a0d 6c00 006e 6e66 6300     ls = ....ln.fn.c
   e05dc:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
   e05ec:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
   e05fc:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
   e060c:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
   e061c:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
   e062c:	6373 6974 656d 0000                         sctime..

000e0634 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e063c:	a7f9 000d a7ff 000d a843 000d a80d 000d     ........C.......
   e064c:	a7fb 000d                                   ....

000e0650 <_ZTV9IPAddress>:
	...
   e0658:	ad91 000d ad81 000d ad83 000d               ............

000e0664 <_ZTV9USBSerial>:
	...
   e066c:	ae69 000d aeb9 000d aec7 000d a089 000d     i...............
   e067c:	aea5 000d ae6b 000d ae81 000d aeb3 000d     ....k...........
   e068c:	ae97 000d ae65 000d                         ....e...

000e0694 <_ZTVN5spark13CellularClassE>:
	...
   e069c:	b095 000d b08b 000d b081 000d 42d5 000d     .............B..
   e06ac:	b075 000d b069 000d b05d 000d b055 000d     u...i...]...U...
   e06bc:	b04b 000d b041 000d b529 000d               K...A...)...

000e06c8 <_ZTV11USARTSerial>:
	...
   e06d0:	b0d1 000d b121 000d b12f 000d a089 000d     ....!.../.......
   e06e0:	b0e5 000d b107 000d b0f3 000d b11b 000d     ................
   e06f0:	b0d3 000d b0d7 000d                         ........

000e06f8 <_ZTV7TwoWire>:
	...
   e0700:	b209 000d b253 000d b22b 000d b20b 000d     ....S...+.......
   e0710:	b233 000d b23b 000d b243 000d b24b 000d     3...;...C...K...

000e0720 <_ZTVN5spark9MeshClassE>:
	...
   e0728:	b3a3 000d b399 000d b38f 000d b385 000d     ................
   e0738:	b379 000d b36d 000d b361 000d b359 000d     y...m...a...Y...
   e0748:	b34f 000d b345 000d b529 000d               O...E...)...

000e0754 <_ZTVN5spark12NetworkClassE>:
	...
   e075c:	b4c1 000d b4cb 000d b4d5 000d b4df 000d     ................
   e076c:	b4e9 000d b4f5 000d b501 000d b50d 000d     ................
   e077c:	b515 000d b51f 000d b529 000d               ........)...

000e0788 <_ZSt7nothrow>:
	...

000e0790 <atanlo>:
   e0790:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   e07a0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000e07b0 <atanhi>:
   e07b0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   e07c0:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000e07d0 <npio2_hw>:
   e07d0:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   e07e0:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   e07f0:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   e0800:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   e0810:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   e0820:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   e0830:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   e0840:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000e0850 <two_over_pi>:
   e0850:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   e0860:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   e0870:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   e0880:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   e0890:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   e08a0:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   e08b0:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   e08c0:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   e08d0:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   e08e0:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   e08f0:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   e0900:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   e0910:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   e0920:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   e0930:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   e0940:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   e0950:	e27b 0060 8c6b 00c0                         {.`.k...

000e0958 <init_jk>:
   e0958:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000e0968 <PIo2>:
   e0968:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   e0978:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   e0988:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   e0998:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000e09a8 <day_name.4725>:
   e09a8:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e09b8:	6972 6153 4a74                                   riSat

000e09bd <mon_name.4726>:
   e09bd:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e09cd:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e09dd:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   e09ed:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   e09fd:	6425 000a                                   %d..

000e0a01 <_ctype_>:
   e0a01:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e0a11:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e0a21:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e0a31:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e0a41:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e0a51:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e0a61:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e0a71:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e0a81:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e0b04 <__sf_fake_stdin>:
	...

000e0b24 <__sf_fake_stdout>:
	...

000e0b44 <__sf_fake_stderr>:
	...

000e0b64 <_DAYS_BEFORE_MONTH>:
   e0b64:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   e0b74:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   e0b84:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000e0b94 <DAYS_IN_MONTH>:
   e0b94:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e0ba4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e0bb4:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e0bc4 <__month_lengths>:
   e0bc4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e0bd4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e0be4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e0bf4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e0c04:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e0c14:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e0c24:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e0c34:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   e0c44:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
   e0c54:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
   e0c64:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
   e0c74:	6c33 2564 322e 646c 4c00 5f43 4954 454d     3ld%.2ld.LC_TIME
   e0c84:	4a00 6e61 4600 6265 4d00 7261 4100 7270     .Jan.Feb.Mar.Apr
   e0c94:	4d00 7961 4a00 6e75 4a00 6c75 4100 6775     .May.Jun.Jul.Aug
   e0ca4:	5300 7065 4f00 7463 4e00 766f 4400 6365     .Sep.Oct.Nov.Dec
   e0cb4:	4a00 6e61 6175 7972 4600 6265 7572 7261     .January.Februar
   e0cc4:	0079 614d 6372 0068 7041 6972 006c 754a     y.March.April.Ju
   e0cd4:	656e 4a00 6c75 0079 7541 7567 7473 5300     ne.July.August.S
   e0ce4:	7065 6574 626d 7265 4f00 7463 626f 7265     eptember.October
   e0cf4:	4e00 766f 6d65 6562 0072 6544 6563 626d     .November.Decemb
   e0d04:	7265 5300 6e75 4d00 6e6f 5400 6575 5700     er.Sun.Mon.Tue.W
   e0d14:	6465 5400 7568 4600 6972 5300 7461 5300     ed.Thu.Fri.Sat.S
   e0d24:	6e75 6164 0079 6f4d 646e 7961 5400 6575     unday.Monday.Tue
   e0d34:	6473 7961 5700 6465 656e 6473 7961 5400     sday.Wednesday.T
   e0d44:	7568 7372 6164 0079 7246 6469 7961 5300     hursday.Friday.S
   e0d54:	7461 7275 6164 0079 4825 253a 3a4d 5325     aturday.%H:%M:%S
   e0d64:	2500 2f6d 6425 252f 0079 6125 2520 2062     .%m/%d/%y.%a %b 
   e0d74:	6525 2520 3a48 4d25 253a 2053 5925 5000     %e %H:%M:%S %Y.P
   e0d84:	004d 6125 2520 2062 6525 2520 3a48 4d25     M.%a %b %e %H:%M
   e0d94:	253a 2053 5a25 2520 0059 4925 253a 3a4d     :%S %Z %Y.%I:%M:
   e0da4:	5325 2520 0070 0000                         %S %p...

000e0dac <_C_time_locale>:
   e0dac:	0c85 000e 0c89 000e 0c8d 000e 0c91 000e     ................
   e0dbc:	0c95 000e 0c99 000e 0c9d 000e 0ca1 000e     ................
   e0dcc:	0ca5 000e 0ca9 000e 0cad 000e 0cb1 000e     ................
   e0ddc:	0cb5 000e 0cbd 000e 0cc6 000e 0ccc 000e     ................
   e0dec:	0c95 000e 0cd2 000e 0cd7 000e 0cdc 000e     ................
   e0dfc:	0ce3 000e 0ced 000e 0cf5 000e 0cfe 000e     ................
   e0e0c:	0d07 000e 0d0b 000e 0d0f 000e 0d13 000e     ................
   e0e1c:	0d17 000e 0d1b 000e 0d1f 000e 0d23 000e     ............#...
   e0e2c:	0d2a 000e 0d31 000e 0d39 000e 0d43 000e     *...1...9...C...
   e0e3c:	0d4c 000e 0d53 000e 0d5c 000e 0d65 000e     L...S...\...e...
   e0e4c:	0d6e 000e 0277 000e 0d83 000e 0d86 000e     n...w...........
   e0e5c:	0cb5 000e 0cbd 000e 0cc6 000e 0ccc 000e     ................
   e0e6c:	0c95 000e 0cd2 000e 0cd7 000e 0cdc 000e     ................
   e0e7c:	0ce3 000e 0ced 000e 0cf5 000e 0cfe 000e     ................
   e0e8c:	0550 000e 0d9e 000e 05d4 000e 05d4 000e     P...............
   e0e9c:	05d4 000e 05d4 000e 05d4 000e 5a54 4700     ............TZ.G
   e0eac:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e0ebc:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e0ecc:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e0edc:	3a6e 6825 2575 006e                         n:%hu%n.

000e0ee4 <link_const_variable_data_end>:
   e0ee4:	000d4cdd 	.word	0x000d4cdd
   e0ee8:	000d50b9 	.word	0x000d50b9
   e0eec:	000d50c9 	.word	0x000d50c9
   e0ef0:	000d5565 	.word	0x000d5565
   e0ef4:	000d5ad7 	.word	0x000d5ad7
   e0ef8:	000d5e65 	.word	0x000d5e65
   e0efc:	000d61ab 	.word	0x000d61ab
   e0f00:	000d61af 	.word	0x000d61af
   e0f04:	000d62d7 	.word	0x000d62d7
   e0f08:	000d62db 	.word	0x000d62db
   e0f0c:	000d62df 	.word	0x000d62df
   e0f10:	000d6aed 	.word	0x000d6aed
   e0f14:	000d6af1 	.word	0x000d6af1
   e0f18:	000d6af5 	.word	0x000d6af5
   e0f1c:	000d6b27 	.word	0x000d6b27
   e0f20:	000d7489 	.word	0x000d7489
   e0f24:	000d74ad 	.word	0x000d74ad
   e0f28:	000d74b1 	.word	0x000d74b1
   e0f2c:	000d77d5 	.word	0x000d77d5
   e0f30:	000d77d9 	.word	0x000d77d9
   e0f34:	000d77dd 	.word	0x000d77dd
   e0f38:	000d7d17 	.word	0x000d7d17
   e0f3c:	000d7d1b 	.word	0x000d7d1b
   e0f40:	000d7d1f 	.word	0x000d7d1f
   e0f44:	000d7dc5 	.word	0x000d7dc5
   e0f48:	000d7f27 	.word	0x000d7f27
   e0f4c:	000d80dd 	.word	0x000d80dd
   e0f50:	000d8b57 	.word	0x000d8b57
   e0f54:	000d90cf 	.word	0x000d90cf
   e0f58:	000d91e3 	.word	0x000d91e3
   e0f5c:	000d991d 	.word	0x000d991d
   e0f60:	000d9b3d 	.word	0x000d9b3d
   e0f64:	000da061 	.word	0x000da061
   e0f68:	000da34d 	.word	0x000da34d
   e0f6c:	000da685 	.word	0x000da685
   e0f70:	000da6cd 	.word	0x000da6cd
   e0f74:	000db0a1 	.word	0x000db0a1
   e0f78:	000db471 	.word	0x000db471
   e0f7c:	000db5f5 	.word	0x000db5f5
   e0f80:	000dbae5 	.word	0x000dbae5
   e0f84:	000dbb69 	.word	0x000dbb69
   e0f88:	000dbc2d 	.word	0x000dbc2d
   e0f8c:	000dbcf1 	.word	0x000dbcf1
