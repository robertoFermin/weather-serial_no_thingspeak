
c:/Users/BtX/Documents/weather-serial_no_thingspeak_rev2/target/1.5.2/boron/weather-serial_no_thingspeak_rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00011ad0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000e5af0  000e5af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000e5af8  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  2003bbe4  000e5afc  0002bbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002b08  2003bce8  2003bce8  0003bce8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000e5c00  000e5c00  00035c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000e5c28  000e5c28  00035c28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0028775f  00000000  00000000  00035c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00032c6d  00000000  00000000  002bd38b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00040ccc  00000000  00000000  002efff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004608  00000000  00000000  00330cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00008620  00000000  00000000  003352cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0006c913  00000000  00000000  0033d8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0008d5bd  00000000  00000000  003aa1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00135094  00000000  00000000  004377bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00013d64  00000000  00000000  0056c850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00c fe76 	bl	e0d22 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00c fe7b 	bl	e0d38 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003bbe4 	.word	0x2003bbe4
   d404c:	000e5afc 	.word	0x000e5afc
   d4050:	2003bce8 	.word	0x2003bce8
   d4054:	2003bce8 	.word	0x2003bce8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f008 fbe9 	bl	dc834 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e5ae4 	.word	0x000e5ae4
   d4084:	000e5a14 	.word	0x000e5a14

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bdb6 	b.w	d4bf8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fb9f 	bl	d47d0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f008 bb8f 	b.w	dc7b8 <_post_loop>

000d409a <_Znwj>:
   d409a:	f007 b937 	b.w	db30c <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f007 b935 	b.w	db30c <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f007 b93b 	b.w	db31c <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f007 b939 	b.w	db31c <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr

000d40ba <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40ba:	6810      	ldr	r0, [r2, #0]
   d40bc:	4770      	bx	lr

000d40be <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d40be:	4770      	bx	lr

000d40c0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d40c0:	4770      	bx	lr
	...

000d40c4 <_Z18capturePollSensorsv>:
}

void capturePollSensors()// funcion de la libreria para sondar sensores
{
  // Set the flag to poll the sensors
  readyToCapturePollSensors = true;
   d40c4:	4b01      	ldr	r3, [pc, #4]	; (d40cc <_Z18capturePollSensorsv+0x8>)
   d40c6:	2201      	movs	r2, #1
   d40c8:	701a      	strb	r2, [r3, #0]
   d40ca:	4770      	bx	lr
   d40cc:	2003bf96 	.word	0x2003bf96

000d40d0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	4718      	bx	r3

000d40d4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40d4:	2a01      	cmp	r2, #1
   d40d6:	d002      	beq.n	d40de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40d8:	2a02      	cmp	r2, #2
   d40da:	d002      	beq.n	d40e2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40dc:	e004      	b.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40de:	6001      	str	r1, [r0, #0]
	      break;
   d40e0:	e002      	b.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e2:	680b      	ldr	r3, [r1, #0]
   d40e4:	b100      	cbz	r0, d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40e6:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40e8:	2000      	movs	r0, #0
   d40ea:	4770      	bx	lr

000d40ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d40ec:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40ee:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d40f0:	6898      	ldr	r0, [r3, #8]
   d40f2:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40f4:	f012 0f01 	tst.w	r2, #1
   d40f8:	ea4f 0262 	mov.w	r2, r2, asr #1
   d40fc:	bf18      	it	ne
   d40fe:	5881      	ldrne	r1, [r0, r2]
   d4100:	4410      	add	r0, r2
   d4102:	bf18      	it	ne
   d4104:	58cb      	ldrne	r3, [r1, r3]
   d4106:	4718      	bx	r3

000d4108 <__tcf_0>:

String deviceStatus;
String i2cDevices;
bool resetDevice = false;

String i2cNames[] =// arreglo con los nombres de dispositivos i2c
   d4108:	b538      	push	{r3, r4, r5, lr}
   d410a:	4d06      	ldr	r5, [pc, #24]	; (d4124 <__tcf_0+0x1c>)
   d410c:	2400      	movs	r4, #0
   d410e:	f104 0080 	add.w	r0, r4, #128	; 0x80
   d4112:	4428      	add	r0, r5
   d4114:	3c10      	subs	r4, #16
   d4116:	f007 fe2d 	bl	dbd74 <_ZN6StringD1Ev>
   d411a:	f114 0f90 	cmn.w	r4, #144	; 0x90
   d411e:	d1f6      	bne.n	d410e <__tcf_0+0x6>
   d4120:	bd38      	pop	{r3, r4, r5, pc}
   d4122:	bf00      	nop
   d4124:	2003be4c 	.word	0x2003be4c

000d4128 <_ZN7IoTNodeD1Ev>:
 * @brief Main IoT Node class.
 * Includes functions to manage external power. Read the state of the battery charger.
 * Send a "tickle" to reset the watchdog timer and control GPIO on the IO headers. 
 * 
 */
class IoTNode
   d4128:	b510      	push	{r4, lr}
   d412a:	4604      	mov	r4, r0
   d412c:	f007 fe22 	bl	dbd74 <_ZN6StringD1Ev>
   d4130:	4620      	mov	r0, r4
   d4132:	bd10      	pop	{r4, pc}

000d4134 <_Z22getResetAndSendSensorsv>:
  // Set the flag to poll the sensors
  readyToCapturePollSensors = true;
}

void getResetAndSendSensors()//funcion de la libreria para restear y mandar sensores
{
   d4134:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4136:	f006 fe13 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
  // Set the flag to read and send data.
  // Has to be done out of this Timer thread
  timeToNextSendMS = millis();
   d413a:	4b03      	ldr	r3, [pc, #12]	; (d4148 <_Z22getResetAndSendSensorsv+0x14>)
   d413c:	6018      	str	r0, [r3, #0]
  readyToGetResetAndSendSensors = true;
   d413e:	4b03      	ldr	r3, [pc, #12]	; (d414c <_Z22getResetAndSendSensorsv+0x18>)
   d4140:	2201      	movs	r2, #1
   d4142:	701a      	strb	r2, [r3, #0]
   d4144:	bd08      	pop	{r3, pc}
   d4146:	bf00      	nop
   d4148:	2003d73c 	.word	0x2003d73c
   d414c:	2003bfc0 	.word	0x2003bfc0

000d4150 <_ZN14WeatherSensors15handleRainEventEv>:
      }

      lastAnemoneterEvent = timeAnemometerEvent; // set up for next event
    }

    void handleRainEvent() {
   d4150:	b510      	push	{r4, lr}
   d4152:	4604      	mov	r4, r0
   d4154:	f006 fe04 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
      // Count rain gauge bucket tips as they occur
      // Activated by the magnet and reed switch in the rain gauge, attached to input D2
      unsigned int timeRainEvent = millis(); // grab current time

      // ignore switch-bounce glitches less than 10mS after initial edge
      if(timeRainEvent - lastRainEvent < 10) {
   d4158:	f241 6264 	movw	r2, #5732	; 0x1664
   d415c:	58a3      	ldr	r3, [r4, r2]
   d415e:	1ac3      	subs	r3, r0, r3
   d4160:	2b09      	cmp	r3, #9
   d4162:	d905      	bls.n	d4170 <_ZN14WeatherSensors15handleRainEventEv+0x20>
        return;
      }
      rainEventCount++; //Increase this minute's amount of rain
   d4164:	f504 51b3 	add.w	r1, r4, #5728	; 0x1660
   d4168:	680b      	ldr	r3, [r1, #0]
   d416a:	3301      	adds	r3, #1
   d416c:	600b      	str	r3, [r1, #0]
      lastRainEvent = timeRainEvent; // set up for next event
   d416e:	50a0      	str	r0, [r4, r2]
   d4170:	bd10      	pop	{r4, pc}

000d4172 <_ZN14WeatherSensors21handleAnemometerEventEv>:
      attachInterrupt(AnemometerPin, &WeatherSensors::handleAnemometerEvent, this, FALLING);

      pinMode(RainPin, INPUT_PULLUP);
      attachInterrupt(RainPin, &WeatherSensors::handleRainEvent, this, FALLING);
    }
    void handleAnemometerEvent() {
   d4172:	b538      	push	{r3, r4, r5, lr}
   d4174:	4604      	mov	r4, r0
   d4176:	f006 fdf3 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
      // Activated by the magnet in the anemometer (2 ticks per rotation), attached to input D3
       unsigned int timeAnemometerEvent = millis(); // grab current time

      //If there's never been an event before (first time through), then just capture it
      if(lastAnemoneterEvent != 0) {
   d417a:	f504 51b4 	add.w	r1, r4, #5760	; 0x1680
   d417e:	680b      	ldr	r3, [r1, #0]
   d4180:	b193      	cbz	r3, d41a8 <_ZN14WeatherSensors21handleAnemometerEventEv+0x36>
          // Calculate time since last event
          unsigned int period = timeAnemometerEvent - lastAnemoneterEvent;
   d4182:	1ac3      	subs	r3, r0, r3
          // ignore switch-bounce glitches less than 10mS after initial edge (which implies a max windspeed of 149mph)
          if(period < 10) {
   d4184:	2b09      	cmp	r3, #9
   d4186:	d910      	bls.n	d41aa <_ZN14WeatherSensors21handleAnemometerEventEv+0x38>
            return;
          }
          if(period < GustPeriod) {
   d4188:	f241 627c 	movw	r2, #5756	; 0x167c
   d418c:	58a5      	ldr	r5, [r4, r2]
   d418e:	42ab      	cmp	r3, r5
              // If the period is the shortest (and therefore fastest windspeed) seen, capture it
              GustPeriod = period;
   d4190:	bf38      	it	cc
   d4192:	50a3      	strcc	r3, [r4, r2]
          }
          AnemoneterPeriodTotal += period;
   d4194:	f241 6574 	movw	r5, #5748	; 0x1674
   d4198:	5962      	ldr	r2, [r4, r5]
   d419a:	4413      	add	r3, r2
   d419c:	5163      	str	r3, [r4, r5]
          AnemoneterPeriodReadingCount++;
   d419e:	f241 6278 	movw	r2, #5752	; 0x1678
   d41a2:	58a3      	ldr	r3, [r4, r2]
   d41a4:	3301      	adds	r3, #1
   d41a6:	50a3      	str	r3, [r4, r2]
      }

      lastAnemoneterEvent = timeAnemometerEvent; // set up for next event
   d41a8:	6008      	str	r0, [r1, #0]
   d41aa:	bd38      	pop	{r3, r4, r5, pc}

000d41ac <_ZN14WeatherSensorsD1Ev>:
  float longitude;
}config_t;
extern config_t config;

// library interface description
class WeatherSensors
   d41ac:	b510      	push	{r4, lr}
   d41ae:	4604      	mov	r4, r0
   d41b0:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
   d41b4:	3004      	adds	r0, #4
   d41b6:	f007 fddd 	bl	dbd74 <_ZN6StringD1Ev>
   d41ba:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d41be:	f006 fc8c 	bl	daada <_ZN13RunningMedianD1Ev>
   d41c2:	f104 000a 	add.w	r0, r4, #10
   d41c6:	f006 fc88 	bl	daada <_ZN13RunningMedianD1Ev>
   d41ca:	4620      	mov	r0, r4
   d41cc:	bd10      	pop	{r4, pc}

000d41ce <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41ce:	6943      	ldr	r3, [r0, #20]
   d41d0:	b113      	cbz	r3, d41d8 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41d2:	6983      	ldr	r3, [r0, #24]
   d41d4:	300c      	adds	r0, #12
   d41d6:	4718      	bx	r3
   d41d8:	4770      	bx	lr
	...

000d41dc <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d41dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d41de:	4602      	mov	r2, r0
   d41e0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d41e2:	7913      	ldrb	r3, [r2, #4]
   d41e4:	6895      	ldr	r5, [r2, #8]
   d41e6:	b133      	cbz	r3, d41f6 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d41e8:	b93d      	cbnz	r5, d41fa <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d41ea:	490c      	ldr	r1, [pc, #48]	; (d421c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d41ec:	b004      	add	sp, #16
   d41ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d41f2:	f007 bfa9 	b.w	dc148 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d41f6:	4b0a      	ldr	r3, [pc, #40]	; (d4220 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d41f8:	e000      	b.n	d41fc <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d41fa:	4b0a      	ldr	r3, [pc, #40]	; (d4224 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d41fc:	7b16      	ldrb	r6, [r2, #12]
   d41fe:	4c0a      	ldr	r4, [pc, #40]	; (d4228 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4200:	490a      	ldr	r1, [pc, #40]	; (d422c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4202:	7b52      	ldrb	r2, [r2, #13]
   d4204:	9202      	str	r2, [sp, #8]
   d4206:	2e01      	cmp	r6, #1
   d4208:	bf08      	it	eq
   d420a:	4621      	moveq	r1, r4
   d420c:	9101      	str	r1, [sp, #4]
   d420e:	9500      	str	r5, [sp, #0]
   d4210:	4a07      	ldr	r2, [pc, #28]	; (d4230 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4212:	2100      	movs	r1, #0
   d4214:	f008 f8a9 	bl	dc36a <_ZN5Print11printf_implEbPKcz>
  }
   d4218:	b004      	add	sp, #16
   d421a:	bd70      	pop	{r4, r5, r6, pc}
   d421c:	000e40f1 	.word	0x000e40f1
   d4220:	000e4a27 	.word	0x000e4a27
   d4224:	000e40e0 	.word	0x000e40e0
   d4228:	000e40e9 	.word	0x000e40e9
   d422c:	000e40ed 	.word	0x000e40ed
   d4230:	000e4107 	.word	0x000e4107

000d4234 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4234:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4236:	2100      	movs	r1, #0
   d4238:	4604      	mov	r4, r0
   d423a:	4608      	mov	r0, r1
   d423c:	f006 fdd8 	bl	dadf0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4240:	a902      	add	r1, sp, #8
   d4242:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4244:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4246:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d424a:	f006 fde9 	bl	dae20 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d424e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4250:	b10c      	cbz	r4, d4256 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4252:	2301      	movs	r3, #1
   d4254:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4256:	2100      	movs	r1, #0
   d4258:	2001      	movs	r0, #1
   d425a:	f006 fdc9 	bl	dadf0 <os_thread_scheduling>
            }
        }
        if (t) {
   d425e:	b12c      	cbz	r4, d426c <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d4260:	6823      	ldr	r3, [r4, #0]
   d4262:	4620      	mov	r0, r4
   d4264:	689b      	ldr	r3, [r3, #8]
   d4266:	4798      	blx	r3
            t->running = false;
   d4268:	2300      	movs	r3, #0
   d426a:	7123      	strb	r3, [r4, #4]
        }
    }
   d426c:	b002      	add	sp, #8
   d426e:	bd10      	pop	{r4, pc}

000d4270 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4270:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4272:	b538      	push	{r3, r4, r5, lr}
   d4274:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4276:	d005      	beq.n	d4284 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d4278:	2a03      	cmp	r2, #3
   d427a:	d00f      	beq.n	d429c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
   d427c:	2a01      	cmp	r2, #1
   d427e:	d111      	bne.n	d42a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4280:	680b      	ldr	r3, [r1, #0]
   d4282:	e009      	b.n	d4298 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4284:	200c      	movs	r0, #12
   d4286:	680d      	ldr	r5, [r1, #0]
   d4288:	f7ff ff07 	bl	d409a <_Znwj>
   d428c:	4603      	mov	r3, r0
   d428e:	b118      	cbz	r0, d4298 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
   d4290:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4294:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4298:	6023      	str	r3, [r4, #0]
   d429a:	e003      	b.n	d42a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d429c:	210c      	movs	r1, #12
   d429e:	6800      	ldr	r0, [r0, #0]
   d42a0:	f009 fdac 	bl	dddfc <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d42a4:	2000      	movs	r0, #0
   d42a6:	bd38      	pop	{r3, r4, r5, pc}

000d42a8 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42a8:	b510      	push	{r4, lr}
   d42aa:	4b05      	ldr	r3, [pc, #20]	; (d42c0 <_ZN8particle9LEDStatusD1Ev+0x18>)
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42ac:	2200      	movs	r2, #0

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42ae:	4604      	mov	r4, r0
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42b0:	4611      	mov	r1, r2

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42b2:	f840 3b04 	str.w	r3, [r0], #4
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42b6:	f006 ff3b 	bl	db130 <led_set_status_active>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}
   d42ba:	4620      	mov	r0, r4
   d42bc:	bd10      	pop	{r4, pc}
   d42be:	bf00      	nop
   d42c0:	000e40d0 	.word	0x000e40d0

000d42c4 <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42c4:	b510      	push	{r4, lr}
   d42c6:	4604      	mov	r4, r0
    setActive(false);
}
   d42c8:	f7ff ffee 	bl	d42a8 <_ZN8particle9LEDStatusD1Ev>
   d42cc:	4620      	mov	r0, r4
   d42ce:	2120      	movs	r1, #32
   d42d0:	f009 fd94 	bl	dddfc <_ZdlPvj>
   d42d4:	4620      	mov	r0, r4
   d42d6:	bd10      	pop	{r4, pc}

000d42d8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d42d8:	2200      	movs	r2, #0
   d42da:	4611      	mov	r1, r2
   d42dc:	6840      	ldr	r0, [r0, #4]
   d42de:	f006 bf9d 	b.w	db21c <network_ready>

000d42e2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42e2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d42e4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42e6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d42e8:	b113      	cbz	r3, d42f0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42ea:	2203      	movs	r2, #3
   d42ec:	4601      	mov	r1, r0
   d42ee:	4798      	blx	r3
    }
   d42f0:	4620      	mov	r0, r4
   d42f2:	bd10      	pop	{r4, pc}

000d42f4 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d42f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42f6:	2500      	movs	r5, #0
   d42f8:	468e      	mov	lr, r1
   d42fa:	4915      	ldr	r1, [pc, #84]	; (d4350 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d42fc:	7105      	strb	r5, [r0, #4]
   d42fe:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4300:	6145      	str	r5, [r0, #20]
   d4302:	6001      	str	r1, [r0, #0]
   d4304:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4306:	e892 0003 	ldmia.w	r2, {r0, r1}
   d430a:	b085      	sub	sp, #20
   d430c:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d430e:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4312:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4316:	e896 0003 	ldmia.w	r6, {r0, r1}
   d431a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d431e:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4322:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4326:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4328:	6960      	ldr	r0, [r4, #20]
   d432a:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d432c:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d432e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4330:	69a0      	ldr	r0, [r4, #24]
   d4332:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4334:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4336:	e88d 0028 	stmia.w	sp, {r3, r5}
   d433a:	4a06      	ldr	r2, [pc, #24]	; (d4354 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d433c:	4623      	mov	r3, r4
   d433e:	4671      	mov	r1, lr
   d4340:	f104 0008 	add.w	r0, r4, #8
   d4344:	f006 fd5c 	bl	dae00 <os_timer_create>
    }
   d4348:	4620      	mov	r0, r4
   d434a:	b005      	add	sp, #20
   d434c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d434e:	bf00      	nop
   d4350:	000e40bc 	.word	0x000e40bc
   d4354:	000d4235 	.word	0x000d4235

000d4358 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4358:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d435a:	6880      	ldr	r0, [r0, #8]
   d435c:	2300      	movs	r3, #0
   d435e:	b138      	cbz	r0, d4370 <_ZN5Timer5_stopEjb+0x18>
   d4360:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4364:	2102      	movs	r1, #2
   d4366:	f006 fd63 	bl	dae30 <os_timer_change>
   d436a:	fab0 f080 	clz	r0, r0
   d436e:	0940      	lsrs	r0, r0, #5
    }
   d4370:	b003      	add	sp, #12
   d4372:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4378 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4378:	b538      	push	{r3, r4, r5, lr}
   d437a:	4b10      	ldr	r3, [pc, #64]	; (d43bc <_ZN5TimerD1Ev+0x44>)
   d437c:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d437e:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4380:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d4382:	b1a3      	cbz	r3, d43ae <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4388:	2200      	movs	r2, #0
   d438a:	f7ff ffe5 	bl	d4358 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d438e:	2100      	movs	r1, #0
   d4390:	68a0      	ldr	r0, [r4, #8]
   d4392:	f006 fd65 	bl	dae60 <os_timer_set_id>
            while (running) {
   d4396:	7923      	ldrb	r3, [r4, #4]
   d4398:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d439c:	b113      	cbz	r3, d43a4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d439e:	f006 fd0f 	bl	dadc0 <os_thread_yield>
   d43a2:	e7f8      	b.n	d4396 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d43a4:	4629      	mov	r1, r5
   d43a6:	68a0      	ldr	r0, [r4, #8]
   d43a8:	f006 fd32 	bl	dae10 <os_timer_destroy>
            handle = nullptr;
   d43ac:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d43ae:	f104 000c 	add.w	r0, r4, #12
   d43b2:	f7ff ff96 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43b6:	4620      	mov	r0, r4
   d43b8:	bd38      	pop	{r3, r4, r5, pc}
   d43ba:	bf00      	nop
   d43bc:	000e40bc 	.word	0x000e40bc

000d43c0 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43c0:	b510      	push	{r4, lr}
   d43c2:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43c4:	f7ff ffd8 	bl	d4378 <_ZN5TimerD1Ev>
   d43c8:	4620      	mov	r0, r4
   d43ca:	211c      	movs	r1, #28
   d43cc:	f009 fd16 	bl	dddfc <_ZdlPvj>
   d43d0:	4620      	mov	r0, r4
   d43d2:	bd10      	pop	{r4, pc}

000d43d4 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43d6:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43d8:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43da:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43dc:	4611      	mov	r1, r2
   d43de:	f7ff ffbb 	bl	d4358 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d43e2:	68a8      	ldr	r0, [r5, #8]
   d43e4:	2300      	movs	r3, #0
   d43e6:	b140      	cbz	r0, d43fa <_ZN5Timer5startEj+0x26>
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	9400      	str	r4, [sp, #0]
   d43ec:	461a      	mov	r2, r3
   d43ee:	4619      	mov	r1, r3
   d43f0:	f006 fd1e 	bl	dae30 <os_timer_change>
   d43f4:	fab0 f080 	clz	r0, r0
   d43f8:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43fa:	b003      	add	sp, #12
   d43fc:	bd30      	pop	{r4, r5, pc}
	...

000d4400 <_Z15checkI2CDevicesv>:
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
   d4400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4404:	4f4d      	ldr	r7, [pc, #308]	; (d453c <_Z15checkI2CDevicesv+0x13c>)
  for (size_t i; i<i2cLength; ++i)// recorremos el arreglo de las direcciones
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];// address es igaual a los datos guardados en nuestro arreglo i2cAdd
   d4406:	f8df 9148 	ldr.w	r9, [pc, #328]	; d4550 <_Z15checkI2CDevicesv+0x150>
   d440a:	f8df 8148 	ldr.w	r8, [pc, #328]	; d4554 <_Z15checkI2CDevicesv+0x154>
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
   d440e:	b08d      	sub	sp, #52	; 0x34
   d4410:	2400      	movs	r4, #0
  byte error, address;//constante error y address
  bool result = true;// variable result
   d4412:	2501      	movs	r5, #1
  for (size_t i; i<i2cLength; ++i)// recorremos el arreglo de las direcciones
   d4414:	2c09      	cmp	r4, #9
   d4416:	f000 808d 	beq.w	d4534 <_Z15checkI2CDevicesv+0x134>
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];// address es igaual a los datos guardados en nuestro arreglo i2cAdd
   d441a:	f814 6009 	ldrb.w	r6, [r4, r9]

    Wire.beginTransmission(address);//Inicie una transmisión al dispositivo esclavo I 2 C con la dirección dada
   d441e:	f009 fcb9 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d4422:	4631      	mov	r1, r6
   d4424:	f008 ffd3 	bl	dd3ce <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();// igualamos a error cuando esa transmision se termina
   d4428:	f009 fcb4 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d442c:	f008 ffda 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

    //Try again if !error=0
    if (!error==0)
   d4430:	2800      	cmp	r0, #0
   d4432:	d04e      	beq.n	d44d2 <_Z15checkI2CDevicesv+0xd2>
    {
      delay(10);
   d4434:	200a      	movs	r0, #10
   d4436:	f008 f979 	bl	dc72c <delay>
      Wire.beginTransmission(address);//Inicie una transmisión al dispositivo esclavo I 2 C con la dirección dada
   d443a:	f009 fcab 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d443e:	4631      	mov	r1, r6
   d4440:	f008 ffc5 	bl	dd3ce <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();// igualamos a error cuando esa transmision se termina
   d4444:	f009 fca6 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d4448:	f008 ffcc 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>
    }

    //Try reset if !error=0
    if (!error==0)//intentamos de nuevo si el error no es 0
   d444c:	2800      	cmp	r0, #0
   d444e:	d040      	beq.n	d44d2 <_Z15checkI2CDevicesv+0xd2>
    {
      Wire.reset();// reseteamos la transmiision
   d4450:	f009 fca0 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d4454:	f008 ffcd 	bl	dd3f2 <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);//volvemos a iniciar la transmision 
   d4458:	f009 fc9c 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d445c:	4631      	mov	r1, r6
   d445e:	f008 ffb6 	bl	dd3ce <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();//igualamos a error cuando esa transmision se termina
   d4462:	f009 fc97 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d4466:	f008 ffbd 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>
    }
 
    if (error == 0)
   d446a:	b390      	cbz	r0, d44d2 <_Z15checkI2CDevicesv+0xd2>
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));//imprimimos el dispositivo, nombre, direccion
      i2cExists[i]=true;// cambiamos de false a true en el arreglo
    }
    else
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " NOT at"+" address:0x"+String(address, HEX)));//se imprime que no esta en la direccion
   d446c:	f008 fdca 	bl	dd004 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4470:	4933      	ldr	r1, [pc, #204]	; (d4540 <_Z15checkI2CDevicesv+0x140>)
   d4472:	4605      	mov	r5, r0
   d4474:	4668      	mov	r0, sp
   d4476:	f007 fcc4 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d447a:	4639      	mov	r1, r7
   d447c:	4668      	mov	r0, sp
   d447e:	f007 fd9e 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d4482:	4930      	ldr	r1, [pc, #192]	; (d4544 <_Z15checkI2CDevicesv+0x144>)
   d4484:	f007 fda7 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   d4488:	492f      	ldr	r1, [pc, #188]	; (d4548 <_Z15checkI2CDevicesv+0x148>)
   d448a:	f007 fda4 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   d448e:	2210      	movs	r2, #16
   d4490:	4682      	mov	sl, r0
   d4492:	4631      	mov	r1, r6
   d4494:	eb0d 0002 	add.w	r0, sp, r2
   d4498:	f007 fd27 	bl	dbeea <_ZN6StringC1Ehh>
   d449c:	a904      	add	r1, sp, #16
   d449e:	4650      	mov	r0, sl
   d44a0:	f007 fd8d 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d44a4:	4601      	mov	r1, r0
   d44a6:	a808      	add	r0, sp, #32
   d44a8:	f007 fcea 	bl	dbe80 <_ZN6StringC1ERKS_>
   d44ac:	9908      	ldr	r1, [sp, #32]
   d44ae:	4628      	mov	r0, r5
   d44b0:	f007 fe61 	bl	dc176 <_ZN5Print7printlnEPKc>
   d44b4:	a808      	add	r0, sp, #32
   d44b6:	f007 fc5d 	bl	dbd74 <_ZN6StringD1Ev>
   d44ba:	a804      	add	r0, sp, #16
   d44bc:	f007 fc5a 	bl	dbd74 <_ZN6StringD1Ev>
      i2cExists[i]=false;//dejamos el false en el arreglo
   d44c0:	2500      	movs	r5, #0

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d44c2:	4668      	mov	r0, sp
   d44c4:	f007 fc56 	bl	dbd74 <_ZN6StringD1Ev>
   d44c8:	f808 5004 	strb.w	r5, [r8, r4]
// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
  byte error, address;//constante error y address
  bool result = true;// variable result
  for (size_t i; i<i2cLength; ++i)// recorremos el arreglo de las direcciones
   d44cc:	3401      	adds	r4, #1
   d44ce:	3710      	adds	r7, #16
   d44d0:	e7a0      	b.n	d4414 <_Z15checkI2CDevicesv+0x14>
      error = Wire.endTransmission();//igualamos a error cuando esa transmision se termina
    }
 
    if (error == 0)
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));//imprimimos el dispositivo, nombre, direccion
   d44d2:	f008 fd97 	bl	dd004 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d44d6:	491a      	ldr	r1, [pc, #104]	; (d4540 <_Z15checkI2CDevicesv+0x140>)
   d44d8:	4682      	mov	sl, r0
   d44da:	4668      	mov	r0, sp
   d44dc:	f007 fc91 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d44e0:	4639      	mov	r1, r7
   d44e2:	4668      	mov	r0, sp
   d44e4:	f007 fd6b 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d44e8:	4918      	ldr	r1, [pc, #96]	; (d454c <_Z15checkI2CDevicesv+0x14c>)
   d44ea:	f007 fd74 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   d44ee:	4916      	ldr	r1, [pc, #88]	; (d4548 <_Z15checkI2CDevicesv+0x148>)
   d44f0:	f007 fd71 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   d44f4:	2210      	movs	r2, #16
   d44f6:	4683      	mov	fp, r0
   d44f8:	4631      	mov	r1, r6
   d44fa:	eb0d 0002 	add.w	r0, sp, r2
   d44fe:	f007 fcf4 	bl	dbeea <_ZN6StringC1Ehh>
   d4502:	a904      	add	r1, sp, #16
   d4504:	4658      	mov	r0, fp
   d4506:	f007 fd5a 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d450a:	4601      	mov	r1, r0
   d450c:	a808      	add	r0, sp, #32
   d450e:	f007 fcb7 	bl	dbe80 <_ZN6StringC1ERKS_>
   d4512:	9908      	ldr	r1, [sp, #32]
   d4514:	4650      	mov	r0, sl
   d4516:	f007 fe2e 	bl	dc176 <_ZN5Print7printlnEPKc>
   d451a:	a808      	add	r0, sp, #32
   d451c:	f007 fc2a 	bl	dbd74 <_ZN6StringD1Ev>
   d4520:	a804      	add	r0, sp, #16
   d4522:	f007 fc27 	bl	dbd74 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4526:	4668      	mov	r0, sp
   d4528:	f007 fc24 	bl	dbd74 <_ZN6StringD1Ev>
      i2cExists[i]=true;// cambiamos de false a true en el arreglo
   d452c:	2301      	movs	r3, #1
   d452e:	f808 3004 	strb.w	r3, [r8, r4]
   d4532:	e7cb      	b.n	d44cc <_Z15checkI2CDevicesv+0xcc>
      i2cExists[i]=false;//dejamos el false en el arreglo
      result = false;
    }
  }
  return result;
}
   d4534:	4628      	mov	r0, r5
   d4536:	b00d      	add	sp, #52	; 0x34
   d4538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d453c:	2003be4c 	.word	0x2003be4c
   d4540:	000e4125 	.word	0x000e4125
   d4544:	000e412d 	.word	0x000e412d
   d4548:	000e4135 	.word	0x000e4135
   d454c:	000e4131 	.word	0x000e4131
   d4550:	2003bbe4 	.word	0x2003bbe4
   d4554:	2003bf8d 	.word	0x2003bf8d

000d4558 <_Z8printI2Ci>:


void printI2C(int inx)//imprimir i2c
{
   d4558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d455c:	4d1e      	ldr	r5, [pc, #120]	; (d45d8 <_Z8printI2Ci+0x80>)
    for (int i=0; i<i2cLength; i++)
        {
          if (i2cAddr[i] == inx)//comp lo que tenemos en la posicion i a inx
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));//imprimimos el dispositivo con su direccion
   d455e:	4f1f      	ldr	r7, [pc, #124]	; (d45dc <_Z8printI2Ci+0x84>)
  return result;
}


void printI2C(int inx)//imprimir i2c
{
   d4560:	b08d      	sub	sp, #52	; 0x34
   d4562:	4606      	mov	r6, r0
    for (int i=0; i<i2cLength; i++)
   d4564:	2400      	movs	r4, #0
        {
          if (i2cAddr[i] == inx)//comp lo que tenemos en la posicion i a inx
   d4566:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d456a:	42b3      	cmp	r3, r6
   d456c:	d12d      	bne.n	d45ca <_Z8printI2Ci+0x72>
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));//imprimimos el dispositivo con su direccion
   d456e:	f008 fd49 	bl	dd004 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4572:	491b      	ldr	r1, [pc, #108]	; (d45e0 <_Z8printI2Ci+0x88>)
   d4574:	4680      	mov	r8, r0
   d4576:	4668      	mov	r0, sp
   d4578:	f007 fc43 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d457c:	eb07 1104 	add.w	r1, r7, r4, lsl #4
   d4580:	4668      	mov	r0, sp
   d4582:	f007 fd1c 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d4586:	4917      	ldr	r1, [pc, #92]	; (d45e4 <_Z8printI2Ci+0x8c>)
   d4588:	f007 fd25 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   d458c:	4916      	ldr	r1, [pc, #88]	; (d45e8 <_Z8printI2Ci+0x90>)
   d458e:	f007 fd22 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   d4592:	2210      	movs	r2, #16
   d4594:	4681      	mov	r9, r0
   d4596:	7829      	ldrb	r1, [r5, #0]
   d4598:	eb0d 0002 	add.w	r0, sp, r2
   d459c:	f007 fca5 	bl	dbeea <_ZN6StringC1Ehh>
   d45a0:	a904      	add	r1, sp, #16
   d45a2:	4648      	mov	r0, r9
   d45a4:	f007 fd0b 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d45a8:	4601      	mov	r1, r0
   d45aa:	a808      	add	r0, sp, #32
   d45ac:	f007 fc68 	bl	dbe80 <_ZN6StringC1ERKS_>
   d45b0:	9908      	ldr	r1, [sp, #32]
   d45b2:	4640      	mov	r0, r8
   d45b4:	f007 fddf 	bl	dc176 <_ZN5Print7printlnEPKc>
   d45b8:	a808      	add	r0, sp, #32
   d45ba:	f007 fbdb 	bl	dbd74 <_ZN6StringD1Ev>
   d45be:	a804      	add	r0, sp, #16
   d45c0:	f007 fbd8 	bl	dbd74 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d45c4:	4668      	mov	r0, sp
   d45c6:	f007 fbd5 	bl	dbd74 <_ZN6StringD1Ev>
}


void printI2C(int inx)//imprimir i2c
{
    for (int i=0; i<i2cLength; i++)
   d45ca:	3401      	adds	r4, #1
   d45cc:	2c09      	cmp	r4, #9
   d45ce:	d1ca      	bne.n	d4566 <_Z8printI2Ci+0xe>
          if (i2cAddr[i] == inx)//comp lo que tenemos en la posicion i a inx
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));//imprimimos el dispositivo con su direccion
          }
        }        
}
   d45d0:	b00d      	add	sp, #52	; 0x34
   d45d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d45d6:	bf00      	nop
   d45d8:	2003bbe3 	.word	0x2003bbe3
   d45dc:	2003be4c 	.word	0x2003be4c
   d45e0:	000e4125 	.word	0x000e4125
   d45e4:	000e4131 	.word	0x000e4131
   d45e8:	000e4135 	.word	0x000e4135

000d45ec <_Z7scanI2Cv>:

void scanI2C()
{
   d45ec:	b570      	push	{r4, r5, r6, lr}
  byte error, address;//constantes
  int nDevices;//num de dispositivos
 
  DEBUG_PRINTLN("Scanning...");//imprimios
   d45ee:	f008 fd09 	bl	dd004 <_Z16_fetch_usbserialv>
   d45f2:	491d      	ldr	r1, [pc, #116]	; (d4668 <_Z7scanI2Cv+0x7c>)
   d45f4:	f007 fdbf 	bl	dc176 <_ZN5Print7printlnEPKc>
   d45f8:	2401      	movs	r4, #1
  nDevices = 0;//num de dispositivos =0
   d45fa:	2500      	movs	r5, #0
  for(address = 1; address < 127; address++ )// ciclo for donde add es igual a 1 add tiene q ser menor a 127 y add++
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
   d45fc:	f009 fbca 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d4600:	b2e1      	uxtb	r1, r4
   d4602:	f008 fee4 	bl	dd3ce <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d4606:	f009 fbc5 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d460a:	f008 feeb 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>
 
    if (error == 0)//si el error es igual a 0
   d460e:	b920      	cbnz	r0, d461a <_Z7scanI2Cv+0x2e>
    {
      printI2C(address);//le damos la direccion a printi2c q despues comprobara si es igal a la q esta en el arreglos de i2cAddr
   d4610:	4620      	mov	r0, r4
   d4612:	f7ff ffa1 	bl	d4558 <_Z8printI2Ci>
 
      nDevices++;//sumamos  un dispositivo mas
   d4616:	3501      	adds	r5, #1
   d4618:	e017      	b.n	d464a <_Z7scanI2Cv+0x5e>
    }
    else if (error==4)//si el error es 4
   d461a:	2804      	cmp	r0, #4
   d461c:	d115      	bne.n	d464a <_Z7scanI2Cv+0x5e>
    {
      DEBUG_PRINT("Unknown error at address 0x");//imprimimos 
   d461e:	f008 fcf1 	bl	dd004 <_Z16_fetch_usbserialv>
   d4622:	4912      	ldr	r1, [pc, #72]	; (d466c <_Z7scanI2Cv+0x80>)
   d4624:	f007 fd90 	bl	dc148 <_ZN5Print5printEPKc>
      if (address<16)//si es menor que 16
   d4628:	2c0f      	cmp	r4, #15
   d462a:	d804      	bhi.n	d4636 <_Z7scanI2Cv+0x4a>
        DEBUG_PRINT("0");//imprimimos
   d462c:	f008 fcea 	bl	dd004 <_Z16_fetch_usbserialv>
   d4630:	490f      	ldr	r1, [pc, #60]	; (d4670 <_Z7scanI2Cv+0x84>)
   d4632:	f007 fd89 	bl	dc148 <_ZN5Print5printEPKc>
      DEBUG_PRINTLN(address,HEX);//su direccion en hexadecimal
   d4636:	f008 fce5 	bl	dd004 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d463a:	2210      	movs	r2, #16
   d463c:	4606      	mov	r6, r0
   d463e:	4621      	mov	r1, r4
   d4640:	f007 fda5 	bl	dc18e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4644:	4630      	mov	r0, r6
   d4646:	f007 fd8a 	bl	dc15e <_ZN5Print7printlnEv>
   d464a:	3401      	adds	r4, #1
  byte error, address;//constantes
  int nDevices;//num de dispositivos
 
  DEBUG_PRINTLN("Scanning...");//imprimios
  nDevices = 0;//num de dispositivos =0
  for(address = 1; address < 127; address++ )// ciclo for donde add es igual a 1 add tiene q ser menor a 127 y add++
   d464c:	2c7f      	cmp	r4, #127	; 0x7f
   d464e:	d1d5      	bne.n	d45fc <_Z7scanI2Cv+0x10>
      if (address<16)//si es menor que 16
        DEBUG_PRINT("0");//imprimimos
      DEBUG_PRINTLN(address,HEX);//su direccion en hexadecimal
    }    
  }
  if (nDevices == 0)//si no hay dispositivos
   d4650:	b91d      	cbnz	r5, d465a <_Z7scanI2Cv+0x6e>
    DEBUG_PRINTLN("No I2C devices found\n");//imprimimos
   d4652:	f008 fcd7 	bl	dd004 <_Z16_fetch_usbserialv>
   d4656:	4907      	ldr	r1, [pc, #28]	; (d4674 <_Z7scanI2Cv+0x88>)
   d4658:	e002      	b.n	d4660 <_Z7scanI2Cv+0x74>
  else
    DEBUG_PRINTLN("done\n");
   d465a:	f008 fcd3 	bl	dd004 <_Z16_fetch_usbserialv>
   d465e:	4906      	ldr	r1, [pc, #24]	; (d4678 <_Z7scanI2Cv+0x8c>)
}
   d4660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }    
  }
  if (nDevices == 0)//si no hay dispositivos
    DEBUG_PRINTLN("No I2C devices found\n");//imprimimos
  else
    DEBUG_PRINTLN("done\n");
   d4664:	f007 bd87 	b.w	dc176 <_ZN5Print7printlnEPKc>
   d4668:	000e4141 	.word	0x000e4141
   d466c:	000e414d 	.word	0x000e414d
   d4670:	000e4724 	.word	0x000e4724
   d4674:	000e4169 	.word	0x000e4169
   d4678:	000e417f 	.word	0x000e417f

000d467c <_Z7connectv>:
}


void connect()//Agregar una rutina de conexión explícita que debe funcionar antes de que se ejecute el resto del código
{
   d467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  #if Wiring_Cellular
  bool cellready=Cellular.ready();
   d467e:	4d41      	ldr	r5, [pc, #260]	; (d4784 <_Z7connectv+0x108>)
   d4680:	4628      	mov	r0, r5
   d4682:	f7ff fe29 	bl	d42d8 <_ZN5spark13CellularClass5readyEv>
  if (!cellready)
   d4686:	4604      	mov	r4, r0
   d4688:	bb40      	cbnz	r0, d46dc <_Z7connectv+0x60>
  {
    DEBUG_PRINTLN("Attempting to connect cellular...");
   d468a:	f008 fcbb 	bl	dd004 <_Z16_fetch_usbserialv>
   d468e:	493e      	ldr	r1, [pc, #248]	; (d4788 <_Z7connectv+0x10c>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4690:	4e3e      	ldr	r6, [pc, #248]	; (d478c <_Z7connectv+0x110>)
   d4692:	f007 fd70 	bl	dc176 <_ZN5Print7printlnEPKc>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4696:	4623      	mov	r3, r4
   d4698:	4622      	mov	r2, r4
   d469a:	4621      	mov	r1, r4
   d469c:	6868      	ldr	r0, [r5, #4]
   d469e:	f006 fdc5 	bl	db22c <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46a2:	4623      	mov	r3, r4
   d46a4:	4622      	mov	r2, r4
   d46a6:	4621      	mov	r1, r4
   d46a8:	6868      	ldr	r0, [r5, #4]
   d46aa:	f006 fd9f 	bl	db1ec <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46ae:	4620      	mov	r0, r4
   d46b0:	f006 fb6e 	bl	dad90 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d46b4:	2500      	movs	r5, #0
   d46b6:	4604      	mov	r4, r0
   d46b8:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46ba:	2000      	movs	r0, #0
   d46bc:	f006 fb68 	bl	dad90 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d46c0:	1b00      	subs	r0, r0, r4
   d46c2:	eb61 0105 	sbc.w	r1, r1, r5
   d46c6:	428f      	cmp	r7, r1
   d46c8:	bf08      	it	eq
   d46ca:	4286      	cmpeq	r6, r0
   d46cc:	d335      	bcc.n	d473a <_Z7connectv+0xbe>
    Cellular.on();
    Cellular.connect();
    waitFor(Cellular.ready,180000);
   d46ce:	482d      	ldr	r0, [pc, #180]	; (d4784 <_Z7connectv+0x108>)
   d46d0:	f7ff fe02 	bl	d42d8 <_ZN5spark13CellularClass5readyEv>
   d46d4:	bb88      	cbnz	r0, d473a <_Z7connectv+0xbe>
            spark_process();
   d46d6:	f006 fde1 	bl	db29c <spark_process>
   d46da:	e7ee      	b.n	d46ba <_Z7connectv+0x3e>
    System.reset();
    }
  }
  else
  {
    DEBUG_PRINTLN("Cellular ready");
   d46dc:	f008 fc92 	bl	dd004 <_Z16_fetch_usbserialv>
   d46e0:	492b      	ldr	r1, [pc, #172]	; (d4790 <_Z7connectv+0x114>)
   d46e2:	f007 fd48 	bl	dc176 <_ZN5Print7printlnEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d46e6:	f006 fde9 	bl	db2bc <spark_cloud_flag_connected>
    DEBUG_PRINTLN("Cellular ready");
  }
  #endif

  bool partconnected=Particle.connected();
  if (!partconnected)
   d46ea:	4604      	mov	r4, r0
   d46ec:	b9f0      	cbnz	r0, d472c <_Z7connectv+0xb0>
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
   d46ee:	f008 fc89 	bl	dd004 <_Z16_fetch_usbserialv>
   d46f2:	4928      	ldr	r1, [pc, #160]	; (d4794 <_Z7connectv+0x118>)
   d46f4:	f007 fd3f 	bl	dc176 <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d46f8:	f006 fdd8 	bl	db2ac <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46fc:	4620      	mov	r0, r4
   d46fe:	f006 fb47 	bl	dad90 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4702:	2500      	movs	r5, #0
   d4704:	4604      	mov	r4, r0
   d4706:	f64e 265f 	movw	r6, #59999	; 0xea5f
   d470a:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d470c:	2000      	movs	r0, #0
   d470e:	f006 fb3f 	bl	dad90 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4712:	1b00      	subs	r0, r0, r4
   d4714:	eb61 0105 	sbc.w	r1, r1, r5
   d4718:	428f      	cmp	r7, r1
   d471a:	bf08      	it	eq
   d471c:	4286      	cmpeq	r6, r0
   d471e:	d31f      	bcc.n	d4760 <_Z7connectv+0xe4>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4720:	f006 fdcc 	bl	db2bc <spark_cloud_flag_connected>
   d4724:	b9e0      	cbnz	r0, d4760 <_Z7connectv+0xe4>
            spark_process();
   d4726:	f006 fdb9 	bl	db29c <spark_process>
   d472a:	e7ef      	b.n	d470c <_Z7connectv+0x90>
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d472c:	f008 fc6a 	bl	dd004 <_Z16_fetch_usbserialv>
   d4730:	4919      	ldr	r1, [pc, #100]	; (d4798 <_Z7connectv+0x11c>)
  }
}
   d4732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d4736:	f007 bd1e 	b.w	dc176 <_ZN5Print7printlnEPKc>
  if (!cellready)
  {
    DEBUG_PRINTLN("Attempting to connect cellular...");
    Cellular.on();
    Cellular.connect();
    waitFor(Cellular.ready,180000);
   d473a:	4812      	ldr	r0, [pc, #72]	; (d4784 <_Z7connectv+0x108>)
   d473c:	f7ff fdcc 	bl	d42d8 <_ZN5spark13CellularClass5readyEv>
    if (!Cellular.ready())
   d4740:	4810      	ldr	r0, [pc, #64]	; (d4784 <_Z7connectv+0x108>)
   d4742:	f7ff fdc9 	bl	d42d8 <_ZN5spark13CellularClass5readyEv>
   d4746:	2800      	cmp	r0, #0
   d4748:	d1cd      	bne.n	d46e6 <_Z7connectv+0x6a>
    {
    DEBUG_PRINTLN("Cellular not ready - resetting");
   d474a:	f008 fc5b 	bl	dd004 <_Z16_fetch_usbserialv>
   d474e:	4913      	ldr	r1, [pc, #76]	; (d479c <_Z7connectv+0x120>)
   d4750:	f007 fd11 	bl	dc176 <_ZN5Print7printlnEPKc>
    delay(200);
   d4754:	20c8      	movs	r0, #200	; 0xc8
   d4756:	f007 ffe9 	bl	dc72c <delay>
    System.reset();
   d475a:	f006 ff77 	bl	db64c <_ZN11SystemClass5resetEv>
   d475e:	e7c2      	b.n	d46e6 <_Z7connectv+0x6a>
   d4760:	f006 fdac 	bl	db2bc <spark_cloud_flag_connected>
   d4764:	f006 fdaa 	bl	db2bc <spark_cloud_flag_connected>
    DEBUG_PRINTLN("Attempting to connect to Particle...");
    Particle.connect();
    // Note: that conditions must be a function that takes a void argument function(void) with the () removed,
    // e.g. Particle.connected instead of Particle.connected().
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
   d4768:	b958      	cbnz	r0, d4782 <_Z7connectv+0x106>
    {
      DEBUG_PRINTLN("Particle not connected - resetting");
   d476a:	f008 fc4b 	bl	dd004 <_Z16_fetch_usbserialv>
   d476e:	490c      	ldr	r1, [pc, #48]	; (d47a0 <_Z7connectv+0x124>)
   d4770:	f007 fd01 	bl	dc176 <_ZN5Print7printlnEPKc>
      delay(200);
   d4774:	20c8      	movs	r0, #200	; 0xc8
   d4776:	f007 ffd9 	bl	dc72c <delay>
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
  }
}
   d477a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
    {
      DEBUG_PRINTLN("Particle not connected - resetting");
      delay(200);
      System.reset();
   d477e:	f006 bf65 	b.w	db64c <_ZN11SystemClass5resetEv>
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
  }
}
   d4782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4784:	2003e2dc 	.word	0x2003e2dc
   d4788:	000e4185 	.word	0x000e4185
   d478c:	0002bf1f 	.word	0x0002bf1f
   d4790:	000e41c6 	.word	0x000e41c6
   d4794:	000e41d5 	.word	0x000e41d5
   d4798:	000e421d 	.word	0x000e421d
   d479c:	000e41a7 	.word	0x000e41a7
   d47a0:	000e41fa 	.word	0x000e41fa

000d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47a4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d47a6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47a8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d47aa:	b17c      	cbz	r4, d47cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d47ac:	6863      	ldr	r3, [r4, #4]
   d47ae:	3b01      	subs	r3, #1
   d47b0:	6063      	str	r3, [r4, #4]
   d47b2:	b95b      	cbnz	r3, d47cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d47b4:	6823      	ldr	r3, [r4, #0]
   d47b6:	4620      	mov	r0, r4
   d47b8:	689b      	ldr	r3, [r3, #8]
   d47ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d47bc:	68a3      	ldr	r3, [r4, #8]
   d47be:	3b01      	subs	r3, #1
   d47c0:	60a3      	str	r3, [r4, #8]
   d47c2:	b91b      	cbnz	r3, d47cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d47c4:	6823      	ldr	r3, [r4, #0]
   d47c6:	4620      	mov	r0, r4
   d47c8:	68db      	ldr	r3, [r3, #12]
   d47ca:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d47cc:	4628      	mov	r0, r5
   d47ce:	bd38      	pop	{r3, r4, r5, pc}

000d47d0 <loop>:
  }
}

// Note that CSV format is:
// unixTime,windDegrees,wind_speed,humidity,air_temp,rain,pressure,wind_gust,millivolts,lux
void loop() {
   d47d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d47d4:	ed2d 8b02 	vpush	{d8}
  float spec_O3();
  if (readyToGetResetAndSendSensors)//si esta listo para reset y mandar datos
   d47d8:	4dad      	ldr	r5, [pc, #692]	; (d4a90 <loop+0x2c0>)
   d47da:	782b      	ldrb	r3, [r5, #0]
  }
}

// Note that CSV format is:
// unixTime,windDegrees,wind_speed,humidity,air_temp,rain,pressure,wind_gust,millivolts,lux
void loop() {
   d47dc:	b0ec      	sub	sp, #432	; 0x1b0
  float spec_O3();
  if (readyToGetResetAndSendSensors)//si esta listo para reset y mandar datos
   d47de:	2b00      	cmp	r3, #0
   d47e0:	f000 8125 	beq.w	d4a2e <loop+0x25e>
  {
    
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
    char msg[256]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
   d47e4:	4cab      	ldr	r4, [pc, #684]	; (d4a94 <loop+0x2c4>)
void loop() {
  float spec_O3();
  if (readyToGetResetAndSendSensors)//si esta listo para reset y mandar datos
  {
    
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
   d47e6:	48ac      	ldr	r0, [pc, #688]	; (d4a98 <loop+0x2c8>)
   d47e8:	f005 fc6e 	bl	da0c8 <_ZN14WeatherSensors21getAndResetAllSensorsEv>
    char msg[256]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
   d47ec:	88e0      	ldrh	r0, [r4, #6]
  if (readyToGetResetAndSendSensors)//si esta listo para reset y mandar datos
  {
    
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
    char msg[256]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
   d47ee:	f8d4 a000 	ldr.w	sl, [r4]
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
   d47f2:	f00b fbd7 	bl	dffa4 <__aeabi_i2d>
   d47f6:	a3a2      	add	r3, pc, #648	; (adr r3, d4a80 <loop+0x2b0>)
   d47f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47fc:	f00b fc38 	bl	e0070 <__aeabi_dmul>
   d4800:	f00b ff2e 	bl	e0660 <__aeabi_d2f>
   d4804:	4681      	mov	r9, r0
    float Precip = sensorReadings.rainmmx1000 / 1000.0; //lectura de precipitacion
   d4806:	89a0      	ldrh	r0, [r4, #12]
   d4808:	f00b fbcc 	bl	dffa4 <__aeabi_i2d>
   d480c:	2200      	movs	r2, #0
   d480e:	4ba3      	ldr	r3, [pc, #652]	; (d4a9c <loop+0x2cc>)
   d4810:	f00b fd58 	bl	e02c4 <__aeabi_ddiv>
   d4814:	f00b ff24 	bl	e0660 <__aeabi_d2f>
    float DV= sensorReadings.windDegrees; //lectura de direccion del viento
   d4818:	88a3      	ldrh	r3, [r4, #4]
    
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
    char msg[256]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
    float Precip = sensorReadings.rainmmx1000 / 1000.0; //lectura de precipitacion
   d481a:	4680      	mov	r8, r0
    float DV= sensorReadings.windDegrees; //lectura de direccion del viento
    float Temp = (sensorReadings.airTempKx10 / 10.0)-273.15; //lectura de temperatura
   d481c:	8960      	ldrh	r0, [r4, #10]
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
    char msg[256]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
    float Precip = sensorReadings.rainmmx1000 / 1000.0; //lectura de precipitacion
    float DV= sensorReadings.windDegrees; //lectura de direccion del viento
   d481e:	ee08 3a10 	vmov	s16, r3
    float Temp = (sensorReadings.airTempKx10 / 10.0)-273.15; //lectura de temperatura
   d4822:	f00b fbbf 	bl	dffa4 <__aeabi_i2d>
   d4826:	2200      	movs	r2, #0
   d4828:	4b9d      	ldr	r3, [pc, #628]	; (d4aa0 <loop+0x2d0>)
   d482a:	f00b fd4b 	bl	e02c4 <__aeabi_ddiv>
   d482e:	a396      	add	r3, pc, #600	; (adr r3, d4a88 <loop+0x2b8>)
   d4830:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4834:	f00b fa68 	bl	dfd08 <__aeabi_dsub>
   d4838:	f00b ff12 	bl	e0660 <__aeabi_d2f>
    uint16_t mVB=sensorReadings.millivolts;//lectura de voltaje
    uint16_t Hum=sensorReadings.humid;//lectura de humedad
    //uint16_t ozo=sensorReadings.ozone;
   // float PB=sensorReadings.barometerhPa;
    
snprintf(msg, sizeof(msg) , //imprimimos la cadena 
   d483c:	4b99      	ldr	r3, [pc, #612]	; (d4aa4 <loop+0x2d4>)
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
    float Precip = sensorReadings.rainmmx1000 / 1000.0; //lectura de precipitacion
    float DV= sensorReadings.windDegrees; //lectura de direccion del viento
    float Temp = (sensorReadings.airTempKx10 / 10.0)-273.15; //lectura de temperatura
    uint16_t mVB=sensorReadings.millivolts;//lectura de voltaje
   d483e:	8a66      	ldrh	r6, [r4, #18]
    uint16_t Hum=sensorReadings.humid;//lectura de humedad
   d4840:	7a24      	ldrb	r4, [r4, #8]
    char msg[256]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
    float Precip = sensorReadings.rainmmx1000 / 1000.0; //lectura de precipitacion
    float DV= sensorReadings.windDegrees; //lectura de direccion del viento
    float Temp = (sensorReadings.airTempKx10 / 10.0)-273.15; //lectura de temperatura
   d4842:	4607      	mov	r7, r0
Temp, 
Hum,  
mVB,
//ozo
prom_o3
);
   d4844:	6818      	ldr	r0, [r3, #0]
   d4846:	f00b fbbf 	bl	dffc8 <__aeabi_f2d>
   d484a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d484e:	4638      	mov	r0, r7
   d4850:	9609      	str	r6, [sp, #36]	; 0x24
   d4852:	9408      	str	r4, [sp, #32]
   d4854:	f00b fbb8 	bl	dffc8 <__aeabi_f2d>
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
    char msg[256]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
    float Precip = sensorReadings.rainmmx1000 / 1000.0; //lectura de precipitacion
    float DV= sensorReadings.windDegrees; //lectura de direccion del viento
   d4858:	eeb8 8a48 	vcvt.f32.u32	s16, s16
Temp, 
Hum,  
mVB,
//ozo
prom_o3
);
   d485c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4860:	ee18 0a10 	vmov	r0, s16
   d4864:	f00b fbb0 	bl	dffc8 <__aeabi_f2d>
   d4868:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d486c:	4640      	mov	r0, r8
   d486e:	f00b fbab 	bl	dffc8 <__aeabi_f2d>
   d4872:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4876:	4648      	mov	r0, r9
   d4878:	f00b fba6 	bl	dffc8 <__aeabi_f2d>
   d487c:	4653      	mov	r3, sl
   d487e:	e9cd 0100 	strd	r0, r1, [sp]
   d4882:	4a89      	ldr	r2, [pc, #548]	; (d4aa8 <loop+0x2d8>)
   d4884:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4888:	a82c      	add	r0, sp, #176	; 0xb0
   d488a:	f006 fd6f 	bl	db36c <snprintf>
   d488e:	4b87      	ldr	r3, [pc, #540]	; (d4aac <loop+0x2dc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4890:	4987      	ldr	r1, [pc, #540]	; (d4ab0 <loop+0x2e0>)
   d4892:	781b      	ldrb	r3, [r3, #0]
   d4894:	f88d 3000 	strb.w	r3, [sp]
   d4898:	aa2c      	add	r2, sp, #176	; 0xb0
   d489a:	233c      	movs	r3, #60	; 0x3c
   d489c:	a828      	add	r0, sp, #160	; 0xa0
   d489e:	f008 f937 	bl	dcb10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48a2:	a829      	add	r0, sp, #164	; 0xa4
   d48a4:	f7ff ff7e 	bl	d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

 Particle.publish("sensors", msg, PRIVATE);//mandamos los datos a la nube de particle
 ubidots.add("UnixTime", UT);//mandamos lo datos a la nube de ubidots
   d48a8:	ee07 aa90 	vmov	s15, sl
   d48ac:	4981      	ldr	r1, [pc, #516]	; (d4ab4 <loop+0x2e4>)
   d48ae:	4882      	ldr	r0, [pc, #520]	; (d4ab8 <loop+0x2e8>)
   d48b0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d48b4:	f004 f91d 	bl	d8af2 <_ZN7Ubidots3addEPcf>
 ubidots.add("Velocidad del Viento", VV); 
   d48b8:	ee00 9a10 	vmov	s0, r9
   d48bc:	497f      	ldr	r1, [pc, #508]	; (d4abc <loop+0x2ec>)
   d48be:	487e      	ldr	r0, [pc, #504]	; (d4ab8 <loop+0x2e8>)
   d48c0:	f004 f917 	bl	d8af2 <_ZN7Ubidots3addEPcf>
 ubidots.add("Precipitacion", Precip);
   d48c4:	ee00 8a10 	vmov	s0, r8
   d48c8:	497d      	ldr	r1, [pc, #500]	; (d4ac0 <loop+0x2f0>)
   d48ca:	487b      	ldr	r0, [pc, #492]	; (d4ab8 <loop+0x2e8>)
   d48cc:	f004 f911 	bl	d8af2 <_ZN7Ubidots3addEPcf>
 ubidots.add("Direccion del viento", DV);
   d48d0:	eeb0 0a48 	vmov.f32	s0, s16
   d48d4:	497b      	ldr	r1, [pc, #492]	; (d4ac4 <loop+0x2f4>)
   d48d6:	4878      	ldr	r0, [pc, #480]	; (d4ab8 <loop+0x2e8>)
   d48d8:	f004 f90b 	bl	d8af2 <_ZN7Ubidots3addEPcf>
 ubidots.add("Temperatura", Temp);
   d48dc:	ee00 7a10 	vmov	s0, r7
   d48e0:	4979      	ldr	r1, [pc, #484]	; (d4ac8 <loop+0x2f8>)
   d48e2:	4875      	ldr	r0, [pc, #468]	; (d4ab8 <loop+0x2e8>)
   d48e4:	f004 f905 	bl	d8af2 <_ZN7Ubidots3addEPcf>
 ubidots.add("Humedad", Hum);
   d48e8:	ee07 4a90 	vmov	s15, r4
   d48ec:	4977      	ldr	r1, [pc, #476]	; (d4acc <loop+0x2fc>)
   d48ee:	4872      	ldr	r0, [pc, #456]	; (d4ab8 <loop+0x2e8>)

    DEBUG_PRINTLN(currentCsvData);

    readyToGetResetAndSendSensors = false;

    if (tickleWD)
   d48f0:	4c77      	ldr	r4, [pc, #476]	; (d4ad0 <loop+0x300>)
 ubidots.add("UnixTime", UT);//mandamos lo datos a la nube de ubidots
 ubidots.add("Velocidad del Viento", VV); 
 ubidots.add("Precipitacion", Precip);
 ubidots.add("Direccion del viento", DV);
 ubidots.add("Temperatura", Temp);
 ubidots.add("Humedad", Hum);
   d48f2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d48f6:	f004 f8fc 	bl	d8af2 <_ZN7Ubidots3addEPcf>
 ubidots.add("Milivolts", mVB);
   d48fa:	ee07 6a90 	vmov	s15, r6
   d48fe:	4975      	ldr	r1, [pc, #468]	; (d4ad4 <loop+0x304>)
   d4900:	486d      	ldr	r0, [pc, #436]	; (d4ab8 <loop+0x2e8>)
   d4902:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d4906:	f004 f8f4 	bl	d8af2 <_ZN7Ubidots3addEPcf>
 //ubidots.send(webhook_name, PUBLIC); 
ubidots.send(WEBHOOK_NAME, PUBLIC); 
   d490a:	4b73      	ldr	r3, [pc, #460]	; (d4ad8 <loop+0x308>)
   d490c:	486a      	ldr	r0, [pc, #424]	; (d4ab8 <loop+0x2e8>)
   d490e:	781a      	ldrb	r2, [r3, #0]
   d4910:	4b72      	ldr	r3, [pc, #456]	; (d4adc <loop+0x30c>)
   d4912:	6819      	ldr	r1, [r3, #0]
   d4914:	f004 f8f6 	bl	d8b04 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
    

    String currentCsvData = sensors.sensorReadingsToCsvUS();
   d4918:	495f      	ldr	r1, [pc, #380]	; (d4a98 <loop+0x2c8>)
   d491a:	a80c      	add	r0, sp, #48	; 0x30
   d491c:	f005 fca4 	bl	da268 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv>

    // Consider putting the SD logging in the IoTNode library
    printToSd.println(currentCsvData);
   d4920:	990c      	ldr	r1, [sp, #48]	; 0x30
   d4922:	486f      	ldr	r0, [pc, #444]	; (d4ae0 <loop+0x310>)
   d4924:	f007 fc27 	bl	dc176 <_ZN5Print7printlnEPKc>

    DEBUG_PRINTLN(currentCsvData);
   d4928:	f008 fb6c 	bl	dd004 <_Z16_fetch_usbserialv>
   d492c:	990c      	ldr	r1, [sp, #48]	; 0x30
   d492e:	f007 fc22 	bl	dc176 <_ZN5Print7printlnEPKc>

    readyToGetResetAndSendSensors = false;

    if (tickleWD)
   d4932:	7823      	ldrb	r3, [r4, #0]
    // Consider putting the SD logging in the IoTNode library
    printToSd.println(currentCsvData);

    DEBUG_PRINTLN(currentCsvData);

    readyToGetResetAndSendSensors = false;
   d4934:	2600      	movs	r6, #0
   d4936:	702e      	strb	r6, [r5, #0]

    if (tickleWD)
   d4938:	b11b      	cbz	r3, d4942 <loop+0x172>
    {
      node.tickleWatchdog();
   d493a:	486a      	ldr	r0, [pc, #424]	; (d4ae4 <loop+0x314>)
   d493c:	f000 fd6c 	bl	d5418 <_ZN7IoTNode14tickleWatchdogEv>
      tickleWD = false;
   d4940:	7026      	strb	r6, [r4, #0]
    }

    readyToGetResetAndSendSensors = false;
   d4942:	2300      	movs	r3, #0
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d4944:	4c68      	ldr	r4, [pc, #416]	; (d4ae8 <loop+0x318>)
    {
      node.tickleWatchdog();
      tickleWD = false;
    }

    readyToGetResetAndSendSensors = false;
   d4946:	702b      	strb	r3, [r5, #0]
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
   d4948:	f008 fb5c 	bl	dd004 <_Z16_fetch_usbserialv>
   d494c:	4967      	ldr	r1, [pc, #412]	; (d4aec <loop+0x31c>)
   d494e:	f007 fc12 	bl	dc176 <_ZN5Print7printlnEPKc>
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d4952:	220a      	movs	r2, #10
   d4954:	6821      	ldr	r1, [r4, #0]
   d4956:	a810      	add	r0, sp, #64	; 0x40
   d4958:	f007 fad9 	bl	dbf0e <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d495c:	a910      	add	r1, sp, #64	; 0x40
   d495e:	a814      	add	r0, sp, #80	; 0x50
   d4960:	f007 fa8e 	bl	dbe80 <_ZN6StringC1ERKS_>
   d4964:	4962      	ldr	r1, [pc, #392]	; (d4af0 <loop+0x320>)
   d4966:	a814      	add	r0, sp, #80	; 0x50
   d4968:	f007 fb35 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>

    String(config.unitType)+"|"+
   d496c:	7921      	ldrb	r1, [r4, #4]
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d496e:	4605      	mov	r5, r0

    String(config.unitType)+"|"+
   d4970:	a818      	add	r0, sp, #96	; 0x60
   d4972:	f007 faa9 	bl	dbec8 <_ZN6StringC1Ec>
   d4976:	a918      	add	r1, sp, #96	; 0x60
   d4978:	4628      	mov	r0, r5
   d497a:	f007 fb20 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d497e:	495c      	ldr	r1, [pc, #368]	; (d4af0 <loop+0x320>)
   d4980:	f007 fb29 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
    String(config.firmwareVersion)+"|"+
   d4984:	220a      	movs	r2, #10
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
   d4986:	4605      	mov	r5, r0
    String(config.firmwareVersion)+"|"+
   d4988:	68a1      	ldr	r1, [r4, #8]
   d498a:	a81c      	add	r0, sp, #112	; 0x70
   d498c:	f007 fabf 	bl	dbf0e <_ZN6StringC1Eih>
   d4990:	a91c      	add	r1, sp, #112	; 0x70
   d4992:	4628      	mov	r0, r5
   d4994:	f007 fb13 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d4998:	4955      	ldr	r1, [pc, #340]	; (d4af0 <loop+0x320>)
   d499a:	f007 fb1c 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
    String(config.particleTimeout)+"|"+
   d499e:	220a      	movs	r2, #10
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
   d49a0:	4605      	mov	r5, r0
    String(config.particleTimeout)+"|"+
   d49a2:	68e1      	ldr	r1, [r4, #12]
   d49a4:	a820      	add	r0, sp, #128	; 0x80
   d49a6:	f007 fab2 	bl	dbf0e <_ZN6StringC1Eih>
   d49aa:	a920      	add	r1, sp, #128	; 0x80
   d49ac:	4628      	mov	r0, r5
   d49ae:	f007 fb06 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d49b2:	494f      	ldr	r1, [pc, #316]	; (d4af0 <loop+0x320>)
   d49b4:	f007 fb0f 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
    String(config.latitude)+"|"+
   d49b8:	ed94 0a04 	vldr	s0, [r4, #16]
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
   d49bc:	4605      	mov	r5, r0
    String(config.latitude)+"|"+
   d49be:	2106      	movs	r1, #6
   d49c0:	a824      	add	r0, sp, #144	; 0x90
   d49c2:	f007 facb 	bl	dbf5c <_ZN6StringC1Efi>
   d49c6:	a924      	add	r1, sp, #144	; 0x90
   d49c8:	4628      	mov	r0, r5
   d49ca:	f007 faf8 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d49ce:	4948      	ldr	r1, [pc, #288]	; (d4af0 <loop+0x320>)
   d49d0:	f007 fb01 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
    String(config.longitude)+"|"+
   d49d4:	ed94 0a05 	vldr	s0, [r4, #20]
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
   d49d8:	4605      	mov	r5, r0
    String(config.longitude)+"|"+
   d49da:	2106      	movs	r1, #6
   d49dc:	a828      	add	r0, sp, #160	; 0xa0
   d49de:	f007 fabd 	bl	dbf5c <_ZN6StringC1Efi>
   d49e2:	a928      	add	r1, sp, #160	; 0xa0
   d49e4:	4628      	mov	r0, r5
   d49e6:	f007 faea 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d49ea:	4941      	ldr	r1, [pc, #260]	; (d4af0 <loop+0x320>)
   d49ec:	f007 faf3 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
    i2cDevices;
   d49f0:	4940      	ldr	r1, [pc, #256]	; (d4af4 <loop+0x324>)
   d49f2:	f007 fae4 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d49f6:	4601      	mov	r1, r0
   d49f8:	483f      	ldr	r0, [pc, #252]	; (d4af8 <loop+0x328>)
   d49fa:	f007 fa32 	bl	dbe62 <_ZN6StringaSERKS_>

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
    String(config.longitude)+"|"+
   d49fe:	a828      	add	r0, sp, #160	; 0xa0
   d4a00:	f007 f9b8 	bl	dbd74 <_ZN6StringD1Ev>
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
   d4a04:	a824      	add	r0, sp, #144	; 0x90
   d4a06:	f007 f9b5 	bl	dbd74 <_ZN6StringD1Ev>
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
   d4a0a:	a820      	add	r0, sp, #128	; 0x80
   d4a0c:	f007 f9b2 	bl	dbd74 <_ZN6StringD1Ev>
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
   d4a10:	a81c      	add	r0, sp, #112	; 0x70
   d4a12:	f007 f9af 	bl	dbd74 <_ZN6StringD1Ev>
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
   d4a16:	a818      	add	r0, sp, #96	; 0x60
   d4a18:	f007 f9ac 	bl	dbd74 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4a1c:	a814      	add	r0, sp, #80	; 0x50
   d4a1e:	f007 f9a9 	bl	dbd74 <_ZN6StringD1Ev>
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d4a22:	a810      	add	r0, sp, #64	; 0x40
   d4a24:	f007 f9a6 	bl	dbd74 <_ZN6StringD1Ev>
 ubidots.add("Milivolts", mVB);
 //ubidots.send(webhook_name, PUBLIC); 
ubidots.send(WEBHOOK_NAME, PUBLIC); 
    

    String currentCsvData = sensors.sensorReadingsToCsvUS();
   d4a28:	a80c      	add	r0, sp, #48	; 0x30
   d4a2a:	f007 f9a3 	bl	dbd74 <_ZN6StringD1Ev>
    String(config.longitude)+"|"+
    i2cDevices;

  }

  if (readyToCapturePollSensors)//si esta listo para sondear los sensores
   d4a2e:	4c33      	ldr	r4, [pc, #204]	; (d4afc <loop+0x32c>)
   d4a30:	7823      	ldrb	r3, [r4, #0]
   d4a32:	b1db      	cbz	r3, d4a6c <loop+0x29c>
  {
    sensors.captureTempHumidityPressure();//capturamos la temperatura, humedad, presion
   d4a34:	4818      	ldr	r0, [pc, #96]	; (d4a98 <loop+0x2c8>)
   d4a36:	f005 fa73 	bl	d9f20 <_ZN14WeatherSensors27captureTempHumidityPressureEv>
    sensors.captureWindVane();// capturamos la veleta del aire
   d4a3a:	4817      	ldr	r0, [pc, #92]	; (d4a98 <loop+0x2c8>)
   d4a3c:	f005 fa18 	bl	d9e70 <_ZN14WeatherSensors15captureWindVaneEv>
    //sensors.captureLightLux();//
    sensors.captureBatteryVoltage();//capturamos voltage de la bateria
   d4a40:	4815      	ldr	r0, [pc, #84]	; (d4a98 <loop+0x2c8>)
   d4a42:	f005 f8a9 	bl	d9b98 <_ZN14WeatherSensors21captureBatteryVoltageEv>
   d4a46:	4b19      	ldr	r3, [pc, #100]	; (d4aac <loop+0x2dc>)
   d4a48:	492d      	ldr	r1, [pc, #180]	; (d4b00 <loop+0x330>)
   d4a4a:	781b      	ldrb	r3, [r3, #0]
    readyToCapturePollSensors = false;
   d4a4c:	2200      	movs	r2, #0
   d4a4e:	7022      	strb	r2, [r4, #0]
   d4a50:	a82c      	add	r0, sp, #176	; 0xb0
   d4a52:	f88d 3000 	strb.w	r3, [sp]
   d4a56:	233c      	movs	r3, #60	; 0x3c
   d4a58:	f008 f85a 	bl	dcb10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4a5c:	a82d      	add	r0, sp, #180	; 0xb4
   d4a5e:	f7ff fea1 	bl	d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    #ifdef IOTDEBUG
    Particle.publish("Capturing sensors",PRIVATE);
    DEBUG_PRINTLN("capture");
   d4a62:	f008 facf 	bl	dd004 <_Z16_fetch_usbserialv>
   d4a66:	4927      	ldr	r1, [pc, #156]	; (d4b04 <loop+0x334>)
   d4a68:	f007 fb85 	bl	dc176 <_ZN5Print7printlnEPKc>
    #endif
  }
  // If flag set then reset here
  if (resetDevice)
   d4a6c:	4b26      	ldr	r3, [pc, #152]	; (d4b08 <loop+0x338>)
   d4a6e:	781b      	ldrb	r3, [r3, #0]
   d4a70:	b10b      	cbz	r3, d4a76 <loop+0x2a6>
  {
    System.reset();
   d4a72:	f006 fdeb 	bl	db64c <_ZN11SystemClass5resetEv>
  }

}
   d4a76:	b06c      	add	sp, #432	; 0x1b0
   d4a78:	ecbd 8b02 	vpop	{d8}
   d4a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4a80:	d2f1a9fc 	.word	0xd2f1a9fc
   d4a84:	3f50624d 	.word	0x3f50624d
   d4a88:	66666666 	.word	0x66666666
   d4a8c:	40711266 	.word	0x40711266
   d4a90:	2003bfc0 	.word	0x2003bfc0
   d4a94:	2003d6c0 	.word	0x2003d6c0
   d4a98:	2003bfcc 	.word	0x2003bfcc
   d4a9c:	408f4000 	.word	0x408f4000
   d4aa0:	40240000 	.word	0x40240000
   d4aa4:	2003bf50 	.word	0x2003bf50
   d4aa8:	000e4230 	.word	0x000e4230
   d4aac:	2003bf8c 	.word	0x2003bf8c
   d4ab0:	000e4320 	.word	0x000e4320
   d4ab4:	000e4299 	.word	0x000e4299
   d4ab8:	2003bf98 	.word	0x2003bf98
   d4abc:	000e42a2 	.word	0x000e42a2
   d4ac0:	000e42b7 	.word	0x000e42b7
   d4ac4:	000e42c5 	.word	0x000e42c5
   d4ac8:	000e42da 	.word	0x000e42da
   d4acc:	000e42e6 	.word	0x000e42e6
   d4ad0:	2003bf4c 	.word	0x2003bf4c
   d4ad4:	000e42ee 	.word	0x000e42ee
   d4ad8:	2003bedc 	.word	0x2003bedc
   d4adc:	2003bbf0 	.word	0x2003bbf0
   d4ae0:	2003bcf8 	.word	0x2003bcf8
   d4ae4:	2003d6d8 	.word	0x2003d6d8
   d4ae8:	2003bfa8 	.word	0x2003bfa8
   d4aec:	000e42f8 	.word	0x000e42f8
   d4af0:	000e45eb 	.word	0x000e45eb
   d4af4:	2003bf00 	.word	0x2003bf00
   d4af8:	2003dbc4 	.word	0x2003dbc4
   d4afc:	2003bf96 	.word	0x2003bf96
   d4b00:	000e4316 	.word	0x000e4316
   d4b04:	000e4328 	.word	0x000e4328
   d4b08:	2003dbd4 	.word	0x2003dbd4

000d4b0c <_Z7syncRTCv>:
  timeToNextSendMS = millis();
  readyToGetResetAndSendSensors = true;
}

bool syncRTC()// sincroniza el reloj en tiempo real
{
   d4b0c:	b570      	push	{r4, r5, r6, lr}
   d4b0e:	b094      	sub	sp, #80	; 0x50
   d4b10:	f006 f926 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b14:	4d2f      	ldr	r5, [pc, #188]	; (d4bd4 <_Z7syncRTCv+0xc8>)

    do
    {
      Particle.process();//comprueba el módulo Wi-Fi en busca de mensajes entrantes de la nube y procesa cualquier mensaje que haya entrado.
      delay(100);
    } while (Time.now() < 1465823822 && millis()-syncTimer<500);
   d4b16:	4e30      	ldr	r6, [pc, #192]	; (d4bd8 <_Z7syncRTCv+0xcc>)
   d4b18:	4604      	mov	r4, r0
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4b1a:	f006 f921 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b1e:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4b20:	f006 fbbc 	bl	db29c <spark_process>
    unsigned long syncTimer = millis();

    do
    {
      Particle.process();//comprueba el módulo Wi-Fi en busca de mensajes entrantes de la nube y procesa cualquier mensaje que haya entrado.
      delay(100);
   d4b24:	2064      	movs	r0, #100	; 0x64
   d4b26:	f007 fe01 	bl	dc72c <delay>
    } while (Time.now() < 1465823822 && millis()-syncTimer<500);
   d4b2a:	f007 fdb4 	bl	dc696 <_ZN9TimeClass3nowEv>
   d4b2e:	42b0      	cmp	r0, r6
   d4b30:	dc05      	bgt.n	d4b3e <_Z7syncRTCv+0x32>
   d4b32:	f006 f915 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
   d4b36:	1b00      	subs	r0, r0, r4
   d4b38:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4b3c:	d3ed      	bcc.n	d4b1a <_Z7syncRTCv+0xe>

    if (Time.now() > 1465823822)
   d4b3e:	f007 fdaa 	bl	dc696 <_ZN9TimeClass3nowEv>
   d4b42:	4b26      	ldr	r3, [pc, #152]	; (d4bdc <_Z7syncRTCv+0xd0>)
   d4b44:	4298      	cmp	r0, r3
   d4b46:	dd07      	ble.n	d4b58 <_Z7syncRTCv+0x4c>
    {
        syncNow = Time.now();//pone el tiempo en la memoria
   d4b48:	f007 fda5 	bl	dc696 <_ZN9TimeClass3nowEv>
        node.setUnixTime(syncNow);//sincroniza el tiempo del node
   d4b4c:	4601      	mov	r1, r0
   d4b4e:	4824      	ldr	r0, [pc, #144]	; (d4be0 <_Z7syncRTCv+0xd4>)
   d4b50:	f000 fc7c 	bl	d544c <_ZN7IoTNode11setUnixTimeEm>
        sync = true;// la sincronizacion fue true
   d4b54:	2001      	movs	r0, #1
   d4b56:	e03a      	b.n	d4bce <_Z7syncRTCv+0xc2>
    }

    if (!sync)
    {
        #ifdef DEBUG
        Particle.publish("Time NOT synced",String(Time.format(syncNow, TIME_FORMAT_ISO8601_FULL)+"  "+Time.format(node.unixTime(), TIME_FORMAT_ISO8601_FULL)),PRIVATE);//publicamosa evento de tiempo no sinc
   d4b58:	4c22      	ldr	r4, [pc, #136]	; (d4be4 <_Z7syncRTCv+0xd8>)
   d4b5a:	4923      	ldr	r1, [pc, #140]	; (d4be8 <_Z7syncRTCv+0xdc>)
   d4b5c:	6823      	ldr	r3, [r4, #0]
   d4b5e:	2200      	movs	r2, #0
   d4b60:	a804      	add	r0, sp, #16
   d4b62:	f007 fd45 	bl	dc5f0 <_ZN9TimeClass6formatElPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4b66:	a904      	add	r1, sp, #16
   d4b68:	a808      	add	r0, sp, #32
   d4b6a:	f007 f989 	bl	dbe80 <_ZN6StringC1ERKS_>
   d4b6e:	491f      	ldr	r1, [pc, #124]	; (d4bec <_Z7syncRTCv+0xe0>)
   d4b70:	a808      	add	r0, sp, #32
   d4b72:	f007 fa30 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   d4b76:	4605      	mov	r5, r0
   d4b78:	4819      	ldr	r0, [pc, #100]	; (d4be0 <_Z7syncRTCv+0xd4>)
   d4b7a:	f000 fc61 	bl	d5440 <_ZN7IoTNode8unixTimeEv>
   d4b7e:	6823      	ldr	r3, [r4, #0]
   d4b80:	4919      	ldr	r1, [pc, #100]	; (d4be8 <_Z7syncRTCv+0xdc>)
   d4b82:	4602      	mov	r2, r0
   d4b84:	a80c      	add	r0, sp, #48	; 0x30
   d4b86:	f007 fd33 	bl	dc5f0 <_ZN9TimeClass6formatElPKc>
   d4b8a:	a90c      	add	r1, sp, #48	; 0x30
   d4b8c:	4628      	mov	r0, r5
   d4b8e:	f007 fa16 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   d4b92:	4601      	mov	r1, r0
   d4b94:	a810      	add	r0, sp, #64	; 0x40
   d4b96:	f007 f973 	bl	dbe80 <_ZN6StringC1ERKS_>
   d4b9a:	4b15      	ldr	r3, [pc, #84]	; (d4bf0 <_Z7syncRTCv+0xe4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4b9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4b9e:	781b      	ldrb	r3, [r3, #0]
   d4ba0:	4914      	ldr	r1, [pc, #80]	; (d4bf4 <_Z7syncRTCv+0xe8>)
   d4ba2:	f88d 3000 	strb.w	r3, [sp]
   d4ba6:	a802      	add	r0, sp, #8
   d4ba8:	233c      	movs	r3, #60	; 0x3c
   d4baa:	f007 ffb1 	bl	dcb10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4bae:	a803      	add	r0, sp, #12
   d4bb0:	f7ff fdf8 	bl	d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bb4:	a810      	add	r0, sp, #64	; 0x40
   d4bb6:	f007 f8dd 	bl	dbd74 <_ZN6StringD1Ev>
   d4bba:	a80c      	add	r0, sp, #48	; 0x30
   d4bbc:	f007 f8da 	bl	dbd74 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4bc0:	a808      	add	r0, sp, #32
   d4bc2:	f007 f8d7 	bl	dbd74 <_ZN6StringD1Ev>
   d4bc6:	a804      	add	r0, sp, #16
   d4bc8:	f007 f8d4 	bl	dbd74 <_ZN6StringD1Ev>
}

bool syncRTC()// sincroniza el reloj en tiempo real
{
    uint32_t syncNow;// variable 32 bits 
    bool sync = false;// variable sync igualada a false
   d4bcc:	2000      	movs	r0, #0
        #ifdef DEBUG
        Particle.publish("Time NOT synced",String(Time.format(syncNow, TIME_FORMAT_ISO8601_FULL)+"  "+Time.format(node.unixTime(), TIME_FORMAT_ISO8601_FULL)),PRIVATE);//publicamosa evento de tiempo no sinc
        #endif
    }
    return sync;
}
   d4bce:	b014      	add	sp, #80	; 0x50
   d4bd0:	bd70      	pop	{r4, r5, r6, pc}
   d4bd2:	bf00      	nop
   d4bd4:	2003e608 	.word	0x2003e608
   d4bd8:	575eb24d 	.word	0x575eb24d
   d4bdc:	575eb24e 	.word	0x575eb24e
   d4be0:	2003d6d8 	.word	0x2003d6d8
   d4be4:	2003bbf4 	.word	0x2003bbf4
   d4be8:	2003e218 	.word	0x2003e218
   d4bec:	000e4d89 	.word	0x000e4d89
   d4bf0:	2003bf8c 	.word	0x2003bf8c
   d4bf4:	000e4330 	.word	0x000e4330

000d4bf8 <setup>:
    DEBUG_PRINTLN("Particle connected");
  }
}
Adafruit_ADS1115 ads;//ads1115 con direccion default
// setup() runs once, when the device is first turned on.
void setup() {
   d4bf8:	b530      	push	{r4, r5, lr}
  ubidots.setDebug(true);
   d4bfa:	2101      	movs	r1, #1
    DEBUG_PRINTLN("Particle connected");
  }
}
Adafruit_ADS1115 ads;//ads1115 con direccion default
// setup() runs once, when the device is first turned on.
void setup() {
   d4bfc:	b085      	sub	sp, #20
  ubidots.setDebug(true);
   d4bfe:	4848      	ldr	r0, [pc, #288]	; (d4d20 <setup+0x128>)
   d4c00:	f003 ff83 	bl	d8b0a <_ZN7Ubidots8setDebugEb>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4c04:	2300      	movs	r3, #0
   d4c06:	2202      	movs	r2, #2
   d4c08:	4946      	ldr	r1, [pc, #280]	; (d4d24 <setup+0x12c>)
   d4c0a:	4847      	ldr	r0, [pc, #284]	; (d4d28 <setup+0x130>)
   d4c0c:	f006 fb3e 	bl	db28c <spark_variable>
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d4c10:	2500      	movs	r5, #0
        extra.size = sizeof(extra);
   d4c12:	230c      	movs	r3, #12
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d4c14:	9501      	str	r5, [sp, #4]
        extra.size = sizeof(extra);
   d4c16:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
   d4c1a:	4b44      	ldr	r3, [pc, #272]	; (d4d2c <setup+0x134>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4c1c:	4944      	ldr	r1, [pc, #272]	; (d4d30 <setup+0x138>)
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
   d4c1e:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4c20:	2204      	movs	r2, #4
   d4c22:	ab01      	add	r3, sp, #4
   d4c24:	4843      	ldr	r0, [pc, #268]	; (d4d34 <setup+0x13c>)
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d4c26:	9503      	str	r5, [sp, #12]
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4c28:	f006 fb30 	bl	db28c <spark_variable>
  // register cloudy things
  Particle.variable("version",firmwareVersion);
  Particle.variable("devicestatus",deviceStatus);

  Serial.begin(115200);//inicializamos el puerto serial
   d4c2c:	f008 f9ea 	bl	dd004 <_Z16_fetch_usbserialv>
   d4c30:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4c34:	f008 f9da 	bl	dcfec <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   d4c38:	f008 fb1a 	bl	dd270 <_Z22__fetch_global_Serial1v>
   d4c3c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4c40:	f008 fb10 	bl	dd264 <_ZN11USARTSerial5beginEm>
  
  ads.begin();
   d4c44:	483c      	ldr	r0, [pc, #240]	; (d4d38 <setup+0x140>)
   d4c46:	f001 f82d 	bl	d5ca4 <_ZN16Adafruit_ADS10155beginEv>

  node.begin();
   d4c4a:	483c      	ldr	r0, [pc, #240]	; (d4d3c <setup+0x144>)
   d4c4c:	f000 fc20 	bl	d5490 <_ZN7IoTNode5beginEv>
  node.setPowerON(EXT3V3,true);
   d4c50:	2201      	movs	r2, #1
   d4c52:	2102      	movs	r1, #2
   d4c54:	4839      	ldr	r0, [pc, #228]	; (d4d3c <setup+0x144>)
   d4c56:	f000 fbd9 	bl	d540c <_ZN7IoTNode10setPowerONE9powerNameb>
  node.setPowerON(EXT5V,true);
   d4c5a:	2201      	movs	r2, #1
   d4c5c:	2103      	movs	r1, #3
   d4c5e:	4837      	ldr	r0, [pc, #220]	; (d4d3c <setup+0x144>)
   d4c60:	f000 fbd4 	bl	d540c <_ZN7IoTNode10setPowerONE9powerNameb>
   d4c64:	f006 f87c 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
  tiempo2= millis();
   d4c68:	4b35      	ldr	r3, [pc, #212]	; (d4d40 <setup+0x148>)
   d4c6a:	6018      	str	r0, [r3, #0]
  #ifdef IOTDEBUG
  delay(5000);
   d4c6c:	f241 3088 	movw	r0, #5000	; 0x1388
   d4c70:	f007 fd5c 	bl	dc72c <delay>
 
  checkI2CDevices();//le decimos q revise los dispositivos i2c 
   d4c74:	f7ff fbc4 	bl	d4400 <_Z15checkI2CDevicesv>
  scanI2C();//y haga el escaneo
   d4c78:	f7ff fcb8 	bl	d45ec <_Z7scanI2Cv>
  #endif

    // Check for I2C devices again
  if (!node.ok())//si en nodo no esta bien 
   d4c7c:	482f      	ldr	r0, [pc, #188]	; (d4d3c <setup+0x144>)
   d4c7e:	f000 fb8f 	bl	d53a0 <_ZN7IoTNode2okEv>
   d4c82:	4604      	mov	r4, r0
   d4c84:	b9c8      	cbnz	r0, d4cba <setup+0xc2>
  {
    #ifdef IOTDEBUG
    // Particle.publish("Unplugged","Plug the device into the IoT Node",PRIVATE);
    DEBUG_PRINTLN("Plug the device into the IoT Node");//conecta el dispositivo en el nodo
   d4c86:	f008 f9bd 	bl	dd004 <_Z16_fetch_usbserialv>
   d4c8a:	492e      	ldr	r1, [pc, #184]	; (d4d44 <setup+0x14c>)
   d4c8c:	f007 fa73 	bl	dc176 <_ZN5Print7printlnEPKc>
    #endif
    deviceStatus="Device is not plugged into the IoTNode";//el device estatus es igual a los dispositivos no estan conectados
   d4c90:	492d      	ldr	r1, [pc, #180]	; (d4d48 <setup+0x150>)
   d4c92:	4827      	ldr	r0, [pc, #156]	; (d4d30 <setup+0x138>)
   d4c94:	f007 f907 	bl	dbea6 <_ZN6StringaSEPKc>
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4c98:	4622      	mov	r2, r4
   d4c9a:	2101      	movs	r1, #1
   d4c9c:	482b      	ldr	r0, [pc, #172]	; (d4d4c <setup+0x154>)
   d4c9e:	f006 fa47 	bl	db130 <led_set_status_active>
    fadeRed.setActive(true);//encendemos el led parpadeante de color rojo
    DEBUG_PRINTLN("Resetting in 10 seconds");//imprimimos
   d4ca2:	f008 f9af 	bl	dd004 <_Z16_fetch_usbserialv>
   d4ca6:	492a      	ldr	r1, [pc, #168]	; (d4d50 <setup+0x158>)
   d4ca8:	f007 fa65 	bl	dc176 <_ZN5Print7printlnEPKc>
    delay(10000);
   d4cac:	f242 7010 	movw	r0, #10000	; 0x2710
   d4cb0:	f007 fd3c 	bl	dc72c <delay>
    System.reset();//reseteamos el sistema
   d4cb4:	f006 fcca 	bl	db64c <_ZN11SystemClass5resetEv>
   d4cb8:	e030      	b.n	d4d1c <setup+0x124>
  }
  else
  {
    
    connect();
    framConfig.read(0, (uint8_t*)&config);
   d4cba:	4c26      	ldr	r4, [pc, #152]	; (d4d54 <setup+0x15c>)
    System.reset();//reseteamos el sistema
  }
  else
  {
    
    connect();
   d4cbc:	f7ff fcde 	bl	d467c <_Z7connectv>
    framConfig.read(0, (uint8_t*)&config);
   d4cc0:	4622      	mov	r2, r4
   d4cc2:	4629      	mov	r1, r5
   d4cc4:	4824      	ldr	r0, [pc, #144]	; (d4d58 <setup+0x160>)
   d4cc6:	f000 fcfe 	bl	d56c6 <_ZN9framArray4readEmPh>
      // 1. A new ThingSpeak channel is created
      // 2. The channel id and keys are Saved
      // 3. a firstRunTest variable is saved in persistent memory as a flag to indicate
      // that the IoT node has been set up already.

    if (config.testCheck != firstRunTest)
   d4cca:	4b24      	ldr	r3, [pc, #144]	; (d4d5c <setup+0x164>)
   d4ccc:	6822      	ldr	r2, [r4, #0]
   d4cce:	429a      	cmp	r2, r3
   d4cd0:	d008      	beq.n	d4ce4 <setup+0xec>
    {
        config.testCheck = firstRunTest;
   d4cd2:	6023      	str	r3, [r4, #0]
        /// Defaults
        config.particleTimeout = 20000;
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d4cd4:	4622      	mov	r2, r4

    if (config.testCheck != firstRunTest)
    {
        config.testCheck = firstRunTest;
        /// Defaults
        config.particleTimeout = 20000;
   d4cd6:	f644 6320 	movw	r3, #20000	; 0x4e20
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d4cda:	4629      	mov	r1, r5
   d4cdc:	481e      	ldr	r0, [pc, #120]	; (d4d58 <setup+0x160>)

    if (config.testCheck != firstRunTest)
    {
        config.testCheck = firstRunTest;
        /// Defaults
        config.particleTimeout = 20000;
   d4cde:	60e3      	str	r3, [r4, #12]
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d4ce0:	f000 fce2 	bl	d56a8 <_ZN9framArray5writeEmPh>
    }
      // end of first run code.

      if (syncRTC())//si el reloj ha sido sincronizado
   d4ce4:	f7ff ff12 	bl	d4b0c <_Z7syncRTCv>
   d4ce8:	b118      	cbz	r0, d4cf2 <setup+0xfa>
      {
        DEBUG_PRINTLN("RTC sync'ed with cloud");//imprime q el reloj esta sinc con la nube
   d4cea:	f008 f98b 	bl	dd004 <_Z16_fetch_usbserialv>
   d4cee:	491c      	ldr	r1, [pc, #112]	; (d4d60 <setup+0x168>)
   d4cf0:	e002      	b.n	d4cf8 <setup+0x100>
      }
      else
      {
        DEBUG_PRINTLN("RTC not sync'ed with cloud");//imprime q el reloj no esta sinc con la nube
   d4cf2:	f008 f987 	bl	dd004 <_Z16_fetch_usbserialv>
   d4cf6:	491b      	ldr	r1, [pc, #108]	; (d4d64 <setup+0x16c>)
   d4cf8:	f007 fa3d 	bl	dc176 <_ZN5Print7printlnEPKc>
      }
      // load pointers
      dataRing.initialize();
   d4cfc:	481a      	ldr	r0, [pc, #104]	; (d4d68 <setup+0x170>)
   d4cfe:	f000 fd0b 	bl	d5718 <_ZN8framRing10initializeEv>
      sensors.begin();
   d4d02:	481a      	ldr	r0, [pc, #104]	; (d4d6c <setup+0x174>)
   d4d04:	f005 fc2e 	bl	da564 <_ZN14WeatherSensors5beginEv>
      pollSensorTimer.start();;//comienza a sondear
   d4d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4d0c:	4818      	ldr	r0, [pc, #96]	; (d4d70 <setup+0x178>)
   d4d0e:	f7ff fb61 	bl	d43d4 <_ZN5Timer5startEj>
      sensorSendTimer.start();  //comienza a mandar datos
   d4d12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4d16:	4817      	ldr	r0, [pc, #92]	; (d4d74 <setup+0x17c>)
   d4d18:	f7ff fb5c 	bl	d43d4 <_ZN5Timer5startEj>
  }
}
   d4d1c:	b005      	add	sp, #20
   d4d1e:	bd30      	pop	{r4, r5, pc}
   d4d20:	2003bf98 	.word	0x2003bf98
   d4d24:	000e40dc 	.word	0x000e40dc
   d4d28:	000e4340 	.word	0x000e4340
   d4d2c:	000d40bb 	.word	0x000d40bb
   d4d30:	2003dbc4 	.word	0x2003dbc4
   d4d34:	000e4348 	.word	0x000e4348
   d4d38:	2003bfc2 	.word	0x2003bfc2
   d4d3c:	2003d6d8 	.word	0x2003d6d8
   d4d40:	2003bfc8 	.word	0x2003bfc8
   d4d44:	000e4355 	.word	0x000e4355
   d4d48:	000e4377 	.word	0x000e4377
   d4d4c:	2003be30 	.word	0x2003be30
   d4d50:	000e439e 	.word	0x000e439e
   d4d54:	2003bfa8 	.word	0x2003bfa8
   d4d58:	2003bee0 	.word	0x2003bee0
   d4d5c:	00111f4c 	.word	0x00111f4c
   d4d60:	000e43b6 	.word	0x000e43b6
   d4d64:	000e43cd 	.word	0x000e43cd
   d4d68:	2003bf10 	.word	0x2003bf10
   d4d6c:	2003bfcc 	.word	0x2003bfcc
   d4d70:	2003bf54 	.word	0x2003bf54
   d4d74:	2003bf70 	.word	0x2003bf70

000d4d78 <_Z9unpluggedv>:
    }
    return sync;
}

void unplugged()
{
   d4d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4d7a:	4b0a      	ldr	r3, [pc, #40]	; (d4da4 <_Z9unpluggedv+0x2c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4d7c:	4c0a      	ldr	r4, [pc, #40]	; (d4da8 <_Z9unpluggedv+0x30>)
   d4d7e:	781b      	ldrb	r3, [r3, #0]
   d4d80:	490a      	ldr	r1, [pc, #40]	; (d4dac <_Z9unpluggedv+0x34>)
   d4d82:	f88d 3000 	strb.w	r3, [sp]
   d4d86:	4622      	mov	r2, r4
   d4d88:	233c      	movs	r3, #60	; 0x3c
   d4d8a:	a802      	add	r0, sp, #8
   d4d8c:	f007 fec0 	bl	dcb10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4d90:	a803      	add	r0, sp, #12
   d4d92:	f7ff fd07 	bl	d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  #ifdef IOTDEBUG
  Particle.publish("Unplugged","Plug the device into the IoT Node",PRIVATE);//publica un eveento privado
  DEBUG_PRINTLN("Plug the device into the IoT Node");//imprime el mensaje
   d4d96:	f008 f935 	bl	dd004 <_Z16_fetch_usbserialv>
   d4d9a:	4621      	mov	r1, r4
   d4d9c:	f007 f9eb 	bl	dc176 <_ZN5Print7printlnEPKc>
  #endif

}
   d4da0:	b004      	add	sp, #16
   d4da2:	bd10      	pop	{r4, pc}
   d4da4:	2003bf8c 	.word	0x2003bf8c
   d4da8:	000e4355 	.word	0x000e4355
   d4dac:	000e43e8 	.word	0x000e43e8

000d4db0 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   d4db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4db2:	b089      	sub	sp, #36	; 0x24
   d4db4:	4604      	mov	r4, r0
   d4db6:	a802      	add	r0, sp, #8
   d4db8:	e880 0006 	stmia.w	r0, {r1, r2}
   d4dbc:	461d      	mov	r5, r3
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4dbe:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4dc0:	2300      	movs	r3, #0
   d4dc2:	460f      	mov	r7, r1
   d4dc4:	9e03      	ldr	r6, [sp, #12]
   d4dc6:	9306      	str	r3, [sp, #24]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4dc8:	f7ff f967 	bl	d409a <_Znwj>
   d4dcc:	b110      	cbz	r0, d4dd4 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x24>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d4dce:	6007      	str	r7, [r0, #0]
   d4dd0:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4dd2:	6085      	str	r5, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4dd4:	4b0b      	ldr	r3, [pc, #44]	; (d4e04 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x54>)
   d4dd6:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   d4dd8:	4b0b      	ldr	r3, [pc, #44]	; (d4e08 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x58>)
   d4dda:	9306      	str	r3, [sp, #24]
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d4ddc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4de0:	9004      	str	r0, [sp, #16]
   d4de2:	9300      	str	r3, [sp, #0]
   d4de4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d4de8:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
   d4dec:	a904      	add	r1, sp, #16
   d4dee:	4620      	mov	r0, r4
   d4df0:	f008 f964 	bl	dd0bc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
   d4df4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4df6:	a804      	add	r0, sp, #16
   d4df8:	f7ff fa73 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
}
   d4dfc:	4620      	mov	r0, r4
   d4dfe:	b009      	add	sp, #36	; 0x24
   d4e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e02:	bf00      	nop
   d4e04:	000d40ed 	.word	0x000d40ed
   d4e08:	000d4271 	.word	0x000d4271

000d4e0c <_GLOBAL__sub_I_prom_o3>:
    cont=0;
    tiempo2=millis();
    sum=0;
    prom_o3 = 0;
}
}
   d4e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4e10:	4bbe      	ldr	r3, [pc, #760]	; (d510c <_GLOBAL__sub_I_prom_o3+0x300>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4e12:	4fbf      	ldr	r7, [pc, #764]	; (d5110 <_GLOBAL__sub_I_prom_o3+0x304>)
   d4e14:	2400      	movs	r4, #0
   d4e16:	701c      	strb	r4, [r3, #0]
   d4e18:	4bbe      	ldr	r3, [pc, #760]	; (d5114 <_GLOBAL__sub_I_prom_o3+0x308>)
   d4e1a:	b08a      	sub	sp, #40	; 0x28
   d4e1c:	2501      	movs	r5, #1
   d4e1e:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4e20:	f005 fef6 	bl	dac10 <HAL_Pin_Map>
   d4e24:	f005 ff9c 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
//#endif
unsigned long tiempo1=0;//timer para promediar los sensores spec
    unsigned long tiempo2=0;
    unsigned long tiempo3=0;
const char* WEBHOOK_NAME = "Ubidots";
Ubidots ubidots("webhook", UBI_PARTICLE);
   d4e28:	2203      	movs	r2, #3
   d4e2a:	49bb      	ldr	r1, [pc, #748]	; (d5118 <_GLOBAL__sub_I_prom_o3+0x30c>)
   d4e2c:	48bb      	ldr	r0, [pc, #748]	; (d511c <_GLOBAL__sub_I_prom_o3+0x310>)
   d4e2e:	f003 fe33 	bl	d8a98 <_ZN7UbidotsC1EPc11IotProtocol>
   d4e32:	4abb      	ldr	r2, [pc, #748]	; (d5120 <_GLOBAL__sub_I_prom_o3+0x314>)
   d4e34:	49bb      	ldr	r1, [pc, #748]	; (d5124 <_GLOBAL__sub_I_prom_o3+0x318>)
   d4e36:	48b9      	ldr	r0, [pc, #740]	; (d511c <_GLOBAL__sub_I_prom_o3+0x310>)
   d4e38:	f008 ffd2 	bl	ddde0 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4e3c:	4bba      	ldr	r3, [pc, #744]	; (d5128 <_GLOBAL__sub_I_prom_o3+0x31c>)
   d4e3e:	6839      	ldr	r1, [r7, #0]
   d4e40:	71dc      	strb	r4, [r3, #7]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4e42:	2264      	movs	r2, #100	; 0x64
   d4e44:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4e48:	4ab8      	ldr	r2, [pc, #736]	; (d512c <_GLOBAL__sub_I_prom_o3+0x320>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4e4a:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d4e4e:	ea11 0605 	ands.w	r6, r1, r5
   d4e52:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d4e56:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d4e5a:	f883 5474 	strb.w	r5, [r3, #1140]	; 0x474
   d4e5e:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d4e62:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d4e66:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d4e6a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d4e6e:	461c      	mov	r4, r3
   d4e70:	4615      	mov	r5, r2
   d4e72:	d10a      	bne.n	d4e8a <_GLOBAL__sub_I_prom_o3+0x7e>
   d4e74:	4638      	mov	r0, r7
   d4e76:	f7ff f918 	bl	d40aa <__cxa_guard_acquire>
   d4e7a:	b130      	cbz	r0, d4e8a <_GLOBAL__sub_I_prom_o3+0x7e>
   d4e7c:	4631      	mov	r1, r6
   d4e7e:	48ac      	ldr	r0, [pc, #688]	; (d5130 <_GLOBAL__sub_I_prom_o3+0x324>)
   d4e80:	f006 fb10 	bl	db4a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4e84:	4638      	mov	r0, r7
   d4e86:	f7ff f915 	bl	d40b4 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4e8a:	4ba9      	ldr	r3, [pc, #676]	; (d5130 <_GLOBAL__sub_I_prom_o3+0x324>)
   d4e8c:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
  #define DEBUG_PRINTLN(...)
#endif

const int SD_CHIP_SELECT = N_D0;// memoria sd
SdFat sd;//La biblioteca Arduino SdFat proporciona acceso de lectura / escritura a sistemas de archivos FAT16 / FAT32 en tarjetas flash SD / SDHC.
SdCardPrintHandler printToSd(sd, SD_CHIP_SELECT, SPI_FULL_SPEED);//sd es el SdFatobjeto, como se describe en la sección anterior
   d4e90:	4ca8      	ldr	r4, [pc, #672]	; (d5134 <_GLOBAL__sub_I_prom_o3+0x328>)
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4e92:	4ba9      	ldr	r3, [pc, #676]	; (d5138 <_GLOBAL__sub_I_prom_o3+0x32c>)
   d4e94:	9506      	str	r5, [sp, #24]
   d4e96:	ae06      	add	r6, sp, #24
   d4e98:	2500      	movs	r5, #0
   d4e9a:	2701      	movs	r7, #1
   d4e9c:	9308      	str	r3, [sp, #32]
   d4e9e:	2202      	movs	r2, #2
   d4ea0:	4633      	mov	r3, r6
   d4ea2:	49a1      	ldr	r1, [pc, #644]	; (d5128 <_GLOBAL__sub_I_prom_o3+0x31c>)
   d4ea4:	f88d 501c 	strb.w	r5, [sp, #28]
   d4ea8:	4620      	mov	r0, r4
   d4eaa:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
   d4eae:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
   d4eb2:	f000 fcb1 	bl	d5818 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE>
   d4eb6:	4a9a      	ldr	r2, [pc, #616]	; (d5120 <_GLOBAL__sub_I_prom_o3+0x314>)
   d4eb8:	49a0      	ldr	r1, [pc, #640]	; (d513c <_GLOBAL__sub_I_prom_o3+0x330>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4eba:	f8df 9300 	ldr.w	r9, [pc, #768]	; d51bc <_GLOBAL__sub_I_prom_o3+0x3b0>
   d4ebe:	4620      	mov	r0, r4
   d4ec0:	f008 ff8e 	bl	ddde0 <__aeabi_atexit>
	 * The maximum number of log files to keep is enforced at startup, when a SD card is inserted, and when
	 * the current log file is full.
	 *
	 * @param value Number of files to kee. Values are 1 <= num <= 999999 (size_t)
	 */
	inline SdCardPrintHandler &withMaxFilesToKeep(size_t value) { maxFilesToKeep = value; return *this; };
   d4ec4:	f640 33b8 	movw	r3, #3000	; 0xbb8
inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d4ec8:	462a      	mov	r2, r5
   d4eca:	2114      	movs	r1, #20
   d4ecc:	2003      	movs	r0, #3
   d4ece:	62a3      	str	r3, [r4, #40]	; 0x28
   d4ed0:	f006 f970 	bl	db1b4 <led_pattern_period>
   d4ed4:	f04f 081e 	mov.w	r8, #30
   d4ed8:	4603      	mov	r3, r0
   d4eda:	f8cd 8000 	str.w	r8, [sp]
   d4ede:	9701      	str	r7, [sp, #4]
   d4ee0:	2203      	movs	r2, #3
   d4ee2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   d4ee6:	4896      	ldr	r0, [pc, #600]	; (d5140 <_GLOBAL__sub_I_prom_o3+0x334>)
	    _M_manager = &_My_handler::_M_manager;
   d4ee8:	4c96      	ldr	r4, [pc, #600]	; (d5144 <_GLOBAL__sub_I_prom_o3+0x338>)
   d4eea:	f006 fab3 	bl	db454 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
#define SENSOR_SEND_TIME_MS 60000// define un tiempo en milisegundos de envio de datos de los sensores
#define SENSOR_POLL_TIME_MS 2000// define un tiempo en ms de tiempo de sondeo de sensor

#define IOTDEBUG

LEDStatus fadeRed(RGB_COLOR_RED, LED_PATTERN_FADE, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);//led paradeante solor rojo
   d4eee:	4a8c      	ldr	r2, [pc, #560]	; (d5120 <_GLOBAL__sub_I_prom_o3+0x314>)
   d4ef0:	4995      	ldr	r1, [pc, #596]	; (d5148 <_GLOBAL__sub_I_prom_o3+0x33c>)
   d4ef2:	4893      	ldr	r0, [pc, #588]	; (d5140 <_GLOBAL__sub_I_prom_o3+0x334>)
   d4ef4:	f008 ff74 	bl	ddde0 <__aeabi_atexit>

const int firmwareVersion = 0;

SYSTEM_THREAD(ENABLED);//System Thread es una configuración del sistema que garantiza que el bucle de la aplicación no sea interrumpido por el procesamiento en segundo plano del sistema y la administración de la red
   d4ef8:	4629      	mov	r1, r5
   d4efa:	4638      	mov	r0, r7
   d4efc:	f006 f93a 	bl	db174 <system_thread_set_state>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4f00:	4b92      	ldr	r3, [pc, #584]	; (d514c <_GLOBAL__sub_I_prom_o3+0x340>)
   d4f02:	9306      	str	r3, [sp, #24]
// This is the index for the updateTSChan
int returnIndex;

byte messageSize = 1;

Timer pollSensorTimer(SENSOR_POLL_TIME_MS, capturePollSensors);//declaramos el timer del sondeo de los sensores y lo capturamos
   d4f04:	4632      	mov	r2, r6
   d4f06:	462b      	mov	r3, r5
   d4f08:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d4f0c:	4890      	ldr	r0, [pc, #576]	; (d5150 <_GLOBAL__sub_I_prom_o3+0x344>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4f0e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d4f12:	9408      	str	r4, [sp, #32]
   d4f14:	f7ff f9ee 	bl	d42f4 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f18:	4630      	mov	r0, r6
   d4f1a:	f7ff f9e2 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
   d4f1e:	4a80      	ldr	r2, [pc, #512]	; (d5120 <_GLOBAL__sub_I_prom_o3+0x314>)
   d4f20:	498c      	ldr	r1, [pc, #560]	; (d5154 <_GLOBAL__sub_I_prom_o3+0x348>)
   d4f22:	488b      	ldr	r0, [pc, #556]	; (d5150 <_GLOBAL__sub_I_prom_o3+0x344>)
   d4f24:	f008 ff5c 	bl	ddde0 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4f28:	4b8b      	ldr	r3, [pc, #556]	; (d5158 <_GLOBAL__sub_I_prom_o3+0x34c>)
   d4f2a:	9306      	str	r3, [sp, #24]

Timer sensorSendTimer(SENSOR_SEND_TIME_MS, getResetAndSendSensors);//declaramos el timer de envio de envio de timer de los sensores enviamos el tiempo de envio y su modificacion
   d4f2c:	4632      	mov	r2, r6
   d4f2e:	462b      	mov	r3, r5
   d4f30:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4f34:	4889      	ldr	r0, [pc, #548]	; (d515c <_GLOBAL__sub_I_prom_o3+0x350>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4f36:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d4f3a:	9408      	str	r4, [sp, #32]
   d4f3c:	f7ff f9da 	bl	d42f4 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f40:	4630      	mov	r0, r6
   d4f42:	f7ff f9ce 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
   d4f46:	4a76      	ldr	r2, [pc, #472]	; (d5120 <_GLOBAL__sub_I_prom_o3+0x314>)
   d4f48:	4982      	ldr	r1, [pc, #520]	; (d5154 <_GLOBAL__sub_I_prom_o3+0x348>)
   d4f4a:	4884      	ldr	r0, [pc, #528]	; (d515c <_GLOBAL__sub_I_prom_o3+0x350>)
   d4f4c:	f008 ff48 	bl	ddde0 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4f50:	4b83      	ldr	r3, [pc, #524]	; (d5160 <_GLOBAL__sub_I_prom_o3+0x354>)
   d4f52:	9306      	str	r3, [sp, #24]

Timer unpluggedTimer(5000,unplugged);
   d4f54:	4632      	mov	r2, r6
   d4f56:	462b      	mov	r3, r5
   d4f58:	f241 3188 	movw	r1, #5000	; 0x1388
   d4f5c:	4881      	ldr	r0, [pc, #516]	; (d5164 <_GLOBAL__sub_I_prom_o3+0x358>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4f5e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d4f62:	9408      	str	r4, [sp, #32]
{
  // user-accessible "public" interface
  public:
    WeatherSensors() : airTempKMedian(30), relativeHumidtyMedian(30), node()
   d4f64:	4c80      	ldr	r4, [pc, #512]	; (d5168 <_GLOBAL__sub_I_prom_o3+0x35c>)
   d4f66:	f7ff f9c5 	bl	d42f4 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f6a:	4630      	mov	r0, r6
   d4f6c:	f7ff f9b9 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
   d4f70:	4a6b      	ldr	r2, [pc, #428]	; (d5120 <_GLOBAL__sub_I_prom_o3+0x314>)
   d4f72:	4978      	ldr	r1, [pc, #480]	; (d5154 <_GLOBAL__sub_I_prom_o3+0x348>)
   d4f74:	487b      	ldr	r0, [pc, #492]	; (d5164 <_GLOBAL__sub_I_prom_o3+0x358>)
   d4f76:	f008 ff33 	bl	ddde0 <__aeabi_atexit>
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	f001 fa07 	bl	d638e <_ZN15Adafruit_AM2315C1Ev>
   d4f80:	f104 0008 	add.w	r0, r4, #8
   d4f84:	f004 fcc9 	bl	d991a <_ZN9MPL3115A2C1Ev>
   d4f88:	4641      	mov	r1, r8
   d4f8a:	f104 000a 	add.w	r0, r4, #10
   d4f8e:	f005 fdb4 	bl	daafa <_ZN13RunningMedianC1Et>
   d4f92:	4641      	mov	r1, r8
   d4f94:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d4f98:	f005 fdaf 	bl	daafa <_ZN13RunningMedianC1Et>
   d4f9c:	4873      	ldr	r0, [pc, #460]	; (d516c <_GLOBAL__sub_I_prom_o3+0x360>)
   d4f9e:	f000 f9ef 	bl	d5380 <_ZN7IoTNodeC1Ev>
   d4fa2:	f241 6a5c 	movw	sl, #5724	; 0x165c
   d4fa6:	f640 211f 	movw	r1, #2591	; 0xa1f
   d4faa:	4871      	ldr	r0, [pc, #452]	; (d5170 <_GLOBAL__sub_I_prom_o3+0x364>)
   d4fac:	f001 f878 	bl	d60a0 <_ZN16Adafruit_TSL2591C1El>
   d4fb0:	2304      	movs	r3, #4
   d4fb2:	f844 300a 	str.w	r3, [r4, sl]
   d4fb6:	f504 53b3 	add.w	r3, r4, #5728	; 0x1660
   d4fba:	f241 686c 	movw	r8, #5740	; 0x166c
   d4fbe:	4a6d      	ldr	r2, [pc, #436]	; (d5174 <_GLOBAL__sub_I_prom_o3+0x368>)
   d4fc0:	601d      	str	r5, [r3, #0]
   d4fc2:	609a      	str	r2, [r3, #8]
   d4fc4:	2303      	movs	r3, #3
   d4fc6:	f844 3008 	str.w	r3, [r4, r8]
   d4fca:	4b6b      	ldr	r3, [pc, #428]	; (d5178 <_GLOBAL__sub_I_prom_o3+0x36c>)
   d4fcc:	4a6b      	ldr	r2, [pc, #428]	; (d517c <_GLOBAL__sub_I_prom_o3+0x370>)
   d4fce:	601a      	str	r2, [r3, #0]
   d4fd0:	f241 6374 	movw	r3, #5748	; 0x1674
   d4fd4:	f04f 39ff 	mov.w	r9, #4294967295
   d4fd8:	50e5      	str	r5, [r4, r3]
   d4fda:	f241 6378 	movw	r3, #5752	; 0x1678
   d4fde:	2211      	movs	r2, #17
   d4fe0:	50e5      	str	r5, [r4, r3]
   d4fe2:	f241 637c 	movw	r3, #5756	; 0x167c
   d4fe6:	2148      	movs	r1, #72	; 0x48
   d4fe8:	f844 9003 	str.w	r9, [r4, r3]
   d4fec:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d4ff0:	601d      	str	r5, [r3, #0]
   d4ff2:	f241 6384 	movw	r3, #5764	; 0x1684
   d4ff6:	50e2      	str	r2, [r4, r3]
   d4ff8:	4a61      	ldr	r2, [pc, #388]	; (d5180 <_GLOBAL__sub_I_prom_o3+0x374>)
   d4ffa:	2300      	movs	r3, #0
   d4ffc:	6013      	str	r3, [r2, #0]
   d4ffe:	6053      	str	r3, [r2, #4]
   d5000:	f241 6290 	movw	r2, #5776	; 0x1690
   d5004:	50a5      	str	r5, [r4, r2]
   d5006:	4a5f      	ldr	r2, [pc, #380]	; (d5184 <_GLOBAL__sub_I_prom_o3+0x378>)
   d5008:	6013      	str	r3, [r2, #0]
   d500a:	f241 6298 	movw	r2, #5784	; 0x1698
   d500e:	50a5      	str	r5, [r4, r2]
   d5010:	4a5d      	ldr	r2, [pc, #372]	; (d5188 <_GLOBAL__sub_I_prom_o3+0x37c>)
   d5012:	6013      	str	r3, [r2, #0]
   d5014:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
   d5018:	6053      	str	r3, [r2, #4]
   d501a:	6015      	str	r5, [r2, #0]
   d501c:	f241 62a8 	movw	r2, #5800	; 0x16a8
   d5020:	50a5      	str	r5, [r4, r2]
   d5022:	4a5a      	ldr	r2, [pc, #360]	; (d518c <_GLOBAL__sub_I_prom_o3+0x380>)
   d5024:	6013      	str	r3, [r2, #0]
   d5026:	6053      	str	r3, [r2, #4]
   d5028:	f241 62b4 	movw	r2, #5812	; 0x16b4
   d502c:	50a5      	str	r5, [r4, r2]
   d502e:	f241 62b8 	movw	r2, #5816	; 0x16b8
   d5032:	50a5      	str	r5, [r4, r2]
   d5034:	f241 62bc 	movw	r2, #5820	; 0x16bc
   d5038:	50a5      	str	r5, [r4, r2]
   d503a:	f504 52b6 	add.w	r2, r4, #5824	; 0x16c0
   d503e:	6053      	str	r3, [r2, #4]
   d5040:	6093      	str	r3, [r2, #8]
   d5042:	60d3      	str	r3, [r2, #12]
   d5044:	6113      	str	r3, [r2, #16]
   d5046:	6153      	str	r3, [r2, #20]
   d5048:	6193      	str	r3, [r2, #24]
   d504a:	61d3      	str	r3, [r2, #28]
   d504c:	6015      	str	r5, [r2, #0]
   d504e:	f504 52b7 	add.w	r2, r4, #5856	; 0x16e0
   d5052:	f102 000c 	add.w	r0, r2, #12
   d5056:	6015      	str	r5, [r2, #0]
   d5058:	6053      	str	r3, [r2, #4]
   d505a:	6093      	str	r3, [r2, #8]
   d505c:	f000 fe1b 	bl	d5c96 <_ZN16Adafruit_ADS1115C1Eh>
    {
      
      pinMode(AnemometerPin, INPUT_PULLUP);
   d5060:	f834 0008 	ldrh.w	r0, [r4, r8]
   d5064:	2102      	movs	r1, #2
   d5066:	f008 fe39 	bl	ddcdc <pinMode>
      attachInterrupt(AnemometerPin, &WeatherSensors::handleAnemometerEvent, this, FALLING);
   d506a:	f834 0008 	ldrh.w	r0, [r4, r8]
   d506e:	4b48      	ldr	r3, [pc, #288]	; (d5190 <_GLOBAL__sub_I_prom_o3+0x384>)
   d5070:	9306      	str	r3, [sp, #24]
   d5072:	f04f 0802 	mov.w	r8, #2
   d5076:	9507      	str	r5, [sp, #28]
   d5078:	9502      	str	r5, [sp, #8]
   d507a:	f8cd 9004 	str.w	r9, [sp, #4]
   d507e:	f8cd 8000 	str.w	r8, [sp]
   d5082:	e896 0006 	ldmia.w	r6, {r1, r2}
   d5086:	4623      	mov	r3, r4
   d5088:	f7ff fe92 	bl	d4db0 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>

      pinMode(RainPin, INPUT_PULLUP);
   d508c:	4641      	mov	r1, r8
   d508e:	f834 000a 	ldrh.w	r0, [r4, sl]
   d5092:	f008 fe23 	bl	ddcdc <pinMode>
      attachInterrupt(RainPin, &WeatherSensors::handleRainEvent, this, FALLING);
   d5096:	f834 000a 	ldrh.w	r0, [r4, sl]
   d509a:	4b3e      	ldr	r3, [pc, #248]	; (d5194 <_GLOBAL__sub_I_prom_o3+0x388>)
   d509c:	9304      	str	r3, [sp, #16]
   d509e:	e88d 0300 	stmia.w	sp, {r8, r9}
   d50a2:	9505      	str	r5, [sp, #20]
   d50a4:	9502      	str	r5, [sp, #8]
   d50a6:	aa04      	add	r2, sp, #16
   d50a8:	4623      	mov	r3, r4
   d50aa:	ca06      	ldmia	r2, {r1, r2}
   d50ac:	f7ff fe80 	bl	d4db0 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>

WeatherSensors sensors; //Interrupts for anemometer and rain bucket
   d50b0:	4a1b      	ldr	r2, [pc, #108]	; (d5120 <_GLOBAL__sub_I_prom_o3+0x314>)
   d50b2:	4939      	ldr	r1, [pc, #228]	; (d5198 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d50b4:	4620      	mov	r0, r4
   d50b6:	f008 fe93 	bl	ddde0 <__aeabi_atexit>
// are set up here too

IoTNode node;//objeto nodo de libreria iotnode
   d50ba:	4838      	ldr	r0, [pc, #224]	; (d519c <_GLOBAL__sub_I_prom_o3+0x390>)
   d50bc:	f000 f960 	bl	d5380 <_ZN7IoTNodeC1Ev>
   d50c0:	4a17      	ldr	r2, [pc, #92]	; (d5120 <_GLOBAL__sub_I_prom_o3+0x314>)
   d50c2:	4937      	ldr	r1, [pc, #220]	; (d51a0 <_GLOBAL__sub_I_prom_o3+0x394>)
   d50c4:	4835      	ldr	r0, [pc, #212]	; (d519c <_GLOBAL__sub_I_prom_o3+0x390>)
   d50c6:	f008 fe8b 	bl	ddde0 <__aeabi_atexit>

// // Create FRAM array and ring
framArray framConfig = node.makeFramArray(1, sizeof(config));
   d50ca:	463a      	mov	r2, r7
   d50cc:	2318      	movs	r3, #24
   d50ce:	4933      	ldr	r1, [pc, #204]	; (d519c <_GLOBAL__sub_I_prom_o3+0x390>)
   d50d0:	4834      	ldr	r0, [pc, #208]	; (d51a4 <_GLOBAL__sub_I_prom_o3+0x398>)
   d50d2:	f000 fade 	bl	d5692 <_ZN7IoTNode13makeFramArrayEmh>

framRing dataRing = node.makeFramRing(300, sizeof(sensorReadings));
   d50d6:	2318      	movs	r3, #24
   d50d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
   d50dc:	492f      	ldr	r1, [pc, #188]	; (d519c <_GLOBAL__sub_I_prom_o3+0x390>)
   d50de:	4832      	ldr	r0, [pc, #200]	; (d51a8 <_GLOBAL__sub_I_prom_o3+0x39c>)
   d50e0:	f000 fb0f 	bl	d5702 <_ZN7IoTNode12makeFramRingEmh>
bool readyToCapturePollSensors = false;
bool tickleWD = false;

unsigned long timeToNextSendMS;

String deviceStatus;
   d50e4:	4931      	ldr	r1, [pc, #196]	; (d51ac <_GLOBAL__sub_I_prom_o3+0x3a0>)
   d50e6:	4832      	ldr	r0, [pc, #200]	; (d51b0 <_GLOBAL__sub_I_prom_o3+0x3a4>)
   d50e8:	f006 fe8b 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d50ec:	4a0c      	ldr	r2, [pc, #48]	; (d5120 <_GLOBAL__sub_I_prom_o3+0x314>)
   d50ee:	4931      	ldr	r1, [pc, #196]	; (d51b4 <_GLOBAL__sub_I_prom_o3+0x3a8>)
   d50f0:	482f      	ldr	r0, [pc, #188]	; (d51b0 <_GLOBAL__sub_I_prom_o3+0x3a4>)
   d50f2:	f008 fe75 	bl	ddde0 <__aeabi_atexit>
String i2cDevices;
   d50f6:	492d      	ldr	r1, [pc, #180]	; (d51ac <_GLOBAL__sub_I_prom_o3+0x3a0>)
   d50f8:	482f      	ldr	r0, [pc, #188]	; (d51b8 <_GLOBAL__sub_I_prom_o3+0x3ac>)
   d50fa:	f006 fe82 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d50fe:	4a08      	ldr	r2, [pc, #32]	; (d5120 <_GLOBAL__sub_I_prom_o3+0x314>)
   d5100:	492c      	ldr	r1, [pc, #176]	; (d51b4 <_GLOBAL__sub_I_prom_o3+0x3a8>)
   d5102:	482d      	ldr	r0, [pc, #180]	; (d51b8 <_GLOBAL__sub_I_prom_o3+0x3ac>)
   d5104:	f008 fe6c 	bl	ddde0 <__aeabi_atexit>
   d5108:	e05a      	b.n	d51c0 <_GLOBAL__sub_I_prom_o3+0x3b4>
   d510a:	bf00      	nop
   d510c:	2003bedc 	.word	0x2003bedc
   d5110:	2003bcec 	.word	0x2003bcec
   d5114:	2003bf8c 	.word	0x2003bf8c
   d5118:	000e43f2 	.word	0x000e43f2
   d511c:	2003bf98 	.word	0x2003bf98
   d5120:	2003bce8 	.word	0x2003bce8
   d5124:	000d8ab5 	.word	0x000d8ab5
   d5128:	2003d740 	.word	0x2003d740
   d512c:	000e40b0 	.word	0x000e40b0
   d5130:	2003bcf0 	.word	0x2003bcf0
   d5134:	2003bcf8 	.word	0x2003bcf8
   d5138:	02faf080 	.word	0x02faf080
   d513c:	000d5945 	.word	0x000d5945
   d5140:	2003be2c 	.word	0x2003be2c
   d5144:	000d40d5 	.word	0x000d40d5
   d5148:	000d42a9 	.word	0x000d42a9
   d514c:	000d40c5 	.word	0x000d40c5
   d5150:	2003bf54 	.word	0x2003bf54
   d5154:	000d4379 	.word	0x000d4379
   d5158:	000d4135 	.word	0x000d4135
   d515c:	2003bf70 	.word	0x2003bf70
   d5160:	000d4d79 	.word	0x000d4d79
   d5164:	2003d720 	.word	0x2003d720
   d5168:	2003bfcc 	.word	0x2003bfcc
   d516c:	2003d5d0 	.word	0x2003d5d0
   d5170:	2003d618 	.word	0x2003d618
   d5174:	3c343958 	.word	0x3c343958
   d5178:	2003d63c 	.word	0x2003d63c
   d517c:	3fbef9db 	.word	0x3fbef9db
   d5180:	2003d654 	.word	0x2003d654
   d5184:	2003d660 	.word	0x2003d660
   d5188:	2003d668 	.word	0x2003d668
   d518c:	2003d678 	.word	0x2003d678
   d5190:	000d4173 	.word	0x000d4173
   d5194:	000d4151 	.word	0x000d4151
   d5198:	000d41ad 	.word	0x000d41ad
   d519c:	2003d6d8 	.word	0x2003d6d8
   d51a0:	000d4129 	.word	0x000d4129
   d51a4:	2003bee0 	.word	0x2003bee0
   d51a8:	2003bf10 	.word	0x2003bf10
   d51ac:	000e4a27 	.word	0x000e4a27
   d51b0:	2003dbc4 	.word	0x2003dbc4
   d51b4:	000dbd75 	.word	0x000dbd75
   d51b8:	2003bf00 	.word	0x2003bf00
   d51bc:	000d40d1 	.word	0x000d40d1
    "FRAM",
    "AM2315",
    "MPL3115",
    "TSL2591",
    "ADS1115"
};
   d51c0:	4917      	ldr	r1, [pc, #92]	; (d5220 <_GLOBAL__sub_I_prom_o3+0x414>)
   d51c2:	4818      	ldr	r0, [pc, #96]	; (d5224 <_GLOBAL__sub_I_prom_o3+0x418>)
   d51c4:	f006 fe1d 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d51c8:	4917      	ldr	r1, [pc, #92]	; (d5228 <_GLOBAL__sub_I_prom_o3+0x41c>)
   d51ca:	4818      	ldr	r0, [pc, #96]	; (d522c <_GLOBAL__sub_I_prom_o3+0x420>)
   d51cc:	f006 fe19 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d51d0:	4917      	ldr	r1, [pc, #92]	; (d5230 <_GLOBAL__sub_I_prom_o3+0x424>)
   d51d2:	4818      	ldr	r0, [pc, #96]	; (d5234 <_GLOBAL__sub_I_prom_o3+0x428>)
   d51d4:	f006 fe15 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d51d8:	4917      	ldr	r1, [pc, #92]	; (d5238 <_GLOBAL__sub_I_prom_o3+0x42c>)
   d51da:	4818      	ldr	r0, [pc, #96]	; (d523c <_GLOBAL__sub_I_prom_o3+0x430>)
   d51dc:	f006 fe11 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d51e0:	4917      	ldr	r1, [pc, #92]	; (d5240 <_GLOBAL__sub_I_prom_o3+0x434>)
   d51e2:	4818      	ldr	r0, [pc, #96]	; (d5244 <_GLOBAL__sub_I_prom_o3+0x438>)
   d51e4:	f006 fe0d 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d51e8:	4917      	ldr	r1, [pc, #92]	; (d5248 <_GLOBAL__sub_I_prom_o3+0x43c>)
   d51ea:	4818      	ldr	r0, [pc, #96]	; (d524c <_GLOBAL__sub_I_prom_o3+0x440>)
   d51ec:	f006 fe09 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d51f0:	4917      	ldr	r1, [pc, #92]	; (d5250 <_GLOBAL__sub_I_prom_o3+0x444>)
   d51f2:	4818      	ldr	r0, [pc, #96]	; (d5254 <_GLOBAL__sub_I_prom_o3+0x448>)
   d51f4:	f006 fe05 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d51f8:	4917      	ldr	r1, [pc, #92]	; (d5258 <_GLOBAL__sub_I_prom_o3+0x44c>)
   d51fa:	4818      	ldr	r0, [pc, #96]	; (d525c <_GLOBAL__sub_I_prom_o3+0x450>)
   d51fc:	f006 fe01 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d5200:	4917      	ldr	r1, [pc, #92]	; (d5260 <_GLOBAL__sub_I_prom_o3+0x454>)
   d5202:	4818      	ldr	r0, [pc, #96]	; (d5264 <_GLOBAL__sub_I_prom_o3+0x458>)
   d5204:	f006 fdfd 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>

String deviceStatus;
String i2cDevices;
bool resetDevice = false;

String i2cNames[] =// arreglo con los nombres de dispositivos i2c
   d5208:	4a17      	ldr	r2, [pc, #92]	; (d5268 <_GLOBAL__sub_I_prom_o3+0x45c>)
   d520a:	4918      	ldr	r1, [pc, #96]	; (d526c <_GLOBAL__sub_I_prom_o3+0x460>)
   d520c:	4628      	mov	r0, r5
   d520e:	f008 fde7 	bl	ddde0 <__aeabi_atexit>
  else
  {
    DEBUG_PRINTLN("Particle connected");
  }
}
Adafruit_ADS1115 ads;//ads1115 con direccion default
   d5212:	2148      	movs	r1, #72	; 0x48
   d5214:	4816      	ldr	r0, [pc, #88]	; (d5270 <_GLOBAL__sub_I_prom_o3+0x464>)
   d5216:	f000 fd3e 	bl	d5c96 <_ZN16Adafruit_ADS1115C1Eh>
    cont=0;
    tiempo2=millis();
    sum=0;
    prom_o3 = 0;
}
}
   d521a:	b00a      	add	sp, #40	; 0x28
   d521c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5220:	000e43fa 	.word	0x000e43fa
   d5224:	2003be4c 	.word	0x2003be4c
   d5228:	000e43fe 	.word	0x000e43fe
   d522c:	2003be5c 	.word	0x2003be5c
   d5230:	000e4402 	.word	0x000e4402
   d5234:	2003be6c 	.word	0x2003be6c
   d5238:	000e440d 	.word	0x000e440d
   d523c:	2003be7c 	.word	0x2003be7c
   d5240:	000e4411 	.word	0x000e4411
   d5244:	2003be8c 	.word	0x2003be8c
   d5248:	000e4416 	.word	0x000e4416
   d524c:	2003be9c 	.word	0x2003be9c
   d5250:	000e441d 	.word	0x000e441d
   d5254:	2003beac 	.word	0x2003beac
   d5258:	000e4425 	.word	0x000e4425
   d525c:	2003bebc 	.word	0x2003bebc
   d5260:	000e442d 	.word	0x000e442d
   d5264:	2003becc 	.word	0x2003becc
   d5268:	2003bce8 	.word	0x2003bce8
   d526c:	000d4109 	.word	0x000d4109
   d5270:	2003bfc2 	.word	0x2003bfc2

000d5274 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d5274:	b508      	push	{r3, lr}
   d5276:	f005 fccb 	bl	dac10 <HAL_Pin_Map>
   d527a:	4b01      	ldr	r3, [pc, #4]	; (d5280 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d527c:	6018      	str	r0, [r3, #0]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	2003dbd8 	.word	0x2003dbd8

000d5284 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d5284:	f005 bcc4 	b.w	dac10 <HAL_Pin_Map>

000d5288 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d5288:	7c03      	ldrb	r3, [r0, #16]
   d528a:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d528e:	4602      	mov	r2, r0
   d5290:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d5294:	b12b      	cbz	r3, d52a2 <_ZN4File9availableEv+0x1a>
   d5296:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d5298:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d529a:	1a18      	subs	r0, r3, r0
   d529c:	bf48      	it	mi
   d529e:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d52a2:	4770      	bx	lr

000d52a4 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d52a4:	4770      	bx	lr

000d52a6 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d52a6:	3010      	adds	r0, #16
   d52a8:	f001 bfa2 	b.w	d71f0 <_ZN7FatFile4syncEv>

000d52ac <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d52ac:	3010      	adds	r0, #16
   d52ae:	f001 be79 	b.w	d6fa4 <_ZN7FatFile4peekEv>

000d52b2 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d52b2:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d52b4:	2201      	movs	r2, #1
   d52b6:	f10d 0107 	add.w	r1, sp, #7
   d52ba:	3010      	adds	r0, #16
   d52bc:	f001 fdbf 	bl	d6e3e <_ZN7FatFile4readEPvj>
   d52c0:	2801      	cmp	r0, #1
   d52c2:	bf0c      	ite	eq
   d52c4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d52c8:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d52cc:	b003      	add	sp, #12
   d52ce:	f85d fb04 	ldr.w	pc, [sp], #4

000d52d2 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d52d2:	3010      	adds	r0, #16
   d52d4:	f002 b8fa 	b.w	d74cc <_ZN7FatFile5writeEPKvj>

000d52d8 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d52d8:	b507      	push	{r0, r1, r2, lr}
   d52da:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d52dc:	2201      	movs	r2, #1
   d52de:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d52e2:	3010      	adds	r0, #16
   d52e4:	4619      	mov	r1, r3
   d52e6:	f002 f8f1 	bl	d74cc <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d52ea:	b003      	add	sp, #12
   d52ec:	f85d fb04 	ldr.w	pc, [sp], #4

000d52f0 <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d52f0:	b510      	push	{r4, lr}
   d52f2:	2134      	movs	r1, #52	; 0x34
   d52f4:	4604      	mov	r4, r0
   d52f6:	f008 fd81 	bl	dddfc <_ZdlPvj>
   d52fa:	4620      	mov	r0, r4
   d52fc:	bd10      	pop	{r4, pc}
	...

000d5300 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d5300:	b530      	push	{r4, r5, lr}
   d5302:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5304:	4b1c      	ldr	r3, [pc, #112]	; (d5378 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d5306:	9300      	str	r3, [sp, #0]
   d5308:	7913      	ldrb	r3, [r2, #4]
   d530a:	f88d 3004 	strb.w	r3, [sp, #4]
   d530e:	6893      	ldr	r3, [r2, #8]
   d5310:	9302      	str	r3, [sp, #8]
   d5312:	7b13      	ldrb	r3, [r2, #12]
   d5314:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5318:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d531c:	7b53      	ldrb	r3, [r2, #13]
   d531e:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d5322:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5324:	460a      	mov	r2, r1
   d5326:	466b      	mov	r3, sp
   d5328:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d532c:	4628      	mov	r0, r5
   d532e:	f002 fc15 	bl	d7b5c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d5332:	b1f0      	cbz	r0, d5372 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d5334:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d5336:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d533a:	4628      	mov	r0, r5
   d533c:	f001 ff8e 	bl	d725c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d5340:	2101      	movs	r1, #1
   d5342:	4620      	mov	r0, r4
   d5344:	f002 fab3 	bl	d78ae <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d5348:	4601      	mov	r1, r0
   d534a:	b168      	cbz	r0, d5368 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d534c:	4621      	mov	r1, r4
   d534e:	4628      	mov	r0, r5
   d5350:	f001 fd5d 	bl	d6e0e <_ZN7FatFile8openRootEP9FatVolume>
   d5354:	b168      	cbz	r0, d5372 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d5356:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d535a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d535e:	bf16      	itet	ne
   d5360:	4b06      	ldrne	r3, [pc, #24]	; (d537c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d5362:	4618      	moveq	r0, r3
   d5364:	601d      	strne	r5, [r3, #0]
   d5366:	e005      	b.n	d5374 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d5368:	4620      	mov	r0, r4
   d536a:	f002 faa0 	bl	d78ae <_ZN9FatVolume4initEh>
   d536e:	2800      	cmp	r0, #0
   d5370:	d1ec      	bne.n	d534c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d5372:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d5374:	b005      	add	sp, #20
   d5376:	bd30      	pop	{r4, r5, pc}
   d5378:	000e40b0 	.word	0x000e40b0
   d537c:	2003e098 	.word	0x2003e098

000d5380 <_ZN7IoTNodeC1Ev>:
// Create FRAM instances
#define PART_NUMBER MB85RC256V


// Constructor
IoTNode::IoTNode() : myFram(PART_NUMBER)
   d5380:	b510      	push	{r4, lr}
   d5382:	4906      	ldr	r1, [pc, #24]	; (d539c <_ZN7IoTNodeC1Ev+0x1c>)
   d5384:	4604      	mov	r4, r0
   d5386:	f006 fd3c 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d538a:	2363      	movs	r3, #99	; 0x63
   d538c:	7423      	strb	r3, [r4, #16]
   d538e:	2105      	movs	r1, #5
   d5390:	f104 0014 	add.w	r0, r4, #20
   d5394:	f005 fa0e 	bl	da7b4 <_ZN7FramI2CC1E14framPartNumber>
{

}
   d5398:	4620      	mov	r0, r4
   d539a:	bd10      	pop	{r4, pc}
   d539c:	000e4a27 	.word	0x000e4a27

000d53a0 <_ZN7IoTNode2okEv>:

}

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool IoTNode::ok()
{
   d53a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
      0x6F, //111
      0x20, //32
      0x57, //87
      0x4D, //77
      0x50 //80
  };
   d53a2:	4b19      	ldr	r3, [pc, #100]	; (d5408 <_ZN7IoTNode2okEv+0x68>)
   d53a4:	6818      	ldr	r0, [r3, #0]
   d53a6:	791b      	ldrb	r3, [r3, #4]
   d53a8:	f88d 3004 	strb.w	r3, [sp, #4]
   d53ac:	9000      	str	r0, [sp, #0]
  if (!Wire.isEnabled())
   d53ae:	f008 fcf1 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d53b2:	f008 f81a 	bl	dd3ea <_ZN7TwoWire9isEnabledEv>
   d53b6:	b918      	cbnz	r0, d53c0 <_ZN7IoTNode2okEv+0x20>
  {
    Wire.begin();
   d53b8:	f008 fcec 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d53bc:	f007 ffd0 	bl	dd360 <_ZN7TwoWire5beginEv>

}

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool IoTNode::ok()
{
   d53c0:	2400      	movs	r4, #0
  for (int i=0; i<5; ++i)
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAd[i];
   d53c2:	f81d 5004 	ldrb.w	r5, [sp, r4]
    Wire.beginTransmission(address);
   d53c6:	f008 fce5 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d53ca:	4629      	mov	r1, r5
   d53cc:	f007 ffff 	bl	dd3ce <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d53d0:	f008 fce0 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d53d4:	f008 f806 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

    // Try again if there is an error
    if (!error==0)
   d53d8:	b920      	cbnz	r0, d53e4 <_ZN7IoTNode2okEv+0x44>
  {
    Wire.begin();
  }
  byte error, address;
  bool result = true;
  for (int i=0; i<5; ++i)
   d53da:	3401      	adds	r4, #1
   d53dc:	2c05      	cmp	r4, #5
   d53de:	d1f0      	bne.n	d53c2 <_ZN7IoTNode2okEv+0x22>
  if (!Wire.isEnabled())
  {
    Wire.begin();
  }
  byte error, address;
  bool result = true;
   d53e0:	2001      	movs	r0, #1
   d53e2:	e00f      	b.n	d5404 <_ZN7IoTNode2okEv+0x64>
    error = Wire.endTransmission();

    // Try again if there is an error
    if (!error==0)
    {
      Wire.reset();
   d53e4:	f008 fcd6 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d53e8:	f008 f803 	bl	dd3f2 <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d53ec:	f008 fcd2 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d53f0:	4629      	mov	r1, r5
   d53f2:	f007 ffec 	bl	dd3ce <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d53f6:	f008 fccd 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d53fa:	f007 fff3 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>
    }
 
    // Return false if there is an error
    if (!error == 0)
   d53fe:	2800      	cmp	r0, #0
   d5400:	d0eb      	beq.n	d53da <_ZN7IoTNode2okEv+0x3a>
    {
      result = false;
   d5402:	2000      	movs	r0, #0
      break;
    }
  }
  return result;
}
   d5404:	b003      	add	sp, #12
   d5406:	bd30      	pop	{r4, r5, pc}
   d5408:	000e4468 	.word	0x000e4468

000d540c <_ZN7IoTNode10setPowerONE9powerNameb>:
   d540c:	4801      	ldr	r0, [pc, #4]	; (d5414 <_ZN7IoTNode10setPowerONE9powerNameb+0x8>)
   d540e:	f002 be52 	b.w	d80b6 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d5412:	bf00      	nop
   d5414:	2003dbdd 	.word	0x2003dbdd

000d5418 <_ZN7IoTNode14tickleWatchdogEv>:
// Note that the WATCHDOG switch must be set to On
// for the watchdog reset to be connected
// See documentation for setting up the watchdog delay
// using the dip switch on the IoT Node board
void IoTNode::tickleWatchdog()
{
   d5418:	b510      	push	{r4, lr}
  expand.digitalWrite(5,true);
   d541a:	4c08      	ldr	r4, [pc, #32]	; (d543c <_ZN7IoTNode14tickleWatchdogEv+0x24>)
   d541c:	2201      	movs	r2, #1
   d541e:	2105      	movs	r1, #5
   d5420:	4620      	mov	r0, r4
   d5422:	f002 fe48 	bl	d80b6 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
  //delayMicroseconds(100);
  delay(50);
   d5426:	2032      	movs	r0, #50	; 0x32
   d5428:	f007 f980 	bl	dc72c <delay>
  expand.digitalWrite(5,false);
   d542c:	4620      	mov	r0, r4
   d542e:	2200      	movs	r2, #0
   d5430:	2105      	movs	r1, #5
}
   d5432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void IoTNode::tickleWatchdog()
{
  expand.digitalWrite(5,true);
  //delayMicroseconds(100);
  delay(50);
  expand.digitalWrite(5,false);
   d5436:	f002 be3e 	b.w	d80b6 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d543a:	bf00      	nop
   d543c:	2003dbdd 	.word	0x2003dbdd

000d5440 <_ZN7IoTNode8unixTimeEv>:
}


uint32_t IoTNode::unixTime()
{
  return rtc.rtcNow();
   d5440:	4801      	ldr	r0, [pc, #4]	; (d5448 <_ZN7IoTNode8unixTimeEv+0x8>)
   d5442:	f000 bdc7 	b.w	d5fd4 <_ZN8MCP7941x6rtcNowEv>
   d5446:	bf00      	nop
   d5448:	2003dbdc 	.word	0x2003dbdc

000d544c <_ZN7IoTNode11setUnixTimeEm>:
}

void IoTNode::setUnixTime(uint32_t unixtime)
{
  rtc.setUnixTime(unixtime);
   d544c:	4801      	ldr	r0, [pc, #4]	; (d5454 <_ZN7IoTNode11setUnixTimeEm+0x8>)
   d544e:	f000 bd78 	b.w	d5f42 <_ZN8MCP7941x11setUnixTimeEm>
   d5452:	bf00      	nop
   d5454:	2003dbdc 	.word	0x2003dbdc

000d5458 <_ZN7IoTNode15array_to_stringEPhjPc>:


// Private

void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
   d5458:	b530      	push	{r4, r5, lr}
    for (unsigned int i = 0; i < len; i++)
   d545a:	2400      	movs	r4, #0
   d545c:	4294      	cmp	r4, r2
   d545e:	d012      	beq.n	d5486 <_ZN7IoTNode15array_to_stringEPhjPc+0x2e>
    {
        byte nib1 = (array[i] >> 4) & 0x0F;
   d5460:	5d08      	ldrb	r0, [r1, r4]
   d5462:	0905      	lsrs	r5, r0, #4
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
   d5464:	2d09      	cmp	r5, #9
void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
    for (unsigned int i = 0; i < len; i++)
    {
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
   d5466:	f000 000f 	and.w	r0, r0, #15
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
   d546a:	bf94      	ite	ls
   d546c:	3530      	addls	r5, #48	; 0x30
   d546e:	3537      	addhi	r5, #55	; 0x37
   d5470:	f803 5014 	strb.w	r5, [r3, r4, lsl #1]
        buffer[i*2+1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
   d5474:	2809      	cmp	r0, #9
   d5476:	eb03 0544 	add.w	r5, r3, r4, lsl #1
   d547a:	bf94      	ite	ls
   d547c:	3030      	addls	r0, #48	; 0x30
   d547e:	3037      	addhi	r0, #55	; 0x37
   d5480:	7068      	strb	r0, [r5, #1]

// Private

void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
    for (unsigned int i = 0; i < len; i++)
   d5482:	3401      	adds	r4, #1
   d5484:	e7ea      	b.n	d545c <_ZN7IoTNode15array_to_stringEPhjPc+0x4>
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
        buffer[i*2+1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
    }
    buffer[len*2] = '\0';
   d5486:	2200      	movs	r2, #0
   d5488:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
   d548c:	bd30      	pop	{r4, r5, pc}
	...

000d5490 <_ZN7IoTNode5beginEv>:
{

}

bool IoTNode::begin()
{
   d5490:	b530      	push	{r4, r5, lr}
   d5492:	b08d      	sub	sp, #52	; 0x34
   d5494:	4605      	mov	r5, r0
  if (!Wire.isEnabled())
   d5496:	f008 fc7d 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d549a:	f007 ffa6 	bl	dd3ea <_ZN7TwoWire9isEnabledEv>
   d549e:	b918      	cbnz	r0, d54a8 <_ZN7IoTNode5beginEv+0x18>
  {
    Wire.begin();
   d54a0:	f008 fc78 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d54a4:	f007 ff5c 	bl	dd360 <_ZN7TwoWire5beginEv>
  }
  delay(20);
   d54a8:	2014      	movs	r0, #20
   d54aa:	f007 f93f 	bl	dc72c <delay>

  // The i2c_scanner uses the return value of
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  address = 0x20; // MCP23017 address
  Wire.beginTransmission(address);
   d54ae:	f008 fc71 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d54b2:	2120      	movs	r1, #32
   d54b4:	f007 ff8b 	bl	dd3ce <_ZN7TwoWire17beginTransmissionEh>
  error = Wire.endTransmission();
   d54b8:	f008 fc6c 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d54bc:	f007 ff92 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

  // Try again if there is an error
  if (!error==0)
   d54c0:	b180      	cbz	r0, d54e4 <_ZN7IoTNode5beginEv+0x54>
  {
    Wire.reset();
   d54c2:	f008 fc67 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d54c6:	f007 ff94 	bl	dd3f2 <_ZN7TwoWire5resetEv>
    Wire.beginTransmission(address);
   d54ca:	f008 fc63 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d54ce:	2120      	movs	r1, #32
   d54d0:	f007 ff7d 	bl	dd3ce <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d54d4:	f008 fc5e 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d54d8:	f007 ff84 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>
  }

  // Return false if there is an error
  if (!error == 0)
   d54dc:	fab0 f480 	clz	r4, r0
   d54e0:	0964      	lsrs	r4, r4, #5
   d54e2:	e000      	b.n	d54e6 <_ZN7IoTNode5beginEv+0x56>
  {
    Wire.begin();
  }
  delay(20);
  byte error, address;
  bool result = true;
   d54e4:	2401      	movs	r4, #1
  {
    result = false;
  }
  

  expand.begin();
   d54e6:	4861      	ldr	r0, [pc, #388]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d54e8:	f002 fdd6 	bl	d8098 <_ZN17Adafruit_MCP230175beginEv>
  //Set pin direction 1 = out, 0 = in
  //PORT_A,0b10111111 | PORT_B,0b00001111
  expand.pinMode(0,OUTPUT);
   d54ec:	2201      	movs	r2, #1
   d54ee:	2100      	movs	r1, #0
   d54f0:	485e      	ldr	r0, [pc, #376]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d54f2:	f002 fdd4 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(1,OUTPUT);
   d54f6:	2201      	movs	r2, #1
   d54f8:	4611      	mov	r1, r2
   d54fa:	485c      	ldr	r0, [pc, #368]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d54fc:	f002 fdcf 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(2,OUTPUT);
   d5500:	2201      	movs	r2, #1
   d5502:	2102      	movs	r1, #2
   d5504:	4859      	ldr	r0, [pc, #356]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5506:	f002 fdca 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(3,OUTPUT);
   d550a:	2201      	movs	r2, #1
   d550c:	2103      	movs	r1, #3
   d550e:	4857      	ldr	r0, [pc, #348]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5510:	f002 fdc5 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(4,OUTPUT);
   d5514:	2201      	movs	r2, #1
   d5516:	2104      	movs	r1, #4
   d5518:	4854      	ldr	r0, [pc, #336]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d551a:	f002 fdc0 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(5,OUTPUT);
   d551e:	2201      	movs	r2, #1
   d5520:	2105      	movs	r1, #5
   d5522:	4852      	ldr	r0, [pc, #328]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5524:	f002 fdbb 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(6,INPUT);
   d5528:	2200      	movs	r2, #0
   d552a:	2106      	movs	r1, #6
   d552c:	484f      	ldr	r0, [pc, #316]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d552e:	f002 fdb6 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(7,OUTPUT);
   d5532:	2201      	movs	r2, #1
   d5534:	2107      	movs	r1, #7
   d5536:	484d      	ldr	r0, [pc, #308]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5538:	f002 fdb1 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(8,INPUT);
   d553c:	2200      	movs	r2, #0
   d553e:	2108      	movs	r1, #8
   d5540:	484a      	ldr	r0, [pc, #296]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5542:	f002 fdac 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(9,INPUT);
   d5546:	2200      	movs	r2, #0
   d5548:	2109      	movs	r1, #9
   d554a:	4848      	ldr	r0, [pc, #288]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d554c:	f002 fda7 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(10,INPUT);
   d5550:	2200      	movs	r2, #0
   d5552:	210a      	movs	r1, #10
   d5554:	4845      	ldr	r0, [pc, #276]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5556:	f002 fda2 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(11,INPUT);
   d555a:	2200      	movs	r2, #0
   d555c:	210b      	movs	r1, #11
   d555e:	4843      	ldr	r0, [pc, #268]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5560:	f002 fd9d 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(12,INPUT);
   d5564:	2200      	movs	r2, #0
   d5566:	210c      	movs	r1, #12
   d5568:	4840      	ldr	r0, [pc, #256]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d556a:	f002 fd98 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(13,INPUT);
   d556e:	2200      	movs	r2, #0
   d5570:	210d      	movs	r1, #13
   d5572:	483e      	ldr	r0, [pc, #248]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5574:	f002 fd93 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(14,INPUT);
   d5578:	2200      	movs	r2, #0
   d557a:	210e      	movs	r1, #14
   d557c:	483b      	ldr	r0, [pc, #236]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d557e:	f002 fd8e 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(15,INPUT);
   d5582:	2200      	movs	r2, #0
   d5584:	210f      	movs	r1, #15
   d5586:	4839      	ldr	r0, [pc, #228]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5588:	f002 fd89 	bl	d809e <_ZN17Adafruit_MCP230177pinModeEhh>

  expand.pullUp(0,HIGH);
   d558c:	2201      	movs	r2, #1
   d558e:	2100      	movs	r1, #0
   d5590:	4836      	ldr	r0, [pc, #216]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5592:	f002 fdad 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(1,HIGH);
   d5596:	2201      	movs	r2, #1
   d5598:	4611      	mov	r1, r2
   d559a:	4834      	ldr	r0, [pc, #208]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d559c:	f002 fda8 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(2,HIGH);
   d55a0:	2201      	movs	r2, #1
   d55a2:	2102      	movs	r1, #2
   d55a4:	4831      	ldr	r0, [pc, #196]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d55a6:	f002 fda3 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(3,HIGH);
   d55aa:	2201      	movs	r2, #1
   d55ac:	2103      	movs	r1, #3
   d55ae:	482f      	ldr	r0, [pc, #188]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d55b0:	f002 fd9e 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(4,HIGH);
   d55b4:	2201      	movs	r2, #1
   d55b6:	2104      	movs	r1, #4
   d55b8:	482c      	ldr	r0, [pc, #176]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d55ba:	f002 fd99 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(5,HIGH);
   d55be:	2201      	movs	r2, #1
   d55c0:	2105      	movs	r1, #5
   d55c2:	482a      	ldr	r0, [pc, #168]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d55c4:	f002 fd94 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(6,HIGH);
   d55c8:	2201      	movs	r2, #1
   d55ca:	2106      	movs	r1, #6
   d55cc:	4827      	ldr	r0, [pc, #156]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d55ce:	f002 fd8f 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(7,HIGH);
   d55d2:	2201      	movs	r2, #1
   d55d4:	2107      	movs	r1, #7
   d55d6:	4825      	ldr	r0, [pc, #148]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d55d8:	f002 fd8a 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(8,HIGH);
   d55dc:	2201      	movs	r2, #1
   d55de:	2108      	movs	r1, #8
   d55e0:	4822      	ldr	r0, [pc, #136]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d55e2:	f002 fd85 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(9,HIGH);
   d55e6:	2201      	movs	r2, #1
   d55e8:	2109      	movs	r1, #9
   d55ea:	4820      	ldr	r0, [pc, #128]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d55ec:	f002 fd80 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(10,HIGH);
   d55f0:	2201      	movs	r2, #1
   d55f2:	210a      	movs	r1, #10
   d55f4:	481d      	ldr	r0, [pc, #116]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d55f6:	f002 fd7b 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(11,HIGH); 
   d55fa:	2201      	movs	r2, #1
   d55fc:	210b      	movs	r1, #11
   d55fe:	481b      	ldr	r0, [pc, #108]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5600:	f002 fd76 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(12,HIGH);
   d5604:	2201      	movs	r2, #1
   d5606:	210c      	movs	r1, #12
   d5608:	4818      	ldr	r0, [pc, #96]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d560a:	f002 fd71 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(13,HIGH);
   d560e:	2201      	movs	r2, #1
   d5610:	210d      	movs	r1, #13
   d5612:	4816      	ldr	r0, [pc, #88]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5614:	f002 fd6c 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(14,HIGH);
   d5618:	2201      	movs	r2, #1
   d561a:	210e      	movs	r1, #14
   d561c:	4813      	ldr	r0, [pc, #76]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d561e:	f002 fd67 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(15,HIGH);
   d5622:	2201      	movs	r2, #1
   d5624:	210f      	movs	r1, #15
   d5626:	4811      	ldr	r0, [pc, #68]	; (d566c <_ZN7IoTNode5beginEv+0x1dc>)
   d5628:	f002 fd62 	bl	d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>

  // Get node ID from MCP79412 EUI-64 node address
  byte nodeHex[8] = "";
   d562c:	2100      	movs	r1, #0
  char nodeHexStr[17] = "";
   d562e:	220d      	movs	r2, #13
   d5630:	a808      	add	r0, sp, #32
  expand.pullUp(13,HIGH);
  expand.pullUp(14,HIGH);
  expand.pullUp(15,HIGH);

  // Get node ID from MCP79412 EUI-64 node address
  byte nodeHex[8] = "";
   d5632:	9101      	str	r1, [sp, #4]
   d5634:	9102      	str	r1, [sp, #8]
  char nodeHexStr[17] = "";
   d5636:	9107      	str	r1, [sp, #28]
   d5638:	f00b fb7e 	bl	e0d38 <memset>
  rtc.getMacAddress(nodeHex);
   d563c:	a901      	add	r1, sp, #4
   d563e:	480c      	ldr	r0, [pc, #48]	; (d5670 <_ZN7IoTNode5beginEv+0x1e0>)
   d5640:	f000 fb3e 	bl	d5cc0 <_ZN8MCP7941x13getMacAddressEPh>
  array_to_string(nodeHex, 8, nodeHexStr);
   d5644:	ab07      	add	r3, sp, #28
   d5646:	2208      	movs	r2, #8
   d5648:	a901      	add	r1, sp, #4
   d564a:	4628      	mov	r0, r5
   d564c:	f7ff ff04 	bl	d5458 <_ZN7IoTNode15array_to_stringEPhjPc>
  nodeID = String(nodeHexStr);
   d5650:	a907      	add	r1, sp, #28
   d5652:	a803      	add	r0, sp, #12
   d5654:	f006 fbd5 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
   d5658:	a903      	add	r1, sp, #12
   d565a:	4628      	mov	r0, r5
   d565c:	f006 fc1b 	bl	dbe96 <_ZN6StringaSEOS_>
   d5660:	a803      	add	r0, sp, #12
   d5662:	f006 fb87 	bl	dbd74 <_ZN6StringD1Ev>
  return result;

}
   d5666:	4620      	mov	r0, r4
   d5668:	b00d      	add	sp, #52	; 0x34
   d566a:	bd30      	pop	{r4, r5, pc}
   d566c:	2003dbdd 	.word	0x2003dbdd
   d5670:	2003dbdc 	.word	0x2003dbdc

000d5674 <_ZN9framArrayC1ER7FramI2CmhR10framResult>:
}

//////////////////

// Fram Array Constructor
framArray::framArray(FramI2C& fram, uint32_t numberOfElements, byte sizeOfElement, framResult& result):
   d5674:	b513      	push	{r0, r1, r4, lr}
   d5676:	4604      	mov	r4, r0
   d5678:	9804      	ldr	r0, [sp, #16]
  _numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), myFram(fram), myResult(result),
  myArray(fram, _numberOfElements, _sizeOfElement, result)
   d567a:	60e0      	str	r0, [r4, #12]
   d567c:	9000      	str	r0, [sp, #0]
   d567e:	6022      	str	r2, [r4, #0]
   d5680:	7123      	strb	r3, [r4, #4]
   d5682:	60a1      	str	r1, [r4, #8]
   d5684:	f104 0010 	add.w	r0, r4, #16
   d5688:	f005 f988 	bl	da99c <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult>
{

}
   d568c:	4620      	mov	r0, r4
   d568e:	b002      	add	sp, #8
   d5690:	bd10      	pop	{r4, pc}

000d5692 <_ZN7IoTNode13makeFramArrayEmh>:

framArray IoTNode::makeFramArray(uint32_t numberOfElements, byte sizeOfElement)
{
   d5692:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return framArray(myFram, numberOfElements,sizeOfElement, myResult);
   d5694:	f101 0510 	add.w	r5, r1, #16
   d5698:	9500      	str	r5, [sp, #0]
   d569a:	3114      	adds	r1, #20
{

}

framArray IoTNode::makeFramArray(uint32_t numberOfElements, byte sizeOfElement)
{
   d569c:	4604      	mov	r4, r0
  return framArray(myFram, numberOfElements,sizeOfElement, myResult);
   d569e:	f7ff ffe9 	bl	d5674 <_ZN9framArrayC1ER7FramI2CmhR10framResult>
}
   d56a2:	4620      	mov	r0, r4
   d56a4:	b003      	add	sp, #12
   d56a6:	bd30      	pop	{r4, r5, pc}

000d56a8 <_ZN9framArray5writeEmPh>:

bool framArray::write(uint32_t index, byte *buffer)
{
   d56a8:	b513      	push	{r0, r1, r4, lr}
  framResult checkResult = framUnknownError;
   d56aa:	ab02      	add	r3, sp, #8
   d56ac:	2463      	movs	r4, #99	; 0x63
   d56ae:	f803 4d01 	strb.w	r4, [r3, #-1]!
  myArray.writeElement(index, buffer, checkResult);
   d56b2:	3010      	adds	r0, #16
   d56b4:	f005 f99d 	bl	da9f2 <_ZN12FramI2CArray12writeElementEmPhR10framResult>
  if (checkResult==framOK)
   d56b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
  else
  {
    return false;
  }
  
}
   d56bc:	fab0 f080 	clz	r0, r0
   d56c0:	0940      	lsrs	r0, r0, #5
   d56c2:	b002      	add	sp, #8
   d56c4:	bd10      	pop	{r4, pc}

000d56c6 <_ZN9framArray4readEmPh>:

bool framArray::read(uint32_t index, byte *buffer)
{
   d56c6:	b513      	push	{r0, r1, r4, lr}
  framResult checkResult = framUnknownError;
   d56c8:	ab02      	add	r3, sp, #8
   d56ca:	2463      	movs	r4, #99	; 0x63
   d56cc:	f803 4d01 	strb.w	r4, [r3, #-1]!
  myArray.readElement(index, buffer, checkResult);
   d56d0:	3010      	adds	r0, #16
   d56d2:	f005 f978 	bl	da9c6 <_ZN12FramI2CArray11readElementEmPhR10framResult>
  if (checkResult==framOK)
   d56d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
  else
  {
    return false;
  }
  
}
   d56da:	fab0 f080 	clz	r0, r0
   d56de:	0940      	lsrs	r0, r0, #5
   d56e0:	b002      	add	sp, #8
   d56e2:	bd10      	pop	{r4, pc}

000d56e4 <_ZN8framRingC1ER7FramI2CmhR10framResult>:


//////////////////

// Fram Ring Array Constructor
framRing::framRing(FramI2C& fram, uint32_t numberOfElements, byte sizeOfElement, framResult& result):
   d56e4:	b513      	push	{r0, r1, r4, lr}
   d56e6:	4604      	mov	r4, r0
   d56e8:	9804      	ldr	r0, [sp, #16]
  _numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), myFram(fram), myResult(result),
  myRing(fram, _numberOfElements, _sizeOfElement, result)
   d56ea:	60e0      	str	r0, [r4, #12]
   d56ec:	9000      	str	r0, [sp, #0]
   d56ee:	6022      	str	r2, [r4, #0]
   d56f0:	7123      	strb	r3, [r4, #4]
   d56f2:	60a1      	str	r1, [r4, #8]
   d56f4:	f104 0010 	add.w	r0, r4, #16
   d56f8:	f005 f991 	bl	daa1e <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult>
{

}
   d56fc:	4620      	mov	r0, r4
   d56fe:	b002      	add	sp, #8
   d5700:	bd10      	pop	{r4, pc}

000d5702 <_ZN7IoTNode12makeFramRingEmh>:

framRing IoTNode::makeFramRing(uint32_t numberOfElements, byte sizeOfElement)
{
   d5702:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return framRing(myFram, numberOfElements,sizeOfElement, myResult);
   d5704:	f101 0510 	add.w	r5, r1, #16
   d5708:	9500      	str	r5, [sp, #0]
   d570a:	3114      	adds	r1, #20
{

}

framRing IoTNode::makeFramRing(uint32_t numberOfElements, byte sizeOfElement)
{
   d570c:	4604      	mov	r4, r0
  return framRing(myFram, numberOfElements,sizeOfElement, myResult);
   d570e:	f7ff ffe9 	bl	d56e4 <_ZN8framRingC1ER7FramI2CmhR10framResult>
}
   d5712:	4620      	mov	r0, r4
   d5714:	b003      	add	sp, #12
   d5716:	bd30      	pop	{r4, r5, pc}

000d5718 <_ZN8framRing10initializeEv>:

void framRing::initialize()
{
  myRing.initialize();
   d5718:	3010      	adds	r0, #16
   d571a:	f005 b9b8 	b.w	daa8e <_ZN14Ring_FramArray10initializeEv>
	...

000d5720 <_GLOBAL__sub_I_expand>:
}

bool framRing::isFull()
{
  return myRing.isFull();
}
   d5720:	b570      	push	{r4, r5, r6, lr}
   d5722:	f005 fa75 	bl	dac10 <HAL_Pin_Map>

#include "IoTNode.h"

Adafruit_MCP23017 expand;

MCP7941x rtc = MCP7941x();
   d5726:	481e      	ldr	r0, [pc, #120]	; (d57a0 <_GLOBAL__sub_I_expand+0x80>)
   d5728:	4e1e      	ldr	r6, [pc, #120]	; (d57a4 <_GLOBAL__sub_I_expand+0x84>)
   d572a:	f000 fac8 	bl	d5cbe <_ZN8MCP7941xC1Ev>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d572e:	481e      	ldr	r0, [pc, #120]	; (d57a8 <_GLOBAL__sub_I_expand+0x88>)

File myFile;
   d5730:	4a1e      	ldr	r2, [pc, #120]	; (d57ac <_GLOBAL__sub_I_expand+0x8c>)
   d5732:	491f      	ldr	r1, [pc, #124]	; (d57b0 <_GLOBAL__sub_I_expand+0x90>)
   d5734:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d573a:	7404      	strb	r4, [r0, #16]
   d573c:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d573e:	6044      	str	r4, [r0, #4]
   d5740:	6083      	str	r3, [r0, #8]
 public:
  File() {}
   d5742:	4b1c      	ldr	r3, [pc, #112]	; (d57b4 <_GLOBAL__sub_I_expand+0x94>)
   d5744:	6003      	str	r3, [r0, #0]
   d5746:	f008 fb4b 	bl	ddde0 <__aeabi_atexit>
   d574a:	4b1b      	ldr	r3, [pc, #108]	; (d57b8 <_GLOBAL__sub_I_expand+0x98>)
   d574c:	6831      	ldr	r1, [r6, #0]
   d574e:	71dc      	strb	r4, [r3, #7]
   d5750:	2264      	movs	r2, #100	; 0x64
   d5752:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5756:	4a19      	ldr	r2, [pc, #100]	; (d57bc <_GLOBAL__sub_I_expand+0x9c>)
   d5758:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d575c:	2201      	movs	r2, #1
   d575e:	ea11 0502 	ands.w	r5, r1, r2
   d5762:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d5766:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d576a:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d576e:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d5772:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d5776:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d577a:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
   d577e:	461c      	mov	r4, r3
   d5780:	d10a      	bne.n	d5798 <_GLOBAL__sub_I_expand+0x78>
   d5782:	4630      	mov	r0, r6
   d5784:	f7fe fc91 	bl	d40aa <__cxa_guard_acquire>
   d5788:	b130      	cbz	r0, d5798 <_GLOBAL__sub_I_expand+0x78>
   d578a:	4629      	mov	r1, r5
   d578c:	480c      	ldr	r0, [pc, #48]	; (d57c0 <_GLOBAL__sub_I_expand+0xa0>)
   d578e:	f005 fe89 	bl	db4a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5792:	4630      	mov	r0, r6
   d5794:	f7fe fc8e 	bl	d40b4 <__cxa_guard_release>
   d5798:	4b09      	ldr	r3, [pc, #36]	; (d57c0 <_GLOBAL__sub_I_expand+0xa0>)
   d579a:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d579e:	bd70      	pop	{r4, r5, r6, pc}
   d57a0:	2003dbdc 	.word	0x2003dbdc
   d57a4:	2003bcec 	.word	0x2003bcec
   d57a8:	2003dbe0 	.word	0x2003dbe0
   d57ac:	2003bce8 	.word	0x2003bce8
   d57b0:	000d52a5 	.word	0x000d52a5
   d57b4:	000e4448 	.word	0x000e4448
   d57b8:	2003dc14 	.word	0x2003dc14
   d57bc:	000e40b0 	.word	0x000e40b0
   d57c0:	2003bcf0 	.word	0x2003bcf0

000d57c4 <_ZN18SdCardPrintHandler16dateTimeCallbackEPtS0_>:
	// Start over at beginning of buffer
	bufOffset = 0;
}

// [static]
void SdCardPrintHandler::dateTimeCallback(uint16_t* date, uint16_t* time) {
   d57c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57c6:	460e      	mov	r6, r1
   d57c8:	4607      	mov	r7, r0
	*date = FAT_DATE(Time.year(), Time.month(), Time.day());
   d57ca:	f006 ff9b 	bl	dc704 <_ZN9TimeClass4yearEv>
   d57ce:	4605      	mov	r5, r0
   d57d0:	f006 ff90 	bl	dc6f4 <_ZN9TimeClass5monthEv>
   d57d4:	4604      	mov	r4, r0
   d57d6:	f006 ff83 	bl	dc6e0 <_ZN9TimeClass3dayEv>
   d57da:	0164      	lsls	r4, r4, #5
   d57dc:	b2c0      	uxtb	r0, r0
   d57de:	b2ad      	uxth	r5, r5
   d57e0:	f404 54ff 	and.w	r4, r4, #8160	; 0x1fe0
   d57e4:	f2a5 75bc 	subw	r5, r5, #1980	; 0x7bc
   d57e8:	4304      	orrs	r4, r0
   d57ea:	ea44 2445 	orr.w	r4, r4, r5, lsl #9
   d57ee:	803c      	strh	r4, [r7, #0]
	*time = FAT_TIME(Time.hour(), Time.minute(), Time.second());
   d57f0:	f006 ff58 	bl	dc6a4 <_ZN9TimeClass4hourEv>
   d57f4:	4605      	mov	r5, r0
   d57f6:	f006 ff5f 	bl	dc6b8 <_ZN9TimeClass6minuteEv>
   d57fa:	4604      	mov	r4, r0
   d57fc:	f006 ff66 	bl	dc6cc <_ZN9TimeClass6secondEv>
   d5800:	02ed      	lsls	r5, r5, #11
   d5802:	0164      	lsls	r4, r4, #5
   d5804:	f405 25ff 	and.w	r5, r5, #522240	; 0x7f800
   d5808:	f404 54ff 	and.w	r4, r4, #8160	; 0x1fe0
   d580c:	432c      	orrs	r4, r5
   d580e:	f3c0 0046 	ubfx	r0, r0, #1, #7
   d5812:	4304      	orrs	r4, r0
   d5814:	8034      	strh	r4, [r6, #0]
   d5816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5818 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE>:
}

//
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
   d5818:	b570      	push	{r4, r5, r6, lr}
   d581a:	4604      	mov	r4, r0
   d581c:	2500      	movs	r5, #0
   d581e:	6045      	str	r5, [r0, #4]
   d5820:	7322      	strb	r2, [r4, #12]
   d5822:	481d      	ldr	r0, [pc, #116]	; (d5898 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x80>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5824:	4a1d      	ldr	r2, [pc, #116]	; (d589c <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x84>)
   d5826:	6020      	str	r0, [r4, #0]
   d5828:	60a1      	str	r1, [r4, #8]
   d582a:	6122      	str	r2, [r4, #16]
   d582c:	791a      	ldrb	r2, [r3, #4]
   d582e:	7522      	strb	r2, [r4, #20]
   d5830:	689a      	ldr	r2, [r3, #8]
   d5832:	61a2      	str	r2, [r4, #24]
   d5834:	7b1a      	ldrb	r2, [r3, #12]
   d5836:	7722      	strb	r2, [r4, #28]
   d5838:	7b5b      	ldrb	r3, [r3, #13]
   d583a:	7763      	strb	r3, [r4, #29]
   d583c:	4b18      	ldr	r3, [pc, #96]	; (d58a0 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x88>)
   d583e:	6223      	str	r3, [r4, #32]
   d5840:	4b18      	ldr	r3, [pc, #96]	; (d58a4 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x8c>)
   d5842:	6263      	str	r3, [r4, #36]	; 0x24
   d5844:	230a      	movs	r3, #10
   d5846:	62a3      	str	r3, [r4, #40]	; 0x28
   d5848:	f242 7310 	movw	r3, #10000	; 0x2710
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d584c:	f504 768e 	add.w	r6, r4, #284	; 0x11c
   d5850:	62e3      	str	r3, [r4, #44]	; 0x2c
   d5852:	2301      	movs	r3, #1
   d5854:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   d5858:	6365      	str	r5, [r4, #52]	; 0x34
   d585a:	63a5      	str	r5, [r4, #56]	; 0x38
   d585c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   d5860:	f884 50c9 	strb.w	r5, [r4, #201]	; 0xc9
   d5864:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
   d5868:	f884 50d0 	strb.w	r5, [r4, #208]	; 0xd0
   d586c:	f884 50d1 	strb.w	r5, [r4, #209]	; 0xd1
   d5870:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
   d5874:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
   d5878:	2210      	movs	r2, #16
   d587a:	4629      	mov	r1, r5
   d587c:	4630      	mov	r0, r6
   d587e:	f00b fa5b 	bl	e0d38 <memset>
   d5882:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d5886:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
	    this->_M_header._M_right = &this->_M_header;
   d588a:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   d588e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
}
   d5892:	4620      	mov	r0, r4
   d5894:	bd70      	pop	{r4, r5, r6, pc}
   d5896:	bf00      	nop
   d5898:	000e450c 	.word	0x000e450c
   d589c:	000e40b0 	.word	0x000e40b0
   d58a0:	000e446d 	.word	0x000e446d
   d58a4:	000f4240 	.word	0x000f4240

000d58a8 <_ZN18SdCardPrintHandler7getNameEi>:
		needsScanCard = true;
		lastCardCheck = millis();
	}
}

const char *SdCardPrintHandler::getName(int num) {
   d58a8:	b510      	push	{r4, lr}
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
   d58aa:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
   d58ae:	460b      	mov	r3, r1
   d58b0:	4a03      	ldr	r2, [pc, #12]	; (d58c0 <_ZN18SdCardPrintHandler7getNameEi+0x18>)
   d58b2:	210c      	movs	r1, #12
   d58b4:	4620      	mov	r0, r4
   d58b6:	f005 fd59 	bl	db36c <snprintf>
	return nameBuf;
}
   d58ba:	4620      	mov	r0, r4
   d58bc:	bd10      	pop	{r4, pc}
   d58be:	bf00      	nop
   d58c0:	000e4472 	.word	0x000e4472

000d58c4 <_ZN18SdCardPrintHandler13checkMaxFilesEv>:
		return false;
	}
}


void SdCardPrintHandler::checkMaxFiles() {
   d58c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58c6:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
   d58ca:	4604      	mov	r4, r0
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
		const char *name = getName(*it);
		DEBUG_NORMAL(("removing old log file %s", name));
		FatFile::remove(&logsDir, name);
   d58cc:	f100 07d0 	add.w	r7, r0, #208	; 0xd0


void SdCardPrintHandler::checkMaxFiles() {
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
   d58d0:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   d58d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d58d6:	429a      	cmp	r2, r3
   d58d8:	d921      	bls.n	d591e <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x5a>
		const char *name = getName(*it);
   d58da:	6929      	ldr	r1, [r5, #16]
   d58dc:	4620      	mov	r0, r4
   d58de:	f7ff ffe3 	bl	d58a8 <_ZN18SdCardPrintHandler7getNameEi>
   d58e2:	4606      	mov	r6, r0
		DEBUG_NORMAL(("removing old log file %s", name));
   d58e4:	f007 fb8e 	bl	dd004 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d58e8:	4633      	mov	r3, r6
   d58ea:	4a0d      	ldr	r2, [pc, #52]	; (d5920 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x5c>)
   d58ec:	2101      	movs	r1, #1
   d58ee:	f006 fd3c 	bl	dc36a <_ZN5Print11printf_implEbPKcz>
		FatFile::remove(&logsDir, name);
   d58f2:	4631      	mov	r1, r6
   d58f4:	4638      	mov	r0, r7
   d58f6:	f001 fd07 	bl	d7308 <_ZN7FatFile6removeEPS_PKc>
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d58fa:	4628      	mov	r0, r5
   d58fc:	f008 fae5 	bl	ddeca <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   d5900:	f504 718e 	add.w	r1, r4, #284	; 0x11c
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d5904:	4606      	mov	r6, r0
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   d5906:	4628      	mov	r0, r5
   d5908:	f008 fb57 	bl	ddfba <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d590c:	f7fe fbc9 	bl	d40a2 <_ZdlPv>
      _M_drop_node(__y);
      --_M_impl._M_node_count;
   d5910:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   d5914:	3b01      	subs	r3, #1
   d5916:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
		it = fileNums.erase(it);
   d591a:	4635      	mov	r5, r6


void SdCardPrintHandler::checkMaxFiles() {
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
   d591c:	e7d8      	b.n	d58d0 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0xc>
   d591e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5920:	000e447b 	.word	0x000e447b

000d5924 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5924:	b570      	push	{r4, r5, r6, lr}
   d5926:	4606      	mov	r6, r0
   d5928:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d592a:	b14c      	cbz	r4, d5940 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x1c>
	{
	  _M_erase(_S_right(__x));
   d592c:	68e1      	ldr	r1, [r4, #12]
   d592e:	4630      	mov	r0, r6
   d5930:	f7ff fff8 	bl	d5924 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>
   d5934:	68a5      	ldr	r5, [r4, #8]
   d5936:	4620      	mov	r0, r4
   d5938:	f7fe fbb3 	bl	d40a2 <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   d593c:	462c      	mov	r4, r5
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d593e:	e7f4      	b.n	d592a <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x6>
   d5940:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5944 <_ZN18SdCardPrintHandlerD1Ev>:
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
}

SdCardPrintHandler::~SdCardPrintHandler() {
   d5944:	b510      	push	{r4, lr}
   d5946:	4b05      	ldr	r3, [pc, #20]	; (d595c <_ZN18SdCardPrintHandlerD1Ev+0x18>)

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
   d5948:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
   d594c:	6003      	str	r3, [r0, #0]
   d594e:	4604      	mov	r4, r0
   d5950:	f500 708c 	add.w	r0, r0, #280	; 0x118
   d5954:	f7ff ffe6 	bl	d5924 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>

}
   d5958:	4620      	mov	r0, r4
   d595a:	bd10      	pop	{r4, pc}
   d595c:	000e450c 	.word	0x000e450c

000d5960 <_ZN18SdCardPrintHandlerD0Ev>:
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
}

SdCardPrintHandler::~SdCardPrintHandler() {
   d5960:	b510      	push	{r4, lr}
   d5962:	4604      	mov	r4, r0

}
   d5964:	f7ff ffee 	bl	d5944 <_ZN18SdCardPrintHandlerD1Ev>
   d5968:	4620      	mov	r0, r4
   d596a:	f44f 719a 	mov.w	r1, #308	; 0x134
   d596e:	f008 fa45 	bl	dddfc <_ZdlPvj>
   d5972:	4620      	mov	r0, r4
   d5974:	bd10      	pop	{r4, pc}

000d5976 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>:
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d597a:	460e      	mov	r6, r1
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d597c:	f106 0a04 	add.w	sl, r6, #4
   d5980:	6889      	ldr	r1, [r1, #8]
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5982:	4605      	mov	r5, r0
   d5984:	4617      	mov	r7, r2
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d5986:	4654      	mov	r4, sl
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
   d5988:	2301      	movs	r3, #1
      while (__x != 0)
   d598a:	b159      	cbz	r1, d59a4 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x2e>
   d598c:	683a      	ldr	r2, [r7, #0]
   d598e:	690b      	ldr	r3, [r1, #16]
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   d5990:	429a      	cmp	r2, r3
   d5992:	bfb4      	ite	lt
   d5994:	688a      	ldrlt	r2, [r1, #8]
   d5996:	68ca      	ldrge	r2, [r1, #12]
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5998:	460c      	mov	r4, r1
   d599a:	bfb4      	ite	lt
   d599c:	2301      	movlt	r3, #1
   d599e:	2300      	movge	r3, #0
   d59a0:	4611      	mov	r1, r2
   d59a2:	e7f2      	b.n	d598a <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x14>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d59a4:	b133      	cbz	r3, d59b4 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x3e>
	{
	  if (__j == begin())
   d59a6:	68f3      	ldr	r3, [r6, #12]
   d59a8:	429c      	cmp	r4, r3
   d59aa:	d00e      	beq.n	d59ca <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x54>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d59ac:	4620      	mov	r0, r4
   d59ae:	f008 fa9f 	bl	ddef0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d59b2:	e000      	b.n	d59b6 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x40>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d59b4:	4620      	mov	r0, r4
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d59b6:	6902      	ldr	r2, [r0, #16]
   d59b8:	683b      	ldr	r3, [r7, #0]
   d59ba:	429a      	cmp	r2, r3
   d59bc:	db05      	blt.n	d59ca <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x54>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d59be:	6028      	str	r0, [r5, #0]
   d59c0:	2300      	movs	r3, #0
   d59c2:	712b      	strb	r3, [r5, #4]
				 _GLIBCXX_FORWARD(_Arg, __v), __an),
		      true);
	}

      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    }
   d59c4:	4628      	mov	r0, r5
   d59c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
		 _NodeGen& __node_gen)
      {
	bool __insert_left = (__x != 0 || __p == _M_end()
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
							_S_key(__p)));
   d59ca:	45a2      	cmp	sl, r4
   d59cc:	d008      	beq.n	d59e0 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x6a>
   d59ce:	683a      	ldr	r2, [r7, #0]
   d59d0:	6923      	ldr	r3, [r4, #16]
   d59d2:	429a      	cmp	r2, r3
   d59d4:	bfac      	ite	ge
   d59d6:	f04f 0900 	movge.w	r9, #0
   d59da:	f04f 0901 	movlt.w	r9, #1
   d59de:	e001      	b.n	d59e4 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x6e>
   d59e0:	f04f 0901 	mov.w	r9, #1
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d59e4:	2014      	movs	r0, #20
   d59e6:	f7fe fb58 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d59ea:	683b      	ldr	r3, [r7, #0]
   d59ec:	f110 0f10 	cmn.w	r0, #16
   d59f0:	bf18      	it	ne
   d59f2:	6103      	strne	r3, [r0, #16]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d59f4:	4680      	mov	r8, r0

	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));

	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d59f6:	4653      	mov	r3, sl
   d59f8:	4601      	mov	r1, r0
   d59fa:	4622      	mov	r2, r4
   d59fc:	4648      	mov	r0, r9
   d59fe:	f008 fa79 	bl	ddef4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				      this->_M_impl._M_header);
	++_M_impl._M_node_count;
   d5a02:	6973      	ldr	r3, [r6, #20]
   d5a04:	f8c5 8000 	str.w	r8, [r5]
   d5a08:	3301      	adds	r3, #1
   d5a0a:	6173      	str	r3, [r6, #20]
   d5a0c:	2301      	movs	r3, #1
   d5a0e:	e7d8      	b.n	d59c2 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x4c>

000d5a10 <_ZN18SdCardPrintHandler11openLogFileEv>:
const char *SdCardPrintHandler::getName(int num) {
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
	return nameBuf;
}

bool SdCardPrintHandler::openLogFile() {
   d5a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const char *name = getName(lastFileNum);
   d5a12:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
const char *SdCardPrintHandler::getName(int num) {
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
	return nameBuf;
}

bool SdCardPrintHandler::openLogFile() {
   d5a16:	4604      	mov	r4, r0
	const char *name = getName(lastFileNum);
   d5a18:	f7ff ff46 	bl	d58a8 <_ZN18SdCardPrintHandler7getNameEi>
	if (curLogFile.open(&logsDir, name, O_RDWR | O_APPEND | O_CREAT)) {
   d5a1c:	f240 230a 	movw	r3, #522	; 0x20a
   d5a20:	4602      	mov	r2, r0
   d5a22:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
   d5a26:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   d5a2a:	f001 fc1e 	bl	d726a <_ZN7FatFile4openEPS_PKci>
   d5a2e:	4605      	mov	r5, r0
   d5a30:	b130      	cbz	r0, d5a40 <_ZN18SdCardPrintHandler11openLogFileEv+0x30>
       */
      std::pair<iterator, bool>
      insert(const value_type& __x)
      {
	std::pair<typename _Rep_type::iterator, bool> __p =
	  _M_t._M_insert_unique(__x);
   d5a32:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   d5a36:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d5a3a:	4668      	mov	r0, sp
   d5a3c:	f7ff ff9b 	bl	d5976 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
	}
	else {
		DEBUG_HIGH(("failed to open log file %s", name));
		return false;
	}
}
   d5a40:	4628      	mov	r0, r5
   d5a42:	b003      	add	sp, #12
   d5a44:	bd30      	pop	{r4, r5, pc}
	...

000d5a48 <_ZN18SdCardPrintHandler8scanCardEv>:
	}

	return 1;
}

void SdCardPrintHandler::scanCard() {
   d5a48:	b530      	push	{r4, r5, lr}
	DEBUG_HIGH(("scanCard"));
	needsScanCard = false;
   d5a4a:	2300      	movs	r3, #0
   d5a4c:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8

	if (!lastBeginResult) {
   d5a50:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
	}

	return 1;
}

void SdCardPrintHandler::scanCard() {
   d5a54:	b09d      	sub	sp, #116	; 0x74
   d5a56:	4604      	mov	r4, r0
	DEBUG_HIGH(("scanCard"));
	needsScanCard = false;

	if (!lastBeginResult) {
   d5a58:	b9e3      	cbnz	r3, d5a94 <_ZN18SdCardPrintHandler8scanCardEv+0x4c>
   *
   * See the timestamp() function.
   */
  static void dateTimeCallback(
    void (*dateTime)(uint16_t* date, uint16_t* time)) {
    m_dateTime = dateTime;
   d5a5a:	4b49      	ldr	r3, [pc, #292]	; (d5b80 <_ZN18SdCardPrintHandler8scanCardEv+0x138>)
   d5a5c:	4a49      	ldr	r2, [pc, #292]	; (d5b84 <_ZN18SdCardPrintHandler8scanCardEv+0x13c>)
		// Set the date time callback
		SdFile::dateTimeCallback(dateTimeCallback);

		pinMode(csPin, OUTPUT);
   d5a5e:	7b00      	ldrb	r0, [r0, #12]
   d5a60:	601a      	str	r2, [r3, #0]
   d5a62:	2101      	movs	r1, #1
   d5a64:	f008 f93a 	bl	ddcdc <pinMode>
   d5a68:	4b47      	ldr	r3, [pc, #284]	; (d5b88 <_ZN18SdCardPrintHandler8scanCardEv+0x140>)
   d5a6a:	930c      	str	r3, [sp, #48]	; 0x30
   d5a6c:	7d23      	ldrb	r3, [r4, #20]
   d5a6e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d5a72:	69a3      	ldr	r3, [r4, #24]
   d5a74:	930e      	str	r3, [sp, #56]	; 0x38
   d5a76:	7f23      	ldrb	r3, [r4, #28]
   d5a78:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
		lastBeginResult = sd.begin(csPin, spiSettings);
   d5a7c:	7b21      	ldrb	r1, [r4, #12]
   d5a7e:	7f63      	ldrb	r3, [r4, #29]
   d5a80:	68a0      	ldr	r0, [r4, #8]
   d5a82:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   d5a86:	aa0c      	add	r2, sp, #48	; 0x30
   d5a88:	f7ff fc3a 	bl	d5300 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d5a8c:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
		if (!lastBeginResult) {
   d5a90:	2800      	cmp	r0, #0
   d5a92:	d06b      	beq.n	d5b6c <_ZN18SdCardPrintHandler8scanCardEv+0x124>
			lastCardCheck = millis();
			return;
		}
	}

	if (logsDirName != NULL && !sd.exists(logsDirName)) {
   d5a94:	6a22      	ldr	r2, [r4, #32]
   d5a96:	b332      	cbz	r2, d5ae6 <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d5a98:	68a1      	ldr	r1, [r4, #8]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5a9a:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d5a9c:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d5aa0:	a80c      	add	r0, sp, #48	; 0x30
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5aa2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d5aa6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d5aaa:	f001 fbde 	bl	d726a <_ZN7FatFile4openEPS_PKci>
   d5aae:	4605      	mov	r5, r0
   d5ab0:	b9c8      	cbnz	r0, d5ae6 <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
		DEBUG_NORMAL(("creating logs dir %s", logsDirName));
   d5ab2:	f007 faa7 	bl	dd004 <_Z16_fetch_usbserialv>
   d5ab6:	6a23      	ldr	r3, [r4, #32]
   d5ab8:	4a34      	ldr	r2, [pc, #208]	; (d5b8c <_ZN18SdCardPrintHandler8scanCardEv+0x144>)
   d5aba:	2101      	movs	r1, #1
   d5abc:	f006 fc55 	bl	dc36a <_ZN5Print11printf_implEbPKcz>
		if (!sd.mkdir(logsDirName)) {
   d5ac0:	68a1      	ldr	r1, [r4, #8]
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
   d5ac2:	6a22      	ldr	r2, [r4, #32]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5ac4:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
   d5ac8:	2301      	movs	r3, #1
   d5aca:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d5ace:	a80c      	add	r0, sp, #48	; 0x30
   d5ad0:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
   d5ad4:	f001 fca9 	bl	d742a <_ZN7FatFile5mkdirEPS_PKcb>
   d5ad8:	b928      	cbnz	r0, d5ae6 <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
			DEBUG_NORMAL(("mkdir failed"));
   d5ada:	f007 fa93 	bl	dd004 <_Z16_fetch_usbserialv>
   d5ade:	4a2c      	ldr	r2, [pc, #176]	; (d5b90 <_ZN18SdCardPrintHandler8scanCardEv+0x148>)
   d5ae0:	2101      	movs	r1, #1
   d5ae2:	f006 fc42 	bl	dc36a <_ZN5Print11printf_implEbPKcz>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d5ae6:	68a1      	ldr	r1, [r4, #8]
		}
	}

	if (logsDir.open(sd.vwd(), logsDirName, O_READ)) {
   d5ae8:	6a22      	ldr	r2, [r4, #32]
   d5aea:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   d5aee:	2300      	movs	r3, #0
   d5af0:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d5af4:	4628      	mov	r0, r5
   d5af6:	f001 fbb8 	bl	d726a <_ZN7FatFile4openEPS_PKci>
   d5afa:	b388      	cbz	r0, d5b60 <_ZN18SdCardPrintHandler8scanCardEv+0x118>
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d5afc:	2100      	movs	r1, #0
   d5afe:	4628      	mov	r0, r5
   d5b00:	f001 fa80 	bl	d7004 <_ZN7FatFile7seekSetEm>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5b04:	2300      	movs	r3, #0
   d5b06:	f88d 300c 	strb.w	r3, [sp, #12]
   d5b0a:	f88d 300d 	strb.w	r3, [sp, #13]

		logsDir.rewind();

		FatFile tempFile;

		while (tempFile.openNext(&logsDir, O_READ)) {
   d5b0e:	2200      	movs	r2, #0
   d5b10:	4629      	mov	r1, r5
   d5b12:	a803      	add	r0, sp, #12
   d5b14:	f001 fb2d 	bl	d7172 <_ZN7FatFile8openNextEPS_i>
   d5b18:	b1d0      	cbz	r0, d5b50 <_ZN18SdCardPrintHandler8scanCardEv+0x108>
			char name[64];
			tempFile.getName(name, sizeof(name));
   d5b1a:	2240      	movs	r2, #64	; 0x40
   d5b1c:	a90c      	add	r1, sp, #48	; 0x30
   d5b1e:	a803      	add	r0, sp, #12
   d5b20:	f000 fd00 	bl	d6524 <_ZN7FatFile7getNameEPcj>
			DEBUG_HIGH(("logs dir file %s", name));

			int num = atoi(name);
   d5b24:	a80c      	add	r0, sp, #48	; 0x30
   d5b26:	f00a ffda 	bl	e0ade <atoi>
   d5b2a:	9000      	str	r0, [sp, #0]
			if (num != 0) {
   d5b2c:	b160      	cbz	r0, d5b48 <_ZN18SdCardPrintHandler8scanCardEv+0x100>
   d5b2e:	466a      	mov	r2, sp
   d5b30:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d5b34:	a801      	add	r0, sp, #4
   d5b36:	f7ff ff1e 	bl	d5976 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
				fileNums.insert(num);
				if (num > lastFileNum) {
   d5b3a:	9b00      	ldr	r3, [sp, #0]
   d5b3c:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   d5b40:	429a      	cmp	r2, r3
					lastFileNum = num;
   d5b42:	bfb8      	it	lt
   d5b44:	f8c4 30cc 	strlt.w	r3, [r4, #204]	; 0xcc
				}
			}
			tempFile.close();
   d5b48:	a803      	add	r0, sp, #12
   d5b4a:	f001 fb87 	bl	d725c <_ZN7FatFile5closeEv>

		logsDir.rewind();

		FatFile tempFile;

		while (tempFile.openNext(&logsDir, O_READ)) {
   d5b4e:	e7de      	b.n	d5b0e <_ZN18SdCardPrintHandler8scanCardEv+0xc6>
					lastFileNum = num;
				}
			}
			tempFile.close();
		}
		checkMaxFiles();
   d5b50:	4620      	mov	r0, r4
   d5b52:	f7ff feb7 	bl	d58c4 <_ZN18SdCardPrintHandler13checkMaxFilesEv>

		if (!openLogFile()) {
   d5b56:	4620      	mov	r0, r4
   d5b58:	f7ff ff5a 	bl	d5a10 <_ZN18SdCardPrintHandler11openLogFileEv>
   d5b5c:	b968      	cbnz	r0, d5b7a <_ZN18SdCardPrintHandler8scanCardEv+0x132>
   d5b5e:	e005      	b.n	d5b6c <_ZN18SdCardPrintHandler8scanCardEv+0x124>
			needsScanCard = true;
			lastCardCheck = millis();
		}
	}
	else {
		DEBUG_NORMAL(("failed to open logs dir"));
   d5b60:	f007 fa50 	bl	dd004 <_Z16_fetch_usbserialv>
   d5b64:	4a0b      	ldr	r2, [pc, #44]	; (d5b94 <_ZN18SdCardPrintHandler8scanCardEv+0x14c>)
   d5b66:	2101      	movs	r1, #1
   d5b68:	f006 fbff 	bl	dc36a <_ZN5Print11printf_implEbPKcz>
		needsScanCard = true;
   d5b6c:	2301      	movs	r3, #1
   d5b6e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   d5b72:	f005 f8f5 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
		lastCardCheck = millis();
   d5b76:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
	}
}
   d5b7a:	b01d      	add	sp, #116	; 0x74
   d5b7c:	bd30      	pop	{r4, r5, pc}
   d5b7e:	bf00      	nop
   d5b80:	2003e09c 	.word	0x2003e09c
   d5b84:	000d57c5 	.word	0x000d57c5
   d5b88:	000e40b0 	.word	0x000e40b0
   d5b8c:	000e44b9 	.word	0x000e44b9
   d5b90:	000e4494 	.word	0x000e4494
   d5b94:	000e44a1 	.word	0x000e44a1

000d5b98 <_ZN18SdCardPrintHandler8writeBufEv>:
		it = fileNums.erase(it);
	}
}


void SdCardPrintHandler::writeBuf() {
   d5b98:	b538      	push	{r3, r4, r5, lr}
   d5b9a:	4604      	mov	r4, r0

	if (writeToStream) {
   d5b9c:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d5b9e:	b128      	cbz	r0, d5bac <_ZN18SdCardPrintHandler8writeBufEv+0x14>
		writeToStream->write(buf, bufOffset);
   d5ba0:	6803      	ldr	r3, [r0, #0]
   d5ba2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d5ba4:	68db      	ldr	r3, [r3, #12]
   d5ba6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d5baa:	4798      	blx	r3
	}

	if (needsScanCard) {
   d5bac:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   d5bb0:	b15b      	cbz	r3, d5bca <_ZN18SdCardPrintHandler8writeBufEv+0x32>
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
   d5bb2:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d5bb6:	2b00      	cmp	r3, #0
   d5bb8:	d053      	beq.n	d5c62 <_ZN18SdCardPrintHandler8writeBufEv+0xca>
   d5bba:	f005 f8d1 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
   d5bbe:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d5bc2:	1ac0      	subs	r0, r0, r3
   d5bc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5bc6:	4298      	cmp	r0, r3
   d5bc8:	d24b      	bcs.n	d5c62 <_ZN18SdCardPrintHandler8writeBufEv+0xca>
			scanCard();
		}
	}

	if (lastBeginResult) {
   d5bca:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
   d5bce:	2b00      	cmp	r3, #0
   d5bd0:	d044      	beq.n	d5c5c <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
		if (curLogFile.isOpen()) {
   d5bd2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   d5bd6:	2b00      	cmp	r3, #0
   d5bd8:	d040      	beq.n	d5c5c <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
			if (curLogFile.write(buf, bufOffset) > 0) {
   d5bda:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
   d5bde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d5be0:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d5be4:	4628      	mov	r0, r5
   d5be6:	f001 fc71 	bl	d74cc <_ZN7FatFile5writeEPKvj>
   d5bea:	2800      	cmp	r0, #0
   d5bec:	dd21      	ble.n	d5c32 <_ZN18SdCardPrintHandler8writeBufEv+0x9a>
				if (syncEveryEntry) {
   d5bee:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d5bf2:	b113      	cbz	r3, d5bfa <_ZN18SdCardPrintHandler8writeBufEv+0x62>
					curLogFile.sync();
   d5bf4:	4628      	mov	r0, r5
   d5bf6:	f001 fafb 	bl	d71f0 <_ZN7FatFile4syncEv>
				}

				if (curLogFile.fileSize() > desiredFileSize) {
   d5bfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5bfc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d5c00:	429a      	cmp	r2, r3
   d5c02:	d22b      	bcs.n	d5c5c <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
					// File is too large now. Make a new one.
					curLogFile.close();
   d5c04:	4628      	mov	r0, r5
   d5c06:	f001 fb29 	bl	d725c <_ZN7FatFile5closeEv>
					lastFileNum++;
   d5c0a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d5c0e:	3301      	adds	r3, #1
   d5c10:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
					DEBUG_NORMAL(("creating new log file %04d", lastFileNum));
   d5c14:	f007 f9f6 	bl	dd004 <_Z16_fetch_usbserialv>
   d5c18:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d5c1c:	4a13      	ldr	r2, [pc, #76]	; (d5c6c <_ZN18SdCardPrintHandler8writeBufEv+0xd4>)
   d5c1e:	2101      	movs	r1, #1
   d5c20:	f006 fba3 	bl	dc36a <_ZN5Print11printf_implEbPKcz>
					openLogFile();
   d5c24:	4620      	mov	r0, r4
   d5c26:	f7ff fef3 	bl	d5a10 <_ZN18SdCardPrintHandler11openLogFileEv>

					// Are there too many old files?
					checkMaxFiles();
   d5c2a:	4620      	mov	r0, r4
   d5c2c:	f7ff fe4a 	bl	d58c4 <_ZN18SdCardPrintHandler13checkMaxFilesEv>
   d5c30:	e014      	b.n	d5c5c <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
				}
			}
			else {
				// Write failed
				DEBUG_NORMAL(("write to sd card failed"));
   d5c32:	f007 f9e7 	bl	dd004 <_Z16_fetch_usbserialv>
   d5c36:	4a0e      	ldr	r2, [pc, #56]	; (d5c70 <_ZN18SdCardPrintHandler8writeBufEv+0xd8>)
   d5c38:	2101      	movs	r1, #1
   d5c3a:	f006 fb96 	bl	dc36a <_ZN5Print11printf_implEbPKcz>
				curLogFile.close();
   d5c3e:	4628      	mov	r0, r5
   d5c40:	f001 fb0c 	bl	d725c <_ZN7FatFile5closeEv>
				logsDir.close();
   d5c44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d5c48:	f001 fb08 	bl	d725c <_ZN7FatFile5closeEv>
				needsScanCard = true;
   d5c4c:	2301      	movs	r3, #1
   d5c4e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
				lastBeginResult = false;
   d5c52:	2300      	movs	r3, #0
   d5c54:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
				lastCardCheck = 0;
   d5c58:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
			}
		}
	}

	// Start over at beginning of buffer
	bufOffset = 0;
   d5c5c:	2300      	movs	r3, #0
   d5c5e:	63a3      	str	r3, [r4, #56]	; 0x38
}
   d5c60:	bd38      	pop	{r3, r4, r5, pc}
		writeToStream->write(buf, bufOffset);
	}

	if (needsScanCard) {
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
			scanCard();
   d5c62:	4620      	mov	r0, r4
   d5c64:	f7ff fef0 	bl	d5a48 <_ZN18SdCardPrintHandler8scanCardEv>
   d5c68:	e7af      	b.n	d5bca <_ZN18SdCardPrintHandler8writeBufEv+0x32>
   d5c6a:	bf00      	nop
   d5c6c:	000e44ce 	.word	0x000e44ce
   d5c70:	000e44e9 	.word	0x000e44e9

000d5c74 <_ZN18SdCardPrintHandler5writeEh>:
SdCardPrintHandler::~SdCardPrintHandler() {

}


size_t SdCardPrintHandler::write(uint8_t c) {
   d5c74:	b508      	push	{r3, lr}

	buf[bufOffset++] = c;
   d5c76:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d5c78:	1c5a      	adds	r2, r3, #1
   d5c7a:	4403      	add	r3, r0
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d5c7c:	2a7f      	cmp	r2, #127	; 0x7f
}


size_t SdCardPrintHandler::write(uint8_t c) {

	buf[bufOffset++] = c;
   d5c7e:	6382      	str	r2, [r0, #56]	; 0x38
   d5c80:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d5c84:	d801      	bhi.n	d5c8a <_ZN18SdCardPrintHandler5writeEh+0x16>
   d5c86:	290a      	cmp	r1, #10
   d5c88:	d101      	bne.n	d5c8e <_ZN18SdCardPrintHandler5writeEh+0x1a>
		// Buffer is full or have the LF in CRLF, write it out
		writeBuf();
   d5c8a:	f7ff ff85 	bl	d5b98 <_ZN18SdCardPrintHandler8writeBufEv>
	}

	return 1;
}
   d5c8e:	2001      	movs	r0, #1
   d5c90:	bd08      	pop	{r3, pc}

000d5c92 <_GLOBAL__sub_I__ZN22SdCardLogHandlerBufferC2EPhjR5SdFathN8particle13__SPISettingsE8LogLevelN5spark6VectorINS6_17LogCategoryFilterENS6_16DefaultAllocatorEEE>:
   d5c92:	f004 bfbd 	b.w	dac10 <HAL_Pin_Map>

000d5c96 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d5c96:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   d5c98:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d5c9a:	2108      	movs	r1, #8
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d5c9c:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d5c9e:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
   d5ca0:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
   d5ca2:	4770      	bx	lr

000d5ca4 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
   d5ca4:	b508      	push	{r3, lr}
  Wire.begin();
   d5ca6:	f008 f875 	bl	ddd94 <_Z19__fetch_global_Wirev>
}
   d5caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
   d5cae:	f007 bb57 	b.w	dd360 <_ZN7TwoWire5beginEv>

000d5cb2 <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
   d5cb2:	f004 bfad 	b.w	dac10 <HAL_Pin_Map>

000d5cb6 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5cb6:	6803      	ldr	r3, [r0, #0]
   d5cb8:	b2c9      	uxtb	r1, r1
   d5cba:	689b      	ldr	r3, [r3, #8]
   d5cbc:	4718      	bx	r3

000d5cbe <_ZN8MCP7941xC1Ev>:
  //  Wire.setSpeed(400000);
  // Initialize the I2C bus if not already enabled
  // if (!Wire.isEnabled()) {
  //     Wire.begin();
  // }
}
   d5cbe:	4770      	bx	lr

000d5cc0 <_ZN8MCP7941x13getMacAddressEPh>:
}


// Function to read the mac address from the eeprom:
void MCP7941x::getMacAddress(byte *mac_address)
{
   d5cc0:	b538      	push	{r3, r4, r5, lr}
   d5cc2:	460c      	mov	r4, r1
  Wire.beginTransmission(MCP7941x_EEPROM_I2C_ADDR);
   d5cc4:	f008 f866 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5cc8:	2157      	movs	r1, #87	; 0x57
   d5cca:	f007 fb84 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(MAC_LOCATION);
   d5cce:	f008 f861 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5cd2:	21f2      	movs	r1, #242	; 0xf2
   d5cd4:	f7ff ffef 	bl	d5cb6 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d5cd8:	f008 f85c 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5cdc:	f007 fb82 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(MCP7941x_EEPROM_I2C_ADDR, 6);
   d5ce0:	f008 f858 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5ce4:	2206      	movs	r2, #6
   d5ce6:	2157      	movs	r1, #87	; 0x57
   d5ce8:	f007 fb6e 	bl	dd3c8 <_ZN7TwoWire11requestFromEhj>
   d5cec:	1e65      	subs	r5, r4, #1
   d5cee:	3405      	adds	r4, #5

  for( int i=0; i<6; i++ )
  {
    mac_address[i] = WireReceive();
   d5cf0:	f008 f850 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5cf4:	6803      	ldr	r3, [r0, #0]
   d5cf6:	695b      	ldr	r3, [r3, #20]
   d5cf8:	4798      	blx	r3
   d5cfa:	f805 0f01 	strb.w	r0, [r5, #1]!
  WireSend(MAC_LOCATION);
  Wire.endTransmission();

  Wire.requestFrom(MCP7941x_EEPROM_I2C_ADDR, 6);

  for( int i=0; i<6; i++ )
   d5cfe:	42a5      	cmp	r5, r4
   d5d00:	d1f6      	bne.n	d5cf0 <_ZN8MCP7941x13getMacAddressEPh+0x30>
  {
    mac_address[i] = WireReceive();
  }
}
   d5d02:	bd38      	pop	{r3, r4, r5, pc}

000d5d04 <_ZN8MCP7941x11setDateTimeEhhhhhhh>:
  byte hr,          // 1-23
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
   d5d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d08:	469a      	mov	sl, r3
   d5d0a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   d5d0e:	9301      	str	r3, [sp, #4]
   d5d10:	4693      	mov	fp, r2
   d5d12:	460d      	mov	r5, r1
   d5d14:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
   d5d18:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
   d5d1c:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
  WITH_LOCK(Wire) {
   d5d20:	f008 f838 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5d24:	4680      	mov	r8, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5d26:	f007 fb69 	bl	dd3fc <_ZN7TwoWire4lockEv>
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5d2a:	f008 f833 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5d2e:	216f      	movs	r1, #111	; 0x6f


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d5d30:	240a      	movs	r4, #10
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
  WITH_LOCK(Wire) {
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5d32:	f007 fb50 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5d36:	f008 f82d 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5d3a:	2100      	movs	r1, #0
   d5d3c:	f7ff ffbb 	bl	d5cb6 <_ZN7TwoWire5writeEi>

    WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d5d40:	f008 f828 	bl	ddd94 <_Z19__fetch_global_Wirev>


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d5d44:	fbb5 f2f4 	udiv	r2, r5, r4
   d5d48:	fb04 5512 	mls	r5, r4, r2, r5
   d5d4c:	eb05 1502 	add.w	r5, r5, r2, lsl #4
   d5d50:	b2ed      	uxtb	r5, r5
{
  WITH_LOCK(Wire) {
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
    WireSend(RTC_LOCATION);

    WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d5d52:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d5d56:	f7ff ffae 	bl	d5cb6 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   d5d5a:	f008 f81b 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5d5e:	fbbb f1f4 	udiv	r1, fp, r4
   d5d62:	fb04 bb11 	mls	fp, r4, r1, fp
   d5d66:	eb0b 1101 	add.w	r1, fp, r1, lsl #4
   d5d6a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d5d6e:	f7ff ffa2 	bl	d5cb6 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   d5d72:	f008 f80f 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5d76:	fbba f1f4 	udiv	r1, sl, r4
   d5d7a:	fb04 aa11 	mls	sl, r4, r1, sl
   d5d7e:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
   d5d82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d5d86:	f7ff ff96 	bl	d5cb6 <_ZN7TwoWire5writeEi>
    WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   d5d8a:	f008 f803 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5d8e:	9b01      	ldr	r3, [sp, #4]
   d5d90:	fbb3 f1f4 	udiv	r1, r3, r4
   d5d94:	fb04 3111 	mls	r1, r4, r1, r3
   d5d98:	f001 0107 	and.w	r1, r1, #7
   d5d9c:	f041 0108 	orr.w	r1, r1, #8
   d5da0:	f7ff ff89 	bl	d5cb6 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   d5da4:	f007 fff6 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5da8:	fbb7 f1f4 	udiv	r1, r7, r4
   d5dac:	fb04 7711 	mls	r7, r4, r1, r7
   d5db0:	eb07 1101 	add.w	r1, r7, r1, lsl #4
   d5db4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d5db8:	f7ff ff7d 	bl	d5cb6 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   d5dbc:	f007 ffea 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5dc0:	fbb6 f1f4 	udiv	r1, r6, r4
   d5dc4:	fb04 6611 	mls	r6, r4, r1, r6
   d5dc8:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   d5dcc:	f001 011f 	and.w	r1, r1, #31
   d5dd0:	f7ff ff71 	bl	d5cb6 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(yr));                       // set the yr (11111111)
   d5dd4:	f007 ffde 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5dd8:	fbb9 f1f4 	udiv	r1, r9, r4
   d5ddc:	6803      	ldr	r3, [r0, #0]
   d5dde:	fb04 9411 	mls	r4, r4, r1, r9
   d5de2:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   d5de6:	689b      	ldr	r3, [r3, #8]
   d5de8:	b2c9      	uxtb	r1, r1
   d5dea:	4798      	blx	r3

    Wire.endTransmission();
   d5dec:	f007 ffd2 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5df0:	f007 faf8 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

    // Start Clock:
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5df4:	f007 ffce 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5df8:	216f      	movs	r1, #111	; 0x6f
   d5dfa:	f007 faec 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5dfe:	f007 ffc9 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5e02:	2100      	movs	r1, #0
   d5e04:	f7ff ff57 	bl	d5cb6 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
   d5e08:	f007 ffc4 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5e0c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5e10:	f7ff ff51 	bl	d5cb6 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5e14:	f007 ffbe 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5e18:	f007 fae4 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5e1c:	4640      	mov	r0, r8
  }

// Serial.print("Set time: ");
// Serial.println(String(yr)+":"+String(mnth)+":"+String(dyofMnth)+":"+String(dyofWk)+":"+String(hr)+":"+String(min)+":"+String(sec));

}
   d5e1e:	b003      	add	sp, #12
   d5e20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e24:	f007 baf3 	b.w	dd40e <_ZN7TwoWire6unlockEv>

000d5e28 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>:
  byte *hr,
  byte *dyofWk,
  byte *dyofMnth,
  byte *mnth,
  byte *yr)
{
   d5e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e2c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   d5e30:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d5e32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d5e34:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d5e36:	4699      	mov	r9, r3
   d5e38:	4692      	mov	sl, r2
   d5e3a:	468b      	mov	fp, r1
  WITH_LOCK(Wire) {
   d5e3c:	f007 ffaa 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5e40:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5e42:	f007 fadb 	bl	dd3fc <_ZN7TwoWire4lockEv>
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5e46:	f007 ffa5 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5e4a:	216f      	movs	r1, #111	; 0x6f
   d5e4c:	f007 fac3 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5e50:	f007 ffa0 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5e54:	2100      	movs	r1, #0
   d5e56:	f7ff ff2e 	bl	d5cb6 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5e5a:	f007 ff9b 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5e5e:	f007 fac1 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(MCP7941x_RTC_I2C_ADDR, 7);
   d5e62:	f007 ff97 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5e66:	216f      	movs	r1, #111	; 0x6f
   d5e68:	2207      	movs	r2, #7
   d5e6a:	f007 faad 	bl	dd3c8 <_ZN7TwoWire11requestFromEhj>

    // A few of these need masks because certain bits are control bits
    *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d5e6e:	f007 ff91 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5e72:	6803      	ldr	r3, [r0, #0]
   d5e74:	695b      	ldr	r3, [r3, #20]
   d5e76:	4798      	blx	r3
   d5e78:	b2c0      	uxtb	r0, r0
   d5e7a:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d5e7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5e82:	f000 000f 	and.w	r0, r0, #15
   d5e86:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5e8a:	f88b 0000 	strb.w	r0, [fp]
    *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d5e8e:	f007 ff81 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5e92:	6803      	ldr	r3, [r0, #0]
   d5e94:	695b      	ldr	r3, [r3, #20]
   d5e96:	4798      	blx	r3
   d5e98:	b2c0      	uxtb	r0, r0
   d5e9a:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d5e9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5ea2:	f000 000f 	and.w	r0, r0, #15
   d5ea6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5eaa:	f88a 0000 	strb.w	r0, [sl]
    *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d5eae:	f007 ff71 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5eb2:	6803      	ldr	r3, [r0, #0]
   d5eb4:	695b      	ldr	r3, [r3, #20]
   d5eb6:	4798      	blx	r3
   d5eb8:	b2c0      	uxtb	r0, r0
   d5eba:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d5ebe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5ec2:	f000 000f 	and.w	r0, r0, #15
   d5ec6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5eca:	f889 0000 	strb.w	r0, [r9]
    *dyofWk  = bcdToDec(WireReceive() & 0x07);  // 01111111
   d5ece:	f007 ff61 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5ed2:	6803      	ldr	r3, [r0, #0]
   d5ed4:	695b      	ldr	r3, [r3, #20]
   d5ed6:	4798      	blx	r3
   d5ed8:	f000 0007 	and.w	r0, r0, #7
   d5edc:	f888 0000 	strb.w	r0, [r8]
    *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d5ee0:	f007 ff58 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5ee4:	6803      	ldr	r3, [r0, #0]
   d5ee6:	695b      	ldr	r3, [r3, #20]
   d5ee8:	4798      	blx	r3
   d5eea:	b2c0      	uxtb	r0, r0
   d5eec:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d5ef0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5ef4:	f000 000f 	and.w	r0, r0, #15
   d5ef8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5efc:	7038      	strb	r0, [r7, #0]
    *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   d5efe:	f007 ff49 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5f02:	6803      	ldr	r3, [r0, #0]
   d5f04:	695b      	ldr	r3, [r3, #20]
   d5f06:	4798      	blx	r3
   d5f08:	b2c0      	uxtb	r0, r0
   d5f0a:	f3c0 1200 	ubfx	r2, r0, #4, #1
   d5f0e:	0093      	lsls	r3, r2, #2
   d5f10:	4413      	add	r3, r2
   d5f12:	f000 000f 	and.w	r0, r0, #15
   d5f16:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5f1a:	7030      	strb	r0, [r6, #0]
    *yr       = bcdToDec(WireReceive());         // 11111111
   d5f1c:	f007 ff3a 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d5f20:	6803      	ldr	r3, [r0, #0]
   d5f22:	695b      	ldr	r3, [r3, #20]
   d5f24:	4798      	blx	r3
   d5f26:	b2c0      	uxtb	r0, r0
   d5f28:	0903      	lsrs	r3, r0, #4
   d5f2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5f2e:	f000 000f 	and.w	r0, r0, #15
   d5f32:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5f36:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5f38:	4620      	mov	r0, r4
  }
}
   d5f3a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f3e:	f007 ba66 	b.w	dd40e <_ZN7TwoWire6unlockEv>

000d5f42 <_ZN8MCP7941x11setUnixTimeEm>:
}

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d5f42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f46:	4607      	mov	r7, r0
   d5f48:	b08d      	sub	sp, #52	; 0x34
  byte sec = (byte)Time.second(unixTime);
   d5f4a:	4608      	mov	r0, r1
}

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d5f4c:	460c      	mov	r4, r1
  byte sec = (byte)Time.second(unixTime);
   d5f4e:	f006 fa9f 	bl	dc490 <_ZN9TimeClass6secondEl>
   d5f52:	4680      	mov	r8, r0
  byte min= (byte)Time.minute(unixTime);
   d5f54:	4620      	mov	r0, r4
   d5f56:	f006 fa93 	bl	dc480 <_ZN9TimeClass6minuteEl>
   d5f5a:	4681      	mov	r9, r0
  byte hr= (byte)Time.hour(unixTime);
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	f006 fa87 	bl	dc470 <_ZN9TimeClass4hourEl>
   d5f62:	4682      	mov	sl, r0
  byte dyofWk= (byte)Time.weekday(unixTime);
   d5f64:	4620      	mov	r0, r4
   d5f66:	f006 faa3 	bl	dc4b0 <_ZN9TimeClass7weekdayEl>
   d5f6a:	4605      	mov	r5, r0
  byte dyofMnth= (byte)Time.day(unixTime);
   d5f6c:	4620      	mov	r0, r4
   d5f6e:	f006 fa97 	bl	dc4a0 <_ZN9TimeClass3dayEl>
   d5f72:	4606      	mov	r6, r0
  byte mnth= (byte)Time.month(unixTime);
   d5f74:	4620      	mov	r0, r4
   d5f76:	f006 faa5 	bl	dc4c4 <_ZN9TimeClass5monthEl>
   d5f7a:	4683      	mov	fp, r0
  String yrString = String(Time.year(unixTime));
   d5f7c:	4620      	mov	r0, r4
   d5f7e:	f006 faab 	bl	dc4d8 <_ZN9TimeClass4yearEl>
   d5f82:	220a      	movs	r2, #10
   d5f84:	4601      	mov	r1, r0
   d5f86:	a804      	add	r0, sp, #16
   d5f88:	f005 ffc1 	bl	dbf0e <_ZN6StringC1Eih>
  byte yr = (byte) yrString.substring(2).toInt();
   d5f8c:	a904      	add	r1, sp, #16
   d5f8e:	2202      	movs	r2, #2
   d5f90:	a808      	add	r0, sp, #32
   d5f92:	f006 f86b 	bl	dc06c <_ZNK6String9substringEj>
   d5f96:	a808      	add	r0, sp, #32
   d5f98:	f006 f86f 	bl	dc07a <_ZNK6String5toIntEv>
   d5f9c:	4604      	mov	r4, r0
   d5f9e:	a808      	add	r0, sp, #32
   d5fa0:	f005 fee8 	bl	dbd74 <_ZN6StringD1Ev>
    min,        // 0-59
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
   d5fa4:	b2e4      	uxtb	r4, r4
   d5fa6:	fa5f f38b 	uxtb.w	r3, fp
   d5faa:	b2f6      	uxtb	r6, r6
   d5fac:	b2ed      	uxtb	r5, r5
   d5fae:	9302      	str	r3, [sp, #8]
   d5fb0:	fa5f f289 	uxtb.w	r2, r9
   d5fb4:	fa5f f38a 	uxtb.w	r3, sl
   d5fb8:	fa5f f188 	uxtb.w	r1, r8
   d5fbc:	4638      	mov	r0, r7
   d5fbe:	9403      	str	r4, [sp, #12]
   d5fc0:	9601      	str	r6, [sp, #4]
   d5fc2:	9500      	str	r5, [sp, #0]
   d5fc4:	f7ff fe9e 	bl	d5d04 <_ZN8MCP7941x11setDateTimeEhhhhhhh>
  byte min= (byte)Time.minute(unixTime);
  byte hr= (byte)Time.hour(unixTime);
  byte dyofWk= (byte)Time.weekday(unixTime);
  byte dyofMnth= (byte)Time.day(unixTime);
  byte mnth= (byte)Time.month(unixTime);
  String yrString = String(Time.year(unixTime));
   d5fc8:	a804      	add	r0, sp, #16
   d5fca:	f005 fed3 	bl	dbd74 <_ZN6StringD1Ev>
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
}
   d5fce:	b00d      	add	sp, #52	; 0x34
   d5fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5fd4 <_ZN8MCP7941x6rtcNowEv>:

//gets unix as defined by the external RTC
// Note that since the MCP7941 only stores years 0-99
// we assume time from 2000 onwards.
// Only works to year 2037!
uint32_t MCP7941x::rtcNow(){
   d5fd4:	b500      	push	{lr}
   d5fd6:	b091      	sub	sp, #68	; 0x44
		  &min,
		  &hr,
		  &dyofWk,
		  &dyofMnth,
		  &mnth,
		  &yr);
   d5fd8:	f10d 031b 	add.w	r3, sp, #27
   d5fdc:	9303      	str	r3, [sp, #12]
   d5fde:	f10d 031a 	add.w	r3, sp, #26
   d5fe2:	9302      	str	r3, [sp, #8]
   d5fe4:	f10d 0319 	add.w	r3, sp, #25
   d5fe8:	9301      	str	r3, [sp, #4]
   d5fea:	ab06      	add	r3, sp, #24
   d5fec:	9300      	str	r3, [sp, #0]
   d5fee:	f10d 0216 	add.w	r2, sp, #22
   d5ff2:	f10d 0317 	add.w	r3, sp, #23
   d5ff6:	f10d 0115 	add.w	r1, sp, #21
   d5ffa:	f7ff ff15 	bl	d5e28 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>

  // Deal with mktime 2038 bug
  if (yr>37)
   d5ffe:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d6002:	2b25      	cmp	r3, #37	; 0x25
  {
    yr = 0;
   d6004:	bf84      	itt	hi
   d6006:	2300      	movhi	r3, #0
   d6008:	f88d 301b 	strbhi.w	r3, [sp, #27]
  }

  //declare variable
  struct tm tm;
  tm.tm_sec = (sec);
   d600c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d6010:	9307      	str	r3, [sp, #28]
  tm.tm_min = (min);
   d6012:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d6016:	9308      	str	r3, [sp, #32]
  tm.tm_hour = (hr);
   d6018:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d601c:	9309      	str	r3, [sp, #36]	; 0x24
  tm.tm_mday = (dyofMnth);
   d601e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d6022:	930a      	str	r3, [sp, #40]	; 0x28
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
   d6024:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d6028:	3b01      	subs	r3, #1
   d602a:	930b      	str	r3, [sp, #44]	; 0x2c
  tm.tm_year = yr + 100; // The number of years since 1900 (by definition of tm)
   d602c:	f89d 301b 	ldrb.w	r3, [sp, #27]

  time_t moment = mktime(&tm);//create epoc time_t object
   d6030:	a807      	add	r0, sp, #28
  tm.tm_sec = (sec);
  tm.tm_min = (min);
  tm.tm_hour = (hr);
  tm.tm_mday = (dyofMnth);
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
  tm.tm_year = yr + 100; // The number of years since 1900 (by definition of tm)
   d6032:	3364      	adds	r3, #100	; 0x64
   d6034:	930c      	str	r3, [sp, #48]	; 0x30

  time_t moment = mktime(&tm);//create epoc time_t object
   d6036:	f00a ff63 	bl	e0f00 <mktime>

  return uint32_t(moment);
}
   d603a:	b011      	add	sp, #68	; 0x44
   d603c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6040 <_GLOBAL__sub_I__ZN8MCP7941xC2Ev>:
   d6040:	f004 bde6 	b.w	dac10 <HAL_Pin_Map>

000d6044 <_ZN16Adafruit_TSL2591D1Ev>:
/**************************************************************************/
/*! 
    @brief  Class that stores state and functions for interacting with TSL2591 Light Sensor
*/
/**************************************************************************/
class Adafruit_TSL2591 : public Adafruit_Sensor
   d6044:	4770      	bx	lr
	...

000d6048 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t>:
    @brief  Gets the overall sensor_t data including the type, range and resulution
    @param  sensor Pointer to Adafruit_Sensor sensor_t object that will be filled with sensor type data
*/
/**************************************************************************/
void Adafruit_TSL2591::getSensor(sensor_t *sensor)
{
   d6048:	b538      	push	{r3, r4, r5, lr}
   d604a:	460c      	mov	r4, r1
   d604c:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d604e:	2228      	movs	r2, #40	; 0x28
   d6050:	2100      	movs	r1, #0
   d6052:	4620      	mov	r0, r4
   d6054:	f00a fe70 	bl	e0d38 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
   d6058:	220b      	movs	r2, #11
   d605a:	490a      	ldr	r1, [pc, #40]	; (d6084 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x3c>)
   d605c:	4620      	mov	r0, r4
   d605e:	f00b fe56 	bl	e1d0e <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d6062:	2300      	movs	r3, #0
  sensor->version     = 1;
   d6064:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d6066:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
   d6068:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
   d606a:	68aa      	ldr	r2, [r5, #8]
  sensor->type        = SENSOR_TYPE_LIGHT;
  sensor->min_delay   = 0;
   d606c:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 88000.0;
   d606e:	4b06      	ldr	r3, [pc, #24]	; (d6088 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x40>)
   d6070:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0.0;
   d6072:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
   d6074:	6122      	str	r2, [r4, #16]
  sensor->type        = SENSOR_TYPE_LIGHT;
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
   d6076:	61e3      	str	r3, [r4, #28]
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_LIGHT;
   d6078:	2205      	movs	r2, #5
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
  sensor->resolution  = 0.001;
   d607a:	4b04      	ldr	r3, [pc, #16]	; (d608c <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x44>)
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_LIGHT;
   d607c:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
  sensor->resolution  = 0.001;
   d607e:	6223      	str	r3, [r4, #32]
   d6080:	bd38      	pop	{r3, r4, r5, pc}
   d6082:	bf00      	nop
   d6084:	000e4425 	.word	0x000e4425
   d6088:	47abe000 	.word	0x47abe000
   d608c:	3a83126f 	.word	0x3a83126f

000d6090 <_ZN16Adafruit_TSL2591D0Ev>:
   d6090:	b510      	push	{r4, lr}
   d6092:	2110      	movs	r1, #16
   d6094:	4604      	mov	r4, r0
   d6096:	f007 feb1 	bl	dddfc <_ZdlPvj>
   d609a:	4620      	mov	r0, r4
   d609c:	bd10      	pop	{r4, pc}
	...

000d60a0 <_ZN16Adafruit_TSL2591C1El>:
/*!
    @brief  Instantiates a new Adafruit TSL2591 class
    @param  sensorID An optional ID # so you can track this sensor, it will tag sensorEvents you create.
*/
/**************************************************************************/
Adafruit_TSL2591::Adafruit_TSL2591(int32_t sensorID)
   d60a0:	4a04      	ldr	r2, [pc, #16]	; (d60b4 <_ZN16Adafruit_TSL2591C1El+0x14>)
   d60a2:	6002      	str	r2, [r0, #0]
{
  _initialized = false;
   d60a4:	2200      	movs	r2, #0
   d60a6:	7302      	strb	r2, [r0, #12]
  _integration = TSL2591_INTEGRATIONTIME_100MS;
   d60a8:	7142      	strb	r2, [r0, #5]
  _gain        = TSL2591_GAIN_MED;
   d60aa:	2210      	movs	r2, #16
   d60ac:	7182      	strb	r2, [r0, #6]
  _sensorID    = sensorID;
   d60ae:	6081      	str	r1, [r0, #8]

  // we cant do wire initialization till later, because we havent loaded Wire yet
}
   d60b0:	4770      	bx	lr
   d60b2:	bf00      	nop
   d60b4:	000e4538 	.word	0x000e4538

000d60b8 <_ZN16Adafruit_TSL25917getGainEv>:
*/
/**************************************************************************/
tsl2591Gain_t Adafruit_TSL2591::getGain()
{
  return _gain;
}
   d60b8:	7980      	ldrb	r0, [r0, #6]
   d60ba:	4770      	bx	lr

000d60bc <_ZN16Adafruit_TSL25919getTimingEv>:
*/
/**************************************************************************/
tsl2591IntegrationTime_t Adafruit_TSL2591::getTiming()
{
  return _integration;
}
   d60bc:	7940      	ldrb	r0, [r0, #5]
   d60be:	4770      	bx	lr

000d60c0 <_ZN16Adafruit_TSL259112calculateLuxEtt>:
  float    atime, again;
  float    cpl, lux1, lux2, lux;
  uint32_t chan0, chan1;

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
   d60c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d60c4:	4299      	cmp	r1, r3
    @param  ch1 Data from channel 1 (IR)
    @returns Lux, based on AMS coefficients
*/
/**************************************************************************/
float Adafruit_TSL2591::calculateLux(uint16_t ch0, uint16_t ch1)
{
   d60c6:	b510      	push	{r4, lr}
  float    atime, again;
  float    cpl, lux1, lux2, lux;
  uint32_t chan0, chan1;

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
   d60c8:	d039      	beq.n	d613e <_ZN16Adafruit_TSL259112calculateLuxEtt+0x7e>
   d60ca:	429a      	cmp	r2, r3
   d60cc:	d037      	beq.n	d613e <_ZN16Adafruit_TSL259112calculateLuxEtt+0x7e>
   d60ce:	7943      	ldrb	r3, [r0, #5]
   d60d0:	3b01      	subs	r3, #1
   d60d2:	b2db      	uxtb	r3, r3
   d60d4:	2b04      	cmp	r3, #4
   d60d6:	bf97      	itett	ls
   d60d8:	4c1a      	ldrls	r4, [pc, #104]	; (d6144 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x84>)
  }

  // Note: This algorithm is based on preliminary coefficients
  // provided by AMS and may need to be updated in the future

  switch (_integration)
   d60da:	eddf 5a1b 	vldrhi	s11, [pc, #108]	; d6148 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x88>
   d60de:	eb04 0383 	addls.w	r3, r4, r3, lsl #2
   d60e2:	edd3 5a00 	vldrls	s11, [r3]
    default: // 100ms
      atime = 100.0F;
      break;
  }

  switch (_gain)
   d60e6:	7983      	ldrb	r3, [r0, #6]
   d60e8:	2b20      	cmp	r3, #32
   d60ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d60ee:	d008      	beq.n	d6102 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x42>
   d60f0:	2b30      	cmp	r3, #48	; 0x30
   d60f2:	d009      	beq.n	d6108 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x48>
   d60f4:	2b10      	cmp	r3, #16
  {
    case TSL2591_GAIN_LOW :
      again = 1.0F;
   d60f6:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
   d60fa:	bf18      	it	ne
   d60fc:	eef0 6a47 	vmovne.f32	s13, s14
   d6100:	e004      	b.n	d610c <_ZN16Adafruit_TSL259112calculateLuxEtt+0x4c>
      break;
    case TSL2591_GAIN_MED :
      again = 25.0F;
      break;
    case TSL2591_GAIN_HIGH :
      again = 428.0F;
   d6102:	eddf 6a12 	vldr	s13, [pc, #72]	; d614c <_ZN16Adafruit_TSL259112calculateLuxEtt+0x8c>
   d6106:	e001      	b.n	d610c <_ZN16Adafruit_TSL259112calculateLuxEtt+0x4c>
      break;
    case TSL2591_GAIN_MAX :
      again = 9876.0F;
   d6108:	eddf 6a11 	vldr	s13, [pc, #68]	; d6150 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x90>
  //lux2 = ( ( TSL2591_LUX_COEFC * (float)ch0 ) - ( TSL2591_LUX_COEFD * (float)ch1 ) ) / cpl;
  //lux = lux1 > lux2 ? lux1 : lux2;

  // Alternate lux calculation 1
  // See: https://github.com/adafruit/Adafruit_TSL2591_Library/issues/14
  lux = ( ((float)ch0 - (float)ch1 )) * (1.0F - ((float)ch1/(float)ch0) ) / cpl;
   d610c:	ee07 1a90 	vmov	s15, r1
   d6110:	ee06 2a10 	vmov	s12, r2
   d6114:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d6118:	eeb8 6a46 	vcvt.f32.u32	s12, s12
   d611c:	ee65 6aa6 	vmul.f32	s13, s11, s13
   d6120:	ee86 5a27 	vdiv.f32	s10, s12, s15
   d6124:	ee77 7ac6 	vsub.f32	s15, s15, s12
   d6128:	ee37 7a45 	vsub.f32	s14, s14, s10
   d612c:	ed9f 6a09 	vldr	s12, [pc, #36]	; d6154 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x94>
   d6130:	ee67 7a27 	vmul.f32	s15, s14, s15
   d6134:	ee86 7a86 	vdiv.f32	s14, s13, s12
   d6138:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d613c:	bd10      	pop	{r4, pc}

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
  {
    // Signal an overflow
    return 0;
   d613e:	ed9f 0a06 	vldr	s0, [pc, #24]	; d6158 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x98>
  // Alternate lux calculation 2
  //lux = ( (float)ch0 - ( 1.7F * (float)ch1 ) ) / cpl;

  // Signal I2C had no errors
  return lux;
}
   d6142:	bd10      	pop	{r4, pc}
   d6144:	000e451c 	.word	0x000e451c
   d6148:	42c80000 	.word	0x42c80000
   d614c:	43d60000 	.word	0x43d60000
   d6150:	461a5000 	.word	0x461a5000
   d6154:	43cc0000 	.word	0x43cc0000
   d6158:	00000000 	.word	0x00000000

000d615c <_ZN16Adafruit_TSL25915read8Eh>:
}
/*******************************************************/


uint8_t Adafruit_TSL2591::read8(uint8_t reg)
{
   d615c:	b510      	push	{r4, lr}
   d615e:	460c      	mov	r4, r1
  uint8_t x;

  Wire.beginTransmission(TSL2591_ADDR);
   d6160:	f007 fe18 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d6164:	2129      	movs	r1, #41	; 0x29
   d6166:	f007 f936 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d616a:	f007 fe13 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d616e:	6803      	ldr	r3, [r0, #0]
   d6170:	4621      	mov	r1, r4
   d6172:	689b      	ldr	r3, [r3, #8]
   d6174:	4798      	blx	r3
  Wire.endTransmission();
   d6176:	f007 fe0d 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d617a:	f007 f933 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(TSL2591_ADDR, 1);
   d617e:	f007 fe09 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d6182:	2201      	movs	r2, #1
   d6184:	2129      	movs	r1, #41	; 0x29
   d6186:	f007 f91f 	bl	dd3c8 <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
   d618a:	f007 fe03 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d618e:	6803      	ldr	r3, [r0, #0]
   d6190:	695b      	ldr	r3, [r3, #20]
   d6192:	4798      	blx	r3

  return x;
}
   d6194:	b2c0      	uxtb	r0, r0
   d6196:	bd10      	pop	{r4, pc}

000d6198 <_ZN16Adafruit_TSL25916read16Eh>:

uint16_t Adafruit_TSL2591::read16(uint8_t reg)
{
   d6198:	b510      	push	{r4, lr}
   d619a:	460c      	mov	r4, r1
  uint16_t x;
  uint16_t t;

  Wire.beginTransmission(TSL2591_ADDR);
   d619c:	f007 fdfa 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d61a0:	2129      	movs	r1, #41	; 0x29
   d61a2:	f007 f918 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d61a6:	f007 fdf5 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d61aa:	6803      	ldr	r3, [r0, #0]
   d61ac:	4621      	mov	r1, r4
   d61ae:	689b      	ldr	r3, [r3, #8]
   d61b0:	4798      	blx	r3
  Wire.endTransmission();
   d61b2:	f007 fdef 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d61b6:	f007 f915 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(TSL2591_ADDR, 2);
   d61ba:	f007 fdeb 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d61be:	2202      	movs	r2, #2
   d61c0:	2129      	movs	r1, #41	; 0x29
   d61c2:	f007 f901 	bl	dd3c8 <_ZN7TwoWire11requestFromEhj>
  t = Wire.read();
   d61c6:	f007 fde5 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d61ca:	6803      	ldr	r3, [r0, #0]
   d61cc:	695b      	ldr	r3, [r3, #20]
   d61ce:	4798      	blx	r3
   d61d0:	4604      	mov	r4, r0
  x = Wire.read();
   d61d2:	f007 fddf 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d61d6:	6803      	ldr	r3, [r0, #0]
   d61d8:	695b      	ldr	r3, [r3, #20]
   d61da:	4798      	blx	r3

  x <<= 8;
  x |= t;
  return x;
   d61dc:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
   d61e0:	b280      	uxth	r0, r0
   d61e2:	bd10      	pop	{r4, pc}

000d61e4 <_ZN16Adafruit_TSL25916write8Ehh>:

void Adafruit_TSL2591::write8 (uint8_t reg, uint8_t value)
{
   d61e4:	b538      	push	{r3, r4, r5, lr}
   d61e6:	4614      	mov	r4, r2
   d61e8:	460d      	mov	r5, r1
  Wire.beginTransmission(TSL2591_ADDR);
   d61ea:	f007 fdd3 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d61ee:	2129      	movs	r1, #41	; 0x29
   d61f0:	f007 f8f1 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d61f4:	f007 fdce 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d61f8:	6803      	ldr	r3, [r0, #0]
   d61fa:	4629      	mov	r1, r5
   d61fc:	689b      	ldr	r3, [r3, #8]
   d61fe:	4798      	blx	r3
  Wire.write(value);
   d6200:	f007 fdc8 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d6204:	6803      	ldr	r3, [r0, #0]
   d6206:	4621      	mov	r1, r4
   d6208:	689b      	ldr	r3, [r3, #8]
   d620a:	4798      	blx	r3
  Wire.endTransmission();
   d620c:	f007 fdc2 	bl	ddd94 <_Z19__fetch_global_Wirev>
}
   d6210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_TSL2591::write8 (uint8_t reg, uint8_t value)
{
  Wire.beginTransmission(TSL2591_ADDR);
  Wire.write(reg);
  Wire.write(value);
  Wire.endTransmission();
   d6214:	f007 b8e6 	b.w	dd3e4 <_ZN7TwoWire15endTransmissionEv>

000d6218 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>:
    @brief  Setter for sensor light gain
    @param  gain {@link tsl2591Gain_t} gain value
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
   d6218:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d621a:	7b03      	ldrb	r3, [r0, #12]
    @brief  Setter for sensor light gain
    @param  gain {@link tsl2591Gain_t} gain value
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
   d621c:	4604      	mov	r4, r0
   d621e:	460d      	mov	r5, r1
  if (!_initialized) {
   d6220:	b173      	cbz	r3, d6240 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0x28>
    if (!begin()) {
      return;
    }
  }

  enable();
   d6222:	4620      	mov	r0, r4
   d6224:	f000 f82e 	bl	d6284 <_ZN16Adafruit_TSL25916enableEv>
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d6228:	7962      	ldrb	r2, [r4, #5]
      return;
    }
  }

  enable();
  _gain = gain;
   d622a:	71a5      	strb	r5, [r4, #6]
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d622c:	4620      	mov	r0, r4
   d622e:	432a      	orrs	r2, r5
   d6230:	21a1      	movs	r1, #161	; 0xa1
   d6232:	f7ff ffd7 	bl	d61e4 <_ZN16Adafruit_TSL25916write8Ehh>
  disable();
   d6236:	4620      	mov	r0, r4
}
   d6238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  enable();
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
   d623c:	f000 b832 	b.w	d62a4 <_ZN16Adafruit_TSL25917disableEv>
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
  if (!_initialized) {
    if (!begin()) {
   d6240:	f000 f803 	bl	d624a <_ZN16Adafruit_TSL25915beginEv>
   d6244:	2800      	cmp	r0, #0
   d6246:	d1ec      	bne.n	d6222 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0xa>

  enable();
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
}
   d6248:	bd38      	pop	{r3, r4, r5, pc}

000d624a <_ZN16Adafruit_TSL25915beginEv>:
    @brief  Setups the I2C interface and hardware, identifies if chip is found
    @returns True if a TSL2591 is found, false on any failure
*/
/**************************************************************************/
boolean Adafruit_TSL2591::begin(void)
{
   d624a:	b538      	push	{r3, r4, r5, lr}
   d624c:	4604      	mov	r4, r0
  Wire.begin();
   d624e:	f007 fda1 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d6252:	f007 f885 	bl	dd360 <_ZN7TwoWire5beginEv>
    Serial.print("$"); Serial.print(i, HEX);
    Serial.print(" = 0x"); Serial.println(read8(i), HEX);
  }
  */

  uint8_t id = read8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_DEVICE_ID);
   d6256:	21b2      	movs	r1, #178	; 0xb2
   d6258:	4620      	mov	r0, r4
   d625a:	f7ff ff7f 	bl	d615c <_ZN16Adafruit_TSL25915read8Eh>
  if (id != 0x50 ) {
   d625e:	2850      	cmp	r0, #80	; 0x50
   d6260:	d10e      	bne.n	d6280 <_ZN16Adafruit_TSL25915beginEv+0x36>
    return false;
  }
  // Serial.println("Found Adafruit_TSL2591");

  _initialized = true;
   d6262:	2501      	movs	r5, #1

  // Set default integration time and gain
  setTiming(_integration);
   d6264:	7961      	ldrb	r1, [r4, #5]
  if (id != 0x50 ) {
    return false;
  }
  // Serial.println("Found Adafruit_TSL2591");

  _initialized = true;
   d6266:	7325      	strb	r5, [r4, #12]

  // Set default integration time and gain
  setTiming(_integration);
   d6268:	4620      	mov	r0, r4
   d626a:	f000 f82b 	bl	d62c4 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>
  setGain(_gain);
   d626e:	79a1      	ldrb	r1, [r4, #6]
   d6270:	4620      	mov	r0, r4
   d6272:	f7ff ffd1 	bl	d6218 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>

  // Note: by default, the device is in power down mode on bootup
  disable();
   d6276:	4620      	mov	r0, r4
   d6278:	f000 f814 	bl	d62a4 <_ZN16Adafruit_TSL25917disableEv>
   d627c:	4628      	mov	r0, r5
   d627e:	bd38      	pop	{r3, r4, r5, pc}
  }
  */

  uint8_t id = read8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_DEVICE_ID);
  if (id != 0x50 ) {
    return false;
   d6280:	2000      	movs	r0, #0

  // Note: by default, the device is in power down mode on bootup
  disable();

  return true;
}
   d6282:	bd38      	pop	{r3, r4, r5, pc}

000d6284 <_ZN16Adafruit_TSL25916enableEv>:
/*!
    @brief  Enables the chip, so it's ready to take readings
*/
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
   d6284:	b510      	push	{r4, lr}
  if (!_initialized)
   d6286:	7b03      	ldrb	r3, [r0, #12]
/*!
    @brief  Enables the chip, so it's ready to take readings
*/
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
   d6288:	4604      	mov	r4, r0
  if (!_initialized)
   d628a:	b133      	cbz	r3, d629a <_ZN16Adafruit_TSL25916enableEv+0x16>
    }
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
   d628c:	4620      	mov	r0, r4
   d628e:	2293      	movs	r2, #147	; 0x93
   d6290:	21a0      	movs	r1, #160	; 0xa0
}
   d6292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
   d6296:	f7ff bfa5 	b.w	d61e4 <_ZN16Adafruit_TSL25916write8Ehh>
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
  if (!_initialized)
  {
    if (!begin())
   d629a:	f7ff ffd6 	bl	d624a <_ZN16Adafruit_TSL25915beginEv>
   d629e:	2800      	cmp	r0, #0
   d62a0:	d1f4      	bne.n	d628c <_ZN16Adafruit_TSL25916enableEv+0x8>
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
}
   d62a2:	bd10      	pop	{r4, pc}

000d62a4 <_ZN16Adafruit_TSL25917disableEv>:
/*!
    @brief Disables the chip, so it's in power down mode
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
   d62a4:	b510      	push	{r4, lr}
  if (!_initialized) {
   d62a6:	7b03      	ldrb	r3, [r0, #12]
/*!
    @brief Disables the chip, so it's in power down mode
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
   d62a8:	4604      	mov	r4, r0
  if (!_initialized) {
   d62aa:	b133      	cbz	r3, d62ba <_ZN16Adafruit_TSL25917disableEv+0x16>
      return;
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
   d62ac:	4620      	mov	r0, r4
   d62ae:	2200      	movs	r2, #0
   d62b0:	21a0      	movs	r1, #160	; 0xa0
}
   d62b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return;
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
   d62b6:	f7ff bf95 	b.w	d61e4 <_ZN16Adafruit_TSL25916write8Ehh>
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
  if (!_initialized) {
    if (!begin()) {
   d62ba:	f7ff ffc6 	bl	d624a <_ZN16Adafruit_TSL25915beginEv>
   d62be:	2800      	cmp	r0, #0
   d62c0:	d1f4      	bne.n	d62ac <_ZN16Adafruit_TSL25917disableEv+0x8>
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
}
   d62c2:	bd10      	pop	{r4, pc}

000d62c4 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>:
    @brief  Setter for sensor integration time setting
    @param integration {@link tsl2591IntegrationTime_t} integration time setting
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
   d62c4:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d62c6:	7b03      	ldrb	r3, [r0, #12]
    @brief  Setter for sensor integration time setting
    @param integration {@link tsl2591IntegrationTime_t} integration time setting
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
   d62c8:	4604      	mov	r4, r0
   d62ca:	460d      	mov	r5, r1
  if (!_initialized) {
   d62cc:	b173      	cbz	r3, d62ec <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0x28>
    if (!begin()) {
      return;
    }
  }

  enable();
   d62ce:	4620      	mov	r0, r4
   d62d0:	f7ff ffd8 	bl	d6284 <_ZN16Adafruit_TSL25916enableEv>
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d62d4:	79a2      	ldrb	r2, [r4, #6]
      return;
    }
  }

  enable();
  _integration = integration;
   d62d6:	7165      	strb	r5, [r4, #5]
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d62d8:	4620      	mov	r0, r4
   d62da:	432a      	orrs	r2, r5
   d62dc:	21a1      	movs	r1, #161	; 0xa1
   d62de:	f7ff ff81 	bl	d61e4 <_ZN16Adafruit_TSL25916write8Ehh>
  disable();
   d62e2:	4620      	mov	r0, r4
}
   d62e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  enable();
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
   d62e8:	f7ff bfdc 	b.w	d62a4 <_ZN16Adafruit_TSL25917disableEv>
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
  if (!_initialized) {
    if (!begin()) {
   d62ec:	f7ff ffad 	bl	d624a <_ZN16Adafruit_TSL25915beginEv>
   d62f0:	2800      	cmp	r0, #0
   d62f2:	d1ec      	bne.n	d62ce <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0xa>

  enable();
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
}
   d62f4:	bd38      	pop	{r3, r4, r5, pc}

000d62f6 <_ZN16Adafruit_TSL259117getFullLuminosityEv>:
    @brief  Reads the raw data from both light channels
    @returns 32-bit raw count where high word is IR, low word is IR+Visible
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
   d62f6:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d62f8:	7b03      	ldrb	r3, [r0, #12]
    @brief  Reads the raw data from both light channels
    @returns 32-bit raw count where high word is IR, low word is IR+Visible
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
   d62fa:	4605      	mov	r5, r0
  if (!_initialized) {
   d62fc:	b123      	cbz	r3, d6308 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x12>
      return 0;
    }
  }

  // Enable the device
  enable();
   d62fe:	4628      	mov	r0, r5
   d6300:	f7ff ffc0 	bl	d6284 <_ZN16Adafruit_TSL25916enableEv>
   d6304:	2400      	movs	r4, #0
   d6306:	e004      	b.n	d6312 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x1c>
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
  if (!_initialized) {
    if (!begin()) {
   d6308:	f7ff ff9f 	bl	d624a <_ZN16Adafruit_TSL25915beginEv>
   d630c:	2800      	cmp	r0, #0
   d630e:	d1f6      	bne.n	d62fe <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x8>
   d6310:	bd38      	pop	{r3, r4, r5, pc}

  // Enable the device
  enable();

  // Wait x ms for ADC to complete
  for (uint8_t d=0; d<=_integration; d++)
   d6312:	796a      	ldrb	r2, [r5, #5]
   d6314:	b2e3      	uxtb	r3, r4
   d6316:	429a      	cmp	r2, r3
   d6318:	f104 0401 	add.w	r4, r4, #1
   d631c:	d303      	bcc.n	d6326 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x30>
  {
    delay(120);
   d631e:	2078      	movs	r0, #120	; 0x78
   d6320:	f006 fa04 	bl	dc72c <delay>

  // Enable the device
  enable();

  // Wait x ms for ADC to complete
  for (uint8_t d=0; d<=_integration; d++)
   d6324:	e7f5      	b.n	d6312 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x1c>

  // CHAN0 must be read before CHAN1
  // See: https://forums.adafruit.com/viewtopic.php?f=19&t=124176
  uint32_t x;
  uint16_t y;
  y |= read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN0_LOW);
   d6326:	21b4      	movs	r1, #180	; 0xb4
   d6328:	4628      	mov	r0, r5
   d632a:	f7ff ff35 	bl	d6198 <_ZN16Adafruit_TSL25916read16Eh>
  x = read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN1_LOW);
   d632e:	21b6      	movs	r1, #182	; 0xb6

  // CHAN0 must be read before CHAN1
  // See: https://forums.adafruit.com/viewtopic.php?f=19&t=124176
  uint32_t x;
  uint16_t y;
  y |= read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN0_LOW);
   d6330:	b284      	uxth	r4, r0
  x = read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN1_LOW);
   d6332:	4628      	mov	r0, r5
   d6334:	f7ff ff30 	bl	d6198 <_ZN16Adafruit_TSL25916read16Eh>
  x <<= 16;
  x |= y;
   d6338:	ea44 4400 	orr.w	r4, r4, r0, lsl #16

  disable();
   d633c:	4628      	mov	r0, r5
   d633e:	f7ff ffb1 	bl	d62a4 <_ZN16Adafruit_TSL25917disableEv>

  return x;
   d6342:	4620      	mov	r0, r4
}
   d6344:	bd38      	pop	{r3, r4, r5, pc}

000d6346 <_ZN16Adafruit_TSL25918getEventEP15sensors_event_t>:
    @param  event Pointer to Adafruit_Sensor sensors_event_t object that will be filled with sensor data
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_TSL2591::getEvent(sensors_event_t *event)
{
   d6346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6348:	4605      	mov	r5, r0
   d634a:	460c      	mov	r4, r1
  uint16_t ir, full;
  uint32_t lum = getFullLuminosity();
   d634c:	f7ff ffd3 	bl	d62f6 <_ZN16Adafruit_TSL259117getFullLuminosityEv>
  /* Early silicon seems to have issues when there is a sudden jump in */
  /* light levels. :( To work around this for now sample the sensor 2x */
  lum = getFullLuminosity();
   d6350:	4628      	mov	r0, r5
   d6352:	f7ff ffd0 	bl	d62f6 <_ZN16Adafruit_TSL259117getFullLuminosityEv>
  ir = lum >> 16;
  full = lum & 0xFFFF;

  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d6356:	2724      	movs	r7, #36	; 0x24
{
  uint16_t ir, full;
  uint32_t lum = getFullLuminosity();
  /* Early silicon seems to have issues when there is a sudden jump in */
  /* light levels. :( To work around this for now sample the sensor 2x */
  lum = getFullLuminosity();
   d6358:	4606      	mov	r6, r0
  ir = lum >> 16;
  full = lum & 0xFFFF;

  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d635a:	463a      	mov	r2, r7
   d635c:	2100      	movs	r1, #0
   d635e:	4620      	mov	r0, r4
   d6360:	f00a fcea 	bl	e0d38 <memset>

  event->version   = sizeof(sensors_event_t);
   d6364:	6027      	str	r7, [r4, #0]
  event->sensor_id = _sensorID;
   d6366:	68ab      	ldr	r3, [r5, #8]
   d6368:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_LIGHT;
   d636a:	2305      	movs	r3, #5
   d636c:	60a3      	str	r3, [r4, #8]
   d636e:	f004 fcf7 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();

  /* Calculate the actual lux value */
  /* 0 = sensor overflow (too much light) */
  event->light = calculateLux(full, ir);
   d6372:	0c32      	lsrs	r2, r6, #16
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
  event->type      = SENSOR_TYPE_LIGHT;
  event->timestamp = millis();
   d6374:	6120      	str	r0, [r4, #16]

  /* Calculate the actual lux value */
  /* 0 = sensor overflow (too much light) */
  event->light = calculateLux(full, ir);
   d6376:	b2b1      	uxth	r1, r6
   d6378:	4628      	mov	r0, r5
   d637a:	f7ff fea1 	bl	d60c0 <_ZN16Adafruit_TSL259112calculateLuxEtt>
   d637e:	ed84 0a05 	vstr	s0, [r4, #20]

  return true;
}
   d6382:	2001      	movs	r0, #1
   d6384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6386 <_GLOBAL__sub_I__ZN16Adafruit_TSL2591C2El>:
   d6386:	f004 bc43 	b.w	dac10 <HAL_Pin_Map>

000d638a <_GLOBAL__sub_I__ZN7DS18B20C2EP7OneWire>:
   d638a:	f004 bc41 	b.w	dac10 <HAL_Pin_Map>

000d638e <_ZN15Adafruit_AM2315C1Ev>:
  #include <util/delay.h>
#endif


Adafruit_AM2315::Adafruit_AM2315() {
}
   d638e:	4770      	bx	lr

000d6390 <_ZN15Adafruit_AM23158readDataEv>:

   // try to read data, as a test
  return readData();
}

bool Adafruit_AM2315::readData(void) {
   d6390:	b530      	push	{r4, r5, lr}
   d6392:	b085      	sub	sp, #20
   d6394:	4605      	mov	r5, r0
  uint8_t reply[10];

  // Wake up the sensor
  Wire.beginTransmission(AM2315_I2CADDR);
   d6396:	f007 fcfd 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d639a:	215c      	movs	r1, #92	; 0x5c
   d639c:	f007 f81b 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
  delay(2);
   d63a0:	2002      	movs	r0, #2
   d63a2:	f006 f9c3 	bl	dc72c <delay>
  Wire.endTransmission();
   d63a6:	f007 fcf5 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d63aa:	f007 f81b 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

  // OK lets ready!
  Wire.beginTransmission(AM2315_I2CADDR);
   d63ae:	f007 fcf1 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d63b2:	215c      	movs	r1, #92	; 0x5c
   d63b4:	f007 f80f 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(AM2315_READREG);
   d63b8:	f007 fcec 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d63bc:	2103      	movs	r1, #3
   d63be:	f7ff fc7a 	bl	d5cb6 <_ZN7TwoWire5writeEi>
  Wire.write(0x00);  // start at address 0x0
   d63c2:	f007 fce7 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d63c6:	2100      	movs	r1, #0
   d63c8:	f7ff fc75 	bl	d5cb6 <_ZN7TwoWire5writeEi>
  Wire.write(4);  // request 4 bytes data
   d63cc:	f007 fce2 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d63d0:	2104      	movs	r1, #4
   d63d2:	f7ff fc70 	bl	d5cb6 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d63d6:	f007 fcdd 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d63da:	f007 f803 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

  delay(10); // add delay between request and actual read!
   d63de:	200a      	movs	r0, #10
   d63e0:	f006 f9a4 	bl	dc72c <delay>

  Wire.requestFrom(AM2315_I2CADDR, 8);
   d63e4:	f007 fcd6 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d63e8:	2208      	movs	r2, #8
   d63ea:	215c      	movs	r1, #92	; 0x5c
   d63ec:	f006 ffec 	bl	dd3c8 <_ZN7TwoWire11requestFromEhj>
   d63f0:	2400      	movs	r4, #0
  for (uint8_t i=0; i<8; i++) {
    reply[i] = Wire.read();
   d63f2:	f007 fccf 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d63f6:	6803      	ldr	r3, [r0, #0]
   d63f8:	695b      	ldr	r3, [r3, #20]
   d63fa:	4798      	blx	r3
   d63fc:	ab01      	add	r3, sp, #4
   d63fe:	5518      	strb	r0, [r3, r4]
   d6400:	3401      	adds	r4, #1
  Wire.endTransmission();

  delay(10); // add delay between request and actual read!

  Wire.requestFrom(AM2315_I2CADDR, 8);
  for (uint8_t i=0; i<8; i++) {
   d6402:	2c08      	cmp	r4, #8
   d6404:	d1f5      	bne.n	d63f2 <_ZN15Adafruit_AM23158readDataEv+0x62>
    reply[i] = Wire.read();
    //Serial.println(reply[i], HEX);
  }

  if (reply[0] != AM2315_READREG) return false;
   d6406:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d640a:	2b03      	cmp	r3, #3
   d640c:	d134      	bne.n	d6478 <_ZN15Adafruit_AM23158readDataEv+0xe8>
  if (reply[1] != 4) return false; // bytes req'd
   d640e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d6412:	2b04      	cmp	r3, #4
   d6414:	d130      	bne.n	d6478 <_ZN15Adafruit_AM23158readDataEv+0xe8>

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d6416:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d641a:	ed9f 6a19 	vldr	s12, [pc, #100]	; d6480 <_ZN15Adafruit_AM23158readDataEv+0xf0>
   d641e:	ee07 3a10 	vmov	s14, r3
   d6422:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6426:	ee07 3a90 	vmov	s15, r3
   d642a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d642e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6432:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   d6436:	eee7 7a06 	vfma.f32	s15, s14, s12
  //Serial.print("H"); Serial.println(humidity);

  temp = reply[4] & 0x7F;
   d643a:	f89d 3008 	ldrb.w	r3, [sp, #8]
  temp *= 256;
  temp += reply[5];
  temp /= 10;
   d643e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
  if (reply[1] != 4) return false; // bytes req'd

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d6442:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  temp += reply[5];
  temp /= 10;
  //Serial.print("T"); Serial.println(temp);

  // change sign
  if (reply[4] >> 7) temp = -temp;
   d6446:	09db      	lsrs	r3, r3, #7

  return true;
   d6448:	f04f 0001 	mov.w	r0, #1
  if (reply[1] != 4) return false; // bytes req'd

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d644c:	ed85 7a00 	vstr	s14, [r5]
  //Serial.print("H"); Serial.println(humidity);

  temp = reply[4] & 0x7F;
  temp *= 256;
  temp += reply[5];
  temp /= 10;
   d6450:	ee07 2a10 	vmov	s14, r2
   d6454:	f89d 2009 	ldrb.w	r2, [sp, #9]
   d6458:	ee07 2a90 	vmov	s15, r2
   d645c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d6460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6464:	eee7 7a06 	vfma.f32	s15, s14, s12
   d6468:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  //Serial.print("T"); Serial.println(temp);

  // change sign
  if (reply[4] >> 7) temp = -temp;
   d646c:	bf18      	it	ne
   d646e:	eeb1 7a47 	vnegne.f32	s14, s14
   d6472:	ed85 7a01 	vstr	s14, [r5, #4]
   d6476:	e000      	b.n	d647a <_ZN15Adafruit_AM23158readDataEv+0xea>
  for (uint8_t i=0; i<8; i++) {
    reply[i] = Wire.read();
    //Serial.println(reply[i], HEX);
  }

  if (reply[0] != AM2315_READREG) return false;
   d6478:	2000      	movs	r0, #0

  // change sign
  if (reply[4] >> 7) temp = -temp;

  return true;
}
   d647a:	b005      	add	sp, #20
   d647c:	bd30      	pop	{r4, r5, pc}
   d647e:	bf00      	nop
   d6480:	43800000 	.word	0x43800000

000d6484 <_ZN15Adafruit_AM23155beginEv>:

Adafruit_AM2315::Adafruit_AM2315() {
}


bool Adafruit_AM2315::begin(void) {
   d6484:	b510      	push	{r4, lr}
   d6486:	4604      	mov	r4, r0
  Wire.begin();
   d6488:	f007 fc84 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d648c:	f006 ff68 	bl	dd360 <_ZN7TwoWire5beginEv>

   // try to read data, as a test
  return readData();
   d6490:	4620      	mov	r0, r4
}
   d6492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

bool Adafruit_AM2315::begin(void) {
  Wire.begin();

   // try to read data, as a test
  return readData();
   d6496:	f7ff bf7b 	b.w	d6390 <_ZN15Adafruit_AM23158readDataEv>

000d649a <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_>:
 * If you want to obtain both temperature and humidity when you sample the sensor, be aware that calling
 * readTemperature() and readHumidity() in rapid succession may swamp the sensor and result in invalid
 * readingings (the AM2315 manual advisess that continuous samples must be at least 2 seconds apart).
 * Calling this method avoids the double I2C request.
 */
bool Adafruit_AM2315::readTemperatureAndHumidity(float &t, float &h) {
   d649a:	b570      	push	{r4, r5, r6, lr}
   d649c:	4604      	mov	r4, r0
   d649e:	460e      	mov	r6, r1
   d64a0:	4615      	mov	r5, r2
    if (!readData()) return false;
   d64a2:	f7ff ff75 	bl	d6390 <_ZN15Adafruit_AM23158readDataEv>
   d64a6:	b118      	cbz	r0, d64b0 <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_+0x16>

    t = temp;
   d64a8:	6863      	ldr	r3, [r4, #4]
   d64aa:	6033      	str	r3, [r6, #0]
    h = humidity;
   d64ac:	6823      	ldr	r3, [r4, #0]
   d64ae:	602b      	str	r3, [r5, #0]

    return true;
}
   d64b0:	bd70      	pop	{r4, r5, r6, pc}

000d64b2 <_GLOBAL__sub_I__ZN15Adafruit_AM2315C2Ev>:
   d64b2:	f004 bbad 	b.w	dac10 <HAL_Pin_Map>

000d64b6 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d64b6:	f004 bbab 	b.w	dac10 <HAL_Pin_Map>

000d64ba <_GLOBAL__sub_I__ZN7istream3getEv>:
   d64ba:	f004 bba9 	b.w	dac10 <HAL_Pin_Map>

000d64be <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d64be:	b510      	push	{r4, lr}
   d64c0:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d64c2:	3024      	adds	r0, #36	; 0x24
   d64c4:	f001 f8e4 	bl	d7690 <_ZN8FatCache4syncEv>
   d64c8:	b128      	cbz	r0, d64d6 <_ZN9FatVolume9cacheSyncEv+0x18>
   d64ca:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d64ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d64d2:	f001 b8dd 	b.w	d7690 <_ZN8FatCache4syncEv>
  }
   d64d6:	bd10      	pop	{r4, pc}

000d64d8 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d64d8:	1e41      	subs	r1, r0, #1
   d64da:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d64de:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d64e0:	0843      	lsrs	r3, r0, #1
   d64e2:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d64e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d64ea:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d64ee:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d64f0:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d64f2:	d1f5      	bne.n	d64e0 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d64f4:	4770      	bx	lr

000d64f6 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d64f6:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d64f8:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d64fa:	4604      	mov	r4, r0
   d64fc:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d64fe:	b923      	cbnz	r3, d650a <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d6500:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d6502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d6506:	f000 bc82 	b.w	d6e0e <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d650a:	2224      	movs	r2, #36	; 0x24
   d650c:	2100      	movs	r1, #0
   d650e:	f00a fc13 	bl	e0d38 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d6512:	2310      	movs	r3, #16
  m_flags = F_READ;
   d6514:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d6516:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d6518:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d651a:	68ab      	ldr	r3, [r5, #8]
   d651c:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d651e:	68eb      	ldr	r3, [r5, #12]
   d6520:	6223      	str	r3, [r4, #32]
  return true;
}
   d6522:	bd38      	pop	{r3, r4, r5, pc}

000d6524 <_ZN7FatFile7getNameEPcj>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d6524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6528:	b08b      	sub	sp, #44	; 0x2c
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d652a:	7803      	ldrb	r3, [r0, #0]
   d652c:	2500      	movs	r5, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d652e:	4680      	mov	r8, r0
   d6530:	460e      	mov	r6, r1
   d6532:	4617      	mov	r7, r2
   d6534:	f88d 5004 	strb.w	r5, [sp, #4]
   d6538:	f88d 5005 	strb.w	r5, [sp, #5]
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d653c:	b163      	cbz	r3, d6558 <_ZN7FatFile7getNameEPcj+0x34>
   d653e:	2a0c      	cmp	r2, #12
   d6540:	d90a      	bls.n	d6558 <_ZN7FatFile7getNameEPcj+0x34>
   d6542:	e00e      	b.n	d6562 <_ZN7FatFile7getNameEPcj+0x3e>
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
   d6544:	4641      	mov	r1, r8
   d6546:	a801      	add	r0, sp, #4
   d6548:	f7ff ffd5 	bl	d64f6 <_ZN7FatFile11openClusterEPS_>
   d654c:	b120      	cbz	r0, d6558 <_ZN7FatFile7getNameEPcj+0x34>
   d654e:	2401      	movs	r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d6550:	f898 3003 	ldrb.w	r3, [r8, #3]
   d6554:	42a3      	cmp	r3, r4
   d6556:	d20b      	bcs.n	d6570 <_ZN7FatFile7getNameEPcj+0x4c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
   d6558:	f04f 0900 	mov.w	r9, #0
   d655c:	f886 9000 	strb.w	r9, [r6]
  return false;
   d6560:	e055      	b.n	d660e <_ZN7FatFile7getNameEPcj+0xea>
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6562:	78c3      	ldrb	r3, [r0, #3]
   d6564:	2b00      	cmp	r3, #0
   d6566:	d1ed      	bne.n	d6544 <_ZN7FatFile7getNameEPcj+0x20>
    return getSFN(name);
   d6568:	f000 fbb4 	bl	d6cd4 <_ZN7FatFile6getSFNEPc>
   d656c:	4681      	mov	r9, r0
   d656e:	e04e      	b.n	d660e <_ZN7FatFile7getNameEPcj+0xea>
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6570:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   d6574:	1b09      	subs	r1, r1, r4
   d6576:	0149      	lsls	r1, r1, #5
   d6578:	a801      	add	r0, sp, #4
   d657a:	f000 fd43 	bl	d7004 <_ZN7FatFile7seekSetEm>
   d657e:	4681      	mov	r9, r0
   d6580:	2800      	cmp	r0, #0
   d6582:	d0e9      	beq.n	d6558 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6584:	2100      	movs	r1, #0
   d6586:	a801      	add	r0, sp, #4
   d6588:	f000 fd1f 	bl	d6fca <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d658c:	2800      	cmp	r0, #0
   d658e:	d0e3      	beq.n	d6558 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   d6590:	7ac3      	ldrb	r3, [r0, #11]
   d6592:	2b0f      	cmp	r3, #15
   d6594:	d1e0      	bne.n	d6558 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ord != (ldir->ord & 0X1F)) {
   d6596:	7803      	ldrb	r3, [r0, #0]
   d6598:	f003 031f 	and.w	r3, r3, #31
   d659c:	429c      	cmp	r4, r3
   d659e:	d1db      	bne.n	d6558 <_ZN7FatFile7getNameEPcj+0x34>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d65a0:	1e63      	subs	r3, r4, #1
   d65a2:	220d      	movs	r2, #13
   d65a4:	435a      	muls	r2, r3
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d65a6:	eb06 0e02 	add.w	lr, r6, r2
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d65aa:	2300      	movs	r3, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d65ac:	2b04      	cmp	r3, #4
   d65ae:	b2d9      	uxtb	r1, r3
   d65b0:	d804      	bhi.n	d65bc <_ZN7FatFile7getNameEPcj+0x98>
    return ldir->name1[i];
   d65b2:	eb00 0143 	add.w	r1, r0, r3, lsl #1
   d65b6:	f8b1 1001 	ldrh.w	r1, [r1, #1]
   d65ba:	e00b      	b.n	d65d4 <_ZN7FatFile7getNameEPcj+0xb0>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d65bc:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d65be:	bf95      	itete	ls
   d65c0:	f103 31ff 	addls.w	r1, r3, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d65c4:	1c59      	addhi	r1, r3, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d65c6:	eb00 0141 	addls.w	r1, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d65ca:	eb00 0141 	addhi.w	r1, r0, r1, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d65ce:	bf94      	ite	ls
   d65d0:	88c9      	ldrhls	r1, [r1, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d65d2:	8889      	ldrhhi	r1, [r1, #4]
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
   d65d4:	b161      	cbz	r1, d65f0 <_ZN7FatFile7getNameEPcj+0xcc>
   d65d6:	4297      	cmp	r7, r2
   d65d8:	d910      	bls.n	d65fc <_ZN7FatFile7getNameEPcj+0xd8>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d65da:	297e      	cmp	r1, #126	; 0x7e
   d65dc:	bf94      	ite	ls
   d65de:	b2c9      	uxtbls	r1, r1
   d65e0:	213f      	movhi	r1, #63	; 0x3f
   d65e2:	f80e 1003 	strb.w	r1, [lr, r3]
   d65e6:	3301      	adds	r3, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d65e8:	2b0d      	cmp	r3, #13
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d65ea:	f102 0201 	add.w	r2, r2, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d65ee:	d1dd      	bne.n	d65ac <_ZN7FatFile7getNameEPcj+0x88>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   d65f0:	4297      	cmp	r7, r2
   d65f2:	d903      	bls.n	d65fc <_ZN7FatFile7getNameEPcj+0xd8>
   d65f4:	7803      	ldrb	r3, [r0, #0]
   d65f6:	0659      	lsls	r1, r3, #25
    name[k] = 0;
   d65f8:	bf48      	it	mi
   d65fa:	54b5      	strbmi	r5, [r6, r2]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
   d65fc:	19f3      	adds	r3, r6, r7
   d65fe:	f803 5c01 	strb.w	r5, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d6602:	7803      	ldrb	r3, [r0, #0]
   d6604:	065b      	lsls	r3, r3, #25
   d6606:	d402      	bmi.n	d660e <_ZN7FatFile7getNameEPcj+0xea>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d6608:	3401      	adds	r4, #1
   d660a:	b2e4      	uxtb	r4, r4
   d660c:	e7a0      	b.n	d6550 <_ZN7FatFile7getNameEPcj+0x2c>
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
   d660e:	4648      	mov	r0, r9
   d6610:	b00b      	add	sp, #44	; 0x2c
   d6612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6618 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d6618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d661c:	7803      	ldrb	r3, [r0, #0]
   d661e:	2b20      	cmp	r3, #32
   d6620:	f100 0401 	add.w	r4, r0, #1
   d6624:	d101      	bne.n	d662a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d6626:	4620      	mov	r0, r4
   d6628:	e7f8      	b.n	d661c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d662a:	4f70      	ldr	r7, [pc, #448]	; (d67ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d662c:	6088      	str	r0, [r1, #8]
   d662e:	4605      	mov	r5, r0
   d6630:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d6632:	462e      	mov	r6, r5
   d6634:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d6638:	b30b      	cbz	r3, d667e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d663a:	2b2f      	cmp	r3, #47	; 0x2f
   d663c:	d101      	bne.n	d6642 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d663e:	1903      	adds	r3, r0, r4
   d6640:	e017      	b.n	d6672 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6642:	2b5c      	cmp	r3, #92	; 0x5c
   d6644:	d102      	bne.n	d664c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6646:	2000      	movs	r0, #0
   d6648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d664c:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d6650:	b2e4      	uxtb	r4, r4
   d6652:	2c1d      	cmp	r4, #29
   d6654:	d803      	bhi.n	d665e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d6656:	fa27 f404 	lsr.w	r4, r7, r4
   d665a:	07e4      	lsls	r4, r4, #31
   d665c:	d4f3      	bmi.n	d6646 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d665e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d6662:	2c3c      	cmp	r4, #60	; 0x3c
   d6664:	d0ef      	beq.n	d6646 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d6666:	3b20      	subs	r3, #32
   d6668:	2b5e      	cmp	r3, #94	; 0x5e
   d666a:	d9e1      	bls.n	d6630 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d666c:	e7eb      	b.n	d6646 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d666e:	2d2f      	cmp	r5, #47	; 0x2f
   d6670:	d105      	bne.n	d667e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6672:	461e      	mov	r6, r3
   d6674:	f813 5b01 	ldrb.w	r5, [r3], #1
   d6678:	2d20      	cmp	r5, #32
   d667a:	d1f8      	bne.n	d666e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d667c:	e7f9      	b.n	d6672 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d667e:	6016      	str	r6, [r2, #0]
   d6680:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d6682:	4298      	cmp	r0, r3
   d6684:	ebc0 0803 	rsb	r8, r0, r3
   d6688:	d009      	beq.n	d669e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d668a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d668e:	2a2e      	cmp	r2, #46	; 0x2e
   d6690:	d0f7      	beq.n	d6682 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d6692:	2a20      	cmp	r2, #32
   d6694:	d0f5      	beq.n	d6682 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d6696:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d669a:	dcd4      	bgt.n	d6646 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d669c:	e001      	b.n	d66a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d669e:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d66a2:	f8c1 8004 	str.w	r8, [r1, #4]
   d66a6:	f101 030c 	add.w	r3, r1, #12
   d66aa:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d66ae:	2420      	movs	r4, #32
   d66b0:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d66b4:	4293      	cmp	r3, r2
   d66b6:	d1fb      	bne.n	d66b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d66b8:	4603      	mov	r3, r0
   d66ba:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d66bc:	f813 4b01 	ldrb.w	r4, [r3], #1
   d66c0:	2c2e      	cmp	r4, #46	; 0x2e
   d66c2:	d0fa      	beq.n	d66ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d66c4:	2c20      	cmp	r4, #32
   d66c6:	d0f8      	beq.n	d66ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d66c8:	fab2 f482 	clz	r4, r2
   d66cc:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d66ce:	f108 36ff 	add.w	r6, r8, #4294967295
   d66d2:	1c73      	adds	r3, r6, #1
   d66d4:	d107      	bne.n	d66e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d66d6:	2700      	movs	r7, #0
   d66d8:	f04f 0e07 	mov.w	lr, #7
   d66dc:	463d      	mov	r5, r7
   d66de:	46ba      	mov	sl, r7
   d66e0:	f04f 0908 	mov.w	r9, #8
   d66e4:	e009      	b.n	d66fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d66e6:	5d83      	ldrb	r3, [r0, r6]
   d66e8:	2b2e      	cmp	r3, #46	; 0x2e
   d66ea:	d0f4      	beq.n	d66d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d66ec:	3e01      	subs	r6, #1
   d66ee:	e7f0      	b.n	d66d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d66f0:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d66f2:	2b20      	cmp	r3, #32
   d66f4:	d104      	bne.n	d6700 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d66f6:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d66f8:	3201      	adds	r2, #1
   d66fa:	4542      	cmp	r2, r8
   d66fc:	dbf8      	blt.n	d66f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d66fe:	e04b      	b.n	d6798 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d6700:	2b2e      	cmp	r3, #46	; 0x2e
   d6702:	d102      	bne.n	d670a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d6704:	42b2      	cmp	r2, r6
   d6706:	d1f6      	bne.n	d66f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6708:	e003      	b.n	d6712 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d670a:	2b22      	cmp	r3, #34	; 0x22
   d670c:	d017      	beq.n	d673e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d670e:	2b7c      	cmp	r3, #124	; 0x7c
   d6710:	d015      	beq.n	d673e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6712:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d6716:	f1bc 0f05 	cmp.w	ip, #5
   d671a:	d801      	bhi.n	d6720 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d671c:	2b2d      	cmp	r3, #45	; 0x2d
   d671e:	d10e      	bne.n	d673e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d6720:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6724:	f1bc 0f05 	cmp.w	ip, #5
   d6728:	d909      	bls.n	d673e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d672a:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d672e:	f1bc 0f02 	cmp.w	ip, #2
   d6732:	d904      	bls.n	d673e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d6734:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6738:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d673c:	d902      	bls.n	d6744 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d673e:	42b2      	cmp	r2, r6
   d6740:	d10e      	bne.n	d6760 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d6742:	e049      	b.n	d67d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6744:	42b2      	cmp	r2, r6
   d6746:	d047      	beq.n	d67d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d6748:	4575      	cmp	r5, lr
   d674a:	d821      	bhi.n	d6790 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d674c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6750:	f1bc 0f19 	cmp.w	ip, #25
   d6754:	d808      	bhi.n	d6768 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d6756:	3b20      	subs	r3, #32
   d6758:	b2db      	uxtb	r3, r3
        lc |= bit;
   d675a:	ea49 0707 	orr.w	r7, r9, r7
   d675e:	e00a      	b.n	d6776 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6760:	4575      	cmp	r5, lr
   d6762:	d815      	bhi.n	d6790 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d6764:	2400      	movs	r4, #0
      c = '_';
   d6766:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d6768:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d676c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6770:	bf98      	it	ls
   d6772:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d6776:	f105 0c01 	add.w	ip, r5, #1
   d677a:	fa5f fc8c 	uxtb.w	ip, ip
   d677e:	440d      	add	r5, r1
      if (i < 7) {
   d6780:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d6784:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d6786:	d801      	bhi.n	d678c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d6788:	f881 c00c 	strb.w	ip, [r1, #12]
   d678c:	4665      	mov	r5, ip
   d678e:	e7b3      	b.n	d66f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6790:	f1be 0f0a 	cmp.w	lr, #10
   d6794:	d117      	bne.n	d67c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d6796:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d6798:	7b4b      	ldrb	r3, [r1, #13]
   d679a:	2b20      	cmp	r3, #32
   d679c:	f43f af53 	beq.w	d6646 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d67a0:	b13c      	cbz	r4, d67b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d67a2:	ea1a 0f07 	tst.w	sl, r7
   d67a6:	bf18      	it	ne
   d67a8:	2702      	movne	r7, #2
   d67aa:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d67ac:	2001      	movs	r0, #1
   d67ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d67b2:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d67b4:	2001      	movs	r0, #1
   d67b6:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d67b8:	4419      	add	r1, r3
   d67ba:	237e      	movs	r3, #126	; 0x7e
   d67bc:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d67be:	2331      	movs	r3, #49	; 0x31
   d67c0:	738b      	strb	r3, [r1, #14]
   d67c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d67c6:	42b2      	cmp	r2, r6
   d67c8:	dce5      	bgt.n	d6796 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d67ca:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d67cc:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d67d0:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d67d2:	f04f 0910 	mov.w	r9, #16
   d67d6:	e78e      	b.n	d66f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d67d8:	f1be 0f0a 	cmp.w	lr, #10
   d67dc:	d0db      	beq.n	d6796 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d67de:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d67e0:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d67e4:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d67e6:	f04f 0910 	mov.w	r9, #16
   d67ea:	e785      	b.n	d66f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d67ec:	31000101 	.word	0x31000101

000d67f0 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d67f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67f2:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d67f4:	2300      	movs	r3, #0
   d67f6:	f88d 3004 	strb.w	r3, [sp, #4]
   d67fa:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d67fe:	7803      	ldrb	r3, [r0, #0]
   d6800:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6802:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6804:	d508      	bpl.n	d6818 <_ZN7FatFile6removeEv+0x28>
   d6806:	7883      	ldrb	r3, [r0, #2]
   d6808:	079a      	lsls	r2, r3, #30
   d680a:	d505      	bpl.n	d6818 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d680c:	6a01      	ldr	r1, [r0, #32]
   d680e:	b129      	cbz	r1, d681c <_ZN7FatFile6removeEv+0x2c>
   d6810:	68a0      	ldr	r0, [r4, #8]
   d6812:	f001 f82e 	bl	d7872 <_ZN9FatVolume9freeChainEm>
   d6816:	b908      	cbnz	r0, d681c <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d6818:	2000      	movs	r0, #0
   d681a:	e049      	b.n	d68b0 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d681c:	2101      	movs	r1, #1
   d681e:	4620      	mov	r0, r4
   d6820:	f000 fabc 	bl	d6d9c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6824:	4605      	mov	r5, r0
   d6826:	2800      	cmp	r0, #0
   d6828:	d0f6      	beq.n	d6818 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d682a:	f7ff fe55 	bl	d64d8 <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d682e:	26e5      	movs	r6, #229	; 0xe5
   d6830:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6832:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6834:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6836:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d6838:	68a0      	ldr	r0, [r4, #8]
   d683a:	f7ff fe40 	bl	d64be <_ZN9FatVolume9cacheSyncEv>
   d683e:	2800      	cmp	r0, #0
   d6840:	d0ea      	beq.n	d6818 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6842:	78e3      	ldrb	r3, [r4, #3]
   d6844:	2b00      	cmp	r3, #0
   d6846:	d033      	beq.n	d68b0 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d6848:	4621      	mov	r1, r4
   d684a:	a801      	add	r0, sp, #4
   d684c:	f7ff fe53 	bl	d64f6 <_ZN7FatFile11openClusterEPS_>
   d6850:	2800      	cmp	r0, #0
   d6852:	d0e1      	beq.n	d6818 <_ZN7FatFile6removeEv+0x28>
   d6854:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6856:	78e3      	ldrb	r3, [r4, #3]
   d6858:	42ab      	cmp	r3, r5
   d685a:	d3dd      	bcc.n	d6818 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d685c:	88a1      	ldrh	r1, [r4, #4]
   d685e:	1b49      	subs	r1, r1, r5
   d6860:	0149      	lsls	r1, r1, #5
   d6862:	a801      	add	r0, sp, #4
   d6864:	f000 fbce 	bl	d7004 <_ZN7FatFile7seekSetEm>
   d6868:	2800      	cmp	r0, #0
   d686a:	d0d5      	beq.n	d6818 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d686c:	2100      	movs	r1, #0
   d686e:	a801      	add	r0, sp, #4
   d6870:	f000 fbab 	bl	d6fca <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6874:	2800      	cmp	r0, #0
   d6876:	d0cf      	beq.n	d6818 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6878:	7ac3      	ldrb	r3, [r0, #11]
   d687a:	2b0f      	cmp	r3, #15
   d687c:	d1cc      	bne.n	d6818 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d687e:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6880:	f002 031f 	and.w	r3, r2, #31
   d6884:	429d      	cmp	r5, r3
   d6886:	d1c7      	bne.n	d6818 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6888:	7b43      	ldrb	r3, [r0, #13]
   d688a:	42bb      	cmp	r3, r7
   d688c:	d1c4      	bne.n	d6818 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d688e:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d6890:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d6892:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d6896:	f043 0301 	orr.w	r3, r3, #1
   d689a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d689e:	0653      	lsls	r3, r2, #25
   d68a0:	d503      	bpl.n	d68aa <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d68a2:	68a0      	ldr	r0, [r4, #8]
   d68a4:	f7ff fe0b 	bl	d64be <_ZN9FatVolume9cacheSyncEv>
   d68a8:	e002      	b.n	d68b0 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d68aa:	3501      	adds	r5, #1
   d68ac:	b2ed      	uxtb	r5, r5
   d68ae:	e7d2      	b.n	d6856 <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d68b0:	b00b      	add	sp, #44	; 0x2c
   d68b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d68b4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d68b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d68b8:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d68bc:	4606      	mov	r6, r0
   d68be:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d68c0:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d68c2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d68c4:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d68c8:	6869      	ldr	r1, [r5, #4]
   d68ca:	68aa      	ldr	r2, [r5, #8]
   d68cc:	1863      	adds	r3, r4, r1
   d68ce:	b29b      	uxth	r3, r3
   d68d0:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d68d2:	4291      	cmp	r1, r2
   d68d4:	d006      	beq.n	d68e4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d68d6:	f812 0b01 	ldrb.w	r0, [r2], #1
   d68da:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d68de:	4043      	eors	r3, r0
   d68e0:	b29b      	uxth	r3, r3
   d68e2:	e7f6      	b.n	d68d2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d68e4:	f1b9 0f03 	cmp.w	r9, #3
   d68e8:	bf28      	it	cs
   d68ea:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d68ee:	f109 0204 	add.w	r2, r9, #4
   d68f2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d68f4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d68f8:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d68fa:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d68fc:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d68fe:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6900:	bf94      	ite	ls
   d6902:	3130      	addls	r1, #48	; 0x30
   d6904:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6906:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6908:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d690a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d690e:	d3f1      	bcc.n	d68f4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6910:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d6914:	2100      	movs	r1, #0
   d6916:	735f      	strb	r7, [r3, #13]
   d6918:	4630      	mov	r0, r6
   d691a:	f000 fb73 	bl	d7004 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d691e:	2101      	movs	r1, #1
   d6920:	4630      	mov	r0, r6
   d6922:	f000 fb52 	bl	d6fca <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6926:	4601      	mov	r1, r0
   d6928:	b928      	cbnz	r0, d6936 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d692a:	7870      	ldrb	r0, [r6, #1]
   d692c:	fab0 f080 	clz	r0, r0
   d6930:	0940      	lsrs	r0, r0, #5
   d6932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6936:	7803      	ldrb	r3, [r0, #0]
   d6938:	b14b      	cbz	r3, d694e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d693a:	7ac3      	ldrb	r3, [r0, #11]
   d693c:	071b      	lsls	r3, r3, #28
   d693e:	d4ee      	bmi.n	d691e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6940:	220b      	movs	r2, #11
   d6942:	4640      	mov	r0, r8
   d6944:	f00a f9de 	bl	e0d04 <memcmp>
   d6948:	2800      	cmp	r0, #0
   d694a:	d1e8      	bne.n	d691e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d694c:	e002      	b.n	d6954 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d694e:	2001      	movs	r0, #1
   d6950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6954:	3401      	adds	r4, #1
   d6956:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6958:	2c64      	cmp	r4, #100	; 0x64
   d695a:	d1b5      	bne.n	d68c8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d695c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6960 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6964:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6966:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6968:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d696a:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d696e:	9005      	str	r0, [sp, #20]
   d6970:	460e      	mov	r6, r1
   d6972:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6974:	d101      	bne.n	d697a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d6976:	2000      	movs	r0, #0
   d6978:	e1a0      	b.n	d6cbc <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d697a:	9b05      	ldr	r3, [sp, #20]
   d697c:	781b      	ldrb	r3, [r3, #0]
   d697e:	2b00      	cmp	r3, #0
   d6980:	d1f9      	bne.n	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d6982:	6853      	ldr	r3, [r2, #4]
   d6984:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6986:	7813      	ldrb	r3, [r2, #0]
   d6988:	079b      	lsls	r3, r3, #30
   d698a:	f000 818d 	beq.w	d6ca8 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d698e:	9b02      	ldr	r3, [sp, #8]
   d6990:	270d      	movs	r7, #13
   d6992:	330c      	adds	r3, #12
   d6994:	fbb3 f7f7 	udiv	r7, r3, r7
   d6998:	3701      	adds	r7, #1
   d699a:	b2ff      	uxtb	r7, r7
   d699c:	2100      	movs	r1, #0
   d699e:	4630      	mov	r0, r6
   d69a0:	f000 fb30 	bl	d7004 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d69a4:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d69a8:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d69ac:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d69b0:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d69b2:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d69b4:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d69b6:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d69ba:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d69bc:	6972      	ldr	r2, [r6, #20]
   d69be:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d69c0:	2101      	movs	r1, #1
   d69c2:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d69c4:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d69c8:	f000 faff 	bl	d6fca <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d69cc:	9b07      	ldr	r3, [sp, #28]
   d69ce:	b920      	cbnz	r0, d69da <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d69d0:	7873      	ldrb	r3, [r6, #1]
   d69d2:	2b00      	cmp	r3, #0
   d69d4:	f000 8090 	beq.w	d6af8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d69d8:	e7cd      	b.n	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d69da:	7802      	ldrb	r2, [r0, #0]
   d69dc:	2ae5      	cmp	r2, #229	; 0xe5
   d69de:	d000      	beq.n	d69e2 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d69e0:	b942      	cbnz	r2, d69f4 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d69e2:	2c00      	cmp	r4, #0
   d69e4:	bf08      	it	eq
   d69e6:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d69e8:	42bc      	cmp	r4, r7
        freeFound++;
   d69ea:	bf3c      	itt	cc
   d69ec:	3401      	addcc	r4, #1
   d69ee:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d69f0:	b922      	cbnz	r2, d69fc <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d69f2:	e081      	b.n	d6af8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d69f4:	42bc      	cmp	r4, r7
   d69f6:	bf38      	it	cc
   d69f8:	2400      	movcc	r4, #0
   d69fa:	e003      	b.n	d6a04 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d69fc:	2ae5      	cmp	r2, #229	; 0xe5
   d69fe:	d101      	bne.n	d6a04 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d6a00:	2500      	movs	r5, #0
   d6a02:	e7db      	b.n	d69bc <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6a04:	2a2e      	cmp	r2, #46	; 0x2e
   d6a06:	d0fb      	beq.n	d6a00 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6a08:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6a0a:	290f      	cmp	r1, #15
   d6a0c:	d152      	bne.n	d6ab4 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d6a0e:	b93d      	cbnz	r5, d6a20 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6a10:	0651      	lsls	r1, r2, #25
   d6a12:	d5d3      	bpl.n	d69bc <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d6a14:	7b43      	ldrb	r3, [r0, #13]
   d6a16:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d6a18:	f002 051f 	and.w	r5, r2, #31
   d6a1c:	462b      	mov	r3, r5
   d6a1e:	e007      	b.n	d6a30 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6a20:	3b01      	subs	r3, #1
   d6a22:	b2db      	uxtb	r3, r3
   d6a24:	429a      	cmp	r2, r3
   d6a26:	d1eb      	bne.n	d6a00 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6a28:	7b42      	ldrb	r2, [r0, #13]
   d6a2a:	9903      	ldr	r1, [sp, #12]
   d6a2c:	4291      	cmp	r1, r2
   d6a2e:	d1e7      	bne.n	d6a00 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6a30:	1e5a      	subs	r2, r3, #1
   d6a32:	f04f 0c0d 	mov.w	ip, #13
   d6a36:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d6a3a:	9a02      	ldr	r2, [sp, #8]
   d6a3c:	4562      	cmp	r2, ip
   d6a3e:	d9df      	bls.n	d6a00 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6a40:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6a44:	f1be 0f04 	cmp.w	lr, #4
   d6a48:	fa5f f28e 	uxtb.w	r2, lr
   d6a4c:	d804      	bhi.n	d6a58 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d6a4e:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6a52:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d6a56:	e00c      	b.n	d6a72 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6a58:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6a5a:	bf95      	itete	ls
   d6a5c:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6a60:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6a64:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6a68:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6a6c:	bf94      	ite	ls
   d6a6e:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6a70:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d6a72:	9902      	ldr	r1, [sp, #8]
   d6a74:	4561      	cmp	r1, ip
   d6a76:	d103      	bne.n	d6a80 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d6a78:	2a00      	cmp	r2, #0
   d6a7a:	bf18      	it	ne
   d6a7c:	2500      	movne	r5, #0
   d6a7e:	e79d      	b.n	d69bc <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6a80:	2aff      	cmp	r2, #255	; 0xff
   d6a82:	d8bd      	bhi.n	d6a00 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6a84:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6a86:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6a8a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6a8c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d6a90:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6a94:	bf98      	it	ls
   d6a96:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6a98:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6a9c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d6aa0:	bf98      	it	ls
   d6aa2:	b2d2      	uxtbls	r2, r2
   d6aa4:	f1bc 0f19 	cmp.w	ip, #25
   d6aa8:	bf9c      	itt	ls
   d6aaa:	3120      	addls	r1, #32
   d6aac:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6aae:	4291      	cmp	r1, r2
   d6ab0:	d1a6      	bne.n	d6a00 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6ab2:	e0fb      	b.n	d6cac <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6ab4:	0709      	lsls	r1, r1, #28
   d6ab6:	d4a3      	bmi.n	d6a00 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d6ab8:	b14d      	cbz	r5, d6ace <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d6aba:	2b01      	cmp	r3, #1
   d6abc:	f47f af5b 	bne.w	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6ac0:	f7ff fd0a 	bl	d64d8 <_ZN7FatFile11lfnChecksumEPh>
   d6ac4:	9b03      	ldr	r3, [sp, #12]
   d6ac6:	4283      	cmp	r3, r0
   d6ac8:	f47f af55 	bne.w	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6acc:	e00f      	b.n	d6aee <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6ace:	220b      	movs	r2, #11
   d6ad0:	9906      	ldr	r1, [sp, #24]
   d6ad2:	9307      	str	r3, [sp, #28]
   d6ad4:	f00a f916 	bl	e0d04 <memcmp>
   d6ad8:	9b07      	ldr	r3, [sp, #28]
   d6ada:	2800      	cmp	r0, #0
   d6adc:	f47f af6e 	bne.w	d69bc <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6ae0:	f899 2000 	ldrb.w	r2, [r9]
   d6ae4:	07d2      	lsls	r2, r2, #31
   d6ae6:	d502      	bpl.n	d6aee <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d6ae8:	2201      	movs	r2, #1
   d6aea:	9204      	str	r2, [sp, #16]
   d6aec:	e766      	b.n	d69bc <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d6aee:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d6af2:	f000 80d1 	beq.w	d6c98 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d6af6:	e73e      	b.n	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6af8:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d6afc:	f43f af3b 	beq.w	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d6b00:	f00b 0303 	and.w	r3, fp, #3
   d6b04:	3b01      	subs	r3, #1
   d6b06:	2b01      	cmp	r3, #1
   d6b08:	f63f af35 	bhi.w	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d6b0c:	2c00      	cmp	r4, #0
   d6b0e:	bf08      	it	eq
   d6b10:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6b12:	42bc      	cmp	r4, r7
   d6b14:	d302      	bcc.n	d6b1c <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d6b16:	9b04      	ldr	r3, [sp, #16]
   d6b18:	b9cb      	cbnz	r3, d6b4e <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d6b1a:	e01f      	b.n	d6b5c <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d6b1c:	2100      	movs	r1, #0
   d6b1e:	4630      	mov	r0, r6
   d6b20:	f000 fa53 	bl	d6fca <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6b24:	b910      	cbnz	r0, d6b2c <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d6b26:	7873      	ldrb	r3, [r6, #1]
   d6b28:	b15b      	cbz	r3, d6b42 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d6b2a:	e724      	b.n	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d6b2c:	3401      	adds	r4, #1
   d6b2e:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6b30:	e7ef      	b.n	d6b12 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d6b32:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6b34:	791b      	ldrb	r3, [r3, #4]
   d6b36:	2b01      	cmp	r3, #1
   d6b38:	d8ed      	bhi.n	d6b16 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d6b3a:	3410      	adds	r4, #16
   d6b3c:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d6b3e:	42a7      	cmp	r7, r4
   d6b40:	d9e9      	bls.n	d6b16 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6b42:	4630      	mov	r0, r6
   d6b44:	f000 f8ea 	bl	d6d1c <_ZN7FatFile13addDirClusterEv>
   d6b48:	2800      	cmp	r0, #0
   d6b4a:	d1f2      	bne.n	d6b32 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d6b4c:	e713      	b.n	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d6b4e:	4649      	mov	r1, r9
   d6b50:	4630      	mov	r0, r6
   d6b52:	f7ff feaf 	bl	d68b4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6b56:	2800      	cmp	r0, #0
   d6b58:	f43f af0d 	beq.w	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6b5c:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6b60:	4630      	mov	r0, r6
   d6b62:	f000 fa4f 	bl	d7004 <_ZN7FatFile7seekSetEm>
   d6b66:	2800      	cmp	r0, #0
   d6b68:	f43f af05 	beq.w	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d6b6c:	1e7d      	subs	r5, r7, #1
   d6b6e:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6b70:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6b72:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d6b76:	f04f 080f 	mov.w	r8, #15
   d6b7a:	e041      	b.n	d6c00 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6b7c:	2100      	movs	r1, #0
   d6b7e:	4630      	mov	r0, r6
   d6b80:	f000 fa23 	bl	d6fca <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6b84:	4607      	mov	r7, r0
   d6b86:	2800      	cmp	r0, #0
   d6b88:	f43f aef5 	beq.w	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d6b8c:	68b2      	ldr	r2, [r6, #8]
   d6b8e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6b92:	42ac      	cmp	r4, r5
   d6b94:	f043 0301 	orr.w	r3, r3, #1
   d6b98:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d6b9c:	bf0c      	ite	eq
   d6b9e:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d6ba2:	4622      	movne	r2, r4
   d6ba4:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6ba6:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d6baa:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d6bae:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6bb2:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6bb4:	f7ff fc90 	bl	d64d8 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6bb8:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6bba:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d6bbc:	f887 a01a 	strb.w	sl, [r7, #26]
   d6bc0:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6bc4:	f002 021f 	and.w	r2, r2, #31
   d6bc8:	230d      	movs	r3, #13
   d6bca:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d6bcc:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6bd0:	435a      	muls	r2, r3
   d6bd2:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6bd4:	9902      	ldr	r1, [sp, #8]
   d6bd6:	4291      	cmp	r1, r2
   d6bd8:	d915      	bls.n	d6c06 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d6bda:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d6bde:	2b04      	cmp	r3, #4
   d6be0:	fa5f fc83 	uxtb.w	ip, r3
   d6be4:	f103 0001 	add.w	r0, r3, #1
   d6be8:	d813      	bhi.n	d6c12 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d6bea:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d6bee:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6bf2:	280d      	cmp	r0, #13
   d6bf4:	f102 0201 	add.w	r2, r2, #1
   d6bf8:	4603      	mov	r3, r0
   d6bfa:	d1eb      	bne.n	d6bd4 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6bfc:	3c01      	subs	r4, #1
   d6bfe:	b2e4      	uxtb	r4, r4
   d6c00:	2c00      	cmp	r4, #0
   d6c02:	d1bb      	bne.n	d6b7c <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d6c04:	e00e      	b.n	d6c24 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6c06:	bf14      	ite	ne
   d6c08:	f04f 31ff 	movne.w	r1, #4294967295
   d6c0c:	2100      	moveq	r1, #0
   d6c0e:	b289      	uxth	r1, r1
   d6c10:	e7e5      	b.n	d6bde <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6c12:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6c16:	bf94      	ite	ls
   d6c18:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d6c1c:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6c20:	8099      	strh	r1, [r3, #4]
   d6c22:	e7e6      	b.n	d6bf2 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6c24:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d6c26:	4621      	mov	r1, r4
   d6c28:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6c2a:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d6c2e:	f000 f9cc 	bl	d6fca <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6c32:	4607      	mov	r7, r0
   d6c34:	2800      	cmp	r0, #0
   d6c36:	f43f ae9e 	beq.w	d6976 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d6c3a:	2220      	movs	r2, #32
   d6c3c:	4621      	mov	r1, r4
   d6c3e:	f00a f87b 	bl	e0d38 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6c42:	464b      	mov	r3, r9
   d6c44:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6c48:	603a      	str	r2, [r7, #0]
   d6c4a:	685a      	ldr	r2, [r3, #4]
   d6c4c:	607a      	str	r2, [r7, #4]
   d6c4e:	891a      	ldrh	r2, [r3, #8]
   d6c50:	813a      	strh	r2, [r7, #8]
   d6c52:	7a9b      	ldrb	r3, [r3, #10]
   d6c54:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6c56:	f899 3000 	ldrb.w	r3, [r9]
   d6c5a:	f003 0318 	and.w	r3, r3, #24
   d6c5e:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6c60:	4b18      	ldr	r3, [pc, #96]	; (d6cc4 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d6c62:	681b      	ldr	r3, [r3, #0]
   d6c64:	b12b      	cbz	r3, d6c72 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6c66:	f107 010e 	add.w	r1, r7, #14
   d6c6a:	f107 0010 	add.w	r0, r7, #16
   d6c6e:	4798      	blx	r3
   d6c70:	e006      	b.n	d6c80 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d6c72:	2321      	movs	r3, #33	; 0x21
   d6c74:	743b      	strb	r3, [r7, #16]
   d6c76:	2328      	movs	r3, #40	; 0x28
   d6c78:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6c7a:	2308      	movs	r3, #8
   d6c7c:	73bc      	strb	r4, [r7, #14]
   d6c7e:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d6c80:	8a3b      	ldrh	r3, [r7, #16]
   d6c82:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d6c84:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d6c86:	89fb      	ldrh	r3, [r7, #14]
   d6c88:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d6c8a:	68b2      	ldr	r2, [r6, #8]
   d6c8c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6c90:	f043 0301 	orr.w	r3, r3, #1
   d6c94:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6c98:	9500      	str	r5, [sp, #0]
   d6c9a:	465b      	mov	r3, fp
   d6c9c:	4652      	mov	r2, sl
   d6c9e:	4631      	mov	r1, r6
   d6ca0:	9805      	ldr	r0, [sp, #20]
   d6ca2:	f000 f9f8 	bl	d7096 <_ZN7FatFile15openCachedEntryEPS_tih>
   d6ca6:	e009      	b.n	d6cbc <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6ca8:	2701      	movs	r7, #1
   d6caa:	e677      	b.n	d699c <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d6cac:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d6cb0:	f1be 0f0d 	cmp.w	lr, #13
   d6cb4:	f43f ae82 	beq.w	d69bc <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6cb8:	46d4      	mov	ip, sl
   d6cba:	e6c3      	b.n	d6a44 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d6cbc:	b009      	add	sp, #36	; 0x24
   d6cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6cc2:	bf00      	nop
   d6cc4:	2003e09c 	.word	0x2003e09c

000d6cc8 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d6cc8:	f003 bfa2 	b.w	dac10 <HAL_Pin_Map>

000d6ccc <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d6ccc:	f003 bfa0 	b.w	dac10 <HAL_Pin_Map>

000d6cd0 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d6cd0:	f003 bf9e 	b.w	dac10 <HAL_Pin_Map>

000d6cd4 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d6cd4:	b510      	push	{r4, lr}
   d6cd6:	460c      	mov	r4, r1
   d6cd8:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d6cda:	b909      	cbnz	r1, d6ce0 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d6cdc:	2000      	movs	r0, #0
   d6cde:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d6ce0:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d6ce4:	d004      	beq.n	d6cf0 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d6ce6:	232f      	movs	r3, #47	; 0x2f
   d6ce8:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d6cea:	2300      	movs	r3, #0
   d6cec:	7063      	strb	r3, [r4, #1]
   d6cee:	e006      	b.n	d6cfe <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d6cf0:	f000 f854 	bl	d6d9c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6cf4:	2800      	cmp	r0, #0
   d6cf6:	d0f1      	beq.n	d6cdc <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d6cf8:	4621      	mov	r1, r4
   d6cfa:	f000 f85e 	bl	d6dba <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d6cfe:	2001      	movs	r0, #1

fail:
  return false;
}
   d6d00:	bd10      	pop	{r4, pc}

000d6d02 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d6d02:	f003 bf85 	b.w	dac10 <HAL_Pin_Map>

000d6d06 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6d06:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6d08:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6d0a:	f043 0304 	orr.w	r3, r3, #4
   d6d0e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6d10:	f100 0210 	add.w	r2, r0, #16
   d6d14:	6880      	ldr	r0, [r0, #8]
   d6d16:	f000 bd71 	b.w	d77fc <_ZN9FatVolume15allocateClusterEmPm>
	...

000d6d1c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6d20:	7803      	ldrb	r3, [r0, #0]
   d6d22:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6d26:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6d28:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d6d2c:	b10b      	cbz	r3, d6d32 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d6d2e:	2600      	movs	r6, #0
   d6d30:	e02e      	b.n	d6d90 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d6d32:	6942      	ldr	r2, [r0, #20]
   d6d34:	4b18      	ldr	r3, [pc, #96]	; (d6d98 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d6d36:	429a      	cmp	r2, r3
   d6d38:	d8f9      	bhi.n	d6d2e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d6d3a:	f7ff ffe4 	bl	d6d06 <_ZN7FatFile10addClusterEv>
   d6d3e:	4606      	mov	r6, r0
   d6d40:	2800      	cmp	r0, #0
   d6d42:	d0f4      	beq.n	d6d2e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6d44:	6921      	ldr	r1, [r4, #16]
   d6d46:	68a0      	ldr	r0, [r4, #8]
   d6d48:	f000 fced 	bl	d7726 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6d4c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6d4e:	68a0      	ldr	r0, [r4, #8]
   d6d50:	2205      	movs	r2, #5
   d6d52:	4639      	mov	r1, r7
   d6d54:	3024      	adds	r0, #36	; 0x24
   d6d56:	f000 fcc2 	bl	d76de <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d6d5a:	4680      	mov	r8, r0
   d6d5c:	2800      	cmp	r0, #0
   d6d5e:	d0e6      	beq.n	d6d2e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d6d60:	4629      	mov	r1, r5
   d6d62:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6d66:	f009 ffe7 	bl	e0d38 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6d6a:	2501      	movs	r5, #1
   d6d6c:	68a3      	ldr	r3, [r4, #8]
   d6d6e:	791a      	ldrb	r2, [r3, #4]
   d6d70:	42aa      	cmp	r2, r5
   d6d72:	d909      	bls.n	d6d88 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6d74:	4642      	mov	r2, r8
   d6d76:	19e9      	adds	r1, r5, r7
   d6d78:	6818      	ldr	r0, [r3, #0]
   d6d7a:	f001 f82d 	bl	d7dd8 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6d7e:	2800      	cmp	r0, #0
   d6d80:	d0d5      	beq.n	d6d2e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6d82:	3501      	adds	r5, #1
   d6d84:	b2ed      	uxtb	r5, r5
   d6d86:	e7f1      	b.n	d6d6c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d6d88:	6963      	ldr	r3, [r4, #20]
   d6d8a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d6d8e:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d6d90:	4630      	mov	r0, r6
   d6d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6d96:	bf00      	nop
   d6d98:	001ffdff 	.word	0x001ffdff

000d6d9c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d6d9c:	b510      	push	{r4, lr}
   d6d9e:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6da0:	6880      	ldr	r0, [r0, #8]
   d6da2:	460a      	mov	r2, r1
   d6da4:	3024      	adds	r0, #36	; 0x24
   d6da6:	69a1      	ldr	r1, [r4, #24]
   d6da8:	f000 fc99 	bl	d76de <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d6dac:	b120      	cbz	r0, d6db8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d6dae:	88a3      	ldrh	r3, [r4, #4]
   d6db0:	f003 030f 	and.w	r3, r3, #15
   d6db4:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d6db8:	bd10      	pop	{r4, pc}

000d6dba <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d6dba:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6dbc:	2400      	movs	r4, #0
   d6dbe:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d6dc0:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d6dc2:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6dc4:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d6dc6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6dca:	2a20      	cmp	r2, #32
   d6dcc:	d018      	beq.n	d6e00 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d6dce:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6dd0:	bf02      	ittt	eq
   d6dd2:	54cf      	strbeq	r7, [r1, r3]
   d6dd4:	1c5a      	addeq	r2, r3, #1
   d6dd6:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d6dd8:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6dda:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d6dde:	bf08      	it	eq
   d6de0:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6de2:	f1be 0f19 	cmp.w	lr, #25
   d6de6:	d806      	bhi.n	d6df6 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d6de8:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d6dec:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d6df0:	bf1c      	itt	ne
   d6df2:	3220      	addne	r2, #32
   d6df4:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d6df6:	f103 0e01 	add.w	lr, r3, #1
   d6dfa:	54ca      	strb	r2, [r1, r3]
   d6dfc:	fa5f f38e 	uxtb.w	r3, lr
   d6e00:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d6e02:	2c0b      	cmp	r4, #11
   d6e04:	d1df      	bne.n	d6dc6 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d6e06:	2200      	movs	r2, #0
   d6e08:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d6e0a:	4618      	mov	r0, r3
   d6e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6e0e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6e0e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d6e10:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6e12:	4605      	mov	r5, r0
   d6e14:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d6e16:	b984      	cbnz	r4, d6e3a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d6e18:	2224      	movs	r2, #36	; 0x24
   d6e1a:	4621      	mov	r1, r4
   d6e1c:	f009 ff8c 	bl	e0d38 <memset>

  m_vol = vol;
   d6e20:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d6e22:	79f3      	ldrb	r3, [r6, #7]
   d6e24:	2b10      	cmp	r3, #16
   d6e26:	d003      	beq.n	d6e30 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d6e28:	2b20      	cmp	r3, #32
   d6e2a:	d106      	bne.n	d6e3a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6e2c:	2340      	movs	r3, #64	; 0x40
   d6e2e:	e000      	b.n	d6e32 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d6e30:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6e32:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6e34:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6e36:	70a8      	strb	r0, [r5, #2]
   d6e38:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d6e3a:	2000      	movs	r0, #0
   d6e3c:	bd70      	pop	{r4, r5, r6, pc}

000d6e3e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d6e3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e42:	7803      	ldrb	r3, [r0, #0]
   d6e44:	4604      	mov	r4, r0
   d6e46:	4689      	mov	r9, r1
   d6e48:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d6e4a:	b14b      	cbz	r3, d6e60 <_ZN7FatFile4readEPvj+0x22>
   d6e4c:	7882      	ldrb	r2, [r0, #2]
   d6e4e:	07d1      	lsls	r1, r2, #31
   d6e50:	d506      	bpl.n	d6e60 <_ZN7FatFile4readEPvj+0x22>
   d6e52:	e00c      	b.n	d6e6e <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6e54:	465a      	mov	r2, fp
   d6e56:	6921      	ldr	r1, [r4, #16]
   d6e58:	f000 fc6b 	bl	d7732 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d6e5c:	2800      	cmp	r0, #0
   d6e5e:	da3d      	bge.n	d6edc <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d6e60:	7863      	ldrb	r3, [r4, #1]
   d6e62:	f043 0302 	orr.w	r3, r3, #2
   d6e66:	7063      	strb	r3, [r4, #1]
  return -1;
   d6e68:	f04f 30ff 	mov.w	r0, #4294967295
   d6e6c:	e097      	b.n	d6f9e <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d6e6e:	071a      	lsls	r2, r3, #28
   d6e70:	d503      	bpl.n	d6e7a <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d6e72:	69e3      	ldr	r3, [r4, #28]
   d6e74:	6962      	ldr	r2, [r4, #20]
   d6e76:	1a9b      	subs	r3, r3, r2
   d6e78:	e007      	b.n	d6e8a <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d6e7a:	069a      	lsls	r2, r3, #26
   d6e7c:	d508      	bpl.n	d6e90 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6e7e:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d6e80:	891a      	ldrh	r2, [r3, #8]
   d6e82:	6963      	ldr	r3, [r4, #20]
   d6e84:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d6e88:	b29b      	uxth	r3, r3
   d6e8a:	429d      	cmp	r5, r3
   d6e8c:	bf28      	it	cs
   d6e8e:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d6e90:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d6e92:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6e96:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6e9a:	2e00      	cmp	r6, #0
   d6e9c:	d035      	beq.n	d6f0a <_ZN7FatFile4readEPvj+0xcc>
   d6e9e:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6ea0:	6963      	ldr	r3, [r4, #20]
   d6ea2:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d6ea4:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6ea8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d6eac:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d6eb0:	d002      	beq.n	d6eb8 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d6eb2:	6a03      	ldr	r3, [r0, #32]
   d6eb4:	4419      	add	r1, r3
   d6eb6:	e01d      	b.n	d6ef4 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6eb8:	f890 8005 	ldrb.w	r8, [r0, #5]
   d6ebc:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d6ec0:	f1ba 0f00 	cmp.w	sl, #0
   d6ec4:	d110      	bne.n	d6ee8 <_ZN7FatFile4readEPvj+0xaa>
   d6ec6:	f1b8 0f00 	cmp.w	r8, #0
   d6eca:	d10d      	bne.n	d6ee8 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d6ecc:	2b00      	cmp	r3, #0
   d6ece:	d1c1      	bne.n	d6e54 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6ed0:	0653      	lsls	r3, r2, #25
   d6ed2:	bf4c      	ite	mi
   d6ed4:	6a03      	ldrmi	r3, [r0, #32]
   d6ed6:	6a23      	ldrpl	r3, [r4, #32]
   d6ed8:	6123      	str	r3, [r4, #16]
   d6eda:	e005      	b.n	d6ee8 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d6edc:	d104      	bne.n	d6ee8 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d6ede:	7823      	ldrb	r3, [r4, #0]
   d6ee0:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6ee4:	d111      	bne.n	d6f0a <_ZN7FatFile4readEPvj+0xcc>
   d6ee6:	e7bb      	b.n	d6e60 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6ee8:	6921      	ldr	r1, [r4, #16]
   d6eea:	68a0      	ldr	r0, [r4, #8]
   d6eec:	f000 fc1b 	bl	d7726 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6ef0:	eb08 0100 	add.w	r1, r8, r0
   d6ef4:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6ef6:	f1ba 0f00 	cmp.w	sl, #0
   d6efa:	d135      	bne.n	d6f68 <_ZN7FatFile4readEPvj+0x12a>
   d6efc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6f00:	d332      	bcc.n	d6f68 <_ZN7FatFile4readEPvj+0x12a>
   d6f02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6f04:	4299      	cmp	r1, r3
   d6f06:	d102      	bne.n	d6f0e <_ZN7FatFile4readEPvj+0xd0>
   d6f08:	e02e      	b.n	d6f68 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d6f0a:	1ba8      	subs	r0, r5, r6
   d6f0c:	e047      	b.n	d6f9e <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d6f0e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6f12:	d31b      	bcc.n	d6f4c <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d6f14:	7822      	ldrb	r2, [r4, #0]
   d6f16:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d6f18:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d6f1c:	d406      	bmi.n	d6f2c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d6f1e:	7902      	ldrb	r2, [r0, #4]
   d6f20:	ebc8 0202 	rsb	r2, r8, r2
   d6f24:	b2d2      	uxtb	r2, r2
   d6f26:	4592      	cmp	sl, r2
   d6f28:	bf28      	it	cs
   d6f2a:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6f2c:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d6f2e:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6f32:	d207      	bcs.n	d6f44 <_ZN7FatFile4readEPvj+0x106>
   d6f34:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d6f36:	4653      	mov	r3, sl
   d6f38:	464a      	mov	r2, r9
   d6f3a:	6800      	ldr	r0, [r0, #0]
   d6f3c:	f000 ff0a 	bl	d7d54 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6f40:	b960      	cbnz	r0, d6f5c <_ZN7FatFile4readEPvj+0x11e>
   d6f42:	e78d      	b.n	d6e60 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6f44:	4453      	add	r3, sl
   d6f46:	4299      	cmp	r1, r3
   d6f48:	d321      	bcc.n	d6f8e <_ZN7FatFile4readEPvj+0x150>
   d6f4a:	e7f3      	b.n	d6f34 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6f4c:	464a      	mov	r2, r9
   d6f4e:	6800      	ldr	r0, [r0, #0]
   d6f50:	f000 feb8 	bl	d7cc4 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6f54:	2800      	cmp	r0, #0
   d6f56:	d083      	beq.n	d6e60 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d6f58:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d6f5c:	6963      	ldr	r3, [r4, #20]
   d6f5e:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d6f60:	44b9      	add	r9, r7
    m_curPosition += n;
   d6f62:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6f64:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6f66:	e798      	b.n	d6e9a <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6f68:	2200      	movs	r2, #0
   d6f6a:	3024      	adds	r0, #36	; 0x24
   d6f6c:	f000 fbb7 	bl	d76de <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d6f70:	2800      	cmp	r0, #0
   d6f72:	f43f af75 	beq.w	d6e60 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d6f76:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d6f7a:	42b7      	cmp	r7, r6
   d6f7c:	bf28      	it	cs
   d6f7e:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d6f80:	eb00 010a 	add.w	r1, r0, sl
   d6f84:	463a      	mov	r2, r7
   d6f86:	4648      	mov	r0, r9
   d6f88:	f009 fecb 	bl	e0d22 <memcpy>
   d6f8c:	e7e6      	b.n	d6f5c <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6f8e:	3024      	adds	r0, #36	; 0x24
   d6f90:	9101      	str	r1, [sp, #4]
   d6f92:	f000 fb7d 	bl	d7690 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d6f96:	9901      	ldr	r1, [sp, #4]
   d6f98:	2800      	cmp	r0, #0
   d6f9a:	d1cb      	bne.n	d6f34 <_ZN7FatFile4readEPvj+0xf6>
   d6f9c:	e760      	b.n	d6e60 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d6f9e:	b003      	add	sp, #12
   d6fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6fa4 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d6fa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d6fa6:	2201      	movs	r2, #1
   d6fa8:	f10d 0107 	add.w	r1, sp, #7
   d6fac:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d6fae:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d6fb0:	6905      	ldr	r5, [r0, #16]
   d6fb2:	f7ff ff44 	bl	d6e3e <_ZN7FatFile4readEPvj>
   d6fb6:	2801      	cmp	r0, #1
   d6fb8:	bf05      	ittet	eq
   d6fba:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d6fbe:	6166      	streq	r6, [r4, #20]
   d6fc0:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d6fc4:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d6fc6:	b002      	add	sp, #8
   d6fc8:	bd70      	pop	{r4, r5, r6, pc}

000d6fca <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6fca:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6fcc:	6943      	ldr	r3, [r0, #20]
   d6fce:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6fd2:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d6fd4:	b105      	cbz	r5, d6fd8 <_ZN7FatFile12readDirCacheEb+0xe>
   d6fd6:	b969      	cbnz	r1, d6ff4 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d6fd8:	2201      	movs	r2, #1
   d6fda:	f10d 0107 	add.w	r1, sp, #7
   d6fde:	4620      	mov	r0, r4
   d6fe0:	f7ff ff2d 	bl	d6e3e <_ZN7FatFile4readEPvj>
   d6fe4:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d6fe6:	2801      	cmp	r0, #1
   d6fe8:	d001      	beq.n	d6fee <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d6fea:	2000      	movs	r0, #0
   d6fec:	e008      	b.n	d7000 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d6fee:	6963      	ldr	r3, [r4, #20]
   d6ff0:	331f      	adds	r3, #31
   d6ff2:	e000      	b.n	d6ff6 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d6ff4:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6ff6:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d6ff8:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6ffa:	3030      	adds	r0, #48	; 0x30
   d6ffc:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d7000:	b003      	add	sp, #12
   d7002:	bd30      	pop	{r4, r5, pc}

000d7004 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d7004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7008:	460e      	mov	r6, r1
   d700a:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d700c:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d700e:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d7010:	2900      	cmp	r1, #0
   d7012:	d039      	beq.n	d7088 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d7014:	6945      	ldr	r5, [r0, #20]
   d7016:	42b5      	cmp	r5, r6
   d7018:	d03a      	beq.n	d7090 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d701a:	b90e      	cbnz	r6, d7020 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d701c:	6106      	str	r6, [r0, #16]
    goto done;
   d701e:	e031      	b.n	d7084 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d7020:	070b      	lsls	r3, r1, #28
   d7022:	d503      	bpl.n	d702c <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d7024:	69c3      	ldr	r3, [r0, #28]
   d7026:	429e      	cmp	r6, r3
   d7028:	d82e      	bhi.n	d7088 <_ZN7FatFile7seekSetEm+0x84>
   d702a:	e007      	b.n	d703c <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d702c:	0688      	lsls	r0, r1, #26
   d702e:	d505      	bpl.n	d703c <_ZN7FatFile7seekSetEm+0x38>
   d7030:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d7032:	891b      	ldrh	r3, [r3, #8]
   d7034:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d7038:	d826      	bhi.n	d7088 <_ZN7FatFile7seekSetEm+0x84>
   d703a:	e023      	b.n	d7084 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d703c:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d7040:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d7044:	1e6a      	subs	r2, r5, #1
   d7046:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d704a:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d704c:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d704e:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d7050:	429a      	cmp	r2, r3
   d7052:	d800      	bhi.n	d7056 <_ZN7FatFile7seekSetEm+0x52>
   d7054:	b94d      	cbnz	r5, d706a <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d7056:	064a      	lsls	r2, r1, #25
   d7058:	bf4c      	ite	mi
   d705a:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d705e:	6a22      	ldrpl	r2, [r4, #32]
   d7060:	6122      	str	r2, [r4, #16]
   d7062:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d7064:	f104 0810 	add.w	r8, r4, #16
   d7068:	e00a      	b.n	d7080 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d706a:	1a9b      	subs	r3, r3, r2
   d706c:	e7f9      	b.n	d7062 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d706e:	4642      	mov	r2, r8
   d7070:	6921      	ldr	r1, [r4, #16]
   d7072:	68a0      	ldr	r0, [r4, #8]
   d7074:	f000 fb5d 	bl	d7732 <_ZN9FatVolume6fatGetEmPm>
   d7078:	2800      	cmp	r0, #0
   d707a:	f105 35ff 	add.w	r5, r5, #4294967295
   d707e:	dd03      	ble.n	d7088 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d7080:	2d00      	cmp	r5, #0
   d7082:	d1f4      	bne.n	d706e <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d7084:	6166      	str	r6, [r4, #20]
   d7086:	e003      	b.n	d7090 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d7088:	6127      	str	r7, [r4, #16]
  return false;
   d708a:	2000      	movs	r0, #0
   d708c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d7090:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d7092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7096 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d7096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7098:	460f      	mov	r7, r1
   d709a:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d709c:	2100      	movs	r1, #0
   d709e:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d70a0:	4604      	mov	r4, r0
   d70a2:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d70a4:	f009 fe48 	bl	e0d38 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d70a8:	68b8      	ldr	r0, [r7, #8]
   d70aa:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d70ac:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d70b0:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d70b2:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d70b6:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d70b8:	6a3b      	ldr	r3, [r7, #32]
   d70ba:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d70bc:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d70be:	7acb      	ldrb	r3, [r1, #11]
   d70c0:	071d      	lsls	r5, r3, #28
   d70c2:	d44c      	bmi.n	d715e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d70c4:	1883      	adds	r3, r0, r2
   d70c6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d70ca:	f003 0317 	and.w	r3, r3, #23
   d70ce:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d70d0:	7ac9      	ldrb	r1, [r1, #11]
   d70d2:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d70d6:	bf04      	itt	eq
   d70d8:	f043 0308 	orreq.w	r3, r3, #8
   d70dc:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d70de:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d70e2:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d70e4:	f006 0303 	and.w	r3, r6, #3
   d70e8:	2b01      	cmp	r3, #1
   d70ea:	d009      	beq.n	d7100 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d70ec:	2b02      	cmp	r3, #2
   d70ee:	d005      	beq.n	d70fc <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d70f0:	2b00      	cmp	r3, #0
   d70f2:	d134      	bne.n	d715e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d70f4:	0571      	lsls	r1, r6, #21
   d70f6:	d432      	bmi.n	d715e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d70f8:	2301      	movs	r3, #1
   d70fa:	e002      	b.n	d7102 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d70fc:	2303      	movs	r3, #3
   d70fe:	e000      	b.n	d7102 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d7100:	2302      	movs	r3, #2
   d7102:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d7104:	78a1      	ldrb	r1, [r4, #2]
   d7106:	078b      	lsls	r3, r1, #30
   d7108:	d503      	bpl.n	d7112 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d710a:	7823      	ldrb	r3, [r4, #0]
   d710c:	f013 0f11 	tst.w	r3, #17
   d7110:	d125      	bne.n	d715e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d7112:	b24b      	sxtb	r3, r1
   d7114:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d7118:	f006 0108 	and.w	r1, r6, #8
   d711c:	bf14      	ite	ne
   d711e:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d7122:	2700      	moveq	r7, #0
   d7124:	4319      	orrs	r1, r3
   d7126:	4339      	orrs	r1, r7
   d7128:	70a1      	strb	r1, [r4, #2]
   d712a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d712c:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d712e:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d7130:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d7132:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d7136:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d713a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d713e:	d504      	bpl.n	d714a <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d7140:	b181      	cbz	r1, d7164 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d7142:	f000 fb96 	bl	d7872 <_ZN9FatVolume9freeChainEm>
   d7146:	b968      	cbnz	r0, d7164 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d7148:	e009      	b.n	d715e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d714a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d714c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d714e:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d7150:	0473      	lsls	r3, r6, #17
   d7152:	d50c      	bpl.n	d716e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d7154:	69e1      	ldr	r1, [r4, #28]
   d7156:	4620      	mov	r0, r4
   d7158:	f7ff ff54 	bl	d7004 <_ZN7FatFile7seekSetEm>
   d715c:	b938      	cbnz	r0, d716e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d715e:	2000      	movs	r0, #0
   d7160:	7020      	strb	r0, [r4, #0]
  return false;
   d7162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d7164:	78a3      	ldrb	r3, [r4, #2]
   d7166:	f043 0304 	orr.w	r3, r3, #4
   d716a:	70a3      	strb	r3, [r4, #2]
   d716c:	e7f0      	b.n	d7150 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d716e:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d7170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7172 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d7172:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d7176:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d7178:	4606      	mov	r6, r0
   d717a:	460d      	mov	r5, r1
   d717c:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d717e:	bb53      	cbnz	r3, d71d6 <_ZN7FatFile8openNextEPS_i+0x64>
   d7180:	780b      	ldrb	r3, [r1, #0]
   d7182:	f013 0f70 	tst.w	r3, #112	; 0x70
   d7186:	d026      	beq.n	d71d6 <_ZN7FatFile8openNextEPS_i+0x64>
   d7188:	694c      	ldr	r4, [r1, #20]
   d718a:	f014 041f 	ands.w	r4, r4, #31
   d718e:	d122      	bne.n	d71d6 <_ZN7FatFile8openNextEPS_i+0x64>
   d7190:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d7192:	2100      	movs	r1, #0
   d7194:	4628      	mov	r0, r5
   d7196:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d719a:	f7ff ff16 	bl	d6fca <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d719e:	b1d0      	cbz	r0, d71d6 <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d71a0:	7803      	ldrb	r3, [r0, #0]
   d71a2:	b1c3      	cbz	r3, d71d6 <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d71a4:	2b2e      	cmp	r3, #46	; 0x2e
   d71a6:	d101      	bne.n	d71ac <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d71a8:	2400      	movs	r4, #0
   d71aa:	e7f2      	b.n	d7192 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d71ac:	2be5      	cmp	r3, #229	; 0xe5
   d71ae:	d0fb      	beq.n	d71a8 <_ZN7FatFile8openNextEPS_i+0x36>
   d71b0:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d71b2:	f011 0f08 	tst.w	r1, #8
   d71b6:	d105      	bne.n	d71c4 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d71b8:	b17c      	cbz	r4, d71da <_ZN7FatFile8openNextEPS_i+0x68>
   d71ba:	f7ff f98d 	bl	d64d8 <_ZN7FatFile11lfnChecksumEPh>
   d71be:	4580      	cmp	r8, r0
   d71c0:	d109      	bne.n	d71d6 <_ZN7FatFile8openNextEPS_i+0x64>
   d71c2:	e00a      	b.n	d71da <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d71c4:	290f      	cmp	r1, #15
   d71c6:	d1ef      	bne.n	d71a8 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d71c8:	0659      	lsls	r1, r3, #25
   d71ca:	d5e2      	bpl.n	d7192 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d71cc:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d71d0:	f890 800d 	ldrb.w	r8, [r0, #13]
   d71d4:	e7dd      	b.n	d7192 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d71d6:	2000      	movs	r0, #0
   d71d8:	e007      	b.n	d71ea <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d71da:	9400      	str	r4, [sp, #0]
   d71dc:	463b      	mov	r3, r7
   d71de:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d71e2:	4629      	mov	r1, r5
   d71e4:	4630      	mov	r0, r6
   d71e6:	f7ff ff56 	bl	d7096 <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d71ea:	b003      	add	sp, #12
   d71ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d71f0 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d71f0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d71f2:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d71f4:	4604      	mov	r4, r0
  if (!isOpen()) {
   d71f6:	b90b      	cbnz	r3, d71fc <_ZN7FatFile4syncEv+0xc>
    return true;
   d71f8:	2001      	movs	r0, #1
   d71fa:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d71fc:	7883      	ldrb	r3, [r0, #2]
   d71fe:	075a      	lsls	r2, r3, #29
   d7200:	d523      	bpl.n	d724a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d7202:	2101      	movs	r1, #1
   d7204:	f7ff fdca 	bl	d6d9c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d7208:	4605      	mov	r5, r0
   d720a:	b928      	cbnz	r0, d7218 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d720c:	7863      	ldrb	r3, [r4, #1]
   d720e:	f043 0301 	orr.w	r3, r3, #1
   d7212:	7063      	strb	r3, [r4, #1]
  return false;
   d7214:	2000      	movs	r0, #0
   d7216:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d7218:	7803      	ldrb	r3, [r0, #0]
   d721a:	2be5      	cmp	r3, #229	; 0xe5
   d721c:	d0f6      	beq.n	d720c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d721e:	7823      	ldrb	r3, [r4, #0]
   d7220:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d7222:	bf44      	itt	mi
   d7224:	69e3      	ldrmi	r3, [r4, #28]
   d7226:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d7228:	8c23      	ldrh	r3, [r4, #32]
   d722a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d722c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d722e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d7230:	4b09      	ldr	r3, [pc, #36]	; (d7258 <_ZN7FatFile4syncEv+0x68>)
   d7232:	681b      	ldr	r3, [r3, #0]
   d7234:	b12b      	cbz	r3, d7242 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d7236:	f100 0116 	add.w	r1, r0, #22
   d723a:	3018      	adds	r0, #24
   d723c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d723e:	8b2b      	ldrh	r3, [r5, #24]
   d7240:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d7242:	78a3      	ldrb	r3, [r4, #2]
   d7244:	f023 0304 	bic.w	r3, r3, #4
   d7248:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d724a:	68a0      	ldr	r0, [r4, #8]
   d724c:	f7ff f937 	bl	d64be <_ZN9FatVolume9cacheSyncEv>
   d7250:	2800      	cmp	r0, #0
   d7252:	d0db      	beq.n	d720c <_ZN7FatFile4syncEv+0x1c>
   d7254:	e7d0      	b.n	d71f8 <_ZN7FatFile4syncEv+0x8>
   d7256:	bf00      	nop
   d7258:	2003e09c 	.word	0x2003e09c

000d725c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d725c:	b510      	push	{r4, lr}
   d725e:	4604      	mov	r4, r0
  bool rtn = sync();
   d7260:	f7ff ffc6 	bl	d71f0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d7264:	2300      	movs	r3, #0
   d7266:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d7268:	bd10      	pop	{r4, pc}

000d726a <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d726a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d726c:	b093      	sub	sp, #76	; 0x4c
   d726e:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7270:	2300      	movs	r3, #0
   d7272:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d7276:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d727a:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d727c:	9201      	str	r2, [sp, #4]
   d727e:	4606      	mov	r6, r0
   d7280:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7282:	b10b      	cbz	r3, d7288 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d7284:	2000      	movs	r0, #0
   d7286:	e03d      	b.n	d7304 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7288:	780b      	ldrb	r3, [r1, #0]
   d728a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d728e:	d0f9      	beq.n	d7284 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d7290:	7813      	ldrb	r3, [r2, #0]
   d7292:	2b2f      	cmp	r3, #47	; 0x2f
   d7294:	d112      	bne.n	d72bc <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d7296:	9b01      	ldr	r3, [sp, #4]
   d7298:	781a      	ldrb	r2, [r3, #0]
   d729a:	2a2f      	cmp	r2, #47	; 0x2f
   d729c:	d102      	bne.n	d72a4 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d729e:	3301      	adds	r3, #1
   d72a0:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d72a2:	e7f8      	b.n	d7296 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d72a4:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d72a6:	b91a      	cbnz	r2, d72b0 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d72a8:	4630      	mov	r0, r6
   d72aa:	f7ff fdb0 	bl	d6e0e <_ZN7FatFile8openRootEP9FatVolume>
   d72ae:	e029      	b.n	d7304 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d72b0:	a809      	add	r0, sp, #36	; 0x24
   d72b2:	f7ff fdac 	bl	d6e0e <_ZN7FatFile8openRootEP9FatVolume>
   d72b6:	2800      	cmp	r0, #0
   d72b8:	d0e4      	beq.n	d7284 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d72ba:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d72bc:	aa01      	add	r2, sp, #4
   d72be:	a903      	add	r1, sp, #12
   d72c0:	9801      	ldr	r0, [sp, #4]
   d72c2:	f7ff f9a9 	bl	d6618 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d72c6:	2800      	cmp	r0, #0
   d72c8:	d0dc      	beq.n	d7284 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d72ca:	9b01      	ldr	r3, [sp, #4]
   d72cc:	781b      	ldrb	r3, [r3, #0]
   d72ce:	b19b      	cbz	r3, d72f8 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d72d0:	2300      	movs	r3, #0
   d72d2:	aa03      	add	r2, sp, #12
   d72d4:	4621      	mov	r1, r4
   d72d6:	4630      	mov	r0, r6
   d72d8:	f7ff fb42 	bl	d6960 <_ZN7FatFile4openEPS_P7fname_ti>
   d72dc:	2800      	cmp	r0, #0
   d72de:	d0d1      	beq.n	d7284 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d72e0:	4635      	mov	r5, r6
   d72e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d72e4:	ac09      	add	r4, sp, #36	; 0x24
   d72e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d72e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d72ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d72ec:	682b      	ldr	r3, [r5, #0]
   d72ee:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d72f0:	4630      	mov	r0, r6
   d72f2:	f7ff ffb3 	bl	d725c <_ZN7FatFile5closeEv>
   d72f6:	e7e0      	b.n	d72ba <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d72f8:	463b      	mov	r3, r7
   d72fa:	aa03      	add	r2, sp, #12
   d72fc:	4621      	mov	r1, r4
   d72fe:	4630      	mov	r0, r6
   d7300:	f7ff fb2e 	bl	d6960 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d7304:	b013      	add	sp, #76	; 0x4c
   d7306:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7308 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d7308:	b500      	push	{lr}
   d730a:	b08b      	sub	sp, #44	; 0x2c
   d730c:	2300      	movs	r3, #0
   d730e:	f88d 3004 	strb.w	r3, [sp, #4]
   d7312:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d7316:	460a      	mov	r2, r1
   d7318:	2301      	movs	r3, #1
   d731a:	4601      	mov	r1, r0
   d731c:	a801      	add	r0, sp, #4
   d731e:	f7ff ffa4 	bl	d726a <_ZN7FatFile4openEPS_PKci>
   d7322:	b110      	cbz	r0, d732a <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d7324:	a801      	add	r0, sp, #4
   d7326:	f7ff fa63 	bl	d67f0 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d732a:	b00b      	add	sp, #44	; 0x2c
   d732c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7330 <_ZN7FatFile5mkdirEPS_P7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d7330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  dir_t dot;
  dir_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
   d7334:	780b      	ldrb	r3, [r1, #0]
   d7336:	f013 0f70 	tst.w	r3, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d733a:	b088      	sub	sp, #32
   d733c:	4604      	mov	r4, r0
   d733e:	460f      	mov	r7, r1
  uint32_t block;
  dir_t dot;
  dir_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
   d7340:	d01c      	beq.n	d737c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
   d7342:	f640 2302 	movw	r3, #2562	; 0xa02
   d7346:	f7ff fb0b 	bl	d6960 <_ZN7FatFile4openEPS_P7fname_ti>
   d734a:	b1b8      	cbz	r0, d737c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = F_READ;
   d734c:	2601      	movs	r6, #1
  m_attr = FILE_ATTR_SUBDIR;
   d734e:	2510      	movs	r5, #16
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = F_READ;
   d7350:	70a6      	strb	r6, [r4, #2]
  m_attr = FILE_ATTR_SUBDIR;
   d7352:	7025      	strb	r5, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
   d7354:	4620      	mov	r0, r4
   d7356:	f7ff fce1 	bl	d6d1c <_ZN7FatFile13addDirClusterEv>
   d735a:	b178      	cbz	r0, d737c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
   d735c:	6923      	ldr	r3, [r4, #16]
   d735e:	6223      	str	r3, [r4, #32]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d7360:	2100      	movs	r1, #0
   d7362:	4620      	mov	r0, r4
   d7364:	f7ff fe4e 	bl	d7004 <_ZN7FatFile7seekSetEm>
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
   d7368:	4620      	mov	r0, r4
   d736a:	f7ff ff41 	bl	d71f0 <_ZN7FatFile4syncEv>
   d736e:	b128      	cbz	r0, d737c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d7370:	4631      	mov	r1, r6
   d7372:	4620      	mov	r0, r4
   d7374:	f7ff fd12 	bl	d6d9c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d7378:	4603      	mov	r3, r0
   d737a:	b908      	cbnz	r0, d7380 <_ZN7FatFile5mkdirEPS_P7fname_t+0x50>
  memcpy(&pc->dir[1], &dot, sizeof(dot));
  // write first block
  return m_vol->cacheSync();

fail:
  return false;
   d737c:	2000      	movs	r0, #0
   d737e:	e051      	b.n	d7424 <_ZN7FatFile5mkdirEPS_P7fname_t+0xf4>
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = DIR_ATT_DIRECTORY;
   d7380:	72c5      	strb	r5, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
   d7382:	4602      	mov	r2, r0
   d7384:	466e      	mov	r6, sp
   d7386:	f100 0c20 	add.w	ip, r0, #32
   d738a:	466d      	mov	r5, sp
   d738c:	6810      	ldr	r0, [r2, #0]
   d738e:	6851      	ldr	r1, [r2, #4]
   d7390:	46b6      	mov	lr, r6
   d7392:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d7396:	3208      	adds	r2, #8
   d7398:	4562      	cmp	r2, ip
   d739a:	4676      	mov	r6, lr
   d739c:	d1f6      	bne.n	d738c <_ZN7FatFile5mkdirEPS_P7fname_t+0x5c>
   d739e:	f8b3 8014 	ldrh.w	r8, [r3, #20]
   d73a2:	8b5e      	ldrh	r6, [r3, #26]
  dot.name[0] = '.';
   d73a4:	232e      	movs	r3, #46	; 0x2e
   d73a6:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
   d73aa:	2120      	movs	r1, #32
  // change directory entry  attribute
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
   d73ac:	2300      	movs	r3, #0
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
   d73ae:	18ea      	adds	r2, r5, r3
   d73b0:	3301      	adds	r3, #1
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
   d73b2:	2b0a      	cmp	r3, #10
    dot.name[i] = ' ';
   d73b4:	7051      	strb	r1, [r2, #1]
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
   d73b6:	d1fa      	bne.n	d73ae <_ZN7FatFile5mkdirEPS_P7fname_t+0x7e>
    dot.name[i] = ' ';
  }

  // cache block for '.'  and '..'
  block = m_vol->clusterFirstBlock(m_firstCluster);
   d73b8:	6a21      	ldr	r1, [r4, #32]
   d73ba:	68a0      	ldr	r0, [r4, #8]
   d73bc:	f000 f9b3 	bl	d7726 <_ZNK9FatVolume17clusterFirstBlockEm>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d73c0:	68a3      	ldr	r3, [r4, #8]
   d73c2:	4601      	mov	r1, r0
   d73c4:	2201      	movs	r2, #1
   d73c6:	f103 0024 	add.w	r0, r3, #36	; 0x24
   d73ca:	f000 f988 	bl	d76de <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
   d73ce:	4603      	mov	r3, r0
   d73d0:	2800      	cmp	r0, #0
   d73d2:	d0d3      	beq.n	d737c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to block
  memcpy(&pc->dir[0], &dot, sizeof(dot));
   d73d4:	f8ad 601a 	strh.w	r6, [sp, #26]
   d73d8:	f8ad 8014 	strh.w	r8, [sp, #20]
   d73dc:	46ae      	mov	lr, r5
   d73de:	4606      	mov	r6, r0
   d73e0:	f10d 0c20 	add.w	ip, sp, #32
   d73e4:	4672      	mov	r2, lr
   d73e6:	ca03      	ldmia	r2!, {r0, r1}
   d73e8:	4562      	cmp	r2, ip
   d73ea:	6030      	str	r0, [r6, #0]
   d73ec:	6071      	str	r1, [r6, #4]
   d73ee:	4696      	mov	lr, r2
   d73f0:	f106 0608 	add.w	r6, r6, #8
   d73f4:	d1f6      	bne.n	d73e4 <_ZN7FatFile5mkdirEPS_P7fname_t+0xb4>
  // make entry for '..'
  dot.name[1] = '.';
   d73f6:	222e      	movs	r2, #46	; 0x2e
   d73f8:	f88d 2001 	strb.w	r2, [sp, #1]
  dot.firstClusterLow = parent->m_firstCluster & 0XFFFF;
   d73fc:	6a3a      	ldr	r2, [r7, #32]
  dot.firstClusterHigh = parent->m_firstCluster >> 16;
  // copy '..' to block
  memcpy(&pc->dir[1], &dot, sizeof(dot));
   d73fe:	f8ad 201a 	strh.w	r2, [sp, #26]
   d7402:	0c11      	lsrs	r1, r2, #16
   d7404:	f8ad 1014 	strh.w	r1, [sp, #20]
   d7408:	3320      	adds	r3, #32
   d740a:	ae08      	add	r6, sp, #32
   d740c:	462a      	mov	r2, r5
   d740e:	ca03      	ldmia	r2!, {r0, r1}
   d7410:	42b2      	cmp	r2, r6
   d7412:	6018      	str	r0, [r3, #0]
   d7414:	6059      	str	r1, [r3, #4]
   d7416:	4615      	mov	r5, r2
   d7418:	f103 0308 	add.w	r3, r3, #8
   d741c:	d1f6      	bne.n	d740c <_ZN7FatFile5mkdirEPS_P7fname_t+0xdc>
  // write first block
  return m_vol->cacheSync();
   d741e:	68a0      	ldr	r0, [r4, #8]
   d7420:	f7ff f84d 	bl	d64be <_ZN9FatVolume9cacheSyncEv>

fail:
  return false;
}
   d7424:	b008      	add	sp, #32
   d7426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d742a <_ZN7FatFile5mkdirEPS_PKcb>:
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
  pos->cluster = m_curCluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d742a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d742c:	b093      	sub	sp, #76	; 0x4c
   d742e:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7430:	2300      	movs	r3, #0
   d7432:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d7436:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
   d743a:	7803      	ldrb	r3, [r0, #0]
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
  pos->cluster = m_curCluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d743c:	9201      	str	r2, [sp, #4]
   d743e:	4606      	mov	r6, r0
   d7440:	460c      	mov	r4, r1
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
   d7442:	2b00      	cmp	r3, #0
   d7444:	d13e      	bne.n	d74c4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
   d7446:	780b      	ldrb	r3, [r1, #0]
   d7448:	f013 0f70 	tst.w	r3, #112	; 0x70
   d744c:	d03a      	beq.n	d74c4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d744e:	7813      	ldrb	r3, [r2, #0]
   d7450:	2b2f      	cmp	r3, #47	; 0x2f
   d7452:	d10c      	bne.n	d746e <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
   d7454:	9b01      	ldr	r3, [sp, #4]
   d7456:	781a      	ldrb	r2, [r3, #0]
   d7458:	2a2f      	cmp	r2, #47	; 0x2f
   d745a:	d102      	bne.n	d7462 <_ZN7FatFile5mkdirEPS_PKcb+0x38>
      path++;
   d745c:	3301      	adds	r3, #1
   d745e:	9301      	str	r3, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d7460:	e7f8      	b.n	d7454 <_ZN7FatFile5mkdirEPS_PKcb+0x2a>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
   d7462:	68a1      	ldr	r1, [r4, #8]
   d7464:	a809      	add	r0, sp, #36	; 0x24
   d7466:	f7ff fcd2 	bl	d6e0e <_ZN7FatFile8openRootEP9FatVolume>
   d746a:	b358      	cbz	r0, d74c4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
   d746c:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d746e:	aa01      	add	r2, sp, #4
   d7470:	a903      	add	r1, sp, #12
   d7472:	9801      	ldr	r0, [sp, #4]
   d7474:	f7ff f8d0 	bl	d6618 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d7478:	b320      	cbz	r0, d74c4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
   d747a:	9b01      	ldr	r3, [sp, #4]
   d747c:	781b      	ldrb	r3, [r3, #0]
   d747e:	b1db      	cbz	r3, d74b8 <_ZN7FatFile5mkdirEPS_PKcb+0x8e>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
   d7480:	2300      	movs	r3, #0
   d7482:	aa03      	add	r2, sp, #12
   d7484:	4621      	mov	r1, r4
   d7486:	4630      	mov	r0, r6
   d7488:	f7ff fa6a 	bl	d6960 <_ZN7FatFile4openEPS_P7fname_ti>
   d748c:	b158      	cbz	r0, d74a6 <_ZN7FatFile5mkdirEPS_PKcb+0x7c>
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
   d748e:	4635      	mov	r5, r6
   d7490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7492:	ac09      	add	r4, sp, #36	; 0x24
   d7494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d749a:	682b      	ldr	r3, [r5, #0]
   d749c:	6023      	str	r3, [r4, #0]
    parent = &tmpDir;
    close();
   d749e:	4630      	mov	r0, r6
   d74a0:	f7ff fedc 	bl	d725c <_ZN7FatFile5closeEv>
   d74a4:	e7e2      	b.n	d746c <_ZN7FatFile5mkdirEPS_PKcb+0x42>
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
   d74a6:	b16f      	cbz	r7, d74c4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
   d74a8:	aa03      	add	r2, sp, #12
   d74aa:	4621      	mov	r1, r4
   d74ac:	4630      	mov	r0, r6
   d74ae:	f7ff ff3f 	bl	d7330 <_ZN7FatFile5mkdirEPS_P7fname_t>
   d74b2:	2800      	cmp	r0, #0
   d74b4:	d1eb      	bne.n	d748e <_ZN7FatFile5mkdirEPS_PKcb+0x64>
   d74b6:	e005      	b.n	d74c4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
   d74b8:	aa03      	add	r2, sp, #12
   d74ba:	4621      	mov	r1, r4
   d74bc:	4630      	mov	r0, r6
   d74be:	f7ff ff37 	bl	d7330 <_ZN7FatFile5mkdirEPS_P7fname_t>
   d74c2:	e000      	b.n	d74c6 <_ZN7FatFile5mkdirEPS_PKcb+0x9c>

fail:
  return false;
   d74c4:	2000      	movs	r0, #0
}
   d74c6:	b013      	add	sp, #76	; 0x4c
   d74c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d74cc <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d74cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d74d0:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d74d2:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d74d4:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d74d6:	4604      	mov	r4, r0
   d74d8:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d74da:	d508      	bpl.n	d74ee <_ZN7FatFile5writeEPKvj+0x22>
   d74dc:	7883      	ldrb	r3, [r0, #2]
   d74de:	079a      	lsls	r2, r3, #30
   d74e0:	d505      	bpl.n	d74ee <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d74e2:	071b      	lsls	r3, r3, #28
   d74e4:	d50b      	bpl.n	d74fe <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d74e6:	69e1      	ldr	r1, [r4, #28]
   d74e8:	f7ff fd8c 	bl	d7004 <_ZN7FatFile7seekSetEm>
   d74ec:	b938      	cbnz	r0, d74fe <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d74ee:	7863      	ldrb	r3, [r4, #1]
   d74f0:	f043 0301 	orr.w	r3, r3, #1
   d74f4:	7063      	strb	r3, [r4, #1]
  return -1;
   d74f6:	f04f 30ff 	mov.w	r0, #4294967295
   d74fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d74fe:	6963      	ldr	r3, [r4, #20]
   d7500:	43db      	mvns	r3, r3
   d7502:	4598      	cmp	r8, r3
   d7504:	d8f3      	bhi.n	d74ee <_ZN7FatFile5writeEPKvj+0x22>
   d7506:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7508:	f04f 0a00 	mov.w	sl, #0
   d750c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d750e:	2e00      	cmp	r6, #0
   d7510:	f000 8081 	beq.w	d7616 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d7514:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d7516:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d7518:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d751c:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d7520:	d11c      	bne.n	d755c <_ZN7FatFile5writeEPKvj+0x90>
   d7522:	b9df      	cbnz	r7, d755c <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d7524:	6921      	ldr	r1, [r4, #16]
   d7526:	b171      	cbz	r1, d7546 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7528:	f104 0210 	add.w	r2, r4, #16
   d752c:	f000 f901 	bl	d7732 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d7530:	2800      	cmp	r0, #0
   d7532:	dbdc      	blt.n	d74ee <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d7534:	f040 808e 	bne.w	d7654 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d7538:	4620      	mov	r0, r4
   d753a:	f7ff fbe4 	bl	d6d06 <_ZN7FatFile10addClusterEv>
   d753e:	2800      	cmp	r0, #0
   d7540:	f040 8088 	bne.w	d7654 <_ZN7FatFile5writeEPKvj+0x188>
   d7544:	e7d3      	b.n	d74ee <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d7546:	6a23      	ldr	r3, [r4, #32]
   d7548:	b93b      	cbnz	r3, d755a <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d754a:	4620      	mov	r0, r4
   d754c:	f7ff fbdb 	bl	d6d06 <_ZN7FatFile10addClusterEv>
   d7550:	2800      	cmp	r0, #0
   d7552:	d0cc      	beq.n	d74ee <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d7554:	6923      	ldr	r3, [r4, #16]
   d7556:	6223      	str	r3, [r4, #32]
   d7558:	e000      	b.n	d755c <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d755a:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d755c:	6921      	ldr	r1, [r4, #16]
   d755e:	68a0      	ldr	r0, [r4, #8]
   d7560:	f000 f8e1 	bl	d7726 <_ZNK9FatVolume17clusterFirstBlockEm>
   d7564:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d7566:	b917      	cbnz	r7, d756e <_ZN7FatFile5writeEPKvj+0xa2>
   d7568:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d756c:	d221      	bcs.n	d75b2 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d756e:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d7572:	42b5      	cmp	r5, r6
   d7574:	bf28      	it	cs
   d7576:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d7578:	b937      	cbnz	r7, d7588 <_ZN7FatFile5writeEPKvj+0xbc>
   d757a:	6963      	ldr	r3, [r4, #20]
   d757c:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d757e:	4293      	cmp	r3, r2
   d7580:	bf34      	ite	cc
   d7582:	2201      	movcc	r2, #1
   d7584:	2205      	movcs	r2, #5
   d7586:	e000      	b.n	d758a <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d7588:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d758a:	68a0      	ldr	r0, [r4, #8]
   d758c:	3024      	adds	r0, #36	; 0x24
   d758e:	f000 f8a6 	bl	d76de <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d7592:	2800      	cmp	r0, #0
   d7594:	d0ab      	beq.n	d74ee <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d7596:	4438      	add	r0, r7
   d7598:	462a      	mov	r2, r5
   d759a:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d759c:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d759e:	f009 fbc0 	bl	e0d22 <memcpy>
      if (512 == (n + blockOffset)) {
   d75a2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d75a6:	d130      	bne.n	d760a <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d75a8:	68a0      	ldr	r0, [r4, #8]
   d75aa:	3024      	adds	r0, #36	; 0x24
   d75ac:	f000 f870 	bl	d7690 <_ZN8FatCache4syncEv>
   d75b0:	e017      	b.n	d75e2 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d75b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d75b6:	68a0      	ldr	r0, [r4, #8]
   d75b8:	d315      	bcc.n	d75e6 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d75ba:	7902      	ldrb	r2, [r0, #4]
   d75bc:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d75be:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d75c0:	b2d2      	uxtb	r2, r2
   d75c2:	4293      	cmp	r3, r2
   d75c4:	bf28      	it	cs
   d75c6:	4613      	movcs	r3, r2
   d75c8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d75ca:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d75cc:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d75d0:	d302      	bcc.n	d75d8 <_ZN7FatFile5writeEPKvj+0x10c>
   d75d2:	441a      	add	r2, r3
   d75d4:	4291      	cmp	r1, r2
   d75d6:	d337      	bcc.n	d7648 <_ZN7FatFile5writeEPKvj+0x17c>
   d75d8:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d75da:	464a      	mov	r2, r9
   d75dc:	6838      	ldr	r0, [r7, #0]
   d75de:	f000 fc6d 	bl	d7ebc <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d75e2:	b990      	cbnz	r0, d760a <_ZN7FatFile5writeEPKvj+0x13e>
   d75e4:	e783      	b.n	d74ee <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d75e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d75e8:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d75ea:	bf02      	ittt	eq
   d75ec:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d75f0:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d75f4:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d75f6:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d75f8:	464a      	mov	r2, r9
   d75fa:	6818      	ldr	r0, [r3, #0]
   d75fc:	f000 fbec 	bl	d7dd8 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d7600:	2800      	cmp	r0, #0
   d7602:	f43f af74 	beq.w	d74ee <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d7606:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d760a:	6963      	ldr	r3, [r4, #20]
   d760c:	442b      	add	r3, r5
   d760e:	6163      	str	r3, [r4, #20]
    src += n;
   d7610:	44a9      	add	r9, r5
    nToWrite -= n;
   d7612:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d7614:	e77a      	b.n	d750c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d7616:	69e2      	ldr	r2, [r4, #28]
   d7618:	4293      	cmp	r3, r2
   d761a:	d901      	bls.n	d7620 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d761c:	61e3      	str	r3, [r4, #28]
   d761e:	e002      	b.n	d7626 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d7620:	4b0f      	ldr	r3, [pc, #60]	; (d7660 <_ZN7FatFile5writeEPKvj+0x194>)
   d7622:	681b      	ldr	r3, [r3, #0]
   d7624:	b11b      	cbz	r3, d762e <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d7626:	78a3      	ldrb	r3, [r4, #2]
   d7628:	f043 0304 	orr.w	r3, r3, #4
   d762c:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d762e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d7632:	2b00      	cmp	r3, #0
   d7634:	db02      	blt.n	d763c <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d7636:	4640      	mov	r0, r8
   d7638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d763c:	4620      	mov	r0, r4
   d763e:	f7ff fdd7 	bl	d71f0 <_ZN7FatFile4syncEv>
   d7642:	2800      	cmp	r0, #0
   d7644:	d1f7      	bne.n	d7636 <_ZN7FatFile5writeEPKvj+0x16a>
   d7646:	e752      	b.n	d74ee <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7648:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d764c:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7650:	62c2      	str	r2, [r0, #44]	; 0x2c
   d7652:	e7c1      	b.n	d75d8 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7654:	6921      	ldr	r1, [r4, #16]
   d7656:	68a0      	ldr	r0, [r4, #8]
   d7658:	f000 f865 	bl	d7726 <_ZNK9FatVolume17clusterFirstBlockEm>
   d765c:	4601      	mov	r1, r0
   d765e:	e783      	b.n	d7568 <_ZN7FatFile5writeEPKvj+0x9c>
   d7660:	2003e09c 	.word	0x2003e09c

000d7664 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d7664:	f003 bad4 	b.w	dac10 <HAL_Pin_Map>

000d7668 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7668:	b570      	push	{r4, r5, r6, lr}
   d766a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d766c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d766e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7670:	b149      	cbz	r1, d7686 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7672:	f00a fb2f 	bl	e1cd4 <strlen>
   d7676:	682b      	ldr	r3, [r5, #0]
   d7678:	4602      	mov	r2, r0
   d767a:	4621      	mov	r1, r4
   d767c:	4628      	mov	r0, r5
   d767e:	68db      	ldr	r3, [r3, #12]
    }
   d7680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7684:	4718      	bx	r3
    }
   d7686:	bd70      	pop	{r4, r5, r6, pc}

000d7688 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d7688:	f003 bac2 	b.w	dac10 <HAL_Pin_Map>

000d768c <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d768c:	f003 bac0 	b.w	dac10 <HAL_Pin_Map>

000d7690 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7690:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d7692:	7803      	ldrb	r3, [r0, #0]
   d7694:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7696:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d7698:	d51e      	bpl.n	d76d8 <_ZN8FatCache4syncEv+0x48>
   d769a:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d769c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d769e:	f100 060c 	add.w	r6, r0, #12
   d76a2:	4632      	mov	r2, r6
   d76a4:	6818      	ldr	r0, [r3, #0]
   d76a6:	f000 fb97 	bl	d7dd8 <_ZN9SdSpiCard10writeBlockEmPKh>
   d76aa:	4605      	mov	r5, r0
   d76ac:	b908      	cbnz	r0, d76b2 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d76ae:	2500      	movs	r5, #0
   d76b0:	e013      	b.n	d76da <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d76b2:	7823      	ldrb	r3, [r4, #0]
   d76b4:	079b      	lsls	r3, r3, #30
   d76b6:	d404      	bmi.n	d76c2 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d76b8:	7823      	ldrb	r3, [r4, #0]
   d76ba:	f023 0301 	bic.w	r3, r3, #1
   d76be:	7023      	strb	r3, [r4, #0]
   d76c0:	e00b      	b.n	d76da <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d76c2:	6863      	ldr	r3, [r4, #4]
   d76c4:	68a0      	ldr	r0, [r4, #8]
   d76c6:	6919      	ldr	r1, [r3, #16]
   d76c8:	4632      	mov	r2, r6
   d76ca:	4401      	add	r1, r0
   d76cc:	6818      	ldr	r0, [r3, #0]
   d76ce:	f000 fb83 	bl	d7dd8 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d76d2:	2800      	cmp	r0, #0
   d76d4:	d1f0      	bne.n	d76b8 <_ZN8FatCache4syncEv+0x28>
   d76d6:	e7ea      	b.n	d76ae <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d76d8:	2501      	movs	r5, #1

fail:
  return false;
}
   d76da:	4628      	mov	r0, r5
   d76dc:	bd70      	pop	{r4, r5, r6, pc}

000d76de <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d76de:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d76e0:	6883      	ldr	r3, [r0, #8]
   d76e2:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d76e4:	4604      	mov	r4, r0
   d76e6:	460e      	mov	r6, r1
   d76e8:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d76ea:	d014      	beq.n	d7716 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d76ec:	f7ff ffd0 	bl	d7690 <_ZN8FatCache4syncEv>
   d76f0:	b908      	cbnz	r0, d76f6 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d76f2:	2000      	movs	r0, #0
   d76f4:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d76f6:	076b      	lsls	r3, r5, #29
   d76f8:	d503      	bpl.n	d7702 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d76fa:	2300      	movs	r3, #0
   d76fc:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d76fe:	60a6      	str	r6, [r4, #8]
   d7700:	e009      	b.n	d7716 <_ZN8FatCache4readEmh+0x38>
   d7702:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d7704:	f104 020c 	add.w	r2, r4, #12
   d7708:	4631      	mov	r1, r6
   d770a:	6818      	ldr	r0, [r3, #0]
   d770c:	f000 fada 	bl	d7cc4 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d7710:	2800      	cmp	r0, #0
   d7712:	d1f2      	bne.n	d76fa <_ZN8FatCache4readEmh+0x1c>
   d7714:	e7ed      	b.n	d76f2 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d7716:	7823      	ldrb	r3, [r4, #0]
   d7718:	4620      	mov	r0, r4
   d771a:	f005 0503 	and.w	r5, r5, #3
   d771e:	431d      	orrs	r5, r3
   d7720:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d7724:	bd70      	pop	{r4, r5, r6, pc}

000d7726 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d7726:	7983      	ldrb	r3, [r0, #6]
   d7728:	6940      	ldr	r0, [r0, #20]
   d772a:	3902      	subs	r1, #2
   d772c:	4099      	lsls	r1, r3
}
   d772e:	4408      	add	r0, r1
   d7730:	4770      	bx	lr

000d7732 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7732:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d7734:	b570      	push	{r4, r5, r6, lr}
   d7736:	4605      	mov	r5, r0
   d7738:	460c      	mov	r4, r1
   d773a:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d773c:	d802      	bhi.n	d7744 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d773e:	f04f 30ff 	mov.w	r0, #4294967295
   d7742:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7744:	69c3      	ldr	r3, [r0, #28]
   d7746:	4299      	cmp	r1, r3
   d7748:	d8f9      	bhi.n	d773e <_ZN9FatVolume6fatGetEmPm+0xc>
   d774a:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d774c:	2b20      	cmp	r3, #32
   d774e:	d110      	bne.n	d7772 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d7750:	6981      	ldr	r1, [r0, #24]
   d7752:	2202      	movs	r2, #2
   d7754:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7758:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d775c:	f7ff ffbf 	bl	d76de <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7760:	2800      	cmp	r0, #0
   d7762:	d0ec      	beq.n	d773e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d7764:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7768:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d776c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d7770:	e00f      	b.n	d7792 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d7772:	2b10      	cmp	r3, #16
   d7774:	d1e3      	bne.n	d773e <_ZN9FatVolume6fatGetEmPm+0xc>
   d7776:	6983      	ldr	r3, [r0, #24]
   d7778:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d777c:	2202      	movs	r2, #2
   d777e:	4419      	add	r1, r3
   d7780:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7784:	f7ff ffab 	bl	d76de <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7788:	2800      	cmp	r0, #0
   d778a:	d0d8      	beq.n	d773e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d778c:	b2e4      	uxtb	r4, r4
   d778e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d7792:	69ea      	ldr	r2, [r5, #28]
   d7794:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d7796:	bf9a      	itte	ls
   d7798:	6033      	strls	r3, [r6, #0]
  return 1;
   d779a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d779c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d779e:	bd70      	pop	{r4, r5, r6, pc}

000d77a0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d77a0:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d77a2:	b538      	push	{r3, r4, r5, lr}
   d77a4:	460c      	mov	r4, r1
   d77a6:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d77a8:	d801      	bhi.n	d77ae <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d77aa:	2000      	movs	r0, #0
   d77ac:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d77ae:	69c3      	ldr	r3, [r0, #28]
   d77b0:	4299      	cmp	r1, r3
   d77b2:	d8fa      	bhi.n	d77aa <_ZN9FatVolume6fatPutEmm+0xa>
   d77b4:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d77b6:	2b20      	cmp	r3, #32
   d77b8:	d10e      	bne.n	d77d8 <_ZN9FatVolume6fatPutEmm+0x38>
   d77ba:	6981      	ldr	r1, [r0, #24]
   d77bc:	2203      	movs	r2, #3
   d77be:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d77c2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d77c6:	f7ff ff8a 	bl	d76de <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d77ca:	2800      	cmp	r0, #0
   d77cc:	d0ed      	beq.n	d77aa <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d77ce:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d77d2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d77d6:	e00f      	b.n	d77f8 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d77d8:	2b10      	cmp	r3, #16
   d77da:	d1e6      	bne.n	d77aa <_ZN9FatVolume6fatPutEmm+0xa>
   d77dc:	6983      	ldr	r3, [r0, #24]
   d77de:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d77e2:	2203      	movs	r2, #3
   d77e4:	4419      	add	r1, r3
   d77e6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d77ea:	f7ff ff78 	bl	d76de <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d77ee:	2800      	cmp	r0, #0
   d77f0:	d0db      	beq.n	d77aa <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d77f2:	b2e4      	uxtb	r4, r4
   d77f4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d77f8:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d77fa:	bd38      	pop	{r3, r4, r5, pc}

000d77fc <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d77fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d7800:	68c4      	ldr	r4, [r0, #12]
   d7802:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7804:	4605      	mov	r5, r0
   d7806:	460e      	mov	r6, r1
   d7808:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d780a:	d207      	bcs.n	d781c <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d780c:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d780e:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d7810:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d7812:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7814:	429c      	cmp	r4, r3
   d7816:	d903      	bls.n	d7820 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d7818:	b9cf      	cbnz	r7, d784e <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d781a:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d781c:	2701      	movs	r7, #1
   d781e:	e7f7      	b.n	d7810 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d7820:	42a6      	cmp	r6, r4
   d7822:	d014      	beq.n	d784e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d7824:	aa01      	add	r2, sp, #4
   d7826:	4621      	mov	r1, r4
   d7828:	4628      	mov	r0, r5
   d782a:	f7ff ff82 	bl	d7732 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d782e:	2800      	cmp	r0, #0
   d7830:	db0d      	blt.n	d784e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d7832:	d0ed      	beq.n	d7810 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d7834:	9b01      	ldr	r3, [sp, #4]
   d7836:	2b00      	cmp	r3, #0
   d7838:	d1ea      	bne.n	d7810 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d783a:	b107      	cbz	r7, d783e <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d783c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d783e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d7842:	4621      	mov	r1, r4
   d7844:	4628      	mov	r0, r5
   d7846:	f7ff ffab 	bl	d77a0 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d784a:	4607      	mov	r7, r0
   d784c:	b908      	cbnz	r0, d7852 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d784e:	2700      	movs	r7, #0
   d7850:	e00b      	b.n	d786a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d7852:	b916      	cbnz	r6, d785a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d7854:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d7858:	e007      	b.n	d786a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d785a:	4622      	mov	r2, r4
   d785c:	4631      	mov	r1, r6
   d785e:	4628      	mov	r0, r5
   d7860:	f7ff ff9e 	bl	d77a0 <_ZN9FatVolume6fatPutEmm>
   d7864:	2800      	cmp	r0, #0
   d7866:	d1f5      	bne.n	d7854 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d7868:	e7f1      	b.n	d784e <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d786a:	4638      	mov	r0, r7
   d786c:	b002      	add	sp, #8
   d786e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7872 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d7872:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7874:	4605      	mov	r5, r0
   d7876:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d7878:	aa01      	add	r2, sp, #4
   d787a:	4621      	mov	r1, r4
   d787c:	4628      	mov	r0, r5
   d787e:	f7ff ff58 	bl	d7732 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7882:	1e06      	subs	r6, r0, #0
   d7884:	da01      	bge.n	d788a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d7886:	2000      	movs	r0, #0
   d7888:	e00f      	b.n	d78aa <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d788a:	2200      	movs	r2, #0
   d788c:	4621      	mov	r1, r4
   d788e:	4628      	mov	r0, r5
   d7890:	f7ff ff86 	bl	d77a0 <_ZN9FatVolume6fatPutEmm>
   d7894:	2800      	cmp	r0, #0
   d7896:	d0f6      	beq.n	d7886 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d7898:	68eb      	ldr	r3, [r5, #12]
   d789a:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d789c:	bf9c      	itt	ls
   d789e:	f104 34ff 	addls.w	r4, r4, #4294967295
   d78a2:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d78a4:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d78a6:	2e00      	cmp	r6, #0
   d78a8:	d1e6      	bne.n	d7878 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d78aa:	b002      	add	sp, #8
   d78ac:	bd70      	pop	{r4, r5, r6, pc}

000d78ae <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d78ae:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d78b0:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d78b2:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d78b4:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d78b6:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d78b8:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d78bc:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d78be:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d78c0:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d78c2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d78c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d78c8:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d78cc:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d78d0:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d78d4:	b1a1      	cbz	r1, d7900 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d78d6:	2904      	cmp	r1, #4
   d78d8:	d85d      	bhi.n	d7996 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d78da:	4611      	mov	r1, r2
   d78dc:	3024      	adds	r0, #36	; 0x24
   d78de:	f7ff fefe 	bl	d76de <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d78e2:	2800      	cmp	r0, #0
   d78e4:	d057      	beq.n	d7996 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d78e6:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d78ea:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d78ee:	065b      	lsls	r3, r3, #25
   d78f0:	d151      	bne.n	d7996 <_ZN9FatVolume4initEh+0xe8>
   d78f2:	351b      	adds	r5, #27
   d78f4:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d78f8:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d78fc:	2d00      	cmp	r5, #0
   d78fe:	d04a      	beq.n	d7996 <_ZN9FatVolume4initEh+0xe8>
   d7900:	2200      	movs	r2, #0
   d7902:	4629      	mov	r1, r5
   d7904:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7908:	f7ff fee9 	bl	d76de <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d790c:	2800      	cmp	r0, #0
   d790e:	d042      	beq.n	d7996 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d7910:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d7914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d7918:	d13d      	bne.n	d7996 <_ZN9FatVolume4initEh+0xe8>
   d791a:	7c03      	ldrb	r3, [r0, #16]
   d791c:	2b02      	cmp	r3, #2
   d791e:	d13a      	bne.n	d7996 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d7920:	89c3      	ldrh	r3, [r0, #14]
   d7922:	2b00      	cmp	r3, #0
   d7924:	d037      	beq.n	d7996 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d7926:	7b41      	ldrb	r1, [r0, #13]
   d7928:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d792a:	1e4b      	subs	r3, r1, #1
   d792c:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d792e:	2300      	movs	r3, #0
   d7930:	71a3      	strb	r3, [r4, #6]
   d7932:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7934:	2301      	movs	r3, #1
   d7936:	428b      	cmp	r3, r1
   d7938:	d007      	beq.n	d794a <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d793a:	3e01      	subs	r6, #1
   d793c:	d02b      	beq.n	d7996 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d793e:	79a2      	ldrb	r2, [r4, #6]
   d7940:	005b      	lsls	r3, r3, #1
   d7942:	3201      	adds	r2, #1
   d7944:	b2db      	uxtb	r3, r3
   d7946:	71a2      	strb	r2, [r4, #6]
   d7948:	e7f5      	b.n	d7936 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d794a:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d794c:	b902      	cbnz	r2, d7950 <_ZN9FatVolume4initEh+0xa2>
   d794e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d7950:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d7952:	89c6      	ldrh	r6, [r0, #14]
   d7954:	442e      	add	r6, r5
   d7956:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d7958:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d795c:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d795e:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d7962:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d7964:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d7968:	0152      	lsls	r2, r2, #5
   d796a:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d796e:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d7972:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d7974:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d7978:	b903      	cbnz	r3, d797c <_ZN9FatVolume4initEh+0xce>
   d797a:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d797c:	1aad      	subs	r5, r5, r2
   d797e:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d7980:	79a5      	ldrb	r5, [r4, #6]
   d7982:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d7986:	1c6b      	adds	r3, r5, #1
   d7988:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d798a:	f640 73f4 	movw	r3, #4084	; 0xff4
   d798e:	429d      	cmp	r5, r3
   d7990:	d803      	bhi.n	d799a <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d7992:	230c      	movs	r3, #12
   d7994:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7996:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d7998:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d799a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d799e:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d79a0:	bf85      	ittet	hi
   d79a2:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d79a4:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d79a6:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d79a8:	2320      	movhi	r3, #32
   d79aa:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d79ac:	2001      	movs	r0, #1

fail:
  return false;
}
   d79ae:	bd70      	pop	{r4, r5, r6, pc}

000d79b0 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d79b0:	f003 b92e 	b.w	dac10 <HAL_Pin_Map>

000d79b4 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d79b4:	f003 b92c 	b.w	dac10 <HAL_Pin_Map>

000d79b8 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d79b8:	f003 b92a 	b.w	dac10 <HAL_Pin_Map>

000d79bc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d79bc:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d79be:	4c0e      	ldr	r4, [pc, #56]	; (d79f8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d79c0:	460e      	mov	r6, r1
   d79c2:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d79c4:	f003 f9c4 	bl	dad50 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d79c8:	6823      	ldr	r3, [r4, #0]
   d79ca:	1ac0      	subs	r0, r0, r3
   d79cc:	4b0b      	ldr	r3, [pc, #44]	; (d79fc <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d79ce:	4298      	cmp	r0, r3
   d79d0:	d908      	bls.n	d79e4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d79d2:	f003 f9c5 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d79d6:	4b0a      	ldr	r3, [pc, #40]	; (d7a00 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d79d8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d79da:	f003 fc5f 	bl	db29c <spark_process>
   d79de:	f003 f9b7 	bl	dad50 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d79e2:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d79e4:	f003 f9bc 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d79e8:	b280      	uxth	r0, r0
   d79ea:	1b80      	subs	r0, r0, r6
}
   d79ec:	42a8      	cmp	r0, r5
   d79ee:	bfd4      	ite	le
   d79f0:	2000      	movle	r0, #0
   d79f2:	2001      	movgt	r0, #1
   d79f4:	bd70      	pop	{r4, r5, r6, pc}
   d79f6:	bf00      	nop
   d79f8:	2003e0a0 	.word	0x2003e0a0
   d79fc:	000186a0 	.word	0x000186a0
   d7a00:	2003e608 	.word	0x2003e608

000d7a04 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7a04:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d7a06:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7a08:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d7a0a:	b94d      	cbnz	r5, d7a20 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7a0c:	6840      	ldr	r0, [r0, #4]
   d7a0e:	f000 fa7d 	bl	d7f0c <_ZN14SdSpiAltDriver8activateEv>
   d7a12:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7a14:	4629      	mov	r1, r5
   d7a16:	7d18      	ldrb	r0, [r3, #20]
   d7a18:	f006 f971 	bl	ddcfe <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7a1c:	2301      	movs	r3, #1
   d7a1e:	7223      	strb	r3, [r4, #8]
   d7a20:	bd38      	pop	{r3, r4, r5, pc}

000d7a22 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7a22:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7a24:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7a26:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7a28:	b16b      	cbz	r3, d7a46 <_ZN9SdSpiCard7spiStopEv+0x24>
   d7a2a:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d7a2c:	2101      	movs	r1, #1
   d7a2e:	7d18      	ldrb	r0, [r3, #20]
   d7a30:	f006 f965 	bl	ddcfe <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7a34:	21ff      	movs	r1, #255	; 0xff
   d7a36:	6860      	ldr	r0, [r4, #4]
   d7a38:	f000 fa9a 	bl	d7f70 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d7a3c:	6860      	ldr	r0, [r4, #4]
   d7a3e:	f000 fa79 	bl	d7f34 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d7a42:	2300      	movs	r3, #0
   d7a44:	7223      	strb	r3, [r4, #8]
   d7a46:	bd10      	pop	{r4, pc}

000d7a48 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d7a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a4a:	4604      	mov	r4, r0
   d7a4c:	460d      	mov	r5, r1
   d7a4e:	4616      	mov	r6, r2
   d7a50:	f003 f986 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d7a54:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7a56:	6860      	ldr	r0, [r4, #4]
   d7a58:	f000 fa6f 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d7a5c:	28ff      	cmp	r0, #255	; 0xff
   d7a5e:	7260      	strb	r0, [r4, #9]
   d7a60:	d109      	bne.n	d7a76 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d7a62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7a66:	4639      	mov	r1, r7
   d7a68:	4620      	mov	r0, r4
   d7a6a:	f7ff ffa7 	bl	d79bc <_ZN9SdSpiCard10isTimedOutEtt>
   d7a6e:	2800      	cmp	r0, #0
   d7a70:	d0f1      	beq.n	d7a56 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7a72:	2355      	movs	r3, #85	; 0x55
   d7a74:	e00b      	b.n	d7a8e <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d7a76:	28fe      	cmp	r0, #254	; 0xfe
   d7a78:	d001      	beq.n	d7a7e <_ZN9SdSpiCard8readDataEPhj+0x36>
   d7a7a:	2350      	movs	r3, #80	; 0x50
   d7a7c:	e007      	b.n	d7a8e <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d7a7e:	4632      	mov	r2, r6
   d7a80:	4629      	mov	r1, r5
   d7a82:	6860      	ldr	r0, [r4, #4]
   d7a84:	f000 fa5e 	bl	d7f44 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d7a88:	7260      	strb	r0, [r4, #9]
   d7a8a:	b130      	cbz	r0, d7a9a <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7a8c:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d7a8e:	4620      	mov	r0, r4
   d7a90:	7023      	strb	r3, [r4, #0]
   d7a92:	f7ff ffc6 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a96:	2000      	movs	r0, #0
}
   d7a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7a9a:	6860      	ldr	r0, [r4, #4]
   d7a9c:	f000 fa4d 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
   d7aa0:	6860      	ldr	r0, [r4, #4]
   d7aa2:	f000 fa4a 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
   d7aa6:	2001      	movs	r0, #1
   d7aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7aaa <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7aaa:	b570      	push	{r4, r5, r6, lr}
   d7aac:	4604      	mov	r4, r0
   d7aae:	460e      	mov	r6, r1
   d7ab0:	f003 f956 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
   d7ab4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d7ab6:	4632      	mov	r2, r6
   d7ab8:	4629      	mov	r1, r5
   d7aba:	4620      	mov	r0, r4
   d7abc:	f7ff ff7e 	bl	d79bc <_ZN9SdSpiCard10isTimedOutEtt>
   d7ac0:	b930      	cbnz	r0, d7ad0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d7ac2:	6860      	ldr	r0, [r4, #4]
   d7ac4:	f000 fa39 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7ac8:	28ff      	cmp	r0, #255	; 0xff
   d7aca:	d1f4      	bne.n	d7ab6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7acc:	2001      	movs	r0, #1
   d7ace:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d7ad0:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d7ad2:	bd70      	pop	{r4, r5, r6, pc}

000d7ad4 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d7ad6:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7ad8:	9201      	str	r2, [sp, #4]
   d7ada:	4604      	mov	r4, r0
   d7adc:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d7ade:	b90b      	cbnz	r3, d7ae4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7ae0:	f7ff ff90 	bl	d7a04 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d7ae4:	b125      	cbz	r5, d7af0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d7ae6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7aea:	4620      	mov	r0, r4
   d7aec:	f7ff ffdd 	bl	d7aaa <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7af0:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7af4:	6860      	ldr	r0, [r4, #4]
   d7af6:	f000 fa3b 	bl	d7f70 <_ZN14SdSpiAltDriver4sendEh>
   d7afa:	f10d 0607 	add.w	r6, sp, #7
   d7afe:	f10d 0703 	add.w	r7, sp, #3
   d7b02:	f816 1901 	ldrb.w	r1, [r6], #-1
   d7b06:	6860      	ldr	r0, [r4, #4]
   d7b08:	f000 fa32 	bl	d7f70 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d7b0c:	42be      	cmp	r6, r7
   d7b0e:	d1f8      	bne.n	d7b02 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d7b10:	2d00      	cmp	r5, #0
   d7b12:	bf0c      	ite	eq
   d7b14:	2195      	moveq	r1, #149	; 0x95
   d7b16:	2187      	movne	r1, #135	; 0x87
   d7b18:	6860      	ldr	r0, [r4, #4]
   d7b1a:	f000 fa29 	bl	d7f70 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7b1e:	6860      	ldr	r0, [r4, #4]
   d7b20:	f000 fa0b 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
   d7b24:	250b      	movs	r5, #11
   d7b26:	6860      	ldr	r0, [r4, #4]
   d7b28:	f000 fa07 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7b2c:	0603      	lsls	r3, r0, #24
   d7b2e:	7260      	strb	r0, [r4, #9]
   d7b30:	d503      	bpl.n	d7b3a <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d7b32:	3d01      	subs	r5, #1
   d7b34:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7b38:	d1f5      	bne.n	d7b26 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d7b3a:	b003      	add	sp, #12
   d7b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7b3e <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d7b3e:	b570      	push	{r4, r5, r6, lr}
   d7b40:	4604      	mov	r4, r0
   d7b42:	460d      	mov	r5, r1
   d7b44:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d7b46:	2137      	movs	r1, #55	; 0x37
   d7b48:	2200      	movs	r2, #0
   d7b4a:	f7ff ffc3 	bl	d7ad4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d7b4e:	4632      	mov	r2, r6
   d7b50:	4629      	mov	r1, r5
   d7b52:	4620      	mov	r0, r4
  }
   d7b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d7b58:	f7ff bfbc 	b.w	d7ad4 <_ZN9SdSpiCard11cardCommandEhm>

000d7b5c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d7b60:	2500      	movs	r5, #0
   d7b62:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d7b64:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d7b66:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d7b68:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7b6a:	4604      	mov	r4, r0
   d7b6c:	4690      	mov	r8, r2
   d7b6e:	461e      	mov	r6, r3
   d7b70:	f003 f8f6 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d7b74:	4641      	mov	r1, r8
   d7b76:	4607      	mov	r7, r0
   d7b78:	6860      	ldr	r0, [r4, #4]
   d7b7a:	f000 f9cb 	bl	d7f14 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d7b7e:	6863      	ldr	r3, [r4, #4]
   d7b80:	4a4f      	ldr	r2, [pc, #316]	; (d7cc0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d7b82:	721d      	strb	r5, [r3, #8]
   d7b84:	f04f 0801 	mov.w	r8, #1
   d7b88:	60da      	str	r2, [r3, #12]
   d7b8a:	745d      	strb	r5, [r3, #17]
   d7b8c:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d7b90:	4620      	mov	r0, r4
   d7b92:	f7ff ff37 	bl	d7a04 <_ZN9SdSpiCard8spiStartEv>
   d7b96:	6863      	ldr	r3, [r4, #4]
   d7b98:	4641      	mov	r1, r8
   d7b9a:	7d18      	ldrb	r0, [r3, #20]
   d7b9c:	f006 f8af 	bl	ddcfe <digitalWrite>
   d7ba0:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7ba2:	21ff      	movs	r1, #255	; 0xff
   d7ba4:	6860      	ldr	r0, [r4, #4]
   d7ba6:	3d01      	subs	r5, #1
   d7ba8:	f000 f9e2 	bl	d7f70 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d7bac:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7bb0:	d1f7      	bne.n	d7ba2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d7bb2:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7bb4:	4629      	mov	r1, r5
   d7bb6:	7d18      	ldrb	r0, [r3, #20]
   d7bb8:	f006 f8a1 	bl	ddcfe <digitalWrite>
   d7bbc:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d7bbe:	2200      	movs	r2, #0
   d7bc0:	4611      	mov	r1, r2
   d7bc2:	4620      	mov	r0, r4
   d7bc4:	f7ff ff86 	bl	d7ad4 <_ZN9SdSpiCard11cardCommandEhm>
   d7bc8:	2801      	cmp	r0, #1
   d7bca:	4680      	mov	r8, r0
   d7bcc:	d012      	beq.n	d7bf4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d7bce:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d7bd0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7bd4:	d101      	bne.n	d7bda <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7bd6:	2320      	movs	r3, #32
   d7bd8:	e057      	b.n	d7c8a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7bda:	21fd      	movs	r1, #253	; 0xfd
   d7bdc:	6860      	ldr	r0, [r4, #4]
   d7bde:	f000 f9c7 	bl	d7f70 <_ZN14SdSpiAltDriver4sendEh>
   d7be2:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7be6:	6860      	ldr	r0, [r4, #4]
   d7be8:	f000 f9a7 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d7bec:	f1b8 0801 	subs.w	r8, r8, #1
   d7bf0:	d1f9      	bne.n	d7be6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d7bf2:	e7e4      	b.n	d7bbe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7bf4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7bf8:	2108      	movs	r1, #8
   d7bfa:	4620      	mov	r0, r4
   d7bfc:	f7ff ff6a 	bl	d7ad4 <_ZN9SdSpiCard11cardCommandEhm>
   d7c00:	2805      	cmp	r0, #5
   d7c02:	d102      	bne.n	d7c0a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7c04:	f884 800a 	strb.w	r8, [r4, #10]
   d7c08:	e00f      	b.n	d7c2a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d7c0a:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7c0c:	6860      	ldr	r0, [r4, #4]
   d7c0e:	f000 f994 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
   d7c12:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7c14:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d7c18:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d7c1a:	d1f7      	bne.n	d7c0c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d7c1c:	28aa      	cmp	r0, #170	; 0xaa
   d7c1e:	d102      	bne.n	d7c26 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7c20:	2302      	movs	r3, #2
   d7c22:	72a3      	strb	r3, [r4, #10]
   d7c24:	e001      	b.n	d7c2a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7c26:	2325      	movs	r3, #37	; 0x25
   d7c28:	e02f      	b.n	d7c8a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7c2a:	7aa3      	ldrb	r3, [r4, #10]
   d7c2c:	2b02      	cmp	r3, #2
   d7c2e:	bf0c      	ite	eq
   d7c30:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d7c34:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7c36:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d7c38:	462a      	mov	r2, r5
   d7c3a:	2129      	movs	r1, #41	; 0x29
   d7c3c:	4620      	mov	r0, r4
   d7c3e:	f7ff ff7e 	bl	d7b3e <_ZN9SdSpiCard8cardAcmdEhm>
   d7c42:	4602      	mov	r2, r0
   d7c44:	b148      	cbz	r0, d7c5a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7c46:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7c4a:	4639      	mov	r1, r7
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	f7ff feb5 	bl	d79bc <_ZN9SdSpiCard10isTimedOutEtt>
   d7c52:	2800      	cmp	r0, #0
   d7c54:	d0f0      	beq.n	d7c38 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d7c56:	2343      	movs	r3, #67	; 0x43
   d7c58:	e017      	b.n	d7c8a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d7c5a:	7aa3      	ldrb	r3, [r4, #10]
   d7c5c:	2b02      	cmp	r3, #2
   d7c5e:	d00e      	beq.n	d7c7e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d7c60:	4620      	mov	r0, r4
   d7c62:	f7ff fede 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d7c66:	6863      	ldr	r3, [r4, #4]
   d7c68:	68b0      	ldr	r0, [r6, #8]
   d7c6a:	7934      	ldrb	r4, [r6, #4]
   d7c6c:	7b31      	ldrb	r1, [r6, #12]
   d7c6e:	7b72      	ldrb	r2, [r6, #13]
   d7c70:	745a      	strb	r2, [r3, #17]
   d7c72:	60d8      	str	r0, [r3, #12]
   d7c74:	721c      	strb	r4, [r3, #8]
   d7c76:	7419      	strb	r1, [r3, #16]
  return true;
   d7c78:	2001      	movs	r0, #1
   d7c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d7c7e:	213a      	movs	r1, #58	; 0x3a
   d7c80:	4620      	mov	r0, r4
   d7c82:	f7ff ff27 	bl	d7ad4 <_ZN9SdSpiCard11cardCommandEhm>
   d7c86:	b138      	cbz	r0, d7c98 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d7c88:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d7c8a:	4620      	mov	r0, r4
   d7c8c:	7023      	strb	r3, [r4, #0]
   d7c8e:	f7ff fec8 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7c92:	2000      	movs	r0, #0
}
   d7c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7c98:	6860      	ldr	r0, [r4, #4]
   d7c9a:	f000 f94e 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d7c9e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d7ca2:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7ca4:	bf04      	itt	eq
   d7ca6:	2303      	moveq	r3, #3
   d7ca8:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7caa:	6860      	ldr	r0, [r4, #4]
   d7cac:	f000 f945 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
   d7cb0:	6860      	ldr	r0, [r4, #4]
   d7cb2:	f000 f942 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
   d7cb6:	6860      	ldr	r0, [r4, #4]
   d7cb8:	f000 f93f 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
   d7cbc:	e7d0      	b.n	d7c60 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d7cbe:	bf00      	nop
   d7cc0:	0003d090 	.word	0x0003d090

000d7cc4 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7cc4:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7cc6:	7a83      	ldrb	r3, [r0, #10]
   d7cc8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7cca:	bf18      	it	ne
   d7ccc:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7cce:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7cd0:	460a      	mov	r2, r1
   d7cd2:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7cd4:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7cd6:	f7ff fefd 	bl	d7ad4 <_ZN9SdSpiCard11cardCommandEhm>
   d7cda:	b110      	cbz	r0, d7ce2 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7cdc:	2330      	movs	r3, #48	; 0x30
   d7cde:	7023      	strb	r3, [r4, #0]
   d7ce0:	e00b      	b.n	d7cfa <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d7ce2:	4629      	mov	r1, r5
   d7ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7ce8:	4620      	mov	r0, r4
   d7cea:	f7ff fead 	bl	d7a48 <_ZN9SdSpiCard8readDataEPhj>
   d7cee:	4605      	mov	r5, r0
   d7cf0:	b118      	cbz	r0, d7cfa <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d7cf2:	4620      	mov	r0, r4
   d7cf4:	f7ff fe95 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7cf8:	e003      	b.n	d7d02 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d7cfa:	4620      	mov	r0, r4
   d7cfc:	f7ff fe91 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7d00:	2500      	movs	r5, #0
}
   d7d02:	4628      	mov	r0, r5
   d7d04:	bd38      	pop	{r3, r4, r5, pc}

000d7d06 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7d06:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d7d08:	7a83      	ldrb	r3, [r0, #10]
   d7d0a:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7d0c:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7d0e:	bf18      	it	ne
   d7d10:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7d12:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7d14:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7d16:	f7ff fedd 	bl	d7ad4 <_ZN9SdSpiCard11cardCommandEhm>
   d7d1a:	b130      	cbz	r0, d7d2a <_ZN9SdSpiCard9readStartEm+0x24>
   d7d1c:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d7d1e:	4620      	mov	r0, r4
   d7d20:	7023      	strb	r3, [r4, #0]
   d7d22:	f7ff fe7e 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7d26:	2000      	movs	r0, #0
   d7d28:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d7d2a:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7d2c:	bd10      	pop	{r4, pc}

000d7d2e <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7d2e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d7d30:	2200      	movs	r2, #0
   d7d32:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7d34:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d7d36:	f7ff fecd 	bl	d7ad4 <_ZN9SdSpiCard11cardCommandEhm>
   d7d3a:	b130      	cbz	r0, d7d4a <_ZN9SdSpiCard8readStopEv+0x1c>
   d7d3c:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d7d3e:	4620      	mov	r0, r4
   d7d40:	7023      	strb	r3, [r4, #0]
   d7d42:	f7ff fe6e 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7d46:	2000      	movs	r0, #0
   d7d48:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d7d4a:	4620      	mov	r0, r4
   d7d4c:	f7ff fe69 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7d50:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7d52:	bd10      	pop	{r4, pc}

000d7d54 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d56:	4605      	mov	r5, r0
   d7d58:	4616      	mov	r6, r2
   d7d5a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7d5c:	f7ff ffd3 	bl	d7d06 <_ZN9SdSpiCard9readStartEm>
   d7d60:	b198      	cbz	r0, d7d8a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d7d62:	2400      	movs	r4, #0
   d7d64:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d7d66:	429f      	cmp	r7, r3
   d7d68:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d7d6c:	d908      	bls.n	d7d80 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d7d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7d72:	4628      	mov	r0, r5
   d7d74:	f7ff fe68 	bl	d7a48 <_ZN9SdSpiCard8readDataEPhj>
   d7d78:	3401      	adds	r4, #1
   d7d7a:	2800      	cmp	r0, #0
   d7d7c:	d1f2      	bne.n	d7d64 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d7d7e:	e004      	b.n	d7d8a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d7d80:	4628      	mov	r0, r5
}
   d7d82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d7d86:	f7ff bfd2 	b.w	d7d2e <_ZN9SdSpiCard8readStopEv>
}
   d7d8a:	2000      	movs	r0, #0
   d7d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7d8e <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d7d8e:	b538      	push	{r3, r4, r5, lr}
   d7d90:	4604      	mov	r4, r0
   d7d92:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7d94:	6840      	ldr	r0, [r0, #4]
   d7d96:	f000 f8eb 	bl	d7f70 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d7d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7d9e:	4629      	mov	r1, r5
   d7da0:	6860      	ldr	r0, [r4, #4]
   d7da2:	f000 f8e9 	bl	d7f78 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7da6:	21ff      	movs	r1, #255	; 0xff
   d7da8:	6860      	ldr	r0, [r4, #4]
   d7daa:	f000 f8e1 	bl	d7f70 <_ZN14SdSpiAltDriver4sendEh>
   d7dae:	21ff      	movs	r1, #255	; 0xff
   d7db0:	6860      	ldr	r0, [r4, #4]
   d7db2:	f000 f8dd 	bl	d7f70 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7db6:	6860      	ldr	r0, [r4, #4]
   d7db8:	f000 f8bf 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7dbc:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d7dbe:	f000 001f 	and.w	r0, r0, #31
   d7dc2:	2805      	cmp	r0, #5
   d7dc4:	d006      	beq.n	d7dd4 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7dc6:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7dc8:	4620      	mov	r0, r4
   d7dca:	7023      	strb	r3, [r4, #0]
   d7dcc:	f7ff fe29 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7dd0:	2000      	movs	r0, #0
   d7dd2:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d7dd4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7dd6:	bd38      	pop	{r3, r4, r5, pc}

000d7dd8 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7dd8:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7dda:	7a83      	ldrb	r3, [r0, #10]
   d7ddc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7dde:	bf18      	it	ne
   d7de0:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7de2:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7de4:	460a      	mov	r2, r1
   d7de6:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7de8:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7dea:	f7ff fe73 	bl	d7ad4 <_ZN9SdSpiCard11cardCommandEhm>
   d7dee:	4606      	mov	r6, r0
   d7df0:	b108      	cbz	r0, d7df6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d7df2:	2332      	movs	r3, #50	; 0x32
   d7df4:	e01d      	b.n	d7e32 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d7df6:	462a      	mov	r2, r5
   d7df8:	21fe      	movs	r1, #254	; 0xfe
   d7dfa:	4620      	mov	r0, r4
   d7dfc:	f7ff ffc7 	bl	d7d8e <_ZN9SdSpiCard9writeDataEhPKh>
   d7e00:	b1c0      	cbz	r0, d7e34 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7e02:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7e06:	4620      	mov	r0, r4
   d7e08:	f7ff fe4f 	bl	d7aaa <_ZN9SdSpiCard11waitNotBusyEt>
   d7e0c:	4605      	mov	r5, r0
   d7e0e:	b908      	cbnz	r0, d7e14 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d7e10:	235a      	movs	r3, #90	; 0x5a
   d7e12:	e00e      	b.n	d7e32 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7e14:	4632      	mov	r2, r6
   d7e16:	210d      	movs	r1, #13
   d7e18:	4620      	mov	r0, r4
   d7e1a:	f7ff fe5b 	bl	d7ad4 <_ZN9SdSpiCard11cardCommandEhm>
   d7e1e:	b938      	cbnz	r0, d7e30 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7e20:	6860      	ldr	r0, [r4, #4]
   d7e22:	f000 f88a 	bl	d7f3a <_ZN14SdSpiAltDriver7receiveEv>
   d7e26:	b918      	cbnz	r0, d7e30 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d7e28:	4620      	mov	r0, r4
   d7e2a:	f7ff fdfa 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7e2e:	e005      	b.n	d7e3c <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7e30:	2329      	movs	r3, #41	; 0x29
   d7e32:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d7e34:	4620      	mov	r0, r4
   d7e36:	f7ff fdf4 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7e3a:	2500      	movs	r5, #0
}
   d7e3c:	4628      	mov	r0, r5
   d7e3e:	bd70      	pop	{r4, r5, r6, pc}

000d7e40 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7e40:	b538      	push	{r3, r4, r5, lr}
   d7e42:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7e44:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7e48:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7e4a:	f7ff fe2e 	bl	d7aaa <_ZN9SdSpiCard11waitNotBusyEt>
   d7e4e:	b910      	cbnz	r0, d7e56 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d7e50:	235b      	movs	r3, #91	; 0x5b
   d7e52:	7023      	strb	r3, [r4, #0]
   d7e54:	e005      	b.n	d7e62 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7e56:	462a      	mov	r2, r5
   d7e58:	21fc      	movs	r1, #252	; 0xfc
   d7e5a:	4620      	mov	r0, r4
   d7e5c:	f7ff ff97 	bl	d7d8e <_ZN9SdSpiCard9writeDataEhPKh>
   d7e60:	b918      	cbnz	r0, d7e6a <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7e62:	4620      	mov	r0, r4
   d7e64:	f7ff fddd 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7e68:	2000      	movs	r0, #0
}
   d7e6a:	bd38      	pop	{r3, r4, r5, pc}

000d7e6c <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7e6c:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7e6e:	7a83      	ldrb	r3, [r0, #10]
   d7e70:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7e72:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7e74:	bf18      	it	ne
   d7e76:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7e78:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7e7a:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7e7c:	f7ff fe2a 	bl	d7ad4 <_ZN9SdSpiCard11cardCommandEhm>
   d7e80:	b130      	cbz	r0, d7e90 <_ZN9SdSpiCard10writeStartEm+0x24>
   d7e82:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7e84:	4620      	mov	r0, r4
   d7e86:	7023      	strb	r3, [r4, #0]
   d7e88:	f7ff fdcb 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7e8c:	2000      	movs	r0, #0
   d7e8e:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d7e90:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7e92:	bd10      	pop	{r4, pc}

000d7e94 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7e94:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7e96:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7e9a:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7e9c:	f7ff fe05 	bl	d7aaa <_ZN9SdSpiCard11waitNotBusyEt>
   d7ea0:	4605      	mov	r5, r0
   d7ea2:	b120      	cbz	r0, d7eae <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7ea4:	21fd      	movs	r1, #253	; 0xfd
   d7ea6:	6860      	ldr	r0, [r4, #4]
   d7ea8:	f000 f862 	bl	d7f70 <_ZN14SdSpiAltDriver4sendEh>
   d7eac:	e001      	b.n	d7eb2 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7eae:	2356      	movs	r3, #86	; 0x56
   d7eb0:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d7eb2:	4620      	mov	r0, r4
   d7eb4:	f7ff fdb5 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7eb8:	4628      	mov	r0, r5
   d7eba:	bd38      	pop	{r3, r4, r5, pc}

000d7ebc <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ebe:	4605      	mov	r5, r0
   d7ec0:	4616      	mov	r6, r2
   d7ec2:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7ec4:	f7ff ffd2 	bl	d7e6c <_ZN9SdSpiCard10writeStartEm>
   d7ec8:	b170      	cbz	r0, d7ee8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d7eca:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7ecc:	42bc      	cmp	r4, r7
   d7ece:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7ed2:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7ed4:	d004      	beq.n	d7ee0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7ed6:	f7ff ffb3 	bl	d7e40 <_ZN9SdSpiCard9writeDataEPKh>
   d7eda:	b128      	cbz	r0, d7ee8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7edc:	3401      	adds	r4, #1
   d7ede:	e7f5      	b.n	d7ecc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d7ee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7ee4:	f7ff bfd6 	b.w	d7e94 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d7ee8:	4628      	mov	r0, r5
   d7eea:	f7ff fd9a 	bl	d7a22 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7eee:	2000      	movs	r0, #0
   d7ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ef2 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d7ef2:	f002 be8d 	b.w	dac10 <HAL_Pin_Map>

000d7ef6 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d7ef6:	f002 be8b 	b.w	dac10 <HAL_Pin_Map>

000d7efa <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d7efa:	f002 be89 	b.w	dac10 <HAL_Pin_Map>
	...

000d7f00 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7f00:	4b01      	ldr	r3, [pc, #4]	; (d7f08 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7f02:	2201      	movs	r2, #1
   d7f04:	701a      	strb	r2, [r3, #0]
   d7f06:	4770      	bx	lr
   d7f08:	2003e0a4 	.word	0x2003e0a4

000d7f0c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7f0c:	1d01      	adds	r1, r0, #4
   d7f0e:	6800      	ldr	r0, [r0, #0]
   d7f10:	f003 bafc 	b.w	db50c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d7f14 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7f14:	b510      	push	{r4, lr}
   d7f16:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7f18:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7f1a:	6800      	ldr	r0, [r0, #0]
   d7f1c:	f003 facc 	bl	db4b8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7f20:	7d20      	ldrb	r0, [r4, #20]
   d7f22:	2101      	movs	r1, #1
   d7f24:	f005 feda 	bl	ddcdc <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7f28:	7d20      	ldrb	r0, [r4, #20]
   d7f2a:	2101      	movs	r1, #1
}
   d7f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d7f30:	f005 bee5 	b.w	ddcfe <digitalWrite>

000d7f34 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7f34:	6800      	ldr	r0, [r0, #0]
   d7f36:	f003 bad0 	b.w	db4da <_ZN8SPIClass14endTransactionEv>

000d7f3a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7f3a:	21ff      	movs	r1, #255	; 0xff
   d7f3c:	6800      	ldr	r0, [r0, #0]
   d7f3e:	f003 bb55 	b.w	db5ec <_ZN8SPIClass8transferEh>
	...

000d7f44 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7f46:	4b08      	ldr	r3, [pc, #32]	; (d7f68 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7f48:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7f4a:	2500      	movs	r5, #0
   d7f4c:	4c07      	ldr	r4, [pc, #28]	; (d7f6c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7f4e:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7f50:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7f52:	4613      	mov	r3, r2
   d7f54:	460a      	mov	r2, r1
   d7f56:	4629      	mov	r1, r5
   d7f58:	f003 fb4e 	bl	db5f8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7f5c:	7823      	ldrb	r3, [r4, #0]
   d7f5e:	2b00      	cmp	r3, #0
   d7f60:	d0fc      	beq.n	d7f5c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d7f62:	2000      	movs	r0, #0
   d7f64:	b003      	add	sp, #12
   d7f66:	bd30      	pop	{r4, r5, pc}
   d7f68:	000d7f01 	.word	0x000d7f01
   d7f6c:	2003e0a4 	.word	0x2003e0a4

000d7f70 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7f70:	6800      	ldr	r0, [r0, #0]
   d7f72:	f003 bb3b 	b.w	db5ec <_ZN8SPIClass8transferEh>
	...

000d7f78 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7f7a:	4b07      	ldr	r3, [pc, #28]	; (d7f98 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7f7c:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7f7e:	2500      	movs	r5, #0
   d7f80:	4c06      	ldr	r4, [pc, #24]	; (d7f9c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7f82:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7f84:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7f86:	4613      	mov	r3, r2
   d7f88:	462a      	mov	r2, r5
   d7f8a:	f003 fb35 	bl	db5f8 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d7f8e:	7823      	ldrb	r3, [r4, #0]
   d7f90:	2b00      	cmp	r3, #0
   d7f92:	d0fc      	beq.n	d7f8e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7f94:	b003      	add	sp, #12
   d7f96:	bd30      	pop	{r4, r5, pc}
   d7f98:	000d7f01 	.word	0x000d7f01
   d7f9c:	2003e0a4 	.word	0x2003e0a4

000d7fa0 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d7fa0:	f002 be36 	b.w	dac10 <HAL_Pin_Map>

000d7fa4 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d7fa4:	b510      	push	{r4, lr}
   d7fa6:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d7fa8:	f005 fef4 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d7fac:	6803      	ldr	r3, [r0, #0]
   d7fae:	4621      	mov	r1, r4
   d7fb0:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d7fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d7fb6:	4718      	bx	r3

000d7fb8 <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d7fb8:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d7fba:	f005 feeb 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d7fbe:	6803      	ldr	r3, [r0, #0]
   d7fc0:	695b      	ldr	r3, [r3, #20]
   d7fc2:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d7fc4:	b2c0      	uxtb	r0, r0
   d7fc6:	bd08      	pop	{r3, pc}

000d7fc8 <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d7fc8:	b538      	push	{r3, r4, r5, lr}
   d7fca:	4604      	mov	r4, r0
   d7fcc:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d7fce:	f005 fee1 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d7fd2:	7821      	ldrb	r1, [r4, #0]
   d7fd4:	f041 0120 	orr.w	r1, r1, #32
   d7fd8:	f005 f9fd 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d7fdc:	4628      	mov	r0, r5
   d7fde:	f7ff ffe1 	bl	d7fa4 <_ZL8wiresendh>
	Wire.endTransmission();
   d7fe2:	f005 fed7 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d7fe6:	f005 f9fd 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d7fea:	f005 fed3 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d7fee:	7821      	ldrb	r1, [r4, #0]
   d7ff0:	2201      	movs	r2, #1
   d7ff2:	f041 0120 	orr.w	r1, r1, #32
   d7ff6:	f005 f9e7 	bl	dd3c8 <_ZN7TwoWire11requestFromEhj>
	return wirerecv();
}
   d7ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d7ffe:	f7ff bfdb 	b.w	d7fb8 <_ZL8wirerecvv>

000d8002 <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d8002:	b570      	push	{r4, r5, r6, lr}
   d8004:	4606      	mov	r6, r0
   d8006:	4614      	mov	r4, r2
   d8008:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d800a:	f005 fec3 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d800e:	7831      	ldrb	r1, [r6, #0]
   d8010:	f041 0120 	orr.w	r1, r1, #32
   d8014:	f005 f9df 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d8018:	4628      	mov	r0, r5
   d801a:	f7ff ffc3 	bl	d7fa4 <_ZL8wiresendh>
	wiresend(regValue);
   d801e:	4620      	mov	r0, r4
   d8020:	f7ff ffc0 	bl	d7fa4 <_ZL8wiresendh>
	Wire.endTransmission();
   d8024:	f005 feb6 	bl	ddd94 <_Z19__fetch_global_Wirev>
}
   d8028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d802c:	f005 b9da 	b.w	dd3e4 <_ZN7TwoWire15endTransmissionEv>

000d8030 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d8030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8034:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d8038:	2907      	cmp	r1, #7
   d803a:	bf98      	it	ls
   d803c:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d803e:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d8042:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d8044:	4631      	mov	r1, r6
   d8046:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d8048:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d804a:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d804c:	f7ff ffbc 	bl	d7fc8 <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d8050:	f1b8 0f00 	cmp.w	r8, #0
   d8054:	d001      	beq.n	d805a <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d8056:	4304      	orrs	r4, r0
   d8058:	e001      	b.n	d805e <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d805a:	ea20 0404 	bic.w	r4, r0, r4
   d805e:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d8060:	4631      	mov	r1, r6
   d8062:	4628      	mov	r0, r5
}
   d8064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d8068:	f7ff bfcb 	b.w	d8002 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d806c <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d806c:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d806e:	2907      	cmp	r1, #7
   d8070:	bf28      	it	cs
   d8072:	2107      	movcs	r1, #7
   d8074:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d8076:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d8078:	f005 fe8c 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d807c:	f005 f970 	bl	dd360 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d8080:	4620      	mov	r0, r4
   d8082:	22ff      	movs	r2, #255	; 0xff
   d8084:	2100      	movs	r1, #0
   d8086:	f7ff ffbc 	bl	d8002 <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d808a:	4620      	mov	r0, r4
   d808c:	22ff      	movs	r2, #255	; 0xff
   d808e:	2101      	movs	r1, #1
}
   d8090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d8094:	f7ff bfb5 	b.w	d8002 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d8098 <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d8098:	2100      	movs	r1, #0
   d809a:	f7ff bfe7 	b.w	d806c <_ZN17Adafruit_MCP230175beginEh>

000d809e <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d809e:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d80a0:	2301      	movs	r3, #1
   d80a2:	fab2 f282 	clz	r2, r2
   d80a6:	9300      	str	r3, [sp, #0]
   d80a8:	0952      	lsrs	r2, r2, #5
   d80aa:	2300      	movs	r3, #0
   d80ac:	f7ff ffc0 	bl	d8030 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d80b0:	b003      	add	sp, #12
   d80b2:	f85d fb04 	ldr.w	pc, [sp], #4

000d80b6 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d80b6:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d80b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d80ba:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d80be:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d80c0:	bf34      	ite	cc
   d80c2:	2114      	movcc	r1, #20
   d80c4:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d80c6:	4605      	mov	r5, r0
   d80c8:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d80ca:	f7ff ff7d 	bl	d7fc8 <_ZN17Adafruit_MCP2301712readRegisterEh>
   d80ce:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d80d0:	40b3      	lsls	r3, r6
   d80d2:	b10f      	cbz	r7, d80d8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d80d4:	4303      	orrs	r3, r0
   d80d6:	e001      	b.n	d80dc <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d80d8:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d80dc:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d80de:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d80e0:	4628      	mov	r0, r5
   d80e2:	bf34      	ite	cc
   d80e4:	2112      	movcc	r1, #18
   d80e6:	2113      	movcs	r1, #19
}
   d80e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d80ec:	f7ff bf89 	b.w	d8002 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d80f0 <_ZN17Adafruit_MCP230176pullUpEhh>:
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d80f0:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d80f2:	230d      	movs	r3, #13
   d80f4:	9300      	str	r3, [sp, #0]
   d80f6:	230c      	movs	r3, #12
   d80f8:	f7ff ff9a 	bl	d8030 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d80fc:	b003      	add	sp, #12
   d80fe:	f85d fb04 	ldr.w	pc, [sp], #4

000d8102 <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d8102:	f002 bd85 	b.w	dac10 <HAL_Pin_Map>

000d8106 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d8106:	7501      	strb	r1, [r0, #20]
   d8108:	4770      	bx	lr
	...

000d810c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d810c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d810e:	6984      	ldr	r4, [r0, #24]
   d8110:	4b0a      	ldr	r3, [pc, #40]	; (d813c <_ZN9TCPClientD1Ev+0x30>)
   d8112:	6003      	str	r3, [r0, #0]
   d8114:	4605      	mov	r5, r0
   d8116:	b17c      	cbz	r4, d8138 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8118:	6863      	ldr	r3, [r4, #4]
   d811a:	3b01      	subs	r3, #1
   d811c:	6063      	str	r3, [r4, #4]
   d811e:	b95b      	cbnz	r3, d8138 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d8120:	6823      	ldr	r3, [r4, #0]
   d8122:	4620      	mov	r0, r4
   d8124:	689b      	ldr	r3, [r3, #8]
   d8126:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8128:	68a3      	ldr	r3, [r4, #8]
   d812a:	3b01      	subs	r3, #1
   d812c:	60a3      	str	r3, [r4, #8]
   d812e:	b91b      	cbnz	r3, d8138 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d8130:	6823      	ldr	r3, [r4, #0]
   d8132:	4620      	mov	r0, r4
   d8134:	68db      	ldr	r3, [r3, #12]
   d8136:	4798      	blx	r3
   d8138:	4628      	mov	r0, r5
   d813a:	bd38      	pop	{r3, r4, r5, pc}
   d813c:	000e50cc 	.word	0x000e50cc

000d8140 <_ZN9TCPClientD0Ev>:
   d8140:	b510      	push	{r4, lr}
   d8142:	4604      	mov	r4, r0
   d8144:	f7ff ffe2 	bl	d810c <_ZN9TCPClientD1Ev>
   d8148:	4620      	mov	r0, r4
   d814a:	211c      	movs	r1, #28
   d814c:	f005 fe56 	bl	dddfc <_ZdlPvj>
   d8150:	4620      	mov	r0, r4
   d8152:	bd10      	pop	{r4, pc}

000d8154 <_ZN6UbiTCPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
   d8154:	b530      	push	{r4, r5, lr}
               const char* token) {
   d8156:	4d06      	ldr	r5, [pc, #24]	; (d8170 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d8158:	6005      	str	r5, [r0, #0]
   d815a:	2500      	movs	r5, #0
   d815c:	7505      	strb	r5, [r0, #20]
  _host = host;
  _user_agent = user_agent;
   d815e:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
   d8160:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d8164:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
   d8166:	6185      	str	r5, [r0, #24]
  _host = host;
   d8168:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d816a:	60c3      	str	r3, [r0, #12]
  _port = port;
   d816c:	6102      	str	r2, [r0, #16]
}
   d816e:	bd30      	pop	{r4, r5, pc}
   d8170:	000e4658 	.word	0x000e4658

000d8174 <_ZN6UbiTCP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiTCP::reconnect(const char* host, const int port) {
   d8174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8178:	460d      	mov	r5, r1
   d817a:	4617      	mov	r7, r2
   d817c:	4606      	mov	r6, r0
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
   d817e:	f004 ff41 	bl	dd004 <_Z16_fetch_usbserialv>
   d8182:	491c      	ldr	r1, [pc, #112]	; (d81f4 <_ZN6UbiTCP9reconnectEPKci+0x80>)
   d8184:	f003 fff7 	bl	dc176 <_ZN5Print7printlnEPKc>
   d8188:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d818a:	481b      	ldr	r0, [pc, #108]	; (d81f8 <_ZN6UbiTCP9reconnectEPKci+0x84>)
   d818c:	f005 fc6a 	bl	dda64 <_ZN9TCPClient6statusEv>
   d8190:	bb68      	cbnz	r0, d81ee <_ZN6UbiTCP9reconnectEPKci+0x7a>
   d8192:	2c05      	cmp	r4, #5
   d8194:	d101      	bne.n	d819a <_ZN6UbiTCP9reconnectEPKci+0x26>
   d8196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (_debug) {
   d819a:	7d33      	ldrb	r3, [r6, #20]
   d819c:	b1c3      	cbz	r3, d81d0 <_ZN6UbiTCP9reconnectEPKci+0x5c>
      Serial.print("Trying to connect to ");
   d819e:	f004 ff31 	bl	dd004 <_Z16_fetch_usbserialv>
   d81a2:	4916      	ldr	r1, [pc, #88]	; (d81fc <_ZN6UbiTCP9reconnectEPKci+0x88>)
   d81a4:	f003 ffd0 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(host);
   d81a8:	f004 ff2c 	bl	dd004 <_Z16_fetch_usbserialv>
   d81ac:	4629      	mov	r1, r5
   d81ae:	f003 ffcb 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d81b2:	f004 ff27 	bl	dd004 <_Z16_fetch_usbserialv>
   d81b6:	4912      	ldr	r1, [pc, #72]	; (d8200 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
   d81b8:	f003 ffc6 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d81bc:	f004 ff22 	bl	dd004 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d81c0:	220a      	movs	r2, #10
   d81c2:	4680      	mov	r8, r0
   d81c4:	4621      	mov	r1, r4
   d81c6:	f003 ffe2 	bl	dc18e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d81ca:	4640      	mov	r0, r8
   d81cc:	f003 ffc7 	bl	dc15e <_ZN5Print7printlnEv>
    }
    _client_tcp_ubi.stop();
   d81d0:	4809      	ldr	r0, [pc, #36]	; (d81f8 <_ZN6UbiTCP9reconnectEPKci+0x84>)
   d81d2:	f005 fbd3 	bl	dd97c <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d81d6:	2300      	movs	r3, #0
   d81d8:	b2ba      	uxth	r2, r7
   d81da:	4629      	mov	r1, r5
   d81dc:	4806      	ldr	r0, [pc, #24]	; (d81f8 <_ZN6UbiTCP9reconnectEPKci+0x84>)
   d81de:	f005 fad1 	bl	dd784 <_ZN9TCPClient7connectEPKctm>
    attempts += 1;
    delay(1000);
   d81e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d81e6:	f004 faa1 	bl	dc72c <delay>
   d81ea:	3401      	adds	r4, #1
 */

void UbiTCP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d81ec:	e7cd      	b.n	d818a <_ZN6UbiTCP9reconnectEPKci+0x16>
   d81ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d81f2:	bf00      	nop
   d81f4:	000e454c 	.word	0x000e454c
   d81f8:	2003e0a8 	.word	0x2003e0a8
   d81fc:	000e4564 	.word	0x000e4564
   d8200:	000e457a 	.word	0x000e457a

000d8204 <_ZN6UbiTCP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiTCP::waitServerAnswer() {
   d8204:	b570      	push	{r4, r5, r6, lr}
   d8206:	4605      	mov	r5, r0
  int timeout = 0;
   d8208:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d820a:	480d      	ldr	r0, [pc, #52]	; (d8240 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
   d820c:	f005 fbce 	bl	dd9ac <_ZN9TCPClient9availableEv>
   d8210:	4606      	mov	r6, r0
   d8212:	b910      	cbnz	r0, d821a <_ZN6UbiTCP16waitServerAnswerEv+0x16>
   d8214:	69ab      	ldr	r3, [r5, #24]
   d8216:	429c      	cmp	r4, r3
   d8218:	db01      	blt.n	d821e <_ZN6UbiTCP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
   d821a:	2001      	movs	r0, #1
   d821c:	bd70      	pop	{r4, r5, r6, pc}

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
   d821e:	2001      	movs	r0, #1
   d8220:	f004 fa84 	bl	dc72c <delay>
    if (timeout > _timeout - 1) {
   d8224:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
   d8226:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
   d8228:	429c      	cmp	r4, r3
   d822a:	dbee      	blt.n	d820a <_ZN6UbiTCP16waitServerAnswerEv+0x6>
      if (_debug) {
   d822c:	7d28      	ldrb	r0, [r5, #20]
   d822e:	b130      	cbz	r0, d823e <_ZN6UbiTCP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
   d8230:	f004 fee8 	bl	dd004 <_Z16_fetch_usbserialv>
   d8234:	4903      	ldr	r1, [pc, #12]	; (d8244 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d8236:	f003 ff9e 	bl	dc176 <_ZN5Print7printlnEPKc>
   d823a:	4630      	mov	r0, r6
   d823c:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
   d823e:	bd70      	pop	{r4, r5, r6, pc}
   d8240:	2003e0a8 	.word	0x2003e0a8
   d8244:	000e458e 	.word	0x000e458e

000d8248 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d8248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int j = 0;

  if (_debug) {
   d824c:	7d03      	ldrb	r3, [r0, #20]
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d824e:	4606      	mov	r6, r0
   d8250:	4688      	mov	r8, r1
   d8252:	4615      	mov	r5, r2
  int j = 0;

  if (_debug) {
   d8254:	b14b      	cbz	r3, d826a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d8256:	f004 fed5 	bl	dd004 <_Z16_fetch_usbserialv>
   d825a:	4926      	ldr	r1, [pc, #152]	; (d82f4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xac>)
   d825c:	f003 ff8b 	bl	dc176 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d8260:	f004 fed0 	bl	dd004 <_Z16_fetch_usbserialv>
   d8264:	4924      	ldr	r1, [pc, #144]	; (d82f8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d8266:	f003 ff86 	bl	dc176 <_ZN5Print7printlnEPKc>
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d826a:	2400      	movs	r4, #0
    if (_debug) {
      Serial.write(c);
    }
    response[j] = c;
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
   d826c:	f240 29bb 	movw	r9, #699	; 0x2bb
  if (_debug) {
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
   d8270:	4822      	ldr	r0, [pc, #136]	; (d82fc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d8272:	f005 fb9b 	bl	dd9ac <_ZN9TCPClient9availableEv>
   d8276:	b178      	cbz	r0, d8298 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x50>
    char c = _client_tcp_ubi.read();
   d8278:	4820      	ldr	r0, [pc, #128]	; (d82fc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d827a:	f005 fa40 	bl	dd6fe <_ZN9TCPClient4readEv>
    if (_debug) {
   d827e:	7d33      	ldrb	r3, [r6, #20]
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
    char c = _client_tcp_ubi.read();
   d8280:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d8282:	b12b      	cbz	r3, d8290 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x48>
      Serial.write(c);
   d8284:	f004 febe 	bl	dd004 <_Z16_fetch_usbserialv>
   d8288:	6803      	ldr	r3, [r0, #0]
   d828a:	4639      	mov	r1, r7
   d828c:	689b      	ldr	r3, [r3, #8]
   d828e:	4798      	blx	r3
    }
    response[j] = c;
   d8290:	552f      	strb	r7, [r5, r4]
    j++;
   d8292:	3401      	adds	r4, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d8294:	454c      	cmp	r4, r9
   d8296:	d1eb      	bne.n	d8270 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x28>
      break;
    }
  }

  if (_debug) {
   d8298:	7d33      	ldrb	r3, [r6, #20]
   d829a:	b123      	cbz	r3, d82a6 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x5e>
    Serial.println("\n----------");
   d829c:	f004 feb2 	bl	dd004 <_Z16_fetch_usbserialv>
   d82a0:	4917      	ldr	r1, [pc, #92]	; (d8300 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d82a2:	f003 ff68 	bl	dc176 <_ZN5Print7printlnEPKc>
  }

  response[j] = '\0';
   d82a6:	2300      	movs	r3, #0
   d82a8:	552b      	strb	r3, [r5, r4]
  float result = ERROR_VALUE;

  // POST
  if (request_type == "POST") {
   d82aa:	4b16      	ldr	r3, [pc, #88]	; (d8304 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d82ac:	4598      	cmp	r8, r3
   d82ae:	d10d      	bne.n	d82cc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x84>
    char* pch = strstr(response, "OK");
   d82b0:	4915      	ldr	r1, [pc, #84]	; (d8308 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d82b2:	4628      	mov	r0, r5
   d82b4:	f009 fd3e 	bl	e1d34 <strstr>
    if (pch != NULL) {
      result = 1;
   d82b8:	eddf 7a14 	vldr	s15, [pc, #80]	; d830c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d82bc:	2800      	cmp	r0, #0
   d82be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d82c2:	bf08      	it	eq
   d82c4:	eeb0 0a67 	vmoveq.f32	s0, s15
   d82c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    return result;
  }

  // LV
  char* pch = strchr(response, '|');
   d82cc:	217c      	movs	r1, #124	; 0x7c
   d82ce:	4628      	mov	r0, r5
   d82d0:	f008 ffb0 	bl	e1234 <strchr>
  if (pch != NULL) {
   d82d4:	b150      	cbz	r0, d82ec <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa4>
    result = atof(pch + 1);
   d82d6:	3001      	adds	r0, #1
   d82d8:	f008 fbfe 	bl	e0ad8 <atof>
   d82dc:	ec51 0b10 	vmov	r0, r1, d0
   d82e0:	f008 f9be 	bl	e0660 <__aeabi_d2f>
   d82e4:	ee00 0a10 	vmov	s0, r0
   d82e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (_debug) {
    Serial.println("\n----------");
  }

  response[j] = '\0';
  float result = ERROR_VALUE;
   d82ec:	ed9f 0a07 	vldr	s0, [pc, #28]	; d830c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
  if (pch != NULL) {
    result = atof(pch + 1);
  }

  return result;
}
   d82f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d82f4:	000e45d5 	.word	0x000e45d5
   d82f8:	000e45c1 	.word	0x000e45c1
   d82fc:	2003e0a8 	.word	0x2003e0a8
   d8300:	000e45d4 	.word	0x000e45d4
   d8304:	000e45e0 	.word	0x000e45e0
   d8308:	000e45e5 	.word	0x000e45e5
   d830c:	cda2425f 	.word	0xcda2425f

000d8310 <_ZN6UbiTCP3getEPKcS1_>:

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
   d8310:	b570      	push	{r4, r5, r6, lr}
   d8312:	ed2d 8b02 	vpush	{d8}
   d8316:	4604      	mov	r4, r0
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d8318:	2300      	movs	r3, #0

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
   d831a:	460e      	mov	r6, r1
   d831c:	4615      	mov	r5, r2
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d831e:	6841      	ldr	r1, [r0, #4]
   d8320:	4849      	ldr	r0, [pc, #292]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8322:	f242 3234 	movw	r2, #9012	; 0x2334
   d8326:	f005 fa2d 	bl	dd784 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d832a:	4620      	mov	r0, r4
   d832c:	f242 3234 	movw	r2, #9012	; 0x2334
   d8330:	6861      	ldr	r1, [r4, #4]
   d8332:	f7ff ff1f 	bl	d8174 <_ZN6UbiTCP9reconnectEPKci>

  if (_client_tcp_ubi.connected()) {
   d8336:	4844      	ldr	r0, [pc, #272]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8338:	f005 f94d 	bl	dd5d6 <_ZN9TCPClient9connectedEv>
   d833c:	2800      	cmp	r0, #0
   d833e:	d077      	beq.n	d8430 <_ZN6UbiTCP3getEPKcS1_+0x120>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_tcp_ubi.print(_user_agent);
   d8340:	68a1      	ldr	r1, [r4, #8]
   d8342:	4841      	ldr	r0, [pc, #260]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8344:	f003 ff00 	bl	dc148 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|LV|");
   d8348:	4940      	ldr	r1, [pc, #256]	; (d844c <_ZN6UbiTCP3getEPKcS1_+0x13c>)
   d834a:	483f      	ldr	r0, [pc, #252]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d834c:	f003 fefc 	bl	dc148 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(_token);
   d8350:	68e1      	ldr	r1, [r4, #12]
   d8352:	483d      	ldr	r0, [pc, #244]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8354:	f003 fef8 	bl	dc148 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|");
   d8358:	493d      	ldr	r1, [pc, #244]	; (d8450 <_ZN6UbiTCP3getEPKcS1_+0x140>)
   d835a:	483b      	ldr	r0, [pc, #236]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d835c:	f003 fef4 	bl	dc148 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(device_label);
   d8360:	4631      	mov	r1, r6
   d8362:	4839      	ldr	r0, [pc, #228]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8364:	f003 fef0 	bl	dc148 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(":");
   d8368:	493a      	ldr	r1, [pc, #232]	; (d8454 <_ZN6UbiTCP3getEPKcS1_+0x144>)
   d836a:	4837      	ldr	r0, [pc, #220]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d836c:	f003 feec 	bl	dc148 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(variable_label);
   d8370:	4629      	mov	r1, r5
   d8372:	4835      	ldr	r0, [pc, #212]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8374:	f003 fee8 	bl	dc148 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|end");
   d8378:	4937      	ldr	r1, [pc, #220]	; (d8458 <_ZN6UbiTCP3getEPKcS1_+0x148>)
   d837a:	4833      	ldr	r0, [pc, #204]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d837c:	f003 fee4 	bl	dc148 <_ZN5Print5printEPKc>

    if (_debug) {
   d8380:	7d23      	ldrb	r3, [r4, #20]
   d8382:	b3b3      	cbz	r3, d83f2 <_ZN6UbiTCP3getEPKcS1_+0xe2>
      Serial.println("----");
   d8384:	f004 fe3e 	bl	dd004 <_Z16_fetch_usbserialv>
   d8388:	4934      	ldr	r1, [pc, #208]	; (d845c <_ZN6UbiTCP3getEPKcS1_+0x14c>)
   d838a:	f003 fef4 	bl	dc176 <_ZN5Print7printlnEPKc>
      Serial.println("Payload for request:");
   d838e:	f004 fe39 	bl	dd004 <_Z16_fetch_usbserialv>
   d8392:	4933      	ldr	r1, [pc, #204]	; (d8460 <_ZN6UbiTCP3getEPKcS1_+0x150>)
   d8394:	f003 feef 	bl	dc176 <_ZN5Print7printlnEPKc>
      Serial.print(_user_agent);
   d8398:	f004 fe34 	bl	dd004 <_Z16_fetch_usbserialv>
   d839c:	68a1      	ldr	r1, [r4, #8]
   d839e:	f003 fed3 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("|LV|");
   d83a2:	f004 fe2f 	bl	dd004 <_Z16_fetch_usbserialv>
   d83a6:	4929      	ldr	r1, [pc, #164]	; (d844c <_ZN6UbiTCP3getEPKcS1_+0x13c>)
   d83a8:	f003 fece 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d83ac:	f004 fe2a 	bl	dd004 <_Z16_fetch_usbserialv>
   d83b0:	68e1      	ldr	r1, [r4, #12]
   d83b2:	f003 fec9 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("|");
   d83b6:	f004 fe25 	bl	dd004 <_Z16_fetch_usbserialv>
   d83ba:	4925      	ldr	r1, [pc, #148]	; (d8450 <_ZN6UbiTCP3getEPKcS1_+0x140>)
   d83bc:	f003 fec4 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d83c0:	f004 fe20 	bl	dd004 <_Z16_fetch_usbserialv>
   d83c4:	4631      	mov	r1, r6
   d83c6:	f003 febf 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(":");
   d83ca:	f004 fe1b 	bl	dd004 <_Z16_fetch_usbserialv>
   d83ce:	4921      	ldr	r1, [pc, #132]	; (d8454 <_ZN6UbiTCP3getEPKcS1_+0x144>)
   d83d0:	f003 feba 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d83d4:	f004 fe16 	bl	dd004 <_Z16_fetch_usbserialv>
   d83d8:	4629      	mov	r1, r5
   d83da:	f003 feb5 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("|end");
   d83de:	f004 fe11 	bl	dd004 <_Z16_fetch_usbserialv>
   d83e2:	491d      	ldr	r1, [pc, #116]	; (d8458 <_ZN6UbiTCP3getEPKcS1_+0x148>)
   d83e4:	f003 feb0 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.println("\n----");
   d83e8:	f004 fe0c 	bl	dd004 <_Z16_fetch_usbserialv>
   d83ec:	491d      	ldr	r1, [pc, #116]	; (d8464 <_ZN6UbiTCP3getEPKcS1_+0x154>)
   d83ee:	f003 fec2 	bl	dc176 <_ZN5Print7printlnEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
   d83f2:	4620      	mov	r0, r4
   d83f4:	f7ff ff06 	bl	d8204 <_ZN6UbiTCP16waitServerAnswerEv>
   d83f8:	b928      	cbnz	r0, d8406 <_ZN6UbiTCP3getEPKcS1_+0xf6>
      _client_tcp_ubi.stop();
   d83fa:	4813      	ldr	r0, [pc, #76]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d83fc:	f005 fabe 	bl	dd97c <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
   d8400:	ed9f 0a19 	vldr	s0, [pc, #100]	; d8468 <_ZN6UbiTCP3getEPKcS1_+0x158>
   d8404:	e01d      	b.n	d8442 <_ZN6UbiTCP3getEPKcS1_+0x132>
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d8406:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d840a:	f002 ff7f 	bl	db30c <malloc>
    float value = parseTCPAnswer("LV", response);
   d840e:	4917      	ldr	r1, [pc, #92]	; (d846c <_ZN6UbiTCP3getEPKcS1_+0x15c>)
   d8410:	4602      	mov	r2, r0
      _client_tcp_ubi.stop();
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d8412:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d8414:	4620      	mov	r0, r4
   d8416:	f7ff ff17 	bl	d8248 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d841a:	480b      	ldr	r0, [pc, #44]	; (d8448 <_ZN6UbiTCP3getEPKcS1_+0x138>)
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
    float value = parseTCPAnswer("LV", response);
   d841c:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d8420:	f005 faac 	bl	dd97c <_ZN9TCPClient4stopEv>
    free(response);
   d8424:	4628      	mov	r0, r5
   d8426:	f002 ff79 	bl	db31c <free>
    return value;
   d842a:	eeb0 0a48 	vmov.f32	s0, s16
   d842e:	e008      	b.n	d8442 <_ZN6UbiTCP3getEPKcS1_+0x132>
  }

  if (_debug) {
   d8430:	7d23      	ldrb	r3, [r4, #20]
   d8432:	2b00      	cmp	r3, #0
   d8434:	d0e1      	beq.n	d83fa <_ZN6UbiTCP3getEPKcS1_+0xea>
    Serial.println("ERROR could not connect to the server");
   d8436:	f004 fde5 	bl	dd004 <_Z16_fetch_usbserialv>
   d843a:	490d      	ldr	r1, [pc, #52]	; (d8470 <_ZN6UbiTCP3getEPKcS1_+0x160>)
   d843c:	f003 fe9b 	bl	dc176 <_ZN5Print7printlnEPKc>
   d8440:	e7db      	b.n	d83fa <_ZN6UbiTCP3getEPKcS1_+0xea>
  }

  _client_tcp_ubi.stop();
  return ERROR_VALUE;
}
   d8442:	ecbd 8b02 	vpop	{d8}
   d8446:	bd70      	pop	{r4, r5, r6, pc}
   d8448:	2003e0a8 	.word	0x2003e0a8
   d844c:	000e45e8 	.word	0x000e45e8
   d8450:	000e45eb 	.word	0x000e45eb
   d8454:	000e4744 	.word	0x000e4744
   d8458:	000e4782 	.word	0x000e4782
   d845c:	000e4603 	.word	0x000e4603
   d8460:	000e45ed 	.word	0x000e45ed
   d8464:	000e4602 	.word	0x000e4602
   d8468:	cda2425f 	.word	0xcda2425f
   d846c:	000e4608 	.word	0x000e4608
   d8470:	000e460b 	.word	0x000e460b

000d8474 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
   d8474:	b570      	push	{r4, r5, r6, lr}
   d8476:	ed2d 8b02 	vpush	{d8}
   d847a:	4604      	mov	r4, r0
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d847c:	6841      	ldr	r1, [r0, #4]
   d847e:	4822      	ldr	r0, [pc, #136]	; (d8508 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d8480:	f242 3234 	movw	r2, #9012	; 0x2334
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
   d8484:	461d      	mov	r5, r3
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d8486:	2300      	movs	r3, #0
   d8488:	f005 f97c 	bl	dd784 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d848c:	4620      	mov	r0, r4
   d848e:	f242 3234 	movw	r2, #9012	; 0x2334
   d8492:	6861      	ldr	r1, [r4, #4]
   d8494:	f7ff fe6e 	bl	d8174 <_ZN6UbiTCP9reconnectEPKci>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
   d8498:	481b      	ldr	r0, [pc, #108]	; (d8508 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d849a:	f005 f89c 	bl	dd5d6 <_ZN9TCPClient9connectedEv>
   d849e:	b330      	cbz	r0, d84ee <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x7a>
    _client_tcp_ubi.print(payload);
   d84a0:	4629      	mov	r1, r5
   d84a2:	4819      	ldr	r0, [pc, #100]	; (d8508 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d84a4:	f003 fe50 	bl	dc148 <_ZN5Print5printEPKc>
    _client_tcp_ubi.stop();
    return false;
  }

  /* Waits for the host's answer */
  if (!waitServerAnswer()) {
   d84a8:	4620      	mov	r0, r4
   d84aa:	f7ff feab 	bl	d8204 <_ZN6UbiTCP16waitServerAnswerEv>
   d84ae:	4605      	mov	r5, r0
   d84b0:	b920      	cbnz	r0, d84bc <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x48>
    _client_tcp_ubi.stop();
   d84b2:	4815      	ldr	r0, [pc, #84]	; (d8508 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d84b4:	f005 fa62 	bl	dd97c <_ZN9TCPClient4stopEv>
    return false;
   d84b8:	2500      	movs	r5, #0
   d84ba:	e021      	b.n	d8500 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
   d84bc:	2064      	movs	r0, #100	; 0x64
   d84be:	f002 ff25 	bl	db30c <malloc>

  float value = parseTCPAnswer("POST", response);
   d84c2:	4912      	ldr	r1, [pc, #72]	; (d850c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d84c4:	4602      	mov	r2, r0
    _client_tcp_ubi.stop();
    return false;
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
   d84c6:	4606      	mov	r6, r0

  float value = parseTCPAnswer("POST", response);
   d84c8:	4620      	mov	r0, r4
   d84ca:	f7ff febd 	bl	d8248 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d84ce:	4630      	mov	r0, r6
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);

  float value = parseTCPAnswer("POST", response);
   d84d0:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d84d4:	f002 ff22 	bl	db31c <free>
  if (value != ERROR_VALUE) {
   d84d8:	eddf 7a0d 	vldr	s15, [pc, #52]	; d8510 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d84dc:	eeb4 8a67 	vcmp.f32	s16, s15
   d84e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d84e4:	d0e5      	beq.n	d84b2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d84e6:	4808      	ldr	r0, [pc, #32]	; (d8508 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d84e8:	f005 fa48 	bl	dd97c <_ZN9TCPClient4stopEv>
   d84ec:	e008      	b.n	d8500 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
    _client_tcp_ubi.print(payload);
  } else {
    if (_debug) {
   d84ee:	7d23      	ldrb	r3, [r4, #20]
   d84f0:	2b00      	cmp	r3, #0
   d84f2:	d0de      	beq.n	d84b2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d84f4:	f004 fd86 	bl	dd004 <_Z16_fetch_usbserialv>
   d84f8:	4906      	ldr	r1, [pc, #24]	; (d8514 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d84fa:	f003 fe3c 	bl	dc176 <_ZN5Print7printlnEPKc>
   d84fe:	e7d8      	b.n	d84b2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    return true;
  }

  _client_tcp_ubi.stop();
  return false;
}
   d8500:	ecbd 8b02 	vpop	{d8}
   d8504:	4628      	mov	r0, r5
   d8506:	bd70      	pop	{r4, r5, r6, pc}
   d8508:	2003e0a8 	.word	0x2003e0a8
   d850c:	000e45e0 	.word	0x000e45e0
   d8510:	cda2425f 	.word	0xcda2425f
   d8514:	000e4631 	.word	0x000e4631

000d8518 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d8518:	b510      	push	{r4, lr}
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d851a:	4c06      	ldr	r4, [pc, #24]	; (d8534 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d851c:	f002 fb78 	bl	dac10 <HAL_Pin_Map>
   d8520:	4620      	mov	r0, r4
   d8522:	f005 fae3 	bl	ddaec <_ZN9TCPClientC1Ev>
   d8526:	4620      	mov	r0, r4
   d8528:	4a03      	ldr	r2, [pc, #12]	; (d8538 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d852a:	4904      	ldr	r1, [pc, #16]	; (d853c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
   d852c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8530:	f005 bc56 	b.w	ddde0 <__aeabi_atexit>
   d8534:	2003e0a8 	.word	0x2003e0a8
   d8538:	2003bce8 	.word	0x2003bce8
   d853c:	000d810d 	.word	0x000d810d

000d8540 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context,
                             unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d8540:	b538      	push	{r3, r4, r5, lr}
   d8542:	4604      	mov	r4, r0
  _dirty = true;
   d8544:	2001      	movs	r0, #1
   d8546:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d8548:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d854c:	68e5      	ldr	r5, [r4, #12]
   d854e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d8552:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d8556:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d855a:	68e0      	ldr	r0, [r4, #12]
   d855c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d8560:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d8564:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d8568:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d856c:	68e0      	ldr	r0, [r4, #12]
   d856e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d8572:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d8576:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d8578:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d857c:	68e1      	ldr	r1, [r4, #12]
   d857e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d8582:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d8586:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d8588:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d858c:	68e2      	ldr	r2, [r4, #12]
   d858e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d8592:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d8596:	9a04      	ldr	r2, [sp, #16]
   d8598:	611a      	str	r2, [r3, #16]
  _current_value++;
   d859a:	7c23      	ldrb	r3, [r4, #16]
   d859c:	3301      	adds	r3, #1
   d859e:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d85a0:	2b0a      	cmp	r3, #10
  (_dots + _current_value)->variable_label = variable_label;
  (_dots + _current_value)->dot_value = value;
  (_dots + _current_value)->dot_context = context;
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
  _current_value++;
   d85a2:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d85a4:	dd08      	ble.n	d85b8 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d85a6:	7ca3      	ldrb	r3, [r4, #18]
   d85a8:	b123      	cbz	r3, d85b4 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(
   d85aa:	f004 fd2b 	bl	dd004 <_Z16_fetch_usbserialv>
          F("You are sending more than the maximum of consecutive variables"));
   d85ae:	4903      	ldr	r1, [pc, #12]	; (d85bc <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d85b0:	f003 fde1 	bl	dc176 <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d85b4:	230a      	movs	r3, #10
   d85b6:	7423      	strb	r3, [r4, #16]
   d85b8:	bd38      	pop	{r3, r4, r5, pc}
   d85ba:	bf00      	nop
   d85bc:	000e4664 	.word	0x000e4664

000d85c0 <_ZN18UbiProtocolHandler8setDebugEb>:
/*
  Makes debug messages available
*/

void UbiProtocolHandler::setDebug(bool debug) {
  _debug = debug;
   d85c0:	7481      	strb	r1, [r0, #18]
  _ubiProtocol->setDebug(debug);
   d85c2:	6840      	ldr	r0, [r0, #4]
   d85c4:	6803      	ldr	r3, [r0, #0]
   d85c6:	689b      	ldr	r3, [r3, #8]
   d85c8:	4718      	bx	r3
	...

000d85cc <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d85cc:	b530      	push	{r4, r5, lr}
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d85ce:	ee10 0a10 	vmov	r0, s0
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d85d2:	b087      	sub	sp, #28
   d85d4:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d85d6:	f007 fcf7 	bl	dffc8 <__aeabi_f2d>
   d85da:	ad01      	add	r5, sp, #4
   d85dc:	4602      	mov	r2, r0
   d85de:	460b      	mov	r3, r1
   d85e0:	4628      	mov	r0, r5
   d85e2:	4909      	ldr	r1, [pc, #36]	; (d8608 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x3c>)
   d85e4:	f002 feaa 	bl	db33c <sprintf>
   d85e8:	2200      	movs	r2, #0
  uint8_t j = 0;
  uint8_t k = 0;
   d85ea:	4613      	mov	r3, r2
  while (j < 20) {
    if (temp_arr[j] != ' ') {
   d85ec:	5ca9      	ldrb	r1, [r5, r2]
   d85ee:	2920      	cmp	r1, #32
   d85f0:	d005      	beq.n	d85fe <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
      str_value[k] = temp_arr[j];
   d85f2:	54e1      	strb	r1, [r4, r3]
      k++;
   d85f4:	3301      	adds	r3, #1
   d85f6:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d85f8:	b909      	cbnz	r1, d85fe <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
      str_value[k] = temp_arr[j];
   d85fa:	54e1      	strb	r1, [r4, r3]
      break;
   d85fc:	e002      	b.n	d8604 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x38>
   d85fe:	3201      	adds	r2, #1
void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d8600:	2a14      	cmp	r2, #20
   d8602:	d1f3      	bne.n	d85ec <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
      str_value[k] = temp_arr[j];
      break;
    }
    j++;
  }
   d8604:	b007      	add	sp, #28
   d8606:	bd30      	pop	{r4, r5, pc}
   d8608:	000e46e7 	.word	0x000e46e7

000d860c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
 * @payload [Mandatory] char payload pointer to store the built structure.
 * @timestamp_global [Optional] If set, it will be used for any dot without
 * timestamp.
 */

void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d860c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8610:	460c      	mov	r4, r1
   d8612:	b089      	sub	sp, #36	; 0x24
   d8614:	4605      	mov	r5, r0
  /* Builds the payload */
  sprintf(payload, "{");
   d8616:	4949      	ldr	r1, [pc, #292]	; (d873c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x130>)
   d8618:	4620      	mov	r0, r4
   d861a:	f008 fe23 	bl	e1264 <strcpy>

  for (uint8_t i = 0; i < _current_value;) {
   d861e:	2600      	movs	r6, #0
   d8620:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d8624:	429e      	cmp	r6, r3
   d8626:	da6a      	bge.n	d86fe <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf2>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
   d8628:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   d862c:	68eb      	ldr	r3, [r5, #12]
   d862e:	ea4f 0788 	mov.w	r7, r8, lsl #2
   d8632:	443b      	add	r3, r7
   d8634:	f10d 090c 	add.w	r9, sp, #12
   d8638:	ed93 0a02 	vldr	s0, [r3, #8]
   d863c:	4649      	mov	r1, r9
   d863e:	4628      	mov	r0, r5
   d8640:	f7ff ffc4 	bl	d85cc <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload,
   d8644:	68eb      	ldr	r3, [r5, #12]
            (_dots + i)->variable_label, str_value);
   d8646:	f8cd 9000 	str.w	r9, [sp]
   d864a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   d864e:	493c      	ldr	r1, [pc, #240]	; (d8740 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>)
   d8650:	4622      	mov	r2, r4
   d8652:	4620      	mov	r0, r4
   d8654:	f002 fe72 	bl	db33c <sprintf>

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d8658:	68eb      	ldr	r3, [r5, #12]
   d865a:	443b      	add	r3, r7
   d865c:	68db      	ldr	r3, [r3, #12]
   d865e:	b36b      	cbz	r3, d86bc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload,
              (_dots + i)->dot_timestamp_seconds);
   d8660:	4622      	mov	r2, r4
   d8662:	4938      	ldr	r1, [pc, #224]	; (d8744 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x138>)
   d8664:	4620      	mov	r0, r4
   d8666:	f002 fe69 	bl	db33c <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d866a:	68eb      	ldr	r3, [r5, #12]
   d866c:	443b      	add	r3, r7
   d866e:	691b      	ldr	r3, [r3, #16]
   d8670:	b1fb      	cbz	r3, d86b2 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xa6>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d8672:	200a      	movs	r0, #10
   d8674:	fb93 f1f0 	sdiv	r1, r3, r0
   d8678:	fb91 fcf0 	sdiv	ip, r1, r0
   d867c:	fb00 1c1c 	mls	ip, r0, ip, r1
   d8680:	fb00 3111 	mls	r1, r0, r1, r3
   d8684:	b2c9      	uxtb	r1, r1
   d8686:	2264      	movs	r2, #100	; 0x64
   d8688:	fb93 f2f2 	sdiv	r2, r3, r2
   d868c:	fb92 fef0 	sdiv	lr, r2, r0
   d8690:	fb00 221e 	mls	r2, r0, lr, r2
   d8694:	9100      	str	r1, [sp, #0]
   d8696:	fa5f f38c 	uxtb.w	r3, ip
   d869a:	b2d2      	uxtb	r2, r2
   d869c:	492a      	ldr	r1, [pc, #168]	; (d8748 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
   d869e:	a802      	add	r0, sp, #8
   d86a0:	f002 fe4c 	bl	db33c <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d86a4:	ab02      	add	r3, sp, #8
   d86a6:	4622      	mov	r2, r4
   d86a8:	4928      	ldr	r1, [pc, #160]	; (d874c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d86aa:	4620      	mov	r0, r4
   d86ac:	f002 fe46 	bl	db33c <sprintf>
   d86b0:	e004      	b.n	d86bc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      } else {
        sprintf(payload, "%s000", payload);
   d86b2:	4622      	mov	r2, r4
   d86b4:	4926      	ldr	r1, [pc, #152]	; (d8750 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d86b6:	4620      	mov	r0, r4
   d86b8:	f002 fe40 	bl	db33c <sprintf>
      }
    }

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
   d86bc:	68eb      	ldr	r3, [r5, #12]
   d86be:	441f      	add	r7, r3
   d86c0:	687b      	ldr	r3, [r7, #4]
   d86c2:	b123      	cbz	r3, d86ce <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
   d86c4:	4622      	mov	r2, r4
   d86c6:	4923      	ldr	r1, [pc, #140]	; (d8754 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d86c8:	4620      	mov	r0, r4
   d86ca:	f002 fe37 	bl	db33c <sprintf>
    }

    sprintf(payload, "%s}", payload);
   d86ce:	4622      	mov	r2, r4
   d86d0:	4921      	ldr	r1, [pc, #132]	; (d8758 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d86d2:	4620      	mov	r0, r4
   d86d4:	f002 fe32 	bl	db33c <sprintf>
    i++;
   d86d8:	3601      	adds	r6, #1

    if (i < _current_value) {
   d86da:	f995 3010 	ldrsb.w	r3, [r5, #16]
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
    }

    sprintf(payload, "%s}", payload);
    i++;
   d86de:	b2f6      	uxtb	r6, r6

    if (i < _current_value) {
   d86e0:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d86e2:	4622      	mov	r2, r4
    }

    sprintf(payload, "%s}", payload);
    i++;

    if (i < _current_value) {
   d86e4:	da04      	bge.n	d86f0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
      sprintf(payload, "%s,", payload);
   d86e6:	491d      	ldr	r1, [pc, #116]	; (d875c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d86e8:	4620      	mov	r0, r4
   d86ea:	f002 fe27 	bl	db33c <sprintf>
   d86ee:	e797      	b.n	d8620 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
    } else {
      sprintf(payload, "%s}", payload);
   d86f0:	4919      	ldr	r1, [pc, #100]	; (d8758 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d86f2:	4620      	mov	r0, r4
   d86f4:	f002 fe22 	bl	db33c <sprintf>
      _current_value = 0;
   d86f8:	2300      	movs	r3, #0
   d86fa:	742b      	strb	r3, [r5, #16]

void UbiProtocolHandler::buildHttpPayload(char* payload) {
  /* Builds the payload */
  sprintf(payload, "{");

  for (uint8_t i = 0; i < _current_value;) {
   d86fc:	e790      	b.n	d8620 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
      sprintf(payload, "%s}", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
   d86fe:	7cab      	ldrb	r3, [r5, #18]
   d8700:	b1c3      	cbz	r3, d8734 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x128>
    Serial.println("----------");
   d8702:	f004 fc7f 	bl	dd004 <_Z16_fetch_usbserialv>
   d8706:	4916      	ldr	r1, [pc, #88]	; (d8760 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d8708:	f003 fd35 	bl	dc176 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d870c:	f004 fc7a 	bl	dd004 <_Z16_fetch_usbserialv>
   d8710:	4914      	ldr	r1, [pc, #80]	; (d8764 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d8712:	f003 fd30 	bl	dc176 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d8716:	f004 fc75 	bl	dd004 <_Z16_fetch_usbserialv>
   d871a:	4621      	mov	r1, r4
   d871c:	f003 fd2b 	bl	dc176 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d8720:	f004 fc70 	bl	dd004 <_Z16_fetch_usbserialv>
   d8724:	490e      	ldr	r1, [pc, #56]	; (d8760 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d8726:	f003 fd26 	bl	dc176 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d872a:	f004 fc6b 	bl	dd004 <_Z16_fetch_usbserialv>
   d872e:	490e      	ldr	r1, [pc, #56]	; (d8768 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d8730:	f003 fd21 	bl	dc176 <_ZN5Print7printlnEPKc>
  }
}
   d8734:	b009      	add	sp, #36	; 0x24
   d8736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d873a:	bf00      	nop
   d873c:	000e46ec 	.word	0x000e46ec
   d8740:	000e46ee 	.word	0x000e46ee
   d8744:	000e4701 	.word	0x000e4701
   d8748:	000e4714 	.word	0x000e4714
   d874c:	000e471b 	.word	0x000e471b
   d8750:	000e4720 	.word	0x000e4720
   d8754:	000e4726 	.word	0x000e4726
   d8758:	000e4735 	.word	0x000e4735
   d875c:	000e4739 	.word	0x000e4739
   d8760:	000e45d5 	.word	0x000e45d5
   d8764:	000e473d 	.word	0x000e473d
   d8768:	000e4a27 	.word	0x000e4a27

000d876c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
 * timestamp.
 */

void UbiProtocolHandler::buildTcpPayload(char* payload,
                                         const char* device_label,
                                         const char* device_name) {
   d876c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8770:	460c      	mov	r4, r1
   d8772:	4605      	mov	r5, r0
   d8774:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d8776:	4950      	ldr	r1, [pc, #320]	; (d88b8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14c>)
   d8778:	4620      	mov	r0, r4
 * timestamp.
 */

void UbiProtocolHandler::buildTcpPayload(char* payload,
                                         const char* device_label,
                                         const char* device_name) {
   d877a:	4616      	mov	r6, r2
   d877c:	461f      	mov	r7, r3
  sprintf(payload, "");
   d877e:	f008 fd71 	bl	e1264 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d8782:	68ab      	ldr	r3, [r5, #8]
   d8784:	4a4d      	ldr	r2, [pc, #308]	; (d88bc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x150>)
   d8786:	494e      	ldr	r1, [pc, #312]	; (d88c0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d8788:	4620      	mov	r0, r4
   d878a:	f002 fdd7 	bl	db33c <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d878e:	4633      	mov	r3, r6
   d8790:	4622      	mov	r2, r4
   d8792:	494c      	ldr	r1, [pc, #304]	; (d88c4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d8794:	9700      	str	r7, [sp, #0]
   d8796:	4620      	mov	r0, r4
   d8798:	f002 fdd0 	bl	db33c <sprintf>

  sprintf(payload, "%s=>", payload);
   d879c:	4622      	mov	r2, r4
   d879e:	494a      	ldr	r1, [pc, #296]	; (d88c8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d87a0:	4620      	mov	r0, r4
   d87a2:	f002 fdcb 	bl	db33c <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d87a6:	2600      	movs	r6, #0
   d87a8:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d87ac:	429e      	cmp	r6, r3
   d87ae:	da64      	bge.n	d887a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10e>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
   d87b0:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   d87b4:	68eb      	ldr	r3, [r5, #12]
   d87b6:	ea4f 0788 	mov.w	r7, r8, lsl #2
   d87ba:	443b      	add	r3, r7
   d87bc:	f10d 090c 	add.w	r9, sp, #12
   d87c0:	ed93 0a02 	vldr	s0, [r3, #8]
   d87c4:	4649      	mov	r1, r9
   d87c6:	4628      	mov	r0, r5
   d87c8:	f7ff ff00 	bl	d85cc <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label,
   d87cc:	68eb      	ldr	r3, [r5, #12]
            str_value);
   d87ce:	f8cd 9000 	str.w	r9, [sp]
   d87d2:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   d87d6:	493b      	ldr	r1, [pc, #236]	; (d88c4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d87d8:	4622      	mov	r2, r4
   d87da:	4620      	mov	r0, r4
   d87dc:	f002 fdae 	bl	db33c <sprintf>

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
   d87e0:	68eb      	ldr	r3, [r5, #12]
   d87e2:	443b      	add	r3, r7
   d87e4:	685b      	ldr	r3, [r3, #4]
   d87e6:	b123      	cbz	r3, d87f2 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x86>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d87e8:	4622      	mov	r2, r4
   d87ea:	4938      	ldr	r1, [pc, #224]	; (d88cc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d87ec:	4620      	mov	r0, r4
   d87ee:	f002 fda5 	bl	db33c <sprintf>
    }

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d87f2:	68eb      	ldr	r3, [r5, #12]
   d87f4:	443b      	add	r3, r7
   d87f6:	68db      	ldr	r3, [r3, #12]
   d87f8:	b363      	cbz	r3, d8854 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe8>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d87fa:	4622      	mov	r2, r4
   d87fc:	4934      	ldr	r1, [pc, #208]	; (d88d0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
   d87fe:	4620      	mov	r0, r4
   d8800:	f002 fd9c 	bl	db33c <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d8804:	68eb      	ldr	r3, [r5, #12]
   d8806:	441f      	add	r7, r3
   d8808:	693f      	ldr	r7, [r7, #16]
   d880a:	b1f7      	cbz	r7, d884a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xde>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d880c:	200a      	movs	r0, #10
   d880e:	fb97 f1f0 	sdiv	r1, r7, r0
   d8812:	fb91 f3f0 	sdiv	r3, r1, r0
   d8816:	fb00 1313 	mls	r3, r0, r3, r1
   d881a:	fb00 7111 	mls	r1, r0, r1, r7
   d881e:	b2c9      	uxtb	r1, r1
   d8820:	2264      	movs	r2, #100	; 0x64
   d8822:	fb97 f2f2 	sdiv	r2, r7, r2
   d8826:	fb92 fef0 	sdiv	lr, r2, r0
   d882a:	fb00 221e 	mls	r2, r0, lr, r2
   d882e:	9100      	str	r1, [sp, #0]
   d8830:	b2db      	uxtb	r3, r3
   d8832:	b2d2      	uxtb	r2, r2
   d8834:	4927      	ldr	r1, [pc, #156]	; (d88d4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d8836:	a802      	add	r0, sp, #8
   d8838:	f002 fd80 	bl	db33c <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d883c:	ab02      	add	r3, sp, #8
   d883e:	4622      	mov	r2, r4
   d8840:	4925      	ldr	r1, [pc, #148]	; (d88d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d8842:	4620      	mov	r0, r4
   d8844:	f002 fd7a 	bl	db33c <sprintf>
   d8848:	e004      	b.n	d8854 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe8>
      } else {
        sprintf(payload, "%s000", payload);
   d884a:	4622      	mov	r2, r4
   d884c:	4923      	ldr	r1, [pc, #140]	; (d88dc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d884e:	4620      	mov	r0, r4
   d8850:	f002 fd74 	bl	db33c <sprintf>
      }
    }

    i++;
   d8854:	3601      	adds	r6, #1

    if (i < _current_value) {
   d8856:	f995 3010 	ldrsb.w	r3, [r5, #16]
      } else {
        sprintf(payload, "%s000", payload);
      }
    }

    i++;
   d885a:	b2f6      	uxtb	r6, r6

    if (i < _current_value) {
   d885c:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d885e:	4622      	mov	r2, r4
      }
    }

    i++;

    if (i < _current_value) {
   d8860:	da04      	bge.n	d886c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x100>
      sprintf(payload, "%s,", payload);
   d8862:	491f      	ldr	r1, [pc, #124]	; (d88e0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d8864:	4620      	mov	r0, r4
   d8866:	f002 fd69 	bl	db33c <sprintf>
   d886a:	e79d      	b.n	d87a8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
    } else {
      sprintf(payload, "%s|end", payload);
   d886c:	491d      	ldr	r1, [pc, #116]	; (d88e4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d886e:	4620      	mov	r0, r4
   d8870:	f002 fd64 	bl	db33c <sprintf>
      _current_value = 0;
   d8874:	2300      	movs	r3, #0
   d8876:	742b      	strb	r3, [r5, #16]
  sprintf(payload, "");
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);

  sprintf(payload, "%s=>", payload);
  for (uint8_t i = 0; i < _current_value;) {
   d8878:	e796      	b.n	d87a8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
      sprintf(payload, "%s|end", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
   d887a:	7cab      	ldrb	r3, [r5, #18]
   d887c:	b1c3      	cbz	r3, d88b0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x144>
    Serial.println("----------");
   d887e:	f004 fbc1 	bl	dd004 <_Z16_fetch_usbserialv>
   d8882:	4919      	ldr	r1, [pc, #100]	; (d88e8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d8884:	f003 fc77 	bl	dc176 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d8888:	f004 fbbc 	bl	dd004 <_Z16_fetch_usbserialv>
   d888c:	4917      	ldr	r1, [pc, #92]	; (d88ec <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d888e:	f003 fc72 	bl	dc176 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d8892:	f004 fbb7 	bl	dd004 <_Z16_fetch_usbserialv>
   d8896:	4621      	mov	r1, r4
   d8898:	f003 fc6d 	bl	dc176 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d889c:	f004 fbb2 	bl	dd004 <_Z16_fetch_usbserialv>
   d88a0:	4911      	ldr	r1, [pc, #68]	; (d88e8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d88a2:	f003 fc68 	bl	dc176 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d88a6:	f004 fbad 	bl	dd004 <_Z16_fetch_usbserialv>
   d88aa:	4903      	ldr	r1, [pc, #12]	; (d88b8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14c>)
   d88ac:	f003 fc63 	bl	dc176 <_ZN5Print7printlnEPKc>
  }
}
   d88b0:	b009      	add	sp, #36	; 0x24
   d88b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d88b6:	bf00      	nop
   d88b8:	000e4a27 	.word	0x000e4a27
   d88bc:	000e4746 	.word	0x000e4746
   d88c0:	000e475a 	.word	0x000e475a
   d88c4:	000e4766 	.word	0x000e4766
   d88c8:	000e476e 	.word	0x000e476e
   d88cc:	000e4773 	.word	0x000e4773
   d88d0:	000e4779 	.word	0x000e4779
   d88d4:	000e4714 	.word	0x000e4714
   d88d8:	000e471b 	.word	0x000e471b
   d88dc:	000e4720 	.word	0x000e4720
   d88e0:	000e4739 	.word	0x000e4739
   d88e4:	000e4780 	.word	0x000e4780
   d88e8:	000e45d5 	.word	0x000e45d5
   d88ec:	000e473d 	.word	0x000e473d

000d88f0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
   d88f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d88f4:	4604      	mov	r4, r0
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d88f6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
   d88fa:	461f      	mov	r7, r3
   d88fc:	460e      	mov	r6, r1
   d88fe:	4690      	mov	r8, r2
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d8900:	f002 fd04 	bl	db30c <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d8904:	7ce3      	ldrb	r3, [r4, #19]
   d8906:	3b01      	subs	r3, #1
   d8908:	2b01      	cmp	r3, #1
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d890a:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d890c:	d806      	bhi.n	d891c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2c>
    buildTcpPayload(payload, device_label, device_name);
   d890e:	4601      	mov	r1, r0
   d8910:	4643      	mov	r3, r8
   d8912:	4632      	mov	r2, r6
   d8914:	4620      	mov	r0, r4
   d8916:	f7ff ff29 	bl	d876c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
   d891a:	e003      	b.n	d8924 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x34>
  } else {
    buildHttpPayload(payload);
   d891c:	4601      	mov	r1, r0
   d891e:	4620      	mov	r0, r4
   d8920:	f7ff fe74 	bl	d860c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
  }

  // Sends data
  if (_debug) {
   d8924:	7ca3      	ldrb	r3, [r4, #18]
   d8926:	b123      	cbz	r3, d8932 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x42>
    Serial.println("Sending data...");
   d8928:	f004 fb6c 	bl	dd004 <_Z16_fetch_usbserialv>
   d892c:	490d      	ldr	r1, [pc, #52]	; (d8964 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x74>)
   d892e:	f003 fc22 	bl	dc176 <_ZN5Print7printlnEPKc>
  }

  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d8932:	6860      	ldr	r0, [r4, #4]
   d8934:	6803      	ldr	r3, [r0, #0]
   d8936:	9700      	str	r7, [sp, #0]
   d8938:	4631      	mov	r1, r6
   d893a:	4642      	mov	r2, r8
   d893c:	f8d3 9000 	ldr.w	r9, [r3]
   d8940:	462b      	mov	r3, r5
   d8942:	47c8      	blx	r9
   d8944:	4606      	mov	r6, r0
  free(payload);
   d8946:	4628      	mov	r0, r5
   d8948:	f002 fce8 	bl	db31c <free>
  delete flags;
   d894c:	2101      	movs	r1, #1
   d894e:	4638      	mov	r0, r7
   d8950:	f005 fa54 	bl	dddfc <_ZdlPvj>
   d8954:	2300      	movs	r3, #0
  if (result) {
   d8956:	b106      	cbz	r6, d895a <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6a>
    _dirty = false;
   d8958:	7463      	strb	r3, [r4, #17]
    _current_value = 0;
  }

  _current_value = 0;
  return result;
}
   d895a:	4630      	mov	r0, r6
  if (result) {
    _dirty = false;
    _current_value = 0;
  }

  _current_value = 0;
   d895c:	7423      	strb	r3, [r4, #16]
  return result;
}
   d895e:	b003      	add	sp, #12
   d8960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8964:	000e4787 	.word	0x000e4787

000d8968 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
                              const char* device_name) {
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d8968:	b570      	push	{r4, r5, r6, lr}
   d896a:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d896c:	2001      	movs	r0, #1
                              const char* device_name) {
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d896e:	460d      	mov	r5, r1
   d8970:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   d8972:	f7fb fb92 	bl	d409a <_Znwj>
  flags->particle_flag = flag;
   d8976:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
  UbiFlags* flags = new UbiFlags();
   d8978:	4603      	mov	r3, r0
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
   d897a:	462a      	mov	r2, r5
   d897c:	4629      	mov	r1, r5
   d897e:	4620      	mov	r0, r4
}
   d8980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
  UbiFlags* flags = new UbiFlags();
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
   d8984:	f7ff bfb4 	b.w	d88f0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000d8988 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d8988:	b570      	push	{r4, r5, r6, lr}
   d898a:	4606      	mov	r6, r0
   d898c:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d898e:	b184      	cbz	r4, d89b2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	{
	  _M_erase(_S_right(__x));
   d8990:	68e1      	ldr	r1, [r4, #12]
   d8992:	4630      	mov	r0, r6
   d8994:	f7ff fff8 	bl	d8988 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8998:	69e3      	ldr	r3, [r4, #28]
   d899a:	68a5      	ldr	r5, [r4, #8]
   d899c:	b123      	cbz	r3, d89a8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d899e:	f104 0114 	add.w	r1, r4, #20
   d89a2:	2203      	movs	r2, #3
   d89a4:	4608      	mov	r0, r1
   d89a6:	4798      	blx	r3
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d89a8:	4620      	mov	r0, r4
   d89aa:	f7fb fb7a 	bl	d40a2 <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   d89ae:	462c      	mov	r4, r5
   d89b0:	e7ed      	b.n	d898e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
   d89b2:	bd70      	pop	{r4, r5, r6, pc}

000d89b4 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
                                       IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
   d89b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d89b6:	b08d      	sub	sp, #52	; 0x34
   d89b8:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d89ba:	a801      	add	r0, sp, #4
   d89bc:	460d      	mov	r5, r1
   d89be:	4617      	mov	r7, r2
   d89c0:	461e      	mov	r6, r3
   d89c2:	f002 fc83 	bl	db2cc <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d89c6:	9803      	ldr	r0, [sp, #12]
   d89c8:	3001      	adds	r0, #1
   d89ca:	f7fb fb68 	bl	d409e <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d89ce:	9901      	ldr	r1, [sp, #4]
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d89d0:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d89d2:	f008 fc47 	bl	e1264 <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
   d89d6:	462a      	mov	r2, r5
   d89d8:	4633      	mov	r3, r6
   d89da:	4639      	mov	r1, r7
void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
   d89dc:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d89de:	a805      	add	r0, sp, #20
   d89e0:	f000 fd8e 	bl	d9500 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d89e4:	20c8      	movs	r0, #200	; 0xc8
   d89e6:	f002 fc91 	bl	db30c <malloc>
   d89ea:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d89ec:	a805      	add	r0, sp, #20
   d89ee:	f000 fc95 	bl	d931c <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
   d89f2:	2300      	movs	r3, #0
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
   d89f4:	6060      	str	r0, [r4, #4]
  _token = token;
  _current_value = 0;
   d89f6:	7423      	strb	r3, [r4, #16]

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
   d89f8:	9908      	ldr	r1, [sp, #32]
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
   d89fa:	60a5      	str	r5, [r4, #8]
   d89fc:	a806      	add	r0, sp, #24
   d89fe:	f7ff ffc3 	bl	d8988 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
   d8a02:	a801      	add	r0, sp, #4
   d8a04:	f003 f9b6 	bl	dbd74 <_ZN6StringD1Ev>
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
  _current_value = 0;
}
   d8a08:	b00d      	add	sp, #52	; 0x34
   d8a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8a0c <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, IotProtocol iot_protocol) {
  builder(token, UBI_INDUSTRIAL, iot_protocol);
}

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
   d8a0c:	b538      	push	{r3, r4, r5, lr}
                                       IotProtocol iot_protocol) {
   d8a0e:	2500      	movs	r5, #0

UbiProtocolHandler::UbiProtocolHandler(char* token, IotProtocol iot_protocol) {
  builder(token, UBI_INDUSTRIAL, iot_protocol);
}

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
   d8a10:	4604      	mov	r4, r0
                                       IotProtocol iot_protocol) {
   d8a12:	7405      	strb	r5, [r0, #16]
   d8a14:	7445      	strb	r5, [r0, #17]
  builder(token, server, iot_protocol);
   d8a16:	f7ff ffcd 	bl	d89b4 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d8a1a:	4620      	mov	r0, r4
   d8a1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8a20 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
   d8a20:	4b02      	ldr	r3, [pc, #8]	; (d8a2c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
   d8a22:	2200      	movs	r2, #0
   d8a24:	701a      	strb	r2, [r3, #0]
   d8a26:	f002 b8f3 	b.w	dac10 <HAL_Pin_Map>
   d8a2a:	bf00      	nop
   d8a2c:	2003e0c4 	.word	0x2003e0c4

000d8a30 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d8a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8a34:	4604      	mov	r4, r0
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d8a36:	2050      	movs	r0, #80	; 0x50
Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
  _iotProtocol = iotProtocol;
   d8a38:	7323      	strb	r3, [r4, #12]

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d8a3a:	460d      	mov	r5, r1
   d8a3c:	4616      	mov	r6, r2
   d8a3e:	461f      	mov	r7, r3
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d8a40:	f002 fc64 	bl	db30c <malloc>
   d8a44:	60a0      	str	r0, [r4, #8]

// Electron and photon do not support Mesh
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  _protocolMesh = new UbiMesh(token);
   d8a46:	f44f 7082 	mov.w	r0, #260	; 0x104
   d8a4a:	f7fb fb26 	bl	d409a <_Znwj>
   d8a4e:	4680      	mov	r8, r0
   d8a50:	b110      	cbz	r0, d8a58 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d8a52:	4629      	mov	r1, r5
   d8a54:	f000 fdda 	bl	d960c <_ZN7UbiMeshC1EPc>
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d8a58:	7b23      	ldrb	r3, [r4, #12]

// Electron and photon do not support Mesh
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  _protocolMesh = new UbiMesh(token);
   d8a5a:	f8c4 8000 	str.w	r8, [r4]
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d8a5e:	2b04      	cmp	r3, #4
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d8a60:	f04f 0014 	mov.w	r0, #20
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d8a64:	d00c      	beq.n	d8a80 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x50>
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d8a66:	f7fb fb18 	bl	d409a <_Znwj>
   d8a6a:	4680      	mov	r8, r0
   d8a6c:	b120      	cbz	r0, d8a78 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x48>
   d8a6e:	463b      	mov	r3, r7
   d8a70:	4632      	mov	r2, r6
   d8a72:	4629      	mov	r1, r5
   d8a74:	f7ff ffca 	bl	d8a0c <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d8a78:	f8c4 8004 	str.w	r8, [r4, #4]
   d8a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else {
    // Default is TCP
    _cloudProtocol = new UbiProtocolHandler(token, server, UBI_TCP);
   d8a80:	f7fb fb0b 	bl	d409a <_Znwj>
   d8a84:	4607      	mov	r7, r0
   d8a86:	b120      	cbz	r0, d8a92 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x62>
   d8a88:	2301      	movs	r3, #1
   d8a8a:	4632      	mov	r2, r6
   d8a8c:	4629      	mov	r1, r5
   d8a8e:	f7ff ffbd 	bl	d8a0c <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d8a92:	6067      	str	r7, [r4, #4]
   d8a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8a98 <_ZN7UbidotsC1EPc11IotProtocol>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) {
   d8a98:	b510      	push	{r4, lr}
   d8a9a:	2300      	movs	r3, #0
   d8a9c:	4604      	mov	r4, r0
   d8a9e:	7343      	strb	r3, [r0, #13]
   d8aa0:	7383      	strb	r3, [r0, #14]
  _builder(token, UBI_INDUSTRIAL, iotProtocol);
   d8aa2:	4613      	mov	r3, r2
   d8aa4:	4a02      	ldr	r2, [pc, #8]	; (d8ab0 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d8aa6:	f7ff ffc3 	bl	d8a30 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
}
   d8aaa:	4620      	mov	r0, r4
   d8aac:	bd10      	pop	{r4, pc}
   d8aae:	bf00      	nop
   d8ab0:	000e4797 	.word	0x000e4797

000d8ab4 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d8ab4:	b538      	push	{r3, r4, r5, lr}
   d8ab6:	4604      	mov	r4, r0
  free(_context);
   d8ab8:	6880      	ldr	r0, [r0, #8]
   d8aba:	f002 fc2f 	bl	db31c <free>
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  delete _protocolMesh;
   d8abe:	6825      	ldr	r5, [r4, #0]
   d8ac0:	b13d      	cbz	r5, d8ad2 <_ZN7UbidotsD1Ev+0x1e>
   d8ac2:	4628      	mov	r0, r5
   d8ac4:	f000 fdba 	bl	d963c <_ZN7UbiMeshD1Ev>
   d8ac8:	f44f 7182 	mov.w	r1, #260	; 0x104
   d8acc:	4628      	mov	r0, r5
   d8ace:	f005 f995 	bl	dddfc <_ZdlPvj>
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  delete _cloudProtocol;
#endif
}
   d8ad2:	4620      	mov	r0, r4
   d8ad4:	bd38      	pop	{r3, r4, r5, pc}

000d8ad6 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d8ad6:	b430      	push	{r4, r5}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
   d8ad8:	7b05      	ldrb	r5, [r0, #12]
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d8ada:	9c02      	ldr	r4, [sp, #8]
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
   d8adc:	2d04      	cmp	r5, #4
   d8ade:	d103      	bne.n	d8ae8 <_ZN7Ubidots3addEPcfS0_mj+0x12>
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
   d8ae0:	6800      	ldr	r0, [r0, #0]
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
   d8ae2:	bc30      	pop	{r4, r5}
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
   d8ae4:	f000 bdb2 	b.w	d964c <_ZN7UbiMesh3addEPKcfS1_mj>
  } else {
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
   d8ae8:	9402      	str	r4, [sp, #8]
   d8aea:	6840      	ldr	r0, [r0, #4]
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
   d8aec:	bc30      	pop	{r4, r5}
  if (_iotProtocol == UBI_MESH) {
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
  } else {
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
   d8aee:	f7ff bd27 	b.w	d8540 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d8af2 <_ZN7Ubidots3addEPcf>:
 * datalogger. Default NULL
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void Ubidots::add(char* variable_label, float value) {
   d8af2:	b507      	push	{r0, r1, r2, lr}
  add(variable_label, value, NULL, NULL, NULL);
   d8af4:	2300      	movs	r3, #0
   d8af6:	9300      	str	r3, [sp, #0]
   d8af8:	461a      	mov	r2, r3
   d8afa:	f7ff ffec 	bl	d8ad6 <_ZN7Ubidots3addEPcfS0_mj>
}
   d8afe:	b003      	add	sp, #12
   d8b00:	f85d fb04 	ldr.w	pc, [sp], #4

000d8b04 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool Ubidots::send(const char* device_label, PublishFlags flag) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                             \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                      \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  return _cloudProtocol->send(device_label, flag);
   d8b04:	6840      	ldr	r0, [r0, #4]
   d8b06:	f7ff bf2f 	b.w	d8968 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>

000d8b0a <_ZN7Ubidots8setDebugEb>:
}

void Ubidots::setDebug(bool debug) {
  _debug = debug;
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol != UBI_MESH) {
   d8b0a:	7b03      	ldrb	r3, [r0, #12]
  return ERROR_VALUE;
#endif
}

void Ubidots::setDebug(bool debug) {
  _debug = debug;
   d8b0c:	7381      	strb	r1, [r0, #14]
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol != UBI_MESH) {
   d8b0e:	2b04      	cmp	r3, #4
   d8b10:	d002      	beq.n	d8b18 <_ZN7Ubidots8setDebugEb+0xe>
    _cloudProtocol->setDebug(debug);
   d8b12:	6840      	ldr	r0, [r0, #4]
   d8b14:	f7ff bd54 	b.w	d85c0 <_ZN18UbiProtocolHandler8setDebugEb>
  } else {
    _protocolMesh->setDebug(debug);
   d8b18:	6800      	ldr	r0, [r0, #0]
   d8b1a:	f000 bdeb 	b.w	d96f4 <_ZN7UbiMesh8setDebugEb>

000d8b1e <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
      }
    }
  }
   d8b1e:	b508      	push	{r3, lr}
   d8b20:	f002 f876 	bl	dac10 <HAL_Pin_Map>
   d8b24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d8b28:	f002 b91a 	b.w	dad60 <HAL_Timer_Get_Milli_Seconds>

000d8b2c <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

   d8b2c:	7501      	strb	r1, [r0, #20]
   d8b2e:	4770      	bx	lr

000d8b30 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>:
    attempts += 1;
    delay(1000);
  }
}

float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d8b30:	b570      	push	{r4, r5, r6, lr}
   d8b32:	4604      	mov	r4, r0
  float result = ERROR_VALUE;

  // LV
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d8b34:	2014      	movs	r0, #20
   d8b36:	f002 fbe9 	bl	db30c <malloc>
   d8b3a:	4606      	mov	r6, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d8b3c:	2014      	movs	r0, #20
   d8b3e:	f002 fbe5 	bl	db30c <malloc>
   d8b42:	4605      	mov	r5, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d8b44:	4620      	mov	r0, r4
   d8b46:	f009 f8c5 	bl	e1cd4 <strlen>
   d8b4a:	4622      	mov	r2, r4

    for (int i = 0; i < len - 2; i++) {
   d8b4c:	2300      	movs	r3, #0
   d8b4e:	3802      	subs	r0, #2
   d8b50:	4298      	cmp	r0, r3
   d8b52:	dd17      	ble.n	d8b84 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') &&
   d8b54:	f812 1b01 	ldrb.w	r1, [r2], #1
   d8b58:	290d      	cmp	r1, #13
   d8b5a:	d111      	bne.n	d8b80 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d8b5c:	7811      	ldrb	r1, [r2, #0]
   d8b5e:	290a      	cmp	r1, #10
   d8b60:	d10e      	bne.n	d8b80 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d8b62:	7851      	ldrb	r1, [r2, #1]
   d8b64:	290d      	cmp	r1, #13
   d8b66:	d10b      	bne.n	d8b80 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d8b68:	7891      	ldrb	r1, [r2, #2]
   d8b6a:	290a      	cmp	r1, #10
   d8b6c:	d108      	bne.n	d8b80 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
          (data[i + 3] == '\n')) {
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d8b6e:	1d19      	adds	r1, r3, #4
   d8b70:	2214      	movs	r2, #20
   d8b72:	4421      	add	r1, r4
   d8b74:	4630      	mov	r0, r6
   d8b76:	f009 f8ca 	bl	e1d0e <strncpy>
        parsed[20] = '\0';
   d8b7a:	2300      	movs	r3, #0
   d8b7c:	7533      	strb	r3, [r6, #20]
   d8b7e:	e001      	b.n	d8b84 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
    char* dst = (char*)malloc(sizeof(char) * 20);
    int len = strlen(data);  // Length of the answer char array from the server

    for (int i = 0; i < len - 2; i++) {
   d8b80:	3301      	adds	r3, #1
   d8b82:	e7e5      	b.n	d8b50 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x20>
    /* Extracts the the value */

    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
   d8b84:	210a      	movs	r1, #10
   d8b86:	4630      	mov	r0, r6
   d8b88:	f008 fb54 	bl	e1234 <strchr>
    if (pch == NULL) {
   d8b8c:	4604      	mov	r4, r0
   d8b8e:	b300      	cbz	r0, d8bd2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa2>
      return result;
    }

    char* pch2 = strchr(pch + 1, '\n');
   d8b90:	210a      	movs	r1, #10
   d8b92:	3001      	adds	r0, #1
   d8b94:	f008 fb4e 	bl	e1234 <strchr>

    if (pch2 == NULL) {
   d8b98:	b1d8      	cbz	r0, d8bd2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa2>
      return result;
    }

    index = (int)(pch2 - pch - 1);

    sprintf(dst, "%s", pch);
   d8b9a:	4621      	mov	r1, r4
   d8b9c:	4628      	mov	r0, r5
   d8b9e:	f008 fb61 	bl	e1264 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d8ba2:	4628      	mov	r0, r5
   d8ba4:	f009 f896 	bl	e1cd4 <strlen>
   d8ba8:	4428      	add	r0, r5
   d8baa:	2300      	movs	r3, #0
   d8bac:	f800 3c01 	strb.w	r3, [r0, #-1]

    float result = atof(dst);
   d8bb0:	4628      	mov	r0, r5
   d8bb2:	f007 ff91 	bl	e0ad8 <atof>
   d8bb6:	ec51 0b10 	vmov	r0, r1, d0
   d8bba:	f007 fd51 	bl	e0660 <__aeabi_d2f>
   d8bbe:	4604      	mov	r4, r0

    free(dst);
   d8bc0:	4628      	mov	r0, r5
   d8bc2:	f002 fbab 	bl	db31c <free>
    free(parsed);
   d8bc6:	4630      	mov	r0, r6
   d8bc8:	f002 fba8 	bl	db31c <free>
    return result;
   d8bcc:	ee00 4a10 	vmov	s0, r4
   d8bd0:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
    if (pch == NULL) {
      return result;
   d8bd2:	ed9f 0a01 	vldr	s0, [pc, #4]	; d8bd8 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa8>
    free(parsed);
    return result;
  }

  return ERROR_VALUE;
}
   d8bd6:	bd70      	pop	{r4, r5, r6, pc}
   d8bd8:	cda2425f 	.word	0xcda2425f

000d8bdc <_ZN7UbiHTTPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
   d8bdc:	b530      	push	{r4, r5, lr}
                 const char* token) {
   d8bde:	4d07      	ldr	r5, [pc, #28]	; (d8bfc <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d8be0:	6005      	str	r5, [r0, #0]
   d8be2:	2500      	movs	r5, #0
   d8be4:	7505      	strb	r5, [r0, #20]
   d8be6:	f241 3588 	movw	r5, #5000	; 0x1388
   d8bea:	6185      	str	r5, [r0, #24]
  _host = host;
  _user_agent = user_agent;
   d8bec:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
   d8bee:	2505      	movs	r5, #5
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d8bf0:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
   d8bf2:	7705      	strb	r5, [r0, #28]
  _host = host;
   d8bf4:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d8bf6:	60c3      	str	r3, [r0, #12]
  _port = port;
   d8bf8:	6102      	str	r2, [r0, #16]
}
   d8bfa:	bd30      	pop	{r4, r5, pc}
   d8bfc:	000e48c0 	.word	0x000e48c0

000d8c00 <_ZN7UbiHTTP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
   d8c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8c04:	4605      	mov	r5, r0
   d8c06:	460f      	mov	r7, r1
   d8c08:	4690      	mov	r8, r2
   d8c0a:	2400      	movs	r4, #0
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d8c0c:	481d      	ldr	r0, [pc, #116]	; (d8c84 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
   d8c0e:	b2e6      	uxtb	r6, r4
   d8c10:	f004 fce1 	bl	dd5d6 <_ZN9TCPClient9connectedEv>
   d8c14:	bb98      	cbnz	r0, d8c7e <_ZN7UbiHTTP9reconnectEPKci+0x7e>
   d8c16:	7f2b      	ldrb	r3, [r5, #28]
   d8c18:	42b3      	cmp	r3, r6
   d8c1a:	d801      	bhi.n	d8c20 <_ZN7UbiHTTP9reconnectEPKci+0x20>
   d8c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (_debug) {
   d8c20:	7d2b      	ldrb	r3, [r5, #20]
   d8c22:	b1c3      	cbz	r3, d8c56 <_ZN7UbiHTTP9reconnectEPKci+0x56>
      Serial.print("Trying to connect to ");
   d8c24:	f004 f9ee 	bl	dd004 <_Z16_fetch_usbserialv>
   d8c28:	4917      	ldr	r1, [pc, #92]	; (d8c88 <_ZN7UbiHTTP9reconnectEPKci+0x88>)
   d8c2a:	f003 fa8d 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(host);
   d8c2e:	f004 f9e9 	bl	dd004 <_Z16_fetch_usbserialv>
   d8c32:	4639      	mov	r1, r7
   d8c34:	f003 fa88 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d8c38:	f004 f9e4 	bl	dd004 <_Z16_fetch_usbserialv>
   d8c3c:	4913      	ldr	r1, [pc, #76]	; (d8c8c <_ZN7UbiHTTP9reconnectEPKci+0x8c>)
   d8c3e:	f003 fa83 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d8c42:	f004 f9df 	bl	dd004 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8c46:	220a      	movs	r2, #10
   d8c48:	4681      	mov	r9, r0
   d8c4a:	4631      	mov	r1, r6
   d8c4c:	f003 fa9f 	bl	dc18e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d8c50:	4648      	mov	r0, r9
   d8c52:	f003 fa84 	bl	dc15e <_ZN5Print7printlnEv>
    }
    _client_http_ubi.connect(host, port);
   d8c56:	2300      	movs	r3, #0
   d8c58:	fa1f f288 	uxth.w	r2, r8
   d8c5c:	4639      	mov	r1, r7
   d8c5e:	4809      	ldr	r0, [pc, #36]	; (d8c84 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
   d8c60:	f004 fd90 	bl	dd784 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d8c64:	7d2b      	ldrb	r3, [r5, #20]
   d8c66:	b123      	cbz	r3, d8c72 <_ZN7UbiHTTP9reconnectEPKci+0x72>
      Serial.println("Attempt finished");
   d8c68:	f004 f9cc 	bl	dd004 <_Z16_fetch_usbserialv>
   d8c6c:	4908      	ldr	r1, [pc, #32]	; (d8c90 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d8c6e:	f003 fa82 	bl	dc176 <_ZN5Print7printlnEPKc>
    }
    attempts += 1;
    delay(1000);
   d8c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8c76:	f003 fd59 	bl	dc72c <delay>
   d8c7a:	3401      	adds	r4, #1
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d8c7c:	e7c6      	b.n	d8c0c <_ZN7UbiHTTP9reconnectEPKci+0xc>
   d8c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8c82:	bf00      	nop
   d8c84:	2003e0c8 	.word	0x2003e0c8
   d8c88:	000e4564 	.word	0x000e4564
   d8c8c:	000e457a 	.word	0x000e457a
   d8c90:	000e48cc 	.word	0x000e48cc

000d8c94 <_ZN7UbiHTTP16readServerAnswerEPc>:

/**
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
   d8c94:	b570      	push	{r4, r5, r6, lr}
   d8c96:	1e4d      	subs	r5, r1, #1
   d8c98:	460c      	mov	r4, r1
   d8c9a:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d8c9e:	4606      	mov	r6, r0
   d8ca0:	462b      	mov	r3, r5
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
    response[i] = '\0';
   d8ca2:	2100      	movs	r1, #0
   d8ca4:	f803 1f01 	strb.w	r1, [r3, #1]!
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d8ca8:	4293      	cmp	r3, r2
   d8caa:	d1fb      	bne.n	d8ca4 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
    response[i] = '\0';
  }

  if (_debug) {
   d8cac:	7d33      	ldrb	r3, [r6, #20]
   d8cae:	b14b      	cbz	r3, d8cc4 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d8cb0:	f004 f9a8 	bl	dd004 <_Z16_fetch_usbserialv>
   d8cb4:	4913      	ldr	r1, [pc, #76]	; (d8d04 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
   d8cb6:	f003 fa5e 	bl	dc176 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d8cba:	f004 f9a3 	bl	dd004 <_Z16_fetch_usbserialv>
   d8cbe:	4912      	ldr	r1, [pc, #72]	; (d8d08 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d8cc0:	f003 fa59 	bl	dc176 <_ZN5Print7printlnEPKc>
   d8cc4:	f204 24ba 	addw	r4, r4, #698	; 0x2ba
  }

  int j = 0;

  while (_client_http_ubi.available()) {
   d8cc8:	4810      	ldr	r0, [pc, #64]	; (d8d0c <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d8cca:	f004 fe6f 	bl	dd9ac <_ZN9TCPClient9availableEv>
   d8cce:	b940      	cbnz	r0, d8ce2 <_ZN7UbiHTTP16readServerAnswerEPc+0x4e>
    if (j >= MAX_BUFFER_SIZE - 1) {
      break;
    }
  }

  if (_debug) {
   d8cd0:	7d33      	ldrb	r3, [r6, #20]
   d8cd2:	b1b3      	cbz	r3, d8d02 <_ZN7UbiHTTP16readServerAnswerEPc+0x6e>
    Serial.println("\n----------");
   d8cd4:	f004 f996 	bl	dd004 <_Z16_fetch_usbserialv>
   d8cd8:	490d      	ldr	r1, [pc, #52]	; (d8d10 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
  }
}
   d8cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      break;
    }
  }

  if (_debug) {
    Serial.println("\n----------");
   d8cde:	f003 ba4a 	b.w	dc176 <_ZN5Print7printlnEPKc>
  }

  int j = 0;

  while (_client_http_ubi.available()) {
    response[j] = (char)_client_http_ubi.read();
   d8ce2:	480a      	ldr	r0, [pc, #40]	; (d8d0c <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d8ce4:	f004 fd0b 	bl	dd6fe <_ZN9TCPClient4readEv>
   d8ce8:	f805 0f01 	strb.w	r0, [r5, #1]!
    if (_debug) {
   d8cec:	7d33      	ldrb	r3, [r6, #20]
   d8cee:	b12b      	cbz	r3, d8cfc <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
      Serial.write(response[j]);
   d8cf0:	f004 f988 	bl	dd004 <_Z16_fetch_usbserialv>
   d8cf4:	6803      	ldr	r3, [r0, #0]
   d8cf6:	7829      	ldrb	r1, [r5, #0]
   d8cf8:	689b      	ldr	r3, [r3, #8]
   d8cfa:	4798      	blx	r3
    }
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
   d8cfc:	42a5      	cmp	r5, r4
   d8cfe:	d1e3      	bne.n	d8cc8 <_ZN7UbiHTTP16readServerAnswerEPc+0x34>
   d8d00:	e7e6      	b.n	d8cd0 <_ZN7UbiHTTP16readServerAnswerEPc+0x3c>
   d8d02:	bd70      	pop	{r4, r5, r6, pc}
   d8d04:	000e45d5 	.word	0x000e45d5
   d8d08:	000e45c1 	.word	0x000e45c1
   d8d0c:	2003e0c8 	.word	0x2003e0c8
   d8d10:	000e45d4 	.word	0x000e45d4

000d8d14 <_ZN7UbiHTTP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiHTTP::waitServerAnswer() {
   d8d14:	b570      	push	{r4, r5, r6, lr}
   d8d16:	4605      	mov	r5, r0
  int timeout = 0;
   d8d18:	2400      	movs	r4, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d8d1a:	480d      	ldr	r0, [pc, #52]	; (d8d50 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
   d8d1c:	f004 fe46 	bl	dd9ac <_ZN9TCPClient9availableEv>
   d8d20:	4606      	mov	r6, r0
   d8d22:	b910      	cbnz	r0, d8d2a <_ZN7UbiHTTP16waitServerAnswerEv+0x16>
   d8d24:	69ab      	ldr	r3, [r5, #24]
   d8d26:	429c      	cmp	r4, r3
   d8d28:	db01      	blt.n	d8d2e <_ZN7UbiHTTP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
   d8d2a:	2001      	movs	r0, #1
   d8d2c:	bd70      	pop	{r4, r5, r6, pc}

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
   d8d2e:	2001      	movs	r0, #1
   d8d30:	f003 fcfc 	bl	dc72c <delay>
    if (timeout > _timeout - 1) {
   d8d34:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
   d8d36:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
   d8d38:	429c      	cmp	r4, r3
   d8d3a:	dbee      	blt.n	d8d1a <_ZN7UbiHTTP16waitServerAnswerEv+0x6>
      if (_debug) {
   d8d3c:	7d28      	ldrb	r0, [r5, #20]
   d8d3e:	b130      	cbz	r0, d8d4e <_ZN7UbiHTTP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
   d8d40:	f004 f960 	bl	dd004 <_Z16_fetch_usbserialv>
   d8d44:	4903      	ldr	r1, [pc, #12]	; (d8d54 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d8d46:	f003 fa16 	bl	dc176 <_ZN5Print7printlnEPKc>
   d8d4a:	4630      	mov	r0, r6
   d8d4c:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
   d8d4e:	bd70      	pop	{r4, r5, r6, pc}
   d8d50:	2003e0c8 	.word	0x2003e0c8
   d8d54:	000e458e 	.word	0x000e458e

000d8d58 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
   d8d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8d5a:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d8d5c:	6902      	ldr	r2, [r0, #16]
   d8d5e:	6841      	ldr	r1, [r0, #4]
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
   d8d60:	4604      	mov	r4, r0
   d8d62:	461e      	mov	r6, r3
  reconnect(_host, _port);
   d8d64:	f7ff ff4c 	bl	d8c00 <_ZN7UbiHTTP9reconnectEPKci>
  bool result = false;

  if (_client_http_ubi.connected()) {  // Connect to the host
   d8d68:	4880      	ldr	r0, [pc, #512]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8d6a:	f004 fc34 	bl	dd5d6 <_ZN9TCPClient9connectedEv>
   d8d6e:	4605      	mov	r5, r0
   d8d70:	2800      	cmp	r0, #0
   d8d72:	f000 80ec 	beq.w	d8f4e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f6>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d8d76:	497e      	ldr	r1, [pc, #504]	; (d8f70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d8d78:	487c      	ldr	r0, [pc, #496]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8d7a:	f003 f9e5 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d8d7e:	4639      	mov	r1, r7
   d8d80:	487a      	ldr	r0, [pc, #488]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8d82:	f003 f9e1 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d8d86:	497b      	ldr	r1, [pc, #492]	; (d8f74 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d8d88:	4878      	ldr	r0, [pc, #480]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8d8a:	f003 f9dd 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d8d8e:	497a      	ldr	r1, [pc, #488]	; (d8f78 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d8d90:	4876      	ldr	r0, [pc, #472]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8d92:	f003 f9d9 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d8d96:	6861      	ldr	r1, [r4, #4]
   d8d98:	4874      	ldr	r0, [pc, #464]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8d9a:	f003 f9d5 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d8d9e:	4977      	ldr	r1, [pc, #476]	; (d8f7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d8da0:	4872      	ldr	r0, [pc, #456]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8da2:	f003 f9d1 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d8da6:	4976      	ldr	r1, [pc, #472]	; (d8f80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
   d8da8:	4870      	ldr	r0, [pc, #448]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8daa:	f003 f9cd 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d8dae:	68a1      	ldr	r1, [r4, #8]
   d8db0:	486e      	ldr	r0, [pc, #440]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8db2:	f003 f9c9 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d8db6:	4971      	ldr	r1, [pc, #452]	; (d8f7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d8db8:	486c      	ldr	r0, [pc, #432]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8dba:	f003 f9c5 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d8dbe:	4971      	ldr	r1, [pc, #452]	; (d8f84 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d8dc0:	486a      	ldr	r0, [pc, #424]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8dc2:	f003 f9c1 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d8dc6:	68e1      	ldr	r1, [r4, #12]
   d8dc8:	4868      	ldr	r0, [pc, #416]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8dca:	f003 f9bd 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d8dce:	496b      	ldr	r1, [pc, #428]	; (d8f7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d8dd0:	4866      	ldr	r0, [pc, #408]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8dd2:	f003 f9b9 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d8dd6:	496c      	ldr	r1, [pc, #432]	; (d8f88 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
   d8dd8:	4864      	ldr	r0, [pc, #400]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8dda:	f003 f9b5 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d8dde:	496b      	ldr	r1, [pc, #428]	; (d8f8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
   d8de0:	4862      	ldr	r0, [pc, #392]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8de2:	f003 f9b1 	bl	dc148 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d8de6:	4630      	mov	r0, r6
   d8de8:	f008 ff74 	bl	e1cd4 <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d8dec:	4968      	ldr	r1, [pc, #416]	; (d8f90 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
    _client_http_ubi.print(F("X-Auth-Token: "));
    _client_http_ubi.print(_token);
    _client_http_ubi.print(F("\r\n"));
    _client_http_ubi.print(F("Connection: close\r\n"));
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
    int content_length = strlen(payload);
   d8dee:	4605      	mov	r5, r0
    _client_http_ubi.print(F("Content-Length: "));
   d8df0:	485e      	ldr	r0, [pc, #376]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8df2:	f003 f9a9 	bl	dc148 <_ZN5Print5printEPKc>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d8df6:	2d00      	cmp	r5, #0
   d8df8:	da05      	bge.n	d8e06 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xae>
            t = print('-');
   d8dfa:	212d      	movs	r1, #45	; 0x2d
   d8dfc:	485b      	ldr	r0, [pc, #364]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8dfe:	f003 f9a7 	bl	dc150 <_ZN5Print5printEc>
            val = -n;
   d8e02:	4269      	negs	r1, r5
   d8e04:	e000      	b.n	d8e08 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xb0>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d8e06:	4629      	mov	r1, r5
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8e08:	220a      	movs	r2, #10
   d8e0a:	4858      	ldr	r0, [pc, #352]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8e0c:	f003 f9bf 	bl	dc18e <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(content_length);
    _client_http_ubi.print(F("\r\n\r\n"));
   d8e10:	4960      	ldr	r1, [pc, #384]	; (d8f94 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
   d8e12:	4856      	ldr	r0, [pc, #344]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8e14:	f003 f998 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d8e18:	4631      	mov	r1, r6
   d8e1a:	4854      	ldr	r0, [pc, #336]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8e1c:	f003 f994 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d8e20:	4956      	ldr	r1, [pc, #344]	; (d8f7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d8e22:	4852      	ldr	r0, [pc, #328]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8e24:	f003 f990 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d8e28:	4850      	ldr	r0, [pc, #320]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8e2a:	f004 fbd3 	bl	dd5d4 <_ZN9TCPClient5flushEv>

    if (_debug) {
   d8e2e:	7d23      	ldrb	r3, [r4, #20]
   d8e30:	2b00      	cmp	r3, #0
   d8e32:	d071      	beq.n	d8f18 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c0>
      Serial.println(F("Making request to Ubidots:\n"));
   d8e34:	f004 f8e6 	bl	dd004 <_Z16_fetch_usbserialv>
   d8e38:	4957      	ldr	r1, [pc, #348]	; (d8f98 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x240>)
   d8e3a:	f003 f99c 	bl	dc176 <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d8e3e:	f004 f8e1 	bl	dd004 <_Z16_fetch_usbserialv>
   d8e42:	494b      	ldr	r1, [pc, #300]	; (d8f70 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d8e44:	f003 f980 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d8e48:	f004 f8dc 	bl	dd004 <_Z16_fetch_usbserialv>
   d8e4c:	4639      	mov	r1, r7
   d8e4e:	f003 f97b 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d8e52:	f004 f8d7 	bl	dd004 <_Z16_fetch_usbserialv>
   d8e56:	4947      	ldr	r1, [pc, #284]	; (d8f74 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d8e58:	f003 f976 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d8e5c:	f004 f8d2 	bl	dd004 <_Z16_fetch_usbserialv>
   d8e60:	4945      	ldr	r1, [pc, #276]	; (d8f78 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d8e62:	f003 f971 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d8e66:	f004 f8cd 	bl	dd004 <_Z16_fetch_usbserialv>
   d8e6a:	6861      	ldr	r1, [r4, #4]
   d8e6c:	f003 f96c 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d8e70:	f004 f8c8 	bl	dd004 <_Z16_fetch_usbserialv>
   d8e74:	4941      	ldr	r1, [pc, #260]	; (d8f7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d8e76:	f003 f967 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d8e7a:	f004 f8c3 	bl	dd004 <_Z16_fetch_usbserialv>
   d8e7e:	4940      	ldr	r1, [pc, #256]	; (d8f80 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
   d8e80:	f003 f962 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d8e84:	f004 f8be 	bl	dd004 <_Z16_fetch_usbserialv>
   d8e88:	68a1      	ldr	r1, [r4, #8]
   d8e8a:	f003 f95d 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d8e8e:	f004 f8b9 	bl	dd004 <_Z16_fetch_usbserialv>
   d8e92:	493a      	ldr	r1, [pc, #232]	; (d8f7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d8e94:	f003 f958 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d8e98:	f004 f8b4 	bl	dd004 <_Z16_fetch_usbserialv>
   d8e9c:	4939      	ldr	r1, [pc, #228]	; (d8f84 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d8e9e:	f003 f953 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d8ea2:	f004 f8af 	bl	dd004 <_Z16_fetch_usbserialv>
   d8ea6:	68e1      	ldr	r1, [r4, #12]
   d8ea8:	f003 f94e 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d8eac:	f004 f8aa 	bl	dd004 <_Z16_fetch_usbserialv>
   d8eb0:	4932      	ldr	r1, [pc, #200]	; (d8f7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d8eb2:	f003 f949 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d8eb6:	f004 f8a5 	bl	dd004 <_Z16_fetch_usbserialv>
   d8eba:	4933      	ldr	r1, [pc, #204]	; (d8f88 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
   d8ebc:	f003 f944 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d8ec0:	f004 f8a0 	bl	dd004 <_Z16_fetch_usbserialv>
   d8ec4:	4931      	ldr	r1, [pc, #196]	; (d8f8c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
   d8ec6:	f003 f93f 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d8eca:	f004 f89b 	bl	dd004 <_Z16_fetch_usbserialv>
   d8ece:	4930      	ldr	r1, [pc, #192]	; (d8f90 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
   d8ed0:	f003 f93a 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d8ed4:	f004 f896 	bl	dd004 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d8ed8:	2d00      	cmp	r5, #0
   d8eda:	4607      	mov	r7, r0
   d8edc:	da03      	bge.n	d8ee6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x18e>
            t = print('-');
   d8ede:	212d      	movs	r1, #45	; 0x2d
   d8ee0:	f003 f936 	bl	dc150 <_ZN5Print5printEc>
            val = -n;
   d8ee4:	426d      	negs	r5, r5
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8ee6:	220a      	movs	r2, #10
   d8ee8:	4629      	mov	r1, r5
   d8eea:	4638      	mov	r0, r7
   d8eec:	f003 f94f 	bl	dc18e <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d8ef0:	f004 f888 	bl	dd004 <_Z16_fetch_usbserialv>
   d8ef4:	4927      	ldr	r1, [pc, #156]	; (d8f94 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
   d8ef6:	f003 f927 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(payload);
   d8efa:	f004 f883 	bl	dd004 <_Z16_fetch_usbserialv>
   d8efe:	4631      	mov	r1, r6
   d8f00:	f003 f922 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d8f04:	f004 f87e 	bl	dd004 <_Z16_fetch_usbserialv>
   d8f08:	491c      	ldr	r1, [pc, #112]	; (d8f7c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d8f0a:	f003 f91d 	bl	dc148 <_ZN5Print5printEPKc>

      Serial.println("waiting for server answer ...");
   d8f0e:	f004 f879 	bl	dd004 <_Z16_fetch_usbserialv>
   d8f12:	4922      	ldr	r1, [pc, #136]	; (d8f9c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x244>)
   d8f14:	f003 f92f 	bl	dc176 <_ZN5Print7printlnEPKc>
    }

    /* Reads the response from the server */
    waitServerAnswer();
   d8f18:	4620      	mov	r0, r4
   d8f1a:	f7ff fefb 	bl	d8d14 <_ZN7UbiHTTP16waitServerAnswerEv>

    if (_debug) {
   d8f1e:	7d23      	ldrb	r3, [r4, #20]
   d8f20:	b90b      	cbnz	r3, d8f26 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ce>
        char c = _client_http_ubi.read();
        Serial.print(c);
      }
    }

    result = true;
   d8f22:	2401      	movs	r4, #1
   d8f24:	e01d      	b.n	d8f62 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>

    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
   d8f26:	f004 f86d 	bl	dd004 <_Z16_fetch_usbserialv>
   d8f2a:	491d      	ldr	r1, [pc, #116]	; (d8fa0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x248>)
   d8f2c:	f003 f923 	bl	dc176 <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d8f30:	480e      	ldr	r0, [pc, #56]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8f32:	f004 fd3b 	bl	dd9ac <_ZN9TCPClient9availableEv>
   d8f36:	2800      	cmp	r0, #0
   d8f38:	d0f3      	beq.n	d8f22 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ca>
        char c = _client_http_ubi.read();
   d8f3a:	480c      	ldr	r0, [pc, #48]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8f3c:	f004 fbdf 	bl	dd6fe <_ZN9TCPClient4readEv>
   d8f40:	4604      	mov	r4, r0
        Serial.print(c);
   d8f42:	f004 f85f 	bl	dd004 <_Z16_fetch_usbserialv>
   d8f46:	b2e1      	uxtb	r1, r4
   d8f48:	f003 f902 	bl	dc150 <_ZN5Print5printEc>
    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
      while (_client_http_ubi.available()) {
   d8f4c:	e7f0      	b.n	d8f30 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1d8>
    }

    result = true;

  } else {
    if (_debug) {
   d8f4e:	7d23      	ldrb	r3, [r4, #20]
   d8f50:	b133      	cbz	r3, d8f60 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>
      Serial.println("Could not send data to ubidots using HTTP");
   d8f52:	f004 f857 	bl	dd004 <_Z16_fetch_usbserialv>
   d8f56:	4913      	ldr	r1, [pc, #76]	; (d8fa4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x24c>)
   d8f58:	f003 f90d 	bl	dc176 <_ZN5Print7printlnEPKc>
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
  reconnect(_host, _port);
  bool result = false;
   d8f5c:	462c      	mov	r4, r5
   d8f5e:	e000      	b.n	d8f62 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>
   d8f60:	461c      	mov	r4, r3
    if (_debug) {
      Serial.println("Could not send data to ubidots using HTTP");
    }
  }

  _client_http_ubi.stop();
   d8f62:	4802      	ldr	r0, [pc, #8]	; (d8f6c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d8f64:	f004 fd0a 	bl	dd97c <_ZN9TCPClient4stopEv>
  return result;
}
   d8f68:	4620      	mov	r0, r4
   d8f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8f6c:	2003e0c8 	.word	0x2003e0c8
   d8f70:	000e48dd 	.word	0x000e48dd
   d8f74:	000e48f5 	.word	0x000e48f5
   d8f78:	000e4901 	.word	0x000e4901
   d8f7c:	000e4a25 	.word	0x000e4a25
   d8f80:	000e4908 	.word	0x000e4908
   d8f84:	000e4915 	.word	0x000e4915
   d8f88:	000e4924 	.word	0x000e4924
   d8f8c:	000e4938 	.word	0x000e4938
   d8f90:	000e4959 	.word	0x000e4959
   d8f94:	000e4a23 	.word	0x000e4a23
   d8f98:	000e496a 	.word	0x000e496a
   d8f9c:	000e4986 	.word	0x000e4986
   d8fa0:	000e49a4 	.word	0x000e49a4
   d8fa4:	000e49c0 	.word	0x000e49c0

000d8fa8 <_ZN7UbiHTTP3getEPKcS1_>:

float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d8fa8:	b570      	push	{r4, r5, r6, lr}
   d8faa:	ed2d 8b02 	vpush	{d8}
   d8fae:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d8fb0:	2300      	movs	r3, #0

  _client_http_ubi.stop();
  return result;
}

float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d8fb2:	460e      	mov	r6, r1
   d8fb4:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d8fb6:	6841      	ldr	r1, [r0, #4]
   d8fb8:	4868      	ldr	r0, [pc, #416]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d8fba:	2250      	movs	r2, #80	; 0x50
   d8fbc:	f004 fbe2 	bl	dd784 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d8fc0:	4620      	mov	r0, r4
   d8fc2:	2250      	movs	r2, #80	; 0x50
   d8fc4:	6861      	ldr	r1, [r4, #4]
   d8fc6:	f7ff fe1b 	bl	d8c00 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d8fca:	4864      	ldr	r0, [pc, #400]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d8fcc:	f004 fb03 	bl	dd5d6 <_ZN9TCPClient9connectedEv>
   d8fd0:	2800      	cmp	r0, #0
   d8fd2:	f000 80b4 	beq.w	d913e <_ZN7UbiHTTP3getEPKcS1_+0x196>
    /* Builds the request GET - Please reference this link to know all the
     * request's structures HTTPS://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d8fd6:	4962      	ldr	r1, [pc, #392]	; (d9160 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d8fd8:	4860      	ldr	r0, [pc, #384]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d8fda:	f003 f8b5 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d8fde:	4631      	mov	r1, r6
   d8fe0:	485e      	ldr	r0, [pc, #376]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d8fe2:	f003 f8b1 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d8fe6:	495f      	ldr	r1, [pc, #380]	; (d9164 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d8fe8:	485c      	ldr	r0, [pc, #368]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d8fea:	f003 f8ad 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d8fee:	4629      	mov	r1, r5
   d8ff0:	485a      	ldr	r0, [pc, #360]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d8ff2:	f003 f8a9 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d8ff6:	495c      	ldr	r1, [pc, #368]	; (d9168 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d8ff8:	4858      	ldr	r0, [pc, #352]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d8ffa:	f003 f8a5 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d8ffe:	495b      	ldr	r1, [pc, #364]	; (d916c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d9000:	4856      	ldr	r0, [pc, #344]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9002:	f003 f8a1 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d9006:	495a      	ldr	r1, [pc, #360]	; (d9170 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d9008:	4854      	ldr	r0, [pc, #336]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d900a:	f003 f89d 	bl	dc148 <_ZN5Print5printEPKc>
   d900e:	220a      	movs	r2, #10
   d9010:	2150      	movs	r1, #80	; 0x50
   d9012:	4852      	ldr	r0, [pc, #328]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9014:	f003 f8bb 	bl	dc18e <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(UBIDOTS_HTTP_PORT);
    _client_http_ubi.print("\r\n");
   d9018:	4956      	ldr	r1, [pc, #344]	; (d9174 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d901a:	4850      	ldr	r0, [pc, #320]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d901c:	f003 f894 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d9020:	4955      	ldr	r1, [pc, #340]	; (d9178 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d9022:	484e      	ldr	r0, [pc, #312]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9024:	f003 f890 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d9028:	68a1      	ldr	r1, [r4, #8]
   d902a:	484c      	ldr	r0, [pc, #304]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d902c:	f003 f88c 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d9030:	4950      	ldr	r1, [pc, #320]	; (d9174 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d9032:	484a      	ldr	r0, [pc, #296]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9034:	f003 f888 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d9038:	4950      	ldr	r1, [pc, #320]	; (d917c <_ZN7UbiHTTP3getEPKcS1_+0x1d4>)
   d903a:	4848      	ldr	r0, [pc, #288]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d903c:	f003 f884 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d9040:	68e1      	ldr	r1, [r4, #12]
   d9042:	4846      	ldr	r0, [pc, #280]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9044:	f003 f880 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d9048:	494a      	ldr	r1, [pc, #296]	; (d9174 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d904a:	4844      	ldr	r0, [pc, #272]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d904c:	f003 f87c 	bl	dc148 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d9050:	494b      	ldr	r1, [pc, #300]	; (d9180 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d9052:	4842      	ldr	r0, [pc, #264]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9054:	f003 f878 	bl	dc148 <_ZN5Print5printEPKc>

    if (_debug) {
   d9058:	7d23      	ldrb	r3, [r4, #20]
   d905a:	2b00      	cmp	r3, #0
   d905c:	d050      	beq.n	d9100 <_ZN7UbiHTTP3getEPKcS1_+0x158>
      Serial.print("GET /api/v1.6/devices/");
   d905e:	f003 ffd1 	bl	dd004 <_Z16_fetch_usbserialv>
   d9062:	493f      	ldr	r1, [pc, #252]	; (d9160 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d9064:	f003 f870 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d9068:	f003 ffcc 	bl	dd004 <_Z16_fetch_usbserialv>
   d906c:	4631      	mov	r1, r6
   d906e:	f003 f86b 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("/");
   d9072:	f003 ffc7 	bl	dd004 <_Z16_fetch_usbserialv>
   d9076:	493b      	ldr	r1, [pc, #236]	; (d9164 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d9078:	f003 f866 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d907c:	f003 ffc2 	bl	dd004 <_Z16_fetch_usbserialv>
   d9080:	4629      	mov	r1, r5
   d9082:	f003 f861 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d9086:	f003 ffbd 	bl	dd004 <_Z16_fetch_usbserialv>
   d908a:	4937      	ldr	r1, [pc, #220]	; (d9168 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d908c:	f003 f85c 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d9090:	f003 ffb8 	bl	dd004 <_Z16_fetch_usbserialv>
   d9094:	4935      	ldr	r1, [pc, #212]	; (d916c <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d9096:	f003 f857 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d909a:	f003 ffb3 	bl	dd004 <_Z16_fetch_usbserialv>
   d909e:	4934      	ldr	r1, [pc, #208]	; (d9170 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d90a0:	f003 f852 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(UBIDOTS_HTTP_PORT);
   d90a4:	f003 ffae 	bl	dd004 <_Z16_fetch_usbserialv>
   d90a8:	220a      	movs	r2, #10
   d90aa:	2150      	movs	r1, #80	; 0x50
   d90ac:	f003 f86f 	bl	dc18e <_ZN5Print11printNumberEmh>
      Serial.print("\r\n");
   d90b0:	f003 ffa8 	bl	dd004 <_Z16_fetch_usbserialv>
   d90b4:	492f      	ldr	r1, [pc, #188]	; (d9174 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d90b6:	f003 f847 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d90ba:	f003 ffa3 	bl	dd004 <_Z16_fetch_usbserialv>
   d90be:	492e      	ldr	r1, [pc, #184]	; (d9178 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d90c0:	f003 f842 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d90c4:	f003 ff9e 	bl	dd004 <_Z16_fetch_usbserialv>
   d90c8:	68a1      	ldr	r1, [r4, #8]
   d90ca:	f003 f83d 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d90ce:	f003 ff99 	bl	dd004 <_Z16_fetch_usbserialv>
   d90d2:	4928      	ldr	r1, [pc, #160]	; (d9174 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d90d4:	f003 f838 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d90d8:	f003 ff94 	bl	dd004 <_Z16_fetch_usbserialv>
   d90dc:	4927      	ldr	r1, [pc, #156]	; (d917c <_ZN7UbiHTTP3getEPKcS1_+0x1d4>)
   d90de:	f003 f833 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d90e2:	f003 ff8f 	bl	dd004 <_Z16_fetch_usbserialv>
   d90e6:	68e1      	ldr	r1, [r4, #12]
   d90e8:	f003 f82e 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d90ec:	f003 ff8a 	bl	dd004 <_Z16_fetch_usbserialv>
   d90f0:	4920      	ldr	r1, [pc, #128]	; (d9174 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d90f2:	f003 f829 	bl	dc148 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d90f6:	f003 ff85 	bl	dd004 <_Z16_fetch_usbserialv>
   d90fa:	4921      	ldr	r1, [pc, #132]	; (d9180 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d90fc:	f003 f824 	bl	dc148 <_ZN5Print5printEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
   d9100:	4620      	mov	r0, r4
   d9102:	f7ff fe07 	bl	d8d14 <_ZN7UbiHTTP16waitServerAnswerEv>
   d9106:	b928      	cbnz	r0, d9114 <_ZN7UbiHTTP3getEPKcS1_+0x16c>
      _client_http_ubi.stop();
   d9108:	4814      	ldr	r0, [pc, #80]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
      return ERROR_VALUE;
   d910a:	ed9f 8a1e 	vldr	s16, [pc, #120]	; d9184 <_ZN7UbiHTTP3getEPKcS1_+0x1dc>
      Serial.print("Content-Type: application/json\r\n\r\n");
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
      _client_http_ubi.stop();
   d910e:	f004 fc35 	bl	dd97c <_ZN9TCPClient4stopEv>
   d9112:	e01d      	b.n	d9150 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d9114:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d9118:	f002 f8f8 	bl	db30c <malloc>
    readServerAnswer(response);
   d911c:	4601      	mov	r1, r0
      _client_http_ubi.stop();
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d911e:	4605      	mov	r5, r0
    readServerAnswer(response);
   d9120:	4620      	mov	r0, r4
   d9122:	f7ff fdb7 	bl	d8c94 <_ZN7UbiHTTP16readServerAnswerEPc>
   d9126:	4628      	mov	r0, r5
   d9128:	f7ff fd02 	bl	d8b30 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>

    /* Parses the answer */
    float value = parseHttpAnswer("LV", response);
    _client_http_ubi.stop();
   d912c:	480b      	ldr	r0, [pc, #44]	; (d915c <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d912e:	eeb0 8a40 	vmov.f32	s16, s0
   d9132:	f004 fc23 	bl	dd97c <_ZN9TCPClient4stopEv>
    free(response);
   d9136:	4628      	mov	r0, r5
   d9138:	f002 f8f0 	bl	db31c <free>
   d913c:	e008      	b.n	d9150 <_ZN7UbiHTTP3getEPKcS1_+0x1a8>
    return value;
  }

  if (_debug) {
   d913e:	7d23      	ldrb	r3, [r4, #20]
   d9140:	2b00      	cmp	r3, #0
   d9142:	d0e1      	beq.n	d9108 <_ZN7UbiHTTP3getEPKcS1_+0x160>
    Serial.println("Connection Failed ubidots - Try Again");
   d9144:	f003 ff5e 	bl	dd004 <_Z16_fetch_usbserialv>
   d9148:	490f      	ldr	r1, [pc, #60]	; (d9188 <_ZN7UbiHTTP3getEPKcS1_+0x1e0>)
   d914a:	f003 f814 	bl	dc176 <_ZN5Print7printlnEPKc>
   d914e:	e7db      	b.n	d9108 <_ZN7UbiHTTP3getEPKcS1_+0x160>
  }

  _client_http_ubi.stop();
  return ERROR_VALUE;
}
   d9150:	eeb0 0a48 	vmov.f32	s0, s16
   d9154:	ecbd 8b02 	vpop	{d8}
   d9158:	bd70      	pop	{r4, r5, r6, pc}
   d915a:	bf00      	nop
   d915c:	2003e0c8 	.word	0x2003e0c8
   d9160:	000e49ea 	.word	0x000e49ea
   d9164:	000e49ff 	.word	0x000e49ff
   d9168:	000e4a01 	.word	0x000e4a01
   d916c:	000e48f5 	.word	0x000e48f5
   d9170:	000e4901 	.word	0x000e4901
   d9174:	000e4a25 	.word	0x000e4a25
   d9178:	000e4908 	.word	0x000e4908
   d917c:	000e4915 	.word	0x000e4915
   d9180:	000e4a05 	.word	0x000e4a05
   d9184:	cda2425f 	.word	0xcda2425f
   d9188:	000e4a28 	.word	0x000e4a28

000d918c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

   d918c:	b510      	push	{r4, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d918e:	4c06      	ldr	r4, [pc, #24]	; (d91a8 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d9190:	f001 fd3e 	bl	dac10 <HAL_Pin_Map>
   d9194:	4620      	mov	r0, r4
   d9196:	f004 fca9 	bl	ddaec <_ZN9TCPClientC1Ev>
   d919a:	4620      	mov	r0, r4
   d919c:	4a03      	ldr	r2, [pc, #12]	; (d91ac <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d919e:	4904      	ldr	r1, [pc, #16]	; (d91b0 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
   d91a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d91a4:	f004 be1c 	b.w	ddde0 <__aeabi_atexit>
   d91a8:	2003e0c8 	.word	0x2003e0c8
   d91ac:	2003bce8 	.word	0x2003bce8
   d91b0:	000d810d 	.word	0x000d810d

000d91b4 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
   d91b4:	6803      	ldr	r3, [r0, #0]
   d91b6:	4718      	bx	r3

000d91b8 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d91b8:	2a01      	cmp	r2, #1
   d91ba:	d002      	beq.n	d91c2 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
   d91bc:	2a02      	cmp	r2, #2
   d91be:	d002      	beq.n	d91c6 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
   d91c0:	e004      	b.n	d91cc <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d91c2:	6001      	str	r1, [r0, #0]
	      break;
   d91c4:	e002      	b.n	d91cc <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d91c6:	680b      	ldr	r3, [r1, #0]
   d91c8:	b100      	cbz	r0, d91cc <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
   d91ca:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d91cc:	2000      	movs	r0, #0
   d91ce:	4770      	bx	lr

000d91d0 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d91d0:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance =
      new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d91d2:	201c      	movs	r0, #28
   d91d4:	f7fa ff61 	bl	d409a <_Znwj>
   d91d8:	4604      	mov	r4, r0
   d91da:	b148      	cbz	r0, d91f0 <_Z10builderTcpv+0x20>
   d91dc:	4b06      	ldr	r3, [pc, #24]	; (d91f8 <_Z10builderTcpv+0x28>)
   d91de:	4907      	ldr	r1, [pc, #28]	; (d91fc <_Z10builderTcpv+0x2c>)
   d91e0:	681b      	ldr	r3, [r3, #0]
   d91e2:	9300      	str	r3, [sp, #0]
   d91e4:	f242 3234 	movw	r2, #9012	; 0x2334
   d91e8:	4b05      	ldr	r3, [pc, #20]	; (d9200 <_Z10builderTcpv+0x30>)
   d91ea:	6809      	ldr	r1, [r1, #0]
   d91ec:	f7fe ffb2 	bl	d8154 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d91f0:	4620      	mov	r0, r4
   d91f2:	b002      	add	sp, #8
   d91f4:	bd10      	pop	{r4, pc}
   d91f6:	bf00      	nop
   d91f8:	2003e11c 	.word	0x2003e11c
   d91fc:	2003e120 	.word	0x2003e120
   d9200:	000e4746 	.word	0x000e4746

000d9204 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d9204:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance =
      new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d9206:	2020      	movs	r0, #32
   d9208:	f7fa ff47 	bl	d409a <_Znwj>
   d920c:	4604      	mov	r4, r0
   d920e:	b140      	cbz	r0, d9222 <_Z11builderHttpv+0x1e>
   d9210:	4b05      	ldr	r3, [pc, #20]	; (d9228 <_Z11builderHttpv+0x24>)
   d9212:	4906      	ldr	r1, [pc, #24]	; (d922c <_Z11builderHttpv+0x28>)
   d9214:	681b      	ldr	r3, [r3, #0]
   d9216:	9300      	str	r3, [sp, #0]
   d9218:	2250      	movs	r2, #80	; 0x50
   d921a:	4b05      	ldr	r3, [pc, #20]	; (d9230 <_Z11builderHttpv+0x2c>)
   d921c:	6809      	ldr	r1, [r1, #0]
   d921e:	f7ff fcdd 	bl	d8bdc <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d9222:	4620      	mov	r0, r4
   d9224:	b002      	add	sp, #8
   d9226:	bd10      	pop	{r4, pc}
   d9228:	2003e11c 	.word	0x2003e11c
   d922c:	2003e120 	.word	0x2003e120
   d9230:	000e4746 	.word	0x000e4746

000d9234 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d9234:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance =
      new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d9236:	201c      	movs	r0, #28
   d9238:	f7fa ff2f 	bl	d409a <_Znwj>
   d923c:	4604      	mov	r4, r0
   d923e:	b148      	cbz	r0, d9254 <_Z10builderUdpv+0x20>
   d9240:	4b06      	ldr	r3, [pc, #24]	; (d925c <_Z10builderUdpv+0x28>)
   d9242:	4907      	ldr	r1, [pc, #28]	; (d9260 <_Z10builderUdpv+0x2c>)
   d9244:	681b      	ldr	r3, [r3, #0]
   d9246:	9300      	str	r3, [sp, #0]
   d9248:	f242 3234 	movw	r2, #9012	; 0x2334
   d924c:	4b05      	ldr	r3, [pc, #20]	; (d9264 <_Z10builderUdpv+0x30>)
   d924e:	6809      	ldr	r1, [r1, #0]
   d9250:	f000 fa68 	bl	d9724 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d9254:	4620      	mov	r0, r4
   d9256:	b002      	add	sp, #8
   d9258:	bd10      	pop	{r4, pc}
   d925a:	bf00      	nop
   d925c:	2003e11c 	.word	0x2003e11c
   d9260:	2003e120 	.word	0x2003e120
   d9264:	000e4746 	.word	0x000e4746

000d9268 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d9268:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d926a:	2014      	movs	r0, #20
   d926c:	f7fa ff15 	bl	d409a <_Znwj>
   d9270:	4604      	mov	r4, r0
   d9272:	b140      	cbz	r0, d9286 <_Z15builderParticlev+0x1e>
   d9274:	4b05      	ldr	r3, [pc, #20]	; (d928c <_Z15builderParticlev+0x24>)
   d9276:	4906      	ldr	r1, [pc, #24]	; (d9290 <_Z15builderParticlev+0x28>)
   d9278:	681b      	ldr	r3, [r3, #0]
   d927a:	9300      	str	r3, [sp, #0]
   d927c:	2300      	movs	r3, #0
   d927e:	461a      	mov	r2, r3
   d9280:	6809      	ldr	r1, [r1, #0]
   d9282:	f000 fae9 	bl	d9858 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
   d9286:	4620      	mov	r0, r4
   d9288:	b002      	add	sp, #8
   d928a:	bd10      	pop	{r4, pc}
   d928c:	2003e11c 	.word	0x2003e11c
   d9290:	2003e120 	.word	0x2003e120

000d9294 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d9294:	b510      	push	{r4, lr}
   d9296:	4b06      	ldr	r3, [pc, #24]	; (d92b0 <_ZN3UDPD1Ev+0x1c>)
   d9298:	6003      	str	r3, [r0, #0]
   d929a:	3364      	adds	r3, #100	; 0x64
   d929c:	4604      	mov	r4, r0
   d929e:	6103      	str	r3, [r0, #16]
   d92a0:	f002 fadd 	bl	db85e <_ZN3UDP4stopEv>
   d92a4:	4620      	mov	r0, r4
   d92a6:	f002 fc9f 	bl	dbbe8 <_ZN3UDP13releaseBufferEv>
   d92aa:	4620      	mov	r0, r4
   d92ac:	bd10      	pop	{r4, pc}
   d92ae:	bf00      	nop
   d92b0:	000e4e14 	.word	0x000e4e14

000d92b4 <_ZN3UDPD0Ev>:
   d92b4:	b510      	push	{r4, lr}
   d92b6:	4604      	mov	r4, r0
   d92b8:	f7ff ffec 	bl	d9294 <_ZN3UDPD1Ev>
   d92bc:	4620      	mov	r0, r4
   d92be:	214c      	movs	r1, #76	; 0x4c
   d92c0:	f004 fd9c 	bl	dddfc <_ZdlPvj>
   d92c4:	4620      	mov	r0, r4
   d92c6:	bd10      	pop	{r4, pc}

000d92c8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d92c8:	b510      	push	{r4, lr}
   d92ca:	b086      	sub	sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d92cc:	2300      	movs	r3, #0
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d92ce:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d92d0:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   d92d2:	b121      	cbz	r1, d92de <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d92d4:	4b0f      	ldr	r3, [pc, #60]	; (d9314 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x4c>)
   d92d6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d92d8:	4b0f      	ldr	r3, [pc, #60]	; (d9318 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x50>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d92da:	9102      	str	r1, [sp, #8]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d92dc:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92de:	ab02      	add	r3, sp, #8
   d92e0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d92e4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d92e8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d92ec:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d92f0:	e89d 0003 	ldmia.w	sp, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92f4:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d92f6:	e884 0003 	stmia.w	r4, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d92fa:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d92fc:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92fe:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9300:	9104      	str	r1, [sp, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9302:	4618      	mov	r0, r3
   d9304:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9306:	60e2      	str	r2, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9308:	9105      	str	r1, [sp, #20]
   d930a:	f7fa ffea 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d930e:	4620      	mov	r0, r4
   d9310:	b006      	add	sp, #24
   d9312:	bd10      	pop	{r4, pc}
   d9314:	000d91b5 	.word	0x000d91b5
   d9318:	000d91b9 	.word	0x000d91b9

000d931c <_ZN10UbiBuilder7builderEv>:
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
  _token = token;
}

UbiProtocol* UbiBuilder::builder() {
   d931c:	b570      	push	{r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d931e:	f100 0108 	add.w	r1, r0, #8
   d9322:	68c2      	ldr	r2, [r0, #12]
   d9324:	460b      	mov	r3, r1
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d9326:	b14a      	cbz	r2, d933c <_ZN10UbiBuilder7builderEv+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d9328:	7804      	ldrb	r4, [r0, #0]
   d932a:	7c15      	ldrb	r5, [r2, #16]
   d932c:	42a5      	cmp	r5, r4
   d932e:	bf36      	itet	cc
   d9330:	68d4      	ldrcc	r4, [r2, #12]
   d9332:	6894      	ldrcs	r4, [r2, #8]
   d9334:	461a      	movcc	r2, r3
   d9336:	4613      	mov	r3, r2
   d9338:	4622      	mov	r2, r4
   d933a:	e7f4      	b.n	d9326 <_ZN10UbiBuilder7builderEv+0xa>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d933c:	4299      	cmp	r1, r3
   d933e:	d004      	beq.n	d934a <_ZN10UbiBuilder7builderEv+0x2e>
   d9340:	7800      	ldrb	r0, [r0, #0]
   d9342:	7c1a      	ldrb	r2, [r3, #16]
   d9344:	4290      	cmp	r0, r2
   d9346:	bf38      	it	cc
   d9348:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d934a:	69da      	ldr	r2, [r3, #28]
   d934c:	b90a      	cbnz	r2, d9352 <_ZN10UbiBuilder7builderEv+0x36>
	__throw_bad_function_call();
   d934e:	f004 ff0c 	bl	de16a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9352:	6a1a      	ldr	r2, [r3, #32]
   d9354:	f103 0014 	add.w	r0, r3, #20
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}
   d9358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d935c:	4710      	bx	r2

000d935e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d935e:	688b      	ldr	r3, [r1, #8]
   d9360:	b570      	push	{r4, r5, r6, lr}
   d9362:	4616      	mov	r6, r2
   d9364:	4604      	mov	r4, r0
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d9366:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
   d9368:	2201      	movs	r2, #1
      while (__x != 0)
   d936a:	b15b      	cbz	r3, d9384 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
   d936c:	7830      	ldrb	r0, [r6, #0]
   d936e:	7c1a      	ldrb	r2, [r3, #16]
   d9370:	4290      	cmp	r0, r2
   d9372:	bf34      	ite	cc
   d9374:	6898      	ldrcc	r0, [r3, #8]
   d9376:	68d8      	ldrcs	r0, [r3, #12]
   d9378:	461d      	mov	r5, r3
   d937a:	bf34      	ite	cc
   d937c:	2201      	movcc	r2, #1
   d937e:	2200      	movcs	r2, #0
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d9380:	4603      	mov	r3, r0
   d9382:	e7f2      	b.n	d936a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d9384:	b132      	cbz	r2, d9394 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
	{
	  if (__j == begin())
   d9386:	68ca      	ldr	r2, [r1, #12]
   d9388:	4295      	cmp	r5, r2
   d938a:	d00a      	beq.n	d93a2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x44>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d938c:	4628      	mov	r0, r5
   d938e:	f004 fdaf 	bl	ddef0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d9392:	e000      	b.n	d9396 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x38>
   d9394:	4628      	mov	r0, r5
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d9396:	7833      	ldrb	r3, [r6, #0]
   d9398:	7c02      	ldrb	r2, [r0, #16]
   d939a:	429a      	cmp	r2, r3
   d939c:	f04f 0300 	mov.w	r3, #0
   d93a0:	d202      	bcs.n	d93a8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4a>
   d93a2:	e884 0028 	stmia.w	r4, {r3, r5}
   d93a6:	e001      	b.n	d93ac <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
	: first(std::forward<_U1>(__x)), second(__y) { }
   d93a8:	e884 0009 	stmia.w	r4, {r0, r3}
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   d93ac:	4620      	mov	r0, r4
   d93ae:	bd70      	pop	{r4, r5, r6, pc}

000d93b0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d93b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d93b4:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d93b6:	2024      	movs	r0, #36	; 0x24
   d93b8:	461f      	mov	r7, r3
   d93ba:	460c      	mov	r4, r1
   d93bc:	f7fa fe6d 	bl	d409a <_Znwj>
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   d93c0:	683b      	ldr	r3, [r7, #0]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d93c2:	f110 0810 	adds.w	r8, r0, #16
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d93c6:	bf1c      	itt	ne
   d93c8:	781b      	ldrbne	r3, [r3, #0]
   d93ca:	7403      	strbne	r3, [r0, #16]
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d93cc:	f106 0704 	add.w	r7, r6, #4
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d93d0:	bf1c      	itt	ne
   d93d2:	2300      	movne	r3, #0
   d93d4:	61c3      	strne	r3, [r0, #28]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   d93d6:	42a7      	cmp	r7, r4
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d93d8:	4605      	mov	r5, r0
   d93da:	d108      	bne.n	d93ee <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x3e>
	{
	  if (size() > 0
   d93dc:	6973      	ldr	r3, [r6, #20]
   d93de:	2b00      	cmp	r3, #0
   d93e0:	d05c      	beq.n	d949c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d93e2:	6931      	ldr	r1, [r6, #16]
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
	{
	  if (size() > 0
   d93e4:	7c03      	ldrb	r3, [r0, #16]
   d93e6:	7c0a      	ldrb	r2, [r1, #16]
   d93e8:	429a      	cmp	r2, r3
   d93ea:	d33a      	bcc.n	d9462 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb2>
   d93ec:	e056      	b.n	d949c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
   d93ee:	f890 9010 	ldrb.w	r9, [r0, #16]
   d93f2:	7c23      	ldrb	r3, [r4, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d93f4:	4599      	cmp	r9, r3
   d93f6:	d217      	bcs.n	d9428 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x78>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
   d93f8:	68f3      	ldr	r3, [r6, #12]
   d93fa:	42a3      	cmp	r3, r4
   d93fc:	4620      	mov	r0, r4
   d93fe:	d011      	beq.n	d9424 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d9400:	f004 fd76 	bl	ddef0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d9404:	7c03      	ldrb	r3, [r0, #16]
   d9406:	454b      	cmp	r3, r9
   d9408:	d205      	bcs.n	d9416 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x66>
	    {
	      if (_S_right(__before._M_node) == 0)
   d940a:	68c3      	ldr	r3, [r0, #12]
   d940c:	2b00      	cmp	r3, #0
   d940e:	bf14      	ite	ne
   d9410:	4620      	movne	r0, r4
   d9412:	2400      	moveq	r4, #0
   d9414:	e006      	b.n	d9424 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
		return _Res(0, __before._M_node);
	      else
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
   d9416:	4668      	mov	r0, sp
   d9418:	4642      	mov	r2, r8
   d941a:	4631      	mov	r1, r6
   d941c:	f7ff ff9f 	bl	d935e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d9420:	9c00      	ldr	r4, [sp, #0]
   d9422:	9801      	ldr	r0, [sp, #4]
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
   d9424:	4601      	mov	r1, r0
   d9426:	e01a      	b.n	d945e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d9428:	d92f      	bls.n	d948a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
   d942a:	6933      	ldr	r3, [r6, #16]
   d942c:	42a3      	cmp	r3, r4
   d942e:	d013      	beq.n	d9458 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xa8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d9430:	4620      	mov	r0, r4
   d9432:	f004 fd37 	bl	ddea4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d9436:	7c03      	ldrb	r3, [r0, #16]
   d9438:	454b      	cmp	r3, r9
   d943a:	d905      	bls.n	d9448 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x98>
	    {
	      if (_S_right(__pos._M_node) == 0)
   d943c:	68e3      	ldr	r3, [r4, #12]
   d943e:	2b00      	cmp	r3, #0
   d9440:	bf14      	ite	ne
   d9442:	4604      	movne	r4, r0
   d9444:	2000      	moveq	r0, #0
   d9446:	e008      	b.n	d945a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>
		return _Res(0, __pos._M_node);
	      else
		return _Res(__after._M_node, __after._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
   d9448:	4668      	mov	r0, sp
   d944a:	4642      	mov	r2, r8
   d944c:	4631      	mov	r1, r6
   d944e:	f7ff ff86 	bl	d935e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d9452:	e89d 0011 	ldmia.w	sp, {r0, r4}
   d9456:	e000      	b.n	d945a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
   d9458:	2000      	movs	r0, #0
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
   d945a:	4621      	mov	r1, r4
   d945c:	4604      	mov	r4, r0

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   d945e:	b1a1      	cbz	r1, d948a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
						      _S_key(__p)));
   d9460:	b944      	cbnz	r4, d9474 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
   d9462:	428f      	cmp	r7, r1
   d9464:	d006      	beq.n	d9474 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
   d9466:	7c08      	ldrb	r0, [r1, #16]
   d9468:	7c2b      	ldrb	r3, [r5, #16]
   d946a:	4283      	cmp	r3, r0
   d946c:	bf2c      	ite	cs
   d946e:	2000      	movcs	r0, #0
   d9470:	2001      	movcc	r0, #1
   d9472:	e000      	b.n	d9476 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc6>
   d9474:	2001      	movs	r0, #1

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d9476:	463b      	mov	r3, r7
   d9478:	460a      	mov	r2, r1
   d947a:	4629      	mov	r1, r5
   d947c:	f004 fd3a 	bl	ddef4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
   d9480:	6973      	ldr	r3, [r6, #20]
   d9482:	3301      	adds	r3, #1
   d9484:	6173      	str	r3, [r6, #20]
   d9486:	4628      	mov	r0, r5
   d9488:	e010      	b.n	d94ac <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d948a:	f105 0014 	add.w	r0, r5, #20
   d948e:	f7fa ff28 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d9492:	4628      	mov	r0, r5
   d9494:	f7fa fe05 	bl	d40a2 <_ZdlPv>

	    if (__res.second)
	      return _M_insert_node(__res.first, __res.second, __z);

	    _M_drop_node(__z);
	    return iterator(static_cast<_Link_type>(__res.first));
   d9498:	4620      	mov	r0, r4
   d949a:	e007      	b.n	d94ac <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   d949c:	4631      	mov	r1, r6
   d949e:	4642      	mov	r2, r8
   d94a0:	4668      	mov	r0, sp
   d94a2:	f7ff ff5c 	bl	d935e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d94a6:	9c00      	ldr	r4, [sp, #0]
   d94a8:	9901      	ldr	r1, [sp, #4]
   d94aa:	e7d8      	b.n	d945e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
   d94ac:	b003      	add	sp, #12
   d94ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d94b4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   d94b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d94b6:	1d04      	adds	r4, r0, #4
   d94b8:	6883      	ldr	r3, [r0, #8]
   d94ba:	460a      	mov	r2, r1
   d94bc:	4621      	mov	r1, r4
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d94be:	b14b      	cbz	r3, d94d4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d94c0:	7815      	ldrb	r5, [r2, #0]
   d94c2:	7c1e      	ldrb	r6, [r3, #16]
   d94c4:	42ae      	cmp	r6, r5
   d94c6:	bf36      	itet	cc
   d94c8:	68dd      	ldrcc	r5, [r3, #12]
   d94ca:	689d      	ldrcs	r5, [r3, #8]
   d94cc:	460b      	movcc	r3, r1
   d94ce:	4619      	mov	r1, r3
   d94d0:	462b      	mov	r3, r5
   d94d2:	e7f4      	b.n	d94be <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d94d4:	428c      	cmp	r4, r1
   d94d6:	d003      	beq.n	d94e0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2c>
   d94d8:	7814      	ldrb	r4, [r2, #0]
   d94da:	7c0b      	ldrb	r3, [r1, #16]
   d94dc:	429c      	cmp	r4, r3
   d94de:	d208      	bcs.n	d94f2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x3e>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d94e0:	ab04      	add	r3, sp, #16
   d94e2:	f843 2d04 	str.w	r2, [r3, #-4]!
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d94e6:	aa02      	add	r2, sp, #8
   d94e8:	9200      	str	r2, [sp, #0]
   d94ea:	4a04      	ldr	r2, [pc, #16]	; (d94fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x48>)
   d94ec:	f7ff ff60 	bl	d93b0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
   d94f0:	4601      	mov	r1, r0
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
   d94f2:	f101 0014 	add.w	r0, r1, #20
      }
   d94f6:	b004      	add	sp, #16
   d94f8:	bd70      	pop	{r4, r5, r6, pc}
   d94fa:	bf00      	nop
   d94fc:	000e4a4e 	.word	0x000e4a4e

000d9500 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
#include "UbiProtocol.h"
#include "UbiTcp.h"
#include "UbiTypes.h"
#include "UbiUdp.h"

UbiBuilder::UbiBuilder(const char* host, const char* token,
   d9500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9504:	4604      	mov	r4, r0
   d9506:	461d      	mov	r5, r3
   d9508:	4689      	mov	r9, r1
   d950a:	4690      	mov	r8, r2
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d950c:	2100      	movs	r1, #0
   d950e:	2210      	movs	r2, #16
   d9510:	3008      	adds	r0, #8
   d9512:	f007 fc11 	bl	e0d38 <memset>
                       IotProtocol iot_protocol) {
  _iot_protocol = iot_protocol;
   d9516:	7025      	strb	r5, [r4, #0]
  command_list[UBI_TCP] = &builderTcp;
   d9518:	ad02      	add	r5, sp, #8
   d951a:	2301      	movs	r3, #1
   d951c:	f805 3d01 	strb.w	r3, [r5, #-1]!
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d9520:	f104 0208 	add.w	r2, r4, #8
   d9524:	1d26      	adds	r6, r4, #4
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d9526:	2700      	movs	r7, #0
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d9528:	6122      	str	r2, [r4, #16]
	    this->_M_header._M_right = &this->_M_header;
   d952a:	6162      	str	r2, [r4, #20]
   d952c:	4629      	mov	r1, r5
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d952e:	61a7      	str	r7, [r4, #24]
   d9530:	4630      	mov	r0, r6
   d9532:	f7ff ffbf 	bl	d94b4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d9536:	4915      	ldr	r1, [pc, #84]	; (d958c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d9538:	f7ff fec6 	bl	d92c8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_HTTP] = &builderHttp;
   d953c:	4629      	mov	r1, r5
   d953e:	4630      	mov	r0, r6
   d9540:	f88d 7007 	strb.w	r7, [sp, #7]
   d9544:	f7ff ffb6 	bl	d94b4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d9548:	4911      	ldr	r1, [pc, #68]	; (d9590 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d954a:	f7ff febd 	bl	d92c8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_UDP] = &builderUdp;
   d954e:	2302      	movs	r3, #2
   d9550:	4629      	mov	r1, r5
   d9552:	4630      	mov	r0, r6
   d9554:	f88d 3007 	strb.w	r3, [sp, #7]
   d9558:	f7ff ffac 	bl	d94b4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d955c:	490d      	ldr	r1, [pc, #52]	; (d9594 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d955e:	f7ff feb3 	bl	d92c8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_PARTICLE] = &builderParticle;
   d9562:	2303      	movs	r3, #3
   d9564:	4629      	mov	r1, r5
   d9566:	4630      	mov	r0, r6
   d9568:	f88d 3007 	strb.w	r3, [sp, #7]
   d956c:	f7ff ffa2 	bl	d94b4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d9570:	4909      	ldr	r1, [pc, #36]	; (d9598 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d9572:	f7ff fea9 	bl	d92c8 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  _host = host;
   d9576:	4b09      	ldr	r3, [pc, #36]	; (d959c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
   d9578:	f8c3 9000 	str.w	r9, [r3]
  _token = token;
   d957c:	4b08      	ldr	r3, [pc, #32]	; (d95a0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0xa0>)
}
   d957e:	4620      	mov	r0, r4
  command_list[UBI_TCP] = &builderTcp;
  command_list[UBI_HTTP] = &builderHttp;
  command_list[UBI_UDP] = &builderUdp;
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
  _token = token;
   d9580:	f8c3 8000 	str.w	r8, [r3]
}
   d9584:	b003      	add	sp, #12
   d9586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d958a:	bf00      	nop
   d958c:	000d91d1 	.word	0x000d91d1
   d9590:	000d9205 	.word	0x000d9205
   d9594:	000d9235 	.word	0x000d9235
   d9598:	000d9269 	.word	0x000d9269
   d959c:	2003e120 	.word	0x2003e120
   d95a0:	2003e11c 	.word	0x2003e11c

000d95a4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
   d95a4:	b570      	push	{r4, r5, r6, lr}
   d95a6:	4d10      	ldr	r5, [pc, #64]	; (d95e8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d95a8:	4c10      	ldr	r4, [pc, #64]	; (d95ec <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d95aa:	4e11      	ldr	r6, [pc, #68]	; (d95f0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d95ac:	f001 fb30 	bl	dac10 <HAL_Pin_Map>
   d95b0:	4628      	mov	r0, r5
   d95b2:	f004 fa9b 	bl	ddaec <_ZN9TCPClientC1Ev>
   d95b6:	4628      	mov	r0, r5
   d95b8:	4d0e      	ldr	r5, [pc, #56]	; (d95f4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d95ba:	4622      	mov	r2, r4
   d95bc:	4631      	mov	r1, r6
   d95be:	f004 fc0f 	bl	ddde0 <__aeabi_atexit>
   d95c2:	4628      	mov	r0, r5
   d95c4:	f004 fa92 	bl	ddaec <_ZN9TCPClientC1Ev>
   d95c8:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d95ca:	4d0b      	ldr	r5, [pc, #44]	; (d95f8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
   d95cc:	4622      	mov	r2, r4
   d95ce:	4631      	mov	r1, r6
   d95d0:	f004 fc06 	bl	ddde0 <__aeabi_atexit>
   d95d4:	4628      	mov	r0, r5
   d95d6:	f002 fae9 	bl	dbbac <_ZN3UDPC1Ev>
   d95da:	4622      	mov	r2, r4
   d95dc:	4628      	mov	r0, r5
   d95de:	4907      	ldr	r1, [pc, #28]	; (d95fc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
   d95e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d95e4:	f004 bbfc 	b.w	ddde0 <__aeabi_atexit>
   d95e8:	2003e100 	.word	0x2003e100
   d95ec:	2003bce8 	.word	0x2003bce8
   d95f0:	000d810d 	.word	0x000d810d
   d95f4:	2003e0e4 	.word	0x2003e0e4
   d95f8:	2003e124 	.word	0x2003e124
   d95fc:	000d9295 	.word	0x000d9295

000d9600 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9600:	2200      	movs	r2, #0
   d9602:	4611      	mov	r1, r2
   d9604:	6840      	ldr	r0, [r0, #4]
   d9606:	f001 be09 	b.w	db21c <network_ready>
	...

000d960c <_ZN7UbiMeshC1EPc>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
   d960c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  _tokenMesh = token;
   d960e:	4b0a      	ldr	r3, [pc, #40]	; (d9638 <_ZN7UbiMeshC1EPc+0x2c>)

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
   d9610:	4604      	mov	r4, r0
   d9612:	4668      	mov	r0, sp
  _tokenMesh = token;
   d9614:	6019      	str	r1, [r3, #0]
   d9616:	f001 fe59 	bl	db2cc <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d961a:	9802      	ldr	r0, [sp, #8]
   d961c:	3001      	adds	r0, #1
   d961e:	f7fa fd3e 	bl	d409e <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d9622:	9900      	ldr	r1, [sp, #0]
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d9624:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d9626:	f007 fe1d 	bl	e1264 <strcpy>
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
   d962a:	4668      	mov	r0, sp
   d962c:	f002 fba2 	bl	dbd74 <_ZN6StringD1Ev>
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
};
   d9630:	4620      	mov	r0, r4
   d9632:	b004      	add	sp, #16
   d9634:	bd10      	pop	{r4, pc}
   d9636:	bf00      	nop
   d9638:	2003e178 	.word	0x2003e178

000d963c <_ZN7UbiMeshD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

UbiMesh::~UbiMesh() { delete[] _default_device_label; }
   d963c:	b510      	push	{r4, lr}
   d963e:	4604      	mov	r4, r0
   d9640:	6800      	ldr	r0, [r0, #0]
   d9642:	b108      	cbz	r0, d9648 <_ZN7UbiMeshD1Ev+0xc>
   d9644:	f7fa fd2f 	bl	d40a6 <_ZdaPv>
   d9648:	4620      	mov	r0, r4
   d964a:	bd10      	pop	{r4, pc}

000d964c <_ZN7UbiMesh3addEPKcfS1_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void UbiMesh::add(const char* variable_label, float value, const char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d964c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9650:	b0a4      	sub	sp, #144	; 0x90
   d9652:	4606      	mov	r6, r0
   d9654:	4689      	mov	r9, r1
   d9656:	ee10 aa10 	vmov	sl, s0
   d965a:	461f      	mov	r7, r3
   d965c:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
  char _context[100];
  char _dot_timestamp_seconds[11];
  char _dot_timestamp_millis[4];

  if (context != NULL && strlen(context) > 100) {
   d9660:	4615      	mov	r5, r2
   d9662:	ac0b      	add	r4, sp, #44	; 0x2c
   d9664:	b152      	cbz	r2, d967c <_ZN7UbiMesh3addEPKcfS1_mj+0x30>
   d9666:	4610      	mov	r0, r2
   d9668:	f008 fb34 	bl	e1cd4 <strlen>
   d966c:	2864      	cmp	r0, #100	; 0x64
   d966e:	d907      	bls.n	d9680 <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
    Serial.println("[WARNING] Your Mesh context length must be lower than 100");
   d9670:	f003 fcc8 	bl	dd004 <_Z16_fetch_usbserialv>
   d9674:	491a      	ldr	r1, [pc, #104]	; (d96e0 <_ZN7UbiMesh3addEPKcfS1_mj+0x94>)
   d9676:	f002 fd7e 	bl	dc176 <_ZN5Print7printlnEPKc>
   d967a:	e001      	b.n	d9680 <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
  }

  context != NULL ? sprintf(_context, "%s", context)
                  : sprintf(_context, "%s", " ");
   d967c:	4919      	ldr	r1, [pc, #100]	; (d96e4 <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d967e:	e000      	b.n	d9682 <_ZN7UbiMesh3addEPKcfS1_mj+0x36>
   d9680:	4629      	mov	r1, r5
   d9682:	4620      	mov	r0, r4
   d9684:	f007 fdee 	bl	e1264 <strcpy>
   d9688:	ad08      	add	r5, sp, #32

  dot_timestamp_seconds != NULL
      ? sprintf(_dot_timestamp_seconds, "%lu", dot_timestamp_seconds)
      : sprintf(_dot_timestamp_seconds, "%s", " ");
   d968a:	b12f      	cbz	r7, d9698 <_ZN7UbiMesh3addEPKcfS1_mj+0x4c>
   d968c:	463a      	mov	r2, r7
   d968e:	4916      	ldr	r1, [pc, #88]	; (d96e8 <_ZN7UbiMesh3addEPKcfS1_mj+0x9c>)
   d9690:	4628      	mov	r0, r5
   d9692:	f001 fe53 	bl	db33c <sprintf>
   d9696:	e003      	b.n	d96a0 <_ZN7UbiMesh3addEPKcfS1_mj+0x54>
   d9698:	4912      	ldr	r1, [pc, #72]	; (d96e4 <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d969a:	4628      	mov	r0, r5
   d969c:	f007 fde2 	bl	e1264 <strcpy>
   d96a0:	af07      	add	r7, sp, #28

  dot_timestamp_millis != NULL
      ? sprintf(_dot_timestamp_millis, "%d", dot_timestamp_millis)
      : sprintf(_dot_timestamp_millis, "%s", " ");
   d96a2:	f1b8 0f00 	cmp.w	r8, #0
   d96a6:	d005      	beq.n	d96b4 <_ZN7UbiMesh3addEPKcfS1_mj+0x68>
   d96a8:	4642      	mov	r2, r8
   d96aa:	4910      	ldr	r1, [pc, #64]	; (d96ec <_ZN7UbiMesh3addEPKcfS1_mj+0xa0>)
   d96ac:	4638      	mov	r0, r7
   d96ae:	f001 fe45 	bl	db33c <sprintf>
   d96b2:	e003      	b.n	d96bc <_ZN7UbiMesh3addEPKcfS1_mj+0x70>
   d96b4:	490b      	ldr	r1, [pc, #44]	; (d96e4 <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d96b6:	4638      	mov	r0, r7
   d96b8:	f007 fdd4 	bl	e1264 <strcpy>

  sprintf(_meshPayload, "%s|%f|%s|%s|%s", variable_label, value, _context,
          _dot_timestamp_seconds, _dot_timestamp_millis);
   d96bc:	4650      	mov	r0, sl
   d96be:	9704      	str	r7, [sp, #16]
   d96c0:	9503      	str	r5, [sp, #12]
   d96c2:	9402      	str	r4, [sp, #8]
   d96c4:	f006 fc80 	bl	dffc8 <__aeabi_f2d>
   d96c8:	3604      	adds	r6, #4
   d96ca:	e9cd 0100 	strd	r0, r1, [sp]
   d96ce:	464a      	mov	r2, r9
   d96d0:	4907      	ldr	r1, [pc, #28]	; (d96f0 <_ZN7UbiMesh3addEPKcfS1_mj+0xa4>)
   d96d2:	4630      	mov	r0, r6
   d96d4:	f001 fe32 	bl	db33c <sprintf>
}
   d96d8:	b024      	add	sp, #144	; 0x90
   d96da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d96de:	bf00      	nop
   d96e0:	000e4a4f 	.word	0x000e4a4f
   d96e4:	000e4d8a 	.word	0x000e4d8a
   d96e8:	000e4710 	.word	0x000e4710
   d96ec:	000e5124 	.word	0x000e5124
   d96f0:	000e4a89 	.word	0x000e4a89

000d96f4 <_ZN7UbiMesh8setDebugEb>:

/*
  Makes debug messages available
*/

void UbiMesh::setDebug(bool debug) { _debugMesh = debug; }
   d96f4:	4b01      	ldr	r3, [pc, #4]	; (d96fc <_ZN7UbiMesh8setDebugEb+0x8>)
   d96f6:	7019      	strb	r1, [r3, #0]
   d96f8:	4770      	bx	lr
   d96fa:	bf00      	nop
   d96fc:	2003e170 	.word	0x2003e170

000d9700 <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
   d9700:	b508      	push	{r3, lr}
   d9702:	f001 fa85 	bl	dac10 <HAL_Pin_Map>
   d9706:	f001 fb2b 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
typedef std::map<uint8_t, char*> meshMap;
static IotProtocol iotProtocolMesh = UBI_UDP;
static char* _tokenMesh;
static bool _debugMesh = false;
static int _throttlingTime = 20000;
static unsigned long time_now = millis();
   d970a:	4b01      	ldr	r3, [pc, #4]	; (d9710 <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv+0x10>)
   d970c:	6018      	str	r0, [r3, #0]
   d970e:	bd08      	pop	{r3, pc}
   d9710:	2003e174 	.word	0x2003e174

000d9714 <_ZN6UbiUDP3getEPKcS1_>:
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) {
  return ERROR_VALUE;
}
   d9714:	ed9f 0a01 	vldr	s0, [pc, #4]	; d971c <_ZN6UbiUDP3getEPKcS1_+0x8>
   d9718:	4770      	bx	lr
   d971a:	bf00      	nop
   d971c:	cda2425f 	.word	0xcda2425f

000d9720 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d9720:	7501      	strb	r1, [r0, #20]
   d9722:	4770      	bx	lr

000d9724 <_ZN6UbiUDPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
   d9724:	b530      	push	{r4, r5, lr}
               const char *token) {
   d9726:	4d06      	ldr	r5, [pc, #24]	; (d9740 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d9728:	6005      	str	r5, [r0, #0]
   d972a:	2500      	movs	r5, #0
   d972c:	7505      	strb	r5, [r0, #20]
  _host = host;
  _user_agent = user_agent;
   d972e:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
   d9730:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d9734:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
   d9736:	6185      	str	r5, [r0, #24]
  _host = host;
   d9738:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d973a:	60c3      	str	r3, [r0, #12]
  _port = port;
   d973c:	6102      	str	r2, [r0, #16]
}
   d973e:	bd30      	pop	{r4, r5, pc}
   d9740:	000e4c6c 	.word	0x000e4c6c

000d9744 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
   d9744:	b510      	push	{r4, lr}
   d9746:	4c06      	ldr	r4, [pc, #24]	; (d9760 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d9748:	f001 fa62 	bl	dac10 <HAL_Pin_Map>
   d974c:	4620      	mov	r0, r4
   d974e:	f002 fa2d 	bl	dbbac <_ZN3UDPC1Ev>
   d9752:	4620      	mov	r0, r4
   d9754:	4a03      	ldr	r2, [pc, #12]	; (d9764 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d9756:	4904      	ldr	r1, [pc, #16]	; (d9768 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
   d9758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d975c:	f004 bb40 	b.w	ddde0 <__aeabi_atexit>
   d9760:	2003e17c 	.word	0x2003e17c
   d9764:	2003bce8 	.word	0x2003bce8
   d9768:	000d9295 	.word	0x000d9295

000d976c <_ZN6UbiUDP11getServerIpEv>:

/**
 * Obtains the remote host's IP
 */

IPAddress UbiUDP::getServerIp() {
   d976c:	b510      	push	{r4, lr}
   d976e:	4604      	mov	r4, r0
#if (PLATFORM_ID == 12 || PLATFORM_ID == 6)  // Argon(12), Photon(6)
  return WiFi.resolve(_host);
#elif (PLATFORM_ID == 13 || PLATFORM_ID == 10)  // Boron(13), Electron(10)
  return Cellular.resolve(_host);
   d9770:	684a      	ldr	r2, [r1, #4]
   d9772:	4902      	ldr	r1, [pc, #8]	; (d977c <_ZN6UbiUDP11getServerIpEv+0x10>)
   d9774:	f004 fa0b 	bl	ddb8e <_ZN5spark12NetworkClass7resolveEPKc>
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
   d9778:	4620      	mov	r0, r4
   d977a:	bd10      	pop	{r4, pc}
   d977c:	2003e2dc 	.word	0x2003e2dc

000d9780 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d9780:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9782:	b08f      	sub	sp, #60	; 0x3c
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d9784:	4601      	mov	r1, r0
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d9786:	4606      	mov	r6, r0
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d9788:	a802      	add	r0, sp, #8
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d978a:	461f      	mov	r7, r3
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d978c:	f7ff ffee 	bl	d976c <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d9790:	a802      	add	r0, sp, #8
   d9792:	f003 fb99 	bl	dcec8 <_ZNK9IPAddresscvbEv>

  if (!serverIpAddress) {
   d9796:	b9a0      	cbnz	r0, d97c2 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d9798:	7d33      	ldrb	r3, [r6, #20]
   d979a:	b123      	cbz	r3, d97a6 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d979c:	f003 fc32 	bl	dd004 <_Z16_fetch_usbserialv>
          "[Warning] Could not solve IP Address of the remote host, with your DNS setup. \
          \nUsing default Industrial Ubidots IP: 169.55.61.243");
   d97a0:	4925      	ldr	r1, [pc, #148]	; (d9838 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb8>)
   d97a2:	f002 fce8 	bl	dc176 <_ZN5Print7printlnEPKc>
    }
    serverIpAddress = IPAddress(169,55,61,243);
   d97a6:	23f3      	movs	r3, #243	; 0xf3
   d97a8:	9300      	str	r3, [sp, #0]
   d97aa:	2237      	movs	r2, #55	; 0x37
   d97ac:	233d      	movs	r3, #61	; 0x3d
   d97ae:	21a9      	movs	r1, #169	; 0xa9
   d97b0:	a808      	add	r0, sp, #32

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d97b2:	ad09      	add	r5, sp, #36	; 0x24
   d97b4:	f003 fbac 	bl	dcf10 <_ZN9IPAddressC1Ehhhh>
   d97b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d97ba:	ac03      	add	r4, sp, #12
   d97bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d97be:	682b      	ldr	r3, [r5, #0]
   d97c0:	7023      	strb	r3, [r4, #0]
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d97c2:	2200      	movs	r2, #0
   d97c4:	f240 21bd 	movw	r1, #701	; 0x2bd
   d97c8:	481c      	ldr	r0, [pc, #112]	; (d983c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d97ca:	f002 fa1f 	bl	dbc0c <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d97ce:	2200      	movs	r2, #0
   d97d0:	f242 3134 	movw	r1, #9012	; 0x2334
   d97d4:	4819      	ldr	r0, [pc, #100]	; (d983c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d97d6:	f001 fff4 	bl	db7c2 <_ZN3UDP5beginEtm>
   d97da:	ad03      	add	r5, sp, #12
   d97dc:	4b18      	ldr	r3, [pc, #96]	; (d9840 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d97de:	9308      	str	r3, [sp, #32]
   d97e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d97e2:	ac09      	add	r4, sp, #36	; 0x24
   d97e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d97e6:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   d97e8:	4814      	ldr	r0, [pc, #80]	; (d983c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d97ea:	7023      	strb	r3, [r4, #0]
   d97ec:	f242 3234 	movw	r2, #9012	; 0x2334
   d97f0:	a908      	add	r1, sp, #32
   d97f2:	f002 fa25 	bl	dbc40 <_ZN3UDP11beginPacketE9IPAddresst>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
   d97f6:	b168      	cbz	r0, d9814 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d97f8:	b167      	cbz	r7, d9814 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
      return write((const uint8_t *)str, strlen(str));
   d97fa:	4638      	mov	r0, r7
   d97fc:	f008 fa6a 	bl	e1cd4 <strlen>
   d9800:	4639      	mov	r1, r7
   d9802:	4602      	mov	r2, r0
   d9804:	480d      	ldr	r0, [pc, #52]	; (d983c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d9806:	f002 f838 	bl	db87a <_ZN3UDP5writeEPKhj>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   d980a:	b118      	cbz	r0, d9814 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
   d980c:	480b      	ldr	r0, [pc, #44]	; (d983c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d980e:	f002 f893 	bl	db938 <_ZN3UDP9endPacketEv>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   d9812:	b958      	cbnz	r0, d982c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
    if (_debug) {
   d9814:	7d33      	ldrb	r3, [r6, #20]
   d9816:	b123      	cbz	r3, d9822 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa2>
      Serial.println("ERROR sending values with UDP");
   d9818:	f003 fbf4 	bl	dd004 <_Z16_fetch_usbserialv>
   d981c:	4909      	ldr	r1, [pc, #36]	; (d9844 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d981e:	f002 fcaa 	bl	dc176 <_ZN5Print7printlnEPKc>
    }
    _client_udp_ubi.stop();
   d9822:	4806      	ldr	r0, [pc, #24]	; (d983c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d9824:	f002 f81b 	bl	db85e <_ZN3UDP4stopEv>
    return false;
   d9828:	2000      	movs	r0, #0
   d982a:	e003      	b.n	d9834 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>
  }

  _client_udp_ubi.stop();
   d982c:	4803      	ldr	r0, [pc, #12]	; (d983c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d982e:	f002 f816 	bl	db85e <_ZN3UDP4stopEv>
  return true;
   d9832:	2001      	movs	r0, #1
}
   d9834:	b00f      	add	sp, #60	; 0x3c
   d9836:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9838:	000e4bb7 	.word	0x000e4bb7
   d983c:	2003e17c 	.word	0x2003e17c
   d9840:	000e4fac 	.word	0x000e4fac
   d9844:	000e4c43 	.word	0x000e4c43

000d9848 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d9848:	ed9f 0a01 	vldr	s0, [pc, #4]	; d9850 <_ZN11UbiParticle3getEPKcS1_+0x8>
   d984c:	4770      	bx	lr
   d984e:	bf00      	nop
   d9850:	cda2425f 	.word	0xcda2425f

000d9854 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d9854:	7401      	strb	r1, [r0, #16]
   d9856:	4770      	bx	lr

000d9858 <_ZN11UbiParticleC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
   d9858:	b510      	push	{r4, lr}
                         const char* user_agent, const char* token) {
   d985a:	4c04      	ldr	r4, [pc, #16]	; (d986c <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d985c:	6004      	str	r4, [r0, #0]
  _host = host;
  _user_agent = user_agent;
   d985e:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
                         const char* user_agent, const char* token) {
   d9860:	2400      	movs	r4, #0
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d9862:	9b02      	ldr	r3, [sp, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
                         const char* user_agent, const char* token) {
   d9864:	7404      	strb	r4, [r0, #16]
  _host = host;
   d9866:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d9868:	60c3      	str	r3, [r0, #12]
}
   d986a:	bd10      	pop	{r4, pc}
   d986c:	000e4c80 	.word	0x000e4c80

000d9870 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   d9870:	b570      	push	{r4, r5, r6, lr}
   d9872:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d9874:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   d9876:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d9878:	f001 fc84 	bl	db184 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
   d987c:	b908      	cbnz	r0, d9882 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
   d987e:	2000      	movs	r0, #0
   d9880:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
   d9882:	2c00      	cmp	r4, #0
   d9884:	dd03      	ble.n	d988e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
   d9886:	f001 fa6b 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
   d988a:	4605      	mov	r5, r0
   d988c:	e000      	b.n	d9890 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
   d988e:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d9890:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d9892:	b93b      	cbnz	r3, d98a4 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
   d9894:	2c00      	cmp	r4, #0
   d9896:	dd07      	ble.n	d98a8 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   d9898:	f001 fa62 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
   d989c:	1b40      	subs	r0, r0, r5
   d989e:	42a0      	cmp	r0, r4
   d98a0:	d302      	bcc.n	d98a8 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   d98a2:	e7ec      	b.n	d987e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
   d98a4:	2001      	movs	r0, #1
   d98a6:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
   d98a8:	f001 fcf8 	bl	db29c <spark_process>
   d98ac:	e7f0      	b.n	d9890 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>

000d98ae <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
/*
 * Wrapper of the Publish() method from particle to trigger webhooks
 */

bool UbiParticle::sendData(const char* device_label, const char* device_name,
                           char* payload, UbiFlags* flags) {
   d98ae:	b530      	push	{r4, r5, lr}
   d98b0:	b085      	sub	sp, #20
   d98b2:	461a      	mov	r2, r3
   d98b4:	9b08      	ldr	r3, [sp, #32]
   d98b6:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d98b8:	f88d 3000 	strb.w	r3, [sp]
   d98bc:	a802      	add	r0, sp, #8
   d98be:	233c      	movs	r3, #60	; 0x3c
   d98c0:	f003 f926 	bl	dcb10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d98c4:	9c02      	ldr	r4, [sp, #8]
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
   d98c6:	2100      	movs	r1, #0
   d98c8:	4620      	mov	r0, r4
   d98ca:	f7ff ffd1 	bl	d9870 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
   d98ce:	7863      	ldrb	r3, [r4, #1]
   d98d0:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
   d98d4:	b133      	cbz	r3, d98e4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
   d98d6:	2100      	movs	r1, #0
   d98d8:	4620      	mov	r0, r4
   d98da:	f7ff ffc9 	bl	d9870 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d98de:	7823      	ldrb	r3, [r4, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
   d98e0:	2b01      	cmp	r3, #1
   d98e2:	d013      	beq.n	d990c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5e>
            return result_;
        }
        return std::move(defaultValue);
   d98e4:	2500      	movs	r5, #0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d98e6:	9c03      	ldr	r4, [sp, #12]
   d98e8:	b194      	cbz	r4, d9910 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d98ea:	6863      	ldr	r3, [r4, #4]
   d98ec:	3b01      	subs	r3, #1
   d98ee:	6063      	str	r3, [r4, #4]
   d98f0:	b973      	cbnz	r3, d9910 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
        {
          _M_dispose();
   d98f2:	6823      	ldr	r3, [r4, #0]
   d98f4:	4620      	mov	r0, r4
   d98f6:	689b      	ldr	r3, [r3, #8]
   d98f8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d98fa:	68a3      	ldr	r3, [r4, #8]
   d98fc:	3b01      	subs	r3, #1
   d98fe:	60a3      	str	r3, [r4, #8]
   d9900:	b933      	cbnz	r3, d9910 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
            _M_destroy();
   d9902:	6823      	ldr	r3, [r4, #0]
   d9904:	4620      	mov	r0, r4
   d9906:	68db      	ldr	r3, [r3, #12]
   d9908:	4798      	blx	r3
  return Particle.publish(device_label, payload, flags->particle_flag);
   d990a:	e001      	b.n	d9910 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
            return result_;
   d990c:	7b25      	ldrb	r5, [r4, #12]
   d990e:	e7ea      	b.n	d98e6 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x38>
}
   d9910:	4628      	mov	r0, r5
   d9912:	b005      	add	sp, #20
   d9914:	bd30      	pop	{r4, r5, pc}

000d9916 <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
   d9916:	f001 b97b 	b.w	dac10 <HAL_Pin_Map>

000d991a <_ZN9MPL3115A2C1Ev>:
#include "SparkFun_MPL3115A2.h"

MPL3115A2::MPL3115A2()
{
  //Set initial values for private vars
}
   d991a:	4770      	bx	lr

000d991c <_ZN9MPL3115A28IIC_ReadEh>:
}


// These are the two I2C functions in this sketch.
byte MPL3115A2::IIC_Read(byte regAddr)
{
   d991c:	b510      	push	{r4, lr}
   d991e:	460c      	mov	r4, r1
  // This function reads one byte over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
   d9920:	f004 fa38 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9924:	2160      	movs	r1, #96	; 0x60
   d9926:	f003 fd56 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);  // Address of CTRL_REG1
   d992a:	f004 fa33 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d992e:	6803      	ldr	r3, [r0, #0]
   d9930:	4621      	mov	r1, r4
   d9932:	689b      	ldr	r3, [r3, #8]
   d9934:	4798      	blx	r3
  Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   d9936:	f004 fa2d 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d993a:	2100      	movs	r1, #0
   d993c:	f003 fd4e 	bl	dd3dc <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPL3115A2_ADDRESS, 1); // Request the data...
   d9940:	f004 fa28 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9944:	2201      	movs	r2, #1
   d9946:	2160      	movs	r1, #96	; 0x60
   d9948:	f003 fd3e 	bl	dd3c8 <_ZN7TwoWire11requestFromEhj>
  return Wire.read();
   d994c:	f004 fa22 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9950:	6803      	ldr	r3, [r0, #0]
   d9952:	695b      	ldr	r3, [r3, #20]
   d9954:	4798      	blx	r3
}
   d9956:	b2c0      	uxtb	r0, r0
   d9958:	bd10      	pop	{r4, pc}

000d995a <_ZN9MPL3115A25beginEv>:

//Begin
/*******************************************************************************************/
//Start I2C communication
bool MPL3115A2::begin()
{
   d995a:	b510      	push	{r4, lr}
   d995c:	4604      	mov	r4, r0
  Wire.begin();
   d995e:	f004 fa19 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9962:	f003 fcfd 	bl	dd360 <_ZN7TwoWire5beginEv>
  uint8_t identify = IIC_Read(WHO_AM_I );
   d9966:	210c      	movs	r1, #12
   d9968:	4620      	mov	r0, r4
   d996a:	f7ff ffd7 	bl	d991c <_ZN9MPL3115A28IIC_ReadEh>
  {
    return false;
  }
  else
    return true;
}
   d996e:	f1a0 03c4 	sub.w	r3, r0, #196	; 0xc4
   d9972:	4258      	negs	r0, r3
   d9974:	4158      	adcs	r0, r3
   d9976:	bd10      	pop	{r4, pc}

000d9978 <_ZN9MPL3115A29IIC_WriteEhh>:
  Wire.requestFrom(MPL3115A2_ADDRESS, 1); // Request the data...
  return Wire.read();
}

void MPL3115A2::IIC_Write(byte regAddr, byte value)
{
   d9978:	b538      	push	{r3, r4, r5, lr}
   d997a:	4614      	mov	r4, r2
   d997c:	460d      	mov	r5, r1
  // This function writes one byto over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
   d997e:	f004 fa09 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9982:	2160      	movs	r1, #96	; 0x60
   d9984:	f003 fd27 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);
   d9988:	f004 fa04 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d998c:	6803      	ldr	r3, [r0, #0]
   d998e:	4629      	mov	r1, r5
   d9990:	689b      	ldr	r3, [r3, #8]
   d9992:	4798      	blx	r3
  Wire.write(value);
   d9994:	f004 f9fe 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9998:	6803      	ldr	r3, [r0, #0]
   d999a:	4621      	mov	r1, r4
   d999c:	689b      	ldr	r3, [r3, #8]
   d999e:	4798      	blx	r3
  Wire.endTransmission(true);
   d99a0:	f004 f9f8 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d99a4:	2101      	movs	r1, #1
}
   d99a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
  // This function writes one byto over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
  Wire.write(regAddr);
  Wire.write(value);
  Wire.endTransmission(true);
   d99aa:	f003 bd17 	b.w	dd3dc <_ZN7TwoWire15endTransmissionEh>

000d99ae <_ZN9MPL3115A216setModeBarometerEv>:
}

//Sets the mode to Barometer
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
   d99ae:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d99b0:	2126      	movs	r1, #38	; 0x26
}

//Sets the mode to Barometer
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
   d99b2:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d99b4:	f7ff ffb2 	bl	d991c <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= ~(1<<7); //Clear ALT bit
  IIC_Write(CTRL_REG1, tempSetting);
   d99b8:	2126      	movs	r1, #38	; 0x26
   d99ba:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d99be:	4620      	mov	r0, r4
}
   d99c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
  tempSetting &= ~(1<<7); //Clear ALT bit
  IIC_Write(CTRL_REG1, tempSetting);
   d99c4:	f7ff bfd8 	b.w	d9978 <_ZN9MPL3115A29IIC_WriteEhh>

000d99c8 <_ZN9MPL3115A217setOversampleRateEh>:
//Call with a rate from 0 to 7. See page 33 for table of ratios.
//Sets the over sample rate. Datasheet calls for 128 but you can set it
//from 1 to 128 samples. The higher the oversample rate the greater
//the time between data samples.
void MPL3115A2::setOversampleRate(byte sampleRate)
{
   d99c8:	2907      	cmp	r1, #7
   d99ca:	bf28      	it	cs
   d99cc:	2107      	movcs	r1, #7
   d99ce:	b538      	push	{r3, r4, r5, lr}
   d99d0:	460d      	mov	r5, r1
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d99d2:	2126      	movs	r1, #38	; 0x26
//Call with a rate from 0 to 7. See page 33 for table of ratios.
//Sets the over sample rate. Datasheet calls for 128 but you can set it
//from 1 to 128 samples. The higher the oversample rate the greater
//the time between data samples.
void MPL3115A2::setOversampleRate(byte sampleRate)
{
   d99d4:	4604      	mov	r4, r0
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d99d6:	f7ff ffa1 	bl	d991c <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= 0b11000111; //Clear out old OS bits
   d99da:	f000 00c7 	and.w	r0, r0, #199	; 0xc7
  tempSetting |= sampleRate; //Mask in new OS bits
  IIC_Write(CTRL_REG1, tempSetting);
   d99de:	ea40 02c5 	orr.w	r2, r0, r5, lsl #3
   d99e2:	b2d2      	uxtb	r2, r2
   d99e4:	4620      	mov	r0, r4
   d99e6:	2126      	movs	r1, #38	; 0x26
}
   d99e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
  tempSetting &= 0b11000111; //Clear out old OS bits
  tempSetting |= sampleRate; //Mask in new OS bits
  IIC_Write(CTRL_REG1, tempSetting);
   d99ec:	f7ff bfc4 	b.w	d9978 <_ZN9MPL3115A29IIC_WriteEhh>

000d99f0 <_ZN9MPL3115A216enableEventFlagsEv>:

//Enables the pressure and temp measurement event flags so that we can
//test against them. This is recommended in datasheet during setup.
void MPL3115A2::enableEventFlags()
{
  IIC_Write(PT_DATA_CFG, 0x07); // Enable all three pressure and temp event flags
   d99f0:	2207      	movs	r2, #7
   d99f2:	2113      	movs	r1, #19
   d99f4:	f7ff bfc0 	b.w	d9978 <_ZN9MPL3115A29IIC_WriteEhh>

000d99f8 <_ZN9MPL3115A213toggleOneShotEv>:
}

//Clears then sets the OST bit which causes the sensor to immediately take another reading
//Needed to sample faster than 1Hz
void MPL3115A2::toggleOneShot(void)
{
   d99f8:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d99fa:	2126      	movs	r1, #38	; 0x26
}

//Clears then sets the OST bit which causes the sensor to immediately take another reading
//Needed to sample faster than 1Hz
void MPL3115A2::toggleOneShot(void)
{
   d99fc:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d99fe:	f7ff ff8d 	bl	d991c <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= ~(1<<1); //Clear OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   d9a02:	2126      	movs	r1, #38	; 0x26
   d9a04:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
   d9a08:	4620      	mov	r0, r4
   d9a0a:	f7ff ffb5 	bl	d9978 <_ZN9MPL3115A29IIC_WriteEhh>

  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
   d9a0e:	2126      	movs	r1, #38	; 0x26
   d9a10:	4620      	mov	r0, r4
   d9a12:	f7ff ff83 	bl	d991c <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting |= (1<<1); //Set OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   d9a16:	f040 0202 	orr.w	r2, r0, #2
   d9a1a:	b2d2      	uxtb	r2, r2
   d9a1c:	4620      	mov	r0, r4
   d9a1e:	2126      	movs	r1, #38	; 0x26
}
   d9a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tempSetting &= ~(1<<1); //Clear OST bit
  IIC_Write(CTRL_REG1, tempSetting);

  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
  tempSetting |= (1<<1); //Set OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   d9a24:	f7ff bfa8 	b.w	d9978 <_ZN9MPL3115A29IIC_WriteEhh>

000d9a28 <_ZN9MPL3115A212readPressureEv>:

//Reads the current pressure in Pa
//Unit must be set in barometric pressure mode
//Returns -1 if no new data is available
float MPL3115A2::readPressure()
{
   d9a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Check PDR bit, if it's not set then toggle OST
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d9a2a:	2100      	movs	r1, #0

//Reads the current pressure in Pa
//Unit must be set in barometric pressure mode
//Returns -1 if no new data is available
float MPL3115A2::readPressure()
{
   d9a2c:	4607      	mov	r7, r0
	//Check PDR bit, if it's not set then toggle OST
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d9a2e:	f7ff ff75 	bl	d991c <_ZN9MPL3115A28IIC_ReadEh>

	//Wait for PDR bit, indicates we have new pressure data
	int counter = 0;
	while(IIC_Read(STATUS) & (1<<2) == 0)
   d9a32:	2100      	movs	r1, #0
   d9a34:	4638      	mov	r0, r7
   d9a36:	f7ff ff71 	bl	d991c <_ZN9MPL3115A28IIC_ReadEh>
		if(++counter > 600) return(-999); //Error out after max of 512ms for a read
		delay(1);
	}

	// Read pressure registers
	Wire.beginTransmission(MPL3115A2_ADDRESS);
   d9a3a:	f004 f9ab 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9a3e:	2160      	movs	r1, #96	; 0x60
   d9a40:	f003 fcc9 	bl	dd3d6 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(OUT_P_MSB);  // Address of data to get
   d9a44:	f004 f9a6 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9a48:	2101      	movs	r1, #1
   d9a4a:	f7fc f934 	bl	d5cb6 <_ZN7TwoWire5writeEi>
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   d9a4e:	f004 f9a1 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9a52:	2100      	movs	r1, #0
   d9a54:	f003 fcc2 	bl	dd3dc <_ZN7TwoWire15endTransmissionEh>
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 3) != 3) { // Request three bytes
   d9a58:	f004 f99c 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9a5c:	2203      	movs	r2, #3
   d9a5e:	2160      	movs	r1, #96	; 0x60
   d9a60:	f003 fcb2 	bl	dd3c8 <_ZN7TwoWire11requestFromEhj>
   d9a64:	2803      	cmp	r0, #3
   d9a66:	d12c      	bne.n	d9ac2 <_ZN9MPL3115A212readPressureEv+0x9a>
		return -999;
	}

	byte msb, csb, lsb;
	msb = Wire.read();
   d9a68:	f004 f994 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9a6c:	6803      	ldr	r3, [r0, #0]
   d9a6e:	695b      	ldr	r3, [r3, #20]
   d9a70:	4798      	blx	r3
   d9a72:	4606      	mov	r6, r0
	csb = Wire.read();
   d9a74:	f004 f98e 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9a78:	6803      	ldr	r3, [r0, #0]
   d9a7a:	695b      	ldr	r3, [r3, #20]
   d9a7c:	4798      	blx	r3
   d9a7e:	4604      	mov	r4, r0
	lsb = Wire.read();
   d9a80:	f004 f988 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9a84:	6803      	ldr	r3, [r0, #0]
   d9a86:	695b      	ldr	r3, [r3, #20]
   d9a88:	4798      	blx	r3

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading

	// Pressure comes back as a left shifted 20 bit number
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   d9a8a:	0436      	lsls	r6, r6, #16
   d9a8c:	0224      	lsls	r4, r4, #8
   d9a8e:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
   d9a92:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
	}

	byte msb, csb, lsb;
	msb = Wire.read();
	csb = Wire.read();
	lsb = Wire.read();
   d9a96:	b2c5      	uxtb	r5, r0

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading

	// Pressure comes back as a left shifted 20 bit number
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   d9a98:	4334      	orrs	r4, r6
   d9a9a:	432c      	orrs	r4, r5
	byte msb, csb, lsb;
	msb = Wire.read();
	csb = Wire.read();
	lsb = Wire.read();

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d9a9c:	4638      	mov	r0, r7
   d9a9e:	f7ff ffab 	bl	d99f8 <_ZN9MPL3115A213toggleOneShotEv>

	lsb &= 0b00110000; //Bits 5/4 represent the fractional component
	lsb >>= 4; //Get it right aligned
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction

	float pressure = (float)pressure_whole + pressure_decimal;
   d9aa2:	f3c5 1501 	ubfx	r5, r5, #4, #2
   d9aa6:	11a3      	asrs	r3, r4, #6
   d9aa8:	ee07 5a90 	vmov	s15, r5
   d9aac:	ee00 3a10 	vmov	s0, r3
   d9ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d9ab4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d9ab8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   d9abc:	eea7 0a87 	vfma.f32	s0, s15, s14

	return(pressure);
   d9ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Read pressure registers
	Wire.beginTransmission(MPL3115A2_ADDRESS);
	Wire.write(OUT_P_MSB);  // Address of data to get
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 3) != 3) { // Request three bytes
		return -999;
   d9ac2:	ed9f 0a01 	vldr	s0, [pc, #4]	; d9ac8 <_ZN9MPL3115A212readPressureEv+0xa0>
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction

	float pressure = (float)pressure_whole + pressure_decimal;

	return(pressure);
}
   d9ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9ac8:	c479c000 	.word	0xc479c000

000d9acc <_GLOBAL__sub_I__ZN9MPL3115A2C2Ev>:
   d9acc:	f001 b8a0 	b.w	dac10 <HAL_Pin_Map>

000d9ad0 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf>:
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   d9ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9ad4:	ed2d 8b02 	vpush	{d8}
    if(AnemoneterPeriodReadingCount == 0)
   d9ad8:	f241 6578 	movw	r5, #5752	; 0x1678
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   d9adc:	4604      	mov	r4, r0
    if(AnemoneterPeriodReadingCount == 0)
   d9ade:	5943      	ldr	r3, [r0, r5]
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   d9ae0:	468a      	mov	sl, r1
    if(AnemoneterPeriodReadingCount == 0)
   d9ae2:	b923      	cbnz	r3, d9aee <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0x1e>
    {
        *gustMPH = 0.0;
   d9ae4:	ed9f 0a2a 	vldr	s0, [pc, #168]	; d9b90 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xc0>
   d9ae8:	ed81 0a00 	vstr	s0, [r1]
        return 0;
   d9aec:	e04c      	b.n	d9b88 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xb8>
    }
    // Nonintuitive math:  We've collected the sum of the observed periods between pulses, and the number of observations.
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
   d9aee:	f500 53b3 	add.w	r3, r0, #5728	; 0x1660
   d9af2:	f241 6b74 	movw	fp, #5748	; 0x1674
   d9af6:	6918      	ldr	r0, [r3, #16]
   d9af8:	f006 fa66 	bl	dffc8 <__aeabi_f2d>
   d9afc:	2200      	movs	r2, #0
   d9afe:	4b25      	ldr	r3, [pc, #148]	; (d9b94 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xc4>)
   d9b00:	f006 fab6 	bl	e0070 <__aeabi_dmul>
   d9b04:	4606      	mov	r6, r0
   d9b06:	5960      	ldr	r0, [r4, r5]
   d9b08:	f854 300b 	ldr.w	r3, [r4, fp]
   d9b0c:	ee07 0a90 	vmov	s15, r0
   d9b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d9b14:	460f      	mov	r7, r1
   d9b16:	ee17 0a90 	vmov	r0, s15
   d9b1a:	ee08 3a10 	vmov	s16, r3
   d9b1e:	f006 fa53 	bl	dffc8 <__aeabi_f2d>
   d9b22:	4632      	mov	r2, r6
   d9b24:	463b      	mov	r3, r7
   d9b26:	f006 faa3 	bl	e0070 <__aeabi_dmul>
   d9b2a:	eef8 7a48 	vcvt.f32.u32	s15, s16
   d9b2e:	4680      	mov	r8, r0
   d9b30:	ee17 0a90 	vmov	r0, s15
   d9b34:	4689      	mov	r9, r1
   d9b36:	f006 fa47 	bl	dffc8 <__aeabi_f2d>
   d9b3a:	4602      	mov	r2, r0
   d9b3c:	460b      	mov	r3, r1
   d9b3e:	4640      	mov	r0, r8
   d9b40:	4649      	mov	r1, r9
   d9b42:	f006 fbbf 	bl	e02c4 <__aeabi_ddiv>
   d9b46:	f006 fd8b 	bl	e0660 <__aeabi_d2f>
    AnemoneterPeriodTotal = 0;
   d9b4a:	2300      	movs	r3, #0
   d9b4c:	f844 300b 	str.w	r3, [r4, fp]
    AnemoneterPeriodReadingCount = 0;
   d9b50:	5163      	str	r3, [r4, r5]
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d9b52:	f241 657c 	movw	r5, #5756	; 0x167c
        return 0;
    }
    // Nonintuitive math:  We've collected the sum of the observed periods between pulses, and the number of observations.
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
   d9b56:	4680      	mov	r8, r0
    AnemoneterPeriodTotal = 0;
    AnemoneterPeriodReadingCount = 0;
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d9b58:	5960      	ldr	r0, [r4, r5]
   d9b5a:	ee07 0a90 	vmov	s15, r0
   d9b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d9b62:	ee17 0a90 	vmov	r0, s15
   d9b66:	f006 fa2f 	bl	dffc8 <__aeabi_f2d>
   d9b6a:	460b      	mov	r3, r1
   d9b6c:	4602      	mov	r2, r0
   d9b6e:	4639      	mov	r1, r7
   d9b70:	4630      	mov	r0, r6
   d9b72:	f006 fba7 	bl	e02c4 <__aeabi_ddiv>
   d9b76:	f006 fd73 	bl	e0660 <__aeabi_d2f>
    GustPeriod = UINT_MAX;
   d9b7a:	f04f 33ff 	mov.w	r3, #4294967295
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
    AnemoneterPeriodTotal = 0;
    AnemoneterPeriodReadingCount = 0;
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d9b7e:	f8ca 0000 	str.w	r0, [sl]
    GustPeriod = UINT_MAX;
   d9b82:	ee00 8a10 	vmov	s0, r8
   d9b86:	5163      	str	r3, [r4, r5]
    return result;
}
   d9b88:	ecbd 8b02 	vpop	{d8}
   d9b8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9b90:	00000000 	.word	0x00000000
   d9b94:	408f4000 	.word	0x408f4000

000d9b98 <_ZN14WeatherSensors21captureBatteryVoltageEv>:

void WeatherSensors::captureBatteryVoltage()
{
   d9b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9b9a:	4605      	mov	r5, r0
  unsigned int rawVoltage = 0;
  Wire.requestFrom(0x4D, 2);
   d9b9c:	f004 f8fa 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9ba0:	2202      	movs	r2, #2
   d9ba2:	214d      	movs	r1, #77	; 0x4d
   d9ba4:	f003 fc10 	bl	dd3c8 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() == 2)
   d9ba8:	f004 f8f4 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9bac:	6803      	ldr	r3, [r0, #0]
   d9bae:	691b      	ldr	r3, [r3, #16]
   d9bb0:	4798      	blx	r3
   d9bb2:	2802      	cmp	r0, #2
   d9bb4:	d132      	bne.n	d9c1c <_ZN14WeatherSensors21captureBatteryVoltageEv+0x84>
  {
    rawVoltage = (Wire.read() << 8) | (Wire.read());
   d9bb6:	f004 f8ed 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9bba:	6803      	ldr	r3, [r0, #0]
   d9bbc:	695b      	ldr	r3, [r3, #20]
   d9bbe:	4798      	blx	r3
   d9bc0:	4606      	mov	r6, r0
   d9bc2:	f004 f8e7 	bl	ddd94 <_Z19__fetch_global_Wirev>
   d9bc6:	6803      	ldr	r3, [r0, #0]
   d9bc8:	695b      	ldr	r3, [r3, #20]
   d9bca:	4798      	blx	r3
    batVoltageTotal += (float)(rawVoltage)/4096.0*13.64; // 3.3*(4.7+1.5)/1.5
   d9bcc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   d9bd0:	ee07 0a90 	vmov	s15, r0
   d9bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d9bd8:	f505 54b5 	add.w	r4, r5, #5792	; 0x16a0
   d9bdc:	ee17 0a90 	vmov	r0, s15
   d9be0:	f006 f9f2 	bl	dffc8 <__aeabi_f2d>
   d9be4:	2200      	movs	r2, #0
   d9be6:	4b10      	ldr	r3, [pc, #64]	; (d9c28 <_ZN14WeatherSensors21captureBatteryVoltageEv+0x90>)
   d9be8:	f006 fa42 	bl	e0070 <__aeabi_dmul>
   d9bec:	a30c      	add	r3, pc, #48	; (adr r3, d9c20 <_ZN14WeatherSensors21captureBatteryVoltageEv+0x88>)
   d9bee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9bf2:	f006 fa3d 	bl	e0070 <__aeabi_dmul>
   d9bf6:	4606      	mov	r6, r0
   d9bf8:	6920      	ldr	r0, [r4, #16]
   d9bfa:	460f      	mov	r7, r1
   d9bfc:	f006 f9e4 	bl	dffc8 <__aeabi_f2d>
   d9c00:	4602      	mov	r2, r0
   d9c02:	460b      	mov	r3, r1
   d9c04:	4630      	mov	r0, r6
   d9c06:	4639      	mov	r1, r7
   d9c08:	f006 f880 	bl	dfd0c <__adddf3>
   d9c0c:	f006 fd28 	bl	e0660 <__aeabi_d2f>
    batVoltageCount ++;
   d9c10:	f241 62b4 	movw	r2, #5812	; 0x16b4
  unsigned int rawVoltage = 0;
  Wire.requestFrom(0x4D, 2);
  if (Wire.available() == 2)
  {
    rawVoltage = (Wire.read() << 8) | (Wire.read());
    batVoltageTotal += (float)(rawVoltage)/4096.0*13.64; // 3.3*(4.7+1.5)/1.5
   d9c14:	6120      	str	r0, [r4, #16]
    batVoltageCount ++;
   d9c16:	58ab      	ldr	r3, [r5, r2]
   d9c18:	3301      	adds	r3, #1
   d9c1a:	50ab      	str	r3, [r5, r2]
   d9c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9c1e:	bf00      	nop
   d9c20:	147ae148 	.word	0x147ae148
   d9c24:	402b47ae 	.word	0x402b47ae
   d9c28:	3f300000 	.word	0x3f300000

000d9c2c <_ZN14WeatherSensors20getAndResetBatteryMVEv>:
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d9c2c:	f241 62b4 	movw	r2, #5812	; 0x16b4
   d9c30:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
   d9c34:	5881      	ldr	r1, [r0, r2]
   d9c36:	edd3 6a04 	vldr	s13, [r3, #16]
   d9c3a:	ee07 1a90 	vmov	s15, r1
   d9c3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    batVoltageCount ++;
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
   d9c42:	b082      	sub	sp, #8
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d9c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 batVoltageTotal = 0;
   d9c48:	2100      	movs	r1, #0
   d9c4a:	6119      	str	r1, [r3, #16]
 batVoltageCount = 0;
   d9c4c:	2300      	movs	r3, #0
   d9c4e:	5083      	str	r3, [r0, r2]
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d9c50:	ed9f 7a05 	vldr	s14, [pc, #20]	; d9c68 <_ZN14WeatherSensors20getAndResetBatteryMVEv+0x3c>
   d9c54:	ee67 7a87 	vmul.f32	s15, s15, s14
   d9c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d9c5c:	edcd 7a01 	vstr	s15, [sp, #4]
 batVoltageTotal = 0;
 batVoltageCount = 0;
 return result;
}
   d9c60:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d9c64:	b002      	add	sp, #8
   d9c66:	4770      	bx	lr
   d9c68:	447a0000 	.word	0x447a0000

000d9c6c <_ZN14WeatherSensors21getAndResetRainInchesEv>:
}*/


float WeatherSensors::getAndResetRainInches()
{
    float result = RainScaleInches * float(rainEventCount);
   d9c6c:	f500 53b3 	add.w	r3, r0, #5728	; 0x1660
   d9c70:	ed93 0a00 	vldr	s0, [r3]
   d9c74:	edd3 7a02 	vldr	s15, [r3, #8]
   d9c78:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    rainEventCount = 0;
   d9c7c:	2200      	movs	r2, #0
   d9c7e:	601a      	str	r2, [r3, #0]
    return result;
}
   d9c80:	ee20 0a27 	vmul.f32	s0, s0, s15
   d9c84:	4770      	bx	lr
	...

000d9c88 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv>:
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   d9c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(windVaneReadingCount == 0) {
   d9c8a:	f241 6790 	movw	r7, #5776	; 0x1690
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   d9c8e:	ed2d 8b02 	vpush	{d8}
    if(windVaneReadingCount == 0) {
   d9c92:	59c3      	ldr	r3, [r0, r7]
   d9c94:	ed9f 8a28 	vldr	s16, [pc, #160]	; d9d38 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb0>
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   d9c98:	4604      	mov	r4, r0
    if(windVaneReadingCount == 0) {
   d9c9a:	2b00      	cmp	r3, #0
   d9c9c:	d041      	beq.n	d9d22 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9a>
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   d9c9e:	ee07 3a90 	vmov	s15, r3
   d9ca2:	f500 56b4 	add.w	r6, r0, #5760	; 0x1680
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   d9ca6:	edd6 6a03 	vldr	s13, [r6, #12]
float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   d9caa:	ed96 7a02 	vldr	s14, [r6, #8]
   d9cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
   d9cb2:	4635      	mov	r5, r6
float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   d9cb4:	eec7 8a27 	vdiv.f32	s17, s14, s15
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   d9cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d9cbc:	eec7 7a28 	vdiv.f32	s15, s14, s17
   d9cc0:	ee17 0a90 	vmov	r0, s15
   d9cc4:	f006 f980 	bl	dffc8 <__aeabi_f2d>
   d9cc8:	ec41 0b10 	vmov	d0, r0, r1
   d9ccc:	f004 fb98 	bl	de400 <atan>
   d9cd0:	2200      	movs	r2, #0
   d9cd2:	ec51 0b10 	vmov	r0, r1, d0
   d9cd6:	4b19      	ldr	r3, [pc, #100]	; (d9d3c <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb4>)
   d9cd8:	f006 f9ca 	bl	e0070 <__aeabi_dmul>
   d9cdc:	a314      	add	r3, pc, #80	; (adr r3, d9d30 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xa8>)
   d9cde:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ce2:	f006 faef 	bl	e02c4 <__aeabi_ddiv>
   d9ce6:	f006 fcbb 	bl	e0660 <__aeabi_d2f>
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   d9cea:	eef4 8ac8 	vcmpe.f32	s17, s16
   d9cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   d9cf2:	ee00 0a10 	vmov	s0, r0
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   d9cf6:	bf48      	it	mi
   d9cf8:	eddf 7a11 	vldrmi	s15, [pc, #68]	; d9d40 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb8>
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
   d9cfc:	ed86 8a02 	vstr	s16, [r6, #8]
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   d9d00:	bf48      	it	mi
   d9d02:	ee30 0a27 	vaddmi.f32	s0, s0, s15
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
   d9d06:	2300      	movs	r3, #0
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;
   d9d08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d9d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
   d9d10:	ed85 8a03 	vstr	s16, [r5, #12]
    windVaneReadingCount = 0;
   d9d14:	51e3      	str	r3, [r4, r7]
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;
   d9d16:	d506      	bpl.n	d9d26 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9e>
   d9d18:	eddf 7a0a 	vldr	s15, [pc, #40]	; d9d44 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xbc>
   d9d1c:	ee30 0a27 	vadd.f32	s0, s0, s15
   d9d20:	e001      	b.n	d9d26 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9e>
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
   d9d22:	eeb0 0a48 	vmov.f32	s0, s16
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;

   return result;
}
   d9d26:	ecbd 8b02 	vpop	{d8}
   d9d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9d2c:	f3af 8000 	nop.w
   d9d30:	f01b866e 	.word	0xf01b866e
   d9d34:	400921f9 	.word	0x400921f9
   d9d38:	00000000 	.word	0x00000000
   d9d3c:	40668000 	.word	0x40668000
   d9d40:	43340000 	.word	0x43340000
   d9d44:	43b40000 	.word	0x43b40000

000d9d48 <_ZN14WeatherSensors20lookupRadiansFromRawEj>:

float WeatherSensors::lookupRadiansFromRaw(unsigned int analogRaw)
{
//Serial.println(analogRaw);
    // The mechanism for reading the weathervane isn't arbitrary, but effectively, we just need to look up which of the 16 positions we're in.
    if(analogRaw >= 2200 && analogRaw < 2400) return (3.14);//South
   d9d48:	f6a1 0398 	subw	r3, r1, #2200	; 0x898
   d9d4c:	2bc7      	cmp	r3, #199	; 0xc7
   d9d4e:	d942      	bls.n	d9dd6 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x8e>
    if(analogRaw >= 2100 && analogRaw < 2200) return (3.53);//SSW
   d9d50:	f6a1 0334 	subw	r3, r1, #2100	; 0x834
   d9d54:	2b63      	cmp	r3, #99	; 0x63
   d9d56:	d941      	bls.n	d9ddc <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x94>
    if(analogRaw >= 3200 && analogRaw < 3299) return (3.93);//SW
   d9d58:	f5a1 6348 	sub.w	r3, r1, #3200	; 0xc80
   d9d5c:	2b62      	cmp	r3, #98	; 0x62
   d9d5e:	d940      	bls.n	d9de2 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x9a>
    if(analogRaw >= 3100 && analogRaw < 3200) return (4.32);//WSW
   d9d60:	f6a1 431c 	subw	r3, r1, #3100	; 0xc1c
   d9d64:	2b63      	cmp	r3, #99	; 0x63
   d9d66:	d93f      	bls.n	d9de8 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xa0>
    if(analogRaw >= 3890 && analogRaw < 3999) return (4.71);//West
   d9d68:	f6a1 7332 	subw	r3, r1, #3890	; 0xf32
   d9d6c:	2b6c      	cmp	r3, #108	; 0x6c
   d9d6e:	d93e      	bls.n	d9dee <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xa6>
    if(analogRaw >= 3700 && analogRaw < 3780) return (5.11);//WNW
   d9d70:	f6a1 6374 	subw	r3, r1, #3700	; 0xe74
   d9d74:	2b4f      	cmp	r3, #79	; 0x4f
   d9d76:	d93d      	bls.n	d9df4 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xac>
    if(analogRaw >= 3780 && analogRaw < 3890) return (5.50);//NW
   d9d78:	f6a1 63c4 	subw	r3, r1, #3780	; 0xec4
   d9d7c:	2b6d      	cmp	r3, #109	; 0x6d
   d9d7e:	d93c      	bls.n	d9dfa <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xb2>
    if(analogRaw >= 3400 && analogRaw < 3500) return (5.89);//NNW
   d9d80:	f6a1 5348 	subw	r3, r1, #3400	; 0xd48
   d9d84:	2b63      	cmp	r3, #99	; 0x63
   d9d86:	d93b      	bls.n	d9e00 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xb8>
    if(analogRaw >= 3570 && analogRaw < 3700) return (0.00);//North
   d9d88:	f6a1 53f2 	subw	r3, r1, #3570	; 0xdf2
   d9d8c:	2b81      	cmp	r3, #129	; 0x81
   d9d8e:	d93a      	bls.n	d9e06 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xbe>
    if(analogRaw >= 2600 && analogRaw < 2700) return (0.39);//NNE
   d9d90:	f6a1 2328 	subw	r3, r1, #2600	; 0xa28
   d9d94:	2b63      	cmp	r3, #99	; 0x63
   d9d96:	d939      	bls.n	d9e0c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xc4>
    if(analogRaw >= 2750 && analogRaw < 2850) return (0.79);//NE
   d9d98:	f6a1 23be 	subw	r3, r1, #2750	; 0xabe
   d9d9c:	2b63      	cmp	r3, #99	; 0x63
   d9d9e:	d938      	bls.n	d9e12 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xca>
    if(analogRaw >= 1510 && analogRaw < 1580) return (1.18);//ENE
   d9da0:	f2a1 53e6 	subw	r3, r1, #1510	; 0x5e6
   d9da4:	2b45      	cmp	r3, #69	; 0x45
   d9da6:	d937      	bls.n	d9e18 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xd0>
    if(analogRaw >= 1580 && analogRaw < 1650) return (1.57);//East
   d9da8:	f2a1 632c 	subw	r3, r1, #1580	; 0x62c
   d9dac:	2b45      	cmp	r3, #69	; 0x45
   d9dae:	d936      	bls.n	d9e1e <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xd6>
    if(analogRaw >= 1470 && analogRaw < 1510) return (1.96);//ESE
   d9db0:	f2a1 53be 	subw	r3, r1, #1470	; 0x5be
   d9db4:	2b27      	cmp	r3, #39	; 0x27
   d9db6:	d935      	bls.n	d9e24 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xdc>
    if(analogRaw >= 1900 && analogRaw < 2000) return (2.36);//SE
   d9db8:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
   d9dbc:	2b63      	cmp	r3, #99	; 0x63
   d9dbe:	d934      	bls.n	d9e2a <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xe2>
    if(analogRaw >= 1700 && analogRaw < 1750) return (2.74);//SSE
   d9dc0:	f2a1 61a4 	subw	r1, r1, #1700	; 0x6a4
    if(analogRaw > 4000) return(-1); // Open circuit?  Probably means the sensor is not connected
   d9dc4:	eddf 7a1a 	vldr	s15, [pc, #104]	; d9e30 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xe8>
   d9dc8:	2932      	cmp	r1, #50	; 0x32
   d9dca:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d9dce:	bf38      	it	cc
   d9dd0:	eeb0 0a67 	vmovcc.f32	s0, s15
   d9dd4:	4770      	bx	lr

float WeatherSensors::lookupRadiansFromRaw(unsigned int analogRaw)
{
//Serial.println(analogRaw);
    // The mechanism for reading the weathervane isn't arbitrary, but effectively, we just need to look up which of the 16 positions we're in.
    if(analogRaw >= 2200 && analogRaw < 2400) return (3.14);//South
   d9dd6:	ed9f 0a17 	vldr	s0, [pc, #92]	; d9e34 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xec>
   d9dda:	4770      	bx	lr
    if(analogRaw >= 2100 && analogRaw < 2200) return (3.53);//SSW
   d9ddc:	ed9f 0a16 	vldr	s0, [pc, #88]	; d9e38 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf0>
   d9de0:	4770      	bx	lr
    if(analogRaw >= 3200 && analogRaw < 3299) return (3.93);//SW
   d9de2:	ed9f 0a16 	vldr	s0, [pc, #88]	; d9e3c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf4>
   d9de6:	4770      	bx	lr
    if(analogRaw >= 3100 && analogRaw < 3200) return (4.32);//WSW
   d9de8:	ed9f 0a15 	vldr	s0, [pc, #84]	; d9e40 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf8>
   d9dec:	4770      	bx	lr
    if(analogRaw >= 3890 && analogRaw < 3999) return (4.71);//West
   d9dee:	ed9f 0a15 	vldr	s0, [pc, #84]	; d9e44 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xfc>
   d9df2:	4770      	bx	lr
    if(analogRaw >= 3700 && analogRaw < 3780) return (5.11);//WNW
   d9df4:	ed9f 0a14 	vldr	s0, [pc, #80]	; d9e48 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x100>
   d9df8:	4770      	bx	lr
    if(analogRaw >= 3780 && analogRaw < 3890) return (5.50);//NW
   d9dfa:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
   d9dfe:	4770      	bx	lr
    if(analogRaw >= 3400 && analogRaw < 3500) return (5.89);//NNW
   d9e00:	ed9f 0a12 	vldr	s0, [pc, #72]	; d9e4c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x104>
   d9e04:	4770      	bx	lr
    if(analogRaw >= 3570 && analogRaw < 3700) return (0.00);//North
   d9e06:	ed9f 0a12 	vldr	s0, [pc, #72]	; d9e50 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x108>
   d9e0a:	4770      	bx	lr
    if(analogRaw >= 2600 && analogRaw < 2700) return (0.39);//NNE
   d9e0c:	ed9f 0a11 	vldr	s0, [pc, #68]	; d9e54 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x10c>
   d9e10:	4770      	bx	lr
    if(analogRaw >= 2750 && analogRaw < 2850) return (0.79);//NE
   d9e12:	ed9f 0a11 	vldr	s0, [pc, #68]	; d9e58 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x110>
   d9e16:	4770      	bx	lr
    if(analogRaw >= 1510 && analogRaw < 1580) return (1.18);//ENE
   d9e18:	ed9f 0a10 	vldr	s0, [pc, #64]	; d9e5c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x114>
   d9e1c:	4770      	bx	lr
    if(analogRaw >= 1580 && analogRaw < 1650) return (1.57);//East
   d9e1e:	ed9f 0a10 	vldr	s0, [pc, #64]	; d9e60 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x118>
   d9e22:	4770      	bx	lr
    if(analogRaw >= 1470 && analogRaw < 1510) return (1.96);//ESE
   d9e24:	ed9f 0a0f 	vldr	s0, [pc, #60]	; d9e64 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x11c>
   d9e28:	4770      	bx	lr
    if(analogRaw >= 1900 && analogRaw < 2000) return (2.36);//SE
   d9e2a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; d9e68 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x120>
    if(analogRaw >= 1700 && analogRaw < 1750) return (2.74);//SSE
    if(analogRaw > 4000) return(-1); // Open circuit?  Probably means the sensor is not connected
   // Particle.publish("error", String::format("Got %d from Windvane.",analogRaw), 60 , PRIVATE);
    return -1;
}
   d9e2e:	4770      	bx	lr
   d9e30:	402f5c29 	.word	0x402f5c29
   d9e34:	4048f5c3 	.word	0x4048f5c3
   d9e38:	4061eb85 	.word	0x4061eb85
   d9e3c:	407b851f 	.word	0x407b851f
   d9e40:	408a3d71 	.word	0x408a3d71
   d9e44:	4096b852 	.word	0x4096b852
   d9e48:	40a3851f 	.word	0x40a3851f
   d9e4c:	40bc7ae1 	.word	0x40bc7ae1
   d9e50:	00000000 	.word	0x00000000
   d9e54:	3ec7ae14 	.word	0x3ec7ae14
   d9e58:	3f4a3d71 	.word	0x3f4a3d71
   d9e5c:	3f970a3d 	.word	0x3f970a3d
   d9e60:	3fc8f5c3 	.word	0x3fc8f5c3
   d9e64:	3ffae148 	.word	0x3ffae148
   d9e68:	40170a3d 	.word	0x40170a3d
   d9e6c:	00000000 	.word	0x00000000

000d9e70 <_ZN14WeatherSensors15captureWindVaneEv>:
    float result = RainScaleInches * float(rainEventCount);
    rainEventCount = 0;
    return result;
}
/// Wind Vane
void WeatherSensors::captureWindVane() {
   d9e70:	b530      	push	{r4, r5, lr}
   d9e72:	ed2d 8b02 	vpush	{d8}
    // Read the wind vane, and update the running average of the two components of the vector
    unsigned int windVaneRaw = analogRead(WindVanePin);
   d9e76:	f241 6384 	movw	r3, #5764	; 0x1684
    float result = RainScaleInches * float(rainEventCount);
    rainEventCount = 0;
    return result;
}
/// Wind Vane
void WeatherSensors::captureWindVane() {
   d9e7a:	b083      	sub	sp, #12
   d9e7c:	4604      	mov	r4, r0
    // Read the wind vane, and update the running average of the two components of the vector
    unsigned int windVaneRaw = analogRead(WindVanePin);
   d9e7e:	5ac0      	ldrh	r0, [r0, r3]
   d9e80:	f003 ff56 	bl	ddd30 <analogRead>
    //Serial.println(windVaneRaw);
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
   d9e84:	4601      	mov	r1, r0
   d9e86:	4620      	mov	r0, r4
   d9e88:	f7ff ff5e 	bl	d9d48 <_ZN14WeatherSensors20lookupRadiansFromRawEj>
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
   d9e8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d9e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9e94:	dd3c      	ble.n	d9f10 <_ZN14WeatherSensors15captureWindVaneEv+0xa0>
   d9e96:	ee10 0a10 	vmov	r0, s0
   d9e9a:	f006 f895 	bl	dffc8 <__aeabi_f2d>
   d9e9e:	a31e      	add	r3, pc, #120	; (adr r3, d9f18 <_ZN14WeatherSensors15captureWindVaneEv+0xa8>)
   d9ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ea4:	ec41 0b18 	vmov	d8, r0, r1
   d9ea8:	f006 fb54 	bl	e0554 <__aeabi_dcmplt>
   d9eac:	b380      	cbz	r0, d9f10 <_ZN14WeatherSensors15captureWindVaneEv+0xa0>
    {
        windVaneCosTotal += cos(windVaneRadians);
   d9eae:	eeb0 0a48 	vmov.f32	s0, s16
   d9eb2:	eef0 0a68 	vmov.f32	s1, s17
   d9eb6:	f004 fcef 	bl	de898 <cos>
   d9eba:	f504 55b4 	add.w	r5, r4, #5760	; 0x1680
   d9ebe:	ec53 2b10 	vmov	r2, r3, d0
   d9ec2:	68a8      	ldr	r0, [r5, #8]
   d9ec4:	e9cd 2300 	strd	r2, r3, [sp]
   d9ec8:	f006 f87e 	bl	dffc8 <__aeabi_f2d>
   d9ecc:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9ed0:	f005 ff1c 	bl	dfd0c <__adddf3>
   d9ed4:	f006 fbc4 	bl	e0660 <__aeabi_d2f>
        windVaneSinTotal += sin(windVaneRadians);
   d9ed8:	eeb0 0a48 	vmov.f32	s0, s16
   d9edc:	eef0 0a68 	vmov.f32	s1, s17
    //Serial.println(windVaneRaw);
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
    {
        windVaneCosTotal += cos(windVaneRadians);
   d9ee0:	60a8      	str	r0, [r5, #8]
        windVaneSinTotal += sin(windVaneRadians);
   d9ee2:	f004 fd41 	bl	de968 <sin>
   d9ee6:	f504 55b4 	add.w	r5, r4, #5760	; 0x1680
   d9eea:	ec53 2b10 	vmov	r2, r3, d0
   d9eee:	68e8      	ldr	r0, [r5, #12]
   d9ef0:	e9cd 2300 	strd	r2, r3, [sp]
   d9ef4:	f006 f868 	bl	dffc8 <__aeabi_f2d>
   d9ef8:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9efc:	f005 ff06 	bl	dfd0c <__adddf3>
   d9f00:	f006 fbae 	bl	e0660 <__aeabi_d2f>
        windVaneReadingCount++;
   d9f04:	f241 6290 	movw	r2, #5776	; 0x1690
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
    {
        windVaneCosTotal += cos(windVaneRadians);
        windVaneSinTotal += sin(windVaneRadians);
   d9f08:	60e8      	str	r0, [r5, #12]
        windVaneReadingCount++;
   d9f0a:	58a3      	ldr	r3, [r4, r2]
   d9f0c:	3301      	adds	r3, #1
   d9f0e:	50a3      	str	r3, [r4, r2]
    }
    return;
}
   d9f10:	b003      	add	sp, #12
   d9f12:	ecbd 8b02 	vpop	{d8}
   d9f16:	bd30      	pop	{r4, r5, pc}
   d9f18:	f80dc337 	.word	0xf80dc337
   d9f1c:	401890fc 	.word	0x401890fc

000d9f20 <_ZN14WeatherSensors27captureTempHumidityPressureEv>:
    return -1;
}

/// end Wind vane

void WeatherSensors::captureTempHumidityPressure() {
   d9f20:	b530      	push	{r4, r5, lr}
   d9f22:	b085      	sub	sp, #20
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d9f24:	aa02      	add	r2, sp, #8
   d9f26:	a903      	add	r1, sp, #12
    return -1;
}

/// end Wind vane

void WeatherSensors::captureTempHumidityPressure() {
   d9f28:	4604      	mov	r4, r0
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d9f2a:	f7fc fab6 	bl	d649a <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_>

  uint16_t tempKx10 = uint16_t(tempC*10)+2732;
  airTempKMedian.add(tempKx10);
   d9f2e:	eddd 7a03 	vldr	s15, [sp, #12]
   d9f32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d9f36:	ee67 7a87 	vmul.f32	s15, s15, s14
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d9f3a:	4605      	mov	r5, r0

  uint16_t tempKx10 = uint16_t(tempC*10)+2732;
  airTempKMedian.add(tempKx10);
   d9f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d9f40:	f104 000a 	add.w	r0, r4, #10
   d9f44:	ee17 1a90 	vmov	r1, s15
   d9f48:	f601 21ac 	addw	r1, r1, #2732	; 0xaac
   d9f4c:	b289      	uxth	r1, r1
   d9f4e:	f000 fde4 	bl	dab1a <_ZN13RunningMedian3addEt>

  relativeHumidtyMedian.add(humidityRH);
   d9f52:	eddd 7a02 	vldr	s15, [sp, #8]
   d9f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d9f5a:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d9f5e:	edcd 7a01 	vstr	s15, [sp, #4]
   d9f62:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d9f66:	f000 fdd8 	bl	dab1a <_ZN13RunningMedian3addEt>

if (validTH){
   d9f6a:	2d00      	cmp	r5, #0
   d9f6c:	d048      	beq.n	da000 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
    //If the result is reasonable, add it to the running mean
    if(humidityRH > 0 && humidityRH < 105) // It's theoretically possible to get supersaturation humidity levels over 100%
   d9f6e:	ed9d 7a02 	vldr	s14, [sp, #8]
   d9f72:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d9f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9f7a:	dd13      	ble.n	d9fa4 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x84>
   d9f7c:	eddf 7a31 	vldr	s15, [pc, #196]	; da044 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x124>
   d9f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d9f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9f88:	d50c      	bpl.n	d9fa4 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x84>
    {
        // Add the observation to the running sum, and increment the number of observations
        humidityRHTotal += humidityRH;
   d9f8a:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d9f8e:	edd3 7a05 	vldr	s15, [r3, #20]
   d9f92:	ee77 7a87 	vadd.f32	s15, s15, s14
        humidityRHReadingCount++;
   d9f96:	f241 6298 	movw	r2, #5784	; 0x1698
if (validTH){
    //If the result is reasonable, add it to the running mean
    if(humidityRH > 0 && humidityRH < 105) // It's theoretically possible to get supersaturation humidity levels over 100%
    {
        // Add the observation to the running sum, and increment the number of observations
        humidityRHTotal += humidityRH;
   d9f9a:	edc3 7a05 	vstr	s15, [r3, #20]
        humidityRHReadingCount++;
   d9f9e:	58a3      	ldr	r3, [r4, r2]
   d9fa0:	3301      	adds	r3, #1
   d9fa2:	50a3      	str	r3, [r4, r2]
    }


    tempF = (tempC * 9.0) / 5.0 + 32.0;
   d9fa4:	9803      	ldr	r0, [sp, #12]
   d9fa6:	f006 f80f 	bl	dffc8 <__aeabi_f2d>
   d9faa:	2200      	movs	r2, #0
   d9fac:	4b26      	ldr	r3, [pc, #152]	; (da048 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x128>)
   d9fae:	f006 f85f 	bl	e0070 <__aeabi_dmul>
   d9fb2:	2200      	movs	r2, #0
   d9fb4:	4b25      	ldr	r3, [pc, #148]	; (da04c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x12c>)
   d9fb6:	f006 f985 	bl	e02c4 <__aeabi_ddiv>
   d9fba:	2200      	movs	r2, #0
   d9fbc:	4b24      	ldr	r3, [pc, #144]	; (da050 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x130>)
   d9fbe:	f005 fea5 	bl	dfd0c <__adddf3>
   d9fc2:	f006 fb4d 	bl	e0660 <__aeabi_d2f>
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
   d9fc6:	eddf 7a23 	vldr	s15, [pc, #140]	; da054 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x134>
        humidityRHTotal += humidityRH;
        humidityRHReadingCount++;
    }


    tempF = (tempC * 9.0) / 5.0 + 32.0;
   d9fca:	ee07 0a10 	vmov	s14, r0
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
   d9fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d9fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9fd6:	dd13      	ble.n	da000 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
   d9fd8:	eddf 7a1f 	vldr	s15, [pc, #124]	; da058 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x138>
   d9fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d9fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9fe4:	d50c      	bpl.n	da000 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
    {
        // Add the observation to the running sum, and increment the number of observations
        tempFTotal += tempF;
   d9fe6:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d9fea:	edd3 7a07 	vldr	s15, [r3, #28]
   d9fee:	ee77 7a87 	vadd.f32	s15, s15, s14
        tempFReadingCount++;
   d9ff2:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
    tempF = (tempC * 9.0) / 5.0 + 32.0;
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
    {
        // Add the observation to the running sum, and increment the number of observations
        tempFTotal += tempF;
   d9ff6:	edc3 7a07 	vstr	s15, [r3, #28]
        tempFReadingCount++;
   d9ffa:	6813      	ldr	r3, [r2, #0]
   d9ffc:	3301      	adds	r3, #1
   d9ffe:	6013      	str	r3, [r2, #0]
    }
  }
  //Measure Pressure from the MPL3115A2
  float pressurePascals = barom.readPressure();
   da000:	f104 0008 	add.w	r0, r4, #8
   da004:	f7ff fd10 	bl	d9a28 <_ZN9MPL3115A212readPressureEv>

  //If the result is reasonable, add it to the running mean
  // What's reasonable? http://findanswers.noaa.gov/noaa.answers/consumer/kbdetail.asp?kbid=544
  if(pressurePascals > 80000 && pressurePascals < 110000)
   da008:	eddf 7a14 	vldr	s15, [pc, #80]	; da05c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x13c>
   da00c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da014:	dd13      	ble.n	da03e <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x11e>
   da016:	eddf 7a12 	vldr	s15, [pc, #72]	; da060 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x140>
   da01a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da022:	d50c      	bpl.n	da03e <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x11e>
  {
      // Add the observation to the running sum, and increment the number of observations
      pressurePascalsTotal += pressurePascals;
   da024:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
   da028:	edd3 7a01 	vldr	s15, [r3, #4]
   da02c:	ee37 0a80 	vadd.f32	s0, s15, s0
      pressurePascalsReadingCount++;
   da030:	f241 62a8 	movw	r2, #5800	; 0x16a8
  //If the result is reasonable, add it to the running mean
  // What's reasonable? http://findanswers.noaa.gov/noaa.answers/consumer/kbdetail.asp?kbid=544
  if(pressurePascals > 80000 && pressurePascals < 110000)
  {
      // Add the observation to the running sum, and increment the number of observations
      pressurePascalsTotal += pressurePascals;
   da034:	ed83 0a01 	vstr	s0, [r3, #4]
      pressurePascalsReadingCount++;
   da038:	58a3      	ldr	r3, [r4, r2]
   da03a:	3301      	adds	r3, #1
   da03c:	50a3      	str	r3, [r4, r2]
  }
  return;
}
   da03e:	b005      	add	sp, #20
   da040:	bd30      	pop	{r4, r5, pc}
   da042:	bf00      	nop
   da044:	42d20000 	.word	0x42d20000
   da048:	40220000 	.word	0x40220000
   da04c:	40140000 	.word	0x40140000
   da050:	40400000 	.word	0x40400000
   da054:	c2480000 	.word	0xc2480000
   da058:	43160000 	.word	0x43160000
   da05c:	479c4000 	.word	0x479c4000
   da060:	47d6d800 	.word	0x47d6d800

000da064 <_ZN14WeatherSensors16getAndResetTempFEv>:
  }
}

float WeatherSensors::getAndResetTempF()
{
    if(tempFReadingCount == 0) {
   da064:	f500 52b5 	add.w	r2, r0, #5792	; 0x16a0
   da068:	ed9f 0a09 	vldr	s0, [pc, #36]	; da090 <_ZN14WeatherSensors16getAndResetTempFEv+0x2c>
   da06c:	6813      	ldr	r3, [r2, #0]
   da06e:	b16b      	cbz	r3, da08c <_ZN14WeatherSensors16getAndResetTempFEv+0x28>
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
   da070:	ee07 3a90 	vmov	s15, r3
   da074:	f500 50b4 	add.w	r0, r0, #5760	; 0x1680
   da078:	ed90 7a07 	vldr	s14, [r0, #28]
    tempFTotal = 0.0;
   da07c:	ed80 0a07 	vstr	s0, [r0, #28]
float WeatherSensors::getAndResetTempF()
{
    if(tempFReadingCount == 0) {
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
   da080:	eef8 7a67 	vcvt.f32.u32	s15, s15
    tempFTotal = 0.0;
    tempFReadingCount = 0;
   da084:	2300      	movs	r3, #0
    return result;
   da086:	ee87 0a27 	vdiv.f32	s0, s14, s15
    if(tempFReadingCount == 0) {
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
    tempFTotal = 0.0;
    tempFReadingCount = 0;
   da08a:	6013      	str	r3, [r2, #0]
    return result;
}
   da08c:	4770      	bx	lr
   da08e:	bf00      	nop
   da090:	00000000 	.word	0x00000000

000da094 <_ZN14WeatherSensors26getAndResetPressurePascalsEv>:
}


float WeatherSensors::getAndResetPressurePascals()
{
    if(pressurePascalsReadingCount == 0) {
   da094:	f241 61a8 	movw	r1, #5800	; 0x16a8
   da098:	ed9f 0a09 	vldr	s0, [pc, #36]	; da0c0 <_ZN14WeatherSensors26getAndResetPressurePascalsEv+0x2c>
   da09c:	5843      	ldr	r3, [r0, r1]
   da09e:	b16b      	cbz	r3, da0bc <_ZN14WeatherSensors26getAndResetPressurePascalsEv+0x28>
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
   da0a0:	ee07 3a90 	vmov	s15, r3
   da0a4:	f500 52b5 	add.w	r2, r0, #5792	; 0x16a0
   da0a8:	ed92 7a01 	vldr	s14, [r2, #4]
    pressurePascalsTotal = 0.0;
   da0ac:	ed82 0a01 	vstr	s0, [r2, #4]
float WeatherSensors::getAndResetPressurePascals()
{
    if(pressurePascalsReadingCount == 0) {
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
   da0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pressurePascalsTotal = 0.0;
    pressurePascalsReadingCount = 0;
   da0b4:	2300      	movs	r3, #0
    return result;
   da0b6:	ee87 0a27 	vdiv.f32	s0, s14, s15
    if(pressurePascalsReadingCount == 0) {
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
    pressurePascalsTotal = 0.0;
    pressurePascalsReadingCount = 0;
   da0ba:	5043      	str	r3, [r0, r1]
    return result;
}
   da0bc:	4770      	bx	lr
   da0be:	bf00      	nop
	...

000da0c8 <_ZN14WeatherSensors21getAndResetAllSensorsEv>:
    uint16_t gust_metersph; //meters per hour
    uint16_t millivolts; // voltage in mV
    //uint16_t lux; //Light level in lux
*/
void WeatherSensors::getAndResetAllSensors()
{
   da0c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da0ca:	4605      	mov	r5, r0
  uint32_t timeRTC = node.unixTime();
   da0cc:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
   da0d0:	3004      	adds	r0, #4
   da0d2:	f7fb f9b5 	bl	d5440 <_ZN7IoTNode8unixTimeEv>
  sensorReadings.unixTime = timeRTC;
   da0d6:	4c44      	ldr	r4, [pc, #272]	; (da1e8 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x120>)
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
   da0d8:	a901      	add	r1, sp, #4
    //uint16_t lux; //Light level in lux
*/
void WeatherSensors::getAndResetAllSensors()
{
  uint32_t timeRTC = node.unixTime();
  sensorReadings.unixTime = timeRTC;
   da0da:	6020      	str	r0, [r4, #0]
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
   da0dc:	4628      	mov	r0, r5
   da0de:	f7ff fcf7 	bl	d9ad0 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf>
  sensorReadings.wind_metersph = (uint16_t) ceil(windMPH * 1609.34);
   da0e2:	ee10 0a10 	vmov	r0, s0
   da0e6:	f005 ff6f 	bl	dffc8 <__aeabi_f2d>
   da0ea:	a33b      	add	r3, pc, #236	; (adr r3, da1d8 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x110>)
   da0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   da0f0:	f005 ffbe 	bl	e0070 <__aeabi_dmul>
   da0f4:	ec41 0b10 	vmov	d0, r0, r1
   da0f8:	f004 fb3e 	bl	de778 <ceil>
   da0fc:	ec51 0b10 	vmov	r0, r1, d0
   da100:	f006 fa8e 	bl	e0620 <__aeabi_d2uiz>
   da104:	80e0      	strh	r0, [r4, #6]
  //Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
  float rainInches = getAndResetRainInches();
   da106:	4628      	mov	r0, r5
   da108:	f7ff fdb0 	bl	d9c6c <_ZN14WeatherSensors21getAndResetRainInchesEv>
  sensorReadings.rainmmx1000 = (uint16_t) ceil(rainInches * 25400);
   da10c:	eddf 7a37 	vldr	s15, [pc, #220]	; da1ec <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x124>
   da110:	ee60 7a27 	vmul.f32	s15, s0, s15
   da114:	ee17 0a90 	vmov	r0, s15
   da118:	f005 ff56 	bl	dffc8 <__aeabi_f2d>
   da11c:	ec41 0b10 	vmov	d0, r0, r1
   da120:	f004 fb2a 	bl	de778 <ceil>
   da124:	ec51 0b10 	vmov	r0, r1, d0
   da128:	f006 fa7a 	bl	e0620 <__aeabi_d2uiz>
   da12c:	81a0      	strh	r0, [r4, #12]
  //Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
  float windDegrees = getAndResetWindVaneDegrees();
   da12e:	4628      	mov	r0, r5
   da130:	f7ff fdaa 	bl	d9c88 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv>
  sensorReadings.windDegrees = (uint16_t) ceil(windDegrees);
   da134:	ee10 0a10 	vmov	r0, s0
   da138:	f005 ff46 	bl	dffc8 <__aeabi_f2d>
   da13c:	ec41 0b10 	vmov	d0, r0, r1
   da140:	f004 fb1a 	bl	de778 <ceil>
   da144:	ec51 0b10 	vmov	r0, r1, d0
   da148:	f006 fa6a 	bl	e0620 <__aeabi_d2uiz>
   da14c:	80a0      	strh	r0, [r4, #4]
  //Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
  float airTempF = getAndResetTempF();
   da14e:	4628      	mov	r0, r5
   da150:	f7ff ff88 	bl	da064 <_ZN14WeatherSensors16getAndResetTempFEv>
  sensorReadings.airTempKx10 = (uint16_t) ceil((airTempF-32.0)*50.0/9.0 + 2731.5);
   da154:	ee10 0a10 	vmov	r0, s0
   da158:	f005 ff36 	bl	dffc8 <__aeabi_f2d>
   da15c:	2200      	movs	r2, #0
   da15e:	4b24      	ldr	r3, [pc, #144]	; (da1f0 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x128>)
   da160:	f005 fdd2 	bl	dfd08 <__aeabi_dsub>
   da164:	2200      	movs	r2, #0
   da166:	4b23      	ldr	r3, [pc, #140]	; (da1f4 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x12c>)
   da168:	f005 ff82 	bl	e0070 <__aeabi_dmul>
   da16c:	2200      	movs	r2, #0
   da16e:	4b22      	ldr	r3, [pc, #136]	; (da1f8 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x130>)
   da170:	f006 f8a8 	bl	e02c4 <__aeabi_ddiv>
   da174:	a31a      	add	r3, pc, #104	; (adr r3, da1e0 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x118>)
   da176:	e9d3 2300 	ldrd	r2, r3, [r3]
   da17a:	f005 fdc7 	bl	dfd0c <__adddf3>
   da17e:	ec41 0b10 	vmov	d0, r0, r1
   da182:	f004 faf9 	bl	de778 <ceil>
   da186:	ec51 0b10 	vmov	r0, r1, d0
   da18a:	f006 fa49 	bl	e0620 <__aeabi_d2uiz>
   da18e:	8160      	strh	r0, [r4, #10]
  //Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
  uint16_t humidityRH = relativeHumidtyMedian.getMedian();
   da190:	f605 3006 	addw	r0, r5, #2822	; 0xb06
   da194:	f000 fd04 	bl	daba0 <_ZN13RunningMedian9getMedianEv>
  sensorReadings.humid =(uint8_t) ceil(humidityRH);
   da198:	f005 fef4 	bl	dff84 <__aeabi_ui2d>
   da19c:	ec41 0b10 	vmov	d0, r0, r1
   da1a0:	f004 faea 	bl	de778 <ceil>
   da1a4:	ec51 0b10 	vmov	r0, r1, d0
   da1a8:	f006 fa3a 	bl	e0620 <__aeabi_d2uiz>
   da1ac:	7220      	strb	r0, [r4, #8]
   //float O3 = getAndResetO3();
  //sensorReadings.ozone=(uint16_t) ceil(O3);
  //Particle.publish("Humedad", String(sensorReadings.humid));
  float pressure = getAndResetPressurePascals();
   da1ae:	4628      	mov	r0, r5
   da1b0:	f7ff ff70 	bl	da094 <_ZN14WeatherSensors26getAndResetPressurePascalsEv>
  sensorReadings.barometerhPa = pressure/10.0;
   da1b4:	ee10 0a10 	vmov	r0, s0
   da1b8:	f005 ff06 	bl	dffc8 <__aeabi_f2d>
   da1bc:	2200      	movs	r2, #0
   da1be:	4b0f      	ldr	r3, [pc, #60]	; (da1fc <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x134>)
   da1c0:	f006 f880 	bl	e02c4 <__aeabi_ddiv>
   da1c4:	f006 fa2c 	bl	e0620 <__aeabi_d2uiz>
   da1c8:	81e0      	strh	r0, [r4, #14]
  //Particle.publish("Presion", String(sensorReadings.barometerhPa));
  // Light and voltage needed
 // sensorReadings.lux = getAndResetLightLux();
  //Particle.publish("luminocidad", String(sensorReadings.lux));
  sensorReadings.millivolts=getAndResetBatteryMV();
   da1ca:	4628      	mov	r0, r5
   da1cc:	f7ff fd2e 	bl	d9c2c <_ZN14WeatherSensors20getAndResetBatteryMVEv>
   da1d0:	8260      	strh	r0, [r4, #18]
  //Particle.publish("Bateria", String( sensorReadings.millivolts));
}
   da1d2:	b003      	add	sp, #12
   da1d4:	bd30      	pop	{r4, r5, pc}
   da1d6:	bf00      	nop
   da1d8:	28f5c28f 	.word	0x28f5c28f
   da1dc:	4099255c 	.word	0x4099255c
   da1e0:	00000000 	.word	0x00000000
   da1e4:	40a55700 	.word	0x40a55700
   da1e8:	2003d6c0 	.word	0x2003d6c0
   da1ec:	46c67000 	.word	0x46c67000
   da1f0:	40400000 	.word	0x40400000
   da1f4:	40490000 	.word	0x40490000
   da1f8:	40220000 	.word	0x40220000
   da1fc:	40240000 	.word	0x40240000

000da200 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>:

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   da200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da202:	4604      	mov	r4, r0
   da204:	4610      	mov	r0, r2
    int str_len = ss.length() + 1;
   da206:	6892      	ldr	r2, [r2, #8]

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   da208:	461e      	mov	r6, r3
    int str_len = ss.length() + 1;
    char s[str_len];
   da20a:	f102 0308 	add.w	r3, r2, #8
   da20e:	f023 0307 	bic.w	r3, r3, #7

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   da212:	af00      	add	r7, sp, #0
    int str_len = ss.length() + 1;
    char s[str_len];
   da214:	ebad 0d03 	sub.w	sp, sp, r3
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   da218:	4669      	mov	r1, sp
   da21a:	2300      	movs	r3, #0
   da21c:	3201      	adds	r2, #1
   da21e:	f001 feec 	bl	dbffa <_ZNK6String8getBytesEPhjj>

    //Serial.println(s);
    char *p;
    int count;

    p = strchr (s,'.');         // Find decimal point, if any.
   da222:	212e      	movs	r1, #46	; 0x2e
   da224:	4668      	mov	r0, sp
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
    int str_len = ss.length() + 1;
    char s[str_len];
   da226:	466d      	mov	r5, sp

    //Serial.println(s);
    char *p;
    int count;

    p = strchr (s,'.');         // Find decimal point, if any.
   da228:	f007 f804 	bl	e1234 <strchr>
    if (p != NULL) {
   da22c:	b1a8      	cbz	r0, da25a <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x5a>
   da22e:	4603      	mov	r3, r0
   da230:	1af2      	subs	r2, r6, r3
        count = n;              // Adjust for more or less decimals.
        while (count >= 0) {    // Maximum decimals allowed.
   da232:	42d0      	cmn	r0, r2
   da234:	4619      	mov	r1, r3
   da236:	d403      	bmi.n	da240 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x40>
             count--;
             if (*p == '\0')    // If there's less than desired.
   da238:	780a      	ldrb	r2, [r1, #0]
   da23a:	3301      	adds	r3, #1
   da23c:	2a00      	cmp	r2, #0
   da23e:	d1f7      	bne.n	da230 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x30>
                 break;
             p++;               // Next character.
        }

        *p-- = '\0';            // Truncate string.
   da240:	2200      	movs	r2, #0
   da242:	1e4b      	subs	r3, r1, #1
   da244:	700a      	strb	r2, [r1, #0]
        while (*p == '0')       // Remove trailing zeros.
   da246:	7819      	ldrb	r1, [r3, #0]
   da248:	2930      	cmp	r1, #48	; 0x30
   da24a:	d102      	bne.n	da252 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x52>
            *p-- = '\0';
   da24c:	f803 2901 	strb.w	r2, [r3], #-1
                 break;
             p++;               // Next character.
        }

        *p-- = '\0';            // Truncate string.
        while (*p == '0')       // Remove trailing zeros.
   da250:	e7f9      	b.n	da246 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x46>
            *p-- = '\0';

        if (*p == '.') {        // If all decimals were zeros, remove ".".
   da252:	292e      	cmp	r1, #46	; 0x2e
            *p = '\0';
   da254:	bf04      	itt	eq
   da256:	2200      	moveq	r2, #0
   da258:	701a      	strbeq	r2, [r3, #0]
        }
    }
    return String(s);
   da25a:	4629      	mov	r1, r5
   da25c:	4620      	mov	r0, r4
   da25e:	f001 fdd0 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
}
   da262:	4620      	mov	r0, r4
   da264:	46bd      	mov	sp, r7
   da266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da268 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv>:
  //Particle.publish("Bateria", String( sensorReadings.millivolts));
}

// Convert sensorData to CSV String in US units
String WeatherSensors::sensorReadingsToCsvUS()
{
   da268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   da26c:	4ca2      	ldr	r4, [pc, #648]	; (da4f8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x290>)
   da26e:	4da3      	ldr	r5, [pc, #652]	; (da4fc <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x294>)
  //Particle.publish("Bateria", String( sensorReadings.millivolts));
}

// Convert sensorData to CSV String in US units
String WeatherSensors::sensorReadingsToCsvUS()
{
   da270:	b0c0      	sub	sp, #256	; 0x100
   da272:	460e      	mov	r6, r1
   da274:	4680      	mov	r8, r0
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   da276:	220a      	movs	r2, #10
   da278:	6821      	ldr	r1, [r4, #0]
   da27a:	4668      	mov	r0, sp
   da27c:	f001 fe5a 	bl	dbf34 <_ZN6StringC1Emh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   da280:	4669      	mov	r1, sp
   da282:	a804      	add	r0, sp, #16
   da284:	f001 fdfc 	bl	dbe80 <_ZN6StringC1ERKS_>
   da288:	4629      	mov	r1, r5
   da28a:	a804      	add	r0, sp, #16
   da28c:	f001 fea3 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
  String(sensorReadings.windDegrees)+
   da290:	220a      	movs	r2, #10
String WeatherSensors::sensorReadingsToCsvUS()
{
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   da292:	4607      	mov	r7, r0
  String(sensorReadings.windDegrees)+
   da294:	88a1      	ldrh	r1, [r4, #4]
   da296:	a808      	add	r0, sp, #32
   da298:	f001 fe39 	bl	dbf0e <_ZN6StringC1Eih>
   da29c:	a908      	add	r1, sp, #32
   da29e:	4638      	mov	r0, r7
   da2a0:	f001 fe8d 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
  ","+
   da2a4:	4629      	mov	r1, r5
   da2a6:	f001 fe96 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   da2aa:	4681      	mov	r9, r0
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
   da2ac:	88e0      	ldrh	r0, [r4, #6]
   da2ae:	4f94      	ldr	r7, [pc, #592]	; (da500 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x298>)
   da2b0:	ee07 0a90 	vmov	s15, r0
   da2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   da2b8:	ee17 0a90 	vmov	r0, s15
   da2bc:	f005 fe84 	bl	dffc8 <__aeabi_f2d>
   da2c0:	a387      	add	r3, pc, #540	; (adr r3, da4e0 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x278>)
   da2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   da2c6:	f005 fffd 	bl	e02c4 <__aeabi_ddiv>
   da2ca:	4602      	mov	r2, r0
   da2cc:	460b      	mov	r3, r1
   da2ce:	a80c      	add	r0, sp, #48	; 0x30
   da2d0:	4639      	mov	r1, r7
   da2d2:	f001 fed7 	bl	dc084 <_ZN6String6formatEPKcz>
   da2d6:	2301      	movs	r3, #1
   da2d8:	aa0c      	add	r2, sp, #48	; 0x30
   da2da:	4631      	mov	r1, r6
   da2dc:	a810      	add	r0, sp, #64	; 0x40
   da2de:	f7ff ff8f 	bl	da200 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   da2e2:	a910      	add	r1, sp, #64	; 0x40
   da2e4:	4648      	mov	r0, r9
   da2e6:	f001 fe6a 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
  ","+
   da2ea:	4629      	mov	r1, r5
   da2ec:	f001 fe73 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
  String(sensorReadings.humid)+
   da2f0:	220a      	movs	r2, #10
  String(sensorReadings.unixTime)+
  ","+
  String(sensorReadings.windDegrees)+
  ","+
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
  ","+
   da2f2:	4681      	mov	r9, r0
  String(sensorReadings.humid)+
   da2f4:	7a21      	ldrb	r1, [r4, #8]
   da2f6:	a814      	add	r0, sp, #80	; 0x50
   da2f8:	f001 fdf7 	bl	dbeea <_ZN6StringC1Ehh>
   da2fc:	a914      	add	r1, sp, #80	; 0x50
   da2fe:	4648      	mov	r0, r9
   da300:	f001 fe5d 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
  ","+
   da304:	4629      	mov	r1, r5
   da306:	f001 fe66 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   da30a:	4681      	mov	r9, r0
  minimiseNumericString(String::format("%.1f",(((float)sensorReadings.airTempKx10-2731.5)*9.0/50.0+32.0)),1)+
   da30c:	8960      	ldrh	r0, [r4, #10]
   da30e:	ee07 0a90 	vmov	s15, r0
   da312:	eef8 7a67 	vcvt.f32.u32	s15, s15
   da316:	ee17 0a90 	vmov	r0, s15
   da31a:	f005 fe55 	bl	dffc8 <__aeabi_f2d>
   da31e:	a372      	add	r3, pc, #456	; (adr r3, da4e8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x280>)
   da320:	e9d3 2300 	ldrd	r2, r3, [r3]
   da324:	f005 fcf0 	bl	dfd08 <__aeabi_dsub>
   da328:	2200      	movs	r2, #0
   da32a:	4b76      	ldr	r3, [pc, #472]	; (da504 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x29c>)
   da32c:	f005 fea0 	bl	e0070 <__aeabi_dmul>
   da330:	2200      	movs	r2, #0
   da332:	4b75      	ldr	r3, [pc, #468]	; (da508 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a0>)
   da334:	f005 ffc6 	bl	e02c4 <__aeabi_ddiv>
   da338:	2200      	movs	r2, #0
   da33a:	4b74      	ldr	r3, [pc, #464]	; (da50c <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a4>)
   da33c:	f005 fce6 	bl	dfd0c <__adddf3>
   da340:	4602      	mov	r2, r0
   da342:	460b      	mov	r3, r1
   da344:	a818      	add	r0, sp, #96	; 0x60
   da346:	4639      	mov	r1, r7
   da348:	f001 fe9c 	bl	dc084 <_ZN6String6formatEPKcz>
   da34c:	aa18      	add	r2, sp, #96	; 0x60
   da34e:	2301      	movs	r3, #1
   da350:	4631      	mov	r1, r6
   da352:	a81c      	add	r0, sp, #112	; 0x70
   da354:	f7ff ff54 	bl	da200 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   da358:	a91c      	add	r1, sp, #112	; 0x70
   da35a:	4648      	mov	r0, r9
   da35c:	f001 fe2f 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
  ","+
   da360:	4629      	mov	r1, r5
   da362:	f001 fe38 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   da366:	89a3      	ldrh	r3, [r4, #12]
   da368:	ed9f 7a69 	vldr	s14, [pc, #420]	; da510 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a8>
   da36c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; da51c <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2b4>
   da370:	ee07 3a90 	vmov	s15, r3
   da374:	eef8 7a67 	vcvt.f32.u32	s15, s15
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
  ","+
  String(sensorReadings.humid)+
  ","+
  minimiseNumericString(String::format("%.1f",(((float)sensorReadings.airTempKx10-2731.5)*9.0/50.0+32.0)),1)+
  ","+
   da378:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   da37a:	eec7 6a87 	vdiv.f32	s13, s15, s14
   da37e:	ee16 0a90 	vmov	r0, s13
   da382:	f005 fe21 	bl	dffc8 <__aeabi_f2d>
   da386:	4602      	mov	r2, r0
   da388:	460b      	mov	r3, r1
   da38a:	a820      	add	r0, sp, #128	; 0x80
   da38c:	4649      	mov	r1, r9
   da38e:	f001 fe79 	bl	dc084 <_ZN6String6formatEPKcz>
   da392:	aa20      	add	r2, sp, #128	; 0x80
   da394:	2303      	movs	r3, #3
   da396:	4631      	mov	r1, r6
   da398:	a824      	add	r0, sp, #144	; 0x90
   da39a:	f7ff ff31 	bl	da200 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   da39e:	a924      	add	r1, sp, #144	; 0x90
   da3a0:	4650      	mov	r0, sl
   da3a2:	f001 fe0c 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
  ","+
   da3a6:	4629      	mov	r1, r5
   da3a8:	f001 fe15 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   da3ac:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.2f",(float)sensorReadings.barometerhPa/338.6389),2)+
   da3ae:	89e0      	ldrh	r0, [r4, #14]
   da3b0:	ee07 0a90 	vmov	s15, r0
   da3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   da3b8:	ee17 0a90 	vmov	r0, s15
   da3bc:	f005 fe04 	bl	dffc8 <__aeabi_f2d>
   da3c0:	a34b      	add	r3, pc, #300	; (adr r3, da4f0 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x288>)
   da3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   da3c6:	f005 ff7d 	bl	e02c4 <__aeabi_ddiv>
   da3ca:	4602      	mov	r2, r0
   da3cc:	460b      	mov	r3, r1
   da3ce:	a828      	add	r0, sp, #160	; 0xa0
   da3d0:	4950      	ldr	r1, [pc, #320]	; (da514 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2ac>)
   da3d2:	f001 fe57 	bl	dc084 <_ZN6String6formatEPKcz>
   da3d6:	aa28      	add	r2, sp, #160	; 0xa0
   da3d8:	2302      	movs	r3, #2
   da3da:	4631      	mov	r1, r6
   da3dc:	a82c      	add	r0, sp, #176	; 0xb0
   da3de:	f7ff ff0f 	bl	da200 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   da3e2:	a92c      	add	r1, sp, #176	; 0xb0
   da3e4:	4650      	mov	r0, sl
   da3e6:	f001 fdea 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
  ","+
   da3ea:	4629      	mov	r1, r5
   da3ec:	f001 fdf3 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   da3f0:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.1f",(float)(sensorReadings.gust_metersph/1609.34)),1)+
   da3f2:	8a20      	ldrh	r0, [r4, #16]
   da3f4:	f005 fdd6 	bl	dffa4 <__aeabi_i2d>
   da3f8:	a339      	add	r3, pc, #228	; (adr r3, da4e0 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x278>)
   da3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   da3fe:	f005 ff61 	bl	e02c4 <__aeabi_ddiv>
   da402:	f006 f92d 	bl	e0660 <__aeabi_d2f>
   da406:	f005 fddf 	bl	dffc8 <__aeabi_f2d>
   da40a:	4602      	mov	r2, r0
   da40c:	460b      	mov	r3, r1
   da40e:	a830      	add	r0, sp, #192	; 0xc0
   da410:	4639      	mov	r1, r7
   da412:	f001 fe37 	bl	dc084 <_ZN6String6formatEPKcz>
   da416:	aa30      	add	r2, sp, #192	; 0xc0
   da418:	2301      	movs	r3, #1
   da41a:	4631      	mov	r1, r6
   da41c:	a834      	add	r0, sp, #208	; 0xd0
   da41e:	f7ff feef 	bl	da200 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   da422:	a934      	add	r1, sp, #208	; 0xd0
   da424:	4650      	mov	r0, sl
   da426:	f001 fdca 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
  ","+
   da42a:	4629      	mov	r1, r5
   da42c:	f001 fdd3 	bl	dbfd6 <_ZplRK15StringSumHelperPKc>
   da430:	4605      	mov	r5, r0
  minimiseNumericString(String::format("%.3f",(float)sensorReadings.millivolts/1000.0),3); // replace with voltage/lux
   da432:	8a60      	ldrh	r0, [r4, #18]
   da434:	ee07 0a90 	vmov	s15, r0
   da438:	eef8 7a67 	vcvt.f32.u32	s15, s15
   da43c:	ee17 0a90 	vmov	r0, s15
   da440:	f005 fdc2 	bl	dffc8 <__aeabi_f2d>
   da444:	2200      	movs	r2, #0
   da446:	4b34      	ldr	r3, [pc, #208]	; (da518 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2b0>)
   da448:	f005 ff3c 	bl	e02c4 <__aeabi_ddiv>
   da44c:	4602      	mov	r2, r0
   da44e:	460b      	mov	r3, r1
   da450:	a838      	add	r0, sp, #224	; 0xe0
   da452:	4649      	mov	r1, r9
   da454:	f001 fe16 	bl	dc084 <_ZN6String6formatEPKcz>
   da458:	2303      	movs	r3, #3
   da45a:	aa38      	add	r2, sp, #224	; 0xe0
   da45c:	4631      	mov	r1, r6
   da45e:	a83c      	add	r0, sp, #240	; 0xf0
   da460:	f7ff fece 	bl	da200 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   da464:	a93c      	add	r1, sp, #240	; 0xf0
   da466:	4628      	mov	r0, r5
   da468:	f001 fda9 	bl	dbfbe <_ZplRK15StringSumHelperRK6String>
   da46c:	4601      	mov	r1, r0
   da46e:	4640      	mov	r0, r8
   da470:	f001 fd06 	bl	dbe80 <_ZN6StringC1ERKS_>
   da474:	a83c      	add	r0, sp, #240	; 0xf0
   da476:	f001 fc7d 	bl	dbd74 <_ZN6StringD1Ev>
   da47a:	a838      	add	r0, sp, #224	; 0xe0
   da47c:	f001 fc7a 	bl	dbd74 <_ZN6StringD1Ev>
   da480:	a834      	add	r0, sp, #208	; 0xd0
   da482:	f001 fc77 	bl	dbd74 <_ZN6StringD1Ev>
   da486:	a830      	add	r0, sp, #192	; 0xc0
   da488:	f001 fc74 	bl	dbd74 <_ZN6StringD1Ev>
   da48c:	a82c      	add	r0, sp, #176	; 0xb0
   da48e:	f001 fc71 	bl	dbd74 <_ZN6StringD1Ev>
   da492:	a828      	add	r0, sp, #160	; 0xa0
   da494:	f001 fc6e 	bl	dbd74 <_ZN6StringD1Ev>
   da498:	a824      	add	r0, sp, #144	; 0x90
   da49a:	f001 fc6b 	bl	dbd74 <_ZN6StringD1Ev>
   da49e:	a820      	add	r0, sp, #128	; 0x80
   da4a0:	f001 fc68 	bl	dbd74 <_ZN6StringD1Ev>
   da4a4:	a81c      	add	r0, sp, #112	; 0x70
   da4a6:	f001 fc65 	bl	dbd74 <_ZN6StringD1Ev>
   da4aa:	a818      	add	r0, sp, #96	; 0x60
   da4ac:	f001 fc62 	bl	dbd74 <_ZN6StringD1Ev>
   da4b0:	a814      	add	r0, sp, #80	; 0x50
   da4b2:	f001 fc5f 	bl	dbd74 <_ZN6StringD1Ev>
   da4b6:	a810      	add	r0, sp, #64	; 0x40
   da4b8:	f001 fc5c 	bl	dbd74 <_ZN6StringD1Ev>
   da4bc:	a80c      	add	r0, sp, #48	; 0x30
   da4be:	f001 fc59 	bl	dbd74 <_ZN6StringD1Ev>
   da4c2:	a808      	add	r0, sp, #32
   da4c4:	f001 fc56 	bl	dbd74 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   da4c8:	a804      	add	r0, sp, #16
   da4ca:	f001 fc53 	bl	dbd74 <_ZN6StringD1Ev>
   da4ce:	4668      	mov	r0, sp
   da4d0:	f001 fc50 	bl	dbd74 <_ZN6StringD1Ev>
  //","+
  //String(sensorReadings.lux)
  //;
  return csvData;
}
   da4d4:	4640      	mov	r0, r8
   da4d6:	b040      	add	sp, #256	; 0x100
   da4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da4dc:	f3af 8000 	nop.w
   da4e0:	28f5c28f 	.word	0x28f5c28f
   da4e4:	4099255c 	.word	0x4099255c
   da4e8:	00000000 	.word	0x00000000
   da4ec:	40a55700 	.word	0x40a55700
   da4f0:	ef34d6a1 	.word	0xef34d6a1
   da4f4:	40752a38 	.word	0x40752a38
   da4f8:	2003d6c0 	.word	0x2003d6c0
   da4fc:	000e473b 	.word	0x000e473b
   da500:	000e4c8c 	.word	0x000e4c8c
   da504:	40220000 	.word	0x40220000
   da508:	40490000 	.word	0x40490000
   da50c:	40400000 	.word	0x40400000
   da510:	46c67000 	.word	0x46c67000
   da514:	000e4c96 	.word	0x000e4c96
   da518:	408f4000 	.word	0x408f4000
   da51c:	000e4c91 	.word	0x000e4c91

000da520 <_ZN5Print5printIlLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   da520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da524:	4607      	mov	r7, r0
   da526:	460c      	mov	r4, r1
{
    if (base == 0) {
   da528:	4615      	mov	r5, r2
   da52a:	b92a      	cbnz	r2, da538 <_ZN5Print5printIlLi0EEEjT_i+0x18>
        return write(n);
   da52c:	6803      	ldr	r3, [r0, #0]
   da52e:	b2c9      	uxtb	r1, r1
   da530:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   da532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   da536:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   da538:	2900      	cmp	r1, #0
   da53a:	da07      	bge.n	da54c <_ZN5Print5printIlLi0EEEjT_i+0x2c>
   da53c:	2a0a      	cmp	r2, #10
   da53e:	d105      	bne.n	da54c <_ZN5Print5printIlLi0EEEjT_i+0x2c>
            t = print('-');
   da540:	212d      	movs	r1, #45	; 0x2d
   da542:	f001 fe05 	bl	dc150 <_ZN5Print5printEc>
            val = -n;
   da546:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   da548:	4606      	mov	r6, r0
            val = -n;
   da54a:	e001      	b.n	da550 <_ZN5Print5printIlLi0EEEjT_i+0x30>
        } else {
            val = n;
   da54c:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   da54e:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   da550:	b2ea      	uxtb	r2, r5
   da552:	4638      	mov	r0, r7
   da554:	f001 fe1b 	bl	dc18e <_ZN5Print11printNumberEmh>
    }
}
   da558:	4430      	add	r0, r6
   da55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da55e <_GLOBAL__sub_I__ZN14WeatherSensors5beginEv>:
   da55e:	f000 bb57 	b.w	dac10 <HAL_Pin_Map>
	...

000da564 <_ZN14WeatherSensors5beginEv>:
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
   da564:	f241 6274 	movw	r2, #5748	; 0x1674
   da568:	2300      	movs	r3, #0
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   da56a:	b530      	push	{r4, r5, lr}

  AnemoneterPeriodTotal = 0;
   da56c:	5083      	str	r3, [r0, r2]
  AnemoneterPeriodReadingCount = 0;
   da56e:	f241 6278 	movw	r2, #5752	; 0x1678
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   da572:	f04f 31ff 	mov.w	r1, #4294967295
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
   da576:	5083      	str	r3, [r0, r2]
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   da578:	f241 627c 	movw	r2, #5756	; 0x167c
  lastAnemoneterEvent = 0;


  barom.begin();
   da57c:	f100 0508 	add.w	r5, r0, #8
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   da580:	5081      	str	r1, [r0, r2]
  lastAnemoneterEvent = 0;
   da582:	f500 52b4 	add.w	r2, r0, #5760	; 0x1680
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   da586:	b08b      	sub	sp, #44	; 0x2c

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
  lastAnemoneterEvent = 0;
   da588:	6013      	str	r3, [r2, #0]
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   da58a:	4604      	mov	r4, r0
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
  lastAnemoneterEvent = 0;


  barom.begin();
   da58c:	4628      	mov	r0, r5
   da58e:	f7ff f9e4 	bl	d995a <_ZN9MPL3115A25beginEv>
  barom.setModeBarometer();
   da592:	4628      	mov	r0, r5
   da594:	f7ff fa0b 	bl	d99ae <_ZN9MPL3115A216setModeBarometerEv>
  barom.setOversampleRate(7);
   da598:	2107      	movs	r1, #7
   da59a:	4628      	mov	r0, r5
   da59c:	f7ff fa14 	bl	d99c8 <_ZN9MPL3115A217setOversampleRateEh>
  barom.enableEventFlags();
   da5a0:	4628      	mov	r0, r5
   da5a2:	f7ff fa25 	bl	d99f0 <_ZN9MPL3115A216enableEventFlagsEv>

  am2315.begin();
   da5a6:	4620      	mov	r0, r4
   da5a8:	f7fb ff6c 	bl	d6484 <_ZN15Adafruit_AM23155beginEv>

  Serial.begin(9600);

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
  
  if (tsl.begin()) 
   da5ac:	f504 54b2 	add.w	r4, r4, #5696	; 0x1640
  barom.setOversampleRate(7);
  barom.enableEventFlags();

  am2315.begin();

  Serial.begin(9600);
   da5b0:	f002 fd28 	bl	dd004 <_Z16_fetch_usbserialv>
   da5b4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   da5b8:	f002 fd18 	bl	dcfec <_ZN9USBSerial5beginEl>

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
  
  if (tsl.begin()) 
   da5bc:	340c      	adds	r4, #12

  am2315.begin();

  Serial.begin(9600);

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
   da5be:	f002 fd21 	bl	dd004 <_Z16_fetch_usbserialv>
   da5c2:	4969      	ldr	r1, [pc, #420]	; (da768 <_ZN14WeatherSensors5beginEv+0x204>)
   da5c4:	f001 fde1 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
  
  if (tsl.begin()) 
   da5c8:	4620      	mov	r0, r4
   da5ca:	f7fb fe3e 	bl	d624a <_ZN16Adafruit_TSL25915beginEv>
   da5ce:	b118      	cbz	r0, da5d8 <_ZN14WeatherSensors5beginEv+0x74>
  {
    Serial.println(F("Found a TSL2591 sensor"));
   da5d0:	f002 fd18 	bl	dd004 <_Z16_fetch_usbserialv>
   da5d4:	4965      	ldr	r1, [pc, #404]	; (da76c <_ZN14WeatherSensors5beginEv+0x208>)
   da5d6:	e002      	b.n	da5de <_ZN14WeatherSensors5beginEv+0x7a>
  } 
  else 
  {
    Serial.println(F("No sensor found ... check your wiring?"));
   da5d8:	f002 fd14 	bl	dd004 <_Z16_fetch_usbserialv>
   da5dc:	4964      	ldr	r1, [pc, #400]	; (da770 <_ZN14WeatherSensors5beginEv+0x20c>)
   da5de:	f001 fdd4 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
    
  /* Display some basic information on this sensor */
  sensor_t sensor;
  tsl.getSensor(&sensor);
   da5e2:	4669      	mov	r1, sp
   da5e4:	4620      	mov	r0, r4
   da5e6:	f7fb fd2f 	bl	d6048 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t>
  Serial.println(F("------------------------------------"));
   da5ea:	f002 fd0b 	bl	dd004 <_Z16_fetch_usbserialv>
   da5ee:	4961      	ldr	r1, [pc, #388]	; (da774 <_ZN14WeatherSensors5beginEv+0x210>)
   da5f0:	f001 fdcb 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Sensor:       ")); Serial.println(sensor.name);
   da5f4:	f002 fd06 	bl	dd004 <_Z16_fetch_usbserialv>
   da5f8:	495f      	ldr	r1, [pc, #380]	; (da778 <_ZN14WeatherSensors5beginEv+0x214>)
   da5fa:	f001 fdac 	bl	dc156 <_ZN5Print5printEPK19__FlashStringHelper>
   da5fe:	f002 fd01 	bl	dd004 <_Z16_fetch_usbserialv>
   da602:	4669      	mov	r1, sp
   da604:	f001 fdb7 	bl	dc176 <_ZN5Print7printlnEPKc>
  Serial.print  (F("Driver Ver:   ")); Serial.println(sensor.version);
   da608:	f002 fcfc 	bl	dd004 <_Z16_fetch_usbserialv>
   da60c:	495b      	ldr	r1, [pc, #364]	; (da77c <_ZN14WeatherSensors5beginEv+0x218>)
   da60e:	f001 fda2 	bl	dc156 <_ZN5Print5printEPK19__FlashStringHelper>
   da612:	f002 fcf7 	bl	dd004 <_Z16_fetch_usbserialv>
    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
   da616:	220a      	movs	r2, #10
   da618:	9903      	ldr	r1, [sp, #12]
   da61a:	4605      	mov	r5, r0
   da61c:	f7ff ff80 	bl	da520 <_ZN5Print5printIlLi0EEEjT_i>
        n += println();
   da620:	4628      	mov	r0, r5
   da622:	f001 fd9c 	bl	dc15e <_ZN5Print7printlnEv>
  Serial.print  (F("Unique ID:    ")); Serial.println(sensor.sensor_id);
   da626:	f002 fced 	bl	dd004 <_Z16_fetch_usbserialv>
   da62a:	4955      	ldr	r1, [pc, #340]	; (da780 <_ZN14WeatherSensors5beginEv+0x21c>)
   da62c:	f001 fd93 	bl	dc156 <_ZN5Print5printEPK19__FlashStringHelper>
   da630:	f002 fce8 	bl	dd004 <_Z16_fetch_usbserialv>
    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
   da634:	220a      	movs	r2, #10
   da636:	9904      	ldr	r1, [sp, #16]
   da638:	4605      	mov	r5, r0
   da63a:	f7ff ff71 	bl	da520 <_ZN5Print5printIlLi0EEEjT_i>
        n += println();
   da63e:	4628      	mov	r0, r5
   da640:	f001 fd8d 	bl	dc15e <_ZN5Print7printlnEv>
  Serial.print  (F("Max Value:    ")); Serial.print(sensor.max_value); Serial.println(F(" lux"));
   da644:	f002 fcde 	bl	dd004 <_Z16_fetch_usbserialv>
   da648:	494e      	ldr	r1, [pc, #312]	; (da784 <_ZN14WeatherSensors5beginEv+0x220>)
   da64a:	f001 fd84 	bl	dc156 <_ZN5Print5printEPK19__FlashStringHelper>
   da64e:	f002 fcd9 	bl	dd004 <_Z16_fetch_usbserialv>
   da652:	ed9d 0a06 	vldr	s0, [sp, #24]
   da656:	2102      	movs	r1, #2
   da658:	f001 fe78 	bl	dc34c <_ZN5Print5printEfi>
   da65c:	f002 fcd2 	bl	dd004 <_Z16_fetch_usbserialv>
   da660:	4949      	ldr	r1, [pc, #292]	; (da788 <_ZN14WeatherSensors5beginEv+0x224>)
   da662:	f001 fd92 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Min Value:    ")); Serial.print(sensor.min_value); Serial.println(F(" lux"));
   da666:	f002 fccd 	bl	dd004 <_Z16_fetch_usbserialv>
   da66a:	4948      	ldr	r1, [pc, #288]	; (da78c <_ZN14WeatherSensors5beginEv+0x228>)
   da66c:	f001 fd73 	bl	dc156 <_ZN5Print5printEPK19__FlashStringHelper>
   da670:	f002 fcc8 	bl	dd004 <_Z16_fetch_usbserialv>
   da674:	ed9d 0a07 	vldr	s0, [sp, #28]
   da678:	2102      	movs	r1, #2
   da67a:	f001 fe67 	bl	dc34c <_ZN5Print5printEfi>
   da67e:	f002 fcc1 	bl	dd004 <_Z16_fetch_usbserialv>
   da682:	4941      	ldr	r1, [pc, #260]	; (da788 <_ZN14WeatherSensors5beginEv+0x224>)
   da684:	f001 fd81 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Resolution:   ")); Serial.print(sensor.resolution, 4); Serial.println(F(" lux"));  
   da688:	f002 fcbc 	bl	dd004 <_Z16_fetch_usbserialv>
   da68c:	4940      	ldr	r1, [pc, #256]	; (da790 <_ZN14WeatherSensors5beginEv+0x22c>)
   da68e:	f001 fd62 	bl	dc156 <_ZN5Print5printEPK19__FlashStringHelper>
   da692:	f002 fcb7 	bl	dd004 <_Z16_fetch_usbserialv>
   da696:	ed9d 0a08 	vldr	s0, [sp, #32]
   da69a:	2104      	movs	r1, #4
   da69c:	f001 fe56 	bl	dc34c <_ZN5Print5printEfi>
   da6a0:	f002 fcb0 	bl	dd004 <_Z16_fetch_usbserialv>
   da6a4:	4938      	ldr	r1, [pc, #224]	; (da788 <_ZN14WeatherSensors5beginEv+0x224>)
   da6a6:	f001 fd70 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("------------------------------------"));
   da6aa:	f002 fcab 	bl	dd004 <_Z16_fetch_usbserialv>
   da6ae:	4931      	ldr	r1, [pc, #196]	; (da774 <_ZN14WeatherSensors5beginEv+0x210>)
   da6b0:	f001 fd6b 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F(""));
   da6b4:	f002 fca6 	bl	dd004 <_Z16_fetch_usbserialv>
   da6b8:	4936      	ldr	r1, [pc, #216]	; (da794 <_ZN14WeatherSensors5beginEv+0x230>)
   da6ba:	f001 fd66 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
  delay(500);
   da6be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   da6c2:	f002 f833 	bl	dc72c <delay>
  
  /* Configure the sensor */
  // You can change the gain on the fly, to adapt to brighter/dimmer light situations
  //tsl.setGain(TSL2591_GAIN_LOW);    // 1x gain (bright light)
  tsl.setGain(TSL2591_GAIN_MED);      // 25x gain
   da6c6:	2110      	movs	r1, #16
   da6c8:	4620      	mov	r0, r4
   da6ca:	f7fb fda5 	bl	d6218 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>
  
  // Changing the integration time gives you a longer time over which to sense light
  // longer timelines are slower, but are good in very low light situtations!
  //tsl.setTiming(TSL2591_INTEGRATIONTIME_100MS);  // shortest integration time (bright light)
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_200MS);
  tsl.setTiming(TSL2591_INTEGRATIONTIME_300MS);
   da6ce:	2102      	movs	r1, #2
   da6d0:	4620      	mov	r0, r4
   da6d2:	f7fb fdf7 	bl	d62c4 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_400MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_500MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_600MS);  // longest integration time (dim light)

  /* Display the gain and integration time for reference sake */  
  Serial.println(F("------------------------------------"));
   da6d6:	f002 fc95 	bl	dd004 <_Z16_fetch_usbserialv>
   da6da:	4926      	ldr	r1, [pc, #152]	; (da774 <_ZN14WeatherSensors5beginEv+0x210>)
   da6dc:	f001 fd55 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Gain:         "));
   da6e0:	f002 fc90 	bl	dd004 <_Z16_fetch_usbserialv>
   da6e4:	492c      	ldr	r1, [pc, #176]	; (da798 <_ZN14WeatherSensors5beginEv+0x234>)
   da6e6:	f001 fd36 	bl	dc156 <_ZN5Print5printEPK19__FlashStringHelper>
  tsl2591Gain_t gain = tsl.getGain();
   da6ea:	4620      	mov	r0, r4
   da6ec:	f7fb fce4 	bl	d60b8 <_ZN16Adafruit_TSL25917getGainEv>
  switch(gain)
   da6f0:	2810      	cmp	r0, #16
   da6f2:	d00d      	beq.n	da710 <_ZN14WeatherSensors5beginEv+0x1ac>
   da6f4:	d804      	bhi.n	da700 <_ZN14WeatherSensors5beginEv+0x19c>
   da6f6:	b9a0      	cbnz	r0, da722 <_ZN14WeatherSensors5beginEv+0x1be>
  {
    case TSL2591_GAIN_LOW:
      Serial.println(F("1x (Low)"));
   da6f8:	f002 fc84 	bl	dd004 <_Z16_fetch_usbserialv>
   da6fc:	4927      	ldr	r1, [pc, #156]	; (da79c <_ZN14WeatherSensors5beginEv+0x238>)
   da6fe:	e00e      	b.n	da71e <_ZN14WeatherSensors5beginEv+0x1ba>

  /* Display the gain and integration time for reference sake */  
  Serial.println(F("------------------------------------"));
  Serial.print  (F("Gain:         "));
  tsl2591Gain_t gain = tsl.getGain();
  switch(gain)
   da700:	2820      	cmp	r0, #32
   da702:	d009      	beq.n	da718 <_ZN14WeatherSensors5beginEv+0x1b4>
   da704:	2830      	cmp	r0, #48	; 0x30
   da706:	d10c      	bne.n	da722 <_ZN14WeatherSensors5beginEv+0x1be>
      break;
    case TSL2591_GAIN_HIGH:
      Serial.println(F("428x (High)"));
      break;
    case TSL2591_GAIN_MAX:
      Serial.println(F("9876x (Max)"));
   da708:	f002 fc7c 	bl	dd004 <_Z16_fetch_usbserialv>
   da70c:	4924      	ldr	r1, [pc, #144]	; (da7a0 <_ZN14WeatherSensors5beginEv+0x23c>)
   da70e:	e006      	b.n	da71e <_ZN14WeatherSensors5beginEv+0x1ba>
  {
    case TSL2591_GAIN_LOW:
      Serial.println(F("1x (Low)"));
      break;
    case TSL2591_GAIN_MED:
      Serial.println(F("25x (Medium)"));
   da710:	f002 fc78 	bl	dd004 <_Z16_fetch_usbserialv>
   da714:	4923      	ldr	r1, [pc, #140]	; (da7a4 <_ZN14WeatherSensors5beginEv+0x240>)
   da716:	e002      	b.n	da71e <_ZN14WeatherSensors5beginEv+0x1ba>
      break;
    case TSL2591_GAIN_HIGH:
      Serial.println(F("428x (High)"));
   da718:	f002 fc74 	bl	dd004 <_Z16_fetch_usbserialv>
   da71c:	4922      	ldr	r1, [pc, #136]	; (da7a8 <_ZN14WeatherSensors5beginEv+0x244>)
      break;
    case TSL2591_GAIN_MAX:
      Serial.println(F("9876x (Max)"));
   da71e:	f001 fd34 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
      break;
  }
  Serial.print  (F("Timing:       "));
   da722:	f002 fc6f 	bl	dd004 <_Z16_fetch_usbserialv>
   da726:	4921      	ldr	r1, [pc, #132]	; (da7ac <_ZN14WeatherSensors5beginEv+0x248>)
   da728:	f001 fd15 	bl	dc156 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((tsl.getTiming() + 1) * 100, DEC); 
   da72c:	f002 fc6a 	bl	dd004 <_Z16_fetch_usbserialv>
   da730:	4605      	mov	r5, r0
   da732:	4620      	mov	r0, r4
   da734:	f7fb fcc2 	bl	d60bc <_ZN16Adafruit_TSL25919getTimingEv>
   da738:	2164      	movs	r1, #100	; 0x64
   da73a:	220a      	movs	r2, #10
   da73c:	fb00 1101 	mla	r1, r0, r1, r1
   da740:	4628      	mov	r0, r5
   da742:	f7ff feed 	bl	da520 <_ZN5Print5printIlLi0EEEjT_i>
  Serial.println(F(" ms"));
   da746:	f002 fc5d 	bl	dd004 <_Z16_fetch_usbserialv>
   da74a:	4919      	ldr	r1, [pc, #100]	; (da7b0 <_ZN14WeatherSensors5beginEv+0x24c>)
   da74c:	f001 fd1d 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("------------------------------------"));
   da750:	f002 fc58 	bl	dd004 <_Z16_fetch_usbserialv>
   da754:	4907      	ldr	r1, [pc, #28]	; (da774 <_ZN14WeatherSensors5beginEv+0x210>)
   da756:	f001 fd18 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F(""));
   da75a:	f002 fc53 	bl	dd004 <_Z16_fetch_usbserialv>
   da75e:	490d      	ldr	r1, [pc, #52]	; (da794 <_ZN14WeatherSensors5beginEv+0x230>)
   da760:	f001 fd13 	bl	dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   da764:	b00b      	add	sp, #44	; 0x2c
   da766:	bd30      	pop	{r4, r5, pc}
   da768:	000e4c9b 	.word	0x000e4c9b
   da76c:	000e4cbb 	.word	0x000e4cbb
   da770:	000e4cd2 	.word	0x000e4cd2
   da774:	000e4cf9 	.word	0x000e4cf9
   da778:	000e4d1e 	.word	0x000e4d1e
   da77c:	000e4d2d 	.word	0x000e4d2d
   da780:	000e4d3c 	.word	0x000e4d3c
   da784:	000e4d4b 	.word	0x000e4d4b
   da788:	000e4d5a 	.word	0x000e4d5a
   da78c:	000e4d5f 	.word	0x000e4d5f
   da790:	000e4d6e 	.word	0x000e4d6e
   da794:	000e4a27 	.word	0x000e4a27
   da798:	000e4d7d 	.word	0x000e4d7d
   da79c:	000e4d8c 	.word	0x000e4d8c
   da7a0:	000e4dae 	.word	0x000e4dae
   da7a4:	000e4d95 	.word	0x000e4d95
   da7a8:	000e4da2 	.word	0x000e4da2
   da7ac:	000e4dba 	.word	0x000e4dba
   da7b0:	000e4dc9 	.word	0x000e4dc9

000da7b4 <_ZN7FramI2CC1E14framPartNumber>:
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   da7b4:	2250      	movs	r2, #80	; 0x50
   da7b6:	7042      	strb	r2, [r0, #1]
{
//	_topAddressForPartNumber[MB85RC16]		= 0x0007FFUL;
	_topAddressForPartNumber[MB85RC64]		= 0x001FFFUL;
   da7b8:	f641 72ff 	movw	r2, #8191	; 0x1fff
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   da7bc:	b510      	push	{r4, lr}
{
//	_topAddressForPartNumber[MB85RC16]		= 0x0007FFUL;
	_topAddressForPartNumber[MB85RC64]		= 0x001FFFUL;
   da7be:	6042      	str	r2, [r0, #4]
	_topAddressForPartNumber[MB85RC128A]	= 0x003FFFUL;
   da7c0:	f643 72ff 	movw	r2, #16383	; 0x3fff
   da7c4:	6082      	str	r2, [r0, #8]
	_topAddressForPartNumber[MB85RC128B]	= 0x003FFFUL;
   da7c6:	60c2      	str	r2, [r0, #12]
	_topAddressForPartNumber[MB85RC256A]	= 0x007FFFUL;
   da7c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
   da7cc:	6102      	str	r2, [r0, #16]
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
   da7ce:	6142      	str	r2, [r0, #20]
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
   da7d0:	6182      	str	r2, [r0, #24]
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
   da7d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   da7d6:	7001      	strb	r1, [r0, #0]
	_topAddressForPartNumber[MB85RC128A]	= 0x003FFFUL;
	_topAddressForPartNumber[MB85RC128B]	= 0x003FFFUL;
	_topAddressForPartNumber[MB85RC256A]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
   da7d8:	61c2      	str	r2, [r0, #28]
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
	_bottomAddress = _baseAddress + _maxBufferSize;
   da7da:	2480      	movs	r4, #128	; 0x80
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
   da7dc:	2200      	movs	r2, #0
	_bottomAddress = _baseAddress + _maxBufferSize;
	_topAddress = _topAddressForPartNumber[_partNumber];
   da7de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
   da7e2:	6202      	str	r2, [r0, #32]
	_bottomAddress = _baseAddress + _maxBufferSize;
   da7e4:	6244      	str	r4, [r0, #36]	; 0x24
	_topAddress = _topAddressForPartNumber[_partNumber];
   da7e6:	684a      	ldr	r2, [r1, #4]
   da7e8:	6282      	str	r2, [r0, #40]	; 0x28
	_numberOfBuffers = (_topAddress - _bottomAddress + 1) / _maxBufferSize;
   da7ea:	3a7f      	subs	r2, #127	; 0x7f
   da7ec:	09d2      	lsrs	r2, r2, #7
   da7ee:	62c2      	str	r2, [r0, #44]	; 0x2c
	_nextFreeByte = _bottomAddress;
   da7f0:	6304      	str	r4, [r0, #48]	; 0x30
}
   da7f2:	bd10      	pop	{r4, pc}

000da7f4 <_ZN7FramI2C11_readMemoryEmhPh>:
//
// PLATFORM SPECIFIC, LOW LEVEL METHODS
//

void FramI2C::_readMemory(uint32_t address, uint8_t numberOfBytes, uint8_t *buffer)
{
   da7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da7f8:	461e      	mov	r6, r3
   da7fa:	4614      	mov	r4, r2
   da7fc:	460f      	mov	r7, r1
   da7fe:	4605      	mov	r5, r0
	WITH_LOCK(Wire)
   da800:	f003 fac8 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da804:	4680      	mov	r8, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   da806:	f002 fdf9 	bl	dd3fc <_ZN7TwoWire4lockEv>
	{
		uint16_t framAddr = (uint16_t)address;
		// Address only correct for 64 through 512 kbit devices
		Wire.beginTransmission(framI2CAddress);
   da80a:	f003 fac3 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da80e:	7869      	ldrb	r1, [r5, #1]
   da810:	f002 fddd 	bl	dd3ce <_ZN7TwoWire17beginTransmissionEh>

		Wire.write(framAddr >> 8);
   da814:	f003 fabe 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da818:	f3c7 2107 	ubfx	r1, r7, #8, #8
   da81c:	f7fb fa4b 	bl	d5cb6 <_ZN7TwoWire5writeEi>
		Wire.write(framAddr & 0xFF);
   da820:	f003 fab8 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da824:	b2f9      	uxtb	r1, r7
   da826:	f7fb fa46 	bl	d5cb6 <_ZN7TwoWire5writeEi>

		Wire.endTransmission();
   da82a:	f003 fab3 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da82e:	f002 fdd9 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

		// Maximum request size of 32 bytes
		Wire.requestFrom(framI2CAddress, (uint8_t)numberOfBytes);
   da832:	f003 faaf 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da836:	4622      	mov	r2, r4
   da838:	7869      	ldrb	r1, [r5, #1]
   da83a:	f002 fdc5 	bl	dd3c8 <_ZN7TwoWire11requestFromEhj>
   da83e:	3c01      	subs	r4, #1
   da840:	1e75      	subs	r5, r6, #1
   da842:	4434      	add	r4, r6
		for (byte i=0; i < numberOfBytes; i++) {
   da844:	42a5      	cmp	r5, r4
   da846:	d007      	beq.n	da858 <_ZN7FramI2C11_readMemoryEmhPh+0x64>
			buffer[i] = Wire.read();
   da848:	f003 faa4 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da84c:	6803      	ldr	r3, [r0, #0]
   da84e:	695b      	ldr	r3, [r3, #20]
   da850:	4798      	blx	r3
   da852:	f805 0f01 	strb.w	r0, [r5, #1]!

		Wire.endTransmission();

		// Maximum request size of 32 bytes
		Wire.requestFrom(framI2CAddress, (uint8_t)numberOfBytes);
		for (byte i=0; i < numberOfBytes; i++) {
   da856:	e7f5      	b.n	da844 <_ZN7FramI2C11_readMemoryEmhPh+0x50>
			buffer[i] = Wire.read();
		}
		Wire.endTransmission();
   da858:	f003 fa9c 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da85c:	f002 fdc2 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   da860:	4640      	mov	r0, r8
	}
}
   da862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   da866:	f002 bdd2 	b.w	dd40e <_ZN7TwoWire6unlockEv>

000da86a <_ZN7FramI2C12_writeMemoryEmhPh>:


void FramI2C::_writeMemory(uint32_t address, uint8_t numberOfBytes, uint8_t *buffer)
{
   da86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da86e:	461e      	mov	r6, r3
   da870:	4614      	mov	r4, r2
   da872:	460d      	mov	r5, r1
   da874:	4680      	mov	r8, r0
	WITH_LOCK(Wire)
   da876:	f003 fa8d 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da87a:	4607      	mov	r7, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   da87c:	f002 fdbe 	bl	dd3fc <_ZN7TwoWire4lockEv>
	{	
		uint16_t framAddr = (uint16_t)address;
		// Address only correct for 64 through 512 kbit devices

		Wire.beginTransmission(framI2CAddress);
   da880:	f003 fa88 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da884:	f898 1001 	ldrb.w	r1, [r8, #1]
   da888:	f002 fda1 	bl	dd3ce <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(framAddr >> 8);
   da88c:	f003 fa82 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da890:	f3c5 2107 	ubfx	r1, r5, #8, #8
   da894:	f7fb fa0f 	bl	d5cb6 <_ZN7TwoWire5writeEi>
		Wire.write(framAddr & 0xFF);
   da898:	f003 fa7c 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da89c:	b2e9      	uxtb	r1, r5
   da89e:	f7fb fa0a 	bl	d5cb6 <_ZN7TwoWire5writeEi>
   da8a2:	3c01      	subs	r4, #1
   da8a4:	1e75      	subs	r5, r6, #1
   da8a6:	4434      	add	r4, r6


		for (uint8_t i=0; i < numberOfBytes; i++) {
   da8a8:	42a5      	cmp	r5, r4
   da8aa:	d007      	beq.n	da8bc <_ZN7FramI2C12_writeMemoryEmhPh+0x52>
			Wire.write(buffer[i]);
   da8ac:	f003 fa72 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da8b0:	6803      	ldr	r3, [r0, #0]
   da8b2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   da8b6:	689b      	ldr	r3, [r3, #8]
   da8b8:	4798      	blx	r3
		Wire.beginTransmission(framI2CAddress);
		Wire.write(framAddr >> 8);
		Wire.write(framAddr & 0xFF);


		for (uint8_t i=0; i < numberOfBytes; i++) {
   da8ba:	e7f5      	b.n	da8a8 <_ZN7FramI2C12_writeMemoryEmhPh+0x3e>
			Wire.write(buffer[i]);
		}
		Wire.endTransmission();
   da8bc:	f003 fa6a 	bl	ddd94 <_Z19__fetch_global_Wirev>
   da8c0:	f002 fd90 	bl	dd3e4 <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   da8c4:	4638      	mov	r0, r7
	}
}
   da8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   da8ca:	f002 bda0 	b.w	dd40e <_ZN7TwoWire6unlockEv>

000da8ce <_ZN7FramI2C4readEmjPh>:
  read((uint32_t) _baseAddress, (unsigned int) _maxBufferSize, buffer);
}


framResult FramI2C::read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   da8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da8d0:	4614      	mov	r4, r2
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   da8d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
   da8d4:	428a      	cmp	r2, r1
  read((uint32_t) _baseAddress, (unsigned int) _maxBufferSize, buffer);
}


framResult FramI2C::read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   da8d6:	4607      	mov	r7, r0
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   da8d8:	d81e      	bhi.n	da918 <_ZN7FramI2C4readEmjPh+0x4a>
   da8da:	6a80      	ldr	r0, [r0, #40]	; 0x28
   da8dc:	4281      	cmp	r1, r0
   da8de:	d81b      	bhi.n	da918 <_ZN7FramI2C4readEmjPh+0x4a>
	{
		return framBadStartAddress;
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
   da8e0:	1e62      	subs	r2, r4, #1
   da8e2:	2a7f      	cmp	r2, #127	; 0x7f
   da8e4:	d81a      	bhi.n	da91c <_ZN7FramI2C4readEmjPh+0x4e>
	{
		return framBadNumberOfBytes;
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
   da8e6:	440a      	add	r2, r1
   da8e8:	4290      	cmp	r0, r2
   da8ea:	d319      	bcc.n	da920 <_ZN7FramI2C4readEmjPh+0x52>
   da8ec:	461d      	mov	r5, r3
   da8ee:	1ace      	subs	r6, r1, r3
// Read in 30 byte blocks due to wire requestFrom() limit
  const uint8_t blockSize = 30;
  byte* buf = buffer;
  uint32_t address = startAddress;

  while (numberOfBytes >= blockSize)
   da8f0:	2c1d      	cmp	r4, #29
   da8f2:	eb05 0106 	add.w	r1, r5, r6
   da8f6:	d907      	bls.n	da908 <_ZN7FramI2C4readEmjPh+0x3a>
  {
		_readMemory(address, blockSize, buf);
   da8f8:	462b      	mov	r3, r5
   da8fa:	221e      	movs	r2, #30
   da8fc:	4638      	mov	r0, r7
   da8fe:	f7ff ff79 	bl	da7f4 <_ZN7FramI2C11_readMemoryEmhPh>
	  address += blockSize;
		buf += blockSize;
   da902:	351e      	adds	r5, #30
	  numberOfBytes -= blockSize;
   da904:	3c1e      	subs	r4, #30
   da906:	e7f3      	b.n	da8f0 <_ZN7FramI2C4readEmjPh+0x22>
  }
  if (numberOfBytes > 0)
   da908:	b124      	cbz	r4, da914 <_ZN7FramI2C4readEmjPh+0x46>
  {
    _readMemory(address, numberOfBytes, buf);
   da90a:	462b      	mov	r3, r5
   da90c:	b2e2      	uxtb	r2, r4
   da90e:	4638      	mov	r0, r7
   da910:	f7ff ff70 	bl	da7f4 <_ZN7FramI2C11_readMemoryEmhPh>
   da914:	2000      	movs	r0, #0
   da916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
	{
		return framBadStartAddress;
   da918:	2001      	movs	r0, #1
   da91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
	{
		return framBadNumberOfBytes;
   da91c:	2002      	movs	r0, #2
   da91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
	{
		return framBadFinishAddress;
   da920:	2003      	movs	r0, #3
   da922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da924 <_ZN7FramI2C5writeEmjPh>:
	return framOK;
}


framResult FramI2C::write(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   da924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da926:	4614      	mov	r4, r2
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   da928:	6a42      	ldr	r2, [r0, #36]	; 0x24
   da92a:	428a      	cmp	r2, r1
	return framOK;
}


framResult FramI2C::write(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   da92c:	4607      	mov	r7, r0
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   da92e:	d81e      	bhi.n	da96e <_ZN7FramI2C5writeEmjPh+0x4a>
   da930:	6a80      	ldr	r0, [r0, #40]	; 0x28
   da932:	4281      	cmp	r1, r0
   da934:	d81b      	bhi.n	da96e <_ZN7FramI2C5writeEmjPh+0x4a>
	{
		return framBadStartAddress;
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
   da936:	1e62      	subs	r2, r4, #1
   da938:	2a7f      	cmp	r2, #127	; 0x7f
   da93a:	d81a      	bhi.n	da972 <_ZN7FramI2C5writeEmjPh+0x4e>
	{
		return framBadNumberOfBytes;
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
   da93c:	440a      	add	r2, r1
   da93e:	4290      	cmp	r0, r2
   da940:	d319      	bcc.n	da976 <_ZN7FramI2C5writeEmjPh+0x52>
   da942:	461d      	mov	r5, r3
   da944:	1ace      	subs	r6, r1, r3
	// Write in 32 byte blocks due to wire limit
	  const uint8_t blockSize = 30;
	  byte* buf = buffer;
	  uint32_t address = startAddress;

	  while (numberOfBytes >= blockSize)
   da946:	2c1d      	cmp	r4, #29
   da948:	eb05 0106 	add.w	r1, r5, r6
   da94c:	d907      	bls.n	da95e <_ZN7FramI2C5writeEmjPh+0x3a>
	  {
			_writeMemory(address, blockSize, buf);
   da94e:	462b      	mov	r3, r5
   da950:	221e      	movs	r2, #30
   da952:	4638      	mov	r0, r7
   da954:	f7ff ff89 	bl	da86a <_ZN7FramI2C12_writeMemoryEmhPh>
		  address += blockSize;
			buf += blockSize;
   da958:	351e      	adds	r5, #30
		  numberOfBytes -= blockSize;
   da95a:	3c1e      	subs	r4, #30
   da95c:	e7f3      	b.n	da946 <_ZN7FramI2C5writeEmjPh+0x22>
	  }
	  if (numberOfBytes > 0)
   da95e:	b124      	cbz	r4, da96a <_ZN7FramI2C5writeEmjPh+0x46>
	  {
	    _writeMemory(address, numberOfBytes, buf);
   da960:	462b      	mov	r3, r5
   da962:	b2e2      	uxtb	r2, r4
   da964:	4638      	mov	r0, r7
   da966:	f7ff ff80 	bl	da86a <_ZN7FramI2C12_writeMemoryEmhPh>
   da96a:	2000      	movs	r0, #0
   da96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
	{
		return framBadStartAddress;
   da96e:	2001      	movs	r0, #1
   da970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
	{
		return framBadNumberOfBytes;
   da972:	2002      	movs	r0, #2
   da974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
	{
		return framBadFinishAddress;
   da976:	2003      	movs	r0, #3
   da978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da97a <_ZN7FramI2C14allocateMemoryEmR10framResult>:
	return framOK;
}


uint32_t FramI2C::allocateMemory(uint32_t numberOfBytes, framResult& result)
{
   da97a:	b510      	push	{r4, lr}

	if ((_nextFreeByte + numberOfBytes) < _topAddress)
   da97c:	6b04      	ldr	r4, [r0, #48]	; 0x30
   da97e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   da980:	4421      	add	r1, r4
   da982:	4299      	cmp	r1, r3
	{
		uint16_t base = _nextFreeByte;
		_nextFreeByte += numberOfBytes;
   da984:	bf38      	it	cc
   da986:	6301      	strcc	r1, [r0, #48]	; 0x30
   da988:	f04f 0300 	mov.w	r3, #0
		result = framOK;
		return base;
	}
	else
	{
		result = framBadFinishAddress;
   da98c:	bf2d      	iteet	cs
   da98e:	2103      	movcs	r1, #3
   da990:	b2a0      	uxthcc	r0, r4

	if ((_nextFreeByte + numberOfBytes) < _topAddress)
	{
		uint16_t base = _nextFreeByte;
		_nextFreeByte += numberOfBytes;
		result = framOK;
   da992:	7013      	strbcc	r3, [r2, #0]
		return base;
	}
	else
	{
		result = framBadFinishAddress;
   da994:	7011      	strbcs	r1, [r2, #0]
		return 0;
   da996:	bf28      	it	cs
   da998:	4618      	movcs	r0, r3
	}
}
   da99a:	bd10      	pop	{r4, pc}

000da99c <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult>:
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   da99c:	b510      	push	{r4, lr}
   da99e:	4604      	mov	r4, r0
	// Returns result code

	// Validations:
	//		_sizeOfElement <= _bufferSize

	if (_sizeOfElement < _f.getMaxBufferSize())
   da9a0:	2b80      	cmp	r3, #128	; 0x80
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   da9a2:	4608      	mov	r0, r1
   da9a4:	4611      	mov	r1, r2
		_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   da9a6:	6021      	str	r1, [r4, #0]
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   da9a8:	9a02      	ldr	r2, [sp, #8]
		_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   da9aa:	7123      	strb	r3, [r4, #4]
   da9ac:	60e0      	str	r0, [r4, #12]
	// Returns result code

	// Validations:
	//		_sizeOfElement <= _bufferSize

	if (_sizeOfElement < _f.getMaxBufferSize())
   da9ae:	d204      	bcs.n	da9ba <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult+0x1e>
	{
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement, result);
   da9b0:	4359      	muls	r1, r3
   da9b2:	f7ff ffe2 	bl	da97a <_ZN7FramI2C14allocateMemoryEmR10framResult>
   da9b6:	60a0      	str	r0, [r4, #8]
   da9b8:	e003      	b.n	da9c2 <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult+0x26>
	}
	else
	{
		result = framArrayElementTooBig;
   da9ba:	2304      	movs	r3, #4
   da9bc:	7013      	strb	r3, [r2, #0]
		_startAddress = 0;
   da9be:	2300      	movs	r3, #0
   da9c0:	60a3      	str	r3, [r4, #8]
	}
}
   da9c2:	4620      	mov	r0, r4
   da9c4:	bd10      	pop	{r4, pc}

000da9c6 <_ZN12FramI2CArray11readElementEmPhR10framResult>:


void FramI2CArray::readElement(uint32_t index, byte *buffer, framResult &result)
{
   da9c6:	b570      	push	{r4, r5, r6, lr}

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   da9c8:	6885      	ldr	r5, [r0, #8]
	}
}


void FramI2CArray::readElement(uint32_t index, byte *buffer, framResult &result)
{
   da9ca:	4616      	mov	r6, r2
   da9cc:	461c      	mov	r4, r3

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   da9ce:	b90d      	cbnz	r5, da9d4 <_ZN12FramI2CArray11readElementEmPhR10framResult+0xe>
	{
		result = framBadArrayStartAddress;
   da9d0:	2306      	movs	r3, #6
   da9d2:	e003      	b.n	da9dc <_ZN12FramI2CArray11readElementEmPhR10framResult+0x16>
	}
	else if (index >= _numberOfElements)
   da9d4:	6803      	ldr	r3, [r0, #0]
   da9d6:	428b      	cmp	r3, r1
   da9d8:	d802      	bhi.n	da9e0 <_ZN12FramI2CArray11readElementEmPhR10framResult+0x1a>
	{
		result = framBadArrayIndex;
   da9da:	2305      	movs	r3, #5
   da9dc:	7023      	strb	r3, [r4, #0]
   da9de:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		result = _f.read(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
   da9e0:	7902      	ldrb	r2, [r0, #4]
   da9e2:	68c0      	ldr	r0, [r0, #12]
   da9e4:	4633      	mov	r3, r6
   da9e6:	fb02 5101 	mla	r1, r2, r1, r5
   da9ea:	f7ff ff70 	bl	da8ce <_ZN7FramI2C4readEmjPh>
   da9ee:	7020      	strb	r0, [r4, #0]
   da9f0:	bd70      	pop	{r4, r5, r6, pc}

000da9f2 <_ZN12FramI2CArray12writeElementEmPhR10framResult>:
}



void FramI2CArray::writeElement(uint32_t index, byte *buffer, framResult &result)
{
   da9f2:	b570      	push	{r4, r5, r6, lr}

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   da9f4:	6885      	ldr	r5, [r0, #8]
}



void FramI2CArray::writeElement(uint32_t index, byte *buffer, framResult &result)
{
   da9f6:	4616      	mov	r6, r2
   da9f8:	461c      	mov	r4, r3

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   da9fa:	b90d      	cbnz	r5, daa00 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0xe>
	{
		result = framBadArrayStartAddress;
   da9fc:	2306      	movs	r3, #6
   da9fe:	e003      	b.n	daa08 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0x16>
	}
	else if (index >= _numberOfElements)
   daa00:	6803      	ldr	r3, [r0, #0]
   daa02:	428b      	cmp	r3, r1
   daa04:	d802      	bhi.n	daa0c <_ZN12FramI2CArray12writeElementEmPhR10framResult+0x1a>
	{
		result = framBadArrayIndex;
   daa06:	2305      	movs	r3, #5
   daa08:	7023      	strb	r3, [r4, #0]
   daa0a:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		result = _f.write(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
   daa0c:	7902      	ldrb	r2, [r0, #4]
   daa0e:	68c0      	ldr	r0, [r0, #12]
   daa10:	4633      	mov	r3, r6
   daa12:	fb02 5101 	mla	r1, r2, r1, r5
   daa16:	f7ff ff85 	bl	da924 <_ZN7FramI2C5writeEmjPh>
   daa1a:	7020      	strb	r0, [r4, #0]
   daa1c:	bd70      	pop	{r4, r5, r6, pc}

000daa1e <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult>:
	{
		return (uint32_t)(x+b);
	}
}

Ring_FramArray::Ring_FramArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   daa1e:	b538      	push	{r3, r4, r5, lr}
   daa20:	4604      	mov	r4, r0
   daa22:	4615      	mov	r5, r2
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
{
	if (_sizeOfElement < _f.getMaxBufferSize())
   daa24:	2b80      	cmp	r3, #128	; 0x80
	{
		return (uint32_t)(x+b);
	}
}

Ring_FramArray::Ring_FramArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   daa26:	4608      	mov	r0, r1
   daa28:	9a04      	ldr	r2, [sp, #16]
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   daa2a:	6025      	str	r5, [r4, #0]
   daa2c:	7123      	strb	r3, [r4, #4]
   daa2e:	60e1      	str	r1, [r4, #12]
{
	if (_sizeOfElement < _f.getMaxBufferSize())
   daa30:	d20b      	bcs.n	daa4a <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult+0x2c>
	{
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
   daa32:	3501      	adds	r5, #1
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   daa34:	fb05 f103 	mul.w	r1, r5, r3
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
{
	if (_sizeOfElement < _f.getMaxBufferSize())
	{
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
   daa38:	6025      	str	r5, [r4, #0]
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   daa3a:	310c      	adds	r1, #12
   daa3c:	f7ff ff9d 	bl	da97a <_ZN7FramI2C14allocateMemoryEmR10framResult>
	return _topAddress;
}

uint32_t FramI2C::getNextFreeByte()
{
	return _nextFreeByte;
   daa40:	68e3      	ldr	r3, [r4, #12]
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   daa42:	60a0      	str	r0, [r4, #8]
	return _topAddress;
}

uint32_t FramI2C::getNextFreeByte()
{
	return _nextFreeByte;
   daa44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		_numberOfElements = _numberOfElements + 1;
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
		_ringEndAddress = _f.getNextFreeByte();
   daa46:	61a3      	str	r3, [r4, #24]
   daa48:	e003      	b.n	daa52 <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult+0x34>
		// 	}
		// }
	}
	else
	{
		result = framArrayElementTooBig;
   daa4a:	2304      	movs	r3, #4
   daa4c:	7013      	strb	r3, [r2, #0]
		// Add checks in the other functions to use start address
		_startAddress = 0;
   daa4e:	2300      	movs	r3, #0
   daa50:	60a3      	str	r3, [r4, #8]
		// _tailAddress = 0;
		// _headAddress = 0;
	}
}
   daa52:	4620      	mov	r0, r4
   daa54:	bd38      	pop	{r3, r4, r5, pc}

000daa56 <_ZN14Ring_FramArray11setPointersEv>:
	}
}

void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
   daa56:	6883      	ldr	r3, [r0, #8]
   daa58:	b16b      	cbz	r3, daa76 <_ZN14Ring_FramArray11setPointersEv+0x20>
	{
		_pointers.head = _headAddress;
   daa5a:	6942      	ldr	r2, [r0, #20]
		_pointers.tail = _tailAddress;
   daa5c:	6903      	ldr	r3, [r0, #16]
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   daa5e:	6a81      	ldr	r1, [r0, #40]	; 0x28
void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
	{
		_pointers.head = _headAddress;
		_pointers.tail = _tailAddress;
   daa60:	6203      	str	r3, [r0, #32]
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   daa62:	4413      	add	r3, r2

void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
	{
		_pointers.head = _headAddress;
   daa64:	6242      	str	r2, [r0, #36]	; 0x24
		_pointers.tail = _tailAddress;
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   daa66:	185a      	adds	r2, r3, r1
   daa68:	4603      	mov	r3, r0
   daa6a:	f843 2f1c 	str.w	r2, [r3, #28]!
		// Save pointers to fram
		_f.write(_pointersAddress, sizeof(_pointers),(uint8_t*)&_pointers);
   daa6e:	220c      	movs	r2, #12
   daa70:	68c0      	ldr	r0, [r0, #12]
   daa72:	f7ff bf57 	b.w	da924 <_ZN7FramI2C5writeEmjPh>
   daa76:	4770      	bx	lr

000daa78 <_ZN14Ring_FramArray11getPointersEv>:
	}
}

void Ring_FramArray::getPointers()
{
_pointers.tail=99;
   daa78:	2363      	movs	r3, #99	; 0x63
   daa7a:	6203      	str	r3, [r0, #32]
_pointers.head=100;
   daa7c:	2364      	movs	r3, #100	; 0x64
   daa7e:	6243      	str	r3, [r0, #36]	; 0x24

framResult checkresult;
	//read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
	checkresult = _f.read(_pointersAddress, sizeof(_pointers), (uint8_t*)&_pointers);
   daa80:	6a81      	ldr	r1, [r0, #40]	; 0x28
   daa82:	f100 031c 	add.w	r3, r0, #28
   daa86:	220c      	movs	r2, #12
   daa88:	68c0      	ldr	r0, [r0, #12]
   daa8a:	f7ff bf20 	b.w	da8ce <_ZN7FramI2C4readEmjPh>

000daa8e <_ZN14Ring_FramArray10initializeEv>:
		// _headAddress = 0;
	}
}

void Ring_FramArray::initialize()
{
   daa8e:	b510      	push	{r4, lr}
   daa90:	4604      	mov	r4, r0
	// if (result==framOK)
	// {
		if (!Wire.isEnabled())
   daa92:	f003 f97f 	bl	ddd94 <_Z19__fetch_global_Wirev>
   daa96:	f002 fca8 	bl	dd3ea <_ZN7TwoWire9isEnabledEv>
   daa9a:	b918      	cbnz	r0, daaa4 <_ZN14Ring_FramArray10initializeEv+0x16>
		{
			Wire.begin();
   daa9c:	f003 f97a 	bl	ddd94 <_Z19__fetch_global_Wirev>
   daaa0:	f002 fc5e 	bl	dd360 <_ZN7TwoWire5beginEv>
		}

		_pointersAddress = _ringEndAddress - (uint32_t)sizeof(_pointers);
   daaa4:	69a3      	ldr	r3, [r4, #24]
   daaa6:	3b0c      	subs	r3, #12
   daaa8:	62a3      	str	r3, [r4, #40]	; 0x28

		// Load pointers from FRAM
		getPointers();
   daaaa:	4620      	mov	r0, r4
   daaac:	f7ff ffe4 	bl	daa78 <_ZN14Ring_FramArray11getPointersEv>
		// Check for initialization or existance of pointers
		// Rule to check _pointers.pointerCheck = _pointersAddress+_pointers.tail+pointers.head
		uint32_t check = _pointersAddress + _pointers.tail + _pointers.head;
		if (check==_pointers.pointerCheck)
   daab0:	f104 0120 	add.w	r1, r4, #32
   daab4:	c90e      	ldmia	r1, {r1, r2, r3}
   daab6:	69e0      	ldr	r0, [r4, #28]
   daab8:	440b      	add	r3, r1
   daaba:	4413      	add	r3, r2
   daabc:	4283      	cmp	r3, r0
			_headAddress = _pointers.head;
		}
		else
		{
			// First run
			_tailAddress = 0;
   daabe:	bf13      	iteet	ne
   daac0:	2300      	movne	r3, #0
		// Rule to check _pointers.pointerCheck = _pointersAddress+_pointers.tail+pointers.head
		uint32_t check = _pointersAddress + _pointers.tail + _pointers.head;
		if (check==_pointers.pointerCheck)
		{
			// Not first run so initialize from FRAM
			_tailAddress = _pointers.tail;
   daac2:	6121      	streq	r1, [r4, #16]
			_headAddress = _pointers.head;
   daac4:	6162      	streq	r2, [r4, #20]
		}
		else
		{
			// First run
			_tailAddress = 0;
   daac6:	6123      	strne	r3, [r4, #16]
			_headAddress = 0;			
   daac8:	bf18      	it	ne
   daaca:	6163      	strne	r3, [r4, #20]
		}
		setPointers();
   daacc:	4620      	mov	r0, r4
	// }
}
   daace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		{
			// First run
			_tailAddress = 0;
			_headAddress = 0;			
		}
		setPointers();
   daad2:	f7ff bfc0 	b.w	daa56 <_ZN14Ring_FramArray11setPointersEv>

000daad6 <_GLOBAL__sub_I__ZN7FramI2CC2E14framPartNumber>:
   daad6:	f000 b89b 	b.w	dac10 <HAL_Pin_Map>

000daada <_ZN13RunningMedianD1Ev>:
{
#ifdef RUNNING_MEDIAN_USE_MALLOC
  free(_ar);
  free(_p);
#endif
}
   daada:	4770      	bx	lr

000daadc <_ZN13RunningMedian5clearEv>:

// resets all counters
void RunningMedian::clear()
{
  _cnt = 0;
   daadc:	2300      	movs	r3, #0
   daade:	8083      	strh	r3, [r0, #4]
  _idx = 0;
   daae0:	80c3      	strh	r3, [r0, #6]
  _sorted = false;
   daae2:	7003      	strb	r3, [r0, #0]
  for (uint16_t i = 0; i < _size; i++) _p[i] = i;
   daae4:	8841      	ldrh	r1, [r0, #2]
   daae6:	f500 60b0 	add.w	r0, r0, #1408	; 0x580
   daaea:	b29a      	uxth	r2, r3
   daaec:	428a      	cmp	r2, r1
   daaee:	d203      	bcs.n	daaf8 <_ZN13RunningMedian5clearEv+0x1c>
   daaf0:	f820 2f02 	strh.w	r2, [r0, #2]!
   daaf4:	3301      	adds	r3, #1
   daaf6:	e7f8      	b.n	daaea <_ZN13RunningMedian5clearEv+0xe>
   daaf8:	4770      	bx	lr

000daafa <_ZN13RunningMedianC1Et>:
//
// Modified by Robert Mawrey for uint16_t values
#include "RunningMedian16Bit.h"

//RunningMedian::RunningMedian(const uint8_t size)
RunningMedian::RunningMedian(const uint16_t size)
   daafa:	b510      	push	{r4, lr}
   daafc:	4604      	mov	r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   daafe:	b129      	cbz	r1, dab0c <_ZN13RunningMedianC1Et+0x12>
   dab00:	f240 23bd 	movw	r3, #701	; 0x2bd
   dab04:	4299      	cmp	r1, r3
   dab06:	bfa8      	it	ge
   dab08:	4619      	movge	r1, r3
   dab0a:	e000      	b.n	dab0e <_ZN13RunningMedianC1Et+0x14>
   dab0c:	2101      	movs	r1, #1
//  _ar = (float *) malloc(_size * sizeof(float));
_ar = (uint16_t *) malloc(_size * sizeof(uint16_t));
  _p = (uint16_t *) malloc(_size * sizeof(uint16_t));
#endif

  clear();
   dab0e:	4620      	mov	r0, r4
#include "RunningMedian16Bit.h"

//RunningMedian::RunningMedian(const uint8_t size)
RunningMedian::RunningMedian(const uint16_t size)
{
  _size = constrain(size, MEDIAN_MIN_SIZE, MEDIAN_MAX_SIZE);
   dab10:	8061      	strh	r1, [r4, #2]
//  _ar = (float *) malloc(_size * sizeof(float));
_ar = (uint16_t *) malloc(_size * sizeof(uint16_t));
  _p = (uint16_t *) malloc(_size * sizeof(uint16_t));
#endif

  clear();
   dab12:	f7ff ffe3 	bl	daadc <_ZN13RunningMedian5clearEv>
}
   dab16:	4620      	mov	r0, r4
   dab18:	bd10      	pop	{r4, pc}

000dab1a <_ZN13RunningMedian3addEt>:

// adds a new value to the data-set
// or overwrites the oldest if full.
void RunningMedian::add(uint16_t value)
{
  _ar[_idx++] = value;
   dab1a:	88c2      	ldrh	r2, [r0, #6]
   dab1c:	1c53      	adds	r3, r2, #1
   dab1e:	3204      	adds	r2, #4
   dab20:	b29b      	uxth	r3, r3
   dab22:	80c3      	strh	r3, [r0, #6]
   dab24:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  if (_idx >= _size) _idx = 0; // wrap around
   dab28:	8842      	ldrh	r2, [r0, #2]
   dab2a:	4293      	cmp	r3, r2
   dab2c:	bf24      	itt	cs
   dab2e:	2300      	movcs	r3, #0
   dab30:	80c3      	strhcs	r3, [r0, #6]
  if (_cnt < _size) _cnt++;
   dab32:	8883      	ldrh	r3, [r0, #4]
   dab34:	429a      	cmp	r2, r3
   dab36:	bf84      	itt	hi
   dab38:	3301      	addhi	r3, #1
   dab3a:	8083      	strhhi	r3, [r0, #4]
  _sorted = false;
   dab3c:	2300      	movs	r3, #0
   dab3e:	7003      	strb	r3, [r0, #0]
   dab40:	4770      	bx	lr

000dab42 <_ZN13RunningMedian4sortEv>:
  }
}
#endif

void RunningMedian::sort()
{
   dab42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // bubble sort with flag
  for (uint16_t i = 0; i < _cnt-1; i++)
   dab46:	f8b0 e004 	ldrh.w	lr, [r0, #4]
   dab4a:	2600      	movs	r6, #0
   dab4c:	f10e 3cff 	add.w	ip, lr, #4294967295
   dab50:	b2b2      	uxth	r2, r6
   dab52:	4562      	cmp	r2, ip
   dab54:	da20      	bge.n	dab98 <_ZN13RunningMedian4sortEv+0x56>
   dab56:	2301      	movs	r3, #1
   dab58:	461f      	mov	r7, r3
  {
    bool flag = true;
    for (uint16_t j = 1; j < _cnt-i; j++)
   dab5a:	ebc2 050e 	rsb	r5, r2, lr
   dab5e:	42ab      	cmp	r3, r5
   dab60:	da17      	bge.n	dab92 <_ZN13RunningMedian4sortEv+0x50>
   dab62:	eb00 0243 	add.w	r2, r0, r3, lsl #1
   dab66:	3301      	adds	r3, #1
    {
      if (_ar[_p[j-1]] > _ar[_p[j]])
   dab68:	f8b2 1580 	ldrh.w	r1, [r2, #1408]	; 0x580
   dab6c:	f8b2 4582 	ldrh.w	r4, [r2, #1410]	; 0x582
   dab70:	f101 0904 	add.w	r9, r1, #4
   dab74:	f104 0804 	add.w	r8, r4, #4
   dab78:	f830 9019 	ldrh.w	r9, [r0, r9, lsl #1]
   dab7c:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
   dab80:	45c1      	cmp	r9, r8
      {
        uint16_t t = _p[j-1];
        _p[j-1] = _p[j];
   dab82:	bf82      	ittt	hi
   dab84:	f8a2 4580 	strhhi.w	r4, [r2, #1408]	; 0x580
        _p[j] = t;
   dab88:	f8a2 1582 	strhhi.w	r1, [r2, #1410]	; 0x582
        flag = false;
   dab8c:	2700      	movhi	r7, #0
{
  // bubble sort with flag
  for (uint16_t i = 0; i < _cnt-1; i++)
  {
    bool flag = true;
    for (uint16_t j = 1; j < _cnt-i; j++)
   dab8e:	b29b      	uxth	r3, r3
   dab90:	e7e5      	b.n	dab5e <_ZN13RunningMedian4sortEv+0x1c>
   dab92:	3601      	adds	r6, #1
        _p[j-1] = _p[j];
        _p[j] = t;
        flag = false;
      }
    }
    if (flag) break;
   dab94:	2f00      	cmp	r7, #0
   dab96:	d0db      	beq.n	dab50 <_ZN13RunningMedian4sortEv+0xe>
  }
  _sorted = true;
   dab98:	2301      	movs	r3, #1
   dab9a:	7003      	strb	r3, [r0, #0]
   dab9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000daba0 <_ZN13RunningMedian9getMedianEv>:
  if (_cnt < _size) _cnt++;
  _sorted = false;
}

uint16_t RunningMedian::getMedian()
{
   daba0:	b510      	push	{r4, lr}
  if (_cnt == 0) return NAN;
   daba2:	8883      	ldrh	r3, [r0, #4]
  if (_cnt < _size) _cnt++;
  _sorted = false;
}

uint16_t RunningMedian::getMedian()
{
   daba4:	4604      	mov	r4, r0
  if (_cnt == 0) return NAN;
   daba6:	b1f3      	cbz	r3, dabe6 <_ZN13RunningMedian9getMedianEv+0x46>

  if (_sorted == false) sort();
   daba8:	7803      	ldrb	r3, [r0, #0]
   dabaa:	b90b      	cbnz	r3, dabb0 <_ZN13RunningMedian9getMedianEv+0x10>
   dabac:	f7ff ffc9 	bl	dab42 <_ZN13RunningMedian4sortEv>

  if (_cnt & 0x01) return _ar[_p[_cnt/2]];
   dabb0:	88a3      	ldrh	r3, [r4, #4]
   dabb2:	f013 0f01 	tst.w	r3, #1
   dabb6:	ea4f 0353 	mov.w	r3, r3, lsr #1
   dabba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   dabbe:	d005      	beq.n	dabcc <_ZN13RunningMedian9getMedianEv+0x2c>
   dabc0:	f8b3 3582 	ldrh.w	r3, [r3, #1410]	; 0x582
   dabc4:	3304      	adds	r3, #4
   dabc6:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   dabca:	e00c      	b.n	dabe6 <_ZN13RunningMedian9getMedianEv+0x46>
  else return (_ar[_p[_cnt/2]] + _ar[_p[_cnt/2 - 1]]) / 2;
   dabcc:	f8b3 2582 	ldrh.w	r2, [r3, #1410]	; 0x582
   dabd0:	3204      	adds	r2, #4
   dabd2:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
   dabd6:	f8b3 2580 	ldrh.w	r2, [r3, #1408]	; 0x580
   dabda:	3204      	adds	r2, #4
   dabdc:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
   dabe0:	440b      	add	r3, r1
   dabe2:	f3c3 034f 	ubfx	r3, r3, #1, #16
}
   dabe6:	4618      	mov	r0, r3
   dabe8:	bd10      	pop	{r4, pc}

000dabea <_GLOBAL__sub_I__ZN13RunningMedianC2Et>:
   dabea:	f000 b811 	b.w	dac10 <HAL_Pin_Map>
	...

000dabf0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   dabf0:	b508      	push	{r3, lr}
   dabf2:	4b02      	ldr	r3, [pc, #8]	; (dabfc <netdb_freeaddrinfo+0xc>)
   dabf4:	681b      	ldr	r3, [r3, #0]
   dabf6:	689b      	ldr	r3, [r3, #8]
   dabf8:	9301      	str	r3, [sp, #4]
   dabfa:	bd08      	pop	{r3, pc}
   dabfc:	00030268 	.word	0x00030268

000dac00 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   dac00:	b508      	push	{r3, lr}
   dac02:	4b02      	ldr	r3, [pc, #8]	; (dac0c <netdb_getaddrinfo+0xc>)
   dac04:	681b      	ldr	r3, [r3, #0]
   dac06:	68db      	ldr	r3, [r3, #12]
   dac08:	9301      	str	r3, [sp, #4]
   dac0a:	bd08      	pop	{r3, pc}
   dac0c:	00030268 	.word	0x00030268

000dac10 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   dac10:	b508      	push	{r3, lr}
   dac12:	4b02      	ldr	r3, [pc, #8]	; (dac1c <HAL_Pin_Map+0xc>)
   dac14:	681b      	ldr	r3, [r3, #0]
   dac16:	681b      	ldr	r3, [r3, #0]
   dac18:	9301      	str	r3, [sp, #4]
   dac1a:	bd08      	pop	{r3, pc}
   dac1c:	0003022c 	.word	0x0003022c

000dac20 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   dac20:	b508      	push	{r3, lr}
   dac22:	4b02      	ldr	r3, [pc, #8]	; (dac2c <HAL_Validate_Pin_Function+0xc>)
   dac24:	681b      	ldr	r3, [r3, #0]
   dac26:	685b      	ldr	r3, [r3, #4]
   dac28:	9301      	str	r3, [sp, #4]
   dac2a:	bd08      	pop	{r3, pc}
   dac2c:	0003022c 	.word	0x0003022c

000dac30 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   dac30:	b508      	push	{r3, lr}
   dac32:	4b02      	ldr	r3, [pc, #8]	; (dac3c <HAL_Pin_Mode+0xc>)
   dac34:	681b      	ldr	r3, [r3, #0]
   dac36:	689b      	ldr	r3, [r3, #8]
   dac38:	9301      	str	r3, [sp, #4]
   dac3a:	bd08      	pop	{r3, pc}
   dac3c:	0003022c 	.word	0x0003022c

000dac40 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   dac40:	b508      	push	{r3, lr}
   dac42:	4b02      	ldr	r3, [pc, #8]	; (dac4c <HAL_Get_Pin_Mode+0xc>)
   dac44:	681b      	ldr	r3, [r3, #0]
   dac46:	68db      	ldr	r3, [r3, #12]
   dac48:	9301      	str	r3, [sp, #4]
   dac4a:	bd08      	pop	{r3, pc}
   dac4c:	0003022c 	.word	0x0003022c

000dac50 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   dac50:	b508      	push	{r3, lr}
   dac52:	4b02      	ldr	r3, [pc, #8]	; (dac5c <HAL_GPIO_Write+0xc>)
   dac54:	681b      	ldr	r3, [r3, #0]
   dac56:	691b      	ldr	r3, [r3, #16]
   dac58:	9301      	str	r3, [sp, #4]
   dac5a:	bd08      	pop	{r3, pc}
   dac5c:	0003022c 	.word	0x0003022c

000dac60 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   dac60:	b508      	push	{r3, lr}
   dac62:	4b02      	ldr	r3, [pc, #8]	; (dac6c <HAL_Interrupts_Attach+0xc>)
   dac64:	681b      	ldr	r3, [r3, #0]
   dac66:	699b      	ldr	r3, [r3, #24]
   dac68:	9301      	str	r3, [sp, #4]
   dac6a:	bd08      	pop	{r3, pc}
   dac6c:	0003022c 	.word	0x0003022c

000dac70 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   dac70:	b508      	push	{r3, lr}
   dac72:	4b02      	ldr	r3, [pc, #8]	; (dac7c <HAL_Interrupts_Detach+0xc>)
   dac74:	681b      	ldr	r3, [r3, #0]
   dac76:	69db      	ldr	r3, [r3, #28]
   dac78:	9301      	str	r3, [sp, #4]
   dac7a:	bd08      	pop	{r3, pc}
   dac7c:	0003022c 	.word	0x0003022c

000dac80 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   dac80:	b508      	push	{r3, lr}
   dac82:	4b02      	ldr	r3, [pc, #8]	; (dac8c <HAL_ADC_Read+0xc>)
   dac84:	681b      	ldr	r3, [r3, #0]
   dac86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dac88:	9301      	str	r3, [sp, #4]
   dac8a:	bd08      	pop	{r3, pc}
   dac8c:	0003022c 	.word	0x0003022c

000dac90 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   dac90:	b508      	push	{r3, lr}
   dac92:	4b02      	ldr	r3, [pc, #8]	; (dac9c <HAL_SPI_Begin+0xc>)
   dac94:	681b      	ldr	r3, [r3, #0]
   dac96:	681b      	ldr	r3, [r3, #0]
   dac98:	9301      	str	r3, [sp, #4]
   dac9a:	bd08      	pop	{r3, pc}
   dac9c:	00030230 	.word	0x00030230

000daca0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   daca0:	b508      	push	{r3, lr}
   daca2:	4b02      	ldr	r3, [pc, #8]	; (dacac <HAL_SPI_Send_Receive_Data+0xc>)
   daca4:	681b      	ldr	r3, [r3, #0]
   daca6:	695b      	ldr	r3, [r3, #20]
   daca8:	9301      	str	r3, [sp, #4]
   dacaa:	bd08      	pop	{r3, pc}
   dacac:	00030230 	.word	0x00030230

000dacb0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   dacb0:	b508      	push	{r3, lr}
   dacb2:	4b02      	ldr	r3, [pc, #8]	; (dacbc <HAL_SPI_Init+0xc>)
   dacb4:	681b      	ldr	r3, [r3, #0]
   dacb6:	69db      	ldr	r3, [r3, #28]
   dacb8:	9301      	str	r3, [sp, #4]
   dacba:	bd08      	pop	{r3, pc}
   dacbc:	00030230 	.word	0x00030230

000dacc0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   dacc0:	b508      	push	{r3, lr}
   dacc2:	4b02      	ldr	r3, [pc, #8]	; (daccc <HAL_SPI_Is_Enabled+0xc>)
   dacc4:	681b      	ldr	r3, [r3, #0]
   dacc6:	6a1b      	ldr	r3, [r3, #32]
   dacc8:	9301      	str	r3, [sp, #4]
   dacca:	bd08      	pop	{r3, pc}
   daccc:	00030230 	.word	0x00030230

000dacd0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   dacd0:	b508      	push	{r3, lr}
   dacd2:	4b02      	ldr	r3, [pc, #8]	; (dacdc <HAL_SPI_Info+0xc>)
   dacd4:	681b      	ldr	r3, [r3, #0]
   dacd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dacd8:	9301      	str	r3, [sp, #4]
   dacda:	bd08      	pop	{r3, pc}
   dacdc:	00030230 	.word	0x00030230

000dace0 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   dace0:	b508      	push	{r3, lr}
   dace2:	4b02      	ldr	r3, [pc, #8]	; (dacec <HAL_SPI_DMA_Transfer+0xc>)
   dace4:	681b      	ldr	r3, [r3, #0]
   dace6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dace8:	9301      	str	r3, [sp, #4]
   dacea:	bd08      	pop	{r3, pc}
   dacec:	00030230 	.word	0x00030230

000dacf0 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   dacf0:	b508      	push	{r3, lr}
   dacf2:	4b02      	ldr	r3, [pc, #8]	; (dacfc <HAL_SPI_DMA_Transfer_Status+0xc>)
   dacf4:	681b      	ldr	r3, [r3, #0]
   dacf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dacf8:	9301      	str	r3, [sp, #4]
   dacfa:	bd08      	pop	{r3, pc}
   dacfc:	00030230 	.word	0x00030230

000dad00 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   dad00:	b508      	push	{r3, lr}
   dad02:	4b02      	ldr	r3, [pc, #8]	; (dad0c <HAL_SPI_Set_Settings+0xc>)
   dad04:	681b      	ldr	r3, [r3, #0]
   dad06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dad08:	9301      	str	r3, [sp, #4]
   dad0a:	bd08      	pop	{r3, pc}
   dad0c:	00030230 	.word	0x00030230

000dad10 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   dad10:	b508      	push	{r3, lr}
   dad12:	4b02      	ldr	r3, [pc, #8]	; (dad1c <HAL_SPI_Acquire+0xc>)
   dad14:	681b      	ldr	r3, [r3, #0]
   dad16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dad18:	9301      	str	r3, [sp, #4]
   dad1a:	bd08      	pop	{r3, pc}
   dad1c:	00030230 	.word	0x00030230

000dad20 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   dad20:	b508      	push	{r3, lr}
   dad22:	4b02      	ldr	r3, [pc, #8]	; (dad2c <HAL_SPI_Release+0xc>)
   dad24:	681b      	ldr	r3, [r3, #0]
   dad26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dad28:	9301      	str	r3, [sp, #4]
   dad2a:	bd08      	pop	{r3, pc}
   dad2c:	00030230 	.word	0x00030230

000dad30 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   dad30:	b508      	push	{r3, lr}
   dad32:	4b02      	ldr	r3, [pc, #8]	; (dad3c <if_index_to_name+0xc>)
   dad34:	681b      	ldr	r3, [r3, #0]
   dad36:	695b      	ldr	r3, [r3, #20]
   dad38:	9301      	str	r3, [sp, #4]
   dad3a:	bd08      	pop	{r3, pc}
   dad3c:	0003026c 	.word	0x0003026c

000dad40 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   dad40:	b508      	push	{r3, lr}
   dad42:	4b02      	ldr	r3, [pc, #8]	; (dad4c <HAL_RNG_GetRandomNumber+0xc>)
   dad44:	681b      	ldr	r3, [r3, #0]
   dad46:	685b      	ldr	r3, [r3, #4]
   dad48:	9301      	str	r3, [sp, #4]
   dad4a:	bd08      	pop	{r3, pc}
   dad4c:	00030218 	.word	0x00030218

000dad50 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   dad50:	b508      	push	{r3, lr}
   dad52:	4b02      	ldr	r3, [pc, #8]	; (dad5c <HAL_Timer_Get_Micro_Seconds+0xc>)
   dad54:	681b      	ldr	r3, [r3, #0]
   dad56:	691b      	ldr	r3, [r3, #16]
   dad58:	9301      	str	r3, [sp, #4]
   dad5a:	bd08      	pop	{r3, pc}
   dad5c:	00030218 	.word	0x00030218

000dad60 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   dad60:	b508      	push	{r3, lr}
   dad62:	4b02      	ldr	r3, [pc, #8]	; (dad6c <HAL_Timer_Get_Milli_Seconds+0xc>)
   dad64:	681b      	ldr	r3, [r3, #0]
   dad66:	695b      	ldr	r3, [r3, #20]
   dad68:	9301      	str	r3, [sp, #4]
   dad6a:	bd08      	pop	{r3, pc}
   dad6c:	00030218 	.word	0x00030218

000dad70 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   dad70:	b508      	push	{r3, lr}
   dad72:	4b02      	ldr	r3, [pc, #8]	; (dad7c <HAL_RTC_Get_UnixTime+0xc>)
   dad74:	681b      	ldr	r3, [r3, #0]
   dad76:	69db      	ldr	r3, [r3, #28]
   dad78:	9301      	str	r3, [sp, #4]
   dad7a:	bd08      	pop	{r3, pc}
   dad7c:	00030218 	.word	0x00030218

000dad80 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   dad80:	b508      	push	{r3, lr}
   dad82:	4b02      	ldr	r3, [pc, #8]	; (dad8c <HAL_RTC_Time_Is_Valid+0xc>)
   dad84:	681b      	ldr	r3, [r3, #0]
   dad86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dad88:	9301      	str	r3, [sp, #4]
   dad8a:	bd08      	pop	{r3, pc}
   dad8c:	00030218 	.word	0x00030218

000dad90 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   dad90:	b508      	push	{r3, lr}
   dad92:	4b02      	ldr	r3, [pc, #8]	; (dad9c <hal_timer_millis+0xc>)
   dad94:	681b      	ldr	r3, [r3, #0]
   dad96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dad98:	9301      	str	r3, [sp, #4]
   dad9a:	bd08      	pop	{r3, pc}
   dad9c:	00030218 	.word	0x00030218

000dada0 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   dada0:	b508      	push	{r3, lr}
   dada2:	4b02      	ldr	r3, [pc, #8]	; (dadac <HAL_Core_System_Reset_Ex+0xc>)
   dada4:	681b      	ldr	r3, [r3, #0]
   dada6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   dada8:	9301      	str	r3, [sp, #4]
   dadaa:	bd08      	pop	{r3, pc}
   dadac:	00030234 	.word	0x00030234

000dadb0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   dadb0:	b508      	push	{r3, lr}
   dadb2:	4b02      	ldr	r3, [pc, #8]	; (dadbc <os_thread_is_current+0xc>)
   dadb4:	681b      	ldr	r3, [r3, #0]
   dadb6:	689b      	ldr	r3, [r3, #8]
   dadb8:	9301      	str	r3, [sp, #4]
   dadba:	bd08      	pop	{r3, pc}
   dadbc:	00030248 	.word	0x00030248

000dadc0 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   dadc0:	b508      	push	{r3, lr}
   dadc2:	4b02      	ldr	r3, [pc, #8]	; (dadcc <os_thread_yield+0xc>)
   dadc4:	681b      	ldr	r3, [r3, #0]
   dadc6:	68db      	ldr	r3, [r3, #12]
   dadc8:	9301      	str	r3, [sp, #4]
   dadca:	bd08      	pop	{r3, pc}
   dadcc:	00030248 	.word	0x00030248

000dadd0 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   dadd0:	b508      	push	{r3, lr}
   dadd2:	4b02      	ldr	r3, [pc, #8]	; (daddc <os_thread_join+0xc>)
   dadd4:	681b      	ldr	r3, [r3, #0]
   dadd6:	691b      	ldr	r3, [r3, #16]
   dadd8:	9301      	str	r3, [sp, #4]
   dadda:	bd08      	pop	{r3, pc}
   daddc:	00030248 	.word	0x00030248

000dade0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   dade0:	b508      	push	{r3, lr}
   dade2:	4b02      	ldr	r3, [pc, #8]	; (dadec <os_thread_cleanup+0xc>)
   dade4:	681b      	ldr	r3, [r3, #0]
   dade6:	695b      	ldr	r3, [r3, #20]
   dade8:	9301      	str	r3, [sp, #4]
   dadea:	bd08      	pop	{r3, pc}
   dadec:	00030248 	.word	0x00030248

000dadf0 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   dadf0:	b508      	push	{r3, lr}
   dadf2:	4b02      	ldr	r3, [pc, #8]	; (dadfc <os_thread_scheduling+0xc>)
   dadf4:	681b      	ldr	r3, [r3, #0]
   dadf6:	69db      	ldr	r3, [r3, #28]
   dadf8:	9301      	str	r3, [sp, #4]
   dadfa:	bd08      	pop	{r3, pc}
   dadfc:	00030248 	.word	0x00030248

000dae00 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   dae00:	b508      	push	{r3, lr}
   dae02:	4b02      	ldr	r3, [pc, #8]	; (dae0c <os_timer_create+0xc>)
   dae04:	681b      	ldr	r3, [r3, #0]
   dae06:	6a1b      	ldr	r3, [r3, #32]
   dae08:	9301      	str	r3, [sp, #4]
   dae0a:	bd08      	pop	{r3, pc}
   dae0c:	00030248 	.word	0x00030248

000dae10 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   dae10:	b508      	push	{r3, lr}
   dae12:	4b02      	ldr	r3, [pc, #8]	; (dae1c <os_timer_destroy+0xc>)
   dae14:	681b      	ldr	r3, [r3, #0]
   dae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dae18:	9301      	str	r3, [sp, #4]
   dae1a:	bd08      	pop	{r3, pc}
   dae1c:	00030248 	.word	0x00030248

000dae20 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   dae20:	b508      	push	{r3, lr}
   dae22:	4b02      	ldr	r3, [pc, #8]	; (dae2c <os_timer_get_id+0xc>)
   dae24:	681b      	ldr	r3, [r3, #0]
   dae26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dae28:	9301      	str	r3, [sp, #4]
   dae2a:	bd08      	pop	{r3, pc}
   dae2c:	00030248 	.word	0x00030248

000dae30 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   dae30:	b508      	push	{r3, lr}
   dae32:	4b02      	ldr	r3, [pc, #8]	; (dae3c <os_timer_change+0xc>)
   dae34:	681b      	ldr	r3, [r3, #0]
   dae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dae38:	9301      	str	r3, [sp, #4]
   dae3a:	bd08      	pop	{r3, pc}
   dae3c:	00030248 	.word	0x00030248

000dae40 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   dae40:	b508      	push	{r3, lr}
   dae42:	4b02      	ldr	r3, [pc, #8]	; (dae4c <os_mutex_recursive_create+0xc>)
   dae44:	681b      	ldr	r3, [r3, #0]
   dae46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dae48:	9301      	str	r3, [sp, #4]
   dae4a:	bd08      	pop	{r3, pc}
   dae4c:	00030248 	.word	0x00030248

000dae50 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   dae50:	b508      	push	{r3, lr}
   dae52:	4b02      	ldr	r3, [pc, #8]	; (dae5c <os_mutex_recursive_destroy+0xc>)
   dae54:	681b      	ldr	r3, [r3, #0]
   dae56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dae58:	9301      	str	r3, [sp, #4]
   dae5a:	bd08      	pop	{r3, pc}
   dae5c:	00030248 	.word	0x00030248

000dae60 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   dae60:	b508      	push	{r3, lr}
   dae62:	4b02      	ldr	r3, [pc, #8]	; (dae6c <os_timer_set_id+0xc>)
   dae64:	681b      	ldr	r3, [r3, #0]
   dae66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   dae68:	9301      	str	r3, [sp, #4]
   dae6a:	bd08      	pop	{r3, pc}
   dae6c:	00030248 	.word	0x00030248

000dae70 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   dae70:	b508      	push	{r3, lr}
   dae72:	4b02      	ldr	r3, [pc, #8]	; (dae7c <inet_inet_ntop+0xc>)
   dae74:	681b      	ldr	r3, [r3, #0]
   dae76:	695b      	ldr	r3, [r3, #20]
   dae78:	9301      	str	r3, [sp, #4]
   dae7a:	bd08      	pop	{r3, pc}
   dae7c:	00030264 	.word	0x00030264

000dae80 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   dae80:	b508      	push	{r3, lr}
   dae82:	4b02      	ldr	r3, [pc, #8]	; (dae8c <inet_htonl+0xc>)
   dae84:	681b      	ldr	r3, [r3, #0]
   dae86:	6a1b      	ldr	r3, [r3, #32]
   dae88:	9301      	str	r3, [sp, #4]
   dae8a:	bd08      	pop	{r3, pc}
   dae8c:	00030264 	.word	0x00030264

000dae90 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   dae90:	b508      	push	{r3, lr}
   dae92:	4b02      	ldr	r3, [pc, #8]	; (dae9c <inet_ntohs+0xc>)
   dae94:	681b      	ldr	r3, [r3, #0]
   dae96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dae98:	9301      	str	r3, [sp, #4]
   dae9a:	bd08      	pop	{r3, pc}
   dae9c:	00030264 	.word	0x00030264

000daea0 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   daea0:	b508      	push	{r3, lr}
   daea2:	4b02      	ldr	r3, [pc, #8]	; (daeac <inet_htons+0xc>)
   daea4:	681b      	ldr	r3, [r3, #0]
   daea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   daea8:	9301      	str	r3, [sp, #4]
   daeaa:	bd08      	pop	{r3, pc}
   daeac:	00030264 	.word	0x00030264

000daeb0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   daeb0:	b508      	push	{r3, lr}
   daeb2:	4b02      	ldr	r3, [pc, #8]	; (daebc <HAL_USART_Init+0xc>)
   daeb4:	681b      	ldr	r3, [r3, #0]
   daeb6:	681b      	ldr	r3, [r3, #0]
   daeb8:	9301      	str	r3, [sp, #4]
   daeba:	bd08      	pop	{r3, pc}
   daebc:	0003023c 	.word	0x0003023c

000daec0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   daec0:	b508      	push	{r3, lr}
   daec2:	4b02      	ldr	r3, [pc, #8]	; (daecc <HAL_USART_Write_Data+0xc>)
   daec4:	681b      	ldr	r3, [r3, #0]
   daec6:	68db      	ldr	r3, [r3, #12]
   daec8:	9301      	str	r3, [sp, #4]
   daeca:	bd08      	pop	{r3, pc}
   daecc:	0003023c 	.word	0x0003023c

000daed0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   daed0:	b508      	push	{r3, lr}
   daed2:	4b02      	ldr	r3, [pc, #8]	; (daedc <HAL_USART_Available_Data+0xc>)
   daed4:	681b      	ldr	r3, [r3, #0]
   daed6:	691b      	ldr	r3, [r3, #16]
   daed8:	9301      	str	r3, [sp, #4]
   daeda:	bd08      	pop	{r3, pc}
   daedc:	0003023c 	.word	0x0003023c

000daee0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   daee0:	b508      	push	{r3, lr}
   daee2:	4b02      	ldr	r3, [pc, #8]	; (daeec <HAL_USART_Read_Data+0xc>)
   daee4:	681b      	ldr	r3, [r3, #0]
   daee6:	695b      	ldr	r3, [r3, #20]
   daee8:	9301      	str	r3, [sp, #4]
   daeea:	bd08      	pop	{r3, pc}
   daeec:	0003023c 	.word	0x0003023c

000daef0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   daef0:	b508      	push	{r3, lr}
   daef2:	4b02      	ldr	r3, [pc, #8]	; (daefc <HAL_USART_Peek_Data+0xc>)
   daef4:	681b      	ldr	r3, [r3, #0]
   daef6:	699b      	ldr	r3, [r3, #24]
   daef8:	9301      	str	r3, [sp, #4]
   daefa:	bd08      	pop	{r3, pc}
   daefc:	0003023c 	.word	0x0003023c

000daf00 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   daf00:	b508      	push	{r3, lr}
   daf02:	4b02      	ldr	r3, [pc, #8]	; (daf0c <HAL_USART_Flush_Data+0xc>)
   daf04:	681b      	ldr	r3, [r3, #0]
   daf06:	69db      	ldr	r3, [r3, #28]
   daf08:	9301      	str	r3, [sp, #4]
   daf0a:	bd08      	pop	{r3, pc}
   daf0c:	0003023c 	.word	0x0003023c

000daf10 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   daf10:	b508      	push	{r3, lr}
   daf12:	4b02      	ldr	r3, [pc, #8]	; (daf1c <HAL_USART_Is_Enabled+0xc>)
   daf14:	681b      	ldr	r3, [r3, #0]
   daf16:	6a1b      	ldr	r3, [r3, #32]
   daf18:	9301      	str	r3, [sp, #4]
   daf1a:	bd08      	pop	{r3, pc}
   daf1c:	0003023c 	.word	0x0003023c

000daf20 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   daf20:	b508      	push	{r3, lr}
   daf22:	4b02      	ldr	r3, [pc, #8]	; (daf2c <HAL_USART_Available_Data_For_Write+0xc>)
   daf24:	681b      	ldr	r3, [r3, #0]
   daf26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   daf28:	9301      	str	r3, [sp, #4]
   daf2a:	bd08      	pop	{r3, pc}
   daf2c:	0003023c 	.word	0x0003023c

000daf30 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   daf30:	b508      	push	{r3, lr}
   daf32:	4b02      	ldr	r3, [pc, #8]	; (daf3c <HAL_USART_BeginConfig+0xc>)
   daf34:	681b      	ldr	r3, [r3, #0]
   daf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   daf38:	9301      	str	r3, [sp, #4]
   daf3a:	bd08      	pop	{r3, pc}
   daf3c:	0003023c 	.word	0x0003023c

000daf40 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   daf40:	b508      	push	{r3, lr}
   daf42:	4b02      	ldr	r3, [pc, #8]	; (daf4c <HAL_I2C_Begin+0xc>)
   daf44:	681b      	ldr	r3, [r3, #0]
   daf46:	68db      	ldr	r3, [r3, #12]
   daf48:	9301      	str	r3, [sp, #4]
   daf4a:	bd08      	pop	{r3, pc}
   daf4c:	00030228 	.word	0x00030228

000daf50 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   daf50:	b508      	push	{r3, lr}
   daf52:	4b02      	ldr	r3, [pc, #8]	; (daf5c <HAL_I2C_Begin_Transmission+0xc>)
   daf54:	681b      	ldr	r3, [r3, #0]
   daf56:	699b      	ldr	r3, [r3, #24]
   daf58:	9301      	str	r3, [sp, #4]
   daf5a:	bd08      	pop	{r3, pc}
   daf5c:	00030228 	.word	0x00030228

000daf60 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   daf60:	b508      	push	{r3, lr}
   daf62:	4b02      	ldr	r3, [pc, #8]	; (daf6c <HAL_I2C_End_Transmission+0xc>)
   daf64:	681b      	ldr	r3, [r3, #0]
   daf66:	69db      	ldr	r3, [r3, #28]
   daf68:	9301      	str	r3, [sp, #4]
   daf6a:	bd08      	pop	{r3, pc}
   daf6c:	00030228 	.word	0x00030228

000daf70 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   daf70:	b508      	push	{r3, lr}
   daf72:	4b02      	ldr	r3, [pc, #8]	; (daf7c <HAL_I2C_Write_Data+0xc>)
   daf74:	681b      	ldr	r3, [r3, #0]
   daf76:	6a1b      	ldr	r3, [r3, #32]
   daf78:	9301      	str	r3, [sp, #4]
   daf7a:	bd08      	pop	{r3, pc}
   daf7c:	00030228 	.word	0x00030228

000daf80 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   daf80:	b508      	push	{r3, lr}
   daf82:	4b02      	ldr	r3, [pc, #8]	; (daf8c <HAL_I2C_Available_Data+0xc>)
   daf84:	681b      	ldr	r3, [r3, #0]
   daf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   daf88:	9301      	str	r3, [sp, #4]
   daf8a:	bd08      	pop	{r3, pc}
   daf8c:	00030228 	.word	0x00030228

000daf90 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   daf90:	b508      	push	{r3, lr}
   daf92:	4b02      	ldr	r3, [pc, #8]	; (daf9c <HAL_I2C_Read_Data+0xc>)
   daf94:	681b      	ldr	r3, [r3, #0]
   daf96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   daf98:	9301      	str	r3, [sp, #4]
   daf9a:	bd08      	pop	{r3, pc}
   daf9c:	00030228 	.word	0x00030228

000dafa0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   dafa0:	b508      	push	{r3, lr}
   dafa2:	4b02      	ldr	r3, [pc, #8]	; (dafac <HAL_I2C_Peek_Data+0xc>)
   dafa4:	681b      	ldr	r3, [r3, #0]
   dafa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dafa8:	9301      	str	r3, [sp, #4]
   dafaa:	bd08      	pop	{r3, pc}
   dafac:	00030228 	.word	0x00030228

000dafb0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   dafb0:	b508      	push	{r3, lr}
   dafb2:	4b02      	ldr	r3, [pc, #8]	; (dafbc <HAL_I2C_Flush_Data+0xc>)
   dafb4:	681b      	ldr	r3, [r3, #0]
   dafb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dafb8:	9301      	str	r3, [sp, #4]
   dafba:	bd08      	pop	{r3, pc}
   dafbc:	00030228 	.word	0x00030228

000dafc0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   dafc0:	b508      	push	{r3, lr}
   dafc2:	4b02      	ldr	r3, [pc, #8]	; (dafcc <HAL_I2C_Is_Enabled+0xc>)
   dafc4:	681b      	ldr	r3, [r3, #0]
   dafc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dafc8:	9301      	str	r3, [sp, #4]
   dafca:	bd08      	pop	{r3, pc}
   dafcc:	00030228 	.word	0x00030228

000dafd0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   dafd0:	b508      	push	{r3, lr}
   dafd2:	4b02      	ldr	r3, [pc, #8]	; (dafdc <HAL_I2C_Init+0xc>)
   dafd4:	681b      	ldr	r3, [r3, #0]
   dafd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dafd8:	9301      	str	r3, [sp, #4]
   dafda:	bd08      	pop	{r3, pc}
   dafdc:	00030228 	.word	0x00030228

000dafe0 <HAL_I2C_Reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
   dafe0:	b508      	push	{r3, lr}
   dafe2:	4b02      	ldr	r3, [pc, #8]	; (dafec <HAL_I2C_Reset+0xc>)
   dafe4:	681b      	ldr	r3, [r3, #0]
   dafe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dafe8:	9301      	str	r3, [sp, #4]
   dafea:	bd08      	pop	{r3, pc}
   dafec:	00030228 	.word	0x00030228

000daff0 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   daff0:	b508      	push	{r3, lr}
   daff2:	4b02      	ldr	r3, [pc, #8]	; (daffc <HAL_I2C_Acquire+0xc>)
   daff4:	681b      	ldr	r3, [r3, #0]
   daff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   daff8:	9301      	str	r3, [sp, #4]
   daffa:	bd08      	pop	{r3, pc}
   daffc:	00030228 	.word	0x00030228

000db000 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   db000:	b508      	push	{r3, lr}
   db002:	4b02      	ldr	r3, [pc, #8]	; (db00c <HAL_I2C_Release+0xc>)
   db004:	681b      	ldr	r3, [r3, #0]
   db006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   db008:	9301      	str	r3, [sp, #4]
   db00a:	bd08      	pop	{r3, pc}
   db00c:	00030228 	.word	0x00030228

000db010 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   db010:	b508      	push	{r3, lr}
   db012:	4b02      	ldr	r3, [pc, #8]	; (db01c <HAL_I2C_Request_Data_Ex+0xc>)
   db014:	681b      	ldr	r3, [r3, #0]
   db016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   db018:	9301      	str	r3, [sp, #4]
   db01a:	bd08      	pop	{r3, pc}
   db01c:	00030228 	.word	0x00030228

000db020 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   db020:	b508      	push	{r3, lr}
   db022:	4b02      	ldr	r3, [pc, #8]	; (db02c <sock_bind+0xc>)
   db024:	681b      	ldr	r3, [r3, #0]
   db026:	685b      	ldr	r3, [r3, #4]
   db028:	9301      	str	r3, [sp, #4]
   db02a:	bd08      	pop	{r3, pc}
   db02c:	00030238 	.word	0x00030238

000db030 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   db030:	b508      	push	{r3, lr}
   db032:	4b02      	ldr	r3, [pc, #8]	; (db03c <sock_setsockopt+0xc>)
   db034:	681b      	ldr	r3, [r3, #0]
   db036:	699b      	ldr	r3, [r3, #24]
   db038:	9301      	str	r3, [sp, #4]
   db03a:	bd08      	pop	{r3, pc}
   db03c:	00030238 	.word	0x00030238

000db040 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   db040:	b508      	push	{r3, lr}
   db042:	4b02      	ldr	r3, [pc, #8]	; (db04c <sock_close+0xc>)
   db044:	681b      	ldr	r3, [r3, #0]
   db046:	69db      	ldr	r3, [r3, #28]
   db048:	9301      	str	r3, [sp, #4]
   db04a:	bd08      	pop	{r3, pc}
   db04c:	00030238 	.word	0x00030238

000db050 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   db050:	b508      	push	{r3, lr}
   db052:	4b02      	ldr	r3, [pc, #8]	; (db05c <sock_connect+0xc>)
   db054:	681b      	ldr	r3, [r3, #0]
   db056:	6a1b      	ldr	r3, [r3, #32]
   db058:	9301      	str	r3, [sp, #4]
   db05a:	bd08      	pop	{r3, pc}
   db05c:	00030238 	.word	0x00030238

000db060 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   db060:	b508      	push	{r3, lr}
   db062:	4b02      	ldr	r3, [pc, #8]	; (db06c <sock_recv+0xc>)
   db064:	681b      	ldr	r3, [r3, #0]
   db066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   db068:	9301      	str	r3, [sp, #4]
   db06a:	bd08      	pop	{r3, pc}
   db06c:	00030238 	.word	0x00030238

000db070 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   db070:	b508      	push	{r3, lr}
   db072:	4b02      	ldr	r3, [pc, #8]	; (db07c <sock_recvfrom+0xc>)
   db074:	681b      	ldr	r3, [r3, #0]
   db076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   db078:	9301      	str	r3, [sp, #4]
   db07a:	bd08      	pop	{r3, pc}
   db07c:	00030238 	.word	0x00030238

000db080 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   db080:	b508      	push	{r3, lr}
   db082:	4b02      	ldr	r3, [pc, #8]	; (db08c <sock_send+0xc>)
   db084:	681b      	ldr	r3, [r3, #0]
   db086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   db088:	9301      	str	r3, [sp, #4]
   db08a:	bd08      	pop	{r3, pc}
   db08c:	00030238 	.word	0x00030238

000db090 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   db090:	b508      	push	{r3, lr}
   db092:	4b02      	ldr	r3, [pc, #8]	; (db09c <sock_sendto+0xc>)
   db094:	681b      	ldr	r3, [r3, #0]
   db096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   db098:	9301      	str	r3, [sp, #4]
   db09a:	bd08      	pop	{r3, pc}
   db09c:	00030238 	.word	0x00030238

000db0a0 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   db0a0:	b508      	push	{r3, lr}
   db0a2:	4b02      	ldr	r3, [pc, #8]	; (db0ac <sock_socket+0xc>)
   db0a4:	681b      	ldr	r3, [r3, #0]
   db0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   db0a8:	9301      	str	r3, [sp, #4]
   db0aa:	bd08      	pop	{r3, pc}
   db0ac:	00030238 	.word	0x00030238

000db0b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   db0b0:	b508      	push	{r3, lr}
   db0b2:	4b02      	ldr	r3, [pc, #8]	; (db0bc <HAL_USB_USART_Init+0xc>)
   db0b4:	681b      	ldr	r3, [r3, #0]
   db0b6:	681b      	ldr	r3, [r3, #0]
   db0b8:	9301      	str	r3, [sp, #4]
   db0ba:	bd08      	pop	{r3, pc}
   db0bc:	0003024c 	.word	0x0003024c

000db0c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   db0c0:	b508      	push	{r3, lr}
   db0c2:	4b02      	ldr	r3, [pc, #8]	; (db0cc <HAL_USB_USART_Begin+0xc>)
   db0c4:	681b      	ldr	r3, [r3, #0]
   db0c6:	685b      	ldr	r3, [r3, #4]
   db0c8:	9301      	str	r3, [sp, #4]
   db0ca:	bd08      	pop	{r3, pc}
   db0cc:	0003024c 	.word	0x0003024c

000db0d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   db0d0:	b508      	push	{r3, lr}
   db0d2:	4b02      	ldr	r3, [pc, #8]	; (db0dc <HAL_USB_USART_Available_Data+0xc>)
   db0d4:	681b      	ldr	r3, [r3, #0]
   db0d6:	691b      	ldr	r3, [r3, #16]
   db0d8:	9301      	str	r3, [sp, #4]
   db0da:	bd08      	pop	{r3, pc}
   db0dc:	0003024c 	.word	0x0003024c

000db0e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   db0e0:	b508      	push	{r3, lr}
   db0e2:	4b02      	ldr	r3, [pc, #8]	; (db0ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   db0e4:	681b      	ldr	r3, [r3, #0]
   db0e6:	695b      	ldr	r3, [r3, #20]
   db0e8:	9301      	str	r3, [sp, #4]
   db0ea:	bd08      	pop	{r3, pc}
   db0ec:	0003024c 	.word	0x0003024c

000db0f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   db0f0:	b508      	push	{r3, lr}
   db0f2:	4b02      	ldr	r3, [pc, #8]	; (db0fc <HAL_USB_USART_Receive_Data+0xc>)
   db0f4:	681b      	ldr	r3, [r3, #0]
   db0f6:	699b      	ldr	r3, [r3, #24]
   db0f8:	9301      	str	r3, [sp, #4]
   db0fa:	bd08      	pop	{r3, pc}
   db0fc:	0003024c 	.word	0x0003024c

000db100 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   db100:	b508      	push	{r3, lr}
   db102:	4b02      	ldr	r3, [pc, #8]	; (db10c <HAL_USB_USART_Send_Data+0xc>)
   db104:	681b      	ldr	r3, [r3, #0]
   db106:	69db      	ldr	r3, [r3, #28]
   db108:	9301      	str	r3, [sp, #4]
   db10a:	bd08      	pop	{r3, pc}
   db10c:	0003024c 	.word	0x0003024c

000db110 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   db110:	b508      	push	{r3, lr}
   db112:	4b02      	ldr	r3, [pc, #8]	; (db11c <HAL_USB_USART_Flush_Data+0xc>)
   db114:	681b      	ldr	r3, [r3, #0]
   db116:	6a1b      	ldr	r3, [r3, #32]
   db118:	9301      	str	r3, [sp, #4]
   db11a:	bd08      	pop	{r3, pc}
   db11c:	0003024c 	.word	0x0003024c

000db120 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   db120:	b508      	push	{r3, lr}
   db122:	4b02      	ldr	r3, [pc, #8]	; (db12c <log_message+0xc>)
   db124:	681b      	ldr	r3, [r3, #0]
   db126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   db128:	9301      	str	r3, [sp, #4]
   db12a:	bd08      	pop	{r3, pc}
   db12c:	00030260 	.word	0x00030260

000db130 <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   db130:	b508      	push	{r3, lr}
   db132:	4b03      	ldr	r3, [pc, #12]	; (db140 <led_set_status_active+0x10>)
   db134:	681b      	ldr	r3, [r3, #0]
   db136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   db13a:	9301      	str	r3, [sp, #4]
   db13c:	bd08      	pop	{r3, pc}
   db13e:	0000      	.short	0x0000
   db140:	00030260 	.word	0x00030260

000db144 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   db144:	b508      	push	{r3, lr}
   db146:	4b02      	ldr	r3, [pc, #8]	; (db150 <system_mode+0xc>)
   db148:	681b      	ldr	r3, [r3, #0]
   db14a:	681b      	ldr	r3, [r3, #0]
   db14c:	9301      	str	r3, [sp, #4]
   db14e:	bd08      	pop	{r3, pc}
   db150:	00030220 	.word	0x00030220

000db154 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   db154:	b508      	push	{r3, lr}
   db156:	4b02      	ldr	r3, [pc, #8]	; (db160 <set_system_mode+0xc>)
   db158:	681b      	ldr	r3, [r3, #0]
   db15a:	685b      	ldr	r3, [r3, #4]
   db15c:	9301      	str	r3, [sp, #4]
   db15e:	bd08      	pop	{r3, pc}
   db160:	00030220 	.word	0x00030220

000db164 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   db164:	b508      	push	{r3, lr}
   db166:	4b02      	ldr	r3, [pc, #8]	; (db170 <system_delay_ms+0xc>)
   db168:	681b      	ldr	r3, [r3, #0]
   db16a:	695b      	ldr	r3, [r3, #20]
   db16c:	9301      	str	r3, [sp, #4]
   db16e:	bd08      	pop	{r3, pc}
   db170:	00030220 	.word	0x00030220

000db174 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   db174:	b508      	push	{r3, lr}
   db176:	4b02      	ldr	r3, [pc, #8]	; (db180 <system_thread_set_state+0xc>)
   db178:	681b      	ldr	r3, [r3, #0]
   db17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   db17c:	9301      	str	r3, [sp, #4]
   db17e:	bd08      	pop	{r3, pc}
   db180:	00030220 	.word	0x00030220

000db184 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   db184:	b508      	push	{r3, lr}
   db186:	4b02      	ldr	r3, [pc, #8]	; (db190 <application_thread_current+0xc>)
   db188:	681b      	ldr	r3, [r3, #0]
   db18a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   db18c:	9301      	str	r3, [sp, #4]
   db18e:	bd08      	pop	{r3, pc}
   db190:	00030220 	.word	0x00030220

000db194 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   db194:	b508      	push	{r3, lr}
   db196:	4b02      	ldr	r3, [pc, #8]	; (db1a0 <application_thread_invoke+0xc>)
   db198:	681b      	ldr	r3, [r3, #0]
   db19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   db19c:	9301      	str	r3, [sp, #4]
   db19e:	bd08      	pop	{r3, pc}
   db1a0:	00030220 	.word	0x00030220

000db1a4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   db1a4:	b508      	push	{r3, lr}
   db1a6:	4b02      	ldr	r3, [pc, #8]	; (db1b0 <system_thread_get_state+0xc>)
   db1a8:	681b      	ldr	r3, [r3, #0]
   db1aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   db1ac:	9301      	str	r3, [sp, #4]
   db1ae:	bd08      	pop	{r3, pc}
   db1b0:	00030220 	.word	0x00030220

000db1b4 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   db1b4:	b508      	push	{r3, lr}
   db1b6:	4b02      	ldr	r3, [pc, #8]	; (db1c0 <led_pattern_period+0xc>)
   db1b8:	681b      	ldr	r3, [r3, #0]
   db1ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   db1bc:	9301      	str	r3, [sp, #4]
   db1be:	bd08      	pop	{r3, pc}
   db1c0:	00030220 	.word	0x00030220

000db1c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   db1c4:	b508      	push	{r3, lr}
   db1c6:	4b03      	ldr	r3, [pc, #12]	; (db1d4 <system_ctrl_set_app_request_handler+0x10>)
   db1c8:	681b      	ldr	r3, [r3, #0]
   db1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   db1ce:	9301      	str	r3, [sp, #4]
   db1d0:	bd08      	pop	{r3, pc}
   db1d2:	0000      	.short	0x0000
   db1d4:	00030220 	.word	0x00030220

000db1d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   db1d8:	b508      	push	{r3, lr}
   db1da:	4b03      	ldr	r3, [pc, #12]	; (db1e8 <system_ctrl_set_result+0x10>)
   db1dc:	681b      	ldr	r3, [r3, #0]
   db1de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   db1e2:	9301      	str	r3, [sp, #4]
   db1e4:	bd08      	pop	{r3, pc}
   db1e6:	0000      	.short	0x0000
   db1e8:	00030220 	.word	0x00030220

000db1ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   db1ec:	b508      	push	{r3, lr}
   db1ee:	4b02      	ldr	r3, [pc, #8]	; (db1f8 <network_connect+0xc>)
   db1f0:	681b      	ldr	r3, [r3, #0]
   db1f2:	685b      	ldr	r3, [r3, #4]
   db1f4:	9301      	str	r3, [sp, #4]
   db1f6:	bd08      	pop	{r3, pc}
   db1f8:	00030240 	.word	0x00030240

000db1fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   db1fc:	b508      	push	{r3, lr}
   db1fe:	4b02      	ldr	r3, [pc, #8]	; (db208 <network_connecting+0xc>)
   db200:	681b      	ldr	r3, [r3, #0]
   db202:	689b      	ldr	r3, [r3, #8]
   db204:	9301      	str	r3, [sp, #4]
   db206:	bd08      	pop	{r3, pc}
   db208:	00030240 	.word	0x00030240

000db20c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   db20c:	b508      	push	{r3, lr}
   db20e:	4b02      	ldr	r3, [pc, #8]	; (db218 <network_disconnect+0xc>)
   db210:	681b      	ldr	r3, [r3, #0]
   db212:	68db      	ldr	r3, [r3, #12]
   db214:	9301      	str	r3, [sp, #4]
   db216:	bd08      	pop	{r3, pc}
   db218:	00030240 	.word	0x00030240

000db21c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   db21c:	b508      	push	{r3, lr}
   db21e:	4b02      	ldr	r3, [pc, #8]	; (db228 <network_ready+0xc>)
   db220:	681b      	ldr	r3, [r3, #0]
   db222:	691b      	ldr	r3, [r3, #16]
   db224:	9301      	str	r3, [sp, #4]
   db226:	bd08      	pop	{r3, pc}
   db228:	00030240 	.word	0x00030240

000db22c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   db22c:	b508      	push	{r3, lr}
   db22e:	4b02      	ldr	r3, [pc, #8]	; (db238 <network_on+0xc>)
   db230:	681b      	ldr	r3, [r3, #0]
   db232:	695b      	ldr	r3, [r3, #20]
   db234:	9301      	str	r3, [sp, #4]
   db236:	bd08      	pop	{r3, pc}
   db238:	00030240 	.word	0x00030240

000db23c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   db23c:	b508      	push	{r3, lr}
   db23e:	4b02      	ldr	r3, [pc, #8]	; (db248 <network_off+0xc>)
   db240:	681b      	ldr	r3, [r3, #0]
   db242:	699b      	ldr	r3, [r3, #24]
   db244:	9301      	str	r3, [sp, #4]
   db246:	bd08      	pop	{r3, pc}
   db248:	00030240 	.word	0x00030240

000db24c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   db24c:	b508      	push	{r3, lr}
   db24e:	4b02      	ldr	r3, [pc, #8]	; (db258 <network_listen+0xc>)
   db250:	681b      	ldr	r3, [r3, #0]
   db252:	69db      	ldr	r3, [r3, #28]
   db254:	9301      	str	r3, [sp, #4]
   db256:	bd08      	pop	{r3, pc}
   db258:	00030240 	.word	0x00030240

000db25c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   db25c:	b508      	push	{r3, lr}
   db25e:	4b02      	ldr	r3, [pc, #8]	; (db268 <network_listening+0xc>)
   db260:	681b      	ldr	r3, [r3, #0]
   db262:	6a1b      	ldr	r3, [r3, #32]
   db264:	9301      	str	r3, [sp, #4]
   db266:	bd08      	pop	{r3, pc}
   db268:	00030240 	.word	0x00030240

000db26c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   db26c:	b508      	push	{r3, lr}
   db26e:	4b02      	ldr	r3, [pc, #8]	; (db278 <network_set_listen_timeout+0xc>)
   db270:	681b      	ldr	r3, [r3, #0]
   db272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   db274:	9301      	str	r3, [sp, #4]
   db276:	bd08      	pop	{r3, pc}
   db278:	00030240 	.word	0x00030240

000db27c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   db27c:	b508      	push	{r3, lr}
   db27e:	4b02      	ldr	r3, [pc, #8]	; (db288 <network_get_listen_timeout+0xc>)
   db280:	681b      	ldr	r3, [r3, #0]
   db282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   db284:	9301      	str	r3, [sp, #4]
   db286:	bd08      	pop	{r3, pc}
   db288:	00030240 	.word	0x00030240

000db28c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   db28c:	b508      	push	{r3, lr}
   db28e:	4b02      	ldr	r3, [pc, #8]	; (db298 <spark_variable+0xc>)
   db290:	681b      	ldr	r3, [r3, #0]
   db292:	681b      	ldr	r3, [r3, #0]
   db294:	9301      	str	r3, [sp, #4]
   db296:	bd08      	pop	{r3, pc}
   db298:	00030244 	.word	0x00030244

000db29c <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   db29c:	b508      	push	{r3, lr}
   db29e:	4b02      	ldr	r3, [pc, #8]	; (db2a8 <spark_process+0xc>)
   db2a0:	681b      	ldr	r3, [r3, #0]
   db2a2:	689b      	ldr	r3, [r3, #8]
   db2a4:	9301      	str	r3, [sp, #4]
   db2a6:	bd08      	pop	{r3, pc}
   db2a8:	00030244 	.word	0x00030244

000db2ac <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   db2ac:	b508      	push	{r3, lr}
   db2ae:	4b02      	ldr	r3, [pc, #8]	; (db2b8 <spark_cloud_flag_connect+0xc>)
   db2b0:	681b      	ldr	r3, [r3, #0]
   db2b2:	68db      	ldr	r3, [r3, #12]
   db2b4:	9301      	str	r3, [sp, #4]
   db2b6:	bd08      	pop	{r3, pc}
   db2b8:	00030244 	.word	0x00030244

000db2bc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   db2bc:	b508      	push	{r3, lr}
   db2be:	4b02      	ldr	r3, [pc, #8]	; (db2c8 <spark_cloud_flag_connected+0xc>)
   db2c0:	681b      	ldr	r3, [r3, #0]
   db2c2:	695b      	ldr	r3, [r3, #20]
   db2c4:	9301      	str	r3, [sp, #4]
   db2c6:	bd08      	pop	{r3, pc}
   db2c8:	00030244 	.word	0x00030244

000db2cc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   db2cc:	b508      	push	{r3, lr}
   db2ce:	4b02      	ldr	r3, [pc, #8]	; (db2d8 <spark_deviceID+0xc>)
   db2d0:	681b      	ldr	r3, [r3, #0]
   db2d2:	69db      	ldr	r3, [r3, #28]
   db2d4:	9301      	str	r3, [sp, #4]
   db2d6:	bd08      	pop	{r3, pc}
   db2d8:	00030244 	.word	0x00030244

000db2dc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   db2dc:	b508      	push	{r3, lr}
   db2de:	4b02      	ldr	r3, [pc, #8]	; (db2e8 <spark_send_event+0xc>)
   db2e0:	681b      	ldr	r3, [r3, #0]
   db2e2:	6a1b      	ldr	r3, [r3, #32]
   db2e4:	9301      	str	r3, [sp, #4]
   db2e6:	bd08      	pop	{r3, pc}
   db2e8:	00030244 	.word	0x00030244

000db2ec <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   db2ec:	b508      	push	{r3, lr}
   db2ee:	4b02      	ldr	r3, [pc, #8]	; (db2f8 <spark_sync_time_pending+0xc>)
   db2f0:	681b      	ldr	r3, [r3, #0]
   db2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   db2f4:	9301      	str	r3, [sp, #4]
   db2f6:	bd08      	pop	{r3, pc}
   db2f8:	00030244 	.word	0x00030244

000db2fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   db2fc:	b508      	push	{r3, lr}
   db2fe:	4b02      	ldr	r3, [pc, #8]	; (db308 <spark_set_random_seed_from_cloud_handler+0xc>)
   db300:	681b      	ldr	r3, [r3, #0]
   db302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   db304:	9301      	str	r3, [sp, #4]
   db306:	bd08      	pop	{r3, pc}
   db308:	00030244 	.word	0x00030244

000db30c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   db30c:	b508      	push	{r3, lr}
   db30e:	4b02      	ldr	r3, [pc, #8]	; (db318 <malloc+0xc>)
   db310:	681b      	ldr	r3, [r3, #0]
   db312:	681b      	ldr	r3, [r3, #0]
   db314:	9301      	str	r3, [sp, #4]
   db316:	bd08      	pop	{r3, pc}
   db318:	0003021c 	.word	0x0003021c

000db31c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   db31c:	b508      	push	{r3, lr}
   db31e:	4b02      	ldr	r3, [pc, #8]	; (db328 <free+0xc>)
   db320:	681b      	ldr	r3, [r3, #0]
   db322:	685b      	ldr	r3, [r3, #4]
   db324:	9301      	str	r3, [sp, #4]
   db326:	bd08      	pop	{r3, pc}
   db328:	0003021c 	.word	0x0003021c

000db32c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   db32c:	b508      	push	{r3, lr}
   db32e:	4b02      	ldr	r3, [pc, #8]	; (db338 <realloc+0xc>)
   db330:	681b      	ldr	r3, [r3, #0]
   db332:	689b      	ldr	r3, [r3, #8]
   db334:	9301      	str	r3, [sp, #4]
   db336:	bd08      	pop	{r3, pc}
   db338:	0003021c 	.word	0x0003021c

000db33c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   db33c:	b508      	push	{r3, lr}
   db33e:	4b02      	ldr	r3, [pc, #8]	; (db348 <sprintf+0xc>)
   db340:	681b      	ldr	r3, [r3, #0]
   db342:	68db      	ldr	r3, [r3, #12]
   db344:	9301      	str	r3, [sp, #4]
   db346:	bd08      	pop	{r3, pc}
   db348:	0003021c 	.word	0x0003021c

000db34c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   db34c:	b508      	push	{r3, lr}
   db34e:	4b02      	ldr	r3, [pc, #8]	; (db358 <siprintf+0xc>)
   db350:	681b      	ldr	r3, [r3, #0]
   db352:	691b      	ldr	r3, [r3, #16]
   db354:	9301      	str	r3, [sp, #4]
   db356:	bd08      	pop	{r3, pc}
   db358:	0003021c 	.word	0x0003021c

000db35c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   db35c:	b508      	push	{r3, lr}
   db35e:	4b02      	ldr	r3, [pc, #8]	; (db368 <siscanf+0xc>)
   db360:	681b      	ldr	r3, [r3, #0]
   db362:	699b      	ldr	r3, [r3, #24]
   db364:	9301      	str	r3, [sp, #4]
   db366:	bd08      	pop	{r3, pc}
   db368:	0003021c 	.word	0x0003021c

000db36c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   db36c:	b508      	push	{r3, lr}
   db36e:	4b02      	ldr	r3, [pc, #8]	; (db378 <snprintf+0xc>)
   db370:	681b      	ldr	r3, [r3, #0]
   db372:	69db      	ldr	r3, [r3, #28]
   db374:	9301      	str	r3, [sp, #4]
   db376:	bd08      	pop	{r3, pc}
   db378:	0003021c 	.word	0x0003021c

000db37c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   db37c:	b508      	push	{r3, lr}
   db37e:	4b02      	ldr	r3, [pc, #8]	; (db388 <sniprintf+0xc>)
   db380:	681b      	ldr	r3, [r3, #0]
   db382:	6a1b      	ldr	r3, [r3, #32]
   db384:	9301      	str	r3, [sp, #4]
   db386:	bd08      	pop	{r3, pc}
   db388:	0003021c 	.word	0x0003021c

000db38c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   db38c:	b508      	push	{r3, lr}
   db38e:	4b02      	ldr	r3, [pc, #8]	; (db398 <vsnprintf+0xc>)
   db390:	681b      	ldr	r3, [r3, #0]
   db392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   db394:	9301      	str	r3, [sp, #4]
   db396:	bd08      	pop	{r3, pc}
   db398:	0003021c 	.word	0x0003021c

000db39c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   db39c:	b508      	push	{r3, lr}
   db39e:	4b02      	ldr	r3, [pc, #8]	; (db3a8 <abort+0xc>)
   db3a0:	681b      	ldr	r3, [r3, #0]
   db3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   db3a4:	9301      	str	r3, [sp, #4]
   db3a6:	bd08      	pop	{r3, pc}
   db3a8:	0003021c 	.word	0x0003021c

000db3ac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   db3ac:	b508      	push	{r3, lr}
   db3ae:	4b02      	ldr	r3, [pc, #8]	; (db3b8 <_malloc_r+0xc>)
   db3b0:	681b      	ldr	r3, [r3, #0]
   db3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   db3b4:	9301      	str	r3, [sp, #4]
   db3b6:	bd08      	pop	{r3, pc}
   db3b8:	0003021c 	.word	0x0003021c

000db3bc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   db3bc:	b508      	push	{r3, lr}
   db3be:	4b02      	ldr	r3, [pc, #8]	; (db3c8 <__errno+0xc>)
   db3c0:	681b      	ldr	r3, [r3, #0]
   db3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   db3c4:	9301      	str	r3, [sp, #4]
   db3c6:	bd08      	pop	{r3, pc}
   db3c8:	0003021c 	.word	0x0003021c

000db3cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db3cc:	2200      	movs	r2, #0
   db3ce:	4611      	mov	r1, r2
   db3d0:	6840      	ldr	r0, [r0, #4]
   db3d2:	f7ff bf43 	b.w	db25c <network_listening>

000db3d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db3d6:	2200      	movs	r2, #0
   db3d8:	4611      	mov	r1, r2
   db3da:	6840      	ldr	r0, [r0, #4]
   db3dc:	f7ff bf4e 	b.w	db27c <network_get_listen_timeout>

000db3e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db3e0:	2200      	movs	r2, #0
   db3e2:	6840      	ldr	r0, [r0, #4]
   db3e4:	f7ff bf42 	b.w	db26c <network_set_listen_timeout>

000db3e8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db3e8:	2200      	movs	r2, #0
   db3ea:	f081 0101 	eor.w	r1, r1, #1
   db3ee:	6840      	ldr	r0, [r0, #4]
   db3f0:	f7ff bf2c 	b.w	db24c <network_listen>

000db3f4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   db3f4:	2300      	movs	r3, #0
   db3f6:	461a      	mov	r2, r3
   db3f8:	4619      	mov	r1, r3
   db3fa:	6840      	ldr	r0, [r0, #4]
   db3fc:	f7ff bf1e 	b.w	db23c <network_off>

000db400 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   db400:	2300      	movs	r3, #0
   db402:	461a      	mov	r2, r3
   db404:	4619      	mov	r1, r3
   db406:	6840      	ldr	r0, [r0, #4]
   db408:	f7ff bf10 	b.w	db22c <network_on>

000db40c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   db40c:	2200      	movs	r2, #0
   db40e:	4611      	mov	r1, r2
   db410:	6840      	ldr	r0, [r0, #4]
   db412:	f7ff bf03 	b.w	db21c <network_ready>

000db416 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db416:	2200      	movs	r2, #0
   db418:	4611      	mov	r1, r2
   db41a:	6840      	ldr	r0, [r0, #4]
   db41c:	f7ff beee 	b.w	db1fc <network_connecting>

000db420 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db420:	2200      	movs	r2, #0
   db422:	2102      	movs	r1, #2
   db424:	6840      	ldr	r0, [r0, #4]
   db426:	f7ff bef1 	b.w	db20c <network_disconnect>

000db42a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db42a:	2300      	movs	r3, #0
   db42c:	461a      	mov	r2, r3
   db42e:	6840      	ldr	r0, [r0, #4]
   db430:	f7ff bedc 	b.w	db1ec <network_connect>

000db434 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   db434:	4b02      	ldr	r3, [pc, #8]	; (db440 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   db436:	2203      	movs	r2, #3
   db438:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   db43a:	4a02      	ldr	r2, [pc, #8]	; (db444 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   db43c:	601a      	str	r2, [r3, #0]
   db43e:	4770      	bx	lr
   db440:	2003e1c8 	.word	0x2003e1c8
   db444:	000e4dd8 	.word	0x000e4dd8

000db448 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   db448:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   db44a:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   db44c:	6892      	ldr	r2, [r2, #8]
   db44e:	4601      	mov	r1, r0
   db450:	4618      	mov	r0, r3
   db452:	4710      	bx	r2

000db454 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   db454:	b570      	push	{r4, r5, r6, lr}
   db456:	4c0e      	ldr	r4, [pc, #56]	; (db490 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   db458:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   db45a:	241c      	movs	r4, #28
   db45c:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   db45e:	f89d 4014 	ldrb.w	r4, [sp, #20]
   db462:	f89d 6010 	ldrb.w	r6, [sp, #16]
   db466:	f004 0403 	and.w	r4, r4, #3
   db46a:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   db46e:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   db470:	b2e4      	uxtb	r4, r4
   db472:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   db474:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   db476:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   db478:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   db47a:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   db47c:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   db47e:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   db480:	bf08      	it	eq
   db482:	4b04      	ldreq	r3, [pc, #16]	; (db494 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   db484:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   db486:	bf06      	itte	eq
   db488:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   db48a:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   db48c:	8303      	strhne	r3, [r0, #24]
    }
}
   db48e:	bd70      	pop	{r4, r5, r6, pc}
   db490:	000e40d0 	.word	0x000e40d0
   db494:	000db449 	.word	0x000db449

000db498 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   db498:	2100      	movs	r1, #0
   db49a:	f7ff bc39 	b.w	dad10 <HAL_SPI_Acquire>

000db49e <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   db49e:	2100      	movs	r1, #0
   db4a0:	f7ff bc3e 	b.w	dad20 <HAL_SPI_Release>

000db4a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   db4a4:	b510      	push	{r4, lr}
   db4a6:	4604      	mov	r4, r0
{
    _spi = spi;
   db4a8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   db4aa:	4608      	mov	r0, r1
   db4ac:	f7ff fc00 	bl	dacb0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   db4b0:	2300      	movs	r3, #0
   db4b2:	6063      	str	r3, [r4, #4]
}
   db4b4:	4620      	mov	r0, r4
   db4b6:	bd10      	pop	{r4, pc}

000db4b8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   db4b8:	b510      	push	{r4, lr}
   db4ba:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   db4bc:	7800      	ldrb	r0, [r0, #0]
   db4be:	f7ff ffeb 	bl	db498 <_ZN8SPIClass4lockEv.isra.0>
   db4c2:	b948      	cbnz	r0, db4d8 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   db4c4:	7820      	ldrb	r0, [r4, #0]
   db4c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   db4ca:	f7ff fbe1 	bl	dac90 <HAL_SPI_Begin>
        unlock();
   db4ce:	7820      	ldrb	r0, [r4, #0]
    }
}
   db4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   db4d4:	f7ff bfe3 	b.w	db49e <_ZN8SPIClass6unlockEv.isra.1>
   db4d8:	bd10      	pop	{r4, pc}

000db4da <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   db4da:	7800      	ldrb	r0, [r0, #0]
   db4dc:	f7ff bfdf 	b.w	db49e <_ZN8SPIClass6unlockEv.isra.1>

000db4e0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   db4e0:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   db4e2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   db4e4:	6018      	str	r0, [r3, #0]
   db4e6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   db4e8:	6818      	ldr	r0, [r3, #0]
   db4ea:	4288      	cmp	r0, r1
   db4ec:	b2e5      	uxtb	r5, r4
   db4ee:	d906      	bls.n	db4fe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   db4f0:	3401      	adds	r4, #1
   db4f2:	2c08      	cmp	r4, #8
   db4f4:	d002      	beq.n	db4fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   db4f6:	0840      	lsrs	r0, r0, #1
   db4f8:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   db4fa:	e7f5      	b.n	db4e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   db4fc:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   db4fe:	4b02      	ldr	r3, [pc, #8]	; (db508 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   db500:	5d5b      	ldrb	r3, [r3, r5]
   db502:	7013      	strb	r3, [r2, #0]
   db504:	bd30      	pop	{r4, r5, pc}
   db506:	bf00      	nop
   db508:	000e4e04 	.word	0x000e4e04

000db50c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   db50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db510:	4607      	mov	r7, r0
   db512:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   db514:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   db516:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   db518:	f7ff ffbe 	bl	db498 <_ZN8SPIClass4lockEv.isra.0>
   db51c:	2800      	cmp	r0, #0
   db51e:	db62      	blt.n	db5e6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   db520:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   db522:	2214      	movs	r2, #20
   db524:	2100      	movs	r1, #0
   db526:	a809      	add	r0, sp, #36	; 0x24
   db528:	f005 fc06 	bl	e0d38 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   db52c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   db52e:	4620      	mov	r0, r4
   db530:	2200      	movs	r2, #0
   db532:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   db534:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   db538:	f7ff fbca 	bl	dacd0 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   db53c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   db540:	b154      	cbz	r4, db558 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   db542:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   db546:	b935      	cbnz	r5, db556 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   db548:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   db54c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   db550:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   db554:	e003      	b.n	db55e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   db556:	2400      	movs	r4, #0
   db558:	46a1      	mov	r9, r4
   db55a:	46a0      	mov	r8, r4
   db55c:	2501      	movs	r5, #1
   db55e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   db560:	b105      	cbz	r5, db564 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   db562:	b9bb      	cbnz	r3, db594 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   db564:	429d      	cmp	r5, r3
   db566:	d10b      	bne.n	db580 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   db568:	68b2      	ldr	r2, [r6, #8]
   db56a:	4542      	cmp	r2, r8
   db56c:	d108      	bne.n	db580 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   db56e:	f88d 9020 	strb.w	r9, [sp, #32]
   db572:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   db576:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   db57a:	89b2      	ldrh	r2, [r6, #12]
   db57c:	4291      	cmp	r1, r2
   db57e:	d009      	beq.n	db594 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   db580:	b153      	cbz	r3, db598 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   db582:	2400      	movs	r4, #0
   db584:	7838      	ldrb	r0, [r7, #0]
   db586:	9401      	str	r4, [sp, #4]
   db588:	9400      	str	r4, [sp, #0]
   db58a:	4623      	mov	r3, r4
   db58c:	4622      	mov	r2, r4
   db58e:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   db590:	f7ff fbb6 	bl	dad00 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   db594:	2000      	movs	r0, #0
   db596:	e026      	b.n	db5e6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   db598:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   db59c:	68b1      	ldr	r1, [r6, #8]
   db59e:	980a      	ldr	r0, [sp, #40]	; 0x28
   db5a0:	ab04      	add	r3, sp, #16
   db5a2:	f10d 020f 	add.w	r2, sp, #15
   db5a6:	f7ff ff9b 	bl	db4e0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   db5aa:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   db5ac:	b105      	cbz	r5, db5b0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   db5ae:	b9b1      	cbnz	r1, db5de <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   db5b0:	42a9      	cmp	r1, r5
   db5b2:	d008      	beq.n	db5c6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   db5b4:	2400      	movs	r4, #0
   db5b6:	7838      	ldrb	r0, [r7, #0]
   db5b8:	9401      	str	r4, [sp, #4]
   db5ba:	7b74      	ldrb	r4, [r6, #13]
   db5bc:	7b33      	ldrb	r3, [r6, #12]
   db5be:	f89d 200f 	ldrb.w	r2, [sp, #15]
   db5c2:	9400      	str	r4, [sp, #0]
   db5c4:	e7e4      	b.n	db590 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   db5c6:	68b3      	ldr	r3, [r6, #8]
   db5c8:	4543      	cmp	r3, r8
   db5ca:	d3f3      	bcc.n	db5b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   db5cc:	f88d 9020 	strb.w	r9, [sp, #32]
   db5d0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   db5d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   db5d8:	89b3      	ldrh	r3, [r6, #12]
   db5da:	429a      	cmp	r2, r3
   db5dc:	d1ea      	bne.n	db5b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   db5de:	9b04      	ldr	r3, [sp, #16]
   db5e0:	4543      	cmp	r3, r8
   db5e2:	d1e7      	bne.n	db5b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   db5e4:	e7d6      	b.n	db594 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   db5e6:	b00f      	add	sp, #60	; 0x3c
   db5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db5ec <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   db5ec:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   db5ee:	7800      	ldrb	r0, [r0, #0]
   db5f0:	f7ff fb56 	bl	daca0 <HAL_SPI_Send_Receive_Data>
}
   db5f4:	b2c0      	uxtb	r0, r0
   db5f6:	bd08      	pop	{r3, pc}

000db5f8 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   db5f8:	b530      	push	{r4, r5, lr}
   db5fa:	b087      	sub	sp, #28
   db5fc:	4604      	mov	r4, r0
   db5fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   db600:	7800      	ldrb	r0, [r0, #0]
   db602:	9500      	str	r5, [sp, #0]
   db604:	f7ff fb6c 	bl	dace0 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   db608:	b93d      	cbnz	r5, db61a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   db60a:	a902      	add	r1, sp, #8
   db60c:	7820      	ldrb	r0, [r4, #0]
   db60e:	f7ff fb6f 	bl	dacf0 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   db612:	f89d 3014 	ldrb.w	r3, [sp, #20]
   db616:	07db      	lsls	r3, r3, #31
   db618:	d4f7      	bmi.n	db60a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   db61a:	b007      	add	sp, #28
   db61c:	bd30      	pop	{r4, r5, pc}

000db61e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   db61e:	7800      	ldrb	r0, [r0, #0]
   db620:	f7ff bb4e 	b.w	dacc0 <HAL_SPI_Is_Enabled>

000db624 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   db624:	b510      	push	{r4, lr}
   db626:	4604      	mov	r4, r0
        if (wakeupSource_) {
   db628:	6800      	ldr	r0, [r0, #0]
   db62a:	b118      	cbz	r0, db634 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   db62c:	f7ff fe76 	bl	db31c <free>
            wakeupSource_ = nullptr;
   db630:	2300      	movs	r3, #0
   db632:	6023      	str	r3, [r4, #0]
   db634:	bd10      	pop	{r4, pc}

000db636 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   db636:	b510      	push	{r4, lr}
   db638:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   db63a:	f7ff fff3 	bl	db624 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   db63e:	4620      	mov	r0, r4
   db640:	bd10      	pop	{r4, pc}

000db642 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   db642:	4601      	mov	r1, r0
   db644:	2200      	movs	r2, #0
   db646:	208c      	movs	r0, #140	; 0x8c
   db648:	f7ff bbaa 	b.w	dada0 <HAL_Core_System_Reset_Ex>

000db64c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   db64c:	2000      	movs	r0, #0
   db64e:	f7ff bff8 	b.w	db642 <_ZN11SystemClass5resetEm>
	...

000db654 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   db654:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   db656:	4c09      	ldr	r4, [pc, #36]	; (db67c <_GLOBAL__sub_I_System+0x28>)
   db658:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   db65a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   db65e:	6020      	str	r0, [r4, #0]
   db660:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   db662:	71a0      	strb	r0, [r4, #6]
   db664:	8120      	strh	r0, [r4, #8]
   db666:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   db668:	f7ff fd74 	bl	db154 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   db66c:	4620      	mov	r0, r4
   db66e:	4a04      	ldr	r2, [pc, #16]	; (db680 <_GLOBAL__sub_I_System+0x2c>)
   db670:	4904      	ldr	r1, [pc, #16]	; (db684 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   db672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   db676:	f002 bbb3 	b.w	ddde0 <__aeabi_atexit>
   db67a:	bf00      	nop
   db67c:	2003e1d0 	.word	0x2003e1d0
   db680:	2003bce8 	.word	0x2003bce8
   db684:	000db637 	.word	0x000db637

000db688 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   db688:	b510      	push	{r4, lr}
   db68a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   db68c:	f006 fb22 	bl	e1cd4 <strlen>
   db690:	3801      	subs	r0, #1
   db692:	1823      	adds	r3, r4, r0
   db694:	4620      	mov	r0, r4
	while(i<j){
   db696:	4298      	cmp	r0, r3
   db698:	d206      	bcs.n	db6a8 <_Z11str_reversePc+0x20>
		c = *i;
   db69a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   db69c:	7819      	ldrb	r1, [r3, #0]
   db69e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   db6a2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   db6a6:	e7f6      	b.n	db696 <_Z11str_reversePc+0xe>
   db6a8:	bd10      	pop	{r4, pc}

000db6aa <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   db6aa:	b570      	push	{r4, r5, r6, lr}
   db6ac:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   db6ae:	1e91      	subs	r1, r2, #2
   db6b0:	2922      	cmp	r1, #34	; 0x22
   db6b2:	d820      	bhi.n	db6f6 <ultoa+0x4c>
   db6b4:	4625      	mov	r5, r4
   db6b6:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   db6b8:	b910      	cbnz	r0, db6c0 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   db6ba:	4423      	add	r3, r4
            *ptr++ = '0';
   db6bc:	2230      	movs	r2, #48	; 0x30
   db6be:	e00e      	b.n	db6de <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   db6c0:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   db6c4:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   db6c8:	b2c1      	uxtb	r1, r0
   db6ca:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   db6ce:	2809      	cmp	r0, #9
                *ptr += '0';
   db6d0:	bf94      	ite	ls
   db6d2:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   db6d4:	3157      	addhi	r1, #87	; 0x57
   db6d6:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   db6da:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   db6dc:	e7eb      	b.n	db6b6 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   db6de:	4299      	cmp	r1, r3
   db6e0:	d202      	bcs.n	db6e8 <ultoa+0x3e>
            *ptr++ = '0';
   db6e2:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   db6e6:	e7fa      	b.n	db6de <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   db6e8:	2300      	movs	r3, #0
	str_reverse(buffer);
   db6ea:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   db6ec:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   db6ee:	f7ff ffcb 	bl	db688 <_Z11str_reversePc>
	return buffer;
   db6f2:	4620      	mov	r0, r4
   db6f4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   db6f6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   db6f8:	bd70      	pop	{r4, r5, r6, pc}

000db6fa <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   db6fa:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   db6fc:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   db6fe:	460c      	mov	r4, r1
   db700:	4615      	mov	r5, r2
	if(a<0){
   db702:	da0b      	bge.n	db71c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   db704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   db708:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   db70c:	bf14      	ite	ne
   db70e:	4258      	negne	r0, r3
   db710:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   db712:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   db714:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   db716:	462a      	mov	r2, r5
   db718:	4419      	add	r1, r3
   db71a:	e000      	b.n	db71e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   db71c:	2301      	movs	r3, #1
   db71e:	f7ff ffc4 	bl	db6aa <ultoa>
	}
	return buffer;
}
   db722:	4620      	mov	r0, r4
   db724:	bd38      	pop	{r3, r4, r5, pc}

000db726 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   db726:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   db728:	2301      	movs	r3, #1
   db72a:	f7ff ffbe 	bl	db6aa <ultoa>
}
   db72e:	bd08      	pop	{r3, pc}

000db730 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   db730:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   db732:	6804      	ldr	r4, [r0, #0]
   db734:	6b24      	ldr	r4, [r4, #48]	; 0x30
   db736:	46a4      	mov	ip, r4
    }
   db738:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   db73c:	4760      	bx	ip

000db73e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   db73e:	6803      	ldr	r3, [r0, #0]
   db740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   db742:	4718      	bx	r3

000db744 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   db744:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   db746:	4770      	bx	lr

000db748 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   db748:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   db74a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   db74c:	1a10      	subs	r0, r2, r0
   db74e:	4770      	bx	lr

000db750 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   db750:	b513      	push	{r0, r1, r4, lr}
   db752:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   db754:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   db756:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   db75a:	68d4      	ldr	r4, [r2, #12]
   db75c:	4619      	mov	r1, r3
   db75e:	2201      	movs	r2, #1
   db760:	47a0      	blx	r4
}
   db762:	b002      	add	sp, #8
   db764:	bd10      	pop	{r4, pc}

000db766 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   db766:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   db768:	6803      	ldr	r3, [r0, #0]
   db76a:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   db76c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   db76e:	4798      	blx	r3
   db770:	b128      	cbz	r0, db77e <_ZN3UDP4readEv+0x18>
   db772:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   db774:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   db776:	1c59      	adds	r1, r3, #1
   db778:	86e1      	strh	r1, [r4, #54]	; 0x36
   db77a:	5cd0      	ldrb	r0, [r2, r3]
   db77c:	bd10      	pop	{r4, pc}
   db77e:	f04f 30ff 	mov.w	r0, #4294967295
}
   db782:	bd10      	pop	{r4, pc}

000db784 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   db784:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   db786:	6803      	ldr	r3, [r0, #0]
   db788:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   db78a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   db78c:	4798      	blx	r3
   db78e:	b118      	cbz	r0, db798 <_ZN3UDP4peekEv+0x14>
   db790:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   db792:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   db794:	5cd0      	ldrb	r0, [r2, r3]
   db796:	bd10      	pop	{r4, pc}
   db798:	f04f 30ff 	mov.w	r0, #4294967295
}
   db79c:	bd10      	pop	{r4, pc}

000db79e <_ZN3UDP5flushEv>:

void UDP::flush() {
   db79e:	4770      	bx	lr

000db7a0 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   db7a0:	b410      	push	{r4}
   db7a2:	4603      	mov	r3, r0
   db7a4:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   db7a6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   db7a8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   db7aa:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   db7ac:	6803      	ldr	r3, [r0, #0]
   db7ae:	1a52      	subs	r2, r2, r1
   db7b0:	68db      	ldr	r3, [r3, #12]
   db7b2:	4421      	add	r1, r4
}
   db7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   db7b8:	4718      	bx	r3

000db7ba <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   db7ba:	f1a0 0010 	sub.w	r0, r0, #16
   db7be:	f7ff bfef 	b.w	db7a0 <_ZNK3UDP7printToER5Print>

000db7c2 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   db7c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   db7c4:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   db7c6:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   db7c8:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   db7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   db7cc:	4604      	mov	r4, r0
   db7ce:	460f      	mov	r7, r1
   db7d0:	4615      	mov	r5, r2
    stop();
   db7d2:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   db7d4:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   db7d6:	4632      	mov	r2, r6
   db7d8:	2100      	movs	r1, #0
   db7da:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   db7dc:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   db7de:	f005 faab 	bl	e0d38 <memset>
    saddr.sin6_len = sizeof(saddr);
   db7e2:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   db7e6:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   db7e8:	260a      	movs	r6, #10
   db7ea:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   db7ee:	f7ff fb57 	bl	daea0 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   db7f2:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   db7f4:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   db7f8:	2102      	movs	r1, #2
   db7fa:	4630      	mov	r0, r6
   db7fc:	f7ff fc50 	bl	db0a0 <sock_socket>

    if (_sock < 0) {
   db800:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   db802:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   db804:	db24      	blt.n	db850 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   db806:	2204      	movs	r2, #4
   db808:	9200      	str	r2, [sp, #0]
   db80a:	ab02      	add	r3, sp, #8
   db80c:	f640 71ff 	movw	r1, #4095	; 0xfff
   db810:	f7ff fc0e 	bl	db030 <sock_setsockopt>
   db814:	b9e0      	cbnz	r0, db850 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   db816:	b195      	cbz	r5, db83e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   db818:	9003      	str	r0, [sp, #12]
   db81a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   db81e:	a903      	add	r1, sp, #12
   db820:	b2e8      	uxtb	r0, r5
   db822:	f7ff fa85 	bl	dad30 <if_index_to_name>
   db826:	b998      	cbnz	r0, db850 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   db828:	2306      	movs	r3, #6
   db82a:	9300      	str	r3, [sp, #0]
   db82c:	f241 020b 	movw	r2, #4107	; 0x100b
   db830:	ab03      	add	r3, sp, #12
   db832:	f640 71ff 	movw	r1, #4095	; 0xfff
   db836:	6960      	ldr	r0, [r4, #20]
   db838:	f7ff fbfa 	bl	db030 <sock_setsockopt>
   db83c:	b940      	cbnz	r0, db850 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   db83e:	221c      	movs	r2, #28
   db840:	a905      	add	r1, sp, #20
   db842:	6960      	ldr	r0, [r4, #20]
   db844:	f7ff fbec 	bl	db020 <sock_bind>
   db848:	b910      	cbnz	r0, db850 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   db84a:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   db84c:	2001      	movs	r0, #1
   db84e:	e004      	b.n	db85a <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   db850:	6823      	ldr	r3, [r4, #0]
   db852:	4620      	mov	r0, r4
   db854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   db856:	4798      	blx	r3
   db858:	2000      	movs	r0, #0
    }
    return bound;
}
   db85a:	b00d      	add	sp, #52	; 0x34
   db85c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db85e <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   db85e:	b510      	push	{r4, lr}
   db860:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   db862:	6940      	ldr	r0, [r0, #20]
   db864:	2800      	cmp	r0, #0
   db866:	db01      	blt.n	db86c <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   db868:	f7ff fbea 	bl	db040 <sock_close>
    }

    _sock = -1;
   db86c:	f04f 33ff 	mov.w	r3, #4294967295
   db870:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   db872:	2300      	movs	r3, #0
   db874:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   db876:	8723      	strh	r3, [r4, #56]	; 0x38
   db878:	bd10      	pop	{r4, pc}

000db87a <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   db87a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   db87c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   db87e:	4605      	mov	r5, r0
   db880:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   db882:	b113      	cbz	r3, db88a <_ZN3UDP5writeEPKhj+0x10>
   db884:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   db886:	1a24      	subs	r4, r4, r0
   db888:	e000      	b.n	db88c <_ZN3UDP5writeEPKhj+0x12>
   db88a:	461c      	mov	r4, r3
   db88c:	4294      	cmp	r4, r2
   db88e:	bf28      	it	cs
   db890:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   db892:	4622      	mov	r2, r4
   db894:	4418      	add	r0, r3
   db896:	f005 fa44 	bl	e0d22 <memcpy>
    _offset += size;
   db89a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   db89c:	4423      	add	r3, r4
   db89e:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   db8a0:	4620      	mov	r0, r4
   db8a2:	bd38      	pop	{r3, r4, r5, pc}

000db8a4 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   db8a4:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   db8a6:	6803      	ldr	r3, [r0, #0]
   db8a8:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   db8aa:	4604      	mov	r4, r0
   db8ac:	460e      	mov	r6, r1
   db8ae:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   db8b0:	4798      	blx	r3
   db8b2:	b188      	cbz	r0, db8d8 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   db8b4:	6823      	ldr	r3, [r4, #0]
   db8b6:	4620      	mov	r0, r4
   db8b8:	691b      	ldr	r3, [r3, #16]
   db8ba:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   db8bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   db8be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db8c0:	4285      	cmp	r5, r0
   db8c2:	bfa8      	it	ge
   db8c4:	4605      	movge	r5, r0
   db8c6:	4419      	add	r1, r3
   db8c8:	462a      	mov	r2, r5
   db8ca:	4630      	mov	r0, r6
   db8cc:	f005 fa29 	bl	e0d22 <memcpy>
        _offset += read;
   db8d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   db8d2:	442b      	add	r3, r5
   db8d4:	86e3      	strh	r3, [r4, #54]	; 0x36
   db8d6:	e001      	b.n	db8dc <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   db8d8:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   db8dc:	4628      	mov	r0, r5
   db8de:	bd70      	pop	{r4, r5, r6, pc}

000db8e0 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   db8e0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   db8e2:	4604      	mov	r4, r0
   db8e4:	4b05      	ldr	r3, [pc, #20]	; (db8fc <_ZN3UDP8remoteIPEv+0x1c>)
   db8e6:	f844 3b04 	str.w	r3, [r4], #4
   db8ea:	f101 0520 	add.w	r5, r1, #32
   db8ee:	4606      	mov	r6, r0
   db8f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db8f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db8f4:	682b      	ldr	r3, [r5, #0]
   db8f6:	7023      	strb	r3, [r4, #0]
   db8f8:	4630      	mov	r0, r6
   db8fa:	bd70      	pop	{r4, r5, r6, pc}
   db8fc:	000e4fac 	.word	0x000e4fac

000db900 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   db900:	b5f0      	push	{r4, r5, r6, r7, lr}
   db902:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   db904:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   db906:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   db908:	6a97      	ldr	r7, [r2, #40]	; 0x28
   db90a:	4a0a      	ldr	r2, [pc, #40]	; (db934 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   db90c:	9202      	str	r2, [sp, #8]
   db90e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   db910:	468e      	mov	lr, r1
   db912:	4606      	mov	r6, r0
   db914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db916:	ac03      	add	r4, sp, #12
   db918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db91a:	682b      	ldr	r3, [r5, #0]
   db91c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   db91e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   db922:	9300      	str	r3, [sp, #0]
   db924:	4662      	mov	r2, ip
   db926:	ab02      	add	r3, sp, #8
   db928:	4671      	mov	r1, lr
   db92a:	4630      	mov	r0, r6
   db92c:	47b8      	blx	r7
    }
   db92e:	b009      	add	sp, #36	; 0x24
   db930:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db932:	bf00      	nop
   db934:	000e4fac 	.word	0x000e4fac

000db938 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   db938:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   db93a:	6803      	ldr	r3, [r0, #0]
   db93c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   db940:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   db942:	4b0d      	ldr	r3, [pc, #52]	; (db978 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   db944:	b089      	sub	sp, #36	; 0x24
   db946:	f100 0620 	add.w	r6, r0, #32
   db94a:	4604      	mov	r4, r0
   db94c:	9302      	str	r3, [sp, #8]
   db94e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   db950:	ad03      	add	r5, sp, #12
   db952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db954:	6833      	ldr	r3, [r6, #0]
   db956:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   db958:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   db95a:	9300      	str	r3, [sp, #0]
   db95c:	4672      	mov	r2, lr
   db95e:	ab02      	add	r3, sp, #8
   db960:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db962:	4620      	mov	r0, r4
   db964:	47b8      	blx	r7
    flush(); // wait for send to complete
   db966:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   db968:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   db96a:	69db      	ldr	r3, [r3, #28]
   db96c:	4620      	mov	r0, r4
   db96e:	4798      	blx	r3
    return result;
}
   db970:	4628      	mov	r0, r5
   db972:	b009      	add	sp, #36	; 0x24
   db974:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db976:	bf00      	nop
   db978:	000e4fac 	.word	0x000e4fac

000db97c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   db97c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   db97e:	7843      	ldrb	r3, [r0, #1]
   db980:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   db982:	b08d      	sub	sp, #52	; 0x34
   db984:	4605      	mov	r5, r0
   db986:	460c      	mov	r4, r1
   db988:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   db98a:	d101      	bne.n	db990 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   db98c:	1d01      	adds	r1, r0, #4
   db98e:	e033      	b.n	db9f8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   db990:	2b0a      	cmp	r3, #10
   db992:	d135      	bne.n	dba00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   db994:	2211      	movs	r2, #17
   db996:	2100      	movs	r1, #0
   db998:	a801      	add	r0, sp, #4
   db99a:	f005 f9cd 	bl	e0d38 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   db99e:	68ab      	ldr	r3, [r5, #8]
   db9a0:	b943      	cbnz	r3, db9b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   db9a2:	68eb      	ldr	r3, [r5, #12]
   db9a4:	b933      	cbnz	r3, db9b4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   db9a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   db9aa:	692e      	ldr	r6, [r5, #16]
   db9ac:	f7ff fa68 	bl	dae80 <inet_htonl>
   db9b0:	4286      	cmp	r6, r0
   db9b2:	d01f      	beq.n	db9f4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   db9b4:	f105 0308 	add.w	r3, r5, #8
   db9b8:	ae01      	add	r6, sp, #4
   db9ba:	f105 0e18 	add.w	lr, r5, #24
   db9be:	6818      	ldr	r0, [r3, #0]
   db9c0:	6859      	ldr	r1, [r3, #4]
   db9c2:	4632      	mov	r2, r6
   db9c4:	c203      	stmia	r2!, {r0, r1}
   db9c6:	3308      	adds	r3, #8
   db9c8:	4573      	cmp	r3, lr
   db9ca:	4616      	mov	r6, r2
   db9cc:	d1f7      	bne.n	db9be <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   db9ce:	2306      	movs	r3, #6
            addr = IPAddress(a);
   db9d0:	a901      	add	r1, sp, #4
   db9d2:	a806      	add	r0, sp, #24
   db9d4:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   db9d6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   db9da:	f001 fa63 	bl	dcea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db9de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   db9e0:	3404      	adds	r4, #4
   db9e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db9e4:	6833      	ldr	r3, [r6, #0]
   db9e6:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   db9e8:	b157      	cbz	r7, dba00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   db9ea:	8868      	ldrh	r0, [r5, #2]
   db9ec:	f7ff fa50 	bl	dae90 <inet_ntohs>
   db9f0:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   db9f2:	e005      	b.n	dba00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   db9f4:	f105 0114 	add.w	r1, r5, #20
   db9f8:	4620      	mov	r0, r4
   db9fa:	f001 fa95 	bl	dcf28 <_ZN9IPAddressaSEPKh>
   db9fe:	e7f3      	b.n	db9e8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   dba00:	b00d      	add	sp, #52	; 0x34
   dba02:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dba04 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   dba04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dba08:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   dba0a:	ab0e      	add	r3, sp, #56	; 0x38
   dba0c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   dba0e:	4606      	mov	r6, r0
   dba10:	4617      	mov	r7, r2
   dba12:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   dba14:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   dba18:	462a      	mov	r2, r5
   dba1a:	4629      	mov	r1, r5
   dba1c:	f7ff f8f0 	bl	dac00 <netdb_getaddrinfo>
   dba20:	2800      	cmp	r0, #0
   dba22:	db1f      	blt.n	dba64 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   dba24:	9b01      	ldr	r3, [sp, #4]
   dba26:	b1fb      	cbz	r3, dba68 <_ZN3UDP11beginPacketEPKct+0x64>
   dba28:	695b      	ldr	r3, [r3, #20]
   dba2a:	b1eb      	cbz	r3, dba68 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   dba2c:	a802      	add	r0, sp, #8
   dba2e:	f001 fa2b 	bl	dce88 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   dba32:	9b01      	ldr	r3, [sp, #4]
   dba34:	462a      	mov	r2, r5
   dba36:	6958      	ldr	r0, [r3, #20]
   dba38:	a902      	add	r1, sp, #8
   dba3a:	f7ff ff9f 	bl	db97c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   dba3e:	a802      	add	r0, sp, #8
   dba40:	f001 fa42 	bl	dcec8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   dba44:	b180      	cbz	r0, dba68 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   dba46:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dba48:	ad03      	add	r5, sp, #12
   dba4a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   dba4e:	4b0b      	ldr	r3, [pc, #44]	; (dba7c <_ZN3UDP11beginPacketEPKct+0x78>)
   dba50:	9308      	str	r3, [sp, #32]
   dba52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dba54:	ac09      	add	r4, sp, #36	; 0x24
   dba56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dba58:	682b      	ldr	r3, [r5, #0]
   dba5a:	7023      	strb	r3, [r4, #0]
   dba5c:	463a      	mov	r2, r7
   dba5e:	a908      	add	r1, sp, #32
   dba60:	4630      	mov	r0, r6
   dba62:	47c0      	blx	r8
   dba64:	4604      	mov	r4, r0
   dba66:	e001      	b.n	dba6c <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   dba68:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   dba6c:	9801      	ldr	r0, [sp, #4]
   dba6e:	f7ff f8bf 	bl	dabf0 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   dba72:	4620      	mov	r0, r4
   dba74:	b00e      	add	sp, #56	; 0x38
   dba76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dba7a:	bf00      	nop
   dba7c:	000e4fac 	.word	0x000e4fac

000dba80 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   dba80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   dba84:	f8d0 8014 	ldr.w	r8, [r0, #20]
   dba88:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   dba8c:	b08c      	sub	sp, #48	; 0x30
   dba8e:	4605      	mov	r5, r0
   dba90:	460c      	mov	r4, r1
   dba92:	4617      	mov	r7, r2
   dba94:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   dba96:	db00      	blt.n	dba9a <_ZN3UDP13receivePacketEPhjm+0x1a>
   dba98:	b911      	cbnz	r1, dbaa0 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   dba9a:	f04f 30ff 	mov.w	r0, #4294967295
   dba9e:	e035      	b.n	dbb0c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   dbaa0:	f04f 0a1c 	mov.w	sl, #28
   dbaa4:	ae05      	add	r6, sp, #20
   dbaa6:	4652      	mov	r2, sl
   dbaa8:	2100      	movs	r1, #0
   dbaaa:	4630      	mov	r0, r6
   dbaac:	f005 f944 	bl	e0d38 <memset>
        socklen_t slen = sizeof(saddr);
   dbab0:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   dbab4:	f1b9 0f00 	cmp.w	r9, #0
   dbab8:	d014      	beq.n	dbae4 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   dbaba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dbabe:	fbb9 f1f2 	udiv	r1, r9, r2
   dbac2:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   dbac4:	fb02 9111 	mls	r1, r2, r1, r9
   dbac8:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   dbaca:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   dbacc:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   dbace:	9300      	str	r3, [sp, #0]
   dbad0:	f241 0206 	movw	r2, #4102	; 0x1006
   dbad4:	ab03      	add	r3, sp, #12
   dbad6:	f640 71ff 	movw	r1, #4095	; 0xfff
   dbada:	4640      	mov	r0, r8
   dbadc:	f7ff faa8 	bl	db030 <sock_setsockopt>
            if (ret) {
   dbae0:	b108      	cbz	r0, dbae6 <_ZN3UDP13receivePacketEPhjm+0x66>
   dbae2:	e013      	b.n	dbb0c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   dbae4:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   dbae6:	ab02      	add	r3, sp, #8
   dbae8:	9301      	str	r3, [sp, #4]
   dbaea:	4621      	mov	r1, r4
   dbaec:	4603      	mov	r3, r0
   dbaee:	9600      	str	r6, [sp, #0]
   dbaf0:	463a      	mov	r2, r7
   dbaf2:	6968      	ldr	r0, [r5, #20]
   dbaf4:	f7ff fabc 	bl	db070 <sock_recvfrom>
        if (ret >= 0) {
   dbaf8:	1e04      	subs	r4, r0, #0
   dbafa:	db06      	blt.n	dbb0a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   dbafc:	f105 0234 	add.w	r2, r5, #52	; 0x34
   dbb00:	f105 011c 	add.w	r1, r5, #28
   dbb04:	4630      	mov	r0, r6
   dbb06:	f7ff ff39 	bl	db97c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   dbb0a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   dbb0c:	b00c      	add	sp, #48	; 0x30
   dbb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dbb12 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   dbb12:	b538      	push	{r3, r4, r5, lr}
   dbb14:	4605      	mov	r5, r0
   dbb16:	4614      	mov	r4, r2
   dbb18:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   dbb1a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   dbb1c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   dbb1e:	d111      	bne.n	dbb44 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   dbb20:	231c      	movs	r3, #28
   dbb22:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   dbb24:	230a      	movs	r3, #10
   dbb26:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   dbb28:	f7ff f9ba 	bl	daea0 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dbb2c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   dbb2e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dbb32:	1d2b      	adds	r3, r5, #4
   dbb34:	3514      	adds	r5, #20
   dbb36:	f853 2b04 	ldr.w	r2, [r3], #4
   dbb3a:	f844 2b04 	str.w	r2, [r4], #4
   dbb3e:	42ab      	cmp	r3, r5
   dbb40:	d1f9      	bne.n	dbb36 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   dbb42:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   dbb44:	2b04      	cmp	r3, #4
   dbb46:	d10a      	bne.n	dbb5e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   dbb48:	2310      	movs	r3, #16
   dbb4a:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   dbb4c:	2302      	movs	r3, #2
   dbb4e:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   dbb50:	f7ff f9a6 	bl	daea0 <inet_htons>
   dbb54:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   dbb56:	6868      	ldr	r0, [r5, #4]
   dbb58:	f7ff f992 	bl	dae80 <inet_htonl>
   dbb5c:	6060      	str	r0, [r4, #4]
   dbb5e:	bd38      	pop	{r3, r4, r5, pc}

000dbb60 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   dbb60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dbb64:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   dbb66:	ac03      	add	r4, sp, #12
   dbb68:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   dbb6a:	4699      	mov	r9, r3
   dbb6c:	4606      	mov	r6, r0
   dbb6e:	460f      	mov	r7, r1
   dbb70:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   dbb72:	2100      	movs	r1, #0
   dbb74:	462a      	mov	r2, r5
   dbb76:	4620      	mov	r0, r4
   dbb78:	f005 f8de 	bl	e0d38 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   dbb7c:	4622      	mov	r2, r4
   dbb7e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   dbb82:	4648      	mov	r0, r9
   dbb84:	f7ff ffc5 	bl	dbb12 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   dbb88:	f89d 300d 	ldrb.w	r3, [sp, #13]
   dbb8c:	b143      	cbz	r3, dbba0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   dbb8e:	e88d 0030 	stmia.w	sp, {r4, r5}
   dbb92:	2300      	movs	r3, #0
   dbb94:	4642      	mov	r2, r8
   dbb96:	4639      	mov	r1, r7
   dbb98:	6970      	ldr	r0, [r6, #20]
   dbb9a:	f7ff fa79 	bl	db090 <sock_sendto>
   dbb9e:	e001      	b.n	dbba4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   dbba0:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   dbba4:	b00b      	add	sp, #44	; 0x2c
   dbba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000dbbac <_ZN3UDPC1Ev>:
    return -1;
}

} // anonymous

UDP::UDP()
   dbbac:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   dbbae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dbbb2:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   dbbb4:	4b0b      	ldr	r3, [pc, #44]	; (dbbe4 <_ZN3UDPC1Ev+0x38>)
   dbbb6:	f103 0208 	add.w	r2, r3, #8
   dbbba:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dbbbc:	2500      	movs	r5, #0
   dbbbe:	6103      	str	r3, [r0, #16]
   dbbc0:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   dbbc4:	4604      	mov	r4, r0
   dbbc6:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   dbbc8:	6002      	str	r2, [r0, #0]
   dbbca:	6143      	str	r3, [r0, #20]
   dbbcc:	301c      	adds	r0, #28
   dbbce:	f001 f95b 	bl	dce88 <_ZN9IPAddressC1Ev>
   dbbd2:	f44f 7300 	mov.w	r3, #512	; 0x200
   dbbd6:	86e5      	strh	r5, [r4, #54]	; 0x36
   dbbd8:	8725      	strh	r5, [r4, #56]	; 0x38
   dbbda:	63e5      	str	r5, [r4, #60]	; 0x3c
   dbbdc:	6423      	str	r3, [r4, #64]	; 0x40
   dbbde:	6465      	str	r5, [r4, #68]	; 0x44
}
   dbbe0:	4620      	mov	r0, r4
   dbbe2:	bd38      	pop	{r3, r4, r5, pc}
   dbbe4:	000e4e0c 	.word	0x000e4e0c

000dbbe8 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   dbbe8:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   dbbea:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   dbbee:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   dbbf0:	b123      	cbz	r3, dbbfc <_ZN3UDP13releaseBufferEv+0x14>
   dbbf2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   dbbf4:	b110      	cbz	r0, dbbfc <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   dbbf6:	2101      	movs	r1, #1
   dbbf8:	f002 f900 	bl	dddfc <_ZdlPvj>
    }
    _buffer = NULL;
   dbbfc:	2300      	movs	r3, #0
   dbbfe:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   dbc00:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   dbc04:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dbc06:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   dbc08:	8723      	strh	r3, [r4, #56]	; 0x38
   dbc0a:	bd10      	pop	{r4, pc}

000dbc0c <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   dbc0c:	b570      	push	{r4, r5, r6, lr}
   dbc0e:	4604      	mov	r4, r0
   dbc10:	4616      	mov	r6, r2
   dbc12:	460d      	mov	r5, r1
    releaseBuffer();
   dbc14:	f7ff ffe8 	bl	dbbe8 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   dbc18:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   dbc1a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   dbc1c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   dbc1e:	b93e      	cbnz	r6, dbc30 <_ZN3UDP9setBufferEjPh+0x24>
   dbc20:	b135      	cbz	r5, dbc30 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   dbc22:	4628      	mov	r0, r5
   dbc24:	f7f8 fa3b 	bl	d409e <_Znaj>
        _buffer_allocated = true;
   dbc28:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   dbc2a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   dbc2c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   dbc30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dbc32:	b103      	cbz	r3, dbc36 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   dbc34:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   dbc36:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   dbc38:	3000      	adds	r0, #0
   dbc3a:	bf18      	it	ne
   dbc3c:	2001      	movne	r0, #1
   dbc3e:	bd70      	pop	{r4, r5, r6, pc}

000dbc40 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   dbc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dbc42:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   dbc44:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   dbc46:	4605      	mov	r5, r0
   dbc48:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   dbc4a:	b91a      	cbnz	r2, dbc54 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   dbc4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   dbc4e:	b109      	cbz	r1, dbc54 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   dbc50:	f7ff ffdc 	bl	dbc0c <_ZN3UDP9setBufferEjPh>
   dbc54:	3404      	adds	r4, #4
   dbc56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dbc58:	f105 0620 	add.w	r6, r5, #32
   dbc5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   dbc5e:	6823      	ldr	r3, [r4, #0]
   dbc60:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dbc62:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   dbc64:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dbc66:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   dbc68:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   dbc6a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   dbc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dbc6e <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   dbc6e:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   dbc70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   dbc72:	4604      	mov	r4, r0
   dbc74:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   dbc76:	b91a      	cbnz	r2, dbc80 <_ZN3UDP11parsePacketEm+0x12>
   dbc78:	6c01      	ldr	r1, [r0, #64]	; 0x40
   dbc7a:	b109      	cbz	r1, dbc80 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   dbc7c:	f7ff ffc6 	bl	dbc0c <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   dbc80:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dbc82:	2200      	movs	r2, #0
   dbc84:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   dbc86:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   dbc88:	b149      	cbz	r1, dbc9e <_ZN3UDP11parsePacketEm+0x30>
   dbc8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   dbc8c:	b13a      	cbz	r2, dbc9e <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   dbc8e:	6823      	ldr	r3, [r4, #0]
   dbc90:	4620      	mov	r0, r4
   dbc92:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   dbc94:	4633      	mov	r3, r6
   dbc96:	47a8      	blx	r5
        if (result > 0) {
   dbc98:	2800      	cmp	r0, #0
            _total = result;
   dbc9a:	bfc8      	it	gt
   dbc9c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   dbc9e:	6823      	ldr	r3, [r4, #0]
   dbca0:	4620      	mov	r0, r4
   dbca2:	691b      	ldr	r3, [r3, #16]
}
   dbca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   dbca8:	4718      	bx	r3
	...

000dbcac <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   dbcac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbcb0:	ec59 8b10 	vmov	r8, r9, d0
   dbcb4:	4607      	mov	r7, r0
   dbcb6:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   dbcb8:	2200      	movs	r2, #0
   dbcba:	2300      	movs	r3, #0
   dbcbc:	ee10 0a10 	vmov	r0, s0
   dbcc0:	4649      	mov	r1, r9
   dbcc2:	f004 fc47 	bl	e0554 <__aeabi_dcmplt>
   dbcc6:	b128      	cbz	r0, dbcd4 <_Z4dtoadhPc+0x28>
        val = -val;
   dbcc8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dbccc:	4699      	mov	r9, r3
        *sout++ = '-';
   dbcce:	232d      	movs	r3, #45	; 0x2d
   dbcd0:	7033      	strb	r3, [r6, #0]
   dbcd2:	3601      	adds	r6, #1
   dbcd4:	2300      	movs	r3, #0
    }
    long scale = 1;
   dbcd6:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   dbcd8:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   dbcda:	b2d9      	uxtb	r1, r3
   dbcdc:	428f      	cmp	r7, r1
   dbcde:	d902      	bls.n	dbce6 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   dbce0:	4354      	muls	r4, r2
   dbce2:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   dbce4:	e7f9      	b.n	dbcda <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   dbce6:	4620      	mov	r0, r4
   dbce8:	f004 f95c 	bl	dffa4 <__aeabi_i2d>
   dbcec:	4642      	mov	r2, r8
   dbcee:	464b      	mov	r3, r9
   dbcf0:	f004 f9be 	bl	e0070 <__aeabi_dmul>
   dbcf4:	4682      	mov	sl, r0
   dbcf6:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   dbcf8:	f004 fd1a 	bl	e0730 <__aeabi_d2ulz>
   dbcfc:	4680      	mov	r8, r0
   dbcfe:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   dbd00:	f004 f980 	bl	e0004 <__aeabi_ul2d>
   dbd04:	4602      	mov	r2, r0
   dbd06:	460b      	mov	r3, r1
   dbd08:	4650      	mov	r0, sl
   dbd0a:	4659      	mov	r1, fp
   dbd0c:	f003 fffc 	bl	dfd08 <__aeabi_dsub>
   dbd10:	2200      	movs	r2, #0
   dbd12:	4b17      	ldr	r3, [pc, #92]	; (dbd70 <_Z4dtoadhPc+0xc4>)
   dbd14:	f004 fc32 	bl	e057c <__aeabi_dcmpge>
   dbd18:	b118      	cbz	r0, dbd22 <_Z4dtoadhPc+0x76>
        fixed++;
   dbd1a:	f118 0801 	adds.w	r8, r8, #1
   dbd1e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   dbd22:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   dbd24:	4622      	mov	r2, r4
   dbd26:	462b      	mov	r3, r5
   dbd28:	4640      	mov	r0, r8
   dbd2a:	4649      	mov	r1, r9
   dbd2c:	f004 fce8 	bl	e0700 <__aeabi_uldivmod>
   dbd30:	2301      	movs	r3, #1
   dbd32:	220a      	movs	r2, #10
   dbd34:	4631      	mov	r1, r6
   dbd36:	f7ff fcb8 	bl	db6aa <ultoa>
    if (prec) {
   dbd3a:	b1af      	cbz	r7, dbd68 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   dbd3c:	4630      	mov	r0, r6
   dbd3e:	f005 ffc9 	bl	e1cd4 <strlen>
        *sout++ = '.';
   dbd42:	232e      	movs	r3, #46	; 0x2e
   dbd44:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   dbd46:	3001      	adds	r0, #1
   dbd48:	4406      	add	r6, r0
   dbd4a:	4622      	mov	r2, r4
   dbd4c:	462b      	mov	r3, r5
   dbd4e:	4640      	mov	r0, r8
   dbd50:	4649      	mov	r1, r9
   dbd52:	f004 fcd5 	bl	e0700 <__aeabi_uldivmod>
   dbd56:	463b      	mov	r3, r7
   dbd58:	4610      	mov	r0, r2
   dbd5a:	4631      	mov	r1, r6
   dbd5c:	220a      	movs	r2, #10
    }
}
   dbd5e:	b001      	add	sp, #4
   dbd60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   dbd64:	f7ff bca1 	b.w	db6aa <ultoa>
    }
}
   dbd68:	b001      	add	sp, #4
   dbd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbd6e:	bf00      	nop
   dbd70:	3fe00000 	.word	0x3fe00000

000dbd74 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dbd74:	b510      	push	{r4, lr}
   dbd76:	4604      	mov	r4, r0
{
	free(buffer);
   dbd78:	6800      	ldr	r0, [r0, #0]
   dbd7a:	f7ff facf 	bl	db31c <free>
}
   dbd7e:	4620      	mov	r0, r4
   dbd80:	bd10      	pop	{r4, pc}

000dbd82 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dbd82:	b510      	push	{r4, lr}
   dbd84:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dbd86:	6800      	ldr	r0, [r0, #0]
   dbd88:	b108      	cbz	r0, dbd8e <_ZN6String10invalidateEv+0xc>
   dbd8a:	f7ff fac7 	bl	db31c <free>
	buffer = NULL;
   dbd8e:	2300      	movs	r3, #0
   dbd90:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   dbd92:	60a3      	str	r3, [r4, #8]
   dbd94:	6063      	str	r3, [r4, #4]
   dbd96:	bd10      	pop	{r4, pc}

000dbd98 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dbd98:	b538      	push	{r3, r4, r5, lr}
   dbd9a:	4604      	mov	r4, r0
   dbd9c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dbd9e:	6800      	ldr	r0, [r0, #0]
   dbda0:	3101      	adds	r1, #1
   dbda2:	f7ff fac3 	bl	db32c <realloc>
	if (newbuffer) {
   dbda6:	b110      	cbz	r0, dbdae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dbda8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   dbdac:	2001      	movs	r0, #1
	}
	return 0;
}
   dbdae:	bd38      	pop	{r3, r4, r5, pc}

000dbdb0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dbdb0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dbdb2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dbdb4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dbdb6:	b113      	cbz	r3, dbdbe <_ZN6String7reserveEj+0xe>
   dbdb8:	6843      	ldr	r3, [r0, #4]
   dbdba:	428b      	cmp	r3, r1
   dbdbc:	d207      	bcs.n	dbdce <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   dbdbe:	4620      	mov	r0, r4
   dbdc0:	f7ff ffea 	bl	dbd98 <_ZN6String12changeBufferEj>
   dbdc4:	b120      	cbz	r0, dbdd0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   dbdc6:	68a3      	ldr	r3, [r4, #8]
   dbdc8:	b90b      	cbnz	r3, dbdce <_ZN6String7reserveEj+0x1e>
   dbdca:	6822      	ldr	r2, [r4, #0]
   dbdcc:	7013      	strb	r3, [r2, #0]
   dbdce:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   dbdd0:	bd10      	pop	{r4, pc}

000dbdd2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dbdd2:	b570      	push	{r4, r5, r6, lr}
   dbdd4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   dbdd6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dbdd8:	4604      	mov	r4, r0
   dbdda:	4615      	mov	r5, r2
	if (!reserve(length)) {
   dbddc:	f7ff ffe8 	bl	dbdb0 <_ZN6String7reserveEj>
   dbde0:	b918      	cbnz	r0, dbdea <_ZN6String4copyEPKcj+0x18>
		invalidate();
   dbde2:	4620      	mov	r0, r4
   dbde4:	f7ff ffcd 	bl	dbd82 <_ZN6String10invalidateEv>
		return *this;
   dbde8:	e009      	b.n	dbdfe <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   dbdea:	462a      	mov	r2, r5
   dbdec:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   dbdee:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   dbdf0:	6820      	ldr	r0, [r4, #0]
   dbdf2:	f004 ff96 	bl	e0d22 <memcpy>
	buffer[len] = 0;
   dbdf6:	6822      	ldr	r2, [r4, #0]
   dbdf8:	68a3      	ldr	r3, [r4, #8]
   dbdfa:	2100      	movs	r1, #0
   dbdfc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   dbdfe:	4620      	mov	r0, r4
   dbe00:	bd70      	pop	{r4, r5, r6, pc}

000dbe02 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   dbe02:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbe04:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   dbe06:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbe08:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dbe0a:	6043      	str	r3, [r0, #4]
	len = 0;
   dbe0c:	6083      	str	r3, [r0, #8]
	flags = 0;
   dbe0e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   dbe10:	460d      	mov	r5, r1
   dbe12:	b139      	cbz	r1, dbe24 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   dbe14:	4608      	mov	r0, r1
   dbe16:	f005 ff5d 	bl	e1cd4 <strlen>
   dbe1a:	4629      	mov	r1, r5
   dbe1c:	4602      	mov	r2, r0
   dbe1e:	4620      	mov	r0, r4
   dbe20:	f7ff ffd7 	bl	dbdd2 <_ZN6String4copyEPKcj>
}
   dbe24:	4620      	mov	r0, r4
   dbe26:	bd38      	pop	{r3, r4, r5, pc}

000dbe28 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dbe28:	b538      	push	{r3, r4, r5, lr}
   dbe2a:	4605      	mov	r5, r0
	if (buffer) {
   dbe2c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dbe2e:	460c      	mov	r4, r1
	if (buffer) {
   dbe30:	b160      	cbz	r0, dbe4c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   dbe32:	686a      	ldr	r2, [r5, #4]
   dbe34:	688b      	ldr	r3, [r1, #8]
   dbe36:	429a      	cmp	r2, r3
   dbe38:	d306      	bcc.n	dbe48 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   dbe3a:	6809      	ldr	r1, [r1, #0]
   dbe3c:	f005 fa12 	bl	e1264 <strcpy>
			len = rhs.len;
   dbe40:	68a3      	ldr	r3, [r4, #8]
   dbe42:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dbe44:	2300      	movs	r3, #0
   dbe46:	e00a      	b.n	dbe5e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   dbe48:	f7ff fa68 	bl	db31c <free>
		}
	}
	buffer = rhs.buffer;
   dbe4c:	6823      	ldr	r3, [r4, #0]
   dbe4e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   dbe50:	6863      	ldr	r3, [r4, #4]
   dbe52:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   dbe54:	68a3      	ldr	r3, [r4, #8]
   dbe56:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   dbe58:	2300      	movs	r3, #0
   dbe5a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   dbe5c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   dbe5e:	60a3      	str	r3, [r4, #8]
   dbe60:	bd38      	pop	{r3, r4, r5, pc}

000dbe62 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   dbe62:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   dbe64:	b510      	push	{r4, lr}
   dbe66:	460b      	mov	r3, r1
   dbe68:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   dbe6a:	d007      	beq.n	dbe7c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   dbe6c:	6809      	ldr	r1, [r1, #0]
   dbe6e:	b119      	cbz	r1, dbe78 <_ZN6StringaSERKS_+0x16>
   dbe70:	689a      	ldr	r2, [r3, #8]
   dbe72:	f7ff ffae 	bl	dbdd2 <_ZN6String4copyEPKcj>
   dbe76:	e001      	b.n	dbe7c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   dbe78:	f7ff ff83 	bl	dbd82 <_ZN6String10invalidateEv>

	return *this;
}
   dbe7c:	4620      	mov	r0, r4
   dbe7e:	bd10      	pop	{r4, pc}

000dbe80 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   dbe80:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbe82:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   dbe84:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbe86:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dbe88:	6043      	str	r3, [r0, #4]
	len = 0;
   dbe8a:	6083      	str	r3, [r0, #8]
	flags = 0;
   dbe8c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   dbe8e:	f7ff ffe8 	bl	dbe62 <_ZN6StringaSERKS_>
}
   dbe92:	4620      	mov	r0, r4
   dbe94:	bd10      	pop	{r4, pc}

000dbe96 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   dbe96:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   dbe98:	b510      	push	{r4, lr}
   dbe9a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   dbe9c:	d001      	beq.n	dbea2 <_ZN6StringaSEOS_+0xc>
   dbe9e:	f7ff ffc3 	bl	dbe28 <_ZN6String4moveERS_>
	return *this;
}
   dbea2:	4620      	mov	r0, r4
   dbea4:	bd10      	pop	{r4, pc}

000dbea6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   dbea6:	b538      	push	{r3, r4, r5, lr}
   dbea8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   dbeaa:	460c      	mov	r4, r1
   dbeac:	b141      	cbz	r1, dbec0 <_ZN6StringaSEPKc+0x1a>
   dbeae:	4608      	mov	r0, r1
   dbeb0:	f005 ff10 	bl	e1cd4 <strlen>
   dbeb4:	4621      	mov	r1, r4
   dbeb6:	4602      	mov	r2, r0
   dbeb8:	4628      	mov	r0, r5
   dbeba:	f7ff ff8a 	bl	dbdd2 <_ZN6String4copyEPKcj>
   dbebe:	e001      	b.n	dbec4 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   dbec0:	f7ff ff5f 	bl	dbd82 <_ZN6String10invalidateEv>

	return *this;
}
   dbec4:	4628      	mov	r0, r5
   dbec6:	bd38      	pop	{r3, r4, r5, pc}

000dbec8 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   dbec8:	b513      	push	{r0, r1, r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbeca:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
   dbecc:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbed0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dbed2:	6043      	str	r3, [r0, #4]
	len = 0;
   dbed4:	6083      	str	r3, [r0, #8]
	flags = 0;
   dbed6:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
   dbed8:	a901      	add	r1, sp, #4
	init();
	move(rval);
}
#endif

String::String(char c)
   dbeda:	4604      	mov	r4, r0
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   dbedc:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   dbee0:	f7ff ffe1 	bl	dbea6 <_ZN6StringaSEPKc>
}
   dbee4:	4620      	mov	r0, r4
   dbee6:	b002      	add	sp, #8
   dbee8:	bd10      	pop	{r4, pc}

000dbeea <_ZN6StringC1Ehh>:

String::String(unsigned char value, unsigned char base)
   dbeea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dbeec:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbeee:	2300      	movs	r3, #0
   dbef0:	6023      	str	r3, [r4, #0]
	capacity = 0;
   dbef2:	6063      	str	r3, [r4, #4]
	len = 0;
   dbef4:	60a3      	str	r3, [r4, #8]
	flags = 0;
   dbef6:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   dbef8:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   dbefa:	a901      	add	r1, sp, #4
   dbefc:	f7ff fc13 	bl	db726 <utoa>
	*this = buf;
   dbf00:	a901      	add	r1, sp, #4
   dbf02:	4620      	mov	r0, r4
   dbf04:	f7ff ffcf 	bl	dbea6 <_ZN6StringaSEPKc>
}
   dbf08:	4620      	mov	r0, r4
   dbf0a:	b004      	add	sp, #16
   dbf0c:	bd10      	pop	{r4, pc}

000dbf0e <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   dbf0e:	b510      	push	{r4, lr}
   dbf10:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbf12:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   dbf14:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbf16:	6023      	str	r3, [r4, #0]
	capacity = 0;
   dbf18:	6063      	str	r3, [r4, #4]
	len = 0;
   dbf1a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   dbf1c:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   dbf1e:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   dbf20:	a901      	add	r1, sp, #4
   dbf22:	f7ff fbea 	bl	db6fa <itoa>
	*this = buf;
   dbf26:	a901      	add	r1, sp, #4
   dbf28:	4620      	mov	r0, r4
   dbf2a:	f7ff ffbc 	bl	dbea6 <_ZN6StringaSEPKc>
}
   dbf2e:	4620      	mov	r0, r4
   dbf30:	b00a      	add	sp, #40	; 0x28
   dbf32:	bd10      	pop	{r4, pc}

000dbf34 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   dbf34:	b510      	push	{r4, lr}
   dbf36:	4604      	mov	r4, r0
   dbf38:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbf3a:	2300      	movs	r3, #0
   dbf3c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   dbf3e:	6063      	str	r3, [r4, #4]
	len = 0;
   dbf40:	60a3      	str	r3, [r4, #8]
	flags = 0;
   dbf42:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   dbf44:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
   dbf46:	2301      	movs	r3, #1
   dbf48:	a901      	add	r1, sp, #4
   dbf4a:	f7ff fbae 	bl	db6aa <ultoa>
	*this = buf;
   dbf4e:	a901      	add	r1, sp, #4
   dbf50:	4620      	mov	r0, r4
   dbf52:	f7ff ffa8 	bl	dbea6 <_ZN6StringaSEPKc>
}
   dbf56:	4620      	mov	r0, r4
   dbf58:	b00a      	add	sp, #40	; 0x28
   dbf5a:	bd10      	pop	{r4, pc}

000dbf5c <_ZN6StringC1Efi>:

String::String(float value, int decimalPlaces)
   dbf5c:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbf5e:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   dbf60:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dbf62:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dbf64:	6043      	str	r3, [r0, #4]
	len = 0;
   dbf66:	6083      	str	r3, [r0, #8]
	flags = 0;
   dbf68:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   dbf6a:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   dbf6c:	ee10 0a10 	vmov	r0, s0
   dbf70:	b2cd      	uxtb	r5, r1
   dbf72:	f004 f829 	bl	dffc8 <__aeabi_f2d>
   dbf76:	ec41 0b10 	vmov	d0, r0, r1
   dbf7a:	a901      	add	r1, sp, #4
   dbf7c:	4628      	mov	r0, r5
   dbf7e:	f7ff fe95 	bl	dbcac <_Z4dtoadhPc>
        *this = buf;
   dbf82:	a901      	add	r1, sp, #4
   dbf84:	4620      	mov	r0, r4
   dbf86:	f7ff ff8e 	bl	dbea6 <_ZN6StringaSEPKc>
}
   dbf8a:	4620      	mov	r0, r4
   dbf8c:	b00b      	add	sp, #44	; 0x2c
   dbf8e:	bd30      	pop	{r4, r5, pc}

000dbf90 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dbf90:	b570      	push	{r4, r5, r6, lr}
   dbf92:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dbf94:	460e      	mov	r6, r1
   dbf96:	b909      	cbnz	r1, dbf9c <_ZN6String6concatEPKcj+0xc>
   dbf98:	2000      	movs	r0, #0
   dbf9a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dbf9c:	b16a      	cbz	r2, dbfba <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   dbf9e:	6883      	ldr	r3, [r0, #8]
   dbfa0:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   dbfa2:	4629      	mov	r1, r5
   dbfa4:	f7ff ff04 	bl	dbdb0 <_ZN6String7reserveEj>
   dbfa8:	2800      	cmp	r0, #0
   dbfaa:	d0f5      	beq.n	dbf98 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dbfac:	6820      	ldr	r0, [r4, #0]
   dbfae:	68a3      	ldr	r3, [r4, #8]
   dbfb0:	4631      	mov	r1, r6
   dbfb2:	4418      	add	r0, r3
   dbfb4:	f005 f956 	bl	e1264 <strcpy>
	len = newlen;
   dbfb8:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   dbfba:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   dbfbc:	bd70      	pop	{r4, r5, r6, pc}

000dbfbe <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dbfbe:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dbfc0:	688a      	ldr	r2, [r1, #8]
   dbfc2:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dbfc4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dbfc6:	f7ff ffe3 	bl	dbf90 <_ZN6String6concatEPKcj>
   dbfca:	b910      	cbnz	r0, dbfd2 <_ZplRK15StringSumHelperRK6String+0x14>
   dbfcc:	4620      	mov	r0, r4
   dbfce:	f7ff fed8 	bl	dbd82 <_ZN6String10invalidateEv>
	return a;
}
   dbfd2:	4620      	mov	r0, r4
   dbfd4:	bd10      	pop	{r4, pc}

000dbfd6 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dbfd6:	b538      	push	{r3, r4, r5, lr}
   dbfd8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dbfda:	460d      	mov	r5, r1
   dbfdc:	b141      	cbz	r1, dbff0 <_ZplRK15StringSumHelperPKc+0x1a>
   dbfde:	4608      	mov	r0, r1
   dbfe0:	f005 fe78 	bl	e1cd4 <strlen>
   dbfe4:	4629      	mov	r1, r5
   dbfe6:	4602      	mov	r2, r0
   dbfe8:	4620      	mov	r0, r4
   dbfea:	f7ff ffd1 	bl	dbf90 <_ZN6String6concatEPKcj>
   dbfee:	b910      	cbnz	r0, dbff6 <_ZplRK15StringSumHelperPKc+0x20>
   dbff0:	4620      	mov	r0, r4
   dbff2:	f7ff fec6 	bl	dbd82 <_ZN6String10invalidateEv>
	return a;
}
   dbff6:	4620      	mov	r0, r4
   dbff8:	bd38      	pop	{r3, r4, r5, pc}

000dbffa <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   dbffa:	b570      	push	{r4, r5, r6, lr}
   dbffc:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   dbffe:	b19a      	cbz	r2, dc028 <_ZNK6String8getBytesEPhjj+0x2e>
   dc000:	b191      	cbz	r1, dc028 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   dc002:	6885      	ldr	r5, [r0, #8]
   dc004:	429d      	cmp	r5, r3
   dc006:	d802      	bhi.n	dc00e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   dc008:	2300      	movs	r3, #0
   dc00a:	700b      	strb	r3, [r1, #0]
		return;
   dc00c:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   dc00e:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   dc010:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   dc012:	6801      	ldr	r1, [r0, #0]
   dc014:	42ac      	cmp	r4, r5
   dc016:	bf28      	it	cs
   dc018:	462c      	movcs	r4, r5
   dc01a:	4419      	add	r1, r3
   dc01c:	4622      	mov	r2, r4
   dc01e:	4630      	mov	r0, r6
   dc020:	f005 fe75 	bl	e1d0e <strncpy>
	buf[n] = 0;
   dc024:	2300      	movs	r3, #0
   dc026:	5533      	strb	r3, [r6, r4]
   dc028:	bd70      	pop	{r4, r5, r6, pc}
	...

000dc02c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dc02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   dc02e:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dc030:	460f      	mov	r7, r1
   dc032:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dc034:	490c      	ldr	r1, [pc, #48]	; (dc068 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   dc036:	bf88      	it	hi
   dc038:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dc03a:	4614      	mov	r4, r2
   dc03c:	4606      	mov	r6, r0
	if (left > right) {
   dc03e:	bf84      	itt	hi
   dc040:	462c      	movhi	r4, r5
   dc042:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dc044:	f7ff fedd 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   dc048:	68ba      	ldr	r2, [r7, #8]
   dc04a:	4294      	cmp	r4, r2
   dc04c:	d80a      	bhi.n	dc064 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   dc04e:	6839      	ldr	r1, [r7, #0]
   dc050:	4295      	cmp	r5, r2
   dc052:	bf94      	ite	ls
   dc054:	ebc4 0205 	rsbls	r2, r4, r5
   dc058:	ebc4 0202 	rsbhi	r2, r4, r2
   dc05c:	4421      	add	r1, r4
   dc05e:	4630      	mov	r0, r6
   dc060:	f7ff feb7 	bl	dbdd2 <_ZN6String4copyEPKcj>
	return out;
}
   dc064:	4630      	mov	r0, r6
   dc066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc068:	000e4a27 	.word	0x000e4a27

000dc06c <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   dc06c:	b510      	push	{r4, lr}
   dc06e:	4604      	mov	r4, r0
	return substring(left, len);
   dc070:	688b      	ldr	r3, [r1, #8]
   dc072:	f7ff ffdb 	bl	dc02c <_ZNK6String9substringEjj>
}
   dc076:	4620      	mov	r0, r4
   dc078:	bd10      	pop	{r4, pc}

000dc07a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   dc07a:	6800      	ldr	r0, [r0, #0]
   dc07c:	b108      	cbz	r0, dc082 <_ZNK6String5toIntEv+0x8>
   dc07e:	f004 bd32 	b.w	e0ae6 <atol>
	return 0;
}
   dc082:	4770      	bx	lr

000dc084 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dc084:	b40e      	push	{r1, r2, r3}
   dc086:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   dc088:	ac09      	add	r4, sp, #36	; 0x24
   dc08a:	4605      	mov	r5, r0
   dc08c:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   dc090:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dc092:	4623      	mov	r3, r4
   dc094:	463a      	mov	r2, r7
   dc096:	2105      	movs	r1, #5
   dc098:	a802      	add	r0, sp, #8
   dc09a:	f7ff f977 	bl	db38c <vsnprintf>
    va_end(marker);

    String result;
   dc09e:	490c      	ldr	r1, [pc, #48]	; (dc0d0 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dc0a0:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   dc0a2:	4628      	mov	r0, r5
   dc0a4:	f7ff fead 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   dc0a8:	4631      	mov	r1, r6
   dc0aa:	4628      	mov	r0, r5
   dc0ac:	f7ff fe80 	bl	dbdb0 <_ZN6String7reserveEj>
    if (result.buffer) {
   dc0b0:	6828      	ldr	r0, [r5, #0]
   dc0b2:	b130      	cbz	r0, dc0c2 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dc0b4:	4623      	mov	r3, r4
   dc0b6:	463a      	mov	r2, r7
   dc0b8:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   dc0ba:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dc0bc:	f7ff f966 	bl	db38c <vsnprintf>
        va_end(marker);
        result.len = n;
   dc0c0:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   dc0c2:	4628      	mov	r0, r5
   dc0c4:	b004      	add	sp, #16
   dc0c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dc0ca:	b003      	add	sp, #12
   dc0cc:	4770      	bx	lr
   dc0ce:	bf00      	nop
   dc0d0:	000e4a27 	.word	0x000e4a27

000dc0d4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   dc0d4:	b510      	push	{r4, lr}
   dc0d6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   dc0d8:	6800      	ldr	r0, [r0, #0]
   dc0da:	b108      	cbz	r0, dc0e0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   dc0dc:	f7fe feb8 	bl	dae50 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   dc0e0:	4620      	mov	r0, r4
   dc0e2:	bd10      	pop	{r4, pc}

000dc0e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   dc0e4:	680b      	ldr	r3, [r1, #0]
   dc0e6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   dc0e8:	b113      	cbz	r3, dc0f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   dc0ea:	685a      	ldr	r2, [r3, #4]
   dc0ec:	3201      	adds	r2, #1
   dc0ee:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   dc0f0:	4770      	bx	lr
	...

000dc0f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   dc0f4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dc0f6:	4c06      	ldr	r4, [pc, #24]	; (dc110 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   dc0f8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   dc0fa:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dc0fc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   dc0fe:	f7fe fe9f 	bl	dae40 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   dc102:	4620      	mov	r0, r4
   dc104:	4a03      	ldr	r2, [pc, #12]	; (dc114 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   dc106:	4904      	ldr	r1, [pc, #16]	; (dc118 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   dc108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   dc10c:	f001 be68 	b.w	ddde0 <__aeabi_atexit>
   dc110:	2003e1dc 	.word	0x2003e1dc
   dc114:	2003bce8 	.word	0x2003bce8
   dc118:	000dc0d5 	.word	0x000dc0d5

000dc11c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   dc11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc11e:	4606      	mov	r6, r0
   dc120:	460d      	mov	r5, r1
   dc122:	188f      	adds	r7, r1, r2
  size_t n = 0;
   dc124:	2400      	movs	r4, #0
  while (size--) {
   dc126:	42bd      	cmp	r5, r7
   dc128:	d00c      	beq.n	dc144 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   dc12a:	6833      	ldr	r3, [r6, #0]
   dc12c:	f815 1b01 	ldrb.w	r1, [r5], #1
   dc130:	689b      	ldr	r3, [r3, #8]
   dc132:	4630      	mov	r0, r6
   dc134:	4798      	blx	r3
     if (chunk>=0)
   dc136:	2800      	cmp	r0, #0
   dc138:	db01      	blt.n	dc13e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   dc13a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   dc13c:	e7f3      	b.n	dc126 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   dc13e:	2c00      	cmp	r4, #0
   dc140:	bf08      	it	eq
   dc142:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   dc144:	4620      	mov	r0, r4
   dc146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc148 <_ZN5Print5printEPKc>:
   dc148:	b508      	push	{r3, lr}
   dc14a:	f7fb fa8d 	bl	d7668 <_ZN5Print5writeEPKc>
   dc14e:	bd08      	pop	{r3, pc}

000dc150 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   dc150:	6803      	ldr	r3, [r0, #0]
   dc152:	689b      	ldr	r3, [r3, #8]
   dc154:	4718      	bx	r3

000dc156 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   dc156:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dc158:	f7fb fa86 	bl	d7668 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   dc15c:	bd08      	pop	{r3, pc}

000dc15e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   dc15e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   dc160:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dc162:	4605      	mov	r5, r0
  size_t n = print('\r');
   dc164:	f7ff fff4 	bl	dc150 <_ZN5Print5printEc>
  n += print('\n');
   dc168:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   dc16a:	4604      	mov	r4, r0
  n += print('\n');
   dc16c:	4628      	mov	r0, r5
   dc16e:	f7ff ffef 	bl	dc150 <_ZN5Print5printEc>
  return n;
}
   dc172:	4420      	add	r0, r4
   dc174:	bd38      	pop	{r3, r4, r5, pc}

000dc176 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   dc176:	b538      	push	{r3, r4, r5, lr}
   dc178:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dc17a:	f7fb fa75 	bl	d7668 <_ZN5Print5writeEPKc>
   dc17e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   dc180:	4628      	mov	r0, r5
   dc182:	f7ff ffec 	bl	dc15e <_ZN5Print7printlnEv>
  return n;
}
   dc186:	4420      	add	r0, r4
   dc188:	bd38      	pop	{r3, r4, r5, pc}

000dc18a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   dc18a:	f7ff bff4 	b.w	dc176 <_ZN5Print7printlnEPKc>

000dc18e <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dc18e:	b530      	push	{r4, r5, lr}
   dc190:	b08b      	sub	sp, #44	; 0x2c
   dc192:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dc194:	2100      	movs	r1, #0
   dc196:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dc19a:	2a01      	cmp	r2, #1
   dc19c:	bf98      	it	ls
   dc19e:	220a      	movls	r2, #10
   dc1a0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   dc1a4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   dc1a8:	fb05 3312 	mls	r3, r5, r2, r3
   dc1ac:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dc1b0:	2b09      	cmp	r3, #9
   dc1b2:	bf94      	ite	ls
   dc1b4:	3330      	addls	r3, #48	; 0x30
   dc1b6:	3337      	addhi	r3, #55	; 0x37
   dc1b8:	b2db      	uxtb	r3, r3
   dc1ba:	4621      	mov	r1, r4
   dc1bc:	f804 3901 	strb.w	r3, [r4], #-1
   dc1c0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   dc1c2:	2d00      	cmp	r5, #0
   dc1c4:	d1ee      	bne.n	dc1a4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   dc1c6:	f7fb fa4f 	bl	d7668 <_ZN5Print5writeEPKc>
}
   dc1ca:	b00b      	add	sp, #44	; 0x2c
   dc1cc:	bd30      	pop	{r4, r5, pc}
	...

000dc1d0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   dc1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc1d4:	ec57 6b10 	vmov	r6, r7, d0
   dc1d8:	4682      	mov	sl, r0
   dc1da:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   dc1dc:	ee10 2a10 	vmov	r2, s0
   dc1e0:	463b      	mov	r3, r7
   dc1e2:	ee10 0a10 	vmov	r0, s0
   dc1e6:	4639      	mov	r1, r7
   dc1e8:	f004 f9dc 	bl	e05a4 <__aeabi_dcmpun>
   dc1ec:	b108      	cbz	r0, dc1f2 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dc1ee:	494e      	ldr	r1, [pc, #312]	; (dc328 <_ZN5Print10printFloatEdh+0x158>)
   dc1f0:	e012      	b.n	dc218 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   dc1f2:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   dc1f6:	f04f 32ff 	mov.w	r2, #4294967295
   dc1fa:	4b4c      	ldr	r3, [pc, #304]	; (dc32c <_ZN5Print10printFloatEdh+0x15c>)
   dc1fc:	4630      	mov	r0, r6
   dc1fe:	4649      	mov	r1, r9
   dc200:	f004 f9d0 	bl	e05a4 <__aeabi_dcmpun>
   dc204:	b968      	cbnz	r0, dc222 <_ZN5Print10printFloatEdh+0x52>
   dc206:	f04f 32ff 	mov.w	r2, #4294967295
   dc20a:	4b48      	ldr	r3, [pc, #288]	; (dc32c <_ZN5Print10printFloatEdh+0x15c>)
   dc20c:	4630      	mov	r0, r6
   dc20e:	4649      	mov	r1, r9
   dc210:	f004 f9aa 	bl	e0568 <__aeabi_dcmple>
   dc214:	b928      	cbnz	r0, dc222 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dc216:	4946      	ldr	r1, [pc, #280]	; (dc330 <_ZN5Print10printFloatEdh+0x160>)
   dc218:	4650      	mov	r0, sl
   dc21a:	f7fb fa25 	bl	d7668 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   dc21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   dc222:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dc226:	4b43      	ldr	r3, [pc, #268]	; (dc334 <_ZN5Print10printFloatEdh+0x164>)
   dc228:	4630      	mov	r0, r6
   dc22a:	4639      	mov	r1, r7
   dc22c:	f004 f9b0 	bl	e0590 <__aeabi_dcmpgt>
   dc230:	b108      	cbz	r0, dc236 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dc232:	4941      	ldr	r1, [pc, #260]	; (dc338 <_ZN5Print10printFloatEdh+0x168>)
   dc234:	e7f0      	b.n	dc218 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   dc236:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dc23a:	4b40      	ldr	r3, [pc, #256]	; (dc33c <_ZN5Print10printFloatEdh+0x16c>)
   dc23c:	4630      	mov	r0, r6
   dc23e:	4639      	mov	r1, r7
   dc240:	f004 f988 	bl	e0554 <__aeabi_dcmplt>
   dc244:	2800      	cmp	r0, #0
   dc246:	d1f4      	bne.n	dc232 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   dc248:	2200      	movs	r2, #0
   dc24a:	2300      	movs	r3, #0
   dc24c:	4630      	mov	r0, r6
   dc24e:	4639      	mov	r1, r7
   dc250:	f004 f980 	bl	e0554 <__aeabi_dcmplt>
   dc254:	b140      	cbz	r0, dc268 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   dc256:	212d      	movs	r1, #45	; 0x2d
   dc258:	4650      	mov	r0, sl
   dc25a:	f7ff ff79 	bl	dc150 <_ZN5Print5printEc>
     number = -number;
   dc25e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   dc262:	4604      	mov	r4, r0
     number = -number;
   dc264:	461f      	mov	r7, r3
   dc266:	e000      	b.n	dc26a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   dc268:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   dc26a:	4935      	ldr	r1, [pc, #212]	; (dc340 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   dc26c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   dc270:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   dc272:	fa5f f388 	uxtb.w	r3, r8
   dc276:	429d      	cmp	r5, r3
   dc278:	d906      	bls.n	dc288 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   dc27a:	2200      	movs	r2, #0
   dc27c:	4b31      	ldr	r3, [pc, #196]	; (dc344 <_ZN5Print10printFloatEdh+0x174>)
   dc27e:	f004 f821 	bl	e02c4 <__aeabi_ddiv>
   dc282:	f108 0801 	add.w	r8, r8, #1
   dc286:	e7f4      	b.n	dc272 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   dc288:	4632      	mov	r2, r6
   dc28a:	463b      	mov	r3, r7
   dc28c:	f003 fd3e 	bl	dfd0c <__adddf3>
   dc290:	460f      	mov	r7, r1
   dc292:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   dc294:	f004 f9c4 	bl	e0620 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   dc298:	220a      	movs	r2, #10
   dc29a:	4601      	mov	r1, r0
   dc29c:	4680      	mov	r8, r0
   dc29e:	4650      	mov	r0, sl
   dc2a0:	f7ff ff75 	bl	dc18e <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   dc2a4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   dc2a6:	b3e5      	cbz	r5, dc322 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   dc2a8:	4640      	mov	r0, r8
   dc2aa:	f003 fe6b 	bl	dff84 <__aeabi_ui2d>
   dc2ae:	4602      	mov	r2, r0
   dc2b0:	460b      	mov	r3, r1
   dc2b2:	4630      	mov	r0, r6
   dc2b4:	4639      	mov	r1, r7
   dc2b6:	f003 fd27 	bl	dfd08 <__aeabi_dsub>
   dc2ba:	4606      	mov	r6, r0
   dc2bc:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dc2be:	4650      	mov	r0, sl
   dc2c0:	4921      	ldr	r1, [pc, #132]	; (dc348 <_ZN5Print10printFloatEdh+0x178>)
   dc2c2:	f7fb f9d1 	bl	d7668 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   dc2c6:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   dc2c8:	2200      	movs	r2, #0
   dc2ca:	4b1e      	ldr	r3, [pc, #120]	; (dc344 <_ZN5Print10printFloatEdh+0x174>)
   dc2cc:	4630      	mov	r0, r6
   dc2ce:	4639      	mov	r1, r7
   dc2d0:	f003 fece 	bl	e0070 <__aeabi_dmul>
   dc2d4:	4606      	mov	r6, r0
   dc2d6:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   dc2d8:	f004 f97a 	bl	e05d0 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   dc2dc:	f1b0 0900 	subs.w	r9, r0, #0
   dc2e0:	da07      	bge.n	dc2f2 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   dc2e2:	212d      	movs	r1, #45	; 0x2d
   dc2e4:	4650      	mov	r0, sl
   dc2e6:	f7ff ff33 	bl	dc150 <_ZN5Print5printEc>
            val = -n;
   dc2ea:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   dc2ee:	4680      	mov	r8, r0
   dc2f0:	e002      	b.n	dc2f8 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   dc2f2:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   dc2f4:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   dc2f8:	220a      	movs	r2, #10
   dc2fa:	4650      	mov	r0, sl
   dc2fc:	f7ff ff47 	bl	dc18e <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   dc300:	4440      	add	r0, r8
   dc302:	4404      	add	r4, r0
    remainder -= toPrint;
   dc304:	4648      	mov	r0, r9
   dc306:	f003 fe4d 	bl	dffa4 <__aeabi_i2d>
   dc30a:	4602      	mov	r2, r0
   dc30c:	460b      	mov	r3, r1
   dc30e:	4630      	mov	r0, r6
   dc310:	4639      	mov	r1, r7
   dc312:	f003 fcf9 	bl	dfd08 <__aeabi_dsub>
   dc316:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   dc318:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   dc31c:	4606      	mov	r6, r0
   dc31e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   dc320:	d1d2      	bne.n	dc2c8 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   dc322:	4620      	mov	r0, r4
   dc324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc328:	000e4e7c 	.word	0x000e4e7c
   dc32c:	7fefffff 	.word	0x7fefffff
   dc330:	000e4e84 	.word	0x000e4e84
   dc334:	41efffff 	.word	0x41efffff
   dc338:	000e4e80 	.word	0x000e4e80
   dc33c:	c1efffff 	.word	0xc1efffff
   dc340:	3fe00000 	.word	0x3fe00000
   dc344:	40240000 	.word	0x40240000
   dc348:	000e49a2 	.word	0x000e49a2

000dc34c <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   dc34c:	b538      	push	{r3, r4, r5, lr}
   dc34e:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   dc350:	ee10 0a10 	vmov	r0, s0
   dc354:	b2cd      	uxtb	r5, r1
   dc356:	f003 fe37 	bl	dffc8 <__aeabi_f2d>
   dc35a:	ec41 0b10 	vmov	d0, r0, r1
   dc35e:	4629      	mov	r1, r5
   dc360:	4620      	mov	r0, r4
}
   dc362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   dc366:	f7ff bf33 	b.w	dc1d0 <_ZN5Print10printFloatEdh>

000dc36a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   dc36a:	b40c      	push	{r2, r3}
   dc36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc370:	b087      	sub	sp, #28
   dc372:	af00      	add	r7, sp, #0
   dc374:	f107 0438 	add.w	r4, r7, #56	; 0x38
   dc378:	4605      	mov	r5, r0
   dc37a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   dc37e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   dc380:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   dc382:	4623      	mov	r3, r4
   dc384:	464a      	mov	r2, r9
   dc386:	2114      	movs	r1, #20
   dc388:	1d38      	adds	r0, r7, #4
   dc38a:	f7fe ffff 	bl	db38c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   dc38e:	2813      	cmp	r0, #19
   dc390:	d805      	bhi.n	dc39e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dc392:	1d39      	adds	r1, r7, #4
   dc394:	4628      	mov	r0, r5
   dc396:	f7fb f967 	bl	d7668 <_ZN5Print5writeEPKc>
   dc39a:	4604      	mov	r4, r0
   dc39c:	e013      	b.n	dc3c6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   dc39e:	f100 0308 	add.w	r3, r0, #8
   dc3a2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   dc3a6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   dc3a8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   dc3ac:	1c41      	adds	r1, r0, #1
   dc3ae:	4623      	mov	r3, r4
   dc3b0:	464a      	mov	r2, r9
   dc3b2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   dc3b4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   dc3b6:	f7fe ffe9 	bl	db38c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dc3ba:	4669      	mov	r1, sp
   dc3bc:	4628      	mov	r0, r5
   dc3be:	f7fb f953 	bl	d7668 <_ZN5Print5writeEPKc>
   dc3c2:	4604      	mov	r4, r0
   dc3c4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   dc3c6:	b11e      	cbz	r6, dc3d0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   dc3c8:	4628      	mov	r0, r5
   dc3ca:	f7ff fec8 	bl	dc15e <_ZN5Print7printlnEv>
   dc3ce:	4404      	add	r4, r0
    return n;
}
   dc3d0:	4620      	mov	r0, r4
   dc3d2:	371c      	adds	r7, #28
   dc3d4:	46bd      	mov	sp, r7
   dc3d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc3da:	b002      	add	sp, #8
   dc3dc:	4770      	bx	lr
	...

000dc3e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   dc3e0:	4b01      	ldr	r3, [pc, #4]	; (dc3e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dc3e2:	4a02      	ldr	r2, [pc, #8]	; (dc3ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dc3e4:	601a      	str	r2, [r3, #0]
   dc3e6:	4770      	bx	lr
   dc3e8:	2003e1e0 	.word	0x2003e1e0
   dc3ec:	000e4efb 	.word	0x000e4efb

000dc3f0 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dc3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   dc3f2:	4b14      	ldr	r3, [pc, #80]	; (dc444 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dc3f4:	4f14      	ldr	r7, [pc, #80]	; (dc448 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dc3f6:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   dc3f8:	4b14      	ldr	r3, [pc, #80]	; (dc44c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dc3fa:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   dc3fc:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   dc3fe:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   dc400:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   dc402:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dc404:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dc406:	d01b      	beq.n	dc440 <_ZL22Refresh_UnixTime_Cachel+0x50>
   dc408:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   dc40a:	ad01      	add	r5, sp, #4
   dc40c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   dc410:	f004 fb7c 	bl	e0b0c <localtime>
	calendar_time->tm_year += 1900;
   dc414:	6943      	ldr	r3, [r0, #20]
   dc416:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   dc41a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   dc41c:	4604      	mov	r4, r0
   dc41e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dc420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dc422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dc424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dc426:	f8d4 e000 	ldr.w	lr, [r4]
   dc42a:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dc42e:	ad01      	add	r5, sp, #4
   dc430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc432:	4c07      	ldr	r4, [pc, #28]	; (dc450 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   dc434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dc43a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dc43c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   dc440:	b00b      	add	sp, #44	; 0x2c
   dc442:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc444:	2003e214 	.word	0x2003e214
   dc448:	2003e210 	.word	0x2003e210
   dc44c:	2003e20c 	.word	0x2003e20c
   dc450:	2003e1e4 	.word	0x2003e1e4

000dc454 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   dc454:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dc456:	2000      	movs	r0, #0
   dc458:	f7fe ff48 	bl	db2ec <spark_sync_time_pending>
   dc45c:	b128      	cbz	r0, dc46a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dc45e:	f7fe ff2d 	bl	db2bc <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dc462:	f080 0001 	eor.w	r0, r0, #1
   dc466:	b2c0      	uxtb	r0, r0
   dc468:	bd08      	pop	{r3, pc}
   dc46a:	2001      	movs	r0, #1
    }
   dc46c:	bd08      	pop	{r3, pc}
	...

000dc470 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   dc470:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc472:	f7ff ffbd 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   dc476:	4b01      	ldr	r3, [pc, #4]	; (dc47c <_ZN9TimeClass4hourEl+0xc>)
   dc478:	6898      	ldr	r0, [r3, #8]
   dc47a:	bd08      	pop	{r3, pc}
   dc47c:	2003e1e4 	.word	0x2003e1e4

000dc480 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   dc480:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc482:	f7ff ffb5 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   dc486:	4b01      	ldr	r3, [pc, #4]	; (dc48c <_ZN9TimeClass6minuteEl+0xc>)
   dc488:	6858      	ldr	r0, [r3, #4]
   dc48a:	bd08      	pop	{r3, pc}
   dc48c:	2003e1e4 	.word	0x2003e1e4

000dc490 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   dc490:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc492:	f7ff ffad 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   dc496:	4b01      	ldr	r3, [pc, #4]	; (dc49c <_ZN9TimeClass6secondEl+0xc>)
   dc498:	6818      	ldr	r0, [r3, #0]
   dc49a:	bd08      	pop	{r3, pc}
   dc49c:	2003e1e4 	.word	0x2003e1e4

000dc4a0 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   dc4a0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc4a2:	f7ff ffa5 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   dc4a6:	4b01      	ldr	r3, [pc, #4]	; (dc4ac <_ZN9TimeClass3dayEl+0xc>)
   dc4a8:	68d8      	ldr	r0, [r3, #12]
   dc4aa:	bd08      	pop	{r3, pc}
   dc4ac:	2003e1e4 	.word	0x2003e1e4

000dc4b0 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   dc4b0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc4b2:	f7ff ff9d 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   dc4b6:	4b02      	ldr	r3, [pc, #8]	; (dc4c0 <_ZN9TimeClass7weekdayEl+0x10>)
   dc4b8:	6998      	ldr	r0, [r3, #24]
}
   dc4ba:	3001      	adds	r0, #1
   dc4bc:	bd08      	pop	{r3, pc}
   dc4be:	bf00      	nop
   dc4c0:	2003e1e4 	.word	0x2003e1e4

000dc4c4 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   dc4c4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc4c6:	f7ff ff93 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   dc4ca:	4b02      	ldr	r3, [pc, #8]	; (dc4d4 <_ZN9TimeClass5monthEl+0x10>)
   dc4cc:	6918      	ldr	r0, [r3, #16]
}
   dc4ce:	3001      	adds	r0, #1
   dc4d0:	bd08      	pop	{r3, pc}
   dc4d2:	bf00      	nop
   dc4d4:	2003e1e4 	.word	0x2003e1e4

000dc4d8 <_ZN9TimeClass4yearEl>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   dc4d8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dc4da:	f7ff ff89 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_year;
}
   dc4de:	4b01      	ldr	r3, [pc, #4]	; (dc4e4 <_ZN9TimeClass4yearEl+0xc>)
   dc4e0:	6958      	ldr	r0, [r3, #20]
   dc4e2:	bd08      	pop	{r3, pc}
   dc4e4:	2003e1e4 	.word	0x2003e1e4

000dc4e8 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dc4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   dc4ea:	4b0e      	ldr	r3, [pc, #56]	; (dc524 <_ZN9TimeClass7timeStrEl+0x3c>)
   dc4ec:	681b      	ldr	r3, [r3, #0]
   dc4ee:	4419      	add	r1, r3
   dc4f0:	4b0d      	ldr	r3, [pc, #52]	; (dc528 <_ZN9TimeClass7timeStrEl+0x40>)
   dc4f2:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dc4f4:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   dc4f6:	a802      	add	r0, sp, #8
   dc4f8:	4419      	add	r1, r3
   dc4fa:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   dc4fe:	f004 fb05 	bl	e0b0c <localtime>
        char* ascstr = asctime(calendar_time);
   dc502:	f004 faad 	bl	e0a60 <asctime>
   dc506:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   dc508:	f005 fbe4 	bl	e1cd4 <strlen>
        ascstr[len-1] = 0; // remove final newline
   dc50c:	4428      	add	r0, r5
   dc50e:	2300      	movs	r3, #0
   dc510:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   dc514:	4629      	mov	r1, r5
   dc516:	4620      	mov	r0, r4
   dc518:	f7ff fc73 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
}
   dc51c:	4620      	mov	r0, r4
   dc51e:	b003      	add	sp, #12
   dc520:	bd30      	pop	{r4, r5, pc}
   dc522:	bf00      	nop
   dc524:	2003e214 	.word	0x2003e214
   dc528:	2003e20c 	.word	0x2003e20c

000dc52c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dc52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc530:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dc532:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dc534:	4607      	mov	r7, r0
   dc536:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dc538:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dc53a:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dc53c:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dc53e:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dc540:	f005 fbe5 	bl	e1d0e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dc544:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dc546:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dc548:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dc54c:	f005 fbc2 	bl	e1cd4 <strlen>
   dc550:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dc552:	b925      	cbnz	r5, dc55e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   dc554:	4924      	ldr	r1, [pc, #144]	; (dc5e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   dc556:	a803      	add	r0, sp, #12
   dc558:	f004 fe84 	bl	e1264 <strcpy>
   dc55c:	e013      	b.n	dc586 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dc55e:	213c      	movs	r1, #60	; 0x3c
   dc560:	fb95 f2f1 	sdiv	r2, r5, r1
   dc564:	2a00      	cmp	r2, #0
   dc566:	bfb8      	it	lt
   dc568:	4252      	neglt	r2, r2
   dc56a:	fb92 f3f1 	sdiv	r3, r2, r1
   dc56e:	fb01 2213 	mls	r2, r1, r3, r2
   dc572:	9200      	str	r2, [sp, #0]
   dc574:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dc578:	4a1c      	ldr	r2, [pc, #112]	; (dc5ec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   dc57a:	fb95 f3f3 	sdiv	r3, r5, r3
   dc57e:	2110      	movs	r1, #16
   dc580:	a803      	add	r0, sp, #12
   dc582:	f7fe fef3 	bl	db36c <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dc586:	4625      	mov	r5, r4
   dc588:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dc58a:	f108 3aff 	add.w	sl, r8, #4294967295
   dc58e:	45b2      	cmp	sl, r6
   dc590:	d91b      	bls.n	dc5ca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dc592:	782b      	ldrb	r3, [r5, #0]
   dc594:	2b25      	cmp	r3, #37	; 0x25
   dc596:	d116      	bne.n	dc5c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   dc598:	786b      	ldrb	r3, [r5, #1]
   dc59a:	2b7a      	cmp	r3, #122	; 0x7a
   dc59c:	d113      	bne.n	dc5c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   dc59e:	a803      	add	r0, sp, #12
   dc5a0:	f005 fb98 	bl	e1cd4 <strlen>
   dc5a4:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dc5a6:	4430      	add	r0, r6
   dc5a8:	ebc6 020a 	rsb	r2, r6, sl
   dc5ac:	1ca9      	adds	r1, r5, #2
   dc5ae:	4420      	add	r0, r4
   dc5b0:	f004 fbb7 	bl	e0d22 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dc5b4:	4642      	mov	r2, r8
   dc5b6:	a903      	add	r1, sp, #12
   dc5b8:	4628      	mov	r0, r5
   dc5ba:	f004 fbb2 	bl	e0d22 <memcpy>
            len = strlen(format_str);
   dc5be:	4620      	mov	r0, r4
   dc5c0:	f005 fb88 	bl	e1cd4 <strlen>
   dc5c4:	4680      	mov	r8, r0
   dc5c6:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dc5c8:	e7de      	b.n	dc588 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   dc5ca:	464b      	mov	r3, r9
   dc5cc:	4622      	mov	r2, r4
   dc5ce:	2132      	movs	r1, #50	; 0x32
   dc5d0:	a807      	add	r0, sp, #28
   dc5d2:	f004 fecb 	bl	e136c <strftime>
    return String(buf);
   dc5d6:	a907      	add	r1, sp, #28
   dc5d8:	4638      	mov	r0, r7
   dc5da:	f7ff fc12 	bl	dbe02 <_ZN6StringC1EPK19__FlashStringHelper>
}
   dc5de:	4638      	mov	r0, r7
   dc5e0:	b024      	add	sp, #144	; 0x90
   dc5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc5e6:	bf00      	nop
   dc5e8:	000e58dd 	.word	0x000e58dd
   dc5ec:	000e4f61 	.word	0x000e4f61

000dc5f0 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   dc5f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   dc5f2:	4605      	mov	r5, r0
   dc5f4:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   dc5f6:	461c      	mov	r4, r3
   dc5f8:	b913      	cbnz	r3, dc600 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   dc5fa:	4b12      	ldr	r3, [pc, #72]	; (dc644 <_ZN9TimeClass6formatElPKc+0x54>)
   dc5fc:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   dc5fe:	b12c      	cbz	r4, dc60c <_ZN9TimeClass6formatElPKc+0x1c>
   dc600:	4b11      	ldr	r3, [pc, #68]	; (dc648 <_ZN9TimeClass6formatElPKc+0x58>)
   dc602:	4620      	mov	r0, r4
   dc604:	6819      	ldr	r1, [r3, #0]
   dc606:	f004 fe23 	bl	e1250 <strcmp>
   dc60a:	b920      	cbnz	r0, dc616 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   dc60c:	9901      	ldr	r1, [sp, #4]
   dc60e:	4628      	mov	r0, r5
   dc610:	f7ff ff6a 	bl	dc4e8 <_ZN9TimeClass7timeStrEl>
   dc614:	e013      	b.n	dc63e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   dc616:	4f0d      	ldr	r7, [pc, #52]	; (dc64c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   dc618:	9a01      	ldr	r2, [sp, #4]
   dc61a:	683b      	ldr	r3, [r7, #0]
   dc61c:	4e0c      	ldr	r6, [pc, #48]	; (dc650 <_ZN9TimeClass6formatElPKc+0x60>)
   dc61e:	441a      	add	r2, r3
   dc620:	6833      	ldr	r3, [r6, #0]
   dc622:	a802      	add	r0, sp, #8
   dc624:	4413      	add	r3, r2
   dc626:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   dc62a:	f004 fa6f 	bl	e0b0c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dc62e:	683a      	ldr	r2, [r7, #0]
   dc630:	6833      	ldr	r3, [r6, #0]
   dc632:	4601      	mov	r1, r0
   dc634:	4413      	add	r3, r2
   dc636:	4628      	mov	r0, r5
   dc638:	4622      	mov	r2, r4
   dc63a:	f7ff ff77 	bl	dc52c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   dc63e:	4628      	mov	r0, r5
   dc640:	b003      	add	sp, #12
   dc642:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc644:	2003e208 	.word	0x2003e208
   dc648:	2003bbf8 	.word	0x2003bbf8
   dc64c:	2003e214 	.word	0x2003e214
   dc650:	2003e20c 	.word	0x2003e20c

000dc654 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   dc654:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   dc656:	2000      	movs	r0, #0
   dc658:	f7fe fb92 	bl	dad80 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   dc65c:	4604      	mov	r4, r0
   dc65e:	b968      	cbnz	r0, dc67c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dc660:	f7fe fd70 	bl	db144 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dc664:	2801      	cmp	r0, #1
   dc666:	d10b      	bne.n	dc680 <_ZN9TimeClass7isValidEv+0x2c>
   dc668:	4620      	mov	r0, r4
   dc66a:	f7fe fd9b 	bl	db1a4 <system_thread_get_state>
   dc66e:	b938      	cbnz	r0, dc680 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   dc670:	f7ff fef0 	bl	dc454 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dc674:	b930      	cbnz	r0, dc684 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   dc676:	f7fe fe11 	bl	db29c <spark_process>
   dc67a:	e7f9      	b.n	dc670 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   dc67c:	2001      	movs	r0, #1
   dc67e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   dc680:	2000      	movs	r0, #0
   dc682:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   dc684:	f7ff fee6 	bl	dc454 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   dc688:	2000      	movs	r0, #0
   dc68a:	f7fe fb79 	bl	dad80 <HAL_RTC_Time_Is_Valid>
   dc68e:	3000      	adds	r0, #0
   dc690:	bf18      	it	ne
   dc692:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   dc694:	bd10      	pop	{r4, pc}

000dc696 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   dc696:	b508      	push	{r3, lr}
    (void)isValid();
   dc698:	f7ff ffdc 	bl	dc654 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   dc69c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   dc6a0:	f7fe bb66 	b.w	dad70 <HAL_RTC_Get_UnixTime>

000dc6a4 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   dc6a4:	b508      	push	{r3, lr}
	return hour(now());
   dc6a6:	f7ff fff6 	bl	dc696 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dc6aa:	f7ff fea1 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   dc6ae:	4b01      	ldr	r3, [pc, #4]	; (dc6b4 <_ZN9TimeClass4hourEv+0x10>)
   dc6b0:	6898      	ldr	r0, [r3, #8]
   dc6b2:	bd08      	pop	{r3, pc}
   dc6b4:	2003e1e4 	.word	0x2003e1e4

000dc6b8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   dc6b8:	b508      	push	{r3, lr}
	return minute(now());
   dc6ba:	f7ff ffec 	bl	dc696 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dc6be:	f7ff fe97 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   dc6c2:	4b01      	ldr	r3, [pc, #4]	; (dc6c8 <_ZN9TimeClass6minuteEv+0x10>)
   dc6c4:	6858      	ldr	r0, [r3, #4]
   dc6c6:	bd08      	pop	{r3, pc}
   dc6c8:	2003e1e4 	.word	0x2003e1e4

000dc6cc <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   dc6cc:	b508      	push	{r3, lr}
	return second(now());
   dc6ce:	f7ff ffe2 	bl	dc696 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dc6d2:	f7ff fe8d 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   dc6d6:	4b01      	ldr	r3, [pc, #4]	; (dc6dc <_ZN9TimeClass6secondEv+0x10>)
   dc6d8:	6818      	ldr	r0, [r3, #0]
   dc6da:	bd08      	pop	{r3, pc}
   dc6dc:	2003e1e4 	.word	0x2003e1e4

000dc6e0 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   dc6e0:	b508      	push	{r3, lr}
	return day(now());
   dc6e2:	f7ff ffd8 	bl	dc696 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dc6e6:	f7ff fe83 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   dc6ea:	4b01      	ldr	r3, [pc, #4]	; (dc6f0 <_ZN9TimeClass3dayEv+0x10>)
   dc6ec:	68d8      	ldr	r0, [r3, #12]
   dc6ee:	bd08      	pop	{r3, pc}
   dc6f0:	2003e1e4 	.word	0x2003e1e4

000dc6f4 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   dc6f4:	b508      	push	{r3, lr}
	return month(now());
   dc6f6:	f7ff ffce 	bl	dc696 <_ZN9TimeClass3nowEv>
}
   dc6fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   dc6fe:	f7ff bee1 	b.w	dc4c4 <_ZN9TimeClass5monthEl>
	...

000dc704 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   dc704:	b508      	push	{r3, lr}
	return year(now());
   dc706:	f7ff ffc6 	bl	dc696 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dc70a:	f7ff fe71 	bl	dc3f0 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   dc70e:	4b01      	ldr	r3, [pc, #4]	; (dc714 <_ZN9TimeClass4yearEv+0x10>)
   dc710:	6958      	ldr	r0, [r3, #20]
   dc712:	bd08      	pop	{r3, pc}
   dc714:	2003e1e4 	.word	0x2003e1e4

000dc718 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dc718:	4b02      	ldr	r3, [pc, #8]	; (dc724 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dc71a:	681a      	ldr	r2, [r3, #0]
   dc71c:	4b02      	ldr	r3, [pc, #8]	; (dc728 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dc71e:	601a      	str	r2, [r3, #0]
   dc720:	4770      	bx	lr
   dc722:	bf00      	nop
   dc724:	2003bbf8 	.word	0x2003bbf8
   dc728:	2003e208 	.word	0x2003e208

000dc72c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dc72c:	2100      	movs	r1, #0
   dc72e:	f7fe bd19 	b.w	db164 <system_delay_ms>

000dc732 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   dc732:	b510      	push	{r4, lr}
   dc734:	4604      	mov	r4, r0
   dc736:	f7f7 fdd4 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
   dc73a:	4620      	mov	r0, r4
   dc73c:	bd10      	pop	{r4, pc}

000dc73e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   dc73e:	b513      	push	{r0, r1, r4, lr}
   dc740:	460b      	mov	r3, r1
   dc742:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc744:	c803      	ldmia	r0, {r0, r1}
   dc746:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   dc74a:	e893 0003 	ldmia.w	r3, {r0, r1}
   dc74e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   dc752:	e89d 0003 	ldmia.w	sp, {r0, r1}
   dc756:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   dc75a:	b002      	add	sp, #8
   dc75c:	bd10      	pop	{r4, pc}
	...

000dc760 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc760:	4803      	ldr	r0, [pc, #12]	; (dc770 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   dc762:	4a04      	ldr	r2, [pc, #16]	; (dc774 <_GLOBAL__sub_I_RGB+0x14>)
   dc764:	4904      	ldr	r1, [pc, #16]	; (dc778 <_GLOBAL__sub_I_RGB+0x18>)
   dc766:	2300      	movs	r3, #0
   dc768:	6083      	str	r3, [r0, #8]
   dc76a:	f001 bb39 	b.w	ddde0 <__aeabi_atexit>
   dc76e:	bf00      	nop
   dc770:	2003e21c 	.word	0x2003e21c
   dc774:	2003bce8 	.word	0x2003bce8
   dc778:	000dc733 	.word	0x000dc733

000dc77c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   dc77c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dc77e:	4b0c      	ldr	r3, [pc, #48]	; (dc7b0 <serialEventRun+0x34>)
   dc780:	b133      	cbz	r3, dc790 <serialEventRun+0x14>
   dc782:	f000 fc3f 	bl	dd004 <_Z16_fetch_usbserialv>
   dc786:	6803      	ldr	r3, [r0, #0]
   dc788:	691b      	ldr	r3, [r3, #16]
   dc78a:	4798      	blx	r3
   dc78c:	2800      	cmp	r0, #0
   dc78e:	dc09      	bgt.n	dc7a4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   dc790:	4b08      	ldr	r3, [pc, #32]	; (dc7b4 <serialEventRun+0x38>)
   dc792:	b163      	cbz	r3, dc7ae <serialEventRun+0x32>
   dc794:	f000 fd6c 	bl	dd270 <_Z22__fetch_global_Serial1v>
   dc798:	6803      	ldr	r3, [r0, #0]
   dc79a:	691b      	ldr	r3, [r3, #16]
   dc79c:	4798      	blx	r3
   dc79e:	2800      	cmp	r0, #0
   dc7a0:	dc03      	bgt.n	dc7aa <serialEventRun+0x2e>
   dc7a2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   dc7a4:	f3af 8000 	nop.w
   dc7a8:	e7f2      	b.n	dc790 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   dc7aa:	f3af 8000 	nop.w
   dc7ae:	bd08      	pop	{r3, pc}
	...

000dc7b8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   dc7b8:	b508      	push	{r3, lr}
	serialEventRun();
   dc7ba:	f7ff ffdf 	bl	dc77c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dc7be:	f7fe facf 	bl	dad60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dc7c2:	4b01      	ldr	r3, [pc, #4]	; (dc7c8 <_post_loop+0x10>)
   dc7c4:	6018      	str	r0, [r3, #0]
   dc7c6:	bd08      	pop	{r3, pc}
   dc7c8:	2003e608 	.word	0x2003e608

000dc7cc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dc7cc:	4802      	ldr	r0, [pc, #8]	; (dc7d8 <_Z33system_initialize_user_backup_ramv+0xc>)
   dc7ce:	4a03      	ldr	r2, [pc, #12]	; (dc7dc <_Z33system_initialize_user_backup_ramv+0x10>)
   dc7d0:	4903      	ldr	r1, [pc, #12]	; (dc7e0 <_Z33system_initialize_user_backup_ramv+0x14>)
   dc7d2:	1a12      	subs	r2, r2, r0
   dc7d4:	f004 baa5 	b.w	e0d22 <memcpy>
   dc7d8:	2003f400 	.word	0x2003f400
   dc7dc:	2003f404 	.word	0x2003f404
   dc7e0:	000e5af8 	.word	0x000e5af8

000dc7e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dc7e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dc7e6:	2300      	movs	r3, #0
   dc7e8:	9300      	str	r3, [sp, #0]
   dc7ea:	461a      	mov	r2, r3
   dc7ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dc7f0:	f7fe fcf2 	bl	db1d8 <system_ctrl_set_result>
}
   dc7f4:	b003      	add	sp, #12
   dc7f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc7fc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   dc7fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dc7fe:	8843      	ldrh	r3, [r0, #2]
   dc800:	2b0a      	cmp	r3, #10
   dc802:	d008      	beq.n	dc816 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dc804:	2b50      	cmp	r3, #80	; 0x50
   dc806:	d109      	bne.n	dc81c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   dc808:	4b09      	ldr	r3, [pc, #36]	; (dc830 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dc80a:	681b      	ldr	r3, [r3, #0]
   dc80c:	b13b      	cbz	r3, dc81e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   dc80e:	b003      	add	sp, #12
   dc810:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   dc814:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   dc816:	f7ff ffe5 	bl	dc7e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   dc81a:	e006      	b.n	dc82a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dc81c:	2300      	movs	r3, #0
   dc81e:	9300      	str	r3, [sp, #0]
   dc820:	461a      	mov	r2, r3
   dc822:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dc826:	f7fe fcd7 	bl	db1d8 <system_ctrl_set_result>
        break;
    }
}
   dc82a:	b003      	add	sp, #12
   dc82c:	f85d fb04 	ldr.w	pc, [sp], #4
   dc830:	2003e22c 	.word	0x2003e22c

000dc834 <module_user_init_hook>:

void module_user_init_hook()
{
   dc834:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dc836:	4c10      	ldr	r4, [pc, #64]	; (dc878 <module_user_init_hook+0x44>)
   dc838:	4d10      	ldr	r5, [pc, #64]	; (dc87c <module_user_init_hook+0x48>)
   dc83a:	6823      	ldr	r3, [r4, #0]
   dc83c:	42ab      	cmp	r3, r5
   dc83e:	4b10      	ldr	r3, [pc, #64]	; (dc880 <module_user_init_hook+0x4c>)
   dc840:	bf0c      	ite	eq
   dc842:	2201      	moveq	r2, #1
   dc844:	2200      	movne	r2, #0
   dc846:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dc848:	d002      	beq.n	dc850 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   dc84a:	f7ff ffbf 	bl	dc7cc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   dc84e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dc850:	f7fe fa76 	bl	dad40 <HAL_RNG_GetRandomNumber>
   dc854:	4604      	mov	r4, r0
    srand(seed);
   dc856:	f004 fcc5 	bl	e11e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dc85a:	4b0a      	ldr	r3, [pc, #40]	; (dc884 <module_user_init_hook+0x50>)
   dc85c:	b113      	cbz	r3, dc864 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   dc85e:	4620      	mov	r0, r4
   dc860:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dc864:	2100      	movs	r1, #0
   dc866:	4807      	ldr	r0, [pc, #28]	; (dc884 <module_user_init_hook+0x50>)
   dc868:	f7fe fd48 	bl	db2fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dc86c:	2100      	movs	r1, #0
   dc86e:	4806      	ldr	r0, [pc, #24]	; (dc888 <module_user_init_hook+0x54>)
}
   dc870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dc874:	f7fe bca6 	b.w	db1c4 <system_ctrl_set_app_request_handler>
   dc878:	2003f400 	.word	0x2003f400
   dc87c:	9a271c1e 	.word	0x9a271c1e
   dc880:	2003e230 	.word	0x2003e230
   dc884:	00000000 	.word	0x00000000
   dc888:	000dc7fd 	.word	0x000dc7fd

000dc88c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dc88c:	4770      	bx	lr

000dc88e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   dc88e:	2000      	movs	r0, #0
   dc890:	4770      	bx	lr

000dc892 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dc892:	b510      	push	{r4, lr}
   dc894:	2110      	movs	r1, #16
   dc896:	4604      	mov	r4, r0
   dc898:	f001 fab0 	bl	dddfc <_ZdlPvj>
   dc89c:	4620      	mov	r0, r4
   dc89e:	bd10      	pop	{r4, pc}

000dc8a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   dc8a0:	b508      	push	{r3, lr}
      { delete this; }
   dc8a2:	b108      	cbz	r0, dc8a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   dc8a4:	f7ff fff5 	bl	dc892 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dc8a8:	bd08      	pop	{r3, pc}

000dc8aa <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dc8aa:	2200      	movs	r2, #0
   dc8ac:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dc8ae:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dc8b0:	f64f 729c 	movw	r2, #65436	; 0xff9c
   dc8b4:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dc8b6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   dc8ba:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dc8bc:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dc8be:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   dc8c0:	680c      	ldr	r4, [r1, #0]
   dc8c2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dc8c4:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   dc8c6:	bd10      	pop	{r4, pc}

000dc8c8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dc8c8:	b510      	push	{r4, lr}
   dc8ca:	4604      	mov	r4, r0
    free((void*)msg_);
   dc8cc:	6800      	ldr	r0, [r0, #0]
   dc8ce:	f7fe fd25 	bl	db31c <free>
}
   dc8d2:	4620      	mov	r0, r4
   dc8d4:	bd10      	pop	{r4, pc}

000dc8d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   dc8d6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dc8d8:	68c4      	ldr	r4, [r0, #12]
   dc8da:	b1f4      	cbz	r4, dc91a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   dc8dc:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dc8de:	2b02      	cmp	r3, #2
   dc8e0:	d103      	bne.n	dc8ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dc8e2:	f104 000c 	add.w	r0, r4, #12
   dc8e6:	f7ff ffef 	bl	dc8c8 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   dc8ea:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   dc8ec:	b135      	cbz	r5, dc8fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dc8ee:	4628      	mov	r0, r5
   dc8f0:	f7f7 fcf7 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
   dc8f4:	2110      	movs	r1, #16
   dc8f6:	4628      	mov	r0, r5
   dc8f8:	f001 fa80 	bl	dddfc <_ZdlPvj>
   dc8fc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dc8fe:	b135      	cbz	r5, dc90e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dc900:	4628      	mov	r0, r5
   dc902:	f7f7 fcee 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
   dc906:	2110      	movs	r1, #16
   dc908:	4628      	mov	r0, r5
   dc90a:	f001 fa77 	bl	dddfc <_ZdlPvj>
   dc90e:	4620      	mov	r0, r4
   dc910:	2114      	movs	r1, #20
   dc912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc916:	f001 ba71 	b.w	dddfc <_ZdlPvj>
   dc91a:	bd38      	pop	{r3, r4, r5, pc}

000dc91c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   dc91c:	b513      	push	{r0, r1, r4, lr}
   dc91e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dc920:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   dc924:	2300      	movs	r3, #0
   dc926:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dc928:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dc92a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dc92c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dc92e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dc930:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dc932:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dc934:	f7f7 ff36 	bl	d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc938:	4620      	mov	r0, r4
   dc93a:	b002      	add	sp, #8
   dc93c:	bd10      	pop	{r4, pc}

000dc93e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dc93e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dc940:	460c      	mov	r4, r1
   dc942:	ad02      	add	r5, sp, #8
   dc944:	f854 3b04 	ldr.w	r3, [r4], #4
   dc948:	f845 3d08 	str.w	r3, [r5, #-8]!
   dc94c:	4606      	mov	r6, r0
   dc94e:	460f      	mov	r7, r1
   dc950:	a801      	add	r0, sp, #4
   dc952:	4621      	mov	r1, r4
   dc954:	f7ff fbc6 	bl	dc0e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   dc958:	4629      	mov	r1, r5
   dc95a:	4630      	mov	r0, r6
   dc95c:	f7ff ffde 	bl	dc91c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dc960:	a801      	add	r0, sp, #4
   dc962:	f7f7 ff1f 	bl	d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc966:	4620      	mov	r0, r4
   dc968:	f7f7 ff1c 	bl	d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   dc96c:	4638      	mov	r0, r7
   dc96e:	2108      	movs	r1, #8
   dc970:	f001 fa44 	bl	dddfc <_ZdlPvj>
        return p;
    }
   dc974:	4630      	mov	r0, r6
   dc976:	b003      	add	sp, #12
   dc978:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dc97c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dc97c:	b538      	push	{r3, r4, r5, lr}
   dc97e:	2300      	movs	r3, #0
   dc980:	4604      	mov	r4, r0
   dc982:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dc984:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dc986:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dc988:	f7f7 fb87 	bl	d409a <_Znwj>
   dc98c:	b128      	cbz	r0, dc99a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dc98e:	2301      	movs	r3, #1
   dc990:	6043      	str	r3, [r0, #4]
   dc992:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   dc994:	4b02      	ldr	r3, [pc, #8]	; (dc9a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dc996:	6003      	str	r3, [r0, #0]
   dc998:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dc99a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   dc99c:	4620      	mov	r0, r4
   dc99e:	bd38      	pop	{r3, r4, r5, pc}
   dc9a0:	000e4f90 	.word	0x000e4f90

000dc9a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dc9a4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dc9a6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dc9a8:	b90a      	cbnz	r2, dc9ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dc9aa:	f001 fbde 	bl	de16a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc9ae:	68c3      	ldr	r3, [r0, #12]
    }
   dc9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc9b4:	4718      	bx	r3

000dc9b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dc9b6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dc9b8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dc9ba:	f100 0110 	add.w	r1, r0, #16
   dc9be:	f7ff fff1 	bl	dc9a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dc9c2:	bd08      	pop	{r3, pc}

000dc9c4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dc9c4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dc9c6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dc9c8:	b90a      	cbnz	r2, dc9ce <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dc9ca:	f001 fbce 	bl	de16a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc9ce:	68c3      	ldr	r3, [r0, #12]
    }
   dc9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc9d4:	4718      	bx	r3

000dc9d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dc9d6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dc9d8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dc9da:	f100 0110 	add.w	r1, r0, #16
   dc9de:	f7ff fff1 	bl	dc9c4 <_ZNKSt8functionIFvRKbEEclES1_>
   dc9e2:	bd08      	pop	{r3, pc}

000dc9e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dc9e4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dc9e6:	2300      	movs	r3, #0
   dc9e8:	6083      	str	r3, [r0, #8]
   dc9ea:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dc9ec:	4604      	mov	r4, r0
   dc9ee:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dc9f0:	b12b      	cbz	r3, dc9fe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dc9f2:	2202      	movs	r2, #2
   dc9f4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dc9f6:	68eb      	ldr	r3, [r5, #12]
   dc9f8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dc9fa:	68ab      	ldr	r3, [r5, #8]
   dc9fc:	60a3      	str	r3, [r4, #8]
	}
    }
   dc9fe:	4620      	mov	r0, r4
   dca00:	bd38      	pop	{r3, r4, r5, pc}
	...

000dca04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   dca04:	b5f0      	push	{r4, r5, r6, r7, lr}
   dca06:	b089      	sub	sp, #36	; 0x24
   dca08:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dca0a:	4668      	mov	r0, sp
   dca0c:	f7ff ff4d 	bl	dc8aa <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dca10:	2300      	movs	r3, #0
   dca12:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dca16:	f04f 0202 	mov.w	r2, #2
   dca1a:	e8d4 3f4f 	ldrexb	r3, [r4]
   dca1e:	2b00      	cmp	r3, #0
   dca20:	d103      	bne.n	dca2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   dca22:	e8c4 2f41 	strexb	r1, r2, [r4]
   dca26:	2900      	cmp	r1, #0
   dca28:	d1f7      	bne.n	dca1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   dca2a:	d002      	beq.n	dca32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   dca2c:	f88d 3008 	strb.w	r3, [sp, #8]
   dca30:	e063      	b.n	dcafa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   dca32:	f114 050c 	adds.w	r5, r4, #12
   dca36:	d003      	beq.n	dca40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   dca38:	4669      	mov	r1, sp
   dca3a:	4628      	mov	r0, r5
   dca3c:	f7ff ff35 	bl	dc8aa <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dca40:	f3bf 8f5f 	dmb	sy
   dca44:	2301      	movs	r3, #1
   dca46:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dca48:	2000      	movs	r0, #0
   dca4a:	f104 0308 	add.w	r3, r4, #8
   dca4e:	f3bf 8f5f 	dmb	sy
   dca52:	e853 6f00 	ldrex	r6, [r3]
   dca56:	e843 0200 	strex	r2, r0, [r3]
   dca5a:	2a00      	cmp	r2, #0
   dca5c:	d1f9      	bne.n	dca52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   dca5e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dca62:	2e00      	cmp	r6, #0
   dca64:	d049      	beq.n	dcafa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dca66:	f7fe fb8d 	bl	db184 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dca6a:	b120      	cbz	r0, dca76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dca6c:	4629      	mov	r1, r5
   dca6e:	4630      	mov	r0, r6
   dca70:	f7ff ff98 	bl	dc9a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dca74:	e03a      	b.n	dcaec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dca76:	4631      	mov	r1, r6
   dca78:	a802      	add	r0, sp, #8
   dca7a:	f7ff ffb3 	bl	dc9e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dca7e:	68e0      	ldr	r0, [r4, #12]
   dca80:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dca84:	b108      	cbz	r0, dca8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   dca86:	f004 fbf5 	bl	e1274 <strdup>
   dca8a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dca8c:	2010      	movs	r0, #16
   dca8e:	f8ad 501c 	strh.w	r5, [sp, #28]
   dca92:	f7f7 fb02 	bl	d409a <_Znwj>
   dca96:	4605      	mov	r5, r0
   dca98:	b1e8      	cbz	r0, dcad6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dca9a:	2700      	movs	r7, #0
   dca9c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dca9e:	2018      	movs	r0, #24
   dcaa0:	f7f7 fafb 	bl	d409a <_Znwj>
   dcaa4:	4604      	mov	r4, r0
   dcaa6:	b188      	cbz	r0, dcacc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dcaa8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dcaaa:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dcaac:	a802      	add	r0, sp, #8
   dcaae:	f7ff fe46 	bl	dc73e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcab2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dcab4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dcab6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcab8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dcaba:	9204      	str	r2, [sp, #16]
   dcabc:	a906      	add	r1, sp, #24
   dcabe:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dcac0:	60e3      	str	r3, [r4, #12]
   dcac2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dcac6:	9205      	str	r2, [sp, #20]
   dcac8:	f7ff feef 	bl	dc8aa <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dcacc:	4b0d      	ldr	r3, [pc, #52]	; (dcb04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   dcace:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dcad0:	4b0d      	ldr	r3, [pc, #52]	; (dcb08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dcad2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dcad4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   dcad6:	a806      	add	r0, sp, #24
   dcad8:	f7ff fef6 	bl	dc8c8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dcadc:	a802      	add	r0, sp, #8
   dcade:	f7f7 fc00 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dcae2:	2200      	movs	r2, #0
   dcae4:	4629      	mov	r1, r5
   dcae6:	4809      	ldr	r0, [pc, #36]	; (dcb0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   dcae8:	f7fe fb54 	bl	db194 <application_thread_invoke>
   dcaec:	4630      	mov	r0, r6
   dcaee:	f7f7 fbf8 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dcaf2:	2110      	movs	r1, #16
   dcaf4:	4630      	mov	r0, r6
   dcaf6:	f001 f981 	bl	dddfc <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   dcafa:	4668      	mov	r0, sp
   dcafc:	f7ff fee4 	bl	dc8c8 <_ZN8particle5ErrorD1Ev>
    }
   dcb00:	b009      	add	sp, #36	; 0x24
   dcb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcb04:	000dc9b7 	.word	0x000dc9b7
   dcb08:	000dcc2d 	.word	0x000dcc2d
   dcb0c:	000dd2bd 	.word	0x000dd2bd

000dcb10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dcb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcb14:	b08b      	sub	sp, #44	; 0x2c
   dcb16:	4606      	mov	r6, r0
   dcb18:	460f      	mov	r7, r1
   dcb1a:	4690      	mov	r8, r2
   dcb1c:	4699      	mov	r9, r3
   dcb1e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dcb22:	f7fe fbcb 	bl	db2bc <spark_cloud_flag_connected>
   dcb26:	ad07      	add	r5, sp, #28
    if (!connected()) {
   dcb28:	4683      	mov	fp, r0
   dcb2a:	bb30      	cbnz	r0, dcb7a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dcb2c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dcb30:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dcb32:	a905      	add	r1, sp, #20
   dcb34:	4628      	mov	r0, r5
   dcb36:	f8ad 3018 	strh.w	r3, [sp, #24]
   dcb3a:	f7ff feb6 	bl	dc8aa <_ZN8particle5ErrorC1EOS0_>
   dcb3e:	2014      	movs	r0, #20
   dcb40:	f7f7 faab 	bl	d409a <_Znwj>
   dcb44:	4604      	mov	r4, r0
   dcb46:	b158      	cbz	r0, dcb60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dcb48:	2302      	movs	r3, #2
   dcb4a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dcb4c:	2301      	movs	r3, #1
   dcb4e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dcb50:	f8c0 b004 	str.w	fp, [r0, #4]
   dcb54:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   dcb58:	4629      	mov	r1, r5
   dcb5a:	300c      	adds	r0, #12
   dcb5c:	f7ff fea5 	bl	dc8aa <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   dcb60:	4630      	mov	r0, r6
   dcb62:	4621      	mov	r1, r4
   dcb64:	f840 4b04 	str.w	r4, [r0], #4
   dcb68:	f7ff ff08 	bl	dc97c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dcb6c:	4628      	mov	r0, r5
   dcb6e:	f7ff feab 	bl	dc8c8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dcb72:	a805      	add	r0, sp, #20
   dcb74:	f7ff fea8 	bl	dc8c8 <_ZN8particle5ErrorD1Ev>
   dcb78:	e052      	b.n	dcc20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dcb7a:	2400      	movs	r4, #0
   dcb7c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dcb7e:	2014      	movs	r0, #20
   dcb80:	606c      	str	r4, [r5, #4]
   dcb82:	60ac      	str	r4, [r5, #8]
   dcb84:	9307      	str	r3, [sp, #28]
   dcb86:	f7f7 fa88 	bl	d409a <_Znwj>
   dcb8a:	4601      	mov	r1, r0
   dcb8c:	b118      	cbz	r0, dcb96 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   dcb8e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dcb90:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dcb92:	6044      	str	r4, [r0, #4]
   dcb94:	6084      	str	r4, [r0, #8]
   dcb96:	a804      	add	r0, sp, #16
   dcb98:	9103      	str	r1, [sp, #12]
   dcb9a:	f7ff feef 	bl	dc97c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   dcb9e:	4b22      	ldr	r3, [pc, #136]	; (dcc28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   dcba0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dcba2:	2008      	movs	r0, #8
   dcba4:	f7f7 fa79 	bl	d409a <_Znwj>
   dcba8:	4604      	mov	r4, r0
   dcbaa:	b128      	cbz	r0, dcbb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dcbac:	9b03      	ldr	r3, [sp, #12]
   dcbae:	f840 3b04 	str.w	r3, [r0], #4
   dcbb2:	a904      	add	r1, sp, #16
   dcbb4:	f7ff fa96 	bl	dc0e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dcbb8:	9500      	str	r5, [sp, #0]
   dcbba:	fa5f f38a 	uxtb.w	r3, sl
   dcbbe:	464a      	mov	r2, r9
   dcbc0:	4641      	mov	r1, r8
   dcbc2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   dcbc4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dcbc6:	f7fe fb89 	bl	db2dc <spark_send_event>
   dcbca:	b920      	cbnz	r0, dcbd6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   dcbcc:	9b03      	ldr	r3, [sp, #12]
   dcbce:	785b      	ldrb	r3, [r3, #1]
   dcbd0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dcbd4:	b183      	cbz	r3, dcbf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   dcbd6:	9b03      	ldr	r3, [sp, #12]
   dcbd8:	9305      	str	r3, [sp, #20]
   dcbda:	a904      	add	r1, sp, #16
   dcbdc:	a806      	add	r0, sp, #24
   dcbde:	f7ff fa81 	bl	dc0e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   dcbe2:	a905      	add	r1, sp, #20
   dcbe4:	4630      	mov	r0, r6
   dcbe6:	f7ff fe99 	bl	dc91c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dcbea:	a806      	add	r0, sp, #24
   dcbec:	f7f7 fdda 	bl	d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dcbf0:	a804      	add	r0, sp, #16
   dcbf2:	f7f7 fdd7 	bl	d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dcbf6:	e013      	b.n	dcc20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   dcbf8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   dcbfc:	a905      	add	r1, sp, #20
   dcbfe:	a803      	add	r0, sp, #12
   dcc00:	9205      	str	r2, [sp, #20]
   dcc02:	f8ad 3018 	strh.w	r3, [sp, #24]
   dcc06:	f7ff fefd 	bl	dca04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dcc0a:	a805      	add	r0, sp, #20
   dcc0c:	f7ff fe5c 	bl	dc8c8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dcc10:	a805      	add	r0, sp, #20
   dcc12:	9909      	ldr	r1, [sp, #36]	; 0x24
   dcc14:	f7ff fe93 	bl	dc93e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   dcc18:	a806      	add	r0, sp, #24
   dcc1a:	f7f7 fdc3 	bl	d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dcc1e:	e7da      	b.n	dcbd6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   dcc20:	4630      	mov	r0, r6
   dcc22:	b00b      	add	sp, #44	; 0x2c
   dcc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcc28:	000dcd9d 	.word	0x000dcd9d

000dcc2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dcc2c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dcc2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcc30:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dcc32:	d006      	beq.n	dcc42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   dcc34:	2a03      	cmp	r2, #3
   dcc36:	d017      	beq.n	dcc68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   dcc38:	2a01      	cmp	r2, #1
   dcc3a:	d122      	bne.n	dcc82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dcc3c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dcc3e:	6003      	str	r3, [r0, #0]
	      break;
   dcc40:	e01f      	b.n	dcc82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dcc42:	2018      	movs	r0, #24
   dcc44:	680e      	ldr	r6, [r1, #0]
   dcc46:	f7f7 fa28 	bl	d409a <_Znwj>
   dcc4a:	4605      	mov	r5, r0
   dcc4c:	b150      	cbz	r0, dcc64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dcc4e:	4631      	mov	r1, r6
   dcc50:	f7ff fec8 	bl	dc9e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dcc54:	6930      	ldr	r0, [r6, #16]
   dcc56:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dcc5a:	b108      	cbz	r0, dcc60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   dcc5c:	f004 fb0a 	bl	e1274 <strdup>
   dcc60:	6128      	str	r0, [r5, #16]
   dcc62:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dcc64:	6025      	str	r5, [r4, #0]
   dcc66:	e00c      	b.n	dcc82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dcc68:	6804      	ldr	r4, [r0, #0]
   dcc6a:	b154      	cbz	r4, dcc82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   dcc6c:	f104 0010 	add.w	r0, r4, #16
   dcc70:	f7ff fe2a 	bl	dc8c8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dcc74:	4620      	mov	r0, r4
   dcc76:	f7f7 fb34 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dcc7a:	2118      	movs	r1, #24
   dcc7c:	4620      	mov	r0, r4
   dcc7e:	f001 f8bd 	bl	dddfc <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dcc82:	2000      	movs	r0, #0
   dcc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dcc86 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dcc86:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dcc88:	2300      	movs	r3, #0
   dcc8a:	6083      	str	r3, [r0, #8]
   dcc8c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dcc8e:	4604      	mov	r4, r0
   dcc90:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dcc92:	b12b      	cbz	r3, dcca0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dcc94:	2202      	movs	r2, #2
   dcc96:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dcc98:	68eb      	ldr	r3, [r5, #12]
   dcc9a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dcc9c:	68ab      	ldr	r3, [r5, #8]
   dcc9e:	60a3      	str	r3, [r4, #8]
	}
    }
   dcca0:	4620      	mov	r0, r4
   dcca2:	bd38      	pop	{r3, r4, r5, pc}

000dcca4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dcca4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dcca6:	b570      	push	{r4, r5, r6, lr}
   dcca8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dccaa:	d006      	beq.n	dccba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   dccac:	2a03      	cmp	r2, #3
   dccae:	d011      	beq.n	dccd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   dccb0:	2a01      	cmp	r2, #1
   dccb2:	d118      	bne.n	dcce6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dccb4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dccb6:	6003      	str	r3, [r0, #0]
	      break;
   dccb8:	e015      	b.n	dcce6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dccba:	2014      	movs	r0, #20
   dccbc:	680e      	ldr	r6, [r1, #0]
   dccbe:	f7f7 f9ec 	bl	d409a <_Znwj>
   dccc2:	4605      	mov	r5, r0
   dccc4:	b120      	cbz	r0, dccd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dccc6:	4631      	mov	r1, r6
   dccc8:	f7ff ffdd 	bl	dcc86 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dcccc:	7c33      	ldrb	r3, [r6, #16]
   dccce:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dccd0:	6025      	str	r5, [r4, #0]
   dccd2:	e008      	b.n	dcce6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dccd4:	6804      	ldr	r4, [r0, #0]
   dccd6:	b134      	cbz	r4, dcce6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dccd8:	4620      	mov	r0, r4
   dccda:	f7f7 fb02 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dccde:	2114      	movs	r1, #20
   dcce0:	4620      	mov	r0, r4
   dcce2:	f001 f88b 	bl	dddfc <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dcce6:	2000      	movs	r0, #0
   dcce8:	bd70      	pop	{r4, r5, r6, pc}
	...

000dccec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   dccec:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dccee:	2300      	movs	r3, #0
   dccf0:	b087      	sub	sp, #28
   dccf2:	460c      	mov	r4, r1
   dccf4:	f3bf 8f5f 	dmb	sy
   dccf8:	e850 6f00 	ldrex	r6, [r0]
   dccfc:	e840 3200 	strex	r2, r3, [r0]
   dcd00:	2a00      	cmp	r2, #0
   dcd02:	d1f9      	bne.n	dccf8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   dcd04:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dcd08:	2e00      	cmp	r6, #0
   dcd0a:	d03f      	beq.n	dcd8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dcd0c:	4618      	mov	r0, r3
   dcd0e:	f7fe fa39 	bl	db184 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dcd12:	4607      	mov	r7, r0
   dcd14:	b120      	cbz	r0, dcd20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dcd16:	4621      	mov	r1, r4
   dcd18:	4630      	mov	r0, r6
   dcd1a:	f7ff fe53 	bl	dc9c4 <_ZNKSt8functionIFvRKbEEclES1_>
   dcd1e:	e02e      	b.n	dcd7e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dcd20:	4631      	mov	r1, r6
   dcd22:	a801      	add	r0, sp, #4
   dcd24:	f7ff ffaf 	bl	dcc86 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dcd28:	7823      	ldrb	r3, [r4, #0]
   dcd2a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dcd2e:	2010      	movs	r0, #16
   dcd30:	f7f7 f9b3 	bl	d409a <_Znwj>
   dcd34:	4605      	mov	r5, r0
   dcd36:	b1d0      	cbz	r0, dcd6e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dcd38:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dcd3a:	2014      	movs	r0, #20
   dcd3c:	f7f7 f9ad 	bl	d409a <_Znwj>
   dcd40:	4604      	mov	r4, r0
   dcd42:	b178      	cbz	r0, dcd64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dcd44:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dcd46:	4601      	mov	r1, r0
   dcd48:	a801      	add	r0, sp, #4
   dcd4a:	f7ff fcf8 	bl	dc73e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcd4e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   dcd50:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dcd52:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcd54:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dcd56:	9203      	str	r2, [sp, #12]
   dcd58:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dcd5a:	60e3      	str	r3, [r4, #12]
   dcd5c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dcd60:	9204      	str	r2, [sp, #16]
   dcd62:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dcd64:	4b0a      	ldr	r3, [pc, #40]	; (dcd90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   dcd66:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dcd68:	4b0a      	ldr	r3, [pc, #40]	; (dcd94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dcd6a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dcd6c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dcd6e:	a801      	add	r0, sp, #4
   dcd70:	f7f7 fab7 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dcd74:	2200      	movs	r2, #0
   dcd76:	4629      	mov	r1, r5
   dcd78:	4807      	ldr	r0, [pc, #28]	; (dcd98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   dcd7a:	f7fe fa0b 	bl	db194 <application_thread_invoke>
   dcd7e:	4630      	mov	r0, r6
   dcd80:	f7f7 faaf 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dcd84:	2110      	movs	r1, #16
   dcd86:	4630      	mov	r0, r6
   dcd88:	f001 f838 	bl	dddfc <_ZdlPvj>
        }
    }
   dcd8c:	b007      	add	sp, #28
   dcd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcd90:	000dc9d7 	.word	0x000dc9d7
   dcd94:	000dcca5 	.word	0x000dcca5
   dcd98:	000dd2bd 	.word	0x000dd2bd

000dcd9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dcd9c:	b530      	push	{r4, r5, lr}
   dcd9e:	b085      	sub	sp, #20
   dcda0:	4604      	mov	r4, r0
   dcda2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dcda4:	4668      	mov	r0, sp
   dcda6:	4611      	mov	r1, r2
   dcda8:	f7ff fdc9 	bl	dc93e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dcdac:	b17c      	cbz	r4, dcdce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   dcdae:	b224      	sxth	r4, r4
   dcdb0:	4628      	mov	r0, r5
   dcdb2:	b10d      	cbz	r5, dcdb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   dcdb4:	f004 fa5e 	bl	e1274 <strdup>
   dcdb8:	9002      	str	r0, [sp, #8]
   dcdba:	a902      	add	r1, sp, #8
   dcdbc:	4668      	mov	r0, sp
   dcdbe:	f8ad 400c 	strh.w	r4, [sp, #12]
   dcdc2:	f7ff fe1f 	bl	dca04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dcdc6:	a802      	add	r0, sp, #8
   dcdc8:	f7ff fd7e 	bl	dc8c8 <_ZN8particle5ErrorD1Ev>
   dcdcc:	e01d      	b.n	dce0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   dcdce:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dcdd0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dcdd4:	f04f 0201 	mov.w	r2, #1
   dcdd8:	e8d0 3f4f 	ldrexb	r3, [r0]
   dcddc:	42a3      	cmp	r3, r4
   dcdde:	d103      	bne.n	dcde8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   dcde0:	e8c0 2f41 	strexb	r1, r2, [r0]
   dcde4:	2900      	cmp	r1, #0
   dcde6:	d1f7      	bne.n	dcdd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   dcde8:	d002      	beq.n	dcdf0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   dcdea:	f88d 3008 	strb.w	r3, [sp, #8]
   dcdee:	e00c      	b.n	dce0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   dcdf0:	f110 010c 	adds.w	r1, r0, #12
   dcdf4:	f04f 0301 	mov.w	r3, #1
   dcdf8:	bf18      	it	ne
   dcdfa:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dcdfc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   dce00:	3004      	adds	r0, #4
   dce02:	f800 3c03 	strb.w	r3, [r0, #-3]
   dce06:	f7ff ff71 	bl	dccec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   dce0a:	a801      	add	r0, sp, #4
   dce0c:	f7f7 fcca 	bl	d47a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   dce10:	b005      	add	sp, #20
   dce12:	bd30      	pop	{r4, r5, pc}

000dce14 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dce14:	4770      	bx	lr

000dce16 <_ZN9IPAddressD0Ev>:
   dce16:	b510      	push	{r4, lr}
   dce18:	2118      	movs	r1, #24
   dce1a:	4604      	mov	r4, r0
   dce1c:	f000 ffee 	bl	dddfc <_ZdlPvj>
   dce20:	4620      	mov	r0, r4
   dce22:	bd10      	pop	{r4, pc}

000dce24 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dce24:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dce26:	7d03      	ldrb	r3, [r0, #20]
   dce28:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dce2a:	b08d      	sub	sp, #52	; 0x34
   dce2c:	460e      	mov	r6, r1
   dce2e:	f100 0704 	add.w	r7, r0, #4
   dce32:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dce36:	d002      	beq.n	dce3e <_ZNK9IPAddress7printToER5Print+0x1a>
   dce38:	f100 0508 	add.w	r5, r0, #8
   dce3c:	e018      	b.n	dce70 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dce3e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dce40:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dce42:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dce46:	232f      	movs	r3, #47	; 0x2f
   dce48:	462a      	mov	r2, r5
   dce4a:	200a      	movs	r0, #10
   dce4c:	f7fe f810 	bl	dae70 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   dce50:	4628      	mov	r0, r5
   dce52:	f004 ff3f 	bl	e1cd4 <strlen>
   dce56:	6833      	ldr	r3, [r6, #0]
   dce58:	4602      	mov	r2, r0
   dce5a:	68db      	ldr	r3, [r3, #12]
   dce5c:	4629      	mov	r1, r5
   dce5e:	4630      	mov	r0, r6
   dce60:	4798      	blx	r3
   dce62:	e00f      	b.n	dce84 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   dce64:	b124      	cbz	r4, dce70 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   dce66:	212e      	movs	r1, #46	; 0x2e
   dce68:	4630      	mov	r0, r6
   dce6a:	f7ff f971 	bl	dc150 <_ZN5Print5printEc>
   dce6e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   dce70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dce74:	220a      	movs	r2, #10
   dce76:	4630      	mov	r0, r6
   dce78:	f7ff f989 	bl	dc18e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dce7c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dce7e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dce80:	d1f0      	bne.n	dce64 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dce82:	4620      	mov	r0, r4
    }
    return n;
}
   dce84:	b00d      	add	sp, #52	; 0x34
   dce86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dce88 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   dce88:	b510      	push	{r4, lr}
   dce8a:	4b05      	ldr	r3, [pc, #20]	; (dcea0 <_ZN9IPAddressC1Ev+0x18>)
   dce8c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dce8e:	2211      	movs	r2, #17
   dce90:	f840 3b04 	str.w	r3, [r0], #4
   dce94:	2100      	movs	r1, #0
   dce96:	f003 ff4f 	bl	e0d38 <memset>
{
    clear();
}
   dce9a:	4620      	mov	r0, r4
   dce9c:	bd10      	pop	{r4, pc}
   dce9e:	bf00      	nop
   dcea0:	000e4fac 	.word	0x000e4fac

000dcea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   dcea4:	4603      	mov	r3, r0
   dcea6:	4a07      	ldr	r2, [pc, #28]	; (dcec4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dcea8:	b510      	push	{r4, lr}
   dceaa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   dceae:	f101 0210 	add.w	r2, r1, #16
   dceb2:	f851 4b04 	ldr.w	r4, [r1], #4
   dceb6:	f843 4b04 	str.w	r4, [r3], #4
   dceba:	4291      	cmp	r1, r2
   dcebc:	d1f9      	bne.n	dceb2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dcebe:	780a      	ldrb	r2, [r1, #0]
   dcec0:	701a      	strb	r2, [r3, #0]
}
   dcec2:	bd10      	pop	{r4, pc}
   dcec4:	000e4fac 	.word	0x000e4fac

000dcec8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   dcec8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   dceca:	2b04      	cmp	r3, #4
   dcecc:	d101      	bne.n	dced2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   dcece:	6840      	ldr	r0, [r0, #4]
   dced0:	e008      	b.n	dcee4 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   dced2:	2b06      	cmp	r3, #6
   dced4:	d10a      	bne.n	dceec <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dced6:	6843      	ldr	r3, [r0, #4]
   dced8:	b953      	cbnz	r3, dcef0 <_ZNK9IPAddresscvbEv+0x28>
   dceda:	6883      	ldr	r3, [r0, #8]
   dcedc:	b943      	cbnz	r3, dcef0 <_ZNK9IPAddresscvbEv+0x28>
   dcede:	68c3      	ldr	r3, [r0, #12]
   dcee0:	b933      	cbnz	r3, dcef0 <_ZNK9IPAddresscvbEv+0x28>
   dcee2:	6900      	ldr	r0, [r0, #16]
   dcee4:	3000      	adds	r0, #0
   dcee6:	bf18      	it	ne
   dcee8:	2001      	movne	r0, #1
   dceea:	4770      	bx	lr
    } else {
        return false;
   dceec:	2000      	movs	r0, #0
   dceee:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dcef0:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   dcef2:	4770      	bx	lr

000dcef4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   dcef4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dcef6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dcefa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dcefe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dcf02:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   dcf06:	2304      	movs	r3, #4
   dcf08:	6041      	str	r1, [r0, #4]
   dcf0a:	7503      	strb	r3, [r0, #20]
   dcf0c:	bd10      	pop	{r4, pc}
	...

000dcf10 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   dcf10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dcf12:	4d04      	ldr	r5, [pc, #16]	; (dcf24 <_ZN9IPAddressC1Ehhhh+0x14>)
   dcf14:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   dcf16:	f89d 5018 	ldrb.w	r5, [sp, #24]
   dcf1a:	9500      	str	r5, [sp, #0]
   dcf1c:	f7ff ffea 	bl	dcef4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   dcf20:	b003      	add	sp, #12
   dcf22:	bd30      	pop	{r4, r5, pc}
   dcf24:	000e4fac 	.word	0x000e4fac

000dcf28 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   dcf28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dcf2a:	780d      	ldrb	r5, [r1, #0]
   dcf2c:	788b      	ldrb	r3, [r1, #2]
   dcf2e:	784a      	ldrb	r2, [r1, #1]
   dcf30:	78c9      	ldrb	r1, [r1, #3]
   dcf32:	9100      	str	r1, [sp, #0]
   dcf34:	4629      	mov	r1, r5
   dcf36:	f7ff ffdd 	bl	dcef4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   dcf3a:	b003      	add	sp, #12
   dcf3c:	bd30      	pop	{r4, r5, pc}

000dcf3e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dcf3e:	7441      	strb	r1, [r0, #17]
   dcf40:	4770      	bx	lr

000dcf42 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dcf42:	4770      	bx	lr

000dcf44 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   dcf44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dcf46:	2100      	movs	r1, #0
   dcf48:	7c00      	ldrb	r0, [r0, #16]
   dcf4a:	f7fe f8d1 	bl	db0f0 <HAL_USB_USART_Receive_Data>
}
   dcf4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dcf52:	bf28      	it	cs
   dcf54:	f04f 30ff 	movcs.w	r0, #4294967295
   dcf58:	bd08      	pop	{r3, pc}

000dcf5a <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   dcf5a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dcf5c:	2101      	movs	r1, #1
   dcf5e:	7c00      	ldrb	r0, [r0, #16]
   dcf60:	f7fe f8c6 	bl	db0f0 <HAL_USB_USART_Receive_Data>
}
   dcf64:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dcf68:	bf28      	it	cs
   dcf6a:	f04f 30ff 	movcs.w	r0, #4294967295
   dcf6e:	bd08      	pop	{r3, pc}

000dcf70 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   dcf70:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dcf72:	7c00      	ldrb	r0, [r0, #16]
   dcf74:	f7fe f8b4 	bl	db0e0 <HAL_USB_USART_Available_Data_For_Write>
}
   dcf78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dcf7c:	bd08      	pop	{r3, pc}

000dcf7e <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   dcf7e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dcf80:	7c00      	ldrb	r0, [r0, #16]
   dcf82:	f7fe f8a5 	bl	db0d0 <HAL_USB_USART_Available_Data>
}
   dcf86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dcf8a:	bd08      	pop	{r3, pc}

000dcf8c <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   dcf8c:	7c00      	ldrb	r0, [r0, #16]
   dcf8e:	f7fe b8bf 	b.w	db110 <HAL_USB_USART_Flush_Data>

000dcf92 <_ZN9USBSerialD0Ev>:
   dcf92:	b510      	push	{r4, lr}
   dcf94:	2114      	movs	r1, #20
   dcf96:	4604      	mov	r4, r0
   dcf98:	f000 ff30 	bl	dddfc <_ZdlPvj>
   dcf9c:	4620      	mov	r0, r4
   dcf9e:	bd10      	pop	{r4, pc}

000dcfa0 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dcfa0:	b538      	push	{r3, r4, r5, lr}
   dcfa2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dcfa4:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dcfa6:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dcfa8:	f7fe f89a 	bl	db0e0 <HAL_USB_USART_Available_Data_For_Write>
   dcfac:	2800      	cmp	r0, #0
   dcfae:	dc01      	bgt.n	dcfb4 <_ZN9USBSerial5writeEh+0x14>
   dcfb0:	7c60      	ldrb	r0, [r4, #17]
   dcfb2:	b128      	cbz	r0, dcfc0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dcfb4:	4629      	mov	r1, r5
   dcfb6:	7c20      	ldrb	r0, [r4, #16]
   dcfb8:	f7fe f8a2 	bl	db100 <HAL_USB_USART_Send_Data>
   dcfbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   dcfc0:	bd38      	pop	{r3, r4, r5, pc}
	...

000dcfc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dcfc4:	b510      	push	{r4, lr}
   dcfc6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dcfc8:	2300      	movs	r3, #0
   dcfca:	6063      	str	r3, [r4, #4]
   dcfcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dcfd0:	60a3      	str	r3, [r4, #8]
   dcfd2:	4b05      	ldr	r3, [pc, #20]	; (dcfe8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dcfd4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   dcfd6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dcfd8:	4608      	mov	r0, r1
{
  _serial = serial;
   dcfda:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   dcfdc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   dcfde:	4611      	mov	r1, r2
   dcfe0:	f7fe f866 	bl	db0b0 <HAL_USB_USART_Init>
}
   dcfe4:	4620      	mov	r0, r4
   dcfe6:	bd10      	pop	{r4, pc}
   dcfe8:	000e4fc0 	.word	0x000e4fc0

000dcfec <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dcfec:	2200      	movs	r2, #0
   dcfee:	7c00      	ldrb	r0, [r0, #16]
   dcff0:	f7fe b866 	b.w	db0c0 <HAL_USB_USART_Begin>

000dcff4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dcff4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dcff6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dcff8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dcffa:	2100      	movs	r1, #0
   dcffc:	f003 fe9c 	bl	e0d38 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   dd000:	4620      	mov	r0, r4
   dd002:	bd10      	pop	{r4, pc}

000dd004 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   dd004:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dd006:	4d0e      	ldr	r5, [pc, #56]	; (dd040 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   dd008:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dd00a:	a801      	add	r0, sp, #4
   dd00c:	f7ff fff2 	bl	dcff4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dd010:	6829      	ldr	r1, [r5, #0]
   dd012:	f011 0401 	ands.w	r4, r1, #1
   dd016:	d110      	bne.n	dd03a <_Z16_fetch_usbserialv+0x36>
   dd018:	4628      	mov	r0, r5
   dd01a:	f7f7 f846 	bl	d40aa <__cxa_guard_acquire>
   dd01e:	b160      	cbz	r0, dd03a <_Z16_fetch_usbserialv+0x36>
   dd020:	aa01      	add	r2, sp, #4
   dd022:	4621      	mov	r1, r4
   dd024:	4807      	ldr	r0, [pc, #28]	; (dd044 <_Z16_fetch_usbserialv+0x40>)
   dd026:	f7ff ffcd 	bl	dcfc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dd02a:	4628      	mov	r0, r5
   dd02c:	f7f7 f842 	bl	d40b4 <__cxa_guard_release>
   dd030:	4a05      	ldr	r2, [pc, #20]	; (dd048 <_Z16_fetch_usbserialv+0x44>)
   dd032:	4906      	ldr	r1, [pc, #24]	; (dd04c <_Z16_fetch_usbserialv+0x48>)
   dd034:	4803      	ldr	r0, [pc, #12]	; (dd044 <_Z16_fetch_usbserialv+0x40>)
   dd036:	f000 fed3 	bl	ddde0 <__aeabi_atexit>
	return _usbserial;
}
   dd03a:	4802      	ldr	r0, [pc, #8]	; (dd044 <_Z16_fetch_usbserialv+0x40>)
   dd03c:	b007      	add	sp, #28
   dd03e:	bd30      	pop	{r4, r5, pc}
   dd040:	2003e234 	.word	0x2003e234
   dd044:	2003e238 	.word	0x2003e238
   dd048:	2003bce8 	.word	0x2003bce8
   dd04c:	000dcf43 	.word	0x000dcf43

000dd050 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dd050:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   dd052:	b510      	push	{r4, lr}
   dd054:	b90a      	cbnz	r2, dd05a <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   dd056:	f001 f888 	bl	de16a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd05a:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   dd05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dd060:	4718      	bx	r3

000dd062 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dd062:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dd064:	2300      	movs	r3, #0
   dd066:	6083      	str	r3, [r0, #8]
   dd068:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dd06a:	4604      	mov	r4, r0
   dd06c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dd06e:	b12b      	cbz	r3, dd07c <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dd070:	2202      	movs	r2, #2
   dd072:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dd074:	68eb      	ldr	r3, [r5, #12]
   dd076:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dd078:	68ab      	ldr	r3, [r5, #8]
   dd07a:	60a3      	str	r3, [r4, #8]
	}
    }
   dd07c:	4620      	mov	r0, r4
   dd07e:	bd38      	pop	{r3, r4, r5, pc}

000dd080 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   dd080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   dd082:	4b0d      	ldr	r3, [pc, #52]	; (dd0b8 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
   dd084:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   dd088:	4606      	mov	r6, r0
   dd08a:	460f      	mov	r7, r1
   dd08c:	461c      	mov	r4, r3
    delete handlers[pin];
   dd08e:	b135      	cbz	r5, dd09e <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dd090:	4628      	mov	r0, r5
   dd092:	f7f7 f926 	bl	d42e2 <_ZNSt14_Function_baseD1Ev>
   dd096:	2110      	movs	r1, #16
   dd098:	4628      	mov	r0, r5
   dd09a:	f000 feaf 	bl	dddfc <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   dd09e:	2010      	movs	r0, #16
   dd0a0:	f7f6 fffb 	bl	d409a <_Znwj>
   dd0a4:	4605      	mov	r5, r0
   dd0a6:	b110      	cbz	r0, dd0ae <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
   dd0a8:	4639      	mov	r1, r7
   dd0aa:	f7ff ffda 	bl	dd062 <_ZNSt8functionIFvvEEC1ERKS1_>
   dd0ae:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
   dd0b2:	4628      	mov	r0, r5
   dd0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd0b6:	bf00      	nop
   dd0b8:	2003e24c 	.word	0x2003e24c

000dd0bc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   dd0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd0be:	460c      	mov	r4, r1
   dd0c0:	b085      	sub	sp, #20
   dd0c2:	4605      	mov	r5, r0
   dd0c4:	4617      	mov	r7, r2
   dd0c6:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   dd0c8:	f7fd fdd2 	bl	dac70 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   dd0cc:	4621      	mov	r1, r4
   dd0ce:	4628      	mov	r0, r5
   dd0d0:	f7ff ffd6 	bl	dd080 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   dd0d4:	4604      	mov	r4, r0
   dd0d6:	b1c8      	cbz	r0, dd10c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
        HAL_InterruptExtraConfiguration extra = {0};
   dd0d8:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dd0da:	2304      	movs	r3, #4
  if (priority >= 0) {
   dd0dc:	428e      	cmp	r6, r1
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
   dd0de:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dd0e0:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   dd0e4:	bfa5      	ittet	ge
   dd0e6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   dd0ea:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   dd0ee:	460b      	movlt	r3, r1
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   dd0f0:	ab03      	addge	r3, sp, #12
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dd0f2:	9300      	str	r3, [sp, #0]
   dd0f4:	4602      	mov	r2, r0
   dd0f6:	463b      	mov	r3, r7
   dd0f8:	4907      	ldr	r1, [pc, #28]	; (dd118 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x5c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   dd0fa:	bfa8      	it	ge
   dd0fc:	f88d 600d 	strbge.w	r6, [sp, #13]
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dd100:	4628      	mov	r0, r5
   dd102:	f7fd fdad 	bl	dac60 <HAL_Interrupts_Attach>
   dd106:	b108      	cbz	r0, dd10c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
            return false;
   dd108:	2000      	movs	r0, #0
   dd10a:	e002      	b.n	dd112 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x56>
        }
    }
    return handler!=NULL;
   dd10c:	1c20      	adds	r0, r4, #0
   dd10e:	bf18      	it	ne
   dd110:	2001      	movne	r0, #1
}
   dd112:	b005      	add	sp, #20
   dd114:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd116:	bf00      	nop
   dd118:	000dd051 	.word	0x000dd051

000dd11c <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dd11c:	2200      	movs	r2, #0
   dd11e:	4611      	mov	r1, r2
   dd120:	6840      	ldr	r0, [r0, #4]
   dd122:	f7fe b89b 	b.w	db25c <network_listening>

000dd126 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dd126:	2200      	movs	r2, #0
   dd128:	4611      	mov	r1, r2
   dd12a:	6840      	ldr	r0, [r0, #4]
   dd12c:	f7fe b8a6 	b.w	db27c <network_get_listen_timeout>

000dd130 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dd130:	2200      	movs	r2, #0
   dd132:	6840      	ldr	r0, [r0, #4]
   dd134:	f7fe b89a 	b.w	db26c <network_set_listen_timeout>

000dd138 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dd138:	2200      	movs	r2, #0
   dd13a:	f081 0101 	eor.w	r1, r1, #1
   dd13e:	6840      	ldr	r0, [r0, #4]
   dd140:	f7fe b884 	b.w	db24c <network_listen>

000dd144 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   dd144:	2300      	movs	r3, #0
   dd146:	461a      	mov	r2, r3
   dd148:	4619      	mov	r1, r3
   dd14a:	6840      	ldr	r0, [r0, #4]
   dd14c:	f7fe b876 	b.w	db23c <network_off>

000dd150 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   dd150:	2300      	movs	r3, #0
   dd152:	461a      	mov	r2, r3
   dd154:	4619      	mov	r1, r3
   dd156:	6840      	ldr	r0, [r0, #4]
   dd158:	f7fe b868 	b.w	db22c <network_on>

000dd15c <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dd15c:	2200      	movs	r2, #0
   dd15e:	4611      	mov	r1, r2
   dd160:	6840      	ldr	r0, [r0, #4]
   dd162:	f7fe b84b 	b.w	db1fc <network_connecting>

000dd166 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dd166:	2200      	movs	r2, #0
   dd168:	2102      	movs	r1, #2
   dd16a:	6840      	ldr	r0, [r0, #4]
   dd16c:	f7fe b84e 	b.w	db20c <network_disconnect>

000dd170 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dd170:	2300      	movs	r3, #0
   dd172:	461a      	mov	r2, r3
   dd174:	6840      	ldr	r0, [r0, #4]
   dd176:	f7fe b839 	b.w	db1ec <network_connect>
	...

000dd17c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   dd17c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   dd17e:	4c08      	ldr	r4, [pc, #32]	; (dd1a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   dd180:	2528      	movs	r5, #40	; 0x28
   dd182:	462a      	mov	r2, r5
   dd184:	2100      	movs	r1, #0
   dd186:	4620      	mov	r0, r4
   dd188:	f003 fdd6 	bl	e0d38 <memset>
        cid = -1;
   dd18c:	f04f 33ff 	mov.w	r3, #4294967295
   dd190:	6063      	str	r3, [r4, #4]
   dd192:	4b04      	ldr	r3, [pc, #16]	; (dd1a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   dd194:	8025      	strh	r5, [r4, #0]
   dd196:	2204      	movs	r2, #4
   dd198:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   dd19a:	4a03      	ldr	r2, [pc, #12]	; (dd1a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   dd19c:	601a      	str	r2, [r3, #0]
   dd19e:	bd38      	pop	{r3, r4, r5, pc}
   dd1a0:	2003e2e4 	.word	0x2003e2e4
   dd1a4:	2003e2dc 	.word	0x2003e2dc
   dd1a8:	000e4ff0 	.word	0x000e4ff0

000dd1ac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   dd1ac:	4770      	bx	lr

000dd1ae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dd1ae:	7441      	strb	r1, [r0, #17]
   dd1b0:	4770      	bx	lr

000dd1b2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   dd1b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   dd1b4:	7c00      	ldrb	r0, [r0, #16]
   dd1b6:	f7fd feb3 	bl	daf20 <HAL_USART_Available_Data_For_Write>
}
   dd1ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dd1be:	bd08      	pop	{r3, pc}

000dd1c0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   dd1c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   dd1c2:	7c00      	ldrb	r0, [r0, #16]
   dd1c4:	f7fd fe84 	bl	daed0 <HAL_USART_Available_Data>
}
   dd1c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dd1cc:	bd08      	pop	{r3, pc}

000dd1ce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   dd1ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   dd1d0:	7c00      	ldrb	r0, [r0, #16]
   dd1d2:	f7fd fe8d 	bl	daef0 <HAL_USART_Peek_Data>
}
   dd1d6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dd1da:	bf28      	it	cs
   dd1dc:	f04f 30ff 	movcs.w	r0, #4294967295
   dd1e0:	bd08      	pop	{r3, pc}

000dd1e2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   dd1e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   dd1e4:	7c00      	ldrb	r0, [r0, #16]
   dd1e6:	f7fd fe7b 	bl	daee0 <HAL_USART_Read_Data>
}
   dd1ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dd1ee:	bf28      	it	cs
   dd1f0:	f04f 30ff 	movcs.w	r0, #4294967295
   dd1f4:	bd08      	pop	{r3, pc}

000dd1f6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   dd1f6:	7c00      	ldrb	r0, [r0, #16]
   dd1f8:	f7fd be82 	b.w	daf00 <HAL_USART_Flush_Data>

000dd1fc <_ZN11USARTSerialD0Ev>:
   dd1fc:	b510      	push	{r4, lr}
   dd1fe:	2114      	movs	r1, #20
   dd200:	4604      	mov	r4, r0
   dd202:	f000 fdfb 	bl	dddfc <_ZdlPvj>
   dd206:	4620      	mov	r0, r4
   dd208:	bd10      	pop	{r4, pc}

000dd20a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   dd20a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dd20c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   dd20e:	4604      	mov	r4, r0
   dd210:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dd212:	b925      	cbnz	r5, dd21e <_ZN11USARTSerial5writeEh+0x14>
   dd214:	7c00      	ldrb	r0, [r0, #16]
   dd216:	f7fd fe83 	bl	daf20 <HAL_USART_Available_Data_For_Write>
   dd21a:	2800      	cmp	r0, #0
   dd21c:	dd05      	ble.n	dd22a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dd21e:	4631      	mov	r1, r6
   dd220:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   dd222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dd226:	f7fd be4b 	b.w	daec0 <HAL_USART_Write_Data>
  }
  return 0;
}
   dd22a:	4628      	mov	r0, r5
   dd22c:	bd70      	pop	{r4, r5, r6, pc}
	...

000dd230 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   dd230:	b510      	push	{r4, lr}
   dd232:	4604      	mov	r4, r0
   dd234:	4608      	mov	r0, r1
   dd236:	4611      	mov	r1, r2
   dd238:	2200      	movs	r2, #0
   dd23a:	6062      	str	r2, [r4, #4]
   dd23c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dd240:	60a2      	str	r2, [r4, #8]
   dd242:	4a05      	ldr	r2, [pc, #20]	; (dd258 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   dd244:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   dd246:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   dd248:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   dd24a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   dd24c:	461a      	mov	r2, r3
   dd24e:	f7fd fe2f 	bl	daeb0 <HAL_USART_Init>
}
   dd252:	4620      	mov	r0, r4
   dd254:	bd10      	pop	{r4, pc}
   dd256:	bf00      	nop
   dd258:	000e5024 	.word	0x000e5024

000dd25c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   dd25c:	2300      	movs	r3, #0
   dd25e:	7c00      	ldrb	r0, [r0, #16]
   dd260:	f7fd be66 	b.w	daf30 <HAL_USART_BeginConfig>

000dd264 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   dd264:	2200      	movs	r2, #0
   dd266:	f7ff bff9 	b.w	dd25c <_ZN11USARTSerial5beginEmm>

000dd26a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   dd26a:	7c00      	ldrb	r0, [r0, #16]
   dd26c:	f7fd be50 	b.w	daf10 <HAL_USART_Is_Enabled>

000dd270 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   dd270:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dd272:	4d0c      	ldr	r5, [pc, #48]	; (dd2a4 <_Z22__fetch_global_Serial1v+0x34>)
   dd274:	6829      	ldr	r1, [r5, #0]
   dd276:	f011 0401 	ands.w	r4, r1, #1
   dd27a:	d111      	bne.n	dd2a0 <_Z22__fetch_global_Serial1v+0x30>
   dd27c:	4628      	mov	r0, r5
   dd27e:	f7f6 ff14 	bl	d40aa <__cxa_guard_acquire>
   dd282:	b168      	cbz	r0, dd2a0 <_Z22__fetch_global_Serial1v+0x30>
   dd284:	4a08      	ldr	r2, [pc, #32]	; (dd2a8 <_Z22__fetch_global_Serial1v+0x38>)
   dd286:	4b09      	ldr	r3, [pc, #36]	; (dd2ac <_Z22__fetch_global_Serial1v+0x3c>)
   dd288:	4809      	ldr	r0, [pc, #36]	; (dd2b0 <_Z22__fetch_global_Serial1v+0x40>)
   dd28a:	4621      	mov	r1, r4
   dd28c:	f7ff ffd0 	bl	dd230 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   dd290:	4628      	mov	r0, r5
   dd292:	f7f6 ff0f 	bl	d40b4 <__cxa_guard_release>
   dd296:	4a07      	ldr	r2, [pc, #28]	; (dd2b4 <_Z22__fetch_global_Serial1v+0x44>)
   dd298:	4907      	ldr	r1, [pc, #28]	; (dd2b8 <_Z22__fetch_global_Serial1v+0x48>)
   dd29a:	4805      	ldr	r0, [pc, #20]	; (dd2b0 <_Z22__fetch_global_Serial1v+0x40>)
   dd29c:	f000 fda0 	bl	ddde0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dd2a0:	4803      	ldr	r0, [pc, #12]	; (dd2b0 <_Z22__fetch_global_Serial1v+0x40>)
   dd2a2:	bd38      	pop	{r3, r4, r5, pc}
   dd2a4:	2003e3a4 	.word	0x2003e3a4
   dd2a8:	2003e3a8 	.word	0x2003e3a8
   dd2ac:	2003e320 	.word	0x2003e320
   dd2b0:	2003e30c 	.word	0x2003e30c
   dd2b4:	2003bce8 	.word	0x2003bce8
   dd2b8:	000dd1ad 	.word	0x000dd1ad

000dd2bc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dd2bc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dd2be:	6883      	ldr	r3, [r0, #8]
   dd2c0:	4604      	mov	r4, r0
   dd2c2:	b90b      	cbnz	r3, dd2c8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dd2c4:	f000 ff51 	bl	de16a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd2c8:	68c3      	ldr	r3, [r0, #12]
   dd2ca:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   dd2cc:	68a3      	ldr	r3, [r4, #8]
   dd2ce:	b11b      	cbz	r3, dd2d8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dd2d0:	2203      	movs	r2, #3
   dd2d2:	4621      	mov	r1, r4
   dd2d4:	4620      	mov	r0, r4
   dd2d6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dd2d8:	4620      	mov	r0, r4
   dd2da:	2110      	movs	r1, #16
}
   dd2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dd2e0:	f000 bd8c 	b.w	dddfc <_ZdlPvj>

000dd2e4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   dd2e4:	4770      	bx	lr

000dd2e6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   dd2e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd2e8:	4606      	mov	r6, r0
   dd2ea:	4615      	mov	r5, r2
   dd2ec:	460c      	mov	r4, r1
   dd2ee:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dd2f0:	42bc      	cmp	r4, r7
   dd2f2:	d006      	beq.n	dd302 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   dd2f4:	6833      	ldr	r3, [r6, #0]
   dd2f6:	f814 1b01 	ldrb.w	r1, [r4], #1
   dd2fa:	689b      	ldr	r3, [r3, #8]
   dd2fc:	4630      	mov	r0, r6
   dd2fe:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dd300:	e7f6      	b.n	dd2f0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   dd302:	4628      	mov	r0, r5
   dd304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dd306 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   dd306:	2200      	movs	r2, #0
   dd308:	7c00      	ldrb	r0, [r0, #16]
   dd30a:	f7fd be31 	b.w	daf70 <HAL_I2C_Write_Data>

000dd30e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   dd30e:	2100      	movs	r1, #0
   dd310:	7c00      	ldrb	r0, [r0, #16]
   dd312:	f7fd be35 	b.w	daf80 <HAL_I2C_Available_Data>

000dd316 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   dd316:	2100      	movs	r1, #0
   dd318:	7c00      	ldrb	r0, [r0, #16]
   dd31a:	f7fd be39 	b.w	daf90 <HAL_I2C_Read_Data>

000dd31e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   dd31e:	2100      	movs	r1, #0
   dd320:	7c00      	ldrb	r0, [r0, #16]
   dd322:	f7fd be3d 	b.w	dafa0 <HAL_I2C_Peek_Data>

000dd326 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   dd326:	2100      	movs	r1, #0
   dd328:	7c00      	ldrb	r0, [r0, #16]
   dd32a:	f7fd be41 	b.w	dafb0 <HAL_I2C_Flush_Data>

000dd32e <_ZN7TwoWireD0Ev>:
   dd32e:	b510      	push	{r4, lr}
   dd330:	2114      	movs	r1, #20
   dd332:	4604      	mov	r4, r0
   dd334:	f000 fd62 	bl	dddfc <_ZdlPvj>
   dd338:	4620      	mov	r0, r4
   dd33a:	bd10      	pop	{r4, pc}

000dd33c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   dd33c:	b510      	push	{r4, lr}
   dd33e:	4604      	mov	r4, r0
   dd340:	2300      	movs	r3, #0
   dd342:	6063      	str	r3, [r4, #4]
   dd344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dd348:	60a3      	str	r3, [r4, #8]
   dd34a:	4b04      	ldr	r3, [pc, #16]	; (dd35c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   dd34c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   dd34e:	4608      	mov	r0, r1
   dd350:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   dd352:	4611      	mov	r1, r2
   dd354:	f7fd fe3c 	bl	dafd0 <HAL_I2C_Init>
}
   dd358:	4620      	mov	r0, r4
   dd35a:	bd10      	pop	{r4, pc}
   dd35c:	000e5054 	.word	0x000e5054

000dd360 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   dd360:	2300      	movs	r3, #0
   dd362:	461a      	mov	r2, r3
   dd364:	4619      	mov	r1, r3
   dd366:	7c00      	ldrb	r0, [r0, #16]
   dd368:	f7fd bdea 	b.w	daf40 <HAL_I2C_Begin>

000dd36c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   dd36c:	b570      	push	{r4, r5, r6, lr}
   dd36e:	460c      	mov	r4, r1
   dd370:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   dd372:	2514      	movs	r5, #20
   dd374:	4606      	mov	r6, r0
   dd376:	462a      	mov	r2, r5
   dd378:	2100      	movs	r1, #0
   dd37a:	a801      	add	r0, sp, #4
   dd37c:	f003 fcdc 	bl	e0d38 <memset>
   dd380:	7823      	ldrb	r3, [r4, #0]
   dd382:	f88d 3008 	strb.w	r3, [sp, #8]
   dd386:	6863      	ldr	r3, [r4, #4]
   dd388:	9303      	str	r3, [sp, #12]
   dd38a:	68e3      	ldr	r3, [r4, #12]
   dd38c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   dd38e:	2200      	movs	r2, #0
   dd390:	7a23      	ldrb	r3, [r4, #8]
   dd392:	7c30      	ldrb	r0, [r6, #16]
   dd394:	f8ad 5004 	strh.w	r5, [sp, #4]
   dd398:	a901      	add	r1, sp, #4
   dd39a:	9305      	str	r3, [sp, #20]
   dd39c:	f7fd fe38 	bl	db010 <HAL_I2C_Request_Data_Ex>
}
   dd3a0:	b006      	add	sp, #24
   dd3a2:	bd70      	pop	{r4, r5, r6, pc}

000dd3a4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   dd3a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   dd3a6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   dd3a8:	f88d 1000 	strb.w	r1, [sp]
   dd3ac:	f04f 0164 	mov.w	r1, #100	; 0x64
   dd3b0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   dd3b2:	bf18      	it	ne
   dd3b4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   dd3b6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   dd3b8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   dd3ba:	f88d 3008 	strb.w	r3, [sp, #8]
   dd3be:	f7ff ffd5 	bl	dd36c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   dd3c2:	b005      	add	sp, #20
   dd3c4:	f85d fb04 	ldr.w	pc, [sp], #4

000dd3c8 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   dd3c8:	2301      	movs	r3, #1
   dd3ca:	f7ff bfeb 	b.w	dd3a4 <_ZN7TwoWire11requestFromEhjh>

000dd3ce <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   dd3ce:	2200      	movs	r2, #0
   dd3d0:	7c00      	ldrb	r0, [r0, #16]
   dd3d2:	f7fd bdbd 	b.w	daf50 <HAL_I2C_Begin_Transmission>

000dd3d6 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   dd3d6:	b2c9      	uxtb	r1, r1
   dd3d8:	f7ff bff9 	b.w	dd3ce <_ZN7TwoWire17beginTransmissionEh>

000dd3dc <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   dd3dc:	2200      	movs	r2, #0
   dd3de:	7c00      	ldrb	r0, [r0, #16]
   dd3e0:	f7fd bdbe 	b.w	daf60 <HAL_I2C_End_Transmission>

000dd3e4 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   dd3e4:	2101      	movs	r1, #1
   dd3e6:	f7ff bff9 	b.w	dd3dc <_ZN7TwoWire15endTransmissionEh>

000dd3ea <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   dd3ea:	2100      	movs	r1, #0
   dd3ec:	7c00      	ldrb	r0, [r0, #16]
   dd3ee:	f7fd bde7 	b.w	dafc0 <HAL_I2C_Is_Enabled>

000dd3f2 <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  HAL_I2C_Reset(_i2c, 0, NULL);
   dd3f2:	2200      	movs	r2, #0
   dd3f4:	4611      	mov	r1, r2
   dd3f6:	7c00      	ldrb	r0, [r0, #16]
   dd3f8:	f7fd bdf2 	b.w	dafe0 <HAL_I2C_Reset>

000dd3fc <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
   dd3fc:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   dd3fe:	2100      	movs	r1, #0
   dd400:	7c00      	ldrb	r0, [r0, #16]
   dd402:	f7fd fdf5 	bl	daff0 <HAL_I2C_Acquire>
}
   dd406:	fab0 f080 	clz	r0, r0
   dd40a:	0940      	lsrs	r0, r0, #5
   dd40c:	bd08      	pop	{r3, pc}

000dd40e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   dd40e:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   dd410:	2100      	movs	r1, #0
   dd412:	7c00      	ldrb	r0, [r0, #16]
   dd414:	f7fd fdf4 	bl	db000 <HAL_I2C_Release>
}
   dd418:	fab0 f080 	clz	r0, r0
   dd41c:	0940      	lsrs	r0, r0, #5
   dd41e:	bd08      	pop	{r3, pc}

000dd420 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dd420:	2200      	movs	r2, #0
   dd422:	4611      	mov	r1, r2
   dd424:	6840      	ldr	r0, [r0, #4]
   dd426:	f7fd bf19 	b.w	db25c <network_listening>

000dd42a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dd42a:	2200      	movs	r2, #0
   dd42c:	4611      	mov	r1, r2
   dd42e:	6840      	ldr	r0, [r0, #4]
   dd430:	f7fd bf24 	b.w	db27c <network_get_listen_timeout>

000dd434 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dd434:	2200      	movs	r2, #0
   dd436:	6840      	ldr	r0, [r0, #4]
   dd438:	f7fd bf18 	b.w	db26c <network_set_listen_timeout>

000dd43c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dd43c:	2200      	movs	r2, #0
   dd43e:	f081 0101 	eor.w	r1, r1, #1
   dd442:	6840      	ldr	r0, [r0, #4]
   dd444:	f7fd bf02 	b.w	db24c <network_listen>

000dd448 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   dd448:	2300      	movs	r3, #0
   dd44a:	461a      	mov	r2, r3
   dd44c:	2101      	movs	r1, #1
   dd44e:	6840      	ldr	r0, [r0, #4]
   dd450:	f7fd bef4 	b.w	db23c <network_off>

000dd454 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   dd454:	2300      	movs	r3, #0
   dd456:	461a      	mov	r2, r3
   dd458:	4619      	mov	r1, r3
   dd45a:	6840      	ldr	r0, [r0, #4]
   dd45c:	f7fd bee6 	b.w	db22c <network_on>

000dd460 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dd460:	2200      	movs	r2, #0
   dd462:	4611      	mov	r1, r2
   dd464:	6840      	ldr	r0, [r0, #4]
   dd466:	f7fd bec9 	b.w	db1fc <network_connecting>

000dd46a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dd46a:	2200      	movs	r2, #0
   dd46c:	2102      	movs	r1, #2
   dd46e:	6840      	ldr	r0, [r0, #4]
   dd470:	f7fd becc 	b.w	db20c <network_disconnect>

000dd474 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dd474:	2300      	movs	r3, #0
   dd476:	461a      	mov	r2, r3
   dd478:	6840      	ldr	r0, [r0, #4]
   dd47a:	f7fd beb7 	b.w	db1ec <network_connect>

000dd47e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   dd47e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dd480:	4605      	mov	r5, r0
   dd482:	b188      	cbz	r0, dd4a8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dd484:	6804      	ldr	r4, [r0, #0]
   dd486:	b14c      	cbz	r4, dd49c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   dd488:	68a3      	ldr	r3, [r4, #8]
   dd48a:	b11b      	cbz	r3, dd494 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dd48c:	2203      	movs	r2, #3
   dd48e:	4621      	mov	r1, r4
   dd490:	4620      	mov	r0, r4
   dd492:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dd494:	2110      	movs	r1, #16
   dd496:	4620      	mov	r0, r4
   dd498:	f000 fcb0 	bl	dddfc <_ZdlPvj>
   dd49c:	4628      	mov	r0, r5
   dd49e:	2114      	movs	r1, #20
      }
   dd4a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dd4a4:	f000 bcaa 	b.w	dddfc <_ZdlPvj>
   dd4a8:	bd38      	pop	{r3, r4, r5, pc}

000dd4aa <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   dd4aa:	b110      	cbz	r0, dd4b2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   dd4ac:	6803      	ldr	r3, [r0, #0]
   dd4ae:	685b      	ldr	r3, [r3, #4]
   dd4b0:	4718      	bx	r3
   dd4b2:	4770      	bx	lr

000dd4b4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   dd4b4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   dd4b6:	6803      	ldr	r3, [r0, #0]
   dd4b8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   dd4ba:	b1bb      	cbz	r3, dd4ec <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   dd4bc:	6858      	ldr	r0, [r3, #4]
   dd4be:	f7fd fc77 	bl	dadb0 <os_thread_is_current>
   dd4c2:	b978      	cbnz	r0, dd4e4 <_ZN6ThreadD1Ev+0x30>
   dd4c4:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   dd4c6:	7c5a      	ldrb	r2, [r3, #17]
   dd4c8:	b912      	cbnz	r2, dd4d0 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   dd4ca:	6858      	ldr	r0, [r3, #4]
   dd4cc:	f7fd fc80 	bl	dadd0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   dd4d0:	6823      	ldr	r3, [r4, #0]
   dd4d2:	6858      	ldr	r0, [r3, #4]
   dd4d4:	f7fd fc84 	bl	dade0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd4d8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dd4da:	2300      	movs	r3, #0
   dd4dc:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   dd4de:	b128      	cbz	r0, dd4ec <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   dd4e0:	f7ff ffcd 	bl	dd47e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dd4e4:	6820      	ldr	r0, [r4, #0]
   dd4e6:	b108      	cbz	r0, dd4ec <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   dd4e8:	f7ff ffc9 	bl	dd47e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   dd4ec:	4620      	mov	r0, r4
   dd4ee:	bd10      	pop	{r4, pc}

000dd4f0 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   dd4f0:	b538      	push	{r3, r4, r5, lr}
   dd4f2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dd4f4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   dd4f8:	b108      	cbz	r0, dd4fe <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   dd4fa:	f7f6 fdd4 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   dd4fe:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   dd502:	b108      	cbz	r0, dd508 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   dd504:	f7fd fca4 	bl	dae50 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dd508:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   dd50c:	b135      	cbz	r5, dd51c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dd50e:	4628      	mov	r0, r5
   dd510:	f7ff ffd0 	bl	dd4b4 <_ZN6ThreadD1Ev>
   dd514:	2104      	movs	r1, #4
   dd516:	4628      	mov	r0, r5
   dd518:	f000 fc70 	bl	dddfc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dd51c:	6820      	ldr	r0, [r4, #0]
   dd51e:	b108      	cbz	r0, dd524 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   dd520:	f7ff ffc3 	bl	dd4aa <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   dd524:	4620      	mov	r0, r4
   dd526:	bd38      	pop	{r3, r4, r5, pc}

000dd528 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   dd528:	b510      	push	{r4, lr}
   dd52a:	4b04      	ldr	r3, [pc, #16]	; (dd53c <_ZN5spark9MeshClassD1Ev+0x14>)
   dd52c:	4604      	mov	r4, r0
   dd52e:	f840 3b08 	str.w	r3, [r0], #8
   dd532:	f7ff ffdd 	bl	dd4f0 <_ZN5spark11MeshPublishD1Ev>
   dd536:	4620      	mov	r0, r4
   dd538:	bd10      	pop	{r4, pc}
   dd53a:	bf00      	nop
   dd53c:	000e507c 	.word	0x000e507c

000dd540 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   dd540:	b538      	push	{r3, r4, r5, lr}
   dd542:	4c0e      	ldr	r4, [pc, #56]	; (dd57c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   dd544:	4b0e      	ldr	r3, [pc, #56]	; (dd580 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   dd546:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   dd548:	2500      	movs	r5, #0
   dd54a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   dd54c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   dd550:	6063      	str	r3, [r4, #4]
   dd552:	60a5      	str	r5, [r4, #8]
   dd554:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dd558:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   dd55c:	f7fd fc70 	bl	dae40 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   dd560:	4b08      	ldr	r3, [pc, #32]	; (dd584 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   dd562:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dd566:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   dd56a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   dd56c:	4620      	mov	r0, r4
   dd56e:	4a06      	ldr	r2, [pc, #24]	; (dd588 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   dd570:	4906      	ldr	r1, [pc, #24]	; (dd58c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   dd572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   dd576:	f000 bc33 	b.w	ddde0 <__aeabi_atexit>
   dd57a:	bf00      	nop
   dd57c:	2003e42c 	.word	0x2003e42c
   dd580:	000e5130 	.word	0x000e5130
   dd584:	000e507c 	.word	0x000e507c
   dd588:	2003bce8 	.word	0x2003bce8
   dd58c:	000dd529 	.word	0x000dd529

000dd590 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   dd590:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dd592:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   dd594:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   dd596:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   dd59a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   dd59c:	2201      	movs	r2, #1
   dd59e:	f04f 33ff 	mov.w	r3, #4294967295
   dd5a2:	4621      	mov	r1, r4
   dd5a4:	47a8      	blx	r5
}
   dd5a6:	b003      	add	sp, #12
   dd5a8:	bd30      	pop	{r4, r5, pc}

000dd5aa <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   dd5aa:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   dd5ac:	6803      	ldr	r3, [r0, #0]
   dd5ae:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   dd5b0:	f04f 33ff 	mov.w	r3, #4294967295
   dd5b4:	46a4      	mov	ip, r4
}
   dd5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   dd5ba:	4760      	bx	ip

000dd5bc <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   dd5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dd5be:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   dd5c0:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   dd5c2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   dd5c6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   dd5c8:	4621      	mov	r1, r4
   dd5ca:	4613      	mov	r3, r2
   dd5cc:	2201      	movs	r2, #1
   dd5ce:	47a8      	blx	r5
}
   dd5d0:	b003      	add	sp, #12
   dd5d2:	bd30      	pop	{r4, r5, pc}

000dd5d4 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   dd5d4:	4770      	bx	lr

000dd5d6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   dd5d6:	b538      	push	{r3, r4, r5, lr}
   dd5d8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   dd5da:	681a      	ldr	r2, [r3, #0]
   dd5dc:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   dd5de:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   dd5e0:	da05      	bge.n	dd5ee <_ZN9TCPClient9connectedEv+0x18>
   dd5e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dd5e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dd5ea:	429a      	cmp	r2, r3
   dd5ec:	d001      	beq.n	dd5f2 <_ZN9TCPClient9connectedEv+0x1c>
   dd5ee:	2501      	movs	r5, #1
   dd5f0:	e00b      	b.n	dd60a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   dd5f2:	6803      	ldr	r3, [r0, #0]
   dd5f4:	691b      	ldr	r3, [r3, #16]
   dd5f6:	4798      	blx	r3
   dd5f8:	2800      	cmp	r0, #0
   dd5fa:	bf14      	ite	ne
   dd5fc:	2501      	movne	r5, #1
   dd5fe:	2500      	moveq	r5, #0
        if (!rv) {
   dd600:	d103      	bne.n	dd60a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   dd602:	6823      	ldr	r3, [r4, #0]
   dd604:	4620      	mov	r0, r4
   dd606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dd608:	4798      	blx	r3
        }
    }
    return rv;
}
   dd60a:	4628      	mov	r0, r5
   dd60c:	bd38      	pop	{r3, r4, r5, pc}

000dd60e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   dd60e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   dd610:	6818      	ldr	r0, [r3, #0]
}
   dd612:	43c0      	mvns	r0, r0
   dd614:	0fc0      	lsrs	r0, r0, #31
   dd616:	4770      	bx	lr

000dd618 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   dd618:	4770      	bx	lr

000dd61a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   dd61a:	2000      	movs	r0, #0
   dd61c:	4770      	bx	lr

000dd61e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   dd61e:	b510      	push	{r4, lr}
   dd620:	2114      	movs	r1, #20
   dd622:	4604      	mov	r4, r0
   dd624:	f000 fbea 	bl	dddfc <_ZdlPvj>
   dd628:	4620      	mov	r0, r4
   dd62a:	bd10      	pop	{r4, pc}

000dd62c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   dd62c:	f7f6 bd39 	b.w	d40a2 <_ZdlPv>

000dd630 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   dd630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   dd632:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   dd634:	2200      	movs	r2, #0
   dd636:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   dd638:	9202      	str	r2, [sp, #8]
   dd63a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   dd63c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   dd63e:	4604      	mov	r4, r0
   dd640:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   dd642:	d008      	beq.n	dd656 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   dd644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dd648:	fbb3 f1f2 	udiv	r1, r3, r2
   dd64c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   dd64e:	fb02 3111 	mls	r1, r2, r1, r3
   dd652:	434a      	muls	r2, r1
   dd654:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   dd656:	6960      	ldr	r0, [r4, #20]
   dd658:	2308      	movs	r3, #8
   dd65a:	9300      	str	r3, [sp, #0]
   dd65c:	f241 0205 	movw	r2, #4101	; 0x1005
   dd660:	446b      	add	r3, sp
   dd662:	f640 71ff 	movw	r1, #4095	; 0xfff
   dd666:	6800      	ldr	r0, [r0, #0]
   dd668:	f7fd fce2 	bl	db030 <sock_setsockopt>
    if (ret < 0) {
   dd66c:	2800      	cmp	r0, #0
   dd66e:	db08      	blt.n	dd682 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   dd670:	6960      	ldr	r0, [r4, #20]
   dd672:	2300      	movs	r3, #0
   dd674:	4632      	mov	r2, r6
   dd676:	4629      	mov	r1, r5
   dd678:	6800      	ldr	r0, [r0, #0]
   dd67a:	f7fd fd01 	bl	db080 <sock_send>
    if (ret < 0) {
   dd67e:	2800      	cmp	r0, #0
   dd680:	da04      	bge.n	dd68c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   dd682:	f7fd fe9b 	bl	db3bc <__errno>
   dd686:	6803      	ldr	r3, [r0, #0]
   dd688:	6063      	str	r3, [r4, #4]
   dd68a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   dd68c:	b004      	add	sp, #16
   dd68e:	bd70      	pop	{r4, r5, r6, pc}

000dd690 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dd690:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   dd692:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dd694:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   dd696:	689b      	ldr	r3, [r3, #8]
   dd698:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dd69a:	68a3      	ldr	r3, [r4, #8]
   dd69c:	3b01      	subs	r3, #1
   dd69e:	60a3      	str	r3, [r4, #8]
   dd6a0:	b92b      	cbnz	r3, dd6ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   dd6a2:	6823      	ldr	r3, [r4, #0]
   dd6a4:	4620      	mov	r0, r4
   dd6a6:	68db      	ldr	r3, [r3, #12]
        }
    }
   dd6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   dd6ac:	4718      	bx	r3
   dd6ae:	bd10      	pop	{r4, pc}

000dd6b0 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   dd6b0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dd6b2:	4604      	mov	r4, r0
   dd6b4:	694d      	ldr	r5, [r1, #20]
   dd6b6:	4b05      	ldr	r3, [pc, #20]	; (dd6cc <_ZN9TCPClient8remoteIPEv+0x1c>)
   dd6b8:	f844 3b04 	str.w	r3, [r4], #4
   dd6bc:	358c      	adds	r5, #140	; 0x8c
   dd6be:	4606      	mov	r6, r0
   dd6c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dd6c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dd6c4:	682b      	ldr	r3, [r5, #0]
   dd6c6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   dd6c8:	4630      	mov	r0, r6
   dd6ca:	bd70      	pop	{r4, r5, r6, pc}
   dd6cc:	000e4fac 	.word	0x000e4fac

000dd6d0 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   dd6d0:	b510      	push	{r4, lr}
   dd6d2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   dd6d4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dd6d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dd6dc:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   dd6de:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   dd6e0:	d005      	beq.n	dd6ee <_ZN9TCPClient4peekEv+0x1e>
   dd6e2:	6962      	ldr	r2, [r4, #20]
   dd6e4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dd6e8:	4413      	add	r3, r2
   dd6ea:	7918      	ldrb	r0, [r3, #4]
   dd6ec:	bd10      	pop	{r4, pc}
   dd6ee:	6803      	ldr	r3, [r0, #0]
   dd6f0:	691b      	ldr	r3, [r3, #16]
   dd6f2:	4798      	blx	r3
   dd6f4:	2800      	cmp	r0, #0
   dd6f6:	d1f4      	bne.n	dd6e2 <_ZN9TCPClient4peekEv+0x12>
   dd6f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   dd6fc:	bd10      	pop	{r4, pc}

000dd6fe <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   dd6fe:	b510      	push	{r4, lr}
   dd700:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   dd702:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dd706:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dd70a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   dd70c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   dd70e:	d008      	beq.n	dd722 <_ZN9TCPClient4readEv+0x24>
   dd710:	6962      	ldr	r2, [r4, #20]
   dd712:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dd716:	1c59      	adds	r1, r3, #1
   dd718:	4413      	add	r3, r2
   dd71a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   dd71e:	7918      	ldrb	r0, [r3, #4]
   dd720:	bd10      	pop	{r4, pc}
   dd722:	6803      	ldr	r3, [r0, #0]
   dd724:	691b      	ldr	r3, [r3, #16]
   dd726:	4798      	blx	r3
   dd728:	2800      	cmp	r0, #0
   dd72a:	d1f1      	bne.n	dd710 <_ZN9TCPClient4readEv+0x12>
   dd72c:	f04f 30ff 	mov.w	r0, #4294967295
}
   dd730:	bd10      	pop	{r4, pc}

000dd732 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   dd732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd734:	6943      	ldr	r3, [r0, #20]
   dd736:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   dd738:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dd73c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dd740:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   dd742:	4605      	mov	r5, r0
   dd744:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   dd746:	d106      	bne.n	dd756 <_ZN9TCPClient4readEPhj+0x24>
   dd748:	6803      	ldr	r3, [r0, #0]
   dd74a:	691b      	ldr	r3, [r3, #16]
   dd74c:	4798      	blx	r3
   dd74e:	b910      	cbnz	r0, dd756 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   dd750:	f04f 34ff 	mov.w	r4, #4294967295
   dd754:	e014      	b.n	dd780 <_ZN9TCPClient4readEPhj+0x4e>
   dd756:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   dd758:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   dd75c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   dd760:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   dd762:	42bc      	cmp	r4, r7
   dd764:	bf28      	it	cs
   dd766:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   dd768:	4419      	add	r1, r3
   dd76a:	4622      	mov	r2, r4
   dd76c:	3104      	adds	r1, #4
   dd76e:	4630      	mov	r0, r6
   dd770:	f003 fad7 	bl	e0d22 <memcpy>
   dd774:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   dd776:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   dd77a:	4423      	add	r3, r4
   dd77c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   dd780:	4620      	mov	r0, r4
   dd782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dd784 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dd784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd788:	4698      	mov	r8, r3
    stop();
   dd78a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dd78c:	b093      	sub	sp, #76	; 0x4c
    stop();
   dd78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   dd790:	460d      	mov	r5, r1
   dd792:	4606      	mov	r6, r0
   dd794:	4617      	mov	r7, r2
    stop();
   dd796:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   dd798:	ab12      	add	r3, sp, #72	; 0x48
   dd79a:	2400      	movs	r4, #0
   dd79c:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   dd7a0:	4622      	mov	r2, r4
   dd7a2:	4621      	mov	r1, r4
   dd7a4:	4628      	mov	r0, r5
   dd7a6:	f7fd fa2b 	bl	dac00 <netdb_getaddrinfo>
   dd7aa:	4681      	mov	r9, r0
   dd7ac:	2800      	cmp	r0, #0
   dd7ae:	d13d      	bne.n	dd82c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   dd7b0:	9b00      	ldr	r3, [sp, #0]
   dd7b2:	2b00      	cmp	r3, #0
   dd7b4:	d056      	beq.n	dd864 <_ZN9TCPClient7connectEPKctm+0xe0>
   dd7b6:	695b      	ldr	r3, [r3, #20]
   dd7b8:	2b00      	cmp	r3, #0
   dd7ba:	d053      	beq.n	dd864 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   dd7bc:	a806      	add	r0, sp, #24
   dd7be:	f7ff fb63 	bl	dce88 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   dd7c2:	9b00      	ldr	r3, [sp, #0]
   dd7c4:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   dd7c6:	7863      	ldrb	r3, [r4, #1]
   dd7c8:	2b02      	cmp	r3, #2
   dd7ca:	d101      	bne.n	dd7d0 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   dd7cc:	1d21      	adds	r1, r4, #4
   dd7ce:	e013      	b.n	dd7f8 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   dd7d0:	2b0a      	cmp	r3, #10
   dd7d2:	d114      	bne.n	dd7fe <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   dd7d4:	2211      	movs	r2, #17
   dd7d6:	4649      	mov	r1, r9
   dd7d8:	a801      	add	r0, sp, #4
   dd7da:	f003 faad 	bl	e0d38 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   dd7de:	68a3      	ldr	r3, [r4, #8]
   dd7e0:	bb33      	cbnz	r3, dd830 <_ZN9TCPClient7connectEPKctm+0xac>
   dd7e2:	68e3      	ldr	r3, [r4, #12]
   dd7e4:	bb23      	cbnz	r3, dd830 <_ZN9TCPClient7connectEPKctm+0xac>
   dd7e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   dd7ea:	6925      	ldr	r5, [r4, #16]
   dd7ec:	f7fd fb48 	bl	dae80 <inet_htonl>
   dd7f0:	4285      	cmp	r5, r0
   dd7f2:	d11d      	bne.n	dd830 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   dd7f4:	f104 0114 	add.w	r1, r4, #20
   dd7f8:	a806      	add	r0, sp, #24
   dd7fa:	f7ff fb95 	bl	dcf28 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   dd7fe:	a806      	add	r0, sp, #24
   dd800:	f7ff fb62 	bl	dcec8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   dd804:	2800      	cmp	r0, #0
   dd806:	d02d      	beq.n	dd864 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   dd808:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dd80a:	ad07      	add	r5, sp, #28
   dd80c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   dd810:	4b18      	ldr	r3, [pc, #96]	; (dd874 <_ZN9TCPClient7connectEPKctm+0xf0>)
   dd812:	930c      	str	r3, [sp, #48]	; 0x30
   dd814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dd816:	ac0d      	add	r4, sp, #52	; 0x34
   dd818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dd81a:	682b      	ldr	r3, [r5, #0]
   dd81c:	7023      	strb	r3, [r4, #0]
   dd81e:	463a      	mov	r2, r7
   dd820:	4643      	mov	r3, r8
   dd822:	a90c      	add	r1, sp, #48	; 0x30
   dd824:	4630      	mov	r0, r6
   dd826:	47c8      	blx	r9
   dd828:	4681      	mov	r9, r0
   dd82a:	e01b      	b.n	dd864 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   dd82c:	46a1      	mov	r9, r4
   dd82e:	e019      	b.n	dd864 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   dd830:	f104 0308 	add.w	r3, r4, #8
   dd834:	ad01      	add	r5, sp, #4
   dd836:	3418      	adds	r4, #24
   dd838:	6818      	ldr	r0, [r3, #0]
   dd83a:	6859      	ldr	r1, [r3, #4]
   dd83c:	462a      	mov	r2, r5
   dd83e:	c203      	stmia	r2!, {r0, r1}
   dd840:	3308      	adds	r3, #8
   dd842:	42a3      	cmp	r3, r4
   dd844:	4615      	mov	r5, r2
   dd846:	d1f7      	bne.n	dd838 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   dd848:	2306      	movs	r3, #6
            addr = IPAddress(a);
   dd84a:	a901      	add	r1, sp, #4
   dd84c:	a80c      	add	r0, sp, #48	; 0x30
   dd84e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   dd850:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   dd854:	f7ff fb26 	bl	dcea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dd858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dd85a:	ac07      	add	r4, sp, #28
   dd85c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dd85e:	682b      	ldr	r3, [r5, #0]
   dd860:	7023      	strb	r3, [r4, #0]
   dd862:	e7cc      	b.n	dd7fe <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   dd864:	9800      	ldr	r0, [sp, #0]
   dd866:	f7fd f9c3 	bl	dabf0 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   dd86a:	4648      	mov	r0, r9
   dd86c:	b013      	add	sp, #76	; 0x4c
   dd86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd872:	bf00      	nop
   dd874:	000e4fac 	.word	0x000e4fac

000dd878 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   dd878:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   dd87a:	2300      	movs	r3, #0
   dd87c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   dd880:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   dd882:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   dd886:	4770      	bx	lr

000dd888 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dd888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd88c:	461e      	mov	r6, r3
    stop();
   dd88e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dd890:	460c      	mov	r4, r1
   dd892:	b08a      	sub	sp, #40	; 0x28
    stop();
   dd894:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   dd896:	4605      	mov	r5, r0
   dd898:	4617      	mov	r7, r2
    stop();
   dd89a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   dd89c:	7d23      	ldrb	r3, [r4, #20]
   dd89e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   dd8a2:	2b04      	cmp	r3, #4
   dd8a4:	bf0c      	ite	eq
   dd8a6:	2002      	moveq	r0, #2
   dd8a8:	200a      	movne	r0, #10
   dd8aa:	2206      	movs	r2, #6
   dd8ac:	2101      	movs	r1, #1
   dd8ae:	f7fd fbf7 	bl	db0a0 <sock_socket>
   dd8b2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   dd8b6:	696b      	ldr	r3, [r5, #20]
   dd8b8:	681b      	ldr	r3, [r3, #0]
   dd8ba:	2b00      	cmp	r3, #0
   dd8bc:	db18      	blt.n	dd8f0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   dd8be:	4628      	mov	r0, r5
   dd8c0:	f7ff ffda 	bl	dd878 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   dd8c4:	b1d6      	cbz	r6, dd8fc <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   dd8c6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dd8c8:	a903      	add	r1, sp, #12
   dd8ca:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   dd8cc:	9303      	str	r3, [sp, #12]
   dd8ce:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dd8d2:	f7fd fa2d 	bl	dad30 <if_index_to_name>
   dd8d6:	b958      	cbnz	r0, dd8f0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   dd8d8:	6968      	ldr	r0, [r5, #20]
   dd8da:	2306      	movs	r3, #6
   dd8dc:	9300      	str	r3, [sp, #0]
   dd8de:	f241 020b 	movw	r2, #4107	; 0x100b
   dd8e2:	ab03      	add	r3, sp, #12
   dd8e4:	f640 71ff 	movw	r1, #4095	; 0xfff
   dd8e8:	6800      	ldr	r0, [r0, #0]
   dd8ea:	f7fd fba1 	bl	db030 <sock_setsockopt>
   dd8ee:	b128      	cbz	r0, dd8fc <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   dd8f0:	682b      	ldr	r3, [r5, #0]
   dd8f2:	4628      	mov	r0, r5
   dd8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   dd8f6:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   dd8f8:	4798      	blx	r3
   dd8fa:	e03b      	b.n	dd974 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   dd8fc:	261c      	movs	r6, #28
   dd8fe:	4632      	mov	r2, r6
   dd900:	2100      	movs	r1, #0
   dd902:	a803      	add	r0, sp, #12
   dd904:	f003 fa18 	bl	e0d38 <memset>
    if (ip.version() == 4) {
   dd908:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   dd90a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   dd90e:	2b04      	cmp	r3, #4
   dd910:	d10c      	bne.n	dd92c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   dd912:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   dd914:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   dd916:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   dd91a:	f7fd fac1 	bl	daea0 <inet_htons>
   dd91e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   dd922:	6860      	ldr	r0, [r4, #4]
   dd924:	f7fd faac 	bl	dae80 <inet_htonl>
   dd928:	9004      	str	r0, [sp, #16]
   dd92a:	e013      	b.n	dd954 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   dd92c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   dd92e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   dd930:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   dd934:	f7fd fab4 	bl	daea0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   dd938:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   dd93a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   dd93e:	1d23      	adds	r3, r4, #4
   dd940:	f104 0714 	add.w	r7, r4, #20
   dd944:	6818      	ldr	r0, [r3, #0]
   dd946:	6859      	ldr	r1, [r3, #4]
   dd948:	4632      	mov	r2, r6
   dd94a:	c203      	stmia	r2!, {r0, r1}
   dd94c:	3308      	adds	r3, #8
   dd94e:	42bb      	cmp	r3, r7
   dd950:	4616      	mov	r6, r2
   dd952:	d1f7      	bne.n	dd944 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   dd954:	696b      	ldr	r3, [r5, #20]
   dd956:	221c      	movs	r2, #28
   dd958:	a903      	add	r1, sp, #12
   dd95a:	6818      	ldr	r0, [r3, #0]
   dd95c:	f7fd fb78 	bl	db050 <sock_connect>
   dd960:	2800      	cmp	r0, #0
   dd962:	d1c5      	bne.n	dd8f0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   dd964:	3404      	adds	r4, #4
   dd966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dd968:	696d      	ldr	r5, [r5, #20]
   dd96a:	358c      	adds	r5, #140	; 0x8c
   dd96c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dd96e:	6823      	ldr	r3, [r4, #0]
   dd970:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   dd972:	2401      	movs	r4, #1
}
   dd974:	4620      	mov	r0, r4
   dd976:	b00a      	add	sp, #40	; 0x28
   dd978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dd97c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   dd97c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   dd97e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   dd980:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   dd982:	6818      	ldr	r0, [r3, #0]
   dd984:	2800      	cmp	r0, #0
   dd986:	db01      	blt.n	dd98c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   dd988:	f7fd fb5a 	bl	db040 <sock_close>
   dd98c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   dd98e:	f04f 32ff 	mov.w	r2, #4294967295
   dd992:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dd994:	6960      	ldr	r0, [r4, #20]
   dd996:	2211      	movs	r2, #17
   dd998:	2100      	movs	r1, #0
   dd99a:	308c      	adds	r0, #140	; 0x8c
   dd99c:	f003 f9cc 	bl	e0d38 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   dd9a0:	4620      	mov	r0, r4
}
   dd9a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   dd9a6:	f7ff bf67 	b.w	dd878 <_ZN9TCPClient12flush_bufferEv>
	...

000dd9ac <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   dd9ac:	b530      	push	{r4, r5, lr}
   dd9ae:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   dd9b0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   dd9b4:	b08b      	sub	sp, #44	; 0x2c
   dd9b6:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   dd9b8:	b11b      	cbz	r3, dd9c2 <_ZN9TCPClient9availableEv+0x16>
   dd9ba:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   dd9be:	429a      	cmp	r2, r3
   dd9c0:	d040      	beq.n	dda44 <_ZN9TCPClient9availableEv+0x98>
   dd9c2:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   dd9c4:	6818      	ldr	r0, [r3, #0]
   dd9c6:	2800      	cmp	r0, #0
   dd9c8:	db3f      	blt.n	dda4a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   dd9ca:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   dd9ce:	2d7f      	cmp	r5, #127	; 0x7f
   dd9d0:	d83b      	bhi.n	dda4a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   dd9d2:	1d19      	adds	r1, r3, #4
   dd9d4:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   dd9d8:	2308      	movs	r3, #8
   dd9da:	4429      	add	r1, r5
   dd9dc:	f7fd fb40 	bl	db060 <sock_recv>
            if (ret > 0) {
   dd9e0:	2800      	cmp	r0, #0
   dd9e2:	dd0c      	ble.n	dd9fe <_ZN9TCPClient9availableEv+0x52>
   dd9e4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   dd9e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dd9ea:	b90a      	cbnz	r2, dd9f0 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   dd9ec:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   dd9f0:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   dd9f2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dd9f6:	4418      	add	r0, r3
   dd9f8:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   dd9fc:	e025      	b.n	dda4a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   dd9fe:	f7fd fcdd 	bl	db3bc <__errno>
   dda02:	6803      	ldr	r3, [r0, #0]
   dda04:	2b0b      	cmp	r3, #11
   dda06:	d020      	beq.n	dda4a <_ZN9TCPClient9availableEv+0x9e>
   dda08:	f7fd fcd8 	bl	db3bc <__errno>
   dda0c:	6803      	ldr	r3, [r0, #0]
   dda0e:	2b0b      	cmp	r3, #11
   dda10:	d01b      	beq.n	dda4a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   dda12:	2320      	movs	r3, #32
   dda14:	2500      	movs	r5, #0
   dda16:	9302      	str	r3, [sp, #8]
   dda18:	9503      	str	r5, [sp, #12]
   dda1a:	f7fd fccf 	bl	db3bc <__errno>
   dda1e:	6803      	ldr	r3, [r0, #0]
   dda20:	9301      	str	r3, [sp, #4]
   dda22:	4b0e      	ldr	r3, [pc, #56]	; (dda5c <_ZN9TCPClient9availableEv+0xb0>)
   dda24:	9300      	str	r3, [sp, #0]
   dda26:	aa02      	add	r2, sp, #8
   dda28:	462b      	mov	r3, r5
   dda2a:	490d      	ldr	r1, [pc, #52]	; (dda60 <_ZN9TCPClient9availableEv+0xb4>)
   dda2c:	2032      	movs	r0, #50	; 0x32
   dda2e:	f7fd fb77 	bl	db120 <log_message>
                    sock_close(d_->sock);
   dda32:	6963      	ldr	r3, [r4, #20]
   dda34:	6818      	ldr	r0, [r3, #0]
   dda36:	f7fd fb03 	bl	db040 <sock_close>
   dda3a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   dda3c:	f04f 32ff 	mov.w	r2, #4294967295
   dda40:	601a      	str	r2, [r3, #0]
   dda42:	e002      	b.n	dda4a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   dda44:	f7ff ff18 	bl	dd878 <_ZN9TCPClient12flush_bufferEv>
   dda48:	e7bb      	b.n	dd9c2 <_ZN9TCPClient9availableEv+0x16>
   dda4a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   dda4c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   dda50:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   dda54:	1a18      	subs	r0, r3, r0
}
   dda56:	b00b      	add	sp, #44	; 0x2c
   dda58:	bd30      	pop	{r4, r5, pc}
   dda5a:	bf00      	nop
   dda5c:	000e5117 	.word	0x000e5117
   dda60:	000e5110 	.word	0x000e5110

000dda64 <_ZN9TCPClient6statusEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   dda64:	6943      	ldr	r3, [r0, #20]
   dda66:	6818      	ldr	r0, [r3, #0]
}
   dda68:	43c0      	mvns	r0, r0
   dda6a:	0fc0      	lsrs	r0, r0, #31
   dda6c:	4770      	bx	lr

000dda6e <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dda6e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   dda70:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   dda72:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   dda74:	6001      	str	r1, [r0, #0]
   dda76:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   dda7a:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   dda7e:	3088      	adds	r0, #136	; 0x88
   dda80:	f7ff fa02 	bl	dce88 <_ZN9IPAddressC1Ev>
}
   dda84:	4620      	mov	r0, r4
   dda86:	bd10      	pop	{r4, pc}

000dda88 <_ZN9TCPClientC1Ei>:
   dda88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dda8c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dda8e:	2300      	movs	r3, #0
   dda90:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   dda92:	4a14      	ldr	r2, [pc, #80]	; (ddae4 <_ZN9TCPClientC1Ei+0x5c>)
   dda94:	6043      	str	r3, [r0, #4]
   dda96:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   dda98:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dda9a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   dda9c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dda9e:	20a0      	movs	r0, #160	; 0xa0
   ddaa0:	460e      	mov	r6, r1
   ddaa2:	f7f6 fafa 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ddaa6:	4605      	mov	r5, r0
   ddaa8:	b110      	cbz	r0, ddab0 <_ZN9TCPClientC1Ei+0x28>
   ddaaa:	4631      	mov	r1, r6
   ddaac:	f7ff ffdf 	bl	dda6e <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ddab0:	2014      	movs	r0, #20
   ddab2:	f7f6 faf2 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   ddab6:	4603      	mov	r3, r0
   ddab8:	b128      	cbz	r0, ddac6 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   ddaba:	2201      	movs	r2, #1
   ddabc:	6042      	str	r2, [r0, #4]
   ddabe:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   ddac0:	4a09      	ldr	r2, [pc, #36]	; (ddae8 <_ZN9TCPClientC1Ei+0x60>)
   ddac2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   ddac4:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   ddac6:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   ddac8:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   ddaca:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   ddacc:	b128      	cbz	r0, ddada <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   ddace:	6843      	ldr	r3, [r0, #4]
   ddad0:	3b01      	subs	r3, #1
   ddad2:	6043      	str	r3, [r0, #4]
   ddad4:	b90b      	cbnz	r3, ddada <_ZN9TCPClientC1Ei+0x52>
   ddad6:	f7ff fddb 	bl	dd690 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   ddada:	4620      	mov	r0, r4
   ddadc:	f7ff fecc 	bl	dd878 <_ZN9TCPClient12flush_bufferEv>
}
   ddae0:	4620      	mov	r0, r4
   ddae2:	bd70      	pop	{r4, r5, r6, pc}
   ddae4:	000e50cc 	.word	0x000e50cc
   ddae8:	000e50b0 	.word	0x000e50b0

000ddaec <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   ddaec:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   ddaee:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   ddaf2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   ddaf4:	f7ff ffc8 	bl	dda88 <_ZN9TCPClientC1Ei>
}
   ddaf8:	4620      	mov	r0, r4
   ddafa:	bd10      	pop	{r4, pc}

000ddafc <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   ddafc:	b510      	push	{r4, lr}
   ddafe:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   ddb00:	6800      	ldr	r0, [r0, #0]
   ddb02:	2800      	cmp	r0, #0
   ddb04:	db01      	blt.n	ddb0a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   ddb06:	f7fd fa9b 	bl	db040 <sock_close>
    }
}
   ddb0a:	4620      	mov	r0, r4
   ddb0c:	bd10      	pop	{r4, pc}

000ddb0e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   ddb0e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   ddb10:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   ddb12:	4620      	mov	r0, r4
   ddb14:	f7ff fff2 	bl	ddafc <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   ddb18:	b124      	cbz	r4, ddb24 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   ddb1a:	4620      	mov	r0, r4
   ddb1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ddb20:	f7f6 babf 	b.w	d40a2 <_ZdlPv>
   ddb24:	bd10      	pop	{r4, pc}

000ddb26 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ddb26:	2300      	movs	r3, #0
   ddb28:	461a      	mov	r2, r3
   ddb2a:	6840      	ldr	r0, [r0, #4]
   ddb2c:	f7fd bb5e 	b.w	db1ec <network_connect>

000ddb30 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ddb30:	2200      	movs	r2, #0
   ddb32:	2102      	movs	r1, #2
   ddb34:	6840      	ldr	r0, [r0, #4]
   ddb36:	f7fd bb69 	b.w	db20c <network_disconnect>

000ddb3a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ddb3a:	2200      	movs	r2, #0
   ddb3c:	4611      	mov	r1, r2
   ddb3e:	6840      	ldr	r0, [r0, #4]
   ddb40:	f7fd bb5c 	b.w	db1fc <network_connecting>

000ddb44 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ddb44:	2200      	movs	r2, #0
   ddb46:	4611      	mov	r1, r2
   ddb48:	6840      	ldr	r0, [r0, #4]
   ddb4a:	f7fd bb67 	b.w	db21c <network_ready>

000ddb4e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ddb4e:	2300      	movs	r3, #0
   ddb50:	461a      	mov	r2, r3
   ddb52:	4619      	mov	r1, r3
   ddb54:	6840      	ldr	r0, [r0, #4]
   ddb56:	f7fd bb69 	b.w	db22c <network_on>

000ddb5a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ddb5a:	2300      	movs	r3, #0
   ddb5c:	461a      	mov	r2, r3
   ddb5e:	4619      	mov	r1, r3
   ddb60:	6840      	ldr	r0, [r0, #4]
   ddb62:	f7fd bb6b 	b.w	db23c <network_off>

000ddb66 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ddb66:	2200      	movs	r2, #0
   ddb68:	f081 0101 	eor.w	r1, r1, #1
   ddb6c:	6840      	ldr	r0, [r0, #4]
   ddb6e:	f7fd bb6d 	b.w	db24c <network_listen>

000ddb72 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ddb72:	2200      	movs	r2, #0
   ddb74:	6840      	ldr	r0, [r0, #4]
   ddb76:	f7fd bb79 	b.w	db26c <network_set_listen_timeout>

000ddb7a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ddb7a:	2200      	movs	r2, #0
   ddb7c:	4611      	mov	r1, r2
   ddb7e:	6840      	ldr	r0, [r0, #4]
   ddb80:	f7fd bb7c 	b.w	db27c <network_get_listen_timeout>

000ddb84 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ddb84:	2200      	movs	r2, #0
   ddb86:	4611      	mov	r1, r2
   ddb88:	6840      	ldr	r0, [r0, #4]
   ddb8a:	f7fd bb67 	b.w	db25c <network_listening>

000ddb8e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ddb8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ddb92:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   ddb94:	b095      	sub	sp, #84	; 0x54
   ddb96:	4616      	mov	r6, r2
   ddb98:	460d      	mov	r5, r1
   ddb9a:	4607      	mov	r7, r0
    IPAddress addr;
   ddb9c:	f7ff f974 	bl	dce88 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   ddba0:	4621      	mov	r1, r4
   ddba2:	2220      	movs	r2, #32
   ddba4:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ddba6:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   ddba8:	f003 f8c6 	bl	e0d38 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ddbac:	2340      	movs	r3, #64	; 0x40
   ddbae:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ddbb0:	4621      	mov	r1, r4
   ddbb2:	466b      	mov	r3, sp
   ddbb4:	aa0c      	add	r2, sp, #48	; 0x30
   ddbb6:	4630      	mov	r0, r6
   ddbb8:	f7fd f822 	bl	dac00 <netdb_getaddrinfo>
    if (!r) {
   ddbbc:	4604      	mov	r4, r0
   ddbbe:	2800      	cmp	r0, #0
   ddbc0:	d144      	bne.n	ddc4c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ddbc2:	4602      	mov	r2, r0
   ddbc4:	2101      	movs	r1, #1
   ddbc6:	6868      	ldr	r0, [r5, #4]
   ddbc8:	f7fd fb28 	bl	db21c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ddbcc:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ddbce:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ddbd0:	4622      	mov	r2, r4
   ddbd2:	6868      	ldr	r0, [r5, #4]
   ddbd4:	f7fd fb22 	bl	db21c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ddbd8:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ddbda:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   ddbdc:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ddbde:	2e00      	cmp	r6, #0
   ddbe0:	d034      	beq.n	ddc4c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   ddbe2:	2900      	cmp	r1, #0
   ddbe4:	d132      	bne.n	ddc4c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ddbe6:	6873      	ldr	r3, [r6, #4]
   ddbe8:	2b02      	cmp	r3, #2
   ddbea:	d002      	beq.n	ddbf2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ddbec:	2b0a      	cmp	r3, #10
   ddbee:	d009      	beq.n	ddc04 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   ddbf0:	e02a      	b.n	ddc48 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   ddbf2:	f1b8 0f00 	cmp.w	r8, #0
   ddbf6:	d027      	beq.n	ddc48 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ddbf8:	6971      	ldr	r1, [r6, #20]
   ddbfa:	4638      	mov	r0, r7
   ddbfc:	3104      	adds	r1, #4
   ddbfe:	f7ff f993 	bl	dcf28 <_ZN9IPAddressaSEPKh>
   ddc02:	e020      	b.n	ddc46 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ddc04:	f1b9 0f00 	cmp.w	r9, #0
   ddc08:	d01e      	beq.n	ddc48 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ddc0a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ddc0c:	2211      	movs	r2, #17
   ddc0e:	a801      	add	r0, sp, #4
   ddc10:	f003 f892 	bl	e0d38 <memset>
                    a.v = 6;
   ddc14:	2306      	movs	r3, #6
   ddc16:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ddc1a:	ad01      	add	r5, sp, #4
   ddc1c:	f104 0308 	add.w	r3, r4, #8
   ddc20:	3418      	adds	r4, #24
   ddc22:	6818      	ldr	r0, [r3, #0]
   ddc24:	6859      	ldr	r1, [r3, #4]
   ddc26:	462a      	mov	r2, r5
   ddc28:	c203      	stmia	r2!, {r0, r1}
   ddc2a:	3308      	adds	r3, #8
   ddc2c:	42a3      	cmp	r3, r4
   ddc2e:	4615      	mov	r5, r2
   ddc30:	d1f7      	bne.n	ddc22 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   ddc32:	a901      	add	r1, sp, #4
   ddc34:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   ddc36:	ad07      	add	r5, sp, #28
   ddc38:	f7ff f934 	bl	dcea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ddc3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ddc3e:	1d3c      	adds	r4, r7, #4
   ddc40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ddc42:	682b      	ldr	r3, [r5, #0]
   ddc44:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ddc46:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ddc48:	69f6      	ldr	r6, [r6, #28]
   ddc4a:	e7c8      	b.n	ddbde <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ddc4c:	9800      	ldr	r0, [sp, #0]
   ddc4e:	f7fc ffcf 	bl	dabf0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ddc52:	4638      	mov	r0, r7
   ddc54:	b015      	add	sp, #84	; 0x54
   ddc56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000ddc5c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ddc5c:	4b02      	ldr	r3, [pc, #8]	; (ddc68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ddc5e:	4a03      	ldr	r2, [pc, #12]	; (ddc6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ddc60:	601a      	str	r2, [r3, #0]
   ddc62:	2200      	movs	r2, #0
   ddc64:	605a      	str	r2, [r3, #4]
   ddc66:	4770      	bx	lr
   ddc68:	2003e600 	.word	0x2003e600
   ddc6c:	000e5130 	.word	0x000e5130

000ddc70 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   ddc70:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   ddc72:	4e18      	ldr	r6, [pc, #96]	; (ddcd4 <pinAvailable+0x64>)
   ddc74:	6831      	ldr	r1, [r6, #0]
   ddc76:	f011 0501 	ands.w	r5, r1, #1
   ddc7a:	4604      	mov	r4, r0
   ddc7c:	d10a      	bne.n	ddc94 <pinAvailable+0x24>
   ddc7e:	4630      	mov	r0, r6
   ddc80:	f7f6 fa13 	bl	d40aa <__cxa_guard_acquire>
   ddc84:	b130      	cbz	r0, ddc94 <pinAvailable+0x24>
   ddc86:	4629      	mov	r1, r5
   ddc88:	4813      	ldr	r0, [pc, #76]	; (ddcd8 <pinAvailable+0x68>)
   ddc8a:	f7fd fc0b 	bl	db4a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   ddc8e:	4630      	mov	r0, r6
   ddc90:	f7f6 fa10 	bl	d40b4 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   ddc94:	4810      	ldr	r0, [pc, #64]	; (ddcd8 <pinAvailable+0x68>)
   ddc96:	f7fd fcc2 	bl	db61e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   ddc9a:	b128      	cbz	r0, ddca8 <pinAvailable+0x38>
   ddc9c:	f1a4 030b 	sub.w	r3, r4, #11
   ddca0:	2b02      	cmp	r3, #2
   ddca2:	d801      	bhi.n	ddca8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   ddca4:	2000      	movs	r0, #0
   ddca6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   ddca8:	f000 f874 	bl	ddd94 <_Z19__fetch_global_Wirev>
   ddcac:	f7ff fb9d 	bl	dd3ea <_ZN7TwoWire9isEnabledEv>
   ddcb0:	b108      	cbz	r0, ddcb6 <pinAvailable+0x46>
   ddcb2:	2c01      	cmp	r4, #1
   ddcb4:	d9f6      	bls.n	ddca4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   ddcb6:	f7ff fadb 	bl	dd270 <_Z22__fetch_global_Serial1v>
   ddcba:	f7ff fad6 	bl	dd26a <_ZN11USARTSerial9isEnabledEv>
   ddcbe:	b118      	cbz	r0, ddcc8 <pinAvailable+0x58>
   ddcc0:	f1a4 0309 	sub.w	r3, r4, #9
   ddcc4:	2b01      	cmp	r3, #1
   ddcc6:	d9ed      	bls.n	ddca4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   ddcc8:	2c23      	cmp	r4, #35	; 0x23
   ddcca:	bf8c      	ite	hi
   ddccc:	2000      	movhi	r0, #0
   ddcce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   ddcd0:	bd70      	pop	{r4, r5, r6, pc}
   ddcd2:	bf00      	nop
   ddcd4:	2003bcec 	.word	0x2003bcec
   ddcd8:	2003bcf0 	.word	0x2003bcf0

000ddcdc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ddcdc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   ddcde:	b538      	push	{r3, r4, r5, lr}
   ddce0:	4604      	mov	r4, r0
   ddce2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ddce4:	d80a      	bhi.n	ddcfc <pinMode+0x20>
   ddce6:	29ff      	cmp	r1, #255	; 0xff
   ddce8:	d008      	beq.n	ddcfc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   ddcea:	f7ff ffc1 	bl	ddc70 <pinAvailable>
   ddcee:	b128      	cbz	r0, ddcfc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   ddcf0:	4629      	mov	r1, r5
   ddcf2:	4620      	mov	r0, r4
}
   ddcf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   ddcf8:	f7fc bf9a 	b.w	dac30 <HAL_Pin_Mode>
   ddcfc:	bd38      	pop	{r3, r4, r5, pc}

000ddcfe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   ddcfe:	b538      	push	{r3, r4, r5, lr}
   ddd00:	4604      	mov	r4, r0
   ddd02:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   ddd04:	f7fc ff9c 	bl	dac40 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   ddd08:	28ff      	cmp	r0, #255	; 0xff
   ddd0a:	d010      	beq.n	ddd2e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   ddd0c:	2806      	cmp	r0, #6
   ddd0e:	d804      	bhi.n	ddd1a <digitalWrite+0x1c>
   ddd10:	234d      	movs	r3, #77	; 0x4d
   ddd12:	fa23 f000 	lsr.w	r0, r3, r0
   ddd16:	07c3      	lsls	r3, r0, #31
   ddd18:	d409      	bmi.n	ddd2e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   ddd1a:	4620      	mov	r0, r4
   ddd1c:	f7ff ffa8 	bl	ddc70 <pinAvailable>
   ddd20:	b128      	cbz	r0, ddd2e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   ddd22:	4629      	mov	r1, r5
   ddd24:	4620      	mov	r0, r4
}
   ddd26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   ddd2a:	f7fc bf91 	b.w	dac50 <HAL_GPIO_Write>
   ddd2e:	bd38      	pop	{r3, r4, r5, pc}

000ddd30 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   ddd30:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   ddd32:	b510      	push	{r4, lr}
   ddd34:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   ddd36:	bf9c      	itt	ls
   ddd38:	340e      	addls	r4, #14
   ddd3a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   ddd3c:	4620      	mov	r0, r4
   ddd3e:	f7ff ff97 	bl	ddc70 <pinAvailable>
   ddd42:	b150      	cbz	r0, ddd5a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   ddd44:	2103      	movs	r1, #3
   ddd46:	4620      	mov	r0, r4
   ddd48:	f7fc ff6a 	bl	dac20 <HAL_Validate_Pin_Function>
   ddd4c:	2803      	cmp	r0, #3
   ddd4e:	d104      	bne.n	ddd5a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   ddd50:	4620      	mov	r0, r4
}
   ddd52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   ddd56:	f7fc bf93 	b.w	dac80 <HAL_ADC_Read>
}
   ddd5a:	2000      	movs	r0, #0
   ddd5c:	bd10      	pop	{r4, pc}
	...

000ddd60 <_Z17acquireWireBufferv>:
   ddd60:	b570      	push	{r4, r5, r6, lr}
   ddd62:	4604      	mov	r4, r0
   ddd64:	2514      	movs	r5, #20
   ddd66:	462a      	mov	r2, r5
   ddd68:	4e09      	ldr	r6, [pc, #36]	; (ddd90 <_Z17acquireWireBufferv+0x30>)
   ddd6a:	2100      	movs	r1, #0
   ddd6c:	f002 ffe4 	bl	e0d38 <memset>
   ddd70:	8025      	strh	r5, [r4, #0]
   ddd72:	2520      	movs	r5, #32
   ddd74:	4631      	mov	r1, r6
   ddd76:	60a5      	str	r5, [r4, #8]
   ddd78:	6125      	str	r5, [r4, #16]
   ddd7a:	4628      	mov	r0, r5
   ddd7c:	f000 f840 	bl	dde00 <_ZnajRKSt9nothrow_t>
   ddd80:	4631      	mov	r1, r6
   ddd82:	6060      	str	r0, [r4, #4]
   ddd84:	4628      	mov	r0, r5
   ddd86:	f000 f83b 	bl	dde00 <_ZnajRKSt9nothrow_t>
   ddd8a:	60e0      	str	r0, [r4, #12]
   ddd8c:	4620      	mov	r0, r4
   ddd8e:	bd70      	pop	{r4, r5, r6, pc}
   ddd90:	000e515c 	.word	0x000e515c

000ddd94 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   ddd94:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ddd96:	4d0e      	ldr	r5, [pc, #56]	; (dddd0 <_Z19__fetch_global_Wirev+0x3c>)
   ddd98:	6829      	ldr	r1, [r5, #0]
   ddd9a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   ddd9e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ddda0:	d113      	bne.n	dddca <_Z19__fetch_global_Wirev+0x36>
   ddda2:	4628      	mov	r0, r5
   ddda4:	f7f6 f981 	bl	d40aa <__cxa_guard_acquire>
   ddda8:	b178      	cbz	r0, dddca <_Z19__fetch_global_Wirev+0x36>
   dddaa:	a801      	add	r0, sp, #4
   dddac:	f7ff ffd8 	bl	ddd60 <_Z17acquireWireBufferv>
   dddb0:	aa01      	add	r2, sp, #4
   dddb2:	4621      	mov	r1, r4
   dddb4:	4807      	ldr	r0, [pc, #28]	; (dddd4 <_Z19__fetch_global_Wirev+0x40>)
   dddb6:	f7ff fac1 	bl	dd33c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   dddba:	4628      	mov	r0, r5
   dddbc:	f7f6 f97a 	bl	d40b4 <__cxa_guard_release>
   dddc0:	4a05      	ldr	r2, [pc, #20]	; (dddd8 <_Z19__fetch_global_Wirev+0x44>)
   dddc2:	4906      	ldr	r1, [pc, #24]	; (ddddc <_Z19__fetch_global_Wirev+0x48>)
   dddc4:	4803      	ldr	r0, [pc, #12]	; (dddd4 <_Z19__fetch_global_Wirev+0x40>)
   dddc6:	f000 f80b 	bl	ddde0 <__aeabi_atexit>
	return wire;
}
   dddca:	4802      	ldr	r0, [pc, #8]	; (dddd4 <_Z19__fetch_global_Wirev+0x40>)
   dddcc:	b007      	add	sp, #28
   dddce:	bd30      	pop	{r4, r5, pc}
   dddd0:	2003e60c 	.word	0x2003e60c
   dddd4:	2003e610 	.word	0x2003e610
   dddd8:	2003bce8 	.word	0x2003bce8
   ddddc:	000dd2e5 	.word	0x000dd2e5

000ddde0 <__aeabi_atexit>:
   ddde0:	460b      	mov	r3, r1
   ddde2:	4601      	mov	r1, r0
   ddde4:	4618      	mov	r0, r3
   ddde6:	f002 be83 	b.w	e0af0 <__cxa_atexit>
	...

000dddec <_ZSt15get_new_handlerv>:
   dddec:	4b02      	ldr	r3, [pc, #8]	; (dddf8 <_ZSt15get_new_handlerv+0xc>)
   dddee:	6818      	ldr	r0, [r3, #0]
   dddf0:	f3bf 8f5f 	dmb	sy
   dddf4:	4770      	bx	lr
   dddf6:	bf00      	nop
   dddf8:	2003e624 	.word	0x2003e624

000dddfc <_ZdlPvj>:
   dddfc:	f7f6 b951 	b.w	d40a2 <_ZdlPv>

000dde00 <_ZnajRKSt9nothrow_t>:
   dde00:	f000 b800 	b.w	dde04 <_ZnwjRKSt9nothrow_t>

000dde04 <_ZnwjRKSt9nothrow_t>:
   dde04:	b510      	push	{r4, lr}
   dde06:	2800      	cmp	r0, #0
   dde08:	bf14      	ite	ne
   dde0a:	4604      	movne	r4, r0
   dde0c:	2401      	moveq	r4, #1
   dde0e:	4620      	mov	r0, r4
   dde10:	f7fd fa7c 	bl	db30c <malloc>
   dde14:	b920      	cbnz	r0, dde20 <_ZnwjRKSt9nothrow_t+0x1c>
   dde16:	f7ff ffe9 	bl	dddec <_ZSt15get_new_handlerv>
   dde1a:	b108      	cbz	r0, dde20 <_ZnwjRKSt9nothrow_t+0x1c>
   dde1c:	4780      	blx	r0
   dde1e:	e7f6      	b.n	dde0e <_ZnwjRKSt9nothrow_t+0xa>
   dde20:	bd10      	pop	{r4, pc}

000dde22 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   dde22:	68c3      	ldr	r3, [r0, #12]
   dde24:	689a      	ldr	r2, [r3, #8]
   dde26:	60c2      	str	r2, [r0, #12]
   dde28:	b102      	cbz	r2, dde2c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
   dde2a:	6050      	str	r0, [r2, #4]
   dde2c:	6842      	ldr	r2, [r0, #4]
   dde2e:	605a      	str	r2, [r3, #4]
   dde30:	680a      	ldr	r2, [r1, #0]
   dde32:	4290      	cmp	r0, r2
   dde34:	d101      	bne.n	dde3a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
   dde36:	600b      	str	r3, [r1, #0]
   dde38:	e005      	b.n	dde46 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
   dde3a:	6842      	ldr	r2, [r0, #4]
   dde3c:	6891      	ldr	r1, [r2, #8]
   dde3e:	4288      	cmp	r0, r1
   dde40:	bf0c      	ite	eq
   dde42:	6093      	streq	r3, [r2, #8]
   dde44:	60d3      	strne	r3, [r2, #12]
   dde46:	6098      	str	r0, [r3, #8]
   dde48:	6043      	str	r3, [r0, #4]
   dde4a:	4770      	bx	lr

000dde4c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   dde4c:	6883      	ldr	r3, [r0, #8]
   dde4e:	68da      	ldr	r2, [r3, #12]
   dde50:	6082      	str	r2, [r0, #8]
   dde52:	b102      	cbz	r2, dde56 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
   dde54:	6050      	str	r0, [r2, #4]
   dde56:	6842      	ldr	r2, [r0, #4]
   dde58:	605a      	str	r2, [r3, #4]
   dde5a:	680a      	ldr	r2, [r1, #0]
   dde5c:	4290      	cmp	r0, r2
   dde5e:	d101      	bne.n	dde64 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
   dde60:	600b      	str	r3, [r1, #0]
   dde62:	e005      	b.n	dde70 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
   dde64:	6842      	ldr	r2, [r0, #4]
   dde66:	68d1      	ldr	r1, [r2, #12]
   dde68:	4288      	cmp	r0, r1
   dde6a:	bf0c      	ite	eq
   dde6c:	60d3      	streq	r3, [r2, #12]
   dde6e:	6093      	strne	r3, [r2, #8]
   dde70:	60d8      	str	r0, [r3, #12]
   dde72:	6043      	str	r3, [r0, #4]
   dde74:	4770      	bx	lr

000dde76 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   dde76:	7803      	ldrb	r3, [r0, #0]
   dde78:	b92b      	cbnz	r3, dde86 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   dde7a:	6843      	ldr	r3, [r0, #4]
   dde7c:	685b      	ldr	r3, [r3, #4]
   dde7e:	4298      	cmp	r0, r3
   dde80:	d101      	bne.n	dde86 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   dde82:	68c3      	ldr	r3, [r0, #12]
   dde84:	e00c      	b.n	ddea0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   dde86:	6883      	ldr	r3, [r0, #8]
   dde88:	b11b      	cbz	r3, dde92 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
   dde8a:	68da      	ldr	r2, [r3, #12]
   dde8c:	b142      	cbz	r2, ddea0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   dde8e:	4613      	mov	r3, r2
   dde90:	e7fb      	b.n	dde8a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
   dde92:	6843      	ldr	r3, [r0, #4]
   dde94:	689a      	ldr	r2, [r3, #8]
   dde96:	4282      	cmp	r2, r0
   dde98:	d102      	bne.n	ddea0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   dde9a:	4618      	mov	r0, r3
   dde9c:	685b      	ldr	r3, [r3, #4]
   dde9e:	e7f9      	b.n	dde94 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
   ddea0:	4618      	mov	r0, r3
   ddea2:	4770      	bx	lr

000ddea4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   ddea4:	68c3      	ldr	r3, [r0, #12]
   ddea6:	b123      	cbz	r3, ddeb2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   ddea8:	4618      	mov	r0, r3
   ddeaa:	689b      	ldr	r3, [r3, #8]
   ddeac:	2b00      	cmp	r3, #0
   ddeae:	d1fb      	bne.n	ddea8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   ddeb0:	e00a      	b.n	ddec8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
   ddeb2:	6843      	ldr	r3, [r0, #4]
   ddeb4:	68da      	ldr	r2, [r3, #12]
   ddeb6:	4282      	cmp	r2, r0
   ddeb8:	d102      	bne.n	ddec0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   ddeba:	4618      	mov	r0, r3
   ddebc:	685b      	ldr	r3, [r3, #4]
   ddebe:	e7f9      	b.n	ddeb4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   ddec0:	68c2      	ldr	r2, [r0, #12]
   ddec2:	4293      	cmp	r3, r2
   ddec4:	bf18      	it	ne
   ddec6:	4618      	movne	r0, r3
   ddec8:	4770      	bx	lr

000ddeca <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
   ddeca:	68c3      	ldr	r3, [r0, #12]
   ddecc:	b123      	cbz	r3, dded8 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0xe>
   ddece:	4618      	mov	r0, r3
   dded0:	689b      	ldr	r3, [r3, #8]
   dded2:	2b00      	cmp	r3, #0
   dded4:	d1fb      	bne.n	ddece <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x4>
   dded6:	e00a      	b.n	ddeee <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x24>
   dded8:	6843      	ldr	r3, [r0, #4]
   ddeda:	68da      	ldr	r2, [r3, #12]
   ddedc:	4282      	cmp	r2, r0
   ddede:	d102      	bne.n	ddee6 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x1c>
   ddee0:	4618      	mov	r0, r3
   ddee2:	685b      	ldr	r3, [r3, #4]
   ddee4:	e7f9      	b.n	ddeda <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x10>
   ddee6:	68c2      	ldr	r2, [r0, #12]
   ddee8:	4293      	cmp	r3, r2
   ddeea:	bf18      	it	ne
   ddeec:	4618      	movne	r0, r3
   ddeee:	4770      	bx	lr

000ddef0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   ddef0:	f7ff bfc1 	b.w	dde76 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000ddef4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   ddef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddef8:	461f      	mov	r7, r3
   ddefa:	f103 0904 	add.w	r9, r3, #4
   ddefe:	2300      	movs	r3, #0
   ddf00:	460c      	mov	r4, r1
   ddf02:	604a      	str	r2, [r1, #4]
   ddf04:	608b      	str	r3, [r1, #8]
   ddf06:	60cb      	str	r3, [r1, #12]
   ddf08:	700b      	strb	r3, [r1, #0]
   ddf0a:	b168      	cbz	r0, ddf28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
   ddf0c:	4297      	cmp	r7, r2
   ddf0e:	6091      	str	r1, [r2, #8]
   ddf10:	d101      	bne.n	ddf16 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   ddf12:	6079      	str	r1, [r7, #4]
   ddf14:	e00c      	b.n	ddf30 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
   ddf16:	68bb      	ldr	r3, [r7, #8]
   ddf18:	429a      	cmp	r2, r3
   ddf1a:	bf08      	it	eq
   ddf1c:	60b9      	streq	r1, [r7, #8]
   ddf1e:	f04f 0801 	mov.w	r8, #1
   ddf22:	f04f 0a00 	mov.w	sl, #0
   ddf26:	e017      	b.n	ddf58 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   ddf28:	60d1      	str	r1, [r2, #12]
   ddf2a:	68fb      	ldr	r3, [r7, #12]
   ddf2c:	429a      	cmp	r2, r3
   ddf2e:	d1f6      	bne.n	ddf1e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   ddf30:	60fc      	str	r4, [r7, #12]
   ddf32:	e7f4      	b.n	ddf1e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   ddf34:	6866      	ldr	r6, [r4, #4]
   ddf36:	7832      	ldrb	r2, [r6, #0]
   ddf38:	2a00      	cmp	r2, #0
   ddf3a:	d13a      	bne.n	ddfb2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   ddf3c:	6875      	ldr	r5, [r6, #4]
   ddf3e:	68ab      	ldr	r3, [r5, #8]
   ddf40:	429e      	cmp	r6, r3
   ddf42:	d11f      	bne.n	ddf84 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
   ddf44:	68eb      	ldr	r3, [r5, #12]
   ddf46:	b15b      	cbz	r3, ddf60 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   ddf48:	781a      	ldrb	r2, [r3, #0]
   ddf4a:	b94a      	cbnz	r2, ddf60 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   ddf4c:	f886 8000 	strb.w	r8, [r6]
   ddf50:	f883 8000 	strb.w	r8, [r3]
   ddf54:	702a      	strb	r2, [r5, #0]
   ddf56:	462c      	mov	r4, r5
   ddf58:	687b      	ldr	r3, [r7, #4]
   ddf5a:	429c      	cmp	r4, r3
   ddf5c:	d1ea      	bne.n	ddf34 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
   ddf5e:	e028      	b.n	ddfb2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   ddf60:	68f3      	ldr	r3, [r6, #12]
   ddf62:	429c      	cmp	r4, r3
   ddf64:	d104      	bne.n	ddf70 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
   ddf66:	4649      	mov	r1, r9
   ddf68:	4630      	mov	r0, r6
   ddf6a:	f7ff ff5a 	bl	dde22 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   ddf6e:	4634      	mov	r4, r6
   ddf70:	6863      	ldr	r3, [r4, #4]
   ddf72:	4649      	mov	r1, r9
   ddf74:	f883 8000 	strb.w	r8, [r3]
   ddf78:	4628      	mov	r0, r5
   ddf7a:	f885 a000 	strb.w	sl, [r5]
   ddf7e:	f7ff ff65 	bl	dde4c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   ddf82:	e014      	b.n	ddfae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
   ddf84:	b113      	cbz	r3, ddf8c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
   ddf86:	781a      	ldrb	r2, [r3, #0]
   ddf88:	2a00      	cmp	r2, #0
   ddf8a:	d0df      	beq.n	ddf4c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
   ddf8c:	68b3      	ldr	r3, [r6, #8]
   ddf8e:	429c      	cmp	r4, r3
   ddf90:	d104      	bne.n	ddf9c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
   ddf92:	4649      	mov	r1, r9
   ddf94:	4630      	mov	r0, r6
   ddf96:	f7ff ff59 	bl	dde4c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   ddf9a:	4634      	mov	r4, r6
   ddf9c:	6863      	ldr	r3, [r4, #4]
   ddf9e:	4649      	mov	r1, r9
   ddfa0:	f883 8000 	strb.w	r8, [r3]
   ddfa4:	4628      	mov	r0, r5
   ddfa6:	f885 a000 	strb.w	sl, [r5]
   ddfaa:	f7ff ff3a 	bl	dde22 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   ddfae:	4625      	mov	r5, r4
   ddfb0:	e7d1      	b.n	ddf56 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
   ddfb2:	2201      	movs	r2, #1
   ddfb4:	701a      	strb	r2, [r3, #0]
   ddfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000ddfba <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
   ddfba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddfbe:	460f      	mov	r7, r1
   ddfc0:	6881      	ldr	r1, [r0, #8]
   ddfc2:	68c2      	ldr	r2, [r0, #12]
   ddfc4:	4605      	mov	r5, r0
   ddfc6:	b909      	cbnz	r1, ddfcc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x12>
   ddfc8:	4616      	mov	r6, r2
   ddfca:	e029      	b.n	de020 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x66>
   ddfcc:	4614      	mov	r4, r2
   ddfce:	2a00      	cmp	r2, #0
   ddfd0:	f000 80c5 	beq.w	de15e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a4>
   ddfd4:	4613      	mov	r3, r2
   ddfd6:	6898      	ldr	r0, [r3, #8]
   ddfd8:	b108      	cbz	r0, ddfde <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x24>
   ddfda:	4603      	mov	r3, r0
   ddfdc:	e7fb      	b.n	ddfd6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c>
   ddfde:	42ab      	cmp	r3, r5
   ddfe0:	68de      	ldr	r6, [r3, #12]
   ddfe2:	d01d      	beq.n	de020 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x66>
   ddfe4:	4293      	cmp	r3, r2
   ddfe6:	604b      	str	r3, [r1, #4]
   ddfe8:	6099      	str	r1, [r3, #8]
   ddfea:	d007      	beq.n	ddffc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x42>
   ddfec:	685c      	ldr	r4, [r3, #4]
   ddfee:	b106      	cbz	r6, ddff2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x38>
   ddff0:	6074      	str	r4, [r6, #4]
   ddff2:	6859      	ldr	r1, [r3, #4]
   ddff4:	608e      	str	r6, [r1, #8]
   ddff6:	60da      	str	r2, [r3, #12]
   ddff8:	68ea      	ldr	r2, [r5, #12]
   ddffa:	6053      	str	r3, [r2, #4]
   ddffc:	687a      	ldr	r2, [r7, #4]
   ddffe:	4295      	cmp	r5, r2
   de000:	d101      	bne.n	de006 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x4c>
   de002:	607b      	str	r3, [r7, #4]
   de004:	e005      	b.n	de012 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x58>
   de006:	686a      	ldr	r2, [r5, #4]
   de008:	6891      	ldr	r1, [r2, #8]
   de00a:	428d      	cmp	r5, r1
   de00c:	bf0c      	ite	eq
   de00e:	6093      	streq	r3, [r2, #8]
   de010:	60d3      	strne	r3, [r2, #12]
   de012:	686a      	ldr	r2, [r5, #4]
   de014:	605a      	str	r2, [r3, #4]
   de016:	7829      	ldrb	r1, [r5, #0]
   de018:	781a      	ldrb	r2, [r3, #0]
   de01a:	7019      	strb	r1, [r3, #0]
   de01c:	702a      	strb	r2, [r5, #0]
   de01e:	e027      	b.n	de070 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb6>
   de020:	686c      	ldr	r4, [r5, #4]
   de022:	b106      	cbz	r6, de026 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x6c>
   de024:	6074      	str	r4, [r6, #4]
   de026:	687b      	ldr	r3, [r7, #4]
   de028:	429d      	cmp	r5, r3
   de02a:	d101      	bne.n	de030 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
   de02c:	607e      	str	r6, [r7, #4]
   de02e:	e005      	b.n	de03c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x82>
   de030:	686b      	ldr	r3, [r5, #4]
   de032:	689a      	ldr	r2, [r3, #8]
   de034:	4295      	cmp	r5, r2
   de036:	bf0c      	ite	eq
   de038:	609e      	streq	r6, [r3, #8]
   de03a:	60de      	strne	r6, [r3, #12]
   de03c:	68bb      	ldr	r3, [r7, #8]
   de03e:	429d      	cmp	r5, r3
   de040:	d109      	bne.n	de056 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9c>
   de042:	68eb      	ldr	r3, [r5, #12]
   de044:	b90b      	cbnz	r3, de04a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   de046:	686b      	ldr	r3, [r5, #4]
   de048:	e004      	b.n	de054 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9a>
   de04a:	4633      	mov	r3, r6
   de04c:	689a      	ldr	r2, [r3, #8]
   de04e:	b10a      	cbz	r2, de054 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9a>
   de050:	4613      	mov	r3, r2
   de052:	e7fb      	b.n	de04c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x92>
   de054:	60bb      	str	r3, [r7, #8]
   de056:	68fb      	ldr	r3, [r7, #12]
   de058:	429d      	cmp	r5, r3
   de05a:	d109      	bne.n	de070 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb6>
   de05c:	68ab      	ldr	r3, [r5, #8]
   de05e:	b90b      	cbnz	r3, de064 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xaa>
   de060:	686b      	ldr	r3, [r5, #4]
   de062:	e004      	b.n	de06e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb4>
   de064:	4633      	mov	r3, r6
   de066:	68da      	ldr	r2, [r3, #12]
   de068:	b10a      	cbz	r2, de06e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb4>
   de06a:	4613      	mov	r3, r2
   de06c:	e7fb      	b.n	de066 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   de06e:	60fb      	str	r3, [r7, #12]
   de070:	782b      	ldrb	r3, [r5, #0]
   de072:	2b00      	cmp	r3, #0
   de074:	d076      	beq.n	de164 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   de076:	f107 0804 	add.w	r8, r7, #4
   de07a:	f04f 0900 	mov.w	r9, #0
   de07e:	f04f 0a01 	mov.w	sl, #1
   de082:	687b      	ldr	r3, [r7, #4]
   de084:	429e      	cmp	r6, r3
   de086:	d067      	beq.n	de158 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19e>
   de088:	b12e      	cbz	r6, de096 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   de08a:	7833      	ldrb	r3, [r6, #0]
   de08c:	2b01      	cmp	r3, #1
   de08e:	d002      	beq.n	de096 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   de090:	2301      	movs	r3, #1
   de092:	7033      	strb	r3, [r6, #0]
   de094:	e066      	b.n	de164 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   de096:	68a0      	ldr	r0, [r4, #8]
   de098:	4286      	cmp	r6, r0
   de09a:	d12c      	bne.n	de0f6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x13c>
   de09c:	68e0      	ldr	r0, [r4, #12]
   de09e:	7803      	ldrb	r3, [r0, #0]
   de0a0:	b93b      	cbnz	r3, de0b2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xf8>
   de0a2:	f880 a000 	strb.w	sl, [r0]
   de0a6:	4641      	mov	r1, r8
   de0a8:	4620      	mov	r0, r4
   de0aa:	7023      	strb	r3, [r4, #0]
   de0ac:	f7ff feb9 	bl	dde22 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   de0b0:	68e0      	ldr	r0, [r4, #12]
   de0b2:	6882      	ldr	r2, [r0, #8]
   de0b4:	68c3      	ldr	r3, [r0, #12]
   de0b6:	b112      	cbz	r2, de0be <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x104>
   de0b8:	7811      	ldrb	r1, [r2, #0]
   de0ba:	2901      	cmp	r1, #1
   de0bc:	d103      	bne.n	de0c6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x10c>
   de0be:	b373      	cbz	r3, de11e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   de0c0:	7819      	ldrb	r1, [r3, #0]
   de0c2:	2901      	cmp	r1, #1
   de0c4:	d02b      	beq.n	de11e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   de0c6:	b113      	cbz	r3, de0ce <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x114>
   de0c8:	781b      	ldrb	r3, [r3, #0]
   de0ca:	2b01      	cmp	r3, #1
   de0cc:	d107      	bne.n	de0de <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   de0ce:	2301      	movs	r3, #1
   de0d0:	7013      	strb	r3, [r2, #0]
   de0d2:	2300      	movs	r3, #0
   de0d4:	7003      	strb	r3, [r0, #0]
   de0d6:	4641      	mov	r1, r8
   de0d8:	f7ff feb8 	bl	dde4c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   de0dc:	68e0      	ldr	r0, [r4, #12]
   de0de:	7823      	ldrb	r3, [r4, #0]
   de0e0:	7003      	strb	r3, [r0, #0]
   de0e2:	68c3      	ldr	r3, [r0, #12]
   de0e4:	2201      	movs	r2, #1
   de0e6:	7022      	strb	r2, [r4, #0]
   de0e8:	b103      	cbz	r3, de0ec <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x132>
   de0ea:	701a      	strb	r2, [r3, #0]
   de0ec:	4641      	mov	r1, r8
   de0ee:	4620      	mov	r0, r4
   de0f0:	f7ff fe97 	bl	dde22 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   de0f4:	e030      	b.n	de158 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19e>
   de0f6:	7803      	ldrb	r3, [r0, #0]
   de0f8:	b93b      	cbnz	r3, de10a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x150>
   de0fa:	f880 a000 	strb.w	sl, [r0]
   de0fe:	4641      	mov	r1, r8
   de100:	4620      	mov	r0, r4
   de102:	7023      	strb	r3, [r4, #0]
   de104:	f7ff fea2 	bl	dde4c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   de108:	68a0      	ldr	r0, [r4, #8]
   de10a:	68c2      	ldr	r2, [r0, #12]
   de10c:	6883      	ldr	r3, [r0, #8]
   de10e:	b112      	cbz	r2, de116 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15c>
   de110:	7811      	ldrb	r1, [r2, #0]
   de112:	2901      	cmp	r1, #1
   de114:	d109      	bne.n	de12a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x170>
   de116:	b113      	cbz	r3, de11e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   de118:	7819      	ldrb	r1, [r3, #0]
   de11a:	2901      	cmp	r1, #1
   de11c:	d105      	bne.n	de12a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x170>
   de11e:	6863      	ldr	r3, [r4, #4]
   de120:	f880 9000 	strb.w	r9, [r0]
   de124:	4626      	mov	r6, r4
   de126:	461c      	mov	r4, r3
   de128:	e7ab      	b.n	de082 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc8>
   de12a:	b113      	cbz	r3, de132 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x178>
   de12c:	781b      	ldrb	r3, [r3, #0]
   de12e:	2b01      	cmp	r3, #1
   de130:	d107      	bne.n	de142 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x188>
   de132:	2301      	movs	r3, #1
   de134:	7013      	strb	r3, [r2, #0]
   de136:	2300      	movs	r3, #0
   de138:	7003      	strb	r3, [r0, #0]
   de13a:	4641      	mov	r1, r8
   de13c:	f7ff fe71 	bl	dde22 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   de140:	68a0      	ldr	r0, [r4, #8]
   de142:	7823      	ldrb	r3, [r4, #0]
   de144:	7003      	strb	r3, [r0, #0]
   de146:	6883      	ldr	r3, [r0, #8]
   de148:	2201      	movs	r2, #1
   de14a:	7022      	strb	r2, [r4, #0]
   de14c:	b103      	cbz	r3, de150 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x196>
   de14e:	701a      	strb	r2, [r3, #0]
   de150:	4641      	mov	r1, r8
   de152:	4620      	mov	r0, r4
   de154:	f7ff fe7a 	bl	dde4c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   de158:	2e00      	cmp	r6, #0
   de15a:	d199      	bne.n	de090 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd6>
   de15c:	e002      	b.n	de164 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   de15e:	6844      	ldr	r4, [r0, #4]
   de160:	460e      	mov	r6, r1
   de162:	e75f      	b.n	de024 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x6a>
   de164:	4628      	mov	r0, r5
   de166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000de16a <_ZSt25__throw_bad_function_callv>:
   de16a:	b508      	push	{r3, lr}
   de16c:	f7fd f916 	bl	db39c <abort>

000de170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   de170:	4b18      	ldr	r3, [pc, #96]	; (de1d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   de172:	681a      	ldr	r2, [r3, #0]
   de174:	07d1      	lsls	r1, r2, #31
   de176:	bf5c      	itt	pl
   de178:	2201      	movpl	r2, #1
   de17a:	601a      	strpl	r2, [r3, #0]
   de17c:	4b16      	ldr	r3, [pc, #88]	; (de1d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   de17e:	681a      	ldr	r2, [r3, #0]
   de180:	07d2      	lsls	r2, r2, #31
   de182:	bf5c      	itt	pl
   de184:	2201      	movpl	r2, #1
   de186:	601a      	strpl	r2, [r3, #0]
   de188:	4b14      	ldr	r3, [pc, #80]	; (de1dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   de18a:	681a      	ldr	r2, [r3, #0]
   de18c:	07d0      	lsls	r0, r2, #31
   de18e:	bf5c      	itt	pl
   de190:	2201      	movpl	r2, #1
   de192:	601a      	strpl	r2, [r3, #0]
   de194:	4b12      	ldr	r3, [pc, #72]	; (de1e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   de196:	681a      	ldr	r2, [r3, #0]
   de198:	07d1      	lsls	r1, r2, #31
   de19a:	bf5c      	itt	pl
   de19c:	2201      	movpl	r2, #1
   de19e:	601a      	strpl	r2, [r3, #0]
   de1a0:	4b10      	ldr	r3, [pc, #64]	; (de1e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   de1a2:	681a      	ldr	r2, [r3, #0]
   de1a4:	07d2      	lsls	r2, r2, #31
   de1a6:	bf5c      	itt	pl
   de1a8:	2201      	movpl	r2, #1
   de1aa:	601a      	strpl	r2, [r3, #0]
   de1ac:	4b0e      	ldr	r3, [pc, #56]	; (de1e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   de1ae:	681a      	ldr	r2, [r3, #0]
   de1b0:	07d0      	lsls	r0, r2, #31
   de1b2:	bf5c      	itt	pl
   de1b4:	2201      	movpl	r2, #1
   de1b6:	601a      	strpl	r2, [r3, #0]
   de1b8:	4b0c      	ldr	r3, [pc, #48]	; (de1ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   de1ba:	681a      	ldr	r2, [r3, #0]
   de1bc:	07d1      	lsls	r1, r2, #31
   de1be:	bf5c      	itt	pl
   de1c0:	2201      	movpl	r2, #1
   de1c2:	601a      	strpl	r2, [r3, #0]
   de1c4:	4b0a      	ldr	r3, [pc, #40]	; (de1f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   de1c6:	681a      	ldr	r2, [r3, #0]
   de1c8:	07d2      	lsls	r2, r2, #31
   de1ca:	bf5c      	itt	pl
   de1cc:	2201      	movpl	r2, #1
   de1ce:	601a      	strpl	r2, [r3, #0]
   de1d0:	4770      	bx	lr
   de1d2:	bf00      	nop
   de1d4:	2003e644 	.word	0x2003e644
   de1d8:	2003e640 	.word	0x2003e640
   de1dc:	2003e63c 	.word	0x2003e63c
   de1e0:	2003e638 	.word	0x2003e638
   de1e4:	2003e634 	.word	0x2003e634
   de1e8:	2003e630 	.word	0x2003e630
   de1ec:	2003e62c 	.word	0x2003e62c
   de1f0:	2003e628 	.word	0x2003e628

000de1f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   de1f4:	4b24      	ldr	r3, [pc, #144]	; (de288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   de1f6:	681a      	ldr	r2, [r3, #0]
   de1f8:	07d0      	lsls	r0, r2, #31
   de1fa:	bf5c      	itt	pl
   de1fc:	2201      	movpl	r2, #1
   de1fe:	601a      	strpl	r2, [r3, #0]
   de200:	4b22      	ldr	r3, [pc, #136]	; (de28c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   de202:	681a      	ldr	r2, [r3, #0]
   de204:	07d1      	lsls	r1, r2, #31
   de206:	bf5c      	itt	pl
   de208:	2201      	movpl	r2, #1
   de20a:	601a      	strpl	r2, [r3, #0]
   de20c:	4b20      	ldr	r3, [pc, #128]	; (de290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   de20e:	681a      	ldr	r2, [r3, #0]
   de210:	07d2      	lsls	r2, r2, #31
   de212:	bf5c      	itt	pl
   de214:	2201      	movpl	r2, #1
   de216:	601a      	strpl	r2, [r3, #0]
   de218:	4b1e      	ldr	r3, [pc, #120]	; (de294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   de21a:	681a      	ldr	r2, [r3, #0]
   de21c:	07d0      	lsls	r0, r2, #31
   de21e:	bf5c      	itt	pl
   de220:	2201      	movpl	r2, #1
   de222:	601a      	strpl	r2, [r3, #0]
   de224:	4b1c      	ldr	r3, [pc, #112]	; (de298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   de226:	681a      	ldr	r2, [r3, #0]
   de228:	07d1      	lsls	r1, r2, #31
   de22a:	bf5c      	itt	pl
   de22c:	2201      	movpl	r2, #1
   de22e:	601a      	strpl	r2, [r3, #0]
   de230:	4b1a      	ldr	r3, [pc, #104]	; (de29c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   de232:	681a      	ldr	r2, [r3, #0]
   de234:	07d2      	lsls	r2, r2, #31
   de236:	bf5c      	itt	pl
   de238:	2201      	movpl	r2, #1
   de23a:	601a      	strpl	r2, [r3, #0]
   de23c:	4b18      	ldr	r3, [pc, #96]	; (de2a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   de23e:	681a      	ldr	r2, [r3, #0]
   de240:	07d0      	lsls	r0, r2, #31
   de242:	bf5c      	itt	pl
   de244:	2201      	movpl	r2, #1
   de246:	601a      	strpl	r2, [r3, #0]
   de248:	4b16      	ldr	r3, [pc, #88]	; (de2a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   de24a:	681a      	ldr	r2, [r3, #0]
   de24c:	07d1      	lsls	r1, r2, #31
   de24e:	bf5c      	itt	pl
   de250:	2201      	movpl	r2, #1
   de252:	601a      	strpl	r2, [r3, #0]
   de254:	4b14      	ldr	r3, [pc, #80]	; (de2a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   de256:	681a      	ldr	r2, [r3, #0]
   de258:	07d2      	lsls	r2, r2, #31
   de25a:	bf5c      	itt	pl
   de25c:	2201      	movpl	r2, #1
   de25e:	601a      	strpl	r2, [r3, #0]
   de260:	4b12      	ldr	r3, [pc, #72]	; (de2ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   de262:	681a      	ldr	r2, [r3, #0]
   de264:	07d0      	lsls	r0, r2, #31
   de266:	bf5c      	itt	pl
   de268:	2201      	movpl	r2, #1
   de26a:	601a      	strpl	r2, [r3, #0]
   de26c:	4b10      	ldr	r3, [pc, #64]	; (de2b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   de26e:	681a      	ldr	r2, [r3, #0]
   de270:	07d1      	lsls	r1, r2, #31
   de272:	bf5c      	itt	pl
   de274:	2201      	movpl	r2, #1
   de276:	601a      	strpl	r2, [r3, #0]
   de278:	4b0e      	ldr	r3, [pc, #56]	; (de2b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   de27a:	681a      	ldr	r2, [r3, #0]
   de27c:	07d2      	lsls	r2, r2, #31
   de27e:	bf5c      	itt	pl
   de280:	2201      	movpl	r2, #1
   de282:	601a      	strpl	r2, [r3, #0]
   de284:	4770      	bx	lr
   de286:	bf00      	nop
   de288:	2003e674 	.word	0x2003e674
   de28c:	2003e670 	.word	0x2003e670
   de290:	2003e66c 	.word	0x2003e66c
   de294:	2003e668 	.word	0x2003e668
   de298:	2003e664 	.word	0x2003e664
   de29c:	2003e660 	.word	0x2003e660
   de2a0:	2003e65c 	.word	0x2003e65c
   de2a4:	2003e658 	.word	0x2003e658
   de2a8:	2003e654 	.word	0x2003e654
   de2ac:	2003e650 	.word	0x2003e650
   de2b0:	2003e64c 	.word	0x2003e64c
   de2b4:	2003e648 	.word	0x2003e648

000de2b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   de2b8:	4b24      	ldr	r3, [pc, #144]	; (de34c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   de2ba:	681a      	ldr	r2, [r3, #0]
   de2bc:	07d0      	lsls	r0, r2, #31
   de2be:	bf5c      	itt	pl
   de2c0:	2201      	movpl	r2, #1
   de2c2:	601a      	strpl	r2, [r3, #0]
   de2c4:	4b22      	ldr	r3, [pc, #136]	; (de350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   de2c6:	681a      	ldr	r2, [r3, #0]
   de2c8:	07d1      	lsls	r1, r2, #31
   de2ca:	bf5c      	itt	pl
   de2cc:	2201      	movpl	r2, #1
   de2ce:	601a      	strpl	r2, [r3, #0]
   de2d0:	4b20      	ldr	r3, [pc, #128]	; (de354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   de2d2:	681a      	ldr	r2, [r3, #0]
   de2d4:	07d2      	lsls	r2, r2, #31
   de2d6:	bf5c      	itt	pl
   de2d8:	2201      	movpl	r2, #1
   de2da:	601a      	strpl	r2, [r3, #0]
   de2dc:	4b1e      	ldr	r3, [pc, #120]	; (de358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   de2de:	681a      	ldr	r2, [r3, #0]
   de2e0:	07d0      	lsls	r0, r2, #31
   de2e2:	bf5c      	itt	pl
   de2e4:	2201      	movpl	r2, #1
   de2e6:	601a      	strpl	r2, [r3, #0]
   de2e8:	4b1c      	ldr	r3, [pc, #112]	; (de35c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   de2ea:	681a      	ldr	r2, [r3, #0]
   de2ec:	07d1      	lsls	r1, r2, #31
   de2ee:	bf5c      	itt	pl
   de2f0:	2201      	movpl	r2, #1
   de2f2:	601a      	strpl	r2, [r3, #0]
   de2f4:	4b1a      	ldr	r3, [pc, #104]	; (de360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   de2f6:	681a      	ldr	r2, [r3, #0]
   de2f8:	07d2      	lsls	r2, r2, #31
   de2fa:	bf5c      	itt	pl
   de2fc:	2201      	movpl	r2, #1
   de2fe:	601a      	strpl	r2, [r3, #0]
   de300:	4b18      	ldr	r3, [pc, #96]	; (de364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   de302:	681a      	ldr	r2, [r3, #0]
   de304:	07d0      	lsls	r0, r2, #31
   de306:	bf5c      	itt	pl
   de308:	2201      	movpl	r2, #1
   de30a:	601a      	strpl	r2, [r3, #0]
   de30c:	4b16      	ldr	r3, [pc, #88]	; (de368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   de30e:	681a      	ldr	r2, [r3, #0]
   de310:	07d1      	lsls	r1, r2, #31
   de312:	bf5c      	itt	pl
   de314:	2201      	movpl	r2, #1
   de316:	601a      	strpl	r2, [r3, #0]
   de318:	4b14      	ldr	r3, [pc, #80]	; (de36c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   de31a:	681a      	ldr	r2, [r3, #0]
   de31c:	07d2      	lsls	r2, r2, #31
   de31e:	bf5c      	itt	pl
   de320:	2201      	movpl	r2, #1
   de322:	601a      	strpl	r2, [r3, #0]
   de324:	4b12      	ldr	r3, [pc, #72]	; (de370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   de326:	681a      	ldr	r2, [r3, #0]
   de328:	07d0      	lsls	r0, r2, #31
   de32a:	bf5c      	itt	pl
   de32c:	2201      	movpl	r2, #1
   de32e:	601a      	strpl	r2, [r3, #0]
   de330:	4b10      	ldr	r3, [pc, #64]	; (de374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   de332:	681a      	ldr	r2, [r3, #0]
   de334:	07d1      	lsls	r1, r2, #31
   de336:	bf5c      	itt	pl
   de338:	2201      	movpl	r2, #1
   de33a:	601a      	strpl	r2, [r3, #0]
   de33c:	4b0e      	ldr	r3, [pc, #56]	; (de378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   de33e:	681a      	ldr	r2, [r3, #0]
   de340:	07d2      	lsls	r2, r2, #31
   de342:	bf5c      	itt	pl
   de344:	2201      	movpl	r2, #1
   de346:	601a      	strpl	r2, [r3, #0]
   de348:	4770      	bx	lr
   de34a:	bf00      	nop
   de34c:	2003e6a4 	.word	0x2003e6a4
   de350:	2003e6a0 	.word	0x2003e6a0
   de354:	2003e69c 	.word	0x2003e69c
   de358:	2003e698 	.word	0x2003e698
   de35c:	2003e694 	.word	0x2003e694
   de360:	2003e690 	.word	0x2003e690
   de364:	2003e68c 	.word	0x2003e68c
   de368:	2003e688 	.word	0x2003e688
   de36c:	2003e684 	.word	0x2003e684
   de370:	2003e680 	.word	0x2003e680
   de374:	2003e67c 	.word	0x2003e67c
   de378:	2003e678 	.word	0x2003e678

000de37c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   de37c:	4b18      	ldr	r3, [pc, #96]	; (de3e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   de37e:	681a      	ldr	r2, [r3, #0]
   de380:	07d1      	lsls	r1, r2, #31
   de382:	bf5c      	itt	pl
   de384:	2201      	movpl	r2, #1
   de386:	601a      	strpl	r2, [r3, #0]
   de388:	4b16      	ldr	r3, [pc, #88]	; (de3e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   de38a:	681a      	ldr	r2, [r3, #0]
   de38c:	07d2      	lsls	r2, r2, #31
   de38e:	bf5c      	itt	pl
   de390:	2201      	movpl	r2, #1
   de392:	601a      	strpl	r2, [r3, #0]
   de394:	4b14      	ldr	r3, [pc, #80]	; (de3e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   de396:	681a      	ldr	r2, [r3, #0]
   de398:	07d0      	lsls	r0, r2, #31
   de39a:	bf5c      	itt	pl
   de39c:	2201      	movpl	r2, #1
   de39e:	601a      	strpl	r2, [r3, #0]
   de3a0:	4b12      	ldr	r3, [pc, #72]	; (de3ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   de3a2:	681a      	ldr	r2, [r3, #0]
   de3a4:	07d1      	lsls	r1, r2, #31
   de3a6:	bf5c      	itt	pl
   de3a8:	2201      	movpl	r2, #1
   de3aa:	601a      	strpl	r2, [r3, #0]
   de3ac:	4b10      	ldr	r3, [pc, #64]	; (de3f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   de3ae:	681a      	ldr	r2, [r3, #0]
   de3b0:	07d2      	lsls	r2, r2, #31
   de3b2:	bf5c      	itt	pl
   de3b4:	2201      	movpl	r2, #1
   de3b6:	601a      	strpl	r2, [r3, #0]
   de3b8:	4b0e      	ldr	r3, [pc, #56]	; (de3f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   de3ba:	681a      	ldr	r2, [r3, #0]
   de3bc:	07d0      	lsls	r0, r2, #31
   de3be:	bf5c      	itt	pl
   de3c0:	2201      	movpl	r2, #1
   de3c2:	601a      	strpl	r2, [r3, #0]
   de3c4:	4b0c      	ldr	r3, [pc, #48]	; (de3f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   de3c6:	681a      	ldr	r2, [r3, #0]
   de3c8:	07d1      	lsls	r1, r2, #31
   de3ca:	bf5c      	itt	pl
   de3cc:	2201      	movpl	r2, #1
   de3ce:	601a      	strpl	r2, [r3, #0]
   de3d0:	4b0a      	ldr	r3, [pc, #40]	; (de3fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   de3d2:	681a      	ldr	r2, [r3, #0]
   de3d4:	07d2      	lsls	r2, r2, #31
   de3d6:	bf5c      	itt	pl
   de3d8:	2201      	movpl	r2, #1
   de3da:	601a      	strpl	r2, [r3, #0]
   de3dc:	4770      	bx	lr
   de3de:	bf00      	nop
   de3e0:	2003e6c4 	.word	0x2003e6c4
   de3e4:	2003e6c0 	.word	0x2003e6c0
   de3e8:	2003e6bc 	.word	0x2003e6bc
   de3ec:	2003e6b8 	.word	0x2003e6b8
   de3f0:	2003e6b4 	.word	0x2003e6b4
   de3f4:	2003e6b0 	.word	0x2003e6b0
   de3f8:	2003e6ac 	.word	0x2003e6ac
   de3fc:	2003e6a8 	.word	0x2003e6a8

000de400 <atan>:
   de400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de404:	ec55 4b10 	vmov	r4, r5, d0
   de408:	4bd1      	ldr	r3, [pc, #836]	; (de750 <atan+0x350>)
   de40a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   de40e:	429e      	cmp	r6, r3
   de410:	46ab      	mov	fp, r5
   de412:	dd10      	ble.n	de436 <atan+0x36>
   de414:	4bcf      	ldr	r3, [pc, #828]	; (de754 <atan+0x354>)
   de416:	429e      	cmp	r6, r3
   de418:	f300 80b2 	bgt.w	de580 <atan+0x180>
   de41c:	f000 80ad 	beq.w	de57a <atan+0x17a>
   de420:	f1bb 0f00 	cmp.w	fp, #0
   de424:	f340 80fd 	ble.w	de622 <atan+0x222>
   de428:	a5ad      	add	r5, pc, #692	; (adr r5, de6e0 <atan+0x2e0>)
   de42a:	e9d5 4500 	ldrd	r4, r5, [r5]
   de42e:	ec45 4b10 	vmov	d0, r4, r5
   de432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de436:	4bc8      	ldr	r3, [pc, #800]	; (de758 <atan+0x358>)
   de438:	429e      	cmp	r6, r3
   de43a:	f300 80c0 	bgt.w	de5be <atan+0x1be>
   de43e:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   de442:	429e      	cmp	r6, r3
   de444:	f340 80a8 	ble.w	de598 <atan+0x198>
   de448:	f04f 3aff 	mov.w	sl, #4294967295
   de44c:	4622      	mov	r2, r4
   de44e:	462b      	mov	r3, r5
   de450:	4620      	mov	r0, r4
   de452:	4629      	mov	r1, r5
   de454:	f001 fe0c 	bl	e0070 <__aeabi_dmul>
   de458:	4602      	mov	r2, r0
   de45a:	460b      	mov	r3, r1
   de45c:	4680      	mov	r8, r0
   de45e:	4689      	mov	r9, r1
   de460:	f001 fe06 	bl	e0070 <__aeabi_dmul>
   de464:	a3a0      	add	r3, pc, #640	; (adr r3, de6e8 <atan+0x2e8>)
   de466:	e9d3 2300 	ldrd	r2, r3, [r3]
   de46a:	4606      	mov	r6, r0
   de46c:	460f      	mov	r7, r1
   de46e:	f001 fdff 	bl	e0070 <__aeabi_dmul>
   de472:	a39f      	add	r3, pc, #636	; (adr r3, de6f0 <atan+0x2f0>)
   de474:	e9d3 2300 	ldrd	r2, r3, [r3]
   de478:	f001 fc48 	bl	dfd0c <__adddf3>
   de47c:	4632      	mov	r2, r6
   de47e:	463b      	mov	r3, r7
   de480:	f001 fdf6 	bl	e0070 <__aeabi_dmul>
   de484:	a39c      	add	r3, pc, #624	; (adr r3, de6f8 <atan+0x2f8>)
   de486:	e9d3 2300 	ldrd	r2, r3, [r3]
   de48a:	f001 fc3f 	bl	dfd0c <__adddf3>
   de48e:	4632      	mov	r2, r6
   de490:	463b      	mov	r3, r7
   de492:	f001 fded 	bl	e0070 <__aeabi_dmul>
   de496:	a39a      	add	r3, pc, #616	; (adr r3, de700 <atan+0x300>)
   de498:	e9d3 2300 	ldrd	r2, r3, [r3]
   de49c:	f001 fc36 	bl	dfd0c <__adddf3>
   de4a0:	4632      	mov	r2, r6
   de4a2:	463b      	mov	r3, r7
   de4a4:	f001 fde4 	bl	e0070 <__aeabi_dmul>
   de4a8:	a397      	add	r3, pc, #604	; (adr r3, de708 <atan+0x308>)
   de4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   de4ae:	f001 fc2d 	bl	dfd0c <__adddf3>
   de4b2:	4632      	mov	r2, r6
   de4b4:	463b      	mov	r3, r7
   de4b6:	f001 fddb 	bl	e0070 <__aeabi_dmul>
   de4ba:	a395      	add	r3, pc, #596	; (adr r3, de710 <atan+0x310>)
   de4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   de4c0:	f001 fc24 	bl	dfd0c <__adddf3>
   de4c4:	4642      	mov	r2, r8
   de4c6:	464b      	mov	r3, r9
   de4c8:	f001 fdd2 	bl	e0070 <__aeabi_dmul>
   de4cc:	a392      	add	r3, pc, #584	; (adr r3, de718 <atan+0x318>)
   de4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   de4d2:	4680      	mov	r8, r0
   de4d4:	4689      	mov	r9, r1
   de4d6:	4630      	mov	r0, r6
   de4d8:	4639      	mov	r1, r7
   de4da:	f001 fdc9 	bl	e0070 <__aeabi_dmul>
   de4de:	a390      	add	r3, pc, #576	; (adr r3, de720 <atan+0x320>)
   de4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   de4e4:	f001 fc10 	bl	dfd08 <__aeabi_dsub>
   de4e8:	4632      	mov	r2, r6
   de4ea:	463b      	mov	r3, r7
   de4ec:	f001 fdc0 	bl	e0070 <__aeabi_dmul>
   de4f0:	a38d      	add	r3, pc, #564	; (adr r3, de728 <atan+0x328>)
   de4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   de4f6:	f001 fc07 	bl	dfd08 <__aeabi_dsub>
   de4fa:	4632      	mov	r2, r6
   de4fc:	463b      	mov	r3, r7
   de4fe:	f001 fdb7 	bl	e0070 <__aeabi_dmul>
   de502:	a38b      	add	r3, pc, #556	; (adr r3, de730 <atan+0x330>)
   de504:	e9d3 2300 	ldrd	r2, r3, [r3]
   de508:	f001 fbfe 	bl	dfd08 <__aeabi_dsub>
   de50c:	4632      	mov	r2, r6
   de50e:	463b      	mov	r3, r7
   de510:	f001 fdae 	bl	e0070 <__aeabi_dmul>
   de514:	a388      	add	r3, pc, #544	; (adr r3, de738 <atan+0x338>)
   de516:	e9d3 2300 	ldrd	r2, r3, [r3]
   de51a:	f001 fbf5 	bl	dfd08 <__aeabi_dsub>
   de51e:	4632      	mov	r2, r6
   de520:	463b      	mov	r3, r7
   de522:	f001 fda5 	bl	e0070 <__aeabi_dmul>
   de526:	f1ba 3fff 	cmp.w	sl, #4294967295
   de52a:	4602      	mov	r2, r0
   de52c:	460b      	mov	r3, r1
   de52e:	d07c      	beq.n	de62a <atan+0x22a>
   de530:	4640      	mov	r0, r8
   de532:	4649      	mov	r1, r9
   de534:	f001 fbea 	bl	dfd0c <__adddf3>
   de538:	4622      	mov	r2, r4
   de53a:	462b      	mov	r3, r5
   de53c:	f001 fd98 	bl	e0070 <__aeabi_dmul>
   de540:	4e86      	ldr	r6, [pc, #536]	; (de75c <atan+0x35c>)
   de542:	4b87      	ldr	r3, [pc, #540]	; (de760 <atan+0x360>)
   de544:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   de548:	4456      	add	r6, sl
   de54a:	449a      	add	sl, r3
   de54c:	e9da 2300 	ldrd	r2, r3, [sl]
   de550:	f001 fbda 	bl	dfd08 <__aeabi_dsub>
   de554:	4622      	mov	r2, r4
   de556:	462b      	mov	r3, r5
   de558:	f001 fbd6 	bl	dfd08 <__aeabi_dsub>
   de55c:	4602      	mov	r2, r0
   de55e:	460b      	mov	r3, r1
   de560:	e9d6 0100 	ldrd	r0, r1, [r6]
   de564:	f001 fbd0 	bl	dfd08 <__aeabi_dsub>
   de568:	f1bb 0f00 	cmp.w	fp, #0
   de56c:	db52      	blt.n	de614 <atan+0x214>
   de56e:	4604      	mov	r4, r0
   de570:	460d      	mov	r5, r1
   de572:	ec45 4b10 	vmov	d0, r4, r5
   de576:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de57a:	2c00      	cmp	r4, #0
   de57c:	f43f af50 	beq.w	de420 <atan+0x20>
   de580:	4622      	mov	r2, r4
   de582:	462b      	mov	r3, r5
   de584:	4620      	mov	r0, r4
   de586:	4629      	mov	r1, r5
   de588:	f001 fbc0 	bl	dfd0c <__adddf3>
   de58c:	4604      	mov	r4, r0
   de58e:	460d      	mov	r5, r1
   de590:	ec45 4b10 	vmov	d0, r4, r5
   de594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de598:	a369      	add	r3, pc, #420	; (adr r3, de740 <atan+0x340>)
   de59a:	e9d3 2300 	ldrd	r2, r3, [r3]
   de59e:	ee10 0a10 	vmov	r0, s0
   de5a2:	4629      	mov	r1, r5
   de5a4:	f001 fbb2 	bl	dfd0c <__adddf3>
   de5a8:	2200      	movs	r2, #0
   de5aa:	4b6e      	ldr	r3, [pc, #440]	; (de764 <atan+0x364>)
   de5ac:	f001 fff0 	bl	e0590 <__aeabi_dcmpgt>
   de5b0:	2800      	cmp	r0, #0
   de5b2:	f43f af49 	beq.w	de448 <atan+0x48>
   de5b6:	ec45 4b10 	vmov	d0, r4, r5
   de5ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de5be:	f000 f9cb 	bl	de958 <fabs>
   de5c2:	4b69      	ldr	r3, [pc, #420]	; (de768 <atan+0x368>)
   de5c4:	429e      	cmp	r6, r3
   de5c6:	ec55 4b10 	vmov	r4, r5, d0
   de5ca:	dc3f      	bgt.n	de64c <atan+0x24c>
   de5cc:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   de5d0:	429e      	cmp	r6, r3
   de5d2:	dc68      	bgt.n	de6a6 <atan+0x2a6>
   de5d4:	ee10 2a10 	vmov	r2, s0
   de5d8:	ee10 0a10 	vmov	r0, s0
   de5dc:	462b      	mov	r3, r5
   de5de:	4629      	mov	r1, r5
   de5e0:	f001 fb94 	bl	dfd0c <__adddf3>
   de5e4:	2200      	movs	r2, #0
   de5e6:	4b5f      	ldr	r3, [pc, #380]	; (de764 <atan+0x364>)
   de5e8:	f001 fb8e 	bl	dfd08 <__aeabi_dsub>
   de5ec:	2200      	movs	r2, #0
   de5ee:	4606      	mov	r6, r0
   de5f0:	460f      	mov	r7, r1
   de5f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   de5f6:	4620      	mov	r0, r4
   de5f8:	4629      	mov	r1, r5
   de5fa:	f001 fb87 	bl	dfd0c <__adddf3>
   de5fe:	4602      	mov	r2, r0
   de600:	460b      	mov	r3, r1
   de602:	4630      	mov	r0, r6
   de604:	4639      	mov	r1, r7
   de606:	f001 fe5d 	bl	e02c4 <__aeabi_ddiv>
   de60a:	f04f 0a00 	mov.w	sl, #0
   de60e:	4604      	mov	r4, r0
   de610:	460d      	mov	r5, r1
   de612:	e71b      	b.n	de44c <atan+0x4c>
   de614:	4604      	mov	r4, r0
   de616:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   de61a:	ec45 4b10 	vmov	d0, r4, r5
   de61e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de622:	a549      	add	r5, pc, #292	; (adr r5, de748 <atan+0x348>)
   de624:	e9d5 4500 	ldrd	r4, r5, [r5]
   de628:	e7b2      	b.n	de590 <atan+0x190>
   de62a:	4640      	mov	r0, r8
   de62c:	4649      	mov	r1, r9
   de62e:	f001 fb6d 	bl	dfd0c <__adddf3>
   de632:	4622      	mov	r2, r4
   de634:	462b      	mov	r3, r5
   de636:	f001 fd1b 	bl	e0070 <__aeabi_dmul>
   de63a:	4602      	mov	r2, r0
   de63c:	460b      	mov	r3, r1
   de63e:	4620      	mov	r0, r4
   de640:	4629      	mov	r1, r5
   de642:	f001 fb61 	bl	dfd08 <__aeabi_dsub>
   de646:	4604      	mov	r4, r0
   de648:	460d      	mov	r5, r1
   de64a:	e7a1      	b.n	de590 <atan+0x190>
   de64c:	4b47      	ldr	r3, [pc, #284]	; (de76c <atan+0x36c>)
   de64e:	429e      	cmp	r6, r3
   de650:	dc1d      	bgt.n	de68e <atan+0x28e>
   de652:	ee10 0a10 	vmov	r0, s0
   de656:	2200      	movs	r2, #0
   de658:	4b45      	ldr	r3, [pc, #276]	; (de770 <atan+0x370>)
   de65a:	4629      	mov	r1, r5
   de65c:	f001 fb54 	bl	dfd08 <__aeabi_dsub>
   de660:	2200      	movs	r2, #0
   de662:	4606      	mov	r6, r0
   de664:	460f      	mov	r7, r1
   de666:	4b42      	ldr	r3, [pc, #264]	; (de770 <atan+0x370>)
   de668:	4620      	mov	r0, r4
   de66a:	4629      	mov	r1, r5
   de66c:	f001 fd00 	bl	e0070 <__aeabi_dmul>
   de670:	2200      	movs	r2, #0
   de672:	4b3c      	ldr	r3, [pc, #240]	; (de764 <atan+0x364>)
   de674:	f001 fb4a 	bl	dfd0c <__adddf3>
   de678:	4602      	mov	r2, r0
   de67a:	460b      	mov	r3, r1
   de67c:	4630      	mov	r0, r6
   de67e:	4639      	mov	r1, r7
   de680:	f001 fe20 	bl	e02c4 <__aeabi_ddiv>
   de684:	f04f 0a02 	mov.w	sl, #2
   de688:	4604      	mov	r4, r0
   de68a:	460d      	mov	r5, r1
   de68c:	e6de      	b.n	de44c <atan+0x4c>
   de68e:	462b      	mov	r3, r5
   de690:	ee10 2a10 	vmov	r2, s0
   de694:	2000      	movs	r0, #0
   de696:	4937      	ldr	r1, [pc, #220]	; (de774 <atan+0x374>)
   de698:	f001 fe14 	bl	e02c4 <__aeabi_ddiv>
   de69c:	f04f 0a03 	mov.w	sl, #3
   de6a0:	4604      	mov	r4, r0
   de6a2:	460d      	mov	r5, r1
   de6a4:	e6d2      	b.n	de44c <atan+0x4c>
   de6a6:	ee10 0a10 	vmov	r0, s0
   de6aa:	2200      	movs	r2, #0
   de6ac:	4b2d      	ldr	r3, [pc, #180]	; (de764 <atan+0x364>)
   de6ae:	4629      	mov	r1, r5
   de6b0:	f001 fb2a 	bl	dfd08 <__aeabi_dsub>
   de6b4:	2200      	movs	r2, #0
   de6b6:	4606      	mov	r6, r0
   de6b8:	460f      	mov	r7, r1
   de6ba:	4b2a      	ldr	r3, [pc, #168]	; (de764 <atan+0x364>)
   de6bc:	4620      	mov	r0, r4
   de6be:	4629      	mov	r1, r5
   de6c0:	f001 fb24 	bl	dfd0c <__adddf3>
   de6c4:	4602      	mov	r2, r0
   de6c6:	460b      	mov	r3, r1
   de6c8:	4630      	mov	r0, r6
   de6ca:	4639      	mov	r1, r7
   de6cc:	f001 fdfa 	bl	e02c4 <__aeabi_ddiv>
   de6d0:	f04f 0a01 	mov.w	sl, #1
   de6d4:	4604      	mov	r4, r0
   de6d6:	460d      	mov	r5, r1
   de6d8:	e6b8      	b.n	de44c <atan+0x4c>
   de6da:	bf00      	nop
   de6dc:	f3af 8000 	nop.w
   de6e0:	54442d18 	.word	0x54442d18
   de6e4:	3ff921fb 	.word	0x3ff921fb
   de6e8:	e322da11 	.word	0xe322da11
   de6ec:	3f90ad3a 	.word	0x3f90ad3a
   de6f0:	24760deb 	.word	0x24760deb
   de6f4:	3fa97b4b 	.word	0x3fa97b4b
   de6f8:	a0d03d51 	.word	0xa0d03d51
   de6fc:	3fb10d66 	.word	0x3fb10d66
   de700:	c54c206e 	.word	0xc54c206e
   de704:	3fb745cd 	.word	0x3fb745cd
   de708:	920083ff 	.word	0x920083ff
   de70c:	3fc24924 	.word	0x3fc24924
   de710:	5555550d 	.word	0x5555550d
   de714:	3fd55555 	.word	0x3fd55555
   de718:	2c6a6c2f 	.word	0x2c6a6c2f
   de71c:	bfa2b444 	.word	0xbfa2b444
   de720:	52defd9a 	.word	0x52defd9a
   de724:	3fadde2d 	.word	0x3fadde2d
   de728:	af749a6d 	.word	0xaf749a6d
   de72c:	3fb3b0f2 	.word	0x3fb3b0f2
   de730:	fe231671 	.word	0xfe231671
   de734:	3fbc71c6 	.word	0x3fbc71c6
   de738:	9998ebc4 	.word	0x9998ebc4
   de73c:	3fc99999 	.word	0x3fc99999
   de740:	8800759c 	.word	0x8800759c
   de744:	7e37e43c 	.word	0x7e37e43c
   de748:	54442d18 	.word	0x54442d18
   de74c:	bff921fb 	.word	0xbff921fb
   de750:	440fffff 	.word	0x440fffff
   de754:	7ff00000 	.word	0x7ff00000
   de758:	3fdbffff 	.word	0x3fdbffff
   de75c:	000e5180 	.word	0x000e5180
   de760:	000e5160 	.word	0x000e5160
   de764:	3ff00000 	.word	0x3ff00000
   de768:	3ff2ffff 	.word	0x3ff2ffff
   de76c:	40037fff 	.word	0x40037fff
   de770:	3ff80000 	.word	0x3ff80000
   de774:	bff00000 	.word	0xbff00000

000de778 <ceil>:
   de778:	ec51 0b10 	vmov	r0, r1, d0
   de77c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   de780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de784:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   de788:	2d13      	cmp	r5, #19
   de78a:	460c      	mov	r4, r1
   de78c:	460f      	mov	r7, r1
   de78e:	ee10 6a10 	vmov	r6, s0
   de792:	dc22      	bgt.n	de7da <ceil+0x62>
   de794:	2d00      	cmp	r5, #0
   de796:	db52      	blt.n	de83e <ceil+0xc6>
   de798:	4b3d      	ldr	r3, [pc, #244]	; (de890 <ceil+0x118>)
   de79a:	fa43 f805 	asr.w	r8, r3, r5
   de79e:	ea01 0308 	and.w	r3, r1, r8
   de7a2:	4303      	orrs	r3, r0
   de7a4:	d01e      	beq.n	de7e4 <ceil+0x6c>
   de7a6:	a338      	add	r3, pc, #224	; (adr r3, de888 <ceil+0x110>)
   de7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   de7ac:	f001 faae 	bl	dfd0c <__adddf3>
   de7b0:	2200      	movs	r2, #0
   de7b2:	2300      	movs	r3, #0
   de7b4:	f001 feec 	bl	e0590 <__aeabi_dcmpgt>
   de7b8:	b148      	cbz	r0, de7ce <ceil+0x56>
   de7ba:	2c00      	cmp	r4, #0
   de7bc:	dd04      	ble.n	de7c8 <ceil+0x50>
   de7be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   de7c2:	fa43 f505 	asr.w	r5, r3, r5
   de7c6:	442f      	add	r7, r5
   de7c8:	ea27 0408 	bic.w	r4, r7, r8
   de7cc:	2600      	movs	r6, #0
   de7ce:	4623      	mov	r3, r4
   de7d0:	4632      	mov	r2, r6
   de7d2:	ec43 2b10 	vmov	d0, r2, r3
   de7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de7da:	2d33      	cmp	r5, #51	; 0x33
   de7dc:	dd06      	ble.n	de7ec <ceil+0x74>
   de7de:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   de7e2:	d03e      	beq.n	de862 <ceil+0xea>
   de7e4:	ec41 0b10 	vmov	d0, r0, r1
   de7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de7ec:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   de7f0:	f04f 38ff 	mov.w	r8, #4294967295
   de7f4:	fa28 f803 	lsr.w	r8, r8, r3
   de7f8:	ea10 0f08 	tst.w	r0, r8
   de7fc:	d0f2      	beq.n	de7e4 <ceil+0x6c>
   de7fe:	a322      	add	r3, pc, #136	; (adr r3, de888 <ceil+0x110>)
   de800:	e9d3 2300 	ldrd	r2, r3, [r3]
   de804:	f001 fa82 	bl	dfd0c <__adddf3>
   de808:	2200      	movs	r2, #0
   de80a:	2300      	movs	r3, #0
   de80c:	f001 fec0 	bl	e0590 <__aeabi_dcmpgt>
   de810:	2800      	cmp	r0, #0
   de812:	d0dc      	beq.n	de7ce <ceil+0x56>
   de814:	2c00      	cmp	r4, #0
   de816:	dd09      	ble.n	de82c <ceil+0xb4>
   de818:	2d14      	cmp	r5, #20
   de81a:	d031      	beq.n	de880 <ceil+0x108>
   de81c:	2301      	movs	r3, #1
   de81e:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   de822:	fa03 f505 	lsl.w	r5, r3, r5
   de826:	19ae      	adds	r6, r5, r6
   de828:	bf28      	it	cs
   de82a:	18ff      	addcs	r7, r7, r3
   de82c:	463c      	mov	r4, r7
   de82e:	ea26 0608 	bic.w	r6, r6, r8
   de832:	4623      	mov	r3, r4
   de834:	4632      	mov	r2, r6
   de836:	ec43 2b10 	vmov	d0, r2, r3
   de83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de83e:	a312      	add	r3, pc, #72	; (adr r3, de888 <ceil+0x110>)
   de840:	e9d3 2300 	ldrd	r2, r3, [r3]
   de844:	f001 fa62 	bl	dfd0c <__adddf3>
   de848:	2200      	movs	r2, #0
   de84a:	2300      	movs	r3, #0
   de84c:	f001 fea0 	bl	e0590 <__aeabi_dcmpgt>
   de850:	2800      	cmp	r0, #0
   de852:	d0bc      	beq.n	de7ce <ceil+0x56>
   de854:	2c00      	cmp	r4, #0
   de856:	db0f      	blt.n	de878 <ceil+0x100>
   de858:	4326      	orrs	r6, r4
   de85a:	d00b      	beq.n	de874 <ceil+0xfc>
   de85c:	2600      	movs	r6, #0
   de85e:	4c0d      	ldr	r4, [pc, #52]	; (de894 <ceil+0x11c>)
   de860:	e7b5      	b.n	de7ce <ceil+0x56>
   de862:	ee10 2a10 	vmov	r2, s0
   de866:	460b      	mov	r3, r1
   de868:	f001 fa50 	bl	dfd0c <__adddf3>
   de86c:	ec41 0b10 	vmov	d0, r0, r1
   de870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de874:	4634      	mov	r4, r6
   de876:	e7aa      	b.n	de7ce <ceil+0x56>
   de878:	2600      	movs	r6, #0
   de87a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   de87e:	e7a6      	b.n	de7ce <ceil+0x56>
   de880:	3701      	adds	r7, #1
   de882:	e7d3      	b.n	de82c <ceil+0xb4>
   de884:	f3af 8000 	nop.w
   de888:	8800759c 	.word	0x8800759c
   de88c:	7e37e43c 	.word	0x7e37e43c
   de890:	000fffff 	.word	0x000fffff
   de894:	3ff00000 	.word	0x3ff00000

000de898 <cos>:
   de898:	b500      	push	{lr}
   de89a:	ec51 0b10 	vmov	r0, r1, d0
   de89e:	4a2c      	ldr	r2, [pc, #176]	; (de950 <cos+0xb8>)
   de8a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   de8a4:	4293      	cmp	r3, r2
   de8a6:	b085      	sub	sp, #20
   de8a8:	dd20      	ble.n	de8ec <cos+0x54>
   de8aa:	4a2a      	ldr	r2, [pc, #168]	; (de954 <cos+0xbc>)
   de8ac:	4293      	cmp	r3, r2
   de8ae:	dd09      	ble.n	de8c4 <cos+0x2c>
   de8b0:	ee10 2a10 	vmov	r2, s0
   de8b4:	460b      	mov	r3, r1
   de8b6:	f001 fa27 	bl	dfd08 <__aeabi_dsub>
   de8ba:	ec41 0b10 	vmov	d0, r0, r1
   de8be:	b005      	add	sp, #20
   de8c0:	f85d fb04 	ldr.w	pc, [sp], #4
   de8c4:	4668      	mov	r0, sp
   de8c6:	f000 f8af 	bl	dea28 <__ieee754_rem_pio2>
   de8ca:	f000 0003 	and.w	r0, r0, #3
   de8ce:	2801      	cmp	r0, #1
   de8d0:	d028      	beq.n	de924 <cos+0x8c>
   de8d2:	2802      	cmp	r0, #2
   de8d4:	d015      	beq.n	de902 <cos+0x6a>
   de8d6:	b360      	cbz	r0, de932 <cos+0x9a>
   de8d8:	2001      	movs	r0, #1
   de8da:	ed9d 1b02 	vldr	d1, [sp, #8]
   de8de:	ed9d 0b00 	vldr	d0, [sp]
   de8e2:	f001 f81d 	bl	df920 <__kernel_sin>
   de8e6:	ec51 0b10 	vmov	r0, r1, d0
   de8ea:	e7e6      	b.n	de8ba <cos+0x22>
   de8ec:	ed9f 1b16 	vldr	d1, [pc, #88]	; de948 <cos+0xb0>
   de8f0:	f000 fac2 	bl	dee78 <__kernel_cos>
   de8f4:	ec51 0b10 	vmov	r0, r1, d0
   de8f8:	ec41 0b10 	vmov	d0, r0, r1
   de8fc:	b005      	add	sp, #20
   de8fe:	f85d fb04 	ldr.w	pc, [sp], #4
   de902:	ed9d 1b02 	vldr	d1, [sp, #8]
   de906:	ed9d 0b00 	vldr	d0, [sp]
   de90a:	f000 fab5 	bl	dee78 <__kernel_cos>
   de90e:	ec53 2b10 	vmov	r2, r3, d0
   de912:	ee10 0a10 	vmov	r0, s0
   de916:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   de91a:	ec41 0b10 	vmov	d0, r0, r1
   de91e:	b005      	add	sp, #20
   de920:	f85d fb04 	ldr.w	pc, [sp], #4
   de924:	ed9d 1b02 	vldr	d1, [sp, #8]
   de928:	ed9d 0b00 	vldr	d0, [sp]
   de92c:	f000 fff8 	bl	df920 <__kernel_sin>
   de930:	e7ed      	b.n	de90e <cos+0x76>
   de932:	ed9d 1b02 	vldr	d1, [sp, #8]
   de936:	ed9d 0b00 	vldr	d0, [sp]
   de93a:	f000 fa9d 	bl	dee78 <__kernel_cos>
   de93e:	ec51 0b10 	vmov	r0, r1, d0
   de942:	e7ba      	b.n	de8ba <cos+0x22>
   de944:	f3af 8000 	nop.w
	...
   de950:	3fe921fb 	.word	0x3fe921fb
   de954:	7fefffff 	.word	0x7fefffff

000de958 <fabs>:
   de958:	ec53 2b10 	vmov	r2, r3, d0
   de95c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   de960:	ec43 2b10 	vmov	d0, r2, r3
   de964:	4770      	bx	lr
   de966:	bf00      	nop

000de968 <sin>:
   de968:	b500      	push	{lr}
   de96a:	ec51 0b10 	vmov	r0, r1, d0
   de96e:	4a2c      	ldr	r2, [pc, #176]	; (dea20 <sin+0xb8>)
   de970:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   de974:	4293      	cmp	r3, r2
   de976:	b085      	sub	sp, #20
   de978:	dd27      	ble.n	de9ca <sin+0x62>
   de97a:	4a2a      	ldr	r2, [pc, #168]	; (dea24 <sin+0xbc>)
   de97c:	4293      	cmp	r3, r2
   de97e:	dd09      	ble.n	de994 <sin+0x2c>
   de980:	ee10 2a10 	vmov	r2, s0
   de984:	460b      	mov	r3, r1
   de986:	f001 f9bf 	bl	dfd08 <__aeabi_dsub>
   de98a:	ec41 0b10 	vmov	d0, r0, r1
   de98e:	b005      	add	sp, #20
   de990:	f85d fb04 	ldr.w	pc, [sp], #4
   de994:	4668      	mov	r0, sp
   de996:	f000 f847 	bl	dea28 <__ieee754_rem_pio2>
   de99a:	f000 0003 	and.w	r0, r0, #3
   de99e:	2801      	cmp	r0, #1
   de9a0:	d027      	beq.n	de9f2 <sin+0x8a>
   de9a2:	2802      	cmp	r0, #2
   de9a4:	d01d      	beq.n	de9e2 <sin+0x7a>
   de9a6:	b368      	cbz	r0, dea04 <sin+0x9c>
   de9a8:	ed9d 1b02 	vldr	d1, [sp, #8]
   de9ac:	ed9d 0b00 	vldr	d0, [sp]
   de9b0:	f000 fa62 	bl	dee78 <__kernel_cos>
   de9b4:	ec53 2b10 	vmov	r2, r3, d0
   de9b8:	ee10 0a10 	vmov	r0, s0
   de9bc:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   de9c0:	ec41 0b10 	vmov	d0, r0, r1
   de9c4:	b005      	add	sp, #20
   de9c6:	f85d fb04 	ldr.w	pc, [sp], #4
   de9ca:	2000      	movs	r0, #0
   de9cc:	ed9f 1b12 	vldr	d1, [pc, #72]	; dea18 <sin+0xb0>
   de9d0:	f000 ffa6 	bl	df920 <__kernel_sin>
   de9d4:	ec51 0b10 	vmov	r0, r1, d0
   de9d8:	ec41 0b10 	vmov	d0, r0, r1
   de9dc:	b005      	add	sp, #20
   de9de:	f85d fb04 	ldr.w	pc, [sp], #4
   de9e2:	2001      	movs	r0, #1
   de9e4:	ed9d 1b02 	vldr	d1, [sp, #8]
   de9e8:	ed9d 0b00 	vldr	d0, [sp]
   de9ec:	f000 ff98 	bl	df920 <__kernel_sin>
   de9f0:	e7e0      	b.n	de9b4 <sin+0x4c>
   de9f2:	ed9d 1b02 	vldr	d1, [sp, #8]
   de9f6:	ed9d 0b00 	vldr	d0, [sp]
   de9fa:	f000 fa3d 	bl	dee78 <__kernel_cos>
   de9fe:	ec51 0b10 	vmov	r0, r1, d0
   dea02:	e7c2      	b.n	de98a <sin+0x22>
   dea04:	2001      	movs	r0, #1
   dea06:	ed9d 1b02 	vldr	d1, [sp, #8]
   dea0a:	ed9d 0b00 	vldr	d0, [sp]
   dea0e:	f000 ff87 	bl	df920 <__kernel_sin>
   dea12:	ec51 0b10 	vmov	r0, r1, d0
   dea16:	e7b8      	b.n	de98a <sin+0x22>
	...
   dea20:	3fe921fb 	.word	0x3fe921fb
   dea24:	7fefffff 	.word	0x7fefffff

000dea28 <__ieee754_rem_pio2>:
   dea28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dea2c:	ec53 2b10 	vmov	r2, r3, d0
   dea30:	4997      	ldr	r1, [pc, #604]	; (dec90 <__ieee754_rem_pio2+0x268>)
   dea32:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   dea36:	458b      	cmp	fp, r1
   dea38:	b08f      	sub	sp, #60	; 0x3c
   dea3a:	f340 8087 	ble.w	deb4c <__ieee754_rem_pio2+0x124>
   dea3e:	4995      	ldr	r1, [pc, #596]	; (dec94 <__ieee754_rem_pio2+0x26c>)
   dea40:	458b      	cmp	fp, r1
   dea42:	461c      	mov	r4, r3
   dea44:	4682      	mov	sl, r0
   dea46:	dc29      	bgt.n	dea9c <__ieee754_rem_pio2+0x74>
   dea48:	2c00      	cmp	r4, #0
   dea4a:	4619      	mov	r1, r3
   dea4c:	ee10 0a10 	vmov	r0, s0
   dea50:	a385      	add	r3, pc, #532	; (adr r3, dec68 <__ieee754_rem_pio2+0x240>)
   dea52:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea56:	f340 81a5 	ble.w	deda4 <__ieee754_rem_pio2+0x37c>
   dea5a:	f001 f955 	bl	dfd08 <__aeabi_dsub>
   dea5e:	4b8e      	ldr	r3, [pc, #568]	; (dec98 <__ieee754_rem_pio2+0x270>)
   dea60:	459b      	cmp	fp, r3
   dea62:	4604      	mov	r4, r0
   dea64:	460d      	mov	r5, r1
   dea66:	f000 8087 	beq.w	deb78 <__ieee754_rem_pio2+0x150>
   dea6a:	a381      	add	r3, pc, #516	; (adr r3, dec70 <__ieee754_rem_pio2+0x248>)
   dea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea70:	f001 f94a 	bl	dfd08 <__aeabi_dsub>
   dea74:	4602      	mov	r2, r0
   dea76:	460b      	mov	r3, r1
   dea78:	e9ca 2300 	strd	r2, r3, [sl]
   dea7c:	4620      	mov	r0, r4
   dea7e:	4629      	mov	r1, r5
   dea80:	f001 f942 	bl	dfd08 <__aeabi_dsub>
   dea84:	a37a      	add	r3, pc, #488	; (adr r3, dec70 <__ieee754_rem_pio2+0x248>)
   dea86:	e9d3 2300 	ldrd	r2, r3, [r3]
   dea8a:	f001 f93d 	bl	dfd08 <__aeabi_dsub>
   dea8e:	2501      	movs	r5, #1
   dea90:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dea94:	4628      	mov	r0, r5
   dea96:	b00f      	add	sp, #60	; 0x3c
   dea98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dea9c:	497f      	ldr	r1, [pc, #508]	; (dec9c <__ieee754_rem_pio2+0x274>)
   dea9e:	458b      	cmp	fp, r1
   deaa0:	f340 8087 	ble.w	debb2 <__ieee754_rem_pio2+0x18a>
   deaa4:	497e      	ldr	r1, [pc, #504]	; (deca0 <__ieee754_rem_pio2+0x278>)
   deaa6:	458b      	cmp	fp, r1
   deaa8:	dc5b      	bgt.n	deb62 <__ieee754_rem_pio2+0x13a>
   deaaa:	ea4f 552b 	mov.w	r5, fp, asr #20
   deaae:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   deab2:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   deab6:	4610      	mov	r0, r2
   deab8:	4639      	mov	r1, r7
   deaba:	ee10 6a10 	vmov	r6, s0
   deabe:	f001 fd87 	bl	e05d0 <__aeabi_d2iz>
   deac2:	f001 fa6f 	bl	dffa4 <__aeabi_i2d>
   deac6:	4680      	mov	r8, r0
   deac8:	4689      	mov	r9, r1
   deaca:	4642      	mov	r2, r8
   deacc:	464b      	mov	r3, r9
   deace:	4630      	mov	r0, r6
   dead0:	4639      	mov	r1, r7
   dead2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   dead6:	f001 f917 	bl	dfd08 <__aeabi_dsub>
   deada:	2200      	movs	r2, #0
   deadc:	4b71      	ldr	r3, [pc, #452]	; (deca4 <__ieee754_rem_pio2+0x27c>)
   deade:	f001 fac7 	bl	e0070 <__aeabi_dmul>
   deae2:	4689      	mov	r9, r1
   deae4:	4680      	mov	r8, r0
   deae6:	f001 fd73 	bl	e05d0 <__aeabi_d2iz>
   deaea:	f001 fa5b 	bl	dffa4 <__aeabi_i2d>
   deaee:	4606      	mov	r6, r0
   deaf0:	460f      	mov	r7, r1
   deaf2:	4632      	mov	r2, r6
   deaf4:	463b      	mov	r3, r7
   deaf6:	4640      	mov	r0, r8
   deaf8:	4649      	mov	r1, r9
   deafa:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   deafe:	f001 f903 	bl	dfd08 <__aeabi_dsub>
   deb02:	2200      	movs	r2, #0
   deb04:	4b67      	ldr	r3, [pc, #412]	; (deca4 <__ieee754_rem_pio2+0x27c>)
   deb06:	f001 fab3 	bl	e0070 <__aeabi_dmul>
   deb0a:	2200      	movs	r2, #0
   deb0c:	2300      	movs	r3, #0
   deb0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   deb12:	f001 fd15 	bl	e0540 <__aeabi_dcmpeq>
   deb16:	2800      	cmp	r0, #0
   deb18:	f000 8170 	beq.w	dedfc <__ieee754_rem_pio2+0x3d4>
   deb1c:	2300      	movs	r3, #0
   deb1e:	4630      	mov	r0, r6
   deb20:	4639      	mov	r1, r7
   deb22:	2200      	movs	r2, #0
   deb24:	f001 fd0c 	bl	e0540 <__aeabi_dcmpeq>
   deb28:	2800      	cmp	r0, #0
   deb2a:	bf14      	ite	ne
   deb2c:	2301      	movne	r3, #1
   deb2e:	2302      	moveq	r3, #2
   deb30:	4a5d      	ldr	r2, [pc, #372]	; (deca8 <__ieee754_rem_pio2+0x280>)
   deb32:	9201      	str	r2, [sp, #4]
   deb34:	2102      	movs	r1, #2
   deb36:	9100      	str	r1, [sp, #0]
   deb38:	462a      	mov	r2, r5
   deb3a:	4651      	mov	r1, sl
   deb3c:	a808      	add	r0, sp, #32
   deb3e:	f000 fadf 	bl	df100 <__kernel_rem_pio2>
   deb42:	2c00      	cmp	r4, #0
   deb44:	f2c0 814c 	blt.w	dede0 <__ieee754_rem_pio2+0x3b8>
   deb48:	4605      	mov	r5, r0
   deb4a:	e006      	b.n	deb5a <__ieee754_rem_pio2+0x132>
   deb4c:	ed80 0b00 	vstr	d0, [r0]
   deb50:	2500      	movs	r5, #0
   deb52:	2400      	movs	r4, #0
   deb54:	e9c0 4502 	strd	r4, r5, [r0, #8]
   deb58:	2500      	movs	r5, #0
   deb5a:	4628      	mov	r0, r5
   deb5c:	b00f      	add	sp, #60	; 0x3c
   deb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   deb62:	ee10 0a10 	vmov	r0, s0
   deb66:	4619      	mov	r1, r3
   deb68:	f001 f8ce 	bl	dfd08 <__aeabi_dsub>
   deb6c:	2500      	movs	r5, #0
   deb6e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   deb72:	e9ca 0100 	strd	r0, r1, [sl]
   deb76:	e7f0      	b.n	deb5a <__ieee754_rem_pio2+0x132>
   deb78:	a33f      	add	r3, pc, #252	; (adr r3, dec78 <__ieee754_rem_pio2+0x250>)
   deb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb7e:	f001 f8c3 	bl	dfd08 <__aeabi_dsub>
   deb82:	a33f      	add	r3, pc, #252	; (adr r3, dec80 <__ieee754_rem_pio2+0x258>)
   deb84:	e9d3 2300 	ldrd	r2, r3, [r3]
   deb88:	460d      	mov	r5, r1
   deb8a:	4604      	mov	r4, r0
   deb8c:	f001 f8bc 	bl	dfd08 <__aeabi_dsub>
   deb90:	4602      	mov	r2, r0
   deb92:	460b      	mov	r3, r1
   deb94:	e9ca 2300 	strd	r2, r3, [sl]
   deb98:	4629      	mov	r1, r5
   deb9a:	4620      	mov	r0, r4
   deb9c:	f001 f8b4 	bl	dfd08 <__aeabi_dsub>
   deba0:	a337      	add	r3, pc, #220	; (adr r3, dec80 <__ieee754_rem_pio2+0x258>)
   deba2:	e9d3 2300 	ldrd	r2, r3, [r3]
   deba6:	f001 f8af 	bl	dfd08 <__aeabi_dsub>
   debaa:	2501      	movs	r5, #1
   debac:	e9ca 0102 	strd	r0, r1, [sl, #8]
   debb0:	e7d3      	b.n	deb5a <__ieee754_rem_pio2+0x132>
   debb2:	f7ff fed1 	bl	de958 <fabs>
   debb6:	ec57 6b10 	vmov	r6, r7, d0
   debba:	ee10 0a10 	vmov	r0, s0
   debbe:	a332      	add	r3, pc, #200	; (adr r3, dec88 <__ieee754_rem_pio2+0x260>)
   debc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   debc4:	4639      	mov	r1, r7
   debc6:	f001 fa53 	bl	e0070 <__aeabi_dmul>
   debca:	2200      	movs	r2, #0
   debcc:	4b37      	ldr	r3, [pc, #220]	; (decac <__ieee754_rem_pio2+0x284>)
   debce:	f001 f89d 	bl	dfd0c <__adddf3>
   debd2:	f001 fcfd 	bl	e05d0 <__aeabi_d2iz>
   debd6:	4605      	mov	r5, r0
   debd8:	f001 f9e4 	bl	dffa4 <__aeabi_i2d>
   debdc:	a322      	add	r3, pc, #136	; (adr r3, dec68 <__ieee754_rem_pio2+0x240>)
   debde:	e9d3 2300 	ldrd	r2, r3, [r3]
   debe2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   debe6:	f001 fa43 	bl	e0070 <__aeabi_dmul>
   debea:	4602      	mov	r2, r0
   debec:	460b      	mov	r3, r1
   debee:	4630      	mov	r0, r6
   debf0:	4639      	mov	r1, r7
   debf2:	f001 f889 	bl	dfd08 <__aeabi_dsub>
   debf6:	a31e      	add	r3, pc, #120	; (adr r3, dec70 <__ieee754_rem_pio2+0x248>)
   debf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   debfc:	4680      	mov	r8, r0
   debfe:	4689      	mov	r9, r1
   dec00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dec04:	f001 fa34 	bl	e0070 <__aeabi_dmul>
   dec08:	2d1f      	cmp	r5, #31
   dec0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dec0e:	dc51      	bgt.n	decb4 <__ieee754_rem_pio2+0x28c>
   dec10:	4b27      	ldr	r3, [pc, #156]	; (decb0 <__ieee754_rem_pio2+0x288>)
   dec12:	1e6a      	subs	r2, r5, #1
   dec14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   dec18:	459b      	cmp	fp, r3
   dec1a:	d04b      	beq.n	decb4 <__ieee754_rem_pio2+0x28c>
   dec1c:	4602      	mov	r2, r0
   dec1e:	460b      	mov	r3, r1
   dec20:	4640      	mov	r0, r8
   dec22:	4649      	mov	r1, r9
   dec24:	f001 f870 	bl	dfd08 <__aeabi_dsub>
   dec28:	4606      	mov	r6, r0
   dec2a:	460f      	mov	r7, r1
   dec2c:	e9ca 6700 	strd	r6, r7, [sl]
   dec30:	4632      	mov	r2, r6
   dec32:	463b      	mov	r3, r7
   dec34:	4640      	mov	r0, r8
   dec36:	4649      	mov	r1, r9
   dec38:	f001 f866 	bl	dfd08 <__aeabi_dsub>
   dec3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dec40:	f001 f862 	bl	dfd08 <__aeabi_dsub>
   dec44:	2c00      	cmp	r4, #0
   dec46:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dec4a:	da86      	bge.n	deb5a <__ieee754_rem_pio2+0x132>
   dec4c:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   dec50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dec54:	426d      	negs	r5, r5
   dec56:	f8ca 6000 	str.w	r6, [sl]
   dec5a:	f8ca 4004 	str.w	r4, [sl, #4]
   dec5e:	f8ca 0008 	str.w	r0, [sl, #8]
   dec62:	f8ca 300c 	str.w	r3, [sl, #12]
   dec66:	e778      	b.n	deb5a <__ieee754_rem_pio2+0x132>
   dec68:	54400000 	.word	0x54400000
   dec6c:	3ff921fb 	.word	0x3ff921fb
   dec70:	1a626331 	.word	0x1a626331
   dec74:	3dd0b461 	.word	0x3dd0b461
   dec78:	1a600000 	.word	0x1a600000
   dec7c:	3dd0b461 	.word	0x3dd0b461
   dec80:	2e037073 	.word	0x2e037073
   dec84:	3ba3198a 	.word	0x3ba3198a
   dec88:	6dc9c883 	.word	0x6dc9c883
   dec8c:	3fe45f30 	.word	0x3fe45f30
   dec90:	3fe921fb 	.word	0x3fe921fb
   dec94:	4002d97b 	.word	0x4002d97b
   dec98:	3ff921fb 	.word	0x3ff921fb
   dec9c:	413921fb 	.word	0x413921fb
   deca0:	7fefffff 	.word	0x7fefffff
   deca4:	41700000 	.word	0x41700000
   deca8:	000e5220 	.word	0x000e5220
   decac:	3fe00000 	.word	0x3fe00000
   decb0:	000e51a0 	.word	0x000e51a0
   decb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   decb8:	4640      	mov	r0, r8
   decba:	4649      	mov	r1, r9
   decbc:	f001 f824 	bl	dfd08 <__aeabi_dsub>
   decc0:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   decc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
   decc8:	ebc3 030b 	rsb	r3, r3, fp
   deccc:	4606      	mov	r6, r0
   decce:	460f      	mov	r7, r1
   decd0:	2b10      	cmp	r3, #16
   decd2:	e9ca 6700 	strd	r6, r7, [sl]
   decd6:	ddab      	ble.n	dec30 <__ieee754_rem_pio2+0x208>
   decd8:	a35d      	add	r3, pc, #372	; (adr r3, dee50 <__ieee754_rem_pio2+0x428>)
   decda:	e9d3 2300 	ldrd	r2, r3, [r3]
   decde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dece2:	f001 f9c5 	bl	e0070 <__aeabi_dmul>
   dece6:	4606      	mov	r6, r0
   dece8:	460f      	mov	r7, r1
   decea:	4602      	mov	r2, r0
   decec:	460b      	mov	r3, r1
   decee:	4640      	mov	r0, r8
   decf0:	4649      	mov	r1, r9
   decf2:	f001 f809 	bl	dfd08 <__aeabi_dsub>
   decf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   decfa:	4602      	mov	r2, r0
   decfc:	460b      	mov	r3, r1
   decfe:	4640      	mov	r0, r8
   ded00:	4649      	mov	r1, r9
   ded02:	f001 f801 	bl	dfd08 <__aeabi_dsub>
   ded06:	4632      	mov	r2, r6
   ded08:	463b      	mov	r3, r7
   ded0a:	f000 fffd 	bl	dfd08 <__aeabi_dsub>
   ded0e:	a352      	add	r3, pc, #328	; (adr r3, dee58 <__ieee754_rem_pio2+0x430>)
   ded10:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded14:	4606      	mov	r6, r0
   ded16:	460f      	mov	r7, r1
   ded18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ded1c:	f001 f9a8 	bl	e0070 <__aeabi_dmul>
   ded20:	4632      	mov	r2, r6
   ded22:	463b      	mov	r3, r7
   ded24:	f000 fff0 	bl	dfd08 <__aeabi_dsub>
   ded28:	460b      	mov	r3, r1
   ded2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   ded2e:	4602      	mov	r2, r0
   ded30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   ded34:	f000 ffe8 	bl	dfd08 <__aeabi_dsub>
   ded38:	f3c1 530a 	ubfx	r3, r1, #20, #11
   ded3c:	ebc3 0b0b 	rsb	fp, r3, fp
   ded40:	4606      	mov	r6, r0
   ded42:	460f      	mov	r7, r1
   ded44:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   ded48:	e9ca 6700 	strd	r6, r7, [sl]
   ded4c:	dd76      	ble.n	dee3c <__ieee754_rem_pio2+0x414>
   ded4e:	a345      	add	r3, pc, #276	; (adr r3, dee64 <__ieee754_rem_pio2+0x43c>)
   ded50:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ded58:	f001 f98a 	bl	e0070 <__aeabi_dmul>
   ded5c:	4606      	mov	r6, r0
   ded5e:	460f      	mov	r7, r1
   ded60:	4602      	mov	r2, r0
   ded62:	460b      	mov	r3, r1
   ded64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   ded68:	f000 ffce 	bl	dfd08 <__aeabi_dsub>
   ded6c:	4602      	mov	r2, r0
   ded6e:	460b      	mov	r3, r1
   ded70:	4680      	mov	r8, r0
   ded72:	4689      	mov	r9, r1
   ded74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   ded78:	f000 ffc6 	bl	dfd08 <__aeabi_dsub>
   ded7c:	4632      	mov	r2, r6
   ded7e:	463b      	mov	r3, r7
   ded80:	f000 ffc2 	bl	dfd08 <__aeabi_dsub>
   ded84:	a339      	add	r3, pc, #228	; (adr r3, dee6c <__ieee754_rem_pio2+0x444>)
   ded86:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded8a:	4606      	mov	r6, r0
   ded8c:	460f      	mov	r7, r1
   ded8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ded92:	f001 f96d 	bl	e0070 <__aeabi_dmul>
   ded96:	4632      	mov	r2, r6
   ded98:	463b      	mov	r3, r7
   ded9a:	f000 ffb5 	bl	dfd08 <__aeabi_dsub>
   ded9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   deda2:	e73b      	b.n	dec1c <__ieee754_rem_pio2+0x1f4>
   deda4:	f000 ffb2 	bl	dfd0c <__adddf3>
   deda8:	4b2d      	ldr	r3, [pc, #180]	; (dee60 <__ieee754_rem_pio2+0x438>)
   dedaa:	459b      	cmp	fp, r3
   dedac:	4604      	mov	r4, r0
   dedae:	460d      	mov	r5, r1
   dedb0:	d026      	beq.n	dee00 <__ieee754_rem_pio2+0x3d8>
   dedb2:	a325      	add	r3, pc, #148	; (adr r3, dee48 <__ieee754_rem_pio2+0x420>)
   dedb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dedb8:	f000 ffa8 	bl	dfd0c <__adddf3>
   dedbc:	4602      	mov	r2, r0
   dedbe:	460b      	mov	r3, r1
   dedc0:	e9ca 2300 	strd	r2, r3, [sl]
   dedc4:	4629      	mov	r1, r5
   dedc6:	4620      	mov	r0, r4
   dedc8:	f000 ff9e 	bl	dfd08 <__aeabi_dsub>
   dedcc:	a31e      	add	r3, pc, #120	; (adr r3, dee48 <__ieee754_rem_pio2+0x420>)
   dedce:	e9d3 2300 	ldrd	r2, r3, [r3]
   dedd2:	f000 ff9b 	bl	dfd0c <__adddf3>
   dedd6:	f04f 35ff 	mov.w	r5, #4294967295
   dedda:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dedde:	e6bc      	b.n	deb5a <__ieee754_rem_pio2+0x132>
   dede0:	f8da 2004 	ldr.w	r2, [sl, #4]
   dede4:	f8da 300c 	ldr.w	r3, [sl, #12]
   dede8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   dedec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   dedf0:	4245      	negs	r5, r0
   dedf2:	f8ca 2004 	str.w	r2, [sl, #4]
   dedf6:	f8ca 300c 	str.w	r3, [sl, #12]
   dedfa:	e6ae      	b.n	deb5a <__ieee754_rem_pio2+0x132>
   dedfc:	2303      	movs	r3, #3
   dedfe:	e697      	b.n	deb30 <__ieee754_rem_pio2+0x108>
   dee00:	a313      	add	r3, pc, #76	; (adr r3, dee50 <__ieee754_rem_pio2+0x428>)
   dee02:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee06:	f000 ff81 	bl	dfd0c <__adddf3>
   dee0a:	a313      	add	r3, pc, #76	; (adr r3, dee58 <__ieee754_rem_pio2+0x430>)
   dee0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee10:	460d      	mov	r5, r1
   dee12:	4604      	mov	r4, r0
   dee14:	f000 ff7a 	bl	dfd0c <__adddf3>
   dee18:	4602      	mov	r2, r0
   dee1a:	460b      	mov	r3, r1
   dee1c:	e9ca 2300 	strd	r2, r3, [sl]
   dee20:	4629      	mov	r1, r5
   dee22:	4620      	mov	r0, r4
   dee24:	f000 ff70 	bl	dfd08 <__aeabi_dsub>
   dee28:	a30b      	add	r3, pc, #44	; (adr r3, dee58 <__ieee754_rem_pio2+0x430>)
   dee2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dee2e:	f000 ff6d 	bl	dfd0c <__adddf3>
   dee32:	f04f 35ff 	mov.w	r5, #4294967295
   dee36:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dee3a:	e68e      	b.n	deb5a <__ieee754_rem_pio2+0x132>
   dee3c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   dee40:	e6f6      	b.n	dec30 <__ieee754_rem_pio2+0x208>
   dee42:	bf00      	nop
   dee44:	f3af 8000 	nop.w
   dee48:	1a626331 	.word	0x1a626331
   dee4c:	3dd0b461 	.word	0x3dd0b461
   dee50:	1a600000 	.word	0x1a600000
   dee54:	3dd0b461 	.word	0x3dd0b461
   dee58:	2e037073 	.word	0x2e037073
   dee5c:	3ba3198a 	.word	0x3ba3198a
   dee60:	3ff921fb 	.word	0x3ff921fb
   dee64:	2e000000 	.word	0x2e000000
   dee68:	3ba3198a 	.word	0x3ba3198a
   dee6c:	252049c1 	.word	0x252049c1
   dee70:	397b839a 	.word	0x397b839a
   dee74:	00000000 	.word	0x00000000

000dee78 <__kernel_cos>:
   dee78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dee7c:	ec57 6b10 	vmov	r6, r7, d0
   dee80:	ed2d 8b02 	vpush	{d8}
   dee84:	eeb0 8a41 	vmov.f32	s16, s2
   dee88:	eef0 8a61 	vmov.f32	s17, s3
   dee8c:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   dee90:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   dee94:	b083      	sub	sp, #12
   dee96:	da72      	bge.n	def7e <__kernel_cos+0x106>
   dee98:	ee10 0a10 	vmov	r0, s0
   dee9c:	4639      	mov	r1, r7
   dee9e:	f001 fb97 	bl	e05d0 <__aeabi_d2iz>
   deea2:	2800      	cmp	r0, #0
   deea4:	f000 80f6 	beq.w	df094 <__kernel_cos+0x21c>
   deea8:	4632      	mov	r2, r6
   deeaa:	463b      	mov	r3, r7
   deeac:	4630      	mov	r0, r6
   deeae:	4639      	mov	r1, r7
   deeb0:	f001 f8de 	bl	e0070 <__aeabi_dmul>
   deeb4:	a37c      	add	r3, pc, #496	; (adr r3, df0a8 <__kernel_cos+0x230>)
   deeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   deeba:	4604      	mov	r4, r0
   deebc:	460d      	mov	r5, r1
   deebe:	f001 f8d7 	bl	e0070 <__aeabi_dmul>
   deec2:	a37b      	add	r3, pc, #492	; (adr r3, df0b0 <__kernel_cos+0x238>)
   deec4:	e9d3 2300 	ldrd	r2, r3, [r3]
   deec8:	f000 ff20 	bl	dfd0c <__adddf3>
   deecc:	4622      	mov	r2, r4
   deece:	462b      	mov	r3, r5
   deed0:	f001 f8ce 	bl	e0070 <__aeabi_dmul>
   deed4:	a378      	add	r3, pc, #480	; (adr r3, df0b8 <__kernel_cos+0x240>)
   deed6:	e9d3 2300 	ldrd	r2, r3, [r3]
   deeda:	f000 ff15 	bl	dfd08 <__aeabi_dsub>
   deede:	4622      	mov	r2, r4
   deee0:	462b      	mov	r3, r5
   deee2:	f001 f8c5 	bl	e0070 <__aeabi_dmul>
   deee6:	a376      	add	r3, pc, #472	; (adr r3, df0c0 <__kernel_cos+0x248>)
   deee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   deeec:	f000 ff0e 	bl	dfd0c <__adddf3>
   deef0:	4622      	mov	r2, r4
   deef2:	462b      	mov	r3, r5
   deef4:	f001 f8bc 	bl	e0070 <__aeabi_dmul>
   deef8:	a373      	add	r3, pc, #460	; (adr r3, df0c8 <__kernel_cos+0x250>)
   deefa:	e9d3 2300 	ldrd	r2, r3, [r3]
   deefe:	f000 ff03 	bl	dfd08 <__aeabi_dsub>
   def02:	4622      	mov	r2, r4
   def04:	462b      	mov	r3, r5
   def06:	f001 f8b3 	bl	e0070 <__aeabi_dmul>
   def0a:	a371      	add	r3, pc, #452	; (adr r3, df0d0 <__kernel_cos+0x258>)
   def0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   def10:	f000 fefc 	bl	dfd0c <__adddf3>
   def14:	4622      	mov	r2, r4
   def16:	462b      	mov	r3, r5
   def18:	f001 f8aa 	bl	e0070 <__aeabi_dmul>
   def1c:	4682      	mov	sl, r0
   def1e:	468b      	mov	fp, r1
   def20:	2200      	movs	r2, #0
   def22:	4b71      	ldr	r3, [pc, #452]	; (df0e8 <__kernel_cos+0x270>)
   def24:	4620      	mov	r0, r4
   def26:	4629      	mov	r1, r5
   def28:	f001 f8a2 	bl	e0070 <__aeabi_dmul>
   def2c:	4652      	mov	r2, sl
   def2e:	4680      	mov	r8, r0
   def30:	4689      	mov	r9, r1
   def32:	465b      	mov	r3, fp
   def34:	4620      	mov	r0, r4
   def36:	4629      	mov	r1, r5
   def38:	f001 f89a 	bl	e0070 <__aeabi_dmul>
   def3c:	ec53 2b18 	vmov	r2, r3, d8
   def40:	4604      	mov	r4, r0
   def42:	460d      	mov	r5, r1
   def44:	4630      	mov	r0, r6
   def46:	4639      	mov	r1, r7
   def48:	f001 f892 	bl	e0070 <__aeabi_dmul>
   def4c:	4602      	mov	r2, r0
   def4e:	460b      	mov	r3, r1
   def50:	4620      	mov	r0, r4
   def52:	4629      	mov	r1, r5
   def54:	f000 fed8 	bl	dfd08 <__aeabi_dsub>
   def58:	4602      	mov	r2, r0
   def5a:	460b      	mov	r3, r1
   def5c:	4640      	mov	r0, r8
   def5e:	4649      	mov	r1, r9
   def60:	f000 fed2 	bl	dfd08 <__aeabi_dsub>
   def64:	4602      	mov	r2, r0
   def66:	460b      	mov	r3, r1
   def68:	2000      	movs	r0, #0
   def6a:	4960      	ldr	r1, [pc, #384]	; (df0ec <__kernel_cos+0x274>)
   def6c:	f000 fecc 	bl	dfd08 <__aeabi_dsub>
   def70:	ec41 0b10 	vmov	d0, r0, r1
   def74:	b003      	add	sp, #12
   def76:	ecbd 8b02 	vpop	{d8}
   def7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   def7e:	ee10 2a10 	vmov	r2, s0
   def82:	ee10 0a10 	vmov	r0, s0
   def86:	463b      	mov	r3, r7
   def88:	4639      	mov	r1, r7
   def8a:	f001 f871 	bl	e0070 <__aeabi_dmul>
   def8e:	a346      	add	r3, pc, #280	; (adr r3, df0a8 <__kernel_cos+0x230>)
   def90:	e9d3 2300 	ldrd	r2, r3, [r3]
   def94:	4604      	mov	r4, r0
   def96:	460d      	mov	r5, r1
   def98:	f001 f86a 	bl	e0070 <__aeabi_dmul>
   def9c:	a344      	add	r3, pc, #272	; (adr r3, df0b0 <__kernel_cos+0x238>)
   def9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   defa2:	f000 feb3 	bl	dfd0c <__adddf3>
   defa6:	4622      	mov	r2, r4
   defa8:	462b      	mov	r3, r5
   defaa:	f001 f861 	bl	e0070 <__aeabi_dmul>
   defae:	a342      	add	r3, pc, #264	; (adr r3, df0b8 <__kernel_cos+0x240>)
   defb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   defb4:	f000 fea8 	bl	dfd08 <__aeabi_dsub>
   defb8:	4622      	mov	r2, r4
   defba:	462b      	mov	r3, r5
   defbc:	f001 f858 	bl	e0070 <__aeabi_dmul>
   defc0:	a33f      	add	r3, pc, #252	; (adr r3, df0c0 <__kernel_cos+0x248>)
   defc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   defc6:	f000 fea1 	bl	dfd0c <__adddf3>
   defca:	4622      	mov	r2, r4
   defcc:	462b      	mov	r3, r5
   defce:	f001 f84f 	bl	e0070 <__aeabi_dmul>
   defd2:	a33d      	add	r3, pc, #244	; (adr r3, df0c8 <__kernel_cos+0x250>)
   defd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   defd8:	f000 fe96 	bl	dfd08 <__aeabi_dsub>
   defdc:	4622      	mov	r2, r4
   defde:	462b      	mov	r3, r5
   defe0:	f001 f846 	bl	e0070 <__aeabi_dmul>
   defe4:	a33a      	add	r3, pc, #232	; (adr r3, df0d0 <__kernel_cos+0x258>)
   defe6:	e9d3 2300 	ldrd	r2, r3, [r3]
   defea:	f000 fe8f 	bl	dfd0c <__adddf3>
   defee:	462b      	mov	r3, r5
   deff0:	4622      	mov	r2, r4
   deff2:	f001 f83d 	bl	e0070 <__aeabi_dmul>
   deff6:	4b3e      	ldr	r3, [pc, #248]	; (df0f0 <__kernel_cos+0x278>)
   deff8:	4599      	cmp	r9, r3
   deffa:	4682      	mov	sl, r0
   deffc:	468b      	mov	fp, r1
   deffe:	dd8f      	ble.n	def20 <__kernel_cos+0xa8>
   df000:	4b3c      	ldr	r3, [pc, #240]	; (df0f4 <__kernel_cos+0x27c>)
   df002:	4599      	cmp	r9, r3
   df004:	dc3d      	bgt.n	df082 <__kernel_cos+0x20a>
   df006:	2200      	movs	r2, #0
   df008:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   df00c:	2000      	movs	r0, #0
   df00e:	4937      	ldr	r1, [pc, #220]	; (df0ec <__kernel_cos+0x274>)
   df010:	4690      	mov	r8, r2
   df012:	4699      	mov	r9, r3
   df014:	f000 fe78 	bl	dfd08 <__aeabi_dsub>
   df018:	e9cd 0100 	strd	r0, r1, [sp]
   df01c:	2200      	movs	r2, #0
   df01e:	4b32      	ldr	r3, [pc, #200]	; (df0e8 <__kernel_cos+0x270>)
   df020:	4620      	mov	r0, r4
   df022:	4629      	mov	r1, r5
   df024:	f001 f824 	bl	e0070 <__aeabi_dmul>
   df028:	4642      	mov	r2, r8
   df02a:	464b      	mov	r3, r9
   df02c:	f000 fe6c 	bl	dfd08 <__aeabi_dsub>
   df030:	4652      	mov	r2, sl
   df032:	4680      	mov	r8, r0
   df034:	4689      	mov	r9, r1
   df036:	465b      	mov	r3, fp
   df038:	4620      	mov	r0, r4
   df03a:	4629      	mov	r1, r5
   df03c:	f001 f818 	bl	e0070 <__aeabi_dmul>
   df040:	ec53 2b18 	vmov	r2, r3, d8
   df044:	4604      	mov	r4, r0
   df046:	460d      	mov	r5, r1
   df048:	4630      	mov	r0, r6
   df04a:	4639      	mov	r1, r7
   df04c:	f001 f810 	bl	e0070 <__aeabi_dmul>
   df050:	4602      	mov	r2, r0
   df052:	460b      	mov	r3, r1
   df054:	4620      	mov	r0, r4
   df056:	4629      	mov	r1, r5
   df058:	f000 fe56 	bl	dfd08 <__aeabi_dsub>
   df05c:	4602      	mov	r2, r0
   df05e:	460b      	mov	r3, r1
   df060:	4640      	mov	r0, r8
   df062:	4649      	mov	r1, r9
   df064:	f000 fe50 	bl	dfd08 <__aeabi_dsub>
   df068:	4602      	mov	r2, r0
   df06a:	460b      	mov	r3, r1
   df06c:	e9dd 0100 	ldrd	r0, r1, [sp]
   df070:	f000 fe4a 	bl	dfd08 <__aeabi_dsub>
   df074:	ec41 0b10 	vmov	d0, r0, r1
   df078:	b003      	add	sp, #12
   df07a:	ecbd 8b02 	vpop	{d8}
   df07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df082:	ed9f 7b15 	vldr	d7, [pc, #84]	; df0d8 <__kernel_cos+0x260>
   df086:	f04f 0800 	mov.w	r8, #0
   df08a:	ed8d 7b00 	vstr	d7, [sp]
   df08e:	f8df 9068 	ldr.w	r9, [pc, #104]	; df0f8 <__kernel_cos+0x280>
   df092:	e7c3      	b.n	df01c <__kernel_cos+0x1a4>
   df094:	ed9f 0b12 	vldr	d0, [pc, #72]	; df0e0 <__kernel_cos+0x268>
   df098:	b003      	add	sp, #12
   df09a:	ecbd 8b02 	vpop	{d8}
   df09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df0a2:	bf00      	nop
   df0a4:	f3af 8000 	nop.w
   df0a8:	be8838d4 	.word	0xbe8838d4
   df0ac:	bda8fae9 	.word	0xbda8fae9
   df0b0:	bdb4b1c4 	.word	0xbdb4b1c4
   df0b4:	3e21ee9e 	.word	0x3e21ee9e
   df0b8:	809c52ad 	.word	0x809c52ad
   df0bc:	3e927e4f 	.word	0x3e927e4f
   df0c0:	19cb1590 	.word	0x19cb1590
   df0c4:	3efa01a0 	.word	0x3efa01a0
   df0c8:	16c15177 	.word	0x16c15177
   df0cc:	3f56c16c 	.word	0x3f56c16c
   df0d0:	5555554c 	.word	0x5555554c
   df0d4:	3fa55555 	.word	0x3fa55555
   df0d8:	00000000 	.word	0x00000000
   df0dc:	3fe70000 	.word	0x3fe70000
   df0e0:	00000000 	.word	0x00000000
   df0e4:	3ff00000 	.word	0x3ff00000
   df0e8:	3fe00000 	.word	0x3fe00000
   df0ec:	3ff00000 	.word	0x3ff00000
   df0f0:	3fd33332 	.word	0x3fd33332
   df0f4:	3fe90000 	.word	0x3fe90000
   df0f8:	3fd20000 	.word	0x3fd20000
   df0fc:	00000000 	.word	0x00000000

000df100 <__kernel_rem_pio2>:
   df100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df104:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   df108:	4c81      	ldr	r4, [pc, #516]	; (df310 <__kernel_rem_pio2+0x210>)
   df10a:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   df10c:	4d81      	ldr	r5, [pc, #516]	; (df314 <__kernel_rem_pio2+0x214>)
   df10e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   df112:	9407      	str	r4, [sp, #28]
   df114:	4626      	mov	r6, r4
   df116:	1ed4      	subs	r4, r2, #3
   df118:	fb85 7504 	smull	r7, r5, r5, r4
   df11c:	17e4      	asrs	r4, r4, #31
   df11e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   df122:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   df126:	461d      	mov	r5, r3
   df128:	930a      	str	r3, [sp, #40]	; 0x28
   df12a:	1c63      	adds	r3, r4, #1
   df12c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   df130:	3d01      	subs	r5, #1
   df132:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   df136:	9306      	str	r3, [sp, #24]
   df138:	462b      	mov	r3, r5
   df13a:	940b      	str	r4, [sp, #44]	; 0x2c
   df13c:	9500      	str	r5, [sp, #0]
   df13e:	1b65      	subs	r5, r4, r5
   df140:	18f4      	adds	r4, r6, r3
   df142:	9003      	str	r0, [sp, #12]
   df144:	9108      	str	r1, [sp, #32]
   df146:	d416      	bmi.n	df176 <__kernel_rem_pio2+0x76>
   df148:	442c      	add	r4, r5
   df14a:	3401      	adds	r4, #1
   df14c:	ae22      	add	r6, sp, #136	; 0x88
   df14e:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   df150:	e008      	b.n	df164 <__kernel_rem_pio2+0x64>
   df152:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   df156:	f000 ff25 	bl	dffa4 <__aeabi_i2d>
   df15a:	3501      	adds	r5, #1
   df15c:	42a5      	cmp	r5, r4
   df15e:	e8e6 0102 	strd	r0, r1, [r6], #8
   df162:	d008      	beq.n	df176 <__kernel_rem_pio2+0x76>
   df164:	2d00      	cmp	r5, #0
   df166:	daf4      	bge.n	df152 <__kernel_rem_pio2+0x52>
   df168:	3501      	adds	r5, #1
   df16a:	2000      	movs	r0, #0
   df16c:	2100      	movs	r1, #0
   df16e:	42a5      	cmp	r5, r4
   df170:	e8e6 0102 	strd	r0, r1, [r6], #8
   df174:	d1f6      	bne.n	df164 <__kernel_rem_pio2+0x64>
   df176:	9b07      	ldr	r3, [sp, #28]
   df178:	2b00      	cmp	r3, #0
   df17a:	f2c0 83c2 	blt.w	df902 <__kernel_rem_pio2+0x802>
   df17e:	9b07      	ldr	r3, [sp, #28]
   df180:	f103 0b01 	add.w	fp, r3, #1
   df184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   df186:	a922      	add	r1, sp, #136	; 0x88
   df188:	00db      	lsls	r3, r3, #3
   df18a:	461a      	mov	r2, r3
   df18c:	eb01 0903 	add.w	r9, r1, r3
   df190:	9304      	str	r3, [sp, #16]
   df192:	9b03      	ldr	r3, [sp, #12]
   df194:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   df198:	4619      	mov	r1, r3
   df19a:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   df19e:	eb01 0802 	add.w	r8, r1, r2
   df1a2:	9b00      	ldr	r3, [sp, #0]
   df1a4:	2b00      	cmp	r3, #0
   df1a6:	f2c0 818f 	blt.w	df4c8 <__kernel_rem_pio2+0x3c8>
   df1aa:	9c03      	ldr	r4, [sp, #12]
   df1ac:	464d      	mov	r5, r9
   df1ae:	2600      	movs	r6, #0
   df1b0:	2700      	movs	r7, #0
   df1b2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   df1b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   df1ba:	f000 ff59 	bl	e0070 <__aeabi_dmul>
   df1be:	4602      	mov	r2, r0
   df1c0:	460b      	mov	r3, r1
   df1c2:	4630      	mov	r0, r6
   df1c4:	4639      	mov	r1, r7
   df1c6:	f000 fda1 	bl	dfd0c <__adddf3>
   df1ca:	4544      	cmp	r4, r8
   df1cc:	4606      	mov	r6, r0
   df1ce:	460f      	mov	r7, r1
   df1d0:	d1ef      	bne.n	df1b2 <__kernel_rem_pio2+0xb2>
   df1d2:	e8ea 6702 	strd	r6, r7, [sl], #8
   df1d6:	45da      	cmp	sl, fp
   df1d8:	f109 0908 	add.w	r9, r9, #8
   df1dc:	d1e1      	bne.n	df1a2 <__kernel_rem_pio2+0xa2>
   df1de:	9907      	ldr	r1, [sp, #28]
   df1e0:	9804      	ldr	r0, [sp, #16]
   df1e2:	9c03      	ldr	r4, [sp, #12]
   df1e4:	9104      	str	r1, [sp, #16]
   df1e6:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   df1ea:	3b02      	subs	r3, #2
   df1ec:	009b      	lsls	r3, r3, #2
   df1ee:	4420      	add	r0, r4
   df1f0:	1d1a      	adds	r2, r3, #4
   df1f2:	4683      	mov	fp, r0
   df1f4:	a80e      	add	r0, sp, #56	; 0x38
   df1f6:	4402      	add	r2, r0
   df1f8:	4403      	add	r3, r0
   df1fa:	920d      	str	r2, [sp, #52]	; 0x34
   df1fc:	930c      	str	r3, [sp, #48]	; 0x30
   df1fe:	9a04      	ldr	r2, [sp, #16]
   df200:	a99a      	add	r1, sp, #616	; 0x268
   df202:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   df206:	2a00      	cmp	r2, #0
   df208:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   df20c:	dd29      	ble.n	df262 <__kernel_rem_pio2+0x162>
   df20e:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   df212:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   df216:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   df21a:	2200      	movs	r2, #0
   df21c:	4b3e      	ldr	r3, [pc, #248]	; (df318 <__kernel_rem_pio2+0x218>)
   df21e:	4620      	mov	r0, r4
   df220:	4629      	mov	r1, r5
   df222:	f000 ff25 	bl	e0070 <__aeabi_dmul>
   df226:	f001 f9d3 	bl	e05d0 <__aeabi_d2iz>
   df22a:	f000 febb 	bl	dffa4 <__aeabi_i2d>
   df22e:	2200      	movs	r2, #0
   df230:	4b3a      	ldr	r3, [pc, #232]	; (df31c <__kernel_rem_pio2+0x21c>)
   df232:	4606      	mov	r6, r0
   df234:	460f      	mov	r7, r1
   df236:	f000 ff1b 	bl	e0070 <__aeabi_dmul>
   df23a:	4602      	mov	r2, r0
   df23c:	460b      	mov	r3, r1
   df23e:	4620      	mov	r0, r4
   df240:	4629      	mov	r1, r5
   df242:	f000 fd61 	bl	dfd08 <__aeabi_dsub>
   df246:	f001 f9c3 	bl	e05d0 <__aeabi_d2iz>
   df24a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   df24e:	f849 0f04 	str.w	r0, [r9, #4]!
   df252:	4639      	mov	r1, r7
   df254:	4630      	mov	r0, r6
   df256:	f000 fd59 	bl	dfd0c <__adddf3>
   df25a:	45d0      	cmp	r8, sl
   df25c:	4604      	mov	r4, r0
   df25e:	460d      	mov	r5, r1
   df260:	d1db      	bne.n	df21a <__kernel_rem_pio2+0x11a>
   df262:	f8dd 9018 	ldr.w	r9, [sp, #24]
   df266:	ec45 4b10 	vmov	d0, r4, r5
   df26a:	4648      	mov	r0, r9
   df26c:	f000 fcb4 	bl	dfbd8 <scalbn>
   df270:	ec55 4b10 	vmov	r4, r5, d0
   df274:	2200      	movs	r2, #0
   df276:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   df27a:	ee10 0a10 	vmov	r0, s0
   df27e:	4629      	mov	r1, r5
   df280:	f000 fef6 	bl	e0070 <__aeabi_dmul>
   df284:	ec41 0b10 	vmov	d0, r0, r1
   df288:	f000 fc16 	bl	dfab8 <floor>
   df28c:	2200      	movs	r2, #0
   df28e:	ec51 0b10 	vmov	r0, r1, d0
   df292:	4b23      	ldr	r3, [pc, #140]	; (df320 <__kernel_rem_pio2+0x220>)
   df294:	f000 feec 	bl	e0070 <__aeabi_dmul>
   df298:	4602      	mov	r2, r0
   df29a:	460b      	mov	r3, r1
   df29c:	4620      	mov	r0, r4
   df29e:	4629      	mov	r1, r5
   df2a0:	f000 fd32 	bl	dfd08 <__aeabi_dsub>
   df2a4:	460d      	mov	r5, r1
   df2a6:	4604      	mov	r4, r0
   df2a8:	f001 f992 	bl	e05d0 <__aeabi_d2iz>
   df2ac:	4680      	mov	r8, r0
   df2ae:	f000 fe79 	bl	dffa4 <__aeabi_i2d>
   df2b2:	460b      	mov	r3, r1
   df2b4:	4602      	mov	r2, r0
   df2b6:	4629      	mov	r1, r5
   df2b8:	4620      	mov	r0, r4
   df2ba:	f000 fd25 	bl	dfd08 <__aeabi_dsub>
   df2be:	464b      	mov	r3, r9
   df2c0:	2b00      	cmp	r3, #0
   df2c2:	4606      	mov	r6, r0
   df2c4:	460f      	mov	r7, r1
   df2c6:	f340 80e5 	ble.w	df494 <__kernel_rem_pio2+0x394>
   df2ca:	9a04      	ldr	r2, [sp, #16]
   df2cc:	a90e      	add	r1, sp, #56	; 0x38
   df2ce:	3a01      	subs	r2, #1
   df2d0:	f1c9 0318 	rsb	r3, r9, #24
   df2d4:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   df2d8:	fa45 f103 	asr.w	r1, r5, r3
   df2dc:	fa01 f303 	lsl.w	r3, r1, r3
   df2e0:	a80e      	add	r0, sp, #56	; 0x38
   df2e2:	1aeb      	subs	r3, r5, r3
   df2e4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   df2e8:	f1c9 0517 	rsb	r5, r9, #23
   df2ec:	4488      	add	r8, r1
   df2ee:	fa43 f505 	asr.w	r5, r3, r5
   df2f2:	2d00      	cmp	r5, #0
   df2f4:	dd41      	ble.n	df37a <__kernel_rem_pio2+0x27a>
   df2f6:	9b04      	ldr	r3, [sp, #16]
   df2f8:	2b00      	cmp	r3, #0
   df2fa:	f108 0801 	add.w	r8, r8, #1
   df2fe:	f340 82c9 	ble.w	df894 <__kernel_rem_pio2+0x794>
   df302:	2200      	movs	r2, #0
   df304:	4614      	mov	r4, r2
   df306:	a90d      	add	r1, sp, #52	; 0x34
   df308:	9804      	ldr	r0, [sp, #16]
   df30a:	46ae      	mov	lr, r5
   df30c:	e012      	b.n	df334 <__kernel_rem_pio2+0x234>
   df30e:	bf00      	nop
   df310:	000e5328 	.word	0x000e5328
   df314:	2aaaaaab 	.word	0x2aaaaaab
   df318:	3e700000 	.word	0x3e700000
   df31c:	41700000 	.word	0x41700000
   df320:	40200000 	.word	0x40200000
   df324:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   df328:	b10b      	cbz	r3, df32e <__kernel_rem_pio2+0x22e>
   df32a:	600d      	str	r5, [r1, #0]
   df32c:	2401      	movs	r4, #1
   df32e:	3201      	adds	r2, #1
   df330:	4290      	cmp	r0, r2
   df332:	dd0d      	ble.n	df350 <__kernel_rem_pio2+0x250>
   df334:	f851 3f04 	ldr.w	r3, [r1, #4]!
   df338:	2c00      	cmp	r4, #0
   df33a:	d0f3      	beq.n	df324 <__kernel_rem_pio2+0x224>
   df33c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   df340:	3201      	adds	r2, #1
   df342:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   df346:	4290      	cmp	r0, r2
   df348:	600b      	str	r3, [r1, #0]
   df34a:	f04f 0401 	mov.w	r4, #1
   df34e:	dcf1      	bgt.n	df334 <__kernel_rem_pio2+0x234>
   df350:	4675      	mov	r5, lr
   df352:	9b06      	ldr	r3, [sp, #24]
   df354:	2b00      	cmp	r3, #0
   df356:	dd0e      	ble.n	df376 <__kernel_rem_pio2+0x276>
   df358:	2b01      	cmp	r3, #1
   df35a:	f000 80a3 	beq.w	df4a4 <__kernel_rem_pio2+0x3a4>
   df35e:	2b02      	cmp	r3, #2
   df360:	d109      	bne.n	df376 <__kernel_rem_pio2+0x276>
   df362:	9b04      	ldr	r3, [sp, #16]
   df364:	1e5a      	subs	r2, r3, #1
   df366:	ab0e      	add	r3, sp, #56	; 0x38
   df368:	a90e      	add	r1, sp, #56	; 0x38
   df36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   df36e:	f3c3 0315 	ubfx	r3, r3, #0, #22
   df372:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   df376:	2d02      	cmp	r5, #2
   df378:	d074      	beq.n	df464 <__kernel_rem_pio2+0x364>
   df37a:	2200      	movs	r2, #0
   df37c:	2300      	movs	r3, #0
   df37e:	4630      	mov	r0, r6
   df380:	4639      	mov	r1, r7
   df382:	f001 f8dd 	bl	e0540 <__aeabi_dcmpeq>
   df386:	2800      	cmp	r0, #0
   df388:	f000 8249 	beq.w	df81e <__kernel_rem_pio2+0x71e>
   df38c:	9a04      	ldr	r2, [sp, #16]
   df38e:	9b07      	ldr	r3, [sp, #28]
   df390:	1e50      	subs	r0, r2, #1
   df392:	4283      	cmp	r3, r0
   df394:	dc10      	bgt.n	df3b8 <__kernel_rem_pio2+0x2b8>
   df396:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   df39a:	3b01      	subs	r3, #1
   df39c:	aa0e      	add	r2, sp, #56	; 0x38
   df39e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   df3a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   df3a4:	2200      	movs	r2, #0
   df3a6:	f853 1904 	ldr.w	r1, [r3], #-4
   df3aa:	42a3      	cmp	r3, r4
   df3ac:	ea42 0201 	orr.w	r2, r2, r1
   df3b0:	d1f9      	bne.n	df3a6 <__kernel_rem_pio2+0x2a6>
   df3b2:	2a00      	cmp	r2, #0
   df3b4:	f040 80a4 	bne.w	df500 <__kernel_rem_pio2+0x400>
   df3b8:	9b07      	ldr	r3, [sp, #28]
   df3ba:	aa0e      	add	r2, sp, #56	; 0x38
   df3bc:	3b01      	subs	r3, #1
   df3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   df3c2:	2b00      	cmp	r3, #0
   df3c4:	f040 8264 	bne.w	df890 <__kernel_rem_pio2+0x790>
   df3c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   df3ca:	2301      	movs	r3, #1
   df3cc:	f852 1904 	ldr.w	r1, [r2], #-4
   df3d0:	3301      	adds	r3, #1
   df3d2:	2900      	cmp	r1, #0
   df3d4:	d0fa      	beq.n	df3cc <__kernel_rem_pio2+0x2cc>
   df3d6:	9a04      	ldr	r2, [sp, #16]
   df3d8:	18d3      	adds	r3, r2, r3
   df3da:	f102 0a01 	add.w	sl, r2, #1
   df3de:	459a      	cmp	sl, r3
   df3e0:	9309      	str	r3, [sp, #36]	; 0x24
   df3e2:	dc3c      	bgt.n	df45e <__kernel_rem_pio2+0x35e>
   df3e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   df3e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   df3e8:	9909      	ldr	r1, [sp, #36]	; 0x24
   df3ea:	eb0a 0903 	add.w	r9, sl, r3
   df3ee:	9b04      	ldr	r3, [sp, #16]
   df3f0:	4698      	mov	r8, r3
   df3f2:	4490      	add	r8, r2
   df3f4:	188b      	adds	r3, r1, r2
   df3f6:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   df3fa:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   df3fc:	f109 39ff 	add.w	r9, r9, #4294967295
   df400:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   df404:	aa22      	add	r2, sp, #136	; 0x88
   df406:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   df40a:	9304      	str	r3, [sp, #16]
   df40c:	ab72      	add	r3, sp, #456	; 0x1c8
   df40e:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   df412:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   df416:	f859 0f04 	ldr.w	r0, [r9, #4]!
   df41a:	f000 fdc3 	bl	dffa4 <__aeabi_i2d>
   df41e:	9b00      	ldr	r3, [sp, #0]
   df420:	2b00      	cmp	r3, #0
   df422:	e8e8 0102 	strd	r0, r1, [r8], #8
   df426:	f04f 0600 	mov.w	r6, #0
   df42a:	f04f 0700 	mov.w	r7, #0
   df42e:	db11      	blt.n	df454 <__kernel_rem_pio2+0x354>
   df430:	9c03      	ldr	r4, [sp, #12]
   df432:	4645      	mov	r5, r8
   df434:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   df438:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   df43c:	f000 fe18 	bl	e0070 <__aeabi_dmul>
   df440:	4602      	mov	r2, r0
   df442:	460b      	mov	r3, r1
   df444:	4630      	mov	r0, r6
   df446:	4639      	mov	r1, r7
   df448:	f000 fc60 	bl	dfd0c <__adddf3>
   df44c:	455c      	cmp	r4, fp
   df44e:	4606      	mov	r6, r0
   df450:	460f      	mov	r7, r1
   df452:	d1ef      	bne.n	df434 <__kernel_rem_pio2+0x334>
   df454:	9b04      	ldr	r3, [sp, #16]
   df456:	4598      	cmp	r8, r3
   df458:	e8ea 6702 	strd	r6, r7, [sl], #8
   df45c:	d1db      	bne.n	df416 <__kernel_rem_pio2+0x316>
   df45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   df460:	9304      	str	r3, [sp, #16]
   df462:	e6cc      	b.n	df1fe <__kernel_rem_pio2+0xfe>
   df464:	4632      	mov	r2, r6
   df466:	463b      	mov	r3, r7
   df468:	2000      	movs	r0, #0
   df46a:	49b3      	ldr	r1, [pc, #716]	; (df738 <__kernel_rem_pio2+0x638>)
   df46c:	f000 fc4c 	bl	dfd08 <__aeabi_dsub>
   df470:	4606      	mov	r6, r0
   df472:	460f      	mov	r7, r1
   df474:	2c00      	cmp	r4, #0
   df476:	d080      	beq.n	df37a <__kernel_rem_pio2+0x27a>
   df478:	9806      	ldr	r0, [sp, #24]
   df47a:	ed9f 0bab 	vldr	d0, [pc, #684]	; df728 <__kernel_rem_pio2+0x628>
   df47e:	f000 fbab 	bl	dfbd8 <scalbn>
   df482:	4630      	mov	r0, r6
   df484:	4639      	mov	r1, r7
   df486:	ec53 2b10 	vmov	r2, r3, d0
   df48a:	f000 fc3d 	bl	dfd08 <__aeabi_dsub>
   df48e:	4606      	mov	r6, r0
   df490:	460f      	mov	r7, r1
   df492:	e772      	b.n	df37a <__kernel_rem_pio2+0x27a>
   df494:	d111      	bne.n	df4ba <__kernel_rem_pio2+0x3ba>
   df496:	9b04      	ldr	r3, [sp, #16]
   df498:	aa0e      	add	r2, sp, #56	; 0x38
   df49a:	3b01      	subs	r3, #1
   df49c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   df4a0:	15ed      	asrs	r5, r5, #23
   df4a2:	e726      	b.n	df2f2 <__kernel_rem_pio2+0x1f2>
   df4a4:	9b04      	ldr	r3, [sp, #16]
   df4a6:	1e5a      	subs	r2, r3, #1
   df4a8:	ab0e      	add	r3, sp, #56	; 0x38
   df4aa:	a90e      	add	r1, sp, #56	; 0x38
   df4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   df4b0:	f3c3 0316 	ubfx	r3, r3, #0, #23
   df4b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   df4b8:	e75d      	b.n	df376 <__kernel_rem_pio2+0x276>
   df4ba:	2200      	movs	r2, #0
   df4bc:	4b9f      	ldr	r3, [pc, #636]	; (df73c <__kernel_rem_pio2+0x63c>)
   df4be:	f001 f85d 	bl	e057c <__aeabi_dcmpge>
   df4c2:	b958      	cbnz	r0, df4dc <__kernel_rem_pio2+0x3dc>
   df4c4:	4605      	mov	r5, r0
   df4c6:	e758      	b.n	df37a <__kernel_rem_pio2+0x27a>
   df4c8:	2600      	movs	r6, #0
   df4ca:	2700      	movs	r7, #0
   df4cc:	e8ea 6702 	strd	r6, r7, [sl], #8
   df4d0:	45da      	cmp	sl, fp
   df4d2:	f109 0908 	add.w	r9, r9, #8
   df4d6:	f47f ae64 	bne.w	df1a2 <__kernel_rem_pio2+0xa2>
   df4da:	e680      	b.n	df1de <__kernel_rem_pio2+0xde>
   df4dc:	9b04      	ldr	r3, [sp, #16]
   df4de:	2b00      	cmp	r3, #0
   df4e0:	f108 0801 	add.w	r8, r8, #1
   df4e4:	bfc8      	it	gt
   df4e6:	2502      	movgt	r5, #2
   df4e8:	f73f af0b 	bgt.w	df302 <__kernel_rem_pio2+0x202>
   df4ec:	4632      	mov	r2, r6
   df4ee:	463b      	mov	r3, r7
   df4f0:	2000      	movs	r0, #0
   df4f2:	4991      	ldr	r1, [pc, #580]	; (df738 <__kernel_rem_pio2+0x638>)
   df4f4:	f000 fc08 	bl	dfd08 <__aeabi_dsub>
   df4f8:	2502      	movs	r5, #2
   df4fa:	4606      	mov	r6, r0
   df4fc:	460f      	mov	r7, r1
   df4fe:	e73c      	b.n	df37a <__kernel_rem_pio2+0x27a>
   df500:	a90e      	add	r1, sp, #56	; 0x38
   df502:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   df506:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   df50a:	9906      	ldr	r1, [sp, #24]
   df50c:	9000      	str	r0, [sp, #0]
   df50e:	3918      	subs	r1, #24
   df510:	4602      	mov	r2, r0
   df512:	9503      	str	r5, [sp, #12]
   df514:	9106      	str	r1, [sp, #24]
   df516:	b96b      	cbnz	r3, df534 <__kernel_rem_pio2+0x434>
   df518:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   df51c:	3b01      	subs	r3, #1
   df51e:	a80e      	add	r0, sp, #56	; 0x38
   df520:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   df524:	f853 0904 	ldr.w	r0, [r3], #-4
   df528:	3a01      	subs	r2, #1
   df52a:	3918      	subs	r1, #24
   df52c:	2800      	cmp	r0, #0
   df52e:	d0f9      	beq.n	df524 <__kernel_rem_pio2+0x424>
   df530:	9200      	str	r2, [sp, #0]
   df532:	9106      	str	r1, [sp, #24]
   df534:	9806      	ldr	r0, [sp, #24]
   df536:	ed9f 0b7c 	vldr	d0, [pc, #496]	; df728 <__kernel_rem_pio2+0x628>
   df53a:	f000 fb4d 	bl	dfbd8 <scalbn>
   df53e:	9b00      	ldr	r3, [sp, #0]
   df540:	2b00      	cmp	r3, #0
   df542:	ec55 4b10 	vmov	r4, r5, d0
   df546:	f2c0 81c1 	blt.w	df8cc <__kernel_rem_pio2+0x7cc>
   df54a:	00da      	lsls	r2, r3, #3
   df54c:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   df550:	a90e      	add	r1, sp, #56	; 0x38
   df552:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   df556:	eb08 0b02 	add.w	fp, r8, r2
   df55a:	9206      	str	r2, [sp, #24]
   df55c:	3604      	adds	r6, #4
   df55e:	f10b 0708 	add.w	r7, fp, #8
   df562:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   df566:	f000 fd1d 	bl	dffa4 <__aeabi_i2d>
   df56a:	4622      	mov	r2, r4
   df56c:	462b      	mov	r3, r5
   df56e:	f000 fd7f 	bl	e0070 <__aeabi_dmul>
   df572:	2200      	movs	r2, #0
   df574:	e967 0102 	strd	r0, r1, [r7, #-8]!
   df578:	4b71      	ldr	r3, [pc, #452]	; (df740 <__kernel_rem_pio2+0x640>)
   df57a:	4620      	mov	r0, r4
   df57c:	4629      	mov	r1, r5
   df57e:	f000 fd77 	bl	e0070 <__aeabi_dmul>
   df582:	4547      	cmp	r7, r8
   df584:	4604      	mov	r4, r0
   df586:	460d      	mov	r5, r1
   df588:	d1eb      	bne.n	df562 <__kernel_rem_pio2+0x462>
   df58a:	ac4a      	add	r4, sp, #296	; 0x128
   df58c:	f8dd 901c 	ldr.w	r9, [sp, #28]
   df590:	9404      	str	r4, [sp, #16]
   df592:	f04f 0a00 	mov.w	sl, #0
   df596:	f1b9 0f00 	cmp.w	r9, #0
   df59a:	f2c0 812b 	blt.w	df7f4 <__kernel_rem_pio2+0x6f4>
   df59e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; df744 <__kernel_rem_pio2+0x644>
   df5a2:	465d      	mov	r5, fp
   df5a4:	a362      	add	r3, pc, #392	; (adr r3, df730 <__kernel_rem_pio2+0x630>)
   df5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df5aa:	2600      	movs	r6, #0
   df5ac:	2700      	movs	r7, #0
   df5ae:	2400      	movs	r4, #0
   df5b0:	e003      	b.n	df5ba <__kernel_rem_pio2+0x4ba>
   df5b2:	45a2      	cmp	sl, r4
   df5b4:	db10      	blt.n	df5d8 <__kernel_rem_pio2+0x4d8>
   df5b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   df5ba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   df5be:	f000 fd57 	bl	e0070 <__aeabi_dmul>
   df5c2:	4602      	mov	r2, r0
   df5c4:	460b      	mov	r3, r1
   df5c6:	4630      	mov	r0, r6
   df5c8:	4639      	mov	r1, r7
   df5ca:	f000 fb9f 	bl	dfd0c <__adddf3>
   df5ce:	3401      	adds	r4, #1
   df5d0:	45a1      	cmp	r9, r4
   df5d2:	4606      	mov	r6, r0
   df5d4:	460f      	mov	r7, r1
   df5d6:	daec      	bge.n	df5b2 <__kernel_rem_pio2+0x4b2>
   df5d8:	9b04      	ldr	r3, [sp, #16]
   df5da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   df5de:	f1ab 0b08 	sub.w	fp, fp, #8
   df5e2:	e9c3 6700 	strd	r6, r7, [r3]
   df5e6:	ab70      	add	r3, sp, #448	; 0x1c0
   df5e8:	459b      	cmp	fp, r3
   df5ea:	f10a 0a01 	add.w	sl, sl, #1
   df5ee:	d1d2      	bne.n	df596 <__kernel_rem_pio2+0x496>
   df5f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   df5f2:	9c04      	ldr	r4, [sp, #16]
   df5f4:	2b03      	cmp	r3, #3
   df5f6:	f200 808d 	bhi.w	df714 <__kernel_rem_pio2+0x614>
   df5fa:	e8df f013 	tbh	[pc, r3, lsl #1]
   df5fe:	00dd      	.short	0x00dd
   df600:	00a500a5 	.word	0x00a500a5
   df604:	0004      	.short	0x0004
   df606:	9b00      	ldr	r3, [sp, #0]
   df608:	2b00      	cmp	r3, #0
   df60a:	f340 815c 	ble.w	df8c6 <__kernel_rem_pio2+0x7c6>
   df60e:	9b00      	ldr	r3, [sp, #0]
   df610:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   df614:	9b06      	ldr	r3, [sp, #24]
   df616:	f10b 3bff 	add.w	fp, fp, #4294967295
   df61a:	18e2      	adds	r2, r4, r3
   df61c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   df620:	e9d2 8900 	ldrd	r8, r9, [r2]
   df624:	f103 0208 	add.w	r2, r3, #8
   df628:	3310      	adds	r3, #16
   df62a:	eb04 0a02 	add.w	sl, r4, r2
   df62e:	18e5      	adds	r5, r4, r3
   df630:	ed3a 7b02 	vldmdb	sl!, {d7}
   df634:	4642      	mov	r2, r8
   df636:	464b      	mov	r3, r9
   df638:	ec51 0b17 	vmov	r0, r1, d7
   df63c:	ed8d 7b04 	vstr	d7, [sp, #16]
   df640:	f000 fb64 	bl	dfd0c <__adddf3>
   df644:	4606      	mov	r6, r0
   df646:	460f      	mov	r7, r1
   df648:	4602      	mov	r2, r0
   df64a:	460b      	mov	r3, r1
   df64c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df650:	f000 fb5a 	bl	dfd08 <__aeabi_dsub>
   df654:	464b      	mov	r3, r9
   df656:	4642      	mov	r2, r8
   df658:	f000 fb58 	bl	dfd0c <__adddf3>
   df65c:	e965 0102 	strd	r0, r1, [r5, #-8]!
   df660:	ab4c      	add	r3, sp, #304	; 0x130
   df662:	429d      	cmp	r5, r3
   df664:	46b0      	mov	r8, r6
   df666:	46b9      	mov	r9, r7
   df668:	e9ca 6700 	strd	r6, r7, [sl]
   df66c:	d1e0      	bne.n	df630 <__kernel_rem_pio2+0x530>
   df66e:	9b00      	ldr	r3, [sp, #0]
   df670:	2b01      	cmp	r3, #1
   df672:	f340 8128 	ble.w	df8c6 <__kernel_rem_pio2+0x7c6>
   df676:	9b06      	ldr	r3, [sp, #24]
   df678:	4423      	add	r3, r4
   df67a:	ed93 7b00 	vldr	d7, [r3]
   df67e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   df682:	f10b 0a10 	add.w	sl, fp, #16
   df686:	ed8d 7b00 	vstr	d7, [sp]
   df68a:	44a2      	add	sl, r4
   df68c:	f10b 0b08 	add.w	fp, fp, #8
   df690:	eb04 050b 	add.w	r5, r4, fp
   df694:	46d0      	mov	r8, sl
   df696:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   df69a:	f8cd a010 	str.w	sl, [sp, #16]
   df69e:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   df6a2:	e9dd 0100 	ldrd	r0, r1, [sp]
   df6a6:	464a      	mov	r2, r9
   df6a8:	4653      	mov	r3, sl
   df6aa:	f000 fb2f 	bl	dfd0c <__adddf3>
   df6ae:	4606      	mov	r6, r0
   df6b0:	460f      	mov	r7, r1
   df6b2:	4602      	mov	r2, r0
   df6b4:	460b      	mov	r3, r1
   df6b6:	4648      	mov	r0, r9
   df6b8:	4651      	mov	r1, sl
   df6ba:	f000 fb25 	bl	dfd08 <__aeabi_dsub>
   df6be:	e9dd 2300 	ldrd	r2, r3, [sp]
   df6c2:	f000 fb23 	bl	dfd0c <__adddf3>
   df6c6:	e968 0102 	strd	r0, r1, [r8, #-8]!
   df6ca:	45c3      	cmp	fp, r8
   df6cc:	e9cd 6700 	strd	r6, r7, [sp]
   df6d0:	e9c5 6700 	strd	r6, r7, [r5]
   df6d4:	d1e3      	bne.n	df69e <__kernel_rem_pio2+0x59e>
   df6d6:	f8dd a010 	ldr.w	sl, [sp, #16]
   df6da:	2000      	movs	r0, #0
   df6dc:	2100      	movs	r1, #0
   df6de:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   df6e2:	f000 fb13 	bl	dfd0c <__adddf3>
   df6e6:	45d3      	cmp	fp, sl
   df6e8:	d1f9      	bne.n	df6de <__kernel_rem_pio2+0x5de>
   df6ea:	9b03      	ldr	r3, [sp, #12]
   df6ec:	2b00      	cmp	r3, #0
   df6ee:	f000 80d3 	beq.w	df898 <__kernel_rem_pio2+0x798>
   df6f2:	6862      	ldr	r2, [r4, #4]
   df6f4:	68e3      	ldr	r3, [r4, #12]
   df6f6:	9f08      	ldr	r7, [sp, #32]
   df6f8:	6825      	ldr	r5, [r4, #0]
   df6fa:	68a4      	ldr	r4, [r4, #8]
   df6fc:	603d      	str	r5, [r7, #0]
   df6fe:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   df702:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   df706:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   df70a:	607a      	str	r2, [r7, #4]
   df70c:	60fb      	str	r3, [r7, #12]
   df70e:	60bc      	str	r4, [r7, #8]
   df710:	6138      	str	r0, [r7, #16]
   df712:	6179      	str	r1, [r7, #20]
   df714:	9b09      	ldr	r3, [sp, #36]	; 0x24
   df716:	f003 0007 	and.w	r0, r3, #7
   df71a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   df71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df722:	bf00      	nop
   df724:	f3af 8000 	nop.w
   df728:	00000000 	.word	0x00000000
   df72c:	3ff00000 	.word	0x3ff00000
   df730:	40000000 	.word	0x40000000
   df734:	3ff921fb 	.word	0x3ff921fb
   df738:	3ff00000 	.word	0x3ff00000
   df73c:	3fe00000 	.word	0x3fe00000
   df740:	3e700000 	.word	0x3e700000
   df744:	000e5340 	.word	0x000e5340
   df748:	9d06      	ldr	r5, [sp, #24]
   df74a:	3508      	adds	r5, #8
   df74c:	4425      	add	r5, r4
   df74e:	2000      	movs	r0, #0
   df750:	2100      	movs	r1, #0
   df752:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   df756:	f000 fad9 	bl	dfd0c <__adddf3>
   df75a:	42a5      	cmp	r5, r4
   df75c:	d1f9      	bne.n	df752 <__kernel_rem_pio2+0x652>
   df75e:	9b03      	ldr	r3, [sp, #12]
   df760:	2b00      	cmp	r3, #0
   df762:	d04a      	beq.n	df7fa <__kernel_rem_pio2+0x6fa>
   df764:	9e08      	ldr	r6, [sp, #32]
   df766:	4602      	mov	r2, r0
   df768:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   df76c:	e886 000c 	stmia.w	r6, {r2, r3}
   df770:	460b      	mov	r3, r1
   df772:	4602      	mov	r2, r0
   df774:	e9d4 0100 	ldrd	r0, r1, [r4]
   df778:	f000 fac6 	bl	dfd08 <__aeabi_dsub>
   df77c:	9b00      	ldr	r3, [sp, #0]
   df77e:	2b00      	cmp	r3, #0
   df780:	dd0d      	ble.n	df79e <__kernel_rem_pio2+0x69e>
   df782:	ad4c      	add	r5, sp, #304	; 0x130
   df784:	2401      	movs	r4, #1
   df786:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   df78a:	f000 fabf 	bl	dfd0c <__adddf3>
   df78e:	9b00      	ldr	r3, [sp, #0]
   df790:	3401      	adds	r4, #1
   df792:	42a3      	cmp	r3, r4
   df794:	daf7      	bge.n	df786 <__kernel_rem_pio2+0x686>
   df796:	9b03      	ldr	r3, [sp, #12]
   df798:	2b00      	cmp	r3, #0
   df79a:	f000 80a7 	beq.w	df8ec <__kernel_rem_pio2+0x7ec>
   df79e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   df7a2:	9908      	ldr	r1, [sp, #32]
   df7a4:	4602      	mov	r2, r0
   df7a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
   df7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   df7ac:	f003 0007 	and.w	r0, r3, #7
   df7b0:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   df7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df7b8:	9b06      	ldr	r3, [sp, #24]
   df7ba:	9d00      	ldr	r5, [sp, #0]
   df7bc:	3308      	adds	r3, #8
   df7be:	2000      	movs	r0, #0
   df7c0:	2100      	movs	r1, #0
   df7c2:	441c      	add	r4, r3
   df7c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   df7c8:	3d01      	subs	r5, #1
   df7ca:	f000 fa9f 	bl	dfd0c <__adddf3>
   df7ce:	1c6b      	adds	r3, r5, #1
   df7d0:	d1f8      	bne.n	df7c4 <__kernel_rem_pio2+0x6c4>
   df7d2:	9b03      	ldr	r3, [sp, #12]
   df7d4:	4602      	mov	r2, r0
   df7d6:	2b00      	cmp	r3, #0
   df7d8:	f000 808e 	beq.w	df8f8 <__kernel_rem_pio2+0x7f8>
   df7dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   df7e0:	9908      	ldr	r1, [sp, #32]
   df7e2:	e9c1 2300 	strd	r2, r3, [r1]
   df7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   df7e8:	f003 0007 	and.w	r0, r3, #7
   df7ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   df7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df7f4:	2600      	movs	r6, #0
   df7f6:	2700      	movs	r7, #0
   df7f8:	e6ee      	b.n	df5d8 <__kernel_rem_pio2+0x4d8>
   df7fa:	9b08      	ldr	r3, [sp, #32]
   df7fc:	4602      	mov	r2, r0
   df7fe:	e9c3 0100 	strd	r0, r1, [r3]
   df802:	460b      	mov	r3, r1
   df804:	e9d4 0100 	ldrd	r0, r1, [r4]
   df808:	f000 fa7e 	bl	dfd08 <__aeabi_dsub>
   df80c:	9c00      	ldr	r4, [sp, #0]
   df80e:	2c00      	cmp	r4, #0
   df810:	4602      	mov	r2, r0
   df812:	460b      	mov	r3, r1
   df814:	dcb5      	bgt.n	df782 <__kernel_rem_pio2+0x682>
   df816:	9908      	ldr	r1, [sp, #32]
   df818:	e9c1 2302 	strd	r2, r3, [r1, #8]
   df81c:	e7c5      	b.n	df7aa <__kernel_rem_pio2+0x6aa>
   df81e:	9b06      	ldr	r3, [sp, #24]
   df820:	9503      	str	r5, [sp, #12]
   df822:	4258      	negs	r0, r3
   df824:	ec47 6b10 	vmov	d0, r6, r7
   df828:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   df82c:	f000 f9d4 	bl	dfbd8 <scalbn>
   df830:	ec55 4b10 	vmov	r4, r5, d0
   df834:	2200      	movs	r2, #0
   df836:	4b38      	ldr	r3, [pc, #224]	; (df918 <__kernel_rem_pio2+0x818>)
   df838:	ee10 0a10 	vmov	r0, s0
   df83c:	4629      	mov	r1, r5
   df83e:	f000 fe9d 	bl	e057c <__aeabi_dcmpge>
   df842:	2800      	cmp	r0, #0
   df844:	d034      	beq.n	df8b0 <__kernel_rem_pio2+0x7b0>
   df846:	2200      	movs	r2, #0
   df848:	4b34      	ldr	r3, [pc, #208]	; (df91c <__kernel_rem_pio2+0x81c>)
   df84a:	4620      	mov	r0, r4
   df84c:	4629      	mov	r1, r5
   df84e:	f000 fc0f 	bl	e0070 <__aeabi_dmul>
   df852:	f000 febd 	bl	e05d0 <__aeabi_d2iz>
   df856:	4606      	mov	r6, r0
   df858:	f000 fba4 	bl	dffa4 <__aeabi_i2d>
   df85c:	2200      	movs	r2, #0
   df85e:	4b2e      	ldr	r3, [pc, #184]	; (df918 <__kernel_rem_pio2+0x818>)
   df860:	f000 fc06 	bl	e0070 <__aeabi_dmul>
   df864:	4602      	mov	r2, r0
   df866:	460b      	mov	r3, r1
   df868:	4620      	mov	r0, r4
   df86a:	4629      	mov	r1, r5
   df86c:	f000 fa4c 	bl	dfd08 <__aeabi_dsub>
   df870:	f000 feae 	bl	e05d0 <__aeabi_d2iz>
   df874:	9904      	ldr	r1, [sp, #16]
   df876:	9b06      	ldr	r3, [sp, #24]
   df878:	460a      	mov	r2, r1
   df87a:	3318      	adds	r3, #24
   df87c:	3201      	adds	r2, #1
   df87e:	9306      	str	r3, [sp, #24]
   df880:	460b      	mov	r3, r1
   df882:	a90e      	add	r1, sp, #56	; 0x38
   df884:	9200      	str	r2, [sp, #0]
   df886:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   df88a:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   df88e:	e651      	b.n	df534 <__kernel_rem_pio2+0x434>
   df890:	2301      	movs	r3, #1
   df892:	e5a0      	b.n	df3d6 <__kernel_rem_pio2+0x2d6>
   df894:	2400      	movs	r4, #0
   df896:	e55c      	b.n	df352 <__kernel_rem_pio2+0x252>
   df898:	e9d4 6700 	ldrd	r6, r7, [r4]
   df89c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   df8a0:	9d08      	ldr	r5, [sp, #32]
   df8a2:	e9c5 0104 	strd	r0, r1, [r5, #16]
   df8a6:	e9c5 6700 	strd	r6, r7, [r5]
   df8aa:	e9c5 2302 	strd	r2, r3, [r5, #8]
   df8ae:	e731      	b.n	df714 <__kernel_rem_pio2+0x614>
   df8b0:	4629      	mov	r1, r5
   df8b2:	4620      	mov	r0, r4
   df8b4:	f000 fe8c 	bl	e05d0 <__aeabi_d2iz>
   df8b8:	9a04      	ldr	r2, [sp, #16]
   df8ba:	9200      	str	r2, [sp, #0]
   df8bc:	a90e      	add	r1, sp, #56	; 0x38
   df8be:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   df8c2:	e637      	b.n	df534 <__kernel_rem_pio2+0x434>
   df8c4:	ac4a      	add	r4, sp, #296	; 0x128
   df8c6:	2000      	movs	r0, #0
   df8c8:	2100      	movs	r1, #0
   df8ca:	e70e      	b.n	df6ea <__kernel_rem_pio2+0x5ea>
   df8cc:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   df8ce:	2b03      	cmp	r3, #3
   df8d0:	f63f af20 	bhi.w	df714 <__kernel_rem_pio2+0x614>
   df8d4:	a201      	add	r2, pc, #4	; (adr r2, df8dc <__kernel_rem_pio2+0x7dc>)
   df8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   df8da:	bf00      	nop
   df8dc:	000df913 	.word	0x000df913
   df8e0:	000df90b 	.word	0x000df90b
   df8e4:	000df90b 	.word	0x000df90b
   df8e8:	000df8c5 	.word	0x000df8c5
   df8ec:	460b      	mov	r3, r1
   df8ee:	9908      	ldr	r1, [sp, #32]
   df8f0:	4602      	mov	r2, r0
   df8f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
   df8f6:	e758      	b.n	df7aa <__kernel_rem_pio2+0x6aa>
   df8f8:	460b      	mov	r3, r1
   df8fa:	9908      	ldr	r1, [sp, #32]
   df8fc:	e9c1 2300 	strd	r2, r3, [r1]
   df900:	e771      	b.n	df7e6 <__kernel_rem_pio2+0x6e6>
   df902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   df904:	00db      	lsls	r3, r3, #3
   df906:	9304      	str	r3, [sp, #16]
   df908:	e469      	b.n	df1de <__kernel_rem_pio2+0xde>
   df90a:	2000      	movs	r0, #0
   df90c:	2100      	movs	r1, #0
   df90e:	ac4a      	add	r4, sp, #296	; 0x128
   df910:	e725      	b.n	df75e <__kernel_rem_pio2+0x65e>
   df912:	2000      	movs	r0, #0
   df914:	2100      	movs	r1, #0
   df916:	e75c      	b.n	df7d2 <__kernel_rem_pio2+0x6d2>
   df918:	41700000 	.word	0x41700000
   df91c:	3e700000 	.word	0x3e700000

000df920 <__kernel_sin>:
   df920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df924:	ec55 4b10 	vmov	r4, r5, d0
   df928:	ed2d 8b02 	vpush	{d8}
   df92c:	eeb0 8a41 	vmov.f32	s16, s2
   df930:	eef0 8a61 	vmov.f32	s17, s3
   df934:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   df938:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   df93c:	b083      	sub	sp, #12
   df93e:	4682      	mov	sl, r0
   df940:	da07      	bge.n	df952 <__kernel_sin+0x32>
   df942:	ee10 0a10 	vmov	r0, s0
   df946:	4629      	mov	r1, r5
   df948:	f000 fe42 	bl	e05d0 <__aeabi_d2iz>
   df94c:	2800      	cmp	r0, #0
   df94e:	f000 808e 	beq.w	dfa6e <__kernel_sin+0x14e>
   df952:	4622      	mov	r2, r4
   df954:	462b      	mov	r3, r5
   df956:	4620      	mov	r0, r4
   df958:	4629      	mov	r1, r5
   df95a:	f000 fb89 	bl	e0070 <__aeabi_dmul>
   df95e:	4606      	mov	r6, r0
   df960:	460f      	mov	r7, r1
   df962:	4602      	mov	r2, r0
   df964:	460b      	mov	r3, r1
   df966:	4620      	mov	r0, r4
   df968:	4629      	mov	r1, r5
   df96a:	f000 fb81 	bl	e0070 <__aeabi_dmul>
   df96e:	a347      	add	r3, pc, #284	; (adr r3, dfa8c <__kernel_sin+0x16c>)
   df970:	e9d3 2300 	ldrd	r2, r3, [r3]
   df974:	4680      	mov	r8, r0
   df976:	4689      	mov	r9, r1
   df978:	4630      	mov	r0, r6
   df97a:	4639      	mov	r1, r7
   df97c:	f000 fb78 	bl	e0070 <__aeabi_dmul>
   df980:	a344      	add	r3, pc, #272	; (adr r3, dfa94 <__kernel_sin+0x174>)
   df982:	e9d3 2300 	ldrd	r2, r3, [r3]
   df986:	f000 f9bf 	bl	dfd08 <__aeabi_dsub>
   df98a:	4632      	mov	r2, r6
   df98c:	463b      	mov	r3, r7
   df98e:	f000 fb6f 	bl	e0070 <__aeabi_dmul>
   df992:	a342      	add	r3, pc, #264	; (adr r3, dfa9c <__kernel_sin+0x17c>)
   df994:	e9d3 2300 	ldrd	r2, r3, [r3]
   df998:	f000 f9b8 	bl	dfd0c <__adddf3>
   df99c:	4632      	mov	r2, r6
   df99e:	463b      	mov	r3, r7
   df9a0:	f000 fb66 	bl	e0070 <__aeabi_dmul>
   df9a4:	a33f      	add	r3, pc, #252	; (adr r3, dfaa4 <__kernel_sin+0x184>)
   df9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df9aa:	f000 f9ad 	bl	dfd08 <__aeabi_dsub>
   df9ae:	4632      	mov	r2, r6
   df9b0:	463b      	mov	r3, r7
   df9b2:	f000 fb5d 	bl	e0070 <__aeabi_dmul>
   df9b6:	a33d      	add	r3, pc, #244	; (adr r3, dfaac <__kernel_sin+0x18c>)
   df9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   df9bc:	f000 f9a6 	bl	dfd0c <__adddf3>
   df9c0:	e9cd 0100 	strd	r0, r1, [sp]
   df9c4:	f1ba 0f00 	cmp.w	sl, #0
   df9c8:	d037      	beq.n	dfa3a <__kernel_sin+0x11a>
   df9ca:	2200      	movs	r2, #0
   df9cc:	4b2e      	ldr	r3, [pc, #184]	; (dfa88 <__kernel_sin+0x168>)
   df9ce:	ec51 0b18 	vmov	r0, r1, d8
   df9d2:	f000 fb4d 	bl	e0070 <__aeabi_dmul>
   df9d6:	e9dd 2300 	ldrd	r2, r3, [sp]
   df9da:	4682      	mov	sl, r0
   df9dc:	468b      	mov	fp, r1
   df9de:	4640      	mov	r0, r8
   df9e0:	4649      	mov	r1, r9
   df9e2:	f000 fb45 	bl	e0070 <__aeabi_dmul>
   df9e6:	4602      	mov	r2, r0
   df9e8:	460b      	mov	r3, r1
   df9ea:	4650      	mov	r0, sl
   df9ec:	4659      	mov	r1, fp
   df9ee:	f000 f98b 	bl	dfd08 <__aeabi_dsub>
   df9f2:	4632      	mov	r2, r6
   df9f4:	463b      	mov	r3, r7
   df9f6:	f000 fb3b 	bl	e0070 <__aeabi_dmul>
   df9fa:	ec53 2b18 	vmov	r2, r3, d8
   df9fe:	f000 f983 	bl	dfd08 <__aeabi_dsub>
   dfa02:	a31f      	add	r3, pc, #124	; (adr r3, dfa80 <__kernel_sin+0x160>)
   dfa04:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfa08:	4606      	mov	r6, r0
   dfa0a:	460f      	mov	r7, r1
   dfa0c:	4640      	mov	r0, r8
   dfa0e:	4649      	mov	r1, r9
   dfa10:	f000 fb2e 	bl	e0070 <__aeabi_dmul>
   dfa14:	4602      	mov	r2, r0
   dfa16:	460b      	mov	r3, r1
   dfa18:	4630      	mov	r0, r6
   dfa1a:	4639      	mov	r1, r7
   dfa1c:	f000 f976 	bl	dfd0c <__adddf3>
   dfa20:	4602      	mov	r2, r0
   dfa22:	460b      	mov	r3, r1
   dfa24:	4620      	mov	r0, r4
   dfa26:	4629      	mov	r1, r5
   dfa28:	f000 f96e 	bl	dfd08 <__aeabi_dsub>
   dfa2c:	ec41 0b10 	vmov	d0, r0, r1
   dfa30:	b003      	add	sp, #12
   dfa32:	ecbd 8b02 	vpop	{d8}
   dfa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfa3a:	4602      	mov	r2, r0
   dfa3c:	460b      	mov	r3, r1
   dfa3e:	4630      	mov	r0, r6
   dfa40:	4639      	mov	r1, r7
   dfa42:	f000 fb15 	bl	e0070 <__aeabi_dmul>
   dfa46:	a30e      	add	r3, pc, #56	; (adr r3, dfa80 <__kernel_sin+0x160>)
   dfa48:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfa4c:	f000 f95c 	bl	dfd08 <__aeabi_dsub>
   dfa50:	4642      	mov	r2, r8
   dfa52:	464b      	mov	r3, r9
   dfa54:	f000 fb0c 	bl	e0070 <__aeabi_dmul>
   dfa58:	4622      	mov	r2, r4
   dfa5a:	462b      	mov	r3, r5
   dfa5c:	f000 f956 	bl	dfd0c <__adddf3>
   dfa60:	ec41 0b10 	vmov	d0, r0, r1
   dfa64:	b003      	add	sp, #12
   dfa66:	ecbd 8b02 	vpop	{d8}
   dfa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfa6e:	ec45 4b10 	vmov	d0, r4, r5
   dfa72:	b003      	add	sp, #12
   dfa74:	ecbd 8b02 	vpop	{d8}
   dfa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfa7c:	f3af 8000 	nop.w
   dfa80:	55555549 	.word	0x55555549
   dfa84:	3fc55555 	.word	0x3fc55555
   dfa88:	3fe00000 	.word	0x3fe00000
   dfa8c:	5acfd57c 	.word	0x5acfd57c
   dfa90:	3de5d93a 	.word	0x3de5d93a
   dfa94:	8a2b9ceb 	.word	0x8a2b9ceb
   dfa98:	3e5ae5e6 	.word	0x3e5ae5e6
   dfa9c:	57b1fe7d 	.word	0x57b1fe7d
   dfaa0:	3ec71de3 	.word	0x3ec71de3
   dfaa4:	19c161d5 	.word	0x19c161d5
   dfaa8:	3f2a01a0 	.word	0x3f2a01a0
   dfaac:	1110f8a6 	.word	0x1110f8a6
   dfab0:	3f811111 	.word	0x3f811111
   dfab4:	00000000 	.word	0x00000000

000dfab8 <floor>:
   dfab8:	ec51 0b10 	vmov	r0, r1, d0
   dfabc:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dfac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dfac4:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dfac8:	2d13      	cmp	r5, #19
   dfaca:	460c      	mov	r4, r1
   dfacc:	460f      	mov	r7, r1
   dface:	ee10 6a10 	vmov	r6, s0
   dfad2:	dc1d      	bgt.n	dfb10 <floor+0x58>
   dfad4:	2d00      	cmp	r5, #0
   dfad6:	db43      	blt.n	dfb60 <floor+0xa8>
   dfad8:	4b3d      	ldr	r3, [pc, #244]	; (dfbd0 <floor+0x118>)
   dfada:	fa43 f805 	asr.w	r8, r3, r5
   dfade:	ea01 0308 	and.w	r3, r1, r8
   dfae2:	4303      	orrs	r3, r0
   dfae4:	d019      	beq.n	dfb1a <floor+0x62>
   dfae6:	a338      	add	r3, pc, #224	; (adr r3, dfbc8 <floor+0x110>)
   dfae8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfaec:	f000 f90e 	bl	dfd0c <__adddf3>
   dfaf0:	2200      	movs	r2, #0
   dfaf2:	2300      	movs	r3, #0
   dfaf4:	f000 fd4c 	bl	e0590 <__aeabi_dcmpgt>
   dfaf8:	b120      	cbz	r0, dfb04 <floor+0x4c>
   dfafa:	2c00      	cmp	r4, #0
   dfafc:	db49      	blt.n	dfb92 <floor+0xda>
   dfafe:	ea27 0408 	bic.w	r4, r7, r8
   dfb02:	2600      	movs	r6, #0
   dfb04:	4623      	mov	r3, r4
   dfb06:	4632      	mov	r2, r6
   dfb08:	ec43 2b10 	vmov	d0, r2, r3
   dfb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dfb10:	2d33      	cmp	r5, #51	; 0x33
   dfb12:	dd06      	ble.n	dfb22 <floor+0x6a>
   dfb14:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dfb18:	d032      	beq.n	dfb80 <floor+0xc8>
   dfb1a:	ec41 0b10 	vmov	d0, r0, r1
   dfb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dfb22:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dfb26:	f04f 38ff 	mov.w	r8, #4294967295
   dfb2a:	fa28 f803 	lsr.w	r8, r8, r3
   dfb2e:	ea10 0f08 	tst.w	r0, r8
   dfb32:	d0f2      	beq.n	dfb1a <floor+0x62>
   dfb34:	a324      	add	r3, pc, #144	; (adr r3, dfbc8 <floor+0x110>)
   dfb36:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb3a:	f000 f8e7 	bl	dfd0c <__adddf3>
   dfb3e:	2200      	movs	r2, #0
   dfb40:	2300      	movs	r3, #0
   dfb42:	f000 fd25 	bl	e0590 <__aeabi_dcmpgt>
   dfb46:	2800      	cmp	r0, #0
   dfb48:	d0dc      	beq.n	dfb04 <floor+0x4c>
   dfb4a:	2c00      	cmp	r4, #0
   dfb4c:	db27      	blt.n	dfb9e <floor+0xe6>
   dfb4e:	463c      	mov	r4, r7
   dfb50:	ea26 0608 	bic.w	r6, r6, r8
   dfb54:	4623      	mov	r3, r4
   dfb56:	4632      	mov	r2, r6
   dfb58:	ec43 2b10 	vmov	d0, r2, r3
   dfb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dfb60:	a319      	add	r3, pc, #100	; (adr r3, dfbc8 <floor+0x110>)
   dfb62:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfb66:	f000 f8d1 	bl	dfd0c <__adddf3>
   dfb6a:	2200      	movs	r2, #0
   dfb6c:	2300      	movs	r3, #0
   dfb6e:	f000 fd0f 	bl	e0590 <__aeabi_dcmpgt>
   dfb72:	2800      	cmp	r0, #0
   dfb74:	d0c6      	beq.n	dfb04 <floor+0x4c>
   dfb76:	2c00      	cmp	r4, #0
   dfb78:	db1c      	blt.n	dfbb4 <floor+0xfc>
   dfb7a:	2600      	movs	r6, #0
   dfb7c:	4634      	mov	r4, r6
   dfb7e:	e7c1      	b.n	dfb04 <floor+0x4c>
   dfb80:	ee10 2a10 	vmov	r2, s0
   dfb84:	460b      	mov	r3, r1
   dfb86:	f000 f8c1 	bl	dfd0c <__adddf3>
   dfb8a:	ec41 0b10 	vmov	d0, r0, r1
   dfb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dfb92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dfb96:	fa43 f505 	asr.w	r5, r3, r5
   dfb9a:	442f      	add	r7, r5
   dfb9c:	e7af      	b.n	dfafe <floor+0x46>
   dfb9e:	2d14      	cmp	r5, #20
   dfba0:	d010      	beq.n	dfbc4 <floor+0x10c>
   dfba2:	2301      	movs	r3, #1
   dfba4:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dfba8:	fa03 f505 	lsl.w	r5, r3, r5
   dfbac:	19ae      	adds	r6, r5, r6
   dfbae:	bf28      	it	cs
   dfbb0:	18ff      	addcs	r7, r7, r3
   dfbb2:	e7cc      	b.n	dfb4e <floor+0x96>
   dfbb4:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   dfbb8:	4b06      	ldr	r3, [pc, #24]	; (dfbd4 <floor+0x11c>)
   dfbba:	4332      	orrs	r2, r6
   dfbbc:	bf18      	it	ne
   dfbbe:	461c      	movne	r4, r3
   dfbc0:	2600      	movs	r6, #0
   dfbc2:	e79f      	b.n	dfb04 <floor+0x4c>
   dfbc4:	3701      	adds	r7, #1
   dfbc6:	e7c2      	b.n	dfb4e <floor+0x96>
   dfbc8:	8800759c 	.word	0x8800759c
   dfbcc:	7e37e43c 	.word	0x7e37e43c
   dfbd0:	000fffff 	.word	0x000fffff
   dfbd4:	bff00000 	.word	0xbff00000

000dfbd8 <scalbn>:
   dfbd8:	ec53 2b10 	vmov	r2, r3, d0
   dfbdc:	b570      	push	{r4, r5, r6, lr}
   dfbde:	f3c3 540a 	ubfx	r4, r3, #20, #11
   dfbe2:	4619      	mov	r1, r3
   dfbe4:	4605      	mov	r5, r0
   dfbe6:	bb14      	cbnz	r4, dfc2e <scalbn+0x56>
   dfbe8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   dfbec:	4311      	orrs	r1, r2
   dfbee:	d02a      	beq.n	dfc46 <scalbn+0x6e>
   dfbf0:	4619      	mov	r1, r3
   dfbf2:	2200      	movs	r2, #0
   dfbf4:	4b38      	ldr	r3, [pc, #224]	; (dfcd8 <scalbn+0x100>)
   dfbf6:	4e39      	ldr	r6, [pc, #228]	; (dfcdc <scalbn+0x104>)
   dfbf8:	ee10 0a10 	vmov	r0, s0
   dfbfc:	f000 fa38 	bl	e0070 <__aeabi_dmul>
   dfc00:	42b5      	cmp	r5, r6
   dfc02:	4602      	mov	r2, r0
   dfc04:	460b      	mov	r3, r1
   dfc06:	db1f      	blt.n	dfc48 <scalbn+0x70>
   dfc08:	f3c1 540a 	ubfx	r4, r1, #20, #11
   dfc0c:	3c36      	subs	r4, #54	; 0x36
   dfc0e:	442c      	add	r4, r5
   dfc10:	f240 70fe 	movw	r0, #2046	; 0x7fe
   dfc14:	4284      	cmp	r4, r0
   dfc16:	dc1f      	bgt.n	dfc58 <scalbn+0x80>
   dfc18:	2c00      	cmp	r4, #0
   dfc1a:	dd2d      	ble.n	dfc78 <scalbn+0xa0>
   dfc1c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   dfc20:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   dfc24:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   dfc28:	ec43 2b10 	vmov	d0, r2, r3
   dfc2c:	bd70      	pop	{r4, r5, r6, pc}
   dfc2e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   dfc32:	4284      	cmp	r4, r0
   dfc34:	d1eb      	bne.n	dfc0e <scalbn+0x36>
   dfc36:	ee10 0a10 	vmov	r0, s0
   dfc3a:	4619      	mov	r1, r3
   dfc3c:	f000 f866 	bl	dfd0c <__adddf3>
   dfc40:	ec41 0b10 	vmov	d0, r0, r1
   dfc44:	bd70      	pop	{r4, r5, r6, pc}
   dfc46:	bd70      	pop	{r4, r5, r6, pc}
   dfc48:	a31f      	add	r3, pc, #124	; (adr r3, dfcc8 <scalbn+0xf0>)
   dfc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc4e:	f000 fa0f 	bl	e0070 <__aeabi_dmul>
   dfc52:	ec41 0b10 	vmov	d0, r0, r1
   dfc56:	bd70      	pop	{r4, r5, r6, pc}
   dfc58:	ec43 2b11 	vmov	d1, r2, r3
   dfc5c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; dfcd0 <scalbn+0xf8>
   dfc60:	f000 f840 	bl	dfce4 <copysign>
   dfc64:	a31a      	add	r3, pc, #104	; (adr r3, dfcd0 <scalbn+0xf8>)
   dfc66:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc6a:	ec51 0b10 	vmov	r0, r1, d0
   dfc6e:	f000 f9ff 	bl	e0070 <__aeabi_dmul>
   dfc72:	ec41 0b10 	vmov	d0, r0, r1
   dfc76:	bd70      	pop	{r4, r5, r6, pc}
   dfc78:	f114 0f35 	cmn.w	r4, #53	; 0x35
   dfc7c:	da13      	bge.n	dfca6 <scalbn+0xce>
   dfc7e:	f24c 3150 	movw	r1, #50000	; 0xc350
   dfc82:	428d      	cmp	r5, r1
   dfc84:	ec43 2b11 	vmov	d1, r2, r3
   dfc88:	dce8      	bgt.n	dfc5c <scalbn+0x84>
   dfc8a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; dfcc8 <scalbn+0xf0>
   dfc8e:	f000 f829 	bl	dfce4 <copysign>
   dfc92:	a30d      	add	r3, pc, #52	; (adr r3, dfcc8 <scalbn+0xf0>)
   dfc94:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfc98:	ec51 0b10 	vmov	r0, r1, d0
   dfc9c:	f000 f9e8 	bl	e0070 <__aeabi_dmul>
   dfca0:	ec41 0b10 	vmov	d0, r0, r1
   dfca4:	bd70      	pop	{r4, r5, r6, pc}
   dfca6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   dfcaa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   dfcae:	3436      	adds	r4, #54	; 0x36
   dfcb0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   dfcb4:	4610      	mov	r0, r2
   dfcb6:	4619      	mov	r1, r3
   dfcb8:	2200      	movs	r2, #0
   dfcba:	4b09      	ldr	r3, [pc, #36]	; (dfce0 <scalbn+0x108>)
   dfcbc:	f000 f9d8 	bl	e0070 <__aeabi_dmul>
   dfcc0:	ec41 0b10 	vmov	d0, r0, r1
   dfcc4:	bd70      	pop	{r4, r5, r6, pc}
   dfcc6:	bf00      	nop
   dfcc8:	c2f8f359 	.word	0xc2f8f359
   dfccc:	01a56e1f 	.word	0x01a56e1f
   dfcd0:	8800759c 	.word	0x8800759c
   dfcd4:	7e37e43c 	.word	0x7e37e43c
   dfcd8:	43500000 	.word	0x43500000
   dfcdc:	ffff3cb0 	.word	0xffff3cb0
   dfce0:	3c900000 	.word	0x3c900000

000dfce4 <copysign>:
   dfce4:	ec53 2b10 	vmov	r2, r3, d0
   dfce8:	ee11 0a90 	vmov	r0, s3
   dfcec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   dfcf0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   dfcf4:	ea41 0300 	orr.w	r3, r1, r0
   dfcf8:	ec43 2b10 	vmov	d0, r2, r3
   dfcfc:	4770      	bx	lr
   dfcfe:	bf00      	nop

000dfd00 <__aeabi_drsub>:
   dfd00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dfd04:	e002      	b.n	dfd0c <__adddf3>
   dfd06:	bf00      	nop

000dfd08 <__aeabi_dsub>:
   dfd08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dfd0c <__adddf3>:
   dfd0c:	b530      	push	{r4, r5, lr}
   dfd0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dfd12:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dfd16:	ea94 0f05 	teq	r4, r5
   dfd1a:	bf08      	it	eq
   dfd1c:	ea90 0f02 	teqeq	r0, r2
   dfd20:	bf1f      	itttt	ne
   dfd22:	ea54 0c00 	orrsne.w	ip, r4, r0
   dfd26:	ea55 0c02 	orrsne.w	ip, r5, r2
   dfd2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dfd2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dfd32:	f000 80e2 	beq.w	dfefa <__adddf3+0x1ee>
   dfd36:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dfd3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dfd3e:	bfb8      	it	lt
   dfd40:	426d      	neglt	r5, r5
   dfd42:	dd0c      	ble.n	dfd5e <__adddf3+0x52>
   dfd44:	442c      	add	r4, r5
   dfd46:	ea80 0202 	eor.w	r2, r0, r2
   dfd4a:	ea81 0303 	eor.w	r3, r1, r3
   dfd4e:	ea82 0000 	eor.w	r0, r2, r0
   dfd52:	ea83 0101 	eor.w	r1, r3, r1
   dfd56:	ea80 0202 	eor.w	r2, r0, r2
   dfd5a:	ea81 0303 	eor.w	r3, r1, r3
   dfd5e:	2d36      	cmp	r5, #54	; 0x36
   dfd60:	bf88      	it	hi
   dfd62:	bd30      	pophi	{r4, r5, pc}
   dfd64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dfd68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dfd6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dfd70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dfd74:	d002      	beq.n	dfd7c <__adddf3+0x70>
   dfd76:	4240      	negs	r0, r0
   dfd78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dfd7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dfd80:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dfd84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dfd88:	d002      	beq.n	dfd90 <__adddf3+0x84>
   dfd8a:	4252      	negs	r2, r2
   dfd8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dfd90:	ea94 0f05 	teq	r4, r5
   dfd94:	f000 80a7 	beq.w	dfee6 <__adddf3+0x1da>
   dfd98:	f1a4 0401 	sub.w	r4, r4, #1
   dfd9c:	f1d5 0e20 	rsbs	lr, r5, #32
   dfda0:	db0d      	blt.n	dfdbe <__adddf3+0xb2>
   dfda2:	fa02 fc0e 	lsl.w	ip, r2, lr
   dfda6:	fa22 f205 	lsr.w	r2, r2, r5
   dfdaa:	1880      	adds	r0, r0, r2
   dfdac:	f141 0100 	adc.w	r1, r1, #0
   dfdb0:	fa03 f20e 	lsl.w	r2, r3, lr
   dfdb4:	1880      	adds	r0, r0, r2
   dfdb6:	fa43 f305 	asr.w	r3, r3, r5
   dfdba:	4159      	adcs	r1, r3
   dfdbc:	e00e      	b.n	dfddc <__adddf3+0xd0>
   dfdbe:	f1a5 0520 	sub.w	r5, r5, #32
   dfdc2:	f10e 0e20 	add.w	lr, lr, #32
   dfdc6:	2a01      	cmp	r2, #1
   dfdc8:	fa03 fc0e 	lsl.w	ip, r3, lr
   dfdcc:	bf28      	it	cs
   dfdce:	f04c 0c02 	orrcs.w	ip, ip, #2
   dfdd2:	fa43 f305 	asr.w	r3, r3, r5
   dfdd6:	18c0      	adds	r0, r0, r3
   dfdd8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dfddc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dfde0:	d507      	bpl.n	dfdf2 <__adddf3+0xe6>
   dfde2:	f04f 0e00 	mov.w	lr, #0
   dfde6:	f1dc 0c00 	rsbs	ip, ip, #0
   dfdea:	eb7e 0000 	sbcs.w	r0, lr, r0
   dfdee:	eb6e 0101 	sbc.w	r1, lr, r1
   dfdf2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dfdf6:	d31b      	bcc.n	dfe30 <__adddf3+0x124>
   dfdf8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dfdfc:	d30c      	bcc.n	dfe18 <__adddf3+0x10c>
   dfdfe:	0849      	lsrs	r1, r1, #1
   dfe00:	ea5f 0030 	movs.w	r0, r0, rrx
   dfe04:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dfe08:	f104 0401 	add.w	r4, r4, #1
   dfe0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dfe10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dfe14:	f080 809a 	bcs.w	dff4c <__adddf3+0x240>
   dfe18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dfe1c:	bf08      	it	eq
   dfe1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dfe22:	f150 0000 	adcs.w	r0, r0, #0
   dfe26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dfe2a:	ea41 0105 	orr.w	r1, r1, r5
   dfe2e:	bd30      	pop	{r4, r5, pc}
   dfe30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dfe34:	4140      	adcs	r0, r0
   dfe36:	eb41 0101 	adc.w	r1, r1, r1
   dfe3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dfe3e:	f1a4 0401 	sub.w	r4, r4, #1
   dfe42:	d1e9      	bne.n	dfe18 <__adddf3+0x10c>
   dfe44:	f091 0f00 	teq	r1, #0
   dfe48:	bf04      	itt	eq
   dfe4a:	4601      	moveq	r1, r0
   dfe4c:	2000      	moveq	r0, #0
   dfe4e:	fab1 f381 	clz	r3, r1
   dfe52:	bf08      	it	eq
   dfe54:	3320      	addeq	r3, #32
   dfe56:	f1a3 030b 	sub.w	r3, r3, #11
   dfe5a:	f1b3 0220 	subs.w	r2, r3, #32
   dfe5e:	da0c      	bge.n	dfe7a <__adddf3+0x16e>
   dfe60:	320c      	adds	r2, #12
   dfe62:	dd08      	ble.n	dfe76 <__adddf3+0x16a>
   dfe64:	f102 0c14 	add.w	ip, r2, #20
   dfe68:	f1c2 020c 	rsb	r2, r2, #12
   dfe6c:	fa01 f00c 	lsl.w	r0, r1, ip
   dfe70:	fa21 f102 	lsr.w	r1, r1, r2
   dfe74:	e00c      	b.n	dfe90 <__adddf3+0x184>
   dfe76:	f102 0214 	add.w	r2, r2, #20
   dfe7a:	bfd8      	it	le
   dfe7c:	f1c2 0c20 	rsble	ip, r2, #32
   dfe80:	fa01 f102 	lsl.w	r1, r1, r2
   dfe84:	fa20 fc0c 	lsr.w	ip, r0, ip
   dfe88:	bfdc      	itt	le
   dfe8a:	ea41 010c 	orrle.w	r1, r1, ip
   dfe8e:	4090      	lslle	r0, r2
   dfe90:	1ae4      	subs	r4, r4, r3
   dfe92:	bfa2      	ittt	ge
   dfe94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dfe98:	4329      	orrge	r1, r5
   dfe9a:	bd30      	popge	{r4, r5, pc}
   dfe9c:	ea6f 0404 	mvn.w	r4, r4
   dfea0:	3c1f      	subs	r4, #31
   dfea2:	da1c      	bge.n	dfede <__adddf3+0x1d2>
   dfea4:	340c      	adds	r4, #12
   dfea6:	dc0e      	bgt.n	dfec6 <__adddf3+0x1ba>
   dfea8:	f104 0414 	add.w	r4, r4, #20
   dfeac:	f1c4 0220 	rsb	r2, r4, #32
   dfeb0:	fa20 f004 	lsr.w	r0, r0, r4
   dfeb4:	fa01 f302 	lsl.w	r3, r1, r2
   dfeb8:	ea40 0003 	orr.w	r0, r0, r3
   dfebc:	fa21 f304 	lsr.w	r3, r1, r4
   dfec0:	ea45 0103 	orr.w	r1, r5, r3
   dfec4:	bd30      	pop	{r4, r5, pc}
   dfec6:	f1c4 040c 	rsb	r4, r4, #12
   dfeca:	f1c4 0220 	rsb	r2, r4, #32
   dfece:	fa20 f002 	lsr.w	r0, r0, r2
   dfed2:	fa01 f304 	lsl.w	r3, r1, r4
   dfed6:	ea40 0003 	orr.w	r0, r0, r3
   dfeda:	4629      	mov	r1, r5
   dfedc:	bd30      	pop	{r4, r5, pc}
   dfede:	fa21 f004 	lsr.w	r0, r1, r4
   dfee2:	4629      	mov	r1, r5
   dfee4:	bd30      	pop	{r4, r5, pc}
   dfee6:	f094 0f00 	teq	r4, #0
   dfeea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dfeee:	bf06      	itte	eq
   dfef0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dfef4:	3401      	addeq	r4, #1
   dfef6:	3d01      	subne	r5, #1
   dfef8:	e74e      	b.n	dfd98 <__adddf3+0x8c>
   dfefa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dfefe:	bf18      	it	ne
   dff00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dff04:	d029      	beq.n	dff5a <__adddf3+0x24e>
   dff06:	ea94 0f05 	teq	r4, r5
   dff0a:	bf08      	it	eq
   dff0c:	ea90 0f02 	teqeq	r0, r2
   dff10:	d005      	beq.n	dff1e <__adddf3+0x212>
   dff12:	ea54 0c00 	orrs.w	ip, r4, r0
   dff16:	bf04      	itt	eq
   dff18:	4619      	moveq	r1, r3
   dff1a:	4610      	moveq	r0, r2
   dff1c:	bd30      	pop	{r4, r5, pc}
   dff1e:	ea91 0f03 	teq	r1, r3
   dff22:	bf1e      	ittt	ne
   dff24:	2100      	movne	r1, #0
   dff26:	2000      	movne	r0, #0
   dff28:	bd30      	popne	{r4, r5, pc}
   dff2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dff2e:	d105      	bne.n	dff3c <__adddf3+0x230>
   dff30:	0040      	lsls	r0, r0, #1
   dff32:	4149      	adcs	r1, r1
   dff34:	bf28      	it	cs
   dff36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dff3a:	bd30      	pop	{r4, r5, pc}
   dff3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dff40:	bf3c      	itt	cc
   dff42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dff46:	bd30      	popcc	{r4, r5, pc}
   dff48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dff4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dff50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dff54:	f04f 0000 	mov.w	r0, #0
   dff58:	bd30      	pop	{r4, r5, pc}
   dff5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dff5e:	bf1a      	itte	ne
   dff60:	4619      	movne	r1, r3
   dff62:	4610      	movne	r0, r2
   dff64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dff68:	bf1c      	itt	ne
   dff6a:	460b      	movne	r3, r1
   dff6c:	4602      	movne	r2, r0
   dff6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dff72:	bf06      	itte	eq
   dff74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dff78:	ea91 0f03 	teqeq	r1, r3
   dff7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dff80:	bd30      	pop	{r4, r5, pc}
   dff82:	bf00      	nop

000dff84 <__aeabi_ui2d>:
   dff84:	f090 0f00 	teq	r0, #0
   dff88:	bf04      	itt	eq
   dff8a:	2100      	moveq	r1, #0
   dff8c:	4770      	bxeq	lr
   dff8e:	b530      	push	{r4, r5, lr}
   dff90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dff94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dff98:	f04f 0500 	mov.w	r5, #0
   dff9c:	f04f 0100 	mov.w	r1, #0
   dffa0:	e750      	b.n	dfe44 <__adddf3+0x138>
   dffa2:	bf00      	nop

000dffa4 <__aeabi_i2d>:
   dffa4:	f090 0f00 	teq	r0, #0
   dffa8:	bf04      	itt	eq
   dffaa:	2100      	moveq	r1, #0
   dffac:	4770      	bxeq	lr
   dffae:	b530      	push	{r4, r5, lr}
   dffb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dffb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dffb8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dffbc:	bf48      	it	mi
   dffbe:	4240      	negmi	r0, r0
   dffc0:	f04f 0100 	mov.w	r1, #0
   dffc4:	e73e      	b.n	dfe44 <__adddf3+0x138>
   dffc6:	bf00      	nop

000dffc8 <__aeabi_f2d>:
   dffc8:	0042      	lsls	r2, r0, #1
   dffca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dffce:	ea4f 0131 	mov.w	r1, r1, rrx
   dffd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dffd6:	bf1f      	itttt	ne
   dffd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dffdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dffe0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dffe4:	4770      	bxne	lr
   dffe6:	f092 0f00 	teq	r2, #0
   dffea:	bf14      	ite	ne
   dffec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dfff0:	4770      	bxeq	lr
   dfff2:	b530      	push	{r4, r5, lr}
   dfff4:	f44f 7460 	mov.w	r4, #896	; 0x380
   dfff8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dfffc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e0000:	e720      	b.n	dfe44 <__adddf3+0x138>
   e0002:	bf00      	nop

000e0004 <__aeabi_ul2d>:
   e0004:	ea50 0201 	orrs.w	r2, r0, r1
   e0008:	bf08      	it	eq
   e000a:	4770      	bxeq	lr
   e000c:	b530      	push	{r4, r5, lr}
   e000e:	f04f 0500 	mov.w	r5, #0
   e0012:	e00a      	b.n	e002a <__aeabi_l2d+0x16>

000e0014 <__aeabi_l2d>:
   e0014:	ea50 0201 	orrs.w	r2, r0, r1
   e0018:	bf08      	it	eq
   e001a:	4770      	bxeq	lr
   e001c:	b530      	push	{r4, r5, lr}
   e001e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e0022:	d502      	bpl.n	e002a <__aeabi_l2d+0x16>
   e0024:	4240      	negs	r0, r0
   e0026:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e002a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e002e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e0032:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e0036:	f43f aedc 	beq.w	dfdf2 <__adddf3+0xe6>
   e003a:	f04f 0203 	mov.w	r2, #3
   e003e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e0042:	bf18      	it	ne
   e0044:	3203      	addne	r2, #3
   e0046:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e004a:	bf18      	it	ne
   e004c:	3203      	addne	r2, #3
   e004e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e0052:	f1c2 0320 	rsb	r3, r2, #32
   e0056:	fa00 fc03 	lsl.w	ip, r0, r3
   e005a:	fa20 f002 	lsr.w	r0, r0, r2
   e005e:	fa01 fe03 	lsl.w	lr, r1, r3
   e0062:	ea40 000e 	orr.w	r0, r0, lr
   e0066:	fa21 f102 	lsr.w	r1, r1, r2
   e006a:	4414      	add	r4, r2
   e006c:	e6c1      	b.n	dfdf2 <__adddf3+0xe6>
   e006e:	bf00      	nop

000e0070 <__aeabi_dmul>:
   e0070:	b570      	push	{r4, r5, r6, lr}
   e0072:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e0076:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e007a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e007e:	bf1d      	ittte	ne
   e0080:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e0084:	ea94 0f0c 	teqne	r4, ip
   e0088:	ea95 0f0c 	teqne	r5, ip
   e008c:	f000 f8de 	bleq	e024c <__aeabi_dmul+0x1dc>
   e0090:	442c      	add	r4, r5
   e0092:	ea81 0603 	eor.w	r6, r1, r3
   e0096:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e009a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e009e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e00a2:	bf18      	it	ne
   e00a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e00a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e00ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e00b0:	d038      	beq.n	e0124 <__aeabi_dmul+0xb4>
   e00b2:	fba0 ce02 	umull	ip, lr, r0, r2
   e00b6:	f04f 0500 	mov.w	r5, #0
   e00ba:	fbe1 e502 	umlal	lr, r5, r1, r2
   e00be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e00c2:	fbe0 e503 	umlal	lr, r5, r0, r3
   e00c6:	f04f 0600 	mov.w	r6, #0
   e00ca:	fbe1 5603 	umlal	r5, r6, r1, r3
   e00ce:	f09c 0f00 	teq	ip, #0
   e00d2:	bf18      	it	ne
   e00d4:	f04e 0e01 	orrne.w	lr, lr, #1
   e00d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e00dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e00e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e00e4:	d204      	bcs.n	e00f0 <__aeabi_dmul+0x80>
   e00e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e00ea:	416d      	adcs	r5, r5
   e00ec:	eb46 0606 	adc.w	r6, r6, r6
   e00f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e00f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e00f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e00fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e0100:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e0104:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e0108:	bf88      	it	hi
   e010a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e010e:	d81e      	bhi.n	e014e <__aeabi_dmul+0xde>
   e0110:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e0114:	bf08      	it	eq
   e0116:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e011a:	f150 0000 	adcs.w	r0, r0, #0
   e011e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e0122:	bd70      	pop	{r4, r5, r6, pc}
   e0124:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e0128:	ea46 0101 	orr.w	r1, r6, r1
   e012c:	ea40 0002 	orr.w	r0, r0, r2
   e0130:	ea81 0103 	eor.w	r1, r1, r3
   e0134:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e0138:	bfc2      	ittt	gt
   e013a:	ebd4 050c 	rsbsgt	r5, r4, ip
   e013e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e0142:	bd70      	popgt	{r4, r5, r6, pc}
   e0144:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e0148:	f04f 0e00 	mov.w	lr, #0
   e014c:	3c01      	subs	r4, #1
   e014e:	f300 80ab 	bgt.w	e02a8 <__aeabi_dmul+0x238>
   e0152:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e0156:	bfde      	ittt	le
   e0158:	2000      	movle	r0, #0
   e015a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e015e:	bd70      	pople	{r4, r5, r6, pc}
   e0160:	f1c4 0400 	rsb	r4, r4, #0
   e0164:	3c20      	subs	r4, #32
   e0166:	da35      	bge.n	e01d4 <__aeabi_dmul+0x164>
   e0168:	340c      	adds	r4, #12
   e016a:	dc1b      	bgt.n	e01a4 <__aeabi_dmul+0x134>
   e016c:	f104 0414 	add.w	r4, r4, #20
   e0170:	f1c4 0520 	rsb	r5, r4, #32
   e0174:	fa00 f305 	lsl.w	r3, r0, r5
   e0178:	fa20 f004 	lsr.w	r0, r0, r4
   e017c:	fa01 f205 	lsl.w	r2, r1, r5
   e0180:	ea40 0002 	orr.w	r0, r0, r2
   e0184:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e0188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e018c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e0190:	fa21 f604 	lsr.w	r6, r1, r4
   e0194:	eb42 0106 	adc.w	r1, r2, r6
   e0198:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e019c:	bf08      	it	eq
   e019e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e01a2:	bd70      	pop	{r4, r5, r6, pc}
   e01a4:	f1c4 040c 	rsb	r4, r4, #12
   e01a8:	f1c4 0520 	rsb	r5, r4, #32
   e01ac:	fa00 f304 	lsl.w	r3, r0, r4
   e01b0:	fa20 f005 	lsr.w	r0, r0, r5
   e01b4:	fa01 f204 	lsl.w	r2, r1, r4
   e01b8:	ea40 0002 	orr.w	r0, r0, r2
   e01bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e01c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e01c4:	f141 0100 	adc.w	r1, r1, #0
   e01c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e01cc:	bf08      	it	eq
   e01ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e01d2:	bd70      	pop	{r4, r5, r6, pc}
   e01d4:	f1c4 0520 	rsb	r5, r4, #32
   e01d8:	fa00 f205 	lsl.w	r2, r0, r5
   e01dc:	ea4e 0e02 	orr.w	lr, lr, r2
   e01e0:	fa20 f304 	lsr.w	r3, r0, r4
   e01e4:	fa01 f205 	lsl.w	r2, r1, r5
   e01e8:	ea43 0302 	orr.w	r3, r3, r2
   e01ec:	fa21 f004 	lsr.w	r0, r1, r4
   e01f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e01f4:	fa21 f204 	lsr.w	r2, r1, r4
   e01f8:	ea20 0002 	bic.w	r0, r0, r2
   e01fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e0200:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e0204:	bf08      	it	eq
   e0206:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e020a:	bd70      	pop	{r4, r5, r6, pc}
   e020c:	f094 0f00 	teq	r4, #0
   e0210:	d10f      	bne.n	e0232 <__aeabi_dmul+0x1c2>
   e0212:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e0216:	0040      	lsls	r0, r0, #1
   e0218:	eb41 0101 	adc.w	r1, r1, r1
   e021c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e0220:	bf08      	it	eq
   e0222:	3c01      	subeq	r4, #1
   e0224:	d0f7      	beq.n	e0216 <__aeabi_dmul+0x1a6>
   e0226:	ea41 0106 	orr.w	r1, r1, r6
   e022a:	f095 0f00 	teq	r5, #0
   e022e:	bf18      	it	ne
   e0230:	4770      	bxne	lr
   e0232:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e0236:	0052      	lsls	r2, r2, #1
   e0238:	eb43 0303 	adc.w	r3, r3, r3
   e023c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e0240:	bf08      	it	eq
   e0242:	3d01      	subeq	r5, #1
   e0244:	d0f7      	beq.n	e0236 <__aeabi_dmul+0x1c6>
   e0246:	ea43 0306 	orr.w	r3, r3, r6
   e024a:	4770      	bx	lr
   e024c:	ea94 0f0c 	teq	r4, ip
   e0250:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e0254:	bf18      	it	ne
   e0256:	ea95 0f0c 	teqne	r5, ip
   e025a:	d00c      	beq.n	e0276 <__aeabi_dmul+0x206>
   e025c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e0260:	bf18      	it	ne
   e0262:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e0266:	d1d1      	bne.n	e020c <__aeabi_dmul+0x19c>
   e0268:	ea81 0103 	eor.w	r1, r1, r3
   e026c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e0270:	f04f 0000 	mov.w	r0, #0
   e0274:	bd70      	pop	{r4, r5, r6, pc}
   e0276:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e027a:	bf06      	itte	eq
   e027c:	4610      	moveq	r0, r2
   e027e:	4619      	moveq	r1, r3
   e0280:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e0284:	d019      	beq.n	e02ba <__aeabi_dmul+0x24a>
   e0286:	ea94 0f0c 	teq	r4, ip
   e028a:	d102      	bne.n	e0292 <__aeabi_dmul+0x222>
   e028c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e0290:	d113      	bne.n	e02ba <__aeabi_dmul+0x24a>
   e0292:	ea95 0f0c 	teq	r5, ip
   e0296:	d105      	bne.n	e02a4 <__aeabi_dmul+0x234>
   e0298:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e029c:	bf1c      	itt	ne
   e029e:	4610      	movne	r0, r2
   e02a0:	4619      	movne	r1, r3
   e02a2:	d10a      	bne.n	e02ba <__aeabi_dmul+0x24a>
   e02a4:	ea81 0103 	eor.w	r1, r1, r3
   e02a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e02ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e02b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e02b4:	f04f 0000 	mov.w	r0, #0
   e02b8:	bd70      	pop	{r4, r5, r6, pc}
   e02ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e02be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e02c2:	bd70      	pop	{r4, r5, r6, pc}

000e02c4 <__aeabi_ddiv>:
   e02c4:	b570      	push	{r4, r5, r6, lr}
   e02c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e02ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e02ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e02d2:	bf1d      	ittte	ne
   e02d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e02d8:	ea94 0f0c 	teqne	r4, ip
   e02dc:	ea95 0f0c 	teqne	r5, ip
   e02e0:	f000 f8a7 	bleq	e0432 <__aeabi_ddiv+0x16e>
   e02e4:	eba4 0405 	sub.w	r4, r4, r5
   e02e8:	ea81 0e03 	eor.w	lr, r1, r3
   e02ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e02f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e02f4:	f000 8088 	beq.w	e0408 <__aeabi_ddiv+0x144>
   e02f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e02fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e0300:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e0304:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e0308:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e030c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e0310:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e0314:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e0318:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e031c:	429d      	cmp	r5, r3
   e031e:	bf08      	it	eq
   e0320:	4296      	cmpeq	r6, r2
   e0322:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e0326:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e032a:	d202      	bcs.n	e0332 <__aeabi_ddiv+0x6e>
   e032c:	085b      	lsrs	r3, r3, #1
   e032e:	ea4f 0232 	mov.w	r2, r2, rrx
   e0332:	1ab6      	subs	r6, r6, r2
   e0334:	eb65 0503 	sbc.w	r5, r5, r3
   e0338:	085b      	lsrs	r3, r3, #1
   e033a:	ea4f 0232 	mov.w	r2, r2, rrx
   e033e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e0342:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e0346:	ebb6 0e02 	subs.w	lr, r6, r2
   e034a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e034e:	bf22      	ittt	cs
   e0350:	1ab6      	subcs	r6, r6, r2
   e0352:	4675      	movcs	r5, lr
   e0354:	ea40 000c 	orrcs.w	r0, r0, ip
   e0358:	085b      	lsrs	r3, r3, #1
   e035a:	ea4f 0232 	mov.w	r2, r2, rrx
   e035e:	ebb6 0e02 	subs.w	lr, r6, r2
   e0362:	eb75 0e03 	sbcs.w	lr, r5, r3
   e0366:	bf22      	ittt	cs
   e0368:	1ab6      	subcs	r6, r6, r2
   e036a:	4675      	movcs	r5, lr
   e036c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e0370:	085b      	lsrs	r3, r3, #1
   e0372:	ea4f 0232 	mov.w	r2, r2, rrx
   e0376:	ebb6 0e02 	subs.w	lr, r6, r2
   e037a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e037e:	bf22      	ittt	cs
   e0380:	1ab6      	subcs	r6, r6, r2
   e0382:	4675      	movcs	r5, lr
   e0384:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e0388:	085b      	lsrs	r3, r3, #1
   e038a:	ea4f 0232 	mov.w	r2, r2, rrx
   e038e:	ebb6 0e02 	subs.w	lr, r6, r2
   e0392:	eb75 0e03 	sbcs.w	lr, r5, r3
   e0396:	bf22      	ittt	cs
   e0398:	1ab6      	subcs	r6, r6, r2
   e039a:	4675      	movcs	r5, lr
   e039c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e03a0:	ea55 0e06 	orrs.w	lr, r5, r6
   e03a4:	d018      	beq.n	e03d8 <__aeabi_ddiv+0x114>
   e03a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e03aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e03ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e03b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e03b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e03ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e03be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e03c2:	d1c0      	bne.n	e0346 <__aeabi_ddiv+0x82>
   e03c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e03c8:	d10b      	bne.n	e03e2 <__aeabi_ddiv+0x11e>
   e03ca:	ea41 0100 	orr.w	r1, r1, r0
   e03ce:	f04f 0000 	mov.w	r0, #0
   e03d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e03d6:	e7b6      	b.n	e0346 <__aeabi_ddiv+0x82>
   e03d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e03dc:	bf04      	itt	eq
   e03de:	4301      	orreq	r1, r0
   e03e0:	2000      	moveq	r0, #0
   e03e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e03e6:	bf88      	it	hi
   e03e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e03ec:	f63f aeaf 	bhi.w	e014e <__aeabi_dmul+0xde>
   e03f0:	ebb5 0c03 	subs.w	ip, r5, r3
   e03f4:	bf04      	itt	eq
   e03f6:	ebb6 0c02 	subseq.w	ip, r6, r2
   e03fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e03fe:	f150 0000 	adcs.w	r0, r0, #0
   e0402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e0406:	bd70      	pop	{r4, r5, r6, pc}
   e0408:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e040c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e0410:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e0414:	bfc2      	ittt	gt
   e0416:	ebd4 050c 	rsbsgt	r5, r4, ip
   e041a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e041e:	bd70      	popgt	{r4, r5, r6, pc}
   e0420:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e0424:	f04f 0e00 	mov.w	lr, #0
   e0428:	3c01      	subs	r4, #1
   e042a:	e690      	b.n	e014e <__aeabi_dmul+0xde>
   e042c:	ea45 0e06 	orr.w	lr, r5, r6
   e0430:	e68d      	b.n	e014e <__aeabi_dmul+0xde>
   e0432:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e0436:	ea94 0f0c 	teq	r4, ip
   e043a:	bf08      	it	eq
   e043c:	ea95 0f0c 	teqeq	r5, ip
   e0440:	f43f af3b 	beq.w	e02ba <__aeabi_dmul+0x24a>
   e0444:	ea94 0f0c 	teq	r4, ip
   e0448:	d10a      	bne.n	e0460 <__aeabi_ddiv+0x19c>
   e044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e044e:	f47f af34 	bne.w	e02ba <__aeabi_dmul+0x24a>
   e0452:	ea95 0f0c 	teq	r5, ip
   e0456:	f47f af25 	bne.w	e02a4 <__aeabi_dmul+0x234>
   e045a:	4610      	mov	r0, r2
   e045c:	4619      	mov	r1, r3
   e045e:	e72c      	b.n	e02ba <__aeabi_dmul+0x24a>
   e0460:	ea95 0f0c 	teq	r5, ip
   e0464:	d106      	bne.n	e0474 <__aeabi_ddiv+0x1b0>
   e0466:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e046a:	f43f aefd 	beq.w	e0268 <__aeabi_dmul+0x1f8>
   e046e:	4610      	mov	r0, r2
   e0470:	4619      	mov	r1, r3
   e0472:	e722      	b.n	e02ba <__aeabi_dmul+0x24a>
   e0474:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e0478:	bf18      	it	ne
   e047a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e047e:	f47f aec5 	bne.w	e020c <__aeabi_dmul+0x19c>
   e0482:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e0486:	f47f af0d 	bne.w	e02a4 <__aeabi_dmul+0x234>
   e048a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e048e:	f47f aeeb 	bne.w	e0268 <__aeabi_dmul+0x1f8>
   e0492:	e712      	b.n	e02ba <__aeabi_dmul+0x24a>

000e0494 <__gedf2>:
   e0494:	f04f 3cff 	mov.w	ip, #4294967295
   e0498:	e006      	b.n	e04a8 <__cmpdf2+0x4>
   e049a:	bf00      	nop

000e049c <__ledf2>:
   e049c:	f04f 0c01 	mov.w	ip, #1
   e04a0:	e002      	b.n	e04a8 <__cmpdf2+0x4>
   e04a2:	bf00      	nop

000e04a4 <__cmpdf2>:
   e04a4:	f04f 0c01 	mov.w	ip, #1
   e04a8:	f84d cd04 	str.w	ip, [sp, #-4]!
   e04ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e04b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e04b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e04b8:	bf18      	it	ne
   e04ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e04be:	d01b      	beq.n	e04f8 <__cmpdf2+0x54>
   e04c0:	b001      	add	sp, #4
   e04c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e04c6:	bf0c      	ite	eq
   e04c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e04cc:	ea91 0f03 	teqne	r1, r3
   e04d0:	bf02      	ittt	eq
   e04d2:	ea90 0f02 	teqeq	r0, r2
   e04d6:	2000      	moveq	r0, #0
   e04d8:	4770      	bxeq	lr
   e04da:	f110 0f00 	cmn.w	r0, #0
   e04de:	ea91 0f03 	teq	r1, r3
   e04e2:	bf58      	it	pl
   e04e4:	4299      	cmppl	r1, r3
   e04e6:	bf08      	it	eq
   e04e8:	4290      	cmpeq	r0, r2
   e04ea:	bf2c      	ite	cs
   e04ec:	17d8      	asrcs	r0, r3, #31
   e04ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e04f2:	f040 0001 	orr.w	r0, r0, #1
   e04f6:	4770      	bx	lr
   e04f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e04fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e0500:	d102      	bne.n	e0508 <__cmpdf2+0x64>
   e0502:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e0506:	d107      	bne.n	e0518 <__cmpdf2+0x74>
   e0508:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e050c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e0510:	d1d6      	bne.n	e04c0 <__cmpdf2+0x1c>
   e0512:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e0516:	d0d3      	beq.n	e04c0 <__cmpdf2+0x1c>
   e0518:	f85d 0b04 	ldr.w	r0, [sp], #4
   e051c:	4770      	bx	lr
   e051e:	bf00      	nop

000e0520 <__aeabi_cdrcmple>:
   e0520:	4684      	mov	ip, r0
   e0522:	4610      	mov	r0, r2
   e0524:	4662      	mov	r2, ip
   e0526:	468c      	mov	ip, r1
   e0528:	4619      	mov	r1, r3
   e052a:	4663      	mov	r3, ip
   e052c:	e000      	b.n	e0530 <__aeabi_cdcmpeq>
   e052e:	bf00      	nop

000e0530 <__aeabi_cdcmpeq>:
   e0530:	b501      	push	{r0, lr}
   e0532:	f7ff ffb7 	bl	e04a4 <__cmpdf2>
   e0536:	2800      	cmp	r0, #0
   e0538:	bf48      	it	mi
   e053a:	f110 0f00 	cmnmi.w	r0, #0
   e053e:	bd01      	pop	{r0, pc}

000e0540 <__aeabi_dcmpeq>:
   e0540:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0544:	f7ff fff4 	bl	e0530 <__aeabi_cdcmpeq>
   e0548:	bf0c      	ite	eq
   e054a:	2001      	moveq	r0, #1
   e054c:	2000      	movne	r0, #0
   e054e:	f85d fb08 	ldr.w	pc, [sp], #8
   e0552:	bf00      	nop

000e0554 <__aeabi_dcmplt>:
   e0554:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0558:	f7ff ffea 	bl	e0530 <__aeabi_cdcmpeq>
   e055c:	bf34      	ite	cc
   e055e:	2001      	movcc	r0, #1
   e0560:	2000      	movcs	r0, #0
   e0562:	f85d fb08 	ldr.w	pc, [sp], #8
   e0566:	bf00      	nop

000e0568 <__aeabi_dcmple>:
   e0568:	f84d ed08 	str.w	lr, [sp, #-8]!
   e056c:	f7ff ffe0 	bl	e0530 <__aeabi_cdcmpeq>
   e0570:	bf94      	ite	ls
   e0572:	2001      	movls	r0, #1
   e0574:	2000      	movhi	r0, #0
   e0576:	f85d fb08 	ldr.w	pc, [sp], #8
   e057a:	bf00      	nop

000e057c <__aeabi_dcmpge>:
   e057c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0580:	f7ff ffce 	bl	e0520 <__aeabi_cdrcmple>
   e0584:	bf94      	ite	ls
   e0586:	2001      	movls	r0, #1
   e0588:	2000      	movhi	r0, #0
   e058a:	f85d fb08 	ldr.w	pc, [sp], #8
   e058e:	bf00      	nop

000e0590 <__aeabi_dcmpgt>:
   e0590:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0594:	f7ff ffc4 	bl	e0520 <__aeabi_cdrcmple>
   e0598:	bf34      	ite	cc
   e059a:	2001      	movcc	r0, #1
   e059c:	2000      	movcs	r0, #0
   e059e:	f85d fb08 	ldr.w	pc, [sp], #8
   e05a2:	bf00      	nop

000e05a4 <__aeabi_dcmpun>:
   e05a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e05a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e05ac:	d102      	bne.n	e05b4 <__aeabi_dcmpun+0x10>
   e05ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e05b2:	d10a      	bne.n	e05ca <__aeabi_dcmpun+0x26>
   e05b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e05b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e05bc:	d102      	bne.n	e05c4 <__aeabi_dcmpun+0x20>
   e05be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e05c2:	d102      	bne.n	e05ca <__aeabi_dcmpun+0x26>
   e05c4:	f04f 0000 	mov.w	r0, #0
   e05c8:	4770      	bx	lr
   e05ca:	f04f 0001 	mov.w	r0, #1
   e05ce:	4770      	bx	lr

000e05d0 <__aeabi_d2iz>:
   e05d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e05d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e05d8:	d215      	bcs.n	e0606 <__aeabi_d2iz+0x36>
   e05da:	d511      	bpl.n	e0600 <__aeabi_d2iz+0x30>
   e05dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e05e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e05e4:	d912      	bls.n	e060c <__aeabi_d2iz+0x3c>
   e05e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e05ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e05ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e05f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e05f6:	fa23 f002 	lsr.w	r0, r3, r2
   e05fa:	bf18      	it	ne
   e05fc:	4240      	negne	r0, r0
   e05fe:	4770      	bx	lr
   e0600:	f04f 0000 	mov.w	r0, #0
   e0604:	4770      	bx	lr
   e0606:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e060a:	d105      	bne.n	e0618 <__aeabi_d2iz+0x48>
   e060c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e0610:	bf08      	it	eq
   e0612:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e0616:	4770      	bx	lr
   e0618:	f04f 0000 	mov.w	r0, #0
   e061c:	4770      	bx	lr
   e061e:	bf00      	nop

000e0620 <__aeabi_d2uiz>:
   e0620:	004a      	lsls	r2, r1, #1
   e0622:	d211      	bcs.n	e0648 <__aeabi_d2uiz+0x28>
   e0624:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e0628:	d211      	bcs.n	e064e <__aeabi_d2uiz+0x2e>
   e062a:	d50d      	bpl.n	e0648 <__aeabi_d2uiz+0x28>
   e062c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e0630:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e0634:	d40e      	bmi.n	e0654 <__aeabi_d2uiz+0x34>
   e0636:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e063a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e063e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e0642:	fa23 f002 	lsr.w	r0, r3, r2
   e0646:	4770      	bx	lr
   e0648:	f04f 0000 	mov.w	r0, #0
   e064c:	4770      	bx	lr
   e064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e0652:	d102      	bne.n	e065a <__aeabi_d2uiz+0x3a>
   e0654:	f04f 30ff 	mov.w	r0, #4294967295
   e0658:	4770      	bx	lr
   e065a:	f04f 0000 	mov.w	r0, #0
   e065e:	4770      	bx	lr

000e0660 <__aeabi_d2f>:
   e0660:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e0664:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e0668:	bf24      	itt	cs
   e066a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e066e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e0672:	d90d      	bls.n	e0690 <__aeabi_d2f+0x30>
   e0674:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e0678:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e067c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e0680:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e0684:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e0688:	bf08      	it	eq
   e068a:	f020 0001 	biceq.w	r0, r0, #1
   e068e:	4770      	bx	lr
   e0690:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e0694:	d121      	bne.n	e06da <__aeabi_d2f+0x7a>
   e0696:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e069a:	bfbc      	itt	lt
   e069c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e06a0:	4770      	bxlt	lr
   e06a2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e06a6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e06aa:	f1c2 0218 	rsb	r2, r2, #24
   e06ae:	f1c2 0c20 	rsb	ip, r2, #32
   e06b2:	fa10 f30c 	lsls.w	r3, r0, ip
   e06b6:	fa20 f002 	lsr.w	r0, r0, r2
   e06ba:	bf18      	it	ne
   e06bc:	f040 0001 	orrne.w	r0, r0, #1
   e06c0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e06c4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e06c8:	fa03 fc0c 	lsl.w	ip, r3, ip
   e06cc:	ea40 000c 	orr.w	r0, r0, ip
   e06d0:	fa23 f302 	lsr.w	r3, r3, r2
   e06d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e06d8:	e7cc      	b.n	e0674 <__aeabi_d2f+0x14>
   e06da:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e06de:	d107      	bne.n	e06f0 <__aeabi_d2f+0x90>
   e06e0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e06e4:	bf1e      	ittt	ne
   e06e6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e06ea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e06ee:	4770      	bxne	lr
   e06f0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e06f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e06f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e06fc:	4770      	bx	lr
   e06fe:	bf00      	nop

000e0700 <__aeabi_uldivmod>:
   e0700:	b953      	cbnz	r3, e0718 <__aeabi_uldivmod+0x18>
   e0702:	b94a      	cbnz	r2, e0718 <__aeabi_uldivmod+0x18>
   e0704:	2900      	cmp	r1, #0
   e0706:	bf08      	it	eq
   e0708:	2800      	cmpeq	r0, #0
   e070a:	bf1c      	itt	ne
   e070c:	f04f 31ff 	movne.w	r1, #4294967295
   e0710:	f04f 30ff 	movne.w	r0, #4294967295
   e0714:	f000 b9a2 	b.w	e0a5c <__aeabi_idiv0>
   e0718:	f1ad 0c08 	sub.w	ip, sp, #8
   e071c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   e0720:	f000 f82a 	bl	e0778 <__udivmoddi4>
   e0724:	f8dd e004 	ldr.w	lr, [sp, #4]
   e0728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e072c:	b004      	add	sp, #16
   e072e:	4770      	bx	lr

000e0730 <__aeabi_d2ulz>:
   e0730:	b5d0      	push	{r4, r6, r7, lr}
   e0732:	2200      	movs	r2, #0
   e0734:	4b0e      	ldr	r3, [pc, #56]	; (e0770 <__aeabi_d2ulz+0x40>)
   e0736:	4606      	mov	r6, r0
   e0738:	460f      	mov	r7, r1
   e073a:	f7ff fc99 	bl	e0070 <__aeabi_dmul>
   e073e:	f7ff ff6f 	bl	e0620 <__aeabi_d2uiz>
   e0742:	4604      	mov	r4, r0
   e0744:	f7ff fc1e 	bl	dff84 <__aeabi_ui2d>
   e0748:	2200      	movs	r2, #0
   e074a:	4b0a      	ldr	r3, [pc, #40]	; (e0774 <__aeabi_d2ulz+0x44>)
   e074c:	f7ff fc90 	bl	e0070 <__aeabi_dmul>
   e0750:	4602      	mov	r2, r0
   e0752:	460b      	mov	r3, r1
   e0754:	4630      	mov	r0, r6
   e0756:	4639      	mov	r1, r7
   e0758:	f7ff fad6 	bl	dfd08 <__aeabi_dsub>
   e075c:	f7ff ff60 	bl	e0620 <__aeabi_d2uiz>
   e0760:	4623      	mov	r3, r4
   e0762:	2200      	movs	r2, #0
   e0764:	ea42 0200 	orr.w	r2, r2, r0
   e0768:	4610      	mov	r0, r2
   e076a:	4619      	mov	r1, r3
   e076c:	bdd0      	pop	{r4, r6, r7, pc}
   e076e:	bf00      	nop
   e0770:	3df00000 	.word	0x3df00000
   e0774:	41f00000 	.word	0x41f00000

000e0778 <__udivmoddi4>:
   e0778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e077c:	468c      	mov	ip, r1
   e077e:	460e      	mov	r6, r1
   e0780:	4604      	mov	r4, r0
   e0782:	9d08      	ldr	r5, [sp, #32]
   e0784:	2b00      	cmp	r3, #0
   e0786:	d150      	bne.n	e082a <__udivmoddi4+0xb2>
   e0788:	428a      	cmp	r2, r1
   e078a:	4617      	mov	r7, r2
   e078c:	d96c      	bls.n	e0868 <__udivmoddi4+0xf0>
   e078e:	fab2 fe82 	clz	lr, r2
   e0792:	f1be 0f00 	cmp.w	lr, #0
   e0796:	d00b      	beq.n	e07b0 <__udivmoddi4+0x38>
   e0798:	f1ce 0420 	rsb	r4, lr, #32
   e079c:	fa20 f404 	lsr.w	r4, r0, r4
   e07a0:	fa01 f60e 	lsl.w	r6, r1, lr
   e07a4:	ea44 0c06 	orr.w	ip, r4, r6
   e07a8:	fa02 f70e 	lsl.w	r7, r2, lr
   e07ac:	fa00 f40e 	lsl.w	r4, r0, lr
   e07b0:	ea4f 4917 	mov.w	r9, r7, lsr #16
   e07b4:	0c22      	lsrs	r2, r4, #16
   e07b6:	fbbc f0f9 	udiv	r0, ip, r9
   e07ba:	fa1f f887 	uxth.w	r8, r7
   e07be:	fb09 c610 	mls	r6, r9, r0, ip
   e07c2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e07c6:	fb00 f308 	mul.w	r3, r0, r8
   e07ca:	42b3      	cmp	r3, r6
   e07cc:	d909      	bls.n	e07e2 <__udivmoddi4+0x6a>
   e07ce:	19f6      	adds	r6, r6, r7
   e07d0:	f100 32ff 	add.w	r2, r0, #4294967295
   e07d4:	f080 8122 	bcs.w	e0a1c <__udivmoddi4+0x2a4>
   e07d8:	42b3      	cmp	r3, r6
   e07da:	f240 811f 	bls.w	e0a1c <__udivmoddi4+0x2a4>
   e07de:	3802      	subs	r0, #2
   e07e0:	443e      	add	r6, r7
   e07e2:	1af6      	subs	r6, r6, r3
   e07e4:	b2a2      	uxth	r2, r4
   e07e6:	fbb6 f3f9 	udiv	r3, r6, r9
   e07ea:	fb09 6613 	mls	r6, r9, r3, r6
   e07ee:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e07f2:	fb03 f808 	mul.w	r8, r3, r8
   e07f6:	45a0      	cmp	r8, r4
   e07f8:	d909      	bls.n	e080e <__udivmoddi4+0x96>
   e07fa:	19e4      	adds	r4, r4, r7
   e07fc:	f103 32ff 	add.w	r2, r3, #4294967295
   e0800:	f080 810a 	bcs.w	e0a18 <__udivmoddi4+0x2a0>
   e0804:	45a0      	cmp	r8, r4
   e0806:	f240 8107 	bls.w	e0a18 <__udivmoddi4+0x2a0>
   e080a:	3b02      	subs	r3, #2
   e080c:	443c      	add	r4, r7
   e080e:	ebc8 0404 	rsb	r4, r8, r4
   e0812:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e0816:	2100      	movs	r1, #0
   e0818:	2d00      	cmp	r5, #0
   e081a:	d062      	beq.n	e08e2 <__udivmoddi4+0x16a>
   e081c:	fa24 f40e 	lsr.w	r4, r4, lr
   e0820:	2300      	movs	r3, #0
   e0822:	602c      	str	r4, [r5, #0]
   e0824:	606b      	str	r3, [r5, #4]
   e0826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e082a:	428b      	cmp	r3, r1
   e082c:	d907      	bls.n	e083e <__udivmoddi4+0xc6>
   e082e:	2d00      	cmp	r5, #0
   e0830:	d055      	beq.n	e08de <__udivmoddi4+0x166>
   e0832:	2100      	movs	r1, #0
   e0834:	e885 0041 	stmia.w	r5, {r0, r6}
   e0838:	4608      	mov	r0, r1
   e083a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e083e:	fab3 f183 	clz	r1, r3
   e0842:	2900      	cmp	r1, #0
   e0844:	f040 8090 	bne.w	e0968 <__udivmoddi4+0x1f0>
   e0848:	42b3      	cmp	r3, r6
   e084a:	d302      	bcc.n	e0852 <__udivmoddi4+0xda>
   e084c:	4282      	cmp	r2, r0
   e084e:	f200 80f8 	bhi.w	e0a42 <__udivmoddi4+0x2ca>
   e0852:	1a84      	subs	r4, r0, r2
   e0854:	eb66 0603 	sbc.w	r6, r6, r3
   e0858:	2001      	movs	r0, #1
   e085a:	46b4      	mov	ip, r6
   e085c:	2d00      	cmp	r5, #0
   e085e:	d040      	beq.n	e08e2 <__udivmoddi4+0x16a>
   e0860:	e885 1010 	stmia.w	r5, {r4, ip}
   e0864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e0868:	b912      	cbnz	r2, e0870 <__udivmoddi4+0xf8>
   e086a:	2701      	movs	r7, #1
   e086c:	fbb7 f7f2 	udiv	r7, r7, r2
   e0870:	fab7 fe87 	clz	lr, r7
   e0874:	f1be 0f00 	cmp.w	lr, #0
   e0878:	d135      	bne.n	e08e6 <__udivmoddi4+0x16e>
   e087a:	1bf3      	subs	r3, r6, r7
   e087c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e0880:	fa1f fc87 	uxth.w	ip, r7
   e0884:	2101      	movs	r1, #1
   e0886:	fbb3 f0f8 	udiv	r0, r3, r8
   e088a:	0c22      	lsrs	r2, r4, #16
   e088c:	fb08 3610 	mls	r6, r8, r0, r3
   e0890:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e0894:	fb0c f300 	mul.w	r3, ip, r0
   e0898:	42b3      	cmp	r3, r6
   e089a:	d907      	bls.n	e08ac <__udivmoddi4+0x134>
   e089c:	19f6      	adds	r6, r6, r7
   e089e:	f100 32ff 	add.w	r2, r0, #4294967295
   e08a2:	d202      	bcs.n	e08aa <__udivmoddi4+0x132>
   e08a4:	42b3      	cmp	r3, r6
   e08a6:	f200 80ce 	bhi.w	e0a46 <__udivmoddi4+0x2ce>
   e08aa:	4610      	mov	r0, r2
   e08ac:	1af6      	subs	r6, r6, r3
   e08ae:	b2a2      	uxth	r2, r4
   e08b0:	fbb6 f3f8 	udiv	r3, r6, r8
   e08b4:	fb08 6613 	mls	r6, r8, r3, r6
   e08b8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e08bc:	fb0c fc03 	mul.w	ip, ip, r3
   e08c0:	45a4      	cmp	ip, r4
   e08c2:	d907      	bls.n	e08d4 <__udivmoddi4+0x15c>
   e08c4:	19e4      	adds	r4, r4, r7
   e08c6:	f103 32ff 	add.w	r2, r3, #4294967295
   e08ca:	d202      	bcs.n	e08d2 <__udivmoddi4+0x15a>
   e08cc:	45a4      	cmp	ip, r4
   e08ce:	f200 80b5 	bhi.w	e0a3c <__udivmoddi4+0x2c4>
   e08d2:	4613      	mov	r3, r2
   e08d4:	ebcc 0404 	rsb	r4, ip, r4
   e08d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e08dc:	e79c      	b.n	e0818 <__udivmoddi4+0xa0>
   e08de:	4629      	mov	r1, r5
   e08e0:	4628      	mov	r0, r5
   e08e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e08e6:	f1ce 0120 	rsb	r1, lr, #32
   e08ea:	fa06 f30e 	lsl.w	r3, r6, lr
   e08ee:	fa07 f70e 	lsl.w	r7, r7, lr
   e08f2:	fa20 f901 	lsr.w	r9, r0, r1
   e08f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e08fa:	40ce      	lsrs	r6, r1
   e08fc:	ea49 0903 	orr.w	r9, r9, r3
   e0900:	fbb6 faf8 	udiv	sl, r6, r8
   e0904:	ea4f 4419 	mov.w	r4, r9, lsr #16
   e0908:	fb08 661a 	mls	r6, r8, sl, r6
   e090c:	fa1f fc87 	uxth.w	ip, r7
   e0910:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   e0914:	fb0a f20c 	mul.w	r2, sl, ip
   e0918:	429a      	cmp	r2, r3
   e091a:	fa00 f40e 	lsl.w	r4, r0, lr
   e091e:	d90a      	bls.n	e0936 <__udivmoddi4+0x1be>
   e0920:	19db      	adds	r3, r3, r7
   e0922:	f10a 31ff 	add.w	r1, sl, #4294967295
   e0926:	f080 8087 	bcs.w	e0a38 <__udivmoddi4+0x2c0>
   e092a:	429a      	cmp	r2, r3
   e092c:	f240 8084 	bls.w	e0a38 <__udivmoddi4+0x2c0>
   e0930:	f1aa 0a02 	sub.w	sl, sl, #2
   e0934:	443b      	add	r3, r7
   e0936:	1a9b      	subs	r3, r3, r2
   e0938:	fa1f f989 	uxth.w	r9, r9
   e093c:	fbb3 f1f8 	udiv	r1, r3, r8
   e0940:	fb08 3311 	mls	r3, r8, r1, r3
   e0944:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   e0948:	fb01 f60c 	mul.w	r6, r1, ip
   e094c:	429e      	cmp	r6, r3
   e094e:	d907      	bls.n	e0960 <__udivmoddi4+0x1e8>
   e0950:	19db      	adds	r3, r3, r7
   e0952:	f101 32ff 	add.w	r2, r1, #4294967295
   e0956:	d26b      	bcs.n	e0a30 <__udivmoddi4+0x2b8>
   e0958:	429e      	cmp	r6, r3
   e095a:	d969      	bls.n	e0a30 <__udivmoddi4+0x2b8>
   e095c:	3902      	subs	r1, #2
   e095e:	443b      	add	r3, r7
   e0960:	1b9b      	subs	r3, r3, r6
   e0962:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   e0966:	e78e      	b.n	e0886 <__udivmoddi4+0x10e>
   e0968:	f1c1 0e20 	rsb	lr, r1, #32
   e096c:	fa22 f40e 	lsr.w	r4, r2, lr
   e0970:	408b      	lsls	r3, r1
   e0972:	4323      	orrs	r3, r4
   e0974:	fa20 f70e 	lsr.w	r7, r0, lr
   e0978:	fa06 f401 	lsl.w	r4, r6, r1
   e097c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   e0980:	fa26 f60e 	lsr.w	r6, r6, lr
   e0984:	433c      	orrs	r4, r7
   e0986:	fbb6 f9fc 	udiv	r9, r6, ip
   e098a:	0c27      	lsrs	r7, r4, #16
   e098c:	fb0c 6619 	mls	r6, ip, r9, r6
   e0990:	fa1f f883 	uxth.w	r8, r3
   e0994:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   e0998:	fb09 f708 	mul.w	r7, r9, r8
   e099c:	42b7      	cmp	r7, r6
   e099e:	fa02 f201 	lsl.w	r2, r2, r1
   e09a2:	fa00 fa01 	lsl.w	sl, r0, r1
   e09a6:	d908      	bls.n	e09ba <__udivmoddi4+0x242>
   e09a8:	18f6      	adds	r6, r6, r3
   e09aa:	f109 30ff 	add.w	r0, r9, #4294967295
   e09ae:	d241      	bcs.n	e0a34 <__udivmoddi4+0x2bc>
   e09b0:	42b7      	cmp	r7, r6
   e09b2:	d93f      	bls.n	e0a34 <__udivmoddi4+0x2bc>
   e09b4:	f1a9 0902 	sub.w	r9, r9, #2
   e09b8:	441e      	add	r6, r3
   e09ba:	1bf6      	subs	r6, r6, r7
   e09bc:	b2a0      	uxth	r0, r4
   e09be:	fbb6 f4fc 	udiv	r4, r6, ip
   e09c2:	fb0c 6614 	mls	r6, ip, r4, r6
   e09c6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   e09ca:	fb04 f808 	mul.w	r8, r4, r8
   e09ce:	45b8      	cmp	r8, r7
   e09d0:	d907      	bls.n	e09e2 <__udivmoddi4+0x26a>
   e09d2:	18ff      	adds	r7, r7, r3
   e09d4:	f104 30ff 	add.w	r0, r4, #4294967295
   e09d8:	d228      	bcs.n	e0a2c <__udivmoddi4+0x2b4>
   e09da:	45b8      	cmp	r8, r7
   e09dc:	d926      	bls.n	e0a2c <__udivmoddi4+0x2b4>
   e09de:	3c02      	subs	r4, #2
   e09e0:	441f      	add	r7, r3
   e09e2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   e09e6:	ebc8 0707 	rsb	r7, r8, r7
   e09ea:	fba0 8902 	umull	r8, r9, r0, r2
   e09ee:	454f      	cmp	r7, r9
   e09f0:	4644      	mov	r4, r8
   e09f2:	464e      	mov	r6, r9
   e09f4:	d314      	bcc.n	e0a20 <__udivmoddi4+0x2a8>
   e09f6:	d029      	beq.n	e0a4c <__udivmoddi4+0x2d4>
   e09f8:	b365      	cbz	r5, e0a54 <__udivmoddi4+0x2dc>
   e09fa:	ebba 0304 	subs.w	r3, sl, r4
   e09fe:	eb67 0706 	sbc.w	r7, r7, r6
   e0a02:	fa07 fe0e 	lsl.w	lr, r7, lr
   e0a06:	40cb      	lsrs	r3, r1
   e0a08:	40cf      	lsrs	r7, r1
   e0a0a:	ea4e 0303 	orr.w	r3, lr, r3
   e0a0e:	e885 0088 	stmia.w	r5, {r3, r7}
   e0a12:	2100      	movs	r1, #0
   e0a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e0a18:	4613      	mov	r3, r2
   e0a1a:	e6f8      	b.n	e080e <__udivmoddi4+0x96>
   e0a1c:	4610      	mov	r0, r2
   e0a1e:	e6e0      	b.n	e07e2 <__udivmoddi4+0x6a>
   e0a20:	ebb8 0402 	subs.w	r4, r8, r2
   e0a24:	eb69 0603 	sbc.w	r6, r9, r3
   e0a28:	3801      	subs	r0, #1
   e0a2a:	e7e5      	b.n	e09f8 <__udivmoddi4+0x280>
   e0a2c:	4604      	mov	r4, r0
   e0a2e:	e7d8      	b.n	e09e2 <__udivmoddi4+0x26a>
   e0a30:	4611      	mov	r1, r2
   e0a32:	e795      	b.n	e0960 <__udivmoddi4+0x1e8>
   e0a34:	4681      	mov	r9, r0
   e0a36:	e7c0      	b.n	e09ba <__udivmoddi4+0x242>
   e0a38:	468a      	mov	sl, r1
   e0a3a:	e77c      	b.n	e0936 <__udivmoddi4+0x1be>
   e0a3c:	3b02      	subs	r3, #2
   e0a3e:	443c      	add	r4, r7
   e0a40:	e748      	b.n	e08d4 <__udivmoddi4+0x15c>
   e0a42:	4608      	mov	r0, r1
   e0a44:	e70a      	b.n	e085c <__udivmoddi4+0xe4>
   e0a46:	3802      	subs	r0, #2
   e0a48:	443e      	add	r6, r7
   e0a4a:	e72f      	b.n	e08ac <__udivmoddi4+0x134>
   e0a4c:	45c2      	cmp	sl, r8
   e0a4e:	d3e7      	bcc.n	e0a20 <__udivmoddi4+0x2a8>
   e0a50:	463e      	mov	r6, r7
   e0a52:	e7d1      	b.n	e09f8 <__udivmoddi4+0x280>
   e0a54:	4629      	mov	r1, r5
   e0a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e0a5a:	bf00      	nop

000e0a5c <__aeabi_idiv0>:
   e0a5c:	4770      	bx	lr
   e0a5e:	bf00      	nop

000e0a60 <asctime>:
   e0a60:	4b09      	ldr	r3, [pc, #36]	; (e0a88 <asctime+0x28>)
   e0a62:	b570      	push	{r4, r5, r6, lr}
   e0a64:	681c      	ldr	r4, [r3, #0]
   e0a66:	6c25      	ldr	r5, [r4, #64]	; 0x40
   e0a68:	4606      	mov	r6, r0
   e0a6a:	b93d      	cbnz	r5, e0a7c <asctime+0x1c>
   e0a6c:	201a      	movs	r0, #26
   e0a6e:	f7fa fc4d 	bl	db30c <malloc>
   e0a72:	221a      	movs	r2, #26
   e0a74:	6420      	str	r0, [r4, #64]	; 0x40
   e0a76:	4629      	mov	r1, r5
   e0a78:	f000 f95e 	bl	e0d38 <memset>
   e0a7c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   e0a7e:	4630      	mov	r0, r6
   e0a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e0a84:	f000 b802 	b.w	e0a8c <asctime_r>
   e0a88:	2003bc60 	.word	0x2003bc60

000e0a8c <asctime_r>:
   e0a8c:	b510      	push	{r4, lr}
   e0a8e:	460c      	mov	r4, r1
   e0a90:	6941      	ldr	r1, [r0, #20]
   e0a92:	6903      	ldr	r3, [r0, #16]
   e0a94:	6982      	ldr	r2, [r0, #24]
   e0a96:	b086      	sub	sp, #24
   e0a98:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e0a9c:	9104      	str	r1, [sp, #16]
   e0a9e:	6801      	ldr	r1, [r0, #0]
   e0aa0:	9103      	str	r1, [sp, #12]
   e0aa2:	6841      	ldr	r1, [r0, #4]
   e0aa4:	9102      	str	r1, [sp, #8]
   e0aa6:	6881      	ldr	r1, [r0, #8]
   e0aa8:	9101      	str	r1, [sp, #4]
   e0aaa:	68c1      	ldr	r1, [r0, #12]
   e0aac:	9100      	str	r1, [sp, #0]
   e0aae:	4907      	ldr	r1, [pc, #28]	; (e0acc <asctime_r+0x40>)
   e0ab0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e0ab4:	440b      	add	r3, r1
   e0ab6:	4906      	ldr	r1, [pc, #24]	; (e0ad0 <asctime_r+0x44>)
   e0ab8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e0abc:	440a      	add	r2, r1
   e0abe:	4620      	mov	r0, r4
   e0ac0:	4904      	ldr	r1, [pc, #16]	; (e0ad4 <asctime_r+0x48>)
   e0ac2:	f7fa fc43 	bl	db34c <siprintf>
   e0ac6:	4620      	mov	r0, r4
   e0ac8:	b006      	add	sp, #24
   e0aca:	bd10      	pop	{r4, pc}
   e0acc:	000e538d 	.word	0x000e538d
   e0ad0:	000e5378 	.word	0x000e5378
   e0ad4:	000e53b1 	.word	0x000e53b1

000e0ad8 <atof>:
   e0ad8:	2100      	movs	r1, #0
   e0ada:	f001 bf61 	b.w	e29a0 <strtod>

000e0ade <atoi>:
   e0ade:	220a      	movs	r2, #10
   e0ae0:	2100      	movs	r1, #0
   e0ae2:	f001 bfeb 	b.w	e2abc <strtol>

000e0ae6 <atol>:
   e0ae6:	220a      	movs	r2, #10
   e0ae8:	2100      	movs	r1, #0
   e0aea:	f001 bfe7 	b.w	e2abc <strtol>
	...

000e0af0 <__cxa_atexit>:
   e0af0:	b510      	push	{r4, lr}
   e0af2:	4c05      	ldr	r4, [pc, #20]	; (e0b08 <__cxa_atexit+0x18>)
   e0af4:	4613      	mov	r3, r2
   e0af6:	b12c      	cbz	r4, e0b04 <__cxa_atexit+0x14>
   e0af8:	460a      	mov	r2, r1
   e0afa:	4601      	mov	r1, r0
   e0afc:	2002      	movs	r0, #2
   e0afe:	f3af 8000 	nop.w
   e0b02:	bd10      	pop	{r4, pc}
   e0b04:	4620      	mov	r0, r4
   e0b06:	bd10      	pop	{r4, pc}
   e0b08:	00000000 	.word	0x00000000

000e0b0c <localtime>:
   e0b0c:	b538      	push	{r3, r4, r5, lr}
   e0b0e:	4b07      	ldr	r3, [pc, #28]	; (e0b2c <localtime+0x20>)
   e0b10:	681c      	ldr	r4, [r3, #0]
   e0b12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e0b14:	4605      	mov	r5, r0
   e0b16:	b91b      	cbnz	r3, e0b20 <localtime+0x14>
   e0b18:	2024      	movs	r0, #36	; 0x24
   e0b1a:	f7fa fbf7 	bl	db30c <malloc>
   e0b1e:	63e0      	str	r0, [r4, #60]	; 0x3c
   e0b20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e0b22:	4628      	mov	r0, r5
   e0b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e0b28:	f000 b802 	b.w	e0b30 <localtime_r>
   e0b2c:	2003bc60 	.word	0x2003bc60

000e0b30 <localtime_r>:
   e0b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0b34:	460c      	mov	r4, r1
   e0b36:	4680      	mov	r8, r0
   e0b38:	f002 fe0c 	bl	e3754 <__gettzinfo>
   e0b3c:	4621      	mov	r1, r4
   e0b3e:	4607      	mov	r7, r0
   e0b40:	4640      	mov	r0, r8
   e0b42:	f002 fe0b 	bl	e375c <gmtime_r>
   e0b46:	6946      	ldr	r6, [r0, #20]
   e0b48:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e0b4c:	07b3      	lsls	r3, r6, #30
   e0b4e:	4604      	mov	r4, r0
   e0b50:	d105      	bne.n	e0b5e <localtime_r+0x2e>
   e0b52:	2264      	movs	r2, #100	; 0x64
   e0b54:	fb96 f3f2 	sdiv	r3, r6, r2
   e0b58:	fb02 6313 	mls	r3, r2, r3, r6
   e0b5c:	b94b      	cbnz	r3, e0b72 <localtime_r+0x42>
   e0b5e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e0b62:	fb96 f3f5 	sdiv	r3, r6, r5
   e0b66:	fb05 6513 	mls	r5, r5, r3, r6
   e0b6a:	fab5 f385 	clz	r3, r5
   e0b6e:	095b      	lsrs	r3, r3, #5
   e0b70:	e000      	b.n	e0b74 <localtime_r+0x44>
   e0b72:	2301      	movs	r3, #1
   e0b74:	4a5f      	ldr	r2, [pc, #380]	; (e0cf4 <localtime_r+0x1c4>)
   e0b76:	2530      	movs	r5, #48	; 0x30
   e0b78:	fb05 2503 	mla	r5, r5, r3, r2
   e0b7c:	f002 f8e8 	bl	e2d50 <__tz_lock>
   e0b80:	f002 f8e8 	bl	e2d54 <_tzset_unlocked>
   e0b84:	4b5c      	ldr	r3, [pc, #368]	; (e0cf8 <localtime_r+0x1c8>)
   e0b86:	681b      	ldr	r3, [r3, #0]
   e0b88:	b1f3      	cbz	r3, e0bc8 <localtime_r+0x98>
   e0b8a:	687b      	ldr	r3, [r7, #4]
   e0b8c:	429e      	cmp	r6, r3
   e0b8e:	d105      	bne.n	e0b9c <localtime_r+0x6c>
   e0b90:	6839      	ldr	r1, [r7, #0]
   e0b92:	f8d8 3000 	ldr.w	r3, [r8]
   e0b96:	69fa      	ldr	r2, [r7, #28]
   e0b98:	b941      	cbnz	r1, e0bac <localtime_r+0x7c>
   e0b9a:	e00a      	b.n	e0bb2 <localtime_r+0x82>
   e0b9c:	4630      	mov	r0, r6
   e0b9e:	f002 f82f 	bl	e2c00 <__tzcalc_limits>
   e0ba2:	2800      	cmp	r0, #0
   e0ba4:	d1f4      	bne.n	e0b90 <localtime_r+0x60>
   e0ba6:	f04f 33ff 	mov.w	r3, #4294967295
   e0baa:	e00d      	b.n	e0bc8 <localtime_r+0x98>
   e0bac:	4293      	cmp	r3, r2
   e0bae:	db08      	blt.n	e0bc2 <localtime_r+0x92>
   e0bb0:	e001      	b.n	e0bb6 <localtime_r+0x86>
   e0bb2:	4293      	cmp	r3, r2
   e0bb4:	da07      	bge.n	e0bc6 <localtime_r+0x96>
   e0bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e0bb8:	4293      	cmp	r3, r2
   e0bba:	bfac      	ite	ge
   e0bbc:	2300      	movge	r3, #0
   e0bbe:	2301      	movlt	r3, #1
   e0bc0:	e002      	b.n	e0bc8 <localtime_r+0x98>
   e0bc2:	2300      	movs	r3, #0
   e0bc4:	e000      	b.n	e0bc8 <localtime_r+0x98>
   e0bc6:	2301      	movs	r3, #1
   e0bc8:	6223      	str	r3, [r4, #32]
   e0bca:	6a23      	ldr	r3, [r4, #32]
   e0bcc:	2b01      	cmp	r3, #1
   e0bce:	bf0c      	ite	eq
   e0bd0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e0bd2:	6a39      	ldrne	r1, [r7, #32]
   e0bd4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e0bd8:	203c      	movs	r0, #60	; 0x3c
   e0bda:	fb91 f6f3 	sdiv	r6, r1, r3
   e0bde:	fb03 1316 	mls	r3, r3, r6, r1
   e0be2:	6861      	ldr	r1, [r4, #4]
   e0be4:	fb93 f2f0 	sdiv	r2, r3, r0
   e0be8:	fb00 3012 	mls	r0, r0, r2, r3
   e0bec:	6823      	ldr	r3, [r4, #0]
   e0bee:	1a89      	subs	r1, r1, r2
   e0bf0:	68a2      	ldr	r2, [r4, #8]
   e0bf2:	6061      	str	r1, [r4, #4]
   e0bf4:	1a1b      	subs	r3, r3, r0
   e0bf6:	1b92      	subs	r2, r2, r6
   e0bf8:	2b3b      	cmp	r3, #59	; 0x3b
   e0bfa:	6023      	str	r3, [r4, #0]
   e0bfc:	60a2      	str	r2, [r4, #8]
   e0bfe:	dd03      	ble.n	e0c08 <localtime_r+0xd8>
   e0c00:	3101      	adds	r1, #1
   e0c02:	6061      	str	r1, [r4, #4]
   e0c04:	3b3c      	subs	r3, #60	; 0x3c
   e0c06:	e004      	b.n	e0c12 <localtime_r+0xe2>
   e0c08:	2b00      	cmp	r3, #0
   e0c0a:	da03      	bge.n	e0c14 <localtime_r+0xe4>
   e0c0c:	3901      	subs	r1, #1
   e0c0e:	6061      	str	r1, [r4, #4]
   e0c10:	333c      	adds	r3, #60	; 0x3c
   e0c12:	6023      	str	r3, [r4, #0]
   e0c14:	6863      	ldr	r3, [r4, #4]
   e0c16:	2b3b      	cmp	r3, #59	; 0x3b
   e0c18:	dd03      	ble.n	e0c22 <localtime_r+0xf2>
   e0c1a:	3201      	adds	r2, #1
   e0c1c:	60a2      	str	r2, [r4, #8]
   e0c1e:	3b3c      	subs	r3, #60	; 0x3c
   e0c20:	e004      	b.n	e0c2c <localtime_r+0xfc>
   e0c22:	2b00      	cmp	r3, #0
   e0c24:	da03      	bge.n	e0c2e <localtime_r+0xfe>
   e0c26:	3a01      	subs	r2, #1
   e0c28:	60a2      	str	r2, [r4, #8]
   e0c2a:	333c      	adds	r3, #60	; 0x3c
   e0c2c:	6063      	str	r3, [r4, #4]
   e0c2e:	68a3      	ldr	r3, [r4, #8]
   e0c30:	2b17      	cmp	r3, #23
   e0c32:	dd22      	ble.n	e0c7a <localtime_r+0x14a>
   e0c34:	69e2      	ldr	r2, [r4, #28]
   e0c36:	3201      	adds	r2, #1
   e0c38:	61e2      	str	r2, [r4, #28]
   e0c3a:	69a2      	ldr	r2, [r4, #24]
   e0c3c:	3201      	adds	r2, #1
   e0c3e:	2a06      	cmp	r2, #6
   e0c40:	bfc8      	it	gt
   e0c42:	2200      	movgt	r2, #0
   e0c44:	61a2      	str	r2, [r4, #24]
   e0c46:	68e2      	ldr	r2, [r4, #12]
   e0c48:	3b18      	subs	r3, #24
   e0c4a:	3201      	adds	r2, #1
   e0c4c:	60a3      	str	r3, [r4, #8]
   e0c4e:	6923      	ldr	r3, [r4, #16]
   e0c50:	60e2      	str	r2, [r4, #12]
   e0c52:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e0c56:	428a      	cmp	r2, r1
   e0c58:	dd46      	ble.n	e0ce8 <localtime_r+0x1b8>
   e0c5a:	3301      	adds	r3, #1
   e0c5c:	2b0c      	cmp	r3, #12
   e0c5e:	bf0c      	ite	eq
   e0c60:	6963      	ldreq	r3, [r4, #20]
   e0c62:	6123      	strne	r3, [r4, #16]
   e0c64:	eba2 0201 	sub.w	r2, r2, r1
   e0c68:	60e2      	str	r2, [r4, #12]
   e0c6a:	bf01      	itttt	eq
   e0c6c:	3301      	addeq	r3, #1
   e0c6e:	2200      	moveq	r2, #0
   e0c70:	6122      	streq	r2, [r4, #16]
   e0c72:	6163      	streq	r3, [r4, #20]
   e0c74:	bf08      	it	eq
   e0c76:	61e2      	streq	r2, [r4, #28]
   e0c78:	e036      	b.n	e0ce8 <localtime_r+0x1b8>
   e0c7a:	2b00      	cmp	r3, #0
   e0c7c:	da34      	bge.n	e0ce8 <localtime_r+0x1b8>
   e0c7e:	69e2      	ldr	r2, [r4, #28]
   e0c80:	3a01      	subs	r2, #1
   e0c82:	61e2      	str	r2, [r4, #28]
   e0c84:	69a2      	ldr	r2, [r4, #24]
   e0c86:	3a01      	subs	r2, #1
   e0c88:	bf48      	it	mi
   e0c8a:	2206      	movmi	r2, #6
   e0c8c:	61a2      	str	r2, [r4, #24]
   e0c8e:	68e2      	ldr	r2, [r4, #12]
   e0c90:	3318      	adds	r3, #24
   e0c92:	3a01      	subs	r2, #1
   e0c94:	60e2      	str	r2, [r4, #12]
   e0c96:	60a3      	str	r3, [r4, #8]
   e0c98:	bb32      	cbnz	r2, e0ce8 <localtime_r+0x1b8>
   e0c9a:	6923      	ldr	r3, [r4, #16]
   e0c9c:	3b01      	subs	r3, #1
   e0c9e:	d401      	bmi.n	e0ca4 <localtime_r+0x174>
   e0ca0:	6123      	str	r3, [r4, #16]
   e0ca2:	e01d      	b.n	e0ce0 <localtime_r+0x1b0>
   e0ca4:	230b      	movs	r3, #11
   e0ca6:	6123      	str	r3, [r4, #16]
   e0ca8:	6963      	ldr	r3, [r4, #20]
   e0caa:	1e5a      	subs	r2, r3, #1
   e0cac:	f012 0f03 	tst.w	r2, #3
   e0cb0:	6162      	str	r2, [r4, #20]
   e0cb2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e0cb6:	d105      	bne.n	e0cc4 <localtime_r+0x194>
   e0cb8:	2164      	movs	r1, #100	; 0x64
   e0cba:	fb93 f2f1 	sdiv	r2, r3, r1
   e0cbe:	fb01 3212 	mls	r2, r1, r2, r3
   e0cc2:	b94a      	cbnz	r2, e0cd8 <localtime_r+0x1a8>
   e0cc4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e0cc8:	fb93 f2f1 	sdiv	r2, r3, r1
   e0ccc:	fb01 3312 	mls	r3, r1, r2, r3
   e0cd0:	fab3 f383 	clz	r3, r3
   e0cd4:	095b      	lsrs	r3, r3, #5
   e0cd6:	e000      	b.n	e0cda <localtime_r+0x1aa>
   e0cd8:	2301      	movs	r3, #1
   e0cda:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e0cde:	61e3      	str	r3, [r4, #28]
   e0ce0:	6923      	ldr	r3, [r4, #16]
   e0ce2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e0ce6:	60e3      	str	r3, [r4, #12]
   e0ce8:	f002 f833 	bl	e2d52 <__tz_unlock>
   e0cec:	4620      	mov	r0, r4
   e0cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0cf2:	bf00      	nop
   e0cf4:	000e559c 	.word	0x000e559c
   e0cf8:	2003e7e4 	.word	0x2003e7e4

000e0cfc <_localeconv_r>:
   e0cfc:	4800      	ldr	r0, [pc, #0]	; (e0d00 <_localeconv_r+0x4>)
   e0cfe:	4770      	bx	lr
   e0d00:	2003bc64 	.word	0x2003bc64

000e0d04 <memcmp>:
   e0d04:	b510      	push	{r4, lr}
   e0d06:	3901      	subs	r1, #1
   e0d08:	4402      	add	r2, r0
   e0d0a:	4290      	cmp	r0, r2
   e0d0c:	d007      	beq.n	e0d1e <memcmp+0x1a>
   e0d0e:	f810 3b01 	ldrb.w	r3, [r0], #1
   e0d12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e0d16:	42a3      	cmp	r3, r4
   e0d18:	d0f7      	beq.n	e0d0a <memcmp+0x6>
   e0d1a:	1b18      	subs	r0, r3, r4
   e0d1c:	bd10      	pop	{r4, pc}
   e0d1e:	2000      	movs	r0, #0
   e0d20:	bd10      	pop	{r4, pc}

000e0d22 <memcpy>:
   e0d22:	b510      	push	{r4, lr}
   e0d24:	1e43      	subs	r3, r0, #1
   e0d26:	440a      	add	r2, r1
   e0d28:	4291      	cmp	r1, r2
   e0d2a:	d004      	beq.n	e0d36 <memcpy+0x14>
   e0d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e0d30:	f803 4f01 	strb.w	r4, [r3, #1]!
   e0d34:	e7f8      	b.n	e0d28 <memcpy+0x6>
   e0d36:	bd10      	pop	{r4, pc}

000e0d38 <memset>:
   e0d38:	4402      	add	r2, r0
   e0d3a:	4603      	mov	r3, r0
   e0d3c:	4293      	cmp	r3, r2
   e0d3e:	d002      	beq.n	e0d46 <memset+0xe>
   e0d40:	f803 1b01 	strb.w	r1, [r3], #1
   e0d44:	e7fa      	b.n	e0d3c <memset+0x4>
   e0d46:	4770      	bx	lr

000e0d48 <validate_structure>:
   e0d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   e0d4a:	6801      	ldr	r1, [r0, #0]
   e0d4c:	293b      	cmp	r1, #59	; 0x3b
   e0d4e:	4604      	mov	r4, r0
   e0d50:	d911      	bls.n	e0d76 <validate_structure+0x2e>
   e0d52:	223c      	movs	r2, #60	; 0x3c
   e0d54:	4668      	mov	r0, sp
   e0d56:	f002 f987 	bl	e3068 <div>
   e0d5a:	9a01      	ldr	r2, [sp, #4]
   e0d5c:	6863      	ldr	r3, [r4, #4]
   e0d5e:	9900      	ldr	r1, [sp, #0]
   e0d60:	2a00      	cmp	r2, #0
   e0d62:	440b      	add	r3, r1
   e0d64:	6063      	str	r3, [r4, #4]
   e0d66:	bfbb      	ittet	lt
   e0d68:	323c      	addlt	r2, #60	; 0x3c
   e0d6a:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e0d6e:	6022      	strge	r2, [r4, #0]
   e0d70:	6022      	strlt	r2, [r4, #0]
   e0d72:	bfb8      	it	lt
   e0d74:	6063      	strlt	r3, [r4, #4]
   e0d76:	6861      	ldr	r1, [r4, #4]
   e0d78:	293b      	cmp	r1, #59	; 0x3b
   e0d7a:	d911      	bls.n	e0da0 <validate_structure+0x58>
   e0d7c:	223c      	movs	r2, #60	; 0x3c
   e0d7e:	4668      	mov	r0, sp
   e0d80:	f002 f972 	bl	e3068 <div>
   e0d84:	9a01      	ldr	r2, [sp, #4]
   e0d86:	68a1      	ldr	r1, [r4, #8]
   e0d88:	9b00      	ldr	r3, [sp, #0]
   e0d8a:	2a00      	cmp	r2, #0
   e0d8c:	440b      	add	r3, r1
   e0d8e:	60a3      	str	r3, [r4, #8]
   e0d90:	bfbb      	ittet	lt
   e0d92:	323c      	addlt	r2, #60	; 0x3c
   e0d94:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e0d98:	6062      	strge	r2, [r4, #4]
   e0d9a:	6062      	strlt	r2, [r4, #4]
   e0d9c:	bfb8      	it	lt
   e0d9e:	60a3      	strlt	r3, [r4, #8]
   e0da0:	68a1      	ldr	r1, [r4, #8]
   e0da2:	2917      	cmp	r1, #23
   e0da4:	d911      	bls.n	e0dca <validate_structure+0x82>
   e0da6:	2218      	movs	r2, #24
   e0da8:	4668      	mov	r0, sp
   e0daa:	f002 f95d 	bl	e3068 <div>
   e0dae:	9a01      	ldr	r2, [sp, #4]
   e0db0:	68e1      	ldr	r1, [r4, #12]
   e0db2:	9b00      	ldr	r3, [sp, #0]
   e0db4:	2a00      	cmp	r2, #0
   e0db6:	440b      	add	r3, r1
   e0db8:	60e3      	str	r3, [r4, #12]
   e0dba:	bfbb      	ittet	lt
   e0dbc:	3218      	addlt	r2, #24
   e0dbe:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e0dc2:	60a2      	strge	r2, [r4, #8]
   e0dc4:	60a2      	strlt	r2, [r4, #8]
   e0dc6:	bfb8      	it	lt
   e0dc8:	60e3      	strlt	r3, [r4, #12]
   e0dca:	6921      	ldr	r1, [r4, #16]
   e0dcc:	290b      	cmp	r1, #11
   e0dce:	d911      	bls.n	e0df4 <validate_structure+0xac>
   e0dd0:	220c      	movs	r2, #12
   e0dd2:	4668      	mov	r0, sp
   e0dd4:	f002 f948 	bl	e3068 <div>
   e0dd8:	9a01      	ldr	r2, [sp, #4]
   e0dda:	6961      	ldr	r1, [r4, #20]
   e0ddc:	9b00      	ldr	r3, [sp, #0]
   e0dde:	2a00      	cmp	r2, #0
   e0de0:	440b      	add	r3, r1
   e0de2:	6163      	str	r3, [r4, #20]
   e0de4:	bfbb      	ittet	lt
   e0de6:	320c      	addlt	r2, #12
   e0de8:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e0dec:	6122      	strge	r2, [r4, #16]
   e0dee:	6122      	strlt	r2, [r4, #16]
   e0df0:	bfb8      	it	lt
   e0df2:	6163      	strlt	r3, [r4, #20]
   e0df4:	6963      	ldr	r3, [r4, #20]
   e0df6:	0799      	lsls	r1, r3, #30
   e0df8:	d112      	bne.n	e0e20 <validate_structure+0xd8>
   e0dfa:	2164      	movs	r1, #100	; 0x64
   e0dfc:	fb93 f2f1 	sdiv	r2, r3, r1
   e0e00:	fb01 3212 	mls	r2, r1, r2, r3
   e0e04:	b972      	cbnz	r2, e0e24 <validate_structure+0xdc>
   e0e06:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   e0e0a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e0e0e:	fb93 f2f1 	sdiv	r2, r3, r1
   e0e12:	fb01 3312 	mls	r3, r1, r2, r3
   e0e16:	2b00      	cmp	r3, #0
   e0e18:	bf14      	ite	ne
   e0e1a:	231c      	movne	r3, #28
   e0e1c:	231d      	moveq	r3, #29
   e0e1e:	e002      	b.n	e0e26 <validate_structure+0xde>
   e0e20:	231c      	movs	r3, #28
   e0e22:	e000      	b.n	e0e26 <validate_structure+0xde>
   e0e24:	231d      	movs	r3, #29
   e0e26:	68e2      	ldr	r2, [r4, #12]
   e0e28:	2a00      	cmp	r2, #0
   e0e2a:	dd06      	ble.n	e0e3a <validate_structure+0xf2>
   e0e2c:	4f33      	ldr	r7, [pc, #204]	; (e0efc <validate_structure+0x1b4>)
   e0e2e:	f04f 0e00 	mov.w	lr, #0
   e0e32:	2564      	movs	r5, #100	; 0x64
   e0e34:	f44f 76c8 	mov.w	r6, #400	; 0x190
   e0e38:	e039      	b.n	e0eae <validate_structure+0x166>
   e0e3a:	4f30      	ldr	r7, [pc, #192]	; (e0efc <validate_structure+0x1b4>)
   e0e3c:	260b      	movs	r6, #11
   e0e3e:	2064      	movs	r0, #100	; 0x64
   e0e40:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e0e44:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   e0e48:	f1be 0f00 	cmp.w	lr, #0
   e0e4c:	dc53      	bgt.n	e0ef6 <validate_structure+0x1ae>
   e0e4e:	6921      	ldr	r1, [r4, #16]
   e0e50:	3901      	subs	r1, #1
   e0e52:	6121      	str	r1, [r4, #16]
   e0e54:	3101      	adds	r1, #1
   e0e56:	d118      	bne.n	e0e8a <validate_structure+0x142>
   e0e58:	6963      	ldr	r3, [r4, #20]
   e0e5a:	6126      	str	r6, [r4, #16]
   e0e5c:	1e59      	subs	r1, r3, #1
   e0e5e:	078a      	lsls	r2, r1, #30
   e0e60:	6161      	str	r1, [r4, #20]
   e0e62:	d10f      	bne.n	e0e84 <validate_structure+0x13c>
   e0e64:	fb91 f2f0 	sdiv	r2, r1, r0
   e0e68:	fb00 1112 	mls	r1, r0, r2, r1
   e0e6c:	b961      	cbnz	r1, e0e88 <validate_structure+0x140>
   e0e6e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e0e72:	fb93 f2f5 	sdiv	r2, r3, r5
   e0e76:	fb05 3312 	mls	r3, r5, r2, r3
   e0e7a:	2b00      	cmp	r3, #0
   e0e7c:	bf14      	ite	ne
   e0e7e:	231c      	movne	r3, #28
   e0e80:	231d      	moveq	r3, #29
   e0e82:	e002      	b.n	e0e8a <validate_structure+0x142>
   e0e84:	231c      	movs	r3, #28
   e0e86:	e000      	b.n	e0e8a <validate_structure+0x142>
   e0e88:	231d      	movs	r3, #29
   e0e8a:	6922      	ldr	r2, [r4, #16]
   e0e8c:	2a01      	cmp	r2, #1
   e0e8e:	bf14      	ite	ne
   e0e90:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   e0e94:	461a      	moveq	r2, r3
   e0e96:	4472      	add	r2, lr
   e0e98:	60e2      	str	r2, [r4, #12]
   e0e9a:	e7d3      	b.n	e0e44 <validate_structure+0xfc>
   e0e9c:	428b      	cmp	r3, r1
   e0e9e:	da2a      	bge.n	e0ef6 <validate_structure+0x1ae>
   e0ea0:	4618      	mov	r0, r3
   e0ea2:	3201      	adds	r2, #1
   e0ea4:	1a09      	subs	r1, r1, r0
   e0ea6:	2a0c      	cmp	r2, #12
   e0ea8:	60e1      	str	r1, [r4, #12]
   e0eaa:	6122      	str	r2, [r4, #16]
   e0eac:	d008      	beq.n	e0ec0 <validate_structure+0x178>
   e0eae:	6922      	ldr	r2, [r4, #16]
   e0eb0:	68e1      	ldr	r1, [r4, #12]
   e0eb2:	2a01      	cmp	r2, #1
   e0eb4:	d0f2      	beq.n	e0e9c <validate_structure+0x154>
   e0eb6:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   e0eba:	4281      	cmp	r1, r0
   e0ebc:	dcf1      	bgt.n	e0ea2 <validate_structure+0x15a>
   e0ebe:	e01a      	b.n	e0ef6 <validate_structure+0x1ae>
   e0ec0:	6963      	ldr	r3, [r4, #20]
   e0ec2:	f8c4 e010 	str.w	lr, [r4, #16]
   e0ec6:	1c5a      	adds	r2, r3, #1
   e0ec8:	0791      	lsls	r1, r2, #30
   e0eca:	6162      	str	r2, [r4, #20]
   e0ecc:	d10f      	bne.n	e0eee <validate_structure+0x1a6>
   e0ece:	fb92 f1f5 	sdiv	r1, r2, r5
   e0ed2:	fb05 2211 	mls	r2, r5, r1, r2
   e0ed6:	b962      	cbnz	r2, e0ef2 <validate_structure+0x1aa>
   e0ed8:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   e0edc:	fb93 f2f6 	sdiv	r2, r3, r6
   e0ee0:	fb06 3312 	mls	r3, r6, r2, r3
   e0ee4:	2b00      	cmp	r3, #0
   e0ee6:	bf14      	ite	ne
   e0ee8:	231c      	movne	r3, #28
   e0eea:	231d      	moveq	r3, #29
   e0eec:	e7df      	b.n	e0eae <validate_structure+0x166>
   e0eee:	231c      	movs	r3, #28
   e0ef0:	e7dd      	b.n	e0eae <validate_structure+0x166>
   e0ef2:	231d      	movs	r3, #29
   e0ef4:	e7db      	b.n	e0eae <validate_structure+0x166>
   e0ef6:	b003      	add	sp, #12
   e0ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e0efa:	bf00      	nop
   e0efc:	000e556c 	.word	0x000e556c

000e0f00 <mktime>:
   e0f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e0f04:	4605      	mov	r5, r0
   e0f06:	f002 fc25 	bl	e3754 <__gettzinfo>
   e0f0a:	4681      	mov	r9, r0
   e0f0c:	4628      	mov	r0, r5
   e0f0e:	f7ff ff1b 	bl	e0d48 <validate_structure>
   e0f12:	e895 000c 	ldmia.w	r5, {r2, r3}
   e0f16:	213c      	movs	r1, #60	; 0x3c
   e0f18:	fb01 2303 	mla	r3, r1, r3, r2
   e0f1c:	68aa      	ldr	r2, [r5, #8]
   e0f1e:	68ec      	ldr	r4, [r5, #12]
   e0f20:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   e0f24:	fb08 3102 	mla	r1, r8, r2, r3
   e0f28:	692b      	ldr	r3, [r5, #16]
   e0f2a:	4aab      	ldr	r2, [pc, #684]	; (e11d8 <mktime+0x2d8>)
   e0f2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   e0f30:	3c01      	subs	r4, #1
   e0f32:	2b01      	cmp	r3, #1
   e0f34:	4414      	add	r4, r2
   e0f36:	696b      	ldr	r3, [r5, #20]
   e0f38:	dd11      	ble.n	e0f5e <mktime+0x5e>
   e0f3a:	079e      	lsls	r6, r3, #30
   e0f3c:	d10f      	bne.n	e0f5e <mktime+0x5e>
   e0f3e:	2064      	movs	r0, #100	; 0x64
   e0f40:	fb93 f2f0 	sdiv	r2, r3, r0
   e0f44:	fb00 3212 	mls	r2, r0, r2, r3
   e0f48:	b942      	cbnz	r2, e0f5c <mktime+0x5c>
   e0f4a:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   e0f4e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e0f52:	fb96 f0f2 	sdiv	r0, r6, r2
   e0f56:	fb02 6210 	mls	r2, r2, r0, r6
   e0f5a:	b902      	cbnz	r2, e0f5e <mktime+0x5e>
   e0f5c:	3401      	adds	r4, #1
   e0f5e:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   e0f62:	3210      	adds	r2, #16
   e0f64:	f644 6020 	movw	r0, #20000	; 0x4e20
   e0f68:	4282      	cmp	r2, r0
   e0f6a:	61ec      	str	r4, [r5, #28]
   e0f6c:	461f      	mov	r7, r3
   e0f6e:	f200 812e 	bhi.w	e11ce <mktime+0x2ce>
   e0f72:	2b46      	cmp	r3, #70	; 0x46
   e0f74:	dd22      	ble.n	e0fbc <mktime+0xbc>
   e0f76:	2246      	movs	r2, #70	; 0x46
   e0f78:	f240 1c6d 	movw	ip, #365	; 0x16d
   e0f7c:	2664      	movs	r6, #100	; 0x64
   e0f7e:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   e0f82:	0790      	lsls	r0, r2, #30
   e0f84:	d110      	bne.n	e0fa8 <mktime+0xa8>
   e0f86:	fb92 f0f6 	sdiv	r0, r2, r6
   e0f8a:	fb06 2010 	mls	r0, r6, r0, r2
   e0f8e:	b970      	cbnz	r0, e0fae <mktime+0xae>
   e0f90:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   e0f94:	fb98 f0fe 	sdiv	r0, r8, lr
   e0f98:	fb0e 8010 	mls	r0, lr, r0, r8
   e0f9c:	2800      	cmp	r0, #0
   e0f9e:	bf14      	ite	ne
   e0fa0:	4660      	movne	r0, ip
   e0fa2:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e0fa6:	e004      	b.n	e0fb2 <mktime+0xb2>
   e0fa8:	f240 106d 	movw	r0, #365	; 0x16d
   e0fac:	e001      	b.n	e0fb2 <mktime+0xb2>
   e0fae:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e0fb2:	3201      	adds	r2, #1
   e0fb4:	4293      	cmp	r3, r2
   e0fb6:	4404      	add	r4, r0
   e0fb8:	d1e3      	bne.n	e0f82 <mktime+0x82>
   e0fba:	e044      	b.n	e1046 <mktime+0x146>
   e0fbc:	d043      	beq.n	e1046 <mktime+0x146>
   e0fbe:	2245      	movs	r2, #69	; 0x45
   e0fc0:	f240 1e6d 	movw	lr, #365	; 0x16d
   e0fc4:	2664      	movs	r6, #100	; 0x64
   e0fc6:	f44f 77c8 	mov.w	r7, #400	; 0x190
   e0fca:	429a      	cmp	r2, r3
   e0fcc:	dd1a      	ble.n	e1004 <mktime+0x104>
   e0fce:	0790      	lsls	r0, r2, #30
   e0fd0:	d110      	bne.n	e0ff4 <mktime+0xf4>
   e0fd2:	fb92 f0f6 	sdiv	r0, r2, r6
   e0fd6:	fb06 2010 	mls	r0, r6, r0, r2
   e0fda:	b970      	cbnz	r0, e0ffa <mktime+0xfa>
   e0fdc:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   e0fe0:	fb9c f0f7 	sdiv	r0, ip, r7
   e0fe4:	fb07 c010 	mls	r0, r7, r0, ip
   e0fe8:	2800      	cmp	r0, #0
   e0fea:	bf14      	ite	ne
   e0fec:	4670      	movne	r0, lr
   e0fee:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e0ff2:	e004      	b.n	e0ffe <mktime+0xfe>
   e0ff4:	f240 106d 	movw	r0, #365	; 0x16d
   e0ff8:	e001      	b.n	e0ffe <mktime+0xfe>
   e0ffa:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e0ffe:	1a24      	subs	r4, r4, r0
   e1000:	3a01      	subs	r2, #1
   e1002:	e7e2      	b.n	e0fca <mktime+0xca>
   e1004:	2b45      	cmp	r3, #69	; 0x45
   e1006:	bfa8      	it	ge
   e1008:	2345      	movge	r3, #69	; 0x45
   e100a:	079e      	lsls	r6, r3, #30
   e100c:	461f      	mov	r7, r3
   e100e:	d114      	bne.n	e103a <mktime+0x13a>
   e1010:	2264      	movs	r2, #100	; 0x64
   e1012:	fb93 f3f2 	sdiv	r3, r3, r2
   e1016:	fb02 7313 	mls	r3, r2, r3, r7
   e101a:	b98b      	cbnz	r3, e1040 <mktime+0x140>
   e101c:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   e1020:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e1024:	fb90 f2f3 	sdiv	r2, r0, r3
   e1028:	fb03 0312 	mls	r3, r3, r2, r0
   e102c:	2b00      	cmp	r3, #0
   e102e:	f240 136d 	movw	r3, #365	; 0x16d
   e1032:	bf08      	it	eq
   e1034:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   e1038:	e004      	b.n	e1044 <mktime+0x144>
   e103a:	f240 136d 	movw	r3, #365	; 0x16d
   e103e:	e001      	b.n	e1044 <mktime+0x144>
   e1040:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   e1044:	1ae4      	subs	r4, r4, r3
   e1046:	4865      	ldr	r0, [pc, #404]	; (e11dc <mktime+0x2dc>)
   e1048:	fb00 1804 	mla	r8, r0, r4, r1
   e104c:	f001 fe80 	bl	e2d50 <__tz_lock>
   e1050:	f001 fe80 	bl	e2d54 <_tzset_unlocked>
   e1054:	4b62      	ldr	r3, [pc, #392]	; (e11e0 <mktime+0x2e0>)
   e1056:	681e      	ldr	r6, [r3, #0]
   e1058:	2e00      	cmp	r6, #0
   e105a:	f000 80a4 	beq.w	e11a6 <mktime+0x2a6>
   e105e:	6a2b      	ldr	r3, [r5, #32]
   e1060:	6968      	ldr	r0, [r5, #20]
   e1062:	2b01      	cmp	r3, #1
   e1064:	bfa8      	it	ge
   e1066:	2301      	movge	r3, #1
   e1068:	469a      	mov	sl, r3
   e106a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   e106e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e1072:	4298      	cmp	r0, r3
   e1074:	d10d      	bne.n	e1092 <mktime+0x192>
   e1076:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   e107a:	f8d9 3020 	ldr.w	r3, [r9, #32]
   e107e:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e1082:	f8d9 101c 	ldr.w	r1, [r9, #28]
   e1086:	1ad6      	subs	r6, r2, r3
   e1088:	45b0      	cmp	r8, r6
   e108a:	eba1 0100 	sub.w	r1, r1, r0
   e108e:	da05      	bge.n	e109c <mktime+0x19c>
   e1090:	e007      	b.n	e10a2 <mktime+0x1a2>
   e1092:	f001 fdb5 	bl	e2c00 <__tzcalc_limits>
   e1096:	2800      	cmp	r0, #0
   e1098:	d1ed      	bne.n	e1076 <mktime+0x176>
   e109a:	e076      	b.n	e118a <mktime+0x28a>
   e109c:	1a12      	subs	r2, r2, r0
   e109e:	4590      	cmp	r8, r2
   e10a0:	db73      	blt.n	e118a <mktime+0x28a>
   e10a2:	f8d9 2000 	ldr.w	r2, [r9]
   e10a6:	b112      	cbz	r2, e10ae <mktime+0x1ae>
   e10a8:	4588      	cmp	r8, r1
   e10aa:	db77      	blt.n	e119c <mktime+0x29c>
   e10ac:	e001      	b.n	e10b2 <mktime+0x1b2>
   e10ae:	4588      	cmp	r8, r1
   e10b0:	da07      	bge.n	e10c2 <mktime+0x1c2>
   e10b2:	45b0      	cmp	r8, r6
   e10b4:	bfac      	ite	ge
   e10b6:	2600      	movge	r6, #0
   e10b8:	2601      	movlt	r6, #1
   e10ba:	f1ba 0f00 	cmp.w	sl, #0
   e10be:	da04      	bge.n	e10ca <mktime+0x1ca>
   e10c0:	e064      	b.n	e118c <mktime+0x28c>
   e10c2:	f1ba 0f00 	cmp.w	sl, #0
   e10c6:	db63      	blt.n	e1190 <mktime+0x290>
   e10c8:	2601      	movs	r6, #1
   e10ca:	ea8a 0a06 	eor.w	sl, sl, r6
   e10ce:	f1ba 0f01 	cmp.w	sl, #1
   e10d2:	d15b      	bne.n	e118c <mktime+0x28c>
   e10d4:	1a1b      	subs	r3, r3, r0
   e10d6:	b906      	cbnz	r6, e10da <mktime+0x1da>
   e10d8:	425b      	negs	r3, r3
   e10da:	682a      	ldr	r2, [r5, #0]
   e10dc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   e10e0:	441a      	add	r2, r3
   e10e2:	602a      	str	r2, [r5, #0]
   e10e4:	4628      	mov	r0, r5
   e10e6:	4498      	add	r8, r3
   e10e8:	f7ff fe2e 	bl	e0d48 <validate_structure>
   e10ec:	68eb      	ldr	r3, [r5, #12]
   e10ee:	ebb3 030a 	subs.w	r3, r3, sl
   e10f2:	d04b      	beq.n	e118c <mktime+0x28c>
   e10f4:	2b01      	cmp	r3, #1
   e10f6:	dc03      	bgt.n	e1100 <mktime+0x200>
   e10f8:	1c98      	adds	r0, r3, #2
   e10fa:	bfd8      	it	le
   e10fc:	2301      	movle	r3, #1
   e10fe:	e001      	b.n	e1104 <mktime+0x204>
   e1100:	f04f 33ff 	mov.w	r3, #4294967295
   e1104:	69ea      	ldr	r2, [r5, #28]
   e1106:	441c      	add	r4, r3
   e1108:	189b      	adds	r3, r3, r2
   e110a:	d51d      	bpl.n	e1148 <mktime+0x248>
   e110c:	1e7b      	subs	r3, r7, #1
   e110e:	0799      	lsls	r1, r3, #30
   e1110:	d114      	bne.n	e113c <mktime+0x23c>
   e1112:	2164      	movs	r1, #100	; 0x64
   e1114:	fb93 f2f1 	sdiv	r2, r3, r1
   e1118:	fb01 3312 	mls	r3, r1, r2, r3
   e111c:	b98b      	cbnz	r3, e1142 <mktime+0x242>
   e111e:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   e1122:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e1126:	fb97 f3f2 	sdiv	r3, r7, r2
   e112a:	fb02 7713 	mls	r7, r2, r3, r7
   e112e:	2f00      	cmp	r7, #0
   e1130:	f240 136d 	movw	r3, #365	; 0x16d
   e1134:	bf18      	it	ne
   e1136:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   e113a:	e024      	b.n	e1186 <mktime+0x286>
   e113c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   e1140:	e021      	b.n	e1186 <mktime+0x286>
   e1142:	f240 136d 	movw	r3, #365	; 0x16d
   e1146:	e01e      	b.n	e1186 <mktime+0x286>
   e1148:	07ba      	lsls	r2, r7, #30
   e114a:	d114      	bne.n	e1176 <mktime+0x276>
   e114c:	2164      	movs	r1, #100	; 0x64
   e114e:	fb97 f2f1 	sdiv	r2, r7, r1
   e1152:	fb01 7212 	mls	r2, r1, r2, r7
   e1156:	b98a      	cbnz	r2, e117c <mktime+0x27c>
   e1158:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   e115c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e1160:	fb97 f2f1 	sdiv	r2, r7, r1
   e1164:	fb01 7712 	mls	r7, r1, r2, r7
   e1168:	2f00      	cmp	r7, #0
   e116a:	f240 126d 	movw	r2, #365	; 0x16d
   e116e:	bf08      	it	eq
   e1170:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   e1174:	e004      	b.n	e1180 <mktime+0x280>
   e1176:	f240 126d 	movw	r2, #365	; 0x16d
   e117a:	e001      	b.n	e1180 <mktime+0x280>
   e117c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   e1180:	429a      	cmp	r2, r3
   e1182:	bfd8      	it	le
   e1184:	1a9b      	suble	r3, r3, r2
   e1186:	61eb      	str	r3, [r5, #28]
   e1188:	e000      	b.n	e118c <mktime+0x28c>
   e118a:	4656      	mov	r6, sl
   e118c:	2e01      	cmp	r6, #1
   e118e:	d10a      	bne.n	e11a6 <mktime+0x2a6>
   e1190:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e1194:	2601      	movs	r6, #1
   e1196:	eb08 0700 	add.w	r7, r8, r0
   e119a:	e008      	b.n	e11ae <mktime+0x2ae>
   e119c:	f1ba 0f00 	cmp.w	sl, #0
   e11a0:	f04f 0600 	mov.w	r6, #0
   e11a4:	da91      	bge.n	e10ca <mktime+0x1ca>
   e11a6:	f8d9 0020 	ldr.w	r0, [r9, #32]
   e11aa:	eb08 0700 	add.w	r7, r8, r0
   e11ae:	f001 fdd0 	bl	e2d52 <__tz_unlock>
   e11b2:	3404      	adds	r4, #4
   e11b4:	2307      	movs	r3, #7
   e11b6:	fb94 f3f3 	sdiv	r3, r4, r3
   e11ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e11be:	1ae4      	subs	r4, r4, r3
   e11c0:	bf48      	it	mi
   e11c2:	3407      	addmi	r4, #7
   e11c4:	622e      	str	r6, [r5, #32]
   e11c6:	61ac      	str	r4, [r5, #24]
   e11c8:	4638      	mov	r0, r7
   e11ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e11ce:	f04f 30ff 	mov.w	r0, #4294967295
   e11d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e11d6:	bf00      	nop
   e11d8:	000e553c 	.word	0x000e553c
   e11dc:	00015180 	.word	0x00015180
   e11e0:	2003e7e4 	.word	0x2003e7e4

000e11e4 <srand>:
   e11e4:	b538      	push	{r3, r4, r5, lr}
   e11e6:	4b12      	ldr	r3, [pc, #72]	; (e1230 <srand+0x4c>)
   e11e8:	681c      	ldr	r4, [r3, #0]
   e11ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e11ec:	4605      	mov	r5, r0
   e11ee:	b9d3      	cbnz	r3, e1226 <srand+0x42>
   e11f0:	2018      	movs	r0, #24
   e11f2:	f7fa f88b 	bl	db30c <malloc>
   e11f6:	f243 330e 	movw	r3, #13070	; 0x330e
   e11fa:	63a0      	str	r0, [r4, #56]	; 0x38
   e11fc:	8003      	strh	r3, [r0, #0]
   e11fe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e1202:	8043      	strh	r3, [r0, #2]
   e1204:	f241 2334 	movw	r3, #4660	; 0x1234
   e1208:	8083      	strh	r3, [r0, #4]
   e120a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e120e:	80c3      	strh	r3, [r0, #6]
   e1210:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e1214:	8103      	strh	r3, [r0, #8]
   e1216:	2305      	movs	r3, #5
   e1218:	8143      	strh	r3, [r0, #10]
   e121a:	230b      	movs	r3, #11
   e121c:	8183      	strh	r3, [r0, #12]
   e121e:	2201      	movs	r2, #1
   e1220:	2300      	movs	r3, #0
   e1222:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e1226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e1228:	2200      	movs	r2, #0
   e122a:	611d      	str	r5, [r3, #16]
   e122c:	615a      	str	r2, [r3, #20]
   e122e:	bd38      	pop	{r3, r4, r5, pc}
   e1230:	2003bc60 	.word	0x2003bc60

000e1234 <strchr>:
   e1234:	b2c9      	uxtb	r1, r1
   e1236:	4603      	mov	r3, r0
   e1238:	f810 2b01 	ldrb.w	r2, [r0], #1
   e123c:	b11a      	cbz	r2, e1246 <strchr+0x12>
   e123e:	4291      	cmp	r1, r2
   e1240:	d1f9      	bne.n	e1236 <strchr+0x2>
   e1242:	4618      	mov	r0, r3
   e1244:	4770      	bx	lr
   e1246:	2900      	cmp	r1, #0
   e1248:	bf0c      	ite	eq
   e124a:	4618      	moveq	r0, r3
   e124c:	2000      	movne	r0, #0
   e124e:	4770      	bx	lr

000e1250 <strcmp>:
   e1250:	f810 2b01 	ldrb.w	r2, [r0], #1
   e1254:	f811 3b01 	ldrb.w	r3, [r1], #1
   e1258:	2a01      	cmp	r2, #1
   e125a:	bf28      	it	cs
   e125c:	429a      	cmpcs	r2, r3
   e125e:	d0f7      	beq.n	e1250 <strcmp>
   e1260:	1ad0      	subs	r0, r2, r3
   e1262:	4770      	bx	lr

000e1264 <strcpy>:
   e1264:	4603      	mov	r3, r0
   e1266:	f811 2b01 	ldrb.w	r2, [r1], #1
   e126a:	f803 2b01 	strb.w	r2, [r3], #1
   e126e:	2a00      	cmp	r2, #0
   e1270:	d1f9      	bne.n	e1266 <strcpy+0x2>
   e1272:	4770      	bx	lr

000e1274 <strdup>:
   e1274:	4b02      	ldr	r3, [pc, #8]	; (e1280 <strdup+0xc>)
   e1276:	4601      	mov	r1, r0
   e1278:	6818      	ldr	r0, [r3, #0]
   e127a:	f000 b803 	b.w	e1284 <_strdup_r>
   e127e:	bf00      	nop
   e1280:	2003bc60 	.word	0x2003bc60

000e1284 <_strdup_r>:
   e1284:	b570      	push	{r4, r5, r6, lr}
   e1286:	4606      	mov	r6, r0
   e1288:	4608      	mov	r0, r1
   e128a:	460c      	mov	r4, r1
   e128c:	f000 fd22 	bl	e1cd4 <strlen>
   e1290:	1c45      	adds	r5, r0, #1
   e1292:	4629      	mov	r1, r5
   e1294:	4630      	mov	r0, r6
   e1296:	f7fa f889 	bl	db3ac <_malloc_r>
   e129a:	4606      	mov	r6, r0
   e129c:	b118      	cbz	r0, e12a6 <_strdup_r+0x22>
   e129e:	462a      	mov	r2, r5
   e12a0:	4621      	mov	r1, r4
   e12a2:	f7ff fd3e 	bl	e0d22 <memcpy>
   e12a6:	4630      	mov	r0, r6
   e12a8:	bd70      	pop	{r4, r5, r6, pc}

000e12aa <iso_year_adjust>:
   e12aa:	6941      	ldr	r1, [r0, #20]
   e12ac:	078b      	lsls	r3, r1, #30
   e12ae:	b510      	push	{r4, lr}
   e12b0:	d10c      	bne.n	e12cc <iso_year_adjust+0x22>
   e12b2:	2900      	cmp	r1, #0
   e12b4:	f240 736c 	movw	r3, #1900	; 0x76c
   e12b8:	bfa8      	it	ge
   e12ba:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e12be:	440b      	add	r3, r1
   e12c0:	2464      	movs	r4, #100	; 0x64
   e12c2:	fb93 f2f4 	sdiv	r2, r3, r4
   e12c6:	fb04 3312 	mls	r3, r4, r2, r3
   e12ca:	b983      	cbnz	r3, e12ee <iso_year_adjust+0x44>
   e12cc:	2900      	cmp	r1, #0
   e12ce:	f240 736c 	movw	r3, #1900	; 0x76c
   e12d2:	bfa8      	it	ge
   e12d4:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e12d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e12dc:	440b      	add	r3, r1
   e12de:	fb93 f1f2 	sdiv	r1, r3, r2
   e12e2:	fb02 3311 	mls	r3, r2, r1, r3
   e12e6:	fab3 f283 	clz	r2, r3
   e12ea:	0952      	lsrs	r2, r2, #5
   e12ec:	e000      	b.n	e12f0 <iso_year_adjust+0x46>
   e12ee:	2201      	movs	r2, #1
   e12f0:	6983      	ldr	r3, [r0, #24]
   e12f2:	69c1      	ldr	r1, [r0, #28]
   e12f4:	005b      	lsls	r3, r3, #1
   e12f6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   e12fa:	4413      	add	r3, r2
   e12fc:	2b21      	cmp	r3, #33	; 0x21
   e12fe:	dc0e      	bgt.n	e131e <iso_year_adjust+0x74>
   e1300:	2b20      	cmp	r3, #32
   e1302:	da2f      	bge.n	e1364 <iso_year_adjust+0xba>
   e1304:	2b0d      	cmp	r3, #13
   e1306:	dc02      	bgt.n	e130e <iso_year_adjust+0x64>
   e1308:	2b0a      	cmp	r3, #10
   e130a:	db05      	blt.n	e1318 <iso_year_adjust+0x6e>
   e130c:	e02a      	b.n	e1364 <iso_year_adjust+0xba>
   e130e:	2b10      	cmp	r3, #16
   e1310:	db26      	blt.n	e1360 <iso_year_adjust+0xb6>
   e1312:	2b11      	cmp	r3, #17
   e1314:	dd26      	ble.n	e1364 <iso_year_adjust+0xba>
   e1316:	3b1c      	subs	r3, #28
   e1318:	2b01      	cmp	r3, #1
   e131a:	d923      	bls.n	e1364 <iso_year_adjust+0xba>
   e131c:	e020      	b.n	e1360 <iso_year_adjust+0xb6>
   e131e:	f241 62c6 	movw	r2, #5830	; 0x16c6
   e1322:	4293      	cmp	r3, r2
   e1324:	dc0e      	bgt.n	e1344 <iso_year_adjust+0x9a>
   e1326:	f241 62c2 	movw	r2, #5826	; 0x16c2
   e132a:	4293      	cmp	r3, r2
   e132c:	da16      	bge.n	e135c <iso_year_adjust+0xb2>
   e132e:	f241 62a2 	movw	r2, #5794	; 0x16a2
   e1332:	4293      	cmp	r3, r2
   e1334:	d012      	beq.n	e135c <iso_year_adjust+0xb2>
   e1336:	db13      	blt.n	e1360 <iso_year_adjust+0xb6>
   e1338:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   e133c:	3b12      	subs	r3, #18
   e133e:	2b02      	cmp	r3, #2
   e1340:	d90c      	bls.n	e135c <iso_year_adjust+0xb2>
   e1342:	e00d      	b.n	e1360 <iso_year_adjust+0xb6>
   e1344:	f241 62d5 	movw	r2, #5845	; 0x16d5
   e1348:	4293      	cmp	r3, r2
   e134a:	d007      	beq.n	e135c <iso_year_adjust+0xb2>
   e134c:	f241 62d7 	movw	r2, #5847	; 0x16d7
   e1350:	4293      	cmp	r3, r2
   e1352:	d003      	beq.n	e135c <iso_year_adjust+0xb2>
   e1354:	f241 62d3 	movw	r2, #5843	; 0x16d3
   e1358:	4293      	cmp	r3, r2
   e135a:	d101      	bne.n	e1360 <iso_year_adjust+0xb6>
   e135c:	2001      	movs	r0, #1
   e135e:	bd10      	pop	{r4, pc}
   e1360:	2000      	movs	r0, #0
   e1362:	bd10      	pop	{r4, pc}
   e1364:	f04f 30ff 	mov.w	r0, #4294967295
   e1368:	bd10      	pop	{r4, pc}
	...

000e136c <strftime>:
   e136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1370:	b093      	sub	sp, #76	; 0x4c
   e1372:	460e      	mov	r6, r1
   e1374:	461d      	mov	r5, r3
   e1376:	4607      	mov	r7, r0
   e1378:	4691      	mov	r9, r2
   e137a:	f001 fc31 	bl	e2be0 <__get_current_time_locale>
   e137e:	2300      	movs	r3, #0
   e1380:	9306      	str	r3, [sp, #24]
   e1382:	461c      	mov	r4, r3
   e1384:	1e73      	subs	r3, r6, #1
   e1386:	9003      	str	r0, [sp, #12]
   e1388:	9302      	str	r3, [sp, #8]
   e138a:	f899 3000 	ldrb.w	r3, [r9]
   e138e:	2b00      	cmp	r3, #0
   e1390:	f000 8492 	beq.w	e1cb8 <strftime+0x94c>
   e1394:	2b25      	cmp	r3, #37	; 0x25
   e1396:	d008      	beq.n	e13aa <strftime+0x3e>
   e1398:	9a02      	ldr	r2, [sp, #8]
   e139a:	4294      	cmp	r4, r2
   e139c:	f080 8490 	bcs.w	e1cc0 <strftime+0x954>
   e13a0:	553b      	strb	r3, [r7, r4]
   e13a2:	f109 0901 	add.w	r9, r9, #1
   e13a6:	3401      	adds	r4, #1
   e13a8:	e7ef      	b.n	e138a <strftime+0x1e>
   e13aa:	f899 a001 	ldrb.w	sl, [r9, #1]
   e13ae:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   e13b2:	d007      	beq.n	e13c4 <strftime+0x58>
   e13b4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e13b8:	d004      	beq.n	e13c4 <strftime+0x58>
   e13ba:	f109 0901 	add.w	r9, r9, #1
   e13be:	f04f 0a00 	mov.w	sl, #0
   e13c2:	e001      	b.n	e13c8 <strftime+0x5c>
   e13c4:	f109 0902 	add.w	r9, r9, #2
   e13c8:	f899 3000 	ldrb.w	r3, [r9]
   e13cc:	3b31      	subs	r3, #49	; 0x31
   e13ce:	2b08      	cmp	r3, #8
   e13d0:	d808      	bhi.n	e13e4 <strftime+0x78>
   e13d2:	4648      	mov	r0, r9
   e13d4:	220a      	movs	r2, #10
   e13d6:	a90a      	add	r1, sp, #40	; 0x28
   e13d8:	f001 fbf8 	bl	e2bcc <strtoul>
   e13dc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   e13e0:	4680      	mov	r8, r0
   e13e2:	e001      	b.n	e13e8 <strftime+0x7c>
   e13e4:	f04f 0800 	mov.w	r8, #0
   e13e8:	f899 3000 	ldrb.w	r3, [r9]
   e13ec:	2b45      	cmp	r3, #69	; 0x45
   e13ee:	d001      	beq.n	e13f4 <strftime+0x88>
   e13f0:	2b4f      	cmp	r3, #79	; 0x4f
   e13f2:	d101      	bne.n	e13f8 <strftime+0x8c>
   e13f4:	f109 0901 	add.w	r9, r9, #1
   e13f8:	f899 0000 	ldrb.w	r0, [r9]
   e13fc:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   e1400:	2b55      	cmp	r3, #85	; 0x55
   e1402:	f200 845d 	bhi.w	e1cc0 <strftime+0x954>
   e1406:	e8df f013 	tbh	[pc, r3, lsl #1]
   e140a:	044a      	.short	0x044a
   e140c:	045b045b 	.word	0x045b045b
   e1410:	045b045b 	.word	0x045b045b
   e1414:	045b045b 	.word	0x045b045b
   e1418:	045b045b 	.word	0x045b045b
   e141c:	045b045b 	.word	0x045b045b
   e1420:	045b045b 	.word	0x045b045b
   e1424:	045b045b 	.word	0x045b045b
   e1428:	045b045b 	.word	0x045b045b
   e142c:	045b045b 	.word	0x045b045b
   e1430:	045b045b 	.word	0x045b045b
   e1434:	045b045b 	.word	0x045b045b
   e1438:	045b045b 	.word	0x045b045b
   e143c:	045b045b 	.word	0x045b045b
   e1440:	006f045b 	.word	0x006f045b
   e1444:	00d400a1 	.word	0x00d400a1
   e1448:	045b011a 	.word	0x045b011a
   e144c:	01a0013f 	.word	0x01a0013f
   e1450:	022d0226 	.word	0x022d0226
   e1454:	045b045b 	.word	0x045b045b
   e1458:	0260045b 	.word	0x0260045b
   e145c:	045b045b 	.word	0x045b045b
   e1460:	045b0268 	.word	0x045b0268
   e1464:	031d0297 	.word	0x031d0297
   e1468:	033b0325 	.word	0x033b0325
   e146c:	03860343 	.word	0x03860343
   e1470:	03a000c6 	.word	0x03a000c6
   e1474:	045b041f 	.word	0x045b041f
   e1478:	045b045b 	.word	0x045b045b
   e147c:	045b045b 	.word	0x045b045b
   e1480:	0056045b 	.word	0x0056045b
   e1484:	00ba0089 	.word	0x00ba0089
   e1488:	010c010c 	.word	0x010c010c
   e148c:	0171045b 	.word	0x0171045b
   e1490:	045b0089 	.word	0x045b0089
   e1494:	0226023d 	.word	0x0226023d
   e1498:	025d022d 	.word	0x025d022d
   e149c:	045b0262 	.word	0x045b0262
   e14a0:	045b0268 	.word	0x045b0268
   e14a4:	029c00be 	.word	0x029c00be
   e14a8:	032e031f 	.word	0x032e031f
   e14ac:	037f045b 	.word	0x037f045b
   e14b0:	039200c2 	.word	0x039200c2
   e14b4:	03e7      	.short	0x03e7
   e14b6:	69ab      	ldr	r3, [r5, #24]
   e14b8:	9a03      	ldr	r2, [sp, #12]
   e14ba:	3318      	adds	r3, #24
   e14bc:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e14c0:	4640      	mov	r0, r8
   e14c2:	f000 fc07 	bl	e1cd4 <strlen>
   e14c6:	f108 38ff 	add.w	r8, r8, #4294967295
   e14ca:	193b      	adds	r3, r7, r4
   e14cc:	4420      	add	r0, r4
   e14ce:	4284      	cmp	r4, r0
   e14d0:	f000 83eb 	beq.w	e1caa <strftime+0x93e>
   e14d4:	9a02      	ldr	r2, [sp, #8]
   e14d6:	4294      	cmp	r4, r2
   e14d8:	f080 83f2 	bcs.w	e1cc0 <strftime+0x954>
   e14dc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e14e0:	f803 2b01 	strb.w	r2, [r3], #1
   e14e4:	3401      	adds	r4, #1
   e14e6:	e7f2      	b.n	e14ce <strftime+0x162>
   e14e8:	69ab      	ldr	r3, [r5, #24]
   e14ea:	9a03      	ldr	r2, [sp, #12]
   e14ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e14f0:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   e14f4:	4640      	mov	r0, r8
   e14f6:	f000 fbed 	bl	e1cd4 <strlen>
   e14fa:	f108 38ff 	add.w	r8, r8, #4294967295
   e14fe:	193b      	adds	r3, r7, r4
   e1500:	4420      	add	r0, r4
   e1502:	4284      	cmp	r4, r0
   e1504:	f000 83d1 	beq.w	e1caa <strftime+0x93e>
   e1508:	9a02      	ldr	r2, [sp, #8]
   e150a:	4294      	cmp	r4, r2
   e150c:	f080 83d8 	bcs.w	e1cc0 <strftime+0x954>
   e1510:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e1514:	f803 2b01 	strb.w	r2, [r3], #1
   e1518:	3401      	adds	r4, #1
   e151a:	e7f2      	b.n	e1502 <strftime+0x196>
   e151c:	692b      	ldr	r3, [r5, #16]
   e151e:	9a03      	ldr	r2, [sp, #12]
   e1520:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e1524:	4640      	mov	r0, r8
   e1526:	f000 fbd5 	bl	e1cd4 <strlen>
   e152a:	f108 38ff 	add.w	r8, r8, #4294967295
   e152e:	193b      	adds	r3, r7, r4
   e1530:	4420      	add	r0, r4
   e1532:	4284      	cmp	r4, r0
   e1534:	f000 83b9 	beq.w	e1caa <strftime+0x93e>
   e1538:	9a02      	ldr	r2, [sp, #8]
   e153a:	4294      	cmp	r4, r2
   e153c:	f080 83c0 	bcs.w	e1cc0 <strftime+0x954>
   e1540:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e1544:	f803 2b01 	strb.w	r2, [r3], #1
   e1548:	3401      	adds	r4, #1
   e154a:	e7f2      	b.n	e1532 <strftime+0x1c6>
   e154c:	692b      	ldr	r3, [r5, #16]
   e154e:	9a03      	ldr	r2, [sp, #12]
   e1550:	330c      	adds	r3, #12
   e1552:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e1556:	4640      	mov	r0, r8
   e1558:	f000 fbbc 	bl	e1cd4 <strlen>
   e155c:	f108 38ff 	add.w	r8, r8, #4294967295
   e1560:	193b      	adds	r3, r7, r4
   e1562:	4420      	add	r0, r4
   e1564:	4284      	cmp	r4, r0
   e1566:	f000 83a0 	beq.w	e1caa <strftime+0x93e>
   e156a:	9a02      	ldr	r2, [sp, #8]
   e156c:	4294      	cmp	r4, r2
   e156e:	f080 83a7 	bcs.w	e1cc0 <strftime+0x954>
   e1572:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e1576:	f803 2b01 	strb.w	r2, [r3], #1
   e157a:	3401      	adds	r4, #1
   e157c:	e7f2      	b.n	e1564 <strftime+0x1f8>
   e157e:	9b03      	ldr	r3, [sp, #12]
   e1580:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   e1584:	e00a      	b.n	e159c <strftime+0x230>
   e1586:	9b03      	ldr	r3, [sp, #12]
   e1588:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   e158c:	e006      	b.n	e159c <strftime+0x230>
   e158e:	9b03      	ldr	r3, [sp, #12]
   e1590:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   e1594:	e002      	b.n	e159c <strftime+0x230>
   e1596:	9b03      	ldr	r3, [sp, #12]
   e1598:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   e159c:	4640      	mov	r0, r8
   e159e:	f000 fb99 	bl	e1cd4 <strlen>
   e15a2:	f898 3000 	ldrb.w	r3, [r8]
   e15a6:	2b00      	cmp	r3, #0
   e15a8:	f000 837f 	beq.w	e1caa <strftime+0x93e>
   e15ac:	462b      	mov	r3, r5
   e15ae:	4642      	mov	r2, r8
   e15b0:	e093      	b.n	e16da <strftime+0x36e>
   e15b2:	49b6      	ldr	r1, [pc, #728]	; (e188c <strftime+0x520>)
   e15b4:	f8d5 b014 	ldr.w	fp, [r5, #20]
   e15b8:	458b      	cmp	fp, r1
   e15ba:	bfac      	ite	ge
   e15bc:	2100      	movge	r1, #0
   e15be:	2101      	movlt	r1, #1
   e15c0:	f1bb 0f00 	cmp.w	fp, #0
   e15c4:	db04      	blt.n	e15d0 <strftime+0x264>
   e15c6:	2064      	movs	r0, #100	; 0x64
   e15c8:	fb9b f0f0 	sdiv	r0, fp, r0
   e15cc:	3013      	adds	r0, #19
   e15ce:	e008      	b.n	e15e2 <strftime+0x276>
   e15d0:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   e15d4:	9107      	str	r1, [sp, #28]
   e15d6:	f001 fd43 	bl	e3060 <abs>
   e15da:	9907      	ldr	r1, [sp, #28]
   e15dc:	2364      	movs	r3, #100	; 0x64
   e15de:	fb90 f0f3 	sdiv	r0, r0, r3
   e15e2:	f1ba 0f00 	cmp.w	sl, #0
   e15e6:	d008      	beq.n	e15fa <strftime+0x28e>
   e15e8:	2863      	cmp	r0, #99	; 0x63
   e15ea:	dd09      	ble.n	e1600 <strftime+0x294>
   e15ec:	4ba8      	ldr	r3, [pc, #672]	; (e1890 <strftime+0x524>)
   e15ee:	4aa9      	ldr	r2, [pc, #676]	; (e1894 <strftime+0x528>)
   e15f0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e15f4:	bf18      	it	ne
   e15f6:	4613      	movne	r3, r2
   e15f8:	e003      	b.n	e1602 <strftime+0x296>
   e15fa:	4ba6      	ldr	r3, [pc, #664]	; (e1894 <strftime+0x528>)
   e15fc:	4aa6      	ldr	r2, [pc, #664]	; (e1898 <strftime+0x52c>)
   e15fe:	e001      	b.n	e1604 <strftime+0x298>
   e1600:	4ba4      	ldr	r3, [pc, #656]	; (e1894 <strftime+0x528>)
   e1602:	4aa6      	ldr	r2, [pc, #664]	; (e189c <strftime+0x530>)
   e1604:	9001      	str	r0, [sp, #4]
   e1606:	f1b8 0f01 	cmp.w	r8, #1
   e160a:	bf98      	it	ls
   e160c:	f04f 0802 	movls.w	r8, #2
   e1610:	ebc1 0108 	rsb	r1, r1, r8
   e1614:	9100      	str	r1, [sp, #0]
   e1616:	489d      	ldr	r0, [pc, #628]	; (e188c <strftime+0x520>)
   e1618:	49a1      	ldr	r1, [pc, #644]	; (e18a0 <strftime+0x534>)
   e161a:	4583      	cmp	fp, r0
   e161c:	bfb8      	it	lt
   e161e:	460b      	movlt	r3, r1
   e1620:	e21e      	b.n	e1a60 <strftime+0x6f4>
   e1622:	4aa0      	ldr	r2, [pc, #640]	; (e18a4 <strftime+0x538>)
   e1624:	49a0      	ldr	r1, [pc, #640]	; (e18a8 <strftime+0x53c>)
   e1626:	68eb      	ldr	r3, [r5, #12]
   e1628:	2864      	cmp	r0, #100	; 0x64
   e162a:	bf08      	it	eq
   e162c:	460a      	moveq	r2, r1
   e162e:	1b31      	subs	r1, r6, r4
   e1630:	1938      	adds	r0, r7, r4
   e1632:	f7f9 fea3 	bl	db37c <sniprintf>
   e1636:	2800      	cmp	r0, #0
   e1638:	f280 8302 	bge.w	e1c40 <strftime+0x8d4>
   e163c:	e340      	b.n	e1cc0 <strftime+0x954>
   e163e:	6968      	ldr	r0, [r5, #20]
   e1640:	692b      	ldr	r3, [r5, #16]
   e1642:	2800      	cmp	r0, #0
   e1644:	f103 0b01 	add.w	fp, r3, #1
   e1648:	eb07 0804 	add.w	r8, r7, r4
   e164c:	ebc4 0a06 	rsb	sl, r4, r6
   e1650:	68eb      	ldr	r3, [r5, #12]
   e1652:	db05      	blt.n	e1660 <strftime+0x2f4>
   e1654:	2264      	movs	r2, #100	; 0x64
   e1656:	fb90 f1f2 	sdiv	r1, r0, r2
   e165a:	fb02 0011 	mls	r0, r2, r1, r0
   e165e:	e00a      	b.n	e1676 <strftime+0x30a>
   e1660:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e1664:	9307      	str	r3, [sp, #28]
   e1666:	f001 fcfb 	bl	e3060 <abs>
   e166a:	2264      	movs	r2, #100	; 0x64
   e166c:	9b07      	ldr	r3, [sp, #28]
   e166e:	fb90 f1f2 	sdiv	r1, r0, r2
   e1672:	fb01 0012 	mls	r0, r1, r2, r0
   e1676:	4a8d      	ldr	r2, [pc, #564]	; (e18ac <strftime+0x540>)
   e1678:	9001      	str	r0, [sp, #4]
   e167a:	9300      	str	r3, [sp, #0]
   e167c:	4651      	mov	r1, sl
   e167e:	465b      	mov	r3, fp
   e1680:	4640      	mov	r0, r8
   e1682:	f7f9 fe7b 	bl	db37c <sniprintf>
   e1686:	e7d6      	b.n	e1636 <strftime+0x2ca>
   e1688:	2325      	movs	r3, #37	; 0x25
   e168a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e168e:	f1ba 0f00 	cmp.w	sl, #0
   e1692:	d007      	beq.n	e16a4 <strftime+0x338>
   e1694:	f1b8 0f05 	cmp.w	r8, #5
   e1698:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   e169c:	bf98      	it	ls
   e169e:	f04f 0806 	movls.w	r8, #6
   e16a2:	e004      	b.n	e16ae <strftime+0x342>
   e16a4:	232b      	movs	r3, #43	; 0x2b
   e16a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   e16aa:	f04f 080a 	mov.w	r8, #10
   e16ae:	f1b8 0306 	subs.w	r3, r8, #6
   e16b2:	d102      	bne.n	e16ba <strftime+0x34e>
   e16b4:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e16b8:	e00a      	b.n	e16d0 <strftime+0x364>
   e16ba:	4a7d      	ldr	r2, [pc, #500]	; (e18b0 <strftime+0x544>)
   e16bc:	211e      	movs	r1, #30
   e16be:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e16c2:	f7f9 fe5b 	bl	db37c <sniprintf>
   e16c6:	2800      	cmp	r0, #0
   e16c8:	ddf4      	ble.n	e16b4 <strftime+0x348>
   e16ca:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   e16ce:	4418      	add	r0, r3
   e16d0:	4978      	ldr	r1, [pc, #480]	; (e18b4 <strftime+0x548>)
   e16d2:	f7ff fdc7 	bl	e1264 <strcpy>
   e16d6:	462b      	mov	r3, r5
   e16d8:	aa0a      	add	r2, sp, #40	; 0x28
   e16da:	1b31      	subs	r1, r6, r4
   e16dc:	1938      	adds	r0, r7, r4
   e16de:	f7ff fe45 	bl	e136c <strftime>
   e16e2:	2800      	cmp	r0, #0
   e16e4:	f340 82ec 	ble.w	e1cc0 <strftime+0x954>
   e16e8:	4404      	add	r4, r0
   e16ea:	e2de      	b.n	e1caa <strftime+0x93e>
   e16ec:	4628      	mov	r0, r5
   e16ee:	f7ff fddc 	bl	e12aa <iso_year_adjust>
   e16f2:	4680      	mov	r8, r0
   e16f4:	6968      	ldr	r0, [r5, #20]
   e16f6:	2800      	cmp	r0, #0
   e16f8:	db05      	blt.n	e1706 <strftime+0x39a>
   e16fa:	2264      	movs	r2, #100	; 0x64
   e16fc:	fb90 f1f2 	sdiv	r1, r0, r2
   e1700:	fb02 0011 	mls	r0, r2, r1, r0
   e1704:	e008      	b.n	e1718 <strftime+0x3ac>
   e1706:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e170a:	f001 fca9 	bl	e3060 <abs>
   e170e:	2264      	movs	r2, #100	; 0x64
   e1710:	fb90 f3f2 	sdiv	r3, r0, r2
   e1714:	fb03 0012 	mls	r0, r3, r2, r0
   e1718:	f1b8 0f00 	cmp.w	r8, #0
   e171c:	da06      	bge.n	e172c <strftime+0x3c0>
   e171e:	696a      	ldr	r2, [r5, #20]
   e1720:	4b65      	ldr	r3, [pc, #404]	; (e18b8 <strftime+0x54c>)
   e1722:	429a      	cmp	r2, r3
   e1724:	bfb8      	it	lt
   e1726:	f04f 0801 	movlt.w	r8, #1
   e172a:	e006      	b.n	e173a <strftime+0x3ce>
   e172c:	d005      	beq.n	e173a <strftime+0x3ce>
   e172e:	696a      	ldr	r2, [r5, #20]
   e1730:	4b56      	ldr	r3, [pc, #344]	; (e188c <strftime+0x520>)
   e1732:	429a      	cmp	r2, r3
   e1734:	bfb8      	it	lt
   e1736:	f04f 38ff 	movlt.w	r8, #4294967295
   e173a:	2364      	movs	r3, #100	; 0x64
   e173c:	4440      	add	r0, r8
   e173e:	fb90 f2f3 	sdiv	r2, r0, r3
   e1742:	fb03 0012 	mls	r0, r3, r2, r0
   e1746:	4418      	add	r0, r3
   e1748:	e1f9      	b.n	e1b3e <strftime+0x7d2>
   e174a:	4b50      	ldr	r3, [pc, #320]	; (e188c <strftime+0x520>)
   e174c:	6969      	ldr	r1, [r5, #20]
   e174e:	9108      	str	r1, [sp, #32]
   e1750:	4299      	cmp	r1, r3
   e1752:	bfac      	ite	ge
   e1754:	2300      	movge	r3, #0
   e1756:	2301      	movlt	r3, #1
   e1758:	4628      	mov	r0, r5
   e175a:	9307      	str	r3, [sp, #28]
   e175c:	f7ff fda5 	bl	e12aa <iso_year_adjust>
   e1760:	9908      	ldr	r1, [sp, #32]
   e1762:	2900      	cmp	r1, #0
   e1764:	4683      	mov	fp, r0
   e1766:	db04      	blt.n	e1772 <strftime+0x406>
   e1768:	2364      	movs	r3, #100	; 0x64
   e176a:	fb91 f3f3 	sdiv	r3, r1, r3
   e176e:	3313      	adds	r3, #19
   e1770:	e008      	b.n	e1784 <strftime+0x418>
   e1772:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   e1776:	9108      	str	r1, [sp, #32]
   e1778:	f001 fc72 	bl	e3060 <abs>
   e177c:	9908      	ldr	r1, [sp, #32]
   e177e:	2364      	movs	r3, #100	; 0x64
   e1780:	fb90 f3f3 	sdiv	r3, r0, r3
   e1784:	6968      	ldr	r0, [r5, #20]
   e1786:	2800      	cmp	r0, #0
   e1788:	db06      	blt.n	e1798 <strftime+0x42c>
   e178a:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e178e:	fb90 fcfe 	sdiv	ip, r0, lr
   e1792:	fb0e 001c 	mls	r0, lr, ip, r0
   e1796:	e00d      	b.n	e17b4 <strftime+0x448>
   e1798:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e179c:	9109      	str	r1, [sp, #36]	; 0x24
   e179e:	9308      	str	r3, [sp, #32]
   e17a0:	f001 fc5e 	bl	e3060 <abs>
   e17a4:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e17a8:	9909      	ldr	r1, [sp, #36]	; 0x24
   e17aa:	9b08      	ldr	r3, [sp, #32]
   e17ac:	fb90 fcfe 	sdiv	ip, r0, lr
   e17b0:	fb0c 001e 	mls	r0, ip, lr, r0
   e17b4:	f1bb 0f00 	cmp.w	fp, #0
   e17b8:	da08      	bge.n	e17cc <strftime+0x460>
   e17ba:	6969      	ldr	r1, [r5, #20]
   e17bc:	4a3e      	ldr	r2, [pc, #248]	; (e18b8 <strftime+0x54c>)
   e17be:	4291      	cmp	r1, r2
   e17c0:	da0a      	bge.n	e17d8 <strftime+0x46c>
   e17c2:	f04f 0b01 	mov.w	fp, #1
   e17c6:	f8cd b01c 	str.w	fp, [sp, #28]
   e17ca:	e005      	b.n	e17d8 <strftime+0x46c>
   e17cc:	d004      	beq.n	e17d8 <strftime+0x46c>
   e17ce:	4a2f      	ldr	r2, [pc, #188]	; (e188c <strftime+0x520>)
   e17d0:	4291      	cmp	r1, r2
   e17d2:	bfb8      	it	lt
   e17d4:	f04f 3bff 	movlt.w	fp, #4294967295
   e17d8:	eb0b 0200 	add.w	r2, fp, r0
   e17dc:	1c50      	adds	r0, r2, #1
   e17de:	d102      	bne.n	e17e6 <strftime+0x47a>
   e17e0:	3b01      	subs	r3, #1
   e17e2:	2263      	movs	r2, #99	; 0x63
   e17e4:	e003      	b.n	e17ee <strftime+0x482>
   e17e6:	2a64      	cmp	r2, #100	; 0x64
   e17e8:	bf04      	itt	eq
   e17ea:	3301      	addeq	r3, #1
   e17ec:	2200      	moveq	r2, #0
   e17ee:	2064      	movs	r0, #100	; 0x64
   e17f0:	fb00 2303 	mla	r3, r0, r3, r2
   e17f4:	9a07      	ldr	r2, [sp, #28]
   e17f6:	b142      	cbz	r2, e180a <strftime+0x49e>
   e17f8:	222d      	movs	r2, #45	; 0x2d
   e17fa:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   e17fe:	f1b8 0f00 	cmp.w	r8, #0
   e1802:	d013      	beq.n	e182c <strftime+0x4c0>
   e1804:	f108 38ff 	add.w	r8, r8, #4294967295
   e1808:	e010      	b.n	e182c <strftime+0x4c0>
   e180a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e180e:	d110      	bne.n	e1832 <strftime+0x4c6>
   e1810:	f242 720f 	movw	r2, #9999	; 0x270f
   e1814:	4293      	cmp	r3, r2
   e1816:	d90c      	bls.n	e1832 <strftime+0x4c6>
   e1818:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e181c:	f1b8 0f00 	cmp.w	r8, #0
   e1820:	d1f0      	bne.n	e1804 <strftime+0x498>
   e1822:	aa12      	add	r2, sp, #72	; 0x48
   e1824:	2125      	movs	r1, #37	; 0x25
   e1826:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   e182a:	e00a      	b.n	e1842 <strftime+0x4d6>
   e182c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   e1830:	e000      	b.n	e1834 <strftime+0x4c8>
   e1832:	aa0a      	add	r2, sp, #40	; 0x28
   e1834:	2125      	movs	r1, #37	; 0x25
   e1836:	7011      	strb	r1, [r2, #0]
   e1838:	f1ba 0f00 	cmp.w	sl, #0
   e183c:	d101      	bne.n	e1842 <strftime+0x4d6>
   e183e:	1c50      	adds	r0, r2, #1
   e1840:	e002      	b.n	e1848 <strftime+0x4dc>
   e1842:	2130      	movs	r1, #48	; 0x30
   e1844:	1c90      	adds	r0, r2, #2
   e1846:	7051      	strb	r1, [r2, #1]
   e1848:	491c      	ldr	r1, [pc, #112]	; (e18bc <strftime+0x550>)
   e184a:	9307      	str	r3, [sp, #28]
   e184c:	f7ff fd0a 	bl	e1264 <strcpy>
   e1850:	9b07      	ldr	r3, [sp, #28]
   e1852:	9300      	str	r3, [sp, #0]
   e1854:	e1ad      	b.n	e1bb2 <strftime+0x846>
   e1856:	4a14      	ldr	r2, [pc, #80]	; (e18a8 <strftime+0x53c>)
   e1858:	4912      	ldr	r1, [pc, #72]	; (e18a4 <strftime+0x538>)
   e185a:	68ab      	ldr	r3, [r5, #8]
   e185c:	286b      	cmp	r0, #107	; 0x6b
   e185e:	bf08      	it	eq
   e1860:	460a      	moveq	r2, r1
   e1862:	e6e4      	b.n	e162e <strftime+0x2c2>
   e1864:	68a9      	ldr	r1, [r5, #8]
   e1866:	230c      	movs	r3, #12
   e1868:	b131      	cbz	r1, e1878 <strftime+0x50c>
   e186a:	4299      	cmp	r1, r3
   e186c:	bf0e      	itee	eq
   e186e:	460b      	moveq	r3, r1
   e1870:	fb91 f2f3 	sdivne	r2, r1, r3
   e1874:	fb03 1312 	mlsne	r3, r3, r2, r1
   e1878:	4a0a      	ldr	r2, [pc, #40]	; (e18a4 <strftime+0x538>)
   e187a:	490b      	ldr	r1, [pc, #44]	; (e18a8 <strftime+0x53c>)
   e187c:	2849      	cmp	r0, #73	; 0x49
   e187e:	bf08      	it	eq
   e1880:	460a      	moveq	r2, r1
   e1882:	e6d4      	b.n	e162e <strftime+0x2c2>
   e1884:	69eb      	ldr	r3, [r5, #28]
   e1886:	4a0e      	ldr	r2, [pc, #56]	; (e18c0 <strftime+0x554>)
   e1888:	3301      	adds	r3, #1
   e188a:	e6d0      	b.n	e162e <strftime+0x2c2>
   e188c:	fffff894 	.word	0xfffff894
   e1890:	000e560b 	.word	0x000e560b
   e1894:	000e4a27 	.word	0x000e4a27
   e1898:	000e55fc 	.word	0x000e55fc
   e189c:	000e5603 	.word	0x000e5603
   e18a0:	000e4606 	.word	0x000e4606
   e18a4:	000e560d 	.word	0x000e560d
   e18a8:	000e561b 	.word	0x000e561b
   e18ac:	000e5611 	.word	0x000e5611
   e18b0:	000e4710 	.word	0x000e4710
   e18b4:	000e5620 	.word	0x000e5620
   e18b8:	fffff895 	.word	0xfffff895
   e18bc:	000e5628 	.word	0x000e5628
   e18c0:	000e562c 	.word	0x000e562c
   e18c4:	692b      	ldr	r3, [r5, #16]
   e18c6:	3301      	adds	r3, #1
   e18c8:	e13d      	b.n	e1b46 <strftime+0x7da>
   e18ca:	686b      	ldr	r3, [r5, #4]
   e18cc:	e13b      	b.n	e1b46 <strftime+0x7da>
   e18ce:	9b02      	ldr	r3, [sp, #8]
   e18d0:	429c      	cmp	r4, r3
   e18d2:	f080 81f5 	bcs.w	e1cc0 <strftime+0x954>
   e18d6:	230a      	movs	r3, #10
   e18d8:	e1e5      	b.n	e1ca6 <strftime+0x93a>
   e18da:	68ab      	ldr	r3, [r5, #8]
   e18dc:	9a03      	ldr	r2, [sp, #12]
   e18de:	2b0b      	cmp	r3, #11
   e18e0:	bfcc      	ite	gt
   e18e2:	23a4      	movgt	r3, #164	; 0xa4
   e18e4:	23a0      	movle	r3, #160	; 0xa0
   e18e6:	4413      	add	r3, r2
   e18e8:	f8d3 8004 	ldr.w	r8, [r3, #4]
   e18ec:	4640      	mov	r0, r8
   e18ee:	f000 f9f1 	bl	e1cd4 <strlen>
   e18f2:	4bb2      	ldr	r3, [pc, #712]	; (e1bbc <strftime+0x850>)
   e18f4:	f8d3 e000 	ldr.w	lr, [r3]
   e18f8:	1939      	adds	r1, r7, r4
   e18fa:	4642      	mov	r2, r8
   e18fc:	4420      	add	r0, r4
   e18fe:	4284      	cmp	r4, r0
   e1900:	f000 81d3 	beq.w	e1caa <strftime+0x93e>
   e1904:	9b02      	ldr	r3, [sp, #8]
   e1906:	429c      	cmp	r4, r3
   e1908:	f080 81da 	bcs.w	e1cc0 <strftime+0x954>
   e190c:	f899 3000 	ldrb.w	r3, [r9]
   e1910:	2b50      	cmp	r3, #80	; 0x50
   e1912:	f104 0401 	add.w	r4, r4, #1
   e1916:	7813      	ldrb	r3, [r2, #0]
   e1918:	d10a      	bne.n	e1930 <strftime+0x5c4>
   e191a:	eb0e 0c03 	add.w	ip, lr, r3
   e191e:	f89c c001 	ldrb.w	ip, [ip, #1]
   e1922:	f00c 0c03 	and.w	ip, ip, #3
   e1926:	f1bc 0f01 	cmp.w	ip, #1
   e192a:	bf08      	it	eq
   e192c:	3320      	addeq	r3, #32
   e192e:	b2db      	uxtb	r3, r3
   e1930:	f801 3b01 	strb.w	r3, [r1], #1
   e1934:	3201      	adds	r2, #1
   e1936:	e7e2      	b.n	e18fe <strftime+0x592>
   e1938:	686b      	ldr	r3, [r5, #4]
   e193a:	9300      	str	r3, [sp, #0]
   e193c:	4aa0      	ldr	r2, [pc, #640]	; (e1bc0 <strftime+0x854>)
   e193e:	68ab      	ldr	r3, [r5, #8]
   e1940:	e139      	b.n	e1bb6 <strftime+0x84a>
   e1942:	6a2b      	ldr	r3, [r5, #32]
   e1944:	2b00      	cmp	r3, #0
   e1946:	db17      	blt.n	e1978 <strftime+0x60c>
   e1948:	f001 fa02 	bl	e2d50 <__tz_lock>
   e194c:	9b06      	ldr	r3, [sp, #24]
   e194e:	b91b      	cbnz	r3, e1958 <strftime+0x5ec>
   e1950:	f001 fa00 	bl	e2d54 <_tzset_unlocked>
   e1954:	2301      	movs	r3, #1
   e1956:	9306      	str	r3, [sp, #24]
   e1958:	f001 fefc 	bl	e3754 <__gettzinfo>
   e195c:	6a2b      	ldr	r3, [r5, #32]
   e195e:	2b00      	cmp	r3, #0
   e1960:	bfd4      	ite	le
   e1962:	2300      	movle	r3, #0
   e1964:	2301      	movgt	r3, #1
   e1966:	221c      	movs	r2, #28
   e1968:	fb02 0003 	mla	r0, r2, r3, r0
   e196c:	6a03      	ldr	r3, [r0, #32]
   e196e:	f1c3 0800 	rsb	r8, r3, #0
   e1972:	f001 f9ee 	bl	e2d52 <__tz_unlock>
   e1976:	e001      	b.n	e197c <strftime+0x610>
   e1978:	f04f 0800 	mov.w	r8, #0
   e197c:	f8d5 e014 	ldr.w	lr, [r5, #20]
   e1980:	4670      	mov	r0, lr
   e1982:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   e1986:	ea4f 71e0 	mov.w	r1, r0, asr #31
   e198a:	f141 33ff 	adc.w	r3, r1, #4294967295
   e198e:	2a00      	cmp	r2, #0
   e1990:	f173 0b00 	sbcs.w	fp, r3, #0
   e1994:	ebc4 0c06 	rsb	ip, r4, r6
   e1998:	eb07 0a04 	add.w	sl, r7, r4
   e199c:	da03      	bge.n	e19a6 <strftime+0x63a>
   e199e:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   e19a2:	f141 33ff 	adc.w	r3, r1, #4294967295
   e19a6:	0891      	lsrs	r1, r2, #2
   e19a8:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   e19ac:	109b      	asrs	r3, r3, #2
   e19ae:	9104      	str	r1, [sp, #16]
   e19b0:	9305      	str	r3, [sp, #20]
   e19b2:	f10e 31ff 	add.w	r1, lr, #4294967295
   e19b6:	2364      	movs	r3, #100	; 0x64
   e19b8:	fb91 f1f3 	sdiv	r1, r1, r3
   e19bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e19c0:	1a52      	subs	r2, r2, r1
   e19c2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   e19c6:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   e19ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e19ce:	fb90 f1f1 	sdiv	r1, r0, r1
   e19d2:	1852      	adds	r2, r2, r1
   e19d4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e19d8:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   e19dc:	f240 116d 	movw	r1, #365	; 0x16d
   e19e0:	fb01 fe0e 	mul.w	lr, r1, lr
   e19e4:	69e9      	ldr	r1, [r5, #28]
   e19e6:	eb12 020e 	adds.w	r2, r2, lr
   e19ea:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   e19ee:	1852      	adds	r2, r2, r1
   e19f0:	f04f 0e18 	mov.w	lr, #24
   e19f4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e19f8:	fba2 010e 	umull	r0, r1, r2, lr
   e19fc:	fb0e 1103 	mla	r1, lr, r3, r1
   e1a00:	68ab      	ldr	r3, [r5, #8]
   e1a02:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   e1a06:	18c0      	adds	r0, r0, r3
   e1a08:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e1a0c:	fba0 230e 	umull	r2, r3, r0, lr
   e1a10:	fb0e 3301 	mla	r3, lr, r1, r3
   e1a14:	6869      	ldr	r1, [r5, #4]
   e1a16:	1852      	adds	r2, r2, r1
   e1a18:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e1a1c:	fba2 010e 	umull	r0, r1, r2, lr
   e1a20:	fb0e 1103 	mla	r1, lr, r3, r1
   e1a24:	682b      	ldr	r3, [r5, #0]
   e1a26:	4a67      	ldr	r2, [pc, #412]	; (e1bc4 <strftime+0x858>)
   e1a28:	18c0      	adds	r0, r0, r3
   e1a2a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e1a2e:	ebb0 0008 	subs.w	r0, r0, r8
   e1a32:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   e1a36:	e9cd 0100 	strd	r0, r1, [sp]
   e1a3a:	4661      	mov	r1, ip
   e1a3c:	4650      	mov	r0, sl
   e1a3e:	f7f9 fc9d 	bl	db37c <sniprintf>
   e1a42:	e5f8      	b.n	e1636 <strftime+0x2ca>
   e1a44:	682b      	ldr	r3, [r5, #0]
   e1a46:	e07e      	b.n	e1b46 <strftime+0x7da>
   e1a48:	9b02      	ldr	r3, [sp, #8]
   e1a4a:	429c      	cmp	r4, r3
   e1a4c:	f080 8138 	bcs.w	e1cc0 <strftime+0x954>
   e1a50:	2309      	movs	r3, #9
   e1a52:	e128      	b.n	e1ca6 <strftime+0x93a>
   e1a54:	682b      	ldr	r3, [r5, #0]
   e1a56:	9301      	str	r3, [sp, #4]
   e1a58:	686b      	ldr	r3, [r5, #4]
   e1a5a:	9300      	str	r3, [sp, #0]
   e1a5c:	4a5a      	ldr	r2, [pc, #360]	; (e1bc8 <strftime+0x85c>)
   e1a5e:	68ab      	ldr	r3, [r5, #8]
   e1a60:	1b31      	subs	r1, r6, r4
   e1a62:	1938      	adds	r0, r7, r4
   e1a64:	e60d      	b.n	e1682 <strftime+0x316>
   e1a66:	9b02      	ldr	r3, [sp, #8]
   e1a68:	429c      	cmp	r4, r3
   e1a6a:	f080 8129 	bcs.w	e1cc0 <strftime+0x954>
   e1a6e:	69ab      	ldr	r3, [r5, #24]
   e1a70:	1c62      	adds	r2, r4, #1
   e1a72:	b90b      	cbnz	r3, e1a78 <strftime+0x70c>
   e1a74:	2337      	movs	r3, #55	; 0x37
   e1a76:	e000      	b.n	e1a7a <strftime+0x70e>
   e1a78:	3330      	adds	r3, #48	; 0x30
   e1a7a:	553b      	strb	r3, [r7, r4]
   e1a7c:	4614      	mov	r4, r2
   e1a7e:	e114      	b.n	e1caa <strftime+0x93e>
   e1a80:	69eb      	ldr	r3, [r5, #28]
   e1a82:	69aa      	ldr	r2, [r5, #24]
   e1a84:	3307      	adds	r3, #7
   e1a86:	1a9b      	subs	r3, r3, r2
   e1a88:	2207      	movs	r2, #7
   e1a8a:	fb93 f3f2 	sdiv	r3, r3, r2
   e1a8e:	e05a      	b.n	e1b46 <strftime+0x7da>
   e1a90:	4628      	mov	r0, r5
   e1a92:	f7ff fc0a 	bl	e12aa <iso_year_adjust>
   e1a96:	69aa      	ldr	r2, [r5, #24]
   e1a98:	b10a      	cbz	r2, e1a9e <strftime+0x732>
   e1a9a:	1e53      	subs	r3, r2, #1
   e1a9c:	e000      	b.n	e1aa0 <strftime+0x734>
   e1a9e:	2306      	movs	r3, #6
   e1aa0:	2800      	cmp	r0, #0
   e1aa2:	dc2f      	bgt.n	e1b04 <strftime+0x798>
   e1aa4:	69ea      	ldr	r2, [r5, #28]
   e1aa6:	d101      	bne.n	e1aac <strftime+0x740>
   e1aa8:	320a      	adds	r2, #10
   e1aaa:	e03b      	b.n	e1b24 <strftime+0x7b8>
   e1aac:	1a9a      	subs	r2, r3, r2
   e1aae:	696b      	ldr	r3, [r5, #20]
   e1ab0:	f240 716b 	movw	r1, #1899	; 0x76b
   e1ab4:	2b00      	cmp	r3, #0
   e1ab6:	bfb4      	ite	lt
   e1ab8:	4608      	movlt	r0, r1
   e1aba:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   e1abe:	4418      	add	r0, r3
   e1ac0:	0781      	lsls	r1, r0, #30
   e1ac2:	d107      	bne.n	e1ad4 <strftime+0x768>
   e1ac4:	4601      	mov	r1, r0
   e1ac6:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e1aca:	fb90 f0fe 	sdiv	r0, r0, lr
   e1ace:	fb0e 1110 	mls	r1, lr, r0, r1
   e1ad2:	b981      	cbnz	r1, e1af6 <strftime+0x78a>
   e1ad4:	2b00      	cmp	r3, #0
   e1ad6:	f240 716b 	movw	r1, #1899	; 0x76b
   e1ada:	bfa8      	it	ge
   e1adc:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   e1ae0:	4419      	add	r1, r3
   e1ae2:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e1ae6:	fb91 f0f3 	sdiv	r0, r1, r3
   e1aea:	fb03 1110 	mls	r1, r3, r0, r1
   e1aee:	fab1 f181 	clz	r1, r1
   e1af2:	0949      	lsrs	r1, r1, #5
   e1af4:	e000      	b.n	e1af8 <strftime+0x78c>
   e1af6:	2101      	movs	r1, #1
   e1af8:	1a52      	subs	r2, r2, r1
   e1afa:	2a05      	cmp	r2, #5
   e1afc:	bfb4      	ite	lt
   e1afe:	2335      	movlt	r3, #53	; 0x35
   e1b00:	2334      	movge	r3, #52	; 0x34
   e1b02:	e020      	b.n	e1b46 <strftime+0x7da>
   e1b04:	2301      	movs	r3, #1
   e1b06:	e01e      	b.n	e1b46 <strftime+0x7da>
   e1b08:	9b02      	ldr	r3, [sp, #8]
   e1b0a:	429c      	cmp	r4, r3
   e1b0c:	f080 80d8 	bcs.w	e1cc0 <strftime+0x954>
   e1b10:	69ab      	ldr	r3, [r5, #24]
   e1b12:	3330      	adds	r3, #48	; 0x30
   e1b14:	e0c7      	b.n	e1ca6 <strftime+0x93a>
   e1b16:	69aa      	ldr	r2, [r5, #24]
   e1b18:	b10a      	cbz	r2, e1b1e <strftime+0x7b2>
   e1b1a:	1e53      	subs	r3, r2, #1
   e1b1c:	e000      	b.n	e1b20 <strftime+0x7b4>
   e1b1e:	2306      	movs	r3, #6
   e1b20:	69ea      	ldr	r2, [r5, #28]
   e1b22:	3207      	adds	r2, #7
   e1b24:	1ad2      	subs	r2, r2, r3
   e1b26:	2307      	movs	r3, #7
   e1b28:	fb92 f3f3 	sdiv	r3, r2, r3
   e1b2c:	e00b      	b.n	e1b46 <strftime+0x7da>
   e1b2e:	6968      	ldr	r0, [r5, #20]
   e1b30:	2800      	cmp	r0, #0
   e1b32:	da03      	bge.n	e1b3c <strftime+0x7d0>
   e1b34:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e1b38:	f001 fa92 	bl	e3060 <abs>
   e1b3c:	2364      	movs	r3, #100	; 0x64
   e1b3e:	fb90 f2f3 	sdiv	r2, r0, r3
   e1b42:	fb02 0313 	mls	r3, r2, r3, r0
   e1b46:	4a21      	ldr	r2, [pc, #132]	; (e1bcc <strftime+0x860>)
   e1b48:	e571      	b.n	e162e <strftime+0x2c2>
   e1b4a:	696b      	ldr	r3, [r5, #20]
   e1b4c:	4a20      	ldr	r2, [pc, #128]	; (e1bd0 <strftime+0x864>)
   e1b4e:	4293      	cmp	r3, r2
   e1b50:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   e1b54:	da05      	bge.n	e1b62 <strftime+0x7f6>
   e1b56:	232d      	movs	r3, #45	; 0x2d
   e1b58:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e1b5c:	f1cb 0b00 	rsb	fp, fp, #0
   e1b60:	e008      	b.n	e1b74 <strftime+0x808>
   e1b62:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e1b66:	d10d      	bne.n	e1b84 <strftime+0x818>
   e1b68:	f242 730f 	movw	r3, #9999	; 0x270f
   e1b6c:	459b      	cmp	fp, r3
   e1b6e:	d911      	bls.n	e1b94 <strftime+0x828>
   e1b70:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e1b74:	f1b8 0f00 	cmp.w	r8, #0
   e1b78:	d001      	beq.n	e1b7e <strftime+0x812>
   e1b7a:	f108 38ff 	add.w	r8, r8, #4294967295
   e1b7e:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   e1b82:	e000      	b.n	e1b86 <strftime+0x81a>
   e1b84:	ab0a      	add	r3, sp, #40	; 0x28
   e1b86:	2225      	movs	r2, #37	; 0x25
   e1b88:	701a      	strb	r2, [r3, #0]
   e1b8a:	f1ba 0f00 	cmp.w	sl, #0
   e1b8e:	d108      	bne.n	e1ba2 <strftime+0x836>
   e1b90:	1c58      	adds	r0, r3, #1
   e1b92:	e009      	b.n	e1ba8 <strftime+0x83c>
   e1b94:	f1b8 0f00 	cmp.w	r8, #0
   e1b98:	d1f4      	bne.n	e1b84 <strftime+0x818>
   e1b9a:	2325      	movs	r3, #37	; 0x25
   e1b9c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e1ba0:	ab0a      	add	r3, sp, #40	; 0x28
   e1ba2:	2230      	movs	r2, #48	; 0x30
   e1ba4:	1c98      	adds	r0, r3, #2
   e1ba6:	705a      	strb	r2, [r3, #1]
   e1ba8:	490a      	ldr	r1, [pc, #40]	; (e1bd4 <strftime+0x868>)
   e1baa:	f7ff fb5b 	bl	e1264 <strcpy>
   e1bae:	f8cd b000 	str.w	fp, [sp]
   e1bb2:	4643      	mov	r3, r8
   e1bb4:	aa0a      	add	r2, sp, #40	; 0x28
   e1bb6:	1b31      	subs	r1, r6, r4
   e1bb8:	1938      	adds	r0, r7, r4
   e1bba:	e03e      	b.n	e1c3a <strftime+0x8ce>
   e1bbc:	2003bbfc 	.word	0x2003bbfc
   e1bc0:	000e563b 	.word	0x000e563b
   e1bc4:	000e5631 	.word	0x000e5631
   e1bc8:	000e5636 	.word	0x000e5636
   e1bcc:	000e561b 	.word	0x000e561b
   e1bd0:	fffff894 	.word	0xfffff894
   e1bd4:	000e5628 	.word	0x000e5628
   e1bd8:	6a2b      	ldr	r3, [r5, #32]
   e1bda:	2b00      	cmp	r3, #0
   e1bdc:	db65      	blt.n	e1caa <strftime+0x93e>
   e1bde:	f001 f8b7 	bl	e2d50 <__tz_lock>
   e1be2:	9b06      	ldr	r3, [sp, #24]
   e1be4:	b91b      	cbnz	r3, e1bee <strftime+0x882>
   e1be6:	f001 f8b5 	bl	e2d54 <_tzset_unlocked>
   e1bea:	2301      	movs	r3, #1
   e1bec:	9306      	str	r3, [sp, #24]
   e1bee:	f001 fdb1 	bl	e3754 <__gettzinfo>
   e1bf2:	6a2b      	ldr	r3, [r5, #32]
   e1bf4:	2b00      	cmp	r3, #0
   e1bf6:	bfd4      	ite	le
   e1bf8:	2300      	movle	r3, #0
   e1bfa:	2301      	movgt	r3, #1
   e1bfc:	221c      	movs	r2, #28
   e1bfe:	fb02 0003 	mla	r0, r2, r3, r0
   e1c02:	eb07 0a04 	add.w	sl, r7, r4
   e1c06:	6a03      	ldr	r3, [r0, #32]
   e1c08:	f1c3 0800 	rsb	r8, r3, #0
   e1c0c:	f001 f8a1 	bl	e2d52 <__tz_unlock>
   e1c10:	233c      	movs	r3, #60	; 0x3c
   e1c12:	fb98 f0f3 	sdiv	r0, r8, r3
   e1c16:	9307      	str	r3, [sp, #28]
   e1c18:	f001 fe38 	bl	e388c <labs>
   e1c1c:	9b07      	ldr	r3, [sp, #28]
   e1c1e:	fb90 f2f3 	sdiv	r2, r0, r3
   e1c22:	ebc4 0b06 	rsb	fp, r4, r6
   e1c26:	fb02 0013 	mls	r0, r2, r3, r0
   e1c2a:	4a28      	ldr	r2, [pc, #160]	; (e1ccc <strftime+0x960>)
   e1c2c:	9000      	str	r0, [sp, #0]
   e1c2e:	4659      	mov	r1, fp
   e1c30:	4650      	mov	r0, sl
   e1c32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e1c36:	fb98 f3f3 	sdiv	r3, r8, r3
   e1c3a:	f7f9 fb9f 	bl	db37c <sniprintf>
   e1c3e:	e4fa      	b.n	e1636 <strftime+0x2ca>
   e1c40:	4404      	add	r4, r0
   e1c42:	42a6      	cmp	r6, r4
   e1c44:	d831      	bhi.n	e1caa <strftime+0x93e>
   e1c46:	e03b      	b.n	e1cc0 <strftime+0x954>
   e1c48:	6a2b      	ldr	r3, [r5, #32]
   e1c4a:	2b00      	cmp	r3, #0
   e1c4c:	db2d      	blt.n	e1caa <strftime+0x93e>
   e1c4e:	f001 f87f 	bl	e2d50 <__tz_lock>
   e1c52:	9b06      	ldr	r3, [sp, #24]
   e1c54:	b91b      	cbnz	r3, e1c5e <strftime+0x8f2>
   e1c56:	f001 f87d 	bl	e2d54 <_tzset_unlocked>
   e1c5a:	2301      	movs	r3, #1
   e1c5c:	9306      	str	r3, [sp, #24]
   e1c5e:	6a2b      	ldr	r3, [r5, #32]
   e1c60:	4a1b      	ldr	r2, [pc, #108]	; (e1cd0 <strftime+0x964>)
   e1c62:	2b00      	cmp	r3, #0
   e1c64:	bfd4      	ite	le
   e1c66:	2300      	movle	r3, #0
   e1c68:	2301      	movgt	r3, #1
   e1c6a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e1c6e:	4640      	mov	r0, r8
   e1c70:	f000 f830 	bl	e1cd4 <strlen>
   e1c74:	f108 38ff 	add.w	r8, r8, #4294967295
   e1c78:	193b      	adds	r3, r7, r4
   e1c7a:	4420      	add	r0, r4
   e1c7c:	4284      	cmp	r4, r0
   e1c7e:	d00b      	beq.n	e1c98 <strftime+0x92c>
   e1c80:	9a02      	ldr	r2, [sp, #8]
   e1c82:	4294      	cmp	r4, r2
   e1c84:	d205      	bcs.n	e1c92 <strftime+0x926>
   e1c86:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e1c8a:	f803 2b01 	strb.w	r2, [r3], #1
   e1c8e:	3401      	adds	r4, #1
   e1c90:	e7f4      	b.n	e1c7c <strftime+0x910>
   e1c92:	f001 f85e 	bl	e2d52 <__tz_unlock>
   e1c96:	e013      	b.n	e1cc0 <strftime+0x954>
   e1c98:	f001 f85b 	bl	e2d52 <__tz_unlock>
   e1c9c:	e005      	b.n	e1caa <strftime+0x93e>
   e1c9e:	9b02      	ldr	r3, [sp, #8]
   e1ca0:	429c      	cmp	r4, r3
   e1ca2:	d20d      	bcs.n	e1cc0 <strftime+0x954>
   e1ca4:	2325      	movs	r3, #37	; 0x25
   e1ca6:	553b      	strb	r3, [r7, r4]
   e1ca8:	3401      	adds	r4, #1
   e1caa:	f899 3000 	ldrb.w	r3, [r9]
   e1cae:	b11b      	cbz	r3, e1cb8 <strftime+0x94c>
   e1cb0:	f109 0901 	add.w	r9, r9, #1
   e1cb4:	f7ff bb69 	b.w	e138a <strftime+0x1e>
   e1cb8:	b126      	cbz	r6, e1cc4 <strftime+0x958>
   e1cba:	2300      	movs	r3, #0
   e1cbc:	553b      	strb	r3, [r7, r4]
   e1cbe:	e001      	b.n	e1cc4 <strftime+0x958>
   e1cc0:	2000      	movs	r0, #0
   e1cc2:	e000      	b.n	e1cc6 <strftime+0x95a>
   e1cc4:	4620      	mov	r0, r4
   e1cc6:	b013      	add	sp, #76	; 0x4c
   e1cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1ccc:	000e5645 	.word	0x000e5645
   e1cd0:	2003bc9c 	.word	0x2003bc9c

000e1cd4 <strlen>:
   e1cd4:	4603      	mov	r3, r0
   e1cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
   e1cda:	2a00      	cmp	r2, #0
   e1cdc:	d1fb      	bne.n	e1cd6 <strlen+0x2>
   e1cde:	1a18      	subs	r0, r3, r0
   e1ce0:	3801      	subs	r0, #1
   e1ce2:	4770      	bx	lr

000e1ce4 <strncmp>:
   e1ce4:	b530      	push	{r4, r5, lr}
   e1ce6:	b182      	cbz	r2, e1d0a <strncmp+0x26>
   e1ce8:	1e45      	subs	r5, r0, #1
   e1cea:	3901      	subs	r1, #1
   e1cec:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e1cf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e1cf4:	42a3      	cmp	r3, r4
   e1cf6:	d106      	bne.n	e1d06 <strncmp+0x22>
   e1cf8:	43ec      	mvns	r4, r5
   e1cfa:	4414      	add	r4, r2
   e1cfc:	42e0      	cmn	r0, r4
   e1cfe:	d001      	beq.n	e1d04 <strncmp+0x20>
   e1d00:	2b00      	cmp	r3, #0
   e1d02:	d1f3      	bne.n	e1cec <strncmp+0x8>
   e1d04:	461c      	mov	r4, r3
   e1d06:	1b18      	subs	r0, r3, r4
   e1d08:	bd30      	pop	{r4, r5, pc}
   e1d0a:	4610      	mov	r0, r2
   e1d0c:	bd30      	pop	{r4, r5, pc}

000e1d0e <strncpy>:
   e1d0e:	b510      	push	{r4, lr}
   e1d10:	4603      	mov	r3, r0
   e1d12:	b142      	cbz	r2, e1d26 <strncpy+0x18>
   e1d14:	f811 4b01 	ldrb.w	r4, [r1], #1
   e1d18:	f803 4b01 	strb.w	r4, [r3], #1
   e1d1c:	3a01      	subs	r2, #1
   e1d1e:	2c00      	cmp	r4, #0
   e1d20:	d1f7      	bne.n	e1d12 <strncpy+0x4>
   e1d22:	441a      	add	r2, r3
   e1d24:	e000      	b.n	e1d28 <strncpy+0x1a>
   e1d26:	bd10      	pop	{r4, pc}
   e1d28:	4293      	cmp	r3, r2
   e1d2a:	d002      	beq.n	e1d32 <strncpy+0x24>
   e1d2c:	f803 4b01 	strb.w	r4, [r3], #1
   e1d30:	e7fa      	b.n	e1d28 <strncpy+0x1a>
   e1d32:	bd10      	pop	{r4, pc}

000e1d34 <strstr>:
   e1d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   e1d36:	7803      	ldrb	r3, [r0, #0]
   e1d38:	b963      	cbnz	r3, e1d54 <strstr+0x20>
   e1d3a:	780b      	ldrb	r3, [r1, #0]
   e1d3c:	2b00      	cmp	r3, #0
   e1d3e:	bf18      	it	ne
   e1d40:	2000      	movne	r0, #0
   e1d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e1d44:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   e1d48:	b162      	cbz	r2, e1d64 <strstr+0x30>
   e1d4a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   e1d4e:	4297      	cmp	r7, r2
   e1d50:	4630      	mov	r0, r6
   e1d52:	d0f7      	beq.n	e1d44 <strstr+0x10>
   e1d54:	4603      	mov	r3, r0
   e1d56:	1c46      	adds	r6, r0, #1
   e1d58:	7800      	ldrb	r0, [r0, #0]
   e1d5a:	b110      	cbz	r0, e1d62 <strstr+0x2e>
   e1d5c:	1e4d      	subs	r5, r1, #1
   e1d5e:	1e5c      	subs	r4, r3, #1
   e1d60:	e7f0      	b.n	e1d44 <strstr+0x10>
   e1d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e1d64:	4618      	mov	r0, r3
   e1d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e1d68 <sulp>:
   e1d68:	b570      	push	{r4, r5, r6, lr}
   e1d6a:	4604      	mov	r4, r0
   e1d6c:	460d      	mov	r5, r1
   e1d6e:	ec45 4b10 	vmov	d0, r4, r5
   e1d72:	4616      	mov	r6, r2
   e1d74:	f002 f854 	bl	e3e20 <__ulp>
   e1d78:	ec51 0b10 	vmov	r0, r1, d0
   e1d7c:	b17e      	cbz	r6, e1d9e <sulp+0x36>
   e1d7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e1d82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e1d86:	2b00      	cmp	r3, #0
   e1d88:	dd09      	ble.n	e1d9e <sulp+0x36>
   e1d8a:	051b      	lsls	r3, r3, #20
   e1d8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e1d90:	2400      	movs	r4, #0
   e1d92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e1d96:	4622      	mov	r2, r4
   e1d98:	462b      	mov	r3, r5
   e1d9a:	f7fe f969 	bl	e0070 <__aeabi_dmul>
   e1d9e:	bd70      	pop	{r4, r5, r6, pc}

000e1da0 <_strtod_r>:
   e1da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1da4:	b09d      	sub	sp, #116	; 0x74
   e1da6:	2300      	movs	r3, #0
   e1da8:	9002      	str	r0, [sp, #8]
   e1daa:	460c      	mov	r4, r1
   e1dac:	9213      	str	r2, [sp, #76]	; 0x4c
   e1dae:	9318      	str	r3, [sp, #96]	; 0x60
   e1db0:	f04f 0a00 	mov.w	sl, #0
   e1db4:	f04f 0b00 	mov.w	fp, #0
   e1db8:	9117      	str	r1, [sp, #92]	; 0x5c
   e1dba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1dbc:	781a      	ldrb	r2, [r3, #0]
   e1dbe:	2a0d      	cmp	r2, #13
   e1dc0:	d805      	bhi.n	e1dce <_strtod_r+0x2e>
   e1dc2:	2a09      	cmp	r2, #9
   e1dc4:	d213      	bcs.n	e1dee <_strtod_r+0x4e>
   e1dc6:	2a00      	cmp	r2, #0
   e1dc8:	f000 81ac 	beq.w	e2124 <_strtod_r+0x384>
   e1dcc:	e012      	b.n	e1df4 <_strtod_r+0x54>
   e1dce:	2a2b      	cmp	r2, #43	; 0x2b
   e1dd0:	d004      	beq.n	e1ddc <_strtod_r+0x3c>
   e1dd2:	2a2d      	cmp	r2, #45	; 0x2d
   e1dd4:	d004      	beq.n	e1de0 <_strtod_r+0x40>
   e1dd6:	2a20      	cmp	r2, #32
   e1dd8:	d10c      	bne.n	e1df4 <_strtod_r+0x54>
   e1dda:	e008      	b.n	e1dee <_strtod_r+0x4e>
   e1ddc:	2200      	movs	r2, #0
   e1dde:	e000      	b.n	e1de2 <_strtod_r+0x42>
   e1de0:	2201      	movs	r2, #1
   e1de2:	920c      	str	r2, [sp, #48]	; 0x30
   e1de4:	1c5a      	adds	r2, r3, #1
   e1de6:	9217      	str	r2, [sp, #92]	; 0x5c
   e1de8:	785b      	ldrb	r3, [r3, #1]
   e1dea:	b92b      	cbnz	r3, e1df8 <_strtod_r+0x58>
   e1dec:	e19a      	b.n	e2124 <_strtod_r+0x384>
   e1dee:	3301      	adds	r3, #1
   e1df0:	9317      	str	r3, [sp, #92]	; 0x5c
   e1df2:	e7e2      	b.n	e1dba <_strtod_r+0x1a>
   e1df4:	2300      	movs	r3, #0
   e1df6:	930c      	str	r3, [sp, #48]	; 0x30
   e1df8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e1dfa:	782b      	ldrb	r3, [r5, #0]
   e1dfc:	2b30      	cmp	r3, #48	; 0x30
   e1dfe:	d15c      	bne.n	e1eba <_strtod_r+0x11a>
   e1e00:	786b      	ldrb	r3, [r5, #1]
   e1e02:	2b58      	cmp	r3, #88	; 0x58
   e1e04:	d001      	beq.n	e1e0a <_strtod_r+0x6a>
   e1e06:	2b78      	cmp	r3, #120	; 0x78
   e1e08:	d14c      	bne.n	e1ea4 <_strtod_r+0x104>
   e1e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e1e0c:	9301      	str	r3, [sp, #4]
   e1e0e:	ab18      	add	r3, sp, #96	; 0x60
   e1e10:	9300      	str	r3, [sp, #0]
   e1e12:	4aa9      	ldr	r2, [pc, #676]	; (e20b8 <_strtod_r+0x318>)
   e1e14:	9802      	ldr	r0, [sp, #8]
   e1e16:	ab19      	add	r3, sp, #100	; 0x64
   e1e18:	a917      	add	r1, sp, #92	; 0x5c
   e1e1a:	f001 f984 	bl	e3126 <__gethex>
   e1e1e:	f010 0607 	ands.w	r6, r0, #7
   e1e22:	4604      	mov	r4, r0
   e1e24:	f000 8587 	beq.w	e2936 <_strtod_r+0xb96>
   e1e28:	2e06      	cmp	r6, #6
   e1e2a:	d105      	bne.n	e1e38 <_strtod_r+0x98>
   e1e2c:	3501      	adds	r5, #1
   e1e2e:	2300      	movs	r3, #0
   e1e30:	9517      	str	r5, [sp, #92]	; 0x5c
   e1e32:	930c      	str	r3, [sp, #48]	; 0x30
   e1e34:	f000 bd7f 	b.w	e2936 <_strtod_r+0xb96>
   e1e38:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e1e3a:	b13a      	cbz	r2, e1e4c <_strtod_r+0xac>
   e1e3c:	2135      	movs	r1, #53	; 0x35
   e1e3e:	a81a      	add	r0, sp, #104	; 0x68
   e1e40:	f002 f8db 	bl	e3ffa <__copybits>
   e1e44:	9918      	ldr	r1, [sp, #96]	; 0x60
   e1e46:	9802      	ldr	r0, [sp, #8]
   e1e48:	f001 fd59 	bl	e38fe <_Bfree>
   e1e4c:	2e06      	cmp	r6, #6
   e1e4e:	d822      	bhi.n	e1e96 <_strtod_r+0xf6>
   e1e50:	e8df f006 	tbb	[pc, r6]
   e1e54:	18080d04 	.word	0x18080d04
   e1e58:	0d1d      	.short	0x0d1d
   e1e5a:	04          	.byte	0x04
   e1e5b:	00          	.byte	0x00
   e1e5c:	f04f 0b00 	mov.w	fp, #0
   e1e60:	46da      	mov	sl, fp
   e1e62:	e018      	b.n	e1e96 <_strtod_r+0xf6>
   e1e64:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e1e68:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e1e6c:	e013      	b.n	e1e96 <_strtod_r+0xf6>
   e1e6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e1e70:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e1e72:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e1e76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e1e7a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e1e7e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e1e82:	e008      	b.n	e1e96 <_strtod_r+0xf6>
   e1e84:	f8df b234 	ldr.w	fp, [pc, #564]	; e20bc <_strtod_r+0x31c>
   e1e88:	f04f 0a00 	mov.w	sl, #0
   e1e8c:	e003      	b.n	e1e96 <_strtod_r+0xf6>
   e1e8e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e1e92:	f04f 3aff 	mov.w	sl, #4294967295
   e1e96:	0721      	lsls	r1, r4, #28
   e1e98:	f140 854d 	bpl.w	e2936 <_strtod_r+0xb96>
   e1e9c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e1ea0:	f000 bd49 	b.w	e2936 <_strtod_r+0xb96>
   e1ea4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1ea6:	1c5a      	adds	r2, r3, #1
   e1ea8:	9217      	str	r2, [sp, #92]	; 0x5c
   e1eaa:	785b      	ldrb	r3, [r3, #1]
   e1eac:	2b30      	cmp	r3, #48	; 0x30
   e1eae:	d0f9      	beq.n	e1ea4 <_strtod_r+0x104>
   e1eb0:	2b00      	cmp	r3, #0
   e1eb2:	f000 8540 	beq.w	e2936 <_strtod_r+0xb96>
   e1eb6:	2301      	movs	r3, #1
   e1eb8:	e000      	b.n	e1ebc <_strtod_r+0x11c>
   e1eba:	2300      	movs	r3, #0
   e1ebc:	f04f 0800 	mov.w	r8, #0
   e1ec0:	9306      	str	r3, [sp, #24]
   e1ec2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1ec4:	9307      	str	r3, [sp, #28]
   e1ec6:	f8cd 8014 	str.w	r8, [sp, #20]
   e1eca:	f8cd 8010 	str.w	r8, [sp, #16]
   e1ece:	220a      	movs	r2, #10
   e1ed0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e1ed2:	782e      	ldrb	r6, [r5, #0]
   e1ed4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e1ed8:	b2d9      	uxtb	r1, r3
   e1eda:	2909      	cmp	r1, #9
   e1edc:	d80e      	bhi.n	e1efc <_strtod_r+0x15c>
   e1ede:	9904      	ldr	r1, [sp, #16]
   e1ee0:	2908      	cmp	r1, #8
   e1ee2:	bfdd      	ittte	le
   e1ee4:	9905      	ldrle	r1, [sp, #20]
   e1ee6:	fb02 3301 	mlale	r3, r2, r1, r3
   e1eea:	9305      	strle	r3, [sp, #20]
   e1eec:	fb02 3808 	mlagt	r8, r2, r8, r3
   e1ef0:	9b04      	ldr	r3, [sp, #16]
   e1ef2:	3501      	adds	r5, #1
   e1ef4:	3301      	adds	r3, #1
   e1ef6:	9304      	str	r3, [sp, #16]
   e1ef8:	9517      	str	r5, [sp, #92]	; 0x5c
   e1efa:	e7e9      	b.n	e1ed0 <_strtod_r+0x130>
   e1efc:	9802      	ldr	r0, [sp, #8]
   e1efe:	f7fe fefd 	bl	e0cfc <_localeconv_r>
   e1f02:	6807      	ldr	r7, [r0, #0]
   e1f04:	9802      	ldr	r0, [sp, #8]
   e1f06:	f7fe fef9 	bl	e0cfc <_localeconv_r>
   e1f0a:	6800      	ldr	r0, [r0, #0]
   e1f0c:	f7ff fee2 	bl	e1cd4 <strlen>
   e1f10:	4639      	mov	r1, r7
   e1f12:	4602      	mov	r2, r0
   e1f14:	4628      	mov	r0, r5
   e1f16:	f7ff fee5 	bl	e1ce4 <strncmp>
   e1f1a:	4607      	mov	r7, r0
   e1f1c:	b128      	cbz	r0, e1f2a <_strtod_r+0x18a>
   e1f1e:	2000      	movs	r0, #0
   e1f20:	4633      	mov	r3, r6
   e1f22:	9d04      	ldr	r5, [sp, #16]
   e1f24:	4602      	mov	r2, r0
   e1f26:	4601      	mov	r1, r0
   e1f28:	e057      	b.n	e1fda <_strtod_r+0x23a>
   e1f2a:	9802      	ldr	r0, [sp, #8]
   e1f2c:	f7fe fee6 	bl	e0cfc <_localeconv_r>
   e1f30:	6800      	ldr	r0, [r0, #0]
   e1f32:	f7ff fecf 	bl	e1cd4 <strlen>
   e1f36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1f38:	181a      	adds	r2, r3, r0
   e1f3a:	9217      	str	r2, [sp, #92]	; 0x5c
   e1f3c:	9a04      	ldr	r2, [sp, #16]
   e1f3e:	5c1b      	ldrb	r3, [r3, r0]
   e1f40:	2a00      	cmp	r2, #0
   e1f42:	d142      	bne.n	e1fca <_strtod_r+0x22a>
   e1f44:	4610      	mov	r0, r2
   e1f46:	2b30      	cmp	r3, #48	; 0x30
   e1f48:	d105      	bne.n	e1f56 <_strtod_r+0x1b6>
   e1f4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1f4c:	1c5a      	adds	r2, r3, #1
   e1f4e:	9217      	str	r2, [sp, #92]	; 0x5c
   e1f50:	3001      	adds	r0, #1
   e1f52:	785b      	ldrb	r3, [r3, #1]
   e1f54:	e7f7      	b.n	e1f46 <_strtod_r+0x1a6>
   e1f56:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e1f5a:	2a08      	cmp	r2, #8
   e1f5c:	d843      	bhi.n	e1fe6 <_strtod_r+0x246>
   e1f5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e1f60:	9207      	str	r2, [sp, #28]
   e1f62:	4602      	mov	r2, r0
   e1f64:	2000      	movs	r0, #0
   e1f66:	4605      	mov	r5, r0
   e1f68:	3b30      	subs	r3, #48	; 0x30
   e1f6a:	f100 0101 	add.w	r1, r0, #1
   e1f6e:	d026      	beq.n	e1fbe <_strtod_r+0x21e>
   e1f70:	440a      	add	r2, r1
   e1f72:	eb05 0c00 	add.w	ip, r5, r0
   e1f76:	4629      	mov	r1, r5
   e1f78:	260a      	movs	r6, #10
   e1f7a:	4561      	cmp	r1, ip
   e1f7c:	d00e      	beq.n	e1f9c <_strtod_r+0x1fc>
   e1f7e:	3101      	adds	r1, #1
   e1f80:	f101 3eff 	add.w	lr, r1, #4294967295
   e1f84:	f1be 0f08 	cmp.w	lr, #8
   e1f88:	dc03      	bgt.n	e1f92 <_strtod_r+0x1f2>
   e1f8a:	9f05      	ldr	r7, [sp, #20]
   e1f8c:	4377      	muls	r7, r6
   e1f8e:	9705      	str	r7, [sp, #20]
   e1f90:	e7f3      	b.n	e1f7a <_strtod_r+0x1da>
   e1f92:	2910      	cmp	r1, #16
   e1f94:	bfd8      	it	le
   e1f96:	fb06 f808 	mulle.w	r8, r6, r8
   e1f9a:	e7ee      	b.n	e1f7a <_strtod_r+0x1da>
   e1f9c:	4428      	add	r0, r5
   e1f9e:	2808      	cmp	r0, #8
   e1fa0:	f100 0501 	add.w	r5, r0, #1
   e1fa4:	dc05      	bgt.n	e1fb2 <_strtod_r+0x212>
   e1fa6:	9805      	ldr	r0, [sp, #20]
   e1fa8:	210a      	movs	r1, #10
   e1faa:	fb01 3300 	mla	r3, r1, r0, r3
   e1fae:	9305      	str	r3, [sp, #20]
   e1fb0:	e004      	b.n	e1fbc <_strtod_r+0x21c>
   e1fb2:	2d10      	cmp	r5, #16
   e1fb4:	bfdc      	itt	le
   e1fb6:	210a      	movle	r1, #10
   e1fb8:	fb01 3808 	mlale	r8, r1, r8, r3
   e1fbc:	2100      	movs	r1, #0
   e1fbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1fc0:	1c58      	adds	r0, r3, #1
   e1fc2:	9017      	str	r0, [sp, #92]	; 0x5c
   e1fc4:	785b      	ldrb	r3, [r3, #1]
   e1fc6:	4608      	mov	r0, r1
   e1fc8:	e002      	b.n	e1fd0 <_strtod_r+0x230>
   e1fca:	9d04      	ldr	r5, [sp, #16]
   e1fcc:	4638      	mov	r0, r7
   e1fce:	463a      	mov	r2, r7
   e1fd0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e1fd4:	2909      	cmp	r1, #9
   e1fd6:	d9c7      	bls.n	e1f68 <_strtod_r+0x1c8>
   e1fd8:	2101      	movs	r1, #1
   e1fda:	2b65      	cmp	r3, #101	; 0x65
   e1fdc:	d001      	beq.n	e1fe2 <_strtod_r+0x242>
   e1fde:	2b45      	cmp	r3, #69	; 0x45
   e1fe0:	d151      	bne.n	e2086 <_strtod_r+0x2e6>
   e1fe2:	b96d      	cbnz	r5, e2000 <_strtod_r+0x260>
   e1fe4:	e004      	b.n	e1ff0 <_strtod_r+0x250>
   e1fe6:	2b65      	cmp	r3, #101	; 0x65
   e1fe8:	f040 84b3 	bne.w	e2952 <_strtod_r+0xbb2>
   e1fec:	2200      	movs	r2, #0
   e1fee:	2101      	movs	r1, #1
   e1ff0:	b928      	cbnz	r0, e1ffe <_strtod_r+0x25e>
   e1ff2:	9b06      	ldr	r3, [sp, #24]
   e1ff4:	2b00      	cmp	r3, #0
   e1ff6:	f000 8095 	beq.w	e2124 <_strtod_r+0x384>
   e1ffa:	4605      	mov	r5, r0
   e1ffc:	e000      	b.n	e2000 <_strtod_r+0x260>
   e1ffe:	2500      	movs	r5, #0
   e2000:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e2002:	1c63      	adds	r3, r4, #1
   e2004:	9317      	str	r3, [sp, #92]	; 0x5c
   e2006:	7863      	ldrb	r3, [r4, #1]
   e2008:	2b2b      	cmp	r3, #43	; 0x2b
   e200a:	d006      	beq.n	e201a <_strtod_r+0x27a>
   e200c:	2b2d      	cmp	r3, #45	; 0x2d
   e200e:	d002      	beq.n	e2016 <_strtod_r+0x276>
   e2010:	2600      	movs	r6, #0
   e2012:	9603      	str	r6, [sp, #12]
   e2014:	e006      	b.n	e2024 <_strtod_r+0x284>
   e2016:	2301      	movs	r3, #1
   e2018:	e000      	b.n	e201c <_strtod_r+0x27c>
   e201a:	2300      	movs	r3, #0
   e201c:	9303      	str	r3, [sp, #12]
   e201e:	1ca3      	adds	r3, r4, #2
   e2020:	9317      	str	r3, [sp, #92]	; 0x5c
   e2022:	78a3      	ldrb	r3, [r4, #2]
   e2024:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e2028:	2e09      	cmp	r6, #9
   e202a:	d82b      	bhi.n	e2084 <_strtod_r+0x2e4>
   e202c:	2b30      	cmp	r3, #48	; 0x30
   e202e:	d104      	bne.n	e203a <_strtod_r+0x29a>
   e2030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2032:	1c5e      	adds	r6, r3, #1
   e2034:	9617      	str	r6, [sp, #92]	; 0x5c
   e2036:	785b      	ldrb	r3, [r3, #1]
   e2038:	e7f8      	b.n	e202c <_strtod_r+0x28c>
   e203a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e203e:	2e08      	cmp	r6, #8
   e2040:	d821      	bhi.n	e2086 <_strtod_r+0x2e6>
   e2042:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e2046:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2048:	f04f 0c0a 	mov.w	ip, #10
   e204c:	461f      	mov	r7, r3
   e204e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2050:	1c5e      	adds	r6, r3, #1
   e2052:	9617      	str	r6, [sp, #92]	; 0x5c
   e2054:	785b      	ldrb	r3, [r3, #1]
   e2056:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e205a:	f1b9 0f09 	cmp.w	r9, #9
   e205e:	d804      	bhi.n	e206a <_strtod_r+0x2ca>
   e2060:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e2064:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e2068:	e7f1      	b.n	e204e <_strtod_r+0x2ae>
   e206a:	1bf6      	subs	r6, r6, r7
   e206c:	2e08      	cmp	r6, #8
   e206e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e2072:	dc02      	bgt.n	e207a <_strtod_r+0x2da>
   e2074:	45f1      	cmp	r9, lr
   e2076:	bfa8      	it	ge
   e2078:	46f1      	movge	r9, lr
   e207a:	9e03      	ldr	r6, [sp, #12]
   e207c:	b12e      	cbz	r6, e208a <_strtod_r+0x2ea>
   e207e:	f1c9 0900 	rsb	r9, r9, #0
   e2082:	e002      	b.n	e208a <_strtod_r+0x2ea>
   e2084:	9417      	str	r4, [sp, #92]	; 0x5c
   e2086:	f04f 0900 	mov.w	r9, #0
   e208a:	2d00      	cmp	r5, #0
   e208c:	d153      	bne.n	e2136 <_strtod_r+0x396>
   e208e:	2800      	cmp	r0, #0
   e2090:	f040 8451 	bne.w	e2936 <_strtod_r+0xb96>
   e2094:	9a06      	ldr	r2, [sp, #24]
   e2096:	2a00      	cmp	r2, #0
   e2098:	f040 844d 	bne.w	e2936 <_strtod_r+0xb96>
   e209c:	2900      	cmp	r1, #0
   e209e:	d141      	bne.n	e2124 <_strtod_r+0x384>
   e20a0:	2b4e      	cmp	r3, #78	; 0x4e
   e20a2:	d020      	beq.n	e20e6 <_strtod_r+0x346>
   e20a4:	dc02      	bgt.n	e20ac <_strtod_r+0x30c>
   e20a6:	2b49      	cmp	r3, #73	; 0x49
   e20a8:	d00a      	beq.n	e20c0 <_strtod_r+0x320>
   e20aa:	e03b      	b.n	e2124 <_strtod_r+0x384>
   e20ac:	2b69      	cmp	r3, #105	; 0x69
   e20ae:	d007      	beq.n	e20c0 <_strtod_r+0x320>
   e20b0:	2b6e      	cmp	r3, #110	; 0x6e
   e20b2:	d018      	beq.n	e20e6 <_strtod_r+0x346>
   e20b4:	e036      	b.n	e2124 <_strtod_r+0x384>
   e20b6:	bf00      	nop
   e20b8:	000e5654 	.word	0x000e5654
   e20bc:	7ff00000 	.word	0x7ff00000
   e20c0:	49a8      	ldr	r1, [pc, #672]	; (e2364 <_strtod_r+0x5c4>)
   e20c2:	a817      	add	r0, sp, #92	; 0x5c
   e20c4:	f001 fa60 	bl	e3588 <__match>
   e20c8:	b360      	cbz	r0, e2124 <_strtod_r+0x384>
   e20ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e20cc:	49a6      	ldr	r1, [pc, #664]	; (e2368 <_strtod_r+0x5c8>)
   e20ce:	3b01      	subs	r3, #1
   e20d0:	a817      	add	r0, sp, #92	; 0x5c
   e20d2:	9317      	str	r3, [sp, #92]	; 0x5c
   e20d4:	f001 fa58 	bl	e3588 <__match>
   e20d8:	b910      	cbnz	r0, e20e0 <_strtod_r+0x340>
   e20da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e20dc:	3301      	adds	r3, #1
   e20de:	9317      	str	r3, [sp, #92]	; 0x5c
   e20e0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e2384 <_strtod_r+0x5e4>
   e20e4:	e01a      	b.n	e211c <_strtod_r+0x37c>
   e20e6:	49a1      	ldr	r1, [pc, #644]	; (e236c <_strtod_r+0x5cc>)
   e20e8:	a817      	add	r0, sp, #92	; 0x5c
   e20ea:	f001 fa4d 	bl	e3588 <__match>
   e20ee:	b1c8      	cbz	r0, e2124 <_strtod_r+0x384>
   e20f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e20f2:	781b      	ldrb	r3, [r3, #0]
   e20f4:	2b28      	cmp	r3, #40	; 0x28
   e20f6:	d10f      	bne.n	e2118 <_strtod_r+0x378>
   e20f8:	aa1a      	add	r2, sp, #104	; 0x68
   e20fa:	499d      	ldr	r1, [pc, #628]	; (e2370 <_strtod_r+0x5d0>)
   e20fc:	a817      	add	r0, sp, #92	; 0x5c
   e20fe:	f001 fa56 	bl	e35ae <__hexnan>
   e2102:	2805      	cmp	r0, #5
   e2104:	d108      	bne.n	e2118 <_strtod_r+0x378>
   e2106:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e2108:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e210c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e2110:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e2114:	f000 bc0f 	b.w	e2936 <_strtod_r+0xb96>
   e2118:	f8df b26c 	ldr.w	fp, [pc, #620]	; e2388 <_strtod_r+0x5e8>
   e211c:	f04f 0a00 	mov.w	sl, #0
   e2120:	f000 bc09 	b.w	e2936 <_strtod_r+0xb96>
   e2124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e2126:	9417      	str	r4, [sp, #92]	; 0x5c
   e2128:	2b00      	cmp	r3, #0
   e212a:	f000 840f 	beq.w	e294c <_strtod_r+0xbac>
   e212e:	2300      	movs	r3, #0
   e2130:	930c      	str	r3, [sp, #48]	; 0x30
   e2132:	f000 bc02 	b.w	e293a <_strtod_r+0xb9a>
   e2136:	9b04      	ldr	r3, [sp, #16]
   e2138:	9805      	ldr	r0, [sp, #20]
   e213a:	2b00      	cmp	r3, #0
   e213c:	bf08      	it	eq
   e213e:	462b      	moveq	r3, r5
   e2140:	2d10      	cmp	r5, #16
   e2142:	462c      	mov	r4, r5
   e2144:	ebc2 0909 	rsb	r9, r2, r9
   e2148:	bfa8      	it	ge
   e214a:	2410      	movge	r4, #16
   e214c:	9304      	str	r3, [sp, #16]
   e214e:	f7fd ff19 	bl	dff84 <__aeabi_ui2d>
   e2152:	2c09      	cmp	r4, #9
   e2154:	4682      	mov	sl, r0
   e2156:	468b      	mov	fp, r1
   e2158:	dd13      	ble.n	e2182 <_strtod_r+0x3e2>
   e215a:	4b86      	ldr	r3, [pc, #536]	; (e2374 <_strtod_r+0x5d4>)
   e215c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e2160:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e2164:	f7fd ff84 	bl	e0070 <__aeabi_dmul>
   e2168:	4606      	mov	r6, r0
   e216a:	4640      	mov	r0, r8
   e216c:	460f      	mov	r7, r1
   e216e:	f7fd ff09 	bl	dff84 <__aeabi_ui2d>
   e2172:	4602      	mov	r2, r0
   e2174:	460b      	mov	r3, r1
   e2176:	4630      	mov	r0, r6
   e2178:	4639      	mov	r1, r7
   e217a:	f7fd fdc7 	bl	dfd0c <__adddf3>
   e217e:	4682      	mov	sl, r0
   e2180:	468b      	mov	fp, r1
   e2182:	2d0f      	cmp	r5, #15
   e2184:	dc36      	bgt.n	e21f4 <_strtod_r+0x454>
   e2186:	f1b9 0f00 	cmp.w	r9, #0
   e218a:	f000 83d4 	beq.w	e2936 <_strtod_r+0xb96>
   e218e:	dd24      	ble.n	e21da <_strtod_r+0x43a>
   e2190:	f1b9 0f16 	cmp.w	r9, #22
   e2194:	dc07      	bgt.n	e21a6 <_strtod_r+0x406>
   e2196:	4d77      	ldr	r5, [pc, #476]	; (e2374 <_strtod_r+0x5d4>)
   e2198:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e219c:	4652      	mov	r2, sl
   e219e:	465b      	mov	r3, fp
   e21a0:	e9d9 0100 	ldrd	r0, r1, [r9]
   e21a4:	e014      	b.n	e21d0 <_strtod_r+0x430>
   e21a6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e21aa:	4599      	cmp	r9, r3
   e21ac:	dc22      	bgt.n	e21f4 <_strtod_r+0x454>
   e21ae:	4c71      	ldr	r4, [pc, #452]	; (e2374 <_strtod_r+0x5d4>)
   e21b0:	f1c5 050f 	rsb	r5, r5, #15
   e21b4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e21b8:	ebc5 0509 	rsb	r5, r5, r9
   e21bc:	4652      	mov	r2, sl
   e21be:	465b      	mov	r3, fp
   e21c0:	e9d1 0100 	ldrd	r0, r1, [r1]
   e21c4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e21c8:	f7fd ff52 	bl	e0070 <__aeabi_dmul>
   e21cc:	e9d4 2300 	ldrd	r2, r3, [r4]
   e21d0:	f7fd ff4e 	bl	e0070 <__aeabi_dmul>
   e21d4:	4682      	mov	sl, r0
   e21d6:	468b      	mov	fp, r1
   e21d8:	e3ad      	b.n	e2936 <_strtod_r+0xb96>
   e21da:	f119 0f16 	cmn.w	r9, #22
   e21de:	db09      	blt.n	e21f4 <_strtod_r+0x454>
   e21e0:	4d64      	ldr	r5, [pc, #400]	; (e2374 <_strtod_r+0x5d4>)
   e21e2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e21e6:	e9d9 2300 	ldrd	r2, r3, [r9]
   e21ea:	4650      	mov	r0, sl
   e21ec:	4659      	mov	r1, fp
   e21ee:	f7fe f869 	bl	e02c4 <__aeabi_ddiv>
   e21f2:	e7ef      	b.n	e21d4 <_strtod_r+0x434>
   e21f4:	1b2c      	subs	r4, r5, r4
   e21f6:	444c      	add	r4, r9
   e21f8:	2c00      	cmp	r4, #0
   e21fa:	dd57      	ble.n	e22ac <_strtod_r+0x50c>
   e21fc:	f014 010f 	ands.w	r1, r4, #15
   e2200:	d00a      	beq.n	e2218 <_strtod_r+0x478>
   e2202:	4b5c      	ldr	r3, [pc, #368]	; (e2374 <_strtod_r+0x5d4>)
   e2204:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e2208:	4652      	mov	r2, sl
   e220a:	465b      	mov	r3, fp
   e220c:	e9d1 0100 	ldrd	r0, r1, [r1]
   e2210:	f7fd ff2e 	bl	e0070 <__aeabi_dmul>
   e2214:	4682      	mov	sl, r0
   e2216:	468b      	mov	fp, r1
   e2218:	f034 040f 	bics.w	r4, r4, #15
   e221c:	f000 80b8 	beq.w	e2390 <_strtod_r+0x5f0>
   e2220:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e2224:	dd0b      	ble.n	e223e <_strtod_r+0x49e>
   e2226:	2400      	movs	r4, #0
   e2228:	4625      	mov	r5, r4
   e222a:	9405      	str	r4, [sp, #20]
   e222c:	9404      	str	r4, [sp, #16]
   e222e:	9a02      	ldr	r2, [sp, #8]
   e2230:	f8df b150 	ldr.w	fp, [pc, #336]	; e2384 <_strtod_r+0x5e4>
   e2234:	2322      	movs	r3, #34	; 0x22
   e2236:	6013      	str	r3, [r2, #0]
   e2238:	f04f 0a00 	mov.w	sl, #0
   e223c:	e187      	b.n	e254e <_strtod_r+0x7ae>
   e223e:	4e4e      	ldr	r6, [pc, #312]	; (e2378 <_strtod_r+0x5d8>)
   e2240:	2300      	movs	r3, #0
   e2242:	1124      	asrs	r4, r4, #4
   e2244:	4650      	mov	r0, sl
   e2246:	4659      	mov	r1, fp
   e2248:	4698      	mov	r8, r3
   e224a:	4637      	mov	r7, r6
   e224c:	2c01      	cmp	r4, #1
   e224e:	dd0b      	ble.n	e2268 <_strtod_r+0x4c8>
   e2250:	07e2      	lsls	r2, r4, #31
   e2252:	d504      	bpl.n	e225e <_strtod_r+0x4be>
   e2254:	e9d6 2300 	ldrd	r2, r3, [r6]
   e2258:	f7fd ff0a 	bl	e0070 <__aeabi_dmul>
   e225c:	2301      	movs	r3, #1
   e225e:	f108 0801 	add.w	r8, r8, #1
   e2262:	1064      	asrs	r4, r4, #1
   e2264:	3608      	adds	r6, #8
   e2266:	e7f1      	b.n	e224c <_strtod_r+0x4ac>
   e2268:	b10b      	cbz	r3, e226e <_strtod_r+0x4ce>
   e226a:	4682      	mov	sl, r0
   e226c:	468b      	mov	fp, r1
   e226e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e2272:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e2276:	4652      	mov	r2, sl
   e2278:	465b      	mov	r3, fp
   e227a:	e9d7 0100 	ldrd	r0, r1, [r7]
   e227e:	f7fd fef7 	bl	e0070 <__aeabi_dmul>
   e2282:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e2286:	468b      	mov	fp, r1
   e2288:	460a      	mov	r2, r1
   e228a:	0d1b      	lsrs	r3, r3, #20
   e228c:	493b      	ldr	r1, [pc, #236]	; (e237c <_strtod_r+0x5dc>)
   e228e:	051b      	lsls	r3, r3, #20
   e2290:	428b      	cmp	r3, r1
   e2292:	4682      	mov	sl, r0
   e2294:	d8c7      	bhi.n	e2226 <_strtod_r+0x486>
   e2296:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e229a:	428b      	cmp	r3, r1
   e229c:	bf86      	itte	hi
   e229e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e238c <_strtod_r+0x5ec>
   e22a2:	f04f 3aff 	movhi.w	sl, #4294967295
   e22a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e22aa:	e071      	b.n	e2390 <_strtod_r+0x5f0>
   e22ac:	d070      	beq.n	e2390 <_strtod_r+0x5f0>
   e22ae:	4264      	negs	r4, r4
   e22b0:	f014 020f 	ands.w	r2, r4, #15
   e22b4:	d00a      	beq.n	e22cc <_strtod_r+0x52c>
   e22b6:	4b2f      	ldr	r3, [pc, #188]	; (e2374 <_strtod_r+0x5d4>)
   e22b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e22bc:	4650      	mov	r0, sl
   e22be:	4659      	mov	r1, fp
   e22c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e22c4:	f7fd fffe 	bl	e02c4 <__aeabi_ddiv>
   e22c8:	4682      	mov	sl, r0
   e22ca:	468b      	mov	fp, r1
   e22cc:	1124      	asrs	r4, r4, #4
   e22ce:	d05f      	beq.n	e2390 <_strtod_r+0x5f0>
   e22d0:	2c1f      	cmp	r4, #31
   e22d2:	dd04      	ble.n	e22de <_strtod_r+0x53e>
   e22d4:	2400      	movs	r4, #0
   e22d6:	4625      	mov	r5, r4
   e22d8:	9405      	str	r4, [sp, #20]
   e22da:	9404      	str	r4, [sp, #16]
   e22dc:	e130      	b.n	e2540 <_strtod_r+0x7a0>
   e22de:	f014 0f10 	tst.w	r4, #16
   e22e2:	bf0c      	ite	eq
   e22e4:	2300      	moveq	r3, #0
   e22e6:	236a      	movne	r3, #106	; 0x6a
   e22e8:	4e25      	ldr	r6, [pc, #148]	; (e2380 <_strtod_r+0x5e0>)
   e22ea:	9303      	str	r3, [sp, #12]
   e22ec:	4650      	mov	r0, sl
   e22ee:	4659      	mov	r1, fp
   e22f0:	2300      	movs	r3, #0
   e22f2:	2c00      	cmp	r4, #0
   e22f4:	dd09      	ble.n	e230a <_strtod_r+0x56a>
   e22f6:	07e2      	lsls	r2, r4, #31
   e22f8:	d504      	bpl.n	e2304 <_strtod_r+0x564>
   e22fa:	e9d6 2300 	ldrd	r2, r3, [r6]
   e22fe:	f7fd feb7 	bl	e0070 <__aeabi_dmul>
   e2302:	2301      	movs	r3, #1
   e2304:	1064      	asrs	r4, r4, #1
   e2306:	3608      	adds	r6, #8
   e2308:	e7f3      	b.n	e22f2 <_strtod_r+0x552>
   e230a:	b10b      	cbz	r3, e2310 <_strtod_r+0x570>
   e230c:	4682      	mov	sl, r0
   e230e:	468b      	mov	fp, r1
   e2310:	9b03      	ldr	r3, [sp, #12]
   e2312:	b1eb      	cbz	r3, e2350 <_strtod_r+0x5b0>
   e2314:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e2318:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e231c:	2b00      	cmp	r3, #0
   e231e:	4659      	mov	r1, fp
   e2320:	dd16      	ble.n	e2350 <_strtod_r+0x5b0>
   e2322:	2b1f      	cmp	r3, #31
   e2324:	dd0e      	ble.n	e2344 <_strtod_r+0x5a4>
   e2326:	2b34      	cmp	r3, #52	; 0x34
   e2328:	bfde      	ittt	le
   e232a:	3b20      	suble	r3, #32
   e232c:	f04f 32ff 	movle.w	r2, #4294967295
   e2330:	fa02 f303 	lslle.w	r3, r2, r3
   e2334:	f04f 0a00 	mov.w	sl, #0
   e2338:	bfcc      	ite	gt
   e233a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e233e:	ea03 0b01 	andle.w	fp, r3, r1
   e2342:	e005      	b.n	e2350 <_strtod_r+0x5b0>
   e2344:	f04f 32ff 	mov.w	r2, #4294967295
   e2348:	fa02 f303 	lsl.w	r3, r2, r3
   e234c:	ea03 0a0a 	and.w	sl, r3, sl
   e2350:	2200      	movs	r2, #0
   e2352:	2300      	movs	r3, #0
   e2354:	4650      	mov	r0, sl
   e2356:	4659      	mov	r1, fp
   e2358:	f7fe f8f2 	bl	e0540 <__aeabi_dcmpeq>
   e235c:	2800      	cmp	r0, #0
   e235e:	d1b9      	bne.n	e22d4 <_strtod_r+0x534>
   e2360:	e018      	b.n	e2394 <_strtod_r+0x5f4>
   e2362:	bf00      	nop
   e2364:	000e4e85 	.word	0x000e4e85
   e2368:	000e567c 	.word	0x000e567c
   e236c:	000e56b9 	.word	0x000e56b9
   e2370:	000e5668 	.word	0x000e5668
   e2374:	000e5918 	.word	0x000e5918
   e2378:	000e59e0 	.word	0x000e59e0
   e237c:	7ca00000 	.word	0x7ca00000
   e2380:	000e5688 	.word	0x000e5688
   e2384:	7ff00000 	.word	0x7ff00000
   e2388:	fff80000 	.word	0xfff80000
   e238c:	7fefffff 	.word	0x7fefffff
   e2390:	2300      	movs	r3, #0
   e2392:	9303      	str	r3, [sp, #12]
   e2394:	9b05      	ldr	r3, [sp, #20]
   e2396:	9300      	str	r3, [sp, #0]
   e2398:	9a04      	ldr	r2, [sp, #16]
   e239a:	9907      	ldr	r1, [sp, #28]
   e239c:	9802      	ldr	r0, [sp, #8]
   e239e:	462b      	mov	r3, r5
   e23a0:	f001 faff 	bl	e39a2 <__s2b>
   e23a4:	9005      	str	r0, [sp, #20]
   e23a6:	2800      	cmp	r0, #0
   e23a8:	f43f af3d 	beq.w	e2226 <_strtod_r+0x486>
   e23ac:	f1b9 0f00 	cmp.w	r9, #0
   e23b0:	f1c9 0300 	rsb	r3, r9, #0
   e23b4:	bfa8      	it	ge
   e23b6:	2300      	movge	r3, #0
   e23b8:	930d      	str	r3, [sp, #52]	; 0x34
   e23ba:	2400      	movs	r4, #0
   e23bc:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e23c0:	9312      	str	r3, [sp, #72]	; 0x48
   e23c2:	4625      	mov	r5, r4
   e23c4:	9b05      	ldr	r3, [sp, #20]
   e23c6:	9802      	ldr	r0, [sp, #8]
   e23c8:	6859      	ldr	r1, [r3, #4]
   e23ca:	f001 fa63 	bl	e3894 <_Balloc>
   e23ce:	9004      	str	r0, [sp, #16]
   e23d0:	2800      	cmp	r0, #0
   e23d2:	f43f af2c 	beq.w	e222e <_strtod_r+0x48e>
   e23d6:	9b05      	ldr	r3, [sp, #20]
   e23d8:	691a      	ldr	r2, [r3, #16]
   e23da:	3202      	adds	r2, #2
   e23dc:	f103 010c 	add.w	r1, r3, #12
   e23e0:	0092      	lsls	r2, r2, #2
   e23e2:	300c      	adds	r0, #12
   e23e4:	f7fe fc9d 	bl	e0d22 <memcpy>
   e23e8:	aa1a      	add	r2, sp, #104	; 0x68
   e23ea:	a919      	add	r1, sp, #100	; 0x64
   e23ec:	ec4b ab10 	vmov	d0, sl, fp
   e23f0:	9802      	ldr	r0, [sp, #8]
   e23f2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e23f6:	f001 fd88 	bl	e3f0a <__d2b>
   e23fa:	9018      	str	r0, [sp, #96]	; 0x60
   e23fc:	2800      	cmp	r0, #0
   e23fe:	f43f af16 	beq.w	e222e <_strtod_r+0x48e>
   e2402:	2101      	movs	r1, #1
   e2404:	9802      	ldr	r0, [sp, #8]
   e2406:	f001 fb57 	bl	e3ab8 <__i2b>
   e240a:	4605      	mov	r5, r0
   e240c:	2800      	cmp	r0, #0
   e240e:	f43f af0e 	beq.w	e222e <_strtod_r+0x48e>
   e2412:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e2414:	9903      	ldr	r1, [sp, #12]
   e2416:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e2418:	2b00      	cmp	r3, #0
   e241a:	bfad      	iteet	ge
   e241c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e241e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e2420:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e2424:	eb02 0803 	addge.w	r8, r2, r3
   e2428:	bfb8      	it	lt
   e242a:	1ad2      	sublt	r2, r2, r3
   e242c:	eba3 0301 	sub.w	r3, r3, r1
   e2430:	4433      	add	r3, r6
   e2432:	49b5      	ldr	r1, [pc, #724]	; (e2708 <_strtod_r+0x968>)
   e2434:	bfa8      	it	ge
   e2436:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e2438:	3b01      	subs	r3, #1
   e243a:	428b      	cmp	r3, r1
   e243c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e2440:	f280 808a 	bge.w	e2558 <_strtod_r+0x7b8>
   e2444:	1ac9      	subs	r1, r1, r3
   e2446:	291f      	cmp	r1, #31
   e2448:	bfc8      	it	gt
   e244a:	4fb0      	ldrgt	r7, [pc, #704]	; (e270c <_strtod_r+0x96c>)
   e244c:	f04f 0901 	mov.w	r9, #1
   e2450:	bfd4      	ite	le
   e2452:	fa09 f301 	lslle.w	r3, r9, r1
   e2456:	1aff      	subgt	r7, r7, r3
   e2458:	eba6 0601 	sub.w	r6, r6, r1
   e245c:	bfd9      	ittee	le
   e245e:	9306      	strle	r3, [sp, #24]
   e2460:	2700      	movle	r7, #0
   e2462:	fa09 f707 	lslgt.w	r7, r9, r7
   e2466:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e246a:	eb08 0906 	add.w	r9, r8, r6
   e246e:	9b03      	ldr	r3, [sp, #12]
   e2470:	45c8      	cmp	r8, r9
   e2472:	4416      	add	r6, r2
   e2474:	441e      	add	r6, r3
   e2476:	4643      	mov	r3, r8
   e2478:	bfa8      	it	ge
   e247a:	464b      	movge	r3, r9
   e247c:	42b3      	cmp	r3, r6
   e247e:	bfa8      	it	ge
   e2480:	4633      	movge	r3, r6
   e2482:	2b00      	cmp	r3, #0
   e2484:	bfc2      	ittt	gt
   e2486:	ebc3 0909 	rsbgt	r9, r3, r9
   e248a:	1af6      	subgt	r6, r6, r3
   e248c:	ebc3 0808 	rsbgt	r8, r3, r8
   e2490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e2492:	2b00      	cmp	r3, #0
   e2494:	d164      	bne.n	e2560 <_strtod_r+0x7c0>
   e2496:	f1b9 0f00 	cmp.w	r9, #0
   e249a:	dc7a      	bgt.n	e2592 <_strtod_r+0x7f2>
   e249c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e249e:	2b00      	cmp	r3, #0
   e24a0:	f040 8081 	bne.w	e25a6 <_strtod_r+0x806>
   e24a4:	2e00      	cmp	r6, #0
   e24a6:	f300 8088 	bgt.w	e25ba <_strtod_r+0x81a>
   e24aa:	f1b8 0f00 	cmp.w	r8, #0
   e24ae:	f300 808e 	bgt.w	e25ce <_strtod_r+0x82e>
   e24b2:	9a04      	ldr	r2, [sp, #16]
   e24b4:	9918      	ldr	r1, [sp, #96]	; 0x60
   e24b6:	9802      	ldr	r0, [sp, #8]
   e24b8:	f001 fc53 	bl	e3d62 <__mdiff>
   e24bc:	4604      	mov	r4, r0
   e24be:	2800      	cmp	r0, #0
   e24c0:	f43f aeb5 	beq.w	e222e <_strtod_r+0x48e>
   e24c4:	68c3      	ldr	r3, [r0, #12]
   e24c6:	9307      	str	r3, [sp, #28]
   e24c8:	2300      	movs	r3, #0
   e24ca:	60c3      	str	r3, [r0, #12]
   e24cc:	4629      	mov	r1, r5
   e24ce:	f001 fc2c 	bl	e3d2a <__mcmp>
   e24d2:	2800      	cmp	r0, #0
   e24d4:	f280 8089 	bge.w	e25ea <_strtod_r+0x84a>
   e24d8:	9b07      	ldr	r3, [sp, #28]
   e24da:	2b00      	cmp	r3, #0
   e24dc:	f040 8204 	bne.w	e28e8 <_strtod_r+0xb48>
   e24e0:	f1ba 0f00 	cmp.w	sl, #0
   e24e4:	f040 8200 	bne.w	e28e8 <_strtod_r+0xb48>
   e24e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e24ec:	2b00      	cmp	r3, #0
   e24ee:	f040 81fb 	bne.w	e28e8 <_strtod_r+0xb48>
   e24f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e24f6:	0d1b      	lsrs	r3, r3, #20
   e24f8:	051b      	lsls	r3, r3, #20
   e24fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e24fe:	f240 81f3 	bls.w	e28e8 <_strtod_r+0xb48>
   e2502:	6963      	ldr	r3, [r4, #20]
   e2504:	2b00      	cmp	r3, #0
   e2506:	d06c      	beq.n	e25e2 <_strtod_r+0x842>
   e2508:	4621      	mov	r1, r4
   e250a:	2201      	movs	r2, #1
   e250c:	9802      	ldr	r0, [sp, #8]
   e250e:	f001 fbbb 	bl	e3c88 <__lshift>
   e2512:	4629      	mov	r1, r5
   e2514:	4604      	mov	r4, r0
   e2516:	f001 fc08 	bl	e3d2a <__mcmp>
   e251a:	2800      	cmp	r0, #0
   e251c:	f340 81e4 	ble.w	e28e8 <_strtod_r+0xb48>
   e2520:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2524:	9a03      	ldr	r2, [sp, #12]
   e2526:	0d1b      	lsrs	r3, r3, #20
   e2528:	051b      	lsls	r3, r3, #20
   e252a:	2a00      	cmp	r2, #0
   e252c:	f000 808c 	beq.w	e2648 <_strtod_r+0x8a8>
   e2530:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e2534:	f300 8088 	bgt.w	e2648 <_strtod_r+0x8a8>
   e2538:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e253c:	f300 81d6 	bgt.w	e28ec <_strtod_r+0xb4c>
   e2540:	9a02      	ldr	r2, [sp, #8]
   e2542:	2322      	movs	r3, #34	; 0x22
   e2544:	f04f 0a00 	mov.w	sl, #0
   e2548:	f04f 0b00 	mov.w	fp, #0
   e254c:	6013      	str	r3, [r2, #0]
   e254e:	9b05      	ldr	r3, [sp, #20]
   e2550:	2b00      	cmp	r3, #0
   e2552:	f040 81dc 	bne.w	e290e <_strtod_r+0xb6e>
   e2556:	e1ee      	b.n	e2936 <_strtod_r+0xb96>
   e2558:	2301      	movs	r3, #1
   e255a:	2700      	movs	r7, #0
   e255c:	9306      	str	r3, [sp, #24]
   e255e:	e784      	b.n	e246a <_strtod_r+0x6ca>
   e2560:	4629      	mov	r1, r5
   e2562:	461a      	mov	r2, r3
   e2564:	9802      	ldr	r0, [sp, #8]
   e2566:	f001 fb41 	bl	e3bec <__pow5mult>
   e256a:	4605      	mov	r5, r0
   e256c:	2800      	cmp	r0, #0
   e256e:	f43f ae5e 	beq.w	e222e <_strtod_r+0x48e>
   e2572:	4601      	mov	r1, r0
   e2574:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e2576:	9802      	ldr	r0, [sp, #8]
   e2578:	f001 faa7 	bl	e3aca <__multiply>
   e257c:	9007      	str	r0, [sp, #28]
   e257e:	2800      	cmp	r0, #0
   e2580:	f43f ae55 	beq.w	e222e <_strtod_r+0x48e>
   e2584:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2586:	9802      	ldr	r0, [sp, #8]
   e2588:	f001 f9b9 	bl	e38fe <_Bfree>
   e258c:	9b07      	ldr	r3, [sp, #28]
   e258e:	9318      	str	r3, [sp, #96]	; 0x60
   e2590:	e781      	b.n	e2496 <_strtod_r+0x6f6>
   e2592:	464a      	mov	r2, r9
   e2594:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2596:	9802      	ldr	r0, [sp, #8]
   e2598:	f001 fb76 	bl	e3c88 <__lshift>
   e259c:	9018      	str	r0, [sp, #96]	; 0x60
   e259e:	2800      	cmp	r0, #0
   e25a0:	f47f af7c 	bne.w	e249c <_strtod_r+0x6fc>
   e25a4:	e643      	b.n	e222e <_strtod_r+0x48e>
   e25a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e25a8:	9904      	ldr	r1, [sp, #16]
   e25aa:	9802      	ldr	r0, [sp, #8]
   e25ac:	f001 fb1e 	bl	e3bec <__pow5mult>
   e25b0:	9004      	str	r0, [sp, #16]
   e25b2:	2800      	cmp	r0, #0
   e25b4:	f47f af76 	bne.w	e24a4 <_strtod_r+0x704>
   e25b8:	e639      	b.n	e222e <_strtod_r+0x48e>
   e25ba:	4632      	mov	r2, r6
   e25bc:	9904      	ldr	r1, [sp, #16]
   e25be:	9802      	ldr	r0, [sp, #8]
   e25c0:	f001 fb62 	bl	e3c88 <__lshift>
   e25c4:	9004      	str	r0, [sp, #16]
   e25c6:	2800      	cmp	r0, #0
   e25c8:	f47f af6f 	bne.w	e24aa <_strtod_r+0x70a>
   e25cc:	e62f      	b.n	e222e <_strtod_r+0x48e>
   e25ce:	4629      	mov	r1, r5
   e25d0:	4642      	mov	r2, r8
   e25d2:	9802      	ldr	r0, [sp, #8]
   e25d4:	f001 fb58 	bl	e3c88 <__lshift>
   e25d8:	4605      	mov	r5, r0
   e25da:	2800      	cmp	r0, #0
   e25dc:	f47f af69 	bne.w	e24b2 <_strtod_r+0x712>
   e25e0:	e625      	b.n	e222e <_strtod_r+0x48e>
   e25e2:	6923      	ldr	r3, [r4, #16]
   e25e4:	2b01      	cmp	r3, #1
   e25e6:	dc8f      	bgt.n	e2508 <_strtod_r+0x768>
   e25e8:	e17e      	b.n	e28e8 <_strtod_r+0xb48>
   e25ea:	d161      	bne.n	e26b0 <_strtod_r+0x910>
   e25ec:	9a07      	ldr	r2, [sp, #28]
   e25ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e25f2:	b322      	cbz	r2, e263e <_strtod_r+0x89e>
   e25f4:	4946      	ldr	r1, [pc, #280]	; (e2710 <_strtod_r+0x970>)
   e25f6:	428b      	cmp	r3, r1
   e25f8:	465a      	mov	r2, fp
   e25fa:	d12e      	bne.n	e265a <_strtod_r+0x8ba>
   e25fc:	9b03      	ldr	r3, [sp, #12]
   e25fe:	4651      	mov	r1, sl
   e2600:	b163      	cbz	r3, e261c <_strtod_r+0x87c>
   e2602:	4b44      	ldr	r3, [pc, #272]	; (e2714 <_strtod_r+0x974>)
   e2604:	4013      	ands	r3, r2
   e2606:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e260a:	d807      	bhi.n	e261c <_strtod_r+0x87c>
   e260c:	0d1b      	lsrs	r3, r3, #20
   e260e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e2612:	f04f 30ff 	mov.w	r0, #4294967295
   e2616:	fa00 f303 	lsl.w	r3, r0, r3
   e261a:	e001      	b.n	e2620 <_strtod_r+0x880>
   e261c:	f04f 33ff 	mov.w	r3, #4294967295
   e2620:	428b      	cmp	r3, r1
   e2622:	d11a      	bne.n	e265a <_strtod_r+0x8ba>
   e2624:	493c      	ldr	r1, [pc, #240]	; (e2718 <_strtod_r+0x978>)
   e2626:	428a      	cmp	r2, r1
   e2628:	d102      	bne.n	e2630 <_strtod_r+0x890>
   e262a:	3301      	adds	r3, #1
   e262c:	f43f adff 	beq.w	e222e <_strtod_r+0x48e>
   e2630:	4b38      	ldr	r3, [pc, #224]	; (e2714 <_strtod_r+0x974>)
   e2632:	4013      	ands	r3, r2
   e2634:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e2638:	f04f 0a00 	mov.w	sl, #0
   e263c:	e154      	b.n	e28e8 <_strtod_r+0xb48>
   e263e:	b963      	cbnz	r3, e265a <_strtod_r+0x8ba>
   e2640:	f1ba 0f00 	cmp.w	sl, #0
   e2644:	d109      	bne.n	e265a <_strtod_r+0x8ba>
   e2646:	e76b      	b.n	e2520 <_strtod_r+0x780>
   e2648:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e264c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e2650:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e2654:	f04f 3aff 	mov.w	sl, #4294967295
   e2658:	e146      	b.n	e28e8 <_strtod_r+0xb48>
   e265a:	b117      	cbz	r7, e2662 <_strtod_r+0x8c2>
   e265c:	ea17 0f0b 	tst.w	r7, fp
   e2660:	e002      	b.n	e2668 <_strtod_r+0x8c8>
   e2662:	9b06      	ldr	r3, [sp, #24]
   e2664:	ea13 0f0a 	tst.w	r3, sl
   e2668:	f000 813e 	beq.w	e28e8 <_strtod_r+0xb48>
   e266c:	9b07      	ldr	r3, [sp, #28]
   e266e:	9a03      	ldr	r2, [sp, #12]
   e2670:	4650      	mov	r0, sl
   e2672:	4659      	mov	r1, fp
   e2674:	b153      	cbz	r3, e268c <_strtod_r+0x8ec>
   e2676:	f7ff fb77 	bl	e1d68 <sulp>
   e267a:	4602      	mov	r2, r0
   e267c:	460b      	mov	r3, r1
   e267e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2682:	f7fd fb43 	bl	dfd0c <__adddf3>
   e2686:	4682      	mov	sl, r0
   e2688:	468b      	mov	fp, r1
   e268a:	e12d      	b.n	e28e8 <_strtod_r+0xb48>
   e268c:	f7ff fb6c 	bl	e1d68 <sulp>
   e2690:	4602      	mov	r2, r0
   e2692:	460b      	mov	r3, r1
   e2694:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2698:	f7fd fb36 	bl	dfd08 <__aeabi_dsub>
   e269c:	2200      	movs	r2, #0
   e269e:	2300      	movs	r3, #0
   e26a0:	4682      	mov	sl, r0
   e26a2:	468b      	mov	fp, r1
   e26a4:	f7fd ff4c 	bl	e0540 <__aeabi_dcmpeq>
   e26a8:	2800      	cmp	r0, #0
   e26aa:	f47f af49 	bne.w	e2540 <_strtod_r+0x7a0>
   e26ae:	e11b      	b.n	e28e8 <_strtod_r+0xb48>
   e26b0:	4629      	mov	r1, r5
   e26b2:	4620      	mov	r0, r4
   e26b4:	f001 fc77 	bl	e3fa6 <__ratio>
   e26b8:	ec57 6b10 	vmov	r6, r7, d0
   e26bc:	2200      	movs	r2, #0
   e26be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e26c2:	ee10 0a10 	vmov	r0, s0
   e26c6:	4639      	mov	r1, r7
   e26c8:	f7fd ff4e 	bl	e0568 <__aeabi_dcmple>
   e26cc:	2800      	cmp	r0, #0
   e26ce:	d042      	beq.n	e2756 <_strtod_r+0x9b6>
   e26d0:	9b07      	ldr	r3, [sp, #28]
   e26d2:	b123      	cbz	r3, e26de <_strtod_r+0x93e>
   e26d4:	f04f 0800 	mov.w	r8, #0
   e26d8:	f8df 9040 	ldr.w	r9, [pc, #64]	; e271c <_strtod_r+0x97c>
   e26dc:	e011      	b.n	e2702 <_strtod_r+0x962>
   e26de:	f1ba 0f00 	cmp.w	sl, #0
   e26e2:	d103      	bne.n	e26ec <_strtod_r+0x94c>
   e26e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e26e8:	b93b      	cbnz	r3, e26fa <_strtod_r+0x95a>
   e26ea:	e01b      	b.n	e2724 <_strtod_r+0x984>
   e26ec:	f1ba 0f01 	cmp.w	sl, #1
   e26f0:	d103      	bne.n	e26fa <_strtod_r+0x95a>
   e26f2:	f1bb 0f00 	cmp.w	fp, #0
   e26f6:	f43f af23 	beq.w	e2540 <_strtod_r+0x7a0>
   e26fa:	f8df 9024 	ldr.w	r9, [pc, #36]	; e2720 <_strtod_r+0x980>
   e26fe:	f04f 0800 	mov.w	r8, #0
   e2702:	2600      	movs	r6, #0
   e2704:	4f05      	ldr	r7, [pc, #20]	; (e271c <_strtod_r+0x97c>)
   e2706:	e039      	b.n	e277c <_strtod_r+0x9dc>
   e2708:	fffffc02 	.word	0xfffffc02
   e270c:	fffffbe2 	.word	0xfffffbe2
   e2710:	000fffff 	.word	0x000fffff
   e2714:	7ff00000 	.word	0x7ff00000
   e2718:	7fefffff 	.word	0x7fefffff
   e271c:	3ff00000 	.word	0x3ff00000
   e2720:	bff00000 	.word	0xbff00000
   e2724:	2200      	movs	r2, #0
   e2726:	4b98      	ldr	r3, [pc, #608]	; (e2988 <_strtod_r+0xbe8>)
   e2728:	4630      	mov	r0, r6
   e272a:	4639      	mov	r1, r7
   e272c:	f7fd ff12 	bl	e0554 <__aeabi_dcmplt>
   e2730:	b940      	cbnz	r0, e2744 <_strtod_r+0x9a4>
   e2732:	4630      	mov	r0, r6
   e2734:	4639      	mov	r1, r7
   e2736:	2200      	movs	r2, #0
   e2738:	4b94      	ldr	r3, [pc, #592]	; (e298c <_strtod_r+0xbec>)
   e273a:	f7fd fc99 	bl	e0070 <__aeabi_dmul>
   e273e:	4606      	mov	r6, r0
   e2740:	460f      	mov	r7, r1
   e2742:	e001      	b.n	e2748 <_strtod_r+0x9a8>
   e2744:	4f91      	ldr	r7, [pc, #580]	; (e298c <_strtod_r+0xbec>)
   e2746:	2600      	movs	r6, #0
   e2748:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e274c:	9614      	str	r6, [sp, #80]	; 0x50
   e274e:	9315      	str	r3, [sp, #84]	; 0x54
   e2750:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e2754:	e012      	b.n	e277c <_strtod_r+0x9dc>
   e2756:	4b8d      	ldr	r3, [pc, #564]	; (e298c <_strtod_r+0xbec>)
   e2758:	4630      	mov	r0, r6
   e275a:	4639      	mov	r1, r7
   e275c:	2200      	movs	r2, #0
   e275e:	f7fd fc87 	bl	e0070 <__aeabi_dmul>
   e2762:	9b07      	ldr	r3, [sp, #28]
   e2764:	4606      	mov	r6, r0
   e2766:	460f      	mov	r7, r1
   e2768:	b923      	cbnz	r3, e2774 <_strtod_r+0x9d4>
   e276a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e276e:	900e      	str	r0, [sp, #56]	; 0x38
   e2770:	930f      	str	r3, [sp, #60]	; 0x3c
   e2772:	e001      	b.n	e2778 <_strtod_r+0x9d8>
   e2774:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e2778:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e277c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2780:	0d1b      	lsrs	r3, r3, #20
   e2782:	051b      	lsls	r3, r3, #20
   e2784:	9306      	str	r3, [sp, #24]
   e2786:	9a06      	ldr	r2, [sp, #24]
   e2788:	4b81      	ldr	r3, [pc, #516]	; (e2990 <_strtod_r+0xbf0>)
   e278a:	429a      	cmp	r2, r3
   e278c:	d12b      	bne.n	e27e6 <_strtod_r+0xa46>
   e278e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e2792:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e2796:	ec4b ab10 	vmov	d0, sl, fp
   e279a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e279e:	f001 fb3f 	bl	e3e20 <__ulp>
   e27a2:	4640      	mov	r0, r8
   e27a4:	ec53 2b10 	vmov	r2, r3, d0
   e27a8:	4649      	mov	r1, r9
   e27aa:	f7fd fc61 	bl	e0070 <__aeabi_dmul>
   e27ae:	4652      	mov	r2, sl
   e27b0:	465b      	mov	r3, fp
   e27b2:	f7fd faab 	bl	dfd0c <__adddf3>
   e27b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e27ba:	0d1b      	lsrs	r3, r3, #20
   e27bc:	4a75      	ldr	r2, [pc, #468]	; (e2994 <_strtod_r+0xbf4>)
   e27be:	051b      	lsls	r3, r3, #20
   e27c0:	4293      	cmp	r3, r2
   e27c2:	4682      	mov	sl, r0
   e27c4:	d90c      	bls.n	e27e0 <_strtod_r+0xa40>
   e27c6:	4b74      	ldr	r3, [pc, #464]	; (e2998 <_strtod_r+0xbf8>)
   e27c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e27ca:	429a      	cmp	r2, r3
   e27cc:	d103      	bne.n	e27d6 <_strtod_r+0xa36>
   e27ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e27d0:	3301      	adds	r3, #1
   e27d2:	f43f ad2c 	beq.w	e222e <_strtod_r+0x48e>
   e27d6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e2998 <_strtod_r+0xbf8>
   e27da:	f04f 3aff 	mov.w	sl, #4294967295
   e27de:	e072      	b.n	e28c6 <_strtod_r+0xb26>
   e27e0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e27e4:	e038      	b.n	e2858 <_strtod_r+0xab8>
   e27e6:	9b03      	ldr	r3, [sp, #12]
   e27e8:	b333      	cbz	r3, e2838 <_strtod_r+0xa98>
   e27ea:	9b06      	ldr	r3, [sp, #24]
   e27ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e27f0:	d822      	bhi.n	e2838 <_strtod_r+0xa98>
   e27f2:	a35d      	add	r3, pc, #372	; (adr r3, e2968 <_strtod_r+0xbc8>)
   e27f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e27f8:	4630      	mov	r0, r6
   e27fa:	4639      	mov	r1, r7
   e27fc:	f7fd feb4 	bl	e0568 <__aeabi_dcmple>
   e2800:	b1a8      	cbz	r0, e282e <_strtod_r+0xa8e>
   e2802:	4639      	mov	r1, r7
   e2804:	4630      	mov	r0, r6
   e2806:	f7fd ff0b 	bl	e0620 <__aeabi_d2uiz>
   e280a:	2800      	cmp	r0, #0
   e280c:	bf08      	it	eq
   e280e:	2001      	moveq	r0, #1
   e2810:	f7fd fbb8 	bl	dff84 <__aeabi_ui2d>
   e2814:	9b07      	ldr	r3, [sp, #28]
   e2816:	4606      	mov	r6, r0
   e2818:	460f      	mov	r7, r1
   e281a:	b923      	cbnz	r3, e2826 <_strtod_r+0xa86>
   e281c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e2820:	9010      	str	r0, [sp, #64]	; 0x40
   e2822:	9311      	str	r3, [sp, #68]	; 0x44
   e2824:	e001      	b.n	e282a <_strtod_r+0xa8a>
   e2826:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e282a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e282e:	9a06      	ldr	r2, [sp, #24]
   e2830:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e2834:	ebc2 0903 	rsb	r9, r2, r3
   e2838:	ed9d 0b08 	vldr	d0, [sp, #32]
   e283c:	f001 faf0 	bl	e3e20 <__ulp>
   e2840:	4640      	mov	r0, r8
   e2842:	ec53 2b10 	vmov	r2, r3, d0
   e2846:	4649      	mov	r1, r9
   e2848:	f7fd fc12 	bl	e0070 <__aeabi_dmul>
   e284c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e2850:	f7fd fa5c 	bl	dfd0c <__adddf3>
   e2854:	4682      	mov	sl, r0
   e2856:	468b      	mov	fp, r1
   e2858:	9b03      	ldr	r3, [sp, #12]
   e285a:	bba3      	cbnz	r3, e28c6 <_strtod_r+0xb26>
   e285c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2860:	0d1b      	lsrs	r3, r3, #20
   e2862:	9a06      	ldr	r2, [sp, #24]
   e2864:	051b      	lsls	r3, r3, #20
   e2866:	429a      	cmp	r2, r3
   e2868:	46d8      	mov	r8, fp
   e286a:	d12c      	bne.n	e28c6 <_strtod_r+0xb26>
   e286c:	4639      	mov	r1, r7
   e286e:	4630      	mov	r0, r6
   e2870:	f7fd feae 	bl	e05d0 <__aeabi_d2iz>
   e2874:	f7fd fb96 	bl	dffa4 <__aeabi_i2d>
   e2878:	460b      	mov	r3, r1
   e287a:	4602      	mov	r2, r0
   e287c:	4639      	mov	r1, r7
   e287e:	4630      	mov	r0, r6
   e2880:	f7fd fa42 	bl	dfd08 <__aeabi_dsub>
   e2884:	9b07      	ldr	r3, [sp, #28]
   e2886:	4606      	mov	r6, r0
   e2888:	460f      	mov	r7, r1
   e288a:	b92b      	cbnz	r3, e2898 <_strtod_r+0xaf8>
   e288c:	f1ba 0f00 	cmp.w	sl, #0
   e2890:	d102      	bne.n	e2898 <_strtod_r+0xaf8>
   e2892:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2896:	b183      	cbz	r3, e28ba <_strtod_r+0xb1a>
   e2898:	a335      	add	r3, pc, #212	; (adr r3, e2970 <_strtod_r+0xbd0>)
   e289a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e289e:	4630      	mov	r0, r6
   e28a0:	4639      	mov	r1, r7
   e28a2:	f7fd fe57 	bl	e0554 <__aeabi_dcmplt>
   e28a6:	2800      	cmp	r0, #0
   e28a8:	d131      	bne.n	e290e <_strtod_r+0xb6e>
   e28aa:	a333      	add	r3, pc, #204	; (adr r3, e2978 <_strtod_r+0xbd8>)
   e28ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e28b0:	4630      	mov	r0, r6
   e28b2:	4639      	mov	r1, r7
   e28b4:	f7fd fe6c 	bl	e0590 <__aeabi_dcmpgt>
   e28b8:	e004      	b.n	e28c4 <_strtod_r+0xb24>
   e28ba:	a331      	add	r3, pc, #196	; (adr r3, e2980 <_strtod_r+0xbe0>)
   e28bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e28c0:	f7fd fe48 	bl	e0554 <__aeabi_dcmplt>
   e28c4:	bb18      	cbnz	r0, e290e <_strtod_r+0xb6e>
   e28c6:	9918      	ldr	r1, [sp, #96]	; 0x60
   e28c8:	9802      	ldr	r0, [sp, #8]
   e28ca:	f001 f818 	bl	e38fe <_Bfree>
   e28ce:	9904      	ldr	r1, [sp, #16]
   e28d0:	9802      	ldr	r0, [sp, #8]
   e28d2:	f001 f814 	bl	e38fe <_Bfree>
   e28d6:	4629      	mov	r1, r5
   e28d8:	9802      	ldr	r0, [sp, #8]
   e28da:	f001 f810 	bl	e38fe <_Bfree>
   e28de:	4621      	mov	r1, r4
   e28e0:	9802      	ldr	r0, [sp, #8]
   e28e2:	f001 f80c 	bl	e38fe <_Bfree>
   e28e6:	e56d      	b.n	e23c4 <_strtod_r+0x624>
   e28e8:	9b03      	ldr	r3, [sp, #12]
   e28ea:	b183      	cbz	r3, e290e <_strtod_r+0xb6e>
   e28ec:	4b2b      	ldr	r3, [pc, #172]	; (e299c <_strtod_r+0xbfc>)
   e28ee:	930b      	str	r3, [sp, #44]	; 0x2c
   e28f0:	2300      	movs	r3, #0
   e28f2:	930a      	str	r3, [sp, #40]	; 0x28
   e28f4:	4650      	mov	r0, sl
   e28f6:	4659      	mov	r1, fp
   e28f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e28fc:	f7fd fbb8 	bl	e0070 <__aeabi_dmul>
   e2900:	4682      	mov	sl, r0
   e2902:	468b      	mov	fp, r1
   e2904:	b919      	cbnz	r1, e290e <_strtod_r+0xb6e>
   e2906:	b910      	cbnz	r0, e290e <_strtod_r+0xb6e>
   e2908:	9a02      	ldr	r2, [sp, #8]
   e290a:	2322      	movs	r3, #34	; 0x22
   e290c:	6013      	str	r3, [r2, #0]
   e290e:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2910:	9802      	ldr	r0, [sp, #8]
   e2912:	f000 fff4 	bl	e38fe <_Bfree>
   e2916:	9904      	ldr	r1, [sp, #16]
   e2918:	9802      	ldr	r0, [sp, #8]
   e291a:	f000 fff0 	bl	e38fe <_Bfree>
   e291e:	4629      	mov	r1, r5
   e2920:	9802      	ldr	r0, [sp, #8]
   e2922:	f000 ffec 	bl	e38fe <_Bfree>
   e2926:	9905      	ldr	r1, [sp, #20]
   e2928:	9802      	ldr	r0, [sp, #8]
   e292a:	f000 ffe8 	bl	e38fe <_Bfree>
   e292e:	4621      	mov	r1, r4
   e2930:	9802      	ldr	r0, [sp, #8]
   e2932:	f000 ffe4 	bl	e38fe <_Bfree>
   e2936:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e2938:	b113      	cbz	r3, e2940 <_strtod_r+0xba0>
   e293a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e293c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e293e:	6013      	str	r3, [r2, #0]
   e2940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e2942:	b11b      	cbz	r3, e294c <_strtod_r+0xbac>
   e2944:	4652      	mov	r2, sl
   e2946:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e294a:	e007      	b.n	e295c <_strtod_r+0xbbc>
   e294c:	4652      	mov	r2, sl
   e294e:	465b      	mov	r3, fp
   e2950:	e004      	b.n	e295c <_strtod_r+0xbbc>
   e2952:	2500      	movs	r5, #0
   e2954:	462a      	mov	r2, r5
   e2956:	2101      	movs	r1, #1
   e2958:	f7ff bb41 	b.w	e1fde <_strtod_r+0x23e>
   e295c:	ec43 2b10 	vmov	d0, r2, r3
   e2960:	b01d      	add	sp, #116	; 0x74
   e2962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2966:	bf00      	nop
   e2968:	ffc00000 	.word	0xffc00000
   e296c:	41dfffff 	.word	0x41dfffff
   e2970:	94a03595 	.word	0x94a03595
   e2974:	3fdfffff 	.word	0x3fdfffff
   e2978:	35afe535 	.word	0x35afe535
   e297c:	3fe00000 	.word	0x3fe00000
   e2980:	94a03595 	.word	0x94a03595
   e2984:	3fcfffff 	.word	0x3fcfffff
   e2988:	3ff00000 	.word	0x3ff00000
   e298c:	3fe00000 	.word	0x3fe00000
   e2990:	7fe00000 	.word	0x7fe00000
   e2994:	7c9fffff 	.word	0x7c9fffff
   e2998:	7fefffff 	.word	0x7fefffff
   e299c:	39500000 	.word	0x39500000

000e29a0 <strtod>:
   e29a0:	4b02      	ldr	r3, [pc, #8]	; (e29ac <strtod+0xc>)
   e29a2:	460a      	mov	r2, r1
   e29a4:	4601      	mov	r1, r0
   e29a6:	6818      	ldr	r0, [r3, #0]
   e29a8:	f7ff b9fa 	b.w	e1da0 <_strtod_r>
   e29ac:	2003bc60 	.word	0x2003bc60

000e29b0 <_strtol_r>:
   e29b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e29b4:	4680      	mov	r8, r0
   e29b6:	4840      	ldr	r0, [pc, #256]	; (e2ab8 <_strtol_r+0x108>)
   e29b8:	f8d0 9000 	ldr.w	r9, [r0]
   e29bc:	460f      	mov	r7, r1
   e29be:	463d      	mov	r5, r7
   e29c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   e29c4:	eb09 0004 	add.w	r0, r9, r4
   e29c8:	7840      	ldrb	r0, [r0, #1]
   e29ca:	f000 0008 	and.w	r0, r0, #8
   e29ce:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   e29d2:	b108      	cbz	r0, e29d8 <_strtol_r+0x28>
   e29d4:	462f      	mov	r7, r5
   e29d6:	e7f2      	b.n	e29be <_strtol_r+0xe>
   e29d8:	2c2d      	cmp	r4, #45	; 0x2d
   e29da:	d103      	bne.n	e29e4 <_strtol_r+0x34>
   e29dc:	1cbd      	adds	r5, r7, #2
   e29de:	787c      	ldrb	r4, [r7, #1]
   e29e0:	2601      	movs	r6, #1
   e29e2:	e003      	b.n	e29ec <_strtol_r+0x3c>
   e29e4:	2c2b      	cmp	r4, #43	; 0x2b
   e29e6:	bf04      	itt	eq
   e29e8:	787c      	ldrbeq	r4, [r7, #1]
   e29ea:	1cbd      	addeq	r5, r7, #2
   e29ec:	b113      	cbz	r3, e29f4 <_strtol_r+0x44>
   e29ee:	2b10      	cmp	r3, #16
   e29f0:	d10a      	bne.n	e2a08 <_strtol_r+0x58>
   e29f2:	e05b      	b.n	e2aac <_strtol_r+0xfc>
   e29f4:	2c30      	cmp	r4, #48	; 0x30
   e29f6:	d157      	bne.n	e2aa8 <_strtol_r+0xf8>
   e29f8:	7828      	ldrb	r0, [r5, #0]
   e29fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e29fe:	2858      	cmp	r0, #88	; 0x58
   e2a00:	d14d      	bne.n	e2a9e <_strtol_r+0xee>
   e2a02:	786c      	ldrb	r4, [r5, #1]
   e2a04:	2310      	movs	r3, #16
   e2a06:	3502      	adds	r5, #2
   e2a08:	2e00      	cmp	r6, #0
   e2a0a:	bf14      	ite	ne
   e2a0c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   e2a10:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   e2a14:	2700      	movs	r7, #0
   e2a16:	fbbc faf3 	udiv	sl, ip, r3
   e2a1a:	4638      	mov	r0, r7
   e2a1c:	fb03 cc1a 	mls	ip, r3, sl, ip
   e2a20:	eb09 0e04 	add.w	lr, r9, r4
   e2a24:	f89e e001 	ldrb.w	lr, [lr, #1]
   e2a28:	f01e 0f04 	tst.w	lr, #4
   e2a2c:	d001      	beq.n	e2a32 <_strtol_r+0x82>
   e2a2e:	3c30      	subs	r4, #48	; 0x30
   e2a30:	e00b      	b.n	e2a4a <_strtol_r+0x9a>
   e2a32:	f01e 0e03 	ands.w	lr, lr, #3
   e2a36:	d01b      	beq.n	e2a70 <_strtol_r+0xc0>
   e2a38:	f1be 0f01 	cmp.w	lr, #1
   e2a3c:	bf0c      	ite	eq
   e2a3e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e2a42:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e2a46:	ebce 0404 	rsb	r4, lr, r4
   e2a4a:	42a3      	cmp	r3, r4
   e2a4c:	dd10      	ble.n	e2a70 <_strtol_r+0xc0>
   e2a4e:	f1b7 3fff 	cmp.w	r7, #4294967295
   e2a52:	d00a      	beq.n	e2a6a <_strtol_r+0xba>
   e2a54:	4550      	cmp	r0, sl
   e2a56:	d806      	bhi.n	e2a66 <_strtol_r+0xb6>
   e2a58:	d101      	bne.n	e2a5e <_strtol_r+0xae>
   e2a5a:	4564      	cmp	r4, ip
   e2a5c:	dc03      	bgt.n	e2a66 <_strtol_r+0xb6>
   e2a5e:	fb03 4000 	mla	r0, r3, r0, r4
   e2a62:	2701      	movs	r7, #1
   e2a64:	e001      	b.n	e2a6a <_strtol_r+0xba>
   e2a66:	f04f 37ff 	mov.w	r7, #4294967295
   e2a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
   e2a6e:	e7d7      	b.n	e2a20 <_strtol_r+0x70>
   e2a70:	1c7b      	adds	r3, r7, #1
   e2a72:	d10c      	bne.n	e2a8e <_strtol_r+0xde>
   e2a74:	2e00      	cmp	r6, #0
   e2a76:	f04f 0322 	mov.w	r3, #34	; 0x22
   e2a7a:	bf14      	ite	ne
   e2a7c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   e2a80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e2a84:	f8c8 3000 	str.w	r3, [r8]
   e2a88:	b92a      	cbnz	r2, e2a96 <_strtol_r+0xe6>
   e2a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2a8e:	b106      	cbz	r6, e2a92 <_strtol_r+0xe2>
   e2a90:	4240      	negs	r0, r0
   e2a92:	b172      	cbz	r2, e2ab2 <_strtol_r+0x102>
   e2a94:	b107      	cbz	r7, e2a98 <_strtol_r+0xe8>
   e2a96:	1e69      	subs	r1, r5, #1
   e2a98:	6011      	str	r1, [r2, #0]
   e2a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2a9e:	2430      	movs	r4, #48	; 0x30
   e2aa0:	2b00      	cmp	r3, #0
   e2aa2:	d1b1      	bne.n	e2a08 <_strtol_r+0x58>
   e2aa4:	2308      	movs	r3, #8
   e2aa6:	e7af      	b.n	e2a08 <_strtol_r+0x58>
   e2aa8:	230a      	movs	r3, #10
   e2aaa:	e7ad      	b.n	e2a08 <_strtol_r+0x58>
   e2aac:	2c30      	cmp	r4, #48	; 0x30
   e2aae:	d0a3      	beq.n	e29f8 <_strtol_r+0x48>
   e2ab0:	e7aa      	b.n	e2a08 <_strtol_r+0x58>
   e2ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2ab6:	bf00      	nop
   e2ab8:	2003bbfc 	.word	0x2003bbfc

000e2abc <strtol>:
   e2abc:	4613      	mov	r3, r2
   e2abe:	460a      	mov	r2, r1
   e2ac0:	4601      	mov	r1, r0
   e2ac2:	4802      	ldr	r0, [pc, #8]	; (e2acc <strtol+0x10>)
   e2ac4:	6800      	ldr	r0, [r0, #0]
   e2ac6:	f7ff bf73 	b.w	e29b0 <_strtol_r>
   e2aca:	bf00      	nop
   e2acc:	2003bc60 	.word	0x2003bc60

000e2ad0 <_strtoul_r>:
   e2ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e2ad4:	4680      	mov	r8, r0
   e2ad6:	483c      	ldr	r0, [pc, #240]	; (e2bc8 <_strtoul_r+0xf8>)
   e2ad8:	f8d0 9000 	ldr.w	r9, [r0]
   e2adc:	460e      	mov	r6, r1
   e2ade:	4635      	mov	r5, r6
   e2ae0:	f815 4b01 	ldrb.w	r4, [r5], #1
   e2ae4:	eb09 0004 	add.w	r0, r9, r4
   e2ae8:	7840      	ldrb	r0, [r0, #1]
   e2aea:	f000 0008 	and.w	r0, r0, #8
   e2aee:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e2af2:	b108      	cbz	r0, e2af8 <_strtoul_r+0x28>
   e2af4:	462e      	mov	r6, r5
   e2af6:	e7f2      	b.n	e2ade <_strtoul_r+0xe>
   e2af8:	2c2d      	cmp	r4, #45	; 0x2d
   e2afa:	d103      	bne.n	e2b04 <_strtoul_r+0x34>
   e2afc:	1cb5      	adds	r5, r6, #2
   e2afe:	7874      	ldrb	r4, [r6, #1]
   e2b00:	2701      	movs	r7, #1
   e2b02:	e003      	b.n	e2b0c <_strtoul_r+0x3c>
   e2b04:	2c2b      	cmp	r4, #43	; 0x2b
   e2b06:	bf04      	itt	eq
   e2b08:	7874      	ldrbeq	r4, [r6, #1]
   e2b0a:	1cb5      	addeq	r5, r6, #2
   e2b0c:	b113      	cbz	r3, e2b14 <_strtoul_r+0x44>
   e2b0e:	2b10      	cmp	r3, #16
   e2b10:	d10a      	bne.n	e2b28 <_strtoul_r+0x58>
   e2b12:	e053      	b.n	e2bbc <_strtoul_r+0xec>
   e2b14:	2c30      	cmp	r4, #48	; 0x30
   e2b16:	d14f      	bne.n	e2bb8 <_strtoul_r+0xe8>
   e2b18:	7828      	ldrb	r0, [r5, #0]
   e2b1a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e2b1e:	2858      	cmp	r0, #88	; 0x58
   e2b20:	d145      	bne.n	e2bae <_strtoul_r+0xde>
   e2b22:	786c      	ldrb	r4, [r5, #1]
   e2b24:	2310      	movs	r3, #16
   e2b26:	3502      	adds	r5, #2
   e2b28:	f04f 3cff 	mov.w	ip, #4294967295
   e2b2c:	2600      	movs	r6, #0
   e2b2e:	fbbc fcf3 	udiv	ip, ip, r3
   e2b32:	fb03 fa0c 	mul.w	sl, r3, ip
   e2b36:	ea6f 0a0a 	mvn.w	sl, sl
   e2b3a:	4630      	mov	r0, r6
   e2b3c:	eb09 0e04 	add.w	lr, r9, r4
   e2b40:	f89e e001 	ldrb.w	lr, [lr, #1]
   e2b44:	f01e 0f04 	tst.w	lr, #4
   e2b48:	d001      	beq.n	e2b4e <_strtoul_r+0x7e>
   e2b4a:	3c30      	subs	r4, #48	; 0x30
   e2b4c:	e00b      	b.n	e2b66 <_strtoul_r+0x96>
   e2b4e:	f01e 0e03 	ands.w	lr, lr, #3
   e2b52:	d01a      	beq.n	e2b8a <_strtoul_r+0xba>
   e2b54:	f1be 0f01 	cmp.w	lr, #1
   e2b58:	bf0c      	ite	eq
   e2b5a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e2b5e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e2b62:	ebce 0404 	rsb	r4, lr, r4
   e2b66:	42a3      	cmp	r3, r4
   e2b68:	dd0f      	ble.n	e2b8a <_strtoul_r+0xba>
   e2b6a:	2e00      	cmp	r6, #0
   e2b6c:	db08      	blt.n	e2b80 <_strtoul_r+0xb0>
   e2b6e:	4560      	cmp	r0, ip
   e2b70:	d806      	bhi.n	e2b80 <_strtoul_r+0xb0>
   e2b72:	d101      	bne.n	e2b78 <_strtoul_r+0xa8>
   e2b74:	4554      	cmp	r4, sl
   e2b76:	dc03      	bgt.n	e2b80 <_strtoul_r+0xb0>
   e2b78:	fb03 4000 	mla	r0, r3, r0, r4
   e2b7c:	2601      	movs	r6, #1
   e2b7e:	e001      	b.n	e2b84 <_strtoul_r+0xb4>
   e2b80:	f04f 36ff 	mov.w	r6, #4294967295
   e2b84:	f815 4b01 	ldrb.w	r4, [r5], #1
   e2b88:	e7d8      	b.n	e2b3c <_strtoul_r+0x6c>
   e2b8a:	2e00      	cmp	r6, #0
   e2b8c:	da07      	bge.n	e2b9e <_strtoul_r+0xce>
   e2b8e:	2322      	movs	r3, #34	; 0x22
   e2b90:	f8c8 3000 	str.w	r3, [r8]
   e2b94:	f04f 30ff 	mov.w	r0, #4294967295
   e2b98:	b92a      	cbnz	r2, e2ba6 <_strtoul_r+0xd6>
   e2b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2b9e:	b107      	cbz	r7, e2ba2 <_strtoul_r+0xd2>
   e2ba0:	4240      	negs	r0, r0
   e2ba2:	b172      	cbz	r2, e2bc2 <_strtoul_r+0xf2>
   e2ba4:	b106      	cbz	r6, e2ba8 <_strtoul_r+0xd8>
   e2ba6:	1e69      	subs	r1, r5, #1
   e2ba8:	6011      	str	r1, [r2, #0]
   e2baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2bae:	2430      	movs	r4, #48	; 0x30
   e2bb0:	2b00      	cmp	r3, #0
   e2bb2:	d1b9      	bne.n	e2b28 <_strtoul_r+0x58>
   e2bb4:	2308      	movs	r3, #8
   e2bb6:	e7b7      	b.n	e2b28 <_strtoul_r+0x58>
   e2bb8:	230a      	movs	r3, #10
   e2bba:	e7b5      	b.n	e2b28 <_strtoul_r+0x58>
   e2bbc:	2c30      	cmp	r4, #48	; 0x30
   e2bbe:	d0ab      	beq.n	e2b18 <_strtoul_r+0x48>
   e2bc0:	e7b2      	b.n	e2b28 <_strtoul_r+0x58>
   e2bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2bc6:	bf00      	nop
   e2bc8:	2003bbfc 	.word	0x2003bbfc

000e2bcc <strtoul>:
   e2bcc:	4613      	mov	r3, r2
   e2bce:	460a      	mov	r2, r1
   e2bd0:	4601      	mov	r1, r0
   e2bd2:	4802      	ldr	r0, [pc, #8]	; (e2bdc <strtoul+0x10>)
   e2bd4:	6800      	ldr	r0, [r0, #0]
   e2bd6:	f7ff bf7b 	b.w	e2ad0 <_strtoul_r>
   e2bda:	bf00      	nop
   e2bdc:	2003bc60 	.word	0x2003bc60

000e2be0 <__get_current_time_locale>:
   e2be0:	4b04      	ldr	r3, [pc, #16]	; (e2bf4 <__get_current_time_locale+0x14>)
   e2be2:	4a05      	ldr	r2, [pc, #20]	; (e2bf8 <__get_current_time_locale+0x18>)
   e2be4:	6818      	ldr	r0, [r3, #0]
   e2be6:	4b05      	ldr	r3, [pc, #20]	; (e2bfc <__get_current_time_locale+0x1c>)
   e2be8:	2800      	cmp	r0, #0
   e2bea:	bf14      	ite	ne
   e2bec:	4610      	movne	r0, r2
   e2bee:	4618      	moveq	r0, r3
   e2bf0:	4770      	bx	lr
   e2bf2:	bf00      	nop
   e2bf4:	2003e6c8 	.word	0x2003e6c8
   e2bf8:	2003e6cc 	.word	0x2003e6cc
   e2bfc:	000e57e0 	.word	0x000e57e0

000e2c00 <__tzcalc_limits>:
   e2c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2c04:	4604      	mov	r4, r0
   e2c06:	f000 fda5 	bl	e3754 <__gettzinfo>
   e2c0a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e2c0e:	429c      	cmp	r4, r3
   e2c10:	f340 8096 	ble.w	e2d40 <__tzcalc_limits+0x140>
   e2c14:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e2c18:	18e3      	adds	r3, r4, r3
   e2c1a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e2c1e:	109b      	asrs	r3, r3, #2
   e2c20:	f240 156d 	movw	r5, #365	; 0x16d
   e2c24:	fb05 3502 	mla	r5, r5, r2, r3
   e2c28:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e2c2c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e2c30:	fb92 f3f3 	sdiv	r3, r2, r3
   e2c34:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e2c38:	442b      	add	r3, r5
   e2c3a:	18a5      	adds	r5, r4, r2
   e2c3c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e2c40:	fb95 f5f2 	sdiv	r5, r5, r2
   e2c44:	441d      	add	r5, r3
   e2c46:	2364      	movs	r3, #100	; 0x64
   e2c48:	fb94 f7f2 	sdiv	r7, r4, r2
   e2c4c:	fb94 f6f3 	sdiv	r6, r4, r3
   e2c50:	fb02 4717 	mls	r7, r2, r7, r4
   e2c54:	fb03 4616 	mls	r6, r3, r6, r4
   e2c58:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e2c5c:	fab7 fe87 	clz	lr, r7
   e2c60:	9301      	str	r3, [sp, #4]
   e2c62:	f004 0303 	and.w	r3, r4, #3
   e2c66:	6044      	str	r4, [r0, #4]
   e2c68:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e2c6c:	4601      	mov	r1, r0
   e2c6e:	9300      	str	r3, [sp, #0]
   e2c70:	f04f 0c07 	mov.w	ip, #7
   e2c74:	7a0b      	ldrb	r3, [r1, #8]
   e2c76:	2b4a      	cmp	r3, #74	; 0x4a
   e2c78:	d10e      	bne.n	e2c98 <__tzcalc_limits+0x98>
   e2c7a:	694b      	ldr	r3, [r1, #20]
   e2c7c:	9a00      	ldr	r2, [sp, #0]
   e2c7e:	18ec      	adds	r4, r5, r3
   e2c80:	b902      	cbnz	r2, e2c84 <__tzcalc_limits+0x84>
   e2c82:	b906      	cbnz	r6, e2c86 <__tzcalc_limits+0x86>
   e2c84:	b927      	cbnz	r7, e2c90 <__tzcalc_limits+0x90>
   e2c86:	2b3b      	cmp	r3, #59	; 0x3b
   e2c88:	bfd4      	ite	le
   e2c8a:	2300      	movle	r3, #0
   e2c8c:	2301      	movgt	r3, #1
   e2c8e:	e000      	b.n	e2c92 <__tzcalc_limits+0x92>
   e2c90:	2300      	movs	r3, #0
   e2c92:	4423      	add	r3, r4
   e2c94:	3b01      	subs	r3, #1
   e2c96:	e03f      	b.n	e2d18 <__tzcalc_limits+0x118>
   e2c98:	2b44      	cmp	r3, #68	; 0x44
   e2c9a:	d102      	bne.n	e2ca2 <__tzcalc_limits+0xa2>
   e2c9c:	694b      	ldr	r3, [r1, #20]
   e2c9e:	442b      	add	r3, r5
   e2ca0:	e03a      	b.n	e2d18 <__tzcalc_limits+0x118>
   e2ca2:	9b00      	ldr	r3, [sp, #0]
   e2ca4:	b92b      	cbnz	r3, e2cb2 <__tzcalc_limits+0xb2>
   e2ca6:	2e00      	cmp	r6, #0
   e2ca8:	bf0c      	ite	eq
   e2caa:	46f0      	moveq	r8, lr
   e2cac:	f04f 0801 	movne.w	r8, #1
   e2cb0:	e000      	b.n	e2cb4 <__tzcalc_limits+0xb4>
   e2cb2:	46f0      	mov	r8, lr
   e2cb4:	4b24      	ldr	r3, [pc, #144]	; (e2d48 <__tzcalc_limits+0x148>)
   e2cb6:	68cc      	ldr	r4, [r1, #12]
   e2cb8:	2230      	movs	r2, #48	; 0x30
   e2cba:	fb02 3808 	mla	r8, r2, r8, r3
   e2cbe:	f1a8 0a04 	sub.w	sl, r8, #4
   e2cc2:	46a9      	mov	r9, r5
   e2cc4:	2301      	movs	r3, #1
   e2cc6:	42a3      	cmp	r3, r4
   e2cc8:	da04      	bge.n	e2cd4 <__tzcalc_limits+0xd4>
   e2cca:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e2cce:	3301      	adds	r3, #1
   e2cd0:	44d9      	add	r9, fp
   e2cd2:	e7f8      	b.n	e2cc6 <__tzcalc_limits+0xc6>
   e2cd4:	f109 0304 	add.w	r3, r9, #4
   e2cd8:	fb93 fbfc 	sdiv	fp, r3, ip
   e2cdc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e2ce0:	2c01      	cmp	r4, #1
   e2ce2:	ebca 0a03 	rsb	sl, sl, r3
   e2ce6:	694b      	ldr	r3, [r1, #20]
   e2ce8:	bfb8      	it	lt
   e2cea:	2401      	movlt	r4, #1
   e2cec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e2cf0:	ebb3 0a0a 	subs.w	sl, r3, sl
   e2cf4:	690b      	ldr	r3, [r1, #16]
   e2cf6:	f104 34ff 	add.w	r4, r4, #4294967295
   e2cfa:	f103 33ff 	add.w	r3, r3, #4294967295
   e2cfe:	bf48      	it	mi
   e2d00:	f10a 0a07 	addmi.w	sl, sl, #7
   e2d04:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e2d08:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e2d0c:	4453      	add	r3, sl
   e2d0e:	42a3      	cmp	r3, r4
   e2d10:	db01      	blt.n	e2d16 <__tzcalc_limits+0x116>
   e2d12:	3b07      	subs	r3, #7
   e2d14:	e7fb      	b.n	e2d0e <__tzcalc_limits+0x10e>
   e2d16:	444b      	add	r3, r9
   e2d18:	698c      	ldr	r4, [r1, #24]
   e2d1a:	4a0c      	ldr	r2, [pc, #48]	; (e2d4c <__tzcalc_limits+0x14c>)
   e2d1c:	fb02 4303 	mla	r3, r2, r3, r4
   e2d20:	6a0c      	ldr	r4, [r1, #32]
   e2d22:	4423      	add	r3, r4
   e2d24:	f841 3f1c 	str.w	r3, [r1, #28]!
   e2d28:	9b01      	ldr	r3, [sp, #4]
   e2d2a:	4299      	cmp	r1, r3
   e2d2c:	d1a2      	bne.n	e2c74 <__tzcalc_limits+0x74>
   e2d2e:	69c3      	ldr	r3, [r0, #28]
   e2d30:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e2d32:	4293      	cmp	r3, r2
   e2d34:	bfac      	ite	ge
   e2d36:	2300      	movge	r3, #0
   e2d38:	2301      	movlt	r3, #1
   e2d3a:	6003      	str	r3, [r0, #0]
   e2d3c:	2001      	movs	r0, #1
   e2d3e:	e000      	b.n	e2d42 <__tzcalc_limits+0x142>
   e2d40:	2000      	movs	r0, #0
   e2d42:	b003      	add	sp, #12
   e2d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2d48:	000e559c 	.word	0x000e559c
   e2d4c:	00015180 	.word	0x00015180

000e2d50 <__tz_lock>:
   e2d50:	4770      	bx	lr

000e2d52 <__tz_unlock>:
   e2d52:	4770      	bx	lr

000e2d54 <_tzset_unlocked>:
   e2d54:	4b01      	ldr	r3, [pc, #4]	; (e2d5c <_tzset_unlocked+0x8>)
   e2d56:	6818      	ldr	r0, [r3, #0]
   e2d58:	f000 b802 	b.w	e2d60 <_tzset_unlocked_r>
   e2d5c:	2003bc60 	.word	0x2003bc60

000e2d60 <_tzset_unlocked_r>:
   e2d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2d64:	b08d      	sub	sp, #52	; 0x34
   e2d66:	4607      	mov	r7, r0
   e2d68:	f000 fcf4 	bl	e3754 <__gettzinfo>
   e2d6c:	49b0      	ldr	r1, [pc, #704]	; (e3030 <_tzset_unlocked_r+0x2d0>)
   e2d6e:	4eb1      	ldr	r6, [pc, #708]	; (e3034 <_tzset_unlocked_r+0x2d4>)
   e2d70:	4604      	mov	r4, r0
   e2d72:	4638      	mov	r0, r7
   e2d74:	f000 fce6 	bl	e3744 <_getenv_r>
   e2d78:	4605      	mov	r5, r0
   e2d7a:	b960      	cbnz	r0, e2d96 <_tzset_unlocked_r+0x36>
   e2d7c:	4bae      	ldr	r3, [pc, #696]	; (e3038 <_tzset_unlocked_r+0x2d8>)
   e2d7e:	4aaf      	ldr	r2, [pc, #700]	; (e303c <_tzset_unlocked_r+0x2dc>)
   e2d80:	6018      	str	r0, [r3, #0]
   e2d82:	4baf      	ldr	r3, [pc, #700]	; (e3040 <_tzset_unlocked_r+0x2e0>)
   e2d84:	6018      	str	r0, [r3, #0]
   e2d86:	4baf      	ldr	r3, [pc, #700]	; (e3044 <_tzset_unlocked_r+0x2e4>)
   e2d88:	6830      	ldr	r0, [r6, #0]
   e2d8a:	601a      	str	r2, [r3, #0]
   e2d8c:	605a      	str	r2, [r3, #4]
   e2d8e:	f7f8 fac5 	bl	db31c <free>
   e2d92:	6035      	str	r5, [r6, #0]
   e2d94:	e148      	b.n	e3028 <_tzset_unlocked_r+0x2c8>
   e2d96:	6831      	ldr	r1, [r6, #0]
   e2d98:	b979      	cbnz	r1, e2dba <_tzset_unlocked_r+0x5a>
   e2d9a:	6830      	ldr	r0, [r6, #0]
   e2d9c:	f7f8 fabe 	bl	db31c <free>
   e2da0:	4628      	mov	r0, r5
   e2da2:	f7fe ff97 	bl	e1cd4 <strlen>
   e2da6:	1c41      	adds	r1, r0, #1
   e2da8:	4638      	mov	r0, r7
   e2daa:	f7f8 faff 	bl	db3ac <_malloc_r>
   e2dae:	6030      	str	r0, [r6, #0]
   e2db0:	b148      	cbz	r0, e2dc6 <_tzset_unlocked_r+0x66>
   e2db2:	4629      	mov	r1, r5
   e2db4:	f7fe fa56 	bl	e1264 <strcpy>
   e2db8:	e005      	b.n	e2dc6 <_tzset_unlocked_r+0x66>
   e2dba:	f7fe fa49 	bl	e1250 <strcmp>
   e2dbe:	2800      	cmp	r0, #0
   e2dc0:	f000 8132 	beq.w	e3028 <_tzset_unlocked_r+0x2c8>
   e2dc4:	e7e9      	b.n	e2d9a <_tzset_unlocked_r+0x3a>
   e2dc6:	782b      	ldrb	r3, [r5, #0]
   e2dc8:	4a9f      	ldr	r2, [pc, #636]	; (e3048 <_tzset_unlocked_r+0x2e8>)
   e2dca:	49a0      	ldr	r1, [pc, #640]	; (e304c <_tzset_unlocked_r+0x2ec>)
   e2dcc:	2b3a      	cmp	r3, #58	; 0x3a
   e2dce:	bf08      	it	eq
   e2dd0:	3501      	addeq	r5, #1
   e2dd2:	ae0a      	add	r6, sp, #40	; 0x28
   e2dd4:	4633      	mov	r3, r6
   e2dd6:	4628      	mov	r0, r5
   e2dd8:	f7f8 fac0 	bl	db35c <siscanf>
   e2ddc:	2800      	cmp	r0, #0
   e2dde:	f340 8123 	ble.w	e3028 <_tzset_unlocked_r+0x2c8>
   e2de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2de4:	18ef      	adds	r7, r5, r3
   e2de6:	5ceb      	ldrb	r3, [r5, r3]
   e2de8:	2b2d      	cmp	r3, #45	; 0x2d
   e2dea:	d103      	bne.n	e2df4 <_tzset_unlocked_r+0x94>
   e2dec:	3701      	adds	r7, #1
   e2dee:	f04f 35ff 	mov.w	r5, #4294967295
   e2df2:	e003      	b.n	e2dfc <_tzset_unlocked_r+0x9c>
   e2df4:	2b2b      	cmp	r3, #43	; 0x2b
   e2df6:	bf08      	it	eq
   e2df8:	3701      	addeq	r7, #1
   e2dfa:	2501      	movs	r5, #1
   e2dfc:	f10d 0a20 	add.w	sl, sp, #32
   e2e00:	f10d 0b1e 	add.w	fp, sp, #30
   e2e04:	f04f 0800 	mov.w	r8, #0
   e2e08:	9603      	str	r6, [sp, #12]
   e2e0a:	f8cd a008 	str.w	sl, [sp, #8]
   e2e0e:	9601      	str	r6, [sp, #4]
   e2e10:	f8cd b000 	str.w	fp, [sp]
   e2e14:	4633      	mov	r3, r6
   e2e16:	aa07      	add	r2, sp, #28
   e2e18:	498d      	ldr	r1, [pc, #564]	; (e3050 <_tzset_unlocked_r+0x2f0>)
   e2e1a:	f8ad 801e 	strh.w	r8, [sp, #30]
   e2e1e:	4638      	mov	r0, r7
   e2e20:	f8ad 8020 	strh.w	r8, [sp, #32]
   e2e24:	f7f8 fa9a 	bl	db35c <siscanf>
   e2e28:	4540      	cmp	r0, r8
   e2e2a:	f340 80fd 	ble.w	e3028 <_tzset_unlocked_r+0x2c8>
   e2e2e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e2e32:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e2e36:	f8df 9224 	ldr.w	r9, [pc, #548]	; e305c <_tzset_unlocked_r+0x2fc>
   e2e3a:	213c      	movs	r1, #60	; 0x3c
   e2e3c:	fb01 3302 	mla	r3, r1, r2, r3
   e2e40:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e2e44:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e2e48:	fb01 3302 	mla	r3, r1, r2, r3
   e2e4c:	435d      	muls	r5, r3
   e2e4e:	6225      	str	r5, [r4, #32]
   e2e50:	4d7c      	ldr	r5, [pc, #496]	; (e3044 <_tzset_unlocked_r+0x2e4>)
   e2e52:	4b7d      	ldr	r3, [pc, #500]	; (e3048 <_tzset_unlocked_r+0x2e8>)
   e2e54:	602b      	str	r3, [r5, #0]
   e2e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2e58:	497c      	ldr	r1, [pc, #496]	; (e304c <_tzset_unlocked_r+0x2ec>)
   e2e5a:	441f      	add	r7, r3
   e2e5c:	464a      	mov	r2, r9
   e2e5e:	4633      	mov	r3, r6
   e2e60:	4638      	mov	r0, r7
   e2e62:	f7f8 fa7b 	bl	db35c <siscanf>
   e2e66:	4540      	cmp	r0, r8
   e2e68:	dc08      	bgt.n	e2e7c <_tzset_unlocked_r+0x11c>
   e2e6a:	682b      	ldr	r3, [r5, #0]
   e2e6c:	606b      	str	r3, [r5, #4]
   e2e6e:	4b72      	ldr	r3, [pc, #456]	; (e3038 <_tzset_unlocked_r+0x2d8>)
   e2e70:	6a22      	ldr	r2, [r4, #32]
   e2e72:	601a      	str	r2, [r3, #0]
   e2e74:	4b72      	ldr	r3, [pc, #456]	; (e3040 <_tzset_unlocked_r+0x2e0>)
   e2e76:	f8c3 8000 	str.w	r8, [r3]
   e2e7a:	e0d5      	b.n	e3028 <_tzset_unlocked_r+0x2c8>
   e2e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2e7e:	f8c5 9004 	str.w	r9, [r5, #4]
   e2e82:	18fd      	adds	r5, r7, r3
   e2e84:	5cfb      	ldrb	r3, [r7, r3]
   e2e86:	2b2d      	cmp	r3, #45	; 0x2d
   e2e88:	d103      	bne.n	e2e92 <_tzset_unlocked_r+0x132>
   e2e8a:	3501      	adds	r5, #1
   e2e8c:	f04f 37ff 	mov.w	r7, #4294967295
   e2e90:	e003      	b.n	e2e9a <_tzset_unlocked_r+0x13a>
   e2e92:	2b2b      	cmp	r3, #43	; 0x2b
   e2e94:	bf08      	it	eq
   e2e96:	3501      	addeq	r5, #1
   e2e98:	2701      	movs	r7, #1
   e2e9a:	2300      	movs	r3, #0
   e2e9c:	f8ad 301c 	strh.w	r3, [sp, #28]
   e2ea0:	f8ad 301e 	strh.w	r3, [sp, #30]
   e2ea4:	f8ad 3020 	strh.w	r3, [sp, #32]
   e2ea8:	930a      	str	r3, [sp, #40]	; 0x28
   e2eaa:	9603      	str	r6, [sp, #12]
   e2eac:	f8cd a008 	str.w	sl, [sp, #8]
   e2eb0:	9601      	str	r6, [sp, #4]
   e2eb2:	f8cd b000 	str.w	fp, [sp]
   e2eb6:	4633      	mov	r3, r6
   e2eb8:	aa07      	add	r2, sp, #28
   e2eba:	4965      	ldr	r1, [pc, #404]	; (e3050 <_tzset_unlocked_r+0x2f0>)
   e2ebc:	4628      	mov	r0, r5
   e2ebe:	f7f8 fa4d 	bl	db35c <siscanf>
   e2ec2:	2800      	cmp	r0, #0
   e2ec4:	dc04      	bgt.n	e2ed0 <_tzset_unlocked_r+0x170>
   e2ec6:	6a23      	ldr	r3, [r4, #32]
   e2ec8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e2ecc:	63e3      	str	r3, [r4, #60]	; 0x3c
   e2ece:	e00e      	b.n	e2eee <_tzset_unlocked_r+0x18e>
   e2ed0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e2ed4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e2ed8:	213c      	movs	r1, #60	; 0x3c
   e2eda:	fb01 3302 	mla	r3, r1, r2, r3
   e2ede:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e2ee2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e2ee6:	fb01 3302 	mla	r3, r1, r2, r3
   e2eea:	435f      	muls	r7, r3
   e2eec:	63e7      	str	r7, [r4, #60]	; 0x3c
   e2eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2ef0:	4627      	mov	r7, r4
   e2ef2:	441d      	add	r5, r3
   e2ef4:	f04f 0900 	mov.w	r9, #0
   e2ef8:	782b      	ldrb	r3, [r5, #0]
   e2efa:	2b2c      	cmp	r3, #44	; 0x2c
   e2efc:	bf08      	it	eq
   e2efe:	3501      	addeq	r5, #1
   e2f00:	f895 8000 	ldrb.w	r8, [r5]
   e2f04:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e2f08:	d126      	bne.n	e2f58 <_tzset_unlocked_r+0x1f8>
   e2f0a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e2f0e:	9302      	str	r3, [sp, #8]
   e2f10:	ab09      	add	r3, sp, #36	; 0x24
   e2f12:	9300      	str	r3, [sp, #0]
   e2f14:	9603      	str	r6, [sp, #12]
   e2f16:	9601      	str	r6, [sp, #4]
   e2f18:	4633      	mov	r3, r6
   e2f1a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e2f1e:	494d      	ldr	r1, [pc, #308]	; (e3054 <_tzset_unlocked_r+0x2f4>)
   e2f20:	4628      	mov	r0, r5
   e2f22:	f7f8 fa1b 	bl	db35c <siscanf>
   e2f26:	2803      	cmp	r0, #3
   e2f28:	d17e      	bne.n	e3028 <_tzset_unlocked_r+0x2c8>
   e2f2a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e2f2e:	1e4b      	subs	r3, r1, #1
   e2f30:	2b0b      	cmp	r3, #11
   e2f32:	d879      	bhi.n	e3028 <_tzset_unlocked_r+0x2c8>
   e2f34:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e2f38:	1e53      	subs	r3, r2, #1
   e2f3a:	2b04      	cmp	r3, #4
   e2f3c:	d874      	bhi.n	e3028 <_tzset_unlocked_r+0x2c8>
   e2f3e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e2f42:	2b06      	cmp	r3, #6
   e2f44:	d870      	bhi.n	e3028 <_tzset_unlocked_r+0x2c8>
   e2f46:	f887 8008 	strb.w	r8, [r7, #8]
   e2f4a:	60f9      	str	r1, [r7, #12]
   e2f4c:	613a      	str	r2, [r7, #16]
   e2f4e:	617b      	str	r3, [r7, #20]
   e2f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2f52:	eb05 0803 	add.w	r8, r5, r3
   e2f56:	e02a      	b.n	e2fae <_tzset_unlocked_r+0x24e>
   e2f58:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e2f5c:	bf06      	itte	eq
   e2f5e:	3501      	addeq	r5, #1
   e2f60:	4643      	moveq	r3, r8
   e2f62:	2344      	movne	r3, #68	; 0x44
   e2f64:	220a      	movs	r2, #10
   e2f66:	a90b      	add	r1, sp, #44	; 0x2c
   e2f68:	4628      	mov	r0, r5
   e2f6a:	9305      	str	r3, [sp, #20]
   e2f6c:	f7ff fe2e 	bl	e2bcc <strtoul>
   e2f70:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e2f74:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e2f78:	4545      	cmp	r5, r8
   e2f7a:	9b05      	ldr	r3, [sp, #20]
   e2f7c:	d114      	bne.n	e2fa8 <_tzset_unlocked_r+0x248>
   e2f7e:	234d      	movs	r3, #77	; 0x4d
   e2f80:	f1b9 0f00 	cmp.w	r9, #0
   e2f84:	d107      	bne.n	e2f96 <_tzset_unlocked_r+0x236>
   e2f86:	7223      	strb	r3, [r4, #8]
   e2f88:	2303      	movs	r3, #3
   e2f8a:	60e3      	str	r3, [r4, #12]
   e2f8c:	2302      	movs	r3, #2
   e2f8e:	6123      	str	r3, [r4, #16]
   e2f90:	f8c4 9014 	str.w	r9, [r4, #20]
   e2f94:	e00b      	b.n	e2fae <_tzset_unlocked_r+0x24e>
   e2f96:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e2f9a:	230b      	movs	r3, #11
   e2f9c:	62a3      	str	r3, [r4, #40]	; 0x28
   e2f9e:	2301      	movs	r3, #1
   e2fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
   e2fa2:	2300      	movs	r3, #0
   e2fa4:	6323      	str	r3, [r4, #48]	; 0x30
   e2fa6:	e002      	b.n	e2fae <_tzset_unlocked_r+0x24e>
   e2fa8:	b280      	uxth	r0, r0
   e2faa:	723b      	strb	r3, [r7, #8]
   e2fac:	6178      	str	r0, [r7, #20]
   e2fae:	2302      	movs	r3, #2
   e2fb0:	f8ad 301c 	strh.w	r3, [sp, #28]
   e2fb4:	2300      	movs	r3, #0
   e2fb6:	f8ad 301e 	strh.w	r3, [sp, #30]
   e2fba:	f8ad 3020 	strh.w	r3, [sp, #32]
   e2fbe:	930a      	str	r3, [sp, #40]	; 0x28
   e2fc0:	f898 3000 	ldrb.w	r3, [r8]
   e2fc4:	2b2f      	cmp	r3, #47	; 0x2f
   e2fc6:	d10b      	bne.n	e2fe0 <_tzset_unlocked_r+0x280>
   e2fc8:	9603      	str	r6, [sp, #12]
   e2fca:	f8cd a008 	str.w	sl, [sp, #8]
   e2fce:	9601      	str	r6, [sp, #4]
   e2fd0:	f8cd b000 	str.w	fp, [sp]
   e2fd4:	4633      	mov	r3, r6
   e2fd6:	aa07      	add	r2, sp, #28
   e2fd8:	491f      	ldr	r1, [pc, #124]	; (e3058 <_tzset_unlocked_r+0x2f8>)
   e2fda:	4640      	mov	r0, r8
   e2fdc:	f7f8 f9be 	bl	db35c <siscanf>
   e2fe0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e2fe4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e2fe8:	213c      	movs	r1, #60	; 0x3c
   e2fea:	fb01 3302 	mla	r3, r1, r2, r3
   e2fee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e2ff2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e2ff6:	fb01 3302 	mla	r3, r1, r2, r3
   e2ffa:	61bb      	str	r3, [r7, #24]
   e2ffc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e2ffe:	f109 0901 	add.w	r9, r9, #1
   e3002:	f1b9 0f02 	cmp.w	r9, #2
   e3006:	4445      	add	r5, r8
   e3008:	f107 071c 	add.w	r7, r7, #28
   e300c:	f47f af74 	bne.w	e2ef8 <_tzset_unlocked_r+0x198>
   e3010:	6860      	ldr	r0, [r4, #4]
   e3012:	f7ff fdf5 	bl	e2c00 <__tzcalc_limits>
   e3016:	4b08      	ldr	r3, [pc, #32]	; (e3038 <_tzset_unlocked_r+0x2d8>)
   e3018:	6a22      	ldr	r2, [r4, #32]
   e301a:	601a      	str	r2, [r3, #0]
   e301c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e301e:	1a9b      	subs	r3, r3, r2
   e3020:	4a07      	ldr	r2, [pc, #28]	; (e3040 <_tzset_unlocked_r+0x2e0>)
   e3022:	bf18      	it	ne
   e3024:	2301      	movne	r3, #1
   e3026:	6013      	str	r3, [r2, #0]
   e3028:	b00d      	add	sp, #52	; 0x34
   e302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e302e:	bf00      	nop
   e3030:	000e58dc 	.word	0x000e58dc
   e3034:	2003e7e0 	.word	0x2003e7e0
   e3038:	2003e7e8 	.word	0x2003e7e8
   e303c:	000e58df 	.word	0x000e58df
   e3040:	2003e7e4 	.word	0x2003e7e4
   e3044:	2003bc9c 	.word	0x2003bc9c
   e3048:	2003e7d3 	.word	0x2003e7d3
   e304c:	000e58e3 	.word	0x000e58e3
   e3050:	000e5906 	.word	0x000e5906
   e3054:	000e58f2 	.word	0x000e58f2
   e3058:	000e5905 	.word	0x000e5905
   e305c:	2003e7c8 	.word	0x2003e7c8

000e3060 <abs>:
   e3060:	2800      	cmp	r0, #0
   e3062:	bfb8      	it	lt
   e3064:	4240      	neglt	r0, r0
   e3066:	4770      	bx	lr

000e3068 <div>:
   e3068:	2900      	cmp	r1, #0
   e306a:	b510      	push	{r4, lr}
   e306c:	fb91 f4f2 	sdiv	r4, r1, r2
   e3070:	fb02 1314 	mls	r3, r2, r4, r1
   e3074:	db04      	blt.n	e3080 <div+0x18>
   e3076:	2b00      	cmp	r3, #0
   e3078:	da07      	bge.n	e308a <div+0x22>
   e307a:	3401      	adds	r4, #1
   e307c:	1a9b      	subs	r3, r3, r2
   e307e:	e004      	b.n	e308a <div+0x22>
   e3080:	2b00      	cmp	r3, #0
   e3082:	bfc4      	itt	gt
   e3084:	f104 34ff 	addgt.w	r4, r4, #4294967295
   e3088:	189b      	addgt	r3, r3, r2
   e308a:	6004      	str	r4, [r0, #0]
   e308c:	6043      	str	r3, [r0, #4]
   e308e:	bd10      	pop	{r4, pc}

000e3090 <rshift>:
   e3090:	b5f0      	push	{r4, r5, r6, r7, lr}
   e3092:	6906      	ldr	r6, [r0, #16]
   e3094:	114b      	asrs	r3, r1, #5
   e3096:	42b3      	cmp	r3, r6
   e3098:	f100 0514 	add.w	r5, r0, #20
   e309c:	da27      	bge.n	e30ee <rshift+0x5e>
   e309e:	f011 011f 	ands.w	r1, r1, #31
   e30a2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e30a6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e30aa:	d101      	bne.n	e30b0 <rshift+0x20>
   e30ac:	4629      	mov	r1, r5
   e30ae:	e016      	b.n	e30de <rshift+0x4e>
   e30b0:	1d14      	adds	r4, r2, #4
   e30b2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e30b6:	f1c1 0e20 	rsb	lr, r1, #32
   e30ba:	40ca      	lsrs	r2, r1
   e30bc:	462b      	mov	r3, r5
   e30be:	42b4      	cmp	r4, r6
   e30c0:	d209      	bcs.n	e30d6 <rshift+0x46>
   e30c2:	6827      	ldr	r7, [r4, #0]
   e30c4:	fa07 f70e 	lsl.w	r7, r7, lr
   e30c8:	433a      	orrs	r2, r7
   e30ca:	f843 2b04 	str.w	r2, [r3], #4
   e30ce:	f854 2b04 	ldr.w	r2, [r4], #4
   e30d2:	40ca      	lsrs	r2, r1
   e30d4:	e7f3      	b.n	e30be <rshift+0x2e>
   e30d6:	601a      	str	r2, [r3, #0]
   e30d8:	b152      	cbz	r2, e30f0 <rshift+0x60>
   e30da:	3304      	adds	r3, #4
   e30dc:	e008      	b.n	e30f0 <rshift+0x60>
   e30de:	42b2      	cmp	r2, r6
   e30e0:	460b      	mov	r3, r1
   e30e2:	d205      	bcs.n	e30f0 <rshift+0x60>
   e30e4:	f852 3b04 	ldr.w	r3, [r2], #4
   e30e8:	f841 3b04 	str.w	r3, [r1], #4
   e30ec:	e7f7      	b.n	e30de <rshift+0x4e>
   e30ee:	462b      	mov	r3, r5
   e30f0:	1b5b      	subs	r3, r3, r5
   e30f2:	109b      	asrs	r3, r3, #2
   e30f4:	6103      	str	r3, [r0, #16]
   e30f6:	b903      	cbnz	r3, e30fa <rshift+0x6a>
   e30f8:	6143      	str	r3, [r0, #20]
   e30fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e30fc <__hexdig_fun>:
   e30fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e3100:	2b09      	cmp	r3, #9
   e3102:	d801      	bhi.n	e3108 <__hexdig_fun+0xc>
   e3104:	3820      	subs	r0, #32
   e3106:	e00a      	b.n	e311e <__hexdig_fun+0x22>
   e3108:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e310c:	2b05      	cmp	r3, #5
   e310e:	d801      	bhi.n	e3114 <__hexdig_fun+0x18>
   e3110:	3847      	subs	r0, #71	; 0x47
   e3112:	e004      	b.n	e311e <__hexdig_fun+0x22>
   e3114:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e3118:	2b05      	cmp	r3, #5
   e311a:	d802      	bhi.n	e3122 <__hexdig_fun+0x26>
   e311c:	3827      	subs	r0, #39	; 0x27
   e311e:	b2c0      	uxtb	r0, r0
   e3120:	4770      	bx	lr
   e3122:	2000      	movs	r0, #0
   e3124:	4770      	bx	lr

000e3126 <__gethex>:
   e3126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e312a:	b08b      	sub	sp, #44	; 0x2c
   e312c:	468a      	mov	sl, r1
   e312e:	4690      	mov	r8, r2
   e3130:	9306      	str	r3, [sp, #24]
   e3132:	9002      	str	r0, [sp, #8]
   e3134:	f7fd fde2 	bl	e0cfc <_localeconv_r>
   e3138:	6803      	ldr	r3, [r0, #0]
   e313a:	9303      	str	r3, [sp, #12]
   e313c:	4618      	mov	r0, r3
   e313e:	f7fe fdc9 	bl	e1cd4 <strlen>
   e3142:	9b03      	ldr	r3, [sp, #12]
   e3144:	9001      	str	r0, [sp, #4]
   e3146:	4403      	add	r3, r0
   e3148:	f04f 0b00 	mov.w	fp, #0
   e314c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e3150:	9307      	str	r3, [sp, #28]
   e3152:	f8da 3000 	ldr.w	r3, [sl]
   e3156:	3302      	adds	r3, #2
   e3158:	461f      	mov	r7, r3
   e315a:	f813 0b01 	ldrb.w	r0, [r3], #1
   e315e:	2830      	cmp	r0, #48	; 0x30
   e3160:	d102      	bne.n	e3168 <__gethex+0x42>
   e3162:	f10b 0b01 	add.w	fp, fp, #1
   e3166:	e7f7      	b.n	e3158 <__gethex+0x32>
   e3168:	f7ff ffc8 	bl	e30fc <__hexdig_fun>
   e316c:	4604      	mov	r4, r0
   e316e:	b9e0      	cbnz	r0, e31aa <__gethex+0x84>
   e3170:	9a01      	ldr	r2, [sp, #4]
   e3172:	9903      	ldr	r1, [sp, #12]
   e3174:	4638      	mov	r0, r7
   e3176:	f7fe fdb5 	bl	e1ce4 <strncmp>
   e317a:	2800      	cmp	r0, #0
   e317c:	d134      	bne.n	e31e8 <__gethex+0xc2>
   e317e:	9b01      	ldr	r3, [sp, #4]
   e3180:	5cf8      	ldrb	r0, [r7, r3]
   e3182:	18fe      	adds	r6, r7, r3
   e3184:	f7ff ffba 	bl	e30fc <__hexdig_fun>
   e3188:	b380      	cbz	r0, e31ec <__gethex+0xc6>
   e318a:	4633      	mov	r3, r6
   e318c:	7818      	ldrb	r0, [r3, #0]
   e318e:	2830      	cmp	r0, #48	; 0x30
   e3190:	461f      	mov	r7, r3
   e3192:	f103 0301 	add.w	r3, r3, #1
   e3196:	d0f9      	beq.n	e318c <__gethex+0x66>
   e3198:	f7ff ffb0 	bl	e30fc <__hexdig_fun>
   e319c:	fab0 f580 	clz	r5, r0
   e31a0:	096d      	lsrs	r5, r5, #5
   e31a2:	4634      	mov	r4, r6
   e31a4:	f04f 0b01 	mov.w	fp, #1
   e31a8:	e001      	b.n	e31ae <__gethex+0x88>
   e31aa:	2500      	movs	r5, #0
   e31ac:	462c      	mov	r4, r5
   e31ae:	463a      	mov	r2, r7
   e31b0:	4616      	mov	r6, r2
   e31b2:	3201      	adds	r2, #1
   e31b4:	7830      	ldrb	r0, [r6, #0]
   e31b6:	f7ff ffa1 	bl	e30fc <__hexdig_fun>
   e31ba:	2800      	cmp	r0, #0
   e31bc:	d1f8      	bne.n	e31b0 <__gethex+0x8a>
   e31be:	9a01      	ldr	r2, [sp, #4]
   e31c0:	9903      	ldr	r1, [sp, #12]
   e31c2:	4630      	mov	r0, r6
   e31c4:	f7fe fd8e 	bl	e1ce4 <strncmp>
   e31c8:	b950      	cbnz	r0, e31e0 <__gethex+0xba>
   e31ca:	b954      	cbnz	r4, e31e2 <__gethex+0xbc>
   e31cc:	9b01      	ldr	r3, [sp, #4]
   e31ce:	18f4      	adds	r4, r6, r3
   e31d0:	4622      	mov	r2, r4
   e31d2:	4616      	mov	r6, r2
   e31d4:	3201      	adds	r2, #1
   e31d6:	7830      	ldrb	r0, [r6, #0]
   e31d8:	f7ff ff90 	bl	e30fc <__hexdig_fun>
   e31dc:	2800      	cmp	r0, #0
   e31de:	d1f8      	bne.n	e31d2 <__gethex+0xac>
   e31e0:	b134      	cbz	r4, e31f0 <__gethex+0xca>
   e31e2:	1ba4      	subs	r4, r4, r6
   e31e4:	00a4      	lsls	r4, r4, #2
   e31e6:	e003      	b.n	e31f0 <__gethex+0xca>
   e31e8:	463e      	mov	r6, r7
   e31ea:	e000      	b.n	e31ee <__gethex+0xc8>
   e31ec:	4604      	mov	r4, r0
   e31ee:	2501      	movs	r5, #1
   e31f0:	7833      	ldrb	r3, [r6, #0]
   e31f2:	2b50      	cmp	r3, #80	; 0x50
   e31f4:	d001      	beq.n	e31fa <__gethex+0xd4>
   e31f6:	2b70      	cmp	r3, #112	; 0x70
   e31f8:	d12a      	bne.n	e3250 <__gethex+0x12a>
   e31fa:	7873      	ldrb	r3, [r6, #1]
   e31fc:	2b2b      	cmp	r3, #43	; 0x2b
   e31fe:	d008      	beq.n	e3212 <__gethex+0xec>
   e3200:	2b2d      	cmp	r3, #45	; 0x2d
   e3202:	d003      	beq.n	e320c <__gethex+0xe6>
   e3204:	1c71      	adds	r1, r6, #1
   e3206:	f04f 0900 	mov.w	r9, #0
   e320a:	e005      	b.n	e3218 <__gethex+0xf2>
   e320c:	f04f 0901 	mov.w	r9, #1
   e3210:	e001      	b.n	e3216 <__gethex+0xf0>
   e3212:	f04f 0900 	mov.w	r9, #0
   e3216:	1cb1      	adds	r1, r6, #2
   e3218:	7808      	ldrb	r0, [r1, #0]
   e321a:	f7ff ff6f 	bl	e30fc <__hexdig_fun>
   e321e:	1e43      	subs	r3, r0, #1
   e3220:	b2db      	uxtb	r3, r3
   e3222:	2b18      	cmp	r3, #24
   e3224:	d814      	bhi.n	e3250 <__gethex+0x12a>
   e3226:	f1a0 0210 	sub.w	r2, r0, #16
   e322a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e322e:	f7ff ff65 	bl	e30fc <__hexdig_fun>
   e3232:	1e43      	subs	r3, r0, #1
   e3234:	b2db      	uxtb	r3, r3
   e3236:	2b18      	cmp	r3, #24
   e3238:	d804      	bhi.n	e3244 <__gethex+0x11e>
   e323a:	230a      	movs	r3, #10
   e323c:	fb03 0202 	mla	r2, r3, r2, r0
   e3240:	3a10      	subs	r2, #16
   e3242:	e7f2      	b.n	e322a <__gethex+0x104>
   e3244:	f1b9 0f00 	cmp.w	r9, #0
   e3248:	d000      	beq.n	e324c <__gethex+0x126>
   e324a:	4252      	negs	r2, r2
   e324c:	4414      	add	r4, r2
   e324e:	e000      	b.n	e3252 <__gethex+0x12c>
   e3250:	4631      	mov	r1, r6
   e3252:	f8ca 1000 	str.w	r1, [sl]
   e3256:	b12d      	cbz	r5, e3264 <__gethex+0x13e>
   e3258:	f1bb 0f00 	cmp.w	fp, #0
   e325c:	bf14      	ite	ne
   e325e:	2000      	movne	r0, #0
   e3260:	2006      	moveq	r0, #6
   e3262:	e17c      	b.n	e355e <__gethex+0x438>
   e3264:	1bf3      	subs	r3, r6, r7
   e3266:	3b01      	subs	r3, #1
   e3268:	4629      	mov	r1, r5
   e326a:	2b07      	cmp	r3, #7
   e326c:	dd02      	ble.n	e3274 <__gethex+0x14e>
   e326e:	3101      	adds	r1, #1
   e3270:	105b      	asrs	r3, r3, #1
   e3272:	e7fa      	b.n	e326a <__gethex+0x144>
   e3274:	9802      	ldr	r0, [sp, #8]
   e3276:	f000 fb0d 	bl	e3894 <_Balloc>
   e327a:	9b01      	ldr	r3, [sp, #4]
   e327c:	f100 0a14 	add.w	sl, r0, #20
   e3280:	f04f 0900 	mov.w	r9, #0
   e3284:	f1c3 0301 	rsb	r3, r3, #1
   e3288:	4605      	mov	r5, r0
   e328a:	f8cd a010 	str.w	sl, [sp, #16]
   e328e:	46cb      	mov	fp, r9
   e3290:	9308      	str	r3, [sp, #32]
   e3292:	42b7      	cmp	r7, r6
   e3294:	d22f      	bcs.n	e32f6 <__gethex+0x1d0>
   e3296:	1e73      	subs	r3, r6, #1
   e3298:	9305      	str	r3, [sp, #20]
   e329a:	9a07      	ldr	r2, [sp, #28]
   e329c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e32a0:	4293      	cmp	r3, r2
   e32a2:	d00b      	beq.n	e32bc <__gethex+0x196>
   e32a4:	f1bb 0f20 	cmp.w	fp, #32
   e32a8:	d116      	bne.n	e32d8 <__gethex+0x1b2>
   e32aa:	9b04      	ldr	r3, [sp, #16]
   e32ac:	f8c3 9000 	str.w	r9, [r3]
   e32b0:	3304      	adds	r3, #4
   e32b2:	f04f 0900 	mov.w	r9, #0
   e32b6:	9304      	str	r3, [sp, #16]
   e32b8:	46cb      	mov	fp, r9
   e32ba:	e00d      	b.n	e32d8 <__gethex+0x1b2>
   e32bc:	9b05      	ldr	r3, [sp, #20]
   e32be:	9a08      	ldr	r2, [sp, #32]
   e32c0:	4413      	add	r3, r2
   e32c2:	429f      	cmp	r7, r3
   e32c4:	d8ee      	bhi.n	e32a4 <__gethex+0x17e>
   e32c6:	4618      	mov	r0, r3
   e32c8:	9a01      	ldr	r2, [sp, #4]
   e32ca:	9903      	ldr	r1, [sp, #12]
   e32cc:	9309      	str	r3, [sp, #36]	; 0x24
   e32ce:	f7fe fd09 	bl	e1ce4 <strncmp>
   e32d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e32d4:	b168      	cbz	r0, e32f2 <__gethex+0x1cc>
   e32d6:	e7e5      	b.n	e32a4 <__gethex+0x17e>
   e32d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e32dc:	f7ff ff0e 	bl	e30fc <__hexdig_fun>
   e32e0:	f000 000f 	and.w	r0, r0, #15
   e32e4:	fa00 f00b 	lsl.w	r0, r0, fp
   e32e8:	9b05      	ldr	r3, [sp, #20]
   e32ea:	ea49 0900 	orr.w	r9, r9, r0
   e32ee:	f10b 0b04 	add.w	fp, fp, #4
   e32f2:	461e      	mov	r6, r3
   e32f4:	e7cd      	b.n	e3292 <__gethex+0x16c>
   e32f6:	9804      	ldr	r0, [sp, #16]
   e32f8:	f840 9b04 	str.w	r9, [r0], #4
   e32fc:	ebca 0000 	rsb	r0, sl, r0
   e3300:	1080      	asrs	r0, r0, #2
   e3302:	6128      	str	r0, [r5, #16]
   e3304:	0147      	lsls	r7, r0, #5
   e3306:	4648      	mov	r0, r9
   e3308:	f000 fb89 	bl	e3a1e <__hi0bits>
   e330c:	f8d8 6000 	ldr.w	r6, [r8]
   e3310:	1a38      	subs	r0, r7, r0
   e3312:	42b0      	cmp	r0, r6
   e3314:	dd26      	ble.n	e3364 <__gethex+0x23e>
   e3316:	1b87      	subs	r7, r0, r6
   e3318:	4639      	mov	r1, r7
   e331a:	4628      	mov	r0, r5
   e331c:	f000 fe87 	bl	e402e <__any_on>
   e3320:	b1c8      	cbz	r0, e3356 <__gethex+0x230>
   e3322:	1e7b      	subs	r3, r7, #1
   e3324:	1159      	asrs	r1, r3, #5
   e3326:	f003 021f 	and.w	r2, r3, #31
   e332a:	f04f 0901 	mov.w	r9, #1
   e332e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e3332:	fa09 f202 	lsl.w	r2, r9, r2
   e3336:	420a      	tst	r2, r1
   e3338:	d00e      	beq.n	e3358 <__gethex+0x232>
   e333a:	454b      	cmp	r3, r9
   e333c:	dc02      	bgt.n	e3344 <__gethex+0x21e>
   e333e:	f04f 0902 	mov.w	r9, #2
   e3342:	e009      	b.n	e3358 <__gethex+0x232>
   e3344:	1eb9      	subs	r1, r7, #2
   e3346:	4628      	mov	r0, r5
   e3348:	f000 fe71 	bl	e402e <__any_on>
   e334c:	2800      	cmp	r0, #0
   e334e:	d0f6      	beq.n	e333e <__gethex+0x218>
   e3350:	f04f 0903 	mov.w	r9, #3
   e3354:	e000      	b.n	e3358 <__gethex+0x232>
   e3356:	4681      	mov	r9, r0
   e3358:	4639      	mov	r1, r7
   e335a:	4628      	mov	r0, r5
   e335c:	f7ff fe98 	bl	e3090 <rshift>
   e3360:	443c      	add	r4, r7
   e3362:	e00c      	b.n	e337e <__gethex+0x258>
   e3364:	da09      	bge.n	e337a <__gethex+0x254>
   e3366:	1a37      	subs	r7, r6, r0
   e3368:	4629      	mov	r1, r5
   e336a:	463a      	mov	r2, r7
   e336c:	9802      	ldr	r0, [sp, #8]
   e336e:	f000 fc8b 	bl	e3c88 <__lshift>
   e3372:	1be4      	subs	r4, r4, r7
   e3374:	4605      	mov	r5, r0
   e3376:	f100 0a14 	add.w	sl, r0, #20
   e337a:	f04f 0900 	mov.w	r9, #0
   e337e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e3382:	429c      	cmp	r4, r3
   e3384:	dd08      	ble.n	e3398 <__gethex+0x272>
   e3386:	9802      	ldr	r0, [sp, #8]
   e3388:	4629      	mov	r1, r5
   e338a:	f000 fab8 	bl	e38fe <_Bfree>
   e338e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e3390:	2300      	movs	r3, #0
   e3392:	6013      	str	r3, [r2, #0]
   e3394:	20a3      	movs	r0, #163	; 0xa3
   e3396:	e0e2      	b.n	e355e <__gethex+0x438>
   e3398:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e339c:	4284      	cmp	r4, r0
   e339e:	da53      	bge.n	e3448 <__gethex+0x322>
   e33a0:	1b04      	subs	r4, r0, r4
   e33a2:	42a6      	cmp	r6, r4
   e33a4:	dc2e      	bgt.n	e3404 <__gethex+0x2de>
   e33a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e33aa:	2b02      	cmp	r3, #2
   e33ac:	d01a      	beq.n	e33e4 <__gethex+0x2be>
   e33ae:	2b03      	cmp	r3, #3
   e33b0:	d01c      	beq.n	e33ec <__gethex+0x2c6>
   e33b2:	2b01      	cmp	r3, #1
   e33b4:	d11d      	bne.n	e33f2 <__gethex+0x2cc>
   e33b6:	42a6      	cmp	r6, r4
   e33b8:	d11b      	bne.n	e33f2 <__gethex+0x2cc>
   e33ba:	2e01      	cmp	r6, #1
   e33bc:	dc0b      	bgt.n	e33d6 <__gethex+0x2b0>
   e33be:	9a06      	ldr	r2, [sp, #24]
   e33c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e33c4:	6013      	str	r3, [r2, #0]
   e33c6:	2301      	movs	r3, #1
   e33c8:	612b      	str	r3, [r5, #16]
   e33ca:	f8ca 3000 	str.w	r3, [sl]
   e33ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e33d0:	2062      	movs	r0, #98	; 0x62
   e33d2:	601d      	str	r5, [r3, #0]
   e33d4:	e0c3      	b.n	e355e <__gethex+0x438>
   e33d6:	1e71      	subs	r1, r6, #1
   e33d8:	4628      	mov	r0, r5
   e33da:	f000 fe28 	bl	e402e <__any_on>
   e33de:	2800      	cmp	r0, #0
   e33e0:	d1ed      	bne.n	e33be <__gethex+0x298>
   e33e2:	e006      	b.n	e33f2 <__gethex+0x2cc>
   e33e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e33e6:	2b00      	cmp	r3, #0
   e33e8:	d0e9      	beq.n	e33be <__gethex+0x298>
   e33ea:	e002      	b.n	e33f2 <__gethex+0x2cc>
   e33ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e33ee:	2b00      	cmp	r3, #0
   e33f0:	d1e5      	bne.n	e33be <__gethex+0x298>
   e33f2:	9802      	ldr	r0, [sp, #8]
   e33f4:	4629      	mov	r1, r5
   e33f6:	f000 fa82 	bl	e38fe <_Bfree>
   e33fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e33fc:	2300      	movs	r3, #0
   e33fe:	6013      	str	r3, [r2, #0]
   e3400:	2050      	movs	r0, #80	; 0x50
   e3402:	e0ac      	b.n	e355e <__gethex+0x438>
   e3404:	1e67      	subs	r7, r4, #1
   e3406:	f1b9 0f00 	cmp.w	r9, #0
   e340a:	d106      	bne.n	e341a <__gethex+0x2f4>
   e340c:	b13f      	cbz	r7, e341e <__gethex+0x2f8>
   e340e:	4639      	mov	r1, r7
   e3410:	4628      	mov	r0, r5
   e3412:	f000 fe0c 	bl	e402e <__any_on>
   e3416:	4681      	mov	r9, r0
   e3418:	e001      	b.n	e341e <__gethex+0x2f8>
   e341a:	f04f 0901 	mov.w	r9, #1
   e341e:	117a      	asrs	r2, r7, #5
   e3420:	2301      	movs	r3, #1
   e3422:	f007 071f 	and.w	r7, r7, #31
   e3426:	fa03 f707 	lsl.w	r7, r3, r7
   e342a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e342e:	4621      	mov	r1, r4
   e3430:	421f      	tst	r7, r3
   e3432:	4628      	mov	r0, r5
   e3434:	bf18      	it	ne
   e3436:	f049 0902 	orrne.w	r9, r9, #2
   e343a:	1b36      	subs	r6, r6, r4
   e343c:	f7ff fe28 	bl	e3090 <rshift>
   e3440:	2702      	movs	r7, #2
   e3442:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e3446:	e000      	b.n	e344a <__gethex+0x324>
   e3448:	2701      	movs	r7, #1
   e344a:	f1b9 0f00 	cmp.w	r9, #0
   e344e:	f000 8081 	beq.w	e3554 <__gethex+0x42e>
   e3452:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e3456:	2b02      	cmp	r3, #2
   e3458:	d00e      	beq.n	e3478 <__gethex+0x352>
   e345a:	2b03      	cmp	r3, #3
   e345c:	d010      	beq.n	e3480 <__gethex+0x35a>
   e345e:	2b01      	cmp	r3, #1
   e3460:	d176      	bne.n	e3550 <__gethex+0x42a>
   e3462:	f019 0f02 	tst.w	r9, #2
   e3466:	d073      	beq.n	e3550 <__gethex+0x42a>
   e3468:	f8da 0000 	ldr.w	r0, [sl]
   e346c:	ea49 0900 	orr.w	r9, r9, r0
   e3470:	f019 0f01 	tst.w	r9, #1
   e3474:	d107      	bne.n	e3486 <__gethex+0x360>
   e3476:	e06b      	b.n	e3550 <__gethex+0x42a>
   e3478:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e347a:	f1c3 0301 	rsb	r3, r3, #1
   e347e:	9315      	str	r3, [sp, #84]	; 0x54
   e3480:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e3482:	2b00      	cmp	r3, #0
   e3484:	d064      	beq.n	e3550 <__gethex+0x42a>
   e3486:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e348a:	f105 0314 	add.w	r3, r5, #20
   e348e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e3492:	eb03 0109 	add.w	r1, r3, r9
   e3496:	2000      	movs	r0, #0
   e3498:	681a      	ldr	r2, [r3, #0]
   e349a:	f1b2 3fff 	cmp.w	r2, #4294967295
   e349e:	d002      	beq.n	e34a6 <__gethex+0x380>
   e34a0:	3201      	adds	r2, #1
   e34a2:	601a      	str	r2, [r3, #0]
   e34a4:	e020      	b.n	e34e8 <__gethex+0x3c2>
   e34a6:	f843 0b04 	str.w	r0, [r3], #4
   e34aa:	4299      	cmp	r1, r3
   e34ac:	d8f4      	bhi.n	e3498 <__gethex+0x372>
   e34ae:	68ab      	ldr	r3, [r5, #8]
   e34b0:	459a      	cmp	sl, r3
   e34b2:	db12      	blt.n	e34da <__gethex+0x3b4>
   e34b4:	6869      	ldr	r1, [r5, #4]
   e34b6:	9802      	ldr	r0, [sp, #8]
   e34b8:	3101      	adds	r1, #1
   e34ba:	f000 f9eb 	bl	e3894 <_Balloc>
   e34be:	692a      	ldr	r2, [r5, #16]
   e34c0:	3202      	adds	r2, #2
   e34c2:	f105 010c 	add.w	r1, r5, #12
   e34c6:	4683      	mov	fp, r0
   e34c8:	0092      	lsls	r2, r2, #2
   e34ca:	300c      	adds	r0, #12
   e34cc:	f7fd fc29 	bl	e0d22 <memcpy>
   e34d0:	4629      	mov	r1, r5
   e34d2:	9802      	ldr	r0, [sp, #8]
   e34d4:	f000 fa13 	bl	e38fe <_Bfree>
   e34d8:	465d      	mov	r5, fp
   e34da:	692b      	ldr	r3, [r5, #16]
   e34dc:	1c5a      	adds	r2, r3, #1
   e34de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e34e2:	612a      	str	r2, [r5, #16]
   e34e4:	2201      	movs	r2, #1
   e34e6:	615a      	str	r2, [r3, #20]
   e34e8:	2f02      	cmp	r7, #2
   e34ea:	f105 0214 	add.w	r2, r5, #20
   e34ee:	d111      	bne.n	e3514 <__gethex+0x3ee>
   e34f0:	f8d8 3000 	ldr.w	r3, [r8]
   e34f4:	3b01      	subs	r3, #1
   e34f6:	429e      	cmp	r6, r3
   e34f8:	d127      	bne.n	e354a <__gethex+0x424>
   e34fa:	1171      	asrs	r1, r6, #5
   e34fc:	2301      	movs	r3, #1
   e34fe:	f006 061f 	and.w	r6, r6, #31
   e3502:	fa03 f606 	lsl.w	r6, r3, r6
   e3506:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e350a:	421e      	tst	r6, r3
   e350c:	bf0c      	ite	eq
   e350e:	2702      	moveq	r7, #2
   e3510:	2701      	movne	r7, #1
   e3512:	e01a      	b.n	e354a <__gethex+0x424>
   e3514:	692b      	ldr	r3, [r5, #16]
   e3516:	459a      	cmp	sl, r3
   e3518:	da0a      	bge.n	e3530 <__gethex+0x40a>
   e351a:	2101      	movs	r1, #1
   e351c:	4628      	mov	r0, r5
   e351e:	f7ff fdb7 	bl	e3090 <rshift>
   e3522:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e3526:	3401      	adds	r4, #1
   e3528:	429c      	cmp	r4, r3
   e352a:	f73f af2c 	bgt.w	e3386 <__gethex+0x260>
   e352e:	e00b      	b.n	e3548 <__gethex+0x422>
   e3530:	f016 061f 	ands.w	r6, r6, #31
   e3534:	d008      	beq.n	e3548 <__gethex+0x422>
   e3536:	4491      	add	r9, r2
   e3538:	f1c6 0620 	rsb	r6, r6, #32
   e353c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e3540:	f000 fa6d 	bl	e3a1e <__hi0bits>
   e3544:	42b0      	cmp	r0, r6
   e3546:	dbe8      	blt.n	e351a <__gethex+0x3f4>
   e3548:	2701      	movs	r7, #1
   e354a:	f047 0720 	orr.w	r7, r7, #32
   e354e:	e001      	b.n	e3554 <__gethex+0x42e>
   e3550:	f047 0710 	orr.w	r7, r7, #16
   e3554:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e3556:	601d      	str	r5, [r3, #0]
   e3558:	9b06      	ldr	r3, [sp, #24]
   e355a:	4638      	mov	r0, r7
   e355c:	601c      	str	r4, [r3, #0]
   e355e:	b00b      	add	sp, #44	; 0x2c
   e3560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e3564 <L_shift>:
   e3564:	f1c2 0208 	rsb	r2, r2, #8
   e3568:	0092      	lsls	r2, r2, #2
   e356a:	b570      	push	{r4, r5, r6, lr}
   e356c:	f1c2 0620 	rsb	r6, r2, #32
   e3570:	6843      	ldr	r3, [r0, #4]
   e3572:	6805      	ldr	r5, [r0, #0]
   e3574:	fa03 f406 	lsl.w	r4, r3, r6
   e3578:	432c      	orrs	r4, r5
   e357a:	40d3      	lsrs	r3, r2
   e357c:	6004      	str	r4, [r0, #0]
   e357e:	f840 3f04 	str.w	r3, [r0, #4]!
   e3582:	4288      	cmp	r0, r1
   e3584:	d3f4      	bcc.n	e3570 <L_shift+0xc>
   e3586:	bd70      	pop	{r4, r5, r6, pc}

000e3588 <__match>:
   e3588:	b530      	push	{r4, r5, lr}
   e358a:	6803      	ldr	r3, [r0, #0]
   e358c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e3590:	3301      	adds	r3, #1
   e3592:	b14c      	cbz	r4, e35a8 <__match+0x20>
   e3594:	781a      	ldrb	r2, [r3, #0]
   e3596:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e359a:	2d19      	cmp	r5, #25
   e359c:	bf98      	it	ls
   e359e:	3220      	addls	r2, #32
   e35a0:	42a2      	cmp	r2, r4
   e35a2:	d0f3      	beq.n	e358c <__match+0x4>
   e35a4:	2000      	movs	r0, #0
   e35a6:	bd30      	pop	{r4, r5, pc}
   e35a8:	6003      	str	r3, [r0, #0]
   e35aa:	2001      	movs	r0, #1
   e35ac:	bd30      	pop	{r4, r5, pc}

000e35ae <__hexnan>:
   e35ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e35b2:	680b      	ldr	r3, [r1, #0]
   e35b4:	f8d0 b000 	ldr.w	fp, [r0]
   e35b8:	115e      	asrs	r6, r3, #5
   e35ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e35be:	f013 031f 	ands.w	r3, r3, #31
   e35c2:	b085      	sub	sp, #20
   e35c4:	bf18      	it	ne
   e35c6:	3604      	addne	r6, #4
   e35c8:	1f35      	subs	r5, r6, #4
   e35ca:	4617      	mov	r7, r2
   e35cc:	2200      	movs	r2, #0
   e35ce:	4682      	mov	sl, r0
   e35d0:	9301      	str	r3, [sp, #4]
   e35d2:	f846 2c04 	str.w	r2, [r6, #-4]
   e35d6:	46a8      	mov	r8, r5
   e35d8:	462c      	mov	r4, r5
   e35da:	9200      	str	r2, [sp, #0]
   e35dc:	4691      	mov	r9, r2
   e35de:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e35e2:	2900      	cmp	r1, #0
   e35e4:	d03c      	beq.n	e3660 <__hexnan+0xb2>
   e35e6:	4608      	mov	r0, r1
   e35e8:	9203      	str	r2, [sp, #12]
   e35ea:	9102      	str	r1, [sp, #8]
   e35ec:	f7ff fd86 	bl	e30fc <__hexdig_fun>
   e35f0:	9a03      	ldr	r2, [sp, #12]
   e35f2:	bb00      	cbnz	r0, e3636 <__hexnan+0x88>
   e35f4:	9902      	ldr	r1, [sp, #8]
   e35f6:	2920      	cmp	r1, #32
   e35f8:	d816      	bhi.n	e3628 <__hexnan+0x7a>
   e35fa:	9b00      	ldr	r3, [sp, #0]
   e35fc:	4599      	cmp	r9, r3
   e35fe:	ddee      	ble.n	e35de <__hexnan+0x30>
   e3600:	4544      	cmp	r4, r8
   e3602:	d205      	bcs.n	e3610 <__hexnan+0x62>
   e3604:	2a07      	cmp	r2, #7
   e3606:	dc03      	bgt.n	e3610 <__hexnan+0x62>
   e3608:	4641      	mov	r1, r8
   e360a:	4620      	mov	r0, r4
   e360c:	f7ff ffaa 	bl	e3564 <L_shift>
   e3610:	42bc      	cmp	r4, r7
   e3612:	d923      	bls.n	e365c <__hexnan+0xae>
   e3614:	2300      	movs	r3, #0
   e3616:	f1a4 0804 	sub.w	r8, r4, #4
   e361a:	f844 3c04 	str.w	r3, [r4, #-4]
   e361e:	f8cd 9000 	str.w	r9, [sp]
   e3622:	4644      	mov	r4, r8
   e3624:	461a      	mov	r2, r3
   e3626:	e7da      	b.n	e35de <__hexnan+0x30>
   e3628:	2929      	cmp	r1, #41	; 0x29
   e362a:	d148      	bne.n	e36be <__hexnan+0x110>
   e362c:	f10b 0301 	add.w	r3, fp, #1
   e3630:	f8ca 3000 	str.w	r3, [sl]
   e3634:	e014      	b.n	e3660 <__hexnan+0xb2>
   e3636:	3201      	adds	r2, #1
   e3638:	2a08      	cmp	r2, #8
   e363a:	f109 0901 	add.w	r9, r9, #1
   e363e:	dd06      	ble.n	e364e <__hexnan+0xa0>
   e3640:	42bc      	cmp	r4, r7
   e3642:	d9cc      	bls.n	e35de <__hexnan+0x30>
   e3644:	2300      	movs	r3, #0
   e3646:	f844 3c04 	str.w	r3, [r4, #-4]
   e364a:	2201      	movs	r2, #1
   e364c:	3c04      	subs	r4, #4
   e364e:	6821      	ldr	r1, [r4, #0]
   e3650:	f000 000f 	and.w	r0, r0, #15
   e3654:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e3658:	6020      	str	r0, [r4, #0]
   e365a:	e7c0      	b.n	e35de <__hexnan+0x30>
   e365c:	2208      	movs	r2, #8
   e365e:	e7be      	b.n	e35de <__hexnan+0x30>
   e3660:	f1b9 0f00 	cmp.w	r9, #0
   e3664:	d02b      	beq.n	e36be <__hexnan+0x110>
   e3666:	4544      	cmp	r4, r8
   e3668:	d205      	bcs.n	e3676 <__hexnan+0xc8>
   e366a:	2a07      	cmp	r2, #7
   e366c:	dc03      	bgt.n	e3676 <__hexnan+0xc8>
   e366e:	4641      	mov	r1, r8
   e3670:	4620      	mov	r0, r4
   e3672:	f7ff ff77 	bl	e3564 <L_shift>
   e3676:	42bc      	cmp	r4, r7
   e3678:	d90c      	bls.n	e3694 <__hexnan+0xe6>
   e367a:	463b      	mov	r3, r7
   e367c:	f854 2b04 	ldr.w	r2, [r4], #4
   e3680:	f843 2b04 	str.w	r2, [r3], #4
   e3684:	42a5      	cmp	r5, r4
   e3686:	d2f9      	bcs.n	e367c <__hexnan+0xce>
   e3688:	2200      	movs	r2, #0
   e368a:	f843 2b04 	str.w	r2, [r3], #4
   e368e:	429d      	cmp	r5, r3
   e3690:	d2fb      	bcs.n	e368a <__hexnan+0xdc>
   e3692:	e00b      	b.n	e36ac <__hexnan+0xfe>
   e3694:	9b01      	ldr	r3, [sp, #4]
   e3696:	b14b      	cbz	r3, e36ac <__hexnan+0xfe>
   e3698:	f1c3 0220 	rsb	r2, r3, #32
   e369c:	f04f 33ff 	mov.w	r3, #4294967295
   e36a0:	40d3      	lsrs	r3, r2
   e36a2:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e36a6:	4013      	ands	r3, r2
   e36a8:	f846 3c04 	str.w	r3, [r6, #-4]
   e36ac:	682b      	ldr	r3, [r5, #0]
   e36ae:	b943      	cbnz	r3, e36c2 <__hexnan+0x114>
   e36b0:	42bd      	cmp	r5, r7
   e36b2:	d102      	bne.n	e36ba <__hexnan+0x10c>
   e36b4:	2301      	movs	r3, #1
   e36b6:	602b      	str	r3, [r5, #0]
   e36b8:	e003      	b.n	e36c2 <__hexnan+0x114>
   e36ba:	3d04      	subs	r5, #4
   e36bc:	e7f6      	b.n	e36ac <__hexnan+0xfe>
   e36be:	2004      	movs	r0, #4
   e36c0:	e000      	b.n	e36c4 <__hexnan+0x116>
   e36c2:	2005      	movs	r0, #5
   e36c4:	b005      	add	sp, #20
   e36c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e36cc <_findenv_r>:
   e36cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e36d0:	4607      	mov	r7, r0
   e36d2:	468b      	mov	fp, r1
   e36d4:	4690      	mov	r8, r2
   e36d6:	f000 fcda 	bl	e408e <__env_lock>
   e36da:	4b19      	ldr	r3, [pc, #100]	; (e3740 <_findenv_r+0x74>)
   e36dc:	681d      	ldr	r5, [r3, #0]
   e36de:	469a      	mov	sl, r3
   e36e0:	b13d      	cbz	r5, e36f2 <_findenv_r+0x26>
   e36e2:	465c      	mov	r4, fp
   e36e4:	4623      	mov	r3, r4
   e36e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   e36ea:	b142      	cbz	r2, e36fe <_findenv_r+0x32>
   e36ec:	2a3d      	cmp	r2, #61	; 0x3d
   e36ee:	461c      	mov	r4, r3
   e36f0:	d1f8      	bne.n	e36e4 <_findenv_r+0x18>
   e36f2:	4638      	mov	r0, r7
   e36f4:	f000 fccc 	bl	e4090 <__env_unlock>
   e36f8:	2000      	movs	r0, #0
   e36fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e36fe:	ebcb 0404 	rsb	r4, fp, r4
   e3702:	46a9      	mov	r9, r5
   e3704:	f859 0b04 	ldr.w	r0, [r9], #4
   e3708:	2800      	cmp	r0, #0
   e370a:	d0f2      	beq.n	e36f2 <_findenv_r+0x26>
   e370c:	4622      	mov	r2, r4
   e370e:	4659      	mov	r1, fp
   e3710:	f7fe fae8 	bl	e1ce4 <strncmp>
   e3714:	b988      	cbnz	r0, e373a <_findenv_r+0x6e>
   e3716:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e371a:	191e      	adds	r6, r3, r4
   e371c:	5d1b      	ldrb	r3, [r3, r4]
   e371e:	2b3d      	cmp	r3, #61	; 0x3d
   e3720:	d10b      	bne.n	e373a <_findenv_r+0x6e>
   e3722:	f8da 3000 	ldr.w	r3, [sl]
   e3726:	1aed      	subs	r5, r5, r3
   e3728:	10ad      	asrs	r5, r5, #2
   e372a:	4638      	mov	r0, r7
   e372c:	f8c8 5000 	str.w	r5, [r8]
   e3730:	f000 fcae 	bl	e4090 <__env_unlock>
   e3734:	1c70      	adds	r0, r6, #1
   e3736:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e373a:	464d      	mov	r5, r9
   e373c:	e7e1      	b.n	e3702 <_findenv_r+0x36>
   e373e:	bf00      	nop
   e3740:	2003bce4 	.word	0x2003bce4

000e3744 <_getenv_r>:
   e3744:	b507      	push	{r0, r1, r2, lr}
   e3746:	aa01      	add	r2, sp, #4
   e3748:	f7ff ffc0 	bl	e36cc <_findenv_r>
   e374c:	b003      	add	sp, #12
   e374e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e3754 <__gettzinfo>:
   e3754:	4800      	ldr	r0, [pc, #0]	; (e3758 <__gettzinfo+0x4>)
   e3756:	4770      	bx	lr
   e3758:	2003bca4 	.word	0x2003bca4

000e375c <gmtime_r>:
   e375c:	6802      	ldr	r2, [r0, #0]
   e375e:	4b47      	ldr	r3, [pc, #284]	; (e387c <gmtime_r+0x120>)
   e3760:	b5f0      	push	{r4, r5, r6, r7, lr}
   e3762:	fb92 f4f3 	sdiv	r4, r2, r3
   e3766:	fb03 2214 	mls	r2, r3, r4, r2
   e376a:	2a00      	cmp	r2, #0
   e376c:	bfbc      	itt	lt
   e376e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e3772:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e3776:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e377a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e377e:	fb92 f3f0 	sdiv	r3, r2, r0
   e3782:	fb00 2213 	mls	r2, r0, r3, r2
   e3786:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e378a:	bfac      	ite	ge
   e378c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e3790:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e3794:	608b      	str	r3, [r1, #8]
   e3796:	fb92 f3f0 	sdiv	r3, r2, r0
   e379a:	fb00 2213 	mls	r2, r0, r3, r2
   e379e:	604b      	str	r3, [r1, #4]
   e37a0:	600a      	str	r2, [r1, #0]
   e37a2:	2307      	movs	r3, #7
   e37a4:	1ce2      	adds	r2, r4, #3
   e37a6:	fb92 f3f3 	sdiv	r3, r2, r3
   e37aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e37ae:	1ad3      	subs	r3, r2, r3
   e37b0:	618b      	str	r3, [r1, #24]
   e37b2:	4b33      	ldr	r3, [pc, #204]	; (e3880 <gmtime_r+0x124>)
   e37b4:	4d33      	ldr	r5, [pc, #204]	; (e3884 <gmtime_r+0x128>)
   e37b6:	fb94 f5f5 	sdiv	r5, r4, r5
   e37ba:	fb03 4405 	mla	r4, r3, r5, r4
   e37be:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e37c2:	fbb4 f2f2 	udiv	r2, r4, r2
   e37c6:	4422      	add	r2, r4
   e37c8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e37cc:	fbb4 f3f7 	udiv	r3, r4, r7
   e37d0:	1ad2      	subs	r2, r2, r3
   e37d2:	482d      	ldr	r0, [pc, #180]	; (e3888 <gmtime_r+0x12c>)
   e37d4:	fbb4 f0f0 	udiv	r0, r4, r0
   e37d8:	f648 6694 	movw	r6, #36500	; 0x8e94
   e37dc:	1a13      	subs	r3, r2, r0
   e37de:	fbb3 f6f6 	udiv	r6, r3, r6
   e37e2:	4434      	add	r4, r6
   e37e4:	f240 126d 	movw	r2, #365	; 0x16d
   e37e8:	fbb3 f0f2 	udiv	r0, r3, r2
   e37ec:	fbb3 f3f7 	udiv	r3, r3, r7
   e37f0:	1ae3      	subs	r3, r4, r3
   e37f2:	fb02 3310 	mls	r3, r2, r0, r3
   e37f6:	2499      	movs	r4, #153	; 0x99
   e37f8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e37fc:	3202      	adds	r2, #2
   e37fe:	fbb2 f2f4 	udiv	r2, r2, r4
   e3802:	2a0a      	cmp	r2, #10
   e3804:	fb04 f402 	mul.w	r4, r4, r2
   e3808:	f104 0602 	add.w	r6, r4, #2
   e380c:	f04f 0405 	mov.w	r4, #5
   e3810:	fbb6 f4f4 	udiv	r4, r6, r4
   e3814:	bf34      	ite	cc
   e3816:	2602      	movcc	r6, #2
   e3818:	f06f 0609 	mvncs.w	r6, #9
   e381c:	4416      	add	r6, r2
   e381e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3822:	fb02 0505 	mla	r5, r2, r5, r0
   e3826:	1c5f      	adds	r7, r3, #1
   e3828:	2e01      	cmp	r6, #1
   e382a:	bf98      	it	ls
   e382c:	3501      	addls	r5, #1
   e382e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e3832:	eba7 0704 	sub.w	r7, r7, r4
   e3836:	d302      	bcc.n	e383e <gmtime_r+0xe2>
   e3838:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e383c:	e014      	b.n	e3868 <gmtime_r+0x10c>
   e383e:	0782      	lsls	r2, r0, #30
   e3840:	d105      	bne.n	e384e <gmtime_r+0xf2>
   e3842:	2464      	movs	r4, #100	; 0x64
   e3844:	fbb0 f2f4 	udiv	r2, r0, r4
   e3848:	fb04 0212 	mls	r2, r4, r2, r0
   e384c:	b94a      	cbnz	r2, e3862 <gmtime_r+0x106>
   e384e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3852:	fbb0 f4f2 	udiv	r4, r0, r2
   e3856:	fb02 0014 	mls	r0, r2, r4, r0
   e385a:	fab0 f280 	clz	r2, r0
   e385e:	0952      	lsrs	r2, r2, #5
   e3860:	e000      	b.n	e3864 <gmtime_r+0x108>
   e3862:	2201      	movs	r2, #1
   e3864:	333b      	adds	r3, #59	; 0x3b
   e3866:	441a      	add	r2, r3
   e3868:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e386c:	2300      	movs	r3, #0
   e386e:	61ca      	str	r2, [r1, #28]
   e3870:	614d      	str	r5, [r1, #20]
   e3872:	610e      	str	r6, [r1, #16]
   e3874:	60cf      	str	r7, [r1, #12]
   e3876:	620b      	str	r3, [r1, #32]
   e3878:	4608      	mov	r0, r1
   e387a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e387c:	00015180 	.word	0x00015180
   e3880:	fffdc54f 	.word	0xfffdc54f
   e3884:	00023ab1 	.word	0x00023ab1
   e3888:	00023ab0 	.word	0x00023ab0

000e388c <labs>:
   e388c:	2800      	cmp	r0, #0
   e388e:	bfb8      	it	lt
   e3890:	4240      	neglt	r0, r0
   e3892:	4770      	bx	lr

000e3894 <_Balloc>:
   e3894:	b570      	push	{r4, r5, r6, lr}
   e3896:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e3898:	4604      	mov	r4, r0
   e389a:	460e      	mov	r6, r1
   e389c:	b93d      	cbnz	r5, e38ae <_Balloc+0x1a>
   e389e:	2010      	movs	r0, #16
   e38a0:	f7f7 fd34 	bl	db30c <malloc>
   e38a4:	6260      	str	r0, [r4, #36]	; 0x24
   e38a6:	6045      	str	r5, [r0, #4]
   e38a8:	6085      	str	r5, [r0, #8]
   e38aa:	6005      	str	r5, [r0, #0]
   e38ac:	60c5      	str	r5, [r0, #12]
   e38ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e38b0:	68eb      	ldr	r3, [r5, #12]
   e38b2:	b143      	cbz	r3, e38c6 <_Balloc+0x32>
   e38b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e38b6:	68db      	ldr	r3, [r3, #12]
   e38b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e38bc:	b178      	cbz	r0, e38de <_Balloc+0x4a>
   e38be:	6802      	ldr	r2, [r0, #0]
   e38c0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e38c4:	e017      	b.n	e38f6 <_Balloc+0x62>
   e38c6:	2221      	movs	r2, #33	; 0x21
   e38c8:	2104      	movs	r1, #4
   e38ca:	4620      	mov	r0, r4
   e38cc:	f000 fbd1 	bl	e4072 <_calloc_r>
   e38d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e38d2:	60e8      	str	r0, [r5, #12]
   e38d4:	68db      	ldr	r3, [r3, #12]
   e38d6:	2b00      	cmp	r3, #0
   e38d8:	d1ec      	bne.n	e38b4 <_Balloc+0x20>
   e38da:	2000      	movs	r0, #0
   e38dc:	bd70      	pop	{r4, r5, r6, pc}
   e38de:	2101      	movs	r1, #1
   e38e0:	fa01 f506 	lsl.w	r5, r1, r6
   e38e4:	1d6a      	adds	r2, r5, #5
   e38e6:	0092      	lsls	r2, r2, #2
   e38e8:	4620      	mov	r0, r4
   e38ea:	f000 fbc2 	bl	e4072 <_calloc_r>
   e38ee:	2800      	cmp	r0, #0
   e38f0:	d0f3      	beq.n	e38da <_Balloc+0x46>
   e38f2:	6046      	str	r6, [r0, #4]
   e38f4:	6085      	str	r5, [r0, #8]
   e38f6:	2300      	movs	r3, #0
   e38f8:	6103      	str	r3, [r0, #16]
   e38fa:	60c3      	str	r3, [r0, #12]
   e38fc:	bd70      	pop	{r4, r5, r6, pc}

000e38fe <_Bfree>:
   e38fe:	b570      	push	{r4, r5, r6, lr}
   e3900:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e3902:	4606      	mov	r6, r0
   e3904:	460d      	mov	r5, r1
   e3906:	b93c      	cbnz	r4, e3918 <_Bfree+0x1a>
   e3908:	2010      	movs	r0, #16
   e390a:	f7f7 fcff 	bl	db30c <malloc>
   e390e:	6270      	str	r0, [r6, #36]	; 0x24
   e3910:	6044      	str	r4, [r0, #4]
   e3912:	6084      	str	r4, [r0, #8]
   e3914:	6004      	str	r4, [r0, #0]
   e3916:	60c4      	str	r4, [r0, #12]
   e3918:	b13d      	cbz	r5, e392a <_Bfree+0x2c>
   e391a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e391c:	686a      	ldr	r2, [r5, #4]
   e391e:	68db      	ldr	r3, [r3, #12]
   e3920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e3924:	6029      	str	r1, [r5, #0]
   e3926:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e392a:	bd70      	pop	{r4, r5, r6, pc}

000e392c <__multadd>:
   e392c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e3930:	690d      	ldr	r5, [r1, #16]
   e3932:	461f      	mov	r7, r3
   e3934:	4606      	mov	r6, r0
   e3936:	460c      	mov	r4, r1
   e3938:	f101 0e14 	add.w	lr, r1, #20
   e393c:	2300      	movs	r3, #0
   e393e:	f8de 0000 	ldr.w	r0, [lr]
   e3942:	b281      	uxth	r1, r0
   e3944:	fb02 7101 	mla	r1, r2, r1, r7
   e3948:	0c0f      	lsrs	r7, r1, #16
   e394a:	0c00      	lsrs	r0, r0, #16
   e394c:	fb02 7000 	mla	r0, r2, r0, r7
   e3950:	b289      	uxth	r1, r1
   e3952:	3301      	adds	r3, #1
   e3954:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e3958:	429d      	cmp	r5, r3
   e395a:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e395e:	f84e 1b04 	str.w	r1, [lr], #4
   e3962:	dcec      	bgt.n	e393e <__multadd+0x12>
   e3964:	b1d7      	cbz	r7, e399c <__multadd+0x70>
   e3966:	68a3      	ldr	r3, [r4, #8]
   e3968:	429d      	cmp	r5, r3
   e396a:	db12      	blt.n	e3992 <__multadd+0x66>
   e396c:	6861      	ldr	r1, [r4, #4]
   e396e:	4630      	mov	r0, r6
   e3970:	3101      	adds	r1, #1
   e3972:	f7ff ff8f 	bl	e3894 <_Balloc>
   e3976:	6922      	ldr	r2, [r4, #16]
   e3978:	3202      	adds	r2, #2
   e397a:	f104 010c 	add.w	r1, r4, #12
   e397e:	4680      	mov	r8, r0
   e3980:	0092      	lsls	r2, r2, #2
   e3982:	300c      	adds	r0, #12
   e3984:	f7fd f9cd 	bl	e0d22 <memcpy>
   e3988:	4621      	mov	r1, r4
   e398a:	4630      	mov	r0, r6
   e398c:	f7ff ffb7 	bl	e38fe <_Bfree>
   e3990:	4644      	mov	r4, r8
   e3992:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e3996:	3501      	adds	r5, #1
   e3998:	615f      	str	r7, [r3, #20]
   e399a:	6125      	str	r5, [r4, #16]
   e399c:	4620      	mov	r0, r4
   e399e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e39a2 <__s2b>:
   e39a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e39a6:	460c      	mov	r4, r1
   e39a8:	4615      	mov	r5, r2
   e39aa:	461f      	mov	r7, r3
   e39ac:	2209      	movs	r2, #9
   e39ae:	3308      	adds	r3, #8
   e39b0:	4606      	mov	r6, r0
   e39b2:	fb93 f3f2 	sdiv	r3, r3, r2
   e39b6:	2100      	movs	r1, #0
   e39b8:	2201      	movs	r2, #1
   e39ba:	429a      	cmp	r2, r3
   e39bc:	da02      	bge.n	e39c4 <__s2b+0x22>
   e39be:	0052      	lsls	r2, r2, #1
   e39c0:	3101      	adds	r1, #1
   e39c2:	e7fa      	b.n	e39ba <__s2b+0x18>
   e39c4:	4630      	mov	r0, r6
   e39c6:	f7ff ff65 	bl	e3894 <_Balloc>
   e39ca:	9b08      	ldr	r3, [sp, #32]
   e39cc:	6143      	str	r3, [r0, #20]
   e39ce:	2d09      	cmp	r5, #9
   e39d0:	f04f 0301 	mov.w	r3, #1
   e39d4:	6103      	str	r3, [r0, #16]
   e39d6:	dd11      	ble.n	e39fc <__s2b+0x5a>
   e39d8:	f104 0809 	add.w	r8, r4, #9
   e39dc:	46c1      	mov	r9, r8
   e39de:	442c      	add	r4, r5
   e39e0:	f819 3b01 	ldrb.w	r3, [r9], #1
   e39e4:	4601      	mov	r1, r0
   e39e6:	3b30      	subs	r3, #48	; 0x30
   e39e8:	220a      	movs	r2, #10
   e39ea:	4630      	mov	r0, r6
   e39ec:	f7ff ff9e 	bl	e392c <__multadd>
   e39f0:	45a1      	cmp	r9, r4
   e39f2:	d1f5      	bne.n	e39e0 <__s2b+0x3e>
   e39f4:	eb08 0405 	add.w	r4, r8, r5
   e39f8:	3c08      	subs	r4, #8
   e39fa:	e001      	b.n	e3a00 <__s2b+0x5e>
   e39fc:	340a      	adds	r4, #10
   e39fe:	2509      	movs	r5, #9
   e3a00:	1b2d      	subs	r5, r5, r4
   e3a02:	1963      	adds	r3, r4, r5
   e3a04:	429f      	cmp	r7, r3
   e3a06:	dd08      	ble.n	e3a1a <__s2b+0x78>
   e3a08:	f814 3b01 	ldrb.w	r3, [r4], #1
   e3a0c:	4601      	mov	r1, r0
   e3a0e:	3b30      	subs	r3, #48	; 0x30
   e3a10:	220a      	movs	r2, #10
   e3a12:	4630      	mov	r0, r6
   e3a14:	f7ff ff8a 	bl	e392c <__multadd>
   e3a18:	e7f3      	b.n	e3a02 <__s2b+0x60>
   e3a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e3a1e <__hi0bits>:
   e3a1e:	0c03      	lsrs	r3, r0, #16
   e3a20:	041b      	lsls	r3, r3, #16
   e3a22:	b913      	cbnz	r3, e3a2a <__hi0bits+0xc>
   e3a24:	0400      	lsls	r0, r0, #16
   e3a26:	2310      	movs	r3, #16
   e3a28:	e000      	b.n	e3a2c <__hi0bits+0xe>
   e3a2a:	2300      	movs	r3, #0
   e3a2c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e3a30:	bf04      	itt	eq
   e3a32:	0200      	lsleq	r0, r0, #8
   e3a34:	3308      	addeq	r3, #8
   e3a36:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e3a3a:	bf04      	itt	eq
   e3a3c:	0100      	lsleq	r0, r0, #4
   e3a3e:	3304      	addeq	r3, #4
   e3a40:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e3a44:	bf04      	itt	eq
   e3a46:	0080      	lsleq	r0, r0, #2
   e3a48:	3302      	addeq	r3, #2
   e3a4a:	2800      	cmp	r0, #0
   e3a4c:	db03      	blt.n	e3a56 <__hi0bits+0x38>
   e3a4e:	0042      	lsls	r2, r0, #1
   e3a50:	d503      	bpl.n	e3a5a <__hi0bits+0x3c>
   e3a52:	1c58      	adds	r0, r3, #1
   e3a54:	4770      	bx	lr
   e3a56:	4618      	mov	r0, r3
   e3a58:	4770      	bx	lr
   e3a5a:	2020      	movs	r0, #32
   e3a5c:	4770      	bx	lr

000e3a5e <__lo0bits>:
   e3a5e:	6803      	ldr	r3, [r0, #0]
   e3a60:	f013 0207 	ands.w	r2, r3, #7
   e3a64:	d00b      	beq.n	e3a7e <__lo0bits+0x20>
   e3a66:	07d9      	lsls	r1, r3, #31
   e3a68:	d422      	bmi.n	e3ab0 <__lo0bits+0x52>
   e3a6a:	079a      	lsls	r2, r3, #30
   e3a6c:	bf4b      	itete	mi
   e3a6e:	085b      	lsrmi	r3, r3, #1
   e3a70:	089b      	lsrpl	r3, r3, #2
   e3a72:	6003      	strmi	r3, [r0, #0]
   e3a74:	6003      	strpl	r3, [r0, #0]
   e3a76:	bf4c      	ite	mi
   e3a78:	2001      	movmi	r0, #1
   e3a7a:	2002      	movpl	r0, #2
   e3a7c:	4770      	bx	lr
   e3a7e:	b299      	uxth	r1, r3
   e3a80:	b909      	cbnz	r1, e3a86 <__lo0bits+0x28>
   e3a82:	0c1b      	lsrs	r3, r3, #16
   e3a84:	2210      	movs	r2, #16
   e3a86:	f013 0fff 	tst.w	r3, #255	; 0xff
   e3a8a:	bf04      	itt	eq
   e3a8c:	0a1b      	lsreq	r3, r3, #8
   e3a8e:	3208      	addeq	r2, #8
   e3a90:	0719      	lsls	r1, r3, #28
   e3a92:	bf04      	itt	eq
   e3a94:	091b      	lsreq	r3, r3, #4
   e3a96:	3204      	addeq	r2, #4
   e3a98:	0799      	lsls	r1, r3, #30
   e3a9a:	bf04      	itt	eq
   e3a9c:	089b      	lsreq	r3, r3, #2
   e3a9e:	3202      	addeq	r2, #2
   e3aa0:	07d9      	lsls	r1, r3, #31
   e3aa2:	d402      	bmi.n	e3aaa <__lo0bits+0x4c>
   e3aa4:	085b      	lsrs	r3, r3, #1
   e3aa6:	d005      	beq.n	e3ab4 <__lo0bits+0x56>
   e3aa8:	3201      	adds	r2, #1
   e3aaa:	6003      	str	r3, [r0, #0]
   e3aac:	4610      	mov	r0, r2
   e3aae:	4770      	bx	lr
   e3ab0:	2000      	movs	r0, #0
   e3ab2:	4770      	bx	lr
   e3ab4:	2020      	movs	r0, #32
   e3ab6:	4770      	bx	lr

000e3ab8 <__i2b>:
   e3ab8:	b510      	push	{r4, lr}
   e3aba:	460c      	mov	r4, r1
   e3abc:	2101      	movs	r1, #1
   e3abe:	f7ff fee9 	bl	e3894 <_Balloc>
   e3ac2:	2201      	movs	r2, #1
   e3ac4:	6144      	str	r4, [r0, #20]
   e3ac6:	6102      	str	r2, [r0, #16]
   e3ac8:	bd10      	pop	{r4, pc}

000e3aca <__multiply>:
   e3aca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3ace:	4614      	mov	r4, r2
   e3ad0:	690a      	ldr	r2, [r1, #16]
   e3ad2:	6923      	ldr	r3, [r4, #16]
   e3ad4:	429a      	cmp	r2, r3
   e3ad6:	bfb8      	it	lt
   e3ad8:	460b      	movlt	r3, r1
   e3ada:	4688      	mov	r8, r1
   e3adc:	bfbc      	itt	lt
   e3ade:	46a0      	movlt	r8, r4
   e3ae0:	461c      	movlt	r4, r3
   e3ae2:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e3ae6:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e3aea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e3aee:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e3af2:	eb07 0609 	add.w	r6, r7, r9
   e3af6:	429e      	cmp	r6, r3
   e3af8:	bfc8      	it	gt
   e3afa:	3101      	addgt	r1, #1
   e3afc:	f7ff feca 	bl	e3894 <_Balloc>
   e3b00:	f100 0514 	add.w	r5, r0, #20
   e3b04:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e3b08:	462b      	mov	r3, r5
   e3b0a:	2200      	movs	r2, #0
   e3b0c:	4563      	cmp	r3, ip
   e3b0e:	d202      	bcs.n	e3b16 <__multiply+0x4c>
   e3b10:	f843 2b04 	str.w	r2, [r3], #4
   e3b14:	e7fa      	b.n	e3b0c <__multiply+0x42>
   e3b16:	f104 0214 	add.w	r2, r4, #20
   e3b1a:	f108 0114 	add.w	r1, r8, #20
   e3b1e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e3b22:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e3b26:	9300      	str	r3, [sp, #0]
   e3b28:	9b00      	ldr	r3, [sp, #0]
   e3b2a:	9201      	str	r2, [sp, #4]
   e3b2c:	4293      	cmp	r3, r2
   e3b2e:	d957      	bls.n	e3be0 <__multiply+0x116>
   e3b30:	f8b2 b000 	ldrh.w	fp, [r2]
   e3b34:	f1bb 0f00 	cmp.w	fp, #0
   e3b38:	d023      	beq.n	e3b82 <__multiply+0xb8>
   e3b3a:	4689      	mov	r9, r1
   e3b3c:	46ae      	mov	lr, r5
   e3b3e:	f04f 0800 	mov.w	r8, #0
   e3b42:	f859 4b04 	ldr.w	r4, [r9], #4
   e3b46:	f8be a000 	ldrh.w	sl, [lr]
   e3b4a:	b2a3      	uxth	r3, r4
   e3b4c:	fb0b a303 	mla	r3, fp, r3, sl
   e3b50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e3b54:	f8de 4000 	ldr.w	r4, [lr]
   e3b58:	4443      	add	r3, r8
   e3b5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e3b5e:	fb0b 840a 	mla	r4, fp, sl, r8
   e3b62:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e3b66:	46f2      	mov	sl, lr
   e3b68:	b29b      	uxth	r3, r3
   e3b6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e3b6e:	454f      	cmp	r7, r9
   e3b70:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e3b74:	f84a 3b04 	str.w	r3, [sl], #4
   e3b78:	d901      	bls.n	e3b7e <__multiply+0xb4>
   e3b7a:	46d6      	mov	lr, sl
   e3b7c:	e7e1      	b.n	e3b42 <__multiply+0x78>
   e3b7e:	f8ce 8004 	str.w	r8, [lr, #4]
   e3b82:	9b01      	ldr	r3, [sp, #4]
   e3b84:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e3b88:	3204      	adds	r2, #4
   e3b8a:	f1ba 0f00 	cmp.w	sl, #0
   e3b8e:	d021      	beq.n	e3bd4 <__multiply+0x10a>
   e3b90:	682b      	ldr	r3, [r5, #0]
   e3b92:	462c      	mov	r4, r5
   e3b94:	4689      	mov	r9, r1
   e3b96:	f04f 0800 	mov.w	r8, #0
   e3b9a:	f8b9 e000 	ldrh.w	lr, [r9]
   e3b9e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e3ba2:	fb0a be0e 	mla	lr, sl, lr, fp
   e3ba6:	44f0      	add	r8, lr
   e3ba8:	46a3      	mov	fp, r4
   e3baa:	b29b      	uxth	r3, r3
   e3bac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e3bb0:	f84b 3b04 	str.w	r3, [fp], #4
   e3bb4:	f859 3b04 	ldr.w	r3, [r9], #4
   e3bb8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e3bbc:	0c1b      	lsrs	r3, r3, #16
   e3bbe:	fb0a e303 	mla	r3, sl, r3, lr
   e3bc2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e3bc6:	454f      	cmp	r7, r9
   e3bc8:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e3bcc:	d901      	bls.n	e3bd2 <__multiply+0x108>
   e3bce:	465c      	mov	r4, fp
   e3bd0:	e7e3      	b.n	e3b9a <__multiply+0xd0>
   e3bd2:	6063      	str	r3, [r4, #4]
   e3bd4:	3504      	adds	r5, #4
   e3bd6:	e7a7      	b.n	e3b28 <__multiply+0x5e>
   e3bd8:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e3bdc:	b913      	cbnz	r3, e3be4 <__multiply+0x11a>
   e3bde:	3e01      	subs	r6, #1
   e3be0:	2e00      	cmp	r6, #0
   e3be2:	dcf9      	bgt.n	e3bd8 <__multiply+0x10e>
   e3be4:	6106      	str	r6, [r0, #16]
   e3be6:	b003      	add	sp, #12
   e3be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e3bec <__pow5mult>:
   e3bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e3bf0:	4615      	mov	r5, r2
   e3bf2:	f012 0203 	ands.w	r2, r2, #3
   e3bf6:	4606      	mov	r6, r0
   e3bf8:	460f      	mov	r7, r1
   e3bfa:	d007      	beq.n	e3c0c <__pow5mult+0x20>
   e3bfc:	3a01      	subs	r2, #1
   e3bfe:	4c21      	ldr	r4, [pc, #132]	; (e3c84 <__pow5mult+0x98>)
   e3c00:	2300      	movs	r3, #0
   e3c02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e3c06:	f7ff fe91 	bl	e392c <__multadd>
   e3c0a:	4607      	mov	r7, r0
   e3c0c:	10ad      	asrs	r5, r5, #2
   e3c0e:	d036      	beq.n	e3c7e <__pow5mult+0x92>
   e3c10:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e3c12:	b93c      	cbnz	r4, e3c24 <__pow5mult+0x38>
   e3c14:	2010      	movs	r0, #16
   e3c16:	f7f7 fb79 	bl	db30c <malloc>
   e3c1a:	6270      	str	r0, [r6, #36]	; 0x24
   e3c1c:	6044      	str	r4, [r0, #4]
   e3c1e:	6084      	str	r4, [r0, #8]
   e3c20:	6004      	str	r4, [r0, #0]
   e3c22:	60c4      	str	r4, [r0, #12]
   e3c24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e3c28:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e3c2c:	b94c      	cbnz	r4, e3c42 <__pow5mult+0x56>
   e3c2e:	f240 2171 	movw	r1, #625	; 0x271
   e3c32:	4630      	mov	r0, r6
   e3c34:	f7ff ff40 	bl	e3ab8 <__i2b>
   e3c38:	2300      	movs	r3, #0
   e3c3a:	f8c8 0008 	str.w	r0, [r8, #8]
   e3c3e:	4604      	mov	r4, r0
   e3c40:	6003      	str	r3, [r0, #0]
   e3c42:	f04f 0800 	mov.w	r8, #0
   e3c46:	07eb      	lsls	r3, r5, #31
   e3c48:	d50a      	bpl.n	e3c60 <__pow5mult+0x74>
   e3c4a:	4639      	mov	r1, r7
   e3c4c:	4622      	mov	r2, r4
   e3c4e:	4630      	mov	r0, r6
   e3c50:	f7ff ff3b 	bl	e3aca <__multiply>
   e3c54:	4639      	mov	r1, r7
   e3c56:	4681      	mov	r9, r0
   e3c58:	4630      	mov	r0, r6
   e3c5a:	f7ff fe50 	bl	e38fe <_Bfree>
   e3c5e:	464f      	mov	r7, r9
   e3c60:	106d      	asrs	r5, r5, #1
   e3c62:	d00c      	beq.n	e3c7e <__pow5mult+0x92>
   e3c64:	6820      	ldr	r0, [r4, #0]
   e3c66:	b108      	cbz	r0, e3c6c <__pow5mult+0x80>
   e3c68:	4604      	mov	r4, r0
   e3c6a:	e7ec      	b.n	e3c46 <__pow5mult+0x5a>
   e3c6c:	4622      	mov	r2, r4
   e3c6e:	4621      	mov	r1, r4
   e3c70:	4630      	mov	r0, r6
   e3c72:	f7ff ff2a 	bl	e3aca <__multiply>
   e3c76:	6020      	str	r0, [r4, #0]
   e3c78:	f8c0 8000 	str.w	r8, [r0]
   e3c7c:	e7f4      	b.n	e3c68 <__pow5mult+0x7c>
   e3c7e:	4638      	mov	r0, r7
   e3c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e3c84:	000e5a08 	.word	0x000e5a08

000e3c88 <__lshift>:
   e3c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3c8c:	460c      	mov	r4, r1
   e3c8e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e3c92:	6926      	ldr	r6, [r4, #16]
   e3c94:	6849      	ldr	r1, [r1, #4]
   e3c96:	68a3      	ldr	r3, [r4, #8]
   e3c98:	4456      	add	r6, sl
   e3c9a:	4607      	mov	r7, r0
   e3c9c:	4691      	mov	r9, r2
   e3c9e:	1c75      	adds	r5, r6, #1
   e3ca0:	42ab      	cmp	r3, r5
   e3ca2:	da02      	bge.n	e3caa <__lshift+0x22>
   e3ca4:	3101      	adds	r1, #1
   e3ca6:	005b      	lsls	r3, r3, #1
   e3ca8:	e7fa      	b.n	e3ca0 <__lshift+0x18>
   e3caa:	4638      	mov	r0, r7
   e3cac:	f7ff fdf2 	bl	e3894 <_Balloc>
   e3cb0:	2300      	movs	r3, #0
   e3cb2:	4680      	mov	r8, r0
   e3cb4:	f100 0114 	add.w	r1, r0, #20
   e3cb8:	461a      	mov	r2, r3
   e3cba:	4553      	cmp	r3, sl
   e3cbc:	da03      	bge.n	e3cc6 <__lshift+0x3e>
   e3cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e3cc2:	3301      	adds	r3, #1
   e3cc4:	e7f9      	b.n	e3cba <__lshift+0x32>
   e3cc6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e3cca:	6920      	ldr	r0, [r4, #16]
   e3ccc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e3cd0:	f019 091f 	ands.w	r9, r9, #31
   e3cd4:	f104 0114 	add.w	r1, r4, #20
   e3cd8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e3cdc:	d014      	beq.n	e3d08 <__lshift+0x80>
   e3cde:	f1c9 0c20 	rsb	ip, r9, #32
   e3ce2:	2200      	movs	r2, #0
   e3ce4:	6808      	ldr	r0, [r1, #0]
   e3ce6:	fa00 f009 	lsl.w	r0, r0, r9
   e3cea:	4302      	orrs	r2, r0
   e3cec:	469a      	mov	sl, r3
   e3cee:	f843 2b04 	str.w	r2, [r3], #4
   e3cf2:	f851 2b04 	ldr.w	r2, [r1], #4
   e3cf6:	458e      	cmp	lr, r1
   e3cf8:	fa22 f20c 	lsr.w	r2, r2, ip
   e3cfc:	d8f2      	bhi.n	e3ce4 <__lshift+0x5c>
   e3cfe:	f8ca 2004 	str.w	r2, [sl, #4]
   e3d02:	b142      	cbz	r2, e3d16 <__lshift+0x8e>
   e3d04:	1cb5      	adds	r5, r6, #2
   e3d06:	e006      	b.n	e3d16 <__lshift+0x8e>
   e3d08:	3b04      	subs	r3, #4
   e3d0a:	f851 2b04 	ldr.w	r2, [r1], #4
   e3d0e:	f843 2f04 	str.w	r2, [r3, #4]!
   e3d12:	458e      	cmp	lr, r1
   e3d14:	d8f9      	bhi.n	e3d0a <__lshift+0x82>
   e3d16:	3d01      	subs	r5, #1
   e3d18:	4638      	mov	r0, r7
   e3d1a:	f8c8 5010 	str.w	r5, [r8, #16]
   e3d1e:	4621      	mov	r1, r4
   e3d20:	f7ff fded 	bl	e38fe <_Bfree>
   e3d24:	4640      	mov	r0, r8
   e3d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e3d2a <__mcmp>:
   e3d2a:	6903      	ldr	r3, [r0, #16]
   e3d2c:	690a      	ldr	r2, [r1, #16]
   e3d2e:	1a9b      	subs	r3, r3, r2
   e3d30:	b510      	push	{r4, lr}
   e3d32:	d111      	bne.n	e3d58 <__mcmp+0x2e>
   e3d34:	0092      	lsls	r2, r2, #2
   e3d36:	3014      	adds	r0, #20
   e3d38:	3114      	adds	r1, #20
   e3d3a:	1883      	adds	r3, r0, r2
   e3d3c:	440a      	add	r2, r1
   e3d3e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e3d42:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e3d46:	428c      	cmp	r4, r1
   e3d48:	d002      	beq.n	e3d50 <__mcmp+0x26>
   e3d4a:	d307      	bcc.n	e3d5c <__mcmp+0x32>
   e3d4c:	2001      	movs	r0, #1
   e3d4e:	bd10      	pop	{r4, pc}
   e3d50:	4298      	cmp	r0, r3
   e3d52:	d3f4      	bcc.n	e3d3e <__mcmp+0x14>
   e3d54:	2000      	movs	r0, #0
   e3d56:	bd10      	pop	{r4, pc}
   e3d58:	4618      	mov	r0, r3
   e3d5a:	bd10      	pop	{r4, pc}
   e3d5c:	f04f 30ff 	mov.w	r0, #4294967295
   e3d60:	bd10      	pop	{r4, pc}

000e3d62 <__mdiff>:
   e3d62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e3d66:	460c      	mov	r4, r1
   e3d68:	4607      	mov	r7, r0
   e3d6a:	4611      	mov	r1, r2
   e3d6c:	4620      	mov	r0, r4
   e3d6e:	4615      	mov	r5, r2
   e3d70:	f7ff ffdb 	bl	e3d2a <__mcmp>
   e3d74:	1e06      	subs	r6, r0, #0
   e3d76:	d108      	bne.n	e3d8a <__mdiff+0x28>
   e3d78:	4631      	mov	r1, r6
   e3d7a:	4638      	mov	r0, r7
   e3d7c:	f7ff fd8a 	bl	e3894 <_Balloc>
   e3d80:	2301      	movs	r3, #1
   e3d82:	6103      	str	r3, [r0, #16]
   e3d84:	6146      	str	r6, [r0, #20]
   e3d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e3d8a:	bfbc      	itt	lt
   e3d8c:	4623      	movlt	r3, r4
   e3d8e:	462c      	movlt	r4, r5
   e3d90:	4638      	mov	r0, r7
   e3d92:	6861      	ldr	r1, [r4, #4]
   e3d94:	bfba      	itte	lt
   e3d96:	461d      	movlt	r5, r3
   e3d98:	2601      	movlt	r6, #1
   e3d9a:	2600      	movge	r6, #0
   e3d9c:	f7ff fd7a 	bl	e3894 <_Balloc>
   e3da0:	692b      	ldr	r3, [r5, #16]
   e3da2:	60c6      	str	r6, [r0, #12]
   e3da4:	6926      	ldr	r6, [r4, #16]
   e3da6:	f105 0914 	add.w	r9, r5, #20
   e3daa:	3414      	adds	r4, #20
   e3dac:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e3db0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e3db4:	f100 0514 	add.w	r5, r0, #20
   e3db8:	f04f 0c00 	mov.w	ip, #0
   e3dbc:	f854 3b04 	ldr.w	r3, [r4], #4
   e3dc0:	f859 2b04 	ldr.w	r2, [r9], #4
   e3dc4:	fa1c f183 	uxtah	r1, ip, r3
   e3dc8:	fa1f fe82 	uxth.w	lr, r2
   e3dcc:	0c12      	lsrs	r2, r2, #16
   e3dce:	ebce 0101 	rsb	r1, lr, r1
   e3dd2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e3dd6:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e3dda:	b289      	uxth	r1, r1
   e3ddc:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e3de0:	45c8      	cmp	r8, r9
   e3de2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e3de6:	46a6      	mov	lr, r4
   e3de8:	f845 3b04 	str.w	r3, [r5], #4
   e3dec:	d8e6      	bhi.n	e3dbc <__mdiff+0x5a>
   e3dee:	45be      	cmp	lr, r7
   e3df0:	d20e      	bcs.n	e3e10 <__mdiff+0xae>
   e3df2:	f85e 1b04 	ldr.w	r1, [lr], #4
   e3df6:	fa1c f281 	uxtah	r2, ip, r1
   e3dfa:	1413      	asrs	r3, r2, #16
   e3dfc:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e3e00:	b292      	uxth	r2, r2
   e3e02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e3e06:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e3e0a:	f845 2b04 	str.w	r2, [r5], #4
   e3e0e:	e7ee      	b.n	e3dee <__mdiff+0x8c>
   e3e10:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e3e14:	b90b      	cbnz	r3, e3e1a <__mdiff+0xb8>
   e3e16:	3e01      	subs	r6, #1
   e3e18:	e7fa      	b.n	e3e10 <__mdiff+0xae>
   e3e1a:	6106      	str	r6, [r0, #16]
   e3e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e3e20 <__ulp>:
   e3e20:	4b12      	ldr	r3, [pc, #72]	; (e3e6c <__ulp+0x4c>)
   e3e22:	ee10 2a90 	vmov	r2, s1
   e3e26:	401a      	ands	r2, r3
   e3e28:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e3e2c:	2b00      	cmp	r3, #0
   e3e2e:	dd02      	ble.n	e3e36 <__ulp+0x16>
   e3e30:	2000      	movs	r0, #0
   e3e32:	4619      	mov	r1, r3
   e3e34:	e017      	b.n	e3e66 <__ulp+0x46>
   e3e36:	425b      	negs	r3, r3
   e3e38:	151b      	asrs	r3, r3, #20
   e3e3a:	2b13      	cmp	r3, #19
   e3e3c:	f04f 0000 	mov.w	r0, #0
   e3e40:	f04f 0100 	mov.w	r1, #0
   e3e44:	dc04      	bgt.n	e3e50 <__ulp+0x30>
   e3e46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e3e4a:	fa42 f103 	asr.w	r1, r2, r3
   e3e4e:	e00a      	b.n	e3e66 <__ulp+0x46>
   e3e50:	3b14      	subs	r3, #20
   e3e52:	2b1e      	cmp	r3, #30
   e3e54:	f04f 0201 	mov.w	r2, #1
   e3e58:	bfda      	itte	le
   e3e5a:	f1c3 031f 	rsble	r3, r3, #31
   e3e5e:	fa02 f303 	lslle.w	r3, r2, r3
   e3e62:	4613      	movgt	r3, r2
   e3e64:	4618      	mov	r0, r3
   e3e66:	ec41 0b10 	vmov	d0, r0, r1
   e3e6a:	4770      	bx	lr
   e3e6c:	7ff00000 	.word	0x7ff00000

000e3e70 <__b2d>:
   e3e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e3e72:	6905      	ldr	r5, [r0, #16]
   e3e74:	f100 0614 	add.w	r6, r0, #20
   e3e78:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e3e7c:	1f2f      	subs	r7, r5, #4
   e3e7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e3e82:	4620      	mov	r0, r4
   e3e84:	f7ff fdcb 	bl	e3a1e <__hi0bits>
   e3e88:	f1c0 0320 	rsb	r3, r0, #32
   e3e8c:	280a      	cmp	r0, #10
   e3e8e:	600b      	str	r3, [r1, #0]
   e3e90:	dc14      	bgt.n	e3ebc <__b2d+0x4c>
   e3e92:	f1c0 0e0b 	rsb	lr, r0, #11
   e3e96:	fa24 f10e 	lsr.w	r1, r4, lr
   e3e9a:	42be      	cmp	r6, r7
   e3e9c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e3ea0:	bf34      	ite	cc
   e3ea2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e3ea6:	2100      	movcs	r1, #0
   e3ea8:	3015      	adds	r0, #21
   e3eaa:	fa04 f000 	lsl.w	r0, r4, r0
   e3eae:	fa21 f10e 	lsr.w	r1, r1, lr
   e3eb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e3eb6:	ea40 0201 	orr.w	r2, r0, r1
   e3eba:	e023      	b.n	e3f04 <__b2d+0x94>
   e3ebc:	42be      	cmp	r6, r7
   e3ebe:	bf3a      	itte	cc
   e3ec0:	f1a5 0708 	subcc.w	r7, r5, #8
   e3ec4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e3ec8:	2100      	movcs	r1, #0
   e3eca:	380b      	subs	r0, #11
   e3ecc:	d015      	beq.n	e3efa <__b2d+0x8a>
   e3ece:	4084      	lsls	r4, r0
   e3ed0:	f1c0 0520 	rsb	r5, r0, #32
   e3ed4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e3ed8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e3edc:	42b7      	cmp	r7, r6
   e3ede:	fa21 fe05 	lsr.w	lr, r1, r5
   e3ee2:	ea44 030e 	orr.w	r3, r4, lr
   e3ee6:	bf8c      	ite	hi
   e3ee8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e3eec:	2400      	movls	r4, #0
   e3eee:	fa01 f000 	lsl.w	r0, r1, r0
   e3ef2:	40ec      	lsrs	r4, r5
   e3ef4:	ea40 0204 	orr.w	r2, r0, r4
   e3ef8:	e004      	b.n	e3f04 <__b2d+0x94>
   e3efa:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e3efe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e3f02:	460a      	mov	r2, r1
   e3f04:	ec43 2b10 	vmov	d0, r2, r3
   e3f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e3f0a <__d2b>:
   e3f0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e3f0e:	460e      	mov	r6, r1
   e3f10:	2101      	movs	r1, #1
   e3f12:	ec59 8b10 	vmov	r8, r9, d0
   e3f16:	4615      	mov	r5, r2
   e3f18:	f7ff fcbc 	bl	e3894 <_Balloc>
   e3f1c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e3f20:	4607      	mov	r7, r0
   e3f22:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e3f26:	b10c      	cbz	r4, e3f2c <__d2b+0x22>
   e3f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e3f2c:	9301      	str	r3, [sp, #4]
   e3f2e:	f1b8 0f00 	cmp.w	r8, #0
   e3f32:	d019      	beq.n	e3f68 <__d2b+0x5e>
   e3f34:	a802      	add	r0, sp, #8
   e3f36:	f840 8d08 	str.w	r8, [r0, #-8]!
   e3f3a:	f7ff fd90 	bl	e3a5e <__lo0bits>
   e3f3e:	9b00      	ldr	r3, [sp, #0]
   e3f40:	b148      	cbz	r0, e3f56 <__d2b+0x4c>
   e3f42:	9a01      	ldr	r2, [sp, #4]
   e3f44:	f1c0 0120 	rsb	r1, r0, #32
   e3f48:	fa02 f101 	lsl.w	r1, r2, r1
   e3f4c:	430b      	orrs	r3, r1
   e3f4e:	40c2      	lsrs	r2, r0
   e3f50:	617b      	str	r3, [r7, #20]
   e3f52:	9201      	str	r2, [sp, #4]
   e3f54:	e000      	b.n	e3f58 <__d2b+0x4e>
   e3f56:	617b      	str	r3, [r7, #20]
   e3f58:	9b01      	ldr	r3, [sp, #4]
   e3f5a:	61bb      	str	r3, [r7, #24]
   e3f5c:	2b00      	cmp	r3, #0
   e3f5e:	bf14      	ite	ne
   e3f60:	2102      	movne	r1, #2
   e3f62:	2101      	moveq	r1, #1
   e3f64:	6139      	str	r1, [r7, #16]
   e3f66:	e007      	b.n	e3f78 <__d2b+0x6e>
   e3f68:	a801      	add	r0, sp, #4
   e3f6a:	f7ff fd78 	bl	e3a5e <__lo0bits>
   e3f6e:	9b01      	ldr	r3, [sp, #4]
   e3f70:	617b      	str	r3, [r7, #20]
   e3f72:	2101      	movs	r1, #1
   e3f74:	6139      	str	r1, [r7, #16]
   e3f76:	3020      	adds	r0, #32
   e3f78:	b134      	cbz	r4, e3f88 <__d2b+0x7e>
   e3f7a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e3f7e:	4404      	add	r4, r0
   e3f80:	6034      	str	r4, [r6, #0]
   e3f82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e3f86:	e009      	b.n	e3f9c <__d2b+0x92>
   e3f88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e3f8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e3f90:	6030      	str	r0, [r6, #0]
   e3f92:	6918      	ldr	r0, [r3, #16]
   e3f94:	f7ff fd43 	bl	e3a1e <__hi0bits>
   e3f98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e3f9c:	6028      	str	r0, [r5, #0]
   e3f9e:	4638      	mov	r0, r7
   e3fa0:	b003      	add	sp, #12
   e3fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e3fa6 <__ratio>:
   e3fa6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e3faa:	4688      	mov	r8, r1
   e3fac:	4669      	mov	r1, sp
   e3fae:	4681      	mov	r9, r0
   e3fb0:	f7ff ff5e 	bl	e3e70 <__b2d>
   e3fb4:	a901      	add	r1, sp, #4
   e3fb6:	4640      	mov	r0, r8
   e3fb8:	ec55 4b10 	vmov	r4, r5, d0
   e3fbc:	f7ff ff58 	bl	e3e70 <__b2d>
   e3fc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e3fc4:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e3fc8:	1a9a      	subs	r2, r3, r2
   e3fca:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e3fce:	1ac9      	subs	r1, r1, r3
   e3fd0:	ec57 6b10 	vmov	r6, r7, d0
   e3fd4:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e3fd8:	2b00      	cmp	r3, #0
   e3fda:	bfcc      	ite	gt
   e3fdc:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e3fe0:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e3fe4:	4632      	mov	r2, r6
   e3fe6:	463b      	mov	r3, r7
   e3fe8:	4620      	mov	r0, r4
   e3fea:	4629      	mov	r1, r5
   e3fec:	f7fc f96a 	bl	e02c4 <__aeabi_ddiv>
   e3ff0:	ec41 0b10 	vmov	d0, r0, r1
   e3ff4:	b003      	add	sp, #12
   e3ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e3ffa <__copybits>:
   e3ffa:	3901      	subs	r1, #1
   e3ffc:	b510      	push	{r4, lr}
   e3ffe:	1149      	asrs	r1, r1, #5
   e4000:	6914      	ldr	r4, [r2, #16]
   e4002:	3101      	adds	r1, #1
   e4004:	f102 0314 	add.w	r3, r2, #20
   e4008:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e400c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e4010:	42a3      	cmp	r3, r4
   e4012:	4602      	mov	r2, r0
   e4014:	d204      	bcs.n	e4020 <__copybits+0x26>
   e4016:	f853 2b04 	ldr.w	r2, [r3], #4
   e401a:	f840 2b04 	str.w	r2, [r0], #4
   e401e:	e7f7      	b.n	e4010 <__copybits+0x16>
   e4020:	2300      	movs	r3, #0
   e4022:	428a      	cmp	r2, r1
   e4024:	d202      	bcs.n	e402c <__copybits+0x32>
   e4026:	f842 3b04 	str.w	r3, [r2], #4
   e402a:	e7fa      	b.n	e4022 <__copybits+0x28>
   e402c:	bd10      	pop	{r4, pc}

000e402e <__any_on>:
   e402e:	f100 0214 	add.w	r2, r0, #20
   e4032:	6900      	ldr	r0, [r0, #16]
   e4034:	114b      	asrs	r3, r1, #5
   e4036:	4298      	cmp	r0, r3
   e4038:	b510      	push	{r4, lr}
   e403a:	db0c      	blt.n	e4056 <__any_on+0x28>
   e403c:	dd0c      	ble.n	e4058 <__any_on+0x2a>
   e403e:	f011 011f 	ands.w	r1, r1, #31
   e4042:	d009      	beq.n	e4058 <__any_on+0x2a>
   e4044:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e4048:	fa24 f001 	lsr.w	r0, r4, r1
   e404c:	fa00 f101 	lsl.w	r1, r0, r1
   e4050:	428c      	cmp	r4, r1
   e4052:	d10c      	bne.n	e406e <__any_on+0x40>
   e4054:	e000      	b.n	e4058 <__any_on+0x2a>
   e4056:	4603      	mov	r3, r0
   e4058:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e405c:	4293      	cmp	r3, r2
   e405e:	d904      	bls.n	e406a <__any_on+0x3c>
   e4060:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e4064:	2900      	cmp	r1, #0
   e4066:	d0f9      	beq.n	e405c <__any_on+0x2e>
   e4068:	e001      	b.n	e406e <__any_on+0x40>
   e406a:	2000      	movs	r0, #0
   e406c:	bd10      	pop	{r4, pc}
   e406e:	2001      	movs	r0, #1
   e4070:	bd10      	pop	{r4, pc}

000e4072 <_calloc_r>:
   e4072:	b538      	push	{r3, r4, r5, lr}
   e4074:	fb02 f401 	mul.w	r4, r2, r1
   e4078:	4621      	mov	r1, r4
   e407a:	f7f7 f997 	bl	db3ac <_malloc_r>
   e407e:	4605      	mov	r5, r0
   e4080:	b118      	cbz	r0, e408a <_calloc_r+0x18>
   e4082:	4622      	mov	r2, r4
   e4084:	2100      	movs	r1, #0
   e4086:	f7fc fe57 	bl	e0d38 <memset>
   e408a:	4628      	mov	r0, r5
   e408c:	bd38      	pop	{r3, r4, r5, pc}

000e408e <__env_lock>:
   e408e:	4770      	bx	lr

000e4090 <__env_unlock>:
   e4090:	4770      	bx	lr

000e4092 <link_code_end>:
	...

000e4094 <dynalib_user>:
   e4094:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e40a4:	0000 0000                                   ....

000e40a8 <_ZTVN8particle13__SPISettingsE>:
	...
   e40b0:	41dd 000d                                   .A..

000e40b4 <_ZTV5Timer>:
	...
   e40bc:	4379 000d 43c1 000d 41cf 000d               yC...C...A..

000e40c8 <_ZTVN8particle9LEDStatusE>:
	...
   e40d0:	42a9 000d 42c5 000d 40bf 000d               .B...B...@..

000e40dc <_ZL15firmwareVersion>:
   e40dc:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   e40ec:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   e40fc:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   e410c:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   e411c:	4d20 444f 2545 3e64 4400 7665 6369 2065      MODE%d>.Device 
   e412c:	2000 4f4e 2054 7461 2000 6461 7264 7365     . NOT at. addres
   e413c:	3a73 7830 5300 6163 6e6e 6e69 2e67 2e2e     s:0x.Scanning...
   e414c:	5500 6b6e 6f6e 6e77 6520 7272 726f 6120     .Unknown error a
   e415c:	2074 6461 7264 7365 2073 7830 4e00 206f     t address 0x.No 
   e416c:	3249 2043 6564 6976 6563 2073 6f66 6e75     I2C devices foun
   e417c:	0a64 6400 6e6f 0a65 4100 7474 6d65 7470     d..done..Attempt
   e418c:	6e69 2067 6f74 6320 6e6f 656e 7463 6320     ing to connect c
   e419c:	6c65 756c 616c 2e72 2e2e 4300 6c65 756c     ellular....Cellu
   e41ac:	616c 2072 6f6e 2074 6572 6461 2079 202d     lar not ready - 
   e41bc:	6572 6573 7474 6e69 0067 6543 6c6c 6c75     resetting.Cellul
   e41cc:	7261 7220 6165 7964 4100 7474 6d65 7470     ar ready.Attempt
   e41dc:	6e69 2067 6f74 6320 6e6f 656e 7463 7420     ing to connect t
   e41ec:	206f 6150 7472 6369 656c 2e2e 002e 6150     o Particle....Pa
   e41fc:	7472 6369 656c 6e20 746f 6320 6e6f 656e     rticle not conne
   e420c:	7463 6465 2d20 7220 7365 7465 6974 676e     cted - resetting
   e421c:	5000 7261 6974 6c63 2065 6f63 6e6e 6365     .Particle connec
   e422c:	6574 0064 227b 5455 3a22 2520 2c75 2220     ted.{"UT": %u, "
   e423c:	5656 3a22 2520 312e 2066 202c 5022 6572     VV": %.1f , "Pre
   e424c:	6963 2270 203a 2e25 6631 2c20 2220 5644     cip": %.1f , "DV
   e425c:	3a22 2520 312e 2066 202c 5422 6d65 2270     ": %.1f , "Temp"
   e426c:	203a 2e25 6631 2c20 4822 6d75 3a22 2520     : %.1f ,"Hum": %
   e427c:	2075 2c20 6d22 4256 3a22 2520 2075 202c     u  ,"mVB": %u , 
   e428c:	4f22 2233 203a 2e25 6636 7d20 5500 696e     "O3": %.6f }.Uni
   e429c:	5478 6d69 0065 6556 6f6c 6963 6164 2064     xTime.Velocidad 
   e42ac:	6564 206c 6956 6e65 6f74 5000 6572 6963     del Viento.Preci
   e42bc:	6970 6174 6963 6e6f 4400 7269 6365 6963     pitacion.Direcci
   e42cc:	6e6f 6420 6c65 7620 6569 746e 006f 6554     on del viento.Te
   e42dc:	706d 7265 7461 7275 0061 7548 656d 6164     mperatura.Humeda
   e42ec:	0064 694d 696c 6f76 746c 0073 6572 6461     d.Milivolts.read
   e42fc:	5479 476f 7465 6552 6573 4174 646e 6553     yToGetResetAndSe
   e430c:	646e 6553 736e 726f 0073 6143 7470 7275     ndSensors.Captur
   e431c:	6e69 2067 6573 736e 726f 0073 6163 7470     ing sensors.capt
   e432c:	7275 0065 6954 656d 4e20 544f 7320 6e79     ure.Time NOT syn
   e433c:	6563 0064 6576 7372 6f69 006e 6564 6976     ced.version.devi
   e434c:	6563 7473 7461 7375 5000 756c 2067 6874     cestatus.Plug th
   e435c:	2065 6564 6976 6563 6920 746e 206f 6874     e device into th
   e436c:	2065 6f49 2054 6f4e 6564 4400 7665 6369     e IoT Node.Devic
   e437c:	2065 7369 6e20 746f 7020 756c 6767 6465     e is not plugged
   e438c:	6920 746e 206f 6874 2065 6f49 4e54 646f      into the IoTNod
   e439c:	0065 6552 6573 7474 6e69 2067 6e69 3120     e.Resetting in 1
   e43ac:	2030 6573 6f63 646e 0073 5452 2043 7973     0 seconds.RTC sy
   e43bc:	636e 6527 2064 6977 6874 6320 6f6c 6475     nc'ed with cloud
   e43cc:	5200 4354 6e20 746f 7320 6e79 2763 6465     .RTC not sync'ed
   e43dc:	7720 7469 2068 6c63 756f 0064 6e55 6c70      with cloud.Unpl
   e43ec:	6775 6567 0064 6577 6862 6f6f 006b 5452     ugged.webhook.RT
   e43fc:	0043 7845 0070 5452 2043 4545 5250 4d4f     C.Exp.RTC EEPROM
   e440c:	4100 4344 4600 4152 004d 4d41 3332 3531     .ADC.FRAM.AM2315
   e441c:	4d00 4c50 3133 3531 5400 4c53 3532 3139     .MPL3115.TSL2591
   e442c:	4100 5344 3131 3531 5500 6962 6f64 7374     .ADS1115.Ubidots
   e443c:	0000 0000                                   ....

000e4440 <_ZTV4File>:
	...
   e4448:	52a5 000d 52f1 000d 52d9 000d 52d3 000d     .R...R...R...R..
   e4458:	5289 000d 52b3 000d 52ad 000d 52a7 000d     .R...R...R...R..
   e4468:	206f 4d57 6c50 676f 0073 3025 7536 742e     o WMPlogs.%06u.t
   e4478:	7478 7200 6d65 766f 6e69 2067 6c6f 2064     xt.removing old 
   e4488:	6f6c 2067 6966 656c 2520 0073 6b6d 6964     log file %s.mkdi
   e4498:	2072 6166 6c69 6465 6600 6961 656c 2064     r failed.failed 
   e44a8:	6f74 6f20 6570 206e 6f6c 7367 6420 7269     to open logs dir
   e44b8:	6300 6572 7461 6e69 2067 6f6c 7367 6420     .creating logs d
   e44c8:	7269 2520 0073 7263 6165 6974 676e 6e20     ir %s.creating n
   e44d8:	7765 6c20 676f 6620 6c69 2065 3025 6434     ew log file %04d
   e44e8:	7700 6972 6574 7420 206f 6473 6320 7261     .write to sd car
   e44f8:	2064 6166 6c69 6465 0000 0000               d failed....

000e4504 <_ZTV18SdCardPrintHandler>:
	...
   e450c:	5945 000d 5961 000d 5c75 000d c11d 000d     EY..aY..u\......

000e451c <CSWTCH.22>:
   e451c:	0000 4348 0000 4396 0000 43c8 0000 43fa     ..HC...C...C...C
   e452c:	0000 4416                                   ...D

000e4530 <_ZTV16Adafruit_TSL2591>:
	...
   e4538:	6045 000d 6091 000d 40c1 000d 6347 000d     E`...`...@..Gc..
   e4548:	6049 000d 7441 6574 706d 6974 676e 7420     I`..Attempting t
   e4558:	206f 6572 6f63 6e6e 6365 0074 7254 6979     o reconnect.Tryi
   e4568:	676e 7420 206f 6f63 6e6e 6365 2074 6f74     ng to connect to
   e4578:	0020 2c20 6120 7474 6d65 7470 6e20 6d75      . , attempt num
   e4588:	6562 3a72 0020 6974 656d 756f 2c74 6320     ber: .timeout, c
   e4598:	756f 646c 6e20 746f 7220 6165 2064 6e61     ould not read an
   e45a8:	2079 6572 7073 6e6f 6573 6620 6f72 206d     y response from 
   e45b8:	6874 2065 6f68 7473 5300 7265 6576 2772     the host.Server'
   e45c8:	2073 6572 7073 6e6f 6573 003a 2d0a 2d2d     s response:..---
   e45d8:	2d2d 2d2d 2d2d 002d 4f50 5453 4f00 004b     -------.POST.OK.
   e45e8:	4c7c 7c56 5000 7961 6f6c 6461 6620 726f     |LV|.Payload for
   e45f8:	7220 7165 6575 7473 003a 2d0a 2d2d 002d      request:..----.
   e4608:	564c 4500 5252 524f 6320 756f 646c 6e20     LV.ERROR could n
   e4618:	746f 6320 6e6f 656e 7463 7420 206f 6874     ot connect to th
   e4628:	2065 6573 7672 7265 4300 756f 646c 6e20     e server.Could n
   e4638:	746f 6320 6e6f 656e 7463 7420 206f 6874     ot connect to th
   e4648:	2065 6f68 7473 0000                         e host..

000e4650 <_ZTV6UbiTCP>:
	...
   e4658:	8475 000d 8311 000d 8107 000d 6f59 2075     u...........You 
   e4668:	7261 2065 6573 646e 6e69 2067 6f6d 6572     are sending more
   e4678:	7420 6168 206e 6874 2065 616d 6978 756d      than the maximu
   e4688:	206d 666f 6320 6e6f 6573 7563 6974 6576     m of consecutive
   e4698:	7620 7261 6169 6c62 7365 4500 5252 524f      variables.ERROR
   e46a8:	202c 6164 6174 7220 7465 6972 7665 6c61     , data retrieval
   e46b8:	6920 2073 6e6f 796c 7320 7075 6f70 7472      is only support
   e46c8:	6465 7520 6973 676e 5420 5043 6f20 2072     ed using TCP or 
   e46d8:	5448 5054 7020 6f72 6f74 6f63 736c 2500     HTTP protocols.%
   e46e8:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   e46f8:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   e4708:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   e4718:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   e4728:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   e4738:	2500 2c73 7000 7961 6f6c 6461 003a 6255     .%s,.payload:.Ub
   e4748:	6469 746f 5073 7261 6974 6c63 2f65 2e33     idotsParticle/3.
   e4758:	0031 7325 507c 534f 7c54 7325 007c 7325     1.%s|POST|%s|.%s
   e4768:	7325 253a 0073 7325 3e3d 2500 2473 7325     %s:%s.%s=>.%s$%s
   e4778:	2500 4073 6c25 0075 7325 657c 646e 5300     .%s@%lu.%s|end.S
   e4788:	6e65 6964 676e 6420 7461 2e61 2e2e 6900     ending data....i
   e4798:	646e 7375 7274 6169 2e6c 7061 2e69 6275     ndustrial.api.ub
   e47a8:	6469 746f 2e73 6f63 006d 575b 5241 494e     idots.com.[WARNI
   e47b8:	474e 205d 6854 2065 654d 6873 5020 6f72     NG] The Mesh Pro
   e47c8:	6f74 6f63 206c 7369 6e20 746f 7320 7075     tocol is not sup
   e47d8:	6f70 7472 6465 6920 206e 6874 7369 6420     ported in this d
   e47e8:	7665 6369 2065 6f66 2072 6573 646e 6e69     evice for sendin
   e47f8:	2067 6164 6174 5b00 6157 6e72 6e69 5d67     g data.[Warning]
   e4808:	5420 206f 6572 7274 6569 6576 6420 7461      To retrieve dat
   e4818:	2c61 7020 656c 7361 2065 6573 2074 2061     a, please set a 
   e4828:	6176 696c 2064 6c63 756f 2064 7270 746f     valid cloud prot
   e4838:	636f 6c6f 6920 206e 6874 2065 6255 6469     ocol in the Ubid
   e4848:	746f 2073 6f63 736e 7274 6375 6f74 0072     ots constructor.
   e4858:	6f59 2075 7261 2065 6461 6964 676e 6d20     You are adding m
   e4868:	726f 2065 6874 6e61 7420 6568 6d20 7861     ore than the max
   e4878:	6d69 6d75 6f20 2066 6f63 736e 6365 7475     imum of consecut
   e4888:	7669 2065 656b 2d79 6176 756c 7365 7020     ive key-values p
   e4898:	6961 7372 2500 2573 3d73 7325 2500 2473     airs.%s%s=%s.%s$
   e48a8:	2500 2273 7325 3a22 2522 2273 0000 0000     .%s"%s":"%s"....

000e48b8 <_ZTV7UbiHTTP>:
	...
   e48c0:	8d59 000d 8fa9 000d 8b2d 000d 7441 6574     Y.......-...Atte
   e48d0:	706d 2074 6966 696e 6873 6465 5000 534f     mpt finished.POS
   e48e0:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
   e48f0:	6563 2f73 2000 5448 5054 312f 312e 0a0d     ces/. HTTP/1.1..
   e4900:	4800 736f 3a74 0020 7355 7265 412d 6567     .Host: .User-Age
   e4910:	746e 203a 5800 412d 7475 2d68 6f54 656b     nt: .X-Auth-Toke
   e4920:	3a6e 0020 6f43 6e6e 6365 6974 6e6f 203a     n: .Connection: 
   e4930:	6c63 736f 0d65 000a 6f43 746e 6e65 2d74     close...Content-
   e4940:	7954 6570 203a 7061 6c70 6369 7461 6f69     Type: applicatio
   e4950:	2f6e 736a 6e6f 0a0d 4300 6e6f 6574 746e     n/json...Content
   e4960:	4c2d 6e65 7467 3a68 0020 614d 696b 676e     -Length: .Making
   e4970:	7220 7165 6575 7473 7420 206f 6255 6469      request to Ubid
   e4980:	746f 3a73 000a 6177 7469 6e69 2067 6f66     ots:..waiting fo
   e4990:	2072 6573 7672 7265 6120 736e 6577 2072     r server answer 
   e49a0:	2e2e 002e 550a 6962 6f64 7374 2027 6553     .....Ubidots' Se
   e49b0:	7672 7265 7220 7365 6f70 736e 3a65 000a     rver response:..
   e49c0:	6f43 6c75 2064 6f6e 2074 6573 646e 6420     Could not send d
   e49d0:	7461 2061 6f74 7520 6962 6f64 7374 7520     ata to ubidots u
   e49e0:	6973 676e 4820 5454 0050 4547 2054 612f     sing HTTP.GET /a
   e49f0:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
   e4a00:	2f00 766c 4300 6e6f 6574 746e 542d 7079     ./lv.Content-Typ
   e4a10:	3a65 6120 7070 696c 6163 6974 6e6f 6a2f     e: application/j
   e4a20:	6f73 0d6e 0d0a 000a 6f43 6e6e 6365 6974     son.....Connecti
   e4a30:	6e6f 4620 6961 656c 2064 6275 6469 746f     on Failed ubidot
   e4a40:	2073 202d 7254 2079 6741 6961 006e          s - Try Again.

000e4a4e <_ZStL19piecewise_construct>:
   e4a4e:	5b00 4157 4e52 4e49 5d47 5920 756f 2072     .[WARNING] Your 
   e4a5e:	654d 6873 6320 6e6f 6574 7478 6c20 6e65     Mesh context len
   e4a6e:	7467 2068 756d 7473 6220 2065 6f6c 6577     gth must be lowe
   e4a7e:	2072 6874 6e61 3120 3030 2500 7c73 6625     r than 100.%s|%f
   e4a8e:	257c 7c73 7325 257c 0073 2041 7270 626f     |%s|%s|%s.A prob
   e4a9e:	656c 206d 6168 2073 6172 7369 6465 7720     lem has raised w
   e4aae:	7469 2068 6874 2065 6564 6976 6563 7420     ith the device t
   e4abe:	7972 6e69 2067 6f74 6f20 6570 206e 2061     rying to open a 
   e4ace:	654d 6873 6f73 6b63 7465 5900 756f 6820     Meshsocket.You h
   e4ade:	7661 2065 6f6e 2074 6461 6564 2064 6e61     ave not added an
   e4aee:	2079 6176 6972 6261 656c 7620 6c61 6575     y variable value
   e4afe:	202c 6c70 6165 6573 6320 6c61 206c 6874     , please call th
   e4b0e:	2065 6461 2864 6d29 7465 6f68 2064 6966     e add()method fi
   e4b1e:	7372 0074 6275 6469 746f 2d73 656d 6873     rst.ubidots-mesh
   e4b2e:	5b00 4157 4e52 4e49 5d47 7920 756f 2072     .[WARNING] your 
   e4b3e:	6173 706d 656c 7420 6d69 2065 6572 6361     sample time reac
   e4b4e:	6568 2064 6874 2065 6874 6f72 7474 696c     hed the throttli
   e4b5e:	676e 6f20 2066 3032 7320 202c 6c70 6165     ng of 20 s, plea
   e4b6e:	6573 7320 7465 6120 6820 6769 6568 2072     se set a higher 
   e4b7e:	6173 706d 656c 7420 6d69 2065 726f 7520     sample time or u
   e4b8e:	6573 5520 5044 6f20 2072 6150 7472 6369     se UDP or Partic
   e4b9e:	656c 5720 6265 6f68 6b6f 2073 6f74 7320     le Webhooks to s
   e4bae:	6e65 2064 6164 6174 5b00 6157 6e72 6e69     end data.[Warnin
   e4bbe:	5d67 4320 756f 646c 6e20 746f 7320 6c6f     g] Could not sol
   e4bce:	6576 4920 2050 6441 7264 7365 2073 666f     ve IP Address of
   e4bde:	7420 6568 7220 6d65 746f 2065 6f68 7473      the remote host
   e4bee:	202c 6977 6874 7920 756f 2072 4e44 2053     , with your DNS 
   e4bfe:	6573 7574 2e70 2020 2020 2020 2020 2020     setup.          
   e4c0e:	0a20 7355 6e69 2067 6564 6166 6c75 2074      .Using default 
   e4c1e:	6e49 7564 7473 6972 6c61 5520 6962 6f64     Industrial Ubido
   e4c2e:	7374 4920 3a50 3120 3936 352e 2e35 3136     ts IP: 169.55.61
   e4c3e:	322e 3334 4500 5252 524f 7320 6e65 6964     .243.ERROR sendi
   e4c4e:	676e 7620 6c61 6575 2073 6977 6874 5520     ng values with U
   e4c5e:	5044 0000 0000                              DP....

000e4c64 <_ZTV6UbiUDP>:
	...
   e4c6c:	9781 000d 9715 000d 9721 000d               ........!...

000e4c78 <_ZTV11UbiParticle>:
	...
   e4c80:	98af 000d 9849 000d 9855 000d 2e25 6631     ....I...U...%.1f
   e4c90:	2500 332e 0066 2e25 6632 5300 6174 7472     .%.3f.%.2f.Start
   e4ca0:	6e69 2067 6441 6661 7572 7469 5420 4c53     ing Adafruit TSL
   e4cb0:	3532 3139 5420 7365 2174 4600 756f 646e     2591 Test!.Found
   e4cc0:	6120 5420 4c53 3532 3139 7320 6e65 6f73      a TSL2591 senso
   e4cd0:	0072 6f4e 7320 6e65 6f73 2072 6f66 6e75     r.No sensor foun
   e4ce0:	2064 2e2e 202e 6863 6365 206b 6f79 7275     d ... check your
   e4cf0:	7720 7269 6e69 3f67 2d00 2d2d 2d2d 2d2d      wiring?.-------
   e4d00:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   e4d10:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 002d 6553     -------------.Se
   e4d20:	736e 726f 203a 2020 2020 2020 4400 6972     nsor:       .Dri
   e4d30:	6576 2072 6556 3a72 2020 0020 6e55 7169     ver Ver:   .Uniq
   e4d40:	6575 4920 3a44 2020 2020 4d00 7861 5620     ue ID:    .Max V
   e4d50:	6c61 6575 203a 2020 0020 6c20 7875 4d00     alue:    . lux.M
   e4d60:	6e69 5620 6c61 6575 203a 2020 0020 6552     in Value:    .Re
   e4d70:	6f73 756c 6974 6e6f 203a 2020 4700 6961     solution:   .Gai
   e4d80:	3a6e 2020 2020 2020 2020 0020 7831 2820     n:         .1x (
   e4d90:	6f4c 2977 3200 7835 2820 654d 6964 6d75     Low).25x (Medium
   e4da0:	0029 3234 7838 2820 6948 6867 0029 3839     ).428x (High).98
   e4db0:	3637 2078 4d28 7861 0029 6954 696d 676e     76x (Max).Timing
   e4dc0:	203a 2020 2020 2020 2000 736d 0000 0000     :       . ms....

000e4dd0 <_ZTVN5spark13EthernetClassE>:
	...
   e4dd8:	b42b 000d b421 000d b417 000d b40d 000d     +...!...........
   e4de8:	b401 000d b3f5 000d b3e9 000d b3e1 000d     ................
   e4df8:	b3d7 000d b3cd 000d db8f 000d               ............

000e4e04 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   e4e04:	0800 1810 2820 3830                         .... (08

000e4e0c <_ZTV3UDP>:
	...
   e4e14:	9295 000d 92b5 000d b751 000d b87b 000d     ........Q...{...
   e4e24:	b749 000d b767 000d b785 000d b79f 000d     I...g...........
   e4e34:	b7c3 000d b85f 000d bb61 000d b901 000d     ...._...a.......
   e4e44:	ba81 000d b731 000d bc41 000d ba05 000d     ....1...A.......
   e4e54:	b939 000d bc6f 000d b8a5 000d b73f 000d     9...o.......?...
   e4e64:	b8e1 000d b745 000d b7a1 000d fff0 ffff     ....E...........
   e4e74:	0000 0000 b7bb 000d 616e 006e 766f 0066     ........nan.ovf.
   e4e84:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   e4e94:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   e4ea4:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   e4eb4:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   e4ec4:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   e4ed4:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   e4ee4:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   e4ef4:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   e4f04:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   e4f14:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   e4f24:	736c 3d20 0020 6e6c 6600 006e 6f63 6564     ls = .ln.fn.code
   e4f34:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   e4f44:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   e4f54:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
   e4f64:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   e4f74:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   e4f84:	6d69 0065                                   ime.

000e4f88 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e4f90:	c88d 000d c893 000d c8d7 000d c8a1 000d     ................
   e4fa0:	c88f 000d                                   ....

000e4fa4 <_ZTV9IPAddress>:
	...
   e4fac:	ce25 000d ce15 000d ce17 000d               %...........

000e4fb8 <_ZTV9USBSerial>:
	...
   e4fc0:	cf43 000d cf93 000d cfa1 000d c11d 000d     C...............
   e4fd0:	cf7f 000d cf45 000d cf5b 000d cf8d 000d     ....E...[.......
   e4fe0:	cf71 000d cf3f 000d                         q...?...

000e4fe8 <_ZTVN5spark13CellularClassE>:
	...
   e4ff0:	d171 000d d167 000d d15d 000d 42d9 000d     q...g...]....B..
   e5000:	d151 000d d145 000d d139 000d d131 000d     Q...E...9...1...
   e5010:	d127 000d d11d 000d db8f 000d               '...........

000e501c <_ZTV11USARTSerial>:
	...
   e5024:	d1ad 000d d1fd 000d d20b 000d c11d 000d     ................
   e5034:	d1c1 000d d1e3 000d d1cf 000d d1f7 000d     ................
   e5044:	d1af 000d d1b3 000d                         ........

000e504c <_ZTV7TwoWire>:
	...
   e5054:	d2e5 000d d32f 000d d307 000d d2e7 000d     ..../...........
   e5064:	d30f 000d d317 000d d31f 000d d327 000d     ............'...

000e5074 <_ZTVN5spark9MeshClassE>:
	...
   e507c:	d475 000d d46b 000d d461 000d 9601 000d     u...k...a.......
   e508c:	d455 000d d449 000d d43d 000d d435 000d     U...I...=...5...
   e509c:	d42b 000d d421 000d db8f 000d               +...!.......

000e50a8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   e50b0:	d619 000d d61f 000d db0f 000d d62d 000d     ............-...
   e50c0:	d61b 000d                                   ....

000e50c4 <_ZTV9TCPClient>:
	...
   e50cc:	810d 000d 8141 000d d591 000d d5ab 000d     ....A...........
   e50dc:	d9ad 000d d6ff 000d d6d1 000d d5d5 000d     ................
   e50ec:	d889 000d d785 000d d733 000d d97d 000d     ........3...}...
   e50fc:	d5d7 000d d60f 000d d5bd 000d d631 000d     ............1...
   e510c:	d6b1 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   e511c:	7265 6f72 2072 203d 6425 0000               error = %d..

000e5128 <_ZTVN5spark12NetworkClassE>:
	...
   e5130:	db27 000d db31 000d db3b 000d db45 000d     '...1...;...E...
   e5140:	db4f 000d db5b 000d db67 000d db73 000d     O...[...g...s...
   e5150:	db7b 000d db85 000d db8f 000d               {...........

000e515c <_ZSt7nothrow>:
   e515c:	0000 0000                                   ....

000e5160 <atanlo>:
   e5160:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   e5170:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000e5180 <atanhi>:
   e5180:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   e5190:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000e51a0 <npio2_hw>:
   e51a0:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   e51b0:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   e51c0:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   e51d0:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   e51e0:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   e51f0:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   e5200:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   e5210:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000e5220 <two_over_pi>:
   e5220:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   e5230:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   e5240:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   e5250:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   e5260:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   e5270:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   e5280:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   e5290:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   e52a0:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   e52b0:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   e52c0:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   e52d0:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   e52e0:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   e52f0:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   e5300:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   e5310:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   e5320:	e27b 0060 8c6b 00c0                         {.`.k...

000e5328 <init_jk>:
   e5328:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000e5338 <PIo2>:
   e5338:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   e5348:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   e5358:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   e5368:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000e5378 <day_name.4725>:
   e5378:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e5388:	6972 6153 4a74                                   riSat

000e538d <mon_name.4726>:
   e538d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e539d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e53ad:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   e53bd:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   e53cd:	6425 000a                                   %d..

000e53d1 <_ctype_>:
   e53d1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e53e1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e53f1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e5401:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e5411:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e5421:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e5431:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e5441:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e5451:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e54d4 <__sf_fake_stdin>:
	...

000e54f4 <__sf_fake_stdout>:
	...

000e5514 <__sf_fake_stderr>:
	...
   e5534:	4f50 4953 0058 0000                         POSIX...

000e553c <_DAYS_BEFORE_MONTH>:
   e553c:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   e554c:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   e555c:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000e556c <DAYS_IN_MONTH>:
   e556c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e557c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e558c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e559c <__month_lengths>:
   e559c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e55ac:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e55bc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e55cc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e55dc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e55ec:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e55fc:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e560c:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   e561c:	322e 0064 2d59 6d25 252d 0064 2a2e 0075     .2d.Y-%m-%d..*u.
   e562c:	2e25 6433 2500 6c6c 0064 2e25 6432 253a     %.3d.%lld.%.2d:%
   e563c:	322e 3a64 2e25 6432 2500 302b 6c33 2564     .2d:%.2d.%+03ld%
   e564c:	322e 646c 0000 0000                         .2ld....

000e5654 <fpi.5344>:
   e5654:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e5664:	0000 0000                                   ....

000e5668 <fpinan.5380>:
   e5668:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e5678:	0000 0000 6e69 7469 0079 0000 0000 0000     ....inity.......

000e5688 <tinytens>:
   e5688:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e5698:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e56a8:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   e56b8:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   e56c8:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   e56d8:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   e56e8:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   e56f8:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   e5708:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   e5718:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   e5728:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   e5738:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   e5748:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   e5758:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   e5768:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   e5778:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   e5788:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   e5798:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   e57a8:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   e57b8:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   e57c8:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   e57d8:	2053 7025 0000 0000                         S %p....

000e57e0 <_C_time_locale>:
   e57e0:	56b8 000e 56bc 000e 56c0 000e 56c4 000e     .V...V...V...V..
   e57f0:	56c8 000e 56cc 000e 56d0 000e 56d4 000e     .V...V...V...V..
   e5800:	56d8 000e 56dc 000e 56e0 000e 56e4 000e     .V...V...V...V..
   e5810:	56e8 000e 56f0 000e 56f9 000e 56ff 000e     .V...V...V...V..
   e5820:	56c8 000e 5705 000e 570a 000e 570f 000e     .V...W...W...W..
   e5830:	5716 000e 5720 000e 5728 000e 5731 000e     .W.. W..(W..1W..
   e5840:	573a 000e 573e 000e 5742 000e 5746 000e     :W..>W..BW..FW..
   e5850:	574a 000e 574e 000e 5752 000e 5756 000e     JW..NW..RW..VW..
   e5860:	575d 000e 5764 000e 576c 000e 5776 000e     ]W..dW..lW..vW..
   e5870:	577f 000e 5786 000e 578f 000e 5798 000e     .W...W...W...W..
   e5880:	57a1 000e 4413 000e 57b6 000e 57b9 000e     .W...D...W...W..
   e5890:	56e8 000e 56f0 000e 56f9 000e 56ff 000e     .V...V...V...V..
   e58a0:	56c8 000e 5705 000e 570a 000e 570f 000e     .V...W...W...W..
   e58b0:	5716 000e 5720 000e 5728 000e 5731 000e     .W.. W..(W..1W..
   e58c0:	4ea8 000e 57d1 000e 4a27 000e 4a27 000e     .N...W..'J..'J..
   e58d0:	4a27 000e 4a27 000e 4a27 000e 5a54 4700     'J..'J..'J..TZ.G
   e58e0:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e58f0:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e5900:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e5910:	3a6e 6825 2575 006e                         n:%hu%n.

000e5918 <__mprec_tens>:
   e5918:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e5928:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e5938:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e5948:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e5958:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e5968:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e5978:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e5988:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e5998:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e59a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e59b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e59c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e59d8:	9db4 79d9 7843 44ea                         ...yCx.D

000e59e0 <__mprec_bigtens>:
   e59e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e59f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e5a00:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e5a08 <p05.5387>:
   e5a08:	0005 0000 0019 0000 007d 0000               ........}...

000e5a14 <link_const_variable_data_end>:
   e5a14:	000d4e0d 	.word	0x000d4e0d
   e5a18:	000d5275 	.word	0x000d5275
   e5a1c:	000d5285 	.word	0x000d5285
   e5a20:	000d5721 	.word	0x000d5721
   e5a24:	000d5c93 	.word	0x000d5c93
   e5a28:	000d5cb3 	.word	0x000d5cb3
   e5a2c:	000d6041 	.word	0x000d6041
   e5a30:	000d6387 	.word	0x000d6387
   e5a34:	000d638b 	.word	0x000d638b
   e5a38:	000d64b3 	.word	0x000d64b3
   e5a3c:	000d64b7 	.word	0x000d64b7
   e5a40:	000d64bb 	.word	0x000d64bb
   e5a44:	000d6cc9 	.word	0x000d6cc9
   e5a48:	000d6ccd 	.word	0x000d6ccd
   e5a4c:	000d6cd1 	.word	0x000d6cd1
   e5a50:	000d6d03 	.word	0x000d6d03
   e5a54:	000d7665 	.word	0x000d7665
   e5a58:	000d7689 	.word	0x000d7689
   e5a5c:	000d768d 	.word	0x000d768d
   e5a60:	000d79b1 	.word	0x000d79b1
   e5a64:	000d79b5 	.word	0x000d79b5
   e5a68:	000d79b9 	.word	0x000d79b9
   e5a6c:	000d7ef3 	.word	0x000d7ef3
   e5a70:	000d7ef7 	.word	0x000d7ef7
   e5a74:	000d7efb 	.word	0x000d7efb
   e5a78:	000d7fa1 	.word	0x000d7fa1
   e5a7c:	000d8103 	.word	0x000d8103
   e5a80:	000d8519 	.word	0x000d8519
   e5a84:	000d8a21 	.word	0x000d8a21
   e5a88:	000d8b1f 	.word	0x000d8b1f
   e5a8c:	000d918d 	.word	0x000d918d
   e5a90:	000d95a5 	.word	0x000d95a5
   e5a94:	000d9701 	.word	0x000d9701
   e5a98:	000d9745 	.word	0x000d9745
   e5a9c:	000d9917 	.word	0x000d9917
   e5aa0:	000d9acd 	.word	0x000d9acd
   e5aa4:	000da55f 	.word	0x000da55f
   e5aa8:	000daad7 	.word	0x000daad7
   e5aac:	000dabeb 	.word	0x000dabeb
   e5ab0:	000db435 	.word	0x000db435
   e5ab4:	000db655 	.word	0x000db655
   e5ab8:	000dc0f5 	.word	0x000dc0f5
   e5abc:	000dc3e1 	.word	0x000dc3e1
   e5ac0:	000dc719 	.word	0x000dc719
   e5ac4:	000dc761 	.word	0x000dc761
   e5ac8:	000dd17d 	.word	0x000dd17d
   e5acc:	000dd541 	.word	0x000dd541
   e5ad0:	000ddc5d 	.word	0x000ddc5d
   e5ad4:	000de171 	.word	0x000de171
   e5ad8:	000de1f5 	.word	0x000de1f5
   e5adc:	000de2b9 	.word	0x000de2b9
   e5ae0:	000de37d 	.word	0x000de37d

000e5ae4 <link_constructors_end>:
	...
