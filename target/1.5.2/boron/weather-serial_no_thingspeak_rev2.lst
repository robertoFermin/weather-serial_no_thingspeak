
c:/Users/BtX/Documents/weather-serial_no_thingspeak_rev2/target/1.5.2/boron/weather-serial_no_thingspeak_rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000123a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000e63c0  000e63c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000e63c8  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  2003bb04  000e63cc  0002bb04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002be8  2003bc08  2003bc08  0003bc08  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000e64d0  000e64d0  000364d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000e64f8  000e64f8  000364f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00287efc  00000000  00000000  000364fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00032cf3  00000000  00000000  002be3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00040f43  00000000  00000000  002f10eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004628  00000000  00000000  0033202e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00008660  00000000  00000000  00336656  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0006c91a  00000000  00000000  0033ecb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0008d795  00000000  00000000  003ab5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00135447  00000000  00000000  00438d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00013dc4  00000000  00000000  0056e1ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00d fa96 	bl	e1562 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00d fa9b 	bl	e1578 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003bb04 	.word	0x2003bb04
   d404c:	000e63cc 	.word	0x000e63cc
   d4050:	2003bc08 	.word	0x2003bc08
   d4054:	2003bc08 	.word	0x2003bc08
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f009 f809 	bl	dd074 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e63b4 	.word	0x000e63b4
   d4084:	000e62e4 	.word	0x000e62e4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bc1e 	b.w	d48c8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fdeb 	bl	d4c68 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f008 bfaf 	b.w	dcff8 <_post_loop>

000d409a <_Znwj>:
   d409a:	f007 bd57 	b.w	dbb4c <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f007 bd55 	b.w	dbb4c <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f007 bd5b 	b.w	dbb5c <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f007 bd59 	b.w	dbb5c <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr

000d40ba <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40ba:	6810      	ldr	r0, [r2, #0]
   d40bc:	4770      	bx	lr

000d40be <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d40be:	4770      	bx	lr

000d40c0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d40c0:	4770      	bx	lr
	...

000d40c4 <_Z18capturePollSensorsv>:
}

void capturePollSensors()// funcion de la libreria para sondar sensores
{
  // Set the flag to poll the sensors
  readyToCapturePollSensors = true;
   d40c4:	4b01      	ldr	r3, [pc, #4]	; (d40cc <_Z18capturePollSensorsv+0x8>)
   d40c6:	2201      	movs	r2, #1
   d40c8:	701a      	strb	r2, [r3, #0]
   d40ca:	4770      	bx	lr
   d40cc:	2003bc18 	.word	0x2003bc18

000d40d0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	4718      	bx	r3

000d40d4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40d4:	2a01      	cmp	r2, #1
   d40d6:	d002      	beq.n	d40de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40d8:	2a02      	cmp	r2, #2
   d40da:	d002      	beq.n	d40e2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40dc:	e004      	b.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40de:	6001      	str	r1, [r0, #0]
	      break;
   d40e0:	e002      	b.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e2:	680b      	ldr	r3, [r1, #0]
   d40e4:	b100      	cbz	r0, d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40e6:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40e8:	2000      	movs	r0, #0
   d40ea:	4770      	bx	lr

000d40ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d40ec:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40ee:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d40f0:	6898      	ldr	r0, [r3, #8]
   d40f2:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40f4:	f012 0f01 	tst.w	r2, #1
   d40f8:	ea4f 0262 	mov.w	r2, r2, asr #1
   d40fc:	bf18      	it	ne
   d40fe:	5881      	ldrne	r1, [r0, r2]
   d4100:	4410      	add	r0, r2
   d4102:	bf18      	it	ne
   d4104:	58cb      	ldrne	r3, [r1, r3]
   d4106:	4718      	bx	r3

000d4108 <__tcf_0>:

String deviceStatus;
String i2cDevices;
bool resetDevice = false;

String i2cNames[] =// arreglo con los nombres de dispositivos i2c
   d4108:	b538      	push	{r3, r4, r5, lr}
   d410a:	4d06      	ldr	r5, [pc, #24]	; (d4124 <__tcf_0+0x1c>)
   d410c:	2400      	movs	r4, #0
   d410e:	f104 0080 	add.w	r0, r4, #128	; 0x80
   d4112:	4428      	add	r0, r5
   d4114:	3c10      	subs	r4, #16
   d4116:	f008 fa4d 	bl	dc5b4 <_ZN6StringD1Ev>
   d411a:	f114 0f90 	cmn.w	r4, #144	; 0x90
   d411e:	d1f6      	bne.n	d410e <__tcf_0+0x6>
   d4120:	bd38      	pop	{r3, r4, r5, pc}
   d4122:	bf00      	nop
   d4124:	2003bc68 	.word	0x2003bc68

000d4128 <_ZN7IoTNodeD1Ev>:
 * @brief Main IoT Node class.
 * Includes functions to manage external power. Read the state of the battery charger.
 * Send a "tickle" to reset the watchdog timer and control GPIO on the IO headers. 
 * 
 */
class IoTNode
   d4128:	b510      	push	{r4, lr}
   d412a:	4604      	mov	r4, r0
   d412c:	f008 fa42 	bl	dc5b4 <_ZN6StringD1Ev>
   d4130:	4620      	mov	r0, r4
   d4132:	bd10      	pop	{r4, pc}

000d4134 <_Z22getResetAndSendSensorsv>:
  // Set the flag to poll the sensors
  readyToCapturePollSensors = true;
}

void getResetAndSendSensors()//funcion de la libreria para restear y mandar sensores
{
   d4134:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4136:	f007 fa23 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
  // Set the flag to read and send data.
  // Has to be done out of this Timer thread
  timeToNextSendMS = millis();
   d413a:	4b03      	ldr	r3, [pc, #12]	; (d4148 <_Z22getResetAndSendSensorsv+0x14>)
   d413c:	6018      	str	r0, [r3, #0]
  readyToGetResetAndSendSensors = true;
   d413e:	4b03      	ldr	r3, [pc, #12]	; (d414c <_Z22getResetAndSendSensorsv+0x18>)
   d4140:	2201      	movs	r2, #1
   d4142:	701a      	strb	r2, [r3, #0]
   d4144:	bd08      	pop	{r3, pc}
   d4146:	bf00      	nop
   d4148:	2003c410 	.word	0x2003c410
   d414c:	2003c500 	.word	0x2003c500

000d4150 <_ZN14WeatherSensors15handleRainEventEv>:
      }

      lastAnemoneterEvent = timeAnemometerEvent; // set up for next event
    }

    void handleRainEvent() {
   d4150:	b510      	push	{r4, lr}
   d4152:	4604      	mov	r4, r0
   d4154:	f007 fa14 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
      // Count rain gauge bucket tips as they occur
      // Activated by the magnet and reed switch in the rain gauge, attached to input D2
      unsigned int timeRainEvent = millis(); // grab current time

      // ignore switch-bounce glitches less than 10mS after initial edge
      if(timeRainEvent - lastRainEvent < 10) {
   d4158:	f241 6264 	movw	r2, #5732	; 0x1664
   d415c:	58a3      	ldr	r3, [r4, r2]
   d415e:	1ac3      	subs	r3, r0, r3
   d4160:	2b09      	cmp	r3, #9
   d4162:	d905      	bls.n	d4170 <_ZN14WeatherSensors15handleRainEventEv+0x20>
        return;
      }
      rainEventCount++; //Increase this minute's amount of rain
   d4164:	f504 51b3 	add.w	r1, r4, #5728	; 0x1660
   d4168:	680b      	ldr	r3, [r1, #0]
   d416a:	3301      	adds	r3, #1
   d416c:	600b      	str	r3, [r1, #0]
      lastRainEvent = timeRainEvent; // set up for next event
   d416e:	50a0      	str	r0, [r4, r2]
   d4170:	bd10      	pop	{r4, pc}

000d4172 <_ZN14WeatherSensors21handleAnemometerEventEv>:
      attachInterrupt(AnemometerPin, &WeatherSensors::handleAnemometerEvent, this, FALLING);

      pinMode(RainPin, INPUT_PULLUP);
      attachInterrupt(RainPin, &WeatherSensors::handleRainEvent, this, FALLING);
    }
    void handleAnemometerEvent() {
   d4172:	b538      	push	{r3, r4, r5, lr}
   d4174:	4604      	mov	r4, r0
   d4176:	f007 fa03 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
      // Activated by the magnet in the anemometer (2 ticks per rotation), attached to input D3
       unsigned int timeAnemometerEvent = millis(); // grab current time

      //If there's never been an event before (first time through), then just capture it
      if(lastAnemoneterEvent != 0) {
   d417a:	f504 51b4 	add.w	r1, r4, #5760	; 0x1680
   d417e:	680b      	ldr	r3, [r1, #0]
   d4180:	b193      	cbz	r3, d41a8 <_ZN14WeatherSensors21handleAnemometerEventEv+0x36>
          // Calculate time since last event
          unsigned int period = timeAnemometerEvent - lastAnemoneterEvent;
   d4182:	1ac3      	subs	r3, r0, r3
          // ignore switch-bounce glitches less than 10mS after initial edge (which implies a max windspeed of 149mph)
          if(period < 10) {
   d4184:	2b09      	cmp	r3, #9
   d4186:	d910      	bls.n	d41aa <_ZN14WeatherSensors21handleAnemometerEventEv+0x38>
            return;
          }
          if(period < GustPeriod) {
   d4188:	f241 627c 	movw	r2, #5756	; 0x167c
   d418c:	58a5      	ldr	r5, [r4, r2]
   d418e:	42ab      	cmp	r3, r5
              // If the period is the shortest (and therefore fastest windspeed) seen, capture it
              GustPeriod = period;
   d4190:	bf38      	it	cc
   d4192:	50a3      	strcc	r3, [r4, r2]
          }
          AnemoneterPeriodTotal += period;
   d4194:	f241 6574 	movw	r5, #5748	; 0x1674
   d4198:	5962      	ldr	r2, [r4, r5]
   d419a:	4413      	add	r3, r2
   d419c:	5163      	str	r3, [r4, r5]
          AnemoneterPeriodReadingCount++;
   d419e:	f241 6278 	movw	r2, #5752	; 0x1678
   d41a2:	58a3      	ldr	r3, [r4, r2]
   d41a4:	3301      	adds	r3, #1
   d41a6:	50a3      	str	r3, [r4, r2]
      }

      lastAnemoneterEvent = timeAnemometerEvent; // set up for next event
   d41a8:	6008      	str	r0, [r1, #0]
   d41aa:	bd38      	pop	{r3, r4, r5, pc}

000d41ac <_ZN14WeatherSensorsD1Ev>:
  float longitude;
}config_t;
extern config_t config;

// library interface description
class WeatherSensors
   d41ac:	b510      	push	{r4, lr}
   d41ae:	4604      	mov	r4, r0
   d41b0:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
   d41b4:	3004      	adds	r0, #4
   d41b6:	f008 f9fd 	bl	dc5b4 <_ZN6StringD1Ev>
   d41ba:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d41be:	f007 f894 	bl	db2ea <_ZN13RunningMedianD1Ev>
   d41c2:	f104 000a 	add.w	r0, r4, #10
   d41c6:	f007 f890 	bl	db2ea <_ZN13RunningMedianD1Ev>
   d41ca:	4620      	mov	r0, r4
   d41cc:	bd10      	pop	{r4, pc}

000d41ce <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41ce:	6943      	ldr	r3, [r0, #20]
   d41d0:	b113      	cbz	r3, d41d8 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41d2:	6983      	ldr	r3, [r0, #24]
   d41d4:	300c      	adds	r0, #12
   d41d6:	4718      	bx	r3
   d41d8:	4770      	bx	lr

000d41da <_ZN13PMS7003SerialI11USARTSerialED1Ev>:
    m_serial.template begin(9600,SERIAL_8N1);
    pinMode(setpin, OUTPUT);
    pinSetFast(m_setpin);
  }

  ~PMS7003Serial() {
   d41da:	b510      	push	{r4, lr}
   d41dc:	4604      	mov	r4, r0
    m_serial.template end();
   d41de:	6800      	ldr	r0, [r0, #0]
   d41e0:	f009 fc60 	bl	ddaa4 <_ZN11USARTSerial3endEv>
  }
   d41e4:	4620      	mov	r0, r4
   d41e6:	bd10      	pop	{r4, pc}

000d41e8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d41e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d41ea:	4602      	mov	r2, r0
   d41ec:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d41ee:	7913      	ldrb	r3, [r2, #4]
   d41f0:	6895      	ldr	r5, [r2, #8]
   d41f2:	b133      	cbz	r3, d4202 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d41f4:	b93d      	cbnz	r5, d4206 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d41f6:	490c      	ldr	r1, [pc, #48]	; (d4228 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d41f8:	b004      	add	sp, #16
   d41fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d41fe:	f008 bbc3 	b.w	dc988 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4202:	4b0a      	ldr	r3, [pc, #40]	; (d422c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4204:	e000      	b.n	d4208 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4206:	4b0a      	ldr	r3, [pc, #40]	; (d4230 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4208:	7b16      	ldrb	r6, [r2, #12]
   d420a:	4c0a      	ldr	r4, [pc, #40]	; (d4234 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d420c:	490a      	ldr	r1, [pc, #40]	; (d4238 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d420e:	7b52      	ldrb	r2, [r2, #13]
   d4210:	9202      	str	r2, [sp, #8]
   d4212:	2e01      	cmp	r6, #1
   d4214:	bf08      	it	eq
   d4216:	4621      	moveq	r1, r4
   d4218:	9101      	str	r1, [sp, #4]
   d421a:	9500      	str	r5, [sp, #0]
   d421c:	4a07      	ldr	r2, [pc, #28]	; (d423c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d421e:	2100      	movs	r1, #0
   d4220:	f008 fcc3 	bl	dcbaa <_ZN5Print11printf_implEbPKcz>
  }
   d4224:	b004      	add	sp, #16
   d4226:	bd70      	pop	{r4, r5, r6, pc}
   d4228:	000e4931 	.word	0x000e4931
   d422c:	000e52f7 	.word	0x000e52f7
   d4230:	000e4920 	.word	0x000e4920
   d4234:	000e4929 	.word	0x000e4929
   d4238:	000e492d 	.word	0x000e492d
   d423c:	000e4947 	.word	0x000e4947

000d4240 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4240:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4242:	2100      	movs	r1, #0
   d4244:	4604      	mov	r4, r0
   d4246:	4608      	mov	r0, r1
   d4248:	f007 f9e2 	bl	db610 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d424c:	a902      	add	r1, sp, #8
   d424e:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4250:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4252:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4256:	f007 f9f3 	bl	db640 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d425a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d425c:	b10c      	cbz	r4, d4262 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d425e:	2301      	movs	r3, #1
   d4260:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4262:	2100      	movs	r1, #0
   d4264:	2001      	movs	r0, #1
   d4266:	f007 f9d3 	bl	db610 <os_thread_scheduling>
            }
        }
        if (t) {
   d426a:	b12c      	cbz	r4, d4278 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d426c:	6823      	ldr	r3, [r4, #0]
   d426e:	4620      	mov	r0, r4
   d4270:	689b      	ldr	r3, [r3, #8]
   d4272:	4798      	blx	r3
            t->running = false;
   d4274:	2300      	movs	r3, #0
   d4276:	7123      	strb	r3, [r4, #4]
        }
    }
   d4278:	b002      	add	sp, #8
   d427a:	bd10      	pop	{r4, pc}

000d427c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d427c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d427e:	b538      	push	{r3, r4, r5, lr}
   d4280:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4282:	d005      	beq.n	d4290 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d4284:	2a03      	cmp	r2, #3
   d4286:	d00f      	beq.n	d42a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
   d4288:	2a01      	cmp	r2, #1
   d428a:	d111      	bne.n	d42b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d428c:	680b      	ldr	r3, [r1, #0]
   d428e:	e009      	b.n	d42a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4290:	200c      	movs	r0, #12
   d4292:	680d      	ldr	r5, [r1, #0]
   d4294:	f7ff ff01 	bl	d409a <_Znwj>
   d4298:	4603      	mov	r3, r0
   d429a:	b118      	cbz	r0, d42a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
   d429c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d42a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d42a4:	6023      	str	r3, [r4, #0]
   d42a6:	e003      	b.n	d42b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d42a8:	210c      	movs	r1, #12
   d42aa:	6800      	ldr	r0, [r0, #0]
   d42ac:	f00a f9c6 	bl	de63c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d42b0:	2000      	movs	r0, #0
   d42b2:	bd38      	pop	{r3, r4, r5, pc}

000d42b4 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42b4:	b510      	push	{r4, lr}
   d42b6:	4b05      	ldr	r3, [pc, #20]	; (d42cc <_ZN8particle9LEDStatusD1Ev+0x18>)
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42b8:	2200      	movs	r2, #0

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42ba:	4604      	mov	r4, r0
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42bc:	4611      	mov	r1, r2

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42be:	f840 3b04 	str.w	r3, [r0], #4
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42c2:	f007 fb55 	bl	db970 <led_set_status_active>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}
   d42c6:	4620      	mov	r0, r4
   d42c8:	bd10      	pop	{r4, pc}
   d42ca:	bf00      	nop
   d42cc:	000e4910 	.word	0x000e4910

000d42d0 <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42d0:	b510      	push	{r4, lr}
   d42d2:	4604      	mov	r4, r0
    setActive(false);
}
   d42d4:	f7ff ffee 	bl	d42b4 <_ZN8particle9LEDStatusD1Ev>
   d42d8:	4620      	mov	r0, r4
   d42da:	2120      	movs	r1, #32
   d42dc:	f00a f9ae 	bl	de63c <_ZdlPvj>
   d42e0:	4620      	mov	r0, r4
   d42e2:	bd10      	pop	{r4, pc}

000d42e4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d42e4:	2200      	movs	r2, #0
   d42e6:	4611      	mov	r1, r2
   d42e8:	6840      	ldr	r0, [r0, #4]
   d42ea:	f007 bbb7 	b.w	dba5c <network_ready>

000d42ee <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42ee:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d42f0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42f2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d42f4:	b113      	cbz	r3, d42fc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42f6:	2203      	movs	r2, #3
   d42f8:	4601      	mov	r1, r0
   d42fa:	4798      	blx	r3
    }
   d42fc:	4620      	mov	r0, r4
   d42fe:	bd10      	pop	{r4, pc}

000d4300 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4300:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4302:	2500      	movs	r5, #0
   d4304:	468e      	mov	lr, r1
   d4306:	4915      	ldr	r1, [pc, #84]	; (d435c <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d4308:	7105      	strb	r5, [r0, #4]
   d430a:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d430c:	6145      	str	r5, [r0, #20]
   d430e:	6001      	str	r1, [r0, #0]
   d4310:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4312:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4316:	b085      	sub	sp, #20
   d4318:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d431a:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d431e:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4322:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4326:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d432a:	e897 0003 	ldmia.w	r7, {r0, r1}
   d432e:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4332:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4334:	6960      	ldr	r0, [r4, #20]
   d4336:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4338:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d433a:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d433c:	69a0      	ldr	r0, [r4, #24]
   d433e:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4340:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4342:	e88d 0028 	stmia.w	sp, {r3, r5}
   d4346:	4a06      	ldr	r2, [pc, #24]	; (d4360 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d4348:	4623      	mov	r3, r4
   d434a:	4671      	mov	r1, lr
   d434c:	f104 0008 	add.w	r0, r4, #8
   d4350:	f007 f966 	bl	db620 <os_timer_create>
    }
   d4354:	4620      	mov	r0, r4
   d4356:	b005      	add	sp, #20
   d4358:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d435a:	bf00      	nop
   d435c:	000e48fc 	.word	0x000e48fc
   d4360:	000d4241 	.word	0x000d4241

000d4364 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4364:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4366:	6880      	ldr	r0, [r0, #8]
   d4368:	2300      	movs	r3, #0
   d436a:	b138      	cbz	r0, d437c <_ZN5Timer5_stopEjb+0x18>
   d436c:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4370:	2102      	movs	r1, #2
   d4372:	f007 f96d 	bl	db650 <os_timer_change>
   d4376:	fab0 f080 	clz	r0, r0
   d437a:	0940      	lsrs	r0, r0, #5
    }
   d437c:	b003      	add	sp, #12
   d437e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4384 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4384:	b538      	push	{r3, r4, r5, lr}
   d4386:	4b10      	ldr	r3, [pc, #64]	; (d43c8 <_ZN5TimerD1Ev+0x44>)
   d4388:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d438a:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d438c:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d438e:	b1a3      	cbz	r3, d43ba <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4390:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4394:	2200      	movs	r2, #0
   d4396:	f7ff ffe5 	bl	d4364 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d439a:	2100      	movs	r1, #0
   d439c:	68a0      	ldr	r0, [r4, #8]
   d439e:	f007 f96f 	bl	db680 <os_timer_set_id>
            while (running) {
   d43a2:	7923      	ldrb	r3, [r4, #4]
   d43a4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d43a8:	b113      	cbz	r3, d43b0 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d43aa:	f007 f919 	bl	db5e0 <os_thread_yield>
   d43ae:	e7f8      	b.n	d43a2 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d43b0:	4629      	mov	r1, r5
   d43b2:	68a0      	ldr	r0, [r4, #8]
   d43b4:	f007 f93c 	bl	db630 <os_timer_destroy>
            handle = nullptr;
   d43b8:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d43ba:	f104 000c 	add.w	r0, r4, #12
   d43be:	f7ff ff96 	bl	d42ee <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43c2:	4620      	mov	r0, r4
   d43c4:	bd38      	pop	{r3, r4, r5, pc}
   d43c6:	bf00      	nop
   d43c8:	000e48fc 	.word	0x000e48fc

000d43cc <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43cc:	b510      	push	{r4, lr}
   d43ce:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43d0:	f7ff ffd8 	bl	d4384 <_ZN5TimerD1Ev>
   d43d4:	4620      	mov	r0, r4
   d43d6:	211c      	movs	r1, #28
   d43d8:	f00a f930 	bl	de63c <_ZdlPvj>
   d43dc:	4620      	mov	r0, r4
   d43de:	bd10      	pop	{r4, pc}

000d43e0 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43e2:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43e4:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43e6:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43e8:	4611      	mov	r1, r2
   d43ea:	f7ff ffbb 	bl	d4364 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d43ee:	68a8      	ldr	r0, [r5, #8]
   d43f0:	2300      	movs	r3, #0
   d43f2:	b140      	cbz	r0, d4406 <_ZN5Timer5startEj+0x26>
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	9400      	str	r4, [sp, #0]
   d43f8:	461a      	mov	r2, r3
   d43fa:	4619      	mov	r1, r3
   d43fc:	f007 f928 	bl	db650 <os_timer_change>
   d4400:	fab0 f080 	clz	r0, r0
   d4404:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d4406:	b003      	add	sp, #12
   d4408:	bd30      	pop	{r4, r5, pc}
	...

000d440c <_Z15checkI2CDevicesv>:
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
   d440c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4410:	4f4d      	ldr	r7, [pc, #308]	; (d4548 <_Z15checkI2CDevicesv+0x13c>)
  for (size_t i; i<i2cLength; ++i)// recorremos el arreglo de las direcciones
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];// address es igaual a los datos guardados en nuestro arreglo i2cAdd
   d4412:	f8df 9148 	ldr.w	r9, [pc, #328]	; d455c <_Z15checkI2CDevicesv+0x150>
   d4416:	f8df 8148 	ldr.w	r8, [pc, #328]	; d4560 <_Z15checkI2CDevicesv+0x154>
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
   d441a:	b08d      	sub	sp, #52	; 0x34
   d441c:	2400      	movs	r4, #0
  byte error, address;//constante error y address
  bool result = true;// variable result
   d441e:	2501      	movs	r5, #1
  for (size_t i; i<i2cLength; ++i)// recorremos el arreglo de las direcciones
   d4420:	2c09      	cmp	r4, #9
   d4422:	f000 808d 	beq.w	d4540 <_Z15checkI2CDevicesv+0x134>
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];// address es igaual a los datos guardados en nuestro arreglo i2cAdd
   d4426:	f814 6009 	ldrb.w	r6, [r4, r9]

    Wire.beginTransmission(address);//Inicie una transmisión al dispositivo esclavo I 2 C con la dirección dada
   d442a:	f00a f8d3 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d442e:	4631      	mov	r1, r6
   d4430:	f009 fbed 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();// igualamos a error cuando esa transmision se termina
   d4434:	f00a f8ce 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d4438:	f009 fbf4 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

    //Try again if !error=0
    if (!error==0)
   d443c:	2800      	cmp	r0, #0
   d443e:	d04e      	beq.n	d44de <_Z15checkI2CDevicesv+0xd2>
    {
      delay(10);
   d4440:	200a      	movs	r0, #10
   d4442:	f008 fd93 	bl	dcf6c <delay>
      Wire.beginTransmission(address);//Inicie una transmisión al dispositivo esclavo I 2 C con la dirección dada
   d4446:	f00a f8c5 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d444a:	4631      	mov	r1, r6
   d444c:	f009 fbdf 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();// igualamos a error cuando esa transmision se termina
   d4450:	f00a f8c0 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d4454:	f009 fbe6 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>
    }

    //Try reset if !error=0
    if (!error==0)//intentamos de nuevo si el error no es 0
   d4458:	2800      	cmp	r0, #0
   d445a:	d040      	beq.n	d44de <_Z15checkI2CDevicesv+0xd2>
    {
      Wire.reset();// reseteamos la transmiision
   d445c:	f00a f8ba 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d4460:	f009 fbe7 	bl	ddc32 <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);//volvemos a iniciar la transmision 
   d4464:	f00a f8b6 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d4468:	4631      	mov	r1, r6
   d446a:	f009 fbd0 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();//igualamos a error cuando esa transmision se termina
   d446e:	f00a f8b1 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d4472:	f009 fbd7 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>
    }
 
    if (error == 0)
   d4476:	b390      	cbz	r0, d44de <_Z15checkI2CDevicesv+0xd2>
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));//imprimimos el dispositivo, nombre, direccion
      i2cExists[i]=true;// cambiamos de false a true en el arreglo
    }
    else
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " NOT at"+" address:0x"+String(address, HEX)));//se imprime que no esta en la direccion
   d4478:	f009 f9e4 	bl	dd844 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d447c:	4933      	ldr	r1, [pc, #204]	; (d454c <_Z15checkI2CDevicesv+0x140>)
   d447e:	4605      	mov	r5, r0
   d4480:	4668      	mov	r0, sp
   d4482:	f008 f8de 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d4486:	4639      	mov	r1, r7
   d4488:	4668      	mov	r0, sp
   d448a:	f008 f9b8 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d448e:	4930      	ldr	r1, [pc, #192]	; (d4550 <_Z15checkI2CDevicesv+0x144>)
   d4490:	f008 f9c1 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   d4494:	492f      	ldr	r1, [pc, #188]	; (d4554 <_Z15checkI2CDevicesv+0x148>)
   d4496:	f008 f9be 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   d449a:	2210      	movs	r2, #16
   d449c:	4682      	mov	sl, r0
   d449e:	4631      	mov	r1, r6
   d44a0:	eb0d 0002 	add.w	r0, sp, r2
   d44a4:	f008 f941 	bl	dc72a <_ZN6StringC1Ehh>
   d44a8:	a904      	add	r1, sp, #16
   d44aa:	4650      	mov	r0, sl
   d44ac:	f008 f9a7 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d44b0:	4601      	mov	r1, r0
   d44b2:	a808      	add	r0, sp, #32
   d44b4:	f008 f904 	bl	dc6c0 <_ZN6StringC1ERKS_>
   d44b8:	9908      	ldr	r1, [sp, #32]
   d44ba:	4628      	mov	r0, r5
   d44bc:	f008 fa7b 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d44c0:	a808      	add	r0, sp, #32
   d44c2:	f008 f877 	bl	dc5b4 <_ZN6StringD1Ev>
   d44c6:	a804      	add	r0, sp, #16
   d44c8:	f008 f874 	bl	dc5b4 <_ZN6StringD1Ev>
      i2cExists[i]=false;//dejamos el false en el arreglo
   d44cc:	2500      	movs	r5, #0

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d44ce:	4668      	mov	r0, sp
   d44d0:	f008 f870 	bl	dc5b4 <_ZN6StringD1Ev>
   d44d4:	f808 5004 	strb.w	r5, [r8, r4]
// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
  byte error, address;//constante error y address
  bool result = true;// variable result
  for (size_t i; i<i2cLength; ++i)// recorremos el arreglo de las direcciones
   d44d8:	3401      	adds	r4, #1
   d44da:	3710      	adds	r7, #16
   d44dc:	e7a0      	b.n	d4420 <_Z15checkI2CDevicesv+0x14>
      error = Wire.endTransmission();//igualamos a error cuando esa transmision se termina
    }
 
    if (error == 0)
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));//imprimimos el dispositivo, nombre, direccion
   d44de:	f009 f9b1 	bl	dd844 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d44e2:	491a      	ldr	r1, [pc, #104]	; (d454c <_Z15checkI2CDevicesv+0x140>)
   d44e4:	4682      	mov	sl, r0
   d44e6:	4668      	mov	r0, sp
   d44e8:	f008 f8ab 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d44ec:	4639      	mov	r1, r7
   d44ee:	4668      	mov	r0, sp
   d44f0:	f008 f985 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d44f4:	4918      	ldr	r1, [pc, #96]	; (d4558 <_Z15checkI2CDevicesv+0x14c>)
   d44f6:	f008 f98e 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   d44fa:	4916      	ldr	r1, [pc, #88]	; (d4554 <_Z15checkI2CDevicesv+0x148>)
   d44fc:	f008 f98b 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   d4500:	2210      	movs	r2, #16
   d4502:	4683      	mov	fp, r0
   d4504:	4631      	mov	r1, r6
   d4506:	eb0d 0002 	add.w	r0, sp, r2
   d450a:	f008 f90e 	bl	dc72a <_ZN6StringC1Ehh>
   d450e:	a904      	add	r1, sp, #16
   d4510:	4658      	mov	r0, fp
   d4512:	f008 f974 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d4516:	4601      	mov	r1, r0
   d4518:	a808      	add	r0, sp, #32
   d451a:	f008 f8d1 	bl	dc6c0 <_ZN6StringC1ERKS_>
   d451e:	9908      	ldr	r1, [sp, #32]
   d4520:	4650      	mov	r0, sl
   d4522:	f008 fa48 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d4526:	a808      	add	r0, sp, #32
   d4528:	f008 f844 	bl	dc5b4 <_ZN6StringD1Ev>
   d452c:	a804      	add	r0, sp, #16
   d452e:	f008 f841 	bl	dc5b4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4532:	4668      	mov	r0, sp
   d4534:	f008 f83e 	bl	dc5b4 <_ZN6StringD1Ev>
      i2cExists[i]=true;// cambiamos de false a true en el arreglo
   d4538:	2301      	movs	r3, #1
   d453a:	f808 3004 	strb.w	r3, [r8, r4]
   d453e:	e7cb      	b.n	d44d8 <_Z15checkI2CDevicesv+0xcc>
      i2cExists[i]=false;//dejamos el false en el arreglo
      result = false;
    }
  }
  return result;
}
   d4540:	4628      	mov	r0, r5
   d4542:	b00d      	add	sp, #52	; 0x34
   d4544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4548:	2003bc68 	.word	0x2003bc68
   d454c:	000e4965 	.word	0x000e4965
   d4550:	000e496d 	.word	0x000e496d
   d4554:	000e4975 	.word	0x000e4975
   d4558:	000e4971 	.word	0x000e4971
   d455c:	2003bb04 	.word	0x2003bb04
   d4560:	2003c508 	.word	0x2003c508

000d4564 <_Z8printI2Ci>:


void printI2C(int inx)//imprimir i2c
{
   d4564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4568:	4d1e      	ldr	r5, [pc, #120]	; (d45e4 <_Z8printI2Ci+0x80>)
    for (int i=0; i<i2cLength; i++)
        {
          if (i2cAddr[i] == inx)//comp lo que tenemos en la posicion i a inx
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));//imprimimos el dispositivo con su direccion
   d456a:	4f1f      	ldr	r7, [pc, #124]	; (d45e8 <_Z8printI2Ci+0x84>)
  return result;
}


void printI2C(int inx)//imprimir i2c
{
   d456c:	b08d      	sub	sp, #52	; 0x34
   d456e:	4606      	mov	r6, r0
    for (int i=0; i<i2cLength; i++)
   d4570:	2400      	movs	r4, #0
        {
          if (i2cAddr[i] == inx)//comp lo que tenemos en la posicion i a inx
   d4572:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d4576:	42b3      	cmp	r3, r6
   d4578:	d12d      	bne.n	d45d6 <_Z8printI2Ci+0x72>
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));//imprimimos el dispositivo con su direccion
   d457a:	f009 f963 	bl	dd844 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d457e:	491b      	ldr	r1, [pc, #108]	; (d45ec <_Z8printI2Ci+0x88>)
   d4580:	4680      	mov	r8, r0
   d4582:	4668      	mov	r0, sp
   d4584:	f008 f85d 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d4588:	eb07 1104 	add.w	r1, r7, r4, lsl #4
   d458c:	4668      	mov	r0, sp
   d458e:	f008 f936 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d4592:	4917      	ldr	r1, [pc, #92]	; (d45f0 <_Z8printI2Ci+0x8c>)
   d4594:	f008 f93f 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   d4598:	4916      	ldr	r1, [pc, #88]	; (d45f4 <_Z8printI2Ci+0x90>)
   d459a:	f008 f93c 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   d459e:	2210      	movs	r2, #16
   d45a0:	4681      	mov	r9, r0
   d45a2:	7829      	ldrb	r1, [r5, #0]
   d45a4:	eb0d 0002 	add.w	r0, sp, r2
   d45a8:	f008 f8bf 	bl	dc72a <_ZN6StringC1Ehh>
   d45ac:	a904      	add	r1, sp, #16
   d45ae:	4648      	mov	r0, r9
   d45b0:	f008 f925 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d45b4:	4601      	mov	r1, r0
   d45b6:	a808      	add	r0, sp, #32
   d45b8:	f008 f882 	bl	dc6c0 <_ZN6StringC1ERKS_>
   d45bc:	9908      	ldr	r1, [sp, #32]
   d45be:	4640      	mov	r0, r8
   d45c0:	f008 f9f9 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d45c4:	a808      	add	r0, sp, #32
   d45c6:	f007 fff5 	bl	dc5b4 <_ZN6StringD1Ev>
   d45ca:	a804      	add	r0, sp, #16
   d45cc:	f007 fff2 	bl	dc5b4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d45d0:	4668      	mov	r0, sp
   d45d2:	f007 ffef 	bl	dc5b4 <_ZN6StringD1Ev>
}


void printI2C(int inx)//imprimir i2c
{
    for (int i=0; i<i2cLength; i++)
   d45d6:	3401      	adds	r4, #1
   d45d8:	2c09      	cmp	r4, #9
   d45da:	d1ca      	bne.n	d4572 <_Z8printI2Ci+0xe>
          if (i2cAddr[i] == inx)//comp lo que tenemos en la posicion i a inx
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));//imprimimos el dispositivo con su direccion
          }
        }        
}
   d45dc:	b00d      	add	sp, #52	; 0x34
   d45de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d45e2:	bf00      	nop
   d45e4:	2003bb03 	.word	0x2003bb03
   d45e8:	2003bc68 	.word	0x2003bc68
   d45ec:	000e4965 	.word	0x000e4965
   d45f0:	000e4971 	.word	0x000e4971
   d45f4:	000e4975 	.word	0x000e4975

000d45f8 <_Z7scanI2Cv>:

void scanI2C()
{
   d45f8:	b570      	push	{r4, r5, r6, lr}
  byte error, address;//constantes
  int nDevices;//num de dispositivos
 
  DEBUG_PRINTLN("Scanning...");//imprimios
   d45fa:	f009 f923 	bl	dd844 <_Z16_fetch_usbserialv>
   d45fe:	491d      	ldr	r1, [pc, #116]	; (d4674 <_Z7scanI2Cv+0x7c>)
   d4600:	f008 f9d9 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d4604:	2401      	movs	r4, #1
  nDevices = 0;//num de dispositivos =0
   d4606:	2500      	movs	r5, #0
  for(address = 1; address < 127; address++ )// ciclo for donde add es igual a 1 add tiene q ser menor a 127 y add++
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
   d4608:	f009 ffe4 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d460c:	b2e1      	uxtb	r1, r4
   d460e:	f009 fafe 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d4612:	f009 ffdf 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d4616:	f009 fb05 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>
 
    if (error == 0)//si el error es igual a 0
   d461a:	b920      	cbnz	r0, d4626 <_Z7scanI2Cv+0x2e>
    {
      printI2C(address);//le damos la direccion a printi2c q despues comprobara si es igal a la q esta en el arreglos de i2cAddr
   d461c:	4620      	mov	r0, r4
   d461e:	f7ff ffa1 	bl	d4564 <_Z8printI2Ci>
 
      nDevices++;//sumamos  un dispositivo mas
   d4622:	3501      	adds	r5, #1
   d4624:	e017      	b.n	d4656 <_Z7scanI2Cv+0x5e>
    }
    else if (error==4)//si el error es 4
   d4626:	2804      	cmp	r0, #4
   d4628:	d115      	bne.n	d4656 <_Z7scanI2Cv+0x5e>
    {
      DEBUG_PRINT("Unknown error at address 0x");//imprimimos 
   d462a:	f009 f90b 	bl	dd844 <_Z16_fetch_usbserialv>
   d462e:	4912      	ldr	r1, [pc, #72]	; (d4678 <_Z7scanI2Cv+0x80>)
   d4630:	f008 f9aa 	bl	dc988 <_ZN5Print5printEPKc>
      if (address<16)//si es menor que 16
   d4634:	2c0f      	cmp	r4, #15
   d4636:	d804      	bhi.n	d4642 <_Z7scanI2Cv+0x4a>
        DEBUG_PRINT("0");//imprimimos
   d4638:	f009 f904 	bl	dd844 <_Z16_fetch_usbserialv>
   d463c:	490f      	ldr	r1, [pc, #60]	; (d467c <_Z7scanI2Cv+0x84>)
   d463e:	f008 f9a3 	bl	dc988 <_ZN5Print5printEPKc>
      DEBUG_PRINTLN(address,HEX);//su direccion en hexadecimal
   d4642:	f009 f8ff 	bl	dd844 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4646:	2210      	movs	r2, #16
   d4648:	4606      	mov	r6, r0
   d464a:	4621      	mov	r1, r4
   d464c:	f008 f9bf 	bl	dc9ce <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4650:	4630      	mov	r0, r6
   d4652:	f008 f9a4 	bl	dc99e <_ZN5Print7printlnEv>
   d4656:	3401      	adds	r4, #1
  byte error, address;//constantes
  int nDevices;//num de dispositivos
 
  DEBUG_PRINTLN("Scanning...");//imprimios
  nDevices = 0;//num de dispositivos =0
  for(address = 1; address < 127; address++ )// ciclo for donde add es igual a 1 add tiene q ser menor a 127 y add++
   d4658:	2c7f      	cmp	r4, #127	; 0x7f
   d465a:	d1d5      	bne.n	d4608 <_Z7scanI2Cv+0x10>
      if (address<16)//si es menor que 16
        DEBUG_PRINT("0");//imprimimos
      DEBUG_PRINTLN(address,HEX);//su direccion en hexadecimal
    }    
  }
  if (nDevices == 0)//si no hay dispositivos
   d465c:	b91d      	cbnz	r5, d4666 <_Z7scanI2Cv+0x6e>
    DEBUG_PRINTLN("No I2C devices found\n");//imprimimos
   d465e:	f009 f8f1 	bl	dd844 <_Z16_fetch_usbserialv>
   d4662:	4907      	ldr	r1, [pc, #28]	; (d4680 <_Z7scanI2Cv+0x88>)
   d4664:	e002      	b.n	d466c <_Z7scanI2Cv+0x74>
  else
    DEBUG_PRINTLN("done\n");
   d4666:	f009 f8ed 	bl	dd844 <_Z16_fetch_usbserialv>
   d466a:	4906      	ldr	r1, [pc, #24]	; (d4684 <_Z7scanI2Cv+0x8c>)
}
   d466c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }    
  }
  if (nDevices == 0)//si no hay dispositivos
    DEBUG_PRINTLN("No I2C devices found\n");//imprimimos
  else
    DEBUG_PRINTLN("done\n");
   d4670:	f008 b9a1 	b.w	dc9b6 <_ZN5Print7printlnEPKc>
   d4674:	000e4981 	.word	0x000e4981
   d4678:	000e498d 	.word	0x000e498d
   d467c:	000e4ff4 	.word	0x000e4ff4
   d4680:	000e49a9 	.word	0x000e49a9
   d4684:	000e49bf 	.word	0x000e49bf

000d4688 <_Z7connectv>:
}


void connect()//Agregar una rutina de conexión explícita que debe funcionar antes de que se ejecute el resto del código
{
   d4688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  #if Wiring_Cellular
  bool cellready=Cellular.ready();
   d468a:	4d41      	ldr	r5, [pc, #260]	; (d4790 <_Z7connectv+0x108>)
   d468c:	4628      	mov	r0, r5
   d468e:	f7ff fe29 	bl	d42e4 <_ZN5spark13CellularClass5readyEv>
  if (!cellready)
   d4692:	4604      	mov	r4, r0
   d4694:	bb40      	cbnz	r0, d46e8 <_Z7connectv+0x60>
  {
    DEBUG_PRINTLN("Attempting to connect cellular...");
   d4696:	f009 f8d5 	bl	dd844 <_Z16_fetch_usbserialv>
   d469a:	493e      	ldr	r1, [pc, #248]	; (d4794 <_Z7connectv+0x10c>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d469c:	4e3e      	ldr	r6, [pc, #248]	; (d4798 <_Z7connectv+0x110>)
   d469e:	f008 f98a 	bl	dc9b6 <_ZN5Print7printlnEPKc>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d46a2:	4623      	mov	r3, r4
   d46a4:	4622      	mov	r2, r4
   d46a6:	4621      	mov	r1, r4
   d46a8:	6868      	ldr	r0, [r5, #4]
   d46aa:	f007 f9df 	bl	dba6c <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46ae:	4623      	mov	r3, r4
   d46b0:	4622      	mov	r2, r4
   d46b2:	4621      	mov	r1, r4
   d46b4:	6868      	ldr	r0, [r5, #4]
   d46b6:	f007 f9b9 	bl	dba2c <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46ba:	4620      	mov	r0, r4
   d46bc:	f006 ff78 	bl	db5b0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d46c0:	2500      	movs	r5, #0
   d46c2:	4604      	mov	r4, r0
   d46c4:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46c6:	2000      	movs	r0, #0
   d46c8:	f006 ff72 	bl	db5b0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d46cc:	1b00      	subs	r0, r0, r4
   d46ce:	eb61 0105 	sbc.w	r1, r1, r5
   d46d2:	428f      	cmp	r7, r1
   d46d4:	bf08      	it	eq
   d46d6:	4286      	cmpeq	r6, r0
   d46d8:	d335      	bcc.n	d4746 <_Z7connectv+0xbe>
    Cellular.on();
    Cellular.connect();
    waitFor(Cellular.ready,180000);
   d46da:	482d      	ldr	r0, [pc, #180]	; (d4790 <_Z7connectv+0x108>)
   d46dc:	f7ff fe02 	bl	d42e4 <_ZN5spark13CellularClass5readyEv>
   d46e0:	bb88      	cbnz	r0, d4746 <_Z7connectv+0xbe>
            spark_process();
   d46e2:	f007 f9fb 	bl	dbadc <spark_process>
   d46e6:	e7ee      	b.n	d46c6 <_Z7connectv+0x3e>
    System.reset();
    }
  }
  else
  {
    DEBUG_PRINTLN("Cellular ready");
   d46e8:	f009 f8ac 	bl	dd844 <_Z16_fetch_usbserialv>
   d46ec:	492b      	ldr	r1, [pc, #172]	; (d479c <_Z7connectv+0x114>)
   d46ee:	f008 f962 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d46f2:	f007 fa03 	bl	dbafc <spark_cloud_flag_connected>
    DEBUG_PRINTLN("Cellular ready");
  }
  #endif

  bool partconnected=Particle.connected();
  if (!partconnected)
   d46f6:	4604      	mov	r4, r0
   d46f8:	b9f0      	cbnz	r0, d4738 <_Z7connectv+0xb0>
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
   d46fa:	f009 f8a3 	bl	dd844 <_Z16_fetch_usbserialv>
   d46fe:	4928      	ldr	r1, [pc, #160]	; (d47a0 <_Z7connectv+0x118>)
   d4700:	f008 f959 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4704:	f007 f9f2 	bl	dbaec <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4708:	4620      	mov	r0, r4
   d470a:	f006 ff51 	bl	db5b0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d470e:	2500      	movs	r5, #0
   d4710:	4604      	mov	r4, r0
   d4712:	f64e 265f 	movw	r6, #59999	; 0xea5f
   d4716:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4718:	2000      	movs	r0, #0
   d471a:	f006 ff49 	bl	db5b0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d471e:	1b00      	subs	r0, r0, r4
   d4720:	eb61 0105 	sbc.w	r1, r1, r5
   d4724:	428f      	cmp	r7, r1
   d4726:	bf08      	it	eq
   d4728:	4286      	cmpeq	r6, r0
   d472a:	d31f      	bcc.n	d476c <_Z7connectv+0xe4>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d472c:	f007 f9e6 	bl	dbafc <spark_cloud_flag_connected>
   d4730:	b9e0      	cbnz	r0, d476c <_Z7connectv+0xe4>
            spark_process();
   d4732:	f007 f9d3 	bl	dbadc <spark_process>
   d4736:	e7ef      	b.n	d4718 <_Z7connectv+0x90>
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d4738:	f009 f884 	bl	dd844 <_Z16_fetch_usbserialv>
   d473c:	4919      	ldr	r1, [pc, #100]	; (d47a4 <_Z7connectv+0x11c>)
  }
}
   d473e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d4742:	f008 b938 	b.w	dc9b6 <_ZN5Print7printlnEPKc>
  if (!cellready)
  {
    DEBUG_PRINTLN("Attempting to connect cellular...");
    Cellular.on();
    Cellular.connect();
    waitFor(Cellular.ready,180000);
   d4746:	4812      	ldr	r0, [pc, #72]	; (d4790 <_Z7connectv+0x108>)
   d4748:	f7ff fdcc 	bl	d42e4 <_ZN5spark13CellularClass5readyEv>
    if (!Cellular.ready())
   d474c:	4810      	ldr	r0, [pc, #64]	; (d4790 <_Z7connectv+0x108>)
   d474e:	f7ff fdc9 	bl	d42e4 <_ZN5spark13CellularClass5readyEv>
   d4752:	2800      	cmp	r0, #0
   d4754:	d1cd      	bne.n	d46f2 <_Z7connectv+0x6a>
    {
    DEBUG_PRINTLN("Cellular not ready - resetting");
   d4756:	f009 f875 	bl	dd844 <_Z16_fetch_usbserialv>
   d475a:	4913      	ldr	r1, [pc, #76]	; (d47a8 <_Z7connectv+0x120>)
   d475c:	f008 f92b 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    delay(200);
   d4760:	20c8      	movs	r0, #200	; 0xc8
   d4762:	f008 fc03 	bl	dcf6c <delay>
    System.reset();
   d4766:	f007 fb91 	bl	dbe8c <_ZN11SystemClass5resetEv>
   d476a:	e7c2      	b.n	d46f2 <_Z7connectv+0x6a>
   d476c:	f007 f9c6 	bl	dbafc <spark_cloud_flag_connected>
   d4770:	f007 f9c4 	bl	dbafc <spark_cloud_flag_connected>
    DEBUG_PRINTLN("Attempting to connect to Particle...");
    Particle.connect();
    // Note: that conditions must be a function that takes a void argument function(void) with the () removed,
    // e.g. Particle.connected instead of Particle.connected().
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
   d4774:	b958      	cbnz	r0, d478e <_Z7connectv+0x106>
    {
      DEBUG_PRINTLN("Particle not connected - resetting");
   d4776:	f009 f865 	bl	dd844 <_Z16_fetch_usbserialv>
   d477a:	490c      	ldr	r1, [pc, #48]	; (d47ac <_Z7connectv+0x124>)
   d477c:	f008 f91b 	bl	dc9b6 <_ZN5Print7printlnEPKc>
      delay(200);
   d4780:	20c8      	movs	r0, #200	; 0xc8
   d4782:	f008 fbf3 	bl	dcf6c <delay>
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
  }
}
   d4786:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
    {
      DEBUG_PRINTLN("Particle not connected - resetting");
      delay(200);
      System.reset();
   d478a:	f007 bb7f 	b.w	dbe8c <_ZN11SystemClass5resetEv>
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
  }
}
   d478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4790:	2003e2dc 	.word	0x2003e2dc
   d4794:	000e49c5 	.word	0x000e49c5
   d4798:	0002bf1f 	.word	0x0002bf1f
   d479c:	000e4a06 	.word	0x000e4a06
   d47a0:	000e4a15 	.word	0x000e4a15
   d47a4:	000e4a5d 	.word	0x000e4a5d
   d47a8:	000e49e7 	.word	0x000e49e7
   d47ac:	000e4a3a 	.word	0x000e4a3a

000d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47b0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d47b2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47b4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d47b6:	b17c      	cbz	r4, d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d47b8:	6863      	ldr	r3, [r4, #4]
   d47ba:	3b01      	subs	r3, #1
   d47bc:	6063      	str	r3, [r4, #4]
   d47be:	b95b      	cbnz	r3, d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d47c0:	6823      	ldr	r3, [r4, #0]
   d47c2:	4620      	mov	r0, r4
   d47c4:	689b      	ldr	r3, [r3, #8]
   d47c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d47c8:	68a3      	ldr	r3, [r4, #8]
   d47ca:	3b01      	subs	r3, #1
   d47cc:	60a3      	str	r3, [r4, #8]
   d47ce:	b91b      	cbnz	r3, d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d47d0:	6823      	ldr	r3, [r4, #0]
   d47d2:	4620      	mov	r0, r4
   d47d4:	68db      	ldr	r3, [r3, #12]
   d47d6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d47d8:	4628      	mov	r0, r5
   d47da:	bd38      	pop	{r3, r4, r5, pc}

000d47dc <_Z7syncRTCv>:
  timeToNextSendMS = millis();
  readyToGetResetAndSendSensors = true;
}

bool syncRTC()// sincroniza el reloj en tiempo real
{
   d47dc:	b570      	push	{r4, r5, r6, lr}
   d47de:	b094      	sub	sp, #80	; 0x50
   d47e0:	f006 fece 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d47e4:	4d2f      	ldr	r5, [pc, #188]	; (d48a4 <_Z7syncRTCv+0xc8>)

    do
    {
      Particle.process();//comprueba el módulo Wi-Fi en busca de mensajes entrantes de la nube y procesa cualquier mensaje que haya entrado.
      delay(100);
    } while (Time.now() < 1465823822 && millis()-syncTimer<500);
   d47e6:	4e30      	ldr	r6, [pc, #192]	; (d48a8 <_Z7syncRTCv+0xcc>)
   d47e8:	4604      	mov	r4, r0
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d47ea:	f006 fec9 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d47ee:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d47f0:	f007 f974 	bl	dbadc <spark_process>
    unsigned long syncTimer = millis();

    do
    {
      Particle.process();//comprueba el módulo Wi-Fi en busca de mensajes entrantes de la nube y procesa cualquier mensaje que haya entrado.
      delay(100);
   d47f4:	2064      	movs	r0, #100	; 0x64
   d47f6:	f008 fbb9 	bl	dcf6c <delay>
    } while (Time.now() < 1465823822 && millis()-syncTimer<500);
   d47fa:	f008 fb6c 	bl	dced6 <_ZN9TimeClass3nowEv>
   d47fe:	42b0      	cmp	r0, r6
   d4800:	dc05      	bgt.n	d480e <_Z7syncRTCv+0x32>
   d4802:	f006 febd 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
   d4806:	1b00      	subs	r0, r0, r4
   d4808:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d480c:	d3ed      	bcc.n	d47ea <_Z7syncRTCv+0xe>

    if (Time.now() > 1465823822)
   d480e:	f008 fb62 	bl	dced6 <_ZN9TimeClass3nowEv>
   d4812:	4b26      	ldr	r3, [pc, #152]	; (d48ac <_Z7syncRTCv+0xd0>)
   d4814:	4298      	cmp	r0, r3
   d4816:	dd07      	ble.n	d4828 <_Z7syncRTCv+0x4c>
    {
        syncNow = Time.now();//pone el tiempo en la memoria
   d4818:	f008 fb5d 	bl	dced6 <_ZN9TimeClass3nowEv>
        node.setUnixTime(syncNow);//sincroniza el tiempo del node
   d481c:	4601      	mov	r1, r0
   d481e:	4824      	ldr	r0, [pc, #144]	; (d48b0 <_Z7syncRTCv+0xd4>)
   d4820:	f001 f9a8 	bl	d5b74 <_ZN7IoTNode11setUnixTimeEm>
        sync = true;// la sincronizacion fue true
   d4824:	2001      	movs	r0, #1
   d4826:	e03a      	b.n	d489e <_Z7syncRTCv+0xc2>
    }

    if (!sync)
    {
        #ifdef DEBUG
        Particle.publish("Time NOT synced",String(Time.format(syncNow, TIME_FORMAT_ISO8601_FULL)+"  "+Time.format(node.unixTime(), TIME_FORMAT_ISO8601_FULL)),PRIVATE);//publicamosa evento de tiempo no sinc
   d4828:	4c22      	ldr	r4, [pc, #136]	; (d48b4 <_Z7syncRTCv+0xd8>)
   d482a:	4923      	ldr	r1, [pc, #140]	; (d48b8 <_Z7syncRTCv+0xdc>)
   d482c:	6823      	ldr	r3, [r4, #0]
   d482e:	2200      	movs	r2, #0
   d4830:	a804      	add	r0, sp, #16
   d4832:	f008 fafd 	bl	dce30 <_ZN9TimeClass6formatElPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4836:	a904      	add	r1, sp, #16
   d4838:	a808      	add	r0, sp, #32
   d483a:	f007 ff41 	bl	dc6c0 <_ZN6StringC1ERKS_>
   d483e:	491f      	ldr	r1, [pc, #124]	; (d48bc <_Z7syncRTCv+0xe0>)
   d4840:	a808      	add	r0, sp, #32
   d4842:	f007 ffe8 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   d4846:	4605      	mov	r5, r0
   d4848:	4819      	ldr	r0, [pc, #100]	; (d48b0 <_Z7syncRTCv+0xd4>)
   d484a:	f001 f98d 	bl	d5b68 <_ZN7IoTNode8unixTimeEv>
   d484e:	6823      	ldr	r3, [r4, #0]
   d4850:	4919      	ldr	r1, [pc, #100]	; (d48b8 <_Z7syncRTCv+0xdc>)
   d4852:	4602      	mov	r2, r0
   d4854:	a80c      	add	r0, sp, #48	; 0x30
   d4856:	f008 faeb 	bl	dce30 <_ZN9TimeClass6formatElPKc>
   d485a:	a90c      	add	r1, sp, #48	; 0x30
   d485c:	4628      	mov	r0, r5
   d485e:	f007 ffce 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d4862:	4601      	mov	r1, r0
   d4864:	a810      	add	r0, sp, #64	; 0x40
   d4866:	f007 ff2b 	bl	dc6c0 <_ZN6StringC1ERKS_>
   d486a:	4b15      	ldr	r3, [pc, #84]	; (d48c0 <_Z7syncRTCv+0xe4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d486c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d486e:	781b      	ldrb	r3, [r3, #0]
   d4870:	4914      	ldr	r1, [pc, #80]	; (d48c4 <_Z7syncRTCv+0xe8>)
   d4872:	f88d 3000 	strb.w	r3, [sp]
   d4876:	a802      	add	r0, sp, #8
   d4878:	233c      	movs	r3, #60	; 0x3c
   d487a:	f008 fd69 	bl	dd350 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d487e:	a803      	add	r0, sp, #12
   d4880:	f7ff ff96 	bl	d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4884:	a810      	add	r0, sp, #64	; 0x40
   d4886:	f007 fe95 	bl	dc5b4 <_ZN6StringD1Ev>
   d488a:	a80c      	add	r0, sp, #48	; 0x30
   d488c:	f007 fe92 	bl	dc5b4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4890:	a808      	add	r0, sp, #32
   d4892:	f007 fe8f 	bl	dc5b4 <_ZN6StringD1Ev>
   d4896:	a804      	add	r0, sp, #16
   d4898:	f007 fe8c 	bl	dc5b4 <_ZN6StringD1Ev>
}

bool syncRTC()// sincroniza el reloj en tiempo real
{
    uint32_t syncNow;// variable 32 bits 
    bool sync = false;// variable sync igualada a false
   d489c:	2000      	movs	r0, #0
        #ifdef DEBUG
        Particle.publish("Time NOT synced",String(Time.format(syncNow, TIME_FORMAT_ISO8601_FULL)+"  "+Time.format(node.unixTime(), TIME_FORMAT_ISO8601_FULL)),PRIVATE);//publicamosa evento de tiempo no sinc
        #endif
    }
    return sync;
}
   d489e:	b014      	add	sp, #80	; 0x50
   d48a0:	bd70      	pop	{r4, r5, r6, pc}
   d48a2:	bf00      	nop
   d48a4:	2003e608 	.word	0x2003e608
   d48a8:	575eb24d 	.word	0x575eb24d
   d48ac:	575eb24e 	.word	0x575eb24e
   d48b0:	2003c324 	.word	0x2003c324
   d48b4:	2003bb14 	.word	0x2003bb14
   d48b8:	2003e218 	.word	0x2003e218
   d48bc:	000e5659 	.word	0x000e5659
   d48c0:	2003bc58 	.word	0x2003bc58
   d48c4:	000e4a70 	.word	0x000e4a70

000d48c8 <setup>:
    DEBUG_PRINTLN("Particle connected");
  }
}
Adafruit_ADS1115 ads;//ads1115 con direccion default
// setup() runs once, when the device is first turned on.
void setup() {
   d48c8:	b530      	push	{r4, r5, lr}
  ubidots.setDebug(true);
   d48ca:	2101      	movs	r1, #1
    DEBUG_PRINTLN("Particle connected");
  }
}
Adafruit_ADS1115 ads;//ads1115 con direccion default
// setup() runs once, when the device is first turned on.
void setup() {
   d48cc:	b085      	sub	sp, #20
  ubidots.setDebug(true);
   d48ce:	4847      	ldr	r0, [pc, #284]	; (d49ec <setup+0x124>)
   d48d0:	f004 fd21 	bl	d9316 <_ZN7Ubidots8setDebugEb>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d48d4:	2300      	movs	r3, #0
   d48d6:	2202      	movs	r2, #2
   d48d8:	4945      	ldr	r1, [pc, #276]	; (d49f0 <setup+0x128>)
   d48da:	4846      	ldr	r0, [pc, #280]	; (d49f4 <setup+0x12c>)
   d48dc:	f007 f8f6 	bl	dbacc <spark_variable>
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d48e0:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
   d48e2:	230c      	movs	r3, #12
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d48e4:	9401      	str	r4, [sp, #4]
        extra.size = sizeof(extra);
   d48e6:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
   d48ea:	4b43      	ldr	r3, [pc, #268]	; (d49f8 <setup+0x130>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d48ec:	4943      	ldr	r1, [pc, #268]	; (d49fc <setup+0x134>)
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
   d48ee:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d48f0:	2204      	movs	r2, #4
   d48f2:	ab01      	add	r3, sp, #4
   d48f4:	4842      	ldr	r0, [pc, #264]	; (d4a00 <setup+0x138>)
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d48f6:	9403      	str	r4, [sp, #12]
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d48f8:	f007 f8e8 	bl	dbacc <spark_variable>
  // register cloudy things
  Particle.variable("version",firmwareVersion);
  Particle.variable("devicestatus",deviceStatus);

  Serial.begin();//inicializamos el puerto serial
   d48fc:	f008 ffa2 	bl	dd844 <_Z16_fetch_usbserialv>
   d4900:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4904:	f008 ff92 	bl	dd82c <_ZN9USBSerial5beginEl>
  //Serial1.begin(115200);
   
  ads.begin();
   d4908:	483e      	ldr	r0, [pc, #248]	; (d4a04 <setup+0x13c>)
   d490a:	f001 fda6 	bl	d645a <_ZN16Adafruit_ADS10155beginEv>
ads.setGain(GAIN_TWOTHIRDS); 
   d490e:	4621      	mov	r1, r4
   d4910:	483c      	ldr	r0, [pc, #240]	; (d4a04 <setup+0x13c>)
   d4912:	f001 fda9 	bl	d6468 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
  node.begin();
   d4916:	483c      	ldr	r0, [pc, #240]	; (d4a08 <setup+0x140>)
   d4918:	f001 f94e 	bl	d5bb8 <_ZN7IoTNode5beginEv>
  node.setPowerON(EXT3V3,true);
   d491c:	2201      	movs	r2, #1
   d491e:	2102      	movs	r1, #2
   d4920:	4839      	ldr	r0, [pc, #228]	; (d4a08 <setup+0x140>)
   d4922:	f001 f907 	bl	d5b34 <_ZN7IoTNode10setPowerONE9powerNameb>
  node.setPowerON(EXT5V,true);
   d4926:	2201      	movs	r2, #1
   d4928:	2103      	movs	r1, #3
   d492a:	4837      	ldr	r0, [pc, #220]	; (d4a08 <setup+0x140>)
   d492c:	f001 f902 	bl	d5b34 <_ZN7IoTNode10setPowerONE9powerNameb>
   d4930:	f006 fe26 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
  tiempo2= millis();
   d4934:	4b35      	ldr	r3, [pc, #212]	; (d4a0c <setup+0x144>)
   d4936:	6018      	str	r0, [r3, #0]
  #ifdef IOTDEBUG
  delay(5000);
   d4938:	f241 3088 	movw	r0, #5000	; 0x1388
   d493c:	f008 fb16 	bl	dcf6c <delay>
 
  checkI2CDevices();//le decimos q revise los dispositivos i2c 
   d4940:	f7ff fd64 	bl	d440c <_Z15checkI2CDevicesv>
  scanI2C();//y haga el escaneo
   d4944:	f7ff fe58 	bl	d45f8 <_Z7scanI2Cv>
  #endif

    // Check for I2C devices again
  if (!node.ok())//si en nodo no esta bien 
   d4948:	482f      	ldr	r0, [pc, #188]	; (d4a08 <setup+0x140>)
   d494a:	f001 f8bd 	bl	d5ac8 <_ZN7IoTNode2okEv>
   d494e:	4605      	mov	r5, r0
   d4950:	b9c8      	cbnz	r0, d4986 <setup+0xbe>
  {
    #ifdef IOTDEBUG
    // Particle.publish("Unplugged","Plug the device into the IoT Node",PRIVATE);
    DEBUG_PRINTLN("Plug the device into the IoT Node");//conecta el dispositivo en el nodo
   d4952:	f008 ff77 	bl	dd844 <_Z16_fetch_usbserialv>
   d4956:	492e      	ldr	r1, [pc, #184]	; (d4a10 <setup+0x148>)
   d4958:	f008 f82d 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    #endif
    deviceStatus="Device is not plugged into the IoTNode";//el device estatus es igual a los dispositivos no estan conectados
   d495c:	492d      	ldr	r1, [pc, #180]	; (d4a14 <setup+0x14c>)
   d495e:	4827      	ldr	r0, [pc, #156]	; (d49fc <setup+0x134>)
   d4960:	f007 fec1 	bl	dc6e6 <_ZN6StringaSEPKc>
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4964:	462a      	mov	r2, r5
   d4966:	2101      	movs	r1, #1
   d4968:	482b      	ldr	r0, [pc, #172]	; (d4a18 <setup+0x150>)
   d496a:	f007 f801 	bl	db970 <led_set_status_active>
    fadeRed.setActive(true);//encendemos el led parpadeante de color rojo
    DEBUG_PRINTLN("Resetting in 10 seconds");//imprimimos
   d496e:	f008 ff69 	bl	dd844 <_Z16_fetch_usbserialv>
   d4972:	492a      	ldr	r1, [pc, #168]	; (d4a1c <setup+0x154>)
   d4974:	f008 f81f 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    delay(10000);
   d4978:	f242 7010 	movw	r0, #10000	; 0x2710
   d497c:	f008 faf6 	bl	dcf6c <delay>
    System.reset();//reseteamos el sistema
   d4980:	f007 fa84 	bl	dbe8c <_ZN11SystemClass5resetEv>
   d4984:	e030      	b.n	d49e8 <setup+0x120>
  }
  else
  {
    
    connect();
    framConfig.read(0, (uint8_t*)&config);
   d4986:	4d26      	ldr	r5, [pc, #152]	; (d4a20 <setup+0x158>)
    System.reset();//reseteamos el sistema
  }
  else
  {
    
    connect();
   d4988:	f7ff fe7e 	bl	d4688 <_Z7connectv>
    framConfig.read(0, (uint8_t*)&config);
   d498c:	462a      	mov	r2, r5
   d498e:	4621      	mov	r1, r4
   d4990:	4824      	ldr	r0, [pc, #144]	; (d4a24 <setup+0x15c>)
   d4992:	f001 fa2c 	bl	d5dee <_ZN9framArray4readEmPh>
      // 1. A new ThingSpeak channel is created
      // 2. The channel id and keys are Saved
      // 3. a firstRunTest variable is saved in persistent memory as a flag to indicate
      // that the IoT node has been set up already.

    if (config.testCheck != firstRunTest)
   d4996:	4b24      	ldr	r3, [pc, #144]	; (d4a28 <setup+0x160>)
   d4998:	682a      	ldr	r2, [r5, #0]
   d499a:	429a      	cmp	r2, r3
   d499c:	d008      	beq.n	d49b0 <setup+0xe8>
    {
        config.testCheck = firstRunTest;
   d499e:	602b      	str	r3, [r5, #0]
        /// Defaults
        config.particleTimeout = 20000;
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d49a0:	462a      	mov	r2, r5

    if (config.testCheck != firstRunTest)
    {
        config.testCheck = firstRunTest;
        /// Defaults
        config.particleTimeout = 20000;
   d49a2:	f644 6320 	movw	r3, #20000	; 0x4e20
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d49a6:	4621      	mov	r1, r4
   d49a8:	481e      	ldr	r0, [pc, #120]	; (d4a24 <setup+0x15c>)

    if (config.testCheck != firstRunTest)
    {
        config.testCheck = firstRunTest;
        /// Defaults
        config.particleTimeout = 20000;
   d49aa:	60eb      	str	r3, [r5, #12]
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d49ac:	f001 fa10 	bl	d5dd0 <_ZN9framArray5writeEmPh>
    }
      // end of first run code.

      if (syncRTC())//si el reloj ha sido sincronizado
   d49b0:	f7ff ff14 	bl	d47dc <_Z7syncRTCv>
   d49b4:	b118      	cbz	r0, d49be <setup+0xf6>
      {
        DEBUG_PRINTLN("RTC sync'ed with cloud");//imprime q el reloj esta sinc con la nube
   d49b6:	f008 ff45 	bl	dd844 <_Z16_fetch_usbserialv>
   d49ba:	491c      	ldr	r1, [pc, #112]	; (d4a2c <setup+0x164>)
   d49bc:	e002      	b.n	d49c4 <setup+0xfc>
      }
      else
      {
        DEBUG_PRINTLN("RTC not sync'ed with cloud");//imprime q el reloj no esta sinc con la nube
   d49be:	f008 ff41 	bl	dd844 <_Z16_fetch_usbserialv>
   d49c2:	491b      	ldr	r1, [pc, #108]	; (d4a30 <setup+0x168>)
   d49c4:	f007 fff7 	bl	dc9b6 <_ZN5Print7printlnEPKc>
      }
      // load pointers
      dataRing.initialize();
   d49c8:	481a      	ldr	r0, [pc, #104]	; (d4a34 <setup+0x16c>)
   d49ca:	f001 fa39 	bl	d5e40 <_ZN8framRing10initializeEv>
      sensors.begin();
   d49ce:	481a      	ldr	r0, [pc, #104]	; (d4a38 <setup+0x170>)
   d49d0:	f006 f9d0 	bl	dad74 <_ZN14WeatherSensors5beginEv>
      pollSensorTimer.start();;//comienza a sondear
   d49d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d49d8:	4818      	ldr	r0, [pc, #96]	; (d4a3c <setup+0x174>)
   d49da:	f7ff fd01 	bl	d43e0 <_ZN5Timer5startEj>
      sensorSendTimer.start();  //comienza a mandar datos
   d49de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d49e2:	4817      	ldr	r0, [pc, #92]	; (d4a40 <setup+0x178>)
   d49e4:	f7ff fcfc 	bl	d43e0 <_ZN5Timer5startEj>
  }
}
   d49e8:	b005      	add	sp, #20
   d49ea:	bd30      	pop	{r4, r5, pc}
   d49ec:	2003c4e8 	.word	0x2003c4e8
   d49f0:	000e491c 	.word	0x000e491c
   d49f4:	000e4a80 	.word	0x000e4a80
   d49f8:	000d40bb 	.word	0x000d40bb
   d49fc:	2003c430 	.word	0x2003c430
   d4a00:	000e4a88 	.word	0x000e4a88
   d4a04:	2003bc20 	.word	0x2003bc20
   d4a08:	2003c324 	.word	0x2003c324
   d4a0c:	2003bc30 	.word	0x2003bc30
   d4a10:	000e4a95 	.word	0x000e4a95
   d4a14:	000e4ab7 	.word	0x000e4ab7
   d4a18:	2003c180 	.word	0x2003c180
   d4a1c:	000e4ade 	.word	0x000e4ade
   d4a20:	2003c480 	.word	0x2003c480
   d4a24:	2003c3ac 	.word	0x2003c3ac
   d4a28:	00111f4c 	.word	0x00111f4c
   d4a2c:	000e4af6 	.word	0x000e4af6
   d4a30:	000e4b0d 	.word	0x000e4b0d
   d4a34:	2003c19c 	.word	0x2003c19c
   d4a38:	2003c520 	.word	0x2003c520
   d4a3c:	2003bc38 	.word	0x2003bc38
   d4a40:	2003c3f4 	.word	0x2003c3f4

000d4a44 <_Z9unpluggedv>:
    }
    return sync;
}

void unplugged()
{
   d4a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4a46:	4b0a      	ldr	r3, [pc, #40]	; (d4a70 <_Z9unpluggedv+0x2c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4a48:	4c0a      	ldr	r4, [pc, #40]	; (d4a74 <_Z9unpluggedv+0x30>)
   d4a4a:	781b      	ldrb	r3, [r3, #0]
   d4a4c:	490a      	ldr	r1, [pc, #40]	; (d4a78 <_Z9unpluggedv+0x34>)
   d4a4e:	f88d 3000 	strb.w	r3, [sp]
   d4a52:	4622      	mov	r2, r4
   d4a54:	233c      	movs	r3, #60	; 0x3c
   d4a56:	a802      	add	r0, sp, #8
   d4a58:	f008 fc7a 	bl	dd350 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4a5c:	a803      	add	r0, sp, #12
   d4a5e:	f7ff fea7 	bl	d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  #ifdef IOTDEBUG
  Particle.publish("Unplugged","Plug the device into the IoT Node",PRIVATE);//publica un eveento privado
  DEBUG_PRINTLN("Plug the device into the IoT Node");//imprime el mensaje
   d4a62:	f008 feef 	bl	dd844 <_Z16_fetch_usbserialv>
   d4a66:	4621      	mov	r1, r4
   d4a68:	f007 ffa5 	bl	dc9b6 <_ZN5Print7printlnEPKc>
  #endif

}
   d4a6c:	b004      	add	sp, #16
   d4a6e:	bd10      	pop	{r4, pc}
   d4a70:	2003bc58 	.word	0x2003bc58
   d4a74:	000e4a95 	.word	0x000e4a95
   d4a78:	000e4b28 	.word	0x000e4b28

000d4a7c <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   d4a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4a7e:	b089      	sub	sp, #36	; 0x24
   d4a80:	4604      	mov	r4, r0
   d4a82:	a802      	add	r0, sp, #8
   d4a84:	e880 0006 	stmia.w	r0, {r1, r2}
   d4a88:	461d      	mov	r5, r3
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a8a:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a8c:	2300      	movs	r3, #0
   d4a8e:	460f      	mov	r7, r1
   d4a90:	9e03      	ldr	r6, [sp, #12]
   d4a92:	9306      	str	r3, [sp, #24]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a94:	f7ff fb01 	bl	d409a <_Znwj>
   d4a98:	b110      	cbz	r0, d4aa0 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x24>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d4a9a:	6007      	str	r7, [r0, #0]
   d4a9c:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4a9e:	6085      	str	r5, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4aa0:	4b0b      	ldr	r3, [pc, #44]	; (d4ad0 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x54>)
   d4aa2:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   d4aa4:	4b0b      	ldr	r3, [pc, #44]	; (d4ad4 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x58>)
   d4aa6:	9306      	str	r3, [sp, #24]
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d4aa8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4aac:	9004      	str	r0, [sp, #16]
   d4aae:	9300      	str	r3, [sp, #0]
   d4ab0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d4ab4:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
   d4ab8:	a904      	add	r1, sp, #16
   d4aba:	4620      	mov	r0, r4
   d4abc:	f008 ff1e 	bl	dd8fc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
   d4ac0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ac2:	a804      	add	r0, sp, #16
   d4ac4:	f7ff fc13 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
}
   d4ac8:	4620      	mov	r0, r4
   d4aca:	b009      	add	sp, #36	; 0x24
   d4acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ace:	bf00      	nop
   d4ad0:	000d40ed 	.word	0x000d40ed
   d4ad4:	000d427d 	.word	0x000d427d

000d4ad8 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv>:
  * transmits at least every 2.3 seconds. What you want to do is
  * keep track of the last time that you got a true from this
  * function and then make sure that is within the threshold you
  * wanted. See the example for how this can be done.
  */
  bool Read() {
   d4ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ada:	4604      	mov	r4, r0
        if (m_curr_byte == 0x42) {
            m_calc_checksum = m_curr_byte;
            m_recieved_bytes = 1;
        } else if (m_curr_byte == 0x4D && m_recieved_bytes == 1) {
            m_calc_checksum += m_curr_byte;
            m_recieved_bytes = 2;
   d4adc:	2502      	movs	r5, #2
    while (m_serial.template available() > 0) {
        m_last_byte = m_curr_byte;
        m_curr_byte = m_serial.template read();
        if (m_curr_byte == 0x42) {
            m_calc_checksum = m_curr_byte;
            m_recieved_bytes = 1;
   d4ade:	2601      	movs	r6, #1
  * keep track of the last time that you got a true from this
  * function and then make sure that is within the threshold you
  * wanted. See the example for how this can be done.
  */
  bool Read() {
    while (m_serial.template available() > 0) {
   d4ae0:	6820      	ldr	r0, [r4, #0]
   d4ae2:	6803      	ldr	r3, [r0, #0]
   d4ae4:	691b      	ldr	r3, [r3, #16]
   d4ae6:	4798      	blx	r3
   d4ae8:	2800      	cmp	r0, #0
   d4aea:	dd4f      	ble.n	d4b8c <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0xb4>
        m_last_byte = m_curr_byte;
   d4aec:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
        m_curr_byte = m_serial.template read();
   d4aee:	6820      	ldr	r0, [r4, #0]
  * function and then make sure that is within the threshold you
  * wanted. See the example for how this can be done.
  */
  bool Read() {
    while (m_serial.template available() > 0) {
        m_last_byte = m_curr_byte;
   d4af0:	8723      	strh	r3, [r4, #56]	; 0x38
        m_curr_byte = m_serial.template read();
   d4af2:	6803      	ldr	r3, [r0, #0]
   d4af4:	695b      	ldr	r3, [r3, #20]
   d4af6:	4798      	blx	r3
   d4af8:	b287      	uxth	r7, r0
        if (m_curr_byte == 0x42) {
   d4afa:	2f42      	cmp	r7, #66	; 0x42
  * wanted. See the example for how this can be done.
  */
  bool Read() {
    while (m_serial.template available() > 0) {
        m_last_byte = m_curr_byte;
        m_curr_byte = m_serial.template read();
   d4afc:	8767      	strh	r7, [r4, #58]	; 0x3a
        if (m_curr_byte == 0x42) {
   d4afe:	d102      	bne.n	d4b06 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0x2e>
            m_calc_checksum = m_curr_byte;
   d4b00:	87e7      	strh	r7, [r4, #62]	; 0x3e
            m_recieved_bytes = 1;
   d4b02:	6366      	str	r6, [r4, #52]	; 0x34
   d4b04:	e7ec      	b.n	d4ae0 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0x8>
        } else if (m_curr_byte == 0x4D && m_recieved_bytes == 1) {
   d4b06:	2f4d      	cmp	r7, #77	; 0x4d
   d4b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d4b0a:	d106      	bne.n	d4b1a <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0x42>
   d4b0c:	2901      	cmp	r1, #1
   d4b0e:	d104      	bne.n	d4b1a <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0x42>
            m_calc_checksum += m_curr_byte;
   d4b10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
            m_recieved_bytes = 2;
   d4b12:	6365      	str	r5, [r4, #52]	; 0x34
        m_curr_byte = m_serial.template read();
        if (m_curr_byte == 0x42) {
            m_calc_checksum = m_curr_byte;
            m_recieved_bytes = 1;
        } else if (m_curr_byte == 0x4D && m_recieved_bytes == 1) {
            m_calc_checksum += m_curr_byte;
   d4b14:	334d      	adds	r3, #77	; 0x4d
   d4b16:	87e3      	strh	r3, [r4, #62]	; 0x3e
            m_recieved_bytes = 2;
   d4b18:	e7e2      	b.n	d4ae0 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0x8>
        } else if (m_recieved_bytes >= 2 &&  m_recieved_bytes < 32) {
   d4b1a:	1e8b      	subs	r3, r1, #2
   d4b1c:	2b1d      	cmp	r3, #29
   d4b1e:	d8df      	bhi.n	d4ae0 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0x8>
          uint16_t val16 = (m_last_byte << 8) + m_curr_byte;
   d4b20:	8f20      	ldrh	r0, [r4, #56]	; 0x38
   d4b22:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   d4b24:	eb07 2300 	add.w	r3, r7, r0, lsl #8
          switch (m_recieved_bytes) {
   d4b28:	f1a1 0e0b 	sub.w	lr, r1, #11
            m_recieved_bytes = 1;
        } else if (m_curr_byte == 0x4D && m_recieved_bytes == 1) {
            m_calc_checksum += m_curr_byte;
            m_recieved_bytes = 2;
        } else if (m_recieved_bytes >= 2 &&  m_recieved_bytes < 32) {
          uint16_t val16 = (m_last_byte << 8) + m_curr_byte;
   d4b2c:	b29b      	uxth	r3, r3
          switch (m_recieved_bytes) {
   d4b2e:	f1be 0f14 	cmp.w	lr, #20
   d4b32:	d826      	bhi.n	d4b82 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0xaa>
   d4b34:	e8df f00e 	tbb	[pc, lr]
   d4b38:	250d250b 	.word	0x250d250b
   d4b3c:	2511250f 	.word	0x2511250f
   d4b40:	25152513 	.word	0x25152513
   d4b44:	25192517 	.word	0x25192517
   d4b48:	2525251b 	.word	0x2525251b
   d4b4c:	1d          	.byte	0x1d
   d4b4d:	00          	.byte	0x00
            case 11: // byte number 12
            m_data[pm1_0] = val16;
   d4b4e:	60a3      	str	r3, [r4, #8]
            break;
   d4b50:	e017      	b.n	d4b82 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0xaa>

            case 13:
            m_data[pm2_5] = val16;
   d4b52:	60e3      	str	r3, [r4, #12]
            break;
   d4b54:	e015      	b.n	d4b82 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0xaa>

            case 15:
            m_data[pm10] = val16;
   d4b56:	6123      	str	r3, [r4, #16]
            break;
   d4b58:	e013      	b.n	d4b82 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0xaa>

            case 17:
            m_data[count0_3um] = val16;
   d4b5a:	6163      	str	r3, [r4, #20]
            break;
   d4b5c:	e011      	b.n	d4b82 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0xaa>

            case 19:
            m_data[count0_5um] = val16;
   d4b5e:	61a3      	str	r3, [r4, #24]
            break;
   d4b60:	e00f      	b.n	d4b82 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0xaa>

            case 21:
            m_data[count1um] = val16;
   d4b62:	61e3      	str	r3, [r4, #28]
            break;
   d4b64:	e00d      	b.n	d4b82 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0xaa>

            case 23:
            m_data[count2_5um] = val16;
   d4b66:	6223      	str	r3, [r4, #32]
            break;
   d4b68:	e00b      	b.n	d4b82 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0xaa>

            case 25:
            m_data[count5um] = val16;
   d4b6a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
   d4b6c:	e009      	b.n	d4b82 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0xaa>

            case 27:
            m_data[count10um] = val16;
   d4b6e:	62a3      	str	r3, [r4, #40]	; 0x28
            break;
   d4b70:	e007      	b.n	d4b82 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0xaa>

            case 31:
            m_recv_checksum = val16;
            m_calc_checksum -= m_last_byte;
   d4b72:	1a10      	subs	r0, r2, r0
   d4b74:	b280      	uxth	r0, r0
            case 27:
            m_data[count10um] = val16;
            break;

            case 31:
            m_recv_checksum = val16;
   d4b76:	87a3      	strh	r3, [r4, #60]	; 0x3c
            m_calc_checksum -= m_last_byte;
            return (m_calc_checksum == m_recv_checksum);
   d4b78:	1a1b      	subs	r3, r3, r0
            m_data[count10um] = val16;
            break;

            case 31:
            m_recv_checksum = val16;
            m_calc_checksum -= m_last_byte;
   d4b7a:	87e0      	strh	r0, [r4, #62]	; 0x3e
            return (m_calc_checksum == m_recv_checksum);
   d4b7c:	4258      	negs	r0, r3
   d4b7e:	4158      	adcs	r0, r3
   d4b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            default:
            break;
          }
          m_calc_checksum += m_curr_byte;
   d4b82:	443a      	add	r2, r7
          m_recieved_bytes++;
   d4b84:	3101      	adds	r1, #1
            return (m_calc_checksum == m_recv_checksum);

            default:
            break;
          }
          m_calc_checksum += m_curr_byte;
   d4b86:	87e2      	strh	r2, [r4, #62]	; 0x3e
          m_recieved_bytes++;
   d4b88:	6361      	str	r1, [r4, #52]	; 0x34
   d4b8a:	e7a9      	b.n	d4ae0 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv+0x8>
        }
    }
    return false;
   d4b8c:	2000      	movs	r0, #0
  }
   d4b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b90 <_Z3pm1v>:
// //   Particle.publish("VGAS A2",String(av2,7)); 
// //   Particle.publish("VGAS A3",String(av3,7)); 
  
//  // Serial.println(" ");
// }
unsigned int pm1(){
   d4b90:	b510      	push	{r4, lr}
   d4b92:	f006 fcf5 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
   d4b96:	4604      	mov	r4, r0
  unsigned long now = millis();
  if (pms7003.Read()) {
   d4b98:	480b      	ldr	r0, [pc, #44]	; (d4bc8 <_Z3pm1v+0x38>)
   d4b9a:	f7ff ff9d 	bl	d4ad8 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv>
   d4b9e:	b108      	cbz	r0, d4ba4 <_Z3pm1v+0x14>
    last_pm_reading = now;
   d4ba0:	4b0a      	ldr	r3, [pc, #40]	; (d4bcc <_Z3pm1v+0x3c>)
   d4ba2:	601c      	str	r4, [r3, #0]
  }

  if ((now - last) > 5000) {
   d4ba4:	4a0a      	ldr	r2, [pc, #40]	; (d4bd0 <_Z3pm1v+0x40>)
   d4ba6:	6813      	ldr	r3, [r2, #0]
   d4ba8:	f241 3188 	movw	r1, #5000	; 0x1388
   d4bac:	1ae3      	subs	r3, r4, r3
   d4bae:	428b      	cmp	r3, r1
   d4bb0:	d908      	bls.n	d4bc4 <_Z3pm1v+0x34>
    // Let us be generous. Active state the device
    // reports at least every 2.3 seconds.
    if ((now - last_pm_reading) > 5000) {
   d4bb2:	4b06      	ldr	r3, [pc, #24]	; (d4bcc <_Z3pm1v+0x3c>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	1ae3      	subs	r3, r4, r3
   d4bb8:	428b      	cmp	r3, r1
   d4bba:	d802      	bhi.n	d4bc2 <_Z3pm1v+0x32>
  }

  /**
  * Gets the last read data element. Only use after a Read().
  */
  unsigned int GetData(DataElement element) { return m_data[element]; }
   d4bbc:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <_Z3pm1v+0x38>)
      //Serial.println("No reading for at least 10 seconds!");
    } else {
        unsigned int pm1 = pms7003.GetData(pms7003.pm1_0);
        return pm1;		
   d4bbe:	6898      	ldr	r0, [r3, #8]
   d4bc0:	bd10      	pop	{r4, pc}

    }
    last = now;
   d4bc2:	6014      	str	r4, [r2, #0]
  }
}
   d4bc4:	bd10      	pop	{r4, pc}
   d4bc6:	bf00      	nop
   d4bc8:	2003c440 	.word	0x2003c440
   d4bcc:	2003c49c 	.word	0x2003c49c
   d4bd0:	2003bc1c 	.word	0x2003bc1c

000d4bd4 <_Z5pm2_5v>:
unsigned int pm2_5(){
   d4bd4:	b510      	push	{r4, lr}
   d4bd6:	f006 fcd3 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
   d4bda:	4604      	mov	r4, r0
  unsigned long now_25 = millis();
  if (pms7003.Read()) {
   d4bdc:	480b      	ldr	r0, [pc, #44]	; (d4c0c <_Z5pm2_5v+0x38>)
   d4bde:	f7ff ff7b 	bl	d4ad8 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv>
   d4be2:	b108      	cbz	r0, d4be8 <_Z5pm2_5v+0x14>
    last_pm_reading_25 = now_25;
   d4be4:	4b0a      	ldr	r3, [pc, #40]	; (d4c10 <_Z5pm2_5v+0x3c>)
   d4be6:	601c      	str	r4, [r3, #0]
  }

  if ((now_25 - last_25) > 5000) {
   d4be8:	4b0a      	ldr	r3, [pc, #40]	; (d4c14 <_Z5pm2_5v+0x40>)
   d4bea:	681b      	ldr	r3, [r3, #0]
   d4bec:	f241 3288 	movw	r2, #5000	; 0x1388
   d4bf0:	1ae3      	subs	r3, r4, r3
   d4bf2:	4293      	cmp	r3, r2
   d4bf4:	d909      	bls.n	d4c0a <_Z5pm2_5v+0x36>
    // Let us be generous. Active state the device
    // reports at least every 2.3 seconds.
    if ((now_25 - last_pm_reading_25) > 5000) {
   d4bf6:	4b06      	ldr	r3, [pc, #24]	; (d4c10 <_Z5pm2_5v+0x3c>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	1ae3      	subs	r3, r4, r3
   d4bfc:	4293      	cmp	r3, r2
   d4bfe:	d802      	bhi.n	d4c06 <_Z5pm2_5v+0x32>
   d4c00:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <_Z5pm2_5v+0x38>)
      //Serial.println("No reading for at least 10 seconds!");
    } else {
        unsigned int pm2_5 = pms7003.GetData(pms7003.pm2_5);
        return pm2_5;		
   d4c02:	68d8      	ldr	r0, [r3, #12]
   d4c04:	bd10      	pop	{r4, pc}

    }
    last = now_25;
   d4c06:	4b04      	ldr	r3, [pc, #16]	; (d4c18 <_Z5pm2_5v+0x44>)
   d4c08:	601c      	str	r4, [r3, #0]
  }
}
   d4c0a:	bd10      	pop	{r4, pc}
   d4c0c:	2003c440 	.word	0x2003c440
   d4c10:	2003c3a8 	.word	0x2003c3a8
   d4c14:	2003c4d0 	.word	0x2003c4d0
   d4c18:	2003bc1c 	.word	0x2003bc1c

000d4c1c <_Z4pm10v>:
unsigned int pm10(){
   d4c1c:	b510      	push	{r4, lr}
   d4c1e:	f006 fcaf 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
   d4c22:	4604      	mov	r4, r0
  unsigned long now_10 = millis();
  if (pms7003.Read()) {
   d4c24:	480b      	ldr	r0, [pc, #44]	; (d4c54 <_Z4pm10v+0x38>)
   d4c26:	f7ff ff57 	bl	d4ad8 <_ZN13PMS7003SerialI11USARTSerialE4ReadEv>
   d4c2a:	b108      	cbz	r0, d4c30 <_Z4pm10v+0x14>
    last_pm_reading_10 = now_10;
   d4c2c:	4b0a      	ldr	r3, [pc, #40]	; (d4c58 <_Z4pm10v+0x3c>)
   d4c2e:	601c      	str	r4, [r3, #0]
  }

  if ((now_10 - last_10) > 5000) {
   d4c30:	4b0a      	ldr	r3, [pc, #40]	; (d4c5c <_Z4pm10v+0x40>)
   d4c32:	681b      	ldr	r3, [r3, #0]
   d4c34:	f241 3288 	movw	r2, #5000	; 0x1388
   d4c38:	1ae3      	subs	r3, r4, r3
   d4c3a:	4293      	cmp	r3, r2
   d4c3c:	d909      	bls.n	d4c52 <_Z4pm10v+0x36>
    // Let us be generous. Active state the device
    // reports at least every 2.3 seconds.
    if ((now_10 - last_pm_reading_10) > 5000) {
   d4c3e:	4b06      	ldr	r3, [pc, #24]	; (d4c58 <_Z4pm10v+0x3c>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	1ae3      	subs	r3, r4, r3
   d4c44:	4293      	cmp	r3, r2
   d4c46:	d802      	bhi.n	d4c4e <_Z4pm10v+0x32>
   d4c48:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <_Z4pm10v+0x38>)
      //Serial.println("No reading for at least 10 seconds!");
    } else {
        unsigned int pm10 = pms7003.GetData(pms7003.pm10);
        return pm10;		
   d4c4a:	6918      	ldr	r0, [r3, #16]
   d4c4c:	bd10      	pop	{r4, pc}

    }
    last = now_10;
   d4c4e:	4b04      	ldr	r3, [pc, #16]	; (d4c60 <_Z4pm10v+0x44>)
   d4c50:	601c      	str	r4, [r3, #0]
  }
}
   d4c52:	bd10      	pop	{r4, pc}
   d4c54:	2003c440 	.word	0x2003c440
   d4c58:	2003c4e0 	.word	0x2003c4e0
   d4c5c:	2003c498 	.word	0x2003c498
   d4c60:	2003bc1c 	.word	0x2003bc1c
   d4c64:	00000000 	.word	0x00000000

000d4c68 <loop>:
unsigned long last_25 = 0;
unsigned long last_pm_reading_25 = 0;
unsigned long last_10 = 0;
unsigned long last_pm_reading_10 = 0;

void loop() {
   d4c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c6c:	ed2d 8b04 	vpush	{d8-d9}
  cont_vgas++;
   d4c70:	4cc5      	ldr	r4, [pc, #788]	; (d4f88 <loop+0x320>)
  double adc0, adc1, adc2, adc3;
  double av0, av1, av2, av3;
 
  
  
 adc0 = ads.readADC_SingleEnded(0);
   d4c72:	48c6      	ldr	r0, [pc, #792]	; (d4f8c <loop+0x324>)
unsigned long last_pm_reading_25 = 0;
unsigned long last_10 = 0;
unsigned long last_pm_reading_10 = 0;

void loop() {
  cont_vgas++;
   d4c74:	6823      	ldr	r3, [r4, #0]
 
  
  
 adc0 = ads.readADC_SingleEnded(0);
  av0 = (adc0 * multiplier)/1000;
  sumvgaso3+=av0;
   d4c76:	4ec6      	ldr	r6, [pc, #792]	; (d4f90 <loop+0x328>)
  promvgaso3 = sumvgaso3/cont_vgas;
   d4c78:	f8df b348 	ldr.w	fp, [pc, #840]	; d4fc4 <loop+0x35c>
  adc1 = ads.readADC_SingleEnded(1);
  av1= (adc1 * multiplier)/1000;
  sumvgasco+=av1;
   d4c7c:	4dc5      	ldr	r5, [pc, #788]	; (d4f94 <loop+0x32c>)
  promvgasco= sumvgasco/cont_vgas;
  adc2 = ads.readADC_SingleEnded(2);
  av2= (adc2 * multiplier)/1000;
  sumvgasno2+=av2;
   d4c7e:	4fc6      	ldr	r7, [pc, #792]	; (d4f98 <loop+0x330>)
  promvgasno2= sumvgasno2/cont_vgas;
  adc3 = ads.readADC_SingleEnded(3);
  av3= (adc3 * multiplier)/1000;
  sumvgasso2+= av3;
   d4c80:	f8df a344 	ldr.w	sl, [pc, #836]	; d4fc8 <loop+0x360>
unsigned long last_25 = 0;
unsigned long last_pm_reading_25 = 0;
unsigned long last_10 = 0;
unsigned long last_pm_reading_10 = 0;

void loop() {
   d4c84:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
  cont_vgas++;
   d4c88:	3301      	adds	r3, #1
  double adc0, adc1, adc2, adc3;
  double av0, av1, av2, av3;
 
  
  
 adc0 = ads.readADC_SingleEnded(0);
   d4c8a:	2100      	movs	r1, #0
unsigned long last_pm_reading_25 = 0;
unsigned long last_10 = 0;
unsigned long last_pm_reading_10 = 0;

void loop() {
  cont_vgas++;
   d4c8c:	6023      	str	r3, [r4, #0]
  double adc0, adc1, adc2, adc3;
  double av0, av1, av2, av3;
 
  
  
 adc0 = ads.readADC_SingleEnded(0);
   d4c8e:	f001 fbed 	bl	d646c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
  av0 = (adc0 * multiplier)/1000;
  sumvgaso3+=av0;
   d4c92:	f00b fd97 	bl	e07c4 <__aeabi_ui2d>
   d4c96:	2200      	movs	r2, #0
   d4c98:	4bc0      	ldr	r3, [pc, #768]	; (d4f9c <loop+0x334>)
   d4c9a:	f00b fe09 	bl	e08b0 <__aeabi_dmul>
   d4c9e:	2200      	movs	r2, #0
   d4ca0:	4bbf      	ldr	r3, [pc, #764]	; (d4fa0 <loop+0x338>)
   d4ca2:	f00b ff2f 	bl	e0b04 <__aeabi_ddiv>
   d4ca6:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4caa:	f00b fc4f 	bl	e054c <__adddf3>
   d4cae:	4680      	mov	r8, r0
   d4cb0:	4689      	mov	r9, r1
   d4cb2:	e9c6 8900 	strd	r8, r9, [r6]
  promvgaso3 = sumvgaso3/cont_vgas;
   d4cb6:	6820      	ldr	r0, [r4, #0]
   d4cb8:	f00b fd94 	bl	e07e4 <__aeabi_i2d>
   d4cbc:	4602      	mov	r2, r0
   d4cbe:	460b      	mov	r3, r1
   d4cc0:	4640      	mov	r0, r8
   d4cc2:	4649      	mov	r1, r9
   d4cc4:	f00b ff1e 	bl	e0b04 <__aeabi_ddiv>
   d4cc8:	e9cb 0100 	strd	r0, r1, [fp]
  adc1 = ads.readADC_SingleEnded(1);
   d4ccc:	2101      	movs	r1, #1
   d4cce:	48af      	ldr	r0, [pc, #700]	; (d4f8c <loop+0x324>)
   d4cd0:	f001 fbcc 	bl	d646c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
  av1= (adc1 * multiplier)/1000;
  sumvgasco+=av1;
   d4cd4:	f00b fd76 	bl	e07c4 <__aeabi_ui2d>
   d4cd8:	2200      	movs	r2, #0
   d4cda:	4bb0      	ldr	r3, [pc, #704]	; (d4f9c <loop+0x334>)
   d4cdc:	f00b fde8 	bl	e08b0 <__aeabi_dmul>
   d4ce0:	2200      	movs	r2, #0
   d4ce2:	4baf      	ldr	r3, [pc, #700]	; (d4fa0 <loop+0x338>)
   d4ce4:	f00b ff0e 	bl	e0b04 <__aeabi_ddiv>
   d4ce8:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4cec:	f00b fc2e 	bl	e054c <__adddf3>
   d4cf0:	4680      	mov	r8, r0
   d4cf2:	4689      	mov	r9, r1
   d4cf4:	e9c5 8900 	strd	r8, r9, [r5]
  promvgasco= sumvgasco/cont_vgas;
   d4cf8:	6820      	ldr	r0, [r4, #0]
   d4cfa:	f00b fd73 	bl	e07e4 <__aeabi_i2d>
   d4cfe:	4602      	mov	r2, r0
   d4d00:	460b      	mov	r3, r1
   d4d02:	4640      	mov	r0, r8
   d4d04:	4649      	mov	r1, r9
   d4d06:	f00b fefd 	bl	e0b04 <__aeabi_ddiv>
   d4d0a:	4ba6      	ldr	r3, [pc, #664]	; (d4fa4 <loop+0x33c>)
   d4d0c:	e9c3 0100 	strd	r0, r1, [r3]
  adc2 = ads.readADC_SingleEnded(2);
   d4d10:	2102      	movs	r1, #2
   d4d12:	489e      	ldr	r0, [pc, #632]	; (d4f8c <loop+0x324>)
   d4d14:	f001 fbaa 	bl	d646c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
  av2= (adc2 * multiplier)/1000;
  sumvgasno2+=av2;
   d4d18:	f00b fd54 	bl	e07c4 <__aeabi_ui2d>
   d4d1c:	2200      	movs	r2, #0
   d4d1e:	4b9f      	ldr	r3, [pc, #636]	; (d4f9c <loop+0x334>)
   d4d20:	f00b fdc6 	bl	e08b0 <__aeabi_dmul>
   d4d24:	2200      	movs	r2, #0
   d4d26:	4b9e      	ldr	r3, [pc, #632]	; (d4fa0 <loop+0x338>)
   d4d28:	f00b feec 	bl	e0b04 <__aeabi_ddiv>
   d4d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
   d4d30:	f00b fc0c 	bl	e054c <__adddf3>
   d4d34:	4680      	mov	r8, r0
   d4d36:	4689      	mov	r9, r1
   d4d38:	e9c7 8900 	strd	r8, r9, [r7]
  promvgasno2= sumvgasno2/cont_vgas;
   d4d3c:	6820      	ldr	r0, [r4, #0]
   d4d3e:	f00b fd51 	bl	e07e4 <__aeabi_i2d>
   d4d42:	4602      	mov	r2, r0
   d4d44:	460b      	mov	r3, r1
   d4d46:	4640      	mov	r0, r8
   d4d48:	4649      	mov	r1, r9
   d4d4a:	f00b fedb 	bl	e0b04 <__aeabi_ddiv>
   d4d4e:	4b96      	ldr	r3, [pc, #600]	; (d4fa8 <loop+0x340>)
   d4d50:	e9c3 0100 	strd	r0, r1, [r3]
  adc3 = ads.readADC_SingleEnded(3);
   d4d54:	2103      	movs	r1, #3
   d4d56:	488d      	ldr	r0, [pc, #564]	; (d4f8c <loop+0x324>)
   d4d58:	f001 fb88 	bl	d646c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
  av3= (adc3 * multiplier)/1000;
  sumvgasso2+= av3;
   d4d5c:	f00b fd32 	bl	e07c4 <__aeabi_ui2d>
   d4d60:	2200      	movs	r2, #0
   d4d62:	4b8e      	ldr	r3, [pc, #568]	; (d4f9c <loop+0x334>)
   d4d64:	f00b fda4 	bl	e08b0 <__aeabi_dmul>
   d4d68:	2200      	movs	r2, #0
   d4d6a:	4b8d      	ldr	r3, [pc, #564]	; (d4fa0 <loop+0x338>)
   d4d6c:	f00b feca 	bl	e0b04 <__aeabi_ddiv>
   d4d70:	e9da 2300 	ldrd	r2, r3, [sl]
   d4d74:	f00b fbea 	bl	e054c <__adddf3>
   d4d78:	4680      	mov	r8, r0
   d4d7a:	4689      	mov	r9, r1
   d4d7c:	e9ca 8900 	strd	r8, r9, [sl]
  promvgasso2= sumvgasso2/cont_vgas;
   d4d80:	6820      	ldr	r0, [r4, #0]
   d4d82:	f00b fd2f 	bl	e07e4 <__aeabi_i2d>
   d4d86:	460b      	mov	r3, r1
   d4d88:	4602      	mov	r2, r0
   d4d8a:	4649      	mov	r1, r9
   d4d8c:	4640      	mov	r0, r8
   d4d8e:	f00b feb9 	bl	e0b04 <__aeabi_ddiv>
   d4d92:	4b86      	ldr	r3, [pc, #536]	; (d4fac <loop+0x344>)
   d4d94:	e9c3 0100 	strd	r0, r1, [r3]

  if (readyToGetResetAndSendSensors)//si esta listo para reset y mandar datos
   d4d98:	4b85      	ldr	r3, [pc, #532]	; (d4fb0 <loop+0x348>)
   d4d9a:	781b      	ldrb	r3, [r3, #0]
   d4d9c:	2b00      	cmp	r3, #0
   d4d9e:	f000 833a 	beq.w	d5416 <loop+0x7ae>
  {
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
    char msg[512]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
   d4da2:	f8df 8228 	ldr.w	r8, [pc, #552]	; d4fcc <loop+0x364>
  sumvgasso2+= av3;
  promvgasso2= sumvgasso2/cont_vgas;

  if (readyToGetResetAndSendSensors)//si esta listo para reset y mandar datos
  {
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
   d4da6:	4883      	ldr	r0, [pc, #524]	; (d4fb4 <loop+0x34c>)
   d4da8:	f005 fd96 	bl	da8d8 <_ZN14WeatherSensors21getAndResetAllSensorsEv>
    char msg[512]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
   d4dac:	f8b8 0006 	ldrh.w	r0, [r8, #6]

  if (readyToGetResetAndSendSensors)//si esta listo para reset y mandar datos
  {
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
    char msg[512]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
   d4db0:	edd8 9a00 	vldr	s19, [r8]
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
   d4db4:	f00b fd16 	bl	e07e4 <__aeabi_i2d>
   d4db8:	a36b      	add	r3, pc, #428	; (adr r3, d4f68 <loop+0x300>)
   d4dba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4dbe:	f00b fd77 	bl	e08b0 <__aeabi_dmul>
   d4dc2:	f00c f86d 	bl	e0ea0 <__aeabi_d2f>
   d4dc6:	901e      	str	r0, [sp, #120]	; 0x78
    float Precip = sensorReadings.rainmmx1000 / 1000.0; //lectura de precipitacion
   d4dc8:	f8b8 000c 	ldrh.w	r0, [r8, #12]
   d4dcc:	f00b fd0a 	bl	e07e4 <__aeabi_i2d>
   d4dd0:	2200      	movs	r2, #0
   d4dd2:	4b73      	ldr	r3, [pc, #460]	; (d4fa0 <loop+0x338>)
   d4dd4:	f00b fe96 	bl	e0b04 <__aeabi_ddiv>
   d4dd8:	f00c f862 	bl	e0ea0 <__aeabi_d2f>
    float DV= sensorReadings.windDegrees; //lectura de direccion del viento
   d4ddc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  {
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
    char msg[512]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
    float Precip = sensorReadings.rainmmx1000 / 1000.0; //lectura de precipitacion
   d4de0:	901f      	str	r0, [sp, #124]	; 0x7c
    float DV= sensorReadings.windDegrees; //lectura de direccion del viento
    float Temp = (sensorReadings.airTempKx10 / 10.0)-273.15; //lectura de temperatura
   d4de2:	f8b8 000a 	ldrh.w	r0, [r8, #10]
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
    char msg[512]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
    float Precip = sensorReadings.rainmmx1000 / 1000.0; //lectura de precipitacion
    float DV= sensorReadings.windDegrees; //lectura de direccion del viento
   d4de6:	ee08 3a10 	vmov	s16, r3
    float Temp = (sensorReadings.airTempKx10 / 10.0)-273.15; //lectura de temperatura
   d4dea:	f00b fcfb 	bl	e07e4 <__aeabi_i2d>
   d4dee:	2200      	movs	r2, #0
   d4df0:	4b71      	ldr	r3, [pc, #452]	; (d4fb8 <loop+0x350>)
   d4df2:	f00b fe87 	bl	e0b04 <__aeabi_ddiv>
   d4df6:	a35e      	add	r3, pc, #376	; (adr r3, d4f70 <loop+0x308>)
   d4df8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4dfc:	f00b fba4 	bl	e0548 <__aeabi_dsub>
   d4e00:	f00c f84e 	bl	e0ea0 <__aeabi_d2f>
    uint16_t mVB=sensorReadings.millivolts;//lectura de voltaje
   d4e04:	f8b8 3012 	ldrh.w	r3, [r8, #18]
    char msg[512]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
    float Precip = sensorReadings.rainmmx1000 / 1000.0; //lectura de precipitacion
    float DV= sensorReadings.windDegrees; //lectura de direccion del viento
    float Temp = (sensorReadings.airTempKx10 / 10.0)-273.15; //lectura de temperatura
   d4e08:	9020      	str	r0, [sp, #128]	; 0x80
    uint16_t mVB=sensorReadings.millivolts;//lectura de voltaje
   d4e0a:	ee08 3a90 	vmov	s17, r3
    uint16_t Hum=sensorReadings.humid;//lectura de humedad
   d4e0e:	f898 3008 	ldrb.w	r3, [r8, #8]
   d4e12:	ee09 3a10 	vmov	s18, r3
    unsigned int PM1_0 = pm1();
   d4e16:	f7ff febb 	bl	d4b90 <_Z3pm1v>
   d4e1a:	9021      	str	r0, [sp, #132]	; 0x84
    unsigned int PM2_5 =pm2_5();
   d4e1c:	f7ff feda 	bl	d4bd4 <_Z5pm2_5v>
   d4e20:	9022      	str	r0, [sp, #136]	; 0x88
    unsigned int PM10 = pm10();
   d4e22:	f7ff fefb 	bl	d4c1c <_Z4pm10v>
    //uint16_t ozo=sensorReadings.ozone;
     
adc0 = ads.readADC_SingleEnded(0);
   d4e26:	2100      	movs	r1, #0
    float Temp = (sensorReadings.airTempKx10 / 10.0)-273.15; //lectura de temperatura
    uint16_t mVB=sensorReadings.millivolts;//lectura de voltaje
    uint16_t Hum=sensorReadings.humid;//lectura de humedad
    unsigned int PM1_0 = pm1();
    unsigned int PM2_5 =pm2_5();
    unsigned int PM10 = pm10();
   d4e28:	9023      	str	r0, [sp, #140]	; 0x8c
    //uint16_t ozo=sensorReadings.ozone;
     
adc0 = ads.readADC_SingleEnded(0);
   d4e2a:	4858      	ldr	r0, [pc, #352]	; (d4f8c <loop+0x324>)
   d4e2c:	f001 fb1e 	bl	d646c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
  av0 = (adc0 * multiplier)/1000;
  sumvgaso3+=av0;
   d4e30:	f00b fcc8 	bl	e07c4 <__aeabi_ui2d>
   d4e34:	2200      	movs	r2, #0
   d4e36:	4b59      	ldr	r3, [pc, #356]	; (d4f9c <loop+0x334>)
   d4e38:	f00b fd3a 	bl	e08b0 <__aeabi_dmul>
   d4e3c:	2200      	movs	r2, #0
   d4e3e:	4b58      	ldr	r3, [pc, #352]	; (d4fa0 <loop+0x338>)
   d4e40:	f00b fe60 	bl	e0b04 <__aeabi_ddiv>
   d4e44:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4e48:	f00b fb80 	bl	e054c <__adddf3>
   d4e4c:	4680      	mov	r8, r0
   d4e4e:	4689      	mov	r9, r1
   d4e50:	e9c6 8900 	strd	r8, r9, [r6]
  promvgaso3 = sumvgaso3/cont_vgas;
   d4e54:	6820      	ldr	r0, [r4, #0]
   d4e56:	f00b fcc5 	bl	e07e4 <__aeabi_i2d>
   d4e5a:	4602      	mov	r2, r0
   d4e5c:	460b      	mov	r3, r1
   d4e5e:	4640      	mov	r0, r8
   d4e60:	4649      	mov	r1, r9
   d4e62:	f00b fe4f 	bl	e0b04 <__aeabi_ddiv>
   d4e66:	e9cb 0100 	strd	r0, r1, [fp]
  adc1 = ads.readADC_SingleEnded(1);
   d4e6a:	2101      	movs	r1, #1
   d4e6c:	4847      	ldr	r0, [pc, #284]	; (d4f8c <loop+0x324>)
   d4e6e:	f001 fafd 	bl	d646c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
  av1= (adc1 * multiplier)/1000;
  sumvgasco+=av1;
   d4e72:	f00b fca7 	bl	e07c4 <__aeabi_ui2d>
   d4e76:	2200      	movs	r2, #0
   d4e78:	4b48      	ldr	r3, [pc, #288]	; (d4f9c <loop+0x334>)
   d4e7a:	f00b fd19 	bl	e08b0 <__aeabi_dmul>
   d4e7e:	2200      	movs	r2, #0
   d4e80:	4b47      	ldr	r3, [pc, #284]	; (d4fa0 <loop+0x338>)
   d4e82:	f00b fe3f 	bl	e0b04 <__aeabi_ddiv>
   d4e86:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4e8a:	f00b fb5f 	bl	e054c <__adddf3>
   d4e8e:	4680      	mov	r8, r0
   d4e90:	4689      	mov	r9, r1
   d4e92:	e9c5 8900 	strd	r8, r9, [r5]
  promvgasco= sumvgasco/cont_vgas;
   d4e96:	6820      	ldr	r0, [r4, #0]
   d4e98:	f00b fca4 	bl	e07e4 <__aeabi_i2d>
   d4e9c:	4602      	mov	r2, r0
   d4e9e:	460b      	mov	r3, r1
   d4ea0:	4640      	mov	r0, r8
   d4ea2:	4649      	mov	r1, r9
   d4ea4:	f00b fe2e 	bl	e0b04 <__aeabi_ddiv>
   d4ea8:	4b3e      	ldr	r3, [pc, #248]	; (d4fa4 <loop+0x33c>)
   d4eaa:	e9c3 0100 	strd	r0, r1, [r3]
  adc2 = ads.readADC_SingleEnded(2);
   d4eae:	2102      	movs	r1, #2
   d4eb0:	4836      	ldr	r0, [pc, #216]	; (d4f8c <loop+0x324>)
   d4eb2:	f001 fadb 	bl	d646c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
  av2= (adc2 * multiplier)/1000;
  sumvgasno2+=av2;
   d4eb6:	f00b fc85 	bl	e07c4 <__aeabi_ui2d>
   d4eba:	2200      	movs	r2, #0
   d4ebc:	4b37      	ldr	r3, [pc, #220]	; (d4f9c <loop+0x334>)
   d4ebe:	f00b fcf7 	bl	e08b0 <__aeabi_dmul>
   d4ec2:	2200      	movs	r2, #0
   d4ec4:	4b36      	ldr	r3, [pc, #216]	; (d4fa0 <loop+0x338>)
   d4ec6:	f00b fe1d 	bl	e0b04 <__aeabi_ddiv>
   d4eca:	e9d7 2300 	ldrd	r2, r3, [r7]
   d4ece:	f00b fb3d 	bl	e054c <__adddf3>
   d4ed2:	4680      	mov	r8, r0
   d4ed4:	4689      	mov	r9, r1
   d4ed6:	e9c7 8900 	strd	r8, r9, [r7]
  promvgasno2= sumvgasno2/cont_vgas;
   d4eda:	6820      	ldr	r0, [r4, #0]
   d4edc:	f00b fc82 	bl	e07e4 <__aeabi_i2d>
   d4ee0:	4602      	mov	r2, r0
   d4ee2:	460b      	mov	r3, r1
   d4ee4:	4640      	mov	r0, r8
   d4ee6:	4649      	mov	r1, r9
   d4ee8:	f00b fe0c 	bl	e0b04 <__aeabi_ddiv>
   d4eec:	4b2e      	ldr	r3, [pc, #184]	; (d4fa8 <loop+0x340>)
   d4eee:	f8df 90e0 	ldr.w	r9, [pc, #224]	; d4fd0 <loop+0x368>
   d4ef2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; d4fd4 <loop+0x36c>
   d4ef6:	e9c3 0100 	strd	r0, r1, [r3]
  adc3 = ads.readADC_SingleEnded(3);
   d4efa:	2103      	movs	r1, #3
   d4efc:	4823      	ldr	r0, [pc, #140]	; (d4f8c <loop+0x324>)
   d4efe:	f001 fab5 	bl	d646c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
  av3= (adc3 * multiplier)/1000;
  sumvgasso2+= av3;
   d4f02:	f00b fc5f 	bl	e07c4 <__aeabi_ui2d>
   d4f06:	2200      	movs	r2, #0
   d4f08:	4b24      	ldr	r3, [pc, #144]	; (d4f9c <loop+0x334>)
   d4f0a:	f00b fcd1 	bl	e08b0 <__aeabi_dmul>
   d4f0e:	2200      	movs	r2, #0
   d4f10:	4b23      	ldr	r3, [pc, #140]	; (d4fa0 <loop+0x338>)
   d4f12:	f00b fdf7 	bl	e0b04 <__aeabi_ddiv>
   d4f16:	e9da 2300 	ldrd	r2, r3, [sl]
   d4f1a:	f00b fb17 	bl	e054c <__adddf3>
   d4f1e:	4606      	mov	r6, r0
   d4f20:	460f      	mov	r7, r1
   d4f22:	e9ca 6700 	strd	r6, r7, [sl]
  promvgasso2= sumvgasso2/cont_vgas;
   d4f26:	6820      	ldr	r0, [r4, #0]
   d4f28:	f00b fc5c 	bl	e07e4 <__aeabi_i2d>
   d4f2c:	4602      	mov	r2, r0
   d4f2e:	460b      	mov	r3, r1
   d4f30:	4630      	mov	r0, r6
   d4f32:	4639      	mov	r1, r7
   d4f34:	f00b fde6 	bl	e0b04 <__aeabi_ddiv>
   d4f38:	4b1c      	ldr	r3, [pc, #112]	; (d4fac <loop+0x344>)
double concentration_o3 =  -59.714 * (promvgaso3 - 	1.590161);
cont++;
sum_1 += concentration_o3;
   d4f3a:	4f20      	ldr	r7, [pc, #128]	; (d4fbc <loop+0x354>)
  sumvgasno2+=av2;
  promvgasno2= sumvgasno2/cont_vgas;
  adc3 = ads.readADC_SingleEnded(3);
  av3= (adc3 * multiplier)/1000;
  sumvgasso2+= av3;
  promvgasso2= sumvgasso2/cont_vgas;
   d4f3c:	e9c3 0100 	strd	r0, r1, [r3]
double concentration_o3 =  -59.714 * (promvgaso3 - 	1.590161);
   d4f40:	a30d      	add	r3, pc, #52	; (adr r3, d4f78 <loop+0x310>)
   d4f42:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f46:	e9db 0100 	ldrd	r0, r1, [fp]
   d4f4a:	f00b fafd 	bl	e0548 <__aeabi_dsub>
   d4f4e:	a30c      	add	r3, pc, #48	; (adr r3, d4f80 <loop+0x318>)
   d4f50:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f54:	f00b fcac 	bl	e08b0 <__aeabi_dmul>
cont++;
   d4f58:	4b19      	ldr	r3, [pc, #100]	; (d4fc0 <loop+0x358>)
   d4f5a:	681e      	ldr	r6, [r3, #0]
   d4f5c:	3601      	adds	r6, #1
   d4f5e:	601e      	str	r6, [r3, #0]
   d4f60:	e03a      	b.n	d4fd8 <loop+0x370>
   d4f62:	bf00      	nop
   d4f64:	f3af 8000 	nop.w
   d4f68:	d2f1a9fc 	.word	0xd2f1a9fc
   d4f6c:	3f50624d 	.word	0x3f50624d
   d4f70:	66666666 	.word	0x66666666
   d4f74:	40711266 	.word	0x40711266
   d4f78:	a925fe97 	.word	0xa925fe97
   d4f7c:	3ff9714c 	.word	0x3ff9714c
   d4f80:	5a1cac08 	.word	0x5a1cac08
   d4f84:	c04ddb64 	.word	0xc04ddb64
   d4f88:	2003bc34 	.word	0x2003bc34
   d4f8c:	2003bc20 	.word	0x2003bc20
   d4f90:	2003bc28 	.word	0x2003bc28
   d4f94:	2003c4b8 	.word	0x2003c4b8
   d4f98:	2003c4d8 	.word	0x2003c4d8
   d4f9c:	3fc80000 	.word	0x3fc80000
   d4fa0:	408f4000 	.word	0x408f4000
   d4fa4:	2003bc60 	.word	0x2003bc60
   d4fa8:	2003c3d0 	.word	0x2003c3d0
   d4fac:	2003c1e0 	.word	0x2003c1e0
   d4fb0:	2003c500 	.word	0x2003c500
   d4fb4:	2003c520 	.word	0x2003c520
   d4fb8:	40240000 	.word	0x40240000
   d4fbc:	2003c370 	.word	0x2003c370
   d4fc0:	2003c1dc 	.word	0x2003c1dc
   d4fc4:	2003c518 	.word	0x2003c518
   d4fc8:	2003c418 	.word	0x2003c418
   d4fcc:	2003c3e0 	.word	0x2003c3e0
   d4fd0:	2003c504 	.word	0x2003c504
   d4fd4:	2003c380 	.word	0x2003c380
sum_1 += concentration_o3;
   d4fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
   d4fdc:	f00b fab6 	bl	e054c <__adddf3>
   d4fe0:	4604      	mov	r4, r0
   d4fe2:	460d      	mov	r5, r1
   d4fe4:	e9c7 4500 	strd	r4, r5, [r7]
prom_conc_o3= sum_1/cont;
   d4fe8:	4630      	mov	r0, r6
   d4fea:	f00b fbfb 	bl	e07e4 <__aeabi_i2d>
   d4fee:	4602      	mov	r2, r0
   d4ff0:	460b      	mov	r3, r1
   d4ff2:	4606      	mov	r6, r0
   d4ff4:	460f      	mov	r7, r1
   d4ff6:	4620      	mov	r0, r4
   d4ff8:	4629      	mov	r1, r5
   d4ffa:	f00b fd83 	bl	e0b04 <__aeabi_ddiv>
   d4ffe:	4b66      	ldr	r3, [pc, #408]	; (d5198 <loop+0x530>)
   d5000:	4604      	mov	r4, r0
   d5002:	460d      	mov	r5, r1
   d5004:	e9c3 4500 	strd	r4, r5, [r3]
if (prom_conc_o3 >= 0){
   d5008:	2200      	movs	r2, #0
   d500a:	2300      	movs	r3, #0
   d500c:	f00b fed6 	bl	e0dbc <__aeabi_dcmpge>
    sensors.getAndResetAllSensors();//reseteamos los sensores y los mandamos llamar
    char msg[512]; //cadena de 256 bytes
    uint32_t UT=sensorReadings.unixTime;//lectura del unixtime
    float VV= sensorReadings.wind_metersph * 0.001;//lectura de la velocidad del viento
    float Precip = sensorReadings.rainmmx1000 / 1000.0; //lectura de precipitacion
    float DV= sensorReadings.windDegrees; //lectura de direccion del viento
   d5010:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  promvgasso2= sumvgasso2/cont_vgas;
double concentration_o3 =  -59.714 * (promvgaso3 - 	1.590161);
cont++;
sum_1 += concentration_o3;
prom_conc_o3= sum_1/cont;
if (prom_conc_o3 >= 0){
   d5014:	b140      	cbz	r0, d5028 <loop+0x3c0>
prom_o3P = prom_conc_o3;
   d5016:	4620      	mov	r0, r4
   d5018:	4629      	mov	r1, r5
   d501a:	f00b ff41 	bl	e0ea0 <__aeabi_d2f>
   d501e:	f8c9 0000 	str.w	r0, [r9]
prom_o3_past= prom_conc_o3;
   d5022:	f8c8 0000 	str.w	r0, [r8]
   d5026:	e003      	b.n	d5030 <loop+0x3c8>
}else
{
  prom_o3P= prom_o3_past;
   d5028:	f8d8 3000 	ldr.w	r3, [r8]
   d502c:	f8c9 3000 	str.w	r3, [r9]
}
double concentration_co = 4149.377593 * (promvgasco - 1.631584333333333);
   d5030:	f8df 8190 	ldr.w	r8, [pc, #400]	; d51c4 <loop+0x55c>
sum_2 += concentration_co;
   d5034:	4c59      	ldr	r4, [pc, #356]	; (d519c <loop+0x534>)
   d5036:	f8df a188 	ldr.w	sl, [pc, #392]	; d51c0 <loop+0x558>
   d503a:	f8df b18c 	ldr.w	fp, [pc, #396]	; d51c8 <loop+0x560>
   d503e:	a34a      	add	r3, pc, #296	; (adr r3, d5168 <loop+0x500>)
   d5040:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5044:	e9d8 0100 	ldrd	r0, r1, [r8]
   d5048:	f00b fa7e 	bl	e0548 <__aeabi_dsub>
   d504c:	a348      	add	r3, pc, #288	; (adr r3, d5170 <loop+0x508>)
   d504e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5052:	f00b fc2d 	bl	e08b0 <__aeabi_dmul>
   d5056:	e9d4 2300 	ldrd	r2, r3, [r4]
   d505a:	f00b fa77 	bl	e054c <__adddf3>
prom_conc_co= sum_2/cont;
   d505e:	4632      	mov	r2, r6
}else
{
  prom_o3P= prom_o3_past;
}
double concentration_co = 4149.377593 * (promvgasco - 1.631584333333333);
sum_2 += concentration_co;
   d5060:	e9c4 0100 	strd	r0, r1, [r4]
prom_conc_co= sum_2/cont;
   d5064:	463b      	mov	r3, r7
   d5066:	f00b fd4d 	bl	e0b04 <__aeabi_ddiv>
   d506a:	4b4d      	ldr	r3, [pc, #308]	; (d51a0 <loop+0x538>)
   d506c:	4604      	mov	r4, r0
   d506e:	460d      	mov	r5, r1
   d5070:	e9c3 4500 	strd	r4, r5, [r3]
if (prom_conc_co >= 0){
   d5074:	2200      	movs	r2, #0
   d5076:	2300      	movs	r3, #0
   d5078:	f00b fea0 	bl	e0dbc <__aeabi_dcmpge>
   d507c:	b140      	cbz	r0, d5090 <loop+0x428>
prom_coP = prom_conc_co;
   d507e:	4620      	mov	r0, r4
   d5080:	4629      	mov	r1, r5
   d5082:	f00b ff0d 	bl	e0ea0 <__aeabi_d2f>
   d5086:	f8ca 0000 	str.w	r0, [sl]
prom_co_past= prom_conc_co;
   d508a:	f8cb 0000 	str.w	r0, [fp]
   d508e:	e003      	b.n	d5098 <loop+0x430>
}else
{
  prom_coP= prom_co_past;
   d5090:	f8db 3000 	ldr.w	r3, [fp]
   d5094:	f8ca 3000 	str.w	r3, [sl]
}
double concentration_no2 =  -95.474417152551887958861983137308 * (promvgasno2 - 1.624044);
sum_3+= concentration_no2;
   d5098:	4942      	ldr	r1, [pc, #264]	; (d51a4 <loop+0x53c>)
   d509a:	4c43      	ldr	r4, [pc, #268]	; (d51a8 <loop+0x540>)
   d509c:	f8df a11c 	ldr.w	sl, [pc, #284]	; d51bc <loop+0x554>
   d50a0:	f8df b128 	ldr.w	fp, [pc, #296]	; d51cc <loop+0x564>
   d50a4:	a334      	add	r3, pc, #208	; (adr r3, d5178 <loop+0x510>)
   d50a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d50aa:	e9d1 0100 	ldrd	r0, r1, [r1]
   d50ae:	f00b fa4b 	bl	e0548 <__aeabi_dsub>
   d50b2:	a333      	add	r3, pc, #204	; (adr r3, d5180 <loop+0x518>)
   d50b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d50b8:	f00b fbfa 	bl	e08b0 <__aeabi_dmul>
   d50bc:	e9d4 2300 	ldrd	r2, r3, [r4]
   d50c0:	f00b fa44 	bl	e054c <__adddf3>
prom_conc_no2= sum_3/cont;
   d50c4:	4632      	mov	r2, r6
}else
{
  prom_coP= prom_co_past;
}
double concentration_no2 =  -95.474417152551887958861983137308 * (promvgasno2 - 1.624044);
sum_3+= concentration_no2;
   d50c6:	e9c4 0100 	strd	r0, r1, [r4]
prom_conc_no2= sum_3/cont;
   d50ca:	463b      	mov	r3, r7
   d50cc:	f00b fd1a 	bl	e0b04 <__aeabi_ddiv>
   d50d0:	4b36      	ldr	r3, [pc, #216]	; (d51ac <loop+0x544>)
   d50d2:	4604      	mov	r4, r0
   d50d4:	460d      	mov	r5, r1
   d50d6:	e9c3 4500 	strd	r4, r5, [r3]
if (prom_conc_no2 >= 0){
   d50da:	2200      	movs	r2, #0
   d50dc:	2300      	movs	r3, #0
   d50de:	f00b fe6d 	bl	e0dbc <__aeabi_dcmpge>
   d50e2:	b140      	cbz	r0, d50f6 <loop+0x48e>
prom_no2P = prom_conc_no2;
   d50e4:	4620      	mov	r0, r4
   d50e6:	4629      	mov	r1, r5
   d50e8:	f00b feda 	bl	e0ea0 <__aeabi_d2f>
   d50ec:	f8ca 0000 	str.w	r0, [sl]
prom_no2_past= prom_conc_no2;
   d50f0:	f8cb 0000 	str.w	r0, [fp]
   d50f4:	e003      	b.n	d50fe <loop+0x496>
}else
{
  prom_no2P= prom_no2_past;
   d50f6:	f8db 3000 	ldr.w	r3, [fp]
   d50fa:	f8ca 3000 	str.w	r3, [sl]
}
double concentration_so2 =  346.26038781163434903047091412742 * (promvgasso2 - 1.6933555555555);
   d50fe:	4b2c      	ldr	r3, [pc, #176]	; (d51b0 <loop+0x548>)
sum_4+= concentration_so2;
   d5100:	f8df a0cc 	ldr.w	sl, [pc, #204]	; d51d0 <loop+0x568>
   d5104:	f8df b0cc 	ldr.w	fp, [pc, #204]	; d51d4 <loop+0x56c>
prom_no2_past= prom_conc_no2;
}else
{
  prom_no2P= prom_no2_past;
}
double concentration_so2 =  346.26038781163434903047091412742 * (promvgasso2 - 1.6933555555555);
   d5108:	e9d3 4500 	ldrd	r4, r5, [r3]
sum_4+= concentration_so2;
   d510c:	a31e      	add	r3, pc, #120	; (adr r3, d5188 <loop+0x520>)
   d510e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5112:	4620      	mov	r0, r4
   d5114:	4629      	mov	r1, r5
   d5116:	f00b fa17 	bl	e0548 <__aeabi_dsub>
   d511a:	a31d      	add	r3, pc, #116	; (adr r3, d5190 <loop+0x528>)
   d511c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5120:	f00b fbc6 	bl	e08b0 <__aeabi_dmul>
   d5124:	e9da 2300 	ldrd	r2, r3, [sl]
   d5128:	f00b fa10 	bl	e054c <__adddf3>
prom_conc_so2= sum_4/cont;
   d512c:	4632      	mov	r2, r6
   d512e:	463b      	mov	r3, r7
}else
{
  prom_no2P= prom_no2_past;
}
double concentration_so2 =  346.26038781163434903047091412742 * (promvgasso2 - 1.6933555555555);
sum_4+= concentration_so2;
   d5130:	e9ca 0100 	strd	r0, r1, [sl]
prom_conc_so2= sum_4/cont;
   d5134:	f00b fce6 	bl	e0b04 <__aeabi_ddiv>
   d5138:	4b1e      	ldr	r3, [pc, #120]	; (d51b4 <loop+0x54c>)
   d513a:	f8df a07c 	ldr.w	sl, [pc, #124]	; d51b8 <loop+0x550>
   d513e:	4606      	mov	r6, r0
   d5140:	460f      	mov	r7, r1
   d5142:	e9c3 6700 	strd	r6, r7, [r3]
if (prom_conc_so2 >= 0){
   d5146:	2200      	movs	r2, #0
   d5148:	2300      	movs	r3, #0
   d514a:	f00b fe37 	bl	e0dbc <__aeabi_dcmpge>
   d514e:	2800      	cmp	r0, #0
   d5150:	d042      	beq.n	d51d8 <loop+0x570>
prom_so2P = prom_conc_so2;
   d5152:	4630      	mov	r0, r6
   d5154:	4639      	mov	r1, r7
   d5156:	f00b fea3 	bl	e0ea0 <__aeabi_d2f>
   d515a:	f8ca 0000 	str.w	r0, [sl]
prom_so2_past= prom_conc_so2;
   d515e:	f8cb 0000 	str.w	r0, [fp]
   d5162:	e03d      	b.n	d51e0 <loop+0x578>
   d5164:	f3af 8000 	nop.w
   d5168:	2c855272 	.word	0x2c855272
   d516c:	3ffa1af8 	.word	0x3ffa1af8
   d5170:	a9ef5233 	.word	0xa9ef5233
   d5174:	40b03560 	.word	0x40b03560
   d5178:	8fb43d8a 	.word	0x8fb43d8a
   d517c:	3ff9fc15 	.word	0x3ff9fc15
   d5180:	d9c2b7cc 	.word	0xd9c2b7cc
   d5184:	c057de5c 	.word	0xc057de5c
   d5188:	feb9c5c5 	.word	0xfeb9c5c5
   d518c:	3ffb17fb 	.word	0x3ffb17fb
   d5190:	8c68f3f2 	.word	0x8c68f3f2
   d5194:	4075a42a 	.word	0x4075a42a
   d5198:	2003c4c0 	.word	0x2003c4c0
   d519c:	2003c420 	.word	0x2003c420
   d51a0:	2003c4f8 	.word	0x2003c4f8
   d51a4:	2003c3d0 	.word	0x2003c3d0
   d51a8:	2003c428 	.word	0x2003c428
   d51ac:	2003c4c8 	.word	0x2003c4c8
   d51b0:	2003c1e0 	.word	0x2003c1e0
   d51b4:	2003c378 	.word	0x2003c378
   d51b8:	2003c384 	.word	0x2003c384
   d51bc:	2003bc54 	.word	0x2003bc54
   d51c0:	2003c3a4 	.word	0x2003c3a4
   d51c4:	2003bc60 	.word	0x2003bc60
   d51c8:	2003c1d8 	.word	0x2003c1d8
   d51cc:	2003c3dc 	.word	0x2003c3dc
   d51d0:	2003c1e8 	.word	0x2003c1e8
   d51d4:	2003c4e4 	.word	0x2003c4e4
}else
{
  prom_so2P= prom_so2_past;
   d51d8:	f8db 3000 	ldr.w	r3, [fp]
   d51dc:	f8ca 3000 	str.w	r3, [sl]
promvgasso2,
PM1_0,
PM2_5,
PM10

);
   d51e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   d51e2:	931c      	str	r3, [sp, #112]	; 0x70
   d51e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   d51e6:	931b      	str	r3, [sp, #108]	; 0x6c
   d51e8:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
   d51ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d51ee:	931a      	str	r3, [sp, #104]	; 0x68
   d51f0:	4b9e      	ldr	r3, [pc, #632]	; (d546c <loop+0x804>)

    DEBUG_PRINTLN(currentCsvData);

    readyToGetResetAndSendSensors = false;

    if (tickleWD)
   d51f2:	4d9f      	ldr	r5, [pc, #636]	; (d5470 <loop+0x808>)
promvgasso2,
PM1_0,
PM2_5,
PM10

);
   d51f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d51f8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d51fc:	e9d8 2300 	ldrd	r2, r3, [r8]
   d5200:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   d5204:	4b9b      	ldr	r3, [pc, #620]	; (d5474 <loop+0x80c>)
   d5206:	e9d3 2300 	ldrd	r2, r3, [r3]
   d520a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
{
  prom_so2P= prom_so2_past;
}
    
    
snprintf(msg, sizeof(msg) , //imprimimos la cadena 
   d520e:	4b9a      	ldr	r3, [pc, #616]	; (d5478 <loop+0x810>)
promvgasso2,
PM1_0,
PM2_5,
PM10

);
   d5210:	6818      	ldr	r0, [r3, #0]
   d5212:	f00b faf9 	bl	e0808 <__aeabi_f2d>
   d5216:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
{
  prom_so2P= prom_so2_past;
}
    
    
snprintf(msg, sizeof(msg) , //imprimimos la cadena 
   d521a:	4b98      	ldr	r3, [pc, #608]	; (d547c <loop+0x814>)
promvgasso2,
PM1_0,
PM2_5,
PM10

);
   d521c:	6818      	ldr	r0, [r3, #0]
   d521e:	f00b faf3 	bl	e0808 <__aeabi_f2d>
   d5222:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
{
  prom_so2P= prom_so2_past;
}
    
    
snprintf(msg, sizeof(msg) , //imprimimos la cadena 
   d5226:	4b96      	ldr	r3, [pc, #600]	; (d5480 <loop+0x818>)
promvgasso2,
PM1_0,
PM2_5,
PM10

);
   d5228:	6818      	ldr	r0, [r3, #0]
   d522a:	f00b faed 	bl	e0808 <__aeabi_f2d>
   d522e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d5232:	f8d9 0000 	ldr.w	r0, [r9]
   d5236:	f00b fae7 	bl	e0808 <__aeabi_f2d>
   d523a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d523e:	9820      	ldr	r0, [sp, #128]	; 0x80
   d5240:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
   d5244:	ed8d 9a08 	vstr	s18, [sp, #32]
   d5248:	f00b fade 	bl	e0808 <__aeabi_f2d>
   d524c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5250:	ee18 0a10 	vmov	r0, s16
   d5254:	f00b fad8 	bl	e0808 <__aeabi_f2d>
   d5258:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d525c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   d525e:	f00b fad3 	bl	e0808 <__aeabi_f2d>
   d5262:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5266:	981e      	ldr	r0, [sp, #120]	; 0x78
   d5268:	f00b face 	bl	e0808 <__aeabi_f2d>
   d526c:	ee19 3a90 	vmov	r3, s19
   d5270:	e9cd 0100 	strd	r0, r1, [sp]
   d5274:	4a83      	ldr	r2, [pc, #524]	; (d5484 <loop+0x81c>)
   d5276:	f44f 7100 	mov.w	r1, #512	; 0x200
   d527a:	a844      	add	r0, sp, #272	; 0x110
   d527c:	f006 fc96 	bl	dbbac <snprintf>
   d5280:	4b81      	ldr	r3, [pc, #516]	; (d5488 <loop+0x820>)
   d5282:	4982      	ldr	r1, [pc, #520]	; (d548c <loop+0x824>)
   d5284:	781b      	ldrb	r3, [r3, #0]
   d5286:	f88d 3000 	strb.w	r3, [sp]
   d528a:	aa44      	add	r2, sp, #272	; 0x110
   d528c:	233c      	movs	r3, #60	; 0x3c
   d528e:	a840      	add	r0, sp, #256	; 0x100
   d5290:	f008 f85e 	bl	dd350 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5294:	a841      	add	r0, sp, #260	; 0x104
   d5296:	f7ff fa8b 	bl	d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

 Particle.publish("sensors", msg, PRIVATE);//mandamos los datos a la nube de particle
 ubidots.add("UnixTime", UT);//mandamos lo datos a la nube de ubidots
   d529a:	eeb8 0a69 	vcvt.f32.u32	s0, s19
   d529e:	497c      	ldr	r1, [pc, #496]	; (d5490 <loop+0x828>)
   d52a0:	487c      	ldr	r0, [pc, #496]	; (d5494 <loop+0x82c>)
   d52a2:	f004 f82c 	bl	d92fe <_ZN7Ubidots3addEPcf>
 ubidots.add("Velocidad del Viento", VV); 
   d52a6:	ed9d 0a1e 	vldr	s0, [sp, #120]	; 0x78
   d52aa:	497b      	ldr	r1, [pc, #492]	; (d5498 <loop+0x830>)
   d52ac:	4879      	ldr	r0, [pc, #484]	; (d5494 <loop+0x82c>)
   d52ae:	f004 f826 	bl	d92fe <_ZN7Ubidots3addEPcf>
 ubidots.add("Precipitacion", Precip);
   d52b2:	ed9d 0a1f 	vldr	s0, [sp, #124]	; 0x7c
   d52b6:	4979      	ldr	r1, [pc, #484]	; (d549c <loop+0x834>)
   d52b8:	4876      	ldr	r0, [pc, #472]	; (d5494 <loop+0x82c>)
   d52ba:	f004 f820 	bl	d92fe <_ZN7Ubidots3addEPcf>
 ubidots.add("Direccion del viento", DV);
   d52be:	eeb0 0a48 	vmov.f32	s0, s16
   d52c2:	4977      	ldr	r1, [pc, #476]	; (d54a0 <loop+0x838>)
   d52c4:	4873      	ldr	r0, [pc, #460]	; (d5494 <loop+0x82c>)
   d52c6:	f004 f81a 	bl	d92fe <_ZN7Ubidots3addEPcf>
 ubidots.add("Temperatura", Temp);
   d52ca:	ed9d 0a20 	vldr	s0, [sp, #128]	; 0x80
   d52ce:	4975      	ldr	r1, [pc, #468]	; (d54a4 <loop+0x83c>)
   d52d0:	4870      	ldr	r0, [pc, #448]	; (d5494 <loop+0x82c>)
   d52d2:	f004 f814 	bl	d92fe <_ZN7Ubidots3addEPcf>
 ubidots.add("Humedad", Hum);
   d52d6:	eeb8 0a49 	vcvt.f32.u32	s0, s18
   d52da:	4973      	ldr	r1, [pc, #460]	; (d54a8 <loop+0x840>)
   d52dc:	486d      	ldr	r0, [pc, #436]	; (d5494 <loop+0x82c>)
   d52de:	f004 f80e 	bl	d92fe <_ZN7Ubidots3addEPcf>
 ubidots.add("Milivolts", mVB);
   d52e2:	eeb8 0a68 	vcvt.f32.u32	s0, s17
   d52e6:	4971      	ldr	r1, [pc, #452]	; (d54ac <loop+0x844>)
   d52e8:	486a      	ldr	r0, [pc, #424]	; (d5494 <loop+0x82c>)
   d52ea:	f004 f808 	bl	d92fe <_ZN7Ubidots3addEPcf>
 //ubidots.send(webhook_name, PUBLIC); 
ubidots.send(WEBHOOK_NAME, PUBLIC); 
   d52ee:	4b70      	ldr	r3, [pc, #448]	; (d54b0 <loop+0x848>)
   d52f0:	4868      	ldr	r0, [pc, #416]	; (d5494 <loop+0x82c>)
   d52f2:	781a      	ldrb	r2, [r3, #0]
   d52f4:	4b6f      	ldr	r3, [pc, #444]	; (d54b4 <loop+0x84c>)
   d52f6:	6819      	ldr	r1, [r3, #0]
   d52f8:	f004 f80a 	bl	d9310 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
    

    String currentCsvData = sensors.sensorReadingsToCsvUS();
   d52fc:	496e      	ldr	r1, [pc, #440]	; (d54b8 <loop+0x850>)
   d52fe:	a824      	add	r0, sp, #144	; 0x90
   d5300:	f005 fbba 	bl	daa78 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv>

    // Consider putting the SD logging in the IoTNode library
    printToSd.println(currentCsvData);
   d5304:	9924      	ldr	r1, [sp, #144]	; 0x90
   d5306:	486d      	ldr	r0, [pc, #436]	; (d54bc <loop+0x854>)
   d5308:	f007 fb55 	bl	dc9b6 <_ZN5Print7printlnEPKc>

    DEBUG_PRINTLN(currentCsvData);
   d530c:	f008 fa9a 	bl	dd844 <_Z16_fetch_usbserialv>
   d5310:	9924      	ldr	r1, [sp, #144]	; 0x90
   d5312:	f007 fb50 	bl	dc9b6 <_ZN5Print7printlnEPKc>

    readyToGetResetAndSendSensors = false;
   d5316:	4b6a      	ldr	r3, [pc, #424]	; (d54c0 <loop+0x858>)

    if (tickleWD)
   d5318:	782a      	ldrb	r2, [r5, #0]
    // Consider putting the SD logging in the IoTNode library
    printToSd.println(currentCsvData);

    DEBUG_PRINTLN(currentCsvData);

    readyToGetResetAndSendSensors = false;
   d531a:	2600      	movs	r6, #0
   d531c:	701e      	strb	r6, [r3, #0]
   d531e:	461c      	mov	r4, r3

    if (tickleWD)
   d5320:	b11a      	cbz	r2, d532a <loop+0x6c2>
    {
      node.tickleWatchdog();
   d5322:	4868      	ldr	r0, [pc, #416]	; (d54c4 <loop+0x85c>)
   d5324:	f000 fc0c 	bl	d5b40 <_ZN7IoTNode14tickleWatchdogEv>
      tickleWD = false;
   d5328:	702e      	strb	r6, [r5, #0]
    }

    readyToGetResetAndSendSensors = false;
   d532a:	2300      	movs	r3, #0
   d532c:	7023      	strb	r3, [r4, #0]
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d532e:	4c66      	ldr	r4, [pc, #408]	; (d54c8 <loop+0x860>)
      tickleWD = false;
    }

    readyToGetResetAndSendSensors = false;
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
   d5330:	f008 fa88 	bl	dd844 <_Z16_fetch_usbserialv>
   d5334:	4965      	ldr	r1, [pc, #404]	; (d54cc <loop+0x864>)
   d5336:	f007 fb3e 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d533a:	220a      	movs	r2, #10
   d533c:	6821      	ldr	r1, [r4, #0]
   d533e:	a828      	add	r0, sp, #160	; 0xa0
   d5340:	f007 fa05 	bl	dc74e <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5344:	a928      	add	r1, sp, #160	; 0xa0
   d5346:	a82c      	add	r0, sp, #176	; 0xb0
   d5348:	f007 f9ba 	bl	dc6c0 <_ZN6StringC1ERKS_>
   d534c:	4960      	ldr	r1, [pc, #384]	; (d54d0 <loop+0x868>)
   d534e:	a82c      	add	r0, sp, #176	; 0xb0
   d5350:	f007 fa61 	bl	dc816 <_ZplRK15StringSumHelperPKc>

    String(config.unitType)+"|"+
   d5354:	7921      	ldrb	r1, [r4, #4]
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d5356:	4605      	mov	r5, r0

    String(config.unitType)+"|"+
   d5358:	a830      	add	r0, sp, #192	; 0xc0
   d535a:	f007 f9d5 	bl	dc708 <_ZN6StringC1Ec>
   d535e:	a930      	add	r1, sp, #192	; 0xc0
   d5360:	4628      	mov	r0, r5
   d5362:	f007 fa4c 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d5366:	495a      	ldr	r1, [pc, #360]	; (d54d0 <loop+0x868>)
   d5368:	f007 fa55 	bl	dc816 <_ZplRK15StringSumHelperPKc>
    String(config.firmwareVersion)+"|"+
   d536c:	220a      	movs	r2, #10
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
   d536e:	4605      	mov	r5, r0
    String(config.firmwareVersion)+"|"+
   d5370:	68a1      	ldr	r1, [r4, #8]
   d5372:	a834      	add	r0, sp, #208	; 0xd0
   d5374:	f007 f9eb 	bl	dc74e <_ZN6StringC1Eih>
   d5378:	a934      	add	r1, sp, #208	; 0xd0
   d537a:	4628      	mov	r0, r5
   d537c:	f007 fa3f 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d5380:	4953      	ldr	r1, [pc, #332]	; (d54d0 <loop+0x868>)
   d5382:	f007 fa48 	bl	dc816 <_ZplRK15StringSumHelperPKc>
    String(config.particleTimeout)+"|"+
   d5386:	220a      	movs	r2, #10
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
   d5388:	4605      	mov	r5, r0
    String(config.particleTimeout)+"|"+
   d538a:	68e1      	ldr	r1, [r4, #12]
   d538c:	a838      	add	r0, sp, #224	; 0xe0
   d538e:	f007 f9de 	bl	dc74e <_ZN6StringC1Eih>
   d5392:	a938      	add	r1, sp, #224	; 0xe0
   d5394:	4628      	mov	r0, r5
   d5396:	f007 fa32 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d539a:	494d      	ldr	r1, [pc, #308]	; (d54d0 <loop+0x868>)
   d539c:	f007 fa3b 	bl	dc816 <_ZplRK15StringSumHelperPKc>
    String(config.latitude)+"|"+
   d53a0:	ed94 0a04 	vldr	s0, [r4, #16]
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
   d53a4:	4605      	mov	r5, r0
    String(config.latitude)+"|"+
   d53a6:	2106      	movs	r1, #6
   d53a8:	a83c      	add	r0, sp, #240	; 0xf0
   d53aa:	f007 f9f7 	bl	dc79c <_ZN6StringC1Efi>
   d53ae:	a93c      	add	r1, sp, #240	; 0xf0
   d53b0:	4628      	mov	r0, r5
   d53b2:	f007 fa24 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d53b6:	4946      	ldr	r1, [pc, #280]	; (d54d0 <loop+0x868>)
   d53b8:	f007 fa2d 	bl	dc816 <_ZplRK15StringSumHelperPKc>
    String(config.longitude)+"|"+
   d53bc:	ed94 0a05 	vldr	s0, [r4, #20]
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
   d53c0:	4605      	mov	r5, r0
    String(config.longitude)+"|"+
   d53c2:	2106      	movs	r1, #6
   d53c4:	a840      	add	r0, sp, #256	; 0x100
   d53c6:	f007 f9e9 	bl	dc79c <_ZN6StringC1Efi>
   d53ca:	a940      	add	r1, sp, #256	; 0x100
   d53cc:	4628      	mov	r0, r5
   d53ce:	f007 fa16 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d53d2:	493f      	ldr	r1, [pc, #252]	; (d54d0 <loop+0x868>)
   d53d4:	f007 fa1f 	bl	dc816 <_ZplRK15StringSumHelperPKc>
    i2cDevices;
   d53d8:	493e      	ldr	r1, [pc, #248]	; (d54d4 <loop+0x86c>)
   d53da:	f007 fa10 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   d53de:	4601      	mov	r1, r0
   d53e0:	483d      	ldr	r0, [pc, #244]	; (d54d8 <loop+0x870>)
   d53e2:	f007 f95e 	bl	dc6a2 <_ZN6StringaSERKS_>

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
    String(config.longitude)+"|"+
   d53e6:	a840      	add	r0, sp, #256	; 0x100
   d53e8:	f007 f8e4 	bl	dc5b4 <_ZN6StringD1Ev>
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
   d53ec:	a83c      	add	r0, sp, #240	; 0xf0
   d53ee:	f007 f8e1 	bl	dc5b4 <_ZN6StringD1Ev>
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
   d53f2:	a838      	add	r0, sp, #224	; 0xe0
   d53f4:	f007 f8de 	bl	dc5b4 <_ZN6StringD1Ev>
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
   d53f8:	a834      	add	r0, sp, #208	; 0xd0
   d53fa:	f007 f8db 	bl	dc5b4 <_ZN6StringD1Ev>
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
   d53fe:	a830      	add	r0, sp, #192	; 0xc0
   d5400:	f007 f8d8 	bl	dc5b4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5404:	a82c      	add	r0, sp, #176	; 0xb0
   d5406:	f007 f8d5 	bl	dc5b4 <_ZN6StringD1Ev>
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d540a:	a828      	add	r0, sp, #160	; 0xa0
   d540c:	f007 f8d2 	bl	dc5b4 <_ZN6StringD1Ev>
 ubidots.add("Milivolts", mVB);
 //ubidots.send(webhook_name, PUBLIC); 
ubidots.send(WEBHOOK_NAME, PUBLIC); 
    

    String currentCsvData = sensors.sensorReadingsToCsvUS();
   d5410:	a824      	add	r0, sp, #144	; 0x90
   d5412:	f007 f8cf 	bl	dc5b4 <_ZN6StringD1Ev>
    String(config.longitude)+"|"+
    i2cDevices;

  }

  if (readyToCapturePollSensors)//si esta listo para sondear los sensores
   d5416:	4c31      	ldr	r4, [pc, #196]	; (d54dc <loop+0x874>)
   d5418:	7823      	ldrb	r3, [r4, #0]
   d541a:	b1db      	cbz	r3, d5454 <loop+0x7ec>
  {
    sensors.captureTempHumidityPressure();//capturamos la temperatura, humedad, presion
   d541c:	4826      	ldr	r0, [pc, #152]	; (d54b8 <loop+0x850>)
   d541e:	f005 f987 	bl	da730 <_ZN14WeatherSensors27captureTempHumidityPressureEv>
    sensors.captureWindVane();// capturamos la veleta del aire
   d5422:	4825      	ldr	r0, [pc, #148]	; (d54b8 <loop+0x850>)
   d5424:	f005 f92c 	bl	da680 <_ZN14WeatherSensors15captureWindVaneEv>
    //sensors.captureLightLux();//
    sensors.captureBatteryVoltage();//capturamos voltage de la bateria
   d5428:	4823      	ldr	r0, [pc, #140]	; (d54b8 <loop+0x850>)
   d542a:	f004 ffbd 	bl	da3a8 <_ZN14WeatherSensors21captureBatteryVoltageEv>
   d542e:	4b16      	ldr	r3, [pc, #88]	; (d5488 <loop+0x820>)
   d5430:	492b      	ldr	r1, [pc, #172]	; (d54e0 <loop+0x878>)
   d5432:	781b      	ldrb	r3, [r3, #0]
    readyToCapturePollSensors = false;
   d5434:	2200      	movs	r2, #0
   d5436:	7022      	strb	r2, [r4, #0]
   d5438:	a844      	add	r0, sp, #272	; 0x110
   d543a:	f88d 3000 	strb.w	r3, [sp]
   d543e:	233c      	movs	r3, #60	; 0x3c
   d5440:	f007 ff86 	bl	dd350 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5444:	a845      	add	r0, sp, #276	; 0x114
   d5446:	f7ff f9b3 	bl	d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    #ifdef IOTDEBUG
    Particle.publish("Capturing sensors",PRIVATE);
    DEBUG_PRINTLN("capture");
   d544a:	f008 f9fb 	bl	dd844 <_Z16_fetch_usbserialv>
   d544e:	4925      	ldr	r1, [pc, #148]	; (d54e4 <loop+0x87c>)
   d5450:	f007 fab1 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    #endif
  }
  // If flag set then reset here
  if (resetDevice)
   d5454:	4b24      	ldr	r3, [pc, #144]	; (d54e8 <loop+0x880>)
   d5456:	781b      	ldrb	r3, [r3, #0]
   d5458:	b10b      	cbz	r3, d545e <loop+0x7f6>
  {
    System.reset();
   d545a:	f006 fd17 	bl	dbe8c <_ZN11SystemClass5resetEv>
  }

}
   d545e:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   d5462:	ecbd 8b04 	vpop	{d8-d9}
   d5466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d546a:	bf00      	nop
   d546c:	2003c3d0 	.word	0x2003c3d0
   d5470:	2003c4a4 	.word	0x2003c4a4
   d5474:	2003c518 	.word	0x2003c518
   d5478:	2003c384 	.word	0x2003c384
   d547c:	2003bc54 	.word	0x2003bc54
   d5480:	2003c3a4 	.word	0x2003c3a4
   d5484:	000e4b32 	.word	0x000e4b32
   d5488:	2003bc58 	.word	0x2003bc58
   d548c:	000e4cb3 	.word	0x000e4cb3
   d5490:	000e4c2c 	.word	0x000e4c2c
   d5494:	2003c4e8 	.word	0x2003c4e8
   d5498:	000e4c35 	.word	0x000e4c35
   d549c:	000e4c4a 	.word	0x000e4c4a
   d54a0:	000e4c58 	.word	0x000e4c58
   d54a4:	000e4c6d 	.word	0x000e4c6d
   d54a8:	000e4c79 	.word	0x000e4c79
   d54ac:	000e4c81 	.word	0x000e4c81
   d54b0:	2003c3d8 	.word	0x2003c3d8
   d54b4:	2003bb10 	.word	0x2003bb10
   d54b8:	2003c520 	.word	0x2003c520
   d54bc:	2003c1f0 	.word	0x2003c1f0
   d54c0:	2003c500 	.word	0x2003c500
   d54c4:	2003c324 	.word	0x2003c324
   d54c8:	2003c480 	.word	0x2003c480
   d54cc:	000e4c8b 	.word	0x000e4c8b
   d54d0:	000e4ebb 	.word	0x000e4ebb
   d54d4:	2003c4a8 	.word	0x2003c4a8
   d54d8:	2003c430 	.word	0x2003c430
   d54dc:	2003bc18 	.word	0x2003bc18
   d54e0:	000e4ca9 	.word	0x000e4ca9
   d54e4:	000e4cbb 	.word	0x000e4cbb
   d54e8:	2003c3cc 	.word	0x2003c3cc

000d54ec <_GLOBAL__sub_I_prom_o3>:
        return pm10;		

    }
    last = now_10;
  }
}
   d54ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d54f0:	4b1a      	ldr	r3, [pc, #104]	; (d555c <_GLOBAL__sub_I_prom_o3+0x70>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d54f2:	4e1b      	ldr	r6, [pc, #108]	; (d5560 <_GLOBAL__sub_I_prom_o3+0x74>)
  * Construct the PMS7003Serial with the Serial object you want to use.
  *
  * @param serial the Serial object you want to use.
  * @param setpin the MCU pin that SET is connected to.
  */
  PMS7003Serial(PMS7003UARTSerial& serial, int setpin) : m_serial(serial), m_setpin(setpin) {
   d54f4:	4c1b      	ldr	r4, [pc, #108]	; (d5564 <_GLOBAL__sub_I_prom_o3+0x78>)
   d54f6:	2500      	movs	r5, #0
   d54f8:	701d      	strb	r5, [r3, #0]
   d54fa:	4b1b      	ldr	r3, [pc, #108]	; (d5568 <_GLOBAL__sub_I_prom_o3+0x7c>)
   d54fc:	b08a      	sub	sp, #40	; 0x28
   d54fe:	f04f 0801 	mov.w	r8, #1
   d5502:	f883 8000 	strb.w	r8, [r3]
   d5506:	f005 ff8b 	bl	db420 <HAL_Pin_Map>
   d550a:	6030      	str	r0, [r6, #0]
   d550c:	f006 f838 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
#include "IoTNode.h"
#include "SdCardLogHandlerRK.h"
#include "Ubidots.h"
#include "PMS7003-Particle-Sensor-Serial.h"

PMS7003Serial<USARTSerial> pms7003(Serial1, D7);
   d5510:	f008 face 	bl	ddab0 <_Z22__fetch_global_Serial1v>
   d5514:	2707      	movs	r7, #7
    m_serial.template begin(9600,SERIAL_8N1);
   d5516:	462a      	mov	r2, r5
   d5518:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  * Construct the PMS7003Serial with the Serial object you want to use.
  *
  * @param serial the Serial object you want to use.
  * @param setpin the MCU pin that SET is connected to.
  */
  PMS7003Serial(PMS7003UARTSerial& serial, int setpin) : m_serial(serial), m_setpin(setpin) {
   d551c:	6020      	str	r0, [r4, #0]
   d551e:	6067      	str	r7, [r4, #4]
    m_serial.template begin(9600,SERIAL_8N1);
   d5520:	f008 fabc 	bl	dda9c <_ZN11USARTSerial5beginEmm>
    pinMode(setpin, OUTPUT);
   d5524:	4641      	mov	r1, r8
   d5526:	4638      	mov	r0, r7
   d5528:	f008 fff8 	bl	de51c <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d552c:	88a3      	ldrh	r3, [r4, #4]
   d552e:	6832      	ldr	r2, [r6, #0]
   d5530:	011b      	lsls	r3, r3, #4
   d5532:	18d1      	adds	r1, r2, r3
   d5534:	5cd4      	ldrb	r4, [r2, r3]
   d5536:	784b      	ldrb	r3, [r1, #1]
   d5538:	f003 031f 	and.w	r3, r3, #31
   d553c:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d5540:	2c2f      	cmp	r4, #47	; 0x2f
   d5542:	dd05      	ble.n	d5550 <_GLOBAL__sub_I_prom_o3+0x64>
   d5544:	4a09      	ldr	r2, [pc, #36]	; (d556c <_GLOBAL__sub_I_prom_o3+0x80>)
   d5546:	4629      	mov	r1, r5
   d5548:	200a      	movs	r0, #10
   d554a:	f006 fa01 	bl	db950 <panic_>
   d554e:	e001      	b.n	d5554 <_GLOBAL__sub_I_prom_o3+0x68>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d5550:	2c1f      	cmp	r4, #31
   d5552:	dd0f      	ble.n	d5574 <_GLOBAL__sub_I_prom_o3+0x88>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d5554:	f004 041f 	and.w	r4, r4, #31
        return NRF_P1;
   d5558:	4b05      	ldr	r3, [pc, #20]	; (d5570 <_GLOBAL__sub_I_prom_o3+0x84>)
   d555a:	e00d      	b.n	d5578 <_GLOBAL__sub_I_prom_o3+0x8c>
   d555c:	2003c3d8 	.word	0x2003c3d8
   d5560:	2003c4a0 	.word	0x2003c4a0
   d5564:	2003c440 	.word	0x2003c440
   d5568:	2003bc58 	.word	0x2003bc58
   d556c:	000db561 	.word	0x000db561
   d5570:	50000300 	.word	0x50000300
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d5574:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d5578:	2501      	movs	r5, #1
   d557a:	fa05 f404 	lsl.w	r4, r5, r4
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d557e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
   d5582:	4abd      	ldr	r2, [pc, #756]	; (d5878 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d5584:	49bd      	ldr	r1, [pc, #756]	; (d587c <_GLOBAL__sub_I_prom_o3+0x390>)
   d5586:	48be      	ldr	r0, [pc, #760]	; (d5880 <_GLOBAL__sub_I_prom_o3+0x394>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5588:	4fbe      	ldr	r7, [pc, #760]	; (d5884 <_GLOBAL__sub_I_prom_o3+0x398>)
   d558a:	f009 f849 	bl	de620 <__aeabi_atexit>
    float prom_no2P;
    float prom_no2_past=0;
    float prom_so2P;
    float prom_so2_past=0;
const char* WEBHOOK_NAME = "Ubidots";
Ubidots ubidots("webhook", UBI_PARTICLE);
   d558e:	2203      	movs	r2, #3
   d5590:	49bd      	ldr	r1, [pc, #756]	; (d5888 <_GLOBAL__sub_I_prom_o3+0x39c>)
   d5592:	48be      	ldr	r0, [pc, #760]	; (d588c <_GLOBAL__sub_I_prom_o3+0x3a0>)
   d5594:	f003 fe86 	bl	d92a4 <_ZN7UbidotsC1EPc11IotProtocol>
   d5598:	4ab7      	ldr	r2, [pc, #732]	; (d5878 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d559a:	49bd      	ldr	r1, [pc, #756]	; (d5890 <_GLOBAL__sub_I_prom_o3+0x3a4>)
   d559c:	48bb      	ldr	r0, [pc, #748]	; (d588c <_GLOBAL__sub_I_prom_o3+0x3a0>)
   d559e:	f009 f83f 	bl	de620 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d55a2:	4bbc      	ldr	r3, [pc, #752]	; (d5894 <_GLOBAL__sub_I_prom_o3+0x3a8>)
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d55a4:	48bc      	ldr	r0, [pc, #752]	; (d5898 <_GLOBAL__sub_I_prom_o3+0x3ac>)
   d55a6:	f883 5474 	strb.w	r5, [r3, #1140]	; 0x474
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d55aa:	2164      	movs	r1, #100	; 0x64
   d55ac:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
   d55b0:	6839      	ldr	r1, [r7, #0]
   d55b2:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
   d55b6:	2200      	movs	r2, #0
   d55b8:	ea11 0605 	ands.w	r6, r1, r5
   d55bc:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d55be:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d55c2:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d55c6:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d55ca:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d55ce:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d55d2:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d55d6:	461c      	mov	r4, r3
   d55d8:	4605      	mov	r5, r0
   d55da:	d10a      	bne.n	d55f2 <_GLOBAL__sub_I_prom_o3+0x106>
   d55dc:	4638      	mov	r0, r7
   d55de:	f7fe fd64 	bl	d40aa <__cxa_guard_acquire>
   d55e2:	b130      	cbz	r0, d55f2 <_GLOBAL__sub_I_prom_o3+0x106>
   d55e4:	4631      	mov	r1, r6
   d55e6:	48ad      	ldr	r0, [pc, #692]	; (d589c <_GLOBAL__sub_I_prom_o3+0x3b0>)
   d55e8:	f006 fb7c 	bl	dbce4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d55ec:	4638      	mov	r0, r7
   d55ee:	f7fe fd61 	bl	d40b4 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d55f2:	4baa      	ldr	r3, [pc, #680]	; (d589c <_GLOBAL__sub_I_prom_o3+0x3b0>)
   d55f4:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
  #define DEBUG_PRINTLN(...)
#endif

const int SD_CHIP_SELECT = N_D0;// memoria sd
SdFat sd;//La biblioteca Arduino SdFat proporciona acceso de lectura / escritura a sistemas de archivos FAT16 / FAT32 en tarjetas flash SD / SDHC.
SdCardPrintHandler printToSd(sd, SD_CHIP_SELECT, SPI_FULL_SPEED);//sd es el SdFatobjeto, como se describe en la sección anterior
   d55f8:	4ca9      	ldr	r4, [pc, #676]	; (d58a0 <_GLOBAL__sub_I_prom_o3+0x3b4>)
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d55fa:	4baa      	ldr	r3, [pc, #680]	; (d58a4 <_GLOBAL__sub_I_prom_o3+0x3b8>)
   d55fc:	9506      	str	r5, [sp, #24]
   d55fe:	ae06      	add	r6, sp, #24
   d5600:	2500      	movs	r5, #0
   d5602:	2701      	movs	r7, #1
   d5604:	9308      	str	r3, [sp, #32]
   d5606:	2202      	movs	r2, #2
   d5608:	4633      	mov	r3, r6
   d560a:	49a2      	ldr	r1, [pc, #648]	; (d5894 <_GLOBAL__sub_I_prom_o3+0x3a8>)
   d560c:	f88d 501c 	strb.w	r5, [sp, #28]
   d5610:	4620      	mov	r0, r4
   d5612:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
   d5616:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
   d561a:	f000 fc91 	bl	d5f40 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE>
   d561e:	4a96      	ldr	r2, [pc, #600]	; (d5878 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d5620:	49a1      	ldr	r1, [pc, #644]	; (d58a8 <_GLOBAL__sub_I_prom_o3+0x3bc>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5622:	f8df 9340 	ldr.w	r9, [pc, #832]	; d5964 <_GLOBAL__sub_I_prom_o3+0x478>
   d5626:	4620      	mov	r0, r4
   d5628:	f008 fffa 	bl	de620 <__aeabi_atexit>
	 * The maximum number of log files to keep is enforced at startup, when a SD card is inserted, and when
	 * the current log file is full.
	 *
	 * @param value Number of files to kee. Values are 1 <= num <= 999999 (size_t)
	 */
	inline SdCardPrintHandler &withMaxFilesToKeep(size_t value) { maxFilesToKeep = value; return *this; };
   d562c:	f640 33b8 	movw	r3, #3000	; 0xbb8
inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d5630:	462a      	mov	r2, r5
   d5632:	2114      	movs	r1, #20
   d5634:	2003      	movs	r0, #3
   d5636:	62a3      	str	r3, [r4, #40]	; 0x28
   d5638:	f006 f9dc 	bl	db9f4 <led_pattern_period>
   d563c:	f04f 081e 	mov.w	r8, #30
   d5640:	4603      	mov	r3, r0
   d5642:	f8cd 8000 	str.w	r8, [sp]
   d5646:	9701      	str	r7, [sp, #4]
   d5648:	2203      	movs	r2, #3
   d564a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   d564e:	4897      	ldr	r0, [pc, #604]	; (d58ac <_GLOBAL__sub_I_prom_o3+0x3c0>)
	    _M_manager = &_My_handler::_M_manager;
   d5650:	4c97      	ldr	r4, [pc, #604]	; (d58b0 <_GLOBAL__sub_I_prom_o3+0x3c4>)
   d5652:	f006 fb1f 	bl	dbc94 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
#define SENSOR_SEND_TIME_MS 10000// define un tiempo en milisegundos de envio de datos de los sensores
#define SENSOR_POLL_TIME_MS 2000// define un tiempo en ms de tiempo de sondeo de sensor

#define IOTDEBUG

LEDStatus fadeRed(RGB_COLOR_RED, LED_PATTERN_FADE, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);//led paradeante solor rojo
   d5656:	4a88      	ldr	r2, [pc, #544]	; (d5878 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d5658:	4996      	ldr	r1, [pc, #600]	; (d58b4 <_GLOBAL__sub_I_prom_o3+0x3c8>)
   d565a:	4894      	ldr	r0, [pc, #592]	; (d58ac <_GLOBAL__sub_I_prom_o3+0x3c0>)
   d565c:	f008 ffe0 	bl	de620 <__aeabi_atexit>

const int firmwareVersion = 0;

SYSTEM_THREAD(ENABLED);//System Thread es una configuración del sistema que garantiza que el bucle de la aplicación no sea interrumpido por el procesamiento en segundo plano del sistema y la administración de la red
   d5660:	4629      	mov	r1, r5
   d5662:	4638      	mov	r0, r7
   d5664:	f006 f9a6 	bl	db9b4 <system_thread_set_state>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5668:	4b93      	ldr	r3, [pc, #588]	; (d58b8 <_GLOBAL__sub_I_prom_o3+0x3cc>)
   d566a:	9306      	str	r3, [sp, #24]
// This is the index for the updateTSChan
int returnIndex;

byte messageSize = 1;

Timer pollSensorTimer(SENSOR_POLL_TIME_MS, capturePollSensors);//declaramos el timer del sondeo de los sensores y lo capturamos
   d566c:	4632      	mov	r2, r6
   d566e:	462b      	mov	r3, r5
   d5670:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d5674:	4891      	ldr	r0, [pc, #580]	; (d58bc <_GLOBAL__sub_I_prom_o3+0x3d0>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5676:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d567a:	9408      	str	r4, [sp, #32]
   d567c:	f7fe fe40 	bl	d4300 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5680:	4630      	mov	r0, r6
   d5682:	f7fe fe34 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
   d5686:	4a7c      	ldr	r2, [pc, #496]	; (d5878 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d5688:	498d      	ldr	r1, [pc, #564]	; (d58c0 <_GLOBAL__sub_I_prom_o3+0x3d4>)
   d568a:	488c      	ldr	r0, [pc, #560]	; (d58bc <_GLOBAL__sub_I_prom_o3+0x3d0>)
   d568c:	f008 ffc8 	bl	de620 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5690:	4b8c      	ldr	r3, [pc, #560]	; (d58c4 <_GLOBAL__sub_I_prom_o3+0x3d8>)
   d5692:	9306      	str	r3, [sp, #24]

Timer sensorSendTimer(SENSOR_SEND_TIME_MS, getResetAndSendSensors);//declaramos el timer de envio de envio de timer de los sensores enviamos el tiempo de envio y su modificacion
   d5694:	4632      	mov	r2, r6
   d5696:	462b      	mov	r3, r5
   d5698:	f242 7110 	movw	r1, #10000	; 0x2710
   d569c:	488a      	ldr	r0, [pc, #552]	; (d58c8 <_GLOBAL__sub_I_prom_o3+0x3dc>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d569e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d56a2:	9408      	str	r4, [sp, #32]
   d56a4:	f7fe fe2c 	bl	d4300 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d56a8:	4630      	mov	r0, r6
   d56aa:	f7fe fe20 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
   d56ae:	4a72      	ldr	r2, [pc, #456]	; (d5878 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d56b0:	4983      	ldr	r1, [pc, #524]	; (d58c0 <_GLOBAL__sub_I_prom_o3+0x3d4>)
   d56b2:	4885      	ldr	r0, [pc, #532]	; (d58c8 <_GLOBAL__sub_I_prom_o3+0x3dc>)
   d56b4:	f008 ffb4 	bl	de620 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d56b8:	4b84      	ldr	r3, [pc, #528]	; (d58cc <_GLOBAL__sub_I_prom_o3+0x3e0>)
   d56ba:	9306      	str	r3, [sp, #24]

Timer unpluggedTimer(5000,unplugged);
   d56bc:	4632      	mov	r2, r6
   d56be:	462b      	mov	r3, r5
   d56c0:	f241 3188 	movw	r1, #5000	; 0x1388
   d56c4:	4882      	ldr	r0, [pc, #520]	; (d58d0 <_GLOBAL__sub_I_prom_o3+0x3e4>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d56c6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d56ca:	9408      	str	r4, [sp, #32]
{
  // user-accessible "public" interface
  public:
    WeatherSensors() : airTempKMedian(30), relativeHumidtyMedian(30), node()
   d56cc:	4c81      	ldr	r4, [pc, #516]	; (d58d4 <_GLOBAL__sub_I_prom_o3+0x3e8>)
   d56ce:	f7fe fe17 	bl	d4300 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d56d2:	4630      	mov	r0, r6
   d56d4:	f7fe fe0b 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
   d56d8:	4a67      	ldr	r2, [pc, #412]	; (d5878 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d56da:	4979      	ldr	r1, [pc, #484]	; (d58c0 <_GLOBAL__sub_I_prom_o3+0x3d4>)
   d56dc:	487c      	ldr	r0, [pc, #496]	; (d58d0 <_GLOBAL__sub_I_prom_o3+0x3e4>)
   d56de:	f008 ff9f 	bl	de620 <__aeabi_atexit>
   d56e2:	4620      	mov	r0, r4
   d56e4:	f001 fa59 	bl	d6b9a <_ZN15Adafruit_AM2315C1Ev>
   d56e8:	f104 0008 	add.w	r0, r4, #8
   d56ec:	f004 fd1b 	bl	da126 <_ZN9MPL3115A2C1Ev>
   d56f0:	4641      	mov	r1, r8
   d56f2:	f104 000a 	add.w	r0, r4, #10
   d56f6:	f005 fe08 	bl	db30a <_ZN13RunningMedianC1Et>
   d56fa:	4641      	mov	r1, r8
   d56fc:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d5700:	f005 fe03 	bl	db30a <_ZN13RunningMedianC1Et>
   d5704:	4874      	ldr	r0, [pc, #464]	; (d58d8 <_GLOBAL__sub_I_prom_o3+0x3ec>)
   d5706:	f000 f9cf 	bl	d5aa8 <_ZN7IoTNodeC1Ev>
   d570a:	f241 6a5c 	movw	sl, #5724	; 0x165c
   d570e:	f640 211f 	movw	r1, #2591	; 0xa1f
   d5712:	4872      	ldr	r0, [pc, #456]	; (d58dc <_GLOBAL__sub_I_prom_o3+0x3f0>)
   d5714:	f001 f8ca 	bl	d68ac <_ZN16Adafruit_TSL2591C1El>
   d5718:	2304      	movs	r3, #4
   d571a:	f844 300a 	str.w	r3, [r4, sl]
   d571e:	f504 53b3 	add.w	r3, r4, #5728	; 0x1660
   d5722:	4a6f      	ldr	r2, [pc, #444]	; (d58e0 <_GLOBAL__sub_I_prom_o3+0x3f4>)
   d5724:	609a      	str	r2, [r3, #8]
   d5726:	4a6f      	ldr	r2, [pc, #444]	; (d58e4 <_GLOBAL__sub_I_prom_o3+0x3f8>)
   d5728:	601d      	str	r5, [r3, #0]
   d572a:	611a      	str	r2, [r3, #16]
   d572c:	f241 6374 	movw	r3, #5748	; 0x1674
   d5730:	f04f 39ff 	mov.w	r9, #4294967295
   d5734:	50e5      	str	r5, [r4, r3]
   d5736:	f241 6378 	movw	r3, #5752	; 0x1678
   d573a:	2211      	movs	r2, #17
   d573c:	50e5      	str	r5, [r4, r3]
   d573e:	f241 637c 	movw	r3, #5756	; 0x167c
   d5742:	f241 686c 	movw	r8, #5740	; 0x166c
   d5746:	f844 9003 	str.w	r9, [r4, r3]
   d574a:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d574e:	2003      	movs	r0, #3
   d5750:	601d      	str	r5, [r3, #0]
   d5752:	f241 6384 	movw	r3, #5764	; 0x1684
    {
      
      pinMode(AnemometerPin, INPUT_PULLUP);
   d5756:	2102      	movs	r1, #2
// library interface description
class WeatherSensors
{
  // user-accessible "public" interface
  public:
    WeatherSensors() : airTempKMedian(30), relativeHumidtyMedian(30), node()
   d5758:	50e2      	str	r2, [r4, r3]
   d575a:	4a63      	ldr	r2, [pc, #396]	; (d58e8 <_GLOBAL__sub_I_prom_o3+0x3fc>)
   d575c:	f844 0008 	str.w	r0, [r4, r8]
   d5760:	2300      	movs	r3, #0
   d5762:	6013      	str	r3, [r2, #0]
   d5764:	6053      	str	r3, [r2, #4]
   d5766:	f241 6290 	movw	r2, #5776	; 0x1690
   d576a:	50a5      	str	r5, [r4, r2]
   d576c:	4a5f      	ldr	r2, [pc, #380]	; (d58ec <_GLOBAL__sub_I_prom_o3+0x400>)
   d576e:	6013      	str	r3, [r2, #0]
   d5770:	f241 6298 	movw	r2, #5784	; 0x1698
   d5774:	50a5      	str	r5, [r4, r2]
   d5776:	4a5e      	ldr	r2, [pc, #376]	; (d58f0 <_GLOBAL__sub_I_prom_o3+0x404>)
   d5778:	6013      	str	r3, [r2, #0]
   d577a:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
   d577e:	6015      	str	r5, [r2, #0]
   d5780:	6053      	str	r3, [r2, #4]
   d5782:	f241 62a8 	movw	r2, #5800	; 0x16a8
   d5786:	50a5      	str	r5, [r4, r2]
   d5788:	4a5a      	ldr	r2, [pc, #360]	; (d58f4 <_GLOBAL__sub_I_prom_o3+0x408>)
   d578a:	6013      	str	r3, [r2, #0]
   d578c:	6053      	str	r3, [r2, #4]
   d578e:	f241 63b4 	movw	r3, #5812	; 0x16b4
   d5792:	50e5      	str	r5, [r4, r3]
    {
      
      pinMode(AnemometerPin, INPUT_PULLUP);
   d5794:	f008 fec2 	bl	de51c <pinMode>
      attachInterrupt(AnemometerPin, &WeatherSensors::handleAnemometerEvent, this, FALLING);
   d5798:	f834 0008 	ldrh.w	r0, [r4, r8]
   d579c:	4b56      	ldr	r3, [pc, #344]	; (d58f8 <_GLOBAL__sub_I_prom_o3+0x40c>)
   d579e:	9306      	str	r3, [sp, #24]
   d57a0:	f04f 0802 	mov.w	r8, #2
   d57a4:	9507      	str	r5, [sp, #28]
   d57a6:	9502      	str	r5, [sp, #8]
   d57a8:	f8cd 9004 	str.w	r9, [sp, #4]
   d57ac:	f8cd 8000 	str.w	r8, [sp]
   d57b0:	e896 0006 	ldmia.w	r6, {r1, r2}
   d57b4:	4623      	mov	r3, r4
   d57b6:	f7ff f961 	bl	d4a7c <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>

      pinMode(RainPin, INPUT_PULLUP);
   d57ba:	4641      	mov	r1, r8
   d57bc:	f834 000a 	ldrh.w	r0, [r4, sl]
   d57c0:	f008 feac 	bl	de51c <pinMode>
      attachInterrupt(RainPin, &WeatherSensors::handleRainEvent, this, FALLING);
   d57c4:	f834 000a 	ldrh.w	r0, [r4, sl]
   d57c8:	4b4c      	ldr	r3, [pc, #304]	; (d58fc <_GLOBAL__sub_I_prom_o3+0x410>)
   d57ca:	9304      	str	r3, [sp, #16]
   d57cc:	e88d 0300 	stmia.w	sp, {r8, r9}
   d57d0:	9505      	str	r5, [sp, #20]
   d57d2:	9502      	str	r5, [sp, #8]
   d57d4:	aa04      	add	r2, sp, #16
   d57d6:	4623      	mov	r3, r4
   d57d8:	ca06      	ldmia	r2, {r1, r2}
   d57da:	f7ff f94f 	bl	d4a7c <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>

WeatherSensors sensors; //Interrupts for anemometer and rain bucket
   d57de:	4a26      	ldr	r2, [pc, #152]	; (d5878 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d57e0:	4947      	ldr	r1, [pc, #284]	; (d5900 <_GLOBAL__sub_I_prom_o3+0x414>)
   d57e2:	4620      	mov	r0, r4
   d57e4:	f008 ff1c 	bl	de620 <__aeabi_atexit>
// are set up here too

IoTNode node;//objeto nodo de libreria iotnode
   d57e8:	4846      	ldr	r0, [pc, #280]	; (d5904 <_GLOBAL__sub_I_prom_o3+0x418>)
   d57ea:	f000 f95d 	bl	d5aa8 <_ZN7IoTNodeC1Ev>
   d57ee:	4a22      	ldr	r2, [pc, #136]	; (d5878 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d57f0:	4945      	ldr	r1, [pc, #276]	; (d5908 <_GLOBAL__sub_I_prom_o3+0x41c>)
   d57f2:	4844      	ldr	r0, [pc, #272]	; (d5904 <_GLOBAL__sub_I_prom_o3+0x418>)
   d57f4:	f008 ff14 	bl	de620 <__aeabi_atexit>

// // Create FRAM array and ring
framArray framConfig = node.makeFramArray(1, sizeof(config));
   d57f8:	463a      	mov	r2, r7
   d57fa:	2318      	movs	r3, #24
   d57fc:	4941      	ldr	r1, [pc, #260]	; (d5904 <_GLOBAL__sub_I_prom_o3+0x418>)
   d57fe:	4843      	ldr	r0, [pc, #268]	; (d590c <_GLOBAL__sub_I_prom_o3+0x420>)
   d5800:	f000 fadb 	bl	d5dba <_ZN7IoTNode13makeFramArrayEmh>

framRing dataRing = node.makeFramRing(300, sizeof(sensorReadings));
   d5804:	2314      	movs	r3, #20
   d5806:	f44f 7296 	mov.w	r2, #300	; 0x12c
   d580a:	493e      	ldr	r1, [pc, #248]	; (d5904 <_GLOBAL__sub_I_prom_o3+0x418>)
   d580c:	4840      	ldr	r0, [pc, #256]	; (d5910 <_GLOBAL__sub_I_prom_o3+0x424>)
   d580e:	f000 fb0c 	bl	d5e2a <_ZN7IoTNode12makeFramRingEmh>
bool readyToCapturePollSensors = false;
bool tickleWD = false;

unsigned long timeToNextSendMS;

String deviceStatus;
   d5812:	4940      	ldr	r1, [pc, #256]	; (d5914 <_GLOBAL__sub_I_prom_o3+0x428>)
   d5814:	4840      	ldr	r0, [pc, #256]	; (d5918 <_GLOBAL__sub_I_prom_o3+0x42c>)
   d5816:	f006 ff14 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d581a:	4a17      	ldr	r2, [pc, #92]	; (d5878 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d581c:	493f      	ldr	r1, [pc, #252]	; (d591c <_GLOBAL__sub_I_prom_o3+0x430>)
   d581e:	483e      	ldr	r0, [pc, #248]	; (d5918 <_GLOBAL__sub_I_prom_o3+0x42c>)
   d5820:	f008 fefe 	bl	de620 <__aeabi_atexit>
String i2cDevices;
   d5824:	493b      	ldr	r1, [pc, #236]	; (d5914 <_GLOBAL__sub_I_prom_o3+0x428>)
   d5826:	483e      	ldr	r0, [pc, #248]	; (d5920 <_GLOBAL__sub_I_prom_o3+0x434>)
   d5828:	f006 ff0b 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d582c:	4a12      	ldr	r2, [pc, #72]	; (d5878 <_GLOBAL__sub_I_prom_o3+0x38c>)
   d582e:	493b      	ldr	r1, [pc, #236]	; (d591c <_GLOBAL__sub_I_prom_o3+0x430>)
   d5830:	483b      	ldr	r0, [pc, #236]	; (d5920 <_GLOBAL__sub_I_prom_o3+0x434>)
   d5832:	f008 fef5 	bl	de620 <__aeabi_atexit>
    "FRAM",
    "AM2315",
    "MPL3115",
    "TSL2591",
    "ADS1115"
};
   d5836:	493b      	ldr	r1, [pc, #236]	; (d5924 <_GLOBAL__sub_I_prom_o3+0x438>)
   d5838:	483b      	ldr	r0, [pc, #236]	; (d5928 <_GLOBAL__sub_I_prom_o3+0x43c>)
   d583a:	f006 ff02 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d583e:	493b      	ldr	r1, [pc, #236]	; (d592c <_GLOBAL__sub_I_prom_o3+0x440>)
   d5840:	483b      	ldr	r0, [pc, #236]	; (d5930 <_GLOBAL__sub_I_prom_o3+0x444>)
   d5842:	f006 fefe 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d5846:	493b      	ldr	r1, [pc, #236]	; (d5934 <_GLOBAL__sub_I_prom_o3+0x448>)
   d5848:	483b      	ldr	r0, [pc, #236]	; (d5938 <_GLOBAL__sub_I_prom_o3+0x44c>)
   d584a:	f006 fefa 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d584e:	493b      	ldr	r1, [pc, #236]	; (d593c <_GLOBAL__sub_I_prom_o3+0x450>)
   d5850:	483b      	ldr	r0, [pc, #236]	; (d5940 <_GLOBAL__sub_I_prom_o3+0x454>)
   d5852:	f006 fef6 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d5856:	493b      	ldr	r1, [pc, #236]	; (d5944 <_GLOBAL__sub_I_prom_o3+0x458>)
   d5858:	483b      	ldr	r0, [pc, #236]	; (d5948 <_GLOBAL__sub_I_prom_o3+0x45c>)
   d585a:	f006 fef2 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d585e:	493b      	ldr	r1, [pc, #236]	; (d594c <_GLOBAL__sub_I_prom_o3+0x460>)
   d5860:	483b      	ldr	r0, [pc, #236]	; (d5950 <_GLOBAL__sub_I_prom_o3+0x464>)
   d5862:	f006 feee 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d5866:	493b      	ldr	r1, [pc, #236]	; (d5954 <_GLOBAL__sub_I_prom_o3+0x468>)
   d5868:	483b      	ldr	r0, [pc, #236]	; (d5958 <_GLOBAL__sub_I_prom_o3+0x46c>)
   d586a:	f006 feea 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d586e:	493b      	ldr	r1, [pc, #236]	; (d595c <_GLOBAL__sub_I_prom_o3+0x470>)
   d5870:	483b      	ldr	r0, [pc, #236]	; (d5960 <_GLOBAL__sub_I_prom_o3+0x474>)
   d5872:	f006 fee6 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d5876:	e077      	b.n	d5968 <_GLOBAL__sub_I_prom_o3+0x47c>
   d5878:	2003bc08 	.word	0x2003bc08
   d587c:	000d41db 	.word	0x000d41db
   d5880:	2003c440 	.word	0x2003c440
   d5884:	2003bc0c 	.word	0x2003bc0c
   d5888:	000e4cc3 	.word	0x000e4cc3
   d588c:	2003c4e8 	.word	0x2003c4e8
   d5890:	000d92c1 	.word	0x000d92c1
   d5894:	2003bcf8 	.word	0x2003bcf8
   d5898:	000e48f0 	.word	0x000e48f0
   d589c:	2003bc10 	.word	0x2003bc10
   d58a0:	2003c1f0 	.word	0x2003c1f0
   d58a4:	02faf080 	.word	0x02faf080
   d58a8:	000d606d 	.word	0x000d606d
   d58ac:	2003c17c 	.word	0x2003c17c
   d58b0:	000d40d5 	.word	0x000d40d5
   d58b4:	000d42b5 	.word	0x000d42b5
   d58b8:	000d40c5 	.word	0x000d40c5
   d58bc:	2003bc38 	.word	0x2003bc38
   d58c0:	000d4385 	.word	0x000d4385
   d58c4:	000d4135 	.word	0x000d4135
   d58c8:	2003c3f4 	.word	0x2003c3f4
   d58cc:	000d4a45 	.word	0x000d4a45
   d58d0:	2003c388 	.word	0x2003c388
   d58d4:	2003c520 	.word	0x2003c520
   d58d8:	2003db24 	.word	0x2003db24
   d58dc:	2003db6c 	.word	0x2003db6c
   d58e0:	3c343958 	.word	0x3c343958
   d58e4:	3fbef9db 	.word	0x3fbef9db
   d58e8:	2003dba8 	.word	0x2003dba8
   d58ec:	2003dbb4 	.word	0x2003dbb4
   d58f0:	2003dbbc 	.word	0x2003dbbc
   d58f4:	2003dbcc 	.word	0x2003dbcc
   d58f8:	000d4173 	.word	0x000d4173
   d58fc:	000d4151 	.word	0x000d4151
   d5900:	000d41ad 	.word	0x000d41ad
   d5904:	2003c324 	.word	0x2003c324
   d5908:	000d4129 	.word	0x000d4129
   d590c:	2003c3ac 	.word	0x2003c3ac
   d5910:	2003c19c 	.word	0x2003c19c
   d5914:	000e52f7 	.word	0x000e52f7
   d5918:	2003c430 	.word	0x2003c430
   d591c:	000dc5b5 	.word	0x000dc5b5
   d5920:	2003c4a8 	.word	0x2003c4a8
   d5924:	000e4ccb 	.word	0x000e4ccb
   d5928:	2003bc68 	.word	0x2003bc68
   d592c:	000e4ccf 	.word	0x000e4ccf
   d5930:	2003bc78 	.word	0x2003bc78
   d5934:	000e4cd3 	.word	0x000e4cd3
   d5938:	2003bc88 	.word	0x2003bc88
   d593c:	000e4cde 	.word	0x000e4cde
   d5940:	2003bc98 	.word	0x2003bc98
   d5944:	000e4ce2 	.word	0x000e4ce2
   d5948:	2003bca8 	.word	0x2003bca8
   d594c:	000e4ce7 	.word	0x000e4ce7
   d5950:	2003bcb8 	.word	0x2003bcb8
   d5954:	000e4cee 	.word	0x000e4cee
   d5958:	2003bcc8 	.word	0x2003bcc8
   d595c:	000e4cf6 	.word	0x000e4cf6
   d5960:	2003bcd8 	.word	0x2003bcd8
   d5964:	000d40d1 	.word	0x000d40d1
   d5968:	4907      	ldr	r1, [pc, #28]	; (d5988 <_GLOBAL__sub_I_prom_o3+0x49c>)
   d596a:	4808      	ldr	r0, [pc, #32]	; (d598c <_GLOBAL__sub_I_prom_o3+0x4a0>)
   d596c:	f006 fe69 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>

String deviceStatus;
String i2cDevices;
bool resetDevice = false;

String i2cNames[] =// arreglo con los nombres de dispositivos i2c
   d5970:	4a07      	ldr	r2, [pc, #28]	; (d5990 <_GLOBAL__sub_I_prom_o3+0x4a4>)
   d5972:	4908      	ldr	r1, [pc, #32]	; (d5994 <_GLOBAL__sub_I_prom_o3+0x4a8>)
   d5974:	4628      	mov	r0, r5
   d5976:	f008 fe53 	bl	de620 <__aeabi_atexit>
  else
  {
    DEBUG_PRINTLN("Particle connected");
  }
}
Adafruit_ADS1115 ads;//ads1115 con direccion default
   d597a:	2148      	movs	r1, #72	; 0x48
   d597c:	4806      	ldr	r0, [pc, #24]	; (d5998 <_GLOBAL__sub_I_prom_o3+0x4ac>)
   d597e:	f000 fd65 	bl	d644c <_ZN16Adafruit_ADS1115C1Eh>
        return pm10;		

    }
    last = now_10;
  }
}
   d5982:	b00a      	add	sp, #40	; 0x28
   d5984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5988:	000e4cfe 	.word	0x000e4cfe
   d598c:	2003bce8 	.word	0x2003bce8
   d5990:	2003bc08 	.word	0x2003bc08
   d5994:	000d4109 	.word	0x000d4109
   d5998:	2003bc20 	.word	0x2003bc20

000d599c <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d599c:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d599e:	f005 fd3f 	bl	db420 <HAL_Pin_Map>
   d59a2:	4b01      	ldr	r3, [pc, #4]	; (d59a8 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d59a4:	6018      	str	r0, [r3, #0]
   d59a6:	bd08      	pop	{r3, pc}
   d59a8:	2003dbd8 	.word	0x2003dbd8

000d59ac <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d59ac:	f005 bd38 	b.w	db420 <HAL_Pin_Map>

000d59b0 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d59b0:	7c03      	ldrb	r3, [r0, #16]
   d59b2:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d59b6:	4602      	mov	r2, r0
   d59b8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d59bc:	b12b      	cbz	r3, d59ca <_ZN4File9availableEv+0x1a>
   d59be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d59c0:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d59c2:	1a18      	subs	r0, r3, r0
   d59c4:	bf48      	it	mi
   d59c6:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d59ca:	4770      	bx	lr

000d59cc <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d59cc:	4770      	bx	lr

000d59ce <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d59ce:	3010      	adds	r0, #16
   d59d0:	f002 b814 	b.w	d79fc <_ZN7FatFile4syncEv>

000d59d4 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d59d4:	3010      	adds	r0, #16
   d59d6:	f001 beeb 	b.w	d77b0 <_ZN7FatFile4peekEv>

000d59da <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d59da:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d59dc:	2201      	movs	r2, #1
   d59de:	f10d 0107 	add.w	r1, sp, #7
   d59e2:	3010      	adds	r0, #16
   d59e4:	f001 fe31 	bl	d764a <_ZN7FatFile4readEPvj>
   d59e8:	2801      	cmp	r0, #1
   d59ea:	bf0c      	ite	eq
   d59ec:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d59f0:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d59f4:	b003      	add	sp, #12
   d59f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d59fa <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d59fa:	3010      	adds	r0, #16
   d59fc:	f002 b96c 	b.w	d7cd8 <_ZN7FatFile5writeEPKvj>

000d5a00 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d5a00:	b507      	push	{r0, r1, r2, lr}
   d5a02:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d5a04:	2201      	movs	r2, #1
   d5a06:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d5a0a:	3010      	adds	r0, #16
   d5a0c:	4619      	mov	r1, r3
   d5a0e:	f002 f963 	bl	d7cd8 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d5a12:	b003      	add	sp, #12
   d5a14:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a18 <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d5a18:	b510      	push	{r4, lr}
   d5a1a:	2134      	movs	r1, #52	; 0x34
   d5a1c:	4604      	mov	r4, r0
   d5a1e:	f008 fe0d 	bl	de63c <_ZdlPvj>
   d5a22:	4620      	mov	r0, r4
   d5a24:	bd10      	pop	{r4, pc}
	...

000d5a28 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d5a28:	b530      	push	{r4, r5, lr}
   d5a2a:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5a2c:	4b1c      	ldr	r3, [pc, #112]	; (d5aa0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d5a2e:	9300      	str	r3, [sp, #0]
   d5a30:	7913      	ldrb	r3, [r2, #4]
   d5a32:	f88d 3004 	strb.w	r3, [sp, #4]
   d5a36:	6893      	ldr	r3, [r2, #8]
   d5a38:	9302      	str	r3, [sp, #8]
   d5a3a:	7b13      	ldrb	r3, [r2, #12]
   d5a3c:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5a40:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d5a44:	7b53      	ldrb	r3, [r2, #13]
   d5a46:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d5a4a:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5a4c:	460a      	mov	r2, r1
   d5a4e:	466b      	mov	r3, sp
   d5a50:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d5a54:	4628      	mov	r0, r5
   d5a56:	f002 fc87 	bl	d8368 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d5a5a:	b1f0      	cbz	r0, d5a9a <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d5a5c:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d5a5e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d5a62:	4628      	mov	r0, r5
   d5a64:	f002 f800 	bl	d7a68 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d5a68:	2101      	movs	r1, #1
   d5a6a:	4620      	mov	r0, r4
   d5a6c:	f002 fb25 	bl	d80ba <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d5a70:	4601      	mov	r1, r0
   d5a72:	b168      	cbz	r0, d5a90 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d5a74:	4621      	mov	r1, r4
   d5a76:	4628      	mov	r0, r5
   d5a78:	f001 fdcf 	bl	d761a <_ZN7FatFile8openRootEP9FatVolume>
   d5a7c:	b168      	cbz	r0, d5a9a <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d5a7e:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d5a82:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d5a86:	bf16      	itet	ne
   d5a88:	4b06      	ldrne	r3, [pc, #24]	; (d5aa4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d5a8a:	4618      	moveq	r0, r3
   d5a8c:	601d      	strne	r5, [r3, #0]
   d5a8e:	e005      	b.n	d5a9c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d5a90:	4620      	mov	r0, r4
   d5a92:	f002 fb12 	bl	d80ba <_ZN9FatVolume4initEh>
   d5a96:	2800      	cmp	r0, #0
   d5a98:	d1ec      	bne.n	d5a74 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d5a9a:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d5a9c:	b005      	add	sp, #20
   d5a9e:	bd30      	pop	{r4, r5, pc}
   d5aa0:	000e48f0 	.word	0x000e48f0
   d5aa4:	2003e098 	.word	0x2003e098

000d5aa8 <_ZN7IoTNodeC1Ev>:
// Create FRAM instances
#define PART_NUMBER MB85RC256V


// Constructor
IoTNode::IoTNode() : myFram(PART_NUMBER)
   d5aa8:	b510      	push	{r4, lr}
   d5aaa:	4906      	ldr	r1, [pc, #24]	; (d5ac4 <_ZN7IoTNodeC1Ev+0x1c>)
   d5aac:	4604      	mov	r4, r0
   d5aae:	f006 fdc8 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d5ab2:	2363      	movs	r3, #99	; 0x63
   d5ab4:	7423      	strb	r3, [r4, #16]
   d5ab6:	2105      	movs	r1, #5
   d5ab8:	f104 0014 	add.w	r0, r4, #20
   d5abc:	f005 fa82 	bl	dafc4 <_ZN7FramI2CC1E14framPartNumber>
{

}
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	bd10      	pop	{r4, pc}
   d5ac4:	000e52f7 	.word	0x000e52f7

000d5ac8 <_ZN7IoTNode2okEv>:

}

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool IoTNode::ok()
{
   d5ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
      0x6F, //111
      0x20, //32
      0x57, //87
      0x4D, //77
      0x50 //80
  };
   d5aca:	4b19      	ldr	r3, [pc, #100]	; (d5b30 <_ZN7IoTNode2okEv+0x68>)
   d5acc:	6818      	ldr	r0, [r3, #0]
   d5ace:	791b      	ldrb	r3, [r3, #4]
   d5ad0:	f88d 3004 	strb.w	r3, [sp, #4]
   d5ad4:	9000      	str	r0, [sp, #0]
  if (!Wire.isEnabled())
   d5ad6:	f008 fd7d 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5ada:	f008 f8a6 	bl	ddc2a <_ZN7TwoWire9isEnabledEv>
   d5ade:	b918      	cbnz	r0, d5ae8 <_ZN7IoTNode2okEv+0x20>
  {
    Wire.begin();
   d5ae0:	f008 fd78 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5ae4:	f008 f85c 	bl	ddba0 <_ZN7TwoWire5beginEv>

}

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool IoTNode::ok()
{
   d5ae8:	2400      	movs	r4, #0
  for (int i=0; i<5; ++i)
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAd[i];
   d5aea:	f81d 5004 	ldrb.w	r5, [sp, r4]
    Wire.beginTransmission(address);
   d5aee:	f008 fd71 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5af2:	4629      	mov	r1, r5
   d5af4:	f008 f88b 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d5af8:	f008 fd6c 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5afc:	f008 f892 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

    // Try again if there is an error
    if (!error==0)
   d5b00:	b920      	cbnz	r0, d5b0c <_ZN7IoTNode2okEv+0x44>
  {
    Wire.begin();
  }
  byte error, address;
  bool result = true;
  for (int i=0; i<5; ++i)
   d5b02:	3401      	adds	r4, #1
   d5b04:	2c05      	cmp	r4, #5
   d5b06:	d1f0      	bne.n	d5aea <_ZN7IoTNode2okEv+0x22>
  if (!Wire.isEnabled())
  {
    Wire.begin();
  }
  byte error, address;
  bool result = true;
   d5b08:	2001      	movs	r0, #1
   d5b0a:	e00f      	b.n	d5b2c <_ZN7IoTNode2okEv+0x64>
    error = Wire.endTransmission();

    // Try again if there is an error
    if (!error==0)
    {
      Wire.reset();
   d5b0c:	f008 fd62 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5b10:	f008 f88f 	bl	ddc32 <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d5b14:	f008 fd5e 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5b18:	4629      	mov	r1, r5
   d5b1a:	f008 f878 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d5b1e:	f008 fd59 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5b22:	f008 f87f 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>
    }
 
    // Return false if there is an error
    if (!error == 0)
   d5b26:	2800      	cmp	r0, #0
   d5b28:	d0eb      	beq.n	d5b02 <_ZN7IoTNode2okEv+0x3a>
    {
      result = false;
   d5b2a:	2000      	movs	r0, #0
      break;
    }
  }
  return result;
}
   d5b2c:	b003      	add	sp, #12
   d5b2e:	bd30      	pop	{r4, r5, pc}
   d5b30:	000e4d38 	.word	0x000e4d38

000d5b34 <_ZN7IoTNode10setPowerONE9powerNameb>:
   d5b34:	4801      	ldr	r0, [pc, #4]	; (d5b3c <_ZN7IoTNode10setPowerONE9powerNameb+0x8>)
   d5b36:	f002 bec4 	b.w	d88c2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d5b3a:	bf00      	nop
   d5b3c:	2003dbdd 	.word	0x2003dbdd

000d5b40 <_ZN7IoTNode14tickleWatchdogEv>:
// Note that the WATCHDOG switch must be set to On
// for the watchdog reset to be connected
// See documentation for setting up the watchdog delay
// using the dip switch on the IoT Node board
void IoTNode::tickleWatchdog()
{
   d5b40:	b510      	push	{r4, lr}
  expand.digitalWrite(5,true);
   d5b42:	4c08      	ldr	r4, [pc, #32]	; (d5b64 <_ZN7IoTNode14tickleWatchdogEv+0x24>)
   d5b44:	2201      	movs	r2, #1
   d5b46:	2105      	movs	r1, #5
   d5b48:	4620      	mov	r0, r4
   d5b4a:	f002 feba 	bl	d88c2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
  //delayMicroseconds(100);
  delay(50);
   d5b4e:	2032      	movs	r0, #50	; 0x32
   d5b50:	f007 fa0c 	bl	dcf6c <delay>
  expand.digitalWrite(5,false);
   d5b54:	4620      	mov	r0, r4
   d5b56:	2200      	movs	r2, #0
   d5b58:	2105      	movs	r1, #5
}
   d5b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void IoTNode::tickleWatchdog()
{
  expand.digitalWrite(5,true);
  //delayMicroseconds(100);
  delay(50);
  expand.digitalWrite(5,false);
   d5b5e:	f002 beb0 	b.w	d88c2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d5b62:	bf00      	nop
   d5b64:	2003dbdd 	.word	0x2003dbdd

000d5b68 <_ZN7IoTNode8unixTimeEv>:
}


uint32_t IoTNode::unixTime()
{
  return rtc.rtcNow();
   d5b68:	4801      	ldr	r0, [pc, #4]	; (d5b70 <_ZN7IoTNode8unixTimeEv+0x8>)
   d5b6a:	f000 be39 	b.w	d67e0 <_ZN8MCP7941x6rtcNowEv>
   d5b6e:	bf00      	nop
   d5b70:	2003dbdc 	.word	0x2003dbdc

000d5b74 <_ZN7IoTNode11setUnixTimeEm>:
}

void IoTNode::setUnixTime(uint32_t unixtime)
{
  rtc.setUnixTime(unixtime);
   d5b74:	4801      	ldr	r0, [pc, #4]	; (d5b7c <_ZN7IoTNode11setUnixTimeEm+0x8>)
   d5b76:	f000 bdea 	b.w	d674e <_ZN8MCP7941x11setUnixTimeEm>
   d5b7a:	bf00      	nop
   d5b7c:	2003dbdc 	.word	0x2003dbdc

000d5b80 <_ZN7IoTNode15array_to_stringEPhjPc>:


// Private

void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
   d5b80:	b530      	push	{r4, r5, lr}
    for (unsigned int i = 0; i < len; i++)
   d5b82:	2400      	movs	r4, #0
   d5b84:	4294      	cmp	r4, r2
   d5b86:	d012      	beq.n	d5bae <_ZN7IoTNode15array_to_stringEPhjPc+0x2e>
    {
        byte nib1 = (array[i] >> 4) & 0x0F;
   d5b88:	5d08      	ldrb	r0, [r1, r4]
   d5b8a:	0905      	lsrs	r5, r0, #4
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
   d5b8c:	2d09      	cmp	r5, #9
void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
    for (unsigned int i = 0; i < len; i++)
    {
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
   d5b8e:	f000 000f 	and.w	r0, r0, #15
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
   d5b92:	bf94      	ite	ls
   d5b94:	3530      	addls	r5, #48	; 0x30
   d5b96:	3537      	addhi	r5, #55	; 0x37
   d5b98:	f803 5014 	strb.w	r5, [r3, r4, lsl #1]
        buffer[i*2+1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
   d5b9c:	2809      	cmp	r0, #9
   d5b9e:	eb03 0544 	add.w	r5, r3, r4, lsl #1
   d5ba2:	bf94      	ite	ls
   d5ba4:	3030      	addls	r0, #48	; 0x30
   d5ba6:	3037      	addhi	r0, #55	; 0x37
   d5ba8:	7068      	strb	r0, [r5, #1]

// Private

void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
    for (unsigned int i = 0; i < len; i++)
   d5baa:	3401      	adds	r4, #1
   d5bac:	e7ea      	b.n	d5b84 <_ZN7IoTNode15array_to_stringEPhjPc+0x4>
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
        buffer[i*2+1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
    }
    buffer[len*2] = '\0';
   d5bae:	2200      	movs	r2, #0
   d5bb0:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
   d5bb4:	bd30      	pop	{r4, r5, pc}
	...

000d5bb8 <_ZN7IoTNode5beginEv>:
{

}

bool IoTNode::begin()
{
   d5bb8:	b530      	push	{r4, r5, lr}
   d5bba:	b08d      	sub	sp, #52	; 0x34
   d5bbc:	4605      	mov	r5, r0
  if (!Wire.isEnabled())
   d5bbe:	f008 fd09 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5bc2:	f008 f832 	bl	ddc2a <_ZN7TwoWire9isEnabledEv>
   d5bc6:	b918      	cbnz	r0, d5bd0 <_ZN7IoTNode5beginEv+0x18>
  {
    Wire.begin();
   d5bc8:	f008 fd04 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5bcc:	f007 ffe8 	bl	ddba0 <_ZN7TwoWire5beginEv>
  }
  delay(20);
   d5bd0:	2014      	movs	r0, #20
   d5bd2:	f007 f9cb 	bl	dcf6c <delay>

  // The i2c_scanner uses the return value of
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  address = 0x20; // MCP23017 address
  Wire.beginTransmission(address);
   d5bd6:	f008 fcfd 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5bda:	2120      	movs	r1, #32
   d5bdc:	f008 f817 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>
  error = Wire.endTransmission();
   d5be0:	f008 fcf8 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5be4:	f008 f81e 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

  // Try again if there is an error
  if (!error==0)
   d5be8:	b180      	cbz	r0, d5c0c <_ZN7IoTNode5beginEv+0x54>
  {
    Wire.reset();
   d5bea:	f008 fcf3 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5bee:	f008 f820 	bl	ddc32 <_ZN7TwoWire5resetEv>
    Wire.beginTransmission(address);
   d5bf2:	f008 fcef 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5bf6:	2120      	movs	r1, #32
   d5bf8:	f008 f809 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d5bfc:	f008 fcea 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d5c00:	f008 f810 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>
  }

  // Return false if there is an error
  if (!error == 0)
   d5c04:	fab0 f480 	clz	r4, r0
   d5c08:	0964      	lsrs	r4, r4, #5
   d5c0a:	e000      	b.n	d5c0e <_ZN7IoTNode5beginEv+0x56>
  {
    Wire.begin();
  }
  delay(20);
  byte error, address;
  bool result = true;
   d5c0c:	2401      	movs	r4, #1
  {
    result = false;
  }
  

  expand.begin();
   d5c0e:	4861      	ldr	r0, [pc, #388]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c10:	f002 fe48 	bl	d88a4 <_ZN17Adafruit_MCP230175beginEv>
  //Set pin direction 1 = out, 0 = in
  //PORT_A,0b10111111 | PORT_B,0b00001111
  expand.pinMode(0,OUTPUT);
   d5c14:	2201      	movs	r2, #1
   d5c16:	2100      	movs	r1, #0
   d5c18:	485e      	ldr	r0, [pc, #376]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c1a:	f002 fe46 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(1,OUTPUT);
   d5c1e:	2201      	movs	r2, #1
   d5c20:	4611      	mov	r1, r2
   d5c22:	485c      	ldr	r0, [pc, #368]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c24:	f002 fe41 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(2,OUTPUT);
   d5c28:	2201      	movs	r2, #1
   d5c2a:	2102      	movs	r1, #2
   d5c2c:	4859      	ldr	r0, [pc, #356]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c2e:	f002 fe3c 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(3,OUTPUT);
   d5c32:	2201      	movs	r2, #1
   d5c34:	2103      	movs	r1, #3
   d5c36:	4857      	ldr	r0, [pc, #348]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c38:	f002 fe37 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(4,OUTPUT);
   d5c3c:	2201      	movs	r2, #1
   d5c3e:	2104      	movs	r1, #4
   d5c40:	4854      	ldr	r0, [pc, #336]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c42:	f002 fe32 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(5,OUTPUT);
   d5c46:	2201      	movs	r2, #1
   d5c48:	2105      	movs	r1, #5
   d5c4a:	4852      	ldr	r0, [pc, #328]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c4c:	f002 fe2d 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(6,INPUT);
   d5c50:	2200      	movs	r2, #0
   d5c52:	2106      	movs	r1, #6
   d5c54:	484f      	ldr	r0, [pc, #316]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c56:	f002 fe28 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(7,OUTPUT);
   d5c5a:	2201      	movs	r2, #1
   d5c5c:	2107      	movs	r1, #7
   d5c5e:	484d      	ldr	r0, [pc, #308]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c60:	f002 fe23 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(8,INPUT);
   d5c64:	2200      	movs	r2, #0
   d5c66:	2108      	movs	r1, #8
   d5c68:	484a      	ldr	r0, [pc, #296]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c6a:	f002 fe1e 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(9,INPUT);
   d5c6e:	2200      	movs	r2, #0
   d5c70:	2109      	movs	r1, #9
   d5c72:	4848      	ldr	r0, [pc, #288]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c74:	f002 fe19 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(10,INPUT);
   d5c78:	2200      	movs	r2, #0
   d5c7a:	210a      	movs	r1, #10
   d5c7c:	4845      	ldr	r0, [pc, #276]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c7e:	f002 fe14 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(11,INPUT);
   d5c82:	2200      	movs	r2, #0
   d5c84:	210b      	movs	r1, #11
   d5c86:	4843      	ldr	r0, [pc, #268]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c88:	f002 fe0f 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(12,INPUT);
   d5c8c:	2200      	movs	r2, #0
   d5c8e:	210c      	movs	r1, #12
   d5c90:	4840      	ldr	r0, [pc, #256]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c92:	f002 fe0a 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(13,INPUT);
   d5c96:	2200      	movs	r2, #0
   d5c98:	210d      	movs	r1, #13
   d5c9a:	483e      	ldr	r0, [pc, #248]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5c9c:	f002 fe05 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(14,INPUT);
   d5ca0:	2200      	movs	r2, #0
   d5ca2:	210e      	movs	r1, #14
   d5ca4:	483b      	ldr	r0, [pc, #236]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5ca6:	f002 fe00 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(15,INPUT);
   d5caa:	2200      	movs	r2, #0
   d5cac:	210f      	movs	r1, #15
   d5cae:	4839      	ldr	r0, [pc, #228]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5cb0:	f002 fdfb 	bl	d88aa <_ZN17Adafruit_MCP230177pinModeEhh>

  expand.pullUp(0,HIGH);
   d5cb4:	2201      	movs	r2, #1
   d5cb6:	2100      	movs	r1, #0
   d5cb8:	4836      	ldr	r0, [pc, #216]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5cba:	f002 fe1f 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(1,HIGH);
   d5cbe:	2201      	movs	r2, #1
   d5cc0:	4611      	mov	r1, r2
   d5cc2:	4834      	ldr	r0, [pc, #208]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5cc4:	f002 fe1a 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(2,HIGH);
   d5cc8:	2201      	movs	r2, #1
   d5cca:	2102      	movs	r1, #2
   d5ccc:	4831      	ldr	r0, [pc, #196]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5cce:	f002 fe15 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(3,HIGH);
   d5cd2:	2201      	movs	r2, #1
   d5cd4:	2103      	movs	r1, #3
   d5cd6:	482f      	ldr	r0, [pc, #188]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5cd8:	f002 fe10 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(4,HIGH);
   d5cdc:	2201      	movs	r2, #1
   d5cde:	2104      	movs	r1, #4
   d5ce0:	482c      	ldr	r0, [pc, #176]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5ce2:	f002 fe0b 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(5,HIGH);
   d5ce6:	2201      	movs	r2, #1
   d5ce8:	2105      	movs	r1, #5
   d5cea:	482a      	ldr	r0, [pc, #168]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5cec:	f002 fe06 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(6,HIGH);
   d5cf0:	2201      	movs	r2, #1
   d5cf2:	2106      	movs	r1, #6
   d5cf4:	4827      	ldr	r0, [pc, #156]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5cf6:	f002 fe01 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(7,HIGH);
   d5cfa:	2201      	movs	r2, #1
   d5cfc:	2107      	movs	r1, #7
   d5cfe:	4825      	ldr	r0, [pc, #148]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5d00:	f002 fdfc 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(8,HIGH);
   d5d04:	2201      	movs	r2, #1
   d5d06:	2108      	movs	r1, #8
   d5d08:	4822      	ldr	r0, [pc, #136]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5d0a:	f002 fdf7 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(9,HIGH);
   d5d0e:	2201      	movs	r2, #1
   d5d10:	2109      	movs	r1, #9
   d5d12:	4820      	ldr	r0, [pc, #128]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5d14:	f002 fdf2 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(10,HIGH);
   d5d18:	2201      	movs	r2, #1
   d5d1a:	210a      	movs	r1, #10
   d5d1c:	481d      	ldr	r0, [pc, #116]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5d1e:	f002 fded 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(11,HIGH); 
   d5d22:	2201      	movs	r2, #1
   d5d24:	210b      	movs	r1, #11
   d5d26:	481b      	ldr	r0, [pc, #108]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5d28:	f002 fde8 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(12,HIGH);
   d5d2c:	2201      	movs	r2, #1
   d5d2e:	210c      	movs	r1, #12
   d5d30:	4818      	ldr	r0, [pc, #96]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5d32:	f002 fde3 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(13,HIGH);
   d5d36:	2201      	movs	r2, #1
   d5d38:	210d      	movs	r1, #13
   d5d3a:	4816      	ldr	r0, [pc, #88]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5d3c:	f002 fdde 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(14,HIGH);
   d5d40:	2201      	movs	r2, #1
   d5d42:	210e      	movs	r1, #14
   d5d44:	4813      	ldr	r0, [pc, #76]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5d46:	f002 fdd9 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(15,HIGH);
   d5d4a:	2201      	movs	r2, #1
   d5d4c:	210f      	movs	r1, #15
   d5d4e:	4811      	ldr	r0, [pc, #68]	; (d5d94 <_ZN7IoTNode5beginEv+0x1dc>)
   d5d50:	f002 fdd4 	bl	d88fc <_ZN17Adafruit_MCP230176pullUpEhh>

  // Get node ID from MCP79412 EUI-64 node address
  byte nodeHex[8] = "";
   d5d54:	2100      	movs	r1, #0
  char nodeHexStr[17] = "";
   d5d56:	220d      	movs	r2, #13
   d5d58:	a808      	add	r0, sp, #32
  expand.pullUp(13,HIGH);
  expand.pullUp(14,HIGH);
  expand.pullUp(15,HIGH);

  // Get node ID from MCP79412 EUI-64 node address
  byte nodeHex[8] = "";
   d5d5a:	9101      	str	r1, [sp, #4]
   d5d5c:	9102      	str	r1, [sp, #8]
  char nodeHexStr[17] = "";
   d5d5e:	9107      	str	r1, [sp, #28]
   d5d60:	f00b fc0a 	bl	e1578 <memset>
  rtc.getMacAddress(nodeHex);
   d5d64:	a901      	add	r1, sp, #4
   d5d66:	480c      	ldr	r0, [pc, #48]	; (d5d98 <_ZN7IoTNode5beginEv+0x1e0>)
   d5d68:	f000 fbb0 	bl	d64cc <_ZN8MCP7941x13getMacAddressEPh>
  array_to_string(nodeHex, 8, nodeHexStr);
   d5d6c:	ab07      	add	r3, sp, #28
   d5d6e:	2208      	movs	r2, #8
   d5d70:	a901      	add	r1, sp, #4
   d5d72:	4628      	mov	r0, r5
   d5d74:	f7ff ff04 	bl	d5b80 <_ZN7IoTNode15array_to_stringEPhjPc>
  nodeID = String(nodeHexStr);
   d5d78:	a907      	add	r1, sp, #28
   d5d7a:	a803      	add	r0, sp, #12
   d5d7c:	f006 fc61 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
   d5d80:	a903      	add	r1, sp, #12
   d5d82:	4628      	mov	r0, r5
   d5d84:	f006 fca7 	bl	dc6d6 <_ZN6StringaSEOS_>
   d5d88:	a803      	add	r0, sp, #12
   d5d8a:	f006 fc13 	bl	dc5b4 <_ZN6StringD1Ev>
  return result;

}
   d5d8e:	4620      	mov	r0, r4
   d5d90:	b00d      	add	sp, #52	; 0x34
   d5d92:	bd30      	pop	{r4, r5, pc}
   d5d94:	2003dbdd 	.word	0x2003dbdd
   d5d98:	2003dbdc 	.word	0x2003dbdc

000d5d9c <_ZN9framArrayC1ER7FramI2CmhR10framResult>:
}

//////////////////

// Fram Array Constructor
framArray::framArray(FramI2C& fram, uint32_t numberOfElements, byte sizeOfElement, framResult& result):
   d5d9c:	b513      	push	{r0, r1, r4, lr}
   d5d9e:	4604      	mov	r4, r0
   d5da0:	9804      	ldr	r0, [sp, #16]
  _numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), myFram(fram), myResult(result),
  myArray(fram, _numberOfElements, _sizeOfElement, result)
   d5da2:	60e0      	str	r0, [r4, #12]
   d5da4:	9000      	str	r0, [sp, #0]
   d5da6:	6022      	str	r2, [r4, #0]
   d5da8:	7123      	strb	r3, [r4, #4]
   d5daa:	60a1      	str	r1, [r4, #8]
   d5dac:	f104 0010 	add.w	r0, r4, #16
   d5db0:	f005 f9fc 	bl	db1ac <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult>
{

}
   d5db4:	4620      	mov	r0, r4
   d5db6:	b002      	add	sp, #8
   d5db8:	bd10      	pop	{r4, pc}

000d5dba <_ZN7IoTNode13makeFramArrayEmh>:

framArray IoTNode::makeFramArray(uint32_t numberOfElements, byte sizeOfElement)
{
   d5dba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return framArray(myFram, numberOfElements,sizeOfElement, myResult);
   d5dbc:	f101 0510 	add.w	r5, r1, #16
   d5dc0:	9500      	str	r5, [sp, #0]
   d5dc2:	3114      	adds	r1, #20
{

}

framArray IoTNode::makeFramArray(uint32_t numberOfElements, byte sizeOfElement)
{
   d5dc4:	4604      	mov	r4, r0
  return framArray(myFram, numberOfElements,sizeOfElement, myResult);
   d5dc6:	f7ff ffe9 	bl	d5d9c <_ZN9framArrayC1ER7FramI2CmhR10framResult>
}
   d5dca:	4620      	mov	r0, r4
   d5dcc:	b003      	add	sp, #12
   d5dce:	bd30      	pop	{r4, r5, pc}

000d5dd0 <_ZN9framArray5writeEmPh>:

bool framArray::write(uint32_t index, byte *buffer)
{
   d5dd0:	b513      	push	{r0, r1, r4, lr}
  framResult checkResult = framUnknownError;
   d5dd2:	ab02      	add	r3, sp, #8
   d5dd4:	2463      	movs	r4, #99	; 0x63
   d5dd6:	f803 4d01 	strb.w	r4, [r3, #-1]!
  myArray.writeElement(index, buffer, checkResult);
   d5dda:	3010      	adds	r0, #16
   d5ddc:	f005 fa11 	bl	db202 <_ZN12FramI2CArray12writeElementEmPhR10framResult>
  if (checkResult==framOK)
   d5de0:	f89d 0007 	ldrb.w	r0, [sp, #7]
  else
  {
    return false;
  }
  
}
   d5de4:	fab0 f080 	clz	r0, r0
   d5de8:	0940      	lsrs	r0, r0, #5
   d5dea:	b002      	add	sp, #8
   d5dec:	bd10      	pop	{r4, pc}

000d5dee <_ZN9framArray4readEmPh>:

bool framArray::read(uint32_t index, byte *buffer)
{
   d5dee:	b513      	push	{r0, r1, r4, lr}
  framResult checkResult = framUnknownError;
   d5df0:	ab02      	add	r3, sp, #8
   d5df2:	2463      	movs	r4, #99	; 0x63
   d5df4:	f803 4d01 	strb.w	r4, [r3, #-1]!
  myArray.readElement(index, buffer, checkResult);
   d5df8:	3010      	adds	r0, #16
   d5dfa:	f005 f9ec 	bl	db1d6 <_ZN12FramI2CArray11readElementEmPhR10framResult>
  if (checkResult==framOK)
   d5dfe:	f89d 0007 	ldrb.w	r0, [sp, #7]
  else
  {
    return false;
  }
  
}
   d5e02:	fab0 f080 	clz	r0, r0
   d5e06:	0940      	lsrs	r0, r0, #5
   d5e08:	b002      	add	sp, #8
   d5e0a:	bd10      	pop	{r4, pc}

000d5e0c <_ZN8framRingC1ER7FramI2CmhR10framResult>:


//////////////////

// Fram Ring Array Constructor
framRing::framRing(FramI2C& fram, uint32_t numberOfElements, byte sizeOfElement, framResult& result):
   d5e0c:	b513      	push	{r0, r1, r4, lr}
   d5e0e:	4604      	mov	r4, r0
   d5e10:	9804      	ldr	r0, [sp, #16]
  _numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), myFram(fram), myResult(result),
  myRing(fram, _numberOfElements, _sizeOfElement, result)
   d5e12:	60e0      	str	r0, [r4, #12]
   d5e14:	9000      	str	r0, [sp, #0]
   d5e16:	6022      	str	r2, [r4, #0]
   d5e18:	7123      	strb	r3, [r4, #4]
   d5e1a:	60a1      	str	r1, [r4, #8]
   d5e1c:	f104 0010 	add.w	r0, r4, #16
   d5e20:	f005 fa05 	bl	db22e <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult>
{

}
   d5e24:	4620      	mov	r0, r4
   d5e26:	b002      	add	sp, #8
   d5e28:	bd10      	pop	{r4, pc}

000d5e2a <_ZN7IoTNode12makeFramRingEmh>:

framRing IoTNode::makeFramRing(uint32_t numberOfElements, byte sizeOfElement)
{
   d5e2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return framRing(myFram, numberOfElements,sizeOfElement, myResult);
   d5e2c:	f101 0510 	add.w	r5, r1, #16
   d5e30:	9500      	str	r5, [sp, #0]
   d5e32:	3114      	adds	r1, #20
{

}

framRing IoTNode::makeFramRing(uint32_t numberOfElements, byte sizeOfElement)
{
   d5e34:	4604      	mov	r4, r0
  return framRing(myFram, numberOfElements,sizeOfElement, myResult);
   d5e36:	f7ff ffe9 	bl	d5e0c <_ZN8framRingC1ER7FramI2CmhR10framResult>
}
   d5e3a:	4620      	mov	r0, r4
   d5e3c:	b003      	add	sp, #12
   d5e3e:	bd30      	pop	{r4, r5, pc}

000d5e40 <_ZN8framRing10initializeEv>:

void framRing::initialize()
{
  myRing.initialize();
   d5e40:	3010      	adds	r0, #16
   d5e42:	f005 ba2c 	b.w	db29e <_ZN14Ring_FramArray10initializeEv>
	...

000d5e48 <_GLOBAL__sub_I_expand>:
}

bool framRing::isFull()
{
  return myRing.isFull();
}
   d5e48:	b570      	push	{r4, r5, r6, lr}
   d5e4a:	f005 fae9 	bl	db420 <HAL_Pin_Map>

#include "IoTNode.h"

Adafruit_MCP23017 expand;

MCP7941x rtc = MCP7941x();
   d5e4e:	481e      	ldr	r0, [pc, #120]	; (d5ec8 <_GLOBAL__sub_I_expand+0x80>)
   d5e50:	4e1e      	ldr	r6, [pc, #120]	; (d5ecc <_GLOBAL__sub_I_expand+0x84>)
   d5e52:	f000 fb3a 	bl	d64ca <_ZN8MCP7941xC1Ev>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5e56:	481e      	ldr	r0, [pc, #120]	; (d5ed0 <_GLOBAL__sub_I_expand+0x88>)

File myFile;
   d5e58:	4a1e      	ldr	r2, [pc, #120]	; (d5ed4 <_GLOBAL__sub_I_expand+0x8c>)
   d5e5a:	491f      	ldr	r1, [pc, #124]	; (d5ed8 <_GLOBAL__sub_I_expand+0x90>)
   d5e5c:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e62:	7404      	strb	r4, [r0, #16]
   d5e64:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5e66:	6044      	str	r4, [r0, #4]
   d5e68:	6083      	str	r3, [r0, #8]
 public:
  File() {}
   d5e6a:	4b1c      	ldr	r3, [pc, #112]	; (d5edc <_GLOBAL__sub_I_expand+0x94>)
   d5e6c:	6003      	str	r3, [r0, #0]
   d5e6e:	f008 fbd7 	bl	de620 <__aeabi_atexit>
   d5e72:	4b1b      	ldr	r3, [pc, #108]	; (d5ee0 <_GLOBAL__sub_I_expand+0x98>)
   d5e74:	6831      	ldr	r1, [r6, #0]
   d5e76:	71dc      	strb	r4, [r3, #7]
   d5e78:	2264      	movs	r2, #100	; 0x64
   d5e7a:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5e7e:	4a19      	ldr	r2, [pc, #100]	; (d5ee4 <_GLOBAL__sub_I_expand+0x9c>)
   d5e80:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d5e84:	2201      	movs	r2, #1
   d5e86:	ea11 0502 	ands.w	r5, r1, r2
   d5e8a:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d5e8e:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d5e92:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d5e96:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d5e9a:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d5e9e:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d5ea2:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
   d5ea6:	461c      	mov	r4, r3
   d5ea8:	d10a      	bne.n	d5ec0 <_GLOBAL__sub_I_expand+0x78>
   d5eaa:	4630      	mov	r0, r6
   d5eac:	f7fe f8fd 	bl	d40aa <__cxa_guard_acquire>
   d5eb0:	b130      	cbz	r0, d5ec0 <_GLOBAL__sub_I_expand+0x78>
   d5eb2:	4629      	mov	r1, r5
   d5eb4:	480c      	ldr	r0, [pc, #48]	; (d5ee8 <_GLOBAL__sub_I_expand+0xa0>)
   d5eb6:	f005 ff15 	bl	dbce4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5eba:	4630      	mov	r0, r6
   d5ebc:	f7fe f8fa 	bl	d40b4 <__cxa_guard_release>
   d5ec0:	4b09      	ldr	r3, [pc, #36]	; (d5ee8 <_GLOBAL__sub_I_expand+0xa0>)
   d5ec2:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d5ec6:	bd70      	pop	{r4, r5, r6, pc}
   d5ec8:	2003dbdc 	.word	0x2003dbdc
   d5ecc:	2003bc0c 	.word	0x2003bc0c
   d5ed0:	2003dbe0 	.word	0x2003dbe0
   d5ed4:	2003bc08 	.word	0x2003bc08
   d5ed8:	000d59cd 	.word	0x000d59cd
   d5edc:	000e4d18 	.word	0x000e4d18
   d5ee0:	2003dc14 	.word	0x2003dc14
   d5ee4:	000e48f0 	.word	0x000e48f0
   d5ee8:	2003bc10 	.word	0x2003bc10

000d5eec <_ZN18SdCardPrintHandler16dateTimeCallbackEPtS0_>:
	// Start over at beginning of buffer
	bufOffset = 0;
}

// [static]
void SdCardPrintHandler::dateTimeCallback(uint16_t* date, uint16_t* time) {
   d5eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5eee:	460e      	mov	r6, r1
   d5ef0:	4607      	mov	r7, r0
	*date = FAT_DATE(Time.year(), Time.month(), Time.day());
   d5ef2:	f007 f827 	bl	dcf44 <_ZN9TimeClass4yearEv>
   d5ef6:	4605      	mov	r5, r0
   d5ef8:	f007 f81c 	bl	dcf34 <_ZN9TimeClass5monthEv>
   d5efc:	4604      	mov	r4, r0
   d5efe:	f007 f80f 	bl	dcf20 <_ZN9TimeClass3dayEv>
   d5f02:	0164      	lsls	r4, r4, #5
   d5f04:	b2c0      	uxtb	r0, r0
   d5f06:	b2ad      	uxth	r5, r5
   d5f08:	f404 54ff 	and.w	r4, r4, #8160	; 0x1fe0
   d5f0c:	f2a5 75bc 	subw	r5, r5, #1980	; 0x7bc
   d5f10:	4304      	orrs	r4, r0
   d5f12:	ea44 2445 	orr.w	r4, r4, r5, lsl #9
   d5f16:	803c      	strh	r4, [r7, #0]
	*time = FAT_TIME(Time.hour(), Time.minute(), Time.second());
   d5f18:	f006 ffe4 	bl	dcee4 <_ZN9TimeClass4hourEv>
   d5f1c:	4605      	mov	r5, r0
   d5f1e:	f006 ffeb 	bl	dcef8 <_ZN9TimeClass6minuteEv>
   d5f22:	4604      	mov	r4, r0
   d5f24:	f006 fff2 	bl	dcf0c <_ZN9TimeClass6secondEv>
   d5f28:	02ed      	lsls	r5, r5, #11
   d5f2a:	0164      	lsls	r4, r4, #5
   d5f2c:	f405 25ff 	and.w	r5, r5, #522240	; 0x7f800
   d5f30:	f404 54ff 	and.w	r4, r4, #8160	; 0x1fe0
   d5f34:	432c      	orrs	r4, r5
   d5f36:	f3c0 0046 	ubfx	r0, r0, #1, #7
   d5f3a:	4304      	orrs	r4, r0
   d5f3c:	8034      	strh	r4, [r6, #0]
   d5f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f40 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE>:
}

//
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
   d5f40:	b570      	push	{r4, r5, r6, lr}
   d5f42:	4604      	mov	r4, r0
   d5f44:	2500      	movs	r5, #0
   d5f46:	6045      	str	r5, [r0, #4]
   d5f48:	7322      	strb	r2, [r4, #12]
   d5f4a:	481d      	ldr	r0, [pc, #116]	; (d5fc0 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x80>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5f4c:	4a1d      	ldr	r2, [pc, #116]	; (d5fc4 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x84>)
   d5f4e:	6020      	str	r0, [r4, #0]
   d5f50:	60a1      	str	r1, [r4, #8]
   d5f52:	6122      	str	r2, [r4, #16]
   d5f54:	791a      	ldrb	r2, [r3, #4]
   d5f56:	7522      	strb	r2, [r4, #20]
   d5f58:	689a      	ldr	r2, [r3, #8]
   d5f5a:	61a2      	str	r2, [r4, #24]
   d5f5c:	7b1a      	ldrb	r2, [r3, #12]
   d5f5e:	7722      	strb	r2, [r4, #28]
   d5f60:	7b5b      	ldrb	r3, [r3, #13]
   d5f62:	7763      	strb	r3, [r4, #29]
   d5f64:	4b18      	ldr	r3, [pc, #96]	; (d5fc8 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x88>)
   d5f66:	6223      	str	r3, [r4, #32]
   d5f68:	4b18      	ldr	r3, [pc, #96]	; (d5fcc <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x8c>)
   d5f6a:	6263      	str	r3, [r4, #36]	; 0x24
   d5f6c:	230a      	movs	r3, #10
   d5f6e:	62a3      	str	r3, [r4, #40]	; 0x28
   d5f70:	f242 7310 	movw	r3, #10000	; 0x2710
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d5f74:	f504 768e 	add.w	r6, r4, #284	; 0x11c
   d5f78:	62e3      	str	r3, [r4, #44]	; 0x2c
   d5f7a:	2301      	movs	r3, #1
   d5f7c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   d5f80:	6365      	str	r5, [r4, #52]	; 0x34
   d5f82:	63a5      	str	r5, [r4, #56]	; 0x38
   d5f84:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   d5f88:	f884 50c9 	strb.w	r5, [r4, #201]	; 0xc9
   d5f8c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
   d5f90:	f884 50d0 	strb.w	r5, [r4, #208]	; 0xd0
   d5f94:	f884 50d1 	strb.w	r5, [r4, #209]	; 0xd1
   d5f98:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
   d5f9c:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
   d5fa0:	2210      	movs	r2, #16
   d5fa2:	4629      	mov	r1, r5
   d5fa4:	4630      	mov	r0, r6
   d5fa6:	f00b fae7 	bl	e1578 <memset>
   d5faa:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d5fae:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
	    this->_M_header._M_right = &this->_M_header;
   d5fb2:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   d5fb6:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
}
   d5fba:	4620      	mov	r0, r4
   d5fbc:	bd70      	pop	{r4, r5, r6, pc}
   d5fbe:	bf00      	nop
   d5fc0:	000e4ddc 	.word	0x000e4ddc
   d5fc4:	000e48f0 	.word	0x000e48f0
   d5fc8:	000e4d3d 	.word	0x000e4d3d
   d5fcc:	000f4240 	.word	0x000f4240

000d5fd0 <_ZN18SdCardPrintHandler7getNameEi>:
		needsScanCard = true;
		lastCardCheck = millis();
	}
}

const char *SdCardPrintHandler::getName(int num) {
   d5fd0:	b510      	push	{r4, lr}
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
   d5fd2:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
   d5fd6:	460b      	mov	r3, r1
   d5fd8:	4a03      	ldr	r2, [pc, #12]	; (d5fe8 <_ZN18SdCardPrintHandler7getNameEi+0x18>)
   d5fda:	210c      	movs	r1, #12
   d5fdc:	4620      	mov	r0, r4
   d5fde:	f005 fde5 	bl	dbbac <snprintf>
	return nameBuf;
}
   d5fe2:	4620      	mov	r0, r4
   d5fe4:	bd10      	pop	{r4, pc}
   d5fe6:	bf00      	nop
   d5fe8:	000e4d42 	.word	0x000e4d42

000d5fec <_ZN18SdCardPrintHandler13checkMaxFilesEv>:
		return false;
	}
}


void SdCardPrintHandler::checkMaxFiles() {
   d5fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5fee:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
   d5ff2:	4604      	mov	r4, r0
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
		const char *name = getName(*it);
		DEBUG_NORMAL(("removing old log file %s", name));
		FatFile::remove(&logsDir, name);
   d5ff4:	f100 07d0 	add.w	r7, r0, #208	; 0xd0


void SdCardPrintHandler::checkMaxFiles() {
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
   d5ff8:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   d5ffc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5ffe:	429a      	cmp	r2, r3
   d6000:	d921      	bls.n	d6046 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x5a>
		const char *name = getName(*it);
   d6002:	6929      	ldr	r1, [r5, #16]
   d6004:	4620      	mov	r0, r4
   d6006:	f7ff ffe3 	bl	d5fd0 <_ZN18SdCardPrintHandler7getNameEi>
   d600a:	4606      	mov	r6, r0
		DEBUG_NORMAL(("removing old log file %s", name));
   d600c:	f007 fc1a 	bl	dd844 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d6010:	4633      	mov	r3, r6
   d6012:	4a0d      	ldr	r2, [pc, #52]	; (d6048 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x5c>)
   d6014:	2101      	movs	r1, #1
   d6016:	f006 fdc8 	bl	dcbaa <_ZN5Print11printf_implEbPKcz>
		FatFile::remove(&logsDir, name);
   d601a:	4631      	mov	r1, r6
   d601c:	4638      	mov	r0, r7
   d601e:	f001 fd79 	bl	d7b14 <_ZN7FatFile6removeEPS_PKc>
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d6022:	4628      	mov	r0, r5
   d6024:	f008 fb71 	bl	de70a <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   d6028:	f504 718e 	add.w	r1, r4, #284	; 0x11c
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d602c:	4606      	mov	r6, r0
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   d602e:	4628      	mov	r0, r5
   d6030:	f008 fbe3 	bl	de7fa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6034:	f7fe f835 	bl	d40a2 <_ZdlPv>
      _M_drop_node(__y);
      --_M_impl._M_node_count;
   d6038:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   d603c:	3b01      	subs	r3, #1
   d603e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
		it = fileNums.erase(it);
   d6042:	4635      	mov	r5, r6


void SdCardPrintHandler::checkMaxFiles() {
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
   d6044:	e7d8      	b.n	d5ff8 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0xc>
   d6046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6048:	000e4d4b 	.word	0x000e4d4b

000d604c <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d604c:	b570      	push	{r4, r5, r6, lr}
   d604e:	4606      	mov	r6, r0
   d6050:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d6052:	b14c      	cbz	r4, d6068 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x1c>
	{
	  _M_erase(_S_right(__x));
   d6054:	68e1      	ldr	r1, [r4, #12]
   d6056:	4630      	mov	r0, r6
   d6058:	f7ff fff8 	bl	d604c <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>
   d605c:	68a5      	ldr	r5, [r4, #8]
   d605e:	4620      	mov	r0, r4
   d6060:	f7fe f81f 	bl	d40a2 <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   d6064:	462c      	mov	r4, r5
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d6066:	e7f4      	b.n	d6052 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x6>
   d6068:	bd70      	pop	{r4, r5, r6, pc}
	...

000d606c <_ZN18SdCardPrintHandlerD1Ev>:
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
}

SdCardPrintHandler::~SdCardPrintHandler() {
   d606c:	b510      	push	{r4, lr}
   d606e:	4b05      	ldr	r3, [pc, #20]	; (d6084 <_ZN18SdCardPrintHandlerD1Ev+0x18>)

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
   d6070:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
   d6074:	6003      	str	r3, [r0, #0]
   d6076:	4604      	mov	r4, r0
   d6078:	f500 708c 	add.w	r0, r0, #280	; 0x118
   d607c:	f7ff ffe6 	bl	d604c <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>

}
   d6080:	4620      	mov	r0, r4
   d6082:	bd10      	pop	{r4, pc}
   d6084:	000e4ddc 	.word	0x000e4ddc

000d6088 <_ZN18SdCardPrintHandlerD0Ev>:
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
}

SdCardPrintHandler::~SdCardPrintHandler() {
   d6088:	b510      	push	{r4, lr}
   d608a:	4604      	mov	r4, r0

}
   d608c:	f7ff ffee 	bl	d606c <_ZN18SdCardPrintHandlerD1Ev>
   d6090:	4620      	mov	r0, r4
   d6092:	f44f 719a 	mov.w	r1, #308	; 0x134
   d6096:	f008 fad1 	bl	de63c <_ZdlPvj>
   d609a:	4620      	mov	r0, r4
   d609c:	bd10      	pop	{r4, pc}

000d609e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>:
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d609e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d60a2:	460e      	mov	r6, r1
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d60a4:	f106 0a04 	add.w	sl, r6, #4
   d60a8:	6889      	ldr	r1, [r1, #8]
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d60aa:	4605      	mov	r5, r0
   d60ac:	4617      	mov	r7, r2
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d60ae:	4654      	mov	r4, sl
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
   d60b0:	2301      	movs	r3, #1
      while (__x != 0)
   d60b2:	b159      	cbz	r1, d60cc <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x2e>
   d60b4:	683a      	ldr	r2, [r7, #0]
   d60b6:	690b      	ldr	r3, [r1, #16]
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   d60b8:	429a      	cmp	r2, r3
   d60ba:	bfb4      	ite	lt
   d60bc:	688a      	ldrlt	r2, [r1, #8]
   d60be:	68ca      	ldrge	r2, [r1, #12]
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d60c0:	460c      	mov	r4, r1
   d60c2:	bfb4      	ite	lt
   d60c4:	2301      	movlt	r3, #1
   d60c6:	2300      	movge	r3, #0
   d60c8:	4611      	mov	r1, r2
   d60ca:	e7f2      	b.n	d60b2 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x14>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d60cc:	b133      	cbz	r3, d60dc <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x3e>
	{
	  if (__j == begin())
   d60ce:	68f3      	ldr	r3, [r6, #12]
   d60d0:	429c      	cmp	r4, r3
   d60d2:	d00e      	beq.n	d60f2 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x54>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d60d4:	4620      	mov	r0, r4
   d60d6:	f008 fb2b 	bl	de730 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d60da:	e000      	b.n	d60de <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x40>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d60dc:	4620      	mov	r0, r4
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d60de:	6902      	ldr	r2, [r0, #16]
   d60e0:	683b      	ldr	r3, [r7, #0]
   d60e2:	429a      	cmp	r2, r3
   d60e4:	db05      	blt.n	d60f2 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x54>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d60e6:	6028      	str	r0, [r5, #0]
   d60e8:	2300      	movs	r3, #0
   d60ea:	712b      	strb	r3, [r5, #4]
				 _GLIBCXX_FORWARD(_Arg, __v), __an),
		      true);
	}

      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    }
   d60ec:	4628      	mov	r0, r5
   d60ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
		 _NodeGen& __node_gen)
      {
	bool __insert_left = (__x != 0 || __p == _M_end()
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
							_S_key(__p)));
   d60f2:	45a2      	cmp	sl, r4
   d60f4:	d008      	beq.n	d6108 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x6a>
   d60f6:	683a      	ldr	r2, [r7, #0]
   d60f8:	6923      	ldr	r3, [r4, #16]
   d60fa:	429a      	cmp	r2, r3
   d60fc:	bfac      	ite	ge
   d60fe:	f04f 0900 	movge.w	r9, #0
   d6102:	f04f 0901 	movlt.w	r9, #1
   d6106:	e001      	b.n	d610c <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x6e>
   d6108:	f04f 0901 	mov.w	r9, #1
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d610c:	2014      	movs	r0, #20
   d610e:	f7fd ffc4 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6112:	683b      	ldr	r3, [r7, #0]
   d6114:	f110 0f10 	cmn.w	r0, #16
   d6118:	bf18      	it	ne
   d611a:	6103      	strne	r3, [r0, #16]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d611c:	4680      	mov	r8, r0

	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));

	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d611e:	4653      	mov	r3, sl
   d6120:	4601      	mov	r1, r0
   d6122:	4622      	mov	r2, r4
   d6124:	4648      	mov	r0, r9
   d6126:	f008 fb05 	bl	de734 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				      this->_M_impl._M_header);
	++_M_impl._M_node_count;
   d612a:	6973      	ldr	r3, [r6, #20]
   d612c:	f8c5 8000 	str.w	r8, [r5]
   d6130:	3301      	adds	r3, #1
   d6132:	6173      	str	r3, [r6, #20]
   d6134:	2301      	movs	r3, #1
   d6136:	e7d8      	b.n	d60ea <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x4c>

000d6138 <_ZN18SdCardPrintHandler11openLogFileEv>:
const char *SdCardPrintHandler::getName(int num) {
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
	return nameBuf;
}

bool SdCardPrintHandler::openLogFile() {
   d6138:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const char *name = getName(lastFileNum);
   d613a:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
const char *SdCardPrintHandler::getName(int num) {
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
	return nameBuf;
}

bool SdCardPrintHandler::openLogFile() {
   d613e:	4604      	mov	r4, r0
	const char *name = getName(lastFileNum);
   d6140:	f7ff ff46 	bl	d5fd0 <_ZN18SdCardPrintHandler7getNameEi>
	if (curLogFile.open(&logsDir, name, O_RDWR | O_APPEND | O_CREAT)) {
   d6144:	f240 230a 	movw	r3, #522	; 0x20a
   d6148:	4602      	mov	r2, r0
   d614a:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
   d614e:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   d6152:	f001 fc90 	bl	d7a76 <_ZN7FatFile4openEPS_PKci>
   d6156:	4605      	mov	r5, r0
   d6158:	b130      	cbz	r0, d6168 <_ZN18SdCardPrintHandler11openLogFileEv+0x30>
       */
      std::pair<iterator, bool>
      insert(const value_type& __x)
      {
	std::pair<typename _Rep_type::iterator, bool> __p =
	  _M_t._M_insert_unique(__x);
   d615a:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   d615e:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d6162:	4668      	mov	r0, sp
   d6164:	f7ff ff9b 	bl	d609e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
	}
	else {
		DEBUG_HIGH(("failed to open log file %s", name));
		return false;
	}
}
   d6168:	4628      	mov	r0, r5
   d616a:	b003      	add	sp, #12
   d616c:	bd30      	pop	{r4, r5, pc}
	...

000d6170 <_ZN18SdCardPrintHandler8scanCardEv>:
	}

	return 1;
}

void SdCardPrintHandler::scanCard() {
   d6170:	b530      	push	{r4, r5, lr}
	DEBUG_HIGH(("scanCard"));
	needsScanCard = false;
   d6172:	2300      	movs	r3, #0
   d6174:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8

	if (!lastBeginResult) {
   d6178:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
	}

	return 1;
}

void SdCardPrintHandler::scanCard() {
   d617c:	b09d      	sub	sp, #116	; 0x74
   d617e:	4604      	mov	r4, r0
	DEBUG_HIGH(("scanCard"));
	needsScanCard = false;

	if (!lastBeginResult) {
   d6180:	b9e3      	cbnz	r3, d61bc <_ZN18SdCardPrintHandler8scanCardEv+0x4c>
   *
   * See the timestamp() function.
   */
  static void dateTimeCallback(
    void (*dateTime)(uint16_t* date, uint16_t* time)) {
    m_dateTime = dateTime;
   d6182:	4b49      	ldr	r3, [pc, #292]	; (d62a8 <_ZN18SdCardPrintHandler8scanCardEv+0x138>)
   d6184:	4a49      	ldr	r2, [pc, #292]	; (d62ac <_ZN18SdCardPrintHandler8scanCardEv+0x13c>)
		// Set the date time callback
		SdFile::dateTimeCallback(dateTimeCallback);

		pinMode(csPin, OUTPUT);
   d6186:	7b00      	ldrb	r0, [r0, #12]
   d6188:	601a      	str	r2, [r3, #0]
   d618a:	2101      	movs	r1, #1
   d618c:	f008 f9c6 	bl	de51c <pinMode>
   d6190:	4b47      	ldr	r3, [pc, #284]	; (d62b0 <_ZN18SdCardPrintHandler8scanCardEv+0x140>)
   d6192:	930c      	str	r3, [sp, #48]	; 0x30
   d6194:	7d23      	ldrb	r3, [r4, #20]
   d6196:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d619a:	69a3      	ldr	r3, [r4, #24]
   d619c:	930e      	str	r3, [sp, #56]	; 0x38
   d619e:	7f23      	ldrb	r3, [r4, #28]
   d61a0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
		lastBeginResult = sd.begin(csPin, spiSettings);
   d61a4:	7b21      	ldrb	r1, [r4, #12]
   d61a6:	7f63      	ldrb	r3, [r4, #29]
   d61a8:	68a0      	ldr	r0, [r4, #8]
   d61aa:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   d61ae:	aa0c      	add	r2, sp, #48	; 0x30
   d61b0:	f7ff fc3a 	bl	d5a28 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d61b4:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
		if (!lastBeginResult) {
   d61b8:	2800      	cmp	r0, #0
   d61ba:	d06b      	beq.n	d6294 <_ZN18SdCardPrintHandler8scanCardEv+0x124>
			lastCardCheck = millis();
			return;
		}
	}

	if (logsDirName != NULL && !sd.exists(logsDirName)) {
   d61bc:	6a22      	ldr	r2, [r4, #32]
   d61be:	b332      	cbz	r2, d620e <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d61c0:	68a1      	ldr	r1, [r4, #8]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d61c2:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d61c4:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d61c8:	a80c      	add	r0, sp, #48	; 0x30
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d61ca:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d61ce:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d61d2:	f001 fc50 	bl	d7a76 <_ZN7FatFile4openEPS_PKci>
   d61d6:	4605      	mov	r5, r0
   d61d8:	b9c8      	cbnz	r0, d620e <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
		DEBUG_NORMAL(("creating logs dir %s", logsDirName));
   d61da:	f007 fb33 	bl	dd844 <_Z16_fetch_usbserialv>
   d61de:	6a23      	ldr	r3, [r4, #32]
   d61e0:	4a34      	ldr	r2, [pc, #208]	; (d62b4 <_ZN18SdCardPrintHandler8scanCardEv+0x144>)
   d61e2:	2101      	movs	r1, #1
   d61e4:	f006 fce1 	bl	dcbaa <_ZN5Print11printf_implEbPKcz>
		if (!sd.mkdir(logsDirName)) {
   d61e8:	68a1      	ldr	r1, [r4, #8]
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
   d61ea:	6a22      	ldr	r2, [r4, #32]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d61ec:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
   d61f0:	2301      	movs	r3, #1
   d61f2:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d61f6:	a80c      	add	r0, sp, #48	; 0x30
   d61f8:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
   d61fc:	f001 fd1b 	bl	d7c36 <_ZN7FatFile5mkdirEPS_PKcb>
   d6200:	b928      	cbnz	r0, d620e <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
			DEBUG_NORMAL(("mkdir failed"));
   d6202:	f007 fb1f 	bl	dd844 <_Z16_fetch_usbserialv>
   d6206:	4a2c      	ldr	r2, [pc, #176]	; (d62b8 <_ZN18SdCardPrintHandler8scanCardEv+0x148>)
   d6208:	2101      	movs	r1, #1
   d620a:	f006 fcce 	bl	dcbaa <_ZN5Print11printf_implEbPKcz>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d620e:	68a1      	ldr	r1, [r4, #8]
		}
	}

	if (logsDir.open(sd.vwd(), logsDirName, O_READ)) {
   d6210:	6a22      	ldr	r2, [r4, #32]
   d6212:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   d6216:	2300      	movs	r3, #0
   d6218:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d621c:	4628      	mov	r0, r5
   d621e:	f001 fc2a 	bl	d7a76 <_ZN7FatFile4openEPS_PKci>
   d6222:	b388      	cbz	r0, d6288 <_ZN18SdCardPrintHandler8scanCardEv+0x118>
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d6224:	2100      	movs	r1, #0
   d6226:	4628      	mov	r0, r5
   d6228:	f001 faf2 	bl	d7810 <_ZN7FatFile7seekSetEm>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d622c:	2300      	movs	r3, #0
   d622e:	f88d 300c 	strb.w	r3, [sp, #12]
   d6232:	f88d 300d 	strb.w	r3, [sp, #13]

		logsDir.rewind();

		FatFile tempFile;

		while (tempFile.openNext(&logsDir, O_READ)) {
   d6236:	2200      	movs	r2, #0
   d6238:	4629      	mov	r1, r5
   d623a:	a803      	add	r0, sp, #12
   d623c:	f001 fb9f 	bl	d797e <_ZN7FatFile8openNextEPS_i>
   d6240:	b1d0      	cbz	r0, d6278 <_ZN18SdCardPrintHandler8scanCardEv+0x108>
			char name[64];
			tempFile.getName(name, sizeof(name));
   d6242:	2240      	movs	r2, #64	; 0x40
   d6244:	a90c      	add	r1, sp, #48	; 0x30
   d6246:	a803      	add	r0, sp, #12
   d6248:	f000 fd72 	bl	d6d30 <_ZN7FatFile7getNameEPcj>
			DEBUG_HIGH(("logs dir file %s", name));

			int num = atoi(name);
   d624c:	a80c      	add	r0, sp, #48	; 0x30
   d624e:	f00b f866 	bl	e131e <atoi>
   d6252:	9000      	str	r0, [sp, #0]
			if (num != 0) {
   d6254:	b160      	cbz	r0, d6270 <_ZN18SdCardPrintHandler8scanCardEv+0x100>
   d6256:	466a      	mov	r2, sp
   d6258:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d625c:	a801      	add	r0, sp, #4
   d625e:	f7ff ff1e 	bl	d609e <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
				fileNums.insert(num);
				if (num > lastFileNum) {
   d6262:	9b00      	ldr	r3, [sp, #0]
   d6264:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   d6268:	429a      	cmp	r2, r3
					lastFileNum = num;
   d626a:	bfb8      	it	lt
   d626c:	f8c4 30cc 	strlt.w	r3, [r4, #204]	; 0xcc
				}
			}
			tempFile.close();
   d6270:	a803      	add	r0, sp, #12
   d6272:	f001 fbf9 	bl	d7a68 <_ZN7FatFile5closeEv>

		logsDir.rewind();

		FatFile tempFile;

		while (tempFile.openNext(&logsDir, O_READ)) {
   d6276:	e7de      	b.n	d6236 <_ZN18SdCardPrintHandler8scanCardEv+0xc6>
					lastFileNum = num;
				}
			}
			tempFile.close();
		}
		checkMaxFiles();
   d6278:	4620      	mov	r0, r4
   d627a:	f7ff feb7 	bl	d5fec <_ZN18SdCardPrintHandler13checkMaxFilesEv>

		if (!openLogFile()) {
   d627e:	4620      	mov	r0, r4
   d6280:	f7ff ff5a 	bl	d6138 <_ZN18SdCardPrintHandler11openLogFileEv>
   d6284:	b968      	cbnz	r0, d62a2 <_ZN18SdCardPrintHandler8scanCardEv+0x132>
   d6286:	e005      	b.n	d6294 <_ZN18SdCardPrintHandler8scanCardEv+0x124>
			needsScanCard = true;
			lastCardCheck = millis();
		}
	}
	else {
		DEBUG_NORMAL(("failed to open logs dir"));
   d6288:	f007 fadc 	bl	dd844 <_Z16_fetch_usbserialv>
   d628c:	4a0b      	ldr	r2, [pc, #44]	; (d62bc <_ZN18SdCardPrintHandler8scanCardEv+0x14c>)
   d628e:	2101      	movs	r1, #1
   d6290:	f006 fc8b 	bl	dcbaa <_ZN5Print11printf_implEbPKcz>
		needsScanCard = true;
   d6294:	2301      	movs	r3, #1
   d6296:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   d629a:	f005 f971 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
		lastCardCheck = millis();
   d629e:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
	}
}
   d62a2:	b01d      	add	sp, #116	; 0x74
   d62a4:	bd30      	pop	{r4, r5, pc}
   d62a6:	bf00      	nop
   d62a8:	2003e09c 	.word	0x2003e09c
   d62ac:	000d5eed 	.word	0x000d5eed
   d62b0:	000e48f0 	.word	0x000e48f0
   d62b4:	000e4d89 	.word	0x000e4d89
   d62b8:	000e4d64 	.word	0x000e4d64
   d62bc:	000e4d71 	.word	0x000e4d71

000d62c0 <_ZN18SdCardPrintHandler8writeBufEv>:
		it = fileNums.erase(it);
	}
}


void SdCardPrintHandler::writeBuf() {
   d62c0:	b538      	push	{r3, r4, r5, lr}
   d62c2:	4604      	mov	r4, r0

	if (writeToStream) {
   d62c4:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d62c6:	b128      	cbz	r0, d62d4 <_ZN18SdCardPrintHandler8writeBufEv+0x14>
		writeToStream->write(buf, bufOffset);
   d62c8:	6803      	ldr	r3, [r0, #0]
   d62ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d62cc:	68db      	ldr	r3, [r3, #12]
   d62ce:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d62d2:	4798      	blx	r3
	}

	if (needsScanCard) {
   d62d4:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   d62d8:	b15b      	cbz	r3, d62f2 <_ZN18SdCardPrintHandler8writeBufEv+0x32>
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
   d62da:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d62de:	2b00      	cmp	r3, #0
   d62e0:	d053      	beq.n	d638a <_ZN18SdCardPrintHandler8writeBufEv+0xca>
   d62e2:	f005 f94d 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
   d62e6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d62ea:	1ac0      	subs	r0, r0, r3
   d62ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d62ee:	4298      	cmp	r0, r3
   d62f0:	d24b      	bcs.n	d638a <_ZN18SdCardPrintHandler8writeBufEv+0xca>
			scanCard();
		}
	}

	if (lastBeginResult) {
   d62f2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
   d62f6:	2b00      	cmp	r3, #0
   d62f8:	d044      	beq.n	d6384 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
		if (curLogFile.isOpen()) {
   d62fa:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   d62fe:	2b00      	cmp	r3, #0
   d6300:	d040      	beq.n	d6384 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
			if (curLogFile.write(buf, bufOffset) > 0) {
   d6302:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
   d6306:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d6308:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d630c:	4628      	mov	r0, r5
   d630e:	f001 fce3 	bl	d7cd8 <_ZN7FatFile5writeEPKvj>
   d6312:	2800      	cmp	r0, #0
   d6314:	dd21      	ble.n	d635a <_ZN18SdCardPrintHandler8writeBufEv+0x9a>
				if (syncEveryEntry) {
   d6316:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d631a:	b113      	cbz	r3, d6322 <_ZN18SdCardPrintHandler8writeBufEv+0x62>
					curLogFile.sync();
   d631c:	4628      	mov	r0, r5
   d631e:	f001 fb6d 	bl	d79fc <_ZN7FatFile4syncEv>
				}

				if (curLogFile.fileSize() > desiredFileSize) {
   d6322:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d6324:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d6328:	429a      	cmp	r2, r3
   d632a:	d22b      	bcs.n	d6384 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
					// File is too large now. Make a new one.
					curLogFile.close();
   d632c:	4628      	mov	r0, r5
   d632e:	f001 fb9b 	bl	d7a68 <_ZN7FatFile5closeEv>
					lastFileNum++;
   d6332:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d6336:	3301      	adds	r3, #1
   d6338:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
					DEBUG_NORMAL(("creating new log file %04d", lastFileNum));
   d633c:	f007 fa82 	bl	dd844 <_Z16_fetch_usbserialv>
   d6340:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d6344:	4a13      	ldr	r2, [pc, #76]	; (d6394 <_ZN18SdCardPrintHandler8writeBufEv+0xd4>)
   d6346:	2101      	movs	r1, #1
   d6348:	f006 fc2f 	bl	dcbaa <_ZN5Print11printf_implEbPKcz>
					openLogFile();
   d634c:	4620      	mov	r0, r4
   d634e:	f7ff fef3 	bl	d6138 <_ZN18SdCardPrintHandler11openLogFileEv>

					// Are there too many old files?
					checkMaxFiles();
   d6352:	4620      	mov	r0, r4
   d6354:	f7ff fe4a 	bl	d5fec <_ZN18SdCardPrintHandler13checkMaxFilesEv>
   d6358:	e014      	b.n	d6384 <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
				}
			}
			else {
				// Write failed
				DEBUG_NORMAL(("write to sd card failed"));
   d635a:	f007 fa73 	bl	dd844 <_Z16_fetch_usbserialv>
   d635e:	4a0e      	ldr	r2, [pc, #56]	; (d6398 <_ZN18SdCardPrintHandler8writeBufEv+0xd8>)
   d6360:	2101      	movs	r1, #1
   d6362:	f006 fc22 	bl	dcbaa <_ZN5Print11printf_implEbPKcz>
				curLogFile.close();
   d6366:	4628      	mov	r0, r5
   d6368:	f001 fb7e 	bl	d7a68 <_ZN7FatFile5closeEv>
				logsDir.close();
   d636c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d6370:	f001 fb7a 	bl	d7a68 <_ZN7FatFile5closeEv>
				needsScanCard = true;
   d6374:	2301      	movs	r3, #1
   d6376:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
				lastBeginResult = false;
   d637a:	2300      	movs	r3, #0
   d637c:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
				lastCardCheck = 0;
   d6380:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
			}
		}
	}

	// Start over at beginning of buffer
	bufOffset = 0;
   d6384:	2300      	movs	r3, #0
   d6386:	63a3      	str	r3, [r4, #56]	; 0x38
}
   d6388:	bd38      	pop	{r3, r4, r5, pc}
		writeToStream->write(buf, bufOffset);
	}

	if (needsScanCard) {
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
			scanCard();
   d638a:	4620      	mov	r0, r4
   d638c:	f7ff fef0 	bl	d6170 <_ZN18SdCardPrintHandler8scanCardEv>
   d6390:	e7af      	b.n	d62f2 <_ZN18SdCardPrintHandler8writeBufEv+0x32>
   d6392:	bf00      	nop
   d6394:	000e4d9e 	.word	0x000e4d9e
   d6398:	000e4db9 	.word	0x000e4db9

000d639c <_ZN18SdCardPrintHandler5writeEh>:
SdCardPrintHandler::~SdCardPrintHandler() {

}


size_t SdCardPrintHandler::write(uint8_t c) {
   d639c:	b508      	push	{r3, lr}

	buf[bufOffset++] = c;
   d639e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d63a0:	1c5a      	adds	r2, r3, #1
   d63a2:	4403      	add	r3, r0
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d63a4:	2a7f      	cmp	r2, #127	; 0x7f
}


size_t SdCardPrintHandler::write(uint8_t c) {

	buf[bufOffset++] = c;
   d63a6:	6382      	str	r2, [r0, #56]	; 0x38
   d63a8:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d63ac:	d801      	bhi.n	d63b2 <_ZN18SdCardPrintHandler5writeEh+0x16>
   d63ae:	290a      	cmp	r1, #10
   d63b0:	d101      	bne.n	d63b6 <_ZN18SdCardPrintHandler5writeEh+0x1a>
		// Buffer is full or have the LF in CRLF, write it out
		writeBuf();
   d63b2:	f7ff ff85 	bl	d62c0 <_ZN18SdCardPrintHandler8writeBufEv>
	}

	return 1;
}
   d63b6:	2001      	movs	r0, #1
   d63b8:	bd08      	pop	{r3, pc}

000d63ba <_GLOBAL__sub_I__ZN22SdCardLogHandlerBufferC2EPhjR5SdFathN8particle13__SPISettingsE8LogLevelN5spark6VectorINS6_17LogCategoryFilterENS6_16DefaultAllocatorEEE>:
   d63ba:	f005 b831 	b.w	db420 <HAL_Pin_Map>

000d63be <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
   d63be:	b510      	push	{r4, lr}
   d63c0:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
   d63c2:	f008 f907 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d63c6:	6803      	ldr	r3, [r0, #0]
   d63c8:	4621      	mov	r1, r4
   d63ca:	689b      	ldr	r3, [r3, #8]
}
   d63cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
   d63d0:	4718      	bx	r3

000d63d2 <_ZL7i2creadv>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
   d63d2:	b508      	push	{r3, lr}
  #else
  return Wire.receive();
  #endif
  */
  
  return Wire.read();
   d63d4:	f008 f8fe 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d63d8:	6803      	ldr	r3, [r0, #0]
   d63da:	695b      	ldr	r3, [r3, #20]
   d63dc:	4798      	blx	r3
}
   d63de:	b2c0      	uxtb	r0, r0
   d63e0:	bd08      	pop	{r3, pc}

000d63e2 <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
   d63e2:	b570      	push	{r4, r5, r6, lr}
   d63e4:	4606      	mov	r6, r0
   d63e6:	4614      	mov	r4, r2
   d63e8:	460d      	mov	r5, r1
  Wire.beginTransmission(i2cAddress);
   d63ea:	f008 f8f3 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d63ee:	4631      	mov	r1, r6
   d63f0:	f007 fc0d 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
   d63f4:	4628      	mov	r0, r5
   d63f6:	f7ff ffe2 	bl	d63be <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
   d63fa:	0a20      	lsrs	r0, r4, #8
   d63fc:	f7ff ffdf 	bl	d63be <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
   d6400:	b2e0      	uxtb	r0, r4
   d6402:	f7ff ffdc 	bl	d63be <_ZL8i2cwriteh>
  Wire.endTransmission();
   d6406:	f008 f8e5 	bl	de5d4 <_Z19__fetch_global_Wirev>
}
   d640a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value>>8));
  i2cwrite((uint8_t)(value & 0xFF));
  Wire.endTransmission();
   d640e:	f007 bc09 	b.w	ddc24 <_ZN7TwoWire15endTransmissionEv>

000d6412 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
   d6412:	b510      	push	{r4, lr}
   d6414:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
   d6416:	f008 f8dd 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d641a:	4621      	mov	r1, r4
   d641c:	f007 fbf7 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
   d6420:	2000      	movs	r0, #0
   d6422:	f7ff ffcc 	bl	d63be <_ZL8i2cwriteh>
  Wire.endTransmission();
   d6426:	f008 f8d5 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d642a:	f007 fbfb 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
   d642e:	f008 f8d1 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6432:	4621      	mov	r1, r4
   d6434:	2202      	movs	r2, #2
   d6436:	f007 fbe7 	bl	ddc08 <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());  
   d643a:	f7ff ffca 	bl	d63d2 <_ZL7i2creadv>
   d643e:	4604      	mov	r4, r0
   d6440:	f7ff ffc7 	bl	d63d2 <_ZL7i2creadv>
   d6444:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
   d6448:	b280      	uxth	r0, r0
   d644a:	bd10      	pop	{r4, pc}

000d644c <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d644c:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   d644e:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d6450:	2108      	movs	r1, #8
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d6452:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d6454:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
   d6456:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
   d6458:	4770      	bx	lr

000d645a <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
   d645a:	b508      	push	{r3, lr}
  Wire.begin();
   d645c:	f008 f8ba 	bl	de5d4 <_Z19__fetch_global_Wirev>
}
   d6460:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
   d6464:	f007 bb9c 	b.w	ddba0 <_ZN7TwoWire5beginEv>

000d6468 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
   d6468:	8081      	strh	r1, [r0, #4]
   d646a:	4770      	bx	lr

000d646c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
   d646c:	2903      	cmp	r1, #3
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
   d646e:	b510      	push	{r4, lr}
   d6470:	4604      	mov	r4, r0
  if (channel > 3)
   d6472:	d822      	bhi.n	d64ba <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
   d6474:	2902      	cmp	r1, #2
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
   d6476:	8882      	ldrh	r2, [r0, #4]

  // Set single-ended input channel
  switch (channel)
   d6478:	d008      	beq.n	d648c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
   d647a:	2903      	cmp	r1, #3
   d647c:	d009      	beq.n	d6492 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
   d647e:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
   d6480:	bf14      	ite	ne
   d6482:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
   d6486:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
   d648a:	e004      	b.n	d6496 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
   d648c:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
   d6490:	e001      	b.n	d6496 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d6492:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
   d6496:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d649a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   d649e:	2101      	movs	r1, #1
   d64a0:	7820      	ldrb	r0, [r4, #0]
   d64a2:	f7ff ff9e 	bl	d63e2 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
   d64a6:	7860      	ldrb	r0, [r4, #1]
   d64a8:	f006 fd60 	bl	dcf6c <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
   d64ac:	7820      	ldrb	r0, [r4, #0]
   d64ae:	f7ff ffb0 	bl	d6412 <_ZL12readRegisterhh.isra.0>
   d64b2:	78a3      	ldrb	r3, [r4, #2]
   d64b4:	4118      	asrs	r0, r3
   d64b6:	b280      	uxth	r0, r0
   d64b8:	bd10      	pop	{r4, pc}
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
   d64ba:	2000      	movs	r0, #0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
   d64bc:	bd10      	pop	{r4, pc}

000d64be <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
   d64be:	f004 bfaf 	b.w	db420 <HAL_Pin_Map>

000d64c2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d64c2:	6803      	ldr	r3, [r0, #0]
   d64c4:	b2c9      	uxtb	r1, r1
   d64c6:	689b      	ldr	r3, [r3, #8]
   d64c8:	4718      	bx	r3

000d64ca <_ZN8MCP7941xC1Ev>:
  //  Wire.setSpeed(400000);
  // Initialize the I2C bus if not already enabled
  // if (!Wire.isEnabled()) {
  //     Wire.begin();
  // }
}
   d64ca:	4770      	bx	lr

000d64cc <_ZN8MCP7941x13getMacAddressEPh>:
}


// Function to read the mac address from the eeprom:
void MCP7941x::getMacAddress(byte *mac_address)
{
   d64cc:	b538      	push	{r3, r4, r5, lr}
   d64ce:	460c      	mov	r4, r1
  Wire.beginTransmission(MCP7941x_EEPROM_I2C_ADDR);
   d64d0:	f008 f880 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d64d4:	2157      	movs	r1, #87	; 0x57
   d64d6:	f007 fb9e 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
  WireSend(MAC_LOCATION);
   d64da:	f008 f87b 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d64de:	21f2      	movs	r1, #242	; 0xf2
   d64e0:	f7ff ffef 	bl	d64c2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d64e4:	f008 f876 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d64e8:	f007 fb9c 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(MCP7941x_EEPROM_I2C_ADDR, 6);
   d64ec:	f008 f872 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d64f0:	2206      	movs	r2, #6
   d64f2:	2157      	movs	r1, #87	; 0x57
   d64f4:	f007 fb88 	bl	ddc08 <_ZN7TwoWire11requestFromEhj>
   d64f8:	1e65      	subs	r5, r4, #1
   d64fa:	3405      	adds	r4, #5

  for( int i=0; i<6; i++ )
  {
    mac_address[i] = WireReceive();
   d64fc:	f008 f86a 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6500:	6803      	ldr	r3, [r0, #0]
   d6502:	695b      	ldr	r3, [r3, #20]
   d6504:	4798      	blx	r3
   d6506:	f805 0f01 	strb.w	r0, [r5, #1]!
  WireSend(MAC_LOCATION);
  Wire.endTransmission();

  Wire.requestFrom(MCP7941x_EEPROM_I2C_ADDR, 6);

  for( int i=0; i<6; i++ )
   d650a:	42a5      	cmp	r5, r4
   d650c:	d1f6      	bne.n	d64fc <_ZN8MCP7941x13getMacAddressEPh+0x30>
  {
    mac_address[i] = WireReceive();
  }
}
   d650e:	bd38      	pop	{r3, r4, r5, pc}

000d6510 <_ZN8MCP7941x11setDateTimeEhhhhhhh>:
  byte hr,          // 1-23
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
   d6510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6514:	469a      	mov	sl, r3
   d6516:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   d651a:	9301      	str	r3, [sp, #4]
   d651c:	4693      	mov	fp, r2
   d651e:	460d      	mov	r5, r1
   d6520:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
   d6524:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
   d6528:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
  WITH_LOCK(Wire) {
   d652c:	f008 f852 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6530:	4680      	mov	r8, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6532:	f007 fb83 	bl	ddc3c <_ZN7TwoWire4lockEv>
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d6536:	f008 f84d 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d653a:	216f      	movs	r1, #111	; 0x6f


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d653c:	240a      	movs	r4, #10
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
  WITH_LOCK(Wire) {
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d653e:	f007 fb6a 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d6542:	f008 f847 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6546:	2100      	movs	r1, #0
   d6548:	f7ff ffbb 	bl	d64c2 <_ZN7TwoWire5writeEi>

    WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d654c:	f008 f842 	bl	de5d4 <_Z19__fetch_global_Wirev>


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d6550:	fbb5 f2f4 	udiv	r2, r5, r4
   d6554:	fb04 5512 	mls	r5, r4, r2, r5
   d6558:	eb05 1502 	add.w	r5, r5, r2, lsl #4
   d655c:	b2ed      	uxtb	r5, r5
{
  WITH_LOCK(Wire) {
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
    WireSend(RTC_LOCATION);

    WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d655e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d6562:	f7ff ffae 	bl	d64c2 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   d6566:	f008 f835 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d656a:	fbbb f1f4 	udiv	r1, fp, r4
   d656e:	fb04 bb11 	mls	fp, r4, r1, fp
   d6572:	eb0b 1101 	add.w	r1, fp, r1, lsl #4
   d6576:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d657a:	f7ff ffa2 	bl	d64c2 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   d657e:	f008 f829 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6582:	fbba f1f4 	udiv	r1, sl, r4
   d6586:	fb04 aa11 	mls	sl, r4, r1, sl
   d658a:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
   d658e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d6592:	f7ff ff96 	bl	d64c2 <_ZN7TwoWire5writeEi>
    WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   d6596:	f008 f81d 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d659a:	9b01      	ldr	r3, [sp, #4]
   d659c:	fbb3 f1f4 	udiv	r1, r3, r4
   d65a0:	fb04 3111 	mls	r1, r4, r1, r3
   d65a4:	f001 0107 	and.w	r1, r1, #7
   d65a8:	f041 0108 	orr.w	r1, r1, #8
   d65ac:	f7ff ff89 	bl	d64c2 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   d65b0:	f008 f810 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d65b4:	fbb7 f1f4 	udiv	r1, r7, r4
   d65b8:	fb04 7711 	mls	r7, r4, r1, r7
   d65bc:	eb07 1101 	add.w	r1, r7, r1, lsl #4
   d65c0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d65c4:	f7ff ff7d 	bl	d64c2 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   d65c8:	f008 f804 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d65cc:	fbb6 f1f4 	udiv	r1, r6, r4
   d65d0:	fb04 6611 	mls	r6, r4, r1, r6
   d65d4:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   d65d8:	f001 011f 	and.w	r1, r1, #31
   d65dc:	f7ff ff71 	bl	d64c2 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(yr));                       // set the yr (11111111)
   d65e0:	f007 fff8 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d65e4:	fbb9 f1f4 	udiv	r1, r9, r4
   d65e8:	6803      	ldr	r3, [r0, #0]
   d65ea:	fb04 9411 	mls	r4, r4, r1, r9
   d65ee:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   d65f2:	689b      	ldr	r3, [r3, #8]
   d65f4:	b2c9      	uxtb	r1, r1
   d65f6:	4798      	blx	r3

    Wire.endTransmission();
   d65f8:	f007 ffec 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d65fc:	f007 fb12 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

    // Start Clock:
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d6600:	f007 ffe8 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6604:	216f      	movs	r1, #111	; 0x6f
   d6606:	f007 fb06 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d660a:	f007 ffe3 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d660e:	2100      	movs	r1, #0
   d6610:	f7ff ff57 	bl	d64c2 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
   d6614:	f007 ffde 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6618:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d661c:	f7ff ff51 	bl	d64c2 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d6620:	f007 ffd8 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6624:	f007 fafe 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d6628:	4640      	mov	r0, r8
  }

// Serial.print("Set time: ");
// Serial.println(String(yr)+":"+String(mnth)+":"+String(dyofMnth)+":"+String(dyofWk)+":"+String(hr)+":"+String(min)+":"+String(sec));

}
   d662a:	b003      	add	sp, #12
   d662c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6630:	f007 bb0d 	b.w	ddc4e <_ZN7TwoWire6unlockEv>

000d6634 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>:
  byte *hr,
  byte *dyofWk,
  byte *dyofMnth,
  byte *mnth,
  byte *yr)
{
   d6634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6638:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   d663c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d663e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d6640:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d6642:	4699      	mov	r9, r3
   d6644:	4692      	mov	sl, r2
   d6646:	468b      	mov	fp, r1
  WITH_LOCK(Wire) {
   d6648:	f007 ffc4 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d664c:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d664e:	f007 faf5 	bl	ddc3c <_ZN7TwoWire4lockEv>
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d6652:	f007 ffbf 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6656:	216f      	movs	r1, #111	; 0x6f
   d6658:	f007 fadd 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d665c:	f007 ffba 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6660:	2100      	movs	r1, #0
   d6662:	f7ff ff2e 	bl	d64c2 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d6666:	f007 ffb5 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d666a:	f007 fadb 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(MCP7941x_RTC_I2C_ADDR, 7);
   d666e:	f007 ffb1 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6672:	216f      	movs	r1, #111	; 0x6f
   d6674:	2207      	movs	r2, #7
   d6676:	f007 fac7 	bl	ddc08 <_ZN7TwoWire11requestFromEhj>

    // A few of these need masks because certain bits are control bits
    *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d667a:	f007 ffab 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d667e:	6803      	ldr	r3, [r0, #0]
   d6680:	695b      	ldr	r3, [r3, #20]
   d6682:	4798      	blx	r3
   d6684:	b2c0      	uxtb	r0, r0
   d6686:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d668a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d668e:	f000 000f 	and.w	r0, r0, #15
   d6692:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d6696:	f88b 0000 	strb.w	r0, [fp]
    *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d669a:	f007 ff9b 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d669e:	6803      	ldr	r3, [r0, #0]
   d66a0:	695b      	ldr	r3, [r3, #20]
   d66a2:	4798      	blx	r3
   d66a4:	b2c0      	uxtb	r0, r0
   d66a6:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d66aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d66ae:	f000 000f 	and.w	r0, r0, #15
   d66b2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d66b6:	f88a 0000 	strb.w	r0, [sl]
    *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d66ba:	f007 ff8b 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d66be:	6803      	ldr	r3, [r0, #0]
   d66c0:	695b      	ldr	r3, [r3, #20]
   d66c2:	4798      	blx	r3
   d66c4:	b2c0      	uxtb	r0, r0
   d66c6:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d66ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d66ce:	f000 000f 	and.w	r0, r0, #15
   d66d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d66d6:	f889 0000 	strb.w	r0, [r9]
    *dyofWk  = bcdToDec(WireReceive() & 0x07);  // 01111111
   d66da:	f007 ff7b 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d66de:	6803      	ldr	r3, [r0, #0]
   d66e0:	695b      	ldr	r3, [r3, #20]
   d66e2:	4798      	blx	r3
   d66e4:	f000 0007 	and.w	r0, r0, #7
   d66e8:	f888 0000 	strb.w	r0, [r8]
    *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d66ec:	f007 ff72 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d66f0:	6803      	ldr	r3, [r0, #0]
   d66f2:	695b      	ldr	r3, [r3, #20]
   d66f4:	4798      	blx	r3
   d66f6:	b2c0      	uxtb	r0, r0
   d66f8:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d66fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d6700:	f000 000f 	and.w	r0, r0, #15
   d6704:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d6708:	7038      	strb	r0, [r7, #0]
    *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   d670a:	f007 ff63 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d670e:	6803      	ldr	r3, [r0, #0]
   d6710:	695b      	ldr	r3, [r3, #20]
   d6712:	4798      	blx	r3
   d6714:	b2c0      	uxtb	r0, r0
   d6716:	f3c0 1200 	ubfx	r2, r0, #4, #1
   d671a:	0093      	lsls	r3, r2, #2
   d671c:	4413      	add	r3, r2
   d671e:	f000 000f 	and.w	r0, r0, #15
   d6722:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d6726:	7030      	strb	r0, [r6, #0]
    *yr       = bcdToDec(WireReceive());         // 11111111
   d6728:	f007 ff54 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d672c:	6803      	ldr	r3, [r0, #0]
   d672e:	695b      	ldr	r3, [r3, #20]
   d6730:	4798      	blx	r3
   d6732:	b2c0      	uxtb	r0, r0
   d6734:	0903      	lsrs	r3, r0, #4
   d6736:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d673a:	f000 000f 	and.w	r0, r0, #15
   d673e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d6742:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d6744:	4620      	mov	r0, r4
  }
}
   d6746:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d674a:	f007 ba80 	b.w	ddc4e <_ZN7TwoWire6unlockEv>

000d674e <_ZN8MCP7941x11setUnixTimeEm>:
}

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d674e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6752:	4607      	mov	r7, r0
   d6754:	b08d      	sub	sp, #52	; 0x34
  byte sec = (byte)Time.second(unixTime);
   d6756:	4608      	mov	r0, r1
}

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d6758:	460c      	mov	r4, r1
  byte sec = (byte)Time.second(unixTime);
   d675a:	f006 fab9 	bl	dccd0 <_ZN9TimeClass6secondEl>
   d675e:	4680      	mov	r8, r0
  byte min= (byte)Time.minute(unixTime);
   d6760:	4620      	mov	r0, r4
   d6762:	f006 faad 	bl	dccc0 <_ZN9TimeClass6minuteEl>
   d6766:	4681      	mov	r9, r0
  byte hr= (byte)Time.hour(unixTime);
   d6768:	4620      	mov	r0, r4
   d676a:	f006 faa1 	bl	dccb0 <_ZN9TimeClass4hourEl>
   d676e:	4682      	mov	sl, r0
  byte dyofWk= (byte)Time.weekday(unixTime);
   d6770:	4620      	mov	r0, r4
   d6772:	f006 fabd 	bl	dccf0 <_ZN9TimeClass7weekdayEl>
   d6776:	4605      	mov	r5, r0
  byte dyofMnth= (byte)Time.day(unixTime);
   d6778:	4620      	mov	r0, r4
   d677a:	f006 fab1 	bl	dcce0 <_ZN9TimeClass3dayEl>
   d677e:	4606      	mov	r6, r0
  byte mnth= (byte)Time.month(unixTime);
   d6780:	4620      	mov	r0, r4
   d6782:	f006 fabf 	bl	dcd04 <_ZN9TimeClass5monthEl>
   d6786:	4683      	mov	fp, r0
  String yrString = String(Time.year(unixTime));
   d6788:	4620      	mov	r0, r4
   d678a:	f006 fac5 	bl	dcd18 <_ZN9TimeClass4yearEl>
   d678e:	220a      	movs	r2, #10
   d6790:	4601      	mov	r1, r0
   d6792:	a804      	add	r0, sp, #16
   d6794:	f005 ffdb 	bl	dc74e <_ZN6StringC1Eih>
  byte yr = (byte) yrString.substring(2).toInt();
   d6798:	a904      	add	r1, sp, #16
   d679a:	2202      	movs	r2, #2
   d679c:	a808      	add	r0, sp, #32
   d679e:	f006 f885 	bl	dc8ac <_ZNK6String9substringEj>
   d67a2:	a808      	add	r0, sp, #32
   d67a4:	f006 f889 	bl	dc8ba <_ZNK6String5toIntEv>
   d67a8:	4604      	mov	r4, r0
   d67aa:	a808      	add	r0, sp, #32
   d67ac:	f005 ff02 	bl	dc5b4 <_ZN6StringD1Ev>
    min,        // 0-59
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
   d67b0:	b2e4      	uxtb	r4, r4
   d67b2:	fa5f f38b 	uxtb.w	r3, fp
   d67b6:	b2f6      	uxtb	r6, r6
   d67b8:	b2ed      	uxtb	r5, r5
   d67ba:	9302      	str	r3, [sp, #8]
   d67bc:	fa5f f289 	uxtb.w	r2, r9
   d67c0:	fa5f f38a 	uxtb.w	r3, sl
   d67c4:	fa5f f188 	uxtb.w	r1, r8
   d67c8:	4638      	mov	r0, r7
   d67ca:	9403      	str	r4, [sp, #12]
   d67cc:	9601      	str	r6, [sp, #4]
   d67ce:	9500      	str	r5, [sp, #0]
   d67d0:	f7ff fe9e 	bl	d6510 <_ZN8MCP7941x11setDateTimeEhhhhhhh>
  byte min= (byte)Time.minute(unixTime);
  byte hr= (byte)Time.hour(unixTime);
  byte dyofWk= (byte)Time.weekday(unixTime);
  byte dyofMnth= (byte)Time.day(unixTime);
  byte mnth= (byte)Time.month(unixTime);
  String yrString = String(Time.year(unixTime));
   d67d4:	a804      	add	r0, sp, #16
   d67d6:	f005 feed 	bl	dc5b4 <_ZN6StringD1Ev>
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
}
   d67da:	b00d      	add	sp, #52	; 0x34
   d67dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d67e0 <_ZN8MCP7941x6rtcNowEv>:

//gets unix as defined by the external RTC
// Note that since the MCP7941 only stores years 0-99
// we assume time from 2000 onwards.
// Only works to year 2037!
uint32_t MCP7941x::rtcNow(){
   d67e0:	b500      	push	{lr}
   d67e2:	b091      	sub	sp, #68	; 0x44
		  &min,
		  &hr,
		  &dyofWk,
		  &dyofMnth,
		  &mnth,
		  &yr);
   d67e4:	f10d 031b 	add.w	r3, sp, #27
   d67e8:	9303      	str	r3, [sp, #12]
   d67ea:	f10d 031a 	add.w	r3, sp, #26
   d67ee:	9302      	str	r3, [sp, #8]
   d67f0:	f10d 0319 	add.w	r3, sp, #25
   d67f4:	9301      	str	r3, [sp, #4]
   d67f6:	ab06      	add	r3, sp, #24
   d67f8:	9300      	str	r3, [sp, #0]
   d67fa:	f10d 0216 	add.w	r2, sp, #22
   d67fe:	f10d 0317 	add.w	r3, sp, #23
   d6802:	f10d 0115 	add.w	r1, sp, #21
   d6806:	f7ff ff15 	bl	d6634 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>

  // Deal with mktime 2038 bug
  if (yr>37)
   d680a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d680e:	2b25      	cmp	r3, #37	; 0x25
  {
    yr = 0;
   d6810:	bf84      	itt	hi
   d6812:	2300      	movhi	r3, #0
   d6814:	f88d 301b 	strbhi.w	r3, [sp, #27]
  }

  //declare variable
  struct tm tm;
  tm.tm_sec = (sec);
   d6818:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d681c:	9307      	str	r3, [sp, #28]
  tm.tm_min = (min);
   d681e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d6822:	9308      	str	r3, [sp, #32]
  tm.tm_hour = (hr);
   d6824:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d6828:	9309      	str	r3, [sp, #36]	; 0x24
  tm.tm_mday = (dyofMnth);
   d682a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d682e:	930a      	str	r3, [sp, #40]	; 0x28
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
   d6830:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d6834:	3b01      	subs	r3, #1
   d6836:	930b      	str	r3, [sp, #44]	; 0x2c
  tm.tm_year = yr + 100; // The number of years since 1900 (by definition of tm)
   d6838:	f89d 301b 	ldrb.w	r3, [sp, #27]

  time_t moment = mktime(&tm);//create epoc time_t object
   d683c:	a807      	add	r0, sp, #28
  tm.tm_sec = (sec);
  tm.tm_min = (min);
  tm.tm_hour = (hr);
  tm.tm_mday = (dyofMnth);
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
  tm.tm_year = yr + 100; // The number of years since 1900 (by definition of tm)
   d683e:	3364      	adds	r3, #100	; 0x64
   d6840:	930c      	str	r3, [sp, #48]	; 0x30

  time_t moment = mktime(&tm);//create epoc time_t object
   d6842:	f00a ff7d 	bl	e1740 <mktime>

  return uint32_t(moment);
}
   d6846:	b011      	add	sp, #68	; 0x44
   d6848:	f85d fb04 	ldr.w	pc, [sp], #4

000d684c <_GLOBAL__sub_I__ZN8MCP7941xC2Ev>:
   d684c:	f004 bde8 	b.w	db420 <HAL_Pin_Map>

000d6850 <_ZN16Adafruit_TSL2591D1Ev>:
/**************************************************************************/
/*! 
    @brief  Class that stores state and functions for interacting with TSL2591 Light Sensor
*/
/**************************************************************************/
class Adafruit_TSL2591 : public Adafruit_Sensor
   d6850:	4770      	bx	lr
	...

000d6854 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t>:
    @brief  Gets the overall sensor_t data including the type, range and resulution
    @param  sensor Pointer to Adafruit_Sensor sensor_t object that will be filled with sensor type data
*/
/**************************************************************************/
void Adafruit_TSL2591::getSensor(sensor_t *sensor)
{
   d6854:	b538      	push	{r3, r4, r5, lr}
   d6856:	460c      	mov	r4, r1
   d6858:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d685a:	2228      	movs	r2, #40	; 0x28
   d685c:	2100      	movs	r1, #0
   d685e:	4620      	mov	r0, r4
   d6860:	f00a fe8a 	bl	e1578 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
   d6864:	220b      	movs	r2, #11
   d6866:	490a      	ldr	r1, [pc, #40]	; (d6890 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x3c>)
   d6868:	4620      	mov	r0, r4
   d686a:	f00b fe70 	bl	e254e <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d686e:	2300      	movs	r3, #0
  sensor->version     = 1;
   d6870:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d6872:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
   d6874:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
   d6876:	68aa      	ldr	r2, [r5, #8]
  sensor->type        = SENSOR_TYPE_LIGHT;
  sensor->min_delay   = 0;
   d6878:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 88000.0;
   d687a:	4b06      	ldr	r3, [pc, #24]	; (d6894 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x40>)
   d687c:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0.0;
   d687e:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
   d6880:	6122      	str	r2, [r4, #16]
  sensor->type        = SENSOR_TYPE_LIGHT;
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
   d6882:	61e3      	str	r3, [r4, #28]
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_LIGHT;
   d6884:	2205      	movs	r2, #5
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
  sensor->resolution  = 0.001;
   d6886:	4b04      	ldr	r3, [pc, #16]	; (d6898 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x44>)
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_LIGHT;
   d6888:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
  sensor->resolution  = 0.001;
   d688a:	6223      	str	r3, [r4, #32]
   d688c:	bd38      	pop	{r3, r4, r5, pc}
   d688e:	bf00      	nop
   d6890:	000e4cf6 	.word	0x000e4cf6
   d6894:	47abe000 	.word	0x47abe000
   d6898:	3a83126f 	.word	0x3a83126f

000d689c <_ZN16Adafruit_TSL2591D0Ev>:
   d689c:	b510      	push	{r4, lr}
   d689e:	2110      	movs	r1, #16
   d68a0:	4604      	mov	r4, r0
   d68a2:	f007 fecb 	bl	de63c <_ZdlPvj>
   d68a6:	4620      	mov	r0, r4
   d68a8:	bd10      	pop	{r4, pc}
	...

000d68ac <_ZN16Adafruit_TSL2591C1El>:
/*!
    @brief  Instantiates a new Adafruit TSL2591 class
    @param  sensorID An optional ID # so you can track this sensor, it will tag sensorEvents you create.
*/
/**************************************************************************/
Adafruit_TSL2591::Adafruit_TSL2591(int32_t sensorID)
   d68ac:	4a04      	ldr	r2, [pc, #16]	; (d68c0 <_ZN16Adafruit_TSL2591C1El+0x14>)
   d68ae:	6002      	str	r2, [r0, #0]
{
  _initialized = false;
   d68b0:	2200      	movs	r2, #0
   d68b2:	7302      	strb	r2, [r0, #12]
  _integration = TSL2591_INTEGRATIONTIME_100MS;
   d68b4:	7142      	strb	r2, [r0, #5]
  _gain        = TSL2591_GAIN_MED;
   d68b6:	2210      	movs	r2, #16
   d68b8:	7182      	strb	r2, [r0, #6]
  _sensorID    = sensorID;
   d68ba:	6081      	str	r1, [r0, #8]

  // we cant do wire initialization till later, because we havent loaded Wire yet
}
   d68bc:	4770      	bx	lr
   d68be:	bf00      	nop
   d68c0:	000e4e08 	.word	0x000e4e08

000d68c4 <_ZN16Adafruit_TSL25917getGainEv>:
*/
/**************************************************************************/
tsl2591Gain_t Adafruit_TSL2591::getGain()
{
  return _gain;
}
   d68c4:	7980      	ldrb	r0, [r0, #6]
   d68c6:	4770      	bx	lr

000d68c8 <_ZN16Adafruit_TSL25919getTimingEv>:
*/
/**************************************************************************/
tsl2591IntegrationTime_t Adafruit_TSL2591::getTiming()
{
  return _integration;
}
   d68c8:	7940      	ldrb	r0, [r0, #5]
   d68ca:	4770      	bx	lr

000d68cc <_ZN16Adafruit_TSL259112calculateLuxEtt>:
  float    atime, again;
  float    cpl, lux1, lux2, lux;
  uint32_t chan0, chan1;

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
   d68cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d68d0:	4299      	cmp	r1, r3
    @param  ch1 Data from channel 1 (IR)
    @returns Lux, based on AMS coefficients
*/
/**************************************************************************/
float Adafruit_TSL2591::calculateLux(uint16_t ch0, uint16_t ch1)
{
   d68d2:	b510      	push	{r4, lr}
  float    atime, again;
  float    cpl, lux1, lux2, lux;
  uint32_t chan0, chan1;

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
   d68d4:	d039      	beq.n	d694a <_ZN16Adafruit_TSL259112calculateLuxEtt+0x7e>
   d68d6:	429a      	cmp	r2, r3
   d68d8:	d037      	beq.n	d694a <_ZN16Adafruit_TSL259112calculateLuxEtt+0x7e>
   d68da:	7943      	ldrb	r3, [r0, #5]
   d68dc:	3b01      	subs	r3, #1
   d68de:	b2db      	uxtb	r3, r3
   d68e0:	2b04      	cmp	r3, #4
   d68e2:	bf97      	itett	ls
   d68e4:	4c1a      	ldrls	r4, [pc, #104]	; (d6950 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x84>)
  }

  // Note: This algorithm is based on preliminary coefficients
  // provided by AMS and may need to be updated in the future

  switch (_integration)
   d68e6:	eddf 5a1b 	vldrhi	s11, [pc, #108]	; d6954 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x88>
   d68ea:	eb04 0383 	addls.w	r3, r4, r3, lsl #2
   d68ee:	edd3 5a00 	vldrls	s11, [r3]
    default: // 100ms
      atime = 100.0F;
      break;
  }

  switch (_gain)
   d68f2:	7983      	ldrb	r3, [r0, #6]
   d68f4:	2b20      	cmp	r3, #32
   d68f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d68fa:	d008      	beq.n	d690e <_ZN16Adafruit_TSL259112calculateLuxEtt+0x42>
   d68fc:	2b30      	cmp	r3, #48	; 0x30
   d68fe:	d009      	beq.n	d6914 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x48>
   d6900:	2b10      	cmp	r3, #16
  {
    case TSL2591_GAIN_LOW :
      again = 1.0F;
   d6902:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
   d6906:	bf18      	it	ne
   d6908:	eef0 6a47 	vmovne.f32	s13, s14
   d690c:	e004      	b.n	d6918 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x4c>
      break;
    case TSL2591_GAIN_MED :
      again = 25.0F;
      break;
    case TSL2591_GAIN_HIGH :
      again = 428.0F;
   d690e:	eddf 6a12 	vldr	s13, [pc, #72]	; d6958 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x8c>
   d6912:	e001      	b.n	d6918 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x4c>
      break;
    case TSL2591_GAIN_MAX :
      again = 9876.0F;
   d6914:	eddf 6a11 	vldr	s13, [pc, #68]	; d695c <_ZN16Adafruit_TSL259112calculateLuxEtt+0x90>
  //lux2 = ( ( TSL2591_LUX_COEFC * (float)ch0 ) - ( TSL2591_LUX_COEFD * (float)ch1 ) ) / cpl;
  //lux = lux1 > lux2 ? lux1 : lux2;

  // Alternate lux calculation 1
  // See: https://github.com/adafruit/Adafruit_TSL2591_Library/issues/14
  lux = ( ((float)ch0 - (float)ch1 )) * (1.0F - ((float)ch1/(float)ch0) ) / cpl;
   d6918:	ee07 1a90 	vmov	s15, r1
   d691c:	ee06 2a10 	vmov	s12, r2
   d6920:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d6924:	eeb8 6a46 	vcvt.f32.u32	s12, s12
   d6928:	ee65 6aa6 	vmul.f32	s13, s11, s13
   d692c:	ee86 5a27 	vdiv.f32	s10, s12, s15
   d6930:	ee77 7ac6 	vsub.f32	s15, s15, s12
   d6934:	ee37 7a45 	vsub.f32	s14, s14, s10
   d6938:	ed9f 6a09 	vldr	s12, [pc, #36]	; d6960 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x94>
   d693c:	ee67 7a27 	vmul.f32	s15, s14, s15
   d6940:	ee86 7a86 	vdiv.f32	s14, s13, s12
   d6944:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6948:	bd10      	pop	{r4, pc}

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
  {
    // Signal an overflow
    return 0;
   d694a:	ed9f 0a06 	vldr	s0, [pc, #24]	; d6964 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x98>
  // Alternate lux calculation 2
  //lux = ( (float)ch0 - ( 1.7F * (float)ch1 ) ) / cpl;

  // Signal I2C had no errors
  return lux;
}
   d694e:	bd10      	pop	{r4, pc}
   d6950:	000e4dec 	.word	0x000e4dec
   d6954:	42c80000 	.word	0x42c80000
   d6958:	43d60000 	.word	0x43d60000
   d695c:	461a5000 	.word	0x461a5000
   d6960:	43cc0000 	.word	0x43cc0000
   d6964:	00000000 	.word	0x00000000

000d6968 <_ZN16Adafruit_TSL25915read8Eh>:
}
/*******************************************************/


uint8_t Adafruit_TSL2591::read8(uint8_t reg)
{
   d6968:	b510      	push	{r4, lr}
   d696a:	460c      	mov	r4, r1
  uint8_t x;

  Wire.beginTransmission(TSL2591_ADDR);
   d696c:	f007 fe32 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6970:	2129      	movs	r1, #41	; 0x29
   d6972:	f007 f950 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d6976:	f007 fe2d 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d697a:	6803      	ldr	r3, [r0, #0]
   d697c:	4621      	mov	r1, r4
   d697e:	689b      	ldr	r3, [r3, #8]
   d6980:	4798      	blx	r3
  Wire.endTransmission();
   d6982:	f007 fe27 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6986:	f007 f94d 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(TSL2591_ADDR, 1);
   d698a:	f007 fe23 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d698e:	2201      	movs	r2, #1
   d6990:	2129      	movs	r1, #41	; 0x29
   d6992:	f007 f939 	bl	ddc08 <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
   d6996:	f007 fe1d 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d699a:	6803      	ldr	r3, [r0, #0]
   d699c:	695b      	ldr	r3, [r3, #20]
   d699e:	4798      	blx	r3

  return x;
}
   d69a0:	b2c0      	uxtb	r0, r0
   d69a2:	bd10      	pop	{r4, pc}

000d69a4 <_ZN16Adafruit_TSL25916read16Eh>:

uint16_t Adafruit_TSL2591::read16(uint8_t reg)
{
   d69a4:	b510      	push	{r4, lr}
   d69a6:	460c      	mov	r4, r1
  uint16_t x;
  uint16_t t;

  Wire.beginTransmission(TSL2591_ADDR);
   d69a8:	f007 fe14 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d69ac:	2129      	movs	r1, #41	; 0x29
   d69ae:	f007 f932 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d69b2:	f007 fe0f 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d69b6:	6803      	ldr	r3, [r0, #0]
   d69b8:	4621      	mov	r1, r4
   d69ba:	689b      	ldr	r3, [r3, #8]
   d69bc:	4798      	blx	r3
  Wire.endTransmission();
   d69be:	f007 fe09 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d69c2:	f007 f92f 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(TSL2591_ADDR, 2);
   d69c6:	f007 fe05 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d69ca:	2202      	movs	r2, #2
   d69cc:	2129      	movs	r1, #41	; 0x29
   d69ce:	f007 f91b 	bl	ddc08 <_ZN7TwoWire11requestFromEhj>
  t = Wire.read();
   d69d2:	f007 fdff 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d69d6:	6803      	ldr	r3, [r0, #0]
   d69d8:	695b      	ldr	r3, [r3, #20]
   d69da:	4798      	blx	r3
   d69dc:	4604      	mov	r4, r0
  x = Wire.read();
   d69de:	f007 fdf9 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d69e2:	6803      	ldr	r3, [r0, #0]
   d69e4:	695b      	ldr	r3, [r3, #20]
   d69e6:	4798      	blx	r3

  x <<= 8;
  x |= t;
  return x;
   d69e8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
   d69ec:	b280      	uxth	r0, r0
   d69ee:	bd10      	pop	{r4, pc}

000d69f0 <_ZN16Adafruit_TSL25916write8Ehh>:

void Adafruit_TSL2591::write8 (uint8_t reg, uint8_t value)
{
   d69f0:	b538      	push	{r3, r4, r5, lr}
   d69f2:	4614      	mov	r4, r2
   d69f4:	460d      	mov	r5, r1
  Wire.beginTransmission(TSL2591_ADDR);
   d69f6:	f007 fded 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d69fa:	2129      	movs	r1, #41	; 0x29
   d69fc:	f007 f90b 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d6a00:	f007 fde8 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6a04:	6803      	ldr	r3, [r0, #0]
   d6a06:	4629      	mov	r1, r5
   d6a08:	689b      	ldr	r3, [r3, #8]
   d6a0a:	4798      	blx	r3
  Wire.write(value);
   d6a0c:	f007 fde2 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6a10:	6803      	ldr	r3, [r0, #0]
   d6a12:	4621      	mov	r1, r4
   d6a14:	689b      	ldr	r3, [r3, #8]
   d6a16:	4798      	blx	r3
  Wire.endTransmission();
   d6a18:	f007 fddc 	bl	de5d4 <_Z19__fetch_global_Wirev>
}
   d6a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_TSL2591::write8 (uint8_t reg, uint8_t value)
{
  Wire.beginTransmission(TSL2591_ADDR);
  Wire.write(reg);
  Wire.write(value);
  Wire.endTransmission();
   d6a20:	f007 b900 	b.w	ddc24 <_ZN7TwoWire15endTransmissionEv>

000d6a24 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>:
    @brief  Setter for sensor light gain
    @param  gain {@link tsl2591Gain_t} gain value
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
   d6a24:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d6a26:	7b03      	ldrb	r3, [r0, #12]
    @brief  Setter for sensor light gain
    @param  gain {@link tsl2591Gain_t} gain value
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
   d6a28:	4604      	mov	r4, r0
   d6a2a:	460d      	mov	r5, r1
  if (!_initialized) {
   d6a2c:	b173      	cbz	r3, d6a4c <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0x28>
    if (!begin()) {
      return;
    }
  }

  enable();
   d6a2e:	4620      	mov	r0, r4
   d6a30:	f000 f82e 	bl	d6a90 <_ZN16Adafruit_TSL25916enableEv>
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d6a34:	7962      	ldrb	r2, [r4, #5]
      return;
    }
  }

  enable();
  _gain = gain;
   d6a36:	71a5      	strb	r5, [r4, #6]
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d6a38:	4620      	mov	r0, r4
   d6a3a:	432a      	orrs	r2, r5
   d6a3c:	21a1      	movs	r1, #161	; 0xa1
   d6a3e:	f7ff ffd7 	bl	d69f0 <_ZN16Adafruit_TSL25916write8Ehh>
  disable();
   d6a42:	4620      	mov	r0, r4
}
   d6a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  enable();
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
   d6a48:	f000 b832 	b.w	d6ab0 <_ZN16Adafruit_TSL25917disableEv>
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
  if (!_initialized) {
    if (!begin()) {
   d6a4c:	f000 f803 	bl	d6a56 <_ZN16Adafruit_TSL25915beginEv>
   d6a50:	2800      	cmp	r0, #0
   d6a52:	d1ec      	bne.n	d6a2e <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0xa>

  enable();
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
}
   d6a54:	bd38      	pop	{r3, r4, r5, pc}

000d6a56 <_ZN16Adafruit_TSL25915beginEv>:
    @brief  Setups the I2C interface and hardware, identifies if chip is found
    @returns True if a TSL2591 is found, false on any failure
*/
/**************************************************************************/
boolean Adafruit_TSL2591::begin(void)
{
   d6a56:	b538      	push	{r3, r4, r5, lr}
   d6a58:	4604      	mov	r4, r0
  Wire.begin();
   d6a5a:	f007 fdbb 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6a5e:	f007 f89f 	bl	ddba0 <_ZN7TwoWire5beginEv>
    Serial.print("$"); Serial.print(i, HEX);
    Serial.print(" = 0x"); Serial.println(read8(i), HEX);
  }
  */

  uint8_t id = read8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_DEVICE_ID);
   d6a62:	21b2      	movs	r1, #178	; 0xb2
   d6a64:	4620      	mov	r0, r4
   d6a66:	f7ff ff7f 	bl	d6968 <_ZN16Adafruit_TSL25915read8Eh>
  if (id != 0x50 ) {
   d6a6a:	2850      	cmp	r0, #80	; 0x50
   d6a6c:	d10e      	bne.n	d6a8c <_ZN16Adafruit_TSL25915beginEv+0x36>
    return false;
  }
  // Serial.println("Found Adafruit_TSL2591");

  _initialized = true;
   d6a6e:	2501      	movs	r5, #1

  // Set default integration time and gain
  setTiming(_integration);
   d6a70:	7961      	ldrb	r1, [r4, #5]
  if (id != 0x50 ) {
    return false;
  }
  // Serial.println("Found Adafruit_TSL2591");

  _initialized = true;
   d6a72:	7325      	strb	r5, [r4, #12]

  // Set default integration time and gain
  setTiming(_integration);
   d6a74:	4620      	mov	r0, r4
   d6a76:	f000 f82b 	bl	d6ad0 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>
  setGain(_gain);
   d6a7a:	79a1      	ldrb	r1, [r4, #6]
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	f7ff ffd1 	bl	d6a24 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>

  // Note: by default, the device is in power down mode on bootup
  disable();
   d6a82:	4620      	mov	r0, r4
   d6a84:	f000 f814 	bl	d6ab0 <_ZN16Adafruit_TSL25917disableEv>
   d6a88:	4628      	mov	r0, r5
   d6a8a:	bd38      	pop	{r3, r4, r5, pc}
  }
  */

  uint8_t id = read8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_DEVICE_ID);
  if (id != 0x50 ) {
    return false;
   d6a8c:	2000      	movs	r0, #0

  // Note: by default, the device is in power down mode on bootup
  disable();

  return true;
}
   d6a8e:	bd38      	pop	{r3, r4, r5, pc}

000d6a90 <_ZN16Adafruit_TSL25916enableEv>:
/*!
    @brief  Enables the chip, so it's ready to take readings
*/
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
   d6a90:	b510      	push	{r4, lr}
  if (!_initialized)
   d6a92:	7b03      	ldrb	r3, [r0, #12]
/*!
    @brief  Enables the chip, so it's ready to take readings
*/
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
   d6a94:	4604      	mov	r4, r0
  if (!_initialized)
   d6a96:	b133      	cbz	r3, d6aa6 <_ZN16Adafruit_TSL25916enableEv+0x16>
    }
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
   d6a98:	4620      	mov	r0, r4
   d6a9a:	2293      	movs	r2, #147	; 0x93
   d6a9c:	21a0      	movs	r1, #160	; 0xa0
}
   d6a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
   d6aa2:	f7ff bfa5 	b.w	d69f0 <_ZN16Adafruit_TSL25916write8Ehh>
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
  if (!_initialized)
  {
    if (!begin())
   d6aa6:	f7ff ffd6 	bl	d6a56 <_ZN16Adafruit_TSL25915beginEv>
   d6aaa:	2800      	cmp	r0, #0
   d6aac:	d1f4      	bne.n	d6a98 <_ZN16Adafruit_TSL25916enableEv+0x8>
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
}
   d6aae:	bd10      	pop	{r4, pc}

000d6ab0 <_ZN16Adafruit_TSL25917disableEv>:
/*!
    @brief Disables the chip, so it's in power down mode
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
   d6ab0:	b510      	push	{r4, lr}
  if (!_initialized) {
   d6ab2:	7b03      	ldrb	r3, [r0, #12]
/*!
    @brief Disables the chip, so it's in power down mode
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
   d6ab4:	4604      	mov	r4, r0
  if (!_initialized) {
   d6ab6:	b133      	cbz	r3, d6ac6 <_ZN16Adafruit_TSL25917disableEv+0x16>
      return;
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
   d6ab8:	4620      	mov	r0, r4
   d6aba:	2200      	movs	r2, #0
   d6abc:	21a0      	movs	r1, #160	; 0xa0
}
   d6abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return;
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
   d6ac2:	f7ff bf95 	b.w	d69f0 <_ZN16Adafruit_TSL25916write8Ehh>
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
  if (!_initialized) {
    if (!begin()) {
   d6ac6:	f7ff ffc6 	bl	d6a56 <_ZN16Adafruit_TSL25915beginEv>
   d6aca:	2800      	cmp	r0, #0
   d6acc:	d1f4      	bne.n	d6ab8 <_ZN16Adafruit_TSL25917disableEv+0x8>
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
}
   d6ace:	bd10      	pop	{r4, pc}

000d6ad0 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>:
    @brief  Setter for sensor integration time setting
    @param integration {@link tsl2591IntegrationTime_t} integration time setting
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
   d6ad0:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d6ad2:	7b03      	ldrb	r3, [r0, #12]
    @brief  Setter for sensor integration time setting
    @param integration {@link tsl2591IntegrationTime_t} integration time setting
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
   d6ad4:	4604      	mov	r4, r0
   d6ad6:	460d      	mov	r5, r1
  if (!_initialized) {
   d6ad8:	b173      	cbz	r3, d6af8 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0x28>
    if (!begin()) {
      return;
    }
  }

  enable();
   d6ada:	4620      	mov	r0, r4
   d6adc:	f7ff ffd8 	bl	d6a90 <_ZN16Adafruit_TSL25916enableEv>
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d6ae0:	79a2      	ldrb	r2, [r4, #6]
      return;
    }
  }

  enable();
  _integration = integration;
   d6ae2:	7165      	strb	r5, [r4, #5]
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d6ae4:	4620      	mov	r0, r4
   d6ae6:	432a      	orrs	r2, r5
   d6ae8:	21a1      	movs	r1, #161	; 0xa1
   d6aea:	f7ff ff81 	bl	d69f0 <_ZN16Adafruit_TSL25916write8Ehh>
  disable();
   d6aee:	4620      	mov	r0, r4
}
   d6af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  enable();
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
   d6af4:	f7ff bfdc 	b.w	d6ab0 <_ZN16Adafruit_TSL25917disableEv>
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
  if (!_initialized) {
    if (!begin()) {
   d6af8:	f7ff ffad 	bl	d6a56 <_ZN16Adafruit_TSL25915beginEv>
   d6afc:	2800      	cmp	r0, #0
   d6afe:	d1ec      	bne.n	d6ada <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0xa>

  enable();
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
}
   d6b00:	bd38      	pop	{r3, r4, r5, pc}

000d6b02 <_ZN16Adafruit_TSL259117getFullLuminosityEv>:
    @brief  Reads the raw data from both light channels
    @returns 32-bit raw count where high word is IR, low word is IR+Visible
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
   d6b02:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d6b04:	7b03      	ldrb	r3, [r0, #12]
    @brief  Reads the raw data from both light channels
    @returns 32-bit raw count where high word is IR, low word is IR+Visible
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
   d6b06:	4605      	mov	r5, r0
  if (!_initialized) {
   d6b08:	b123      	cbz	r3, d6b14 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x12>
      return 0;
    }
  }

  // Enable the device
  enable();
   d6b0a:	4628      	mov	r0, r5
   d6b0c:	f7ff ffc0 	bl	d6a90 <_ZN16Adafruit_TSL25916enableEv>
   d6b10:	2400      	movs	r4, #0
   d6b12:	e004      	b.n	d6b1e <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x1c>
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
  if (!_initialized) {
    if (!begin()) {
   d6b14:	f7ff ff9f 	bl	d6a56 <_ZN16Adafruit_TSL25915beginEv>
   d6b18:	2800      	cmp	r0, #0
   d6b1a:	d1f6      	bne.n	d6b0a <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x8>
   d6b1c:	bd38      	pop	{r3, r4, r5, pc}

  // Enable the device
  enable();

  // Wait x ms for ADC to complete
  for (uint8_t d=0; d<=_integration; d++)
   d6b1e:	796a      	ldrb	r2, [r5, #5]
   d6b20:	b2e3      	uxtb	r3, r4
   d6b22:	429a      	cmp	r2, r3
   d6b24:	f104 0401 	add.w	r4, r4, #1
   d6b28:	d303      	bcc.n	d6b32 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x30>
  {
    delay(120);
   d6b2a:	2078      	movs	r0, #120	; 0x78
   d6b2c:	f006 fa1e 	bl	dcf6c <delay>

  // Enable the device
  enable();

  // Wait x ms for ADC to complete
  for (uint8_t d=0; d<=_integration; d++)
   d6b30:	e7f5      	b.n	d6b1e <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x1c>

  // CHAN0 must be read before CHAN1
  // See: https://forums.adafruit.com/viewtopic.php?f=19&t=124176
  uint32_t x;
  uint16_t y;
  y |= read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN0_LOW);
   d6b32:	21b4      	movs	r1, #180	; 0xb4
   d6b34:	4628      	mov	r0, r5
   d6b36:	f7ff ff35 	bl	d69a4 <_ZN16Adafruit_TSL25916read16Eh>
  x = read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN1_LOW);
   d6b3a:	21b6      	movs	r1, #182	; 0xb6

  // CHAN0 must be read before CHAN1
  // See: https://forums.adafruit.com/viewtopic.php?f=19&t=124176
  uint32_t x;
  uint16_t y;
  y |= read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN0_LOW);
   d6b3c:	b284      	uxth	r4, r0
  x = read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN1_LOW);
   d6b3e:	4628      	mov	r0, r5
   d6b40:	f7ff ff30 	bl	d69a4 <_ZN16Adafruit_TSL25916read16Eh>
  x <<= 16;
  x |= y;
   d6b44:	ea44 4400 	orr.w	r4, r4, r0, lsl #16

  disable();
   d6b48:	4628      	mov	r0, r5
   d6b4a:	f7ff ffb1 	bl	d6ab0 <_ZN16Adafruit_TSL25917disableEv>

  return x;
   d6b4e:	4620      	mov	r0, r4
}
   d6b50:	bd38      	pop	{r3, r4, r5, pc}

000d6b52 <_ZN16Adafruit_TSL25918getEventEP15sensors_event_t>:
    @param  event Pointer to Adafruit_Sensor sensors_event_t object that will be filled with sensor data
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_TSL2591::getEvent(sensors_event_t *event)
{
   d6b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b54:	4605      	mov	r5, r0
   d6b56:	460c      	mov	r4, r1
  uint16_t ir, full;
  uint32_t lum = getFullLuminosity();
   d6b58:	f7ff ffd3 	bl	d6b02 <_ZN16Adafruit_TSL259117getFullLuminosityEv>
  /* Early silicon seems to have issues when there is a sudden jump in */
  /* light levels. :( To work around this for now sample the sensor 2x */
  lum = getFullLuminosity();
   d6b5c:	4628      	mov	r0, r5
   d6b5e:	f7ff ffd0 	bl	d6b02 <_ZN16Adafruit_TSL259117getFullLuminosityEv>
  ir = lum >> 16;
  full = lum & 0xFFFF;

  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d6b62:	2724      	movs	r7, #36	; 0x24
{
  uint16_t ir, full;
  uint32_t lum = getFullLuminosity();
  /* Early silicon seems to have issues when there is a sudden jump in */
  /* light levels. :( To work around this for now sample the sensor 2x */
  lum = getFullLuminosity();
   d6b64:	4606      	mov	r6, r0
  ir = lum >> 16;
  full = lum & 0xFFFF;

  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d6b66:	463a      	mov	r2, r7
   d6b68:	2100      	movs	r1, #0
   d6b6a:	4620      	mov	r0, r4
   d6b6c:	f00a fd04 	bl	e1578 <memset>

  event->version   = sizeof(sensors_event_t);
   d6b70:	6027      	str	r7, [r4, #0]
  event->sensor_id = _sensorID;
   d6b72:	68ab      	ldr	r3, [r5, #8]
   d6b74:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_LIGHT;
   d6b76:	2305      	movs	r3, #5
   d6b78:	60a3      	str	r3, [r4, #8]
   d6b7a:	f004 fd01 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();

  /* Calculate the actual lux value */
  /* 0 = sensor overflow (too much light) */
  event->light = calculateLux(full, ir);
   d6b7e:	0c32      	lsrs	r2, r6, #16
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
  event->type      = SENSOR_TYPE_LIGHT;
  event->timestamp = millis();
   d6b80:	6120      	str	r0, [r4, #16]

  /* Calculate the actual lux value */
  /* 0 = sensor overflow (too much light) */
  event->light = calculateLux(full, ir);
   d6b82:	b2b1      	uxth	r1, r6
   d6b84:	4628      	mov	r0, r5
   d6b86:	f7ff fea1 	bl	d68cc <_ZN16Adafruit_TSL259112calculateLuxEtt>
   d6b8a:	ed84 0a05 	vstr	s0, [r4, #20]

  return true;
}
   d6b8e:	2001      	movs	r0, #1
   d6b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b92 <_GLOBAL__sub_I__ZN16Adafruit_TSL2591C2El>:
   d6b92:	f004 bc45 	b.w	db420 <HAL_Pin_Map>

000d6b96 <_GLOBAL__sub_I__ZN7DS18B20C2EP7OneWire>:
   d6b96:	f004 bc43 	b.w	db420 <HAL_Pin_Map>

000d6b9a <_ZN15Adafruit_AM2315C1Ev>:
  #include <util/delay.h>
#endif


Adafruit_AM2315::Adafruit_AM2315() {
}
   d6b9a:	4770      	bx	lr

000d6b9c <_ZN15Adafruit_AM23158readDataEv>:

   // try to read data, as a test
  return readData();
}

bool Adafruit_AM2315::readData(void) {
   d6b9c:	b530      	push	{r4, r5, lr}
   d6b9e:	b085      	sub	sp, #20
   d6ba0:	4605      	mov	r5, r0
  uint8_t reply[10];

  // Wake up the sensor
  Wire.beginTransmission(AM2315_I2CADDR);
   d6ba2:	f007 fd17 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6ba6:	215c      	movs	r1, #92	; 0x5c
   d6ba8:	f007 f835 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
  delay(2);
   d6bac:	2002      	movs	r0, #2
   d6bae:	f006 f9dd 	bl	dcf6c <delay>
  Wire.endTransmission();
   d6bb2:	f007 fd0f 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6bb6:	f007 f835 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

  // OK lets ready!
  Wire.beginTransmission(AM2315_I2CADDR);
   d6bba:	f007 fd0b 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6bbe:	215c      	movs	r1, #92	; 0x5c
   d6bc0:	f007 f829 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(AM2315_READREG);
   d6bc4:	f007 fd06 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6bc8:	2103      	movs	r1, #3
   d6bca:	f7ff fc7a 	bl	d64c2 <_ZN7TwoWire5writeEi>
  Wire.write(0x00);  // start at address 0x0
   d6bce:	f007 fd01 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6bd2:	2100      	movs	r1, #0
   d6bd4:	f7ff fc75 	bl	d64c2 <_ZN7TwoWire5writeEi>
  Wire.write(4);  // request 4 bytes data
   d6bd8:	f007 fcfc 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6bdc:	2104      	movs	r1, #4
   d6bde:	f7ff fc70 	bl	d64c2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d6be2:	f007 fcf7 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6be6:	f007 f81d 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

  delay(10); // add delay between request and actual read!
   d6bea:	200a      	movs	r0, #10
   d6bec:	f006 f9be 	bl	dcf6c <delay>

  Wire.requestFrom(AM2315_I2CADDR, 8);
   d6bf0:	f007 fcf0 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6bf4:	2208      	movs	r2, #8
   d6bf6:	215c      	movs	r1, #92	; 0x5c
   d6bf8:	f007 f806 	bl	ddc08 <_ZN7TwoWire11requestFromEhj>
   d6bfc:	2400      	movs	r4, #0
  for (uint8_t i=0; i<8; i++) {
    reply[i] = Wire.read();
   d6bfe:	f007 fce9 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6c02:	6803      	ldr	r3, [r0, #0]
   d6c04:	695b      	ldr	r3, [r3, #20]
   d6c06:	4798      	blx	r3
   d6c08:	ab01      	add	r3, sp, #4
   d6c0a:	5518      	strb	r0, [r3, r4]
   d6c0c:	3401      	adds	r4, #1
  Wire.endTransmission();

  delay(10); // add delay between request and actual read!

  Wire.requestFrom(AM2315_I2CADDR, 8);
  for (uint8_t i=0; i<8; i++) {
   d6c0e:	2c08      	cmp	r4, #8
   d6c10:	d1f5      	bne.n	d6bfe <_ZN15Adafruit_AM23158readDataEv+0x62>
    reply[i] = Wire.read();
    //Serial.println(reply[i], HEX);
  }

  if (reply[0] != AM2315_READREG) return false;
   d6c12:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6c16:	2b03      	cmp	r3, #3
   d6c18:	d134      	bne.n	d6c84 <_ZN15Adafruit_AM23158readDataEv+0xe8>
  if (reply[1] != 4) return false; // bytes req'd
   d6c1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d6c1e:	2b04      	cmp	r3, #4
   d6c20:	d130      	bne.n	d6c84 <_ZN15Adafruit_AM23158readDataEv+0xe8>

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d6c22:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6c26:	ed9f 6a19 	vldr	s12, [pc, #100]	; d6c8c <_ZN15Adafruit_AM23158readDataEv+0xf0>
   d6c2a:	ee07 3a10 	vmov	s14, r3
   d6c2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6c32:	ee07 3a90 	vmov	s15, r3
   d6c36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d6c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6c3e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   d6c42:	eee7 7a06 	vfma.f32	s15, s14, s12
  //Serial.print("H"); Serial.println(humidity);

  temp = reply[4] & 0x7F;
   d6c46:	f89d 3008 	ldrb.w	r3, [sp, #8]
  temp *= 256;
  temp += reply[5];
  temp /= 10;
   d6c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
  if (reply[1] != 4) return false; // bytes req'd

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d6c4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  temp += reply[5];
  temp /= 10;
  //Serial.print("T"); Serial.println(temp);

  // change sign
  if (reply[4] >> 7) temp = -temp;
   d6c52:	09db      	lsrs	r3, r3, #7

  return true;
   d6c54:	f04f 0001 	mov.w	r0, #1
  if (reply[1] != 4) return false; // bytes req'd

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d6c58:	ed85 7a00 	vstr	s14, [r5]
  //Serial.print("H"); Serial.println(humidity);

  temp = reply[4] & 0x7F;
  temp *= 256;
  temp += reply[5];
  temp /= 10;
   d6c5c:	ee07 2a10 	vmov	s14, r2
   d6c60:	f89d 2009 	ldrb.w	r2, [sp, #9]
   d6c64:	ee07 2a90 	vmov	s15, r2
   d6c68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d6c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6c70:	eee7 7a06 	vfma.f32	s15, s14, s12
   d6c74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  //Serial.print("T"); Serial.println(temp);

  // change sign
  if (reply[4] >> 7) temp = -temp;
   d6c78:	bf18      	it	ne
   d6c7a:	eeb1 7a47 	vnegne.f32	s14, s14
   d6c7e:	ed85 7a01 	vstr	s14, [r5, #4]
   d6c82:	e000      	b.n	d6c86 <_ZN15Adafruit_AM23158readDataEv+0xea>
  for (uint8_t i=0; i<8; i++) {
    reply[i] = Wire.read();
    //Serial.println(reply[i], HEX);
  }

  if (reply[0] != AM2315_READREG) return false;
   d6c84:	2000      	movs	r0, #0

  // change sign
  if (reply[4] >> 7) temp = -temp;

  return true;
}
   d6c86:	b005      	add	sp, #20
   d6c88:	bd30      	pop	{r4, r5, pc}
   d6c8a:	bf00      	nop
   d6c8c:	43800000 	.word	0x43800000

000d6c90 <_ZN15Adafruit_AM23155beginEv>:

Adafruit_AM2315::Adafruit_AM2315() {
}


bool Adafruit_AM2315::begin(void) {
   d6c90:	b510      	push	{r4, lr}
   d6c92:	4604      	mov	r4, r0
  Wire.begin();
   d6c94:	f007 fc9e 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d6c98:	f006 ff82 	bl	ddba0 <_ZN7TwoWire5beginEv>

   // try to read data, as a test
  return readData();
   d6c9c:	4620      	mov	r0, r4
}
   d6c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

bool Adafruit_AM2315::begin(void) {
  Wire.begin();

   // try to read data, as a test
  return readData();
   d6ca2:	f7ff bf7b 	b.w	d6b9c <_ZN15Adafruit_AM23158readDataEv>

000d6ca6 <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_>:
 * If you want to obtain both temperature and humidity when you sample the sensor, be aware that calling
 * readTemperature() and readHumidity() in rapid succession may swamp the sensor and result in invalid
 * readingings (the AM2315 manual advisess that continuous samples must be at least 2 seconds apart).
 * Calling this method avoids the double I2C request.
 */
bool Adafruit_AM2315::readTemperatureAndHumidity(float &t, float &h) {
   d6ca6:	b570      	push	{r4, r5, r6, lr}
   d6ca8:	4604      	mov	r4, r0
   d6caa:	460e      	mov	r6, r1
   d6cac:	4615      	mov	r5, r2
    if (!readData()) return false;
   d6cae:	f7ff ff75 	bl	d6b9c <_ZN15Adafruit_AM23158readDataEv>
   d6cb2:	b118      	cbz	r0, d6cbc <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_+0x16>

    t = temp;
   d6cb4:	6863      	ldr	r3, [r4, #4]
   d6cb6:	6033      	str	r3, [r6, #0]
    h = humidity;
   d6cb8:	6823      	ldr	r3, [r4, #0]
   d6cba:	602b      	str	r3, [r5, #0]

    return true;
}
   d6cbc:	bd70      	pop	{r4, r5, r6, pc}

000d6cbe <_GLOBAL__sub_I__ZN15Adafruit_AM2315C2Ev>:
   d6cbe:	f004 bbaf 	b.w	db420 <HAL_Pin_Map>

000d6cc2 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d6cc2:	f004 bbad 	b.w	db420 <HAL_Pin_Map>

000d6cc6 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d6cc6:	f004 bbab 	b.w	db420 <HAL_Pin_Map>

000d6cca <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d6cca:	b510      	push	{r4, lr}
   d6ccc:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6cce:	3024      	adds	r0, #36	; 0x24
   d6cd0:	f001 f8e4 	bl	d7e9c <_ZN8FatCache4syncEv>
   d6cd4:	b128      	cbz	r0, d6ce2 <_ZN9FatVolume9cacheSyncEv+0x18>
   d6cd6:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d6cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6cde:	f001 b8dd 	b.w	d7e9c <_ZN8FatCache4syncEv>
  }
   d6ce2:	bd10      	pop	{r4, pc}

000d6ce4 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d6ce4:	1e41      	subs	r1, r0, #1
   d6ce6:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d6cea:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6cec:	0843      	lsrs	r3, r0, #1
   d6cee:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d6cf2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d6cf6:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6cfa:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6cfc:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6cfe:	d1f5      	bne.n	d6cec <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d6d00:	4770      	bx	lr

000d6d02 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d6d02:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d6d04:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d6d06:	4604      	mov	r4, r0
   d6d08:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d6d0a:	b923      	cbnz	r3, d6d16 <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d6d0c:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d6d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d6d12:	f000 bc82 	b.w	d761a <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d6d16:	2224      	movs	r2, #36	; 0x24
   d6d18:	2100      	movs	r1, #0
   d6d1a:	f00a fc2d 	bl	e1578 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d6d1e:	2310      	movs	r3, #16
  m_flags = F_READ;
   d6d20:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d6d22:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d6d24:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d6d26:	68ab      	ldr	r3, [r5, #8]
   d6d28:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d6d2a:	68eb      	ldr	r3, [r5, #12]
   d6d2c:	6223      	str	r3, [r4, #32]
  return true;
}
   d6d2e:	bd38      	pop	{r3, r4, r5, pc}

000d6d30 <_ZN7FatFile7getNameEPcj>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d6d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6d34:	b08b      	sub	sp, #44	; 0x2c
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d6d36:	7803      	ldrb	r3, [r0, #0]
   d6d38:	2500      	movs	r5, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d6d3a:	4680      	mov	r8, r0
   d6d3c:	460e      	mov	r6, r1
   d6d3e:	4617      	mov	r7, r2
   d6d40:	f88d 5004 	strb.w	r5, [sp, #4]
   d6d44:	f88d 5005 	strb.w	r5, [sp, #5]
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d6d48:	b163      	cbz	r3, d6d64 <_ZN7FatFile7getNameEPcj+0x34>
   d6d4a:	2a0c      	cmp	r2, #12
   d6d4c:	d90a      	bls.n	d6d64 <_ZN7FatFile7getNameEPcj+0x34>
   d6d4e:	e00e      	b.n	d6d6e <_ZN7FatFile7getNameEPcj+0x3e>
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
   d6d50:	4641      	mov	r1, r8
   d6d52:	a801      	add	r0, sp, #4
   d6d54:	f7ff ffd5 	bl	d6d02 <_ZN7FatFile11openClusterEPS_>
   d6d58:	b120      	cbz	r0, d6d64 <_ZN7FatFile7getNameEPcj+0x34>
   d6d5a:	2401      	movs	r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d6d5c:	f898 3003 	ldrb.w	r3, [r8, #3]
   d6d60:	42a3      	cmp	r3, r4
   d6d62:	d20b      	bcs.n	d6d7c <_ZN7FatFile7getNameEPcj+0x4c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
   d6d64:	f04f 0900 	mov.w	r9, #0
   d6d68:	f886 9000 	strb.w	r9, [r6]
  return false;
   d6d6c:	e055      	b.n	d6e1a <_ZN7FatFile7getNameEPcj+0xea>
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6d6e:	78c3      	ldrb	r3, [r0, #3]
   d6d70:	2b00      	cmp	r3, #0
   d6d72:	d1ed      	bne.n	d6d50 <_ZN7FatFile7getNameEPcj+0x20>
    return getSFN(name);
   d6d74:	f000 fbb4 	bl	d74e0 <_ZN7FatFile6getSFNEPc>
   d6d78:	4681      	mov	r9, r0
   d6d7a:	e04e      	b.n	d6e1a <_ZN7FatFile7getNameEPcj+0xea>
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6d7c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   d6d80:	1b09      	subs	r1, r1, r4
   d6d82:	0149      	lsls	r1, r1, #5
   d6d84:	a801      	add	r0, sp, #4
   d6d86:	f000 fd43 	bl	d7810 <_ZN7FatFile7seekSetEm>
   d6d8a:	4681      	mov	r9, r0
   d6d8c:	2800      	cmp	r0, #0
   d6d8e:	d0e9      	beq.n	d6d64 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6d90:	2100      	movs	r1, #0
   d6d92:	a801      	add	r0, sp, #4
   d6d94:	f000 fd1f 	bl	d77d6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6d98:	2800      	cmp	r0, #0
   d6d9a:	d0e3      	beq.n	d6d64 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   d6d9c:	7ac3      	ldrb	r3, [r0, #11]
   d6d9e:	2b0f      	cmp	r3, #15
   d6da0:	d1e0      	bne.n	d6d64 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ord != (ldir->ord & 0X1F)) {
   d6da2:	7803      	ldrb	r3, [r0, #0]
   d6da4:	f003 031f 	and.w	r3, r3, #31
   d6da8:	429c      	cmp	r4, r3
   d6daa:	d1db      	bne.n	d6d64 <_ZN7FatFile7getNameEPcj+0x34>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6dac:	1e63      	subs	r3, r4, #1
   d6dae:	220d      	movs	r2, #13
   d6db0:	435a      	muls	r2, r3
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d6db2:	eb06 0e02 	add.w	lr, r6, r2
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6db6:	2300      	movs	r3, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6db8:	2b04      	cmp	r3, #4
   d6dba:	b2d9      	uxtb	r1, r3
   d6dbc:	d804      	bhi.n	d6dc8 <_ZN7FatFile7getNameEPcj+0x98>
    return ldir->name1[i];
   d6dbe:	eb00 0143 	add.w	r1, r0, r3, lsl #1
   d6dc2:	f8b1 1001 	ldrh.w	r1, [r1, #1]
   d6dc6:	e00b      	b.n	d6de0 <_ZN7FatFile7getNameEPcj+0xb0>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6dc8:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6dca:	bf95      	itete	ls
   d6dcc:	f103 31ff 	addls.w	r1, r3, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6dd0:	1c59      	addhi	r1, r3, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6dd2:	eb00 0141 	addls.w	r1, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6dd6:	eb00 0141 	addhi.w	r1, r0, r1, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6dda:	bf94      	ite	ls
   d6ddc:	88c9      	ldrhls	r1, [r1, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6dde:	8889      	ldrhhi	r1, [r1, #4]
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
   d6de0:	b161      	cbz	r1, d6dfc <_ZN7FatFile7getNameEPcj+0xcc>
   d6de2:	4297      	cmp	r7, r2
   d6de4:	d910      	bls.n	d6e08 <_ZN7FatFile7getNameEPcj+0xd8>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d6de6:	297e      	cmp	r1, #126	; 0x7e
   d6de8:	bf94      	ite	ls
   d6dea:	b2c9      	uxtbls	r1, r1
   d6dec:	213f      	movhi	r1, #63	; 0x3f
   d6dee:	f80e 1003 	strb.w	r1, [lr, r3]
   d6df2:	3301      	adds	r3, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d6df4:	2b0d      	cmp	r3, #13
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d6df6:	f102 0201 	add.w	r2, r2, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d6dfa:	d1dd      	bne.n	d6db8 <_ZN7FatFile7getNameEPcj+0x88>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   d6dfc:	4297      	cmp	r7, r2
   d6dfe:	d903      	bls.n	d6e08 <_ZN7FatFile7getNameEPcj+0xd8>
   d6e00:	7803      	ldrb	r3, [r0, #0]
   d6e02:	0659      	lsls	r1, r3, #25
    name[k] = 0;
   d6e04:	bf48      	it	mi
   d6e06:	54b5      	strbmi	r5, [r6, r2]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
   d6e08:	19f3      	adds	r3, r6, r7
   d6e0a:	f803 5c01 	strb.w	r5, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d6e0e:	7803      	ldrb	r3, [r0, #0]
   d6e10:	065b      	lsls	r3, r3, #25
   d6e12:	d402      	bmi.n	d6e1a <_ZN7FatFile7getNameEPcj+0xea>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d6e14:	3401      	adds	r4, #1
   d6e16:	b2e4      	uxtb	r4, r4
   d6e18:	e7a0      	b.n	d6d5c <_ZN7FatFile7getNameEPcj+0x2c>
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
   d6e1a:	4648      	mov	r0, r9
   d6e1c:	b00b      	add	sp, #44	; 0x2c
   d6e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6e24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d6e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6e28:	7803      	ldrb	r3, [r0, #0]
   d6e2a:	2b20      	cmp	r3, #32
   d6e2c:	f100 0401 	add.w	r4, r0, #1
   d6e30:	d101      	bne.n	d6e36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d6e32:	4620      	mov	r0, r4
   d6e34:	e7f8      	b.n	d6e28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6e36:	4f70      	ldr	r7, [pc, #448]	; (d6ff8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d6e38:	6088      	str	r0, [r1, #8]
   d6e3a:	4605      	mov	r5, r0
   d6e3c:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d6e3e:	462e      	mov	r6, r5
   d6e40:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d6e44:	b30b      	cbz	r3, d6e8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6e46:	2b2f      	cmp	r3, #47	; 0x2f
   d6e48:	d101      	bne.n	d6e4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d6e4a:	1903      	adds	r3, r0, r4
   d6e4c:	e017      	b.n	d6e7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6e4e:	2b5c      	cmp	r3, #92	; 0x5c
   d6e50:	d102      	bne.n	d6e58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6e52:	2000      	movs	r0, #0
   d6e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6e58:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d6e5c:	b2e4      	uxtb	r4, r4
   d6e5e:	2c1d      	cmp	r4, #29
   d6e60:	d803      	bhi.n	d6e6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d6e62:	fa27 f404 	lsr.w	r4, r7, r4
   d6e66:	07e4      	lsls	r4, r4, #31
   d6e68:	d4f3      	bmi.n	d6e52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6e6a:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d6e6e:	2c3c      	cmp	r4, #60	; 0x3c
   d6e70:	d0ef      	beq.n	d6e52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d6e72:	3b20      	subs	r3, #32
   d6e74:	2b5e      	cmp	r3, #94	; 0x5e
   d6e76:	d9e1      	bls.n	d6e3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d6e78:	e7eb      	b.n	d6e52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6e7a:	2d2f      	cmp	r5, #47	; 0x2f
   d6e7c:	d105      	bne.n	d6e8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6e7e:	461e      	mov	r6, r3
   d6e80:	f813 5b01 	ldrb.w	r5, [r3], #1
   d6e84:	2d20      	cmp	r5, #32
   d6e86:	d1f8      	bne.n	d6e7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d6e88:	e7f9      	b.n	d6e7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d6e8a:	6016      	str	r6, [r2, #0]
   d6e8c:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d6e8e:	4298      	cmp	r0, r3
   d6e90:	ebc0 0803 	rsb	r8, r0, r3
   d6e94:	d009      	beq.n	d6eaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d6e96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6e9a:	2a2e      	cmp	r2, #46	; 0x2e
   d6e9c:	d0f7      	beq.n	d6e8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d6e9e:	2a20      	cmp	r2, #32
   d6ea0:	d0f5      	beq.n	d6e8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d6ea2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d6ea6:	dcd4      	bgt.n	d6e52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d6ea8:	e001      	b.n	d6eae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d6eaa:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d6eae:	f8c1 8004 	str.w	r8, [r1, #4]
   d6eb2:	f101 030c 	add.w	r3, r1, #12
   d6eb6:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d6eba:	2420      	movs	r4, #32
   d6ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d6ec0:	4293      	cmp	r3, r2
   d6ec2:	d1fb      	bne.n	d6ebc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6ec4:	4603      	mov	r3, r0
   d6ec6:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6ec8:	f813 4b01 	ldrb.w	r4, [r3], #1
   d6ecc:	2c2e      	cmp	r4, #46	; 0x2e
   d6ece:	d0fa      	beq.n	d6ec6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d6ed0:	2c20      	cmp	r4, #32
   d6ed2:	d0f8      	beq.n	d6ec6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d6ed4:	fab2 f482 	clz	r4, r2
   d6ed8:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6eda:	f108 36ff 	add.w	r6, r8, #4294967295
   d6ede:	1c73      	adds	r3, r6, #1
   d6ee0:	d107      	bne.n	d6ef2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d6ee2:	2700      	movs	r7, #0
   d6ee4:	f04f 0e07 	mov.w	lr, #7
   d6ee8:	463d      	mov	r5, r7
   d6eea:	46ba      	mov	sl, r7
   d6eec:	f04f 0908 	mov.w	r9, #8
   d6ef0:	e009      	b.n	d6f06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d6ef2:	5d83      	ldrb	r3, [r0, r6]
   d6ef4:	2b2e      	cmp	r3, #46	; 0x2e
   d6ef6:	d0f4      	beq.n	d6ee2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d6ef8:	3e01      	subs	r6, #1
   d6efa:	e7f0      	b.n	d6ede <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d6efc:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d6efe:	2b20      	cmp	r3, #32
   d6f00:	d104      	bne.n	d6f0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d6f02:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d6f04:	3201      	adds	r2, #1
   d6f06:	4542      	cmp	r2, r8
   d6f08:	dbf8      	blt.n	d6efc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d6f0a:	e04b      	b.n	d6fa4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d6f0c:	2b2e      	cmp	r3, #46	; 0x2e
   d6f0e:	d102      	bne.n	d6f16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d6f10:	42b2      	cmp	r2, r6
   d6f12:	d1f6      	bne.n	d6f02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6f14:	e003      	b.n	d6f1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d6f16:	2b22      	cmp	r3, #34	; 0x22
   d6f18:	d017      	beq.n	d6f4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d6f1a:	2b7c      	cmp	r3, #124	; 0x7c
   d6f1c:	d015      	beq.n	d6f4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6f1e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d6f22:	f1bc 0f05 	cmp.w	ip, #5
   d6f26:	d801      	bhi.n	d6f2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6f28:	2b2d      	cmp	r3, #45	; 0x2d
   d6f2a:	d10e      	bne.n	d6f4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d6f2c:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6f30:	f1bc 0f05 	cmp.w	ip, #5
   d6f34:	d909      	bls.n	d6f4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d6f36:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6f3a:	f1bc 0f02 	cmp.w	ip, #2
   d6f3e:	d904      	bls.n	d6f4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d6f40:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6f44:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6f48:	d902      	bls.n	d6f50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d6f4a:	42b2      	cmp	r2, r6
   d6f4c:	d10e      	bne.n	d6f6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d6f4e:	e049      	b.n	d6fe4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6f50:	42b2      	cmp	r2, r6
   d6f52:	d047      	beq.n	d6fe4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d6f54:	4575      	cmp	r5, lr
   d6f56:	d821      	bhi.n	d6f9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d6f58:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6f5c:	f1bc 0f19 	cmp.w	ip, #25
   d6f60:	d808      	bhi.n	d6f74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d6f62:	3b20      	subs	r3, #32
   d6f64:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6f66:	ea49 0707 	orr.w	r7, r9, r7
   d6f6a:	e00a      	b.n	d6f82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6f6c:	4575      	cmp	r5, lr
   d6f6e:	d815      	bhi.n	d6f9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d6f70:	2400      	movs	r4, #0
      c = '_';
   d6f72:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d6f74:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6f78:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6f7c:	bf98      	it	ls
   d6f7e:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d6f82:	f105 0c01 	add.w	ip, r5, #1
   d6f86:	fa5f fc8c 	uxtb.w	ip, ip
   d6f8a:	440d      	add	r5, r1
      if (i < 7) {
   d6f8c:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d6f90:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d6f92:	d801      	bhi.n	d6f98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d6f94:	f881 c00c 	strb.w	ip, [r1, #12]
   d6f98:	4665      	mov	r5, ip
   d6f9a:	e7b3      	b.n	d6f04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6f9c:	f1be 0f0a 	cmp.w	lr, #10
   d6fa0:	d117      	bne.n	d6fd2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d6fa2:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d6fa4:	7b4b      	ldrb	r3, [r1, #13]
   d6fa6:	2b20      	cmp	r3, #32
   d6fa8:	f43f af53 	beq.w	d6e52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d6fac:	b13c      	cbz	r4, d6fbe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6fae:	ea1a 0f07 	tst.w	sl, r7
   d6fb2:	bf18      	it	ne
   d6fb4:	2702      	movne	r7, #2
   d6fb6:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d6fb8:	2001      	movs	r0, #1
   d6fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d6fbe:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6fc0:	2001      	movs	r0, #1
   d6fc2:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6fc4:	4419      	add	r1, r3
   d6fc6:	237e      	movs	r3, #126	; 0x7e
   d6fc8:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d6fca:	2331      	movs	r3, #49	; 0x31
   d6fcc:	738b      	strb	r3, [r1, #14]
   d6fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d6fd2:	42b2      	cmp	r2, r6
   d6fd4:	dce5      	bgt.n	d6fa2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d6fd6:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6fd8:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6fdc:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6fde:	f04f 0910 	mov.w	r9, #16
   d6fe2:	e78e      	b.n	d6f02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6fe4:	f1be 0f0a 	cmp.w	lr, #10
   d6fe8:	d0db      	beq.n	d6fa2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d6fea:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d6fec:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d6ff0:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6ff2:	f04f 0910 	mov.w	r9, #16
   d6ff6:	e785      	b.n	d6f04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d6ff8:	31000101 	.word	0x31000101

000d6ffc <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d6ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ffe:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7000:	2300      	movs	r3, #0
   d7002:	f88d 3004 	strb.w	r3, [sp, #4]
   d7006:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d700a:	7803      	ldrb	r3, [r0, #0]
   d700c:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d700e:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7010:	d508      	bpl.n	d7024 <_ZN7FatFile6removeEv+0x28>
   d7012:	7883      	ldrb	r3, [r0, #2]
   d7014:	079a      	lsls	r2, r3, #30
   d7016:	d505      	bpl.n	d7024 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d7018:	6a01      	ldr	r1, [r0, #32]
   d701a:	b129      	cbz	r1, d7028 <_ZN7FatFile6removeEv+0x2c>
   d701c:	68a0      	ldr	r0, [r4, #8]
   d701e:	f001 f82e 	bl	d807e <_ZN9FatVolume9freeChainEm>
   d7022:	b908      	cbnz	r0, d7028 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d7024:	2000      	movs	r0, #0
   d7026:	e049      	b.n	d70bc <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d7028:	2101      	movs	r1, #1
   d702a:	4620      	mov	r0, r4
   d702c:	f000 fabc 	bl	d75a8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d7030:	4605      	mov	r5, r0
   d7032:	2800      	cmp	r0, #0
   d7034:	d0f6      	beq.n	d7024 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d7036:	f7ff fe55 	bl	d6ce4 <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d703a:	26e5      	movs	r6, #229	; 0xe5
   d703c:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d703e:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d7040:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d7042:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d7044:	68a0      	ldr	r0, [r4, #8]
   d7046:	f7ff fe40 	bl	d6cca <_ZN9FatVolume9cacheSyncEv>
   d704a:	2800      	cmp	r0, #0
   d704c:	d0ea      	beq.n	d7024 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d704e:	78e3      	ldrb	r3, [r4, #3]
   d7050:	2b00      	cmp	r3, #0
   d7052:	d033      	beq.n	d70bc <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d7054:	4621      	mov	r1, r4
   d7056:	a801      	add	r0, sp, #4
   d7058:	f7ff fe53 	bl	d6d02 <_ZN7FatFile11openClusterEPS_>
   d705c:	2800      	cmp	r0, #0
   d705e:	d0e1      	beq.n	d7024 <_ZN7FatFile6removeEv+0x28>
   d7060:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d7062:	78e3      	ldrb	r3, [r4, #3]
   d7064:	42ab      	cmp	r3, r5
   d7066:	d3dd      	bcc.n	d7024 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d7068:	88a1      	ldrh	r1, [r4, #4]
   d706a:	1b49      	subs	r1, r1, r5
   d706c:	0149      	lsls	r1, r1, #5
   d706e:	a801      	add	r0, sp, #4
   d7070:	f000 fbce 	bl	d7810 <_ZN7FatFile7seekSetEm>
   d7074:	2800      	cmp	r0, #0
   d7076:	d0d5      	beq.n	d7024 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d7078:	2100      	movs	r1, #0
   d707a:	a801      	add	r0, sp, #4
   d707c:	f000 fbab 	bl	d77d6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d7080:	2800      	cmp	r0, #0
   d7082:	d0cf      	beq.n	d7024 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d7084:	7ac3      	ldrb	r3, [r0, #11]
   d7086:	2b0f      	cmp	r3, #15
   d7088:	d1cc      	bne.n	d7024 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d708a:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d708c:	f002 031f 	and.w	r3, r2, #31
   d7090:	429d      	cmp	r5, r3
   d7092:	d1c7      	bne.n	d7024 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d7094:	7b43      	ldrb	r3, [r0, #13]
   d7096:	42bb      	cmp	r3, r7
   d7098:	d1c4      	bne.n	d7024 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d709a:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d709c:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d709e:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d70a2:	f043 0301 	orr.w	r3, r3, #1
   d70a6:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d70aa:	0653      	lsls	r3, r2, #25
   d70ac:	d503      	bpl.n	d70b6 <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d70ae:	68a0      	ldr	r0, [r4, #8]
   d70b0:	f7ff fe0b 	bl	d6cca <_ZN9FatVolume9cacheSyncEv>
   d70b4:	e002      	b.n	d70bc <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d70b6:	3501      	adds	r5, #1
   d70b8:	b2ed      	uxtb	r5, r5
   d70ba:	e7d2      	b.n	d7062 <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d70bc:	b00b      	add	sp, #44	; 0x2c
   d70be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d70c0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d70c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d70c4:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d70c8:	4606      	mov	r6, r0
   d70ca:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d70cc:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d70ce:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d70d0:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d70d4:	6869      	ldr	r1, [r5, #4]
   d70d6:	68aa      	ldr	r2, [r5, #8]
   d70d8:	1863      	adds	r3, r4, r1
   d70da:	b29b      	uxth	r3, r3
   d70dc:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d70de:	4291      	cmp	r1, r2
   d70e0:	d006      	beq.n	d70f0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d70e2:	f812 0b01 	ldrb.w	r0, [r2], #1
   d70e6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d70ea:	4043      	eors	r3, r0
   d70ec:	b29b      	uxth	r3, r3
   d70ee:	e7f6      	b.n	d70de <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d70f0:	f1b9 0f03 	cmp.w	r9, #3
   d70f4:	bf28      	it	cs
   d70f6:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d70fa:	f109 0204 	add.w	r2, r9, #4
   d70fe:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d7100:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d7104:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d7106:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d7108:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d710a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d710c:	bf94      	ite	ls
   d710e:	3130      	addls	r1, #48	; 0x30
   d7110:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d7112:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d7114:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d7116:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d711a:	d3f1      	bcc.n	d7100 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d711c:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d7120:	2100      	movs	r1, #0
   d7122:	735f      	strb	r7, [r3, #13]
   d7124:	4630      	mov	r0, r6
   d7126:	f000 fb73 	bl	d7810 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d712a:	2101      	movs	r1, #1
   d712c:	4630      	mov	r0, r6
   d712e:	f000 fb52 	bl	d77d6 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d7132:	4601      	mov	r1, r0
   d7134:	b928      	cbnz	r0, d7142 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d7136:	7870      	ldrb	r0, [r6, #1]
   d7138:	fab0 f080 	clz	r0, r0
   d713c:	0940      	lsrs	r0, r0, #5
   d713e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d7142:	7803      	ldrb	r3, [r0, #0]
   d7144:	b14b      	cbz	r3, d715a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d7146:	7ac3      	ldrb	r3, [r0, #11]
   d7148:	071b      	lsls	r3, r3, #28
   d714a:	d4ee      	bmi.n	d712a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d714c:	220b      	movs	r2, #11
   d714e:	4640      	mov	r0, r8
   d7150:	f00a f9f8 	bl	e1544 <memcmp>
   d7154:	2800      	cmp	r0, #0
   d7156:	d1e8      	bne.n	d712a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d7158:	e002      	b.n	d7160 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d715a:	2001      	movs	r0, #1
   d715c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d7160:	3401      	adds	r4, #1
   d7162:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d7164:	2c64      	cmp	r4, #100	; 0x64
   d7166:	d1b5      	bne.n	d70d4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d7168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d716c <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7170:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d7172:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d7174:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d7176:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d717a:	9005      	str	r0, [sp, #20]
   d717c:	460e      	mov	r6, r1
   d717e:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d7180:	d101      	bne.n	d7186 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d7182:	2000      	movs	r0, #0
   d7184:	e1a0      	b.n	d74c8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d7186:	9b05      	ldr	r3, [sp, #20]
   d7188:	781b      	ldrb	r3, [r3, #0]
   d718a:	2b00      	cmp	r3, #0
   d718c:	d1f9      	bne.n	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d718e:	6853      	ldr	r3, [r2, #4]
   d7190:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d7192:	7813      	ldrb	r3, [r2, #0]
   d7194:	079b      	lsls	r3, r3, #30
   d7196:	f000 818d 	beq.w	d74b4 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d719a:	9b02      	ldr	r3, [sp, #8]
   d719c:	270d      	movs	r7, #13
   d719e:	330c      	adds	r3, #12
   d71a0:	fbb3 f7f7 	udiv	r7, r3, r7
   d71a4:	3701      	adds	r7, #1
   d71a6:	b2ff      	uxtb	r7, r7
   d71a8:	2100      	movs	r1, #0
   d71aa:	4630      	mov	r0, r6
   d71ac:	f000 fb30 	bl	d7810 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d71b0:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d71b4:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d71b8:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d71bc:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d71be:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d71c0:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d71c2:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d71c6:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d71c8:	6972      	ldr	r2, [r6, #20]
   d71ca:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d71cc:	2101      	movs	r1, #1
   d71ce:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d71d0:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d71d4:	f000 faff 	bl	d77d6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d71d8:	9b07      	ldr	r3, [sp, #28]
   d71da:	b920      	cbnz	r0, d71e6 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d71dc:	7873      	ldrb	r3, [r6, #1]
   d71de:	2b00      	cmp	r3, #0
   d71e0:	f000 8090 	beq.w	d7304 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d71e4:	e7cd      	b.n	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d71e6:	7802      	ldrb	r2, [r0, #0]
   d71e8:	2ae5      	cmp	r2, #229	; 0xe5
   d71ea:	d000      	beq.n	d71ee <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d71ec:	b942      	cbnz	r2, d7200 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d71ee:	2c00      	cmp	r4, #0
   d71f0:	bf08      	it	eq
   d71f2:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d71f4:	42bc      	cmp	r4, r7
        freeFound++;
   d71f6:	bf3c      	itt	cc
   d71f8:	3401      	addcc	r4, #1
   d71fa:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d71fc:	b922      	cbnz	r2, d7208 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d71fe:	e081      	b.n	d7304 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d7200:	42bc      	cmp	r4, r7
   d7202:	bf38      	it	cc
   d7204:	2400      	movcc	r4, #0
   d7206:	e003      	b.n	d7210 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d7208:	2ae5      	cmp	r2, #229	; 0xe5
   d720a:	d101      	bne.n	d7210 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d720c:	2500      	movs	r5, #0
   d720e:	e7db      	b.n	d71c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d7210:	2a2e      	cmp	r2, #46	; 0x2e
   d7212:	d0fb      	beq.n	d720c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d7214:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d7216:	290f      	cmp	r1, #15
   d7218:	d152      	bne.n	d72c0 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d721a:	b93d      	cbnz	r5, d722c <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d721c:	0651      	lsls	r1, r2, #25
   d721e:	d5d3      	bpl.n	d71c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d7220:	7b43      	ldrb	r3, [r0, #13]
   d7222:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d7224:	f002 051f 	and.w	r5, r2, #31
   d7228:	462b      	mov	r3, r5
   d722a:	e007      	b.n	d723c <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d722c:	3b01      	subs	r3, #1
   d722e:	b2db      	uxtb	r3, r3
   d7230:	429a      	cmp	r2, r3
   d7232:	d1eb      	bne.n	d720c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d7234:	7b42      	ldrb	r2, [r0, #13]
   d7236:	9903      	ldr	r1, [sp, #12]
   d7238:	4291      	cmp	r1, r2
   d723a:	d1e7      	bne.n	d720c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d723c:	1e5a      	subs	r2, r3, #1
   d723e:	f04f 0c0d 	mov.w	ip, #13
   d7242:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d7246:	9a02      	ldr	r2, [sp, #8]
   d7248:	4562      	cmp	r2, ip
   d724a:	d9df      	bls.n	d720c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d724c:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d7250:	f1be 0f04 	cmp.w	lr, #4
   d7254:	fa5f f28e 	uxtb.w	r2, lr
   d7258:	d804      	bhi.n	d7264 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d725a:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d725e:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d7262:	e00c      	b.n	d727e <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d7264:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d7266:	bf95      	itete	ls
   d7268:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d726c:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d7270:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d7274:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d7278:	bf94      	ite	ls
   d727a:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d727c:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d727e:	9902      	ldr	r1, [sp, #8]
   d7280:	4561      	cmp	r1, ip
   d7282:	d103      	bne.n	d728c <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d7284:	2a00      	cmp	r2, #0
   d7286:	bf18      	it	ne
   d7288:	2500      	movne	r5, #0
   d728a:	e79d      	b.n	d71c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d728c:	2aff      	cmp	r2, #255	; 0xff
   d728e:	d8bd      	bhi.n	d720c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d7290:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d7292:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d7296:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d7298:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d729c:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d72a0:	bf98      	it	ls
   d72a2:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d72a4:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d72a8:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d72ac:	bf98      	it	ls
   d72ae:	b2d2      	uxtbls	r2, r2
   d72b0:	f1bc 0f19 	cmp.w	ip, #25
   d72b4:	bf9c      	itt	ls
   d72b6:	3120      	addls	r1, #32
   d72b8:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d72ba:	4291      	cmp	r1, r2
   d72bc:	d1a6      	bne.n	d720c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d72be:	e0fb      	b.n	d74b8 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d72c0:	0709      	lsls	r1, r1, #28
   d72c2:	d4a3      	bmi.n	d720c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d72c4:	b14d      	cbz	r5, d72da <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d72c6:	2b01      	cmp	r3, #1
   d72c8:	f47f af5b 	bne.w	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d72cc:	f7ff fd0a 	bl	d6ce4 <_ZN7FatFile11lfnChecksumEPh>
   d72d0:	9b03      	ldr	r3, [sp, #12]
   d72d2:	4283      	cmp	r3, r0
   d72d4:	f47f af55 	bne.w	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d72d8:	e00f      	b.n	d72fa <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d72da:	220b      	movs	r2, #11
   d72dc:	9906      	ldr	r1, [sp, #24]
   d72de:	9307      	str	r3, [sp, #28]
   d72e0:	f00a f930 	bl	e1544 <memcmp>
   d72e4:	9b07      	ldr	r3, [sp, #28]
   d72e6:	2800      	cmp	r0, #0
   d72e8:	f47f af6e 	bne.w	d71c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d72ec:	f899 2000 	ldrb.w	r2, [r9]
   d72f0:	07d2      	lsls	r2, r2, #31
   d72f2:	d502      	bpl.n	d72fa <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d72f4:	2201      	movs	r2, #1
   d72f6:	9204      	str	r2, [sp, #16]
   d72f8:	e766      	b.n	d71c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d72fa:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d72fe:	f000 80d1 	beq.w	d74a4 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d7302:	e73e      	b.n	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d7304:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d7308:	f43f af3b 	beq.w	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d730c:	f00b 0303 	and.w	r3, fp, #3
   d7310:	3b01      	subs	r3, #1
   d7312:	2b01      	cmp	r3, #1
   d7314:	f63f af35 	bhi.w	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d7318:	2c00      	cmp	r4, #0
   d731a:	bf08      	it	eq
   d731c:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d731e:	42bc      	cmp	r4, r7
   d7320:	d302      	bcc.n	d7328 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d7322:	9b04      	ldr	r3, [sp, #16]
   d7324:	b9cb      	cbnz	r3, d735a <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d7326:	e01f      	b.n	d7368 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d7328:	2100      	movs	r1, #0
   d732a:	4630      	mov	r0, r6
   d732c:	f000 fa53 	bl	d77d6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d7330:	b910      	cbnz	r0, d7338 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d7332:	7873      	ldrb	r3, [r6, #1]
   d7334:	b15b      	cbz	r3, d734e <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d7336:	e724      	b.n	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d7338:	3401      	adds	r4, #1
   d733a:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d733c:	e7ef      	b.n	d731e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d733e:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d7340:	791b      	ldrb	r3, [r3, #4]
   d7342:	2b01      	cmp	r3, #1
   d7344:	d8ed      	bhi.n	d7322 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d7346:	3410      	adds	r4, #16
   d7348:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d734a:	42a7      	cmp	r7, r4
   d734c:	d9e9      	bls.n	d7322 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d734e:	4630      	mov	r0, r6
   d7350:	f000 f8ea 	bl	d7528 <_ZN7FatFile13addDirClusterEv>
   d7354:	2800      	cmp	r0, #0
   d7356:	d1f2      	bne.n	d733e <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d7358:	e713      	b.n	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d735a:	4649      	mov	r1, r9
   d735c:	4630      	mov	r0, r6
   d735e:	f7ff feaf 	bl	d70c0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d7362:	2800      	cmp	r0, #0
   d7364:	f43f af0d 	beq.w	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d7368:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d736c:	4630      	mov	r0, r6
   d736e:	f000 fa4f 	bl	d7810 <_ZN7FatFile7seekSetEm>
   d7372:	2800      	cmp	r0, #0
   d7374:	f43f af05 	beq.w	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d7378:	1e7d      	subs	r5, r7, #1
   d737a:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d737c:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d737e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d7382:	f04f 080f 	mov.w	r8, #15
   d7386:	e041      	b.n	d740c <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d7388:	2100      	movs	r1, #0
   d738a:	4630      	mov	r0, r6
   d738c:	f000 fa23 	bl	d77d6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d7390:	4607      	mov	r7, r0
   d7392:	2800      	cmp	r0, #0
   d7394:	f43f aef5 	beq.w	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d7398:	68b2      	ldr	r2, [r6, #8]
   d739a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d739e:	42ac      	cmp	r4, r5
   d73a0:	f043 0301 	orr.w	r3, r3, #1
   d73a4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d73a8:	bf0c      	ite	eq
   d73aa:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d73ae:	4622      	movne	r2, r4
   d73b0:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d73b2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d73b6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d73ba:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d73be:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d73c0:	f7ff fc90 	bl	d6ce4 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d73c4:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d73c6:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d73c8:	f887 a01a 	strb.w	sl, [r7, #26]
   d73cc:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d73d0:	f002 021f 	and.w	r2, r2, #31
   d73d4:	230d      	movs	r3, #13
   d73d6:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d73d8:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d73dc:	435a      	muls	r2, r3
   d73de:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d73e0:	9902      	ldr	r1, [sp, #8]
   d73e2:	4291      	cmp	r1, r2
   d73e4:	d915      	bls.n	d7412 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d73e6:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d73ea:	2b04      	cmp	r3, #4
   d73ec:	fa5f fc83 	uxtb.w	ip, r3
   d73f0:	f103 0001 	add.w	r0, r3, #1
   d73f4:	d813      	bhi.n	d741e <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d73f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d73fa:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d73fe:	280d      	cmp	r0, #13
   d7400:	f102 0201 	add.w	r2, r2, #1
   d7404:	4603      	mov	r3, r0
   d7406:	d1eb      	bne.n	d73e0 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d7408:	3c01      	subs	r4, #1
   d740a:	b2e4      	uxtb	r4, r4
   d740c:	2c00      	cmp	r4, #0
   d740e:	d1bb      	bne.n	d7388 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d7410:	e00e      	b.n	d7430 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d7412:	bf14      	ite	ne
   d7414:	f04f 31ff 	movne.w	r1, #4294967295
   d7418:	2100      	moveq	r1, #0
   d741a:	b289      	uxth	r1, r1
   d741c:	e7e5      	b.n	d73ea <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d741e:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d7422:	bf94      	ite	ls
   d7424:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d7428:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d742c:	8099      	strh	r1, [r3, #4]
   d742e:	e7e6      	b.n	d73fe <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d7430:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d7432:	4621      	mov	r1, r4
   d7434:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d7436:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d743a:	f000 f9cc 	bl	d77d6 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d743e:	4607      	mov	r7, r0
   d7440:	2800      	cmp	r0, #0
   d7442:	f43f ae9e 	beq.w	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d7446:	2220      	movs	r2, #32
   d7448:	4621      	mov	r1, r4
   d744a:	f00a f895 	bl	e1578 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d744e:	464b      	mov	r3, r9
   d7450:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d7454:	603a      	str	r2, [r7, #0]
   d7456:	685a      	ldr	r2, [r3, #4]
   d7458:	607a      	str	r2, [r7, #4]
   d745a:	891a      	ldrh	r2, [r3, #8]
   d745c:	813a      	strh	r2, [r7, #8]
   d745e:	7a9b      	ldrb	r3, [r3, #10]
   d7460:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d7462:	f899 3000 	ldrb.w	r3, [r9]
   d7466:	f003 0318 	and.w	r3, r3, #24
   d746a:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d746c:	4b18      	ldr	r3, [pc, #96]	; (d74d0 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d746e:	681b      	ldr	r3, [r3, #0]
   d7470:	b12b      	cbz	r3, d747e <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d7472:	f107 010e 	add.w	r1, r7, #14
   d7476:	f107 0010 	add.w	r0, r7, #16
   d747a:	4798      	blx	r3
   d747c:	e006      	b.n	d748c <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d747e:	2321      	movs	r3, #33	; 0x21
   d7480:	743b      	strb	r3, [r7, #16]
   d7482:	2328      	movs	r3, #40	; 0x28
   d7484:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d7486:	2308      	movs	r3, #8
   d7488:	73bc      	strb	r4, [r7, #14]
   d748a:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d748c:	8a3b      	ldrh	r3, [r7, #16]
   d748e:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d7490:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d7492:	89fb      	ldrh	r3, [r7, #14]
   d7494:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d7496:	68b2      	ldr	r2, [r6, #8]
   d7498:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d749c:	f043 0301 	orr.w	r3, r3, #1
   d74a0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d74a4:	9500      	str	r5, [sp, #0]
   d74a6:	465b      	mov	r3, fp
   d74a8:	4652      	mov	r2, sl
   d74aa:	4631      	mov	r1, r6
   d74ac:	9805      	ldr	r0, [sp, #20]
   d74ae:	f000 f9f8 	bl	d78a2 <_ZN7FatFile15openCachedEntryEPS_tih>
   d74b2:	e009      	b.n	d74c8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d74b4:	2701      	movs	r7, #1
   d74b6:	e677      	b.n	d71a8 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d74b8:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d74bc:	f1be 0f0d 	cmp.w	lr, #13
   d74c0:	f43f ae82 	beq.w	d71c8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d74c4:	46d4      	mov	ip, sl
   d74c6:	e6c3      	b.n	d7250 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d74c8:	b009      	add	sp, #36	; 0x24
   d74ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d74ce:	bf00      	nop
   d74d0:	2003e09c 	.word	0x2003e09c

000d74d4 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d74d4:	f003 bfa4 	b.w	db420 <HAL_Pin_Map>

000d74d8 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d74d8:	f003 bfa2 	b.w	db420 <HAL_Pin_Map>

000d74dc <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d74dc:	f003 bfa0 	b.w	db420 <HAL_Pin_Map>

000d74e0 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d74e0:	b510      	push	{r4, lr}
   d74e2:	460c      	mov	r4, r1
   d74e4:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d74e6:	b909      	cbnz	r1, d74ec <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d74e8:	2000      	movs	r0, #0
   d74ea:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d74ec:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d74f0:	d004      	beq.n	d74fc <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d74f2:	232f      	movs	r3, #47	; 0x2f
   d74f4:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d74f6:	2300      	movs	r3, #0
   d74f8:	7063      	strb	r3, [r4, #1]
   d74fa:	e006      	b.n	d750a <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d74fc:	f000 f854 	bl	d75a8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d7500:	2800      	cmp	r0, #0
   d7502:	d0f1      	beq.n	d74e8 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d7504:	4621      	mov	r1, r4
   d7506:	f000 f85e 	bl	d75c6 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d750a:	2001      	movs	r0, #1

fail:
  return false;
}
   d750c:	bd10      	pop	{r4, pc}

000d750e <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d750e:	f003 bf87 	b.w	db420 <HAL_Pin_Map>

000d7512 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d7512:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d7514:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d7516:	f043 0304 	orr.w	r3, r3, #4
   d751a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d751c:	f100 0210 	add.w	r2, r0, #16
   d7520:	6880      	ldr	r0, [r0, #8]
   d7522:	f000 bd71 	b.w	d8008 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d7528 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d7528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d752c:	7803      	ldrb	r3, [r0, #0]
   d752e:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d7532:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d7534:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d7538:	b10b      	cbz	r3, d753e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d753a:	2600      	movs	r6, #0
   d753c:	e02e      	b.n	d759c <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d753e:	6942      	ldr	r2, [r0, #20]
   d7540:	4b18      	ldr	r3, [pc, #96]	; (d75a4 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d7542:	429a      	cmp	r2, r3
   d7544:	d8f9      	bhi.n	d753a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d7546:	f7ff ffe4 	bl	d7512 <_ZN7FatFile10addClusterEv>
   d754a:	4606      	mov	r6, r0
   d754c:	2800      	cmp	r0, #0
   d754e:	d0f4      	beq.n	d753a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d7550:	6921      	ldr	r1, [r4, #16]
   d7552:	68a0      	ldr	r0, [r4, #8]
   d7554:	f000 fced 	bl	d7f32 <_ZNK9FatVolume17clusterFirstBlockEm>
   d7558:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d755a:	68a0      	ldr	r0, [r4, #8]
   d755c:	2205      	movs	r2, #5
   d755e:	4639      	mov	r1, r7
   d7560:	3024      	adds	r0, #36	; 0x24
   d7562:	f000 fcc2 	bl	d7eea <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d7566:	4680      	mov	r8, r0
   d7568:	2800      	cmp	r0, #0
   d756a:	d0e6      	beq.n	d753a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d756c:	4629      	mov	r1, r5
   d756e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7572:	f00a f801 	bl	e1578 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d7576:	2501      	movs	r5, #1
   d7578:	68a3      	ldr	r3, [r4, #8]
   d757a:	791a      	ldrb	r2, [r3, #4]
   d757c:	42aa      	cmp	r2, r5
   d757e:	d909      	bls.n	d7594 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d7580:	4642      	mov	r2, r8
   d7582:	19e9      	adds	r1, r5, r7
   d7584:	6818      	ldr	r0, [r3, #0]
   d7586:	f001 f82d 	bl	d85e4 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d758a:	2800      	cmp	r0, #0
   d758c:	d0d5      	beq.n	d753a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d758e:	3501      	adds	r5, #1
   d7590:	b2ed      	uxtb	r5, r5
   d7592:	e7f1      	b.n	d7578 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d7594:	6963      	ldr	r3, [r4, #20]
   d7596:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d759a:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d759c:	4630      	mov	r0, r6
   d759e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d75a2:	bf00      	nop
   d75a4:	001ffdff 	.word	0x001ffdff

000d75a8 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d75a8:	b510      	push	{r4, lr}
   d75aa:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d75ac:	6880      	ldr	r0, [r0, #8]
   d75ae:	460a      	mov	r2, r1
   d75b0:	3024      	adds	r0, #36	; 0x24
   d75b2:	69a1      	ldr	r1, [r4, #24]
   d75b4:	f000 fc99 	bl	d7eea <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d75b8:	b120      	cbz	r0, d75c4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d75ba:	88a3      	ldrh	r3, [r4, #4]
   d75bc:	f003 030f 	and.w	r3, r3, #15
   d75c0:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d75c4:	bd10      	pop	{r4, pc}

000d75c6 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d75c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d75c8:	2400      	movs	r4, #0
   d75ca:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d75cc:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d75ce:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d75d0:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d75d2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d75d6:	2a20      	cmp	r2, #32
   d75d8:	d018      	beq.n	d760c <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d75da:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d75dc:	bf02      	ittt	eq
   d75de:	54cf      	strbeq	r7, [r1, r3]
   d75e0:	1c5a      	addeq	r2, r3, #1
   d75e2:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d75e4:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d75e6:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d75ea:	bf08      	it	eq
   d75ec:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d75ee:	f1be 0f19 	cmp.w	lr, #25
   d75f2:	d806      	bhi.n	d7602 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d75f4:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d75f8:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d75fc:	bf1c      	itt	ne
   d75fe:	3220      	addne	r2, #32
   d7600:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d7602:	f103 0e01 	add.w	lr, r3, #1
   d7606:	54ca      	strb	r2, [r1, r3]
   d7608:	fa5f f38e 	uxtb.w	r3, lr
   d760c:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d760e:	2c0b      	cmp	r4, #11
   d7610:	d1df      	bne.n	d75d2 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d7612:	2200      	movs	r2, #0
   d7614:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d7616:	4618      	mov	r0, r3
   d7618:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d761a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d761a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d761c:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d761e:	4605      	mov	r5, r0
   d7620:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d7622:	b984      	cbnz	r4, d7646 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d7624:	2224      	movs	r2, #36	; 0x24
   d7626:	4621      	mov	r1, r4
   d7628:	f009 ffa6 	bl	e1578 <memset>

  m_vol = vol;
   d762c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d762e:	79f3      	ldrb	r3, [r6, #7]
   d7630:	2b10      	cmp	r3, #16
   d7632:	d003      	beq.n	d763c <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d7634:	2b20      	cmp	r3, #32
   d7636:	d106      	bne.n	d7646 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d7638:	2340      	movs	r3, #64	; 0x40
   d763a:	e000      	b.n	d763e <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d763c:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d763e:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d7640:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d7642:	70a8      	strb	r0, [r5, #2]
   d7644:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d7646:	2000      	movs	r0, #0
   d7648:	bd70      	pop	{r4, r5, r6, pc}

000d764a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d764a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d764e:	7803      	ldrb	r3, [r0, #0]
   d7650:	4604      	mov	r4, r0
   d7652:	4689      	mov	r9, r1
   d7654:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d7656:	b14b      	cbz	r3, d766c <_ZN7FatFile4readEPvj+0x22>
   d7658:	7882      	ldrb	r2, [r0, #2]
   d765a:	07d1      	lsls	r1, r2, #31
   d765c:	d506      	bpl.n	d766c <_ZN7FatFile4readEPvj+0x22>
   d765e:	e00c      	b.n	d767a <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7660:	465a      	mov	r2, fp
   d7662:	6921      	ldr	r1, [r4, #16]
   d7664:	f000 fc6b 	bl	d7f3e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d7668:	2800      	cmp	r0, #0
   d766a:	da3d      	bge.n	d76e8 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d766c:	7863      	ldrb	r3, [r4, #1]
   d766e:	f043 0302 	orr.w	r3, r3, #2
   d7672:	7063      	strb	r3, [r4, #1]
  return -1;
   d7674:	f04f 30ff 	mov.w	r0, #4294967295
   d7678:	e097      	b.n	d77aa <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d767a:	071a      	lsls	r2, r3, #28
   d767c:	d503      	bpl.n	d7686 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d767e:	69e3      	ldr	r3, [r4, #28]
   d7680:	6962      	ldr	r2, [r4, #20]
   d7682:	1a9b      	subs	r3, r3, r2
   d7684:	e007      	b.n	d7696 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d7686:	069a      	lsls	r2, r3, #26
   d7688:	d508      	bpl.n	d769c <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d768a:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d768c:	891a      	ldrh	r2, [r3, #8]
   d768e:	6963      	ldr	r3, [r4, #20]
   d7690:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d7694:	b29b      	uxth	r3, r3
   d7696:	429d      	cmp	r5, r3
   d7698:	bf28      	it	cs
   d769a:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d769c:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d769e:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d76a2:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d76a6:	2e00      	cmp	r6, #0
   d76a8:	d035      	beq.n	d7716 <_ZN7FatFile4readEPvj+0xcc>
   d76aa:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d76ac:	6963      	ldr	r3, [r4, #20]
   d76ae:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d76b0:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d76b4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d76b8:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d76bc:	d002      	beq.n	d76c4 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d76be:	6a03      	ldr	r3, [r0, #32]
   d76c0:	4419      	add	r1, r3
   d76c2:	e01d      	b.n	d7700 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d76c4:	f890 8005 	ldrb.w	r8, [r0, #5]
   d76c8:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d76cc:	f1ba 0f00 	cmp.w	sl, #0
   d76d0:	d110      	bne.n	d76f4 <_ZN7FatFile4readEPvj+0xaa>
   d76d2:	f1b8 0f00 	cmp.w	r8, #0
   d76d6:	d10d      	bne.n	d76f4 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d76d8:	2b00      	cmp	r3, #0
   d76da:	d1c1      	bne.n	d7660 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d76dc:	0653      	lsls	r3, r2, #25
   d76de:	bf4c      	ite	mi
   d76e0:	6a03      	ldrmi	r3, [r0, #32]
   d76e2:	6a23      	ldrpl	r3, [r4, #32]
   d76e4:	6123      	str	r3, [r4, #16]
   d76e6:	e005      	b.n	d76f4 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d76e8:	d104      	bne.n	d76f4 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d76ea:	7823      	ldrb	r3, [r4, #0]
   d76ec:	f013 0f70 	tst.w	r3, #112	; 0x70
   d76f0:	d111      	bne.n	d7716 <_ZN7FatFile4readEPvj+0xcc>
   d76f2:	e7bb      	b.n	d766c <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d76f4:	6921      	ldr	r1, [r4, #16]
   d76f6:	68a0      	ldr	r0, [r4, #8]
   d76f8:	f000 fc1b 	bl	d7f32 <_ZNK9FatVolume17clusterFirstBlockEm>
   d76fc:	eb08 0100 	add.w	r1, r8, r0
   d7700:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d7702:	f1ba 0f00 	cmp.w	sl, #0
   d7706:	d135      	bne.n	d7774 <_ZN7FatFile4readEPvj+0x12a>
   d7708:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d770c:	d332      	bcc.n	d7774 <_ZN7FatFile4readEPvj+0x12a>
   d770e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d7710:	4299      	cmp	r1, r3
   d7712:	d102      	bne.n	d771a <_ZN7FatFile4readEPvj+0xd0>
   d7714:	e02e      	b.n	d7774 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d7716:	1ba8      	subs	r0, r5, r6
   d7718:	e047      	b.n	d77aa <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d771a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d771e:	d31b      	bcc.n	d7758 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d7720:	7822      	ldrb	r2, [r4, #0]
   d7722:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d7724:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d7728:	d406      	bmi.n	d7738 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d772a:	7902      	ldrb	r2, [r0, #4]
   d772c:	ebc8 0202 	rsb	r2, r8, r2
   d7730:	b2d2      	uxtb	r2, r2
   d7732:	4592      	cmp	sl, r2
   d7734:	bf28      	it	cs
   d7736:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7738:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d773a:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d773e:	d207      	bcs.n	d7750 <_ZN7FatFile4readEPvj+0x106>
   d7740:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d7742:	4653      	mov	r3, sl
   d7744:	464a      	mov	r2, r9
   d7746:	6800      	ldr	r0, [r0, #0]
   d7748:	f000 ff0a 	bl	d8560 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d774c:	b960      	cbnz	r0, d7768 <_ZN7FatFile4readEPvj+0x11e>
   d774e:	e78d      	b.n	d766c <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7750:	4453      	add	r3, sl
   d7752:	4299      	cmp	r1, r3
   d7754:	d321      	bcc.n	d779a <_ZN7FatFile4readEPvj+0x150>
   d7756:	e7f3      	b.n	d7740 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d7758:	464a      	mov	r2, r9
   d775a:	6800      	ldr	r0, [r0, #0]
   d775c:	f000 feb8 	bl	d84d0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d7760:	2800      	cmp	r0, #0
   d7762:	d083      	beq.n	d766c <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d7764:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d7768:	6963      	ldr	r3, [r4, #20]
   d776a:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d776c:	44b9      	add	r9, r7
    m_curPosition += n;
   d776e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d7770:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d7772:	e798      	b.n	d76a6 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d7774:	2200      	movs	r2, #0
   d7776:	3024      	adds	r0, #36	; 0x24
   d7778:	f000 fbb7 	bl	d7eea <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d777c:	2800      	cmp	r0, #0
   d777e:	f43f af75 	beq.w	d766c <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d7782:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d7786:	42b7      	cmp	r7, r6
   d7788:	bf28      	it	cs
   d778a:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d778c:	eb00 010a 	add.w	r1, r0, sl
   d7790:	463a      	mov	r2, r7
   d7792:	4648      	mov	r0, r9
   d7794:	f009 fee5 	bl	e1562 <memcpy>
   d7798:	e7e6      	b.n	d7768 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d779a:	3024      	adds	r0, #36	; 0x24
   d779c:	9101      	str	r1, [sp, #4]
   d779e:	f000 fb7d 	bl	d7e9c <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d77a2:	9901      	ldr	r1, [sp, #4]
   d77a4:	2800      	cmp	r0, #0
   d77a6:	d1cb      	bne.n	d7740 <_ZN7FatFile4readEPvj+0xf6>
   d77a8:	e760      	b.n	d766c <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d77aa:	b003      	add	sp, #12
   d77ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d77b0 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d77b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d77b2:	2201      	movs	r2, #1
   d77b4:	f10d 0107 	add.w	r1, sp, #7
   d77b8:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d77ba:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d77bc:	6905      	ldr	r5, [r0, #16]
   d77be:	f7ff ff44 	bl	d764a <_ZN7FatFile4readEPvj>
   d77c2:	2801      	cmp	r0, #1
   d77c4:	bf05      	ittet	eq
   d77c6:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d77ca:	6166      	streq	r6, [r4, #20]
   d77cc:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d77d0:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d77d2:	b002      	add	sp, #8
   d77d4:	bd70      	pop	{r4, r5, r6, pc}

000d77d6 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d77d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d77d8:	6943      	ldr	r3, [r0, #20]
   d77da:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d77de:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d77e0:	b105      	cbz	r5, d77e4 <_ZN7FatFile12readDirCacheEb+0xe>
   d77e2:	b969      	cbnz	r1, d7800 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d77e4:	2201      	movs	r2, #1
   d77e6:	f10d 0107 	add.w	r1, sp, #7
   d77ea:	4620      	mov	r0, r4
   d77ec:	f7ff ff2d 	bl	d764a <_ZN7FatFile4readEPvj>
   d77f0:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d77f2:	2801      	cmp	r0, #1
   d77f4:	d001      	beq.n	d77fa <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d77f6:	2000      	movs	r0, #0
   d77f8:	e008      	b.n	d780c <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d77fa:	6963      	ldr	r3, [r4, #20]
   d77fc:	331f      	adds	r3, #31
   d77fe:	e000      	b.n	d7802 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d7800:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d7802:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d7804:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d7806:	3030      	adds	r0, #48	; 0x30
   d7808:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d780c:	b003      	add	sp, #12
   d780e:	bd30      	pop	{r4, r5, pc}

000d7810 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d7810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7814:	460e      	mov	r6, r1
   d7816:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d7818:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d781a:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d781c:	2900      	cmp	r1, #0
   d781e:	d039      	beq.n	d7894 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d7820:	6945      	ldr	r5, [r0, #20]
   d7822:	42b5      	cmp	r5, r6
   d7824:	d03a      	beq.n	d789c <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d7826:	b90e      	cbnz	r6, d782c <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d7828:	6106      	str	r6, [r0, #16]
    goto done;
   d782a:	e031      	b.n	d7890 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d782c:	070b      	lsls	r3, r1, #28
   d782e:	d503      	bpl.n	d7838 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d7830:	69c3      	ldr	r3, [r0, #28]
   d7832:	429e      	cmp	r6, r3
   d7834:	d82e      	bhi.n	d7894 <_ZN7FatFile7seekSetEm+0x84>
   d7836:	e007      	b.n	d7848 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d7838:	0688      	lsls	r0, r1, #26
   d783a:	d505      	bpl.n	d7848 <_ZN7FatFile7seekSetEm+0x38>
   d783c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d783e:	891b      	ldrh	r3, [r3, #8]
   d7840:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d7844:	d826      	bhi.n	d7894 <_ZN7FatFile7seekSetEm+0x84>
   d7846:	e023      	b.n	d7890 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d7848:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d784c:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d7850:	1e6a      	subs	r2, r5, #1
   d7852:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d7856:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d7858:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d785a:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d785c:	429a      	cmp	r2, r3
   d785e:	d800      	bhi.n	d7862 <_ZN7FatFile7seekSetEm+0x52>
   d7860:	b94d      	cbnz	r5, d7876 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d7862:	064a      	lsls	r2, r1, #25
   d7864:	bf4c      	ite	mi
   d7866:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d786a:	6a22      	ldrpl	r2, [r4, #32]
   d786c:	6122      	str	r2, [r4, #16]
   d786e:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d7870:	f104 0810 	add.w	r8, r4, #16
   d7874:	e00a      	b.n	d788c <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d7876:	1a9b      	subs	r3, r3, r2
   d7878:	e7f9      	b.n	d786e <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d787a:	4642      	mov	r2, r8
   d787c:	6921      	ldr	r1, [r4, #16]
   d787e:	68a0      	ldr	r0, [r4, #8]
   d7880:	f000 fb5d 	bl	d7f3e <_ZN9FatVolume6fatGetEmPm>
   d7884:	2800      	cmp	r0, #0
   d7886:	f105 35ff 	add.w	r5, r5, #4294967295
   d788a:	dd03      	ble.n	d7894 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d788c:	2d00      	cmp	r5, #0
   d788e:	d1f4      	bne.n	d787a <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d7890:	6166      	str	r6, [r4, #20]
   d7892:	e003      	b.n	d789c <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d7894:	6127      	str	r7, [r4, #16]
  return false;
   d7896:	2000      	movs	r0, #0
   d7898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d789c:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d789e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d78a2 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d78a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d78a4:	460f      	mov	r7, r1
   d78a6:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d78a8:	2100      	movs	r1, #0
   d78aa:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d78ac:	4604      	mov	r4, r0
   d78ae:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d78b0:	f009 fe62 	bl	e1578 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d78b4:	68b8      	ldr	r0, [r7, #8]
   d78b6:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d78b8:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d78bc:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d78be:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d78c2:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d78c4:	6a3b      	ldr	r3, [r7, #32]
   d78c6:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d78c8:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d78ca:	7acb      	ldrb	r3, [r1, #11]
   d78cc:	071d      	lsls	r5, r3, #28
   d78ce:	d44c      	bmi.n	d796a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d78d0:	1883      	adds	r3, r0, r2
   d78d2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d78d6:	f003 0317 	and.w	r3, r3, #23
   d78da:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d78dc:	7ac9      	ldrb	r1, [r1, #11]
   d78de:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d78e2:	bf04      	itt	eq
   d78e4:	f043 0308 	orreq.w	r3, r3, #8
   d78e8:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d78ea:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d78ee:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d78f0:	f006 0303 	and.w	r3, r6, #3
   d78f4:	2b01      	cmp	r3, #1
   d78f6:	d009      	beq.n	d790c <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d78f8:	2b02      	cmp	r3, #2
   d78fa:	d005      	beq.n	d7908 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d78fc:	2b00      	cmp	r3, #0
   d78fe:	d134      	bne.n	d796a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d7900:	0571      	lsls	r1, r6, #21
   d7902:	d432      	bmi.n	d796a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d7904:	2301      	movs	r3, #1
   d7906:	e002      	b.n	d790e <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d7908:	2303      	movs	r3, #3
   d790a:	e000      	b.n	d790e <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d790c:	2302      	movs	r3, #2
   d790e:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d7910:	78a1      	ldrb	r1, [r4, #2]
   d7912:	078b      	lsls	r3, r1, #30
   d7914:	d503      	bpl.n	d791e <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d7916:	7823      	ldrb	r3, [r4, #0]
   d7918:	f013 0f11 	tst.w	r3, #17
   d791c:	d125      	bne.n	d796a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d791e:	b24b      	sxtb	r3, r1
   d7920:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d7924:	f006 0108 	and.w	r1, r6, #8
   d7928:	bf14      	ite	ne
   d792a:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d792e:	2700      	moveq	r7, #0
   d7930:	4319      	orrs	r1, r3
   d7932:	4339      	orrs	r1, r7
   d7934:	70a1      	strb	r1, [r4, #2]
   d7936:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d7938:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d793a:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d793c:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d793e:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d7942:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d7946:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d794a:	d504      	bpl.n	d7956 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d794c:	b181      	cbz	r1, d7970 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d794e:	f000 fb96 	bl	d807e <_ZN9FatVolume9freeChainEm>
   d7952:	b968      	cbnz	r0, d7970 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d7954:	e009      	b.n	d796a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d7956:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d7958:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d795a:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d795c:	0473      	lsls	r3, r6, #17
   d795e:	d50c      	bpl.n	d797a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d7960:	69e1      	ldr	r1, [r4, #28]
   d7962:	4620      	mov	r0, r4
   d7964:	f7ff ff54 	bl	d7810 <_ZN7FatFile7seekSetEm>
   d7968:	b938      	cbnz	r0, d797a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d796a:	2000      	movs	r0, #0
   d796c:	7020      	strb	r0, [r4, #0]
  return false;
   d796e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d7970:	78a3      	ldrb	r3, [r4, #2]
   d7972:	f043 0304 	orr.w	r3, r3, #4
   d7976:	70a3      	strb	r3, [r4, #2]
   d7978:	e7f0      	b.n	d795c <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d797a:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d797c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d797e <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d797e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d7982:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d7984:	4606      	mov	r6, r0
   d7986:	460d      	mov	r5, r1
   d7988:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d798a:	bb53      	cbnz	r3, d79e2 <_ZN7FatFile8openNextEPS_i+0x64>
   d798c:	780b      	ldrb	r3, [r1, #0]
   d798e:	f013 0f70 	tst.w	r3, #112	; 0x70
   d7992:	d026      	beq.n	d79e2 <_ZN7FatFile8openNextEPS_i+0x64>
   d7994:	694c      	ldr	r4, [r1, #20]
   d7996:	f014 041f 	ands.w	r4, r4, #31
   d799a:	d122      	bne.n	d79e2 <_ZN7FatFile8openNextEPS_i+0x64>
   d799c:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d799e:	2100      	movs	r1, #0
   d79a0:	4628      	mov	r0, r5
   d79a2:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d79a6:	f7ff ff16 	bl	d77d6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d79aa:	b1d0      	cbz	r0, d79e2 <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d79ac:	7803      	ldrb	r3, [r0, #0]
   d79ae:	b1c3      	cbz	r3, d79e2 <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d79b0:	2b2e      	cmp	r3, #46	; 0x2e
   d79b2:	d101      	bne.n	d79b8 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d79b4:	2400      	movs	r4, #0
   d79b6:	e7f2      	b.n	d799e <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d79b8:	2be5      	cmp	r3, #229	; 0xe5
   d79ba:	d0fb      	beq.n	d79b4 <_ZN7FatFile8openNextEPS_i+0x36>
   d79bc:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d79be:	f011 0f08 	tst.w	r1, #8
   d79c2:	d105      	bne.n	d79d0 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d79c4:	b17c      	cbz	r4, d79e6 <_ZN7FatFile8openNextEPS_i+0x68>
   d79c6:	f7ff f98d 	bl	d6ce4 <_ZN7FatFile11lfnChecksumEPh>
   d79ca:	4580      	cmp	r8, r0
   d79cc:	d109      	bne.n	d79e2 <_ZN7FatFile8openNextEPS_i+0x64>
   d79ce:	e00a      	b.n	d79e6 <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d79d0:	290f      	cmp	r1, #15
   d79d2:	d1ef      	bne.n	d79b4 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d79d4:	0659      	lsls	r1, r3, #25
   d79d6:	d5e2      	bpl.n	d799e <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d79d8:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d79dc:	f890 800d 	ldrb.w	r8, [r0, #13]
   d79e0:	e7dd      	b.n	d799e <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d79e2:	2000      	movs	r0, #0
   d79e4:	e007      	b.n	d79f6 <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d79e6:	9400      	str	r4, [sp, #0]
   d79e8:	463b      	mov	r3, r7
   d79ea:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d79ee:	4629      	mov	r1, r5
   d79f0:	4630      	mov	r0, r6
   d79f2:	f7ff ff56 	bl	d78a2 <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d79f6:	b003      	add	sp, #12
   d79f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d79fc <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d79fc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d79fe:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d7a00:	4604      	mov	r4, r0
  if (!isOpen()) {
   d7a02:	b90b      	cbnz	r3, d7a08 <_ZN7FatFile4syncEv+0xc>
    return true;
   d7a04:	2001      	movs	r0, #1
   d7a06:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d7a08:	7883      	ldrb	r3, [r0, #2]
   d7a0a:	075a      	lsls	r2, r3, #29
   d7a0c:	d523      	bpl.n	d7a56 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d7a0e:	2101      	movs	r1, #1
   d7a10:	f7ff fdca 	bl	d75a8 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d7a14:	4605      	mov	r5, r0
   d7a16:	b928      	cbnz	r0, d7a24 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d7a18:	7863      	ldrb	r3, [r4, #1]
   d7a1a:	f043 0301 	orr.w	r3, r3, #1
   d7a1e:	7063      	strb	r3, [r4, #1]
  return false;
   d7a20:	2000      	movs	r0, #0
   d7a22:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d7a24:	7803      	ldrb	r3, [r0, #0]
   d7a26:	2be5      	cmp	r3, #229	; 0xe5
   d7a28:	d0f6      	beq.n	d7a18 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d7a2a:	7823      	ldrb	r3, [r4, #0]
   d7a2c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d7a2e:	bf44      	itt	mi
   d7a30:	69e3      	ldrmi	r3, [r4, #28]
   d7a32:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d7a34:	8c23      	ldrh	r3, [r4, #32]
   d7a36:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d7a38:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d7a3a:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d7a3c:	4b09      	ldr	r3, [pc, #36]	; (d7a64 <_ZN7FatFile4syncEv+0x68>)
   d7a3e:	681b      	ldr	r3, [r3, #0]
   d7a40:	b12b      	cbz	r3, d7a4e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d7a42:	f100 0116 	add.w	r1, r0, #22
   d7a46:	3018      	adds	r0, #24
   d7a48:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d7a4a:	8b2b      	ldrh	r3, [r5, #24]
   d7a4c:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d7a4e:	78a3      	ldrb	r3, [r4, #2]
   d7a50:	f023 0304 	bic.w	r3, r3, #4
   d7a54:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d7a56:	68a0      	ldr	r0, [r4, #8]
   d7a58:	f7ff f937 	bl	d6cca <_ZN9FatVolume9cacheSyncEv>
   d7a5c:	2800      	cmp	r0, #0
   d7a5e:	d0db      	beq.n	d7a18 <_ZN7FatFile4syncEv+0x1c>
   d7a60:	e7d0      	b.n	d7a04 <_ZN7FatFile4syncEv+0x8>
   d7a62:	bf00      	nop
   d7a64:	2003e09c 	.word	0x2003e09c

000d7a68 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d7a68:	b510      	push	{r4, lr}
   d7a6a:	4604      	mov	r4, r0
  bool rtn = sync();
   d7a6c:	f7ff ffc6 	bl	d79fc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d7a70:	2300      	movs	r3, #0
   d7a72:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d7a74:	bd10      	pop	{r4, pc}

000d7a76 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d7a76:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7a78:	b093      	sub	sp, #76	; 0x4c
   d7a7a:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7a7c:	2300      	movs	r3, #0
   d7a7e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d7a82:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7a86:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d7a88:	9201      	str	r2, [sp, #4]
   d7a8a:	4606      	mov	r6, r0
   d7a8c:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7a8e:	b10b      	cbz	r3, d7a94 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d7a90:	2000      	movs	r0, #0
   d7a92:	e03d      	b.n	d7b10 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7a94:	780b      	ldrb	r3, [r1, #0]
   d7a96:	f013 0f70 	tst.w	r3, #112	; 0x70
   d7a9a:	d0f9      	beq.n	d7a90 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d7a9c:	7813      	ldrb	r3, [r2, #0]
   d7a9e:	2b2f      	cmp	r3, #47	; 0x2f
   d7aa0:	d112      	bne.n	d7ac8 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d7aa2:	9b01      	ldr	r3, [sp, #4]
   d7aa4:	781a      	ldrb	r2, [r3, #0]
   d7aa6:	2a2f      	cmp	r2, #47	; 0x2f
   d7aa8:	d102      	bne.n	d7ab0 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d7aaa:	3301      	adds	r3, #1
   d7aac:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d7aae:	e7f8      	b.n	d7aa2 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d7ab0:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d7ab2:	b91a      	cbnz	r2, d7abc <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d7ab4:	4630      	mov	r0, r6
   d7ab6:	f7ff fdb0 	bl	d761a <_ZN7FatFile8openRootEP9FatVolume>
   d7aba:	e029      	b.n	d7b10 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d7abc:	a809      	add	r0, sp, #36	; 0x24
   d7abe:	f7ff fdac 	bl	d761a <_ZN7FatFile8openRootEP9FatVolume>
   d7ac2:	2800      	cmp	r0, #0
   d7ac4:	d0e4      	beq.n	d7a90 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d7ac6:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d7ac8:	aa01      	add	r2, sp, #4
   d7aca:	a903      	add	r1, sp, #12
   d7acc:	9801      	ldr	r0, [sp, #4]
   d7ace:	f7ff f9a9 	bl	d6e24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d7ad2:	2800      	cmp	r0, #0
   d7ad4:	d0dc      	beq.n	d7a90 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d7ad6:	9b01      	ldr	r3, [sp, #4]
   d7ad8:	781b      	ldrb	r3, [r3, #0]
   d7ada:	b19b      	cbz	r3, d7b04 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d7adc:	2300      	movs	r3, #0
   d7ade:	aa03      	add	r2, sp, #12
   d7ae0:	4621      	mov	r1, r4
   d7ae2:	4630      	mov	r0, r6
   d7ae4:	f7ff fb42 	bl	d716c <_ZN7FatFile4openEPS_P7fname_ti>
   d7ae8:	2800      	cmp	r0, #0
   d7aea:	d0d1      	beq.n	d7a90 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d7aec:	4635      	mov	r5, r6
   d7aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7af0:	ac09      	add	r4, sp, #36	; 0x24
   d7af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7af8:	682b      	ldr	r3, [r5, #0]
   d7afa:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d7afc:	4630      	mov	r0, r6
   d7afe:	f7ff ffb3 	bl	d7a68 <_ZN7FatFile5closeEv>
   d7b02:	e7e0      	b.n	d7ac6 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d7b04:	463b      	mov	r3, r7
   d7b06:	aa03      	add	r2, sp, #12
   d7b08:	4621      	mov	r1, r4
   d7b0a:	4630      	mov	r0, r6
   d7b0c:	f7ff fb2e 	bl	d716c <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d7b10:	b013      	add	sp, #76	; 0x4c
   d7b12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7b14 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d7b14:	b500      	push	{lr}
   d7b16:	b08b      	sub	sp, #44	; 0x2c
   d7b18:	2300      	movs	r3, #0
   d7b1a:	f88d 3004 	strb.w	r3, [sp, #4]
   d7b1e:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d7b22:	460a      	mov	r2, r1
   d7b24:	2301      	movs	r3, #1
   d7b26:	4601      	mov	r1, r0
   d7b28:	a801      	add	r0, sp, #4
   d7b2a:	f7ff ffa4 	bl	d7a76 <_ZN7FatFile4openEPS_PKci>
   d7b2e:	b110      	cbz	r0, d7b36 <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d7b30:	a801      	add	r0, sp, #4
   d7b32:	f7ff fa63 	bl	d6ffc <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d7b36:	b00b      	add	sp, #44	; 0x2c
   d7b38:	f85d fb04 	ldr.w	pc, [sp], #4

000d7b3c <_ZN7FatFile5mkdirEPS_P7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d7b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  dir_t dot;
  dir_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
   d7b40:	780b      	ldrb	r3, [r1, #0]
   d7b42:	f013 0f70 	tst.w	r3, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d7b46:	b088      	sub	sp, #32
   d7b48:	4604      	mov	r4, r0
   d7b4a:	460f      	mov	r7, r1
  uint32_t block;
  dir_t dot;
  dir_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
   d7b4c:	d01c      	beq.n	d7b88 <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
   d7b4e:	f640 2302 	movw	r3, #2562	; 0xa02
   d7b52:	f7ff fb0b 	bl	d716c <_ZN7FatFile4openEPS_P7fname_ti>
   d7b56:	b1b8      	cbz	r0, d7b88 <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = F_READ;
   d7b58:	2601      	movs	r6, #1
  m_attr = FILE_ATTR_SUBDIR;
   d7b5a:	2510      	movs	r5, #16
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = F_READ;
   d7b5c:	70a6      	strb	r6, [r4, #2]
  m_attr = FILE_ATTR_SUBDIR;
   d7b5e:	7025      	strb	r5, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
   d7b60:	4620      	mov	r0, r4
   d7b62:	f7ff fce1 	bl	d7528 <_ZN7FatFile13addDirClusterEv>
   d7b66:	b178      	cbz	r0, d7b88 <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
   d7b68:	6923      	ldr	r3, [r4, #16]
   d7b6a:	6223      	str	r3, [r4, #32]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d7b6c:	2100      	movs	r1, #0
   d7b6e:	4620      	mov	r0, r4
   d7b70:	f7ff fe4e 	bl	d7810 <_ZN7FatFile7seekSetEm>
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
   d7b74:	4620      	mov	r0, r4
   d7b76:	f7ff ff41 	bl	d79fc <_ZN7FatFile4syncEv>
   d7b7a:	b128      	cbz	r0, d7b88 <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d7b7c:	4631      	mov	r1, r6
   d7b7e:	4620      	mov	r0, r4
   d7b80:	f7ff fd12 	bl	d75a8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d7b84:	4603      	mov	r3, r0
   d7b86:	b908      	cbnz	r0, d7b8c <_ZN7FatFile5mkdirEPS_P7fname_t+0x50>
  memcpy(&pc->dir[1], &dot, sizeof(dot));
  // write first block
  return m_vol->cacheSync();

fail:
  return false;
   d7b88:	2000      	movs	r0, #0
   d7b8a:	e051      	b.n	d7c30 <_ZN7FatFile5mkdirEPS_P7fname_t+0xf4>
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = DIR_ATT_DIRECTORY;
   d7b8c:	72c5      	strb	r5, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
   d7b8e:	4602      	mov	r2, r0
   d7b90:	466e      	mov	r6, sp
   d7b92:	f100 0c20 	add.w	ip, r0, #32
   d7b96:	466d      	mov	r5, sp
   d7b98:	6810      	ldr	r0, [r2, #0]
   d7b9a:	6851      	ldr	r1, [r2, #4]
   d7b9c:	46b6      	mov	lr, r6
   d7b9e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d7ba2:	3208      	adds	r2, #8
   d7ba4:	4562      	cmp	r2, ip
   d7ba6:	4676      	mov	r6, lr
   d7ba8:	d1f6      	bne.n	d7b98 <_ZN7FatFile5mkdirEPS_P7fname_t+0x5c>
   d7baa:	f8b3 8014 	ldrh.w	r8, [r3, #20]
   d7bae:	8b5e      	ldrh	r6, [r3, #26]
  dot.name[0] = '.';
   d7bb0:	232e      	movs	r3, #46	; 0x2e
   d7bb2:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
   d7bb6:	2120      	movs	r1, #32
  // change directory entry  attribute
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
   d7bb8:	2300      	movs	r3, #0
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
   d7bba:	18ea      	adds	r2, r5, r3
   d7bbc:	3301      	adds	r3, #1
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
   d7bbe:	2b0a      	cmp	r3, #10
    dot.name[i] = ' ';
   d7bc0:	7051      	strb	r1, [r2, #1]
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
   d7bc2:	d1fa      	bne.n	d7bba <_ZN7FatFile5mkdirEPS_P7fname_t+0x7e>
    dot.name[i] = ' ';
  }

  // cache block for '.'  and '..'
  block = m_vol->clusterFirstBlock(m_firstCluster);
   d7bc4:	6a21      	ldr	r1, [r4, #32]
   d7bc6:	68a0      	ldr	r0, [r4, #8]
   d7bc8:	f000 f9b3 	bl	d7f32 <_ZNK9FatVolume17clusterFirstBlockEm>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d7bcc:	68a3      	ldr	r3, [r4, #8]
   d7bce:	4601      	mov	r1, r0
   d7bd0:	2201      	movs	r2, #1
   d7bd2:	f103 0024 	add.w	r0, r3, #36	; 0x24
   d7bd6:	f000 f988 	bl	d7eea <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
   d7bda:	4603      	mov	r3, r0
   d7bdc:	2800      	cmp	r0, #0
   d7bde:	d0d3      	beq.n	d7b88 <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to block
  memcpy(&pc->dir[0], &dot, sizeof(dot));
   d7be0:	f8ad 601a 	strh.w	r6, [sp, #26]
   d7be4:	f8ad 8014 	strh.w	r8, [sp, #20]
   d7be8:	46ae      	mov	lr, r5
   d7bea:	4606      	mov	r6, r0
   d7bec:	f10d 0c20 	add.w	ip, sp, #32
   d7bf0:	4672      	mov	r2, lr
   d7bf2:	ca03      	ldmia	r2!, {r0, r1}
   d7bf4:	4562      	cmp	r2, ip
   d7bf6:	6030      	str	r0, [r6, #0]
   d7bf8:	6071      	str	r1, [r6, #4]
   d7bfa:	4696      	mov	lr, r2
   d7bfc:	f106 0608 	add.w	r6, r6, #8
   d7c00:	d1f6      	bne.n	d7bf0 <_ZN7FatFile5mkdirEPS_P7fname_t+0xb4>
  // make entry for '..'
  dot.name[1] = '.';
   d7c02:	222e      	movs	r2, #46	; 0x2e
   d7c04:	f88d 2001 	strb.w	r2, [sp, #1]
  dot.firstClusterLow = parent->m_firstCluster & 0XFFFF;
   d7c08:	6a3a      	ldr	r2, [r7, #32]
  dot.firstClusterHigh = parent->m_firstCluster >> 16;
  // copy '..' to block
  memcpy(&pc->dir[1], &dot, sizeof(dot));
   d7c0a:	f8ad 201a 	strh.w	r2, [sp, #26]
   d7c0e:	0c11      	lsrs	r1, r2, #16
   d7c10:	f8ad 1014 	strh.w	r1, [sp, #20]
   d7c14:	3320      	adds	r3, #32
   d7c16:	ae08      	add	r6, sp, #32
   d7c18:	462a      	mov	r2, r5
   d7c1a:	ca03      	ldmia	r2!, {r0, r1}
   d7c1c:	42b2      	cmp	r2, r6
   d7c1e:	6018      	str	r0, [r3, #0]
   d7c20:	6059      	str	r1, [r3, #4]
   d7c22:	4615      	mov	r5, r2
   d7c24:	f103 0308 	add.w	r3, r3, #8
   d7c28:	d1f6      	bne.n	d7c18 <_ZN7FatFile5mkdirEPS_P7fname_t+0xdc>
  // write first block
  return m_vol->cacheSync();
   d7c2a:	68a0      	ldr	r0, [r4, #8]
   d7c2c:	f7ff f84d 	bl	d6cca <_ZN9FatVolume9cacheSyncEv>

fail:
  return false;
}
   d7c30:	b008      	add	sp, #32
   d7c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7c36 <_ZN7FatFile5mkdirEPS_PKcb>:
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
  pos->cluster = m_curCluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d7c36:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c38:	b093      	sub	sp, #76	; 0x4c
   d7c3a:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7c3c:	2300      	movs	r3, #0
   d7c3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d7c42:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
   d7c46:	7803      	ldrb	r3, [r0, #0]
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
  pos->cluster = m_curCluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d7c48:	9201      	str	r2, [sp, #4]
   d7c4a:	4606      	mov	r6, r0
   d7c4c:	460c      	mov	r4, r1
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
   d7c4e:	2b00      	cmp	r3, #0
   d7c50:	d13e      	bne.n	d7cd0 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
   d7c52:	780b      	ldrb	r3, [r1, #0]
   d7c54:	f013 0f70 	tst.w	r3, #112	; 0x70
   d7c58:	d03a      	beq.n	d7cd0 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d7c5a:	7813      	ldrb	r3, [r2, #0]
   d7c5c:	2b2f      	cmp	r3, #47	; 0x2f
   d7c5e:	d10c      	bne.n	d7c7a <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
   d7c60:	9b01      	ldr	r3, [sp, #4]
   d7c62:	781a      	ldrb	r2, [r3, #0]
   d7c64:	2a2f      	cmp	r2, #47	; 0x2f
   d7c66:	d102      	bne.n	d7c6e <_ZN7FatFile5mkdirEPS_PKcb+0x38>
      path++;
   d7c68:	3301      	adds	r3, #1
   d7c6a:	9301      	str	r3, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d7c6c:	e7f8      	b.n	d7c60 <_ZN7FatFile5mkdirEPS_PKcb+0x2a>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
   d7c6e:	68a1      	ldr	r1, [r4, #8]
   d7c70:	a809      	add	r0, sp, #36	; 0x24
   d7c72:	f7ff fcd2 	bl	d761a <_ZN7FatFile8openRootEP9FatVolume>
   d7c76:	b358      	cbz	r0, d7cd0 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
   d7c78:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d7c7a:	aa01      	add	r2, sp, #4
   d7c7c:	a903      	add	r1, sp, #12
   d7c7e:	9801      	ldr	r0, [sp, #4]
   d7c80:	f7ff f8d0 	bl	d6e24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d7c84:	b320      	cbz	r0, d7cd0 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
   d7c86:	9b01      	ldr	r3, [sp, #4]
   d7c88:	781b      	ldrb	r3, [r3, #0]
   d7c8a:	b1db      	cbz	r3, d7cc4 <_ZN7FatFile5mkdirEPS_PKcb+0x8e>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
   d7c8c:	2300      	movs	r3, #0
   d7c8e:	aa03      	add	r2, sp, #12
   d7c90:	4621      	mov	r1, r4
   d7c92:	4630      	mov	r0, r6
   d7c94:	f7ff fa6a 	bl	d716c <_ZN7FatFile4openEPS_P7fname_ti>
   d7c98:	b158      	cbz	r0, d7cb2 <_ZN7FatFile5mkdirEPS_PKcb+0x7c>
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
   d7c9a:	4635      	mov	r5, r6
   d7c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7c9e:	ac09      	add	r4, sp, #36	; 0x24
   d7ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ca6:	682b      	ldr	r3, [r5, #0]
   d7ca8:	6023      	str	r3, [r4, #0]
    parent = &tmpDir;
    close();
   d7caa:	4630      	mov	r0, r6
   d7cac:	f7ff fedc 	bl	d7a68 <_ZN7FatFile5closeEv>
   d7cb0:	e7e2      	b.n	d7c78 <_ZN7FatFile5mkdirEPS_PKcb+0x42>
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
   d7cb2:	b16f      	cbz	r7, d7cd0 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
   d7cb4:	aa03      	add	r2, sp, #12
   d7cb6:	4621      	mov	r1, r4
   d7cb8:	4630      	mov	r0, r6
   d7cba:	f7ff ff3f 	bl	d7b3c <_ZN7FatFile5mkdirEPS_P7fname_t>
   d7cbe:	2800      	cmp	r0, #0
   d7cc0:	d1eb      	bne.n	d7c9a <_ZN7FatFile5mkdirEPS_PKcb+0x64>
   d7cc2:	e005      	b.n	d7cd0 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
   d7cc4:	aa03      	add	r2, sp, #12
   d7cc6:	4621      	mov	r1, r4
   d7cc8:	4630      	mov	r0, r6
   d7cca:	f7ff ff37 	bl	d7b3c <_ZN7FatFile5mkdirEPS_P7fname_t>
   d7cce:	e000      	b.n	d7cd2 <_ZN7FatFile5mkdirEPS_PKcb+0x9c>

fail:
  return false;
   d7cd0:	2000      	movs	r0, #0
}
   d7cd2:	b013      	add	sp, #76	; 0x4c
   d7cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7cd8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d7cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7cdc:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d7cde:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7ce0:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d7ce2:	4604      	mov	r4, r0
   d7ce4:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d7ce6:	d508      	bpl.n	d7cfa <_ZN7FatFile5writeEPKvj+0x22>
   d7ce8:	7883      	ldrb	r3, [r0, #2]
   d7cea:	079a      	lsls	r2, r3, #30
   d7cec:	d505      	bpl.n	d7cfa <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d7cee:	071b      	lsls	r3, r3, #28
   d7cf0:	d50b      	bpl.n	d7d0a <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d7cf2:	69e1      	ldr	r1, [r4, #28]
   d7cf4:	f7ff fd8c 	bl	d7810 <_ZN7FatFile7seekSetEm>
   d7cf8:	b938      	cbnz	r0, d7d0a <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d7cfa:	7863      	ldrb	r3, [r4, #1]
   d7cfc:	f043 0301 	orr.w	r3, r3, #1
   d7d00:	7063      	strb	r3, [r4, #1]
  return -1;
   d7d02:	f04f 30ff 	mov.w	r0, #4294967295
   d7d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d7d0a:	6963      	ldr	r3, [r4, #20]
   d7d0c:	43db      	mvns	r3, r3
   d7d0e:	4598      	cmp	r8, r3
   d7d10:	d8f3      	bhi.n	d7cfa <_ZN7FatFile5writeEPKvj+0x22>
   d7d12:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7d14:	f04f 0a00 	mov.w	sl, #0
   d7d18:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d7d1a:	2e00      	cmp	r6, #0
   d7d1c:	f000 8081 	beq.w	d7e22 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d7d20:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d7d22:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d7d24:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d7d28:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d7d2c:	d11c      	bne.n	d7d68 <_ZN7FatFile5writeEPKvj+0x90>
   d7d2e:	b9df      	cbnz	r7, d7d68 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d7d30:	6921      	ldr	r1, [r4, #16]
   d7d32:	b171      	cbz	r1, d7d52 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7d34:	f104 0210 	add.w	r2, r4, #16
   d7d38:	f000 f901 	bl	d7f3e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d7d3c:	2800      	cmp	r0, #0
   d7d3e:	dbdc      	blt.n	d7cfa <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d7d40:	f040 808e 	bne.w	d7e60 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d7d44:	4620      	mov	r0, r4
   d7d46:	f7ff fbe4 	bl	d7512 <_ZN7FatFile10addClusterEv>
   d7d4a:	2800      	cmp	r0, #0
   d7d4c:	f040 8088 	bne.w	d7e60 <_ZN7FatFile5writeEPKvj+0x188>
   d7d50:	e7d3      	b.n	d7cfa <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d7d52:	6a23      	ldr	r3, [r4, #32]
   d7d54:	b93b      	cbnz	r3, d7d66 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d7d56:	4620      	mov	r0, r4
   d7d58:	f7ff fbdb 	bl	d7512 <_ZN7FatFile10addClusterEv>
   d7d5c:	2800      	cmp	r0, #0
   d7d5e:	d0cc      	beq.n	d7cfa <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d7d60:	6923      	ldr	r3, [r4, #16]
   d7d62:	6223      	str	r3, [r4, #32]
   d7d64:	e000      	b.n	d7d68 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d7d66:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7d68:	6921      	ldr	r1, [r4, #16]
   d7d6a:	68a0      	ldr	r0, [r4, #8]
   d7d6c:	f000 f8e1 	bl	d7f32 <_ZNK9FatVolume17clusterFirstBlockEm>
   d7d70:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d7d72:	b917      	cbnz	r7, d7d7a <_ZN7FatFile5writeEPKvj+0xa2>
   d7d74:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7d78:	d221      	bcs.n	d7dbe <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d7d7a:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d7d7e:	42b5      	cmp	r5, r6
   d7d80:	bf28      	it	cs
   d7d82:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d7d84:	b937      	cbnz	r7, d7d94 <_ZN7FatFile5writeEPKvj+0xbc>
   d7d86:	6963      	ldr	r3, [r4, #20]
   d7d88:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d7d8a:	4293      	cmp	r3, r2
   d7d8c:	bf34      	ite	cc
   d7d8e:	2201      	movcc	r2, #1
   d7d90:	2205      	movcs	r2, #5
   d7d92:	e000      	b.n	d7d96 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d7d94:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d7d96:	68a0      	ldr	r0, [r4, #8]
   d7d98:	3024      	adds	r0, #36	; 0x24
   d7d9a:	f000 f8a6 	bl	d7eea <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d7d9e:	2800      	cmp	r0, #0
   d7da0:	d0ab      	beq.n	d7cfa <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d7da2:	4438      	add	r0, r7
   d7da4:	462a      	mov	r2, r5
   d7da6:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d7da8:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d7daa:	f009 fbda 	bl	e1562 <memcpy>
      if (512 == (n + blockOffset)) {
   d7dae:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d7db2:	d130      	bne.n	d7e16 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d7db4:	68a0      	ldr	r0, [r4, #8]
   d7db6:	3024      	adds	r0, #36	; 0x24
   d7db8:	f000 f870 	bl	d7e9c <_ZN8FatCache4syncEv>
   d7dbc:	e017      	b.n	d7dee <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d7dbe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d7dc2:	68a0      	ldr	r0, [r4, #8]
   d7dc4:	d315      	bcc.n	d7df2 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d7dc6:	7902      	ldrb	r2, [r0, #4]
   d7dc8:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d7dca:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d7dcc:	b2d2      	uxtb	r2, r2
   d7dce:	4293      	cmp	r3, r2
   d7dd0:	bf28      	it	cs
   d7dd2:	4613      	movcs	r3, r2
   d7dd4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7dd6:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d7dd8:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d7ddc:	d302      	bcc.n	d7de4 <_ZN7FatFile5writeEPKvj+0x10c>
   d7dde:	441a      	add	r2, r3
   d7de0:	4291      	cmp	r1, r2
   d7de2:	d337      	bcc.n	d7e54 <_ZN7FatFile5writeEPKvj+0x17c>
   d7de4:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d7de6:	464a      	mov	r2, r9
   d7de8:	6838      	ldr	r0, [r7, #0]
   d7dea:	f000 fc6d 	bl	d86c8 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d7dee:	b990      	cbnz	r0, d7e16 <_ZN7FatFile5writeEPKvj+0x13e>
   d7df0:	e783      	b.n	d7cfa <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d7df2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d7df4:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7df6:	bf02      	ittt	eq
   d7df8:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7dfc:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7e00:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d7e02:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d7e04:	464a      	mov	r2, r9
   d7e06:	6818      	ldr	r0, [r3, #0]
   d7e08:	f000 fbec 	bl	d85e4 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d7e0c:	2800      	cmp	r0, #0
   d7e0e:	f43f af74 	beq.w	d7cfa <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d7e12:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d7e16:	6963      	ldr	r3, [r4, #20]
   d7e18:	442b      	add	r3, r5
   d7e1a:	6163      	str	r3, [r4, #20]
    src += n;
   d7e1c:	44a9      	add	r9, r5
    nToWrite -= n;
   d7e1e:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d7e20:	e77a      	b.n	d7d18 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d7e22:	69e2      	ldr	r2, [r4, #28]
   d7e24:	4293      	cmp	r3, r2
   d7e26:	d901      	bls.n	d7e2c <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d7e28:	61e3      	str	r3, [r4, #28]
   d7e2a:	e002      	b.n	d7e32 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d7e2c:	4b0f      	ldr	r3, [pc, #60]	; (d7e6c <_ZN7FatFile5writeEPKvj+0x194>)
   d7e2e:	681b      	ldr	r3, [r3, #0]
   d7e30:	b11b      	cbz	r3, d7e3a <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d7e32:	78a3      	ldrb	r3, [r4, #2]
   d7e34:	f043 0304 	orr.w	r3, r3, #4
   d7e38:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d7e3a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d7e3e:	2b00      	cmp	r3, #0
   d7e40:	db02      	blt.n	d7e48 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d7e42:	4640      	mov	r0, r8
   d7e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d7e48:	4620      	mov	r0, r4
   d7e4a:	f7ff fdd7 	bl	d79fc <_ZN7FatFile4syncEv>
   d7e4e:	2800      	cmp	r0, #0
   d7e50:	d1f7      	bne.n	d7e42 <_ZN7FatFile5writeEPKvj+0x16a>
   d7e52:	e752      	b.n	d7cfa <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7e54:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d7e58:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7e5c:	62c2      	str	r2, [r0, #44]	; 0x2c
   d7e5e:	e7c1      	b.n	d7de4 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7e60:	6921      	ldr	r1, [r4, #16]
   d7e62:	68a0      	ldr	r0, [r4, #8]
   d7e64:	f000 f865 	bl	d7f32 <_ZNK9FatVolume17clusterFirstBlockEm>
   d7e68:	4601      	mov	r1, r0
   d7e6a:	e783      	b.n	d7d74 <_ZN7FatFile5writeEPKvj+0x9c>
   d7e6c:	2003e09c 	.word	0x2003e09c

000d7e70 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d7e70:	f003 bad6 	b.w	db420 <HAL_Pin_Map>

000d7e74 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7e74:	b570      	push	{r4, r5, r6, lr}
   d7e76:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7e78:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7e7a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7e7c:	b149      	cbz	r1, d7e92 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7e7e:	f00a fb49 	bl	e2514 <strlen>
   d7e82:	682b      	ldr	r3, [r5, #0]
   d7e84:	4602      	mov	r2, r0
   d7e86:	4621      	mov	r1, r4
   d7e88:	4628      	mov	r0, r5
   d7e8a:	68db      	ldr	r3, [r3, #12]
    }
   d7e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7e90:	4718      	bx	r3
    }
   d7e92:	bd70      	pop	{r4, r5, r6, pc}

000d7e94 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d7e94:	f003 bac4 	b.w	db420 <HAL_Pin_Map>

000d7e98 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d7e98:	f003 bac2 	b.w	db420 <HAL_Pin_Map>

000d7e9c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7e9c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d7e9e:	7803      	ldrb	r3, [r0, #0]
   d7ea0:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7ea2:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d7ea4:	d51e      	bpl.n	d7ee4 <_ZN8FatCache4syncEv+0x48>
   d7ea6:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d7ea8:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d7eaa:	f100 060c 	add.w	r6, r0, #12
   d7eae:	4632      	mov	r2, r6
   d7eb0:	6818      	ldr	r0, [r3, #0]
   d7eb2:	f000 fb97 	bl	d85e4 <_ZN9SdSpiCard10writeBlockEmPKh>
   d7eb6:	4605      	mov	r5, r0
   d7eb8:	b908      	cbnz	r0, d7ebe <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d7eba:	2500      	movs	r5, #0
   d7ebc:	e013      	b.n	d7ee6 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d7ebe:	7823      	ldrb	r3, [r4, #0]
   d7ec0:	079b      	lsls	r3, r3, #30
   d7ec2:	d404      	bmi.n	d7ece <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d7ec4:	7823      	ldrb	r3, [r4, #0]
   d7ec6:	f023 0301 	bic.w	r3, r3, #1
   d7eca:	7023      	strb	r3, [r4, #0]
   d7ecc:	e00b      	b.n	d7ee6 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d7ece:	6863      	ldr	r3, [r4, #4]
   d7ed0:	68a0      	ldr	r0, [r4, #8]
   d7ed2:	6919      	ldr	r1, [r3, #16]
   d7ed4:	4632      	mov	r2, r6
   d7ed6:	4401      	add	r1, r0
   d7ed8:	6818      	ldr	r0, [r3, #0]
   d7eda:	f000 fb83 	bl	d85e4 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d7ede:	2800      	cmp	r0, #0
   d7ee0:	d1f0      	bne.n	d7ec4 <_ZN8FatCache4syncEv+0x28>
   d7ee2:	e7ea      	b.n	d7eba <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d7ee4:	2501      	movs	r5, #1

fail:
  return false;
}
   d7ee6:	4628      	mov	r0, r5
   d7ee8:	bd70      	pop	{r4, r5, r6, pc}

000d7eea <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7eea:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d7eec:	6883      	ldr	r3, [r0, #8]
   d7eee:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7ef0:	4604      	mov	r4, r0
   d7ef2:	460e      	mov	r6, r1
   d7ef4:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d7ef6:	d014      	beq.n	d7f22 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d7ef8:	f7ff ffd0 	bl	d7e9c <_ZN8FatCache4syncEv>
   d7efc:	b908      	cbnz	r0, d7f02 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d7efe:	2000      	movs	r0, #0
   d7f00:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d7f02:	076b      	lsls	r3, r5, #29
   d7f04:	d503      	bpl.n	d7f0e <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d7f06:	2300      	movs	r3, #0
   d7f08:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7f0a:	60a6      	str	r6, [r4, #8]
   d7f0c:	e009      	b.n	d7f22 <_ZN8FatCache4readEmh+0x38>
   d7f0e:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d7f10:	f104 020c 	add.w	r2, r4, #12
   d7f14:	4631      	mov	r1, r6
   d7f16:	6818      	ldr	r0, [r3, #0]
   d7f18:	f000 fada 	bl	d84d0 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d7f1c:	2800      	cmp	r0, #0
   d7f1e:	d1f2      	bne.n	d7f06 <_ZN8FatCache4readEmh+0x1c>
   d7f20:	e7ed      	b.n	d7efe <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d7f22:	7823      	ldrb	r3, [r4, #0]
   d7f24:	4620      	mov	r0, r4
   d7f26:	f005 0503 	and.w	r5, r5, #3
   d7f2a:	431d      	orrs	r5, r3
   d7f2c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d7f30:	bd70      	pop	{r4, r5, r6, pc}

000d7f32 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d7f32:	7983      	ldrb	r3, [r0, #6]
   d7f34:	6940      	ldr	r0, [r0, #20]
   d7f36:	3902      	subs	r1, #2
   d7f38:	4099      	lsls	r1, r3
}
   d7f3a:	4408      	add	r0, r1
   d7f3c:	4770      	bx	lr

000d7f3e <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7f3e:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d7f40:	b570      	push	{r4, r5, r6, lr}
   d7f42:	4605      	mov	r5, r0
   d7f44:	460c      	mov	r4, r1
   d7f46:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7f48:	d802      	bhi.n	d7f50 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d7f4a:	f04f 30ff 	mov.w	r0, #4294967295
   d7f4e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7f50:	69c3      	ldr	r3, [r0, #28]
   d7f52:	4299      	cmp	r1, r3
   d7f54:	d8f9      	bhi.n	d7f4a <_ZN9FatVolume6fatGetEmPm+0xc>
   d7f56:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d7f58:	2b20      	cmp	r3, #32
   d7f5a:	d110      	bne.n	d7f7e <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d7f5c:	6981      	ldr	r1, [r0, #24]
   d7f5e:	2202      	movs	r2, #2
   d7f60:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7f64:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7f68:	f7ff ffbf 	bl	d7eea <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7f6c:	2800      	cmp	r0, #0
   d7f6e:	d0ec      	beq.n	d7f4a <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d7f70:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7f74:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d7f78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d7f7c:	e00f      	b.n	d7f9e <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d7f7e:	2b10      	cmp	r3, #16
   d7f80:	d1e3      	bne.n	d7f4a <_ZN9FatVolume6fatGetEmPm+0xc>
   d7f82:	6983      	ldr	r3, [r0, #24]
   d7f84:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7f88:	2202      	movs	r2, #2
   d7f8a:	4419      	add	r1, r3
   d7f8c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7f90:	f7ff ffab 	bl	d7eea <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7f94:	2800      	cmp	r0, #0
   d7f96:	d0d8      	beq.n	d7f4a <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d7f98:	b2e4      	uxtb	r4, r4
   d7f9a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d7f9e:	69ea      	ldr	r2, [r5, #28]
   d7fa0:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d7fa2:	bf9a      	itte	ls
   d7fa4:	6033      	strls	r3, [r6, #0]
  return 1;
   d7fa6:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d7fa8:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d7faa:	bd70      	pop	{r4, r5, r6, pc}

000d7fac <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7fac:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d7fae:	b538      	push	{r3, r4, r5, lr}
   d7fb0:	460c      	mov	r4, r1
   d7fb2:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7fb4:	d801      	bhi.n	d7fba <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d7fb6:	2000      	movs	r0, #0
   d7fb8:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7fba:	69c3      	ldr	r3, [r0, #28]
   d7fbc:	4299      	cmp	r1, r3
   d7fbe:	d8fa      	bhi.n	d7fb6 <_ZN9FatVolume6fatPutEmm+0xa>
   d7fc0:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d7fc2:	2b20      	cmp	r3, #32
   d7fc4:	d10e      	bne.n	d7fe4 <_ZN9FatVolume6fatPutEmm+0x38>
   d7fc6:	6981      	ldr	r1, [r0, #24]
   d7fc8:	2203      	movs	r2, #3
   d7fca:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7fce:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7fd2:	f7ff ff8a 	bl	d7eea <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d7fd6:	2800      	cmp	r0, #0
   d7fd8:	d0ed      	beq.n	d7fb6 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d7fda:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7fde:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d7fe2:	e00f      	b.n	d8004 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d7fe4:	2b10      	cmp	r3, #16
   d7fe6:	d1e6      	bne.n	d7fb6 <_ZN9FatVolume6fatPutEmm+0xa>
   d7fe8:	6983      	ldr	r3, [r0, #24]
   d7fea:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7fee:	2203      	movs	r2, #3
   d7ff0:	4419      	add	r1, r3
   d7ff2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7ff6:	f7ff ff78 	bl	d7eea <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d7ffa:	2800      	cmp	r0, #0
   d7ffc:	d0db      	beq.n	d7fb6 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d7ffe:	b2e4      	uxtb	r4, r4
   d8000:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d8004:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d8006:	bd38      	pop	{r3, r4, r5, pc}

000d8008 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d8008:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d800c:	68c4      	ldr	r4, [r0, #12]
   d800e:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d8010:	4605      	mov	r5, r0
   d8012:	460e      	mov	r6, r1
   d8014:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d8016:	d207      	bcs.n	d8028 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d8018:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d801a:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d801c:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d801e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d8020:	429c      	cmp	r4, r3
   d8022:	d903      	bls.n	d802c <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d8024:	b9cf      	cbnz	r7, d805a <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d8026:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d8028:	2701      	movs	r7, #1
   d802a:	e7f7      	b.n	d801c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d802c:	42a6      	cmp	r6, r4
   d802e:	d014      	beq.n	d805a <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d8030:	aa01      	add	r2, sp, #4
   d8032:	4621      	mov	r1, r4
   d8034:	4628      	mov	r0, r5
   d8036:	f7ff ff82 	bl	d7f3e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d803a:	2800      	cmp	r0, #0
   d803c:	db0d      	blt.n	d805a <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d803e:	d0ed      	beq.n	d801c <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d8040:	9b01      	ldr	r3, [sp, #4]
   d8042:	2b00      	cmp	r3, #0
   d8044:	d1ea      	bne.n	d801c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d8046:	b107      	cbz	r7, d804a <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d8048:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d804a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d804e:	4621      	mov	r1, r4
   d8050:	4628      	mov	r0, r5
   d8052:	f7ff ffab 	bl	d7fac <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d8056:	4607      	mov	r7, r0
   d8058:	b908      	cbnz	r0, d805e <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d805a:	2700      	movs	r7, #0
   d805c:	e00b      	b.n	d8076 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d805e:	b916      	cbnz	r6, d8066 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d8060:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d8064:	e007      	b.n	d8076 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d8066:	4622      	mov	r2, r4
   d8068:	4631      	mov	r1, r6
   d806a:	4628      	mov	r0, r5
   d806c:	f7ff ff9e 	bl	d7fac <_ZN9FatVolume6fatPutEmm>
   d8070:	2800      	cmp	r0, #0
   d8072:	d1f5      	bne.n	d8060 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d8074:	e7f1      	b.n	d805a <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d8076:	4638      	mov	r0, r7
   d8078:	b002      	add	sp, #8
   d807a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d807e <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d807e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8080:	4605      	mov	r5, r0
   d8082:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d8084:	aa01      	add	r2, sp, #4
   d8086:	4621      	mov	r1, r4
   d8088:	4628      	mov	r0, r5
   d808a:	f7ff ff58 	bl	d7f3e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d808e:	1e06      	subs	r6, r0, #0
   d8090:	da01      	bge.n	d8096 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d8092:	2000      	movs	r0, #0
   d8094:	e00f      	b.n	d80b6 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d8096:	2200      	movs	r2, #0
   d8098:	4621      	mov	r1, r4
   d809a:	4628      	mov	r0, r5
   d809c:	f7ff ff86 	bl	d7fac <_ZN9FatVolume6fatPutEmm>
   d80a0:	2800      	cmp	r0, #0
   d80a2:	d0f6      	beq.n	d8092 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d80a4:	68eb      	ldr	r3, [r5, #12]
   d80a6:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d80a8:	bf9c      	itt	ls
   d80aa:	f104 34ff 	addls.w	r4, r4, #4294967295
   d80ae:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d80b0:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d80b2:	2e00      	cmp	r6, #0
   d80b4:	d1e6      	bne.n	d8084 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d80b6:	b002      	add	sp, #8
   d80b8:	bd70      	pop	{r4, r5, r6, pc}

000d80ba <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d80ba:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d80bc:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d80be:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d80c0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d80c2:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d80c4:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d80c8:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d80ca:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d80cc:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d80ce:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d80d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d80d4:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d80d8:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d80dc:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d80e0:	b1a1      	cbz	r1, d810c <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d80e2:	2904      	cmp	r1, #4
   d80e4:	d85d      	bhi.n	d81a2 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d80e6:	4611      	mov	r1, r2
   d80e8:	3024      	adds	r0, #36	; 0x24
   d80ea:	f7ff fefe 	bl	d7eea <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d80ee:	2800      	cmp	r0, #0
   d80f0:	d057      	beq.n	d81a2 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d80f2:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d80f6:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d80fa:	065b      	lsls	r3, r3, #25
   d80fc:	d151      	bne.n	d81a2 <_ZN9FatVolume4initEh+0xe8>
   d80fe:	351b      	adds	r5, #27
   d8100:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d8104:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d8108:	2d00      	cmp	r5, #0
   d810a:	d04a      	beq.n	d81a2 <_ZN9FatVolume4initEh+0xe8>
   d810c:	2200      	movs	r2, #0
   d810e:	4629      	mov	r1, r5
   d8110:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d8114:	f7ff fee9 	bl	d7eea <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d8118:	2800      	cmp	r0, #0
   d811a:	d042      	beq.n	d81a2 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d811c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d8120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d8124:	d13d      	bne.n	d81a2 <_ZN9FatVolume4initEh+0xe8>
   d8126:	7c03      	ldrb	r3, [r0, #16]
   d8128:	2b02      	cmp	r3, #2
   d812a:	d13a      	bne.n	d81a2 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d812c:	89c3      	ldrh	r3, [r0, #14]
   d812e:	2b00      	cmp	r3, #0
   d8130:	d037      	beq.n	d81a2 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d8132:	7b41      	ldrb	r1, [r0, #13]
   d8134:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d8136:	1e4b      	subs	r3, r1, #1
   d8138:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d813a:	2300      	movs	r3, #0
   d813c:	71a3      	strb	r3, [r4, #6]
   d813e:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d8140:	2301      	movs	r3, #1
   d8142:	428b      	cmp	r3, r1
   d8144:	d007      	beq.n	d8156 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d8146:	3e01      	subs	r6, #1
   d8148:	d02b      	beq.n	d81a2 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d814a:	79a2      	ldrb	r2, [r4, #6]
   d814c:	005b      	lsls	r3, r3, #1
   d814e:	3201      	adds	r2, #1
   d8150:	b2db      	uxtb	r3, r3
   d8152:	71a2      	strb	r2, [r4, #6]
   d8154:	e7f5      	b.n	d8142 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d8156:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d8158:	b902      	cbnz	r2, d815c <_ZN9FatVolume4initEh+0xa2>
   d815a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d815c:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d815e:	89c6      	ldrh	r6, [r0, #14]
   d8160:	442e      	add	r6, r5
   d8162:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d8164:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d8168:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d816a:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d816e:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d8170:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d8174:	0152      	lsls	r2, r2, #5
   d8176:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d817a:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d817e:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d8180:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d8184:	b903      	cbnz	r3, d8188 <_ZN9FatVolume4initEh+0xce>
   d8186:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d8188:	1aad      	subs	r5, r5, r2
   d818a:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d818c:	79a5      	ldrb	r5, [r4, #6]
   d818e:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d8192:	1c6b      	adds	r3, r5, #1
   d8194:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d8196:	f640 73f4 	movw	r3, #4084	; 0xff4
   d819a:	429d      	cmp	r5, r3
   d819c:	d803      	bhi.n	d81a6 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d819e:	230c      	movs	r3, #12
   d81a0:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d81a2:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d81a4:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d81a6:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d81aa:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d81ac:	bf85      	ittet	hi
   d81ae:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d81b0:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d81b2:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d81b4:	2320      	movhi	r3, #32
   d81b6:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d81b8:	2001      	movs	r0, #1

fail:
  return false;
}
   d81ba:	bd70      	pop	{r4, r5, r6, pc}

000d81bc <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d81bc:	f003 b930 	b.w	db420 <HAL_Pin_Map>

000d81c0 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d81c0:	f003 b92e 	b.w	db420 <HAL_Pin_Map>

000d81c4 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d81c4:	f003 b92c 	b.w	db420 <HAL_Pin_Map>

000d81c8 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d81c8:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d81ca:	4c0e      	ldr	r4, [pc, #56]	; (d8204 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d81cc:	460e      	mov	r6, r1
   d81ce:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d81d0:	f003 f9ce 	bl	db570 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d81d4:	6823      	ldr	r3, [r4, #0]
   d81d6:	1ac0      	subs	r0, r0, r3
   d81d8:	4b0b      	ldr	r3, [pc, #44]	; (d8208 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d81da:	4298      	cmp	r0, r3
   d81dc:	d908      	bls.n	d81f0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d81de:	f003 f9cf 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d81e2:	4b0a      	ldr	r3, [pc, #40]	; (d820c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d81e4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d81e6:	f003 fc79 	bl	dbadc <spark_process>
   d81ea:	f003 f9c1 	bl	db570 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d81ee:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d81f0:	f003 f9c6 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d81f4:	b280      	uxth	r0, r0
   d81f6:	1b80      	subs	r0, r0, r6
}
   d81f8:	42a8      	cmp	r0, r5
   d81fa:	bfd4      	ite	le
   d81fc:	2000      	movle	r0, #0
   d81fe:	2001      	movgt	r0, #1
   d8200:	bd70      	pop	{r4, r5, r6, pc}
   d8202:	bf00      	nop
   d8204:	2003e0a0 	.word	0x2003e0a0
   d8208:	000186a0 	.word	0x000186a0
   d820c:	2003e608 	.word	0x2003e608

000d8210 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d8210:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d8212:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d8214:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d8216:	b94d      	cbnz	r5, d822c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d8218:	6840      	ldr	r0, [r0, #4]
   d821a:	f000 fa7d 	bl	d8718 <_ZN14SdSpiAltDriver8activateEv>
   d821e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d8220:	4629      	mov	r1, r5
   d8222:	7d18      	ldrb	r0, [r3, #20]
   d8224:	f006 f98b 	bl	de53e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d8228:	2301      	movs	r3, #1
   d822a:	7223      	strb	r3, [r4, #8]
   d822c:	bd38      	pop	{r3, r4, r5, pc}

000d822e <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d822e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d8230:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d8232:	4604      	mov	r4, r0
  if (m_spiActive) {
   d8234:	b16b      	cbz	r3, d8252 <_ZN9SdSpiCard7spiStopEv+0x24>
   d8236:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d8238:	2101      	movs	r1, #1
   d823a:	7d18      	ldrb	r0, [r3, #20]
   d823c:	f006 f97f 	bl	de53e <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d8240:	21ff      	movs	r1, #255	; 0xff
   d8242:	6860      	ldr	r0, [r4, #4]
   d8244:	f000 fa9a 	bl	d877c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d8248:	6860      	ldr	r0, [r4, #4]
   d824a:	f000 fa79 	bl	d8740 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d824e:	2300      	movs	r3, #0
   d8250:	7223      	strb	r3, [r4, #8]
   d8252:	bd10      	pop	{r4, pc}

000d8254 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d8254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8256:	4604      	mov	r4, r0
   d8258:	460d      	mov	r5, r1
   d825a:	4616      	mov	r6, r2
   d825c:	f003 f990 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d8260:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d8262:	6860      	ldr	r0, [r4, #4]
   d8264:	f000 fa6f 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d8268:	28ff      	cmp	r0, #255	; 0xff
   d826a:	7260      	strb	r0, [r4, #9]
   d826c:	d109      	bne.n	d8282 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d826e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8272:	4639      	mov	r1, r7
   d8274:	4620      	mov	r0, r4
   d8276:	f7ff ffa7 	bl	d81c8 <_ZN9SdSpiCard10isTimedOutEtt>
   d827a:	2800      	cmp	r0, #0
   d827c:	d0f1      	beq.n	d8262 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d827e:	2355      	movs	r3, #85	; 0x55
   d8280:	e00b      	b.n	d829a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d8282:	28fe      	cmp	r0, #254	; 0xfe
   d8284:	d001      	beq.n	d828a <_ZN9SdSpiCard8readDataEPhj+0x36>
   d8286:	2350      	movs	r3, #80	; 0x50
   d8288:	e007      	b.n	d829a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d828a:	4632      	mov	r2, r6
   d828c:	4629      	mov	r1, r5
   d828e:	6860      	ldr	r0, [r4, #4]
   d8290:	f000 fa5e 	bl	d8750 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d8294:	7260      	strb	r0, [r4, #9]
   d8296:	b130      	cbz	r0, d82a6 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d8298:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d829a:	4620      	mov	r0, r4
   d829c:	7023      	strb	r3, [r4, #0]
   d829e:	f7ff ffc6 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d82a2:	2000      	movs	r0, #0
}
   d82a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d82a6:	6860      	ldr	r0, [r4, #4]
   d82a8:	f000 fa4d 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
   d82ac:	6860      	ldr	r0, [r4, #4]
   d82ae:	f000 fa4a 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
   d82b2:	2001      	movs	r0, #1
   d82b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d82b6 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d82b6:	b570      	push	{r4, r5, r6, lr}
   d82b8:	4604      	mov	r4, r0
   d82ba:	460e      	mov	r6, r1
   d82bc:	f003 f960 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
   d82c0:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d82c2:	4632      	mov	r2, r6
   d82c4:	4629      	mov	r1, r5
   d82c6:	4620      	mov	r0, r4
   d82c8:	f7ff ff7e 	bl	d81c8 <_ZN9SdSpiCard10isTimedOutEtt>
   d82cc:	b930      	cbnz	r0, d82dc <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d82ce:	6860      	ldr	r0, [r4, #4]
   d82d0:	f000 fa39 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d82d4:	28ff      	cmp	r0, #255	; 0xff
   d82d6:	d1f4      	bne.n	d82c2 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d82d8:	2001      	movs	r0, #1
   d82da:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d82dc:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d82de:	bd70      	pop	{r4, r5, r6, pc}

000d82e0 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d82e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d82e2:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d82e4:	9201      	str	r2, [sp, #4]
   d82e6:	4604      	mov	r4, r0
   d82e8:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d82ea:	b90b      	cbnz	r3, d82f0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d82ec:	f7ff ff90 	bl	d8210 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d82f0:	b125      	cbz	r5, d82fc <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d82f2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d82f6:	4620      	mov	r0, r4
   d82f8:	f7ff ffdd 	bl	d82b6 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d82fc:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d8300:	6860      	ldr	r0, [r4, #4]
   d8302:	f000 fa3b 	bl	d877c <_ZN14SdSpiAltDriver4sendEh>
   d8306:	f10d 0607 	add.w	r6, sp, #7
   d830a:	f10d 0703 	add.w	r7, sp, #3
   d830e:	f816 1901 	ldrb.w	r1, [r6], #-1
   d8312:	6860      	ldr	r0, [r4, #4]
   d8314:	f000 fa32 	bl	d877c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d8318:	42be      	cmp	r6, r7
   d831a:	d1f8      	bne.n	d830e <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d831c:	2d00      	cmp	r5, #0
   d831e:	bf0c      	ite	eq
   d8320:	2195      	moveq	r1, #149	; 0x95
   d8322:	2187      	movne	r1, #135	; 0x87
   d8324:	6860      	ldr	r0, [r4, #4]
   d8326:	f000 fa29 	bl	d877c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d832a:	6860      	ldr	r0, [r4, #4]
   d832c:	f000 fa0b 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
   d8330:	250b      	movs	r5, #11
   d8332:	6860      	ldr	r0, [r4, #4]
   d8334:	f000 fa07 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d8338:	0603      	lsls	r3, r0, #24
   d833a:	7260      	strb	r0, [r4, #9]
   d833c:	d503      	bpl.n	d8346 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d833e:	3d01      	subs	r5, #1
   d8340:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d8344:	d1f5      	bne.n	d8332 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d8346:	b003      	add	sp, #12
   d8348:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d834a <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d834a:	b570      	push	{r4, r5, r6, lr}
   d834c:	4604      	mov	r4, r0
   d834e:	460d      	mov	r5, r1
   d8350:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d8352:	2137      	movs	r1, #55	; 0x37
   d8354:	2200      	movs	r2, #0
   d8356:	f7ff ffc3 	bl	d82e0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d835a:	4632      	mov	r2, r6
   d835c:	4629      	mov	r1, r5
   d835e:	4620      	mov	r0, r4
  }
   d8360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d8364:	f7ff bfbc 	b.w	d82e0 <_ZN9SdSpiCard11cardCommandEhm>

000d8368 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d8368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d836c:	2500      	movs	r5, #0
   d836e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d8370:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d8372:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d8374:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d8376:	4604      	mov	r4, r0
   d8378:	4690      	mov	r8, r2
   d837a:	461e      	mov	r6, r3
   d837c:	f003 f900 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d8380:	4641      	mov	r1, r8
   d8382:	4607      	mov	r7, r0
   d8384:	6860      	ldr	r0, [r4, #4]
   d8386:	f000 f9cb 	bl	d8720 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d838a:	6863      	ldr	r3, [r4, #4]
   d838c:	4a4f      	ldr	r2, [pc, #316]	; (d84cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d838e:	721d      	strb	r5, [r3, #8]
   d8390:	f04f 0801 	mov.w	r8, #1
   d8394:	60da      	str	r2, [r3, #12]
   d8396:	745d      	strb	r5, [r3, #17]
   d8398:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d839c:	4620      	mov	r0, r4
   d839e:	f7ff ff37 	bl	d8210 <_ZN9SdSpiCard8spiStartEv>
   d83a2:	6863      	ldr	r3, [r4, #4]
   d83a4:	4641      	mov	r1, r8
   d83a6:	7d18      	ldrb	r0, [r3, #20]
   d83a8:	f006 f8c9 	bl	de53e <digitalWrite>
   d83ac:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d83ae:	21ff      	movs	r1, #255	; 0xff
   d83b0:	6860      	ldr	r0, [r4, #4]
   d83b2:	3d01      	subs	r5, #1
   d83b4:	f000 f9e2 	bl	d877c <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d83b8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d83bc:	d1f7      	bne.n	d83ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d83be:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d83c0:	4629      	mov	r1, r5
   d83c2:	7d18      	ldrb	r0, [r3, #20]
   d83c4:	f006 f8bb 	bl	de53e <digitalWrite>
   d83c8:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d83ca:	2200      	movs	r2, #0
   d83cc:	4611      	mov	r1, r2
   d83ce:	4620      	mov	r0, r4
   d83d0:	f7ff ff86 	bl	d82e0 <_ZN9SdSpiCard11cardCommandEhm>
   d83d4:	2801      	cmp	r0, #1
   d83d6:	4680      	mov	r8, r0
   d83d8:	d012      	beq.n	d8400 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d83da:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d83dc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d83e0:	d101      	bne.n	d83e6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d83e2:	2320      	movs	r3, #32
   d83e4:	e057      	b.n	d8496 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d83e6:	21fd      	movs	r1, #253	; 0xfd
   d83e8:	6860      	ldr	r0, [r4, #4]
   d83ea:	f000 f9c7 	bl	d877c <_ZN14SdSpiAltDriver4sendEh>
   d83ee:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d83f2:	6860      	ldr	r0, [r4, #4]
   d83f4:	f000 f9a7 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d83f8:	f1b8 0801 	subs.w	r8, r8, #1
   d83fc:	d1f9      	bne.n	d83f2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d83fe:	e7e4      	b.n	d83ca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d8400:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d8404:	2108      	movs	r1, #8
   d8406:	4620      	mov	r0, r4
   d8408:	f7ff ff6a 	bl	d82e0 <_ZN9SdSpiCard11cardCommandEhm>
   d840c:	2805      	cmp	r0, #5
   d840e:	d102      	bne.n	d8416 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d8410:	f884 800a 	strb.w	r8, [r4, #10]
   d8414:	e00f      	b.n	d8436 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d8416:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d8418:	6860      	ldr	r0, [r4, #4]
   d841a:	f000 f994 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
   d841e:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d8420:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d8424:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d8426:	d1f7      	bne.n	d8418 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d8428:	28aa      	cmp	r0, #170	; 0xaa
   d842a:	d102      	bne.n	d8432 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d842c:	2302      	movs	r3, #2
   d842e:	72a3      	strb	r3, [r4, #10]
   d8430:	e001      	b.n	d8436 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d8432:	2325      	movs	r3, #37	; 0x25
   d8434:	e02f      	b.n	d8496 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d8436:	7aa3      	ldrb	r3, [r4, #10]
   d8438:	2b02      	cmp	r3, #2
   d843a:	bf0c      	ite	eq
   d843c:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d8440:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d8442:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d8444:	462a      	mov	r2, r5
   d8446:	2129      	movs	r1, #41	; 0x29
   d8448:	4620      	mov	r0, r4
   d844a:	f7ff ff7e 	bl	d834a <_ZN9SdSpiCard8cardAcmdEhm>
   d844e:	4602      	mov	r2, r0
   d8450:	b148      	cbz	r0, d8466 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d8452:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d8456:	4639      	mov	r1, r7
   d8458:	4620      	mov	r0, r4
   d845a:	f7ff feb5 	bl	d81c8 <_ZN9SdSpiCard10isTimedOutEtt>
   d845e:	2800      	cmp	r0, #0
   d8460:	d0f0      	beq.n	d8444 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d8462:	2343      	movs	r3, #67	; 0x43
   d8464:	e017      	b.n	d8496 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d8466:	7aa3      	ldrb	r3, [r4, #10]
   d8468:	2b02      	cmp	r3, #2
   d846a:	d00e      	beq.n	d848a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d846c:	4620      	mov	r0, r4
   d846e:	f7ff fede 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d8472:	6863      	ldr	r3, [r4, #4]
   d8474:	68b0      	ldr	r0, [r6, #8]
   d8476:	7934      	ldrb	r4, [r6, #4]
   d8478:	7b31      	ldrb	r1, [r6, #12]
   d847a:	7b72      	ldrb	r2, [r6, #13]
   d847c:	745a      	strb	r2, [r3, #17]
   d847e:	60d8      	str	r0, [r3, #12]
   d8480:	721c      	strb	r4, [r3, #8]
   d8482:	7419      	strb	r1, [r3, #16]
  return true;
   d8484:	2001      	movs	r0, #1
   d8486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d848a:	213a      	movs	r1, #58	; 0x3a
   d848c:	4620      	mov	r0, r4
   d848e:	f7ff ff27 	bl	d82e0 <_ZN9SdSpiCard11cardCommandEhm>
   d8492:	b138      	cbz	r0, d84a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d8494:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d8496:	4620      	mov	r0, r4
   d8498:	7023      	strb	r3, [r4, #0]
   d849a:	f7ff fec8 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d849e:	2000      	movs	r0, #0
}
   d84a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d84a4:	6860      	ldr	r0, [r4, #4]
   d84a6:	f000 f94e 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d84aa:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d84ae:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d84b0:	bf04      	itt	eq
   d84b2:	2303      	moveq	r3, #3
   d84b4:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d84b6:	6860      	ldr	r0, [r4, #4]
   d84b8:	f000 f945 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
   d84bc:	6860      	ldr	r0, [r4, #4]
   d84be:	f000 f942 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
   d84c2:	6860      	ldr	r0, [r4, #4]
   d84c4:	f000 f93f 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
   d84c8:	e7d0      	b.n	d846c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d84ca:	bf00      	nop
   d84cc:	0003d090 	.word	0x0003d090

000d84d0 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d84d0:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d84d2:	7a83      	ldrb	r3, [r0, #10]
   d84d4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d84d6:	bf18      	it	ne
   d84d8:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d84da:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d84dc:	460a      	mov	r2, r1
   d84de:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d84e0:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d84e2:	f7ff fefd 	bl	d82e0 <_ZN9SdSpiCard11cardCommandEhm>
   d84e6:	b110      	cbz	r0, d84ee <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d84e8:	2330      	movs	r3, #48	; 0x30
   d84ea:	7023      	strb	r3, [r4, #0]
   d84ec:	e00b      	b.n	d8506 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d84ee:	4629      	mov	r1, r5
   d84f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   d84f4:	4620      	mov	r0, r4
   d84f6:	f7ff fead 	bl	d8254 <_ZN9SdSpiCard8readDataEPhj>
   d84fa:	4605      	mov	r5, r0
   d84fc:	b118      	cbz	r0, d8506 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d84fe:	4620      	mov	r0, r4
   d8500:	f7ff fe95 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d8504:	e003      	b.n	d850e <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d8506:	4620      	mov	r0, r4
   d8508:	f7ff fe91 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d850c:	2500      	movs	r5, #0
}
   d850e:	4628      	mov	r0, r5
   d8510:	bd38      	pop	{r3, r4, r5, pc}

000d8512 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d8512:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d8514:	7a83      	ldrb	r3, [r0, #10]
   d8516:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d8518:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d851a:	bf18      	it	ne
   d851c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d851e:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d8520:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d8522:	f7ff fedd 	bl	d82e0 <_ZN9SdSpiCard11cardCommandEhm>
   d8526:	b130      	cbz	r0, d8536 <_ZN9SdSpiCard9readStartEm+0x24>
   d8528:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d852a:	4620      	mov	r0, r4
   d852c:	7023      	strb	r3, [r4, #0]
   d852e:	f7ff fe7e 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d8532:	2000      	movs	r0, #0
   d8534:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d8536:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d8538:	bd10      	pop	{r4, pc}

000d853a <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d853a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d853c:	2200      	movs	r2, #0
   d853e:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d8540:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d8542:	f7ff fecd 	bl	d82e0 <_ZN9SdSpiCard11cardCommandEhm>
   d8546:	b130      	cbz	r0, d8556 <_ZN9SdSpiCard8readStopEv+0x1c>
   d8548:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d854a:	4620      	mov	r0, r4
   d854c:	7023      	strb	r3, [r4, #0]
   d854e:	f7ff fe6e 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d8552:	2000      	movs	r0, #0
   d8554:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d8556:	4620      	mov	r0, r4
   d8558:	f7ff fe69 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d855c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d855e:	bd10      	pop	{r4, pc}

000d8560 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d8560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8562:	4605      	mov	r5, r0
   d8564:	4616      	mov	r6, r2
   d8566:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d8568:	f7ff ffd3 	bl	d8512 <_ZN9SdSpiCard9readStartEm>
   d856c:	b198      	cbz	r0, d8596 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d856e:	2400      	movs	r4, #0
   d8570:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d8572:	429f      	cmp	r7, r3
   d8574:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d8578:	d908      	bls.n	d858c <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d857a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d857e:	4628      	mov	r0, r5
   d8580:	f7ff fe68 	bl	d8254 <_ZN9SdSpiCard8readDataEPhj>
   d8584:	3401      	adds	r4, #1
   d8586:	2800      	cmp	r0, #0
   d8588:	d1f2      	bne.n	d8570 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d858a:	e004      	b.n	d8596 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d858c:	4628      	mov	r0, r5
}
   d858e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d8592:	f7ff bfd2 	b.w	d853a <_ZN9SdSpiCard8readStopEv>
}
   d8596:	2000      	movs	r0, #0
   d8598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d859a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d859a:	b538      	push	{r3, r4, r5, lr}
   d859c:	4604      	mov	r4, r0
   d859e:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d85a0:	6840      	ldr	r0, [r0, #4]
   d85a2:	f000 f8eb 	bl	d877c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d85a6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d85aa:	4629      	mov	r1, r5
   d85ac:	6860      	ldr	r0, [r4, #4]
   d85ae:	f000 f8e9 	bl	d8784 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d85b2:	21ff      	movs	r1, #255	; 0xff
   d85b4:	6860      	ldr	r0, [r4, #4]
   d85b6:	f000 f8e1 	bl	d877c <_ZN14SdSpiAltDriver4sendEh>
   d85ba:	21ff      	movs	r1, #255	; 0xff
   d85bc:	6860      	ldr	r0, [r4, #4]
   d85be:	f000 f8dd 	bl	d877c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d85c2:	6860      	ldr	r0, [r4, #4]
   d85c4:	f000 f8bf 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d85c8:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d85ca:	f000 001f 	and.w	r0, r0, #31
   d85ce:	2805      	cmp	r0, #5
   d85d0:	d006      	beq.n	d85e0 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d85d2:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d85d4:	4620      	mov	r0, r4
   d85d6:	7023      	strb	r3, [r4, #0]
   d85d8:	f7ff fe29 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d85dc:	2000      	movs	r0, #0
   d85de:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d85e0:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d85e2:	bd38      	pop	{r3, r4, r5, pc}

000d85e4 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d85e4:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d85e6:	7a83      	ldrb	r3, [r0, #10]
   d85e8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d85ea:	bf18      	it	ne
   d85ec:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d85ee:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d85f0:	460a      	mov	r2, r1
   d85f2:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d85f4:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d85f6:	f7ff fe73 	bl	d82e0 <_ZN9SdSpiCard11cardCommandEhm>
   d85fa:	4606      	mov	r6, r0
   d85fc:	b108      	cbz	r0, d8602 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d85fe:	2332      	movs	r3, #50	; 0x32
   d8600:	e01d      	b.n	d863e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d8602:	462a      	mov	r2, r5
   d8604:	21fe      	movs	r1, #254	; 0xfe
   d8606:	4620      	mov	r0, r4
   d8608:	f7ff ffc7 	bl	d859a <_ZN9SdSpiCard9writeDataEhPKh>
   d860c:	b1c0      	cbz	r0, d8640 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d860e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d8612:	4620      	mov	r0, r4
   d8614:	f7ff fe4f 	bl	d82b6 <_ZN9SdSpiCard11waitNotBusyEt>
   d8618:	4605      	mov	r5, r0
   d861a:	b908      	cbnz	r0, d8620 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d861c:	235a      	movs	r3, #90	; 0x5a
   d861e:	e00e      	b.n	d863e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d8620:	4632      	mov	r2, r6
   d8622:	210d      	movs	r1, #13
   d8624:	4620      	mov	r0, r4
   d8626:	f7ff fe5b 	bl	d82e0 <_ZN9SdSpiCard11cardCommandEhm>
   d862a:	b938      	cbnz	r0, d863c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d862c:	6860      	ldr	r0, [r4, #4]
   d862e:	f000 f88a 	bl	d8746 <_ZN14SdSpiAltDriver7receiveEv>
   d8632:	b918      	cbnz	r0, d863c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d8634:	4620      	mov	r0, r4
   d8636:	f7ff fdfa 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d863a:	e005      	b.n	d8648 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d863c:	2329      	movs	r3, #41	; 0x29
   d863e:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d8640:	4620      	mov	r0, r4
   d8642:	f7ff fdf4 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d8646:	2500      	movs	r5, #0
}
   d8648:	4628      	mov	r0, r5
   d864a:	bd70      	pop	{r4, r5, r6, pc}

000d864c <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d864c:	b538      	push	{r3, r4, r5, lr}
   d864e:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d8650:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d8654:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d8656:	f7ff fe2e 	bl	d82b6 <_ZN9SdSpiCard11waitNotBusyEt>
   d865a:	b910      	cbnz	r0, d8662 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d865c:	235b      	movs	r3, #91	; 0x5b
   d865e:	7023      	strb	r3, [r4, #0]
   d8660:	e005      	b.n	d866e <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d8662:	462a      	mov	r2, r5
   d8664:	21fc      	movs	r1, #252	; 0xfc
   d8666:	4620      	mov	r0, r4
   d8668:	f7ff ff97 	bl	d859a <_ZN9SdSpiCard9writeDataEhPKh>
   d866c:	b918      	cbnz	r0, d8676 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d866e:	4620      	mov	r0, r4
   d8670:	f7ff fddd 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d8674:	2000      	movs	r0, #0
}
   d8676:	bd38      	pop	{r3, r4, r5, pc}

000d8678 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d8678:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d867a:	7a83      	ldrb	r3, [r0, #10]
   d867c:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d867e:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d8680:	bf18      	it	ne
   d8682:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d8684:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d8686:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d8688:	f7ff fe2a 	bl	d82e0 <_ZN9SdSpiCard11cardCommandEhm>
   d868c:	b130      	cbz	r0, d869c <_ZN9SdSpiCard10writeStartEm+0x24>
   d868e:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d8690:	4620      	mov	r0, r4
   d8692:	7023      	strb	r3, [r4, #0]
   d8694:	f7ff fdcb 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d8698:	2000      	movs	r0, #0
   d869a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d869c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d869e:	bd10      	pop	{r4, pc}

000d86a0 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d86a0:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d86a2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d86a6:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d86a8:	f7ff fe05 	bl	d82b6 <_ZN9SdSpiCard11waitNotBusyEt>
   d86ac:	4605      	mov	r5, r0
   d86ae:	b120      	cbz	r0, d86ba <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d86b0:	21fd      	movs	r1, #253	; 0xfd
   d86b2:	6860      	ldr	r0, [r4, #4]
   d86b4:	f000 f862 	bl	d877c <_ZN14SdSpiAltDriver4sendEh>
   d86b8:	e001      	b.n	d86be <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d86ba:	2356      	movs	r3, #86	; 0x56
   d86bc:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d86be:	4620      	mov	r0, r4
   d86c0:	f7ff fdb5 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d86c4:	4628      	mov	r0, r5
   d86c6:	bd38      	pop	{r3, r4, r5, pc}

000d86c8 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d86c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d86ca:	4605      	mov	r5, r0
   d86cc:	4616      	mov	r6, r2
   d86ce:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d86d0:	f7ff ffd2 	bl	d8678 <_ZN9SdSpiCard10writeStartEm>
   d86d4:	b170      	cbz	r0, d86f4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d86d6:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d86d8:	42bc      	cmp	r4, r7
   d86da:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d86de:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d86e0:	d004      	beq.n	d86ec <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d86e2:	f7ff ffb3 	bl	d864c <_ZN9SdSpiCard9writeDataEPKh>
   d86e6:	b128      	cbz	r0, d86f4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d86e8:	3401      	adds	r4, #1
   d86ea:	e7f5      	b.n	d86d8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d86ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d86f0:	f7ff bfd6 	b.w	d86a0 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d86f4:	4628      	mov	r0, r5
   d86f6:	f7ff fd9a 	bl	d822e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d86fa:	2000      	movs	r0, #0
   d86fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d86fe <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d86fe:	f002 be8f 	b.w	db420 <HAL_Pin_Map>

000d8702 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d8702:	f002 be8d 	b.w	db420 <HAL_Pin_Map>

000d8706 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d8706:	f002 be8b 	b.w	db420 <HAL_Pin_Map>
	...

000d870c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d870c:	4b01      	ldr	r3, [pc, #4]	; (d8714 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d870e:	2201      	movs	r2, #1
   d8710:	701a      	strb	r2, [r3, #0]
   d8712:	4770      	bx	lr
   d8714:	2003e0a4 	.word	0x2003e0a4

000d8718 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d8718:	1d01      	adds	r1, r0, #4
   d871a:	6800      	ldr	r0, [r0, #0]
   d871c:	f003 bb16 	b.w	dbd4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d8720 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d8720:	b510      	push	{r4, lr}
   d8722:	4604      	mov	r4, r0
  m_csPin = csPin;
   d8724:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d8726:	6800      	ldr	r0, [r0, #0]
   d8728:	f003 fae6 	bl	dbcf8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d872c:	7d20      	ldrb	r0, [r4, #20]
   d872e:	2101      	movs	r1, #1
   d8730:	f005 fef4 	bl	de51c <pinMode>
  digitalWrite(m_csPin, HIGH);
   d8734:	7d20      	ldrb	r0, [r4, #20]
   d8736:	2101      	movs	r1, #1
}
   d8738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d873c:	f005 beff 	b.w	de53e <digitalWrite>

000d8740 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d8740:	6800      	ldr	r0, [r0, #0]
   d8742:	f003 baea 	b.w	dbd1a <_ZN8SPIClass14endTransactionEv>

000d8746 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d8746:	21ff      	movs	r1, #255	; 0xff
   d8748:	6800      	ldr	r0, [r0, #0]
   d874a:	f003 bb6f 	b.w	dbe2c <_ZN8SPIClass8transferEh>
	...

000d8750 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d8750:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d8752:	4b08      	ldr	r3, [pc, #32]	; (d8774 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d8754:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d8756:	2500      	movs	r5, #0
   d8758:	4c07      	ldr	r4, [pc, #28]	; (d8778 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d875a:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d875c:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d875e:	4613      	mov	r3, r2
   d8760:	460a      	mov	r2, r1
   d8762:	4629      	mov	r1, r5
   d8764:	f003 fb68 	bl	dbe38 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d8768:	7823      	ldrb	r3, [r4, #0]
   d876a:	2b00      	cmp	r3, #0
   d876c:	d0fc      	beq.n	d8768 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d876e:	2000      	movs	r0, #0
   d8770:	b003      	add	sp, #12
   d8772:	bd30      	pop	{r4, r5, pc}
   d8774:	000d870d 	.word	0x000d870d
   d8778:	2003e0a4 	.word	0x2003e0a4

000d877c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d877c:	6800      	ldr	r0, [r0, #0]
   d877e:	f003 bb55 	b.w	dbe2c <_ZN8SPIClass8transferEh>
	...

000d8784 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d8784:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d8786:	4b07      	ldr	r3, [pc, #28]	; (d87a4 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d8788:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d878a:	2500      	movs	r5, #0
   d878c:	4c06      	ldr	r4, [pc, #24]	; (d87a8 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d878e:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d8790:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d8792:	4613      	mov	r3, r2
   d8794:	462a      	mov	r2, r5
   d8796:	f003 fb4f 	bl	dbe38 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d879a:	7823      	ldrb	r3, [r4, #0]
   d879c:	2b00      	cmp	r3, #0
   d879e:	d0fc      	beq.n	d879a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d87a0:	b003      	add	sp, #12
   d87a2:	bd30      	pop	{r4, r5, pc}
   d87a4:	000d870d 	.word	0x000d870d
   d87a8:	2003e0a4 	.word	0x2003e0a4

000d87ac <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d87ac:	f002 be38 	b.w	db420 <HAL_Pin_Map>

000d87b0 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d87b0:	b510      	push	{r4, lr}
   d87b2:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d87b4:	f005 ff0e 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d87b8:	6803      	ldr	r3, [r0, #0]
   d87ba:	4621      	mov	r1, r4
   d87bc:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d87be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d87c2:	4718      	bx	r3

000d87c4 <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d87c4:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d87c6:	f005 ff05 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d87ca:	6803      	ldr	r3, [r0, #0]
   d87cc:	695b      	ldr	r3, [r3, #20]
   d87ce:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d87d0:	b2c0      	uxtb	r0, r0
   d87d2:	bd08      	pop	{r3, pc}

000d87d4 <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d87d4:	b538      	push	{r3, r4, r5, lr}
   d87d6:	4604      	mov	r4, r0
   d87d8:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d87da:	f005 fefb 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d87de:	7821      	ldrb	r1, [r4, #0]
   d87e0:	f041 0120 	orr.w	r1, r1, #32
   d87e4:	f005 fa17 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d87e8:	4628      	mov	r0, r5
   d87ea:	f7ff ffe1 	bl	d87b0 <_ZL8wiresendh>
	Wire.endTransmission();
   d87ee:	f005 fef1 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d87f2:	f005 fa17 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d87f6:	f005 feed 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d87fa:	7821      	ldrb	r1, [r4, #0]
   d87fc:	2201      	movs	r2, #1
   d87fe:	f041 0120 	orr.w	r1, r1, #32
   d8802:	f005 fa01 	bl	ddc08 <_ZN7TwoWire11requestFromEhj>
	return wirerecv();
}
   d8806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d880a:	f7ff bfdb 	b.w	d87c4 <_ZL8wirerecvv>

000d880e <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d880e:	b570      	push	{r4, r5, r6, lr}
   d8810:	4606      	mov	r6, r0
   d8812:	4614      	mov	r4, r2
   d8814:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d8816:	f005 fedd 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d881a:	7831      	ldrb	r1, [r6, #0]
   d881c:	f041 0120 	orr.w	r1, r1, #32
   d8820:	f005 f9f9 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d8824:	4628      	mov	r0, r5
   d8826:	f7ff ffc3 	bl	d87b0 <_ZL8wiresendh>
	wiresend(regValue);
   d882a:	4620      	mov	r0, r4
   d882c:	f7ff ffc0 	bl	d87b0 <_ZL8wiresendh>
	Wire.endTransmission();
   d8830:	f005 fed0 	bl	de5d4 <_Z19__fetch_global_Wirev>
}
   d8834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d8838:	f005 b9f4 	b.w	ddc24 <_ZN7TwoWire15endTransmissionEv>

000d883c <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8840:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d8844:	2907      	cmp	r1, #7
   d8846:	bf98      	it	ls
   d8848:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d884a:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d884e:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d8850:	4631      	mov	r1, r6
   d8852:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d8854:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d8856:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d8858:	f7ff ffbc 	bl	d87d4 <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d885c:	f1b8 0f00 	cmp.w	r8, #0
   d8860:	d001      	beq.n	d8866 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d8862:	4304      	orrs	r4, r0
   d8864:	e001      	b.n	d886a <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d8866:	ea20 0404 	bic.w	r4, r0, r4
   d886a:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d886c:	4631      	mov	r1, r6
   d886e:	4628      	mov	r0, r5
}
   d8870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d8874:	f7ff bfcb 	b.w	d880e <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d8878 <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d8878:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d887a:	2907      	cmp	r1, #7
   d887c:	bf28      	it	cs
   d887e:	2107      	movcs	r1, #7
   d8880:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d8882:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d8884:	f005 fea6 	bl	de5d4 <_Z19__fetch_global_Wirev>
   d8888:	f005 f98a 	bl	ddba0 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d888c:	4620      	mov	r0, r4
   d888e:	22ff      	movs	r2, #255	; 0xff
   d8890:	2100      	movs	r1, #0
   d8892:	f7ff ffbc 	bl	d880e <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d8896:	4620      	mov	r0, r4
   d8898:	22ff      	movs	r2, #255	; 0xff
   d889a:	2101      	movs	r1, #1
}
   d889c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d88a0:	f7ff bfb5 	b.w	d880e <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d88a4 <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d88a4:	2100      	movs	r1, #0
   d88a6:	f7ff bfe7 	b.w	d8878 <_ZN17Adafruit_MCP230175beginEh>

000d88aa <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d88aa:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d88ac:	2301      	movs	r3, #1
   d88ae:	fab2 f282 	clz	r2, r2
   d88b2:	9300      	str	r3, [sp, #0]
   d88b4:	0952      	lsrs	r2, r2, #5
   d88b6:	2300      	movs	r3, #0
   d88b8:	f7ff ffc0 	bl	d883c <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d88bc:	b003      	add	sp, #12
   d88be:	f85d fb04 	ldr.w	pc, [sp], #4

000d88c2 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d88c2:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d88c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d88c6:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d88ca:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d88cc:	bf34      	ite	cc
   d88ce:	2114      	movcc	r1, #20
   d88d0:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d88d2:	4605      	mov	r5, r0
   d88d4:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d88d6:	f7ff ff7d 	bl	d87d4 <_ZN17Adafruit_MCP2301712readRegisterEh>
   d88da:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d88dc:	40b3      	lsls	r3, r6
   d88de:	b10f      	cbz	r7, d88e4 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d88e0:	4303      	orrs	r3, r0
   d88e2:	e001      	b.n	d88e8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d88e4:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d88e8:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d88ea:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d88ec:	4628      	mov	r0, r5
   d88ee:	bf34      	ite	cc
   d88f0:	2112      	movcc	r1, #18
   d88f2:	2113      	movcs	r1, #19
}
   d88f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d88f8:	f7ff bf89 	b.w	d880e <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d88fc <_ZN17Adafruit_MCP230176pullUpEhh>:
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d88fc:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d88fe:	230d      	movs	r3, #13
   d8900:	9300      	str	r3, [sp, #0]
   d8902:	230c      	movs	r3, #12
   d8904:	f7ff ff9a 	bl	d883c <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d8908:	b003      	add	sp, #12
   d890a:	f85d fb04 	ldr.w	pc, [sp], #4

000d890e <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d890e:	f002 bd87 	b.w	db420 <HAL_Pin_Map>

000d8912 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d8912:	7501      	strb	r1, [r0, #20]
   d8914:	4770      	bx	lr
	...

000d8918 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d8918:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d891a:	6984      	ldr	r4, [r0, #24]
   d891c:	4b0a      	ldr	r3, [pc, #40]	; (d8948 <_ZN9TCPClientD1Ev+0x30>)
   d891e:	6003      	str	r3, [r0, #0]
   d8920:	4605      	mov	r5, r0
   d8922:	b17c      	cbz	r4, d8944 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8924:	6863      	ldr	r3, [r4, #4]
   d8926:	3b01      	subs	r3, #1
   d8928:	6063      	str	r3, [r4, #4]
   d892a:	b95b      	cbnz	r3, d8944 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d892c:	6823      	ldr	r3, [r4, #0]
   d892e:	4620      	mov	r0, r4
   d8930:	689b      	ldr	r3, [r3, #8]
   d8932:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8934:	68a3      	ldr	r3, [r4, #8]
   d8936:	3b01      	subs	r3, #1
   d8938:	60a3      	str	r3, [r4, #8]
   d893a:	b91b      	cbnz	r3, d8944 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d893c:	6823      	ldr	r3, [r4, #0]
   d893e:	4620      	mov	r0, r4
   d8940:	68db      	ldr	r3, [r3, #12]
   d8942:	4798      	blx	r3
   d8944:	4628      	mov	r0, r5
   d8946:	bd38      	pop	{r3, r4, r5, pc}
   d8948:	000e599c 	.word	0x000e599c

000d894c <_ZN9TCPClientD0Ev>:
   d894c:	b510      	push	{r4, lr}
   d894e:	4604      	mov	r4, r0
   d8950:	f7ff ffe2 	bl	d8918 <_ZN9TCPClientD1Ev>
   d8954:	4620      	mov	r0, r4
   d8956:	211c      	movs	r1, #28
   d8958:	f005 fe70 	bl	de63c <_ZdlPvj>
   d895c:	4620      	mov	r0, r4
   d895e:	bd10      	pop	{r4, pc}

000d8960 <_ZN6UbiTCPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
   d8960:	b530      	push	{r4, r5, lr}
               const char* token) {
   d8962:	4d06      	ldr	r5, [pc, #24]	; (d897c <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d8964:	6005      	str	r5, [r0, #0]
   d8966:	2500      	movs	r5, #0
   d8968:	7505      	strb	r5, [r0, #20]
  _host = host;
  _user_agent = user_agent;
   d896a:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
   d896c:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d8970:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent,
               const char* token) {
   d8972:	6185      	str	r5, [r0, #24]
  _host = host;
   d8974:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d8976:	60c3      	str	r3, [r0, #12]
  _port = port;
   d8978:	6102      	str	r2, [r0, #16]
}
   d897a:	bd30      	pop	{r4, r5, pc}
   d897c:	000e4f28 	.word	0x000e4f28

000d8980 <_ZN6UbiTCP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiTCP::reconnect(const char* host, const int port) {
   d8980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8984:	460d      	mov	r5, r1
   d8986:	4617      	mov	r7, r2
   d8988:	4606      	mov	r6, r0
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
   d898a:	f004 ff5b 	bl	dd844 <_Z16_fetch_usbserialv>
   d898e:	491c      	ldr	r1, [pc, #112]	; (d8a00 <_ZN6UbiTCP9reconnectEPKci+0x80>)
   d8990:	f004 f811 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d8994:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d8996:	481b      	ldr	r0, [pc, #108]	; (d8a04 <_ZN6UbiTCP9reconnectEPKci+0x84>)
   d8998:	f005 fc84 	bl	de2a4 <_ZN9TCPClient6statusEv>
   d899c:	bb68      	cbnz	r0, d89fa <_ZN6UbiTCP9reconnectEPKci+0x7a>
   d899e:	2c05      	cmp	r4, #5
   d89a0:	d101      	bne.n	d89a6 <_ZN6UbiTCP9reconnectEPKci+0x26>
   d89a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (_debug) {
   d89a6:	7d33      	ldrb	r3, [r6, #20]
   d89a8:	b1c3      	cbz	r3, d89dc <_ZN6UbiTCP9reconnectEPKci+0x5c>
      Serial.print("Trying to connect to ");
   d89aa:	f004 ff4b 	bl	dd844 <_Z16_fetch_usbserialv>
   d89ae:	4916      	ldr	r1, [pc, #88]	; (d8a08 <_ZN6UbiTCP9reconnectEPKci+0x88>)
   d89b0:	f003 ffea 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(host);
   d89b4:	f004 ff46 	bl	dd844 <_Z16_fetch_usbserialv>
   d89b8:	4629      	mov	r1, r5
   d89ba:	f003 ffe5 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d89be:	f004 ff41 	bl	dd844 <_Z16_fetch_usbserialv>
   d89c2:	4912      	ldr	r1, [pc, #72]	; (d8a0c <_ZN6UbiTCP9reconnectEPKci+0x8c>)
   d89c4:	f003 ffe0 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d89c8:	f004 ff3c 	bl	dd844 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d89cc:	220a      	movs	r2, #10
   d89ce:	4680      	mov	r8, r0
   d89d0:	4621      	mov	r1, r4
   d89d2:	f003 fffc 	bl	dc9ce <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d89d6:	4640      	mov	r0, r8
   d89d8:	f003 ffe1 	bl	dc99e <_ZN5Print7printlnEv>
    }
    _client_tcp_ubi.stop();
   d89dc:	4809      	ldr	r0, [pc, #36]	; (d8a04 <_ZN6UbiTCP9reconnectEPKci+0x84>)
   d89de:	f005 fbed 	bl	de1bc <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d89e2:	2300      	movs	r3, #0
   d89e4:	b2ba      	uxth	r2, r7
   d89e6:	4629      	mov	r1, r5
   d89e8:	4806      	ldr	r0, [pc, #24]	; (d8a04 <_ZN6UbiTCP9reconnectEPKci+0x84>)
   d89ea:	f005 faeb 	bl	ddfc4 <_ZN9TCPClient7connectEPKctm>
    attempts += 1;
    delay(1000);
   d89ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d89f2:	f004 fabb 	bl	dcf6c <delay>
   d89f6:	3401      	adds	r4, #1
 */

void UbiTCP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  Serial.println("Attempting to reconnect");
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d89f8:	e7cd      	b.n	d8996 <_ZN6UbiTCP9reconnectEPKci+0x16>
   d89fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d89fe:	bf00      	nop
   d8a00:	000e4e1c 	.word	0x000e4e1c
   d8a04:	2003e0a8 	.word	0x2003e0a8
   d8a08:	000e4e34 	.word	0x000e4e34
   d8a0c:	000e4e4a 	.word	0x000e4e4a

000d8a10 <_ZN6UbiTCP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiTCP::waitServerAnswer() {
   d8a10:	b570      	push	{r4, r5, r6, lr}
   d8a12:	4605      	mov	r5, r0
  int timeout = 0;
   d8a14:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d8a16:	480d      	ldr	r0, [pc, #52]	; (d8a4c <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
   d8a18:	f005 fbe8 	bl	de1ec <_ZN9TCPClient9availableEv>
   d8a1c:	4606      	mov	r6, r0
   d8a1e:	b910      	cbnz	r0, d8a26 <_ZN6UbiTCP16waitServerAnswerEv+0x16>
   d8a20:	69ab      	ldr	r3, [r5, #24]
   d8a22:	429c      	cmp	r4, r3
   d8a24:	db01      	blt.n	d8a2a <_ZN6UbiTCP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
   d8a26:	2001      	movs	r0, #1
   d8a28:	bd70      	pop	{r4, r5, r6, pc}

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
   d8a2a:	2001      	movs	r0, #1
   d8a2c:	f004 fa9e 	bl	dcf6c <delay>
    if (timeout > _timeout - 1) {
   d8a30:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiTCP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
    timeout++;
   d8a32:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
   d8a34:	429c      	cmp	r4, r3
   d8a36:	dbee      	blt.n	d8a16 <_ZN6UbiTCP16waitServerAnswerEv+0x6>
      if (_debug) {
   d8a38:	7d28      	ldrb	r0, [r5, #20]
   d8a3a:	b130      	cbz	r0, d8a4a <_ZN6UbiTCP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
   d8a3c:	f004 ff02 	bl	dd844 <_Z16_fetch_usbserialv>
   d8a40:	4903      	ldr	r1, [pc, #12]	; (d8a50 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d8a42:	f003 ffb8 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d8a46:	4630      	mov	r0, r6
   d8a48:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
   d8a4a:	bd70      	pop	{r4, r5, r6, pc}
   d8a4c:	2003e0a8 	.word	0x2003e0a8
   d8a50:	000e4e5e 	.word	0x000e4e5e

000d8a54 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d8a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int j = 0;

  if (_debug) {
   d8a58:	7d03      	ldrb	r3, [r0, #20]
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d8a5a:	4606      	mov	r6, r0
   d8a5c:	4688      	mov	r8, r1
   d8a5e:	4615      	mov	r5, r2
  int j = 0;

  if (_debug) {
   d8a60:	b14b      	cbz	r3, d8a76 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d8a62:	f004 feef 	bl	dd844 <_Z16_fetch_usbserialv>
   d8a66:	4926      	ldr	r1, [pc, #152]	; (d8b00 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xac>)
   d8a68:	f003 ffa5 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d8a6c:	f004 feea 	bl	dd844 <_Z16_fetch_usbserialv>
   d8a70:	4924      	ldr	r1, [pc, #144]	; (d8b04 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d8a72:	f003 ffa0 	bl	dc9b6 <_ZN5Print7printlnEPKc>
 * Parse the TCP host answer and saves it to the input char pointer.
 * @payload [Mandatory] char payload pointer to store the host answer.
 * @return true if there is an 'Ok' in the answer, false if not.
 */

float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d8a76:	2400      	movs	r4, #0
    if (_debug) {
      Serial.write(c);
    }
    response[j] = c;
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
   d8a78:	f240 29bb 	movw	r9, #699	; 0x2bb
  if (_debug) {
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
   d8a7c:	4822      	ldr	r0, [pc, #136]	; (d8b08 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d8a7e:	f005 fbb5 	bl	de1ec <_ZN9TCPClient9availableEv>
   d8a82:	b178      	cbz	r0, d8aa4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x50>
    char c = _client_tcp_ubi.read();
   d8a84:	4820      	ldr	r0, [pc, #128]	; (d8b08 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d8a86:	f005 fa5a 	bl	ddf3e <_ZN9TCPClient4readEv>
    if (_debug) {
   d8a8a:	7d33      	ldrb	r3, [r6, #20]
    Serial.println("----------");
    Serial.println("Server's response:");
  }

  while (_client_tcp_ubi.available()) {
    char c = _client_tcp_ubi.read();
   d8a8c:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d8a8e:	b12b      	cbz	r3, d8a9c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x48>
      Serial.write(c);
   d8a90:	f004 fed8 	bl	dd844 <_Z16_fetch_usbserialv>
   d8a94:	6803      	ldr	r3, [r0, #0]
   d8a96:	4639      	mov	r1, r7
   d8a98:	689b      	ldr	r3, [r3, #8]
   d8a9a:	4798      	blx	r3
    }
    response[j] = c;
   d8a9c:	552f      	strb	r7, [r5, r4]
    j++;
   d8a9e:	3401      	adds	r4, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d8aa0:	454c      	cmp	r4, r9
   d8aa2:	d1eb      	bne.n	d8a7c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x28>
      break;
    }
  }

  if (_debug) {
   d8aa4:	7d33      	ldrb	r3, [r6, #20]
   d8aa6:	b123      	cbz	r3, d8ab2 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x5e>
    Serial.println("\n----------");
   d8aa8:	f004 fecc 	bl	dd844 <_Z16_fetch_usbserialv>
   d8aac:	4917      	ldr	r1, [pc, #92]	; (d8b0c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d8aae:	f003 ff82 	bl	dc9b6 <_ZN5Print7printlnEPKc>
  }

  response[j] = '\0';
   d8ab2:	2300      	movs	r3, #0
   d8ab4:	552b      	strb	r3, [r5, r4]
  float result = ERROR_VALUE;

  // POST
  if (request_type == "POST") {
   d8ab6:	4b16      	ldr	r3, [pc, #88]	; (d8b10 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d8ab8:	4598      	cmp	r8, r3
   d8aba:	d10d      	bne.n	d8ad8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x84>
    char* pch = strstr(response, "OK");
   d8abc:	4915      	ldr	r1, [pc, #84]	; (d8b14 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d8abe:	4628      	mov	r0, r5
   d8ac0:	f009 fd58 	bl	e2574 <strstr>
    if (pch != NULL) {
      result = 1;
   d8ac4:	eddf 7a14 	vldr	s15, [pc, #80]	; d8b18 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d8ac8:	2800      	cmp	r0, #0
   d8aca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d8ace:	bf08      	it	eq
   d8ad0:	eeb0 0a67 	vmoveq.f32	s0, s15
   d8ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    return result;
  }

  // LV
  char* pch = strchr(response, '|');
   d8ad8:	217c      	movs	r1, #124	; 0x7c
   d8ada:	4628      	mov	r0, r5
   d8adc:	f008 ffca 	bl	e1a74 <strchr>
  if (pch != NULL) {
   d8ae0:	b150      	cbz	r0, d8af8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xa4>
    result = atof(pch + 1);
   d8ae2:	3001      	adds	r0, #1
   d8ae4:	f008 fc18 	bl	e1318 <atof>
   d8ae8:	ec51 0b10 	vmov	r0, r1, d0
   d8aec:	f008 f9d8 	bl	e0ea0 <__aeabi_d2f>
   d8af0:	ee00 0a10 	vmov	s0, r0
   d8af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (_debug) {
    Serial.println("\n----------");
  }

  response[j] = '\0';
  float result = ERROR_VALUE;
   d8af8:	ed9f 0a07 	vldr	s0, [pc, #28]	; d8b18 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
  if (pch != NULL) {
    result = atof(pch + 1);
  }

  return result;
}
   d8afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8b00:	000e4ea5 	.word	0x000e4ea5
   d8b04:	000e4e91 	.word	0x000e4e91
   d8b08:	2003e0a8 	.word	0x2003e0a8
   d8b0c:	000e4ea4 	.word	0x000e4ea4
   d8b10:	000e4eb0 	.word	0x000e4eb0
   d8b14:	000e4eb5 	.word	0x000e4eb5
   d8b18:	cda2425f 	.word	0xcda2425f

000d8b1c <_ZN6UbiTCP3getEPKcS1_>:

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
   d8b1c:	b570      	push	{r4, r5, r6, lr}
   d8b1e:	ed2d 8b02 	vpush	{d8}
   d8b22:	4604      	mov	r4, r0
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d8b24:	2300      	movs	r3, #0

  _client_tcp_ubi.stop();
  return false;
}

float UbiTCP::get(const char* device_label, const char* variable_label) {
   d8b26:	460e      	mov	r6, r1
   d8b28:	4615      	mov	r5, r2
  /* Connecting the client */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d8b2a:	6841      	ldr	r1, [r0, #4]
   d8b2c:	4849      	ldr	r0, [pc, #292]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8b2e:	f242 3234 	movw	r2, #9012	; 0x2334
   d8b32:	f005 fa47 	bl	ddfc4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d8b36:	4620      	mov	r0, r4
   d8b38:	f242 3234 	movw	r2, #9012	; 0x2334
   d8b3c:	6861      	ldr	r1, [r4, #4]
   d8b3e:	f7ff ff1f 	bl	d8980 <_ZN6UbiTCP9reconnectEPKci>

  if (_client_tcp_ubi.connected()) {
   d8b42:	4844      	ldr	r0, [pc, #272]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8b44:	f005 f967 	bl	dde16 <_ZN9TCPClient9connectedEv>
   d8b48:	2800      	cmp	r0, #0
   d8b4a:	d077      	beq.n	d8c3c <_ZN6UbiTCP3getEPKcS1_+0x120>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_tcp_ubi.print(_user_agent);
   d8b4c:	68a1      	ldr	r1, [r4, #8]
   d8b4e:	4841      	ldr	r0, [pc, #260]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8b50:	f003 ff1a 	bl	dc988 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|LV|");
   d8b54:	4940      	ldr	r1, [pc, #256]	; (d8c58 <_ZN6UbiTCP3getEPKcS1_+0x13c>)
   d8b56:	483f      	ldr	r0, [pc, #252]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8b58:	f003 ff16 	bl	dc988 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(_token);
   d8b5c:	68e1      	ldr	r1, [r4, #12]
   d8b5e:	483d      	ldr	r0, [pc, #244]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8b60:	f003 ff12 	bl	dc988 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|");
   d8b64:	493d      	ldr	r1, [pc, #244]	; (d8c5c <_ZN6UbiTCP3getEPKcS1_+0x140>)
   d8b66:	483b      	ldr	r0, [pc, #236]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8b68:	f003 ff0e 	bl	dc988 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(device_label);
   d8b6c:	4631      	mov	r1, r6
   d8b6e:	4839      	ldr	r0, [pc, #228]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8b70:	f003 ff0a 	bl	dc988 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(":");
   d8b74:	493a      	ldr	r1, [pc, #232]	; (d8c60 <_ZN6UbiTCP3getEPKcS1_+0x144>)
   d8b76:	4837      	ldr	r0, [pc, #220]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8b78:	f003 ff06 	bl	dc988 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print(variable_label);
   d8b7c:	4629      	mov	r1, r5
   d8b7e:	4835      	ldr	r0, [pc, #212]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8b80:	f003 ff02 	bl	dc988 <_ZN5Print5printEPKc>
    _client_tcp_ubi.print("|end");
   d8b84:	4937      	ldr	r1, [pc, #220]	; (d8c64 <_ZN6UbiTCP3getEPKcS1_+0x148>)
   d8b86:	4833      	ldr	r0, [pc, #204]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8b88:	f003 fefe 	bl	dc988 <_ZN5Print5printEPKc>

    if (_debug) {
   d8b8c:	7d23      	ldrb	r3, [r4, #20]
   d8b8e:	b3b3      	cbz	r3, d8bfe <_ZN6UbiTCP3getEPKcS1_+0xe2>
      Serial.println("----");
   d8b90:	f004 fe58 	bl	dd844 <_Z16_fetch_usbserialv>
   d8b94:	4934      	ldr	r1, [pc, #208]	; (d8c68 <_ZN6UbiTCP3getEPKcS1_+0x14c>)
   d8b96:	f003 ff0e 	bl	dc9b6 <_ZN5Print7printlnEPKc>
      Serial.println("Payload for request:");
   d8b9a:	f004 fe53 	bl	dd844 <_Z16_fetch_usbserialv>
   d8b9e:	4933      	ldr	r1, [pc, #204]	; (d8c6c <_ZN6UbiTCP3getEPKcS1_+0x150>)
   d8ba0:	f003 ff09 	bl	dc9b6 <_ZN5Print7printlnEPKc>
      Serial.print(_user_agent);
   d8ba4:	f004 fe4e 	bl	dd844 <_Z16_fetch_usbserialv>
   d8ba8:	68a1      	ldr	r1, [r4, #8]
   d8baa:	f003 feed 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("|LV|");
   d8bae:	f004 fe49 	bl	dd844 <_Z16_fetch_usbserialv>
   d8bb2:	4929      	ldr	r1, [pc, #164]	; (d8c58 <_ZN6UbiTCP3getEPKcS1_+0x13c>)
   d8bb4:	f003 fee8 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d8bb8:	f004 fe44 	bl	dd844 <_Z16_fetch_usbserialv>
   d8bbc:	68e1      	ldr	r1, [r4, #12]
   d8bbe:	f003 fee3 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("|");
   d8bc2:	f004 fe3f 	bl	dd844 <_Z16_fetch_usbserialv>
   d8bc6:	4925      	ldr	r1, [pc, #148]	; (d8c5c <_ZN6UbiTCP3getEPKcS1_+0x140>)
   d8bc8:	f003 fede 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d8bcc:	f004 fe3a 	bl	dd844 <_Z16_fetch_usbserialv>
   d8bd0:	4631      	mov	r1, r6
   d8bd2:	f003 fed9 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(":");
   d8bd6:	f004 fe35 	bl	dd844 <_Z16_fetch_usbserialv>
   d8bda:	4921      	ldr	r1, [pc, #132]	; (d8c60 <_ZN6UbiTCP3getEPKcS1_+0x144>)
   d8bdc:	f003 fed4 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d8be0:	f004 fe30 	bl	dd844 <_Z16_fetch_usbserialv>
   d8be4:	4629      	mov	r1, r5
   d8be6:	f003 fecf 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("|end");
   d8bea:	f004 fe2b 	bl	dd844 <_Z16_fetch_usbserialv>
   d8bee:	491d      	ldr	r1, [pc, #116]	; (d8c64 <_ZN6UbiTCP3getEPKcS1_+0x148>)
   d8bf0:	f003 feca 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.println("\n----");
   d8bf4:	f004 fe26 	bl	dd844 <_Z16_fetch_usbserialv>
   d8bf8:	491d      	ldr	r1, [pc, #116]	; (d8c70 <_ZN6UbiTCP3getEPKcS1_+0x154>)
   d8bfa:	f003 fedc 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
   d8bfe:	4620      	mov	r0, r4
   d8c00:	f7ff ff06 	bl	d8a10 <_ZN6UbiTCP16waitServerAnswerEv>
   d8c04:	b928      	cbnz	r0, d8c12 <_ZN6UbiTCP3getEPKcS1_+0xf6>
      _client_tcp_ubi.stop();
   d8c06:	4813      	ldr	r0, [pc, #76]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
   d8c08:	f005 fad8 	bl	de1bc <_ZN9TCPClient4stopEv>
      return ERROR_VALUE;
   d8c0c:	ed9f 0a19 	vldr	s0, [pc, #100]	; d8c74 <_ZN6UbiTCP3getEPKcS1_+0x158>
   d8c10:	e01d      	b.n	d8c4e <_ZN6UbiTCP3getEPKcS1_+0x132>
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d8c12:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d8c16:	f002 ff99 	bl	dbb4c <malloc>
    float value = parseTCPAnswer("LV", response);
   d8c1a:	4917      	ldr	r1, [pc, #92]	; (d8c78 <_ZN6UbiTCP3getEPKcS1_+0x15c>)
   d8c1c:	4602      	mov	r2, r0
      _client_tcp_ubi.stop();
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d8c1e:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d8c20:	4620      	mov	r0, r4
   d8c22:	f7ff ff17 	bl	d8a54 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d8c26:	480b      	ldr	r0, [pc, #44]	; (d8c54 <_ZN6UbiTCP3getEPKcS1_+0x138>)
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
    float value = parseTCPAnswer("LV", response);
   d8c28:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d8c2c:	f005 fac6 	bl	de1bc <_ZN9TCPClient4stopEv>
    free(response);
   d8c30:	4628      	mov	r0, r5
   d8c32:	f002 ff93 	bl	dbb5c <free>
    return value;
   d8c36:	eeb0 0a48 	vmov.f32	s0, s16
   d8c3a:	e008      	b.n	d8c4e <_ZN6UbiTCP3getEPKcS1_+0x132>
  }

  if (_debug) {
   d8c3c:	7d23      	ldrb	r3, [r4, #20]
   d8c3e:	2b00      	cmp	r3, #0
   d8c40:	d0e1      	beq.n	d8c06 <_ZN6UbiTCP3getEPKcS1_+0xea>
    Serial.println("ERROR could not connect to the server");
   d8c42:	f004 fdff 	bl	dd844 <_Z16_fetch_usbserialv>
   d8c46:	490d      	ldr	r1, [pc, #52]	; (d8c7c <_ZN6UbiTCP3getEPKcS1_+0x160>)
   d8c48:	f003 feb5 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d8c4c:	e7db      	b.n	d8c06 <_ZN6UbiTCP3getEPKcS1_+0xea>
  }

  _client_tcp_ubi.stop();
  return ERROR_VALUE;
}
   d8c4e:	ecbd 8b02 	vpop	{d8}
   d8c52:	bd70      	pop	{r4, r5, r6, pc}
   d8c54:	2003e0a8 	.word	0x2003e0a8
   d8c58:	000e4eb8 	.word	0x000e4eb8
   d8c5c:	000e4ebb 	.word	0x000e4ebb
   d8c60:	000e5014 	.word	0x000e5014
   d8c64:	000e5052 	.word	0x000e5052
   d8c68:	000e4ed3 	.word	0x000e4ed3
   d8c6c:	000e4ebd 	.word	0x000e4ebd
   d8c70:	000e4ed2 	.word	0x000e4ed2
   d8c74:	cda2425f 	.word	0xcda2425f
   d8c78:	000e4ed8 	.word	0x000e4ed8
   d8c7c:	000e4edb 	.word	0x000e4edb

000d8c80 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
   d8c80:	b570      	push	{r4, r5, r6, lr}
   d8c82:	ed2d 8b02 	vpush	{d8}
   d8c86:	4604      	mov	r4, r0
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d8c88:	6841      	ldr	r1, [r0, #4]
   d8c8a:	4822      	ldr	r0, [pc, #136]	; (d8d14 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d8c8c:	f242 3234 	movw	r2, #9012	; 0x2334
  delete[] _user_agent;
  delete[] _token;
}

bool UbiTCP::sendData(const char* device_label, const char* device_name,
                      char* payload, UbiFlags* flags) {
   d8c90:	461d      	mov	r5, r3
  /* Makes sure that the client is connected to Ubidots */
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d8c92:	2300      	movs	r3, #0
   d8c94:	f005 f996 	bl	ddfc4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d8c98:	4620      	mov	r0, r4
   d8c9a:	f242 3234 	movw	r2, #9012	; 0x2334
   d8c9e:	6861      	ldr	r1, [r4, #4]
   d8ca0:	f7ff fe6e 	bl	d8980 <_ZN6UbiTCP9reconnectEPKci>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
   d8ca4:	481b      	ldr	r0, [pc, #108]	; (d8d14 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d8ca6:	f005 f8b6 	bl	dde16 <_ZN9TCPClient9connectedEv>
   d8caa:	b330      	cbz	r0, d8cfa <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x7a>
    _client_tcp_ubi.print(payload);
   d8cac:	4629      	mov	r1, r5
   d8cae:	4819      	ldr	r0, [pc, #100]	; (d8d14 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d8cb0:	f003 fe6a 	bl	dc988 <_ZN5Print5printEPKc>
    _client_tcp_ubi.stop();
    return false;
  }

  /* Waits for the host's answer */
  if (!waitServerAnswer()) {
   d8cb4:	4620      	mov	r0, r4
   d8cb6:	f7ff feab 	bl	d8a10 <_ZN6UbiTCP16waitServerAnswerEv>
   d8cba:	4605      	mov	r5, r0
   d8cbc:	b920      	cbnz	r0, d8cc8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x48>
    _client_tcp_ubi.stop();
   d8cbe:	4815      	ldr	r0, [pc, #84]	; (d8d14 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d8cc0:	f005 fa7c 	bl	de1bc <_ZN9TCPClient4stopEv>
    return false;
   d8cc4:	2500      	movs	r5, #0
   d8cc6:	e021      	b.n	d8d0c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
   d8cc8:	2064      	movs	r0, #100	; 0x64
   d8cca:	f002 ff3f 	bl	dbb4c <malloc>

  float value = parseTCPAnswer("POST", response);
   d8cce:	4912      	ldr	r1, [pc, #72]	; (d8d18 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d8cd0:	4602      	mov	r2, r0
    _client_tcp_ubi.stop();
    return false;
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);
   d8cd2:	4606      	mov	r6, r0

  float value = parseTCPAnswer("POST", response);
   d8cd4:	4620      	mov	r0, r4
   d8cd6:	f7ff febd 	bl	d8a54 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d8cda:	4630      	mov	r0, r6
  }

  /* Parses the host answer, returns true if it is 'Ok' */
  char* response = (char*)malloc(sizeof(char) * 100);

  float value = parseTCPAnswer("POST", response);
   d8cdc:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d8ce0:	f002 ff3c 	bl	dbb5c <free>
  if (value != ERROR_VALUE) {
   d8ce4:	eddf 7a0d 	vldr	s15, [pc, #52]	; d8d1c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d8ce8:	eeb4 8a67 	vcmp.f32	s16, s15
   d8cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8cf0:	d0e5      	beq.n	d8cbe <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d8cf2:	4808      	ldr	r0, [pc, #32]	; (d8d14 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d8cf4:	f005 fa62 	bl	de1bc <_ZN9TCPClient4stopEv>
   d8cf8:	e008      	b.n	d8d0c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x8c>

  /* Sends data to Ubidots */
  if (_client_tcp_ubi.connected()) {
    _client_tcp_ubi.print(payload);
  } else {
    if (_debug) {
   d8cfa:	7d23      	ldrb	r3, [r4, #20]
   d8cfc:	2b00      	cmp	r3, #0
   d8cfe:	d0de      	beq.n	d8cbe <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d8d00:	f004 fda0 	bl	dd844 <_Z16_fetch_usbserialv>
   d8d04:	4906      	ldr	r1, [pc, #24]	; (d8d20 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d8d06:	f003 fe56 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d8d0a:	e7d8      	b.n	d8cbe <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    return true;
  }

  _client_tcp_ubi.stop();
  return false;
}
   d8d0c:	ecbd 8b02 	vpop	{d8}
   d8d10:	4628      	mov	r0, r5
   d8d12:	bd70      	pop	{r4, r5, r6, pc}
   d8d14:	2003e0a8 	.word	0x2003e0a8
   d8d18:	000e4eb0 	.word	0x000e4eb0
   d8d1c:	cda2425f 	.word	0xcda2425f
   d8d20:	000e4f01 	.word	0x000e4f01

000d8d24 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d8d24:	b510      	push	{r4, lr}
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d8d26:	4c06      	ldr	r4, [pc, #24]	; (d8d40 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d8d28:	f002 fb7a 	bl	db420 <HAL_Pin_Map>
   d8d2c:	4620      	mov	r0, r4
   d8d2e:	f005 fafd 	bl	de32c <_ZN9TCPClientC1Ev>
   d8d32:	4620      	mov	r0, r4
   d8d34:	4a03      	ldr	r2, [pc, #12]	; (d8d44 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d8d36:	4904      	ldr	r1, [pc, #16]	; (d8d48 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
   d8d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8d3c:	f005 bc70 	b.w	de620 <__aeabi_atexit>
   d8d40:	2003e0a8 	.word	0x2003e0a8
   d8d44:	2003bc08 	.word	0x2003bc08
   d8d48:	000d8919 	.word	0x000d8919

000d8d4c <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context,
                             unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d8d4c:	b538      	push	{r3, r4, r5, lr}
   d8d4e:	4604      	mov	r4, r0
  _dirty = true;
   d8d50:	2001      	movs	r0, #1
   d8d52:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d8d54:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d8d58:	68e5      	ldr	r5, [r4, #12]
   d8d5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d8d5e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d8d62:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d8d66:	68e0      	ldr	r0, [r4, #12]
   d8d68:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d8d6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d8d70:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d8d74:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d8d78:	68e0      	ldr	r0, [r4, #12]
   d8d7a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d8d7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d8d82:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d8d84:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d8d88:	68e1      	ldr	r1, [r4, #12]
   d8d8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d8d8e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d8d92:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d8d94:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d8d98:	68e2      	ldr	r2, [r4, #12]
   d8d9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d8d9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d8da2:	9a04      	ldr	r2, [sp, #16]
   d8da4:	611a      	str	r2, [r3, #16]
  _current_value++;
   d8da6:	7c23      	ldrb	r3, [r4, #16]
   d8da8:	3301      	adds	r3, #1
   d8daa:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d8dac:	2b0a      	cmp	r3, #10
  (_dots + _current_value)->variable_label = variable_label;
  (_dots + _current_value)->dot_value = value;
  (_dots + _current_value)->dot_context = context;
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
  _current_value++;
   d8dae:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d8db0:	dd08      	ble.n	d8dc4 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d8db2:	7ca3      	ldrb	r3, [r4, #18]
   d8db4:	b123      	cbz	r3, d8dc0 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(
   d8db6:	f004 fd45 	bl	dd844 <_Z16_fetch_usbserialv>
          F("You are sending more than the maximum of consecutive variables"));
   d8dba:	4903      	ldr	r1, [pc, #12]	; (d8dc8 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d8dbc:	f003 fdfb 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d8dc0:	230a      	movs	r3, #10
   d8dc2:	7423      	strb	r3, [r4, #16]
   d8dc4:	bd38      	pop	{r3, r4, r5, pc}
   d8dc6:	bf00      	nop
   d8dc8:	000e4f34 	.word	0x000e4f34

000d8dcc <_ZN18UbiProtocolHandler8setDebugEb>:
/*
  Makes debug messages available
*/

void UbiProtocolHandler::setDebug(bool debug) {
  _debug = debug;
   d8dcc:	7481      	strb	r1, [r0, #18]
  _ubiProtocol->setDebug(debug);
   d8dce:	6840      	ldr	r0, [r0, #4]
   d8dd0:	6803      	ldr	r3, [r0, #0]
   d8dd2:	689b      	ldr	r3, [r3, #8]
   d8dd4:	4718      	bx	r3
	...

000d8dd8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d8dd8:	b530      	push	{r4, r5, lr}
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d8dda:	ee10 0a10 	vmov	r0, s0
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d8dde:	b087      	sub	sp, #28
   d8de0:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d8de2:	f007 fd11 	bl	e0808 <__aeabi_f2d>
   d8de6:	ad01      	add	r5, sp, #4
   d8de8:	4602      	mov	r2, r0
   d8dea:	460b      	mov	r3, r1
   d8dec:	4628      	mov	r0, r5
   d8dee:	4909      	ldr	r1, [pc, #36]	; (d8e14 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x3c>)
   d8df0:	f002 fec4 	bl	dbb7c <sprintf>
   d8df4:	2200      	movs	r2, #0
  uint8_t j = 0;
  uint8_t k = 0;
   d8df6:	4613      	mov	r3, r2
  while (j < 20) {
    if (temp_arr[j] != ' ') {
   d8df8:	5ca9      	ldrb	r1, [r5, r2]
   d8dfa:	2920      	cmp	r1, #32
   d8dfc:	d005      	beq.n	d8e0a <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
      str_value[k] = temp_arr[j];
   d8dfe:	54e1      	strb	r1, [r4, r3]
      k++;
   d8e00:	3301      	adds	r3, #1
   d8e02:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d8e04:	b909      	cbnz	r1, d8e0a <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
      str_value[k] = temp_arr[j];
   d8e06:	54e1      	strb	r1, [r4, r3]
      break;
   d8e08:	e002      	b.n	d8e10 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x38>
   d8e0a:	3201      	adds	r2, #1
void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d8e0c:	2a14      	cmp	r2, #20
   d8e0e:	d1f3      	bne.n	d8df8 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
      str_value[k] = temp_arr[j];
      break;
    }
    j++;
  }
   d8e10:	b007      	add	sp, #28
   d8e12:	bd30      	pop	{r4, r5, pc}
   d8e14:	000e4fb7 	.word	0x000e4fb7

000d8e18 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
 * @payload [Mandatory] char payload pointer to store the built structure.
 * @timestamp_global [Optional] If set, it will be used for any dot without
 * timestamp.
 */

void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d8e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8e1c:	460c      	mov	r4, r1
   d8e1e:	b089      	sub	sp, #36	; 0x24
   d8e20:	4605      	mov	r5, r0
  /* Builds the payload */
  sprintf(payload, "{");
   d8e22:	4949      	ldr	r1, [pc, #292]	; (d8f48 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x130>)
   d8e24:	4620      	mov	r0, r4
   d8e26:	f008 fe3d 	bl	e1aa4 <strcpy>

  for (uint8_t i = 0; i < _current_value;) {
   d8e2a:	2600      	movs	r6, #0
   d8e2c:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d8e30:	429e      	cmp	r6, r3
   d8e32:	da6a      	bge.n	d8f0a <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf2>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
   d8e34:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   d8e38:	68eb      	ldr	r3, [r5, #12]
   d8e3a:	ea4f 0788 	mov.w	r7, r8, lsl #2
   d8e3e:	443b      	add	r3, r7
   d8e40:	f10d 090c 	add.w	r9, sp, #12
   d8e44:	ed93 0a02 	vldr	s0, [r3, #8]
   d8e48:	4649      	mov	r1, r9
   d8e4a:	4628      	mov	r0, r5
   d8e4c:	f7ff ffc4 	bl	d8dd8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload,
   d8e50:	68eb      	ldr	r3, [r5, #12]
            (_dots + i)->variable_label, str_value);
   d8e52:	f8cd 9000 	str.w	r9, [sp]
   d8e56:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   d8e5a:	493c      	ldr	r1, [pc, #240]	; (d8f4c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>)
   d8e5c:	4622      	mov	r2, r4
   d8e5e:	4620      	mov	r0, r4
   d8e60:	f002 fe8c 	bl	dbb7c <sprintf>

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d8e64:	68eb      	ldr	r3, [r5, #12]
   d8e66:	443b      	add	r3, r7
   d8e68:	68db      	ldr	r3, [r3, #12]
   d8e6a:	b36b      	cbz	r3, d8ec8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload,
              (_dots + i)->dot_timestamp_seconds);
   d8e6c:	4622      	mov	r2, r4
   d8e6e:	4938      	ldr	r1, [pc, #224]	; (d8f50 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x138>)
   d8e70:	4620      	mov	r0, r4
   d8e72:	f002 fe83 	bl	dbb7c <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d8e76:	68eb      	ldr	r3, [r5, #12]
   d8e78:	443b      	add	r3, r7
   d8e7a:	691b      	ldr	r3, [r3, #16]
   d8e7c:	b1fb      	cbz	r3, d8ebe <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xa6>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d8e7e:	200a      	movs	r0, #10
   d8e80:	fb93 f1f0 	sdiv	r1, r3, r0
   d8e84:	fb91 fcf0 	sdiv	ip, r1, r0
   d8e88:	fb00 1c1c 	mls	ip, r0, ip, r1
   d8e8c:	fb00 3111 	mls	r1, r0, r1, r3
   d8e90:	b2c9      	uxtb	r1, r1
   d8e92:	2264      	movs	r2, #100	; 0x64
   d8e94:	fb93 f2f2 	sdiv	r2, r3, r2
   d8e98:	fb92 fef0 	sdiv	lr, r2, r0
   d8e9c:	fb00 221e 	mls	r2, r0, lr, r2
   d8ea0:	9100      	str	r1, [sp, #0]
   d8ea2:	fa5f f38c 	uxtb.w	r3, ip
   d8ea6:	b2d2      	uxtb	r2, r2
   d8ea8:	492a      	ldr	r1, [pc, #168]	; (d8f54 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
   d8eaa:	a802      	add	r0, sp, #8
   d8eac:	f002 fe66 	bl	dbb7c <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d8eb0:	ab02      	add	r3, sp, #8
   d8eb2:	4622      	mov	r2, r4
   d8eb4:	4928      	ldr	r1, [pc, #160]	; (d8f58 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d8eb6:	4620      	mov	r0, r4
   d8eb8:	f002 fe60 	bl	dbb7c <sprintf>
   d8ebc:	e004      	b.n	d8ec8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      } else {
        sprintf(payload, "%s000", payload);
   d8ebe:	4622      	mov	r2, r4
   d8ec0:	4926      	ldr	r1, [pc, #152]	; (d8f5c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d8ec2:	4620      	mov	r0, r4
   d8ec4:	f002 fe5a 	bl	dbb7c <sprintf>
      }
    }

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
   d8ec8:	68eb      	ldr	r3, [r5, #12]
   d8eca:	441f      	add	r7, r3
   d8ecc:	687b      	ldr	r3, [r7, #4]
   d8ece:	b123      	cbz	r3, d8eda <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
   d8ed0:	4622      	mov	r2, r4
   d8ed2:	4923      	ldr	r1, [pc, #140]	; (d8f60 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d8ed4:	4620      	mov	r0, r4
   d8ed6:	f002 fe51 	bl	dbb7c <sprintf>
    }

    sprintf(payload, "%s}", payload);
   d8eda:	4622      	mov	r2, r4
   d8edc:	4921      	ldr	r1, [pc, #132]	; (d8f64 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d8ede:	4620      	mov	r0, r4
   d8ee0:	f002 fe4c 	bl	dbb7c <sprintf>
    i++;
   d8ee4:	3601      	adds	r6, #1

    if (i < _current_value) {
   d8ee6:	f995 3010 	ldrsb.w	r3, [r5, #16]
      sprintf(payload, "%s,\"context\": {%s}", payload,
              (_dots + i)->dot_context);
    }

    sprintf(payload, "%s}", payload);
    i++;
   d8eea:	b2f6      	uxtb	r6, r6

    if (i < _current_value) {
   d8eec:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d8eee:	4622      	mov	r2, r4
    }

    sprintf(payload, "%s}", payload);
    i++;

    if (i < _current_value) {
   d8ef0:	da04      	bge.n	d8efc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
      sprintf(payload, "%s,", payload);
   d8ef2:	491d      	ldr	r1, [pc, #116]	; (d8f68 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d8ef4:	4620      	mov	r0, r4
   d8ef6:	f002 fe41 	bl	dbb7c <sprintf>
   d8efa:	e797      	b.n	d8e2c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
    } else {
      sprintf(payload, "%s}", payload);
   d8efc:	4919      	ldr	r1, [pc, #100]	; (d8f64 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d8efe:	4620      	mov	r0, r4
   d8f00:	f002 fe3c 	bl	dbb7c <sprintf>
      _current_value = 0;
   d8f04:	2300      	movs	r3, #0
   d8f06:	742b      	strb	r3, [r5, #16]

void UbiProtocolHandler::buildHttpPayload(char* payload) {
  /* Builds the payload */
  sprintf(payload, "{");

  for (uint8_t i = 0; i < _current_value;) {
   d8f08:	e790      	b.n	d8e2c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14>
      sprintf(payload, "%s}", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
   d8f0a:	7cab      	ldrb	r3, [r5, #18]
   d8f0c:	b1c3      	cbz	r3, d8f40 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x128>
    Serial.println("----------");
   d8f0e:	f004 fc99 	bl	dd844 <_Z16_fetch_usbserialv>
   d8f12:	4916      	ldr	r1, [pc, #88]	; (d8f6c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d8f14:	f003 fd4f 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d8f18:	f004 fc94 	bl	dd844 <_Z16_fetch_usbserialv>
   d8f1c:	4914      	ldr	r1, [pc, #80]	; (d8f70 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d8f1e:	f003 fd4a 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d8f22:	f004 fc8f 	bl	dd844 <_Z16_fetch_usbserialv>
   d8f26:	4621      	mov	r1, r4
   d8f28:	f003 fd45 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d8f2c:	f004 fc8a 	bl	dd844 <_Z16_fetch_usbserialv>
   d8f30:	490e      	ldr	r1, [pc, #56]	; (d8f6c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d8f32:	f003 fd40 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d8f36:	f004 fc85 	bl	dd844 <_Z16_fetch_usbserialv>
   d8f3a:	490e      	ldr	r1, [pc, #56]	; (d8f74 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d8f3c:	f003 fd3b 	bl	dc9b6 <_ZN5Print7printlnEPKc>
  }
}
   d8f40:	b009      	add	sp, #36	; 0x24
   d8f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8f46:	bf00      	nop
   d8f48:	000e4fbc 	.word	0x000e4fbc
   d8f4c:	000e4fbe 	.word	0x000e4fbe
   d8f50:	000e4fd1 	.word	0x000e4fd1
   d8f54:	000e4fe4 	.word	0x000e4fe4
   d8f58:	000e4feb 	.word	0x000e4feb
   d8f5c:	000e4ff0 	.word	0x000e4ff0
   d8f60:	000e4ff6 	.word	0x000e4ff6
   d8f64:	000e5005 	.word	0x000e5005
   d8f68:	000e5009 	.word	0x000e5009
   d8f6c:	000e4ea5 	.word	0x000e4ea5
   d8f70:	000e500d 	.word	0x000e500d
   d8f74:	000e52f7 	.word	0x000e52f7

000d8f78 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
 * timestamp.
 */

void UbiProtocolHandler::buildTcpPayload(char* payload,
                                         const char* device_label,
                                         const char* device_name) {
   d8f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8f7c:	460c      	mov	r4, r1
   d8f7e:	4605      	mov	r5, r0
   d8f80:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d8f82:	4950      	ldr	r1, [pc, #320]	; (d90c4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14c>)
   d8f84:	4620      	mov	r0, r4
 * timestamp.
 */

void UbiProtocolHandler::buildTcpPayload(char* payload,
                                         const char* device_label,
                                         const char* device_name) {
   d8f86:	4616      	mov	r6, r2
   d8f88:	461f      	mov	r7, r3
  sprintf(payload, "");
   d8f8a:	f008 fd8b 	bl	e1aa4 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d8f8e:	68ab      	ldr	r3, [r5, #8]
   d8f90:	4a4d      	ldr	r2, [pc, #308]	; (d90c8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x150>)
   d8f92:	494e      	ldr	r1, [pc, #312]	; (d90cc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d8f94:	4620      	mov	r0, r4
   d8f96:	f002 fdf1 	bl	dbb7c <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d8f9a:	4633      	mov	r3, r6
   d8f9c:	4622      	mov	r2, r4
   d8f9e:	494c      	ldr	r1, [pc, #304]	; (d90d0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d8fa0:	9700      	str	r7, [sp, #0]
   d8fa2:	4620      	mov	r0, r4
   d8fa4:	f002 fdea 	bl	dbb7c <sprintf>

  sprintf(payload, "%s=>", payload);
   d8fa8:	4622      	mov	r2, r4
   d8faa:	494a      	ldr	r1, [pc, #296]	; (d90d4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d8fac:	4620      	mov	r0, r4
   d8fae:	f002 fde5 	bl	dbb7c <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d8fb2:	2600      	movs	r6, #0
   d8fb4:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d8fb8:	429e      	cmp	r6, r3
   d8fba:	da64      	bge.n	d9086 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10e>
    char str_value[20];
    _floatToChar(str_value, (_dots + i)->dot_value);
   d8fbc:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   d8fc0:	68eb      	ldr	r3, [r5, #12]
   d8fc2:	ea4f 0788 	mov.w	r7, r8, lsl #2
   d8fc6:	443b      	add	r3, r7
   d8fc8:	f10d 090c 	add.w	r9, sp, #12
   d8fcc:	ed93 0a02 	vldr	s0, [r3, #8]
   d8fd0:	4649      	mov	r1, r9
   d8fd2:	4628      	mov	r0, r5
   d8fd4:	f7ff ff00 	bl	d8dd8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label,
   d8fd8:	68eb      	ldr	r3, [r5, #12]
            str_value);
   d8fda:	f8cd 9000 	str.w	r9, [sp]
   d8fde:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   d8fe2:	493b      	ldr	r1, [pc, #236]	; (d90d0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d8fe4:	4622      	mov	r2, r4
   d8fe6:	4620      	mov	r0, r4
   d8fe8:	f002 fdc8 	bl	dbb7c <sprintf>

    // Adds dot context
    if ((_dots + i)->dot_context != NULL) {
   d8fec:	68eb      	ldr	r3, [r5, #12]
   d8fee:	443b      	add	r3, r7
   d8ff0:	685b      	ldr	r3, [r3, #4]
   d8ff2:	b123      	cbz	r3, d8ffe <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x86>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d8ff4:	4622      	mov	r2, r4
   d8ff6:	4938      	ldr	r1, [pc, #224]	; (d90d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d8ff8:	4620      	mov	r0, r4
   d8ffa:	f002 fdbf 	bl	dbb7c <sprintf>
    }

    // Adds timestamp seconds
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d8ffe:	68eb      	ldr	r3, [r5, #12]
   d9000:	443b      	add	r3, r7
   d9002:	68db      	ldr	r3, [r3, #12]
   d9004:	b363      	cbz	r3, d9060 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe8>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d9006:	4622      	mov	r2, r4
   d9008:	4934      	ldr	r1, [pc, #208]	; (d90dc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
   d900a:	4620      	mov	r0, r4
   d900c:	f002 fdb6 	bl	dbb7c <sprintf>
      // Adds timestamp milliseconds
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d9010:	68eb      	ldr	r3, [r5, #12]
   d9012:	441f      	add	r7, r3
   d9014:	693f      	ldr	r7, [r7, #16]
   d9016:	b1f7      	cbz	r7, d9056 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xde>
        char milliseconds[3];
        int timestamp_millis = (_dots + i)->dot_timestamp_millis;
        uint8_t units = timestamp_millis % 10;
        uint8_t dec = (timestamp_millis / 10) % 10;
        uint8_t hund = (timestamp_millis / 100) % 10;
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d9018:	200a      	movs	r0, #10
   d901a:	fb97 f1f0 	sdiv	r1, r7, r0
   d901e:	fb91 f3f0 	sdiv	r3, r1, r0
   d9022:	fb00 1313 	mls	r3, r0, r3, r1
   d9026:	fb00 7111 	mls	r1, r0, r1, r7
   d902a:	b2c9      	uxtb	r1, r1
   d902c:	2264      	movs	r2, #100	; 0x64
   d902e:	fb97 f2f2 	sdiv	r2, r7, r2
   d9032:	fb92 fef0 	sdiv	lr, r2, r0
   d9036:	fb00 221e 	mls	r2, r0, lr, r2
   d903a:	9100      	str	r1, [sp, #0]
   d903c:	b2db      	uxtb	r3, r3
   d903e:	b2d2      	uxtb	r2, r2
   d9040:	4927      	ldr	r1, [pc, #156]	; (d90e0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d9042:	a802      	add	r0, sp, #8
   d9044:	f002 fd9a 	bl	dbb7c <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d9048:	ab02      	add	r3, sp, #8
   d904a:	4622      	mov	r2, r4
   d904c:	4925      	ldr	r1, [pc, #148]	; (d90e4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d904e:	4620      	mov	r0, r4
   d9050:	f002 fd94 	bl	dbb7c <sprintf>
   d9054:	e004      	b.n	d9060 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe8>
      } else {
        sprintf(payload, "%s000", payload);
   d9056:	4622      	mov	r2, r4
   d9058:	4923      	ldr	r1, [pc, #140]	; (d90e8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d905a:	4620      	mov	r0, r4
   d905c:	f002 fd8e 	bl	dbb7c <sprintf>
      }
    }

    i++;
   d9060:	3601      	adds	r6, #1

    if (i < _current_value) {
   d9062:	f995 3010 	ldrsb.w	r3, [r5, #16]
      } else {
        sprintf(payload, "%s000", payload);
      }
    }

    i++;
   d9066:	b2f6      	uxtb	r6, r6

    if (i < _current_value) {
   d9068:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d906a:	4622      	mov	r2, r4
      }
    }

    i++;

    if (i < _current_value) {
   d906c:	da04      	bge.n	d9078 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x100>
      sprintf(payload, "%s,", payload);
   d906e:	491f      	ldr	r1, [pc, #124]	; (d90ec <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d9070:	4620      	mov	r0, r4
   d9072:	f002 fd83 	bl	dbb7c <sprintf>
   d9076:	e79d      	b.n	d8fb4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
    } else {
      sprintf(payload, "%s|end", payload);
   d9078:	491d      	ldr	r1, [pc, #116]	; (d90f0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d907a:	4620      	mov	r0, r4
   d907c:	f002 fd7e 	bl	dbb7c <sprintf>
      _current_value = 0;
   d9080:	2300      	movs	r3, #0
   d9082:	742b      	strb	r3, [r5, #16]
  sprintf(payload, "");
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);

  sprintf(payload, "%s=>", payload);
  for (uint8_t i = 0; i < _current_value;) {
   d9084:	e796      	b.n	d8fb4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x3c>
      sprintf(payload, "%s|end", payload);
      _current_value = 0;
    }
  }

  if (_debug) {
   d9086:	7cab      	ldrb	r3, [r5, #18]
   d9088:	b1c3      	cbz	r3, d90bc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x144>
    Serial.println("----------");
   d908a:	f004 fbdb 	bl	dd844 <_Z16_fetch_usbserialv>
   d908e:	4919      	ldr	r1, [pc, #100]	; (d90f4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d9090:	f003 fc91 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d9094:	f004 fbd6 	bl	dd844 <_Z16_fetch_usbserialv>
   d9098:	4917      	ldr	r1, [pc, #92]	; (d90f8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d909a:	f003 fc8c 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d909e:	f004 fbd1 	bl	dd844 <_Z16_fetch_usbserialv>
   d90a2:	4621      	mov	r1, r4
   d90a4:	f003 fc87 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d90a8:	f004 fbcc 	bl	dd844 <_Z16_fetch_usbserialv>
   d90ac:	4911      	ldr	r1, [pc, #68]	; (d90f4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d90ae:	f003 fc82 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d90b2:	f004 fbc7 	bl	dd844 <_Z16_fetch_usbserialv>
   d90b6:	4903      	ldr	r1, [pc, #12]	; (d90c4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14c>)
   d90b8:	f003 fc7d 	bl	dc9b6 <_ZN5Print7printlnEPKc>
  }
}
   d90bc:	b009      	add	sp, #36	; 0x24
   d90be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d90c2:	bf00      	nop
   d90c4:	000e52f7 	.word	0x000e52f7
   d90c8:	000e5016 	.word	0x000e5016
   d90cc:	000e502a 	.word	0x000e502a
   d90d0:	000e5036 	.word	0x000e5036
   d90d4:	000e503e 	.word	0x000e503e
   d90d8:	000e5043 	.word	0x000e5043
   d90dc:	000e5049 	.word	0x000e5049
   d90e0:	000e4fe4 	.word	0x000e4fe4
   d90e4:	000e4feb 	.word	0x000e4feb
   d90e8:	000e4ff0 	.word	0x000e4ff0
   d90ec:	000e5009 	.word	0x000e5009
   d90f0:	000e5050 	.word	0x000e5050
   d90f4:	000e4ea5 	.word	0x000e4ea5
   d90f8:	000e500d 	.word	0x000e500d

000d90fc <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
   d90fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9100:	4604      	mov	r4, r0
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d9102:	f44f 702f 	mov.w	r0, #700	; 0x2bc
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
   d9106:	461f      	mov	r7, r3
   d9108:	460e      	mov	r6, r1
   d910a:	4690      	mov	r8, r2
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d910c:	f002 fd1e 	bl	dbb4c <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d9110:	7ce3      	ldrb	r3, [r4, #19]
   d9112:	3b01      	subs	r3, #1
   d9114:	2b01      	cmp	r3, #1
}

bool UbiProtocolHandler::send(const char* device_label, const char* device_name,
                              UbiFlags* flags) {
  // Builds the payload
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d9116:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d9118:	d806      	bhi.n	d9128 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2c>
    buildTcpPayload(payload, device_label, device_name);
   d911a:	4601      	mov	r1, r0
   d911c:	4643      	mov	r3, r8
   d911e:	4632      	mov	r2, r6
   d9120:	4620      	mov	r0, r4
   d9122:	f7ff ff29 	bl	d8f78 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
   d9126:	e003      	b.n	d9130 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x34>
  } else {
    buildHttpPayload(payload);
   d9128:	4601      	mov	r1, r0
   d912a:	4620      	mov	r0, r4
   d912c:	f7ff fe74 	bl	d8e18 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
  }

  // Sends data
  if (_debug) {
   d9130:	7ca3      	ldrb	r3, [r4, #18]
   d9132:	b123      	cbz	r3, d913e <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x42>
    Serial.println("Sending data...");
   d9134:	f004 fb86 	bl	dd844 <_Z16_fetch_usbserialv>
   d9138:	490d      	ldr	r1, [pc, #52]	; (d9170 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x74>)
   d913a:	f003 fc3c 	bl	dc9b6 <_ZN5Print7printlnEPKc>
  }

  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d913e:	6860      	ldr	r0, [r4, #4]
   d9140:	6803      	ldr	r3, [r0, #0]
   d9142:	9700      	str	r7, [sp, #0]
   d9144:	4631      	mov	r1, r6
   d9146:	4642      	mov	r2, r8
   d9148:	f8d3 9000 	ldr.w	r9, [r3]
   d914c:	462b      	mov	r3, r5
   d914e:	47c8      	blx	r9
   d9150:	4606      	mov	r6, r0
  free(payload);
   d9152:	4628      	mov	r0, r5
   d9154:	f002 fd02 	bl	dbb5c <free>
  delete flags;
   d9158:	2101      	movs	r1, #1
   d915a:	4638      	mov	r0, r7
   d915c:	f005 fa6e 	bl	de63c <_ZdlPvj>
   d9160:	2300      	movs	r3, #0
  if (result) {
   d9162:	b106      	cbz	r6, d9166 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6a>
    _dirty = false;
   d9164:	7463      	strb	r3, [r4, #17]
    _current_value = 0;
  }

  _current_value = 0;
  return result;
}
   d9166:	4630      	mov	r0, r6
  if (result) {
    _dirty = false;
    _current_value = 0;
  }

  _current_value = 0;
   d9168:	7423      	strb	r3, [r4, #16]
  return result;
}
   d916a:	b003      	add	sp, #12
   d916c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9170:	000e5057 	.word	0x000e5057

000d9174 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
                              const char* device_name) {
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d9174:	b570      	push	{r4, r5, r6, lr}
   d9176:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d9178:	2001      	movs	r0, #1
                              const char* device_name) {
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d917a:	460d      	mov	r5, r1
   d917c:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   d917e:	f7fa ff8c 	bl	d409a <_Znwj>
  flags->particle_flag = flag;
   d9182:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
  return send(device_label, device_name, flags);
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
  UbiFlags* flags = new UbiFlags();
   d9184:	4603      	mov	r3, r0
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
   d9186:	462a      	mov	r2, r5
   d9188:	4629      	mov	r1, r5
   d918a:	4620      	mov	r0, r4
}
   d918c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
  UbiFlags* flags = new UbiFlags();
  flags->particle_flag = flag;
  return send(device_label, device_label, flags);
   d9190:	f7ff bfb4 	b.w	d90fc <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000d9194 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d9194:	b570      	push	{r4, r5, r6, lr}
   d9196:	4606      	mov	r6, r0
   d9198:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d919a:	b184      	cbz	r4, d91be <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	{
	  _M_erase(_S_right(__x));
   d919c:	68e1      	ldr	r1, [r4, #12]
   d919e:	4630      	mov	r0, r6
   d91a0:	f7ff fff8 	bl	d9194 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d91a4:	69e3      	ldr	r3, [r4, #28]
   d91a6:	68a5      	ldr	r5, [r4, #8]
   d91a8:	b123      	cbz	r3, d91b4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d91aa:	f104 0114 	add.w	r1, r4, #20
   d91ae:	2203      	movs	r2, #3
   d91b0:	4608      	mov	r0, r1
   d91b2:	4798      	blx	r3
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d91b4:	4620      	mov	r0, r4
   d91b6:	f7fa ff74 	bl	d40a2 <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   d91ba:	462c      	mov	r4, r5
   d91bc:	e7ed      	b.n	d919a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
   d91be:	bd70      	pop	{r4, r5, r6, pc}

000d91c0 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
                                       IotProtocol iot_protocol) {
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
   d91c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d91c2:	b08d      	sub	sp, #52	; 0x34
   d91c4:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d91c6:	a801      	add	r0, sp, #4
   d91c8:	460d      	mov	r5, r1
   d91ca:	4617      	mov	r7, r2
   d91cc:	461e      	mov	r6, r3
   d91ce:	f002 fc9d 	bl	dbb0c <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d91d2:	9803      	ldr	r0, [sp, #12]
   d91d4:	3001      	adds	r0, #1
   d91d6:	f7fa ff62 	bl	d409e <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d91da:	9901      	ldr	r1, [sp, #4]
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d91dc:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d91de:	f008 fc61 	bl	e1aa4 <strcpy>
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
   d91e2:	462a      	mov	r2, r5
   d91e4:	4633      	mov	r3, r6
   d91e6:	4639      	mov	r1, r7
void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
   d91e8:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d91ea:	a805      	add	r0, sp, #20
   d91ec:	f000 fd8e 	bl	d9d0c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d91f0:	20c8      	movs	r0, #200	; 0xc8
   d91f2:	f002 fcab 	bl	dbb4c <malloc>
   d91f6:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d91f8:	a805      	add	r0, sp, #20
   d91fa:	f000 fc95 	bl	d9b28 <_ZN10UbiBuilder7builderEv>
  _token = token;
  _current_value = 0;
   d91fe:	2300      	movs	r3, #0
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
   d9200:	6060      	str	r0, [r4, #4]
  _token = token;
  _current_value = 0;
   d9202:	7423      	strb	r3, [r4, #16]

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
   d9204:	9908      	ldr	r1, [sp, #32]
  strcpy(_default_device_label, particle_id_str.c_str());
  _iot_protocol = iot_protocol;
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
   d9206:	60a5      	str	r5, [r4, #8]
   d9208:	a806      	add	r0, sp, #24
   d920a:	f7ff ffc3 	bl	d9194 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  builder(token, server, iot_protocol);
}

void UbiProtocolHandler::builder(char* token, UbiServer server,
                                 IotProtocol iot_protocol) {
  String particle_id_str = System.deviceID();
   d920e:	a801      	add	r0, sp, #4
   d9210:	f003 f9d0 	bl	dc5b4 <_ZN6StringD1Ev>
  UbiBuilder builder(server, token, _iot_protocol);
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
  _ubiProtocol = builder.builder();
  _token = token;
  _current_value = 0;
}
   d9214:	b00d      	add	sp, #52	; 0x34
   d9216:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9218 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:

UbiProtocolHandler::UbiProtocolHandler(char* token, IotProtocol iot_protocol) {
  builder(token, UBI_INDUSTRIAL, iot_protocol);
}

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
   d9218:	b538      	push	{r3, r4, r5, lr}
                                       IotProtocol iot_protocol) {
   d921a:	2500      	movs	r5, #0

UbiProtocolHandler::UbiProtocolHandler(char* token, IotProtocol iot_protocol) {
  builder(token, UBI_INDUSTRIAL, iot_protocol);
}

UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server,
   d921c:	4604      	mov	r4, r0
                                       IotProtocol iot_protocol) {
   d921e:	7405      	strb	r5, [r0, #16]
   d9220:	7445      	strb	r5, [r0, #17]
  builder(token, server, iot_protocol);
   d9222:	f7ff ffcd 	bl	d91c0 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d9226:	4620      	mov	r0, r4
   d9228:	bd38      	pop	{r3, r4, r5, pc}
	...

000d922c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
   d922c:	4b02      	ldr	r3, [pc, #8]	; (d9238 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
   d922e:	2200      	movs	r2, #0
   d9230:	701a      	strb	r2, [r3, #0]
   d9232:	f002 b8f5 	b.w	db420 <HAL_Pin_Map>
   d9236:	bf00      	nop
   d9238:	2003e0c4 	.word	0x2003e0c4

000d923c <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d923c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9240:	4604      	mov	r4, r0
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d9242:	2050      	movs	r0, #80	; 0x50
Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
  _iotProtocol = iotProtocol;
   d9244:	7323      	strb	r3, [r4, #12]

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) {
  _builder(token, server, iotProtocol);
}

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d9246:	460d      	mov	r5, r1
   d9248:	4616      	mov	r6, r2
   d924a:	461f      	mov	r7, r3
  _iotProtocol = iotProtocol;
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d924c:	f002 fc7e 	bl	dbb4c <malloc>
   d9250:	60a0      	str	r0, [r4, #8]

// Electron and photon do not support Mesh
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  _protocolMesh = new UbiMesh(token);
   d9252:	f44f 7082 	mov.w	r0, #260	; 0x104
   d9256:	f7fa ff20 	bl	d409a <_Znwj>
   d925a:	4680      	mov	r8, r0
   d925c:	b110      	cbz	r0, d9264 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d925e:	4629      	mov	r1, r5
   d9260:	f000 fdda 	bl	d9e18 <_ZN7UbiMeshC1EPc>
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d9264:	7b23      	ldrb	r3, [r4, #12]

// Electron and photon do not support Mesh
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  _protocolMesh = new UbiMesh(token);
   d9266:	f8c4 8000 	str.w	r8, [r4]
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d926a:	2b04      	cmp	r3, #4
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d926c:	f04f 0014 	mov.w	r0, #20
// Only non-xenon devices may have cloud communication protocols
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  if (_iotProtocol != UBI_MESH) {
   d9270:	d00c      	beq.n	d928c <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x50>
    _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d9272:	f7fa ff12 	bl	d409a <_Znwj>
   d9276:	4680      	mov	r8, r0
   d9278:	b120      	cbz	r0, d9284 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x48>
   d927a:	463b      	mov	r3, r7
   d927c:	4632      	mov	r2, r6
   d927e:	4629      	mov	r1, r5
   d9280:	f7ff ffca 	bl	d9218 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d9284:	f8c4 8004 	str.w	r8, [r4, #4]
   d9288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else {
    // Default is TCP
    _cloudProtocol = new UbiProtocolHandler(token, server, UBI_TCP);
   d928c:	f7fa ff05 	bl	d409a <_Znwj>
   d9290:	4607      	mov	r7, r0
   d9292:	b120      	cbz	r0, d929e <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x62>
   d9294:	2301      	movs	r3, #1
   d9296:	4632      	mov	r2, r6
   d9298:	4629      	mov	r1, r5
   d929a:	f7ff ffbd 	bl	d9218 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d929e:	6067      	str	r7, [r4, #4]
   d92a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d92a4 <_ZN7UbidotsC1EPc11IotProtocol>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) {
   d92a4:	b510      	push	{r4, lr}
   d92a6:	2300      	movs	r3, #0
   d92a8:	4604      	mov	r4, r0
   d92aa:	7343      	strb	r3, [r0, #13]
   d92ac:	7383      	strb	r3, [r0, #14]
  _builder(token, UBI_INDUSTRIAL, iotProtocol);
   d92ae:	4613      	mov	r3, r2
   d92b0:	4a02      	ldr	r2, [pc, #8]	; (d92bc <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d92b2:	f7ff ffc3 	bl	d923c <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
}
   d92b6:	4620      	mov	r0, r4
   d92b8:	bd10      	pop	{r4, pc}
   d92ba:	bf00      	nop
   d92bc:	000e5067 	.word	0x000e5067

000d92c0 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d92c0:	b538      	push	{r3, r4, r5, lr}
   d92c2:	4604      	mov	r4, r0
  free(_context);
   d92c4:	6880      	ldr	r0, [r0, #8]
   d92c6:	f002 fc49 	bl	dbb5c <free>
#if PLATFORM_ID != PLATFORM_PHOTON_DEV &&        \
    PLATFORM_ID != PLATFORM_PHOTON_PRODUCTION && \
    PLATFORM_ID != PLATFORM_ELECTRON_PRODUCTION
  delete _protocolMesh;
   d92ca:	6825      	ldr	r5, [r4, #0]
   d92cc:	b13d      	cbz	r5, d92de <_ZN7UbidotsD1Ev+0x1e>
   d92ce:	4628      	mov	r0, r5
   d92d0:	f000 fdba 	bl	d9e48 <_ZN7UbiMeshD1Ev>
   d92d4:	f44f 7182 	mov.w	r1, #260	; 0x104
   d92d8:	4628      	mov	r0, r5
   d92da:	f005 f9af 	bl	de63c <_ZdlPvj>
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                               \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                        \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  delete _cloudProtocol;
#endif
}
   d92de:	4620      	mov	r0, r4
   d92e0:	bd38      	pop	{r3, r4, r5, pc}

000d92e2 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d92e2:	b430      	push	{r4, r5}
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
   d92e4:	7b05      	ldrb	r5, [r0, #12]
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d92e6:	9c02      	ldr	r4, [sp, #8]
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
   d92e8:	2d04      	cmp	r5, #4
   d92ea:	d103      	bne.n	d92f4 <_ZN7Ubidots3addEPcfS0_mj+0x12>
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
   d92ec:	6800      	ldr	r0, [r0, #0]
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
   d92ee:	bc30      	pop	{r4, r5}
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol == UBI_MESH) {
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
   d92f0:	f000 bdb2 	b.w	d9e58 <_ZN7UbiMesh3addEPKcfS1_mj>
  } else {
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
   d92f4:	9402      	str	r4, [sp, #8]
   d92f6:	6840      	ldr	r0, [r0, #4]
  _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                     dot_timestamp_millis);
#else
  Serial.println("[WARNING] Your board does not support the add() method");
#endif
}
   d92f8:	bc30      	pop	{r4, r5}
  if (_iotProtocol == UBI_MESH) {
    _protocolMesh->add(variable_label, value, context, dot_timestamp_seconds,
                       dot_timestamp_millis);
  } else {
    _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds,
                        dot_timestamp_millis);
   d92fa:	f7ff bd27 	b.w	d8d4c <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d92fe <_ZN7Ubidots3addEPcf>:
 * datalogger. Default NULL
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void Ubidots::add(char* variable_label, float value) {
   d92fe:	b507      	push	{r0, r1, r2, lr}
  add(variable_label, value, NULL, NULL, NULL);
   d9300:	2300      	movs	r3, #0
   d9302:	9300      	str	r3, [sp, #0]
   d9304:	461a      	mov	r2, r3
   d9306:	f7ff ffec 	bl	d92e2 <_ZN7Ubidots3addEPcfS0_mj>
}
   d930a:	b003      	add	sp, #12
   d930c:	f85d fb04 	ldr.w	pc, [sp], #4

000d9310 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool Ubidots::send(const char* device_label, PublishFlags flag) {
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON || \
    PLATFORM_ID == PLATFORM_PHOTON_DEV ||                             \
    PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION ||                      \
    PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION
  return _cloudProtocol->send(device_label, flag);
   d9310:	6840      	ldr	r0, [r0, #4]
   d9312:	f7ff bf2f 	b.w	d9174 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>

000d9316 <_ZN7Ubidots8setDebugEb>:
}

void Ubidots::setDebug(bool debug) {
  _debug = debug;
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol != UBI_MESH) {
   d9316:	7b03      	ldrb	r3, [r0, #12]
  return ERROR_VALUE;
#endif
}

void Ubidots::setDebug(bool debug) {
  _debug = debug;
   d9318:	7381      	strb	r1, [r0, #14]
#if PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_BORON
  if (_iotProtocol != UBI_MESH) {
   d931a:	2b04      	cmp	r3, #4
   d931c:	d002      	beq.n	d9324 <_ZN7Ubidots8setDebugEb+0xe>
    _cloudProtocol->setDebug(debug);
   d931e:	6840      	ldr	r0, [r0, #4]
   d9320:	f7ff bd54 	b.w	d8dcc <_ZN18UbiProtocolHandler8setDebugEb>
  } else {
    _protocolMesh->setDebug(debug);
   d9324:	6800      	ldr	r0, [r0, #0]
   d9326:	f000 bdeb 	b.w	d9f00 <_ZN7UbiMesh8setDebugEb>

000d932a <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
      }
    }
  }
   d932a:	b508      	push	{r3, lr}
   d932c:	f002 f878 	bl	db420 <HAL_Pin_Map>
   d9330:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d9334:	f002 b924 	b.w	db580 <HAL_Timer_Get_Milli_Seconds>

000d9338 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

   d9338:	7501      	strb	r1, [r0, #20]
   d933a:	4770      	bx	lr

000d933c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>:
    attempts += 1;
    delay(1000);
  }
}

float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d933c:	b570      	push	{r4, r5, r6, lr}
   d933e:	4604      	mov	r4, r0
  float result = ERROR_VALUE;

  // LV
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d9340:	2014      	movs	r0, #20
   d9342:	f002 fc03 	bl	dbb4c <malloc>
   d9346:	4606      	mov	r6, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d9348:	2014      	movs	r0, #20
   d934a:	f002 fbff 	bl	dbb4c <malloc>
   d934e:	4605      	mov	r5, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d9350:	4620      	mov	r0, r4
   d9352:	f009 f8df 	bl	e2514 <strlen>
   d9356:	4622      	mov	r2, r4

    for (int i = 0; i < len - 2; i++) {
   d9358:	2300      	movs	r3, #0
   d935a:	3802      	subs	r0, #2
   d935c:	4298      	cmp	r0, r3
   d935e:	dd17      	ble.n	d9390 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') &&
   d9360:	f812 1b01 	ldrb.w	r1, [r2], #1
   d9364:	290d      	cmp	r1, #13
   d9366:	d111      	bne.n	d938c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d9368:	7811      	ldrb	r1, [r2, #0]
   d936a:	290a      	cmp	r1, #10
   d936c:	d10e      	bne.n	d938c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d936e:	7851      	ldrb	r1, [r2, #1]
   d9370:	290d      	cmp	r1, #13
   d9372:	d10b      	bne.n	d938c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
   d9374:	7891      	ldrb	r1, [r2, #2]
   d9376:	290a      	cmp	r1, #10
   d9378:	d108      	bne.n	d938c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x50>
          (data[i + 3] == '\n')) {
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d937a:	1d19      	adds	r1, r3, #4
   d937c:	2214      	movs	r2, #20
   d937e:	4421      	add	r1, r4
   d9380:	4630      	mov	r0, r6
   d9382:	f009 f8e4 	bl	e254e <strncpy>
        parsed[20] = '\0';
   d9386:	2300      	movs	r3, #0
   d9388:	7533      	strb	r3, [r6, #20]
   d938a:	e001      	b.n	d9390 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x54>
  if (request_type == "LV") {
    char* parsed = (char*)malloc(sizeof(char) * 20);
    char* dst = (char*)malloc(sizeof(char) * 20);
    int len = strlen(data);  // Length of the answer char array from the server

    for (int i = 0; i < len - 2; i++) {
   d938c:	3301      	adds	r3, #1
   d938e:	e7e5      	b.n	d935c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0x20>
    /* Extracts the the value */

    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
   d9390:	210a      	movs	r1, #10
   d9392:	4630      	mov	r0, r6
   d9394:	f008 fb6e 	bl	e1a74 <strchr>
    if (pch == NULL) {
   d9398:	4604      	mov	r4, r0
   d939a:	b300      	cbz	r0, d93de <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa2>
      return result;
    }

    char* pch2 = strchr(pch + 1, '\n');
   d939c:	210a      	movs	r1, #10
   d939e:	3001      	adds	r0, #1
   d93a0:	f008 fb68 	bl	e1a74 <strchr>

    if (pch2 == NULL) {
   d93a4:	b1d8      	cbz	r0, d93de <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa2>
      return result;
    }

    index = (int)(pch2 - pch - 1);

    sprintf(dst, "%s", pch);
   d93a6:	4621      	mov	r1, r4
   d93a8:	4628      	mov	r0, r5
   d93aa:	f008 fb7b 	bl	e1aa4 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d93ae:	4628      	mov	r0, r5
   d93b0:	f009 f8b0 	bl	e2514 <strlen>
   d93b4:	4428      	add	r0, r5
   d93b6:	2300      	movs	r3, #0
   d93b8:	f800 3c01 	strb.w	r3, [r0, #-1]

    float result = atof(dst);
   d93bc:	4628      	mov	r0, r5
   d93be:	f007 ffab 	bl	e1318 <atof>
   d93c2:	ec51 0b10 	vmov	r0, r1, d0
   d93c6:	f007 fd6b 	bl	e0ea0 <__aeabi_d2f>
   d93ca:	4604      	mov	r4, r0

    free(dst);
   d93cc:	4628      	mov	r0, r5
   d93ce:	f002 fbc5 	bl	dbb5c <free>
    free(parsed);
   d93d2:	4630      	mov	r0, r6
   d93d4:	f002 fbc2 	bl	dbb5c <free>
    return result;
   d93d8:	ee00 4a10 	vmov	s0, r4
   d93dc:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t index = 0;

    // Creates pointers to split the value
    char* pch = strchr(parsed, '\n');
    if (pch == NULL) {
      return result;
   d93de:	ed9f 0a01 	vldr	s0, [pc, #4]	; d93e4 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1+0xa8>
    free(parsed);
    return result;
  }

  return ERROR_VALUE;
}
   d93e2:	bd70      	pop	{r4, r5, r6, pc}
   d93e4:	cda2425f 	.word	0xcda2425f

000d93e8 <_ZN7UbiHTTPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
   d93e8:	b530      	push	{r4, r5, lr}
                 const char* token) {
   d93ea:	4d07      	ldr	r5, [pc, #28]	; (d9408 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d93ec:	6005      	str	r5, [r0, #0]
   d93ee:	2500      	movs	r5, #0
   d93f0:	7505      	strb	r5, [r0, #20]
   d93f2:	f241 3588 	movw	r5, #5000	; 0x1388
   d93f6:	6185      	str	r5, [r0, #24]
  _host = host;
  _user_agent = user_agent;
   d93f8:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
   d93fa:	2505      	movs	r5, #5
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d93fc:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent,
                 const char* token) {
   d93fe:	7705      	strb	r5, [r0, #28]
  _host = host;
   d9400:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d9402:	60c3      	str	r3, [r0, #12]
  _port = port;
   d9404:	6102      	str	r2, [r0, #16]
}
   d9406:	bd30      	pop	{r4, r5, pc}
   d9408:	000e5190 	.word	0x000e5190

000d940c <_ZN7UbiHTTP9reconnectEPKci>:
 * Reconnects to the server
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
   d940c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9410:	4605      	mov	r5, r0
   d9412:	460f      	mov	r7, r1
   d9414:	4690      	mov	r8, r2
   d9416:	2400      	movs	r4, #0
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d9418:	481d      	ldr	r0, [pc, #116]	; (d9490 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
   d941a:	b2e6      	uxtb	r6, r4
   d941c:	f004 fcfb 	bl	dde16 <_ZN9TCPClient9connectedEv>
   d9420:	bb98      	cbnz	r0, d948a <_ZN7UbiHTTP9reconnectEPKci+0x7e>
   d9422:	7f2b      	ldrb	r3, [r5, #28]
   d9424:	42b3      	cmp	r3, r6
   d9426:	d801      	bhi.n	d942c <_ZN7UbiHTTP9reconnectEPKci+0x20>
   d9428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (_debug) {
   d942c:	7d2b      	ldrb	r3, [r5, #20]
   d942e:	b1c3      	cbz	r3, d9462 <_ZN7UbiHTTP9reconnectEPKci+0x56>
      Serial.print("Trying to connect to ");
   d9430:	f004 fa08 	bl	dd844 <_Z16_fetch_usbserialv>
   d9434:	4917      	ldr	r1, [pc, #92]	; (d9494 <_ZN7UbiHTTP9reconnectEPKci+0x88>)
   d9436:	f003 faa7 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(host);
   d943a:	f004 fa03 	bl	dd844 <_Z16_fetch_usbserialv>
   d943e:	4639      	mov	r1, r7
   d9440:	f003 faa2 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d9444:	f004 f9fe 	bl	dd844 <_Z16_fetch_usbserialv>
   d9448:	4913      	ldr	r1, [pc, #76]	; (d9498 <_ZN7UbiHTTP9reconnectEPKci+0x8c>)
   d944a:	f003 fa9d 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d944e:	f004 f9f9 	bl	dd844 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9452:	220a      	movs	r2, #10
   d9454:	4681      	mov	r9, r0
   d9456:	4631      	mov	r1, r6
   d9458:	f003 fab9 	bl	dc9ce <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d945c:	4648      	mov	r0, r9
   d945e:	f003 fa9e 	bl	dc99e <_ZN5Print7printlnEv>
    }
    _client_http_ubi.connect(host, port);
   d9462:	2300      	movs	r3, #0
   d9464:	fa1f f288 	uxth.w	r2, r8
   d9468:	4639      	mov	r1, r7
   d946a:	4809      	ldr	r0, [pc, #36]	; (d9490 <_ZN7UbiHTTP9reconnectEPKci+0x84>)
   d946c:	f004 fdaa 	bl	ddfc4 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d9470:	7d2b      	ldrb	r3, [r5, #20]
   d9472:	b123      	cbz	r3, d947e <_ZN7UbiHTTP9reconnectEPKci+0x72>
      Serial.println("Attempt finished");
   d9474:	f004 f9e6 	bl	dd844 <_Z16_fetch_usbserialv>
   d9478:	4908      	ldr	r1, [pc, #32]	; (d949c <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d947a:	f003 fa9c 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    }
    attempts += 1;
    delay(1000);
   d947e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d9482:	f003 fd73 	bl	dcf6c <delay>
   d9486:	3401      	adds	r4, #1
 *         false if timeout is reached.
 */

void UbiHTTP::reconnect(const char* host, const int port) {
  uint8_t attempts = 0;
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d9488:	e7c6      	b.n	d9418 <_ZN7UbiHTTP9reconnectEPKci+0xc>
   d948a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d948e:	bf00      	nop
   d9490:	2003e0c8 	.word	0x2003e0c8
   d9494:	000e4e34 	.word	0x000e4e34
   d9498:	000e4e4a 	.word	0x000e4e4a
   d949c:	000e519c 	.word	0x000e519c

000d94a0 <_ZN7UbiHTTP16readServerAnswerEPc>:

/**
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
   d94a0:	b570      	push	{r4, r5, r6, lr}
   d94a2:	1e4d      	subs	r5, r1, #1
   d94a4:	460c      	mov	r4, r1
   d94a6:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d94aa:	4606      	mov	r6, r0
   d94ac:	462b      	mov	r3, r5
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
    response[i] = '\0';
   d94ae:	2100      	movs	r1, #0
   d94b0:	f803 1f01 	strb.w	r1, [r3, #1]!
 * @arg response [Mandatory] Pointer to store the server's answer
 */

void UbiHTTP::readServerAnswer(char* response) {
  // Fills with zeros
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d94b4:	4293      	cmp	r3, r2
   d94b6:	d1fb      	bne.n	d94b0 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
    response[i] = '\0';
  }

  if (_debug) {
   d94b8:	7d33      	ldrb	r3, [r6, #20]
   d94ba:	b14b      	cbz	r3, d94d0 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d94bc:	f004 f9c2 	bl	dd844 <_Z16_fetch_usbserialv>
   d94c0:	4913      	ldr	r1, [pc, #76]	; (d9510 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>)
   d94c2:	f003 fa78 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d94c6:	f004 f9bd 	bl	dd844 <_Z16_fetch_usbserialv>
   d94ca:	4912      	ldr	r1, [pc, #72]	; (d9514 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d94cc:	f003 fa73 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d94d0:	f204 24ba 	addw	r4, r4, #698	; 0x2ba
  }

  int j = 0;

  while (_client_http_ubi.available()) {
   d94d4:	4810      	ldr	r0, [pc, #64]	; (d9518 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d94d6:	f004 fe89 	bl	de1ec <_ZN9TCPClient9availableEv>
   d94da:	b940      	cbnz	r0, d94ee <_ZN7UbiHTTP16readServerAnswerEPc+0x4e>
    if (j >= MAX_BUFFER_SIZE - 1) {
      break;
    }
  }

  if (_debug) {
   d94dc:	7d33      	ldrb	r3, [r6, #20]
   d94de:	b1b3      	cbz	r3, d950e <_ZN7UbiHTTP16readServerAnswerEPc+0x6e>
    Serial.println("\n----------");
   d94e0:	f004 f9b0 	bl	dd844 <_Z16_fetch_usbserialv>
   d94e4:	490d      	ldr	r1, [pc, #52]	; (d951c <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
  }
}
   d94e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      break;
    }
  }

  if (_debug) {
    Serial.println("\n----------");
   d94ea:	f003 ba64 	b.w	dc9b6 <_ZN5Print7printlnEPKc>
  }

  int j = 0;

  while (_client_http_ubi.available()) {
    response[j] = (char)_client_http_ubi.read();
   d94ee:	480a      	ldr	r0, [pc, #40]	; (d9518 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d94f0:	f004 fd25 	bl	ddf3e <_ZN9TCPClient4readEv>
   d94f4:	f805 0f01 	strb.w	r0, [r5, #1]!
    if (_debug) {
   d94f8:	7d33      	ldrb	r3, [r6, #20]
   d94fa:	b12b      	cbz	r3, d9508 <_ZN7UbiHTTP16readServerAnswerEPc+0x68>
      Serial.write(response[j]);
   d94fc:	f004 f9a2 	bl	dd844 <_Z16_fetch_usbserialv>
   d9500:	6803      	ldr	r3, [r0, #0]
   d9502:	7829      	ldrb	r1, [r5, #0]
   d9504:	689b      	ldr	r3, [r3, #8]
   d9506:	4798      	blx	r3
    }
    j++;
    if (j >= MAX_BUFFER_SIZE - 1) {
   d9508:	42a5      	cmp	r5, r4
   d950a:	d1e3      	bne.n	d94d4 <_ZN7UbiHTTP16readServerAnswerEPc+0x34>
   d950c:	e7e6      	b.n	d94dc <_ZN7UbiHTTP16readServerAnswerEPc+0x3c>
   d950e:	bd70      	pop	{r4, r5, r6, pc}
   d9510:	000e4ea5 	.word	0x000e4ea5
   d9514:	000e4e91 	.word	0x000e4e91
   d9518:	2003e0c8 	.word	0x2003e0c8
   d951c:	000e4ea4 	.word	0x000e4ea4

000d9520 <_ZN7UbiHTTP16waitServerAnswerEv>:
 * Function to wait for the host answer up to the already set _timeout.
 * @return true once the host answer buffer length is greater than zero,
 *         false if timeout is reached.
 */

bool UbiHTTP::waitServerAnswer() {
   d9520:	b570      	push	{r4, r5, r6, lr}
   d9522:	4605      	mov	r5, r0
  int timeout = 0;
   d9524:	2400      	movs	r4, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d9526:	480d      	ldr	r0, [pc, #52]	; (d955c <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
   d9528:	f004 fe60 	bl	de1ec <_ZN9TCPClient9availableEv>
   d952c:	4606      	mov	r6, r0
   d952e:	b910      	cbnz	r0, d9536 <_ZN7UbiHTTP16waitServerAnswerEv+0x16>
   d9530:	69ab      	ldr	r3, [r5, #24]
   d9532:	429c      	cmp	r4, r3
   d9534:	db01      	blt.n	d953a <_ZN7UbiHTTP16waitServerAnswerEv+0x1a>
        Serial.println("timeout, could not read any response from the host");
      }
      return false;
    }
  }
  return true;
   d9536:	2001      	movs	r0, #1
   d9538:	bd70      	pop	{r4, r5, r6, pc}

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
    delay(1);
   d953a:	2001      	movs	r0, #1
   d953c:	f003 fd16 	bl	dcf6c <delay>
    if (timeout > _timeout - 1) {
   d9540:	69ab      	ldr	r3, [r5, #24]
 */

bool UbiHTTP::waitServerAnswer() {
  int timeout = 0;
  while (!_client_http_ubi.available() && timeout < _timeout) {
    timeout++;
   d9542:	3401      	adds	r4, #1
    delay(1);
    if (timeout > _timeout - 1) {
   d9544:	429c      	cmp	r4, r3
   d9546:	dbee      	blt.n	d9526 <_ZN7UbiHTTP16waitServerAnswerEv+0x6>
      if (_debug) {
   d9548:	7d28      	ldrb	r0, [r5, #20]
   d954a:	b130      	cbz	r0, d955a <_ZN7UbiHTTP16waitServerAnswerEv+0x3a>
        Serial.println("timeout, could not read any response from the host");
   d954c:	f004 f97a 	bl	dd844 <_Z16_fetch_usbserialv>
   d9550:	4903      	ldr	r1, [pc, #12]	; (d9560 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d9552:	f003 fa30 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d9556:	4630      	mov	r0, r6
   d9558:	bd70      	pop	{r4, r5, r6, pc}
      }
      return false;
    }
  }
  return true;
}
   d955a:	bd70      	pop	{r4, r5, r6, pc}
   d955c:	2003e0c8 	.word	0x2003e0c8
   d9560:	000e4e5e 	.word	0x000e4e5e

000d9564 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
   d9564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9566:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d9568:	6902      	ldr	r2, [r0, #16]
   d956a:	6841      	ldr	r1, [r0, #4]
  delete[] _user_agent;
  delete[] _token;
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
   d956c:	4604      	mov	r4, r0
   d956e:	461e      	mov	r6, r3
  reconnect(_host, _port);
   d9570:	f7ff ff4c 	bl	d940c <_ZN7UbiHTTP9reconnectEPKci>
  bool result = false;

  if (_client_http_ubi.connected()) {  // Connect to the host
   d9574:	4880      	ldr	r0, [pc, #512]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d9576:	f004 fc4e 	bl	dde16 <_ZN9TCPClient9connectedEv>
   d957a:	4605      	mov	r5, r0
   d957c:	2800      	cmp	r0, #0
   d957e:	f000 80ec 	beq.w	d975a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f6>
    /* Builds the request POST - Please reference this link to know all the
     * request's structures https://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d9582:	497e      	ldr	r1, [pc, #504]	; (d977c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d9584:	487c      	ldr	r0, [pc, #496]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d9586:	f003 f9ff 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d958a:	4639      	mov	r1, r7
   d958c:	487a      	ldr	r0, [pc, #488]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d958e:	f003 f9fb 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d9592:	497b      	ldr	r1, [pc, #492]	; (d9780 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d9594:	4878      	ldr	r0, [pc, #480]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d9596:	f003 f9f7 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d959a:	497a      	ldr	r1, [pc, #488]	; (d9784 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d959c:	4876      	ldr	r0, [pc, #472]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d959e:	f003 f9f3 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d95a2:	6861      	ldr	r1, [r4, #4]
   d95a4:	4874      	ldr	r0, [pc, #464]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d95a6:	f003 f9ef 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d95aa:	4977      	ldr	r1, [pc, #476]	; (d9788 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d95ac:	4872      	ldr	r0, [pc, #456]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d95ae:	f003 f9eb 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d95b2:	4976      	ldr	r1, [pc, #472]	; (d978c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
   d95b4:	4870      	ldr	r0, [pc, #448]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d95b6:	f003 f9e7 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d95ba:	68a1      	ldr	r1, [r4, #8]
   d95bc:	486e      	ldr	r0, [pc, #440]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d95be:	f003 f9e3 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d95c2:	4971      	ldr	r1, [pc, #452]	; (d9788 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d95c4:	486c      	ldr	r0, [pc, #432]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d95c6:	f003 f9df 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d95ca:	4971      	ldr	r1, [pc, #452]	; (d9790 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d95cc:	486a      	ldr	r0, [pc, #424]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d95ce:	f003 f9db 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d95d2:	68e1      	ldr	r1, [r4, #12]
   d95d4:	4868      	ldr	r0, [pc, #416]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d95d6:	f003 f9d7 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d95da:	496b      	ldr	r1, [pc, #428]	; (d9788 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d95dc:	4866      	ldr	r0, [pc, #408]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d95de:	f003 f9d3 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d95e2:	496c      	ldr	r1, [pc, #432]	; (d9794 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
   d95e4:	4864      	ldr	r0, [pc, #400]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d95e6:	f003 f9cf 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d95ea:	496b      	ldr	r1, [pc, #428]	; (d9798 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
   d95ec:	4862      	ldr	r0, [pc, #392]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d95ee:	f003 f9cb 	bl	dc988 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d95f2:	4630      	mov	r0, r6
   d95f4:	f008 ff8e 	bl	e2514 <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d95f8:	4968      	ldr	r1, [pc, #416]	; (d979c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
    _client_http_ubi.print(F("X-Auth-Token: "));
    _client_http_ubi.print(_token);
    _client_http_ubi.print(F("\r\n"));
    _client_http_ubi.print(F("Connection: close\r\n"));
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
    int content_length = strlen(payload);
   d95fa:	4605      	mov	r5, r0
    _client_http_ubi.print(F("Content-Length: "));
   d95fc:	485e      	ldr	r0, [pc, #376]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d95fe:	f003 f9c3 	bl	dc988 <_ZN5Print5printEPKc>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d9602:	2d00      	cmp	r5, #0
   d9604:	da05      	bge.n	d9612 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xae>
            t = print('-');
   d9606:	212d      	movs	r1, #45	; 0x2d
   d9608:	485b      	ldr	r0, [pc, #364]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d960a:	f003 f9c1 	bl	dc990 <_ZN5Print5printEc>
            val = -n;
   d960e:	4269      	negs	r1, r5
   d9610:	e000      	b.n	d9614 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0xb0>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d9612:	4629      	mov	r1, r5
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9614:	220a      	movs	r2, #10
   d9616:	4858      	ldr	r0, [pc, #352]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d9618:	f003 f9d9 	bl	dc9ce <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(content_length);
    _client_http_ubi.print(F("\r\n\r\n"));
   d961c:	4960      	ldr	r1, [pc, #384]	; (d97a0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
   d961e:	4856      	ldr	r0, [pc, #344]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d9620:	f003 f9b2 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d9624:	4631      	mov	r1, r6
   d9626:	4854      	ldr	r0, [pc, #336]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d9628:	f003 f9ae 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d962c:	4956      	ldr	r1, [pc, #344]	; (d9788 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d962e:	4852      	ldr	r0, [pc, #328]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d9630:	f003 f9aa 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d9634:	4850      	ldr	r0, [pc, #320]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d9636:	f004 fbed 	bl	dde14 <_ZN9TCPClient5flushEv>

    if (_debug) {
   d963a:	7d23      	ldrb	r3, [r4, #20]
   d963c:	2b00      	cmp	r3, #0
   d963e:	d071      	beq.n	d9724 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c0>
      Serial.println(F("Making request to Ubidots:\n"));
   d9640:	f004 f900 	bl	dd844 <_Z16_fetch_usbserialv>
   d9644:	4957      	ldr	r1, [pc, #348]	; (d97a4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x240>)
   d9646:	f003 f9b6 	bl	dc9b6 <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d964a:	f004 f8fb 	bl	dd844 <_Z16_fetch_usbserialv>
   d964e:	494b      	ldr	r1, [pc, #300]	; (d977c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d9650:	f003 f99a 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d9654:	f004 f8f6 	bl	dd844 <_Z16_fetch_usbserialv>
   d9658:	4639      	mov	r1, r7
   d965a:	f003 f995 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d965e:	f004 f8f1 	bl	dd844 <_Z16_fetch_usbserialv>
   d9662:	4947      	ldr	r1, [pc, #284]	; (d9780 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d9664:	f003 f990 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d9668:	f004 f8ec 	bl	dd844 <_Z16_fetch_usbserialv>
   d966c:	4945      	ldr	r1, [pc, #276]	; (d9784 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d966e:	f003 f98b 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d9672:	f004 f8e7 	bl	dd844 <_Z16_fetch_usbserialv>
   d9676:	6861      	ldr	r1, [r4, #4]
   d9678:	f003 f986 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d967c:	f004 f8e2 	bl	dd844 <_Z16_fetch_usbserialv>
   d9680:	4941      	ldr	r1, [pc, #260]	; (d9788 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d9682:	f003 f981 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d9686:	f004 f8dd 	bl	dd844 <_Z16_fetch_usbserialv>
   d968a:	4940      	ldr	r1, [pc, #256]	; (d978c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
   d968c:	f003 f97c 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d9690:	f004 f8d8 	bl	dd844 <_Z16_fetch_usbserialv>
   d9694:	68a1      	ldr	r1, [r4, #8]
   d9696:	f003 f977 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d969a:	f004 f8d3 	bl	dd844 <_Z16_fetch_usbserialv>
   d969e:	493a      	ldr	r1, [pc, #232]	; (d9788 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d96a0:	f003 f972 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d96a4:	f004 f8ce 	bl	dd844 <_Z16_fetch_usbserialv>
   d96a8:	4939      	ldr	r1, [pc, #228]	; (d9790 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d96aa:	f003 f96d 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d96ae:	f004 f8c9 	bl	dd844 <_Z16_fetch_usbserialv>
   d96b2:	68e1      	ldr	r1, [r4, #12]
   d96b4:	f003 f968 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d96b8:	f004 f8c4 	bl	dd844 <_Z16_fetch_usbserialv>
   d96bc:	4932      	ldr	r1, [pc, #200]	; (d9788 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d96be:	f003 f963 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d96c2:	f004 f8bf 	bl	dd844 <_Z16_fetch_usbserialv>
   d96c6:	4933      	ldr	r1, [pc, #204]	; (d9794 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x230>)
   d96c8:	f003 f95e 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d96cc:	f004 f8ba 	bl	dd844 <_Z16_fetch_usbserialv>
   d96d0:	4931      	ldr	r1, [pc, #196]	; (d9798 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x234>)
   d96d2:	f003 f959 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d96d6:	f004 f8b5 	bl	dd844 <_Z16_fetch_usbserialv>
   d96da:	4930      	ldr	r1, [pc, #192]	; (d979c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x238>)
   d96dc:	f003 f954 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d96e0:	f004 f8b0 	bl	dd844 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d96e4:	2d00      	cmp	r5, #0
   d96e6:	4607      	mov	r7, r0
   d96e8:	da03      	bge.n	d96f2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x18e>
            t = print('-');
   d96ea:	212d      	movs	r1, #45	; 0x2d
   d96ec:	f003 f950 	bl	dc990 <_ZN5Print5printEc>
            val = -n;
   d96f0:	426d      	negs	r5, r5
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d96f2:	220a      	movs	r2, #10
   d96f4:	4629      	mov	r1, r5
   d96f6:	4638      	mov	r0, r7
   d96f8:	f003 f969 	bl	dc9ce <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d96fc:	f004 f8a2 	bl	dd844 <_Z16_fetch_usbserialv>
   d9700:	4927      	ldr	r1, [pc, #156]	; (d97a0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x23c>)
   d9702:	f003 f941 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(payload);
   d9706:	f004 f89d 	bl	dd844 <_Z16_fetch_usbserialv>
   d970a:	4631      	mov	r1, r6
   d970c:	f003 f93c 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d9710:	f004 f898 	bl	dd844 <_Z16_fetch_usbserialv>
   d9714:	491c      	ldr	r1, [pc, #112]	; (d9788 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d9716:	f003 f937 	bl	dc988 <_ZN5Print5printEPKc>

      Serial.println("waiting for server answer ...");
   d971a:	f004 f893 	bl	dd844 <_Z16_fetch_usbserialv>
   d971e:	4922      	ldr	r1, [pc, #136]	; (d97a8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x244>)
   d9720:	f003 f949 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    }

    /* Reads the response from the server */
    waitServerAnswer();
   d9724:	4620      	mov	r0, r4
   d9726:	f7ff fefb 	bl	d9520 <_ZN7UbiHTTP16waitServerAnswerEv>

    if (_debug) {
   d972a:	7d23      	ldrb	r3, [r4, #20]
   d972c:	b90b      	cbnz	r3, d9732 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ce>
        char c = _client_http_ubi.read();
        Serial.print(c);
      }
    }

    result = true;
   d972e:	2401      	movs	r4, #1
   d9730:	e01d      	b.n	d976e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>

    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
   d9732:	f004 f887 	bl	dd844 <_Z16_fetch_usbserialv>
   d9736:	491d      	ldr	r1, [pc, #116]	; (d97ac <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x248>)
   d9738:	f003 f93d 	bl	dc9b6 <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d973c:	480e      	ldr	r0, [pc, #56]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d973e:	f004 fd55 	bl	de1ec <_ZN9TCPClient9availableEv>
   d9742:	2800      	cmp	r0, #0
   d9744:	d0f3      	beq.n	d972e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ca>
        char c = _client_http_ubi.read();
   d9746:	480c      	ldr	r0, [pc, #48]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d9748:	f004 fbf9 	bl	ddf3e <_ZN9TCPClient4readEv>
   d974c:	4604      	mov	r4, r0
        Serial.print(c);
   d974e:	f004 f879 	bl	dd844 <_Z16_fetch_usbserialv>
   d9752:	b2e1      	uxtb	r1, r4
   d9754:	f003 f91c 	bl	dc990 <_ZN5Print5printEc>
    /* Reads the response from the server */
    waitServerAnswer();

    if (_debug) {
      Serial.println("\nUbidots' Server response:\n");
      while (_client_http_ubi.available()) {
   d9758:	e7f0      	b.n	d973c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1d8>
    }

    result = true;

  } else {
    if (_debug) {
   d975a:	7d23      	ldrb	r3, [r4, #20]
   d975c:	b133      	cbz	r3, d976c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>
      Serial.println("Could not send data to ubidots using HTTP");
   d975e:	f004 f871 	bl	dd844 <_Z16_fetch_usbserialv>
   d9762:	4913      	ldr	r1, [pc, #76]	; (d97b0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x24c>)
   d9764:	f003 f927 	bl	dc9b6 <_ZN5Print7printlnEPKc>
}

bool UbiHTTP::sendData(const char* device_label, const char* device_name,
                       char* payload, UbiFlags* flags) {
  reconnect(_host, _port);
  bool result = false;
   d9768:	462c      	mov	r4, r5
   d976a:	e000      	b.n	d976e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20a>
   d976c:	461c      	mov	r4, r3
    if (_debug) {
      Serial.println("Could not send data to ubidots using HTTP");
    }
  }

  _client_http_ubi.stop();
   d976e:	4802      	ldr	r0, [pc, #8]	; (d9778 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d9770:	f004 fd24 	bl	de1bc <_ZN9TCPClient4stopEv>
  return result;
}
   d9774:	4620      	mov	r0, r4
   d9776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9778:	2003e0c8 	.word	0x2003e0c8
   d977c:	000e51ad 	.word	0x000e51ad
   d9780:	000e51c5 	.word	0x000e51c5
   d9784:	000e51d1 	.word	0x000e51d1
   d9788:	000e52f5 	.word	0x000e52f5
   d978c:	000e51d8 	.word	0x000e51d8
   d9790:	000e51e5 	.word	0x000e51e5
   d9794:	000e51f4 	.word	0x000e51f4
   d9798:	000e5208 	.word	0x000e5208
   d979c:	000e5229 	.word	0x000e5229
   d97a0:	000e52f3 	.word	0x000e52f3
   d97a4:	000e523a 	.word	0x000e523a
   d97a8:	000e5256 	.word	0x000e5256
   d97ac:	000e5274 	.word	0x000e5274
   d97b0:	000e5290 	.word	0x000e5290

000d97b4 <_ZN7UbiHTTP3getEPKcS1_>:

float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d97b4:	b570      	push	{r4, r5, r6, lr}
   d97b6:	ed2d 8b02 	vpush	{d8}
   d97ba:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d97bc:	2300      	movs	r3, #0

  _client_http_ubi.stop();
  return result;
}

float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d97be:	460e      	mov	r6, r1
   d97c0:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d97c2:	6841      	ldr	r1, [r0, #4]
   d97c4:	4868      	ldr	r0, [pc, #416]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d97c6:	2250      	movs	r2, #80	; 0x50
   d97c8:	f004 fbfc 	bl	ddfc4 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d97cc:	4620      	mov	r0, r4
   d97ce:	2250      	movs	r2, #80	; 0x50
   d97d0:	6861      	ldr	r1, [r4, #4]
   d97d2:	f7ff fe1b 	bl	d940c <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d97d6:	4864      	ldr	r0, [pc, #400]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d97d8:	f004 fb1d 	bl	dde16 <_ZN9TCPClient9connectedEv>
   d97dc:	2800      	cmp	r0, #0
   d97de:	f000 80b4 	beq.w	d994a <_ZN7UbiHTTP3getEPKcS1_+0x196>
    /* Builds the request GET - Please reference this link to know all the
     * request's structures HTTPS://ubidots.com/docs/api/ */
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d97e2:	4962      	ldr	r1, [pc, #392]	; (d996c <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d97e4:	4860      	ldr	r0, [pc, #384]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d97e6:	f003 f8cf 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d97ea:	4631      	mov	r1, r6
   d97ec:	485e      	ldr	r0, [pc, #376]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d97ee:	f003 f8cb 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d97f2:	495f      	ldr	r1, [pc, #380]	; (d9970 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d97f4:	485c      	ldr	r0, [pc, #368]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d97f6:	f003 f8c7 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d97fa:	4629      	mov	r1, r5
   d97fc:	485a      	ldr	r0, [pc, #360]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d97fe:	f003 f8c3 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d9802:	495c      	ldr	r1, [pc, #368]	; (d9974 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d9804:	4858      	ldr	r0, [pc, #352]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9806:	f003 f8bf 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d980a:	495b      	ldr	r1, [pc, #364]	; (d9978 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d980c:	4856      	ldr	r0, [pc, #344]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d980e:	f003 f8bb 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d9812:	495a      	ldr	r1, [pc, #360]	; (d997c <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d9814:	4854      	ldr	r0, [pc, #336]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9816:	f003 f8b7 	bl	dc988 <_ZN5Print5printEPKc>
   d981a:	220a      	movs	r2, #10
   d981c:	2150      	movs	r1, #80	; 0x50
   d981e:	4852      	ldr	r0, [pc, #328]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9820:	f003 f8d5 	bl	dc9ce <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(UBIDOTS_HTTP_PORT);
    _client_http_ubi.print("\r\n");
   d9824:	4956      	ldr	r1, [pc, #344]	; (d9980 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d9826:	4850      	ldr	r0, [pc, #320]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9828:	f003 f8ae 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d982c:	4955      	ldr	r1, [pc, #340]	; (d9984 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d982e:	484e      	ldr	r0, [pc, #312]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9830:	f003 f8aa 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d9834:	68a1      	ldr	r1, [r4, #8]
   d9836:	484c      	ldr	r0, [pc, #304]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9838:	f003 f8a6 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d983c:	4950      	ldr	r1, [pc, #320]	; (d9980 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d983e:	484a      	ldr	r0, [pc, #296]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9840:	f003 f8a2 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d9844:	4950      	ldr	r1, [pc, #320]	; (d9988 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>)
   d9846:	4848      	ldr	r0, [pc, #288]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9848:	f003 f89e 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d984c:	68e1      	ldr	r1, [r4, #12]
   d984e:	4846      	ldr	r0, [pc, #280]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9850:	f003 f89a 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d9854:	494a      	ldr	r1, [pc, #296]	; (d9980 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d9856:	4844      	ldr	r0, [pc, #272]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9858:	f003 f896 	bl	dc988 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d985c:	494b      	ldr	r1, [pc, #300]	; (d998c <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d985e:	4842      	ldr	r0, [pc, #264]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d9860:	f003 f892 	bl	dc988 <_ZN5Print5printEPKc>

    if (_debug) {
   d9864:	7d23      	ldrb	r3, [r4, #20]
   d9866:	2b00      	cmp	r3, #0
   d9868:	d050      	beq.n	d990c <_ZN7UbiHTTP3getEPKcS1_+0x158>
      Serial.print("GET /api/v1.6/devices/");
   d986a:	f003 ffeb 	bl	dd844 <_Z16_fetch_usbserialv>
   d986e:	493f      	ldr	r1, [pc, #252]	; (d996c <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d9870:	f003 f88a 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d9874:	f003 ffe6 	bl	dd844 <_Z16_fetch_usbserialv>
   d9878:	4631      	mov	r1, r6
   d987a:	f003 f885 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("/");
   d987e:	f003 ffe1 	bl	dd844 <_Z16_fetch_usbserialv>
   d9882:	493b      	ldr	r1, [pc, #236]	; (d9970 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d9884:	f003 f880 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d9888:	f003 ffdc 	bl	dd844 <_Z16_fetch_usbserialv>
   d988c:	4629      	mov	r1, r5
   d988e:	f003 f87b 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d9892:	f003 ffd7 	bl	dd844 <_Z16_fetch_usbserialv>
   d9896:	4937      	ldr	r1, [pc, #220]	; (d9974 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d9898:	f003 f876 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d989c:	f003 ffd2 	bl	dd844 <_Z16_fetch_usbserialv>
   d98a0:	4935      	ldr	r1, [pc, #212]	; (d9978 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d98a2:	f003 f871 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d98a6:	f003 ffcd 	bl	dd844 <_Z16_fetch_usbserialv>
   d98aa:	4934      	ldr	r1, [pc, #208]	; (d997c <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d98ac:	f003 f86c 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(UBIDOTS_HTTP_PORT);
   d98b0:	f003 ffc8 	bl	dd844 <_Z16_fetch_usbserialv>
   d98b4:	220a      	movs	r2, #10
   d98b6:	2150      	movs	r1, #80	; 0x50
   d98b8:	f003 f889 	bl	dc9ce <_ZN5Print11printNumberEmh>
      Serial.print("\r\n");
   d98bc:	f003 ffc2 	bl	dd844 <_Z16_fetch_usbserialv>
   d98c0:	492f      	ldr	r1, [pc, #188]	; (d9980 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d98c2:	f003 f861 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d98c6:	f003 ffbd 	bl	dd844 <_Z16_fetch_usbserialv>
   d98ca:	492e      	ldr	r1, [pc, #184]	; (d9984 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d98cc:	f003 f85c 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d98d0:	f003 ffb8 	bl	dd844 <_Z16_fetch_usbserialv>
   d98d4:	68a1      	ldr	r1, [r4, #8]
   d98d6:	f003 f857 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d98da:	f003 ffb3 	bl	dd844 <_Z16_fetch_usbserialv>
   d98de:	4928      	ldr	r1, [pc, #160]	; (d9980 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d98e0:	f003 f852 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d98e4:	f003 ffae 	bl	dd844 <_Z16_fetch_usbserialv>
   d98e8:	4927      	ldr	r1, [pc, #156]	; (d9988 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>)
   d98ea:	f003 f84d 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d98ee:	f003 ffa9 	bl	dd844 <_Z16_fetch_usbserialv>
   d98f2:	68e1      	ldr	r1, [r4, #12]
   d98f4:	f003 f848 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d98f8:	f003 ffa4 	bl	dd844 <_Z16_fetch_usbserialv>
   d98fc:	4920      	ldr	r1, [pc, #128]	; (d9980 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d98fe:	f003 f843 	bl	dc988 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d9902:	f003 ff9f 	bl	dd844 <_Z16_fetch_usbserialv>
   d9906:	4921      	ldr	r1, [pc, #132]	; (d998c <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d9908:	f003 f83e 	bl	dc988 <_ZN5Print5printEPKc>
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
   d990c:	4620      	mov	r0, r4
   d990e:	f7ff fe07 	bl	d9520 <_ZN7UbiHTTP16waitServerAnswerEv>
   d9912:	b928      	cbnz	r0, d9920 <_ZN7UbiHTTP3getEPKcS1_+0x16c>
      _client_http_ubi.stop();
   d9914:	4814      	ldr	r0, [pc, #80]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
      return ERROR_VALUE;
   d9916:	ed9f 8a1e 	vldr	s16, [pc, #120]	; d9990 <_ZN7UbiHTTP3getEPKcS1_+0x1dc>
      Serial.print("Content-Type: application/json\r\n\r\n");
    }

    /* Waits for the host's answer */
    if (!waitServerAnswer()) {
      _client_http_ubi.stop();
   d991a:	f004 fc4f 	bl	de1bc <_ZN9TCPClient4stopEv>
   d991e:	e01d      	b.n	d995c <_ZN7UbiHTTP3getEPKcS1_+0x1a8>
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d9920:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d9924:	f002 f912 	bl	dbb4c <malloc>
    readServerAnswer(response);
   d9928:	4601      	mov	r1, r0
      _client_http_ubi.stop();
      return ERROR_VALUE;
    }

    /* Reads the response from the server */
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d992a:	4605      	mov	r5, r0
    readServerAnswer(response);
   d992c:	4620      	mov	r0, r4
   d992e:	f7ff fdb7 	bl	d94a0 <_ZN7UbiHTTP16readServerAnswerEPc>
   d9932:	4628      	mov	r0, r5
   d9934:	f7ff fd02 	bl	d933c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.1>

    /* Parses the answer */
    float value = parseHttpAnswer("LV", response);
    _client_http_ubi.stop();
   d9938:	480b      	ldr	r0, [pc, #44]	; (d9968 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d993a:	eeb0 8a40 	vmov.f32	s16, s0
   d993e:	f004 fc3d 	bl	de1bc <_ZN9TCPClient4stopEv>
    free(response);
   d9942:	4628      	mov	r0, r5
   d9944:	f002 f90a 	bl	dbb5c <free>
   d9948:	e008      	b.n	d995c <_ZN7UbiHTTP3getEPKcS1_+0x1a8>
    return value;
  }

  if (_debug) {
   d994a:	7d23      	ldrb	r3, [r4, #20]
   d994c:	2b00      	cmp	r3, #0
   d994e:	d0e1      	beq.n	d9914 <_ZN7UbiHTTP3getEPKcS1_+0x160>
    Serial.println("Connection Failed ubidots - Try Again");
   d9950:	f003 ff78 	bl	dd844 <_Z16_fetch_usbserialv>
   d9954:	490f      	ldr	r1, [pc, #60]	; (d9994 <_ZN7UbiHTTP3getEPKcS1_+0x1e0>)
   d9956:	f003 f82e 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d995a:	e7db      	b.n	d9914 <_ZN7UbiHTTP3getEPKcS1_+0x160>
  }

  _client_http_ubi.stop();
  return ERROR_VALUE;
}
   d995c:	eeb0 0a48 	vmov.f32	s0, s16
   d9960:	ecbd 8b02 	vpop	{d8}
   d9964:	bd70      	pop	{r4, r5, r6, pc}
   d9966:	bf00      	nop
   d9968:	2003e0c8 	.word	0x2003e0c8
   d996c:	000e52ba 	.word	0x000e52ba
   d9970:	000e52cf 	.word	0x000e52cf
   d9974:	000e52d1 	.word	0x000e52d1
   d9978:	000e51c5 	.word	0x000e51c5
   d997c:	000e51d1 	.word	0x000e51d1
   d9980:	000e52f5 	.word	0x000e52f5
   d9984:	000e51d8 	.word	0x000e51d8
   d9988:	000e51e5 	.word	0x000e51e5
   d998c:	000e52d5 	.word	0x000e52d5
   d9990:	cda2425f 	.word	0xcda2425f
   d9994:	000e52f8 	.word	0x000e52f8

000d9998 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

   d9998:	b510      	push	{r4, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d999a:	4c06      	ldr	r4, [pc, #24]	; (d99b4 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d999c:	f001 fd40 	bl	db420 <HAL_Pin_Map>
   d99a0:	4620      	mov	r0, r4
   d99a2:	f004 fcc3 	bl	de32c <_ZN9TCPClientC1Ev>
   d99a6:	4620      	mov	r0, r4
   d99a8:	4a03      	ldr	r2, [pc, #12]	; (d99b8 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d99aa:	4904      	ldr	r1, [pc, #16]	; (d99bc <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
   d99ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d99b0:	f004 be36 	b.w	de620 <__aeabi_atexit>
   d99b4:	2003e0c8 	.word	0x2003e0c8
   d99b8:	2003bc08 	.word	0x2003bc08
   d99bc:	000d8919 	.word	0x000d8919

000d99c0 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:
    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
   d99c0:	6803      	ldr	r3, [r0, #0]
   d99c2:	4718      	bx	r3

000d99c4 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d99c4:	2a01      	cmp	r2, #1
   d99c6:	d002      	beq.n	d99ce <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
   d99c8:	2a02      	cmp	r2, #2
   d99ca:	d002      	beq.n	d99d2 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
   d99cc:	e004      	b.n	d99d8 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d99ce:	6001      	str	r1, [r0, #0]
	      break;
   d99d0:	e002      	b.n	d99d8 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d99d2:	680b      	ldr	r3, [r1, #0]
   d99d4:	b100      	cbz	r0, d99d8 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
   d99d6:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d99d8:	2000      	movs	r0, #0
   d99da:	4770      	bx	lr

000d99dc <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d99dc:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance =
      new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d99de:	201c      	movs	r0, #28
   d99e0:	f7fa fb5b 	bl	d409a <_Znwj>
   d99e4:	4604      	mov	r4, r0
   d99e6:	b148      	cbz	r0, d99fc <_Z10builderTcpv+0x20>
   d99e8:	4b06      	ldr	r3, [pc, #24]	; (d9a04 <_Z10builderTcpv+0x28>)
   d99ea:	4907      	ldr	r1, [pc, #28]	; (d9a08 <_Z10builderTcpv+0x2c>)
   d99ec:	681b      	ldr	r3, [r3, #0]
   d99ee:	9300      	str	r3, [sp, #0]
   d99f0:	f242 3234 	movw	r2, #9012	; 0x2334
   d99f4:	4b05      	ldr	r3, [pc, #20]	; (d9a0c <_Z10builderTcpv+0x30>)
   d99f6:	6809      	ldr	r1, [r1, #0]
   d99f8:	f7fe ffb2 	bl	d8960 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d99fc:	4620      	mov	r0, r4
   d99fe:	b002      	add	sp, #8
   d9a00:	bd10      	pop	{r4, pc}
   d9a02:	bf00      	nop
   d9a04:	2003e11c 	.word	0x2003e11c
   d9a08:	2003e120 	.word	0x2003e120
   d9a0c:	000e5016 	.word	0x000e5016

000d9a10 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d9a10:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance =
      new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d9a12:	2020      	movs	r0, #32
   d9a14:	f7fa fb41 	bl	d409a <_Znwj>
   d9a18:	4604      	mov	r4, r0
   d9a1a:	b140      	cbz	r0, d9a2e <_Z11builderHttpv+0x1e>
   d9a1c:	4b05      	ldr	r3, [pc, #20]	; (d9a34 <_Z11builderHttpv+0x24>)
   d9a1e:	4906      	ldr	r1, [pc, #24]	; (d9a38 <_Z11builderHttpv+0x28>)
   d9a20:	681b      	ldr	r3, [r3, #0]
   d9a22:	9300      	str	r3, [sp, #0]
   d9a24:	2250      	movs	r2, #80	; 0x50
   d9a26:	4b05      	ldr	r3, [pc, #20]	; (d9a3c <_Z11builderHttpv+0x2c>)
   d9a28:	6809      	ldr	r1, [r1, #0]
   d9a2a:	f7ff fcdd 	bl	d93e8 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d9a2e:	4620      	mov	r0, r4
   d9a30:	b002      	add	sp, #8
   d9a32:	bd10      	pop	{r4, pc}
   d9a34:	2003e11c 	.word	0x2003e11c
   d9a38:	2003e120 	.word	0x2003e120
   d9a3c:	000e5016 	.word	0x000e5016

000d9a40 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d9a40:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance =
      new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d9a42:	201c      	movs	r0, #28
   d9a44:	f7fa fb29 	bl	d409a <_Znwj>
   d9a48:	4604      	mov	r4, r0
   d9a4a:	b148      	cbz	r0, d9a60 <_Z10builderUdpv+0x20>
   d9a4c:	4b06      	ldr	r3, [pc, #24]	; (d9a68 <_Z10builderUdpv+0x28>)
   d9a4e:	4907      	ldr	r1, [pc, #28]	; (d9a6c <_Z10builderUdpv+0x2c>)
   d9a50:	681b      	ldr	r3, [r3, #0]
   d9a52:	9300      	str	r3, [sp, #0]
   d9a54:	f242 3234 	movw	r2, #9012	; 0x2334
   d9a58:	4b05      	ldr	r3, [pc, #20]	; (d9a70 <_Z10builderUdpv+0x30>)
   d9a5a:	6809      	ldr	r1, [r1, #0]
   d9a5c:	f000 fa68 	bl	d9f30 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d9a60:	4620      	mov	r0, r4
   d9a62:	b002      	add	sp, #8
   d9a64:	bd10      	pop	{r4, pc}
   d9a66:	bf00      	nop
   d9a68:	2003e11c 	.word	0x2003e11c
   d9a6c:	2003e120 	.word	0x2003e120
   d9a70:	000e5016 	.word	0x000e5016

000d9a74 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d9a74:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d9a76:	2014      	movs	r0, #20
   d9a78:	f7fa fb0f 	bl	d409a <_Znwj>
   d9a7c:	4604      	mov	r4, r0
   d9a7e:	b140      	cbz	r0, d9a92 <_Z15builderParticlev+0x1e>
   d9a80:	4b05      	ldr	r3, [pc, #20]	; (d9a98 <_Z15builderParticlev+0x24>)
   d9a82:	4906      	ldr	r1, [pc, #24]	; (d9a9c <_Z15builderParticlev+0x28>)
   d9a84:	681b      	ldr	r3, [r3, #0]
   d9a86:	9300      	str	r3, [sp, #0]
   d9a88:	2300      	movs	r3, #0
   d9a8a:	461a      	mov	r2, r3
   d9a8c:	6809      	ldr	r1, [r1, #0]
   d9a8e:	f000 fae9 	bl	da064 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
   d9a92:	4620      	mov	r0, r4
   d9a94:	b002      	add	sp, #8
   d9a96:	bd10      	pop	{r4, pc}
   d9a98:	2003e11c 	.word	0x2003e11c
   d9a9c:	2003e120 	.word	0x2003e120

000d9aa0 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d9aa0:	b510      	push	{r4, lr}
   d9aa2:	4b06      	ldr	r3, [pc, #24]	; (d9abc <_ZN3UDPD1Ev+0x1c>)
   d9aa4:	6003      	str	r3, [r0, #0]
   d9aa6:	3364      	adds	r3, #100	; 0x64
   d9aa8:	4604      	mov	r4, r0
   d9aaa:	6103      	str	r3, [r0, #16]
   d9aac:	f002 faf7 	bl	dc09e <_ZN3UDP4stopEv>
   d9ab0:	4620      	mov	r0, r4
   d9ab2:	f002 fcb9 	bl	dc428 <_ZN3UDP13releaseBufferEv>
   d9ab6:	4620      	mov	r0, r4
   d9ab8:	bd10      	pop	{r4, pc}
   d9aba:	bf00      	nop
   d9abc:	000e56e4 	.word	0x000e56e4

000d9ac0 <_ZN3UDPD0Ev>:
   d9ac0:	b510      	push	{r4, lr}
   d9ac2:	4604      	mov	r4, r0
   d9ac4:	f7ff ffec 	bl	d9aa0 <_ZN3UDPD1Ev>
   d9ac8:	4620      	mov	r0, r4
   d9aca:	214c      	movs	r1, #76	; 0x4c
   d9acc:	f004 fdb6 	bl	de63c <_ZdlPvj>
   d9ad0:	4620      	mov	r0, r4
   d9ad2:	bd10      	pop	{r4, pc}

000d9ad4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d9ad4:	b510      	push	{r4, lr}
   d9ad6:	b086      	sub	sp, #24
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9ad8:	2300      	movs	r3, #0
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d9ada:	4604      	mov	r4, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9adc:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   d9ade:	b121      	cbz	r1, d9aea <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d9ae0:	4b0f      	ldr	r3, [pc, #60]	; (d9b20 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x4c>)
   d9ae2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d9ae4:	4b0f      	ldr	r3, [pc, #60]	; (d9b24 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14+0x50>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d9ae6:	9102      	str	r1, [sp, #8]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d9ae8:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9aea:	ab02      	add	r3, sp, #8
   d9aec:	e893 0003 	ldmia.w	r3, {r0, r1}
   d9af0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d9af4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d9af8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d9afc:	e89d 0003 	ldmia.w	sp, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9b00:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d9b02:	e884 0003 	stmia.w	r4, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9b06:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9b08:	60a2      	str	r2, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9b0a:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9b0c:	9104      	str	r1, [sp, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9b0e:	4618      	mov	r0, r3
   d9b10:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9b12:	60e2      	str	r2, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9b14:	9105      	str	r1, [sp, #20]
   d9b16:	f7fa fbea 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d9b1a:	4620      	mov	r0, r4
   d9b1c:	b006      	add	sp, #24
   d9b1e:	bd10      	pop	{r4, pc}
   d9b20:	000d99c1 	.word	0x000d99c1
   d9b24:	000d99c5 	.word	0x000d99c5

000d9b28 <_ZN10UbiBuilder7builderEv>:
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
  _token = token;
}

UbiProtocol* UbiBuilder::builder() {
   d9b28:	b570      	push	{r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d9b2a:	f100 0108 	add.w	r1, r0, #8
   d9b2e:	68c2      	ldr	r2, [r0, #12]
   d9b30:	460b      	mov	r3, r1
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d9b32:	b14a      	cbz	r2, d9b48 <_ZN10UbiBuilder7builderEv+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d9b34:	7804      	ldrb	r4, [r0, #0]
   d9b36:	7c15      	ldrb	r5, [r2, #16]
   d9b38:	42a5      	cmp	r5, r4
   d9b3a:	bf36      	itet	cc
   d9b3c:	68d4      	ldrcc	r4, [r2, #12]
   d9b3e:	6894      	ldrcs	r4, [r2, #8]
   d9b40:	461a      	movcc	r2, r3
   d9b42:	4613      	mov	r3, r2
   d9b44:	4622      	mov	r2, r4
   d9b46:	e7f4      	b.n	d9b32 <_ZN10UbiBuilder7builderEv+0xa>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d9b48:	4299      	cmp	r1, r3
   d9b4a:	d004      	beq.n	d9b56 <_ZN10UbiBuilder7builderEv+0x2e>
   d9b4c:	7800      	ldrb	r0, [r0, #0]
   d9b4e:	7c1a      	ldrb	r2, [r3, #16]
   d9b50:	4290      	cmp	r0, r2
   d9b52:	bf38      	it	cc
   d9b54:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9b56:	69da      	ldr	r2, [r3, #28]
   d9b58:	b90a      	cbnz	r2, d9b5e <_ZN10UbiBuilder7builderEv+0x36>
	__throw_bad_function_call();
   d9b5a:	f004 ff26 	bl	de9aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9b5e:	6a1a      	ldr	r2, [r3, #32]
   d9b60:	f103 0014 	add.w	r0, r3, #20
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}
   d9b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9b68:	4710      	bx	r2

000d9b6a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d9b6a:	688b      	ldr	r3, [r1, #8]
   d9b6c:	b570      	push	{r4, r5, r6, lr}
   d9b6e:	4616      	mov	r6, r2
   d9b70:	4604      	mov	r4, r0
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d9b72:	1d0d      	adds	r5, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
   d9b74:	2201      	movs	r2, #1
      while (__x != 0)
   d9b76:	b15b      	cbz	r3, d9b90 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
   d9b78:	7830      	ldrb	r0, [r6, #0]
   d9b7a:	7c1a      	ldrb	r2, [r3, #16]
   d9b7c:	4290      	cmp	r0, r2
   d9b7e:	bf34      	ite	cc
   d9b80:	6898      	ldrcc	r0, [r3, #8]
   d9b82:	68d8      	ldrcs	r0, [r3, #12]
   d9b84:	461d      	mov	r5, r3
   d9b86:	bf34      	ite	cc
   d9b88:	2201      	movcc	r2, #1
   d9b8a:	2200      	movcs	r2, #0
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d9b8c:	4603      	mov	r3, r0
   d9b8e:	e7f2      	b.n	d9b76 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d9b90:	b132      	cbz	r2, d9ba0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
	{
	  if (__j == begin())
   d9b92:	68ca      	ldr	r2, [r1, #12]
   d9b94:	4295      	cmp	r5, r2
   d9b96:	d00a      	beq.n	d9bae <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x44>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d9b98:	4628      	mov	r0, r5
   d9b9a:	f004 fdc9 	bl	de730 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d9b9e:	e000      	b.n	d9ba2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x38>
   d9ba0:	4628      	mov	r0, r5
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d9ba2:	7833      	ldrb	r3, [r6, #0]
   d9ba4:	7c02      	ldrb	r2, [r0, #16]
   d9ba6:	429a      	cmp	r2, r3
   d9ba8:	f04f 0300 	mov.w	r3, #0
   d9bac:	d202      	bcs.n	d9bb4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4a>
   d9bae:	e884 0028 	stmia.w	r4, {r3, r5}
   d9bb2:	e001      	b.n	d9bb8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
	: first(std::forward<_U1>(__x)), second(__y) { }
   d9bb4:	e884 0009 	stmia.w	r4, {r0, r3}
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
   d9bb8:	4620      	mov	r0, r4
   d9bba:	bd70      	pop	{r4, r5, r6, pc}

000d9bbc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d9bbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9bc0:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9bc2:	2024      	movs	r0, #36	; 0x24
   d9bc4:	461f      	mov	r7, r3
   d9bc6:	460c      	mov	r4, r1
   d9bc8:	f7fa fa67 	bl	d409a <_Znwj>
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   d9bcc:	683b      	ldr	r3, [r7, #0]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9bce:	f110 0810 	adds.w	r8, r0, #16
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d9bd2:	bf1c      	itt	ne
   d9bd4:	781b      	ldrbne	r3, [r3, #0]
   d9bd6:	7403      	strbne	r3, [r0, #16]
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d9bd8:	f106 0704 	add.w	r7, r6, #4
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9bdc:	bf1c      	itt	ne
   d9bde:	2300      	movne	r3, #0
   d9be0:	61c3      	strne	r3, [r0, #28]
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
   d9be2:	42a7      	cmp	r7, r4
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9be4:	4605      	mov	r5, r0
   d9be6:	d108      	bne.n	d9bfa <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x3e>
	{
	  if (size() > 0
   d9be8:	6973      	ldr	r3, [r6, #20]
   d9bea:	2b00      	cmp	r3, #0
   d9bec:	d05c      	beq.n	d9ca8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d9bee:	6931      	ldr	r1, [r6, #16]
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
	{
	  if (size() > 0
   d9bf0:	7c03      	ldrb	r3, [r0, #16]
   d9bf2:	7c0a      	ldrb	r2, [r1, #16]
   d9bf4:	429a      	cmp	r2, r3
   d9bf6:	d33a      	bcc.n	d9c6e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xb2>
   d9bf8:	e056      	b.n	d9ca8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xec>
   d9bfa:	f890 9010 	ldrb.w	r9, [r0, #16]
   d9bfe:	7c23      	ldrb	r3, [r4, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d9c00:	4599      	cmp	r9, r3
   d9c02:	d217      	bcs.n	d9c34 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x78>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
   d9c04:	68f3      	ldr	r3, [r6, #12]
   d9c06:	42a3      	cmp	r3, r4
   d9c08:	4620      	mov	r0, r4
   d9c0a:	d011      	beq.n	d9c30 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d9c0c:	f004 fd90 	bl	de730 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d9c10:	7c03      	ldrb	r3, [r0, #16]
   d9c12:	454b      	cmp	r3, r9
   d9c14:	d205      	bcs.n	d9c22 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x66>
	    {
	      if (_S_right(__before._M_node) == 0)
   d9c16:	68c3      	ldr	r3, [r0, #12]
   d9c18:	2b00      	cmp	r3, #0
   d9c1a:	bf14      	ite	ne
   d9c1c:	4620      	movne	r0, r4
   d9c1e:	2400      	moveq	r4, #0
   d9c20:	e006      	b.n	d9c30 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
		return _Res(0, __before._M_node);
	      else
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
   d9c22:	4668      	mov	r0, sp
   d9c24:	4642      	mov	r2, r8
   d9c26:	4631      	mov	r1, r6
   d9c28:	f7ff ff9f 	bl	d9b6a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d9c2c:	9c00      	ldr	r4, [sp, #0]
   d9c2e:	9801      	ldr	r0, [sp, #4]
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
   d9c30:	4601      	mov	r1, r0
   d9c32:	e01a      	b.n	d9c6a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
		return _Res(__pos._M_node, __pos._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d9c34:	d92f      	bls.n	d9c96 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
   d9c36:	6933      	ldr	r3, [r6, #16]
   d9c38:	42a3      	cmp	r3, r4
   d9c3a:	d013      	beq.n	d9c64 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xa8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d9c3c:	4620      	mov	r0, r4
   d9c3e:	f004 fd51 	bl	de6e4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	{
	  // ... then try after.
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d9c42:	7c03      	ldrb	r3, [r0, #16]
   d9c44:	454b      	cmp	r3, r9
   d9c46:	d905      	bls.n	d9c54 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x98>
	    {
	      if (_S_right(__pos._M_node) == 0)
   d9c48:	68e3      	ldr	r3, [r4, #12]
   d9c4a:	2b00      	cmp	r3, #0
   d9c4c:	bf14      	ite	ne
   d9c4e:	4604      	movne	r4, r0
   d9c50:	2000      	moveq	r0, #0
   d9c52:	e008      	b.n	d9c66 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>
		return _Res(0, __pos._M_node);
	      else
		return _Res(__after._M_node, __after._M_node);
	    }
	  else
	    return _M_get_insert_unique_pos(__k);
   d9c54:	4668      	mov	r0, sp
   d9c56:	4642      	mov	r2, r8
   d9c58:	4631      	mov	r1, r6
   d9c5a:	f7ff ff86 	bl	d9b6a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d9c5e:	e89d 0011 	ldmia.w	sp, {r0, r4}
   d9c62:	e000      	b.n	d9c66 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xaa>

      template<class _U2, class = typename
	       enable_if<is_convertible<_U2, _T2>::value>::type>
	constexpr pair(const _T1& __x, _U2&& __y)
	: first(__x), second(std::forward<_U2>(__y)) { }
   d9c64:	2000      	movs	r0, #0
	  iterator __after = __pos;
	  if (__pos._M_node == _M_rightmost())
	    return _Res(0, _M_rightmost());
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
	    {
	      if (_S_right(__pos._M_node) == 0)
   d9c66:	4621      	mov	r1, r4
   d9c68:	4604      	mov	r4, r0

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

	    if (__res.second)
   d9c6a:	b1a1      	cbz	r1, d9c96 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xda>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_S_key(__z),
						      _S_key(__p)));
   d9c6c:	b944      	cbnz	r4, d9c80 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
   d9c6e:	428f      	cmp	r7, r1
   d9c70:	d006      	beq.n	d9c80 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc4>
   d9c72:	7c08      	ldrb	r0, [r1, #16]
   d9c74:	7c2b      	ldrb	r3, [r5, #16]
   d9c76:	4283      	cmp	r3, r0
   d9c78:	bf2c      	ite	cs
   d9c7a:	2000      	movcs	r0, #0
   d9c7c:	2001      	movcc	r0, #1
   d9c7e:	e000      	b.n	d9c82 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xc6>
   d9c80:	2001      	movs	r0, #1

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d9c82:	463b      	mov	r3, r7
   d9c84:	460a      	mov	r2, r1
   d9c86:	4629      	mov	r1, r5
   d9c88:	f004 fd54 	bl	de734 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
   d9c8c:	6973      	ldr	r3, [r6, #20]
   d9c8e:	3301      	adds	r3, #1
   d9c90:	6173      	str	r3, [r6, #20]
   d9c92:	4628      	mov	r0, r5
   d9c94:	e010      	b.n	d9cb8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9c96:	f105 0014 	add.w	r0, r5, #20
   d9c9a:	f7fa fb28 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d9c9e:	4628      	mov	r0, r5
   d9ca0:	f7fa f9ff 	bl	d40a2 <_ZdlPv>

	    if (__res.second)
	      return _M_insert_node(__res.first, __res.second, __z);

	    _M_drop_node(__z);
	    return iterator(static_cast<_Link_type>(__res.first));
   d9ca4:	4620      	mov	r0, r4
   d9ca6:	e007      	b.n	d9cb8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xfc>
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
   d9ca8:	4631      	mov	r1, r6
   d9caa:	4642      	mov	r2, r8
   d9cac:	4668      	mov	r0, sp
   d9cae:	f7ff ff5c 	bl	d9b6a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d9cb2:	9c00      	ldr	r4, [sp, #0]
   d9cb4:	9901      	ldr	r1, [sp, #4]
   d9cb6:	e7d8      	b.n	d9c6a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0xae>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
   d9cb8:	b003      	add	sp, #12
   d9cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9cc0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   d9cc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d9cc2:	1d04      	adds	r4, r0, #4
   d9cc4:	6883      	ldr	r3, [r0, #8]
   d9cc6:	460a      	mov	r2, r1
   d9cc8:	4621      	mov	r1, r4
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
   d9cca:	b14b      	cbz	r3, d9ce0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x20>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d9ccc:	7815      	ldrb	r5, [r2, #0]
   d9cce:	7c1e      	ldrb	r6, [r3, #16]
   d9cd0:	42ae      	cmp	r6, r5
   d9cd2:	bf36      	itet	cc
   d9cd4:	68dd      	ldrcc	r5, [r3, #12]
   d9cd6:	689d      	ldrcs	r5, [r3, #8]
   d9cd8:	460b      	movcc	r3, r1
   d9cda:	4619      	mov	r1, r3
   d9cdc:	462b      	mov	r3, r5
   d9cde:	e7f4      	b.n	d9cca <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d9ce0:	428c      	cmp	r4, r1
   d9ce2:	d003      	beq.n	d9cec <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2c>
   d9ce4:	7814      	ldrb	r4, [r2, #0]
   d9ce6:	7c0b      	ldrb	r3, [r1, #16]
   d9ce8:	429c      	cmp	r4, r3
   d9cea:	d208      	bcs.n	d9cfe <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x3e>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9cec:	ab04      	add	r3, sp, #16
   d9cee:	f843 2d04 	str.w	r2, [r3, #-4]!
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d9cf2:	aa02      	add	r2, sp, #8
   d9cf4:	9200      	str	r2, [sp, #0]
   d9cf6:	4a04      	ldr	r2, [pc, #16]	; (d9d08 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x48>)
   d9cf8:	f7ff ff60 	bl	d9bbc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIOS0_EESJ_IIEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
   d9cfc:	4601      	mov	r1, r0
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
   d9cfe:	f101 0014 	add.w	r0, r1, #20
      }
   d9d02:	b004      	add	sp, #16
   d9d04:	bd70      	pop	{r4, r5, r6, pc}
   d9d06:	bf00      	nop
   d9d08:	000e531e 	.word	0x000e531e

000d9d0c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
#include "UbiProtocol.h"
#include "UbiTcp.h"
#include "UbiTypes.h"
#include "UbiUdp.h"

UbiBuilder::UbiBuilder(const char* host, const char* token,
   d9d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9d10:	4604      	mov	r4, r0
   d9d12:	461d      	mov	r5, r3
   d9d14:	4689      	mov	r9, r1
   d9d16:	4690      	mov	r8, r2
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d9d18:	2100      	movs	r1, #0
   d9d1a:	2210      	movs	r2, #16
   d9d1c:	3008      	adds	r0, #8
   d9d1e:	f007 fc2b 	bl	e1578 <memset>
                       IotProtocol iot_protocol) {
  _iot_protocol = iot_protocol;
   d9d22:	7025      	strb	r5, [r4, #0]
  command_list[UBI_TCP] = &builderTcp;
   d9d24:	ad02      	add	r5, sp, #8
   d9d26:	2301      	movs	r3, #1
   d9d28:	f805 3d01 	strb.w	r3, [r5, #-1]!
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d9d2c:	f104 0208 	add.w	r2, r4, #8
   d9d30:	1d26      	adds	r6, r4, #4
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d9d32:	2700      	movs	r7, #0
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d9d34:	6122      	str	r2, [r4, #16]
	    this->_M_header._M_right = &this->_M_header;
   d9d36:	6162      	str	r2, [r4, #20]
   d9d38:	4629      	mov	r1, r5
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d9d3a:	61a7      	str	r7, [r4, #24]
   d9d3c:	4630      	mov	r0, r6
   d9d3e:	f7ff ffbf 	bl	d9cc0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d9d42:	4915      	ldr	r1, [pc, #84]	; (d9d98 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d9d44:	f7ff fec6 	bl	d9ad4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_HTTP] = &builderHttp;
   d9d48:	4629      	mov	r1, r5
   d9d4a:	4630      	mov	r0, r6
   d9d4c:	f88d 7007 	strb.w	r7, [sp, #7]
   d9d50:	f7ff ffb6 	bl	d9cc0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d9d54:	4911      	ldr	r1, [pc, #68]	; (d9d9c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d9d56:	f7ff febd 	bl	d9ad4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_UDP] = &builderUdp;
   d9d5a:	2302      	movs	r3, #2
   d9d5c:	4629      	mov	r1, r5
   d9d5e:	4630      	mov	r0, r6
   d9d60:	f88d 3007 	strb.w	r3, [sp, #7]
   d9d64:	f7ff ffac 	bl	d9cc0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d9d68:	490d      	ldr	r1, [pc, #52]	; (d9da0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d9d6a:	f7ff feb3 	bl	d9ad4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  command_list[UBI_PARTICLE] = &builderParticle;
   d9d6e:	2303      	movs	r3, #3
   d9d70:	4629      	mov	r1, r5
   d9d72:	4630      	mov	r0, r6
   d9d74:	f88d 3007 	strb.w	r3, [sp, #7]
   d9d78:	f7ff ffa2 	bl	d9cc0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d9d7c:	4909      	ldr	r1, [pc, #36]	; (d9da4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d9d7e:	f7ff fea9 	bl	d9ad4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSB_vEE4typeEEE5valueERS3_E4typeEOS9_.isra.14>
  _host = host;
   d9d82:	4b09      	ldr	r3, [pc, #36]	; (d9da8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
   d9d84:	f8c3 9000 	str.w	r9, [r3]
  _token = token;
   d9d88:	4b08      	ldr	r3, [pc, #32]	; (d9dac <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0xa0>)
}
   d9d8a:	4620      	mov	r0, r4
  command_list[UBI_TCP] = &builderTcp;
  command_list[UBI_HTTP] = &builderHttp;
  command_list[UBI_UDP] = &builderUdp;
  command_list[UBI_PARTICLE] = &builderParticle;
  _host = host;
  _token = token;
   d9d8c:	f8c3 8000 	str.w	r8, [r3]
}
   d9d90:	b003      	add	sp, #12
   d9d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9d96:	bf00      	nop
   d9d98:	000d99dd 	.word	0x000d99dd
   d9d9c:	000d9a11 	.word	0x000d9a11
   d9da0:	000d9a41 	.word	0x000d9a41
   d9da4:	000d9a75 	.word	0x000d9a75
   d9da8:	2003e120 	.word	0x2003e120
   d9dac:	2003e11c 	.word	0x2003e11c

000d9db0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
   d9db0:	b570      	push	{r4, r5, r6, lr}
   d9db2:	4d10      	ldr	r5, [pc, #64]	; (d9df4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d9db4:	4c10      	ldr	r4, [pc, #64]	; (d9df8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d9db6:	4e11      	ldr	r6, [pc, #68]	; (d9dfc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d9db8:	f001 fb32 	bl	db420 <HAL_Pin_Map>
   d9dbc:	4628      	mov	r0, r5
   d9dbe:	f004 fab5 	bl	de32c <_ZN9TCPClientC1Ev>
   d9dc2:	4628      	mov	r0, r5
   d9dc4:	4d0e      	ldr	r5, [pc, #56]	; (d9e00 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d9dc6:	4622      	mov	r2, r4
   d9dc8:	4631      	mov	r1, r6
   d9dca:	f004 fc29 	bl	de620 <__aeabi_atexit>
   d9dce:	4628      	mov	r0, r5
   d9dd0:	f004 faac 	bl	de32c <_ZN9TCPClientC1Ev>
   d9dd4:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d9dd6:	4d0b      	ldr	r5, [pc, #44]	; (d9e04 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
   d9dd8:	4622      	mov	r2, r4
   d9dda:	4631      	mov	r1, r6
   d9ddc:	f004 fc20 	bl	de620 <__aeabi_atexit>
   d9de0:	4628      	mov	r0, r5
   d9de2:	f002 fb03 	bl	dc3ec <_ZN3UDPC1Ev>
   d9de6:	4622      	mov	r2, r4
   d9de8:	4628      	mov	r0, r5
   d9dea:	4907      	ldr	r1, [pc, #28]	; (d9e08 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
   d9dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9df0:	f004 bc16 	b.w	de620 <__aeabi_atexit>
   d9df4:	2003e100 	.word	0x2003e100
   d9df8:	2003bc08 	.word	0x2003bc08
   d9dfc:	000d8919 	.word	0x000d8919
   d9e00:	2003e0e4 	.word	0x2003e0e4
   d9e04:	2003e124 	.word	0x2003e124
   d9e08:	000d9aa1 	.word	0x000d9aa1

000d9e0c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9e0c:	2200      	movs	r2, #0
   d9e0e:	4611      	mov	r1, r2
   d9e10:	6840      	ldr	r0, [r0, #4]
   d9e12:	f001 be23 	b.w	dba5c <network_ready>
	...

000d9e18 <_ZN7UbiMeshC1EPc>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
   d9e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  _tokenMesh = token;
   d9e1a:	4b0a      	ldr	r3, [pc, #40]	; (d9e44 <_ZN7UbiMeshC1EPc+0x2c>)

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
   d9e1c:	4604      	mov	r4, r0
   d9e1e:	4668      	mov	r0, sp
  _tokenMesh = token;
   d9e20:	6019      	str	r1, [r3, #0]
   d9e22:	f001 fe73 	bl	dbb0c <spark_deviceID>
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d9e26:	9802      	ldr	r0, [sp, #8]
   d9e28:	3001      	adds	r0, #1
   d9e2a:	f7fa f938 	bl	d409e <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d9e2e:	9900      	ldr	r1, [sp, #0]
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
  _default_device_label = new char[particle_id_str.length() + 1];
   d9e30:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d9e32:	f007 fe37 	bl	e1aa4 <strcpy>
 * Overloaded constructors
 ***************************************************************************/

UbiMesh::UbiMesh(char* token) {
  _tokenMesh = token;
  String particle_id_str = System.deviceID();
   d9e36:	4668      	mov	r0, sp
   d9e38:	f002 fbbc 	bl	dc5b4 <_ZN6StringD1Ev>
  _default_device_label = new char[particle_id_str.length() + 1];
  strcpy(_default_device_label, particle_id_str.c_str());
};
   d9e3c:	4620      	mov	r0, r4
   d9e3e:	b004      	add	sp, #16
   d9e40:	bd10      	pop	{r4, pc}
   d9e42:	bf00      	nop
   d9e44:	2003e178 	.word	0x2003e178

000d9e48 <_ZN7UbiMeshD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

UbiMesh::~UbiMesh() { delete[] _default_device_label; }
   d9e48:	b510      	push	{r4, lr}
   d9e4a:	4604      	mov	r4, r0
   d9e4c:	6800      	ldr	r0, [r0, #0]
   d9e4e:	b108      	cbz	r0, d9e54 <_ZN7UbiMeshD1Ev+0xc>
   d9e50:	f7fa f929 	bl	d40a6 <_ZdaPv>
   d9e54:	4620      	mov	r0, r4
   d9e56:	bd10      	pop	{r4, pc}

000d9e58 <_ZN7UbiMesh3addEPKcfS1_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void UbiMesh::add(const char* variable_label, float value, const char* context,
                  long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
   d9e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9e5c:	b0a4      	sub	sp, #144	; 0x90
   d9e5e:	4606      	mov	r6, r0
   d9e60:	4689      	mov	r9, r1
   d9e62:	ee10 aa10 	vmov	sl, s0
   d9e66:	461f      	mov	r7, r3
   d9e68:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
  char _context[100];
  char _dot_timestamp_seconds[11];
  char _dot_timestamp_millis[4];

  if (context != NULL && strlen(context) > 100) {
   d9e6c:	4615      	mov	r5, r2
   d9e6e:	ac0b      	add	r4, sp, #44	; 0x2c
   d9e70:	b152      	cbz	r2, d9e88 <_ZN7UbiMesh3addEPKcfS1_mj+0x30>
   d9e72:	4610      	mov	r0, r2
   d9e74:	f008 fb4e 	bl	e2514 <strlen>
   d9e78:	2864      	cmp	r0, #100	; 0x64
   d9e7a:	d907      	bls.n	d9e8c <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
    Serial.println("[WARNING] Your Mesh context length must be lower than 100");
   d9e7c:	f003 fce2 	bl	dd844 <_Z16_fetch_usbserialv>
   d9e80:	491a      	ldr	r1, [pc, #104]	; (d9eec <_ZN7UbiMesh3addEPKcfS1_mj+0x94>)
   d9e82:	f002 fd98 	bl	dc9b6 <_ZN5Print7printlnEPKc>
   d9e86:	e001      	b.n	d9e8c <_ZN7UbiMesh3addEPKcfS1_mj+0x34>
  }

  context != NULL ? sprintf(_context, "%s", context)
                  : sprintf(_context, "%s", " ");
   d9e88:	4919      	ldr	r1, [pc, #100]	; (d9ef0 <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d9e8a:	e000      	b.n	d9e8e <_ZN7UbiMesh3addEPKcfS1_mj+0x36>
   d9e8c:	4629      	mov	r1, r5
   d9e8e:	4620      	mov	r0, r4
   d9e90:	f007 fe08 	bl	e1aa4 <strcpy>
   d9e94:	ad08      	add	r5, sp, #32

  dot_timestamp_seconds != NULL
      ? sprintf(_dot_timestamp_seconds, "%lu", dot_timestamp_seconds)
      : sprintf(_dot_timestamp_seconds, "%s", " ");
   d9e96:	b12f      	cbz	r7, d9ea4 <_ZN7UbiMesh3addEPKcfS1_mj+0x4c>
   d9e98:	463a      	mov	r2, r7
   d9e9a:	4916      	ldr	r1, [pc, #88]	; (d9ef4 <_ZN7UbiMesh3addEPKcfS1_mj+0x9c>)
   d9e9c:	4628      	mov	r0, r5
   d9e9e:	f001 fe6d 	bl	dbb7c <sprintf>
   d9ea2:	e003      	b.n	d9eac <_ZN7UbiMesh3addEPKcfS1_mj+0x54>
   d9ea4:	4912      	ldr	r1, [pc, #72]	; (d9ef0 <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d9ea6:	4628      	mov	r0, r5
   d9ea8:	f007 fdfc 	bl	e1aa4 <strcpy>
   d9eac:	af07      	add	r7, sp, #28

  dot_timestamp_millis != NULL
      ? sprintf(_dot_timestamp_millis, "%d", dot_timestamp_millis)
      : sprintf(_dot_timestamp_millis, "%s", " ");
   d9eae:	f1b8 0f00 	cmp.w	r8, #0
   d9eb2:	d005      	beq.n	d9ec0 <_ZN7UbiMesh3addEPKcfS1_mj+0x68>
   d9eb4:	4642      	mov	r2, r8
   d9eb6:	4910      	ldr	r1, [pc, #64]	; (d9ef8 <_ZN7UbiMesh3addEPKcfS1_mj+0xa0>)
   d9eb8:	4638      	mov	r0, r7
   d9eba:	f001 fe5f 	bl	dbb7c <sprintf>
   d9ebe:	e003      	b.n	d9ec8 <_ZN7UbiMesh3addEPKcfS1_mj+0x70>
   d9ec0:	490b      	ldr	r1, [pc, #44]	; (d9ef0 <_ZN7UbiMesh3addEPKcfS1_mj+0x98>)
   d9ec2:	4638      	mov	r0, r7
   d9ec4:	f007 fdee 	bl	e1aa4 <strcpy>

  sprintf(_meshPayload, "%s|%f|%s|%s|%s", variable_label, value, _context,
          _dot_timestamp_seconds, _dot_timestamp_millis);
   d9ec8:	4650      	mov	r0, sl
   d9eca:	9704      	str	r7, [sp, #16]
   d9ecc:	9503      	str	r5, [sp, #12]
   d9ece:	9402      	str	r4, [sp, #8]
   d9ed0:	f006 fc9a 	bl	e0808 <__aeabi_f2d>
   d9ed4:	3604      	adds	r6, #4
   d9ed6:	e9cd 0100 	strd	r0, r1, [sp]
   d9eda:	464a      	mov	r2, r9
   d9edc:	4907      	ldr	r1, [pc, #28]	; (d9efc <_ZN7UbiMesh3addEPKcfS1_mj+0xa4>)
   d9ede:	4630      	mov	r0, r6
   d9ee0:	f001 fe4c 	bl	dbb7c <sprintf>
}
   d9ee4:	b024      	add	sp, #144	; 0x90
   d9ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9eea:	bf00      	nop
   d9eec:	000e531f 	.word	0x000e531f
   d9ef0:	000e565a 	.word	0x000e565a
   d9ef4:	000e4fe0 	.word	0x000e4fe0
   d9ef8:	000e59f4 	.word	0x000e59f4
   d9efc:	000e5359 	.word	0x000e5359

000d9f00 <_ZN7UbiMesh8setDebugEb>:

/*
  Makes debug messages available
*/

void UbiMesh::setDebug(bool debug) { _debugMesh = debug; }
   d9f00:	4b01      	ldr	r3, [pc, #4]	; (d9f08 <_ZN7UbiMesh8setDebugEb+0x8>)
   d9f02:	7019      	strb	r1, [r3, #0]
   d9f04:	4770      	bx	lr
   d9f06:	bf00      	nop
   d9f08:	2003e170 	.word	0x2003e170

000d9f0c <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
   d9f0c:	b508      	push	{r3, lr}
   d9f0e:	f001 fa87 	bl	db420 <HAL_Pin_Map>
   d9f12:	f001 fb35 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
typedef std::map<uint8_t, char*> meshMap;
static IotProtocol iotProtocolMesh = UBI_UDP;
static char* _tokenMesh;
static bool _debugMesh = false;
static int _throttlingTime = 20000;
static unsigned long time_now = millis();
   d9f16:	4b01      	ldr	r3, [pc, #4]	; (d9f1c <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv+0x10>)
   d9f18:	6018      	str	r0, [r3, #0]
   d9f1a:	bd08      	pop	{r3, pc}
   d9f1c:	2003e174 	.word	0x2003e174

000d9f20 <_ZN6UbiUDP3getEPKcS1_>:
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) {
  return ERROR_VALUE;
}
   d9f20:	ed9f 0a01 	vldr	s0, [pc, #4]	; d9f28 <_ZN6UbiUDP3getEPKcS1_+0x8>
   d9f24:	4770      	bx	lr
   d9f26:	bf00      	nop
   d9f28:	cda2425f 	.word	0xcda2425f

000d9f2c <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d9f2c:	7501      	strb	r1, [r0, #20]
   d9f2e:	4770      	bx	lr

000d9f30 <_ZN6UbiUDPC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
   d9f30:	b530      	push	{r4, r5, lr}
               const char *token) {
   d9f32:	4d06      	ldr	r5, [pc, #24]	; (d9f4c <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d9f34:	6005      	str	r5, [r0, #0]
   d9f36:	2500      	movs	r5, #0
   d9f38:	7505      	strb	r5, [r0, #20]
  _host = host;
  _user_agent = user_agent;
   d9f3a:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
   d9f3c:	f241 3588 	movw	r5, #5000	; 0x1388
  _host = host;
  _user_agent = user_agent;
  _token = token;
   d9f40:	9b03      	ldr	r3, [sp, #12]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent,
               const char *token) {
   d9f42:	6185      	str	r5, [r0, #24]
  _host = host;
   d9f44:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   d9f46:	60c3      	str	r3, [r0, #12]
  _port = port;
   d9f48:	6102      	str	r2, [r0, #16]
}
   d9f4a:	bd30      	pop	{r4, r5, pc}
   d9f4c:	000e553c 	.word	0x000e553c

000d9f50 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
   d9f50:	b510      	push	{r4, lr}
   d9f52:	4c06      	ldr	r4, [pc, #24]	; (d9f6c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d9f54:	f001 fa64 	bl	db420 <HAL_Pin_Map>
   d9f58:	4620      	mov	r0, r4
   d9f5a:	f002 fa47 	bl	dc3ec <_ZN3UDPC1Ev>
   d9f5e:	4620      	mov	r0, r4
   d9f60:	4a03      	ldr	r2, [pc, #12]	; (d9f70 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d9f62:	4904      	ldr	r1, [pc, #16]	; (d9f74 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
   d9f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9f68:	f004 bb5a 	b.w	de620 <__aeabi_atexit>
   d9f6c:	2003e17c 	.word	0x2003e17c
   d9f70:	2003bc08 	.word	0x2003bc08
   d9f74:	000d9aa1 	.word	0x000d9aa1

000d9f78 <_ZN6UbiUDP11getServerIpEv>:

/**
 * Obtains the remote host's IP
 */

IPAddress UbiUDP::getServerIp() {
   d9f78:	b510      	push	{r4, lr}
   d9f7a:	4604      	mov	r4, r0
#if (PLATFORM_ID == 12 || PLATFORM_ID == 6)  // Argon(12), Photon(6)
  return WiFi.resolve(_host);
#elif (PLATFORM_ID == 13 || PLATFORM_ID == 10)  // Boron(13), Electron(10)
  return Cellular.resolve(_host);
   d9f7c:	684a      	ldr	r2, [r1, #4]
   d9f7e:	4902      	ldr	r1, [pc, #8]	; (d9f88 <_ZN6UbiUDP11getServerIpEv+0x10>)
   d9f80:	f004 fa25 	bl	de3ce <_ZN5spark12NetworkClass7resolveEPKc>
    return IPAddress(169,55,61,243);
  }
#endif

  return IPAddress(169,55,61,243);
}
   d9f84:	4620      	mov	r0, r4
   d9f86:	bd10      	pop	{r4, pc}
   d9f88:	2003e2dc 	.word	0x2003e2dc

000d9f8c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d9f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9f8e:	b08f      	sub	sp, #60	; 0x3c
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d9f90:	4601      	mov	r1, r0
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d9f92:	4606      	mov	r6, r0
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d9f94:	a802      	add	r0, sp, #8
  _client_udp_ubi.flush();
  _client_udp_ubi.stop();
}

bool UbiUDP::sendData(const char *device_label, const char *device_name,
                      char *payload, UbiFlags *flags) {
   d9f96:	461f      	mov	r7, r3
  /* Obtains the remote host's IP */
  IPAddress serverIpAddress = getServerIp();
   d9f98:	f7ff ffee 	bl	d9f78 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d9f9c:	a802      	add	r0, sp, #8
   d9f9e:	f003 fbb3 	bl	dd708 <_ZNK9IPAddresscvbEv>

  if (!serverIpAddress) {
   d9fa2:	b9a0      	cbnz	r0, d9fce <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d9fa4:	7d33      	ldrb	r3, [r6, #20]
   d9fa6:	b123      	cbz	r3, d9fb2 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d9fa8:	f003 fc4c 	bl	dd844 <_Z16_fetch_usbserialv>
          "[Warning] Could not solve IP Address of the remote host, with your DNS setup. \
          \nUsing default Industrial Ubidots IP: 169.55.61.243");
   d9fac:	4925      	ldr	r1, [pc, #148]	; (da044 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb8>)
   d9fae:	f002 fd02 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    }
    serverIpAddress = IPAddress(169,55,61,243);
   d9fb2:	23f3      	movs	r3, #243	; 0xf3
   d9fb4:	9300      	str	r3, [sp, #0]
   d9fb6:	2237      	movs	r2, #55	; 0x37
   d9fb8:	233d      	movs	r3, #61	; 0x3d
   d9fba:	21a9      	movs	r1, #169	; 0xa9
   d9fbc:	a808      	add	r0, sp, #32

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9fbe:	ad09      	add	r5, sp, #36	; 0x24
   d9fc0:	f003 fbc6 	bl	dd750 <_ZN9IPAddressC1Ehhhh>
   d9fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9fc6:	ac03      	add	r4, sp, #12
   d9fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9fca:	682b      	ldr	r3, [r5, #0]
   d9fcc:	7023      	strb	r3, [r4, #0]
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d9fce:	2200      	movs	r2, #0
   d9fd0:	f240 21bd 	movw	r1, #701	; 0x2bd
   d9fd4:	481c      	ldr	r0, [pc, #112]	; (da048 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d9fd6:	f002 fa39 	bl	dc44c <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d9fda:	2200      	movs	r2, #0
   d9fdc:	f242 3134 	movw	r1, #9012	; 0x2334
   d9fe0:	4819      	ldr	r0, [pc, #100]	; (da048 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d9fe2:	f002 f80e 	bl	dc002 <_ZN3UDP5beginEtm>
   d9fe6:	ad03      	add	r5, sp, #12
   d9fe8:	4b18      	ldr	r3, [pc, #96]	; (da04c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d9fea:	9308      	str	r3, [sp, #32]
   d9fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9fee:	ac09      	add	r4, sp, #36	; 0x24
   d9ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9ff2:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   d9ff4:	4814      	ldr	r0, [pc, #80]	; (da048 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   d9ff6:	7023      	strb	r3, [r4, #0]
   d9ff8:	f242 3234 	movw	r2, #9012	; 0x2334
   d9ffc:	a908      	add	r1, sp, #32
   d9ffe:	f002 fa3f 	bl	dc480 <_ZN3UDP11beginPacketE9IPAddresst>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
   da002:	b168      	cbz	r0, da020 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   da004:	b167      	cbz	r7, da020 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
      return write((const uint8_t *)str, strlen(str));
   da006:	4638      	mov	r0, r7
   da008:	f008 fa84 	bl	e2514 <strlen>
   da00c:	4639      	mov	r1, r7
   da00e:	4602      	mov	r2, r0
   da010:	480d      	ldr	r0, [pc, #52]	; (da048 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   da012:	f002 f852 	bl	dc0ba <_ZN3UDP5writeEPKhj>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   da016:	b118      	cbz	r0, da020 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x94>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
   da018:	480b      	ldr	r0, [pc, #44]	; (da048 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   da01a:	f002 f8ad 	bl	dc178 <_ZN3UDP9endPacketEv>
  }

  /* Sends data to Ubidots */
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) &&
   da01e:	b958      	cbnz	r0, da038 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xac>
        _client_udp_ubi.write(payload) && _client_udp_ubi.endPacket())) {
    if (_debug) {
   da020:	7d33      	ldrb	r3, [r6, #20]
   da022:	b123      	cbz	r3, da02e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xa2>
      Serial.println("ERROR sending values with UDP");
   da024:	f003 fc0e 	bl	dd844 <_Z16_fetch_usbserialv>
   da028:	4909      	ldr	r1, [pc, #36]	; (da050 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   da02a:	f002 fcc4 	bl	dc9b6 <_ZN5Print7printlnEPKc>
    }
    _client_udp_ubi.stop();
   da02e:	4806      	ldr	r0, [pc, #24]	; (da048 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   da030:	f002 f835 	bl	dc09e <_ZN3UDP4stopEv>
    return false;
   da034:	2000      	movs	r0, #0
   da036:	e003      	b.n	da040 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xb4>
  }

  _client_udp_ubi.stop();
   da038:	4803      	ldr	r0, [pc, #12]	; (da048 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xbc>)
   da03a:	f002 f830 	bl	dc09e <_ZN3UDP4stopEv>
  return true;
   da03e:	2001      	movs	r0, #1
}
   da040:	b00f      	add	sp, #60	; 0x3c
   da042:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da044:	000e5487 	.word	0x000e5487
   da048:	2003e17c 	.word	0x2003e17c
   da04c:	000e587c 	.word	0x000e587c
   da050:	000e5513 	.word	0x000e5513

000da054 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   da054:	ed9f 0a01 	vldr	s0, [pc, #4]	; da05c <_ZN11UbiParticle3getEPKcS1_+0x8>
   da058:	4770      	bx	lr
   da05a:	bf00      	nop
   da05c:	cda2425f 	.word	0xcda2425f

000da060 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   da060:	7401      	strb	r1, [r0, #16]
   da062:	4770      	bx	lr

000da064 <_ZN11UbiParticleC1EPKciS1_S1_>:

/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
   da064:	b510      	push	{r4, lr}
                         const char* user_agent, const char* token) {
   da066:	4c04      	ldr	r4, [pc, #16]	; (da078 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   da068:	6004      	str	r4, [r0, #0]
  _host = host;
  _user_agent = user_agent;
   da06a:	6083      	str	r3, [r0, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
                         const char* user_agent, const char* token) {
   da06c:	2400      	movs	r4, #0
  _host = host;
  _user_agent = user_agent;
  _token = token;
   da06e:	9b02      	ldr	r3, [sp, #8]
/**************************************************************************
 * Overloaded constructors
 ***************************************************************************/

UbiParticle::UbiParticle(const char* host, const int port,
                         const char* user_agent, const char* token) {
   da070:	7404      	strb	r4, [r0, #16]
  _host = host;
   da072:	6041      	str	r1, [r0, #4]
  _user_agent = user_agent;
  _token = token;
   da074:	60c3      	str	r3, [r0, #12]
}
   da076:	bd10      	pop	{r4, pc}
   da078:	000e5550 	.word	0x000e5550

000da07c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   da07c:	b570      	push	{r4, r5, r6, lr}
   da07e:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   da080:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   da082:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   da084:	f001 fc9e 	bl	db9c4 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
   da088:	b908      	cbnz	r0, da08e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
   da08a:	2000      	movs	r0, #0
   da08c:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
   da08e:	2c00      	cmp	r4, #0
   da090:	dd03      	ble.n	da09a <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
   da092:	f001 fa75 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
   da096:	4605      	mov	r5, r0
   da098:	e000      	b.n	da09c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
   da09a:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   da09c:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   da09e:	b93b      	cbnz	r3, da0b0 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
   da0a0:	2c00      	cmp	r4, #0
   da0a2:	dd07      	ble.n	da0b4 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   da0a4:	f001 fa6c 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
   da0a8:	1b40      	subs	r0, r0, r5
   da0aa:	42a0      	cmp	r0, r4
   da0ac:	d302      	bcc.n	da0b4 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   da0ae:	e7ec      	b.n	da08a <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
   da0b0:	2001      	movs	r0, #1
   da0b2:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
   da0b4:	f001 fd12 	bl	dbadc <spark_process>
   da0b8:	e7f0      	b.n	da09c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>

000da0ba <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
/*
 * Wrapper of the Publish() method from particle to trigger webhooks
 */

bool UbiParticle::sendData(const char* device_label, const char* device_name,
                           char* payload, UbiFlags* flags) {
   da0ba:	b530      	push	{r4, r5, lr}
   da0bc:	b085      	sub	sp, #20
   da0be:	461a      	mov	r2, r3
   da0c0:	9b08      	ldr	r3, [sp, #32]
   da0c2:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   da0c4:	f88d 3000 	strb.w	r3, [sp]
   da0c8:	a802      	add	r0, sp, #8
   da0ca:	233c      	movs	r3, #60	; 0x3c
   da0cc:	f003 f940 	bl	dd350 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   da0d0:	9c02      	ldr	r4, [sp, #8]
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
   da0d2:	2100      	movs	r1, #0
   da0d4:	4620      	mov	r0, r4
   da0d6:	f7ff ffd1 	bl	da07c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
   da0da:	7863      	ldrb	r3, [r4, #1]
   da0dc:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
   da0e0:	b133      	cbz	r3, da0f0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
   da0e2:	2100      	movs	r1, #0
   da0e4:	4620      	mov	r0, r4
   da0e6:	f7ff ffc9 	bl	da07c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   da0ea:	7823      	ldrb	r3, [r4, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
   da0ec:	2b01      	cmp	r3, #1
   da0ee:	d013      	beq.n	da118 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5e>
            return result_;
        }
        return std::move(defaultValue);
   da0f0:	2500      	movs	r5, #0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   da0f2:	9c03      	ldr	r4, [sp, #12]
   da0f4:	b194      	cbz	r4, da11c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   da0f6:	6863      	ldr	r3, [r4, #4]
   da0f8:	3b01      	subs	r3, #1
   da0fa:	6063      	str	r3, [r4, #4]
   da0fc:	b973      	cbnz	r3, da11c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
        {
          _M_dispose();
   da0fe:	6823      	ldr	r3, [r4, #0]
   da100:	4620      	mov	r0, r4
   da102:	689b      	ldr	r3, [r3, #8]
   da104:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da106:	68a3      	ldr	r3, [r4, #8]
   da108:	3b01      	subs	r3, #1
   da10a:	60a3      	str	r3, [r4, #8]
   da10c:	b933      	cbnz	r3, da11c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
            _M_destroy();
   da10e:	6823      	ldr	r3, [r4, #0]
   da110:	4620      	mov	r0, r4
   da112:	68db      	ldr	r3, [r3, #12]
   da114:	4798      	blx	r3
  return Particle.publish(device_label, payload, flags->particle_flag);
   da116:	e001      	b.n	da11c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x62>
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
            return result_;
   da118:	7b25      	ldrb	r5, [r4, #12]
   da11a:	e7ea      	b.n	da0f2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x38>
}
   da11c:	4628      	mov	r0, r5
   da11e:	b005      	add	sp, #20
   da120:	bd30      	pop	{r4, r5, pc}

000da122 <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
   da122:	f001 b97d 	b.w	db420 <HAL_Pin_Map>

000da126 <_ZN9MPL3115A2C1Ev>:
#include "SparkFun_MPL3115A2.h"

MPL3115A2::MPL3115A2()
{
  //Set initial values for private vars
}
   da126:	4770      	bx	lr

000da128 <_ZN9MPL3115A28IIC_ReadEh>:
}


// These are the two I2C functions in this sketch.
byte MPL3115A2::IIC_Read(byte regAddr)
{
   da128:	b510      	push	{r4, lr}
   da12a:	460c      	mov	r4, r1
  // This function reads one byte over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
   da12c:	f004 fa52 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da130:	2160      	movs	r1, #96	; 0x60
   da132:	f003 fd70 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);  // Address of CTRL_REG1
   da136:	f004 fa4d 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da13a:	6803      	ldr	r3, [r0, #0]
   da13c:	4621      	mov	r1, r4
   da13e:	689b      	ldr	r3, [r3, #8]
   da140:	4798      	blx	r3
  Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   da142:	f004 fa47 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da146:	2100      	movs	r1, #0
   da148:	f003 fd68 	bl	ddc1c <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPL3115A2_ADDRESS, 1); // Request the data...
   da14c:	f004 fa42 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da150:	2201      	movs	r2, #1
   da152:	2160      	movs	r1, #96	; 0x60
   da154:	f003 fd58 	bl	ddc08 <_ZN7TwoWire11requestFromEhj>
  return Wire.read();
   da158:	f004 fa3c 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da15c:	6803      	ldr	r3, [r0, #0]
   da15e:	695b      	ldr	r3, [r3, #20]
   da160:	4798      	blx	r3
}
   da162:	b2c0      	uxtb	r0, r0
   da164:	bd10      	pop	{r4, pc}

000da166 <_ZN9MPL3115A25beginEv>:

//Begin
/*******************************************************************************************/
//Start I2C communication
bool MPL3115A2::begin()
{
   da166:	b510      	push	{r4, lr}
   da168:	4604      	mov	r4, r0
  Wire.begin();
   da16a:	f004 fa33 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da16e:	f003 fd17 	bl	ddba0 <_ZN7TwoWire5beginEv>
  uint8_t identify = IIC_Read(WHO_AM_I );
   da172:	210c      	movs	r1, #12
   da174:	4620      	mov	r0, r4
   da176:	f7ff ffd7 	bl	da128 <_ZN9MPL3115A28IIC_ReadEh>
  {
    return false;
  }
  else
    return true;
}
   da17a:	f1a0 03c4 	sub.w	r3, r0, #196	; 0xc4
   da17e:	4258      	negs	r0, r3
   da180:	4158      	adcs	r0, r3
   da182:	bd10      	pop	{r4, pc}

000da184 <_ZN9MPL3115A29IIC_WriteEhh>:
  Wire.requestFrom(MPL3115A2_ADDRESS, 1); // Request the data...
  return Wire.read();
}

void MPL3115A2::IIC_Write(byte regAddr, byte value)
{
   da184:	b538      	push	{r3, r4, r5, lr}
   da186:	4614      	mov	r4, r2
   da188:	460d      	mov	r5, r1
  // This function writes one byto over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
   da18a:	f004 fa23 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da18e:	2160      	movs	r1, #96	; 0x60
   da190:	f003 fd41 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);
   da194:	f004 fa1e 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da198:	6803      	ldr	r3, [r0, #0]
   da19a:	4629      	mov	r1, r5
   da19c:	689b      	ldr	r3, [r3, #8]
   da19e:	4798      	blx	r3
  Wire.write(value);
   da1a0:	f004 fa18 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da1a4:	6803      	ldr	r3, [r0, #0]
   da1a6:	4621      	mov	r1, r4
   da1a8:	689b      	ldr	r3, [r3, #8]
   da1aa:	4798      	blx	r3
  Wire.endTransmission(true);
   da1ac:	f004 fa12 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da1b0:	2101      	movs	r1, #1
}
   da1b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
  // This function writes one byto over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
  Wire.write(regAddr);
  Wire.write(value);
  Wire.endTransmission(true);
   da1b6:	f003 bd31 	b.w	ddc1c <_ZN7TwoWire15endTransmissionEh>

000da1ba <_ZN9MPL3115A216setModeBarometerEv>:
}

//Sets the mode to Barometer
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
   da1ba:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   da1bc:	2126      	movs	r1, #38	; 0x26
}

//Sets the mode to Barometer
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
   da1be:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   da1c0:	f7ff ffb2 	bl	da128 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= ~(1<<7); //Clear ALT bit
  IIC_Write(CTRL_REG1, tempSetting);
   da1c4:	2126      	movs	r1, #38	; 0x26
   da1c6:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   da1ca:	4620      	mov	r0, r4
}
   da1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
  tempSetting &= ~(1<<7); //Clear ALT bit
  IIC_Write(CTRL_REG1, tempSetting);
   da1d0:	f7ff bfd8 	b.w	da184 <_ZN9MPL3115A29IIC_WriteEhh>

000da1d4 <_ZN9MPL3115A217setOversampleRateEh>:
//Call with a rate from 0 to 7. See page 33 for table of ratios.
//Sets the over sample rate. Datasheet calls for 128 but you can set it
//from 1 to 128 samples. The higher the oversample rate the greater
//the time between data samples.
void MPL3115A2::setOversampleRate(byte sampleRate)
{
   da1d4:	2907      	cmp	r1, #7
   da1d6:	bf28      	it	cs
   da1d8:	2107      	movcs	r1, #7
   da1da:	b538      	push	{r3, r4, r5, lr}
   da1dc:	460d      	mov	r5, r1
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   da1de:	2126      	movs	r1, #38	; 0x26
//Call with a rate from 0 to 7. See page 33 for table of ratios.
//Sets the over sample rate. Datasheet calls for 128 but you can set it
//from 1 to 128 samples. The higher the oversample rate the greater
//the time between data samples.
void MPL3115A2::setOversampleRate(byte sampleRate)
{
   da1e0:	4604      	mov	r4, r0
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   da1e2:	f7ff ffa1 	bl	da128 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= 0b11000111; //Clear out old OS bits
   da1e6:	f000 00c7 	and.w	r0, r0, #199	; 0xc7
  tempSetting |= sampleRate; //Mask in new OS bits
  IIC_Write(CTRL_REG1, tempSetting);
   da1ea:	ea40 02c5 	orr.w	r2, r0, r5, lsl #3
   da1ee:	b2d2      	uxtb	r2, r2
   da1f0:	4620      	mov	r0, r4
   da1f2:	2126      	movs	r1, #38	; 0x26
}
   da1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
  tempSetting &= 0b11000111; //Clear out old OS bits
  tempSetting |= sampleRate; //Mask in new OS bits
  IIC_Write(CTRL_REG1, tempSetting);
   da1f8:	f7ff bfc4 	b.w	da184 <_ZN9MPL3115A29IIC_WriteEhh>

000da1fc <_ZN9MPL3115A216enableEventFlagsEv>:

//Enables the pressure and temp measurement event flags so that we can
//test against them. This is recommended in datasheet during setup.
void MPL3115A2::enableEventFlags()
{
  IIC_Write(PT_DATA_CFG, 0x07); // Enable all three pressure and temp event flags
   da1fc:	2207      	movs	r2, #7
   da1fe:	2113      	movs	r1, #19
   da200:	f7ff bfc0 	b.w	da184 <_ZN9MPL3115A29IIC_WriteEhh>

000da204 <_ZN9MPL3115A213toggleOneShotEv>:
}

//Clears then sets the OST bit which causes the sensor to immediately take another reading
//Needed to sample faster than 1Hz
void MPL3115A2::toggleOneShot(void)
{
   da204:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   da206:	2126      	movs	r1, #38	; 0x26
}

//Clears then sets the OST bit which causes the sensor to immediately take another reading
//Needed to sample faster than 1Hz
void MPL3115A2::toggleOneShot(void)
{
   da208:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   da20a:	f7ff ff8d 	bl	da128 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= ~(1<<1); //Clear OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   da20e:	2126      	movs	r1, #38	; 0x26
   da210:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
   da214:	4620      	mov	r0, r4
   da216:	f7ff ffb5 	bl	da184 <_ZN9MPL3115A29IIC_WriteEhh>

  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
   da21a:	2126      	movs	r1, #38	; 0x26
   da21c:	4620      	mov	r0, r4
   da21e:	f7ff ff83 	bl	da128 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting |= (1<<1); //Set OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   da222:	f040 0202 	orr.w	r2, r0, #2
   da226:	b2d2      	uxtb	r2, r2
   da228:	4620      	mov	r0, r4
   da22a:	2126      	movs	r1, #38	; 0x26
}
   da22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tempSetting &= ~(1<<1); //Clear OST bit
  IIC_Write(CTRL_REG1, tempSetting);

  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
  tempSetting |= (1<<1); //Set OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   da230:	f7ff bfa8 	b.w	da184 <_ZN9MPL3115A29IIC_WriteEhh>

000da234 <_ZN9MPL3115A212readPressureEv>:

//Reads the current pressure in Pa
//Unit must be set in barometric pressure mode
//Returns -1 if no new data is available
float MPL3115A2::readPressure()
{
   da234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Check PDR bit, if it's not set then toggle OST
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   da236:	2100      	movs	r1, #0

//Reads the current pressure in Pa
//Unit must be set in barometric pressure mode
//Returns -1 if no new data is available
float MPL3115A2::readPressure()
{
   da238:	4607      	mov	r7, r0
	//Check PDR bit, if it's not set then toggle OST
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   da23a:	f7ff ff75 	bl	da128 <_ZN9MPL3115A28IIC_ReadEh>

	//Wait for PDR bit, indicates we have new pressure data
	int counter = 0;
	while(IIC_Read(STATUS) & (1<<2) == 0)
   da23e:	2100      	movs	r1, #0
   da240:	4638      	mov	r0, r7
   da242:	f7ff ff71 	bl	da128 <_ZN9MPL3115A28IIC_ReadEh>
		if(++counter > 600) return(-999); //Error out after max of 512ms for a read
		delay(1);
	}

	// Read pressure registers
	Wire.beginTransmission(MPL3115A2_ADDRESS);
   da246:	f004 f9c5 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da24a:	2160      	movs	r1, #96	; 0x60
   da24c:	f003 fce3 	bl	ddc16 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(OUT_P_MSB);  // Address of data to get
   da250:	f004 f9c0 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da254:	2101      	movs	r1, #1
   da256:	f7fc f934 	bl	d64c2 <_ZN7TwoWire5writeEi>
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   da25a:	f004 f9bb 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da25e:	2100      	movs	r1, #0
   da260:	f003 fcdc 	bl	ddc1c <_ZN7TwoWire15endTransmissionEh>
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 3) != 3) { // Request three bytes
   da264:	f004 f9b6 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da268:	2203      	movs	r2, #3
   da26a:	2160      	movs	r1, #96	; 0x60
   da26c:	f003 fccc 	bl	ddc08 <_ZN7TwoWire11requestFromEhj>
   da270:	2803      	cmp	r0, #3
   da272:	d12c      	bne.n	da2ce <_ZN9MPL3115A212readPressureEv+0x9a>
		return -999;
	}

	byte msb, csb, lsb;
	msb = Wire.read();
   da274:	f004 f9ae 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da278:	6803      	ldr	r3, [r0, #0]
   da27a:	695b      	ldr	r3, [r3, #20]
   da27c:	4798      	blx	r3
   da27e:	4606      	mov	r6, r0
	csb = Wire.read();
   da280:	f004 f9a8 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da284:	6803      	ldr	r3, [r0, #0]
   da286:	695b      	ldr	r3, [r3, #20]
   da288:	4798      	blx	r3
   da28a:	4604      	mov	r4, r0
	lsb = Wire.read();
   da28c:	f004 f9a2 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da290:	6803      	ldr	r3, [r0, #0]
   da292:	695b      	ldr	r3, [r3, #20]
   da294:	4798      	blx	r3

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading

	// Pressure comes back as a left shifted 20 bit number
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   da296:	0436      	lsls	r6, r6, #16
   da298:	0224      	lsls	r4, r4, #8
   da29a:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
   da29e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
	}

	byte msb, csb, lsb;
	msb = Wire.read();
	csb = Wire.read();
	lsb = Wire.read();
   da2a2:	b2c5      	uxtb	r5, r0

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading

	// Pressure comes back as a left shifted 20 bit number
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   da2a4:	4334      	orrs	r4, r6
   da2a6:	432c      	orrs	r4, r5
	byte msb, csb, lsb;
	msb = Wire.read();
	csb = Wire.read();
	lsb = Wire.read();

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   da2a8:	4638      	mov	r0, r7
   da2aa:	f7ff ffab 	bl	da204 <_ZN9MPL3115A213toggleOneShotEv>

	lsb &= 0b00110000; //Bits 5/4 represent the fractional component
	lsb >>= 4; //Get it right aligned
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction

	float pressure = (float)pressure_whole + pressure_decimal;
   da2ae:	f3c5 1501 	ubfx	r5, r5, #4, #2
   da2b2:	11a3      	asrs	r3, r4, #6
   da2b4:	ee07 5a90 	vmov	s15, r5
   da2b8:	ee00 3a10 	vmov	s0, r3
   da2bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   da2c0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   da2c4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   da2c8:	eea7 0a87 	vfma.f32	s0, s15, s14

	return(pressure);
   da2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Read pressure registers
	Wire.beginTransmission(MPL3115A2_ADDRESS);
	Wire.write(OUT_P_MSB);  // Address of data to get
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 3) != 3) { // Request three bytes
		return -999;
   da2ce:	ed9f 0a01 	vldr	s0, [pc, #4]	; da2d4 <_ZN9MPL3115A212readPressureEv+0xa0>
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction

	float pressure = (float)pressure_whole + pressure_decimal;

	return(pressure);
}
   da2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da2d4:	c479c000 	.word	0xc479c000

000da2d8 <_GLOBAL__sub_I__ZN9MPL3115A2C2Ev>:
   da2d8:	f001 b8a2 	b.w	db420 <HAL_Pin_Map>

000da2dc <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf>:
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   da2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da2e0:	ed2d 8b02 	vpush	{d8}
    if(AnemoneterPeriodReadingCount == 0)
   da2e4:	f241 6578 	movw	r5, #5752	; 0x1678
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   da2e8:	4604      	mov	r4, r0
    if(AnemoneterPeriodReadingCount == 0)
   da2ea:	5943      	ldr	r3, [r0, r5]
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   da2ec:	468a      	mov	sl, r1
    if(AnemoneterPeriodReadingCount == 0)
   da2ee:	b923      	cbnz	r3, da2fa <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0x1e>
    {
        *gustMPH = 0.0;
   da2f0:	ed9f 0a2a 	vldr	s0, [pc, #168]	; da39c <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xc0>
   da2f4:	ed81 0a00 	vstr	s0, [r1]
        return 0;
   da2f8:	e04c      	b.n	da394 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xb8>
    }
    // Nonintuitive math:  We've collected the sum of the observed periods between pulses, and the number of observations.
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
   da2fa:	f500 53b3 	add.w	r3, r0, #5728	; 0x1660
   da2fe:	f241 6b74 	movw	fp, #5748	; 0x1674
   da302:	6918      	ldr	r0, [r3, #16]
   da304:	f006 fa80 	bl	e0808 <__aeabi_f2d>
   da308:	2200      	movs	r2, #0
   da30a:	4b25      	ldr	r3, [pc, #148]	; (da3a0 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xc4>)
   da30c:	f006 fad0 	bl	e08b0 <__aeabi_dmul>
   da310:	4606      	mov	r6, r0
   da312:	5960      	ldr	r0, [r4, r5]
   da314:	f854 300b 	ldr.w	r3, [r4, fp]
   da318:	ee07 0a90 	vmov	s15, r0
   da31c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   da320:	460f      	mov	r7, r1
   da322:	ee17 0a90 	vmov	r0, s15
   da326:	ee08 3a10 	vmov	s16, r3
   da32a:	f006 fa6d 	bl	e0808 <__aeabi_f2d>
   da32e:	4632      	mov	r2, r6
   da330:	463b      	mov	r3, r7
   da332:	f006 fabd 	bl	e08b0 <__aeabi_dmul>
   da336:	eef8 7a48 	vcvt.f32.u32	s15, s16
   da33a:	4680      	mov	r8, r0
   da33c:	ee17 0a90 	vmov	r0, s15
   da340:	4689      	mov	r9, r1
   da342:	f006 fa61 	bl	e0808 <__aeabi_f2d>
   da346:	4602      	mov	r2, r0
   da348:	460b      	mov	r3, r1
   da34a:	4640      	mov	r0, r8
   da34c:	4649      	mov	r1, r9
   da34e:	f006 fbd9 	bl	e0b04 <__aeabi_ddiv>
   da352:	f006 fda5 	bl	e0ea0 <__aeabi_d2f>
    AnemoneterPeriodTotal = 0;
   da356:	2300      	movs	r3, #0
   da358:	f844 300b 	str.w	r3, [r4, fp]
    AnemoneterPeriodReadingCount = 0;
   da35c:	5163      	str	r3, [r4, r5]
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   da35e:	f241 657c 	movw	r5, #5756	; 0x167c
        return 0;
    }
    // Nonintuitive math:  We've collected the sum of the observed periods between pulses, and the number of observations.
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
   da362:	4680      	mov	r8, r0
    AnemoneterPeriodTotal = 0;
    AnemoneterPeriodReadingCount = 0;
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   da364:	5960      	ldr	r0, [r4, r5]
   da366:	ee07 0a90 	vmov	s15, r0
   da36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   da36e:	ee17 0a90 	vmov	r0, s15
   da372:	f006 fa49 	bl	e0808 <__aeabi_f2d>
   da376:	460b      	mov	r3, r1
   da378:	4602      	mov	r2, r0
   da37a:	4639      	mov	r1, r7
   da37c:	4630      	mov	r0, r6
   da37e:	f006 fbc1 	bl	e0b04 <__aeabi_ddiv>
   da382:	f006 fd8d 	bl	e0ea0 <__aeabi_d2f>
    GustPeriod = UINT_MAX;
   da386:	f04f 33ff 	mov.w	r3, #4294967295
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
    AnemoneterPeriodTotal = 0;
    AnemoneterPeriodReadingCount = 0;
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   da38a:	f8ca 0000 	str.w	r0, [sl]
    GustPeriod = UINT_MAX;
   da38e:	ee00 8a10 	vmov	s0, r8
   da392:	5163      	str	r3, [r4, r5]
    return result;
}
   da394:	ecbd 8b02 	vpop	{d8}
   da398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da39c:	00000000 	.word	0x00000000
   da3a0:	408f4000 	.word	0x408f4000
   da3a4:	00000000 	.word	0x00000000

000da3a8 <_ZN14WeatherSensors21captureBatteryVoltageEv>:

void WeatherSensors::captureBatteryVoltage()
{
   da3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da3aa:	4605      	mov	r5, r0
  unsigned int rawVoltage = 0;
  Wire.requestFrom(0x4D, 2);
   da3ac:	f004 f912 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da3b0:	2202      	movs	r2, #2
   da3b2:	214d      	movs	r1, #77	; 0x4d
   da3b4:	f003 fc28 	bl	ddc08 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() == 2)
   da3b8:	f004 f90c 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da3bc:	6803      	ldr	r3, [r0, #0]
   da3be:	691b      	ldr	r3, [r3, #16]
   da3c0:	4798      	blx	r3
   da3c2:	2802      	cmp	r0, #2
   da3c4:	d132      	bne.n	da42c <_ZN14WeatherSensors21captureBatteryVoltageEv+0x84>
  {
    rawVoltage = (Wire.read() << 8) | (Wire.read());
   da3c6:	f004 f905 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da3ca:	6803      	ldr	r3, [r0, #0]
   da3cc:	695b      	ldr	r3, [r3, #20]
   da3ce:	4798      	blx	r3
   da3d0:	4606      	mov	r6, r0
   da3d2:	f004 f8ff 	bl	de5d4 <_Z19__fetch_global_Wirev>
   da3d6:	6803      	ldr	r3, [r0, #0]
   da3d8:	695b      	ldr	r3, [r3, #20]
   da3da:	4798      	blx	r3
    batVoltageTotal += (float)(rawVoltage)/4096.0*13.64; // 3.3*(4.7+1.5)/1.5
   da3dc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   da3e0:	ee07 0a90 	vmov	s15, r0
   da3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   da3e8:	f505 54b5 	add.w	r4, r5, #5792	; 0x16a0
   da3ec:	ee17 0a90 	vmov	r0, s15
   da3f0:	f006 fa0a 	bl	e0808 <__aeabi_f2d>
   da3f4:	2200      	movs	r2, #0
   da3f6:	4b10      	ldr	r3, [pc, #64]	; (da438 <_ZN14WeatherSensors21captureBatteryVoltageEv+0x90>)
   da3f8:	f006 fa5a 	bl	e08b0 <__aeabi_dmul>
   da3fc:	a30c      	add	r3, pc, #48	; (adr r3, da430 <_ZN14WeatherSensors21captureBatteryVoltageEv+0x88>)
   da3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   da402:	f006 fa55 	bl	e08b0 <__aeabi_dmul>
   da406:	4606      	mov	r6, r0
   da408:	6920      	ldr	r0, [r4, #16]
   da40a:	460f      	mov	r7, r1
   da40c:	f006 f9fc 	bl	e0808 <__aeabi_f2d>
   da410:	4602      	mov	r2, r0
   da412:	460b      	mov	r3, r1
   da414:	4630      	mov	r0, r6
   da416:	4639      	mov	r1, r7
   da418:	f006 f898 	bl	e054c <__adddf3>
   da41c:	f006 fd40 	bl	e0ea0 <__aeabi_d2f>
    batVoltageCount ++;
   da420:	f241 62b4 	movw	r2, #5812	; 0x16b4
  unsigned int rawVoltage = 0;
  Wire.requestFrom(0x4D, 2);
  if (Wire.available() == 2)
  {
    rawVoltage = (Wire.read() << 8) | (Wire.read());
    batVoltageTotal += (float)(rawVoltage)/4096.0*13.64; // 3.3*(4.7+1.5)/1.5
   da424:	6120      	str	r0, [r4, #16]
    batVoltageCount ++;
   da426:	58ab      	ldr	r3, [r5, r2]
   da428:	3301      	adds	r3, #1
   da42a:	50ab      	str	r3, [r5, r2]
   da42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da42e:	bf00      	nop
   da430:	147ae148 	.word	0x147ae148
   da434:	402b47ae 	.word	0x402b47ae
   da438:	3f300000 	.word	0x3f300000

000da43c <_ZN14WeatherSensors20getAndResetBatteryMVEv>:
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   da43c:	f241 62b4 	movw	r2, #5812	; 0x16b4
   da440:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
   da444:	5881      	ldr	r1, [r0, r2]
   da446:	edd3 6a04 	vldr	s13, [r3, #16]
   da44a:	ee07 1a90 	vmov	s15, r1
   da44e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    batVoltageCount ++;
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
   da452:	b082      	sub	sp, #8
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   da454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 batVoltageTotal = 0;
   da458:	2100      	movs	r1, #0
   da45a:	6119      	str	r1, [r3, #16]
 batVoltageCount = 0;
   da45c:	2300      	movs	r3, #0
   da45e:	5083      	str	r3, [r0, r2]
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   da460:	ed9f 7a05 	vldr	s14, [pc, #20]	; da478 <_ZN14WeatherSensors20getAndResetBatteryMVEv+0x3c>
   da464:	ee67 7a87 	vmul.f32	s15, s15, s14
   da468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   da46c:	edcd 7a01 	vstr	s15, [sp, #4]
 batVoltageTotal = 0;
 batVoltageCount = 0;
 return result;
}
   da470:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   da474:	b002      	add	sp, #8
   da476:	4770      	bx	lr
   da478:	447a0000 	.word	0x447a0000

000da47c <_ZN14WeatherSensors21getAndResetRainInchesEv>:
}*/


float WeatherSensors::getAndResetRainInches()
{
    float result = RainScaleInches * float(rainEventCount);
   da47c:	f500 53b3 	add.w	r3, r0, #5728	; 0x1660
   da480:	ed93 0a00 	vldr	s0, [r3]
   da484:	edd3 7a02 	vldr	s15, [r3, #8]
   da488:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    rainEventCount = 0;
   da48c:	2200      	movs	r2, #0
   da48e:	601a      	str	r2, [r3, #0]
    return result;
}
   da490:	ee20 0a27 	vmul.f32	s0, s0, s15
   da494:	4770      	bx	lr
	...

000da498 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv>:
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   da498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(windVaneReadingCount == 0) {
   da49a:	f241 6790 	movw	r7, #5776	; 0x1690
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   da49e:	ed2d 8b02 	vpush	{d8}
    if(windVaneReadingCount == 0) {
   da4a2:	59c3      	ldr	r3, [r0, r7]
   da4a4:	ed9f 8a28 	vldr	s16, [pc, #160]	; da548 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb0>
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   da4a8:	4604      	mov	r4, r0
    if(windVaneReadingCount == 0) {
   da4aa:	2b00      	cmp	r3, #0
   da4ac:	d041      	beq.n	da532 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9a>
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   da4ae:	ee07 3a90 	vmov	s15, r3
   da4b2:	f500 56b4 	add.w	r6, r0, #5760	; 0x1680
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   da4b6:	edd6 6a03 	vldr	s13, [r6, #12]
float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   da4ba:	ed96 7a02 	vldr	s14, [r6, #8]
   da4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
   da4c2:	4635      	mov	r5, r6
float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   da4c4:	eec7 8a27 	vdiv.f32	s17, s14, s15
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   da4c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   da4cc:	eec7 7a28 	vdiv.f32	s15, s14, s17
   da4d0:	ee17 0a90 	vmov	r0, s15
   da4d4:	f006 f998 	bl	e0808 <__aeabi_f2d>
   da4d8:	ec41 0b10 	vmov	d0, r0, r1
   da4dc:	f004 fbb0 	bl	dec40 <atan>
   da4e0:	2200      	movs	r2, #0
   da4e2:	ec51 0b10 	vmov	r0, r1, d0
   da4e6:	4b19      	ldr	r3, [pc, #100]	; (da54c <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb4>)
   da4e8:	f006 f9e2 	bl	e08b0 <__aeabi_dmul>
   da4ec:	a314      	add	r3, pc, #80	; (adr r3, da540 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xa8>)
   da4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   da4f2:	f006 fb07 	bl	e0b04 <__aeabi_ddiv>
   da4f6:	f006 fcd3 	bl	e0ea0 <__aeabi_d2f>
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   da4fa:	eef4 8ac8 	vcmpe.f32	s17, s16
   da4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   da502:	ee00 0a10 	vmov	s0, r0
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   da506:	bf48      	it	mi
   da508:	eddf 7a11 	vldrmi	s15, [pc, #68]	; da550 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb8>
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
   da50c:	ed86 8a02 	vstr	s16, [r6, #8]
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   da510:	bf48      	it	mi
   da512:	ee30 0a27 	vaddmi.f32	s0, s0, s15
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
   da516:	2300      	movs	r3, #0
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;
   da518:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   da51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
   da520:	ed85 8a03 	vstr	s16, [r5, #12]
    windVaneReadingCount = 0;
   da524:	51e3      	str	r3, [r4, r7]
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;
   da526:	d506      	bpl.n	da536 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9e>
   da528:	eddf 7a0a 	vldr	s15, [pc, #40]	; da554 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xbc>
   da52c:	ee30 0a27 	vadd.f32	s0, s0, s15
   da530:	e001      	b.n	da536 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9e>
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
   da532:	eeb0 0a48 	vmov.f32	s0, s16
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;

   return result;
}
   da536:	ecbd 8b02 	vpop	{d8}
   da53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da53c:	f3af 8000 	nop.w
   da540:	f01b866e 	.word	0xf01b866e
   da544:	400921f9 	.word	0x400921f9
   da548:	00000000 	.word	0x00000000
   da54c:	40668000 	.word	0x40668000
   da550:	43340000 	.word	0x43340000
   da554:	43b40000 	.word	0x43b40000

000da558 <_ZN14WeatherSensors20lookupRadiansFromRawEj>:

float WeatherSensors::lookupRadiansFromRaw(unsigned int analogRaw)
{
//Serial.println(analogRaw);
    // The mechanism for reading the weathervane isn't arbitrary, but effectively, we just need to look up which of the 16 positions we're in.
    if(analogRaw >= 2200 && analogRaw < 2400) return (3.14);//South
   da558:	f6a1 0398 	subw	r3, r1, #2200	; 0x898
   da55c:	2bc7      	cmp	r3, #199	; 0xc7
   da55e:	d942      	bls.n	da5e6 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x8e>
    if(analogRaw >= 2100 && analogRaw < 2200) return (3.53);//SSW
   da560:	f6a1 0334 	subw	r3, r1, #2100	; 0x834
   da564:	2b63      	cmp	r3, #99	; 0x63
   da566:	d941      	bls.n	da5ec <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x94>
    if(analogRaw >= 3200 && analogRaw < 3299) return (3.93);//SW
   da568:	f5a1 6348 	sub.w	r3, r1, #3200	; 0xc80
   da56c:	2b62      	cmp	r3, #98	; 0x62
   da56e:	d940      	bls.n	da5f2 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x9a>
    if(analogRaw >= 3100 && analogRaw < 3200) return (4.32);//WSW
   da570:	f6a1 431c 	subw	r3, r1, #3100	; 0xc1c
   da574:	2b63      	cmp	r3, #99	; 0x63
   da576:	d93f      	bls.n	da5f8 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xa0>
    if(analogRaw >= 3890 && analogRaw < 3999) return (4.71);//West
   da578:	f6a1 7332 	subw	r3, r1, #3890	; 0xf32
   da57c:	2b6c      	cmp	r3, #108	; 0x6c
   da57e:	d93e      	bls.n	da5fe <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xa6>
    if(analogRaw >= 3700 && analogRaw < 3780) return (5.11);//WNW
   da580:	f6a1 6374 	subw	r3, r1, #3700	; 0xe74
   da584:	2b4f      	cmp	r3, #79	; 0x4f
   da586:	d93d      	bls.n	da604 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xac>
    if(analogRaw >= 3780 && analogRaw < 3890) return (5.50);//NW
   da588:	f6a1 63c4 	subw	r3, r1, #3780	; 0xec4
   da58c:	2b6d      	cmp	r3, #109	; 0x6d
   da58e:	d93c      	bls.n	da60a <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xb2>
    if(analogRaw >= 3400 && analogRaw < 3500) return (5.89);//NNW
   da590:	f6a1 5348 	subw	r3, r1, #3400	; 0xd48
   da594:	2b63      	cmp	r3, #99	; 0x63
   da596:	d93b      	bls.n	da610 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xb8>
    if(analogRaw >= 3570 && analogRaw < 3700) return (0.00);//North
   da598:	f6a1 53f2 	subw	r3, r1, #3570	; 0xdf2
   da59c:	2b81      	cmp	r3, #129	; 0x81
   da59e:	d93a      	bls.n	da616 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xbe>
    if(analogRaw >= 2600 && analogRaw < 2700) return (0.39);//NNE
   da5a0:	f6a1 2328 	subw	r3, r1, #2600	; 0xa28
   da5a4:	2b63      	cmp	r3, #99	; 0x63
   da5a6:	d939      	bls.n	da61c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xc4>
    if(analogRaw >= 2750 && analogRaw < 2850) return (0.79);//NE
   da5a8:	f6a1 23be 	subw	r3, r1, #2750	; 0xabe
   da5ac:	2b63      	cmp	r3, #99	; 0x63
   da5ae:	d938      	bls.n	da622 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xca>
    if(analogRaw >= 1510 && analogRaw < 1580) return (1.18);//ENE
   da5b0:	f2a1 53e6 	subw	r3, r1, #1510	; 0x5e6
   da5b4:	2b45      	cmp	r3, #69	; 0x45
   da5b6:	d937      	bls.n	da628 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xd0>
    if(analogRaw >= 1580 && analogRaw < 1650) return (1.57);//East
   da5b8:	f2a1 632c 	subw	r3, r1, #1580	; 0x62c
   da5bc:	2b45      	cmp	r3, #69	; 0x45
   da5be:	d936      	bls.n	da62e <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xd6>
    if(analogRaw >= 1470 && analogRaw < 1510) return (1.96);//ESE
   da5c0:	f2a1 53be 	subw	r3, r1, #1470	; 0x5be
   da5c4:	2b27      	cmp	r3, #39	; 0x27
   da5c6:	d935      	bls.n	da634 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xdc>
    if(analogRaw >= 1900 && analogRaw < 2000) return (2.36);//SE
   da5c8:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
   da5cc:	2b63      	cmp	r3, #99	; 0x63
   da5ce:	d934      	bls.n	da63a <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xe2>
    if(analogRaw >= 1700 && analogRaw < 1750) return (2.74);//SSE
   da5d0:	f2a1 61a4 	subw	r1, r1, #1700	; 0x6a4
    if(analogRaw > 4000) return(-1); // Open circuit?  Probably means the sensor is not connected
   da5d4:	eddf 7a1a 	vldr	s15, [pc, #104]	; da640 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xe8>
   da5d8:	2932      	cmp	r1, #50	; 0x32
   da5da:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   da5de:	bf38      	it	cc
   da5e0:	eeb0 0a67 	vmovcc.f32	s0, s15
   da5e4:	4770      	bx	lr

float WeatherSensors::lookupRadiansFromRaw(unsigned int analogRaw)
{
//Serial.println(analogRaw);
    // The mechanism for reading the weathervane isn't arbitrary, but effectively, we just need to look up which of the 16 positions we're in.
    if(analogRaw >= 2200 && analogRaw < 2400) return (3.14);//South
   da5e6:	ed9f 0a17 	vldr	s0, [pc, #92]	; da644 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xec>
   da5ea:	4770      	bx	lr
    if(analogRaw >= 2100 && analogRaw < 2200) return (3.53);//SSW
   da5ec:	ed9f 0a16 	vldr	s0, [pc, #88]	; da648 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf0>
   da5f0:	4770      	bx	lr
    if(analogRaw >= 3200 && analogRaw < 3299) return (3.93);//SW
   da5f2:	ed9f 0a16 	vldr	s0, [pc, #88]	; da64c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf4>
   da5f6:	4770      	bx	lr
    if(analogRaw >= 3100 && analogRaw < 3200) return (4.32);//WSW
   da5f8:	ed9f 0a15 	vldr	s0, [pc, #84]	; da650 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf8>
   da5fc:	4770      	bx	lr
    if(analogRaw >= 3890 && analogRaw < 3999) return (4.71);//West
   da5fe:	ed9f 0a15 	vldr	s0, [pc, #84]	; da654 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xfc>
   da602:	4770      	bx	lr
    if(analogRaw >= 3700 && analogRaw < 3780) return (5.11);//WNW
   da604:	ed9f 0a14 	vldr	s0, [pc, #80]	; da658 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x100>
   da608:	4770      	bx	lr
    if(analogRaw >= 3780 && analogRaw < 3890) return (5.50);//NW
   da60a:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
   da60e:	4770      	bx	lr
    if(analogRaw >= 3400 && analogRaw < 3500) return (5.89);//NNW
   da610:	ed9f 0a12 	vldr	s0, [pc, #72]	; da65c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x104>
   da614:	4770      	bx	lr
    if(analogRaw >= 3570 && analogRaw < 3700) return (0.00);//North
   da616:	ed9f 0a12 	vldr	s0, [pc, #72]	; da660 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x108>
   da61a:	4770      	bx	lr
    if(analogRaw >= 2600 && analogRaw < 2700) return (0.39);//NNE
   da61c:	ed9f 0a11 	vldr	s0, [pc, #68]	; da664 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x10c>
   da620:	4770      	bx	lr
    if(analogRaw >= 2750 && analogRaw < 2850) return (0.79);//NE
   da622:	ed9f 0a11 	vldr	s0, [pc, #68]	; da668 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x110>
   da626:	4770      	bx	lr
    if(analogRaw >= 1510 && analogRaw < 1580) return (1.18);//ENE
   da628:	ed9f 0a10 	vldr	s0, [pc, #64]	; da66c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x114>
   da62c:	4770      	bx	lr
    if(analogRaw >= 1580 && analogRaw < 1650) return (1.57);//East
   da62e:	ed9f 0a10 	vldr	s0, [pc, #64]	; da670 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x118>
   da632:	4770      	bx	lr
    if(analogRaw >= 1470 && analogRaw < 1510) return (1.96);//ESE
   da634:	ed9f 0a0f 	vldr	s0, [pc, #60]	; da674 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x11c>
   da638:	4770      	bx	lr
    if(analogRaw >= 1900 && analogRaw < 2000) return (2.36);//SE
   da63a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; da678 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x120>
    if(analogRaw >= 1700 && analogRaw < 1750) return (2.74);//SSE
    if(analogRaw > 4000) return(-1); // Open circuit?  Probably means the sensor is not connected
   // Particle.publish("error", String::format("Got %d from Windvane.",analogRaw), 60 , PRIVATE);
    return -1;
}
   da63e:	4770      	bx	lr
   da640:	402f5c29 	.word	0x402f5c29
   da644:	4048f5c3 	.word	0x4048f5c3
   da648:	4061eb85 	.word	0x4061eb85
   da64c:	407b851f 	.word	0x407b851f
   da650:	408a3d71 	.word	0x408a3d71
   da654:	4096b852 	.word	0x4096b852
   da658:	40a3851f 	.word	0x40a3851f
   da65c:	40bc7ae1 	.word	0x40bc7ae1
   da660:	00000000 	.word	0x00000000
   da664:	3ec7ae14 	.word	0x3ec7ae14
   da668:	3f4a3d71 	.word	0x3f4a3d71
   da66c:	3f970a3d 	.word	0x3f970a3d
   da670:	3fc8f5c3 	.word	0x3fc8f5c3
   da674:	3ffae148 	.word	0x3ffae148
   da678:	40170a3d 	.word	0x40170a3d
   da67c:	00000000 	.word	0x00000000

000da680 <_ZN14WeatherSensors15captureWindVaneEv>:
    float result = RainScaleInches * float(rainEventCount);
    rainEventCount = 0;
    return result;
}
/// Wind Vane
void WeatherSensors::captureWindVane() {
   da680:	b530      	push	{r4, r5, lr}
   da682:	ed2d 8b02 	vpush	{d8}
    // Read the wind vane, and update the running average of the two components of the vector
    unsigned int windVaneRaw = analogRead(WindVanePin);
   da686:	f241 6384 	movw	r3, #5764	; 0x1684
    float result = RainScaleInches * float(rainEventCount);
    rainEventCount = 0;
    return result;
}
/// Wind Vane
void WeatherSensors::captureWindVane() {
   da68a:	b083      	sub	sp, #12
   da68c:	4604      	mov	r4, r0
    // Read the wind vane, and update the running average of the two components of the vector
    unsigned int windVaneRaw = analogRead(WindVanePin);
   da68e:	5ac0      	ldrh	r0, [r0, r3]
   da690:	f003 ff6e 	bl	de570 <analogRead>
    //Serial.println(windVaneRaw);
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
   da694:	4601      	mov	r1, r0
   da696:	4620      	mov	r0, r4
   da698:	f7ff ff5e 	bl	da558 <_ZN14WeatherSensors20lookupRadiansFromRawEj>
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
   da69c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   da6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da6a4:	dd3c      	ble.n	da720 <_ZN14WeatherSensors15captureWindVaneEv+0xa0>
   da6a6:	ee10 0a10 	vmov	r0, s0
   da6aa:	f006 f8ad 	bl	e0808 <__aeabi_f2d>
   da6ae:	a31e      	add	r3, pc, #120	; (adr r3, da728 <_ZN14WeatherSensors15captureWindVaneEv+0xa8>)
   da6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   da6b4:	ec41 0b18 	vmov	d8, r0, r1
   da6b8:	f006 fb6c 	bl	e0d94 <__aeabi_dcmplt>
   da6bc:	b380      	cbz	r0, da720 <_ZN14WeatherSensors15captureWindVaneEv+0xa0>
    {
        windVaneCosTotal += cos(windVaneRadians);
   da6be:	eeb0 0a48 	vmov.f32	s0, s16
   da6c2:	eef0 0a68 	vmov.f32	s1, s17
   da6c6:	f004 fd07 	bl	df0d8 <cos>
   da6ca:	f504 55b4 	add.w	r5, r4, #5760	; 0x1680
   da6ce:	ec53 2b10 	vmov	r2, r3, d0
   da6d2:	68a8      	ldr	r0, [r5, #8]
   da6d4:	e9cd 2300 	strd	r2, r3, [sp]
   da6d8:	f006 f896 	bl	e0808 <__aeabi_f2d>
   da6dc:	e9dd 2300 	ldrd	r2, r3, [sp]
   da6e0:	f005 ff34 	bl	e054c <__adddf3>
   da6e4:	f006 fbdc 	bl	e0ea0 <__aeabi_d2f>
        windVaneSinTotal += sin(windVaneRadians);
   da6e8:	eeb0 0a48 	vmov.f32	s0, s16
   da6ec:	eef0 0a68 	vmov.f32	s1, s17
    //Serial.println(windVaneRaw);
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
    {
        windVaneCosTotal += cos(windVaneRadians);
   da6f0:	60a8      	str	r0, [r5, #8]
        windVaneSinTotal += sin(windVaneRadians);
   da6f2:	f004 fd59 	bl	df1a8 <sin>
   da6f6:	f504 55b4 	add.w	r5, r4, #5760	; 0x1680
   da6fa:	ec53 2b10 	vmov	r2, r3, d0
   da6fe:	68e8      	ldr	r0, [r5, #12]
   da700:	e9cd 2300 	strd	r2, r3, [sp]
   da704:	f006 f880 	bl	e0808 <__aeabi_f2d>
   da708:	e9dd 2300 	ldrd	r2, r3, [sp]
   da70c:	f005 ff1e 	bl	e054c <__adddf3>
   da710:	f006 fbc6 	bl	e0ea0 <__aeabi_d2f>
        windVaneReadingCount++;
   da714:	f241 6290 	movw	r2, #5776	; 0x1690
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
    {
        windVaneCosTotal += cos(windVaneRadians);
        windVaneSinTotal += sin(windVaneRadians);
   da718:	60e8      	str	r0, [r5, #12]
        windVaneReadingCount++;
   da71a:	58a3      	ldr	r3, [r4, r2]
   da71c:	3301      	adds	r3, #1
   da71e:	50a3      	str	r3, [r4, r2]
    }
    return;
}
   da720:	b003      	add	sp, #12
   da722:	ecbd 8b02 	vpop	{d8}
   da726:	bd30      	pop	{r4, r5, pc}
   da728:	f80dc337 	.word	0xf80dc337
   da72c:	401890fc 	.word	0x401890fc

000da730 <_ZN14WeatherSensors27captureTempHumidityPressureEv>:
    return -1;
}

/// end Wind vane

void WeatherSensors::captureTempHumidityPressure() {
   da730:	b530      	push	{r4, r5, lr}
   da732:	b085      	sub	sp, #20
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   da734:	aa02      	add	r2, sp, #8
   da736:	a903      	add	r1, sp, #12
    return -1;
}

/// end Wind vane

void WeatherSensors::captureTempHumidityPressure() {
   da738:	4604      	mov	r4, r0
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   da73a:	f7fc fab4 	bl	d6ca6 <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_>

  uint16_t tempKx10 = uint16_t(tempC*10)+2732;
  airTempKMedian.add(tempKx10);
   da73e:	eddd 7a03 	vldr	s15, [sp, #12]
   da742:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   da746:	ee67 7a87 	vmul.f32	s15, s15, s14
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   da74a:	4605      	mov	r5, r0

  uint16_t tempKx10 = uint16_t(tempC*10)+2732;
  airTempKMedian.add(tempKx10);
   da74c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   da750:	f104 000a 	add.w	r0, r4, #10
   da754:	ee17 1a90 	vmov	r1, s15
   da758:	f601 21ac 	addw	r1, r1, #2732	; 0xaac
   da75c:	b289      	uxth	r1, r1
   da75e:	f000 fde4 	bl	db32a <_ZN13RunningMedian3addEt>

  relativeHumidtyMedian.add(humidityRH);
   da762:	eddd 7a02 	vldr	s15, [sp, #8]
   da766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   da76a:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   da76e:	edcd 7a01 	vstr	s15, [sp, #4]
   da772:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   da776:	f000 fdd8 	bl	db32a <_ZN13RunningMedian3addEt>

if (validTH){
   da77a:	2d00      	cmp	r5, #0
   da77c:	d048      	beq.n	da810 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
    //If the result is reasonable, add it to the running mean
    if(humidityRH > 0 && humidityRH < 105) // It's theoretically possible to get supersaturation humidity levels over 100%
   da77e:	ed9d 7a02 	vldr	s14, [sp, #8]
   da782:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   da786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da78a:	dd13      	ble.n	da7b4 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x84>
   da78c:	eddf 7a31 	vldr	s15, [pc, #196]	; da854 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x124>
   da790:	eeb4 7ae7 	vcmpe.f32	s14, s15
   da794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da798:	d50c      	bpl.n	da7b4 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x84>
    {
        // Add the observation to the running sum, and increment the number of observations
        humidityRHTotal += humidityRH;
   da79a:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   da79e:	edd3 7a05 	vldr	s15, [r3, #20]
   da7a2:	ee77 7a87 	vadd.f32	s15, s15, s14
        humidityRHReadingCount++;
   da7a6:	f241 6298 	movw	r2, #5784	; 0x1698
if (validTH){
    //If the result is reasonable, add it to the running mean
    if(humidityRH > 0 && humidityRH < 105) // It's theoretically possible to get supersaturation humidity levels over 100%
    {
        // Add the observation to the running sum, and increment the number of observations
        humidityRHTotal += humidityRH;
   da7aa:	edc3 7a05 	vstr	s15, [r3, #20]
        humidityRHReadingCount++;
   da7ae:	58a3      	ldr	r3, [r4, r2]
   da7b0:	3301      	adds	r3, #1
   da7b2:	50a3      	str	r3, [r4, r2]
    }


    tempF = (tempC * 9.0) / 5.0 + 32.0;
   da7b4:	9803      	ldr	r0, [sp, #12]
   da7b6:	f006 f827 	bl	e0808 <__aeabi_f2d>
   da7ba:	2200      	movs	r2, #0
   da7bc:	4b26      	ldr	r3, [pc, #152]	; (da858 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x128>)
   da7be:	f006 f877 	bl	e08b0 <__aeabi_dmul>
   da7c2:	2200      	movs	r2, #0
   da7c4:	4b25      	ldr	r3, [pc, #148]	; (da85c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x12c>)
   da7c6:	f006 f99d 	bl	e0b04 <__aeabi_ddiv>
   da7ca:	2200      	movs	r2, #0
   da7cc:	4b24      	ldr	r3, [pc, #144]	; (da860 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x130>)
   da7ce:	f005 febd 	bl	e054c <__adddf3>
   da7d2:	f006 fb65 	bl	e0ea0 <__aeabi_d2f>
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
   da7d6:	eddf 7a23 	vldr	s15, [pc, #140]	; da864 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x134>
        humidityRHTotal += humidityRH;
        humidityRHReadingCount++;
    }


    tempF = (tempC * 9.0) / 5.0 + 32.0;
   da7da:	ee07 0a10 	vmov	s14, r0
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
   da7de:	eeb4 7ae7 	vcmpe.f32	s14, s15
   da7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da7e6:	dd13      	ble.n	da810 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
   da7e8:	eddf 7a1f 	vldr	s15, [pc, #124]	; da868 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x138>
   da7ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
   da7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da7f4:	d50c      	bpl.n	da810 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
    {
        // Add the observation to the running sum, and increment the number of observations
        tempFTotal += tempF;
   da7f6:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   da7fa:	edd3 7a07 	vldr	s15, [r3, #28]
   da7fe:	ee77 7a87 	vadd.f32	s15, s15, s14
        tempFReadingCount++;
   da802:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
    tempF = (tempC * 9.0) / 5.0 + 32.0;
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
    {
        // Add the observation to the running sum, and increment the number of observations
        tempFTotal += tempF;
   da806:	edc3 7a07 	vstr	s15, [r3, #28]
        tempFReadingCount++;
   da80a:	6813      	ldr	r3, [r2, #0]
   da80c:	3301      	adds	r3, #1
   da80e:	6013      	str	r3, [r2, #0]
    }
  }
  //Measure Pressure from the MPL3115A2
  float pressurePascals = barom.readPressure();
   da810:	f104 0008 	add.w	r0, r4, #8
   da814:	f7ff fd0e 	bl	da234 <_ZN9MPL3115A212readPressureEv>

  //If the result is reasonable, add it to the running mean
  // What's reasonable? http://findanswers.noaa.gov/noaa.answers/consumer/kbdetail.asp?kbid=544
  if(pressurePascals > 80000 && pressurePascals < 110000)
   da818:	eddf 7a14 	vldr	s15, [pc, #80]	; da86c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x13c>
   da81c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da824:	dd13      	ble.n	da84e <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x11e>
   da826:	eddf 7a12 	vldr	s15, [pc, #72]	; da870 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x140>
   da82a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da832:	d50c      	bpl.n	da84e <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x11e>
  {
      // Add the observation to the running sum, and increment the number of observations
      pressurePascalsTotal += pressurePascals;
   da834:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
   da838:	edd3 7a01 	vldr	s15, [r3, #4]
   da83c:	ee37 0a80 	vadd.f32	s0, s15, s0
      pressurePascalsReadingCount++;
   da840:	f241 62a8 	movw	r2, #5800	; 0x16a8
  //If the result is reasonable, add it to the running mean
  // What's reasonable? http://findanswers.noaa.gov/noaa.answers/consumer/kbdetail.asp?kbid=544
  if(pressurePascals > 80000 && pressurePascals < 110000)
  {
      // Add the observation to the running sum, and increment the number of observations
      pressurePascalsTotal += pressurePascals;
   da844:	ed83 0a01 	vstr	s0, [r3, #4]
      pressurePascalsReadingCount++;
   da848:	58a3      	ldr	r3, [r4, r2]
   da84a:	3301      	adds	r3, #1
   da84c:	50a3      	str	r3, [r4, r2]
  }
  return;
}
   da84e:	b005      	add	sp, #20
   da850:	bd30      	pop	{r4, r5, pc}
   da852:	bf00      	nop
   da854:	42d20000 	.word	0x42d20000
   da858:	40220000 	.word	0x40220000
   da85c:	40140000 	.word	0x40140000
   da860:	40400000 	.word	0x40400000
   da864:	c2480000 	.word	0xc2480000
   da868:	43160000 	.word	0x43160000
   da86c:	479c4000 	.word	0x479c4000
   da870:	47d6d800 	.word	0x47d6d800

000da874 <_ZN14WeatherSensors16getAndResetTempFEv>:
  }
}

float WeatherSensors::getAndResetTempF()
{
    if(tempFReadingCount == 0) {
   da874:	f500 52b5 	add.w	r2, r0, #5792	; 0x16a0
   da878:	ed9f 0a09 	vldr	s0, [pc, #36]	; da8a0 <_ZN14WeatherSensors16getAndResetTempFEv+0x2c>
   da87c:	6813      	ldr	r3, [r2, #0]
   da87e:	b16b      	cbz	r3, da89c <_ZN14WeatherSensors16getAndResetTempFEv+0x28>
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
   da880:	ee07 3a90 	vmov	s15, r3
   da884:	f500 50b4 	add.w	r0, r0, #5760	; 0x1680
   da888:	ed90 7a07 	vldr	s14, [r0, #28]
    tempFTotal = 0.0;
   da88c:	ed80 0a07 	vstr	s0, [r0, #28]
float WeatherSensors::getAndResetTempF()
{
    if(tempFReadingCount == 0) {
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
   da890:	eef8 7a67 	vcvt.f32.u32	s15, s15
    tempFTotal = 0.0;
    tempFReadingCount = 0;
   da894:	2300      	movs	r3, #0
    return result;
   da896:	ee87 0a27 	vdiv.f32	s0, s14, s15
    if(tempFReadingCount == 0) {
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
    tempFTotal = 0.0;
    tempFReadingCount = 0;
   da89a:	6013      	str	r3, [r2, #0]
    return result;
}
   da89c:	4770      	bx	lr
   da89e:	bf00      	nop
   da8a0:	00000000 	.word	0x00000000

000da8a4 <_ZN14WeatherSensors26getAndResetPressurePascalsEv>:
}


float WeatherSensors::getAndResetPressurePascals()
{
    if(pressurePascalsReadingCount == 0) {
   da8a4:	f241 61a8 	movw	r1, #5800	; 0x16a8
   da8a8:	ed9f 0a09 	vldr	s0, [pc, #36]	; da8d0 <_ZN14WeatherSensors26getAndResetPressurePascalsEv+0x2c>
   da8ac:	5843      	ldr	r3, [r0, r1]
   da8ae:	b16b      	cbz	r3, da8cc <_ZN14WeatherSensors26getAndResetPressurePascalsEv+0x28>
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
   da8b0:	ee07 3a90 	vmov	s15, r3
   da8b4:	f500 52b5 	add.w	r2, r0, #5792	; 0x16a0
   da8b8:	ed92 7a01 	vldr	s14, [r2, #4]
    pressurePascalsTotal = 0.0;
   da8bc:	ed82 0a01 	vstr	s0, [r2, #4]
float WeatherSensors::getAndResetPressurePascals()
{
    if(pressurePascalsReadingCount == 0) {
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
   da8c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pressurePascalsTotal = 0.0;
    pressurePascalsReadingCount = 0;
   da8c4:	2300      	movs	r3, #0
    return result;
   da8c6:	ee87 0a27 	vdiv.f32	s0, s14, s15
    if(pressurePascalsReadingCount == 0) {
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
    pressurePascalsTotal = 0.0;
    pressurePascalsReadingCount = 0;
   da8ca:	5043      	str	r3, [r0, r1]
    return result;
}
   da8cc:	4770      	bx	lr
   da8ce:	bf00      	nop
	...

000da8d8 <_ZN14WeatherSensors21getAndResetAllSensorsEv>:
    uint16_t gust_metersph; //meters per hour
    uint16_t millivolts; // voltage in mV
    //uint16_t lux; //Light level in lux
*/
void WeatherSensors::getAndResetAllSensors()
{
   da8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da8da:	4605      	mov	r5, r0
  uint32_t timeRTC = node.unixTime();
   da8dc:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
   da8e0:	3004      	adds	r0, #4
   da8e2:	f7fb f941 	bl	d5b68 <_ZN7IoTNode8unixTimeEv>
  sensorReadings.unixTime = timeRTC;
   da8e6:	4c44      	ldr	r4, [pc, #272]	; (da9f8 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x120>)
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
   da8e8:	a901      	add	r1, sp, #4
    //uint16_t lux; //Light level in lux
*/
void WeatherSensors::getAndResetAllSensors()
{
  uint32_t timeRTC = node.unixTime();
  sensorReadings.unixTime = timeRTC;
   da8ea:	6020      	str	r0, [r4, #0]
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
   da8ec:	4628      	mov	r0, r5
   da8ee:	f7ff fcf5 	bl	da2dc <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf>
  sensorReadings.wind_metersph = (uint16_t) ceil(windMPH * 1609.34);
   da8f2:	ee10 0a10 	vmov	r0, s0
   da8f6:	f005 ff87 	bl	e0808 <__aeabi_f2d>
   da8fa:	a33b      	add	r3, pc, #236	; (adr r3, da9e8 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x110>)
   da8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   da900:	f005 ffd6 	bl	e08b0 <__aeabi_dmul>
   da904:	ec41 0b10 	vmov	d0, r0, r1
   da908:	f004 fb56 	bl	defb8 <ceil>
   da90c:	ec51 0b10 	vmov	r0, r1, d0
   da910:	f006 faa6 	bl	e0e60 <__aeabi_d2uiz>
   da914:	80e0      	strh	r0, [r4, #6]
  //Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
  float rainInches = getAndResetRainInches();
   da916:	4628      	mov	r0, r5
   da918:	f7ff fdb0 	bl	da47c <_ZN14WeatherSensors21getAndResetRainInchesEv>
  sensorReadings.rainmmx1000 = (uint16_t) ceil(rainInches * 25400);
   da91c:	eddf 7a37 	vldr	s15, [pc, #220]	; da9fc <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x124>
   da920:	ee60 7a27 	vmul.f32	s15, s0, s15
   da924:	ee17 0a90 	vmov	r0, s15
   da928:	f005 ff6e 	bl	e0808 <__aeabi_f2d>
   da92c:	ec41 0b10 	vmov	d0, r0, r1
   da930:	f004 fb42 	bl	defb8 <ceil>
   da934:	ec51 0b10 	vmov	r0, r1, d0
   da938:	f006 fa92 	bl	e0e60 <__aeabi_d2uiz>
   da93c:	81a0      	strh	r0, [r4, #12]
  //Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
  float windDegrees = getAndResetWindVaneDegrees();
   da93e:	4628      	mov	r0, r5
   da940:	f7ff fdaa 	bl	da498 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv>
  sensorReadings.windDegrees = (uint16_t) ceil(windDegrees);
   da944:	ee10 0a10 	vmov	r0, s0
   da948:	f005 ff5e 	bl	e0808 <__aeabi_f2d>
   da94c:	ec41 0b10 	vmov	d0, r0, r1
   da950:	f004 fb32 	bl	defb8 <ceil>
   da954:	ec51 0b10 	vmov	r0, r1, d0
   da958:	f006 fa82 	bl	e0e60 <__aeabi_d2uiz>
   da95c:	80a0      	strh	r0, [r4, #4]
  //Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
  float airTempF = getAndResetTempF();
   da95e:	4628      	mov	r0, r5
   da960:	f7ff ff88 	bl	da874 <_ZN14WeatherSensors16getAndResetTempFEv>
  sensorReadings.airTempKx10 = (uint16_t) ceil((airTempF-32.0)*50.0/9.0 + 2731.5);
   da964:	ee10 0a10 	vmov	r0, s0
   da968:	f005 ff4e 	bl	e0808 <__aeabi_f2d>
   da96c:	2200      	movs	r2, #0
   da96e:	4b24      	ldr	r3, [pc, #144]	; (daa00 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x128>)
   da970:	f005 fdea 	bl	e0548 <__aeabi_dsub>
   da974:	2200      	movs	r2, #0
   da976:	4b23      	ldr	r3, [pc, #140]	; (daa04 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x12c>)
   da978:	f005 ff9a 	bl	e08b0 <__aeabi_dmul>
   da97c:	2200      	movs	r2, #0
   da97e:	4b22      	ldr	r3, [pc, #136]	; (daa08 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x130>)
   da980:	f006 f8c0 	bl	e0b04 <__aeabi_ddiv>
   da984:	a31a      	add	r3, pc, #104	; (adr r3, da9f0 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x118>)
   da986:	e9d3 2300 	ldrd	r2, r3, [r3]
   da98a:	f005 fddf 	bl	e054c <__adddf3>
   da98e:	ec41 0b10 	vmov	d0, r0, r1
   da992:	f004 fb11 	bl	defb8 <ceil>
   da996:	ec51 0b10 	vmov	r0, r1, d0
   da99a:	f006 fa61 	bl	e0e60 <__aeabi_d2uiz>
   da99e:	8160      	strh	r0, [r4, #10]
  //Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
  uint16_t humidityRH = relativeHumidtyMedian.getMedian();
   da9a0:	f605 3006 	addw	r0, r5, #2822	; 0xb06
   da9a4:	f000 fd04 	bl	db3b0 <_ZN13RunningMedian9getMedianEv>
  sensorReadings.humid =(uint8_t) ceil(humidityRH);
   da9a8:	f005 ff0c 	bl	e07c4 <__aeabi_ui2d>
   da9ac:	ec41 0b10 	vmov	d0, r0, r1
   da9b0:	f004 fb02 	bl	defb8 <ceil>
   da9b4:	ec51 0b10 	vmov	r0, r1, d0
   da9b8:	f006 fa52 	bl	e0e60 <__aeabi_d2uiz>
   da9bc:	7220      	strb	r0, [r4, #8]
   //float O3 = getAndResetO3();
  //sensorReadings.ozone=(uint16_t) ceil(O3);
  //Particle.publish("Humedad", String(sensorReadings.humid));
  float pressure = getAndResetPressurePascals();
   da9be:	4628      	mov	r0, r5
   da9c0:	f7ff ff70 	bl	da8a4 <_ZN14WeatherSensors26getAndResetPressurePascalsEv>
  sensorReadings.barometerhPa = pressure/10.0;
   da9c4:	ee10 0a10 	vmov	r0, s0
   da9c8:	f005 ff1e 	bl	e0808 <__aeabi_f2d>
   da9cc:	2200      	movs	r2, #0
   da9ce:	4b0f      	ldr	r3, [pc, #60]	; (daa0c <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x134>)
   da9d0:	f006 f898 	bl	e0b04 <__aeabi_ddiv>
   da9d4:	f006 fa44 	bl	e0e60 <__aeabi_d2uiz>
   da9d8:	81e0      	strh	r0, [r4, #14]
  //Particle.publish("Presion", String(sensorReadings.barometerhPa));
  // Light and voltage needed
 // sensorReadings.lux = getAndResetLightLux();
  //Particle.publish("luminocidad", String(sensorReadings.lux));
  sensorReadings.millivolts=getAndResetBatteryMV();
   da9da:	4628      	mov	r0, r5
   da9dc:	f7ff fd2e 	bl	da43c <_ZN14WeatherSensors20getAndResetBatteryMVEv>
   da9e0:	8260      	strh	r0, [r4, #18]
  //Particle.publish("Bateria", String( sensorReadings.millivolts));
}
   da9e2:	b003      	add	sp, #12
   da9e4:	bd30      	pop	{r4, r5, pc}
   da9e6:	bf00      	nop
   da9e8:	28f5c28f 	.word	0x28f5c28f
   da9ec:	4099255c 	.word	0x4099255c
   da9f0:	00000000 	.word	0x00000000
   da9f4:	40a55700 	.word	0x40a55700
   da9f8:	2003c3e0 	.word	0x2003c3e0
   da9fc:	46c67000 	.word	0x46c67000
   daa00:	40400000 	.word	0x40400000
   daa04:	40490000 	.word	0x40490000
   daa08:	40220000 	.word	0x40220000
   daa0c:	40240000 	.word	0x40240000

000daa10 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>:

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   daa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daa12:	4604      	mov	r4, r0
   daa14:	4610      	mov	r0, r2
    int str_len = ss.length() + 1;
   daa16:	6892      	ldr	r2, [r2, #8]

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   daa18:	461e      	mov	r6, r3
    int str_len = ss.length() + 1;
    char s[str_len];
   daa1a:	f102 0308 	add.w	r3, r2, #8
   daa1e:	f023 0307 	bic.w	r3, r3, #7

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   daa22:	af00      	add	r7, sp, #0
    int str_len = ss.length() + 1;
    char s[str_len];
   daa24:	ebad 0d03 	sub.w	sp, sp, r3
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   daa28:	4669      	mov	r1, sp
   daa2a:	2300      	movs	r3, #0
   daa2c:	3201      	adds	r2, #1
   daa2e:	f001 ff04 	bl	dc83a <_ZNK6String8getBytesEPhjj>

    //Serial.println(s);
    char *p;
    int count;

    p = strchr (s,'.');         // Find decimal point, if any.
   daa32:	212e      	movs	r1, #46	; 0x2e
   daa34:	4668      	mov	r0, sp
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
    int str_len = ss.length() + 1;
    char s[str_len];
   daa36:	466d      	mov	r5, sp

    //Serial.println(s);
    char *p;
    int count;

    p = strchr (s,'.');         // Find decimal point, if any.
   daa38:	f007 f81c 	bl	e1a74 <strchr>
    if (p != NULL) {
   daa3c:	b1a8      	cbz	r0, daa6a <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x5a>
   daa3e:	4603      	mov	r3, r0
   daa40:	1af2      	subs	r2, r6, r3
        count = n;              // Adjust for more or less decimals.
        while (count >= 0) {    // Maximum decimals allowed.
   daa42:	42d0      	cmn	r0, r2
   daa44:	4619      	mov	r1, r3
   daa46:	d403      	bmi.n	daa50 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x40>
             count--;
             if (*p == '\0')    // If there's less than desired.
   daa48:	780a      	ldrb	r2, [r1, #0]
   daa4a:	3301      	adds	r3, #1
   daa4c:	2a00      	cmp	r2, #0
   daa4e:	d1f7      	bne.n	daa40 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x30>
                 break;
             p++;               // Next character.
        }

        *p-- = '\0';            // Truncate string.
   daa50:	2200      	movs	r2, #0
   daa52:	1e4b      	subs	r3, r1, #1
   daa54:	700a      	strb	r2, [r1, #0]
        while (*p == '0')       // Remove trailing zeros.
   daa56:	7819      	ldrb	r1, [r3, #0]
   daa58:	2930      	cmp	r1, #48	; 0x30
   daa5a:	d102      	bne.n	daa62 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x52>
            *p-- = '\0';
   daa5c:	f803 2901 	strb.w	r2, [r3], #-1
                 break;
             p++;               // Next character.
        }

        *p-- = '\0';            // Truncate string.
        while (*p == '0')       // Remove trailing zeros.
   daa60:	e7f9      	b.n	daa56 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x46>
            *p-- = '\0';

        if (*p == '.') {        // If all decimals were zeros, remove ".".
   daa62:	292e      	cmp	r1, #46	; 0x2e
            *p = '\0';
   daa64:	bf04      	itt	eq
   daa66:	2200      	moveq	r2, #0
   daa68:	701a      	strbeq	r2, [r3, #0]
        }
    }
    return String(s);
   daa6a:	4629      	mov	r1, r5
   daa6c:	4620      	mov	r0, r4
   daa6e:	f001 fde8 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
}
   daa72:	4620      	mov	r0, r4
   daa74:	46bd      	mov	sp, r7
   daa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000daa78 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv>:
  //Particle.publish("Bateria", String( sensorReadings.millivolts));
}

// Convert sensorData to CSV String in US units
String WeatherSensors::sensorReadingsToCsvUS()
{
   daa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   daa7c:	4ca2      	ldr	r4, [pc, #648]	; (dad08 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x290>)
   daa7e:	4da3      	ldr	r5, [pc, #652]	; (dad0c <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x294>)
  //Particle.publish("Bateria", String( sensorReadings.millivolts));
}

// Convert sensorData to CSV String in US units
String WeatherSensors::sensorReadingsToCsvUS()
{
   daa80:	b0c0      	sub	sp, #256	; 0x100
   daa82:	460e      	mov	r6, r1
   daa84:	4680      	mov	r8, r0
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   daa86:	220a      	movs	r2, #10
   daa88:	6821      	ldr	r1, [r4, #0]
   daa8a:	4668      	mov	r0, sp
   daa8c:	f001 fe72 	bl	dc774 <_ZN6StringC1Emh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   daa90:	4669      	mov	r1, sp
   daa92:	a804      	add	r0, sp, #16
   daa94:	f001 fe14 	bl	dc6c0 <_ZN6StringC1ERKS_>
   daa98:	4629      	mov	r1, r5
   daa9a:	a804      	add	r0, sp, #16
   daa9c:	f001 febb 	bl	dc816 <_ZplRK15StringSumHelperPKc>
  String(sensorReadings.windDegrees)+
   daaa0:	220a      	movs	r2, #10
String WeatherSensors::sensorReadingsToCsvUS()
{
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   daaa2:	4607      	mov	r7, r0
  String(sensorReadings.windDegrees)+
   daaa4:	88a1      	ldrh	r1, [r4, #4]
   daaa6:	a808      	add	r0, sp, #32
   daaa8:	f001 fe51 	bl	dc74e <_ZN6StringC1Eih>
   daaac:	a908      	add	r1, sp, #32
   daaae:	4638      	mov	r0, r7
   daab0:	f001 fea5 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
  ","+
   daab4:	4629      	mov	r1, r5
   daab6:	f001 feae 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   daaba:	4681      	mov	r9, r0
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
   daabc:	88e0      	ldrh	r0, [r4, #6]
   daabe:	4f94      	ldr	r7, [pc, #592]	; (dad10 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x298>)
   daac0:	ee07 0a90 	vmov	s15, r0
   daac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   daac8:	ee17 0a90 	vmov	r0, s15
   daacc:	f005 fe9c 	bl	e0808 <__aeabi_f2d>
   daad0:	a387      	add	r3, pc, #540	; (adr r3, dacf0 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x278>)
   daad2:	e9d3 2300 	ldrd	r2, r3, [r3]
   daad6:	f006 f815 	bl	e0b04 <__aeabi_ddiv>
   daada:	4602      	mov	r2, r0
   daadc:	460b      	mov	r3, r1
   daade:	a80c      	add	r0, sp, #48	; 0x30
   daae0:	4639      	mov	r1, r7
   daae2:	f001 feef 	bl	dc8c4 <_ZN6String6formatEPKcz>
   daae6:	2301      	movs	r3, #1
   daae8:	aa0c      	add	r2, sp, #48	; 0x30
   daaea:	4631      	mov	r1, r6
   daaec:	a810      	add	r0, sp, #64	; 0x40
   daaee:	f7ff ff8f 	bl	daa10 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   daaf2:	a910      	add	r1, sp, #64	; 0x40
   daaf4:	4648      	mov	r0, r9
   daaf6:	f001 fe82 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
  ","+
   daafa:	4629      	mov	r1, r5
   daafc:	f001 fe8b 	bl	dc816 <_ZplRK15StringSumHelperPKc>
  String(sensorReadings.humid)+
   dab00:	220a      	movs	r2, #10
  String(sensorReadings.unixTime)+
  ","+
  String(sensorReadings.windDegrees)+
  ","+
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
  ","+
   dab02:	4681      	mov	r9, r0
  String(sensorReadings.humid)+
   dab04:	7a21      	ldrb	r1, [r4, #8]
   dab06:	a814      	add	r0, sp, #80	; 0x50
   dab08:	f001 fe0f 	bl	dc72a <_ZN6StringC1Ehh>
   dab0c:	a914      	add	r1, sp, #80	; 0x50
   dab0e:	4648      	mov	r0, r9
   dab10:	f001 fe75 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
  ","+
   dab14:	4629      	mov	r1, r5
   dab16:	f001 fe7e 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   dab1a:	4681      	mov	r9, r0
  minimiseNumericString(String::format("%.1f",(((float)sensorReadings.airTempKx10-2731.5)*9.0/50.0+32.0)),1)+
   dab1c:	8960      	ldrh	r0, [r4, #10]
   dab1e:	ee07 0a90 	vmov	s15, r0
   dab22:	eef8 7a67 	vcvt.f32.u32	s15, s15
   dab26:	ee17 0a90 	vmov	r0, s15
   dab2a:	f005 fe6d 	bl	e0808 <__aeabi_f2d>
   dab2e:	a372      	add	r3, pc, #456	; (adr r3, dacf8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x280>)
   dab30:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab34:	f005 fd08 	bl	e0548 <__aeabi_dsub>
   dab38:	2200      	movs	r2, #0
   dab3a:	4b76      	ldr	r3, [pc, #472]	; (dad14 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x29c>)
   dab3c:	f005 feb8 	bl	e08b0 <__aeabi_dmul>
   dab40:	2200      	movs	r2, #0
   dab42:	4b75      	ldr	r3, [pc, #468]	; (dad18 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a0>)
   dab44:	f005 ffde 	bl	e0b04 <__aeabi_ddiv>
   dab48:	2200      	movs	r2, #0
   dab4a:	4b74      	ldr	r3, [pc, #464]	; (dad1c <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a4>)
   dab4c:	f005 fcfe 	bl	e054c <__adddf3>
   dab50:	4602      	mov	r2, r0
   dab52:	460b      	mov	r3, r1
   dab54:	a818      	add	r0, sp, #96	; 0x60
   dab56:	4639      	mov	r1, r7
   dab58:	f001 feb4 	bl	dc8c4 <_ZN6String6formatEPKcz>
   dab5c:	aa18      	add	r2, sp, #96	; 0x60
   dab5e:	2301      	movs	r3, #1
   dab60:	4631      	mov	r1, r6
   dab62:	a81c      	add	r0, sp, #112	; 0x70
   dab64:	f7ff ff54 	bl	daa10 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   dab68:	a91c      	add	r1, sp, #112	; 0x70
   dab6a:	4648      	mov	r0, r9
   dab6c:	f001 fe47 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
  ","+
   dab70:	4629      	mov	r1, r5
   dab72:	f001 fe50 	bl	dc816 <_ZplRK15StringSumHelperPKc>
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   dab76:	89a3      	ldrh	r3, [r4, #12]
   dab78:	ed9f 7a69 	vldr	s14, [pc, #420]	; dad20 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a8>
   dab7c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; dad2c <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2b4>
   dab80:	ee07 3a90 	vmov	s15, r3
   dab84:	eef8 7a67 	vcvt.f32.u32	s15, s15
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
  ","+
  String(sensorReadings.humid)+
  ","+
  minimiseNumericString(String::format("%.1f",(((float)sensorReadings.airTempKx10-2731.5)*9.0/50.0+32.0)),1)+
  ","+
   dab88:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   dab8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
   dab8e:	ee16 0a90 	vmov	r0, s13
   dab92:	f005 fe39 	bl	e0808 <__aeabi_f2d>
   dab96:	4602      	mov	r2, r0
   dab98:	460b      	mov	r3, r1
   dab9a:	a820      	add	r0, sp, #128	; 0x80
   dab9c:	4649      	mov	r1, r9
   dab9e:	f001 fe91 	bl	dc8c4 <_ZN6String6formatEPKcz>
   daba2:	aa20      	add	r2, sp, #128	; 0x80
   daba4:	2303      	movs	r3, #3
   daba6:	4631      	mov	r1, r6
   daba8:	a824      	add	r0, sp, #144	; 0x90
   dabaa:	f7ff ff31 	bl	daa10 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   dabae:	a924      	add	r1, sp, #144	; 0x90
   dabb0:	4650      	mov	r0, sl
   dabb2:	f001 fe24 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
  ","+
   dabb6:	4629      	mov	r1, r5
   dabb8:	f001 fe2d 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   dabbc:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.2f",(float)sensorReadings.barometerhPa/338.6389),2)+
   dabbe:	89e0      	ldrh	r0, [r4, #14]
   dabc0:	ee07 0a90 	vmov	s15, r0
   dabc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   dabc8:	ee17 0a90 	vmov	r0, s15
   dabcc:	f005 fe1c 	bl	e0808 <__aeabi_f2d>
   dabd0:	a34b      	add	r3, pc, #300	; (adr r3, dad00 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x288>)
   dabd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabd6:	f005 ff95 	bl	e0b04 <__aeabi_ddiv>
   dabda:	4602      	mov	r2, r0
   dabdc:	460b      	mov	r3, r1
   dabde:	a828      	add	r0, sp, #160	; 0xa0
   dabe0:	4950      	ldr	r1, [pc, #320]	; (dad24 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2ac>)
   dabe2:	f001 fe6f 	bl	dc8c4 <_ZN6String6formatEPKcz>
   dabe6:	aa28      	add	r2, sp, #160	; 0xa0
   dabe8:	2302      	movs	r3, #2
   dabea:	4631      	mov	r1, r6
   dabec:	a82c      	add	r0, sp, #176	; 0xb0
   dabee:	f7ff ff0f 	bl	daa10 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   dabf2:	a92c      	add	r1, sp, #176	; 0xb0
   dabf4:	4650      	mov	r0, sl
   dabf6:	f001 fe02 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
  ","+
   dabfa:	4629      	mov	r1, r5
   dabfc:	f001 fe0b 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   dac00:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.1f",(float)(sensorReadings.gust_metersph/1609.34)),1)+
   dac02:	8a20      	ldrh	r0, [r4, #16]
   dac04:	f005 fdee 	bl	e07e4 <__aeabi_i2d>
   dac08:	a339      	add	r3, pc, #228	; (adr r3, dacf0 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x278>)
   dac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac0e:	f005 ff79 	bl	e0b04 <__aeabi_ddiv>
   dac12:	f006 f945 	bl	e0ea0 <__aeabi_d2f>
   dac16:	f005 fdf7 	bl	e0808 <__aeabi_f2d>
   dac1a:	4602      	mov	r2, r0
   dac1c:	460b      	mov	r3, r1
   dac1e:	a830      	add	r0, sp, #192	; 0xc0
   dac20:	4639      	mov	r1, r7
   dac22:	f001 fe4f 	bl	dc8c4 <_ZN6String6formatEPKcz>
   dac26:	aa30      	add	r2, sp, #192	; 0xc0
   dac28:	2301      	movs	r3, #1
   dac2a:	4631      	mov	r1, r6
   dac2c:	a834      	add	r0, sp, #208	; 0xd0
   dac2e:	f7ff feef 	bl	daa10 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   dac32:	a934      	add	r1, sp, #208	; 0xd0
   dac34:	4650      	mov	r0, sl
   dac36:	f001 fde2 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
  ","+
   dac3a:	4629      	mov	r1, r5
   dac3c:	f001 fdeb 	bl	dc816 <_ZplRK15StringSumHelperPKc>
   dac40:	4605      	mov	r5, r0
  minimiseNumericString(String::format("%.3f",(float)sensorReadings.millivolts/1000.0),3); // replace with voltage/lux
   dac42:	8a60      	ldrh	r0, [r4, #18]
   dac44:	ee07 0a90 	vmov	s15, r0
   dac48:	eef8 7a67 	vcvt.f32.u32	s15, s15
   dac4c:	ee17 0a90 	vmov	r0, s15
   dac50:	f005 fdda 	bl	e0808 <__aeabi_f2d>
   dac54:	2200      	movs	r2, #0
   dac56:	4b34      	ldr	r3, [pc, #208]	; (dad28 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2b0>)
   dac58:	f005 ff54 	bl	e0b04 <__aeabi_ddiv>
   dac5c:	4602      	mov	r2, r0
   dac5e:	460b      	mov	r3, r1
   dac60:	a838      	add	r0, sp, #224	; 0xe0
   dac62:	4649      	mov	r1, r9
   dac64:	f001 fe2e 	bl	dc8c4 <_ZN6String6formatEPKcz>
   dac68:	2303      	movs	r3, #3
   dac6a:	aa38      	add	r2, sp, #224	; 0xe0
   dac6c:	4631      	mov	r1, r6
   dac6e:	a83c      	add	r0, sp, #240	; 0xf0
   dac70:	f7ff fece 	bl	daa10 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   dac74:	a93c      	add	r1, sp, #240	; 0xf0
   dac76:	4628      	mov	r0, r5
   dac78:	f001 fdc1 	bl	dc7fe <_ZplRK15StringSumHelperRK6String>
   dac7c:	4601      	mov	r1, r0
   dac7e:	4640      	mov	r0, r8
   dac80:	f001 fd1e 	bl	dc6c0 <_ZN6StringC1ERKS_>
   dac84:	a83c      	add	r0, sp, #240	; 0xf0
   dac86:	f001 fc95 	bl	dc5b4 <_ZN6StringD1Ev>
   dac8a:	a838      	add	r0, sp, #224	; 0xe0
   dac8c:	f001 fc92 	bl	dc5b4 <_ZN6StringD1Ev>
   dac90:	a834      	add	r0, sp, #208	; 0xd0
   dac92:	f001 fc8f 	bl	dc5b4 <_ZN6StringD1Ev>
   dac96:	a830      	add	r0, sp, #192	; 0xc0
   dac98:	f001 fc8c 	bl	dc5b4 <_ZN6StringD1Ev>
   dac9c:	a82c      	add	r0, sp, #176	; 0xb0
   dac9e:	f001 fc89 	bl	dc5b4 <_ZN6StringD1Ev>
   daca2:	a828      	add	r0, sp, #160	; 0xa0
   daca4:	f001 fc86 	bl	dc5b4 <_ZN6StringD1Ev>
   daca8:	a824      	add	r0, sp, #144	; 0x90
   dacaa:	f001 fc83 	bl	dc5b4 <_ZN6StringD1Ev>
   dacae:	a820      	add	r0, sp, #128	; 0x80
   dacb0:	f001 fc80 	bl	dc5b4 <_ZN6StringD1Ev>
   dacb4:	a81c      	add	r0, sp, #112	; 0x70
   dacb6:	f001 fc7d 	bl	dc5b4 <_ZN6StringD1Ev>
   dacba:	a818      	add	r0, sp, #96	; 0x60
   dacbc:	f001 fc7a 	bl	dc5b4 <_ZN6StringD1Ev>
   dacc0:	a814      	add	r0, sp, #80	; 0x50
   dacc2:	f001 fc77 	bl	dc5b4 <_ZN6StringD1Ev>
   dacc6:	a810      	add	r0, sp, #64	; 0x40
   dacc8:	f001 fc74 	bl	dc5b4 <_ZN6StringD1Ev>
   daccc:	a80c      	add	r0, sp, #48	; 0x30
   dacce:	f001 fc71 	bl	dc5b4 <_ZN6StringD1Ev>
   dacd2:	a808      	add	r0, sp, #32
   dacd4:	f001 fc6e 	bl	dc5b4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   dacd8:	a804      	add	r0, sp, #16
   dacda:	f001 fc6b 	bl	dc5b4 <_ZN6StringD1Ev>
   dacde:	4668      	mov	r0, sp
   dace0:	f001 fc68 	bl	dc5b4 <_ZN6StringD1Ev>
  //","+
  //String(sensorReadings.lux)
  //;
  return csvData;
}
   dace4:	4640      	mov	r0, r8
   dace6:	b040      	add	sp, #256	; 0x100
   dace8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dacec:	f3af 8000 	nop.w
   dacf0:	28f5c28f 	.word	0x28f5c28f
   dacf4:	4099255c 	.word	0x4099255c
   dacf8:	00000000 	.word	0x00000000
   dacfc:	40a55700 	.word	0x40a55700
   dad00:	ef34d6a1 	.word	0xef34d6a1
   dad04:	40752a38 	.word	0x40752a38
   dad08:	2003c3e0 	.word	0x2003c3e0
   dad0c:	000e500b 	.word	0x000e500b
   dad10:	000e555c 	.word	0x000e555c
   dad14:	40220000 	.word	0x40220000
   dad18:	40490000 	.word	0x40490000
   dad1c:	40400000 	.word	0x40400000
   dad20:	46c67000 	.word	0x46c67000
   dad24:	000e5566 	.word	0x000e5566
   dad28:	408f4000 	.word	0x408f4000
   dad2c:	000e5561 	.word	0x000e5561

000dad30 <_ZN5Print5printIlLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   dad30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dad34:	4607      	mov	r7, r0
   dad36:	460c      	mov	r4, r1
{
    if (base == 0) {
   dad38:	4615      	mov	r5, r2
   dad3a:	b92a      	cbnz	r2, dad48 <_ZN5Print5printIlLi0EEEjT_i+0x18>
        return write(n);
   dad3c:	6803      	ldr	r3, [r0, #0]
   dad3e:	b2c9      	uxtb	r1, r1
   dad40:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   dad42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   dad46:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   dad48:	2900      	cmp	r1, #0
   dad4a:	da07      	bge.n	dad5c <_ZN5Print5printIlLi0EEEjT_i+0x2c>
   dad4c:	2a0a      	cmp	r2, #10
   dad4e:	d105      	bne.n	dad5c <_ZN5Print5printIlLi0EEEjT_i+0x2c>
            t = print('-');
   dad50:	212d      	movs	r1, #45	; 0x2d
   dad52:	f001 fe1d 	bl	dc990 <_ZN5Print5printEc>
            val = -n;
   dad56:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   dad58:	4606      	mov	r6, r0
            val = -n;
   dad5a:	e001      	b.n	dad60 <_ZN5Print5printIlLi0EEEjT_i+0x30>
        } else {
            val = n;
   dad5c:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   dad5e:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   dad60:	b2ea      	uxtb	r2, r5
   dad62:	4638      	mov	r0, r7
   dad64:	f001 fe33 	bl	dc9ce <_ZN5Print11printNumberEmh>
    }
}
   dad68:	4430      	add	r0, r6
   dad6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dad6e <_GLOBAL__sub_I__ZN14WeatherSensors5beginEv>:
   dad6e:	f000 bb57 	b.w	db420 <HAL_Pin_Map>
	...

000dad74 <_ZN14WeatherSensors5beginEv>:
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
   dad74:	f241 6274 	movw	r2, #5748	; 0x1674
   dad78:	2300      	movs	r3, #0
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   dad7a:	b530      	push	{r4, r5, lr}

  AnemoneterPeriodTotal = 0;
   dad7c:	5083      	str	r3, [r0, r2]
  AnemoneterPeriodReadingCount = 0;
   dad7e:	f241 6278 	movw	r2, #5752	; 0x1678
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   dad82:	f04f 31ff 	mov.w	r1, #4294967295
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
   dad86:	5083      	str	r3, [r0, r2]
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   dad88:	f241 627c 	movw	r2, #5756	; 0x167c
  lastAnemoneterEvent = 0;


  barom.begin();
   dad8c:	f100 0508 	add.w	r5, r0, #8
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   dad90:	5081      	str	r1, [r0, r2]
  lastAnemoneterEvent = 0;
   dad92:	f500 52b4 	add.w	r2, r0, #5760	; 0x1680
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   dad96:	b08b      	sub	sp, #44	; 0x2c

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
  lastAnemoneterEvent = 0;
   dad98:	6013      	str	r3, [r2, #0]
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   dad9a:	4604      	mov	r4, r0
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
  lastAnemoneterEvent = 0;


  barom.begin();
   dad9c:	4628      	mov	r0, r5
   dad9e:	f7ff f9e2 	bl	da166 <_ZN9MPL3115A25beginEv>
  barom.setModeBarometer();
   dada2:	4628      	mov	r0, r5
   dada4:	f7ff fa09 	bl	da1ba <_ZN9MPL3115A216setModeBarometerEv>
  barom.setOversampleRate(7);
   dada8:	2107      	movs	r1, #7
   dadaa:	4628      	mov	r0, r5
   dadac:	f7ff fa12 	bl	da1d4 <_ZN9MPL3115A217setOversampleRateEh>
  barom.enableEventFlags();
   dadb0:	4628      	mov	r0, r5
   dadb2:	f7ff fa23 	bl	da1fc <_ZN9MPL3115A216enableEventFlagsEv>

  am2315.begin();
   dadb6:	4620      	mov	r0, r4
   dadb8:	f7fb ff6a 	bl	d6c90 <_ZN15Adafruit_AM23155beginEv>

  Serial.begin(9600);

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
  
  if (tsl.begin()) 
   dadbc:	f504 54b2 	add.w	r4, r4, #5696	; 0x1640
  barom.setOversampleRate(7);
  barom.enableEventFlags();

  am2315.begin();

  Serial.begin(9600);
   dadc0:	f002 fd40 	bl	dd844 <_Z16_fetch_usbserialv>
   dadc4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   dadc8:	f002 fd30 	bl	dd82c <_ZN9USBSerial5beginEl>

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
  
  if (tsl.begin()) 
   dadcc:	340c      	adds	r4, #12

  am2315.begin();

  Serial.begin(9600);

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
   dadce:	f002 fd39 	bl	dd844 <_Z16_fetch_usbserialv>
   dadd2:	4969      	ldr	r1, [pc, #420]	; (daf78 <_ZN14WeatherSensors5beginEv+0x204>)
   dadd4:	f001 fdf9 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
  
  if (tsl.begin()) 
   dadd8:	4620      	mov	r0, r4
   dadda:	f7fb fe3c 	bl	d6a56 <_ZN16Adafruit_TSL25915beginEv>
   dadde:	b118      	cbz	r0, dade8 <_ZN14WeatherSensors5beginEv+0x74>
  {
    Serial.println(F("Found a TSL2591 sensor"));
   dade0:	f002 fd30 	bl	dd844 <_Z16_fetch_usbserialv>
   dade4:	4965      	ldr	r1, [pc, #404]	; (daf7c <_ZN14WeatherSensors5beginEv+0x208>)
   dade6:	e002      	b.n	dadee <_ZN14WeatherSensors5beginEv+0x7a>
  } 
  else 
  {
    Serial.println(F("No sensor found ... check your wiring?"));
   dade8:	f002 fd2c 	bl	dd844 <_Z16_fetch_usbserialv>
   dadec:	4964      	ldr	r1, [pc, #400]	; (daf80 <_ZN14WeatherSensors5beginEv+0x20c>)
   dadee:	f001 fdec 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
    
  /* Display some basic information on this sensor */
  sensor_t sensor;
  tsl.getSensor(&sensor);
   dadf2:	4669      	mov	r1, sp
   dadf4:	4620      	mov	r0, r4
   dadf6:	f7fb fd2d 	bl	d6854 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t>
  Serial.println(F("------------------------------------"));
   dadfa:	f002 fd23 	bl	dd844 <_Z16_fetch_usbserialv>
   dadfe:	4961      	ldr	r1, [pc, #388]	; (daf84 <_ZN14WeatherSensors5beginEv+0x210>)
   dae00:	f001 fde3 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Sensor:       ")); Serial.println(sensor.name);
   dae04:	f002 fd1e 	bl	dd844 <_Z16_fetch_usbserialv>
   dae08:	495f      	ldr	r1, [pc, #380]	; (daf88 <_ZN14WeatherSensors5beginEv+0x214>)
   dae0a:	f001 fdc4 	bl	dc996 <_ZN5Print5printEPK19__FlashStringHelper>
   dae0e:	f002 fd19 	bl	dd844 <_Z16_fetch_usbserialv>
   dae12:	4669      	mov	r1, sp
   dae14:	f001 fdcf 	bl	dc9b6 <_ZN5Print7printlnEPKc>
  Serial.print  (F("Driver Ver:   ")); Serial.println(sensor.version);
   dae18:	f002 fd14 	bl	dd844 <_Z16_fetch_usbserialv>
   dae1c:	495b      	ldr	r1, [pc, #364]	; (daf8c <_ZN14WeatherSensors5beginEv+0x218>)
   dae1e:	f001 fdba 	bl	dc996 <_ZN5Print5printEPK19__FlashStringHelper>
   dae22:	f002 fd0f 	bl	dd844 <_Z16_fetch_usbserialv>
    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
   dae26:	220a      	movs	r2, #10
   dae28:	9903      	ldr	r1, [sp, #12]
   dae2a:	4605      	mov	r5, r0
   dae2c:	f7ff ff80 	bl	dad30 <_ZN5Print5printIlLi0EEEjT_i>
        n += println();
   dae30:	4628      	mov	r0, r5
   dae32:	f001 fdb4 	bl	dc99e <_ZN5Print7printlnEv>
  Serial.print  (F("Unique ID:    ")); Serial.println(sensor.sensor_id);
   dae36:	f002 fd05 	bl	dd844 <_Z16_fetch_usbserialv>
   dae3a:	4955      	ldr	r1, [pc, #340]	; (daf90 <_ZN14WeatherSensors5beginEv+0x21c>)
   dae3c:	f001 fdab 	bl	dc996 <_ZN5Print5printEPK19__FlashStringHelper>
   dae40:	f002 fd00 	bl	dd844 <_Z16_fetch_usbserialv>
    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
   dae44:	220a      	movs	r2, #10
   dae46:	9904      	ldr	r1, [sp, #16]
   dae48:	4605      	mov	r5, r0
   dae4a:	f7ff ff71 	bl	dad30 <_ZN5Print5printIlLi0EEEjT_i>
        n += println();
   dae4e:	4628      	mov	r0, r5
   dae50:	f001 fda5 	bl	dc99e <_ZN5Print7printlnEv>
  Serial.print  (F("Max Value:    ")); Serial.print(sensor.max_value); Serial.println(F(" lux"));
   dae54:	f002 fcf6 	bl	dd844 <_Z16_fetch_usbserialv>
   dae58:	494e      	ldr	r1, [pc, #312]	; (daf94 <_ZN14WeatherSensors5beginEv+0x220>)
   dae5a:	f001 fd9c 	bl	dc996 <_ZN5Print5printEPK19__FlashStringHelper>
   dae5e:	f002 fcf1 	bl	dd844 <_Z16_fetch_usbserialv>
   dae62:	ed9d 0a06 	vldr	s0, [sp, #24]
   dae66:	2102      	movs	r1, #2
   dae68:	f001 fe90 	bl	dcb8c <_ZN5Print5printEfi>
   dae6c:	f002 fcea 	bl	dd844 <_Z16_fetch_usbserialv>
   dae70:	4949      	ldr	r1, [pc, #292]	; (daf98 <_ZN14WeatherSensors5beginEv+0x224>)
   dae72:	f001 fdaa 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Min Value:    ")); Serial.print(sensor.min_value); Serial.println(F(" lux"));
   dae76:	f002 fce5 	bl	dd844 <_Z16_fetch_usbserialv>
   dae7a:	4948      	ldr	r1, [pc, #288]	; (daf9c <_ZN14WeatherSensors5beginEv+0x228>)
   dae7c:	f001 fd8b 	bl	dc996 <_ZN5Print5printEPK19__FlashStringHelper>
   dae80:	f002 fce0 	bl	dd844 <_Z16_fetch_usbserialv>
   dae84:	ed9d 0a07 	vldr	s0, [sp, #28]
   dae88:	2102      	movs	r1, #2
   dae8a:	f001 fe7f 	bl	dcb8c <_ZN5Print5printEfi>
   dae8e:	f002 fcd9 	bl	dd844 <_Z16_fetch_usbserialv>
   dae92:	4941      	ldr	r1, [pc, #260]	; (daf98 <_ZN14WeatherSensors5beginEv+0x224>)
   dae94:	f001 fd99 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Resolution:   ")); Serial.print(sensor.resolution, 4); Serial.println(F(" lux"));  
   dae98:	f002 fcd4 	bl	dd844 <_Z16_fetch_usbserialv>
   dae9c:	4940      	ldr	r1, [pc, #256]	; (dafa0 <_ZN14WeatherSensors5beginEv+0x22c>)
   dae9e:	f001 fd7a 	bl	dc996 <_ZN5Print5printEPK19__FlashStringHelper>
   daea2:	f002 fccf 	bl	dd844 <_Z16_fetch_usbserialv>
   daea6:	ed9d 0a08 	vldr	s0, [sp, #32]
   daeaa:	2104      	movs	r1, #4
   daeac:	f001 fe6e 	bl	dcb8c <_ZN5Print5printEfi>
   daeb0:	f002 fcc8 	bl	dd844 <_Z16_fetch_usbserialv>
   daeb4:	4938      	ldr	r1, [pc, #224]	; (daf98 <_ZN14WeatherSensors5beginEv+0x224>)
   daeb6:	f001 fd88 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("------------------------------------"));
   daeba:	f002 fcc3 	bl	dd844 <_Z16_fetch_usbserialv>
   daebe:	4931      	ldr	r1, [pc, #196]	; (daf84 <_ZN14WeatherSensors5beginEv+0x210>)
   daec0:	f001 fd83 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F(""));
   daec4:	f002 fcbe 	bl	dd844 <_Z16_fetch_usbserialv>
   daec8:	4936      	ldr	r1, [pc, #216]	; (dafa4 <_ZN14WeatherSensors5beginEv+0x230>)
   daeca:	f001 fd7e 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
  delay(500);
   daece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   daed2:	f002 f84b 	bl	dcf6c <delay>
  
  /* Configure the sensor */
  // You can change the gain on the fly, to adapt to brighter/dimmer light situations
  //tsl.setGain(TSL2591_GAIN_LOW);    // 1x gain (bright light)
  tsl.setGain(TSL2591_GAIN_MED);      // 25x gain
   daed6:	2110      	movs	r1, #16
   daed8:	4620      	mov	r0, r4
   daeda:	f7fb fda3 	bl	d6a24 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>
  
  // Changing the integration time gives you a longer time over which to sense light
  // longer timelines are slower, but are good in very low light situtations!
  //tsl.setTiming(TSL2591_INTEGRATIONTIME_100MS);  // shortest integration time (bright light)
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_200MS);
  tsl.setTiming(TSL2591_INTEGRATIONTIME_300MS);
   daede:	2102      	movs	r1, #2
   daee0:	4620      	mov	r0, r4
   daee2:	f7fb fdf5 	bl	d6ad0 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_400MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_500MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_600MS);  // longest integration time (dim light)

  /* Display the gain and integration time for reference sake */  
  Serial.println(F("------------------------------------"));
   daee6:	f002 fcad 	bl	dd844 <_Z16_fetch_usbserialv>
   daeea:	4926      	ldr	r1, [pc, #152]	; (daf84 <_ZN14WeatherSensors5beginEv+0x210>)
   daeec:	f001 fd6d 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Gain:         "));
   daef0:	f002 fca8 	bl	dd844 <_Z16_fetch_usbserialv>
   daef4:	492c      	ldr	r1, [pc, #176]	; (dafa8 <_ZN14WeatherSensors5beginEv+0x234>)
   daef6:	f001 fd4e 	bl	dc996 <_ZN5Print5printEPK19__FlashStringHelper>
  tsl2591Gain_t gain = tsl.getGain();
   daefa:	4620      	mov	r0, r4
   daefc:	f7fb fce2 	bl	d68c4 <_ZN16Adafruit_TSL25917getGainEv>
  switch(gain)
   daf00:	2810      	cmp	r0, #16
   daf02:	d00d      	beq.n	daf20 <_ZN14WeatherSensors5beginEv+0x1ac>
   daf04:	d804      	bhi.n	daf10 <_ZN14WeatherSensors5beginEv+0x19c>
   daf06:	b9a0      	cbnz	r0, daf32 <_ZN14WeatherSensors5beginEv+0x1be>
  {
    case TSL2591_GAIN_LOW:
      Serial.println(F("1x (Low)"));
   daf08:	f002 fc9c 	bl	dd844 <_Z16_fetch_usbserialv>
   daf0c:	4927      	ldr	r1, [pc, #156]	; (dafac <_ZN14WeatherSensors5beginEv+0x238>)
   daf0e:	e00e      	b.n	daf2e <_ZN14WeatherSensors5beginEv+0x1ba>

  /* Display the gain and integration time for reference sake */  
  Serial.println(F("------------------------------------"));
  Serial.print  (F("Gain:         "));
  tsl2591Gain_t gain = tsl.getGain();
  switch(gain)
   daf10:	2820      	cmp	r0, #32
   daf12:	d009      	beq.n	daf28 <_ZN14WeatherSensors5beginEv+0x1b4>
   daf14:	2830      	cmp	r0, #48	; 0x30
   daf16:	d10c      	bne.n	daf32 <_ZN14WeatherSensors5beginEv+0x1be>
      break;
    case TSL2591_GAIN_HIGH:
      Serial.println(F("428x (High)"));
      break;
    case TSL2591_GAIN_MAX:
      Serial.println(F("9876x (Max)"));
   daf18:	f002 fc94 	bl	dd844 <_Z16_fetch_usbserialv>
   daf1c:	4924      	ldr	r1, [pc, #144]	; (dafb0 <_ZN14WeatherSensors5beginEv+0x23c>)
   daf1e:	e006      	b.n	daf2e <_ZN14WeatherSensors5beginEv+0x1ba>
  {
    case TSL2591_GAIN_LOW:
      Serial.println(F("1x (Low)"));
      break;
    case TSL2591_GAIN_MED:
      Serial.println(F("25x (Medium)"));
   daf20:	f002 fc90 	bl	dd844 <_Z16_fetch_usbserialv>
   daf24:	4923      	ldr	r1, [pc, #140]	; (dafb4 <_ZN14WeatherSensors5beginEv+0x240>)
   daf26:	e002      	b.n	daf2e <_ZN14WeatherSensors5beginEv+0x1ba>
      break;
    case TSL2591_GAIN_HIGH:
      Serial.println(F("428x (High)"));
   daf28:	f002 fc8c 	bl	dd844 <_Z16_fetch_usbserialv>
   daf2c:	4922      	ldr	r1, [pc, #136]	; (dafb8 <_ZN14WeatherSensors5beginEv+0x244>)
      break;
    case TSL2591_GAIN_MAX:
      Serial.println(F("9876x (Max)"));
   daf2e:	f001 fd4c 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
      break;
  }
  Serial.print  (F("Timing:       "));
   daf32:	f002 fc87 	bl	dd844 <_Z16_fetch_usbserialv>
   daf36:	4921      	ldr	r1, [pc, #132]	; (dafbc <_ZN14WeatherSensors5beginEv+0x248>)
   daf38:	f001 fd2d 	bl	dc996 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((tsl.getTiming() + 1) * 100, DEC); 
   daf3c:	f002 fc82 	bl	dd844 <_Z16_fetch_usbserialv>
   daf40:	4605      	mov	r5, r0
   daf42:	4620      	mov	r0, r4
   daf44:	f7fb fcc0 	bl	d68c8 <_ZN16Adafruit_TSL25919getTimingEv>
   daf48:	2164      	movs	r1, #100	; 0x64
   daf4a:	220a      	movs	r2, #10
   daf4c:	fb00 1101 	mla	r1, r0, r1, r1
   daf50:	4628      	mov	r0, r5
   daf52:	f7ff feed 	bl	dad30 <_ZN5Print5printIlLi0EEEjT_i>
  Serial.println(F(" ms"));
   daf56:	f002 fc75 	bl	dd844 <_Z16_fetch_usbserialv>
   daf5a:	4919      	ldr	r1, [pc, #100]	; (dafc0 <_ZN14WeatherSensors5beginEv+0x24c>)
   daf5c:	f001 fd35 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("------------------------------------"));
   daf60:	f002 fc70 	bl	dd844 <_Z16_fetch_usbserialv>
   daf64:	4907      	ldr	r1, [pc, #28]	; (daf84 <_ZN14WeatherSensors5beginEv+0x210>)
   daf66:	f001 fd30 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F(""));
   daf6a:	f002 fc6b 	bl	dd844 <_Z16_fetch_usbserialv>
   daf6e:	490d      	ldr	r1, [pc, #52]	; (dafa4 <_ZN14WeatherSensors5beginEv+0x230>)
   daf70:	f001 fd2b 	bl	dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   daf74:	b00b      	add	sp, #44	; 0x2c
   daf76:	bd30      	pop	{r4, r5, pc}
   daf78:	000e556b 	.word	0x000e556b
   daf7c:	000e558b 	.word	0x000e558b
   daf80:	000e55a2 	.word	0x000e55a2
   daf84:	000e55c9 	.word	0x000e55c9
   daf88:	000e55ee 	.word	0x000e55ee
   daf8c:	000e55fd 	.word	0x000e55fd
   daf90:	000e560c 	.word	0x000e560c
   daf94:	000e561b 	.word	0x000e561b
   daf98:	000e562a 	.word	0x000e562a
   daf9c:	000e562f 	.word	0x000e562f
   dafa0:	000e563e 	.word	0x000e563e
   dafa4:	000e52f7 	.word	0x000e52f7
   dafa8:	000e564d 	.word	0x000e564d
   dafac:	000e565c 	.word	0x000e565c
   dafb0:	000e567e 	.word	0x000e567e
   dafb4:	000e5665 	.word	0x000e5665
   dafb8:	000e5672 	.word	0x000e5672
   dafbc:	000e568a 	.word	0x000e568a
   dafc0:	000e5699 	.word	0x000e5699

000dafc4 <_ZN7FramI2CC1E14framPartNumber>:
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   dafc4:	2250      	movs	r2, #80	; 0x50
   dafc6:	7042      	strb	r2, [r0, #1]
{
//	_topAddressForPartNumber[MB85RC16]		= 0x0007FFUL;
	_topAddressForPartNumber[MB85RC64]		= 0x001FFFUL;
   dafc8:	f641 72ff 	movw	r2, #8191	; 0x1fff
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   dafcc:	b510      	push	{r4, lr}
{
//	_topAddressForPartNumber[MB85RC16]		= 0x0007FFUL;
	_topAddressForPartNumber[MB85RC64]		= 0x001FFFUL;
   dafce:	6042      	str	r2, [r0, #4]
	_topAddressForPartNumber[MB85RC128A]	= 0x003FFFUL;
   dafd0:	f643 72ff 	movw	r2, #16383	; 0x3fff
   dafd4:	6082      	str	r2, [r0, #8]
	_topAddressForPartNumber[MB85RC128B]	= 0x003FFFUL;
   dafd6:	60c2      	str	r2, [r0, #12]
	_topAddressForPartNumber[MB85RC256A]	= 0x007FFFUL;
   dafd8:	f647 72ff 	movw	r2, #32767	; 0x7fff
   dafdc:	6102      	str	r2, [r0, #16]
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
   dafde:	6142      	str	r2, [r0, #20]
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
   dafe0:	6182      	str	r2, [r0, #24]
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
   dafe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   dafe6:	7001      	strb	r1, [r0, #0]
	_topAddressForPartNumber[MB85RC128A]	= 0x003FFFUL;
	_topAddressForPartNumber[MB85RC128B]	= 0x003FFFUL;
	_topAddressForPartNumber[MB85RC256A]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
   dafe8:	61c2      	str	r2, [r0, #28]
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
	_bottomAddress = _baseAddress + _maxBufferSize;
   dafea:	2480      	movs	r4, #128	; 0x80
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
   dafec:	2200      	movs	r2, #0
	_bottomAddress = _baseAddress + _maxBufferSize;
	_topAddress = _topAddressForPartNumber[_partNumber];
   dafee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
   daff2:	6202      	str	r2, [r0, #32]
	_bottomAddress = _baseAddress + _maxBufferSize;
   daff4:	6244      	str	r4, [r0, #36]	; 0x24
	_topAddress = _topAddressForPartNumber[_partNumber];
   daff6:	684a      	ldr	r2, [r1, #4]
   daff8:	6282      	str	r2, [r0, #40]	; 0x28
	_numberOfBuffers = (_topAddress - _bottomAddress + 1) / _maxBufferSize;
   daffa:	3a7f      	subs	r2, #127	; 0x7f
   daffc:	09d2      	lsrs	r2, r2, #7
   daffe:	62c2      	str	r2, [r0, #44]	; 0x2c
	_nextFreeByte = _bottomAddress;
   db000:	6304      	str	r4, [r0, #48]	; 0x30
}
   db002:	bd10      	pop	{r4, pc}

000db004 <_ZN7FramI2C11_readMemoryEmhPh>:
//
// PLATFORM SPECIFIC, LOW LEVEL METHODS
//

void FramI2C::_readMemory(uint32_t address, uint8_t numberOfBytes, uint8_t *buffer)
{
   db004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db008:	461e      	mov	r6, r3
   db00a:	4614      	mov	r4, r2
   db00c:	460f      	mov	r7, r1
   db00e:	4605      	mov	r5, r0
	WITH_LOCK(Wire)
   db010:	f003 fae0 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db014:	4680      	mov	r8, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   db016:	f002 fe11 	bl	ddc3c <_ZN7TwoWire4lockEv>
	{
		uint16_t framAddr = (uint16_t)address;
		// Address only correct for 64 through 512 kbit devices
		Wire.beginTransmission(framI2CAddress);
   db01a:	f003 fadb 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db01e:	7869      	ldrb	r1, [r5, #1]
   db020:	f002 fdf5 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>

		Wire.write(framAddr >> 8);
   db024:	f003 fad6 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db028:	f3c7 2107 	ubfx	r1, r7, #8, #8
   db02c:	f7fb fa49 	bl	d64c2 <_ZN7TwoWire5writeEi>
		Wire.write(framAddr & 0xFF);
   db030:	f003 fad0 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db034:	b2f9      	uxtb	r1, r7
   db036:	f7fb fa44 	bl	d64c2 <_ZN7TwoWire5writeEi>

		Wire.endTransmission();
   db03a:	f003 facb 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db03e:	f002 fdf1 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

		// Maximum request size of 32 bytes
		Wire.requestFrom(framI2CAddress, (uint8_t)numberOfBytes);
   db042:	f003 fac7 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db046:	4622      	mov	r2, r4
   db048:	7869      	ldrb	r1, [r5, #1]
   db04a:	f002 fddd 	bl	ddc08 <_ZN7TwoWire11requestFromEhj>
   db04e:	3c01      	subs	r4, #1
   db050:	1e75      	subs	r5, r6, #1
   db052:	4434      	add	r4, r6
		for (byte i=0; i < numberOfBytes; i++) {
   db054:	42a5      	cmp	r5, r4
   db056:	d007      	beq.n	db068 <_ZN7FramI2C11_readMemoryEmhPh+0x64>
			buffer[i] = Wire.read();
   db058:	f003 fabc 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db05c:	6803      	ldr	r3, [r0, #0]
   db05e:	695b      	ldr	r3, [r3, #20]
   db060:	4798      	blx	r3
   db062:	f805 0f01 	strb.w	r0, [r5, #1]!

		Wire.endTransmission();

		// Maximum request size of 32 bytes
		Wire.requestFrom(framI2CAddress, (uint8_t)numberOfBytes);
		for (byte i=0; i < numberOfBytes; i++) {
   db066:	e7f5      	b.n	db054 <_ZN7FramI2C11_readMemoryEmhPh+0x50>
			buffer[i] = Wire.read();
		}
		Wire.endTransmission();
   db068:	f003 fab4 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db06c:	f002 fdda 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   db070:	4640      	mov	r0, r8
	}
}
   db072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   db076:	f002 bdea 	b.w	ddc4e <_ZN7TwoWire6unlockEv>

000db07a <_ZN7FramI2C12_writeMemoryEmhPh>:


void FramI2C::_writeMemory(uint32_t address, uint8_t numberOfBytes, uint8_t *buffer)
{
   db07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db07e:	461e      	mov	r6, r3
   db080:	4614      	mov	r4, r2
   db082:	460d      	mov	r5, r1
   db084:	4680      	mov	r8, r0
	WITH_LOCK(Wire)
   db086:	f003 faa5 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db08a:	4607      	mov	r7, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   db08c:	f002 fdd6 	bl	ddc3c <_ZN7TwoWire4lockEv>
	{	
		uint16_t framAddr = (uint16_t)address;
		// Address only correct for 64 through 512 kbit devices

		Wire.beginTransmission(framI2CAddress);
   db090:	f003 faa0 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db094:	f898 1001 	ldrb.w	r1, [r8, #1]
   db098:	f002 fdb9 	bl	ddc0e <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(framAddr >> 8);
   db09c:	f003 fa9a 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db0a0:	f3c5 2107 	ubfx	r1, r5, #8, #8
   db0a4:	f7fb fa0d 	bl	d64c2 <_ZN7TwoWire5writeEi>
		Wire.write(framAddr & 0xFF);
   db0a8:	f003 fa94 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db0ac:	b2e9      	uxtb	r1, r5
   db0ae:	f7fb fa08 	bl	d64c2 <_ZN7TwoWire5writeEi>
   db0b2:	3c01      	subs	r4, #1
   db0b4:	1e75      	subs	r5, r6, #1
   db0b6:	4434      	add	r4, r6


		for (uint8_t i=0; i < numberOfBytes; i++) {
   db0b8:	42a5      	cmp	r5, r4
   db0ba:	d007      	beq.n	db0cc <_ZN7FramI2C12_writeMemoryEmhPh+0x52>
			Wire.write(buffer[i]);
   db0bc:	f003 fa8a 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db0c0:	6803      	ldr	r3, [r0, #0]
   db0c2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   db0c6:	689b      	ldr	r3, [r3, #8]
   db0c8:	4798      	blx	r3
		Wire.beginTransmission(framI2CAddress);
		Wire.write(framAddr >> 8);
		Wire.write(framAddr & 0xFF);


		for (uint8_t i=0; i < numberOfBytes; i++) {
   db0ca:	e7f5      	b.n	db0b8 <_ZN7FramI2C12_writeMemoryEmhPh+0x3e>
			Wire.write(buffer[i]);
		}
		Wire.endTransmission();
   db0cc:	f003 fa82 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db0d0:	f002 fda8 	bl	ddc24 <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   db0d4:	4638      	mov	r0, r7
	}
}
   db0d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   db0da:	f002 bdb8 	b.w	ddc4e <_ZN7TwoWire6unlockEv>

000db0de <_ZN7FramI2C4readEmjPh>:
  read((uint32_t) _baseAddress, (unsigned int) _maxBufferSize, buffer);
}


framResult FramI2C::read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   db0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db0e0:	4614      	mov	r4, r2
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   db0e2:	6a42      	ldr	r2, [r0, #36]	; 0x24
   db0e4:	428a      	cmp	r2, r1
  read((uint32_t) _baseAddress, (unsigned int) _maxBufferSize, buffer);
}


framResult FramI2C::read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   db0e6:	4607      	mov	r7, r0
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   db0e8:	d81e      	bhi.n	db128 <_ZN7FramI2C4readEmjPh+0x4a>
   db0ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
   db0ec:	4281      	cmp	r1, r0
   db0ee:	d81b      	bhi.n	db128 <_ZN7FramI2C4readEmjPh+0x4a>
	{
		return framBadStartAddress;
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
   db0f0:	1e62      	subs	r2, r4, #1
   db0f2:	2a7f      	cmp	r2, #127	; 0x7f
   db0f4:	d81a      	bhi.n	db12c <_ZN7FramI2C4readEmjPh+0x4e>
	{
		return framBadNumberOfBytes;
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
   db0f6:	440a      	add	r2, r1
   db0f8:	4290      	cmp	r0, r2
   db0fa:	d319      	bcc.n	db130 <_ZN7FramI2C4readEmjPh+0x52>
   db0fc:	461d      	mov	r5, r3
   db0fe:	1ace      	subs	r6, r1, r3
// Read in 30 byte blocks due to wire requestFrom() limit
  const uint8_t blockSize = 30;
  byte* buf = buffer;
  uint32_t address = startAddress;

  while (numberOfBytes >= blockSize)
   db100:	2c1d      	cmp	r4, #29
   db102:	eb05 0106 	add.w	r1, r5, r6
   db106:	d907      	bls.n	db118 <_ZN7FramI2C4readEmjPh+0x3a>
  {
		_readMemory(address, blockSize, buf);
   db108:	462b      	mov	r3, r5
   db10a:	221e      	movs	r2, #30
   db10c:	4638      	mov	r0, r7
   db10e:	f7ff ff79 	bl	db004 <_ZN7FramI2C11_readMemoryEmhPh>
	  address += blockSize;
		buf += blockSize;
   db112:	351e      	adds	r5, #30
	  numberOfBytes -= blockSize;
   db114:	3c1e      	subs	r4, #30
   db116:	e7f3      	b.n	db100 <_ZN7FramI2C4readEmjPh+0x22>
  }
  if (numberOfBytes > 0)
   db118:	b124      	cbz	r4, db124 <_ZN7FramI2C4readEmjPh+0x46>
  {
    _readMemory(address, numberOfBytes, buf);
   db11a:	462b      	mov	r3, r5
   db11c:	b2e2      	uxtb	r2, r4
   db11e:	4638      	mov	r0, r7
   db120:	f7ff ff70 	bl	db004 <_ZN7FramI2C11_readMemoryEmhPh>
   db124:	2000      	movs	r0, #0
   db126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
	{
		return framBadStartAddress;
   db128:	2001      	movs	r0, #1
   db12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
	{
		return framBadNumberOfBytes;
   db12c:	2002      	movs	r0, #2
   db12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
	{
		return framBadFinishAddress;
   db130:	2003      	movs	r0, #3
   db132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db134 <_ZN7FramI2C5writeEmjPh>:
	return framOK;
}


framResult FramI2C::write(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   db134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db136:	4614      	mov	r4, r2
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   db138:	6a42      	ldr	r2, [r0, #36]	; 0x24
   db13a:	428a      	cmp	r2, r1
	return framOK;
}


framResult FramI2C::write(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   db13c:	4607      	mov	r7, r0
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   db13e:	d81e      	bhi.n	db17e <_ZN7FramI2C5writeEmjPh+0x4a>
   db140:	6a80      	ldr	r0, [r0, #40]	; 0x28
   db142:	4281      	cmp	r1, r0
   db144:	d81b      	bhi.n	db17e <_ZN7FramI2C5writeEmjPh+0x4a>
	{
		return framBadStartAddress;
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
   db146:	1e62      	subs	r2, r4, #1
   db148:	2a7f      	cmp	r2, #127	; 0x7f
   db14a:	d81a      	bhi.n	db182 <_ZN7FramI2C5writeEmjPh+0x4e>
	{
		return framBadNumberOfBytes;
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
   db14c:	440a      	add	r2, r1
   db14e:	4290      	cmp	r0, r2
   db150:	d319      	bcc.n	db186 <_ZN7FramI2C5writeEmjPh+0x52>
   db152:	461d      	mov	r5, r3
   db154:	1ace      	subs	r6, r1, r3
	// Write in 32 byte blocks due to wire limit
	  const uint8_t blockSize = 30;
	  byte* buf = buffer;
	  uint32_t address = startAddress;

	  while (numberOfBytes >= blockSize)
   db156:	2c1d      	cmp	r4, #29
   db158:	eb05 0106 	add.w	r1, r5, r6
   db15c:	d907      	bls.n	db16e <_ZN7FramI2C5writeEmjPh+0x3a>
	  {
			_writeMemory(address, blockSize, buf);
   db15e:	462b      	mov	r3, r5
   db160:	221e      	movs	r2, #30
   db162:	4638      	mov	r0, r7
   db164:	f7ff ff89 	bl	db07a <_ZN7FramI2C12_writeMemoryEmhPh>
		  address += blockSize;
			buf += blockSize;
   db168:	351e      	adds	r5, #30
		  numberOfBytes -= blockSize;
   db16a:	3c1e      	subs	r4, #30
   db16c:	e7f3      	b.n	db156 <_ZN7FramI2C5writeEmjPh+0x22>
	  }
	  if (numberOfBytes > 0)
   db16e:	b124      	cbz	r4, db17a <_ZN7FramI2C5writeEmjPh+0x46>
	  {
	    _writeMemory(address, numberOfBytes, buf);
   db170:	462b      	mov	r3, r5
   db172:	b2e2      	uxtb	r2, r4
   db174:	4638      	mov	r0, r7
   db176:	f7ff ff80 	bl	db07a <_ZN7FramI2C12_writeMemoryEmhPh>
   db17a:	2000      	movs	r0, #0
   db17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
	{
		return framBadStartAddress;
   db17e:	2001      	movs	r0, #1
   db180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
	{
		return framBadNumberOfBytes;
   db182:	2002      	movs	r0, #2
   db184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
	{
		return framBadFinishAddress;
   db186:	2003      	movs	r0, #3
   db188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db18a <_ZN7FramI2C14allocateMemoryEmR10framResult>:
	return framOK;
}


uint32_t FramI2C::allocateMemory(uint32_t numberOfBytes, framResult& result)
{
   db18a:	b510      	push	{r4, lr}

	if ((_nextFreeByte + numberOfBytes) < _topAddress)
   db18c:	6b04      	ldr	r4, [r0, #48]	; 0x30
   db18e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   db190:	4421      	add	r1, r4
   db192:	4299      	cmp	r1, r3
	{
		uint16_t base = _nextFreeByte;
		_nextFreeByte += numberOfBytes;
   db194:	bf38      	it	cc
   db196:	6301      	strcc	r1, [r0, #48]	; 0x30
   db198:	f04f 0300 	mov.w	r3, #0
		result = framOK;
		return base;
	}
	else
	{
		result = framBadFinishAddress;
   db19c:	bf2d      	iteet	cs
   db19e:	2103      	movcs	r1, #3
   db1a0:	b2a0      	uxthcc	r0, r4

	if ((_nextFreeByte + numberOfBytes) < _topAddress)
	{
		uint16_t base = _nextFreeByte;
		_nextFreeByte += numberOfBytes;
		result = framOK;
   db1a2:	7013      	strbcc	r3, [r2, #0]
		return base;
	}
	else
	{
		result = framBadFinishAddress;
   db1a4:	7011      	strbcs	r1, [r2, #0]
		return 0;
   db1a6:	bf28      	it	cs
   db1a8:	4618      	movcs	r0, r3
	}
}
   db1aa:	bd10      	pop	{r4, pc}

000db1ac <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult>:
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   db1ac:	b510      	push	{r4, lr}
   db1ae:	4604      	mov	r4, r0
	// Returns result code

	// Validations:
	//		_sizeOfElement <= _bufferSize

	if (_sizeOfElement < _f.getMaxBufferSize())
   db1b0:	2b80      	cmp	r3, #128	; 0x80
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   db1b2:	4608      	mov	r0, r1
   db1b4:	4611      	mov	r1, r2
		_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   db1b6:	6021      	str	r1, [r4, #0]
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   db1b8:	9a02      	ldr	r2, [sp, #8]
		_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   db1ba:	7123      	strb	r3, [r4, #4]
   db1bc:	60e0      	str	r0, [r4, #12]
	// Returns result code

	// Validations:
	//		_sizeOfElement <= _bufferSize

	if (_sizeOfElement < _f.getMaxBufferSize())
   db1be:	d204      	bcs.n	db1ca <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult+0x1e>
	{
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement, result);
   db1c0:	4359      	muls	r1, r3
   db1c2:	f7ff ffe2 	bl	db18a <_ZN7FramI2C14allocateMemoryEmR10framResult>
   db1c6:	60a0      	str	r0, [r4, #8]
   db1c8:	e003      	b.n	db1d2 <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult+0x26>
	}
	else
	{
		result = framArrayElementTooBig;
   db1ca:	2304      	movs	r3, #4
   db1cc:	7013      	strb	r3, [r2, #0]
		_startAddress = 0;
   db1ce:	2300      	movs	r3, #0
   db1d0:	60a3      	str	r3, [r4, #8]
	}
}
   db1d2:	4620      	mov	r0, r4
   db1d4:	bd10      	pop	{r4, pc}

000db1d6 <_ZN12FramI2CArray11readElementEmPhR10framResult>:


void FramI2CArray::readElement(uint32_t index, byte *buffer, framResult &result)
{
   db1d6:	b570      	push	{r4, r5, r6, lr}

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   db1d8:	6885      	ldr	r5, [r0, #8]
	}
}


void FramI2CArray::readElement(uint32_t index, byte *buffer, framResult &result)
{
   db1da:	4616      	mov	r6, r2
   db1dc:	461c      	mov	r4, r3

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   db1de:	b90d      	cbnz	r5, db1e4 <_ZN12FramI2CArray11readElementEmPhR10framResult+0xe>
	{
		result = framBadArrayStartAddress;
   db1e0:	2306      	movs	r3, #6
   db1e2:	e003      	b.n	db1ec <_ZN12FramI2CArray11readElementEmPhR10framResult+0x16>
	}
	else if (index >= _numberOfElements)
   db1e4:	6803      	ldr	r3, [r0, #0]
   db1e6:	428b      	cmp	r3, r1
   db1e8:	d802      	bhi.n	db1f0 <_ZN12FramI2CArray11readElementEmPhR10framResult+0x1a>
	{
		result = framBadArrayIndex;
   db1ea:	2305      	movs	r3, #5
   db1ec:	7023      	strb	r3, [r4, #0]
   db1ee:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		result = _f.read(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
   db1f0:	7902      	ldrb	r2, [r0, #4]
   db1f2:	68c0      	ldr	r0, [r0, #12]
   db1f4:	4633      	mov	r3, r6
   db1f6:	fb02 5101 	mla	r1, r2, r1, r5
   db1fa:	f7ff ff70 	bl	db0de <_ZN7FramI2C4readEmjPh>
   db1fe:	7020      	strb	r0, [r4, #0]
   db200:	bd70      	pop	{r4, r5, r6, pc}

000db202 <_ZN12FramI2CArray12writeElementEmPhR10framResult>:
}



void FramI2CArray::writeElement(uint32_t index, byte *buffer, framResult &result)
{
   db202:	b570      	push	{r4, r5, r6, lr}

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   db204:	6885      	ldr	r5, [r0, #8]
}



void FramI2CArray::writeElement(uint32_t index, byte *buffer, framResult &result)
{
   db206:	4616      	mov	r6, r2
   db208:	461c      	mov	r4, r3

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   db20a:	b90d      	cbnz	r5, db210 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0xe>
	{
		result = framBadArrayStartAddress;
   db20c:	2306      	movs	r3, #6
   db20e:	e003      	b.n	db218 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0x16>
	}
	else if (index >= _numberOfElements)
   db210:	6803      	ldr	r3, [r0, #0]
   db212:	428b      	cmp	r3, r1
   db214:	d802      	bhi.n	db21c <_ZN12FramI2CArray12writeElementEmPhR10framResult+0x1a>
	{
		result = framBadArrayIndex;
   db216:	2305      	movs	r3, #5
   db218:	7023      	strb	r3, [r4, #0]
   db21a:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		result = _f.write(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
   db21c:	7902      	ldrb	r2, [r0, #4]
   db21e:	68c0      	ldr	r0, [r0, #12]
   db220:	4633      	mov	r3, r6
   db222:	fb02 5101 	mla	r1, r2, r1, r5
   db226:	f7ff ff85 	bl	db134 <_ZN7FramI2C5writeEmjPh>
   db22a:	7020      	strb	r0, [r4, #0]
   db22c:	bd70      	pop	{r4, r5, r6, pc}

000db22e <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult>:
	{
		return (uint32_t)(x+b);
	}
}

Ring_FramArray::Ring_FramArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   db22e:	b538      	push	{r3, r4, r5, lr}
   db230:	4604      	mov	r4, r0
   db232:	4615      	mov	r5, r2
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
{
	if (_sizeOfElement < _f.getMaxBufferSize())
   db234:	2b80      	cmp	r3, #128	; 0x80
	{
		return (uint32_t)(x+b);
	}
}

Ring_FramArray::Ring_FramArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   db236:	4608      	mov	r0, r1
   db238:	9a04      	ldr	r2, [sp, #16]
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   db23a:	6025      	str	r5, [r4, #0]
   db23c:	7123      	strb	r3, [r4, #4]
   db23e:	60e1      	str	r1, [r4, #12]
{
	if (_sizeOfElement < _f.getMaxBufferSize())
   db240:	d20b      	bcs.n	db25a <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult+0x2c>
	{
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
   db242:	3501      	adds	r5, #1
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   db244:	fb05 f103 	mul.w	r1, r5, r3
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
{
	if (_sizeOfElement < _f.getMaxBufferSize())
	{
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
   db248:	6025      	str	r5, [r4, #0]
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   db24a:	310c      	adds	r1, #12
   db24c:	f7ff ff9d 	bl	db18a <_ZN7FramI2C14allocateMemoryEmR10framResult>
	return _topAddress;
}

uint32_t FramI2C::getNextFreeByte()
{
	return _nextFreeByte;
   db250:	68e3      	ldr	r3, [r4, #12]
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   db252:	60a0      	str	r0, [r4, #8]
	return _topAddress;
}

uint32_t FramI2C::getNextFreeByte()
{
	return _nextFreeByte;
   db254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		_numberOfElements = _numberOfElements + 1;
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
		_ringEndAddress = _f.getNextFreeByte();
   db256:	61a3      	str	r3, [r4, #24]
   db258:	e003      	b.n	db262 <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult+0x34>
		// 	}
		// }
	}
	else
	{
		result = framArrayElementTooBig;
   db25a:	2304      	movs	r3, #4
   db25c:	7013      	strb	r3, [r2, #0]
		// Add checks in the other functions to use start address
		_startAddress = 0;
   db25e:	2300      	movs	r3, #0
   db260:	60a3      	str	r3, [r4, #8]
		// _tailAddress = 0;
		// _headAddress = 0;
	}
}
   db262:	4620      	mov	r0, r4
   db264:	bd38      	pop	{r3, r4, r5, pc}

000db266 <_ZN14Ring_FramArray11setPointersEv>:
	}
}

void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
   db266:	6883      	ldr	r3, [r0, #8]
   db268:	b16b      	cbz	r3, db286 <_ZN14Ring_FramArray11setPointersEv+0x20>
	{
		_pointers.head = _headAddress;
   db26a:	6942      	ldr	r2, [r0, #20]
		_pointers.tail = _tailAddress;
   db26c:	6903      	ldr	r3, [r0, #16]
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   db26e:	6a81      	ldr	r1, [r0, #40]	; 0x28
void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
	{
		_pointers.head = _headAddress;
		_pointers.tail = _tailAddress;
   db270:	6203      	str	r3, [r0, #32]
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   db272:	4413      	add	r3, r2

void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
	{
		_pointers.head = _headAddress;
   db274:	6242      	str	r2, [r0, #36]	; 0x24
		_pointers.tail = _tailAddress;
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   db276:	185a      	adds	r2, r3, r1
   db278:	4603      	mov	r3, r0
   db27a:	f843 2f1c 	str.w	r2, [r3, #28]!
		// Save pointers to fram
		_f.write(_pointersAddress, sizeof(_pointers),(uint8_t*)&_pointers);
   db27e:	220c      	movs	r2, #12
   db280:	68c0      	ldr	r0, [r0, #12]
   db282:	f7ff bf57 	b.w	db134 <_ZN7FramI2C5writeEmjPh>
   db286:	4770      	bx	lr

000db288 <_ZN14Ring_FramArray11getPointersEv>:
	}
}

void Ring_FramArray::getPointers()
{
_pointers.tail=99;
   db288:	2363      	movs	r3, #99	; 0x63
   db28a:	6203      	str	r3, [r0, #32]
_pointers.head=100;
   db28c:	2364      	movs	r3, #100	; 0x64
   db28e:	6243      	str	r3, [r0, #36]	; 0x24

framResult checkresult;
	//read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
	checkresult = _f.read(_pointersAddress, sizeof(_pointers), (uint8_t*)&_pointers);
   db290:	6a81      	ldr	r1, [r0, #40]	; 0x28
   db292:	f100 031c 	add.w	r3, r0, #28
   db296:	220c      	movs	r2, #12
   db298:	68c0      	ldr	r0, [r0, #12]
   db29a:	f7ff bf20 	b.w	db0de <_ZN7FramI2C4readEmjPh>

000db29e <_ZN14Ring_FramArray10initializeEv>:
		// _headAddress = 0;
	}
}

void Ring_FramArray::initialize()
{
   db29e:	b510      	push	{r4, lr}
   db2a0:	4604      	mov	r4, r0
	// if (result==framOK)
	// {
		if (!Wire.isEnabled())
   db2a2:	f003 f997 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db2a6:	f002 fcc0 	bl	ddc2a <_ZN7TwoWire9isEnabledEv>
   db2aa:	b918      	cbnz	r0, db2b4 <_ZN14Ring_FramArray10initializeEv+0x16>
		{
			Wire.begin();
   db2ac:	f003 f992 	bl	de5d4 <_Z19__fetch_global_Wirev>
   db2b0:	f002 fc76 	bl	ddba0 <_ZN7TwoWire5beginEv>
		}

		_pointersAddress = _ringEndAddress - (uint32_t)sizeof(_pointers);
   db2b4:	69a3      	ldr	r3, [r4, #24]
   db2b6:	3b0c      	subs	r3, #12
   db2b8:	62a3      	str	r3, [r4, #40]	; 0x28

		// Load pointers from FRAM
		getPointers();
   db2ba:	4620      	mov	r0, r4
   db2bc:	f7ff ffe4 	bl	db288 <_ZN14Ring_FramArray11getPointersEv>
		// Check for initialization or existance of pointers
		// Rule to check _pointers.pointerCheck = _pointersAddress+_pointers.tail+pointers.head
		uint32_t check = _pointersAddress + _pointers.tail + _pointers.head;
		if (check==_pointers.pointerCheck)
   db2c0:	f104 0120 	add.w	r1, r4, #32
   db2c4:	c90e      	ldmia	r1, {r1, r2, r3}
   db2c6:	69e0      	ldr	r0, [r4, #28]
   db2c8:	440b      	add	r3, r1
   db2ca:	4413      	add	r3, r2
   db2cc:	4283      	cmp	r3, r0
			_headAddress = _pointers.head;
		}
		else
		{
			// First run
			_tailAddress = 0;
   db2ce:	bf13      	iteet	ne
   db2d0:	2300      	movne	r3, #0
		// Rule to check _pointers.pointerCheck = _pointersAddress+_pointers.tail+pointers.head
		uint32_t check = _pointersAddress + _pointers.tail + _pointers.head;
		if (check==_pointers.pointerCheck)
		{
			// Not first run so initialize from FRAM
			_tailAddress = _pointers.tail;
   db2d2:	6121      	streq	r1, [r4, #16]
			_headAddress = _pointers.head;
   db2d4:	6162      	streq	r2, [r4, #20]
		}
		else
		{
			// First run
			_tailAddress = 0;
   db2d6:	6123      	strne	r3, [r4, #16]
			_headAddress = 0;			
   db2d8:	bf18      	it	ne
   db2da:	6163      	strne	r3, [r4, #20]
		}
		setPointers();
   db2dc:	4620      	mov	r0, r4
	// }
}
   db2de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		{
			// First run
			_tailAddress = 0;
			_headAddress = 0;			
		}
		setPointers();
   db2e2:	f7ff bfc0 	b.w	db266 <_ZN14Ring_FramArray11setPointersEv>

000db2e6 <_GLOBAL__sub_I__ZN7FramI2CC2E14framPartNumber>:
   db2e6:	f000 b89b 	b.w	db420 <HAL_Pin_Map>

000db2ea <_ZN13RunningMedianD1Ev>:
{
#ifdef RUNNING_MEDIAN_USE_MALLOC
  free(_ar);
  free(_p);
#endif
}
   db2ea:	4770      	bx	lr

000db2ec <_ZN13RunningMedian5clearEv>:

// resets all counters
void RunningMedian::clear()
{
  _cnt = 0;
   db2ec:	2300      	movs	r3, #0
   db2ee:	8083      	strh	r3, [r0, #4]
  _idx = 0;
   db2f0:	80c3      	strh	r3, [r0, #6]
  _sorted = false;
   db2f2:	7003      	strb	r3, [r0, #0]
  for (uint16_t i = 0; i < _size; i++) _p[i] = i;
   db2f4:	8841      	ldrh	r1, [r0, #2]
   db2f6:	f500 60b0 	add.w	r0, r0, #1408	; 0x580
   db2fa:	b29a      	uxth	r2, r3
   db2fc:	428a      	cmp	r2, r1
   db2fe:	d203      	bcs.n	db308 <_ZN13RunningMedian5clearEv+0x1c>
   db300:	f820 2f02 	strh.w	r2, [r0, #2]!
   db304:	3301      	adds	r3, #1
   db306:	e7f8      	b.n	db2fa <_ZN13RunningMedian5clearEv+0xe>
   db308:	4770      	bx	lr

000db30a <_ZN13RunningMedianC1Et>:
//
// Modified by Robert Mawrey for uint16_t values
#include "RunningMedian16Bit.h"

//RunningMedian::RunningMedian(const uint8_t size)
RunningMedian::RunningMedian(const uint16_t size)
   db30a:	b510      	push	{r4, lr}
   db30c:	4604      	mov	r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   db30e:	b129      	cbz	r1, db31c <_ZN13RunningMedianC1Et+0x12>
   db310:	f240 23bd 	movw	r3, #701	; 0x2bd
   db314:	4299      	cmp	r1, r3
   db316:	bfa8      	it	ge
   db318:	4619      	movge	r1, r3
   db31a:	e000      	b.n	db31e <_ZN13RunningMedianC1Et+0x14>
   db31c:	2101      	movs	r1, #1
//  _ar = (float *) malloc(_size * sizeof(float));
_ar = (uint16_t *) malloc(_size * sizeof(uint16_t));
  _p = (uint16_t *) malloc(_size * sizeof(uint16_t));
#endif

  clear();
   db31e:	4620      	mov	r0, r4
#include "RunningMedian16Bit.h"

//RunningMedian::RunningMedian(const uint8_t size)
RunningMedian::RunningMedian(const uint16_t size)
{
  _size = constrain(size, MEDIAN_MIN_SIZE, MEDIAN_MAX_SIZE);
   db320:	8061      	strh	r1, [r4, #2]
//  _ar = (float *) malloc(_size * sizeof(float));
_ar = (uint16_t *) malloc(_size * sizeof(uint16_t));
  _p = (uint16_t *) malloc(_size * sizeof(uint16_t));
#endif

  clear();
   db322:	f7ff ffe3 	bl	db2ec <_ZN13RunningMedian5clearEv>
}
   db326:	4620      	mov	r0, r4
   db328:	bd10      	pop	{r4, pc}

000db32a <_ZN13RunningMedian3addEt>:

// adds a new value to the data-set
// or overwrites the oldest if full.
void RunningMedian::add(uint16_t value)
{
  _ar[_idx++] = value;
   db32a:	88c2      	ldrh	r2, [r0, #6]
   db32c:	1c53      	adds	r3, r2, #1
   db32e:	3204      	adds	r2, #4
   db330:	b29b      	uxth	r3, r3
   db332:	80c3      	strh	r3, [r0, #6]
   db334:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  if (_idx >= _size) _idx = 0; // wrap around
   db338:	8842      	ldrh	r2, [r0, #2]
   db33a:	4293      	cmp	r3, r2
   db33c:	bf24      	itt	cs
   db33e:	2300      	movcs	r3, #0
   db340:	80c3      	strhcs	r3, [r0, #6]
  if (_cnt < _size) _cnt++;
   db342:	8883      	ldrh	r3, [r0, #4]
   db344:	429a      	cmp	r2, r3
   db346:	bf84      	itt	hi
   db348:	3301      	addhi	r3, #1
   db34a:	8083      	strhhi	r3, [r0, #4]
  _sorted = false;
   db34c:	2300      	movs	r3, #0
   db34e:	7003      	strb	r3, [r0, #0]
   db350:	4770      	bx	lr

000db352 <_ZN13RunningMedian4sortEv>:
  }
}
#endif

void RunningMedian::sort()
{
   db352:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // bubble sort with flag
  for (uint16_t i = 0; i < _cnt-1; i++)
   db356:	f8b0 e004 	ldrh.w	lr, [r0, #4]
   db35a:	2600      	movs	r6, #0
   db35c:	f10e 3cff 	add.w	ip, lr, #4294967295
   db360:	b2b2      	uxth	r2, r6
   db362:	4562      	cmp	r2, ip
   db364:	da20      	bge.n	db3a8 <_ZN13RunningMedian4sortEv+0x56>
   db366:	2301      	movs	r3, #1
   db368:	461f      	mov	r7, r3
  {
    bool flag = true;
    for (uint16_t j = 1; j < _cnt-i; j++)
   db36a:	ebc2 050e 	rsb	r5, r2, lr
   db36e:	42ab      	cmp	r3, r5
   db370:	da17      	bge.n	db3a2 <_ZN13RunningMedian4sortEv+0x50>
   db372:	eb00 0243 	add.w	r2, r0, r3, lsl #1
   db376:	3301      	adds	r3, #1
    {
      if (_ar[_p[j-1]] > _ar[_p[j]])
   db378:	f8b2 1580 	ldrh.w	r1, [r2, #1408]	; 0x580
   db37c:	f8b2 4582 	ldrh.w	r4, [r2, #1410]	; 0x582
   db380:	f101 0904 	add.w	r9, r1, #4
   db384:	f104 0804 	add.w	r8, r4, #4
   db388:	f830 9019 	ldrh.w	r9, [r0, r9, lsl #1]
   db38c:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
   db390:	45c1      	cmp	r9, r8
      {
        uint16_t t = _p[j-1];
        _p[j-1] = _p[j];
   db392:	bf82      	ittt	hi
   db394:	f8a2 4580 	strhhi.w	r4, [r2, #1408]	; 0x580
        _p[j] = t;
   db398:	f8a2 1582 	strhhi.w	r1, [r2, #1410]	; 0x582
        flag = false;
   db39c:	2700      	movhi	r7, #0
{
  // bubble sort with flag
  for (uint16_t i = 0; i < _cnt-1; i++)
  {
    bool flag = true;
    for (uint16_t j = 1; j < _cnt-i; j++)
   db39e:	b29b      	uxth	r3, r3
   db3a0:	e7e5      	b.n	db36e <_ZN13RunningMedian4sortEv+0x1c>
   db3a2:	3601      	adds	r6, #1
        _p[j-1] = _p[j];
        _p[j] = t;
        flag = false;
      }
    }
    if (flag) break;
   db3a4:	2f00      	cmp	r7, #0
   db3a6:	d0db      	beq.n	db360 <_ZN13RunningMedian4sortEv+0xe>
  }
  _sorted = true;
   db3a8:	2301      	movs	r3, #1
   db3aa:	7003      	strb	r3, [r0, #0]
   db3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db3b0 <_ZN13RunningMedian9getMedianEv>:
  if (_cnt < _size) _cnt++;
  _sorted = false;
}

uint16_t RunningMedian::getMedian()
{
   db3b0:	b510      	push	{r4, lr}
  if (_cnt == 0) return NAN;
   db3b2:	8883      	ldrh	r3, [r0, #4]
  if (_cnt < _size) _cnt++;
  _sorted = false;
}

uint16_t RunningMedian::getMedian()
{
   db3b4:	4604      	mov	r4, r0
  if (_cnt == 0) return NAN;
   db3b6:	b1f3      	cbz	r3, db3f6 <_ZN13RunningMedian9getMedianEv+0x46>

  if (_sorted == false) sort();
   db3b8:	7803      	ldrb	r3, [r0, #0]
   db3ba:	b90b      	cbnz	r3, db3c0 <_ZN13RunningMedian9getMedianEv+0x10>
   db3bc:	f7ff ffc9 	bl	db352 <_ZN13RunningMedian4sortEv>

  if (_cnt & 0x01) return _ar[_p[_cnt/2]];
   db3c0:	88a3      	ldrh	r3, [r4, #4]
   db3c2:	f013 0f01 	tst.w	r3, #1
   db3c6:	ea4f 0353 	mov.w	r3, r3, lsr #1
   db3ca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   db3ce:	d005      	beq.n	db3dc <_ZN13RunningMedian9getMedianEv+0x2c>
   db3d0:	f8b3 3582 	ldrh.w	r3, [r3, #1410]	; 0x582
   db3d4:	3304      	adds	r3, #4
   db3d6:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   db3da:	e00c      	b.n	db3f6 <_ZN13RunningMedian9getMedianEv+0x46>
  else return (_ar[_p[_cnt/2]] + _ar[_p[_cnt/2 - 1]]) / 2;
   db3dc:	f8b3 2582 	ldrh.w	r2, [r3, #1410]	; 0x582
   db3e0:	3204      	adds	r2, #4
   db3e2:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
   db3e6:	f8b3 2580 	ldrh.w	r2, [r3, #1408]	; 0x580
   db3ea:	3204      	adds	r2, #4
   db3ec:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
   db3f0:	440b      	add	r3, r1
   db3f2:	f3c3 034f 	ubfx	r3, r3, #1, #16
}
   db3f6:	4618      	mov	r0, r3
   db3f8:	bd10      	pop	{r4, pc}

000db3fa <_GLOBAL__sub_I__ZN13RunningMedianC2Et>:
   db3fa:	f000 b811 	b.w	db420 <HAL_Pin_Map>
	...

000db400 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   db400:	b508      	push	{r3, lr}
   db402:	4b02      	ldr	r3, [pc, #8]	; (db40c <netdb_freeaddrinfo+0xc>)
   db404:	681b      	ldr	r3, [r3, #0]
   db406:	689b      	ldr	r3, [r3, #8]
   db408:	9301      	str	r3, [sp, #4]
   db40a:	bd08      	pop	{r3, pc}
   db40c:	00030268 	.word	0x00030268

000db410 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   db410:	b508      	push	{r3, lr}
   db412:	4b02      	ldr	r3, [pc, #8]	; (db41c <netdb_getaddrinfo+0xc>)
   db414:	681b      	ldr	r3, [r3, #0]
   db416:	68db      	ldr	r3, [r3, #12]
   db418:	9301      	str	r3, [sp, #4]
   db41a:	bd08      	pop	{r3, pc}
   db41c:	00030268 	.word	0x00030268

000db420 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   db420:	b508      	push	{r3, lr}
   db422:	4b02      	ldr	r3, [pc, #8]	; (db42c <HAL_Pin_Map+0xc>)
   db424:	681b      	ldr	r3, [r3, #0]
   db426:	681b      	ldr	r3, [r3, #0]
   db428:	9301      	str	r3, [sp, #4]
   db42a:	bd08      	pop	{r3, pc}
   db42c:	0003022c 	.word	0x0003022c

000db430 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   db430:	b508      	push	{r3, lr}
   db432:	4b02      	ldr	r3, [pc, #8]	; (db43c <HAL_Validate_Pin_Function+0xc>)
   db434:	681b      	ldr	r3, [r3, #0]
   db436:	685b      	ldr	r3, [r3, #4]
   db438:	9301      	str	r3, [sp, #4]
   db43a:	bd08      	pop	{r3, pc}
   db43c:	0003022c 	.word	0x0003022c

000db440 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   db440:	b508      	push	{r3, lr}
   db442:	4b02      	ldr	r3, [pc, #8]	; (db44c <HAL_Pin_Mode+0xc>)
   db444:	681b      	ldr	r3, [r3, #0]
   db446:	689b      	ldr	r3, [r3, #8]
   db448:	9301      	str	r3, [sp, #4]
   db44a:	bd08      	pop	{r3, pc}
   db44c:	0003022c 	.word	0x0003022c

000db450 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   db450:	b508      	push	{r3, lr}
   db452:	4b02      	ldr	r3, [pc, #8]	; (db45c <HAL_Get_Pin_Mode+0xc>)
   db454:	681b      	ldr	r3, [r3, #0]
   db456:	68db      	ldr	r3, [r3, #12]
   db458:	9301      	str	r3, [sp, #4]
   db45a:	bd08      	pop	{r3, pc}
   db45c:	0003022c 	.word	0x0003022c

000db460 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   db460:	b508      	push	{r3, lr}
   db462:	4b02      	ldr	r3, [pc, #8]	; (db46c <HAL_GPIO_Write+0xc>)
   db464:	681b      	ldr	r3, [r3, #0]
   db466:	691b      	ldr	r3, [r3, #16]
   db468:	9301      	str	r3, [sp, #4]
   db46a:	bd08      	pop	{r3, pc}
   db46c:	0003022c 	.word	0x0003022c

000db470 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   db470:	b508      	push	{r3, lr}
   db472:	4b02      	ldr	r3, [pc, #8]	; (db47c <HAL_Interrupts_Attach+0xc>)
   db474:	681b      	ldr	r3, [r3, #0]
   db476:	699b      	ldr	r3, [r3, #24]
   db478:	9301      	str	r3, [sp, #4]
   db47a:	bd08      	pop	{r3, pc}
   db47c:	0003022c 	.word	0x0003022c

000db480 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   db480:	b508      	push	{r3, lr}
   db482:	4b02      	ldr	r3, [pc, #8]	; (db48c <HAL_Interrupts_Detach+0xc>)
   db484:	681b      	ldr	r3, [r3, #0]
   db486:	69db      	ldr	r3, [r3, #28]
   db488:	9301      	str	r3, [sp, #4]
   db48a:	bd08      	pop	{r3, pc}
   db48c:	0003022c 	.word	0x0003022c

000db490 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   db490:	b508      	push	{r3, lr}
   db492:	4b02      	ldr	r3, [pc, #8]	; (db49c <HAL_ADC_Read+0xc>)
   db494:	681b      	ldr	r3, [r3, #0]
   db496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   db498:	9301      	str	r3, [sp, #4]
   db49a:	bd08      	pop	{r3, pc}
   db49c:	0003022c 	.word	0x0003022c

000db4a0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   db4a0:	b508      	push	{r3, lr}
   db4a2:	4b02      	ldr	r3, [pc, #8]	; (db4ac <HAL_SPI_Begin+0xc>)
   db4a4:	681b      	ldr	r3, [r3, #0]
   db4a6:	681b      	ldr	r3, [r3, #0]
   db4a8:	9301      	str	r3, [sp, #4]
   db4aa:	bd08      	pop	{r3, pc}
   db4ac:	00030230 	.word	0x00030230

000db4b0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   db4b0:	b508      	push	{r3, lr}
   db4b2:	4b02      	ldr	r3, [pc, #8]	; (db4bc <HAL_SPI_Send_Receive_Data+0xc>)
   db4b4:	681b      	ldr	r3, [r3, #0]
   db4b6:	695b      	ldr	r3, [r3, #20]
   db4b8:	9301      	str	r3, [sp, #4]
   db4ba:	bd08      	pop	{r3, pc}
   db4bc:	00030230 	.word	0x00030230

000db4c0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   db4c0:	b508      	push	{r3, lr}
   db4c2:	4b02      	ldr	r3, [pc, #8]	; (db4cc <HAL_SPI_Init+0xc>)
   db4c4:	681b      	ldr	r3, [r3, #0]
   db4c6:	69db      	ldr	r3, [r3, #28]
   db4c8:	9301      	str	r3, [sp, #4]
   db4ca:	bd08      	pop	{r3, pc}
   db4cc:	00030230 	.word	0x00030230

000db4d0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   db4d0:	b508      	push	{r3, lr}
   db4d2:	4b02      	ldr	r3, [pc, #8]	; (db4dc <HAL_SPI_Is_Enabled+0xc>)
   db4d4:	681b      	ldr	r3, [r3, #0]
   db4d6:	6a1b      	ldr	r3, [r3, #32]
   db4d8:	9301      	str	r3, [sp, #4]
   db4da:	bd08      	pop	{r3, pc}
   db4dc:	00030230 	.word	0x00030230

000db4e0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   db4e0:	b508      	push	{r3, lr}
   db4e2:	4b02      	ldr	r3, [pc, #8]	; (db4ec <HAL_SPI_Info+0xc>)
   db4e4:	681b      	ldr	r3, [r3, #0]
   db4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   db4e8:	9301      	str	r3, [sp, #4]
   db4ea:	bd08      	pop	{r3, pc}
   db4ec:	00030230 	.word	0x00030230

000db4f0 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   db4f0:	b508      	push	{r3, lr}
   db4f2:	4b02      	ldr	r3, [pc, #8]	; (db4fc <HAL_SPI_DMA_Transfer+0xc>)
   db4f4:	681b      	ldr	r3, [r3, #0]
   db4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   db4f8:	9301      	str	r3, [sp, #4]
   db4fa:	bd08      	pop	{r3, pc}
   db4fc:	00030230 	.word	0x00030230

000db500 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   db500:	b508      	push	{r3, lr}
   db502:	4b02      	ldr	r3, [pc, #8]	; (db50c <HAL_SPI_DMA_Transfer_Status+0xc>)
   db504:	681b      	ldr	r3, [r3, #0]
   db506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   db508:	9301      	str	r3, [sp, #4]
   db50a:	bd08      	pop	{r3, pc}
   db50c:	00030230 	.word	0x00030230

000db510 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   db510:	b508      	push	{r3, lr}
   db512:	4b02      	ldr	r3, [pc, #8]	; (db51c <HAL_SPI_Set_Settings+0xc>)
   db514:	681b      	ldr	r3, [r3, #0]
   db516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   db518:	9301      	str	r3, [sp, #4]
   db51a:	bd08      	pop	{r3, pc}
   db51c:	00030230 	.word	0x00030230

000db520 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   db520:	b508      	push	{r3, lr}
   db522:	4b02      	ldr	r3, [pc, #8]	; (db52c <HAL_SPI_Acquire+0xc>)
   db524:	681b      	ldr	r3, [r3, #0]
   db526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   db528:	9301      	str	r3, [sp, #4]
   db52a:	bd08      	pop	{r3, pc}
   db52c:	00030230 	.word	0x00030230

000db530 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   db530:	b508      	push	{r3, lr}
   db532:	4b02      	ldr	r3, [pc, #8]	; (db53c <HAL_SPI_Release+0xc>)
   db534:	681b      	ldr	r3, [r3, #0]
   db536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   db538:	9301      	str	r3, [sp, #4]
   db53a:	bd08      	pop	{r3, pc}
   db53c:	00030230 	.word	0x00030230

000db540 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   db540:	b508      	push	{r3, lr}
   db542:	4b02      	ldr	r3, [pc, #8]	; (db54c <if_index_to_name+0xc>)
   db544:	681b      	ldr	r3, [r3, #0]
   db546:	695b      	ldr	r3, [r3, #20]
   db548:	9301      	str	r3, [sp, #4]
   db54a:	bd08      	pop	{r3, pc}
   db54c:	0003026c 	.word	0x0003026c

000db550 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   db550:	b508      	push	{r3, lr}
   db552:	4b02      	ldr	r3, [pc, #8]	; (db55c <HAL_RNG_GetRandomNumber+0xc>)
   db554:	681b      	ldr	r3, [r3, #0]
   db556:	685b      	ldr	r3, [r3, #4]
   db558:	9301      	str	r3, [sp, #4]
   db55a:	bd08      	pop	{r3, pc}
   db55c:	00030218 	.word	0x00030218

000db560 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   db560:	b508      	push	{r3, lr}
   db562:	4b02      	ldr	r3, [pc, #8]	; (db56c <HAL_Delay_Microseconds+0xc>)
   db564:	681b      	ldr	r3, [r3, #0]
   db566:	68db      	ldr	r3, [r3, #12]
   db568:	9301      	str	r3, [sp, #4]
   db56a:	bd08      	pop	{r3, pc}
   db56c:	00030218 	.word	0x00030218

000db570 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   db570:	b508      	push	{r3, lr}
   db572:	4b02      	ldr	r3, [pc, #8]	; (db57c <HAL_Timer_Get_Micro_Seconds+0xc>)
   db574:	681b      	ldr	r3, [r3, #0]
   db576:	691b      	ldr	r3, [r3, #16]
   db578:	9301      	str	r3, [sp, #4]
   db57a:	bd08      	pop	{r3, pc}
   db57c:	00030218 	.word	0x00030218

000db580 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   db580:	b508      	push	{r3, lr}
   db582:	4b02      	ldr	r3, [pc, #8]	; (db58c <HAL_Timer_Get_Milli_Seconds+0xc>)
   db584:	681b      	ldr	r3, [r3, #0]
   db586:	695b      	ldr	r3, [r3, #20]
   db588:	9301      	str	r3, [sp, #4]
   db58a:	bd08      	pop	{r3, pc}
   db58c:	00030218 	.word	0x00030218

000db590 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   db590:	b508      	push	{r3, lr}
   db592:	4b02      	ldr	r3, [pc, #8]	; (db59c <HAL_RTC_Get_UnixTime+0xc>)
   db594:	681b      	ldr	r3, [r3, #0]
   db596:	69db      	ldr	r3, [r3, #28]
   db598:	9301      	str	r3, [sp, #4]
   db59a:	bd08      	pop	{r3, pc}
   db59c:	00030218 	.word	0x00030218

000db5a0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   db5a0:	b508      	push	{r3, lr}
   db5a2:	4b02      	ldr	r3, [pc, #8]	; (db5ac <HAL_RTC_Time_Is_Valid+0xc>)
   db5a4:	681b      	ldr	r3, [r3, #0]
   db5a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   db5a8:	9301      	str	r3, [sp, #4]
   db5aa:	bd08      	pop	{r3, pc}
   db5ac:	00030218 	.word	0x00030218

000db5b0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   db5b0:	b508      	push	{r3, lr}
   db5b2:	4b02      	ldr	r3, [pc, #8]	; (db5bc <hal_timer_millis+0xc>)
   db5b4:	681b      	ldr	r3, [r3, #0]
   db5b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   db5b8:	9301      	str	r3, [sp, #4]
   db5ba:	bd08      	pop	{r3, pc}
   db5bc:	00030218 	.word	0x00030218

000db5c0 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   db5c0:	b508      	push	{r3, lr}
   db5c2:	4b02      	ldr	r3, [pc, #8]	; (db5cc <HAL_Core_System_Reset_Ex+0xc>)
   db5c4:	681b      	ldr	r3, [r3, #0]
   db5c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   db5c8:	9301      	str	r3, [sp, #4]
   db5ca:	bd08      	pop	{r3, pc}
   db5cc:	00030234 	.word	0x00030234

000db5d0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   db5d0:	b508      	push	{r3, lr}
   db5d2:	4b02      	ldr	r3, [pc, #8]	; (db5dc <os_thread_is_current+0xc>)
   db5d4:	681b      	ldr	r3, [r3, #0]
   db5d6:	689b      	ldr	r3, [r3, #8]
   db5d8:	9301      	str	r3, [sp, #4]
   db5da:	bd08      	pop	{r3, pc}
   db5dc:	00030248 	.word	0x00030248

000db5e0 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   db5e0:	b508      	push	{r3, lr}
   db5e2:	4b02      	ldr	r3, [pc, #8]	; (db5ec <os_thread_yield+0xc>)
   db5e4:	681b      	ldr	r3, [r3, #0]
   db5e6:	68db      	ldr	r3, [r3, #12]
   db5e8:	9301      	str	r3, [sp, #4]
   db5ea:	bd08      	pop	{r3, pc}
   db5ec:	00030248 	.word	0x00030248

000db5f0 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   db5f0:	b508      	push	{r3, lr}
   db5f2:	4b02      	ldr	r3, [pc, #8]	; (db5fc <os_thread_join+0xc>)
   db5f4:	681b      	ldr	r3, [r3, #0]
   db5f6:	691b      	ldr	r3, [r3, #16]
   db5f8:	9301      	str	r3, [sp, #4]
   db5fa:	bd08      	pop	{r3, pc}
   db5fc:	00030248 	.word	0x00030248

000db600 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   db600:	b508      	push	{r3, lr}
   db602:	4b02      	ldr	r3, [pc, #8]	; (db60c <os_thread_cleanup+0xc>)
   db604:	681b      	ldr	r3, [r3, #0]
   db606:	695b      	ldr	r3, [r3, #20]
   db608:	9301      	str	r3, [sp, #4]
   db60a:	bd08      	pop	{r3, pc}
   db60c:	00030248 	.word	0x00030248

000db610 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   db610:	b508      	push	{r3, lr}
   db612:	4b02      	ldr	r3, [pc, #8]	; (db61c <os_thread_scheduling+0xc>)
   db614:	681b      	ldr	r3, [r3, #0]
   db616:	69db      	ldr	r3, [r3, #28]
   db618:	9301      	str	r3, [sp, #4]
   db61a:	bd08      	pop	{r3, pc}
   db61c:	00030248 	.word	0x00030248

000db620 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   db620:	b508      	push	{r3, lr}
   db622:	4b02      	ldr	r3, [pc, #8]	; (db62c <os_timer_create+0xc>)
   db624:	681b      	ldr	r3, [r3, #0]
   db626:	6a1b      	ldr	r3, [r3, #32]
   db628:	9301      	str	r3, [sp, #4]
   db62a:	bd08      	pop	{r3, pc}
   db62c:	00030248 	.word	0x00030248

000db630 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   db630:	b508      	push	{r3, lr}
   db632:	4b02      	ldr	r3, [pc, #8]	; (db63c <os_timer_destroy+0xc>)
   db634:	681b      	ldr	r3, [r3, #0]
   db636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   db638:	9301      	str	r3, [sp, #4]
   db63a:	bd08      	pop	{r3, pc}
   db63c:	00030248 	.word	0x00030248

000db640 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   db640:	b508      	push	{r3, lr}
   db642:	4b02      	ldr	r3, [pc, #8]	; (db64c <os_timer_get_id+0xc>)
   db644:	681b      	ldr	r3, [r3, #0]
   db646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   db648:	9301      	str	r3, [sp, #4]
   db64a:	bd08      	pop	{r3, pc}
   db64c:	00030248 	.word	0x00030248

000db650 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   db650:	b508      	push	{r3, lr}
   db652:	4b02      	ldr	r3, [pc, #8]	; (db65c <os_timer_change+0xc>)
   db654:	681b      	ldr	r3, [r3, #0]
   db656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   db658:	9301      	str	r3, [sp, #4]
   db65a:	bd08      	pop	{r3, pc}
   db65c:	00030248 	.word	0x00030248

000db660 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   db660:	b508      	push	{r3, lr}
   db662:	4b02      	ldr	r3, [pc, #8]	; (db66c <os_mutex_recursive_create+0xc>)
   db664:	681b      	ldr	r3, [r3, #0]
   db666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   db668:	9301      	str	r3, [sp, #4]
   db66a:	bd08      	pop	{r3, pc}
   db66c:	00030248 	.word	0x00030248

000db670 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   db670:	b508      	push	{r3, lr}
   db672:	4b02      	ldr	r3, [pc, #8]	; (db67c <os_mutex_recursive_destroy+0xc>)
   db674:	681b      	ldr	r3, [r3, #0]
   db676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   db678:	9301      	str	r3, [sp, #4]
   db67a:	bd08      	pop	{r3, pc}
   db67c:	00030248 	.word	0x00030248

000db680 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   db680:	b508      	push	{r3, lr}
   db682:	4b02      	ldr	r3, [pc, #8]	; (db68c <os_timer_set_id+0xc>)
   db684:	681b      	ldr	r3, [r3, #0]
   db686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   db688:	9301      	str	r3, [sp, #4]
   db68a:	bd08      	pop	{r3, pc}
   db68c:	00030248 	.word	0x00030248

000db690 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   db690:	b508      	push	{r3, lr}
   db692:	4b02      	ldr	r3, [pc, #8]	; (db69c <inet_inet_ntop+0xc>)
   db694:	681b      	ldr	r3, [r3, #0]
   db696:	695b      	ldr	r3, [r3, #20]
   db698:	9301      	str	r3, [sp, #4]
   db69a:	bd08      	pop	{r3, pc}
   db69c:	00030264 	.word	0x00030264

000db6a0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   db6a0:	b508      	push	{r3, lr}
   db6a2:	4b02      	ldr	r3, [pc, #8]	; (db6ac <inet_htonl+0xc>)
   db6a4:	681b      	ldr	r3, [r3, #0]
   db6a6:	6a1b      	ldr	r3, [r3, #32]
   db6a8:	9301      	str	r3, [sp, #4]
   db6aa:	bd08      	pop	{r3, pc}
   db6ac:	00030264 	.word	0x00030264

000db6b0 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   db6b0:	b508      	push	{r3, lr}
   db6b2:	4b02      	ldr	r3, [pc, #8]	; (db6bc <inet_ntohs+0xc>)
   db6b4:	681b      	ldr	r3, [r3, #0]
   db6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   db6b8:	9301      	str	r3, [sp, #4]
   db6ba:	bd08      	pop	{r3, pc}
   db6bc:	00030264 	.word	0x00030264

000db6c0 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   db6c0:	b508      	push	{r3, lr}
   db6c2:	4b02      	ldr	r3, [pc, #8]	; (db6cc <inet_htons+0xc>)
   db6c4:	681b      	ldr	r3, [r3, #0]
   db6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   db6c8:	9301      	str	r3, [sp, #4]
   db6ca:	bd08      	pop	{r3, pc}
   db6cc:	00030264 	.word	0x00030264

000db6d0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   db6d0:	b508      	push	{r3, lr}
   db6d2:	4b02      	ldr	r3, [pc, #8]	; (db6dc <HAL_USART_Init+0xc>)
   db6d4:	681b      	ldr	r3, [r3, #0]
   db6d6:	681b      	ldr	r3, [r3, #0]
   db6d8:	9301      	str	r3, [sp, #4]
   db6da:	bd08      	pop	{r3, pc}
   db6dc:	0003023c 	.word	0x0003023c

000db6e0 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   db6e0:	b508      	push	{r3, lr}
   db6e2:	4b02      	ldr	r3, [pc, #8]	; (db6ec <HAL_USART_End+0xc>)
   db6e4:	681b      	ldr	r3, [r3, #0]
   db6e6:	689b      	ldr	r3, [r3, #8]
   db6e8:	9301      	str	r3, [sp, #4]
   db6ea:	bd08      	pop	{r3, pc}
   db6ec:	0003023c 	.word	0x0003023c

000db6f0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   db6f0:	b508      	push	{r3, lr}
   db6f2:	4b02      	ldr	r3, [pc, #8]	; (db6fc <HAL_USART_Write_Data+0xc>)
   db6f4:	681b      	ldr	r3, [r3, #0]
   db6f6:	68db      	ldr	r3, [r3, #12]
   db6f8:	9301      	str	r3, [sp, #4]
   db6fa:	bd08      	pop	{r3, pc}
   db6fc:	0003023c 	.word	0x0003023c

000db700 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   db700:	b508      	push	{r3, lr}
   db702:	4b02      	ldr	r3, [pc, #8]	; (db70c <HAL_USART_Available_Data+0xc>)
   db704:	681b      	ldr	r3, [r3, #0]
   db706:	691b      	ldr	r3, [r3, #16]
   db708:	9301      	str	r3, [sp, #4]
   db70a:	bd08      	pop	{r3, pc}
   db70c:	0003023c 	.word	0x0003023c

000db710 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   db710:	b508      	push	{r3, lr}
   db712:	4b02      	ldr	r3, [pc, #8]	; (db71c <HAL_USART_Read_Data+0xc>)
   db714:	681b      	ldr	r3, [r3, #0]
   db716:	695b      	ldr	r3, [r3, #20]
   db718:	9301      	str	r3, [sp, #4]
   db71a:	bd08      	pop	{r3, pc}
   db71c:	0003023c 	.word	0x0003023c

000db720 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   db720:	b508      	push	{r3, lr}
   db722:	4b02      	ldr	r3, [pc, #8]	; (db72c <HAL_USART_Peek_Data+0xc>)
   db724:	681b      	ldr	r3, [r3, #0]
   db726:	699b      	ldr	r3, [r3, #24]
   db728:	9301      	str	r3, [sp, #4]
   db72a:	bd08      	pop	{r3, pc}
   db72c:	0003023c 	.word	0x0003023c

000db730 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   db730:	b508      	push	{r3, lr}
   db732:	4b02      	ldr	r3, [pc, #8]	; (db73c <HAL_USART_Flush_Data+0xc>)
   db734:	681b      	ldr	r3, [r3, #0]
   db736:	69db      	ldr	r3, [r3, #28]
   db738:	9301      	str	r3, [sp, #4]
   db73a:	bd08      	pop	{r3, pc}
   db73c:	0003023c 	.word	0x0003023c

000db740 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   db740:	b508      	push	{r3, lr}
   db742:	4b02      	ldr	r3, [pc, #8]	; (db74c <HAL_USART_Is_Enabled+0xc>)
   db744:	681b      	ldr	r3, [r3, #0]
   db746:	6a1b      	ldr	r3, [r3, #32]
   db748:	9301      	str	r3, [sp, #4]
   db74a:	bd08      	pop	{r3, pc}
   db74c:	0003023c 	.word	0x0003023c

000db750 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   db750:	b508      	push	{r3, lr}
   db752:	4b02      	ldr	r3, [pc, #8]	; (db75c <HAL_USART_Available_Data_For_Write+0xc>)
   db754:	681b      	ldr	r3, [r3, #0]
   db756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   db758:	9301      	str	r3, [sp, #4]
   db75a:	bd08      	pop	{r3, pc}
   db75c:	0003023c 	.word	0x0003023c

000db760 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   db760:	b508      	push	{r3, lr}
   db762:	4b02      	ldr	r3, [pc, #8]	; (db76c <HAL_USART_BeginConfig+0xc>)
   db764:	681b      	ldr	r3, [r3, #0]
   db766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   db768:	9301      	str	r3, [sp, #4]
   db76a:	bd08      	pop	{r3, pc}
   db76c:	0003023c 	.word	0x0003023c

000db770 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   db770:	b508      	push	{r3, lr}
   db772:	4b02      	ldr	r3, [pc, #8]	; (db77c <HAL_I2C_Begin+0xc>)
   db774:	681b      	ldr	r3, [r3, #0]
   db776:	68db      	ldr	r3, [r3, #12]
   db778:	9301      	str	r3, [sp, #4]
   db77a:	bd08      	pop	{r3, pc}
   db77c:	00030228 	.word	0x00030228

000db780 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   db780:	b508      	push	{r3, lr}
   db782:	4b02      	ldr	r3, [pc, #8]	; (db78c <HAL_I2C_Begin_Transmission+0xc>)
   db784:	681b      	ldr	r3, [r3, #0]
   db786:	699b      	ldr	r3, [r3, #24]
   db788:	9301      	str	r3, [sp, #4]
   db78a:	bd08      	pop	{r3, pc}
   db78c:	00030228 	.word	0x00030228

000db790 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   db790:	b508      	push	{r3, lr}
   db792:	4b02      	ldr	r3, [pc, #8]	; (db79c <HAL_I2C_End_Transmission+0xc>)
   db794:	681b      	ldr	r3, [r3, #0]
   db796:	69db      	ldr	r3, [r3, #28]
   db798:	9301      	str	r3, [sp, #4]
   db79a:	bd08      	pop	{r3, pc}
   db79c:	00030228 	.word	0x00030228

000db7a0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   db7a0:	b508      	push	{r3, lr}
   db7a2:	4b02      	ldr	r3, [pc, #8]	; (db7ac <HAL_I2C_Write_Data+0xc>)
   db7a4:	681b      	ldr	r3, [r3, #0]
   db7a6:	6a1b      	ldr	r3, [r3, #32]
   db7a8:	9301      	str	r3, [sp, #4]
   db7aa:	bd08      	pop	{r3, pc}
   db7ac:	00030228 	.word	0x00030228

000db7b0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   db7b0:	b508      	push	{r3, lr}
   db7b2:	4b02      	ldr	r3, [pc, #8]	; (db7bc <HAL_I2C_Available_Data+0xc>)
   db7b4:	681b      	ldr	r3, [r3, #0]
   db7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   db7b8:	9301      	str	r3, [sp, #4]
   db7ba:	bd08      	pop	{r3, pc}
   db7bc:	00030228 	.word	0x00030228

000db7c0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   db7c0:	b508      	push	{r3, lr}
   db7c2:	4b02      	ldr	r3, [pc, #8]	; (db7cc <HAL_I2C_Read_Data+0xc>)
   db7c4:	681b      	ldr	r3, [r3, #0]
   db7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   db7c8:	9301      	str	r3, [sp, #4]
   db7ca:	bd08      	pop	{r3, pc}
   db7cc:	00030228 	.word	0x00030228

000db7d0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   db7d0:	b508      	push	{r3, lr}
   db7d2:	4b02      	ldr	r3, [pc, #8]	; (db7dc <HAL_I2C_Peek_Data+0xc>)
   db7d4:	681b      	ldr	r3, [r3, #0]
   db7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   db7d8:	9301      	str	r3, [sp, #4]
   db7da:	bd08      	pop	{r3, pc}
   db7dc:	00030228 	.word	0x00030228

000db7e0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   db7e0:	b508      	push	{r3, lr}
   db7e2:	4b02      	ldr	r3, [pc, #8]	; (db7ec <HAL_I2C_Flush_Data+0xc>)
   db7e4:	681b      	ldr	r3, [r3, #0]
   db7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   db7e8:	9301      	str	r3, [sp, #4]
   db7ea:	bd08      	pop	{r3, pc}
   db7ec:	00030228 	.word	0x00030228

000db7f0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   db7f0:	b508      	push	{r3, lr}
   db7f2:	4b02      	ldr	r3, [pc, #8]	; (db7fc <HAL_I2C_Is_Enabled+0xc>)
   db7f4:	681b      	ldr	r3, [r3, #0]
   db7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   db7f8:	9301      	str	r3, [sp, #4]
   db7fa:	bd08      	pop	{r3, pc}
   db7fc:	00030228 	.word	0x00030228

000db800 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   db800:	b508      	push	{r3, lr}
   db802:	4b02      	ldr	r3, [pc, #8]	; (db80c <HAL_I2C_Init+0xc>)
   db804:	681b      	ldr	r3, [r3, #0]
   db806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   db808:	9301      	str	r3, [sp, #4]
   db80a:	bd08      	pop	{r3, pc}
   db80c:	00030228 	.word	0x00030228

000db810 <HAL_I2C_Reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
   db810:	b508      	push	{r3, lr}
   db812:	4b02      	ldr	r3, [pc, #8]	; (db81c <HAL_I2C_Reset+0xc>)
   db814:	681b      	ldr	r3, [r3, #0]
   db816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   db818:	9301      	str	r3, [sp, #4]
   db81a:	bd08      	pop	{r3, pc}
   db81c:	00030228 	.word	0x00030228

000db820 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   db820:	b508      	push	{r3, lr}
   db822:	4b02      	ldr	r3, [pc, #8]	; (db82c <HAL_I2C_Acquire+0xc>)
   db824:	681b      	ldr	r3, [r3, #0]
   db826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   db828:	9301      	str	r3, [sp, #4]
   db82a:	bd08      	pop	{r3, pc}
   db82c:	00030228 	.word	0x00030228

000db830 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   db830:	b508      	push	{r3, lr}
   db832:	4b02      	ldr	r3, [pc, #8]	; (db83c <HAL_I2C_Release+0xc>)
   db834:	681b      	ldr	r3, [r3, #0]
   db836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   db838:	9301      	str	r3, [sp, #4]
   db83a:	bd08      	pop	{r3, pc}
   db83c:	00030228 	.word	0x00030228

000db840 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   db840:	b508      	push	{r3, lr}
   db842:	4b02      	ldr	r3, [pc, #8]	; (db84c <HAL_I2C_Request_Data_Ex+0xc>)
   db844:	681b      	ldr	r3, [r3, #0]
   db846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   db848:	9301      	str	r3, [sp, #4]
   db84a:	bd08      	pop	{r3, pc}
   db84c:	00030228 	.word	0x00030228

000db850 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   db850:	b508      	push	{r3, lr}
   db852:	4b02      	ldr	r3, [pc, #8]	; (db85c <sock_bind+0xc>)
   db854:	681b      	ldr	r3, [r3, #0]
   db856:	685b      	ldr	r3, [r3, #4]
   db858:	9301      	str	r3, [sp, #4]
   db85a:	bd08      	pop	{r3, pc}
   db85c:	00030238 	.word	0x00030238

000db860 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   db860:	b508      	push	{r3, lr}
   db862:	4b02      	ldr	r3, [pc, #8]	; (db86c <sock_setsockopt+0xc>)
   db864:	681b      	ldr	r3, [r3, #0]
   db866:	699b      	ldr	r3, [r3, #24]
   db868:	9301      	str	r3, [sp, #4]
   db86a:	bd08      	pop	{r3, pc}
   db86c:	00030238 	.word	0x00030238

000db870 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   db870:	b508      	push	{r3, lr}
   db872:	4b02      	ldr	r3, [pc, #8]	; (db87c <sock_close+0xc>)
   db874:	681b      	ldr	r3, [r3, #0]
   db876:	69db      	ldr	r3, [r3, #28]
   db878:	9301      	str	r3, [sp, #4]
   db87a:	bd08      	pop	{r3, pc}
   db87c:	00030238 	.word	0x00030238

000db880 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   db880:	b508      	push	{r3, lr}
   db882:	4b02      	ldr	r3, [pc, #8]	; (db88c <sock_connect+0xc>)
   db884:	681b      	ldr	r3, [r3, #0]
   db886:	6a1b      	ldr	r3, [r3, #32]
   db888:	9301      	str	r3, [sp, #4]
   db88a:	bd08      	pop	{r3, pc}
   db88c:	00030238 	.word	0x00030238

000db890 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   db890:	b508      	push	{r3, lr}
   db892:	4b02      	ldr	r3, [pc, #8]	; (db89c <sock_recv+0xc>)
   db894:	681b      	ldr	r3, [r3, #0]
   db896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   db898:	9301      	str	r3, [sp, #4]
   db89a:	bd08      	pop	{r3, pc}
   db89c:	00030238 	.word	0x00030238

000db8a0 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   db8a0:	b508      	push	{r3, lr}
   db8a2:	4b02      	ldr	r3, [pc, #8]	; (db8ac <sock_recvfrom+0xc>)
   db8a4:	681b      	ldr	r3, [r3, #0]
   db8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   db8a8:	9301      	str	r3, [sp, #4]
   db8aa:	bd08      	pop	{r3, pc}
   db8ac:	00030238 	.word	0x00030238

000db8b0 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   db8b0:	b508      	push	{r3, lr}
   db8b2:	4b02      	ldr	r3, [pc, #8]	; (db8bc <sock_send+0xc>)
   db8b4:	681b      	ldr	r3, [r3, #0]
   db8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   db8b8:	9301      	str	r3, [sp, #4]
   db8ba:	bd08      	pop	{r3, pc}
   db8bc:	00030238 	.word	0x00030238

000db8c0 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   db8c0:	b508      	push	{r3, lr}
   db8c2:	4b02      	ldr	r3, [pc, #8]	; (db8cc <sock_sendto+0xc>)
   db8c4:	681b      	ldr	r3, [r3, #0]
   db8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   db8c8:	9301      	str	r3, [sp, #4]
   db8ca:	bd08      	pop	{r3, pc}
   db8cc:	00030238 	.word	0x00030238

000db8d0 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   db8d0:	b508      	push	{r3, lr}
   db8d2:	4b02      	ldr	r3, [pc, #8]	; (db8dc <sock_socket+0xc>)
   db8d4:	681b      	ldr	r3, [r3, #0]
   db8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   db8d8:	9301      	str	r3, [sp, #4]
   db8da:	bd08      	pop	{r3, pc}
   db8dc:	00030238 	.word	0x00030238

000db8e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   db8e0:	b508      	push	{r3, lr}
   db8e2:	4b02      	ldr	r3, [pc, #8]	; (db8ec <HAL_USB_USART_Init+0xc>)
   db8e4:	681b      	ldr	r3, [r3, #0]
   db8e6:	681b      	ldr	r3, [r3, #0]
   db8e8:	9301      	str	r3, [sp, #4]
   db8ea:	bd08      	pop	{r3, pc}
   db8ec:	0003024c 	.word	0x0003024c

000db8f0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   db8f0:	b508      	push	{r3, lr}
   db8f2:	4b02      	ldr	r3, [pc, #8]	; (db8fc <HAL_USB_USART_Begin+0xc>)
   db8f4:	681b      	ldr	r3, [r3, #0]
   db8f6:	685b      	ldr	r3, [r3, #4]
   db8f8:	9301      	str	r3, [sp, #4]
   db8fa:	bd08      	pop	{r3, pc}
   db8fc:	0003024c 	.word	0x0003024c

000db900 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   db900:	b508      	push	{r3, lr}
   db902:	4b02      	ldr	r3, [pc, #8]	; (db90c <HAL_USB_USART_Available_Data+0xc>)
   db904:	681b      	ldr	r3, [r3, #0]
   db906:	691b      	ldr	r3, [r3, #16]
   db908:	9301      	str	r3, [sp, #4]
   db90a:	bd08      	pop	{r3, pc}
   db90c:	0003024c 	.word	0x0003024c

000db910 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   db910:	b508      	push	{r3, lr}
   db912:	4b02      	ldr	r3, [pc, #8]	; (db91c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   db914:	681b      	ldr	r3, [r3, #0]
   db916:	695b      	ldr	r3, [r3, #20]
   db918:	9301      	str	r3, [sp, #4]
   db91a:	bd08      	pop	{r3, pc}
   db91c:	0003024c 	.word	0x0003024c

000db920 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   db920:	b508      	push	{r3, lr}
   db922:	4b02      	ldr	r3, [pc, #8]	; (db92c <HAL_USB_USART_Receive_Data+0xc>)
   db924:	681b      	ldr	r3, [r3, #0]
   db926:	699b      	ldr	r3, [r3, #24]
   db928:	9301      	str	r3, [sp, #4]
   db92a:	bd08      	pop	{r3, pc}
   db92c:	0003024c 	.word	0x0003024c

000db930 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   db930:	b508      	push	{r3, lr}
   db932:	4b02      	ldr	r3, [pc, #8]	; (db93c <HAL_USB_USART_Send_Data+0xc>)
   db934:	681b      	ldr	r3, [r3, #0]
   db936:	69db      	ldr	r3, [r3, #28]
   db938:	9301      	str	r3, [sp, #4]
   db93a:	bd08      	pop	{r3, pc}
   db93c:	0003024c 	.word	0x0003024c

000db940 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   db940:	b508      	push	{r3, lr}
   db942:	4b02      	ldr	r3, [pc, #8]	; (db94c <HAL_USB_USART_Flush_Data+0xc>)
   db944:	681b      	ldr	r3, [r3, #0]
   db946:	6a1b      	ldr	r3, [r3, #32]
   db948:	9301      	str	r3, [sp, #4]
   db94a:	bd08      	pop	{r3, pc}
   db94c:	0003024c 	.word	0x0003024c

000db950 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   db950:	b508      	push	{r3, lr}
   db952:	4b02      	ldr	r3, [pc, #8]	; (db95c <panic_+0xc>)
   db954:	681b      	ldr	r3, [r3, #0]
   db956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   db958:	9301      	str	r3, [sp, #4]
   db95a:	bd08      	pop	{r3, pc}
   db95c:	00030260 	.word	0x00030260

000db960 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   db960:	b508      	push	{r3, lr}
   db962:	4b02      	ldr	r3, [pc, #8]	; (db96c <log_message+0xc>)
   db964:	681b      	ldr	r3, [r3, #0]
   db966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   db968:	9301      	str	r3, [sp, #4]
   db96a:	bd08      	pop	{r3, pc}
   db96c:	00030260 	.word	0x00030260

000db970 <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   db970:	b508      	push	{r3, lr}
   db972:	4b03      	ldr	r3, [pc, #12]	; (db980 <led_set_status_active+0x10>)
   db974:	681b      	ldr	r3, [r3, #0]
   db976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   db97a:	9301      	str	r3, [sp, #4]
   db97c:	bd08      	pop	{r3, pc}
   db97e:	0000      	.short	0x0000
   db980:	00030260 	.word	0x00030260

000db984 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   db984:	b508      	push	{r3, lr}
   db986:	4b02      	ldr	r3, [pc, #8]	; (db990 <system_mode+0xc>)
   db988:	681b      	ldr	r3, [r3, #0]
   db98a:	681b      	ldr	r3, [r3, #0]
   db98c:	9301      	str	r3, [sp, #4]
   db98e:	bd08      	pop	{r3, pc}
   db990:	00030220 	.word	0x00030220

000db994 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   db994:	b508      	push	{r3, lr}
   db996:	4b02      	ldr	r3, [pc, #8]	; (db9a0 <set_system_mode+0xc>)
   db998:	681b      	ldr	r3, [r3, #0]
   db99a:	685b      	ldr	r3, [r3, #4]
   db99c:	9301      	str	r3, [sp, #4]
   db99e:	bd08      	pop	{r3, pc}
   db9a0:	00030220 	.word	0x00030220

000db9a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   db9a4:	b508      	push	{r3, lr}
   db9a6:	4b02      	ldr	r3, [pc, #8]	; (db9b0 <system_delay_ms+0xc>)
   db9a8:	681b      	ldr	r3, [r3, #0]
   db9aa:	695b      	ldr	r3, [r3, #20]
   db9ac:	9301      	str	r3, [sp, #4]
   db9ae:	bd08      	pop	{r3, pc}
   db9b0:	00030220 	.word	0x00030220

000db9b4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   db9b4:	b508      	push	{r3, lr}
   db9b6:	4b02      	ldr	r3, [pc, #8]	; (db9c0 <system_thread_set_state+0xc>)
   db9b8:	681b      	ldr	r3, [r3, #0]
   db9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   db9bc:	9301      	str	r3, [sp, #4]
   db9be:	bd08      	pop	{r3, pc}
   db9c0:	00030220 	.word	0x00030220

000db9c4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   db9c4:	b508      	push	{r3, lr}
   db9c6:	4b02      	ldr	r3, [pc, #8]	; (db9d0 <application_thread_current+0xc>)
   db9c8:	681b      	ldr	r3, [r3, #0]
   db9ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   db9cc:	9301      	str	r3, [sp, #4]
   db9ce:	bd08      	pop	{r3, pc}
   db9d0:	00030220 	.word	0x00030220

000db9d4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   db9d4:	b508      	push	{r3, lr}
   db9d6:	4b02      	ldr	r3, [pc, #8]	; (db9e0 <application_thread_invoke+0xc>)
   db9d8:	681b      	ldr	r3, [r3, #0]
   db9da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   db9dc:	9301      	str	r3, [sp, #4]
   db9de:	bd08      	pop	{r3, pc}
   db9e0:	00030220 	.word	0x00030220

000db9e4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   db9e4:	b508      	push	{r3, lr}
   db9e6:	4b02      	ldr	r3, [pc, #8]	; (db9f0 <system_thread_get_state+0xc>)
   db9e8:	681b      	ldr	r3, [r3, #0]
   db9ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   db9ec:	9301      	str	r3, [sp, #4]
   db9ee:	bd08      	pop	{r3, pc}
   db9f0:	00030220 	.word	0x00030220

000db9f4 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   db9f4:	b508      	push	{r3, lr}
   db9f6:	4b02      	ldr	r3, [pc, #8]	; (dba00 <led_pattern_period+0xc>)
   db9f8:	681b      	ldr	r3, [r3, #0]
   db9fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   db9fc:	9301      	str	r3, [sp, #4]
   db9fe:	bd08      	pop	{r3, pc}
   dba00:	00030220 	.word	0x00030220

000dba04 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   dba04:	b508      	push	{r3, lr}
   dba06:	4b03      	ldr	r3, [pc, #12]	; (dba14 <system_ctrl_set_app_request_handler+0x10>)
   dba08:	681b      	ldr	r3, [r3, #0]
   dba0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   dba0e:	9301      	str	r3, [sp, #4]
   dba10:	bd08      	pop	{r3, pc}
   dba12:	0000      	.short	0x0000
   dba14:	00030220 	.word	0x00030220

000dba18 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   dba18:	b508      	push	{r3, lr}
   dba1a:	4b03      	ldr	r3, [pc, #12]	; (dba28 <system_ctrl_set_result+0x10>)
   dba1c:	681b      	ldr	r3, [r3, #0]
   dba1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   dba22:	9301      	str	r3, [sp, #4]
   dba24:	bd08      	pop	{r3, pc}
   dba26:	0000      	.short	0x0000
   dba28:	00030220 	.word	0x00030220

000dba2c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   dba2c:	b508      	push	{r3, lr}
   dba2e:	4b02      	ldr	r3, [pc, #8]	; (dba38 <network_connect+0xc>)
   dba30:	681b      	ldr	r3, [r3, #0]
   dba32:	685b      	ldr	r3, [r3, #4]
   dba34:	9301      	str	r3, [sp, #4]
   dba36:	bd08      	pop	{r3, pc}
   dba38:	00030240 	.word	0x00030240

000dba3c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   dba3c:	b508      	push	{r3, lr}
   dba3e:	4b02      	ldr	r3, [pc, #8]	; (dba48 <network_connecting+0xc>)
   dba40:	681b      	ldr	r3, [r3, #0]
   dba42:	689b      	ldr	r3, [r3, #8]
   dba44:	9301      	str	r3, [sp, #4]
   dba46:	bd08      	pop	{r3, pc}
   dba48:	00030240 	.word	0x00030240

000dba4c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   dba4c:	b508      	push	{r3, lr}
   dba4e:	4b02      	ldr	r3, [pc, #8]	; (dba58 <network_disconnect+0xc>)
   dba50:	681b      	ldr	r3, [r3, #0]
   dba52:	68db      	ldr	r3, [r3, #12]
   dba54:	9301      	str	r3, [sp, #4]
   dba56:	bd08      	pop	{r3, pc}
   dba58:	00030240 	.word	0x00030240

000dba5c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   dba5c:	b508      	push	{r3, lr}
   dba5e:	4b02      	ldr	r3, [pc, #8]	; (dba68 <network_ready+0xc>)
   dba60:	681b      	ldr	r3, [r3, #0]
   dba62:	691b      	ldr	r3, [r3, #16]
   dba64:	9301      	str	r3, [sp, #4]
   dba66:	bd08      	pop	{r3, pc}
   dba68:	00030240 	.word	0x00030240

000dba6c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   dba6c:	b508      	push	{r3, lr}
   dba6e:	4b02      	ldr	r3, [pc, #8]	; (dba78 <network_on+0xc>)
   dba70:	681b      	ldr	r3, [r3, #0]
   dba72:	695b      	ldr	r3, [r3, #20]
   dba74:	9301      	str	r3, [sp, #4]
   dba76:	bd08      	pop	{r3, pc}
   dba78:	00030240 	.word	0x00030240

000dba7c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   dba7c:	b508      	push	{r3, lr}
   dba7e:	4b02      	ldr	r3, [pc, #8]	; (dba88 <network_off+0xc>)
   dba80:	681b      	ldr	r3, [r3, #0]
   dba82:	699b      	ldr	r3, [r3, #24]
   dba84:	9301      	str	r3, [sp, #4]
   dba86:	bd08      	pop	{r3, pc}
   dba88:	00030240 	.word	0x00030240

000dba8c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   dba8c:	b508      	push	{r3, lr}
   dba8e:	4b02      	ldr	r3, [pc, #8]	; (dba98 <network_listen+0xc>)
   dba90:	681b      	ldr	r3, [r3, #0]
   dba92:	69db      	ldr	r3, [r3, #28]
   dba94:	9301      	str	r3, [sp, #4]
   dba96:	bd08      	pop	{r3, pc}
   dba98:	00030240 	.word	0x00030240

000dba9c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   dba9c:	b508      	push	{r3, lr}
   dba9e:	4b02      	ldr	r3, [pc, #8]	; (dbaa8 <network_listening+0xc>)
   dbaa0:	681b      	ldr	r3, [r3, #0]
   dbaa2:	6a1b      	ldr	r3, [r3, #32]
   dbaa4:	9301      	str	r3, [sp, #4]
   dbaa6:	bd08      	pop	{r3, pc}
   dbaa8:	00030240 	.word	0x00030240

000dbaac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   dbaac:	b508      	push	{r3, lr}
   dbaae:	4b02      	ldr	r3, [pc, #8]	; (dbab8 <network_set_listen_timeout+0xc>)
   dbab0:	681b      	ldr	r3, [r3, #0]
   dbab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dbab4:	9301      	str	r3, [sp, #4]
   dbab6:	bd08      	pop	{r3, pc}
   dbab8:	00030240 	.word	0x00030240

000dbabc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   dbabc:	b508      	push	{r3, lr}
   dbabe:	4b02      	ldr	r3, [pc, #8]	; (dbac8 <network_get_listen_timeout+0xc>)
   dbac0:	681b      	ldr	r3, [r3, #0]
   dbac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dbac4:	9301      	str	r3, [sp, #4]
   dbac6:	bd08      	pop	{r3, pc}
   dbac8:	00030240 	.word	0x00030240

000dbacc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   dbacc:	b508      	push	{r3, lr}
   dbace:	4b02      	ldr	r3, [pc, #8]	; (dbad8 <spark_variable+0xc>)
   dbad0:	681b      	ldr	r3, [r3, #0]
   dbad2:	681b      	ldr	r3, [r3, #0]
   dbad4:	9301      	str	r3, [sp, #4]
   dbad6:	bd08      	pop	{r3, pc}
   dbad8:	00030244 	.word	0x00030244

000dbadc <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   dbadc:	b508      	push	{r3, lr}
   dbade:	4b02      	ldr	r3, [pc, #8]	; (dbae8 <spark_process+0xc>)
   dbae0:	681b      	ldr	r3, [r3, #0]
   dbae2:	689b      	ldr	r3, [r3, #8]
   dbae4:	9301      	str	r3, [sp, #4]
   dbae6:	bd08      	pop	{r3, pc}
   dbae8:	00030244 	.word	0x00030244

000dbaec <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   dbaec:	b508      	push	{r3, lr}
   dbaee:	4b02      	ldr	r3, [pc, #8]	; (dbaf8 <spark_cloud_flag_connect+0xc>)
   dbaf0:	681b      	ldr	r3, [r3, #0]
   dbaf2:	68db      	ldr	r3, [r3, #12]
   dbaf4:	9301      	str	r3, [sp, #4]
   dbaf6:	bd08      	pop	{r3, pc}
   dbaf8:	00030244 	.word	0x00030244

000dbafc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   dbafc:	b508      	push	{r3, lr}
   dbafe:	4b02      	ldr	r3, [pc, #8]	; (dbb08 <spark_cloud_flag_connected+0xc>)
   dbb00:	681b      	ldr	r3, [r3, #0]
   dbb02:	695b      	ldr	r3, [r3, #20]
   dbb04:	9301      	str	r3, [sp, #4]
   dbb06:	bd08      	pop	{r3, pc}
   dbb08:	00030244 	.word	0x00030244

000dbb0c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   dbb0c:	b508      	push	{r3, lr}
   dbb0e:	4b02      	ldr	r3, [pc, #8]	; (dbb18 <spark_deviceID+0xc>)
   dbb10:	681b      	ldr	r3, [r3, #0]
   dbb12:	69db      	ldr	r3, [r3, #28]
   dbb14:	9301      	str	r3, [sp, #4]
   dbb16:	bd08      	pop	{r3, pc}
   dbb18:	00030244 	.word	0x00030244

000dbb1c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   dbb1c:	b508      	push	{r3, lr}
   dbb1e:	4b02      	ldr	r3, [pc, #8]	; (dbb28 <spark_send_event+0xc>)
   dbb20:	681b      	ldr	r3, [r3, #0]
   dbb22:	6a1b      	ldr	r3, [r3, #32]
   dbb24:	9301      	str	r3, [sp, #4]
   dbb26:	bd08      	pop	{r3, pc}
   dbb28:	00030244 	.word	0x00030244

000dbb2c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   dbb2c:	b508      	push	{r3, lr}
   dbb2e:	4b02      	ldr	r3, [pc, #8]	; (dbb38 <spark_sync_time_pending+0xc>)
   dbb30:	681b      	ldr	r3, [r3, #0]
   dbb32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dbb34:	9301      	str	r3, [sp, #4]
   dbb36:	bd08      	pop	{r3, pc}
   dbb38:	00030244 	.word	0x00030244

000dbb3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   dbb3c:	b508      	push	{r3, lr}
   dbb3e:	4b02      	ldr	r3, [pc, #8]	; (dbb48 <spark_set_random_seed_from_cloud_handler+0xc>)
   dbb40:	681b      	ldr	r3, [r3, #0]
   dbb42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dbb44:	9301      	str	r3, [sp, #4]
   dbb46:	bd08      	pop	{r3, pc}
   dbb48:	00030244 	.word	0x00030244

000dbb4c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   dbb4c:	b508      	push	{r3, lr}
   dbb4e:	4b02      	ldr	r3, [pc, #8]	; (dbb58 <malloc+0xc>)
   dbb50:	681b      	ldr	r3, [r3, #0]
   dbb52:	681b      	ldr	r3, [r3, #0]
   dbb54:	9301      	str	r3, [sp, #4]
   dbb56:	bd08      	pop	{r3, pc}
   dbb58:	0003021c 	.word	0x0003021c

000dbb5c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   dbb5c:	b508      	push	{r3, lr}
   dbb5e:	4b02      	ldr	r3, [pc, #8]	; (dbb68 <free+0xc>)
   dbb60:	681b      	ldr	r3, [r3, #0]
   dbb62:	685b      	ldr	r3, [r3, #4]
   dbb64:	9301      	str	r3, [sp, #4]
   dbb66:	bd08      	pop	{r3, pc}
   dbb68:	0003021c 	.word	0x0003021c

000dbb6c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   dbb6c:	b508      	push	{r3, lr}
   dbb6e:	4b02      	ldr	r3, [pc, #8]	; (dbb78 <realloc+0xc>)
   dbb70:	681b      	ldr	r3, [r3, #0]
   dbb72:	689b      	ldr	r3, [r3, #8]
   dbb74:	9301      	str	r3, [sp, #4]
   dbb76:	bd08      	pop	{r3, pc}
   dbb78:	0003021c 	.word	0x0003021c

000dbb7c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   dbb7c:	b508      	push	{r3, lr}
   dbb7e:	4b02      	ldr	r3, [pc, #8]	; (dbb88 <sprintf+0xc>)
   dbb80:	681b      	ldr	r3, [r3, #0]
   dbb82:	68db      	ldr	r3, [r3, #12]
   dbb84:	9301      	str	r3, [sp, #4]
   dbb86:	bd08      	pop	{r3, pc}
   dbb88:	0003021c 	.word	0x0003021c

000dbb8c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   dbb8c:	b508      	push	{r3, lr}
   dbb8e:	4b02      	ldr	r3, [pc, #8]	; (dbb98 <siprintf+0xc>)
   dbb90:	681b      	ldr	r3, [r3, #0]
   dbb92:	691b      	ldr	r3, [r3, #16]
   dbb94:	9301      	str	r3, [sp, #4]
   dbb96:	bd08      	pop	{r3, pc}
   dbb98:	0003021c 	.word	0x0003021c

000dbb9c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   dbb9c:	b508      	push	{r3, lr}
   dbb9e:	4b02      	ldr	r3, [pc, #8]	; (dbba8 <siscanf+0xc>)
   dbba0:	681b      	ldr	r3, [r3, #0]
   dbba2:	699b      	ldr	r3, [r3, #24]
   dbba4:	9301      	str	r3, [sp, #4]
   dbba6:	bd08      	pop	{r3, pc}
   dbba8:	0003021c 	.word	0x0003021c

000dbbac <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   dbbac:	b508      	push	{r3, lr}
   dbbae:	4b02      	ldr	r3, [pc, #8]	; (dbbb8 <snprintf+0xc>)
   dbbb0:	681b      	ldr	r3, [r3, #0]
   dbbb2:	69db      	ldr	r3, [r3, #28]
   dbbb4:	9301      	str	r3, [sp, #4]
   dbbb6:	bd08      	pop	{r3, pc}
   dbbb8:	0003021c 	.word	0x0003021c

000dbbbc <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   dbbbc:	b508      	push	{r3, lr}
   dbbbe:	4b02      	ldr	r3, [pc, #8]	; (dbbc8 <sniprintf+0xc>)
   dbbc0:	681b      	ldr	r3, [r3, #0]
   dbbc2:	6a1b      	ldr	r3, [r3, #32]
   dbbc4:	9301      	str	r3, [sp, #4]
   dbbc6:	bd08      	pop	{r3, pc}
   dbbc8:	0003021c 	.word	0x0003021c

000dbbcc <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   dbbcc:	b508      	push	{r3, lr}
   dbbce:	4b02      	ldr	r3, [pc, #8]	; (dbbd8 <vsnprintf+0xc>)
   dbbd0:	681b      	ldr	r3, [r3, #0]
   dbbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dbbd4:	9301      	str	r3, [sp, #4]
   dbbd6:	bd08      	pop	{r3, pc}
   dbbd8:	0003021c 	.word	0x0003021c

000dbbdc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   dbbdc:	b508      	push	{r3, lr}
   dbbde:	4b02      	ldr	r3, [pc, #8]	; (dbbe8 <abort+0xc>)
   dbbe0:	681b      	ldr	r3, [r3, #0]
   dbbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dbbe4:	9301      	str	r3, [sp, #4]
   dbbe6:	bd08      	pop	{r3, pc}
   dbbe8:	0003021c 	.word	0x0003021c

000dbbec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   dbbec:	b508      	push	{r3, lr}
   dbbee:	4b02      	ldr	r3, [pc, #8]	; (dbbf8 <_malloc_r+0xc>)
   dbbf0:	681b      	ldr	r3, [r3, #0]
   dbbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dbbf4:	9301      	str	r3, [sp, #4]
   dbbf6:	bd08      	pop	{r3, pc}
   dbbf8:	0003021c 	.word	0x0003021c

000dbbfc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   dbbfc:	b508      	push	{r3, lr}
   dbbfe:	4b02      	ldr	r3, [pc, #8]	; (dbc08 <__errno+0xc>)
   dbc00:	681b      	ldr	r3, [r3, #0]
   dbc02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dbc04:	9301      	str	r3, [sp, #4]
   dbc06:	bd08      	pop	{r3, pc}
   dbc08:	0003021c 	.word	0x0003021c

000dbc0c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dbc0c:	2200      	movs	r2, #0
   dbc0e:	4611      	mov	r1, r2
   dbc10:	6840      	ldr	r0, [r0, #4]
   dbc12:	f7ff bf43 	b.w	dba9c <network_listening>

000dbc16 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dbc16:	2200      	movs	r2, #0
   dbc18:	4611      	mov	r1, r2
   dbc1a:	6840      	ldr	r0, [r0, #4]
   dbc1c:	f7ff bf4e 	b.w	dbabc <network_get_listen_timeout>

000dbc20 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dbc20:	2200      	movs	r2, #0
   dbc22:	6840      	ldr	r0, [r0, #4]
   dbc24:	f7ff bf42 	b.w	dbaac <network_set_listen_timeout>

000dbc28 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dbc28:	2200      	movs	r2, #0
   dbc2a:	f081 0101 	eor.w	r1, r1, #1
   dbc2e:	6840      	ldr	r0, [r0, #4]
   dbc30:	f7ff bf2c 	b.w	dba8c <network_listen>

000dbc34 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   dbc34:	2300      	movs	r3, #0
   dbc36:	461a      	mov	r2, r3
   dbc38:	4619      	mov	r1, r3
   dbc3a:	6840      	ldr	r0, [r0, #4]
   dbc3c:	f7ff bf1e 	b.w	dba7c <network_off>

000dbc40 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   dbc40:	2300      	movs	r3, #0
   dbc42:	461a      	mov	r2, r3
   dbc44:	4619      	mov	r1, r3
   dbc46:	6840      	ldr	r0, [r0, #4]
   dbc48:	f7ff bf10 	b.w	dba6c <network_on>

000dbc4c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dbc4c:	2200      	movs	r2, #0
   dbc4e:	4611      	mov	r1, r2
   dbc50:	6840      	ldr	r0, [r0, #4]
   dbc52:	f7ff bf03 	b.w	dba5c <network_ready>

000dbc56 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dbc56:	2200      	movs	r2, #0
   dbc58:	4611      	mov	r1, r2
   dbc5a:	6840      	ldr	r0, [r0, #4]
   dbc5c:	f7ff beee 	b.w	dba3c <network_connecting>

000dbc60 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dbc60:	2200      	movs	r2, #0
   dbc62:	2102      	movs	r1, #2
   dbc64:	6840      	ldr	r0, [r0, #4]
   dbc66:	f7ff bef1 	b.w	dba4c <network_disconnect>

000dbc6a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dbc6a:	2300      	movs	r3, #0
   dbc6c:	461a      	mov	r2, r3
   dbc6e:	6840      	ldr	r0, [r0, #4]
   dbc70:	f7ff bedc 	b.w	dba2c <network_connect>

000dbc74 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   dbc74:	4b02      	ldr	r3, [pc, #8]	; (dbc80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   dbc76:	2203      	movs	r2, #3
   dbc78:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   dbc7a:	4a02      	ldr	r2, [pc, #8]	; (dbc84 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   dbc7c:	601a      	str	r2, [r3, #0]
   dbc7e:	4770      	bx	lr
   dbc80:	2003e1c8 	.word	0x2003e1c8
   dbc84:	000e56a8 	.word	0x000e56a8

000dbc88 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   dbc88:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   dbc8a:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   dbc8c:	6892      	ldr	r2, [r2, #8]
   dbc8e:	4601      	mov	r1, r0
   dbc90:	4618      	mov	r0, r3
   dbc92:	4710      	bx	r2

000dbc94 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   dbc94:	b570      	push	{r4, r5, r6, lr}
   dbc96:	4c0e      	ldr	r4, [pc, #56]	; (dbcd0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   dbc98:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   dbc9a:	241c      	movs	r4, #28
   dbc9c:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   dbc9e:	f89d 4014 	ldrb.w	r4, [sp, #20]
   dbca2:	f89d 6010 	ldrb.w	r6, [sp, #16]
   dbca6:	f004 0403 	and.w	r4, r4, #3
   dbcaa:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   dbcae:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   dbcb0:	b2e4      	uxtb	r4, r4
   dbcb2:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   dbcb4:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   dbcb6:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   dbcb8:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   dbcba:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   dbcbc:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   dbcbe:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   dbcc0:	bf08      	it	eq
   dbcc2:	4b04      	ldreq	r3, [pc, #16]	; (dbcd4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   dbcc4:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   dbcc6:	bf06      	itte	eq
   dbcc8:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   dbcca:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   dbccc:	8303      	strhne	r3, [r0, #24]
    }
}
   dbcce:	bd70      	pop	{r4, r5, r6, pc}
   dbcd0:	000e4910 	.word	0x000e4910
   dbcd4:	000dbc89 	.word	0x000dbc89

000dbcd8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   dbcd8:	2100      	movs	r1, #0
   dbcda:	f7ff bc21 	b.w	db520 <HAL_SPI_Acquire>

000dbcde <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   dbcde:	2100      	movs	r1, #0
   dbce0:	f7ff bc26 	b.w	db530 <HAL_SPI_Release>

000dbce4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   dbce4:	b510      	push	{r4, lr}
   dbce6:	4604      	mov	r4, r0
{
    _spi = spi;
   dbce8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   dbcea:	4608      	mov	r0, r1
   dbcec:	f7ff fbe8 	bl	db4c0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   dbcf0:	2300      	movs	r3, #0
   dbcf2:	6063      	str	r3, [r4, #4]
}
   dbcf4:	4620      	mov	r0, r4
   dbcf6:	bd10      	pop	{r4, pc}

000dbcf8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   dbcf8:	b510      	push	{r4, lr}
   dbcfa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   dbcfc:	7800      	ldrb	r0, [r0, #0]
   dbcfe:	f7ff ffeb 	bl	dbcd8 <_ZN8SPIClass4lockEv.isra.0>
   dbd02:	b948      	cbnz	r0, dbd18 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   dbd04:	7820      	ldrb	r0, [r4, #0]
   dbd06:	f64f 71ff 	movw	r1, #65535	; 0xffff
   dbd0a:	f7ff fbc9 	bl	db4a0 <HAL_SPI_Begin>
        unlock();
   dbd0e:	7820      	ldrb	r0, [r4, #0]
    }
}
   dbd10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   dbd14:	f7ff bfe3 	b.w	dbcde <_ZN8SPIClass6unlockEv.isra.1>
   dbd18:	bd10      	pop	{r4, pc}

000dbd1a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   dbd1a:	7800      	ldrb	r0, [r0, #0]
   dbd1c:	f7ff bfdf 	b.w	dbcde <_ZN8SPIClass6unlockEv.isra.1>

000dbd20 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   dbd20:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   dbd22:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   dbd24:	6018      	str	r0, [r3, #0]
   dbd26:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   dbd28:	6818      	ldr	r0, [r3, #0]
   dbd2a:	4288      	cmp	r0, r1
   dbd2c:	b2e5      	uxtb	r5, r4
   dbd2e:	d906      	bls.n	dbd3e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   dbd30:	3401      	adds	r4, #1
   dbd32:	2c08      	cmp	r4, #8
   dbd34:	d002      	beq.n	dbd3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   dbd36:	0840      	lsrs	r0, r0, #1
   dbd38:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   dbd3a:	e7f5      	b.n	dbd28 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   dbd3c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   dbd3e:	4b02      	ldr	r3, [pc, #8]	; (dbd48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   dbd40:	5d5b      	ldrb	r3, [r3, r5]
   dbd42:	7013      	strb	r3, [r2, #0]
   dbd44:	bd30      	pop	{r4, r5, pc}
   dbd46:	bf00      	nop
   dbd48:	000e56d4 	.word	0x000e56d4

000dbd4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   dbd4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dbd50:	4607      	mov	r7, r0
   dbd52:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   dbd54:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   dbd56:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   dbd58:	f7ff ffbe 	bl	dbcd8 <_ZN8SPIClass4lockEv.isra.0>
   dbd5c:	2800      	cmp	r0, #0
   dbd5e:	db62      	blt.n	dbe26 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   dbd60:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   dbd62:	2214      	movs	r2, #20
   dbd64:	2100      	movs	r1, #0
   dbd66:	a809      	add	r0, sp, #36	; 0x24
   dbd68:	f005 fc06 	bl	e1578 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   dbd6c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   dbd6e:	4620      	mov	r0, r4
   dbd70:	2200      	movs	r2, #0
   dbd72:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   dbd74:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   dbd78:	f7ff fbb2 	bl	db4e0 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   dbd7c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   dbd80:	b154      	cbz	r4, dbd98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   dbd82:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   dbd86:	b935      	cbnz	r5, dbd96 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   dbd88:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   dbd8c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   dbd90:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   dbd94:	e003      	b.n	dbd9e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   dbd96:	2400      	movs	r4, #0
   dbd98:	46a1      	mov	r9, r4
   dbd9a:	46a0      	mov	r8, r4
   dbd9c:	2501      	movs	r5, #1
   dbd9e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   dbda0:	b105      	cbz	r5, dbda4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   dbda2:	b9bb      	cbnz	r3, dbdd4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   dbda4:	429d      	cmp	r5, r3
   dbda6:	d10b      	bne.n	dbdc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   dbda8:	68b2      	ldr	r2, [r6, #8]
   dbdaa:	4542      	cmp	r2, r8
   dbdac:	d108      	bne.n	dbdc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   dbdae:	f88d 9020 	strb.w	r9, [sp, #32]
   dbdb2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   dbdb6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   dbdba:	89b2      	ldrh	r2, [r6, #12]
   dbdbc:	4291      	cmp	r1, r2
   dbdbe:	d009      	beq.n	dbdd4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   dbdc0:	b153      	cbz	r3, dbdd8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   dbdc2:	2400      	movs	r4, #0
   dbdc4:	7838      	ldrb	r0, [r7, #0]
   dbdc6:	9401      	str	r4, [sp, #4]
   dbdc8:	9400      	str	r4, [sp, #0]
   dbdca:	4623      	mov	r3, r4
   dbdcc:	4622      	mov	r2, r4
   dbdce:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   dbdd0:	f7ff fb9e 	bl	db510 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   dbdd4:	2000      	movs	r0, #0
   dbdd6:	e026      	b.n	dbe26 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   dbdd8:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   dbddc:	68b1      	ldr	r1, [r6, #8]
   dbdde:	980a      	ldr	r0, [sp, #40]	; 0x28
   dbde0:	ab04      	add	r3, sp, #16
   dbde2:	f10d 020f 	add.w	r2, sp, #15
   dbde6:	f7ff ff9b 	bl	dbd20 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   dbdea:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   dbdec:	b105      	cbz	r5, dbdf0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   dbdee:	b9b1      	cbnz	r1, dbe1e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   dbdf0:	42a9      	cmp	r1, r5
   dbdf2:	d008      	beq.n	dbe06 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   dbdf4:	2400      	movs	r4, #0
   dbdf6:	7838      	ldrb	r0, [r7, #0]
   dbdf8:	9401      	str	r4, [sp, #4]
   dbdfa:	7b74      	ldrb	r4, [r6, #13]
   dbdfc:	7b33      	ldrb	r3, [r6, #12]
   dbdfe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   dbe02:	9400      	str	r4, [sp, #0]
   dbe04:	e7e4      	b.n	dbdd0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   dbe06:	68b3      	ldr	r3, [r6, #8]
   dbe08:	4543      	cmp	r3, r8
   dbe0a:	d3f3      	bcc.n	dbdf4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   dbe0c:	f88d 9020 	strb.w	r9, [sp, #32]
   dbe10:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   dbe14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dbe18:	89b3      	ldrh	r3, [r6, #12]
   dbe1a:	429a      	cmp	r2, r3
   dbe1c:	d1ea      	bne.n	dbdf4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   dbe1e:	9b04      	ldr	r3, [sp, #16]
   dbe20:	4543      	cmp	r3, r8
   dbe22:	d1e7      	bne.n	dbdf4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   dbe24:	e7d6      	b.n	dbdd4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   dbe26:	b00f      	add	sp, #60	; 0x3c
   dbe28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dbe2c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   dbe2c:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   dbe2e:	7800      	ldrb	r0, [r0, #0]
   dbe30:	f7ff fb3e 	bl	db4b0 <HAL_SPI_Send_Receive_Data>
}
   dbe34:	b2c0      	uxtb	r0, r0
   dbe36:	bd08      	pop	{r3, pc}

000dbe38 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   dbe38:	b530      	push	{r4, r5, lr}
   dbe3a:	b087      	sub	sp, #28
   dbe3c:	4604      	mov	r4, r0
   dbe3e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   dbe40:	7800      	ldrb	r0, [r0, #0]
   dbe42:	9500      	str	r5, [sp, #0]
   dbe44:	f7ff fb54 	bl	db4f0 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   dbe48:	b93d      	cbnz	r5, dbe5a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   dbe4a:	a902      	add	r1, sp, #8
   dbe4c:	7820      	ldrb	r0, [r4, #0]
   dbe4e:	f7ff fb57 	bl	db500 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   dbe52:	f89d 3014 	ldrb.w	r3, [sp, #20]
   dbe56:	07db      	lsls	r3, r3, #31
   dbe58:	d4f7      	bmi.n	dbe4a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   dbe5a:	b007      	add	sp, #28
   dbe5c:	bd30      	pop	{r4, r5, pc}

000dbe5e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   dbe5e:	7800      	ldrb	r0, [r0, #0]
   dbe60:	f7ff bb36 	b.w	db4d0 <HAL_SPI_Is_Enabled>

000dbe64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dbe64:	b510      	push	{r4, lr}
   dbe66:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dbe68:	6800      	ldr	r0, [r0, #0]
   dbe6a:	b118      	cbz	r0, dbe74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   dbe6c:	f7ff fe76 	bl	dbb5c <free>
            wakeupSource_ = nullptr;
   dbe70:	2300      	movs	r3, #0
   dbe72:	6023      	str	r3, [r4, #0]
   dbe74:	bd10      	pop	{r4, pc}

000dbe76 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   dbe76:	b510      	push	{r4, lr}
   dbe78:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   dbe7a:	f7ff fff3 	bl	dbe64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   dbe7e:	4620      	mov	r0, r4
   dbe80:	bd10      	pop	{r4, pc}

000dbe82 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   dbe82:	4601      	mov	r1, r0
   dbe84:	2200      	movs	r2, #0
   dbe86:	208c      	movs	r0, #140	; 0x8c
   dbe88:	f7ff bb9a 	b.w	db5c0 <HAL_Core_System_Reset_Ex>

000dbe8c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   dbe8c:	2000      	movs	r0, #0
   dbe8e:	f7ff bff8 	b.w	dbe82 <_ZN11SystemClass5resetEm>
	...

000dbe94 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   dbe94:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   dbe96:	4c09      	ldr	r4, [pc, #36]	; (dbebc <_GLOBAL__sub_I_System+0x28>)
   dbe98:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   dbe9a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   dbe9e:	6020      	str	r0, [r4, #0]
   dbea0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   dbea2:	71a0      	strb	r0, [r4, #6]
   dbea4:	8120      	strh	r0, [r4, #8]
   dbea6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dbea8:	f7ff fd74 	bl	db994 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   dbeac:	4620      	mov	r0, r4
   dbeae:	4a04      	ldr	r2, [pc, #16]	; (dbec0 <_GLOBAL__sub_I_System+0x2c>)
   dbeb0:	4904      	ldr	r1, [pc, #16]	; (dbec4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   dbeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   dbeb6:	f002 bbb3 	b.w	de620 <__aeabi_atexit>
   dbeba:	bf00      	nop
   dbebc:	2003e1d0 	.word	0x2003e1d0
   dbec0:	2003bc08 	.word	0x2003bc08
   dbec4:	000dbe77 	.word	0x000dbe77

000dbec8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   dbec8:	b510      	push	{r4, lr}
   dbeca:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   dbecc:	f006 fb22 	bl	e2514 <strlen>
   dbed0:	3801      	subs	r0, #1
   dbed2:	1823      	adds	r3, r4, r0
   dbed4:	4620      	mov	r0, r4
	while(i<j){
   dbed6:	4298      	cmp	r0, r3
   dbed8:	d206      	bcs.n	dbee8 <_Z11str_reversePc+0x20>
		c = *i;
   dbeda:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   dbedc:	7819      	ldrb	r1, [r3, #0]
   dbede:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   dbee2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   dbee6:	e7f6      	b.n	dbed6 <_Z11str_reversePc+0xe>
   dbee8:	bd10      	pop	{r4, pc}

000dbeea <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   dbeea:	b570      	push	{r4, r5, r6, lr}
   dbeec:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   dbeee:	1e91      	subs	r1, r2, #2
   dbef0:	2922      	cmp	r1, #34	; 0x22
   dbef2:	d820      	bhi.n	dbf36 <ultoa+0x4c>
   dbef4:	4625      	mov	r5, r4
   dbef6:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   dbef8:	b910      	cbnz	r0, dbf00 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dbefa:	4423      	add	r3, r4
            *ptr++ = '0';
   dbefc:	2230      	movs	r2, #48	; 0x30
   dbefe:	e00e      	b.n	dbf1e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   dbf00:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   dbf04:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   dbf08:	b2c1      	uxtb	r1, r0
   dbf0a:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   dbf0e:	2809      	cmp	r0, #9
                *ptr += '0';
   dbf10:	bf94      	ite	ls
   dbf12:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   dbf14:	3157      	addhi	r1, #87	; 0x57
   dbf16:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   dbf1a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   dbf1c:	e7eb      	b.n	dbef6 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dbf1e:	4299      	cmp	r1, r3
   dbf20:	d202      	bcs.n	dbf28 <ultoa+0x3e>
            *ptr++ = '0';
   dbf22:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   dbf26:	e7fa      	b.n	dbf1e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   dbf28:	2300      	movs	r3, #0
	str_reverse(buffer);
   dbf2a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   dbf2c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   dbf2e:	f7ff ffcb 	bl	dbec8 <_Z11str_reversePc>
	return buffer;
   dbf32:	4620      	mov	r0, r4
   dbf34:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   dbf36:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   dbf38:	bd70      	pop	{r4, r5, r6, pc}

000dbf3a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   dbf3a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   dbf3c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   dbf3e:	460c      	mov	r4, r1
   dbf40:	4615      	mov	r5, r2
	if(a<0){
   dbf42:	da0b      	bge.n	dbf5c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   dbf44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   dbf48:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   dbf4c:	bf14      	ite	ne
   dbf4e:	4258      	negne	r0, r3
   dbf50:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   dbf52:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   dbf54:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   dbf56:	462a      	mov	r2, r5
   dbf58:	4419      	add	r1, r3
   dbf5a:	e000      	b.n	dbf5e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   dbf5c:	2301      	movs	r3, #1
   dbf5e:	f7ff ffc4 	bl	dbeea <ultoa>
	}
	return buffer;
}
   dbf62:	4620      	mov	r0, r4
   dbf64:	bd38      	pop	{r3, r4, r5, pc}

000dbf66 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   dbf66:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   dbf68:	2301      	movs	r3, #1
   dbf6a:	f7ff ffbe 	bl	dbeea <ultoa>
}
   dbf6e:	bd08      	pop	{r3, pc}

000dbf70 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   dbf70:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   dbf72:	6804      	ldr	r4, [r0, #0]
   dbf74:	6b24      	ldr	r4, [r4, #48]	; 0x30
   dbf76:	46a4      	mov	ip, r4
    }
   dbf78:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   dbf7c:	4760      	bx	ip

000dbf7e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   dbf7e:	6803      	ldr	r3, [r0, #0]
   dbf80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dbf82:	4718      	bx	r3

000dbf84 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   dbf84:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   dbf86:	4770      	bx	lr

000dbf88 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   dbf88:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   dbf8a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   dbf8c:	1a10      	subs	r0, r2, r0
   dbf8e:	4770      	bx	lr

000dbf90 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   dbf90:	b513      	push	{r0, r1, r4, lr}
   dbf92:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   dbf94:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   dbf96:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   dbf9a:	68d4      	ldr	r4, [r2, #12]
   dbf9c:	4619      	mov	r1, r3
   dbf9e:	2201      	movs	r2, #1
   dbfa0:	47a0      	blx	r4
}
   dbfa2:	b002      	add	sp, #8
   dbfa4:	bd10      	pop	{r4, pc}

000dbfa6 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   dbfa6:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   dbfa8:	6803      	ldr	r3, [r0, #0]
   dbfaa:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   dbfac:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   dbfae:	4798      	blx	r3
   dbfb0:	b128      	cbz	r0, dbfbe <_ZN3UDP4readEv+0x18>
   dbfb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dbfb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   dbfb6:	1c59      	adds	r1, r3, #1
   dbfb8:	86e1      	strh	r1, [r4, #54]	; 0x36
   dbfba:	5cd0      	ldrb	r0, [r2, r3]
   dbfbc:	bd10      	pop	{r4, pc}
   dbfbe:	f04f 30ff 	mov.w	r0, #4294967295
}
   dbfc2:	bd10      	pop	{r4, pc}

000dbfc4 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   dbfc4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   dbfc6:	6803      	ldr	r3, [r0, #0]
   dbfc8:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   dbfca:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   dbfcc:	4798      	blx	r3
   dbfce:	b118      	cbz	r0, dbfd8 <_ZN3UDP4peekEv+0x14>
   dbfd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dbfd2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   dbfd4:	5cd0      	ldrb	r0, [r2, r3]
   dbfd6:	bd10      	pop	{r4, pc}
   dbfd8:	f04f 30ff 	mov.w	r0, #4294967295
}
   dbfdc:	bd10      	pop	{r4, pc}

000dbfde <_ZN3UDP5flushEv>:

void UDP::flush() {
   dbfde:	4770      	bx	lr

000dbfe0 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   dbfe0:	b410      	push	{r4}
   dbfe2:	4603      	mov	r3, r0
   dbfe4:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   dbfe6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   dbfe8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   dbfea:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   dbfec:	6803      	ldr	r3, [r0, #0]
   dbfee:	1a52      	subs	r2, r2, r1
   dbff0:	68db      	ldr	r3, [r3, #12]
   dbff2:	4421      	add	r1, r4
}
   dbff4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   dbff8:	4718      	bx	r3

000dbffa <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   dbffa:	f1a0 0010 	sub.w	r0, r0, #16
   dbffe:	f7ff bfef 	b.w	dbfe0 <_ZNK3UDP7printToER5Print>

000dc002 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   dc002:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   dc004:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   dc006:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   dc008:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   dc00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   dc00c:	4604      	mov	r4, r0
   dc00e:	460f      	mov	r7, r1
   dc010:	4615      	mov	r5, r2
    stop();
   dc012:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   dc014:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   dc016:	4632      	mov	r2, r6
   dc018:	2100      	movs	r1, #0
   dc01a:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   dc01c:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   dc01e:	f005 faab 	bl	e1578 <memset>
    saddr.sin6_len = sizeof(saddr);
   dc022:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   dc026:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   dc028:	260a      	movs	r6, #10
   dc02a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   dc02e:	f7ff fb47 	bl	db6c0 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   dc032:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   dc034:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   dc038:	2102      	movs	r1, #2
   dc03a:	4630      	mov	r0, r6
   dc03c:	f7ff fc48 	bl	db8d0 <sock_socket>

    if (_sock < 0) {
   dc040:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   dc042:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   dc044:	db24      	blt.n	dc090 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   dc046:	2204      	movs	r2, #4
   dc048:	9200      	str	r2, [sp, #0]
   dc04a:	ab02      	add	r3, sp, #8
   dc04c:	f640 71ff 	movw	r1, #4095	; 0xfff
   dc050:	f7ff fc06 	bl	db860 <sock_setsockopt>
   dc054:	b9e0      	cbnz	r0, dc090 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   dc056:	b195      	cbz	r5, dc07e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   dc058:	9003      	str	r0, [sp, #12]
   dc05a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   dc05e:	a903      	add	r1, sp, #12
   dc060:	b2e8      	uxtb	r0, r5
   dc062:	f7ff fa6d 	bl	db540 <if_index_to_name>
   dc066:	b998      	cbnz	r0, dc090 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   dc068:	2306      	movs	r3, #6
   dc06a:	9300      	str	r3, [sp, #0]
   dc06c:	f241 020b 	movw	r2, #4107	; 0x100b
   dc070:	ab03      	add	r3, sp, #12
   dc072:	f640 71ff 	movw	r1, #4095	; 0xfff
   dc076:	6960      	ldr	r0, [r4, #20]
   dc078:	f7ff fbf2 	bl	db860 <sock_setsockopt>
   dc07c:	b940      	cbnz	r0, dc090 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   dc07e:	221c      	movs	r2, #28
   dc080:	a905      	add	r1, sp, #20
   dc082:	6960      	ldr	r0, [r4, #20]
   dc084:	f7ff fbe4 	bl	db850 <sock_bind>
   dc088:	b910      	cbnz	r0, dc090 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   dc08a:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   dc08c:	2001      	movs	r0, #1
   dc08e:	e004      	b.n	dc09a <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   dc090:	6823      	ldr	r3, [r4, #0]
   dc092:	4620      	mov	r0, r4
   dc094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dc096:	4798      	blx	r3
   dc098:	2000      	movs	r0, #0
    }
    return bound;
}
   dc09a:	b00d      	add	sp, #52	; 0x34
   dc09c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc09e <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   dc09e:	b510      	push	{r4, lr}
   dc0a0:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   dc0a2:	6940      	ldr	r0, [r0, #20]
   dc0a4:	2800      	cmp	r0, #0
   dc0a6:	db01      	blt.n	dc0ac <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   dc0a8:	f7ff fbe2 	bl	db870 <sock_close>
    }

    _sock = -1;
   dc0ac:	f04f 33ff 	mov.w	r3, #4294967295
   dc0b0:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dc0b2:	2300      	movs	r3, #0
   dc0b4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   dc0b6:	8723      	strh	r3, [r4, #56]	; 0x38
   dc0b8:	bd10      	pop	{r4, pc}

000dc0ba <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   dc0ba:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   dc0bc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   dc0be:	4605      	mov	r5, r0
   dc0c0:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   dc0c2:	b113      	cbz	r3, dc0ca <_ZN3UDP5writeEPKhj+0x10>
   dc0c4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   dc0c6:	1a24      	subs	r4, r4, r0
   dc0c8:	e000      	b.n	dc0cc <_ZN3UDP5writeEPKhj+0x12>
   dc0ca:	461c      	mov	r4, r3
   dc0cc:	4294      	cmp	r4, r2
   dc0ce:	bf28      	it	cs
   dc0d0:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   dc0d2:	4622      	mov	r2, r4
   dc0d4:	4418      	add	r0, r3
   dc0d6:	f005 fa44 	bl	e1562 <memcpy>
    _offset += size;
   dc0da:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   dc0dc:	4423      	add	r3, r4
   dc0de:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   dc0e0:	4620      	mov	r0, r4
   dc0e2:	bd38      	pop	{r3, r4, r5, pc}

000dc0e4 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   dc0e4:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   dc0e6:	6803      	ldr	r3, [r0, #0]
   dc0e8:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   dc0ea:	4604      	mov	r4, r0
   dc0ec:	460e      	mov	r6, r1
   dc0ee:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   dc0f0:	4798      	blx	r3
   dc0f2:	b188      	cbz	r0, dc118 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   dc0f4:	6823      	ldr	r3, [r4, #0]
   dc0f6:	4620      	mov	r0, r4
   dc0f8:	691b      	ldr	r3, [r3, #16]
   dc0fa:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   dc0fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dc0fe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dc100:	4285      	cmp	r5, r0
   dc102:	bfa8      	it	ge
   dc104:	4605      	movge	r5, r0
   dc106:	4419      	add	r1, r3
   dc108:	462a      	mov	r2, r5
   dc10a:	4630      	mov	r0, r6
   dc10c:	f005 fa29 	bl	e1562 <memcpy>
        _offset += read;
   dc110:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dc112:	442b      	add	r3, r5
   dc114:	86e3      	strh	r3, [r4, #54]	; 0x36
   dc116:	e001      	b.n	dc11c <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   dc118:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   dc11c:	4628      	mov	r0, r5
   dc11e:	bd70      	pop	{r4, r5, r6, pc}

000dc120 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   dc120:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dc122:	4604      	mov	r4, r0
   dc124:	4b05      	ldr	r3, [pc, #20]	; (dc13c <_ZN3UDP8remoteIPEv+0x1c>)
   dc126:	f844 3b04 	str.w	r3, [r4], #4
   dc12a:	f101 0520 	add.w	r5, r1, #32
   dc12e:	4606      	mov	r6, r0
   dc130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc134:	682b      	ldr	r3, [r5, #0]
   dc136:	7023      	strb	r3, [r4, #0]
   dc138:	4630      	mov	r0, r6
   dc13a:	bd70      	pop	{r4, r5, r6, pc}
   dc13c:	000e587c 	.word	0x000e587c

000dc140 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dc140:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc142:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dc144:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dc146:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dc148:	6a97      	ldr	r7, [r2, #40]	; 0x28
   dc14a:	4a0a      	ldr	r2, [pc, #40]	; (dc174 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   dc14c:	9202      	str	r2, [sp, #8]
   dc14e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dc150:	468e      	mov	lr, r1
   dc152:	4606      	mov	r6, r0
   dc154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc156:	ac03      	add	r4, sp, #12
   dc158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc15a:	682b      	ldr	r3, [r5, #0]
   dc15c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dc15e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   dc162:	9300      	str	r3, [sp, #0]
   dc164:	4662      	mov	r2, ip
   dc166:	ab02      	add	r3, sp, #8
   dc168:	4671      	mov	r1, lr
   dc16a:	4630      	mov	r0, r6
   dc16c:	47b8      	blx	r7
    }
   dc16e:	b009      	add	sp, #36	; 0x24
   dc170:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc172:	bf00      	nop
   dc174:	000e587c 	.word	0x000e587c

000dc178 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   dc178:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dc17a:	6803      	ldr	r3, [r0, #0]
   dc17c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   dc180:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   dc182:	4b0d      	ldr	r3, [pc, #52]	; (dc1b8 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   dc184:	b089      	sub	sp, #36	; 0x24
   dc186:	f100 0620 	add.w	r6, r0, #32
   dc18a:	4604      	mov	r4, r0
   dc18c:	9302      	str	r3, [sp, #8]
   dc18e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   dc190:	ad03      	add	r5, sp, #12
   dc192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dc194:	6833      	ldr	r3, [r6, #0]
   dc196:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dc198:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   dc19a:	9300      	str	r3, [sp, #0]
   dc19c:	4672      	mov	r2, lr
   dc19e:	ab02      	add	r3, sp, #8
   dc1a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dc1a2:	4620      	mov	r0, r4
   dc1a4:	47b8      	blx	r7
    flush(); // wait for send to complete
   dc1a6:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dc1a8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   dc1aa:	69db      	ldr	r3, [r3, #28]
   dc1ac:	4620      	mov	r0, r4
   dc1ae:	4798      	blx	r3
    return result;
}
   dc1b0:	4628      	mov	r0, r5
   dc1b2:	b009      	add	sp, #36	; 0x24
   dc1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc1b6:	bf00      	nop
   dc1b8:	000e587c 	.word	0x000e587c

000dc1bc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   dc1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   dc1be:	7843      	ldrb	r3, [r0, #1]
   dc1c0:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   dc1c2:	b08d      	sub	sp, #52	; 0x34
   dc1c4:	4605      	mov	r5, r0
   dc1c6:	460c      	mov	r4, r1
   dc1c8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   dc1ca:	d101      	bne.n	dc1d0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   dc1cc:	1d01      	adds	r1, r0, #4
   dc1ce:	e033      	b.n	dc238 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   dc1d0:	2b0a      	cmp	r3, #10
   dc1d2:	d135      	bne.n	dc240 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   dc1d4:	2211      	movs	r2, #17
   dc1d6:	2100      	movs	r1, #0
   dc1d8:	a801      	add	r0, sp, #4
   dc1da:	f005 f9cd 	bl	e1578 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   dc1de:	68ab      	ldr	r3, [r5, #8]
   dc1e0:	b943      	cbnz	r3, dc1f4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   dc1e2:	68eb      	ldr	r3, [r5, #12]
   dc1e4:	b933      	cbnz	r3, dc1f4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   dc1e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   dc1ea:	692e      	ldr	r6, [r5, #16]
   dc1ec:	f7ff fa58 	bl	db6a0 <inet_htonl>
   dc1f0:	4286      	cmp	r6, r0
   dc1f2:	d01f      	beq.n	dc234 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   dc1f4:	f105 0308 	add.w	r3, r5, #8
   dc1f8:	ae01      	add	r6, sp, #4
   dc1fa:	f105 0e18 	add.w	lr, r5, #24
   dc1fe:	6818      	ldr	r0, [r3, #0]
   dc200:	6859      	ldr	r1, [r3, #4]
   dc202:	4632      	mov	r2, r6
   dc204:	c203      	stmia	r2!, {r0, r1}
   dc206:	3308      	adds	r3, #8
   dc208:	4573      	cmp	r3, lr
   dc20a:	4616      	mov	r6, r2
   dc20c:	d1f7      	bne.n	dc1fe <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   dc20e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   dc210:	a901      	add	r1, sp, #4
   dc212:	a806      	add	r0, sp, #24
   dc214:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   dc216:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   dc21a:	f001 fa63 	bl	dd6e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dc21e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   dc220:	3404      	adds	r4, #4
   dc222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc224:	6833      	ldr	r3, [r6, #0]
   dc226:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   dc228:	b157      	cbz	r7, dc240 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   dc22a:	8868      	ldrh	r0, [r5, #2]
   dc22c:	f7ff fa40 	bl	db6b0 <inet_ntohs>
   dc230:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   dc232:	e005      	b.n	dc240 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   dc234:	f105 0114 	add.w	r1, r5, #20
   dc238:	4620      	mov	r0, r4
   dc23a:	f001 fa95 	bl	dd768 <_ZN9IPAddressaSEPKh>
   dc23e:	e7f3      	b.n	dc228 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   dc240:	b00d      	add	sp, #52	; 0x34
   dc242:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc244 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   dc244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc248:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   dc24a:	ab0e      	add	r3, sp, #56	; 0x38
   dc24c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   dc24e:	4606      	mov	r6, r0
   dc250:	4617      	mov	r7, r2
   dc252:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   dc254:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   dc258:	462a      	mov	r2, r5
   dc25a:	4629      	mov	r1, r5
   dc25c:	f7ff f8d8 	bl	db410 <netdb_getaddrinfo>
   dc260:	2800      	cmp	r0, #0
   dc262:	db1f      	blt.n	dc2a4 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   dc264:	9b01      	ldr	r3, [sp, #4]
   dc266:	b1fb      	cbz	r3, dc2a8 <_ZN3UDP11beginPacketEPKct+0x64>
   dc268:	695b      	ldr	r3, [r3, #20]
   dc26a:	b1eb      	cbz	r3, dc2a8 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   dc26c:	a802      	add	r0, sp, #8
   dc26e:	f001 fa2b 	bl	dd6c8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   dc272:	9b01      	ldr	r3, [sp, #4]
   dc274:	462a      	mov	r2, r5
   dc276:	6958      	ldr	r0, [r3, #20]
   dc278:	a902      	add	r1, sp, #8
   dc27a:	f7ff ff9f 	bl	dc1bc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   dc27e:	a802      	add	r0, sp, #8
   dc280:	f001 fa42 	bl	dd708 <_ZNK9IPAddresscvbEv>
        if (addr) {
   dc284:	b180      	cbz	r0, dc2a8 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   dc286:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dc288:	ad03      	add	r5, sp, #12
   dc28a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   dc28e:	4b0b      	ldr	r3, [pc, #44]	; (dc2bc <_ZN3UDP11beginPacketEPKct+0x78>)
   dc290:	9308      	str	r3, [sp, #32]
   dc292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dc294:	ac09      	add	r4, sp, #36	; 0x24
   dc296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dc298:	682b      	ldr	r3, [r5, #0]
   dc29a:	7023      	strb	r3, [r4, #0]
   dc29c:	463a      	mov	r2, r7
   dc29e:	a908      	add	r1, sp, #32
   dc2a0:	4630      	mov	r0, r6
   dc2a2:	47c0      	blx	r8
   dc2a4:	4604      	mov	r4, r0
   dc2a6:	e001      	b.n	dc2ac <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   dc2a8:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   dc2ac:	9801      	ldr	r0, [sp, #4]
   dc2ae:	f7ff f8a7 	bl	db400 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   dc2b2:	4620      	mov	r0, r4
   dc2b4:	b00e      	add	sp, #56	; 0x38
   dc2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc2ba:	bf00      	nop
   dc2bc:	000e587c 	.word	0x000e587c

000dc2c0 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   dc2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   dc2c4:	f8d0 8014 	ldr.w	r8, [r0, #20]
   dc2c8:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   dc2cc:	b08c      	sub	sp, #48	; 0x30
   dc2ce:	4605      	mov	r5, r0
   dc2d0:	460c      	mov	r4, r1
   dc2d2:	4617      	mov	r7, r2
   dc2d4:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   dc2d6:	db00      	blt.n	dc2da <_ZN3UDP13receivePacketEPhjm+0x1a>
   dc2d8:	b911      	cbnz	r1, dc2e0 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   dc2da:	f04f 30ff 	mov.w	r0, #4294967295
   dc2de:	e035      	b.n	dc34c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   dc2e0:	f04f 0a1c 	mov.w	sl, #28
   dc2e4:	ae05      	add	r6, sp, #20
   dc2e6:	4652      	mov	r2, sl
   dc2e8:	2100      	movs	r1, #0
   dc2ea:	4630      	mov	r0, r6
   dc2ec:	f005 f944 	bl	e1578 <memset>
        socklen_t slen = sizeof(saddr);
   dc2f0:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   dc2f4:	f1b9 0f00 	cmp.w	r9, #0
   dc2f8:	d014      	beq.n	dc324 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   dc2fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dc2fe:	fbb9 f1f2 	udiv	r1, r9, r2
   dc302:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   dc304:	fb02 9111 	mls	r1, r2, r1, r9
   dc308:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   dc30a:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   dc30c:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   dc30e:	9300      	str	r3, [sp, #0]
   dc310:	f241 0206 	movw	r2, #4102	; 0x1006
   dc314:	ab03      	add	r3, sp, #12
   dc316:	f640 71ff 	movw	r1, #4095	; 0xfff
   dc31a:	4640      	mov	r0, r8
   dc31c:	f7ff faa0 	bl	db860 <sock_setsockopt>
            if (ret) {
   dc320:	b108      	cbz	r0, dc326 <_ZN3UDP13receivePacketEPhjm+0x66>
   dc322:	e013      	b.n	dc34c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   dc324:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   dc326:	ab02      	add	r3, sp, #8
   dc328:	9301      	str	r3, [sp, #4]
   dc32a:	4621      	mov	r1, r4
   dc32c:	4603      	mov	r3, r0
   dc32e:	9600      	str	r6, [sp, #0]
   dc330:	463a      	mov	r2, r7
   dc332:	6968      	ldr	r0, [r5, #20]
   dc334:	f7ff fab4 	bl	db8a0 <sock_recvfrom>
        if (ret >= 0) {
   dc338:	1e04      	subs	r4, r0, #0
   dc33a:	db06      	blt.n	dc34a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   dc33c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   dc340:	f105 011c 	add.w	r1, r5, #28
   dc344:	4630      	mov	r0, r6
   dc346:	f7ff ff39 	bl	dc1bc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   dc34a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   dc34c:	b00c      	add	sp, #48	; 0x30
   dc34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dc352 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   dc352:	b538      	push	{r3, r4, r5, lr}
   dc354:	4605      	mov	r5, r0
   dc356:	4614      	mov	r4, r2
   dc358:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   dc35a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   dc35c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   dc35e:	d111      	bne.n	dc384 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   dc360:	231c      	movs	r3, #28
   dc362:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   dc364:	230a      	movs	r3, #10
   dc366:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   dc368:	f7ff f9aa 	bl	db6c0 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dc36c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   dc36e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dc372:	1d2b      	adds	r3, r5, #4
   dc374:	3514      	adds	r5, #20
   dc376:	f853 2b04 	ldr.w	r2, [r3], #4
   dc37a:	f844 2b04 	str.w	r2, [r4], #4
   dc37e:	42ab      	cmp	r3, r5
   dc380:	d1f9      	bne.n	dc376 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   dc382:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   dc384:	2b04      	cmp	r3, #4
   dc386:	d10a      	bne.n	dc39e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   dc388:	2310      	movs	r3, #16
   dc38a:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   dc38c:	2302      	movs	r3, #2
   dc38e:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   dc390:	f7ff f996 	bl	db6c0 <inet_htons>
   dc394:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   dc396:	6868      	ldr	r0, [r5, #4]
   dc398:	f7ff f982 	bl	db6a0 <inet_htonl>
   dc39c:	6060      	str	r0, [r4, #4]
   dc39e:	bd38      	pop	{r3, r4, r5, pc}

000dc3a0 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   dc3a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc3a4:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   dc3a6:	ac03      	add	r4, sp, #12
   dc3a8:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   dc3aa:	4699      	mov	r9, r3
   dc3ac:	4606      	mov	r6, r0
   dc3ae:	460f      	mov	r7, r1
   dc3b0:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   dc3b2:	2100      	movs	r1, #0
   dc3b4:	462a      	mov	r2, r5
   dc3b6:	4620      	mov	r0, r4
   dc3b8:	f005 f8de 	bl	e1578 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   dc3bc:	4622      	mov	r2, r4
   dc3be:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   dc3c2:	4648      	mov	r0, r9
   dc3c4:	f7ff ffc5 	bl	dc352 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   dc3c8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   dc3cc:	b143      	cbz	r3, dc3e0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   dc3ce:	e88d 0030 	stmia.w	sp, {r4, r5}
   dc3d2:	2300      	movs	r3, #0
   dc3d4:	4642      	mov	r2, r8
   dc3d6:	4639      	mov	r1, r7
   dc3d8:	6970      	ldr	r0, [r6, #20]
   dc3da:	f7ff fa71 	bl	db8c0 <sock_sendto>
   dc3de:	e001      	b.n	dc3e4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   dc3e0:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   dc3e4:	b00b      	add	sp, #44	; 0x2c
   dc3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000dc3ec <_ZN3UDPC1Ev>:
    return -1;
}

} // anonymous

UDP::UDP()
   dc3ec:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   dc3ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc3f2:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   dc3f4:	4b0b      	ldr	r3, [pc, #44]	; (dc424 <_ZN3UDPC1Ev+0x38>)
   dc3f6:	f103 0208 	add.w	r2, r3, #8
   dc3fa:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dc3fc:	2500      	movs	r5, #0
   dc3fe:	6103      	str	r3, [r0, #16]
   dc400:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   dc404:	4604      	mov	r4, r0
   dc406:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   dc408:	6002      	str	r2, [r0, #0]
   dc40a:	6143      	str	r3, [r0, #20]
   dc40c:	301c      	adds	r0, #28
   dc40e:	f001 f95b 	bl	dd6c8 <_ZN9IPAddressC1Ev>
   dc412:	f44f 7300 	mov.w	r3, #512	; 0x200
   dc416:	86e5      	strh	r5, [r4, #54]	; 0x36
   dc418:	8725      	strh	r5, [r4, #56]	; 0x38
   dc41a:	63e5      	str	r5, [r4, #60]	; 0x3c
   dc41c:	6423      	str	r3, [r4, #64]	; 0x40
   dc41e:	6465      	str	r5, [r4, #68]	; 0x44
}
   dc420:	4620      	mov	r0, r4
   dc422:	bd38      	pop	{r3, r4, r5, pc}
   dc424:	000e56dc 	.word	0x000e56dc

000dc428 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   dc428:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   dc42a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   dc42e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   dc430:	b123      	cbz	r3, dc43c <_ZN3UDP13releaseBufferEv+0x14>
   dc432:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   dc434:	b110      	cbz	r0, dc43c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   dc436:	2101      	movs	r1, #1
   dc438:	f002 f900 	bl	de63c <_ZdlPvj>
    }
    _buffer = NULL;
   dc43c:	2300      	movs	r3, #0
   dc43e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   dc440:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   dc444:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dc446:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   dc448:	8723      	strh	r3, [r4, #56]	; 0x38
   dc44a:	bd10      	pop	{r4, pc}

000dc44c <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   dc44c:	b570      	push	{r4, r5, r6, lr}
   dc44e:	4604      	mov	r4, r0
   dc450:	4616      	mov	r6, r2
   dc452:	460d      	mov	r5, r1
    releaseBuffer();
   dc454:	f7ff ffe8 	bl	dc428 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   dc458:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   dc45a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   dc45c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   dc45e:	b93e      	cbnz	r6, dc470 <_ZN3UDP9setBufferEjPh+0x24>
   dc460:	b135      	cbz	r5, dc470 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   dc462:	4628      	mov	r0, r5
   dc464:	f7f7 fe1b 	bl	d409e <_Znaj>
        _buffer_allocated = true;
   dc468:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   dc46a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   dc46c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   dc470:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc472:	b103      	cbz	r3, dc476 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   dc474:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   dc476:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   dc478:	3000      	adds	r0, #0
   dc47a:	bf18      	it	ne
   dc47c:	2001      	movne	r0, #1
   dc47e:	bd70      	pop	{r4, r5, r6, pc}

000dc480 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   dc480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc482:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   dc484:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   dc486:	4605      	mov	r5, r0
   dc488:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   dc48a:	b91a      	cbnz	r2, dc494 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   dc48c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   dc48e:	b109      	cbz	r1, dc494 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   dc490:	f7ff ffdc 	bl	dc44c <_ZN3UDP9setBufferEjPh>
   dc494:	3404      	adds	r4, #4
   dc496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dc498:	f105 0620 	add.w	r6, r5, #32
   dc49c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   dc49e:	6823      	ldr	r3, [r4, #0]
   dc4a0:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dc4a2:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   dc4a4:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dc4a6:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   dc4a8:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   dc4aa:	6c28      	ldr	r0, [r5, #64]	; 0x40
   dc4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc4ae <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   dc4ae:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   dc4b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   dc4b2:	4604      	mov	r4, r0
   dc4b4:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   dc4b6:	b91a      	cbnz	r2, dc4c0 <_ZN3UDP11parsePacketEm+0x12>
   dc4b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   dc4ba:	b109      	cbz	r1, dc4c0 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   dc4bc:	f7ff ffc6 	bl	dc44c <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   dc4c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dc4c2:	2200      	movs	r2, #0
   dc4c4:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   dc4c6:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   dc4c8:	b149      	cbz	r1, dc4de <_ZN3UDP11parsePacketEm+0x30>
   dc4ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
   dc4cc:	b13a      	cbz	r2, dc4de <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   dc4ce:	6823      	ldr	r3, [r4, #0]
   dc4d0:	4620      	mov	r0, r4
   dc4d2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   dc4d4:	4633      	mov	r3, r6
   dc4d6:	47a8      	blx	r5
        if (result > 0) {
   dc4d8:	2800      	cmp	r0, #0
            _total = result;
   dc4da:	bfc8      	it	gt
   dc4dc:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   dc4de:	6823      	ldr	r3, [r4, #0]
   dc4e0:	4620      	mov	r0, r4
   dc4e2:	691b      	ldr	r3, [r3, #16]
}
   dc4e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   dc4e8:	4718      	bx	r3
	...

000dc4ec <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   dc4ec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc4f0:	ec59 8b10 	vmov	r8, r9, d0
   dc4f4:	4607      	mov	r7, r0
   dc4f6:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   dc4f8:	2200      	movs	r2, #0
   dc4fa:	2300      	movs	r3, #0
   dc4fc:	ee10 0a10 	vmov	r0, s0
   dc500:	4649      	mov	r1, r9
   dc502:	f004 fc47 	bl	e0d94 <__aeabi_dcmplt>
   dc506:	b128      	cbz	r0, dc514 <_Z4dtoadhPc+0x28>
        val = -val;
   dc508:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dc50c:	4699      	mov	r9, r3
        *sout++ = '-';
   dc50e:	232d      	movs	r3, #45	; 0x2d
   dc510:	7033      	strb	r3, [r6, #0]
   dc512:	3601      	adds	r6, #1
   dc514:	2300      	movs	r3, #0
    }
    long scale = 1;
   dc516:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   dc518:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   dc51a:	b2d9      	uxtb	r1, r3
   dc51c:	428f      	cmp	r7, r1
   dc51e:	d902      	bls.n	dc526 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   dc520:	4354      	muls	r4, r2
   dc522:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   dc524:	e7f9      	b.n	dc51a <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   dc526:	4620      	mov	r0, r4
   dc528:	f004 f95c 	bl	e07e4 <__aeabi_i2d>
   dc52c:	4642      	mov	r2, r8
   dc52e:	464b      	mov	r3, r9
   dc530:	f004 f9be 	bl	e08b0 <__aeabi_dmul>
   dc534:	4682      	mov	sl, r0
   dc536:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   dc538:	f004 fd1a 	bl	e0f70 <__aeabi_d2ulz>
   dc53c:	4680      	mov	r8, r0
   dc53e:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   dc540:	f004 f980 	bl	e0844 <__aeabi_ul2d>
   dc544:	4602      	mov	r2, r0
   dc546:	460b      	mov	r3, r1
   dc548:	4650      	mov	r0, sl
   dc54a:	4659      	mov	r1, fp
   dc54c:	f003 fffc 	bl	e0548 <__aeabi_dsub>
   dc550:	2200      	movs	r2, #0
   dc552:	4b17      	ldr	r3, [pc, #92]	; (dc5b0 <_Z4dtoadhPc+0xc4>)
   dc554:	f004 fc32 	bl	e0dbc <__aeabi_dcmpge>
   dc558:	b118      	cbz	r0, dc562 <_Z4dtoadhPc+0x76>
        fixed++;
   dc55a:	f118 0801 	adds.w	r8, r8, #1
   dc55e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   dc562:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   dc564:	4622      	mov	r2, r4
   dc566:	462b      	mov	r3, r5
   dc568:	4640      	mov	r0, r8
   dc56a:	4649      	mov	r1, r9
   dc56c:	f004 fce8 	bl	e0f40 <__aeabi_uldivmod>
   dc570:	2301      	movs	r3, #1
   dc572:	220a      	movs	r2, #10
   dc574:	4631      	mov	r1, r6
   dc576:	f7ff fcb8 	bl	dbeea <ultoa>
    if (prec) {
   dc57a:	b1af      	cbz	r7, dc5a8 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   dc57c:	4630      	mov	r0, r6
   dc57e:	f005 ffc9 	bl	e2514 <strlen>
        *sout++ = '.';
   dc582:	232e      	movs	r3, #46	; 0x2e
   dc584:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   dc586:	3001      	adds	r0, #1
   dc588:	4406      	add	r6, r0
   dc58a:	4622      	mov	r2, r4
   dc58c:	462b      	mov	r3, r5
   dc58e:	4640      	mov	r0, r8
   dc590:	4649      	mov	r1, r9
   dc592:	f004 fcd5 	bl	e0f40 <__aeabi_uldivmod>
   dc596:	463b      	mov	r3, r7
   dc598:	4610      	mov	r0, r2
   dc59a:	4631      	mov	r1, r6
   dc59c:	220a      	movs	r2, #10
    }
}
   dc59e:	b001      	add	sp, #4
   dc5a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   dc5a4:	f7ff bca1 	b.w	dbeea <ultoa>
    }
}
   dc5a8:	b001      	add	sp, #4
   dc5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5ae:	bf00      	nop
   dc5b0:	3fe00000 	.word	0x3fe00000

000dc5b4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dc5b4:	b510      	push	{r4, lr}
   dc5b6:	4604      	mov	r4, r0
{
	free(buffer);
   dc5b8:	6800      	ldr	r0, [r0, #0]
   dc5ba:	f7ff facf 	bl	dbb5c <free>
}
   dc5be:	4620      	mov	r0, r4
   dc5c0:	bd10      	pop	{r4, pc}

000dc5c2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dc5c2:	b510      	push	{r4, lr}
   dc5c4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dc5c6:	6800      	ldr	r0, [r0, #0]
   dc5c8:	b108      	cbz	r0, dc5ce <_ZN6String10invalidateEv+0xc>
   dc5ca:	f7ff fac7 	bl	dbb5c <free>
	buffer = NULL;
   dc5ce:	2300      	movs	r3, #0
   dc5d0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   dc5d2:	60a3      	str	r3, [r4, #8]
   dc5d4:	6063      	str	r3, [r4, #4]
   dc5d6:	bd10      	pop	{r4, pc}

000dc5d8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dc5d8:	b538      	push	{r3, r4, r5, lr}
   dc5da:	4604      	mov	r4, r0
   dc5dc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dc5de:	6800      	ldr	r0, [r0, #0]
   dc5e0:	3101      	adds	r1, #1
   dc5e2:	f7ff fac3 	bl	dbb6c <realloc>
	if (newbuffer) {
   dc5e6:	b110      	cbz	r0, dc5ee <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dc5e8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   dc5ec:	2001      	movs	r0, #1
	}
	return 0;
}
   dc5ee:	bd38      	pop	{r3, r4, r5, pc}

000dc5f0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dc5f0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dc5f2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dc5f4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dc5f6:	b113      	cbz	r3, dc5fe <_ZN6String7reserveEj+0xe>
   dc5f8:	6843      	ldr	r3, [r0, #4]
   dc5fa:	428b      	cmp	r3, r1
   dc5fc:	d207      	bcs.n	dc60e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   dc5fe:	4620      	mov	r0, r4
   dc600:	f7ff ffea 	bl	dc5d8 <_ZN6String12changeBufferEj>
   dc604:	b120      	cbz	r0, dc610 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   dc606:	68a3      	ldr	r3, [r4, #8]
   dc608:	b90b      	cbnz	r3, dc60e <_ZN6String7reserveEj+0x1e>
   dc60a:	6822      	ldr	r2, [r4, #0]
   dc60c:	7013      	strb	r3, [r2, #0]
   dc60e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   dc610:	bd10      	pop	{r4, pc}

000dc612 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dc612:	b570      	push	{r4, r5, r6, lr}
   dc614:	460e      	mov	r6, r1
	if (!reserve(length)) {
   dc616:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dc618:	4604      	mov	r4, r0
   dc61a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   dc61c:	f7ff ffe8 	bl	dc5f0 <_ZN6String7reserveEj>
   dc620:	b918      	cbnz	r0, dc62a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   dc622:	4620      	mov	r0, r4
   dc624:	f7ff ffcd 	bl	dc5c2 <_ZN6String10invalidateEv>
		return *this;
   dc628:	e009      	b.n	dc63e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   dc62a:	462a      	mov	r2, r5
   dc62c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   dc62e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   dc630:	6820      	ldr	r0, [r4, #0]
   dc632:	f004 ff96 	bl	e1562 <memcpy>
	buffer[len] = 0;
   dc636:	6822      	ldr	r2, [r4, #0]
   dc638:	68a3      	ldr	r3, [r4, #8]
   dc63a:	2100      	movs	r1, #0
   dc63c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   dc63e:	4620      	mov	r0, r4
   dc640:	bd70      	pop	{r4, r5, r6, pc}

000dc642 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   dc642:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc644:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   dc646:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc648:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dc64a:	6043      	str	r3, [r0, #4]
	len = 0;
   dc64c:	6083      	str	r3, [r0, #8]
	flags = 0;
   dc64e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   dc650:	460d      	mov	r5, r1
   dc652:	b139      	cbz	r1, dc664 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   dc654:	4608      	mov	r0, r1
   dc656:	f005 ff5d 	bl	e2514 <strlen>
   dc65a:	4629      	mov	r1, r5
   dc65c:	4602      	mov	r2, r0
   dc65e:	4620      	mov	r0, r4
   dc660:	f7ff ffd7 	bl	dc612 <_ZN6String4copyEPKcj>
}
   dc664:	4620      	mov	r0, r4
   dc666:	bd38      	pop	{r3, r4, r5, pc}

000dc668 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dc668:	b538      	push	{r3, r4, r5, lr}
   dc66a:	4605      	mov	r5, r0
	if (buffer) {
   dc66c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dc66e:	460c      	mov	r4, r1
	if (buffer) {
   dc670:	b160      	cbz	r0, dc68c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   dc672:	686a      	ldr	r2, [r5, #4]
   dc674:	688b      	ldr	r3, [r1, #8]
   dc676:	429a      	cmp	r2, r3
   dc678:	d306      	bcc.n	dc688 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   dc67a:	6809      	ldr	r1, [r1, #0]
   dc67c:	f005 fa12 	bl	e1aa4 <strcpy>
			len = rhs.len;
   dc680:	68a3      	ldr	r3, [r4, #8]
   dc682:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dc684:	2300      	movs	r3, #0
   dc686:	e00a      	b.n	dc69e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   dc688:	f7ff fa68 	bl	dbb5c <free>
		}
	}
	buffer = rhs.buffer;
   dc68c:	6823      	ldr	r3, [r4, #0]
   dc68e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   dc690:	6863      	ldr	r3, [r4, #4]
   dc692:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   dc694:	68a3      	ldr	r3, [r4, #8]
   dc696:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   dc698:	2300      	movs	r3, #0
   dc69a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   dc69c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   dc69e:	60a3      	str	r3, [r4, #8]
   dc6a0:	bd38      	pop	{r3, r4, r5, pc}

000dc6a2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   dc6a2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   dc6a4:	b510      	push	{r4, lr}
   dc6a6:	460b      	mov	r3, r1
   dc6a8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   dc6aa:	d007      	beq.n	dc6bc <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   dc6ac:	6809      	ldr	r1, [r1, #0]
   dc6ae:	b119      	cbz	r1, dc6b8 <_ZN6StringaSERKS_+0x16>
   dc6b0:	689a      	ldr	r2, [r3, #8]
   dc6b2:	f7ff ffae 	bl	dc612 <_ZN6String4copyEPKcj>
   dc6b6:	e001      	b.n	dc6bc <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   dc6b8:	f7ff ff83 	bl	dc5c2 <_ZN6String10invalidateEv>

	return *this;
}
   dc6bc:	4620      	mov	r0, r4
   dc6be:	bd10      	pop	{r4, pc}

000dc6c0 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   dc6c0:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc6c2:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   dc6c4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc6c6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dc6c8:	6043      	str	r3, [r0, #4]
	len = 0;
   dc6ca:	6083      	str	r3, [r0, #8]
	flags = 0;
   dc6cc:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   dc6ce:	f7ff ffe8 	bl	dc6a2 <_ZN6StringaSERKS_>
}
   dc6d2:	4620      	mov	r0, r4
   dc6d4:	bd10      	pop	{r4, pc}

000dc6d6 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   dc6d6:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   dc6d8:	b510      	push	{r4, lr}
   dc6da:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   dc6dc:	d001      	beq.n	dc6e2 <_ZN6StringaSEOS_+0xc>
   dc6de:	f7ff ffc3 	bl	dc668 <_ZN6String4moveERS_>
	return *this;
}
   dc6e2:	4620      	mov	r0, r4
   dc6e4:	bd10      	pop	{r4, pc}

000dc6e6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   dc6e6:	b538      	push	{r3, r4, r5, lr}
   dc6e8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   dc6ea:	460c      	mov	r4, r1
   dc6ec:	b141      	cbz	r1, dc700 <_ZN6StringaSEPKc+0x1a>
   dc6ee:	4608      	mov	r0, r1
   dc6f0:	f005 ff10 	bl	e2514 <strlen>
   dc6f4:	4621      	mov	r1, r4
   dc6f6:	4602      	mov	r2, r0
   dc6f8:	4628      	mov	r0, r5
   dc6fa:	f7ff ff8a 	bl	dc612 <_ZN6String4copyEPKcj>
   dc6fe:	e001      	b.n	dc704 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   dc700:	f7ff ff5f 	bl	dc5c2 <_ZN6String10invalidateEv>

	return *this;
}
   dc704:	4628      	mov	r0, r5
   dc706:	bd38      	pop	{r3, r4, r5, pc}

000dc708 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   dc708:	b513      	push	{r0, r1, r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc70a:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
   dc70c:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc710:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dc712:	6043      	str	r3, [r0, #4]
	len = 0;
   dc714:	6083      	str	r3, [r0, #8]
	flags = 0;
   dc716:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
   dc718:	a901      	add	r1, sp, #4
	init();
	move(rval);
}
#endif

String::String(char c)
   dc71a:	4604      	mov	r4, r0
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   dc71c:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   dc720:	f7ff ffe1 	bl	dc6e6 <_ZN6StringaSEPKc>
}
   dc724:	4620      	mov	r0, r4
   dc726:	b002      	add	sp, #8
   dc728:	bd10      	pop	{r4, pc}

000dc72a <_ZN6StringC1Ehh>:

String::String(unsigned char value, unsigned char base)
   dc72a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dc72c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc72e:	2300      	movs	r3, #0
   dc730:	6023      	str	r3, [r4, #0]
	capacity = 0;
   dc732:	6063      	str	r3, [r4, #4]
	len = 0;
   dc734:	60a3      	str	r3, [r4, #8]
	flags = 0;
   dc736:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   dc738:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   dc73a:	a901      	add	r1, sp, #4
   dc73c:	f7ff fc13 	bl	dbf66 <utoa>
	*this = buf;
   dc740:	a901      	add	r1, sp, #4
   dc742:	4620      	mov	r0, r4
   dc744:	f7ff ffcf 	bl	dc6e6 <_ZN6StringaSEPKc>
}
   dc748:	4620      	mov	r0, r4
   dc74a:	b004      	add	sp, #16
   dc74c:	bd10      	pop	{r4, pc}

000dc74e <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   dc74e:	b510      	push	{r4, lr}
   dc750:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc752:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   dc754:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc756:	6023      	str	r3, [r4, #0]
	capacity = 0;
   dc758:	6063      	str	r3, [r4, #4]
	len = 0;
   dc75a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   dc75c:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   dc75e:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   dc760:	a901      	add	r1, sp, #4
   dc762:	f7ff fbea 	bl	dbf3a <itoa>
	*this = buf;
   dc766:	a901      	add	r1, sp, #4
   dc768:	4620      	mov	r0, r4
   dc76a:	f7ff ffbc 	bl	dc6e6 <_ZN6StringaSEPKc>
}
   dc76e:	4620      	mov	r0, r4
   dc770:	b00a      	add	sp, #40	; 0x28
   dc772:	bd10      	pop	{r4, pc}

000dc774 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   dc774:	b510      	push	{r4, lr}
   dc776:	4604      	mov	r4, r0
   dc778:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc77a:	2300      	movs	r3, #0
   dc77c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   dc77e:	6063      	str	r3, [r4, #4]
	len = 0;
   dc780:	60a3      	str	r3, [r4, #8]
	flags = 0;
   dc782:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   dc784:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
   dc786:	2301      	movs	r3, #1
   dc788:	a901      	add	r1, sp, #4
   dc78a:	f7ff fbae 	bl	dbeea <ultoa>
	*this = buf;
   dc78e:	a901      	add	r1, sp, #4
   dc790:	4620      	mov	r0, r4
   dc792:	f7ff ffa8 	bl	dc6e6 <_ZN6StringaSEPKc>
}
   dc796:	4620      	mov	r0, r4
   dc798:	b00a      	add	sp, #40	; 0x28
   dc79a:	bd10      	pop	{r4, pc}

000dc79c <_ZN6StringC1Efi>:

String::String(float value, int decimalPlaces)
   dc79c:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc79e:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   dc7a0:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dc7a2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dc7a4:	6043      	str	r3, [r0, #4]
	len = 0;
   dc7a6:	6083      	str	r3, [r0, #8]
	flags = 0;
   dc7a8:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   dc7aa:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   dc7ac:	ee10 0a10 	vmov	r0, s0
   dc7b0:	b2cd      	uxtb	r5, r1
   dc7b2:	f004 f829 	bl	e0808 <__aeabi_f2d>
   dc7b6:	ec41 0b10 	vmov	d0, r0, r1
   dc7ba:	a901      	add	r1, sp, #4
   dc7bc:	4628      	mov	r0, r5
   dc7be:	f7ff fe95 	bl	dc4ec <_Z4dtoadhPc>
        *this = buf;
   dc7c2:	a901      	add	r1, sp, #4
   dc7c4:	4620      	mov	r0, r4
   dc7c6:	f7ff ff8e 	bl	dc6e6 <_ZN6StringaSEPKc>
}
   dc7ca:	4620      	mov	r0, r4
   dc7cc:	b00b      	add	sp, #44	; 0x2c
   dc7ce:	bd30      	pop	{r4, r5, pc}

000dc7d0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dc7d0:	b570      	push	{r4, r5, r6, lr}
   dc7d2:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dc7d4:	460e      	mov	r6, r1
   dc7d6:	b909      	cbnz	r1, dc7dc <_ZN6String6concatEPKcj+0xc>
   dc7d8:	2000      	movs	r0, #0
   dc7da:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dc7dc:	b16a      	cbz	r2, dc7fa <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   dc7de:	6883      	ldr	r3, [r0, #8]
   dc7e0:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   dc7e2:	4629      	mov	r1, r5
   dc7e4:	f7ff ff04 	bl	dc5f0 <_ZN6String7reserveEj>
   dc7e8:	2800      	cmp	r0, #0
   dc7ea:	d0f5      	beq.n	dc7d8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dc7ec:	6820      	ldr	r0, [r4, #0]
   dc7ee:	68a3      	ldr	r3, [r4, #8]
   dc7f0:	4631      	mov	r1, r6
   dc7f2:	4418      	add	r0, r3
   dc7f4:	f005 f956 	bl	e1aa4 <strcpy>
	len = newlen;
   dc7f8:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   dc7fa:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   dc7fc:	bd70      	pop	{r4, r5, r6, pc}

000dc7fe <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dc7fe:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dc800:	688a      	ldr	r2, [r1, #8]
   dc802:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dc804:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dc806:	f7ff ffe3 	bl	dc7d0 <_ZN6String6concatEPKcj>
   dc80a:	b910      	cbnz	r0, dc812 <_ZplRK15StringSumHelperRK6String+0x14>
   dc80c:	4620      	mov	r0, r4
   dc80e:	f7ff fed8 	bl	dc5c2 <_ZN6String10invalidateEv>
	return a;
}
   dc812:	4620      	mov	r0, r4
   dc814:	bd10      	pop	{r4, pc}

000dc816 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dc816:	b538      	push	{r3, r4, r5, lr}
   dc818:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dc81a:	460d      	mov	r5, r1
   dc81c:	b141      	cbz	r1, dc830 <_ZplRK15StringSumHelperPKc+0x1a>
   dc81e:	4608      	mov	r0, r1
   dc820:	f005 fe78 	bl	e2514 <strlen>
   dc824:	4629      	mov	r1, r5
   dc826:	4602      	mov	r2, r0
   dc828:	4620      	mov	r0, r4
   dc82a:	f7ff ffd1 	bl	dc7d0 <_ZN6String6concatEPKcj>
   dc82e:	b910      	cbnz	r0, dc836 <_ZplRK15StringSumHelperPKc+0x20>
   dc830:	4620      	mov	r0, r4
   dc832:	f7ff fec6 	bl	dc5c2 <_ZN6String10invalidateEv>
	return a;
}
   dc836:	4620      	mov	r0, r4
   dc838:	bd38      	pop	{r3, r4, r5, pc}

000dc83a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   dc83a:	b570      	push	{r4, r5, r6, lr}
   dc83c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   dc83e:	b19a      	cbz	r2, dc868 <_ZNK6String8getBytesEPhjj+0x2e>
   dc840:	b191      	cbz	r1, dc868 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   dc842:	6885      	ldr	r5, [r0, #8]
   dc844:	429d      	cmp	r5, r3
   dc846:	d802      	bhi.n	dc84e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   dc848:	2300      	movs	r3, #0
   dc84a:	700b      	strb	r3, [r1, #0]
		return;
   dc84c:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   dc84e:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   dc850:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   dc852:	6801      	ldr	r1, [r0, #0]
   dc854:	42ac      	cmp	r4, r5
   dc856:	bf28      	it	cs
   dc858:	462c      	movcs	r4, r5
   dc85a:	4419      	add	r1, r3
   dc85c:	4622      	mov	r2, r4
   dc85e:	4630      	mov	r0, r6
   dc860:	f005 fe75 	bl	e254e <strncpy>
	buf[n] = 0;
   dc864:	2300      	movs	r3, #0
   dc866:	5533      	strb	r3, [r6, r4]
   dc868:	bd70      	pop	{r4, r5, r6, pc}
	...

000dc86c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dc86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   dc86e:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dc870:	460f      	mov	r7, r1
   dc872:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dc874:	490c      	ldr	r1, [pc, #48]	; (dc8a8 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   dc876:	bf88      	it	hi
   dc878:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dc87a:	4614      	mov	r4, r2
   dc87c:	4606      	mov	r6, r0
	if (left > right) {
   dc87e:	bf84      	itt	hi
   dc880:	462c      	movhi	r4, r5
   dc882:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dc884:	f7ff fedd 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   dc888:	68ba      	ldr	r2, [r7, #8]
   dc88a:	4294      	cmp	r4, r2
   dc88c:	d80a      	bhi.n	dc8a4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   dc88e:	6839      	ldr	r1, [r7, #0]
   dc890:	4295      	cmp	r5, r2
   dc892:	bf94      	ite	ls
   dc894:	ebc4 0205 	rsbls	r2, r4, r5
   dc898:	ebc4 0202 	rsbhi	r2, r4, r2
   dc89c:	4421      	add	r1, r4
   dc89e:	4630      	mov	r0, r6
   dc8a0:	f7ff feb7 	bl	dc612 <_ZN6String4copyEPKcj>
	return out;
}
   dc8a4:	4630      	mov	r0, r6
   dc8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc8a8:	000e52f7 	.word	0x000e52f7

000dc8ac <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   dc8ac:	b510      	push	{r4, lr}
   dc8ae:	4604      	mov	r4, r0
	return substring(left, len);
   dc8b0:	688b      	ldr	r3, [r1, #8]
   dc8b2:	f7ff ffdb 	bl	dc86c <_ZNK6String9substringEjj>
}
   dc8b6:	4620      	mov	r0, r4
   dc8b8:	bd10      	pop	{r4, pc}

000dc8ba <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   dc8ba:	6800      	ldr	r0, [r0, #0]
   dc8bc:	b108      	cbz	r0, dc8c2 <_ZNK6String5toIntEv+0x8>
   dc8be:	f004 bd32 	b.w	e1326 <atol>
	return 0;
}
   dc8c2:	4770      	bx	lr

000dc8c4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dc8c4:	b40e      	push	{r1, r2, r3}
   dc8c6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   dc8c8:	ac09      	add	r4, sp, #36	; 0x24
   dc8ca:	4605      	mov	r5, r0
   dc8cc:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   dc8d0:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dc8d2:	4623      	mov	r3, r4
   dc8d4:	463a      	mov	r2, r7
   dc8d6:	2105      	movs	r1, #5
   dc8d8:	a802      	add	r0, sp, #8
   dc8da:	f7ff f977 	bl	dbbcc <vsnprintf>
    va_end(marker);

    String result;
   dc8de:	490c      	ldr	r1, [pc, #48]	; (dc910 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dc8e0:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   dc8e2:	4628      	mov	r0, r5
   dc8e4:	f7ff fead 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   dc8e8:	4631      	mov	r1, r6
   dc8ea:	4628      	mov	r0, r5
   dc8ec:	f7ff fe80 	bl	dc5f0 <_ZN6String7reserveEj>
    if (result.buffer) {
   dc8f0:	6828      	ldr	r0, [r5, #0]
   dc8f2:	b130      	cbz	r0, dc902 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dc8f4:	4623      	mov	r3, r4
   dc8f6:	463a      	mov	r2, r7
   dc8f8:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   dc8fa:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dc8fc:	f7ff f966 	bl	dbbcc <vsnprintf>
        va_end(marker);
        result.len = n;
   dc900:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   dc902:	4628      	mov	r0, r5
   dc904:	b004      	add	sp, #16
   dc906:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dc90a:	b003      	add	sp, #12
   dc90c:	4770      	bx	lr
   dc90e:	bf00      	nop
   dc910:	000e52f7 	.word	0x000e52f7

000dc914 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   dc914:	b510      	push	{r4, lr}
   dc916:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   dc918:	6800      	ldr	r0, [r0, #0]
   dc91a:	b108      	cbz	r0, dc920 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   dc91c:	f7fe fea8 	bl	db670 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   dc920:	4620      	mov	r0, r4
   dc922:	bd10      	pop	{r4, pc}

000dc924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   dc924:	680b      	ldr	r3, [r1, #0]
   dc926:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   dc928:	b113      	cbz	r3, dc930 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   dc92a:	685a      	ldr	r2, [r3, #4]
   dc92c:	3201      	adds	r2, #1
   dc92e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   dc930:	4770      	bx	lr
	...

000dc934 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   dc934:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dc936:	4c06      	ldr	r4, [pc, #24]	; (dc950 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   dc938:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   dc93a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dc93c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   dc93e:	f7fe fe8f 	bl	db660 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   dc942:	4620      	mov	r0, r4
   dc944:	4a03      	ldr	r2, [pc, #12]	; (dc954 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   dc946:	4904      	ldr	r1, [pc, #16]	; (dc958 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   dc948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   dc94c:	f001 be68 	b.w	de620 <__aeabi_atexit>
   dc950:	2003e1dc 	.word	0x2003e1dc
   dc954:	2003bc08 	.word	0x2003bc08
   dc958:	000dc915 	.word	0x000dc915

000dc95c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   dc95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc95e:	4606      	mov	r6, r0
   dc960:	460d      	mov	r5, r1
   dc962:	188f      	adds	r7, r1, r2
  size_t n = 0;
   dc964:	2400      	movs	r4, #0
  while (size--) {
   dc966:	42bd      	cmp	r5, r7
   dc968:	d00c      	beq.n	dc984 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   dc96a:	6833      	ldr	r3, [r6, #0]
   dc96c:	f815 1b01 	ldrb.w	r1, [r5], #1
   dc970:	689b      	ldr	r3, [r3, #8]
   dc972:	4630      	mov	r0, r6
   dc974:	4798      	blx	r3
     if (chunk>=0)
   dc976:	2800      	cmp	r0, #0
   dc978:	db01      	blt.n	dc97e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   dc97a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   dc97c:	e7f3      	b.n	dc966 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   dc97e:	2c00      	cmp	r4, #0
   dc980:	bf08      	it	eq
   dc982:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   dc984:	4620      	mov	r0, r4
   dc986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dc988 <_ZN5Print5printEPKc>:
   dc988:	b508      	push	{r3, lr}
   dc98a:	f7fb fa73 	bl	d7e74 <_ZN5Print5writeEPKc>
   dc98e:	bd08      	pop	{r3, pc}

000dc990 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   dc990:	6803      	ldr	r3, [r0, #0]
   dc992:	689b      	ldr	r3, [r3, #8]
   dc994:	4718      	bx	r3

000dc996 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   dc996:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dc998:	f7fb fa6c 	bl	d7e74 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   dc99c:	bd08      	pop	{r3, pc}

000dc99e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   dc99e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   dc9a0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   dc9a2:	4605      	mov	r5, r0
  size_t n = print('\r');
   dc9a4:	f7ff fff4 	bl	dc990 <_ZN5Print5printEc>
  n += print('\n');
   dc9a8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   dc9aa:	4604      	mov	r4, r0
  n += print('\n');
   dc9ac:	4628      	mov	r0, r5
   dc9ae:	f7ff ffef 	bl	dc990 <_ZN5Print5printEc>
  return n;
}
   dc9b2:	4420      	add	r0, r4
   dc9b4:	bd38      	pop	{r3, r4, r5, pc}

000dc9b6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   dc9b6:	b538      	push	{r3, r4, r5, lr}
   dc9b8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dc9ba:	f7fb fa5b 	bl	d7e74 <_ZN5Print5writeEPKc>
   dc9be:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   dc9c0:	4628      	mov	r0, r5
   dc9c2:	f7ff ffec 	bl	dc99e <_ZN5Print7printlnEv>
  return n;
}
   dc9c6:	4420      	add	r0, r4
   dc9c8:	bd38      	pop	{r3, r4, r5, pc}

000dc9ca <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   dc9ca:	f7ff bff4 	b.w	dc9b6 <_ZN5Print7printlnEPKc>

000dc9ce <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dc9ce:	b530      	push	{r4, r5, lr}
   dc9d0:	b08b      	sub	sp, #44	; 0x2c
   dc9d2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dc9d4:	2100      	movs	r1, #0
   dc9d6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dc9da:	2a01      	cmp	r2, #1
   dc9dc:	bf98      	it	ls
   dc9de:	220a      	movls	r2, #10
   dc9e0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   dc9e4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   dc9e8:	fb05 3312 	mls	r3, r5, r2, r3
   dc9ec:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dc9f0:	2b09      	cmp	r3, #9
   dc9f2:	bf94      	ite	ls
   dc9f4:	3330      	addls	r3, #48	; 0x30
   dc9f6:	3337      	addhi	r3, #55	; 0x37
   dc9f8:	b2db      	uxtb	r3, r3
   dc9fa:	4621      	mov	r1, r4
   dc9fc:	f804 3901 	strb.w	r3, [r4], #-1
   dca00:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   dca02:	2d00      	cmp	r5, #0
   dca04:	d1ee      	bne.n	dc9e4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   dca06:	f7fb fa35 	bl	d7e74 <_ZN5Print5writeEPKc>
}
   dca0a:	b00b      	add	sp, #44	; 0x2c
   dca0c:	bd30      	pop	{r4, r5, pc}
	...

000dca10 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   dca10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dca14:	ec57 6b10 	vmov	r6, r7, d0
   dca18:	4682      	mov	sl, r0
   dca1a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   dca1c:	ee10 2a10 	vmov	r2, s0
   dca20:	463b      	mov	r3, r7
   dca22:	ee10 0a10 	vmov	r0, s0
   dca26:	4639      	mov	r1, r7
   dca28:	f004 f9dc 	bl	e0de4 <__aeabi_dcmpun>
   dca2c:	b108      	cbz	r0, dca32 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dca2e:	494e      	ldr	r1, [pc, #312]	; (dcb68 <_ZN5Print10printFloatEdh+0x158>)
   dca30:	e012      	b.n	dca58 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   dca32:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   dca36:	f04f 32ff 	mov.w	r2, #4294967295
   dca3a:	4b4c      	ldr	r3, [pc, #304]	; (dcb6c <_ZN5Print10printFloatEdh+0x15c>)
   dca3c:	4630      	mov	r0, r6
   dca3e:	4649      	mov	r1, r9
   dca40:	f004 f9d0 	bl	e0de4 <__aeabi_dcmpun>
   dca44:	b968      	cbnz	r0, dca62 <_ZN5Print10printFloatEdh+0x52>
   dca46:	f04f 32ff 	mov.w	r2, #4294967295
   dca4a:	4b48      	ldr	r3, [pc, #288]	; (dcb6c <_ZN5Print10printFloatEdh+0x15c>)
   dca4c:	4630      	mov	r0, r6
   dca4e:	4649      	mov	r1, r9
   dca50:	f004 f9aa 	bl	e0da8 <__aeabi_dcmple>
   dca54:	b928      	cbnz	r0, dca62 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dca56:	4946      	ldr	r1, [pc, #280]	; (dcb70 <_ZN5Print10printFloatEdh+0x160>)
   dca58:	4650      	mov	r0, sl
   dca5a:	f7fb fa0b 	bl	d7e74 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   dca5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   dca62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dca66:	4b43      	ldr	r3, [pc, #268]	; (dcb74 <_ZN5Print10printFloatEdh+0x164>)
   dca68:	4630      	mov	r0, r6
   dca6a:	4639      	mov	r1, r7
   dca6c:	f004 f9b0 	bl	e0dd0 <__aeabi_dcmpgt>
   dca70:	b108      	cbz	r0, dca76 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dca72:	4941      	ldr	r1, [pc, #260]	; (dcb78 <_ZN5Print10printFloatEdh+0x168>)
   dca74:	e7f0      	b.n	dca58 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   dca76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   dca7a:	4b40      	ldr	r3, [pc, #256]	; (dcb7c <_ZN5Print10printFloatEdh+0x16c>)
   dca7c:	4630      	mov	r0, r6
   dca7e:	4639      	mov	r1, r7
   dca80:	f004 f988 	bl	e0d94 <__aeabi_dcmplt>
   dca84:	2800      	cmp	r0, #0
   dca86:	d1f4      	bne.n	dca72 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   dca88:	2200      	movs	r2, #0
   dca8a:	2300      	movs	r3, #0
   dca8c:	4630      	mov	r0, r6
   dca8e:	4639      	mov	r1, r7
   dca90:	f004 f980 	bl	e0d94 <__aeabi_dcmplt>
   dca94:	b140      	cbz	r0, dcaa8 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   dca96:	212d      	movs	r1, #45	; 0x2d
   dca98:	4650      	mov	r0, sl
   dca9a:	f7ff ff79 	bl	dc990 <_ZN5Print5printEc>
     number = -number;
   dca9e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   dcaa2:	4604      	mov	r4, r0
     number = -number;
   dcaa4:	461f      	mov	r7, r3
   dcaa6:	e000      	b.n	dcaaa <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   dcaa8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   dcaaa:	4935      	ldr	r1, [pc, #212]	; (dcb80 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   dcaac:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   dcab0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   dcab2:	fa5f f388 	uxtb.w	r3, r8
   dcab6:	429d      	cmp	r5, r3
   dcab8:	d906      	bls.n	dcac8 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   dcaba:	2200      	movs	r2, #0
   dcabc:	4b31      	ldr	r3, [pc, #196]	; (dcb84 <_ZN5Print10printFloatEdh+0x174>)
   dcabe:	f004 f821 	bl	e0b04 <__aeabi_ddiv>
   dcac2:	f108 0801 	add.w	r8, r8, #1
   dcac6:	e7f4      	b.n	dcab2 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   dcac8:	4632      	mov	r2, r6
   dcaca:	463b      	mov	r3, r7
   dcacc:	f003 fd3e 	bl	e054c <__adddf3>
   dcad0:	460f      	mov	r7, r1
   dcad2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   dcad4:	f004 f9c4 	bl	e0e60 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   dcad8:	220a      	movs	r2, #10
   dcada:	4601      	mov	r1, r0
   dcadc:	4680      	mov	r8, r0
   dcade:	4650      	mov	r0, sl
   dcae0:	f7ff ff75 	bl	dc9ce <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   dcae4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   dcae6:	b3e5      	cbz	r5, dcb62 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   dcae8:	4640      	mov	r0, r8
   dcaea:	f003 fe6b 	bl	e07c4 <__aeabi_ui2d>
   dcaee:	4602      	mov	r2, r0
   dcaf0:	460b      	mov	r3, r1
   dcaf2:	4630      	mov	r0, r6
   dcaf4:	4639      	mov	r1, r7
   dcaf6:	f003 fd27 	bl	e0548 <__aeabi_dsub>
   dcafa:	4606      	mov	r6, r0
   dcafc:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dcafe:	4650      	mov	r0, sl
   dcb00:	4921      	ldr	r1, [pc, #132]	; (dcb88 <_ZN5Print10printFloatEdh+0x178>)
   dcb02:	f7fb f9b7 	bl	d7e74 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   dcb06:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   dcb08:	2200      	movs	r2, #0
   dcb0a:	4b1e      	ldr	r3, [pc, #120]	; (dcb84 <_ZN5Print10printFloatEdh+0x174>)
   dcb0c:	4630      	mov	r0, r6
   dcb0e:	4639      	mov	r1, r7
   dcb10:	f003 fece 	bl	e08b0 <__aeabi_dmul>
   dcb14:	4606      	mov	r6, r0
   dcb16:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   dcb18:	f004 f97a 	bl	e0e10 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   dcb1c:	f1b0 0900 	subs.w	r9, r0, #0
   dcb20:	da07      	bge.n	dcb32 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   dcb22:	212d      	movs	r1, #45	; 0x2d
   dcb24:	4650      	mov	r0, sl
   dcb26:	f7ff ff33 	bl	dc990 <_ZN5Print5printEc>
            val = -n;
   dcb2a:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   dcb2e:	4680      	mov	r8, r0
   dcb30:	e002      	b.n	dcb38 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   dcb32:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   dcb34:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   dcb38:	220a      	movs	r2, #10
   dcb3a:	4650      	mov	r0, sl
   dcb3c:	f7ff ff47 	bl	dc9ce <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   dcb40:	4440      	add	r0, r8
   dcb42:	4404      	add	r4, r0
    remainder -= toPrint;
   dcb44:	4648      	mov	r0, r9
   dcb46:	f003 fe4d 	bl	e07e4 <__aeabi_i2d>
   dcb4a:	4602      	mov	r2, r0
   dcb4c:	460b      	mov	r3, r1
   dcb4e:	4630      	mov	r0, r6
   dcb50:	4639      	mov	r1, r7
   dcb52:	f003 fcf9 	bl	e0548 <__aeabi_dsub>
   dcb56:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   dcb58:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   dcb5c:	4606      	mov	r6, r0
   dcb5e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   dcb60:	d1d2      	bne.n	dcb08 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   dcb62:	4620      	mov	r0, r4
   dcb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dcb68:	000e574c 	.word	0x000e574c
   dcb6c:	7fefffff 	.word	0x7fefffff
   dcb70:	000e5754 	.word	0x000e5754
   dcb74:	41efffff 	.word	0x41efffff
   dcb78:	000e5750 	.word	0x000e5750
   dcb7c:	c1efffff 	.word	0xc1efffff
   dcb80:	3fe00000 	.word	0x3fe00000
   dcb84:	40240000 	.word	0x40240000
   dcb88:	000e5272 	.word	0x000e5272

000dcb8c <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   dcb8c:	b538      	push	{r3, r4, r5, lr}
   dcb8e:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   dcb90:	ee10 0a10 	vmov	r0, s0
   dcb94:	b2cd      	uxtb	r5, r1
   dcb96:	f003 fe37 	bl	e0808 <__aeabi_f2d>
   dcb9a:	ec41 0b10 	vmov	d0, r0, r1
   dcb9e:	4629      	mov	r1, r5
   dcba0:	4620      	mov	r0, r4
}
   dcba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   dcba6:	f7ff bf33 	b.w	dca10 <_ZN5Print10printFloatEdh>

000dcbaa <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   dcbaa:	b40c      	push	{r2, r3}
   dcbac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcbb0:	b087      	sub	sp, #28
   dcbb2:	af00      	add	r7, sp, #0
   dcbb4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   dcbb8:	4605      	mov	r5, r0
   dcbba:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   dcbbe:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   dcbc0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   dcbc2:	4623      	mov	r3, r4
   dcbc4:	464a      	mov	r2, r9
   dcbc6:	2114      	movs	r1, #20
   dcbc8:	1d38      	adds	r0, r7, #4
   dcbca:	f7fe ffff 	bl	dbbcc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   dcbce:	2813      	cmp	r0, #19
   dcbd0:	d805      	bhi.n	dcbde <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dcbd2:	1d39      	adds	r1, r7, #4
   dcbd4:	4628      	mov	r0, r5
   dcbd6:	f7fb f94d 	bl	d7e74 <_ZN5Print5writeEPKc>
   dcbda:	4604      	mov	r4, r0
   dcbdc:	e013      	b.n	dcc06 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   dcbde:	f100 0308 	add.w	r3, r0, #8
   dcbe2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   dcbe6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   dcbe8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   dcbec:	1c41      	adds	r1, r0, #1
   dcbee:	4623      	mov	r3, r4
   dcbf0:	464a      	mov	r2, r9
   dcbf2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   dcbf4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   dcbf6:	f7fe ffe9 	bl	dbbcc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   dcbfa:	4669      	mov	r1, sp
   dcbfc:	4628      	mov	r0, r5
   dcbfe:	f7fb f939 	bl	d7e74 <_ZN5Print5writeEPKc>
   dcc02:	4604      	mov	r4, r0
   dcc04:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   dcc06:	b11e      	cbz	r6, dcc10 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   dcc08:	4628      	mov	r0, r5
   dcc0a:	f7ff fec8 	bl	dc99e <_ZN5Print7printlnEv>
   dcc0e:	4404      	add	r4, r0
    return n;
}
   dcc10:	4620      	mov	r0, r4
   dcc12:	371c      	adds	r7, #28
   dcc14:	46bd      	mov	sp, r7
   dcc16:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcc1a:	b002      	add	sp, #8
   dcc1c:	4770      	bx	lr
	...

000dcc20 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   dcc20:	4b01      	ldr	r3, [pc, #4]	; (dcc28 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dcc22:	4a02      	ldr	r2, [pc, #8]	; (dcc2c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dcc24:	601a      	str	r2, [r3, #0]
   dcc26:	4770      	bx	lr
   dcc28:	2003e1e0 	.word	0x2003e1e0
   dcc2c:	000e57cb 	.word	0x000e57cb

000dcc30 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dcc30:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   dcc32:	4b14      	ldr	r3, [pc, #80]	; (dcc84 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dcc34:	4f14      	ldr	r7, [pc, #80]	; (dcc88 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dcc36:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   dcc38:	4b14      	ldr	r3, [pc, #80]	; (dcc8c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dcc3a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   dcc3c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   dcc3e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   dcc40:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   dcc42:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dcc44:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dcc46:	d01b      	beq.n	dcc80 <_ZL22Refresh_UnixTime_Cachel+0x50>
   dcc48:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   dcc4a:	ad01      	add	r5, sp, #4
   dcc4c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   dcc50:	f004 fb7c 	bl	e134c <localtime>
	calendar_time->tm_year += 1900;
   dcc54:	6943      	ldr	r3, [r0, #20]
   dcc56:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   dcc5a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   dcc5c:	4604      	mov	r4, r0
   dcc5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dcc60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dcc62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dcc64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dcc66:	f8d4 e000 	ldr.w	lr, [r4]
   dcc6a:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dcc6e:	ad01      	add	r5, sp, #4
   dcc70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dcc72:	4c07      	ldr	r4, [pc, #28]	; (dcc90 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   dcc74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dcc76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dcc78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dcc7a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dcc7c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   dcc80:	b00b      	add	sp, #44	; 0x2c
   dcc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcc84:	2003e214 	.word	0x2003e214
   dcc88:	2003e210 	.word	0x2003e210
   dcc8c:	2003e20c 	.word	0x2003e20c
   dcc90:	2003e1e4 	.word	0x2003e1e4

000dcc94 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   dcc94:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dcc96:	2000      	movs	r0, #0
   dcc98:	f7fe ff48 	bl	dbb2c <spark_sync_time_pending>
   dcc9c:	b128      	cbz	r0, dccaa <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dcc9e:	f7fe ff2d 	bl	dbafc <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dcca2:	f080 0001 	eor.w	r0, r0, #1
   dcca6:	b2c0      	uxtb	r0, r0
   dcca8:	bd08      	pop	{r3, pc}
   dccaa:	2001      	movs	r0, #1
    }
   dccac:	bd08      	pop	{r3, pc}
	...

000dccb0 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   dccb0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dccb2:	f7ff ffbd 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   dccb6:	4b01      	ldr	r3, [pc, #4]	; (dccbc <_ZN9TimeClass4hourEl+0xc>)
   dccb8:	6898      	ldr	r0, [r3, #8]
   dccba:	bd08      	pop	{r3, pc}
   dccbc:	2003e1e4 	.word	0x2003e1e4

000dccc0 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   dccc0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dccc2:	f7ff ffb5 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   dccc6:	4b01      	ldr	r3, [pc, #4]	; (dcccc <_ZN9TimeClass6minuteEl+0xc>)
   dccc8:	6858      	ldr	r0, [r3, #4]
   dccca:	bd08      	pop	{r3, pc}
   dcccc:	2003e1e4 	.word	0x2003e1e4

000dccd0 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   dccd0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dccd2:	f7ff ffad 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   dccd6:	4b01      	ldr	r3, [pc, #4]	; (dccdc <_ZN9TimeClass6secondEl+0xc>)
   dccd8:	6818      	ldr	r0, [r3, #0]
   dccda:	bd08      	pop	{r3, pc}
   dccdc:	2003e1e4 	.word	0x2003e1e4

000dcce0 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   dcce0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dcce2:	f7ff ffa5 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   dcce6:	4b01      	ldr	r3, [pc, #4]	; (dccec <_ZN9TimeClass3dayEl+0xc>)
   dcce8:	68d8      	ldr	r0, [r3, #12]
   dccea:	bd08      	pop	{r3, pc}
   dccec:	2003e1e4 	.word	0x2003e1e4

000dccf0 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   dccf0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dccf2:	f7ff ff9d 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   dccf6:	4b02      	ldr	r3, [pc, #8]	; (dcd00 <_ZN9TimeClass7weekdayEl+0x10>)
   dccf8:	6998      	ldr	r0, [r3, #24]
}
   dccfa:	3001      	adds	r0, #1
   dccfc:	bd08      	pop	{r3, pc}
   dccfe:	bf00      	nop
   dcd00:	2003e1e4 	.word	0x2003e1e4

000dcd04 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   dcd04:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dcd06:	f7ff ff93 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   dcd0a:	4b02      	ldr	r3, [pc, #8]	; (dcd14 <_ZN9TimeClass5monthEl+0x10>)
   dcd0c:	6918      	ldr	r0, [r3, #16]
}
   dcd0e:	3001      	adds	r0, #1
   dcd10:	bd08      	pop	{r3, pc}
   dcd12:	bf00      	nop
   dcd14:	2003e1e4 	.word	0x2003e1e4

000dcd18 <_ZN9TimeClass4yearEl>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   dcd18:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dcd1a:	f7ff ff89 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_year;
}
   dcd1e:	4b01      	ldr	r3, [pc, #4]	; (dcd24 <_ZN9TimeClass4yearEl+0xc>)
   dcd20:	6958      	ldr	r0, [r3, #20]
   dcd22:	bd08      	pop	{r3, pc}
   dcd24:	2003e1e4 	.word	0x2003e1e4

000dcd28 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dcd28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   dcd2a:	4b0e      	ldr	r3, [pc, #56]	; (dcd64 <_ZN9TimeClass7timeStrEl+0x3c>)
   dcd2c:	681b      	ldr	r3, [r3, #0]
   dcd2e:	4419      	add	r1, r3
   dcd30:	4b0d      	ldr	r3, [pc, #52]	; (dcd68 <_ZN9TimeClass7timeStrEl+0x40>)
   dcd32:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dcd34:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   dcd36:	a802      	add	r0, sp, #8
   dcd38:	4419      	add	r1, r3
   dcd3a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   dcd3e:	f004 fb05 	bl	e134c <localtime>
        char* ascstr = asctime(calendar_time);
   dcd42:	f004 faad 	bl	e12a0 <asctime>
   dcd46:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   dcd48:	f005 fbe4 	bl	e2514 <strlen>
        ascstr[len-1] = 0; // remove final newline
   dcd4c:	4428      	add	r0, r5
   dcd4e:	2300      	movs	r3, #0
   dcd50:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   dcd54:	4629      	mov	r1, r5
   dcd56:	4620      	mov	r0, r4
   dcd58:	f7ff fc73 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
}
   dcd5c:	4620      	mov	r0, r4
   dcd5e:	b003      	add	sp, #12
   dcd60:	bd30      	pop	{r4, r5, pc}
   dcd62:	bf00      	nop
   dcd64:	2003e214 	.word	0x2003e214
   dcd68:	2003e20c 	.word	0x2003e20c

000dcd6c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dcd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcd70:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dcd72:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dcd74:	4607      	mov	r7, r0
   dcd76:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dcd78:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dcd7a:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dcd7c:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dcd7e:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dcd80:	f005 fbe5 	bl	e254e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dcd84:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dcd86:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dcd88:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dcd8c:	f005 fbc2 	bl	e2514 <strlen>
   dcd90:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dcd92:	b925      	cbnz	r5, dcd9e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   dcd94:	4924      	ldr	r1, [pc, #144]	; (dce28 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   dcd96:	a803      	add	r0, sp, #12
   dcd98:	f004 fe84 	bl	e1aa4 <strcpy>
   dcd9c:	e013      	b.n	dcdc6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dcd9e:	213c      	movs	r1, #60	; 0x3c
   dcda0:	fb95 f2f1 	sdiv	r2, r5, r1
   dcda4:	2a00      	cmp	r2, #0
   dcda6:	bfb8      	it	lt
   dcda8:	4252      	neglt	r2, r2
   dcdaa:	fb92 f3f1 	sdiv	r3, r2, r1
   dcdae:	fb01 2213 	mls	r2, r1, r3, r2
   dcdb2:	9200      	str	r2, [sp, #0]
   dcdb4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dcdb8:	4a1c      	ldr	r2, [pc, #112]	; (dce2c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   dcdba:	fb95 f3f3 	sdiv	r3, r5, r3
   dcdbe:	2110      	movs	r1, #16
   dcdc0:	a803      	add	r0, sp, #12
   dcdc2:	f7fe fef3 	bl	dbbac <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dcdc6:	4625      	mov	r5, r4
   dcdc8:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dcdca:	f108 3aff 	add.w	sl, r8, #4294967295
   dcdce:	45b2      	cmp	sl, r6
   dcdd0:	d91b      	bls.n	dce0a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dcdd2:	782b      	ldrb	r3, [r5, #0]
   dcdd4:	2b25      	cmp	r3, #37	; 0x25
   dcdd6:	d116      	bne.n	dce06 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   dcdd8:	786b      	ldrb	r3, [r5, #1]
   dcdda:	2b7a      	cmp	r3, #122	; 0x7a
   dcddc:	d113      	bne.n	dce06 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   dcdde:	a803      	add	r0, sp, #12
   dcde0:	f005 fb98 	bl	e2514 <strlen>
   dcde4:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dcde6:	4430      	add	r0, r6
   dcde8:	ebc6 020a 	rsb	r2, r6, sl
   dcdec:	1ca9      	adds	r1, r5, #2
   dcdee:	4420      	add	r0, r4
   dcdf0:	f004 fbb7 	bl	e1562 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dcdf4:	4642      	mov	r2, r8
   dcdf6:	a903      	add	r1, sp, #12
   dcdf8:	4628      	mov	r0, r5
   dcdfa:	f004 fbb2 	bl	e1562 <memcpy>
            len = strlen(format_str);
   dcdfe:	4620      	mov	r0, r4
   dce00:	f005 fb88 	bl	e2514 <strlen>
   dce04:	4680      	mov	r8, r0
   dce06:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dce08:	e7de      	b.n	dcdc8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   dce0a:	464b      	mov	r3, r9
   dce0c:	4622      	mov	r2, r4
   dce0e:	2132      	movs	r1, #50	; 0x32
   dce10:	a807      	add	r0, sp, #28
   dce12:	f004 fecb 	bl	e1bac <strftime>
    return String(buf);
   dce16:	a907      	add	r1, sp, #28
   dce18:	4638      	mov	r0, r7
   dce1a:	f7ff fc12 	bl	dc642 <_ZN6StringC1EPK19__FlashStringHelper>
}
   dce1e:	4638      	mov	r0, r7
   dce20:	b024      	add	sp, #144	; 0x90
   dce22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dce26:	bf00      	nop
   dce28:	000e61ad 	.word	0x000e61ad
   dce2c:	000e5831 	.word	0x000e5831

000dce30 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   dce30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   dce32:	4605      	mov	r5, r0
   dce34:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   dce36:	461c      	mov	r4, r3
   dce38:	b913      	cbnz	r3, dce40 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   dce3a:	4b12      	ldr	r3, [pc, #72]	; (dce84 <_ZN9TimeClass6formatElPKc+0x54>)
   dce3c:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   dce3e:	b12c      	cbz	r4, dce4c <_ZN9TimeClass6formatElPKc+0x1c>
   dce40:	4b11      	ldr	r3, [pc, #68]	; (dce88 <_ZN9TimeClass6formatElPKc+0x58>)
   dce42:	4620      	mov	r0, r4
   dce44:	6819      	ldr	r1, [r3, #0]
   dce46:	f004 fe23 	bl	e1a90 <strcmp>
   dce4a:	b920      	cbnz	r0, dce56 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   dce4c:	9901      	ldr	r1, [sp, #4]
   dce4e:	4628      	mov	r0, r5
   dce50:	f7ff ff6a 	bl	dcd28 <_ZN9TimeClass7timeStrEl>
   dce54:	e013      	b.n	dce7e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   dce56:	4f0d      	ldr	r7, [pc, #52]	; (dce8c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   dce58:	9a01      	ldr	r2, [sp, #4]
   dce5a:	683b      	ldr	r3, [r7, #0]
   dce5c:	4e0c      	ldr	r6, [pc, #48]	; (dce90 <_ZN9TimeClass6formatElPKc+0x60>)
   dce5e:	441a      	add	r2, r3
   dce60:	6833      	ldr	r3, [r6, #0]
   dce62:	a802      	add	r0, sp, #8
   dce64:	4413      	add	r3, r2
   dce66:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   dce6a:	f004 fa6f 	bl	e134c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dce6e:	683a      	ldr	r2, [r7, #0]
   dce70:	6833      	ldr	r3, [r6, #0]
   dce72:	4601      	mov	r1, r0
   dce74:	4413      	add	r3, r2
   dce76:	4628      	mov	r0, r5
   dce78:	4622      	mov	r2, r4
   dce7a:	f7ff ff77 	bl	dcd6c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   dce7e:	4628      	mov	r0, r5
   dce80:	b003      	add	sp, #12
   dce82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dce84:	2003e208 	.word	0x2003e208
   dce88:	2003bb18 	.word	0x2003bb18
   dce8c:	2003e214 	.word	0x2003e214
   dce90:	2003e20c 	.word	0x2003e20c

000dce94 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   dce94:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   dce96:	2000      	movs	r0, #0
   dce98:	f7fe fb82 	bl	db5a0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   dce9c:	4604      	mov	r4, r0
   dce9e:	b968      	cbnz	r0, dcebc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dcea0:	f7fe fd70 	bl	db984 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dcea4:	2801      	cmp	r0, #1
   dcea6:	d10b      	bne.n	dcec0 <_ZN9TimeClass7isValidEv+0x2c>
   dcea8:	4620      	mov	r0, r4
   dceaa:	f7fe fd9b 	bl	db9e4 <system_thread_get_state>
   dceae:	b938      	cbnz	r0, dcec0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   dceb0:	f7ff fef0 	bl	dcc94 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dceb4:	b930      	cbnz	r0, dcec4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   dceb6:	f7fe fe11 	bl	dbadc <spark_process>
   dceba:	e7f9      	b.n	dceb0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   dcebc:	2001      	movs	r0, #1
   dcebe:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   dcec0:	2000      	movs	r0, #0
   dcec2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   dcec4:	f7ff fee6 	bl	dcc94 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   dcec8:	2000      	movs	r0, #0
   dceca:	f7fe fb69 	bl	db5a0 <HAL_RTC_Time_Is_Valid>
   dcece:	3000      	adds	r0, #0
   dced0:	bf18      	it	ne
   dced2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   dced4:	bd10      	pop	{r4, pc}

000dced6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   dced6:	b508      	push	{r3, lr}
    (void)isValid();
   dced8:	f7ff ffdc 	bl	dce94 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   dcedc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   dcee0:	f7fe bb56 	b.w	db590 <HAL_RTC_Get_UnixTime>

000dcee4 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   dcee4:	b508      	push	{r3, lr}
	return hour(now());
   dcee6:	f7ff fff6 	bl	dced6 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dceea:	f7ff fea1 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   dceee:	4b01      	ldr	r3, [pc, #4]	; (dcef4 <_ZN9TimeClass4hourEv+0x10>)
   dcef0:	6898      	ldr	r0, [r3, #8]
   dcef2:	bd08      	pop	{r3, pc}
   dcef4:	2003e1e4 	.word	0x2003e1e4

000dcef8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   dcef8:	b508      	push	{r3, lr}
	return minute(now());
   dcefa:	f7ff ffec 	bl	dced6 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dcefe:	f7ff fe97 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   dcf02:	4b01      	ldr	r3, [pc, #4]	; (dcf08 <_ZN9TimeClass6minuteEv+0x10>)
   dcf04:	6858      	ldr	r0, [r3, #4]
   dcf06:	bd08      	pop	{r3, pc}
   dcf08:	2003e1e4 	.word	0x2003e1e4

000dcf0c <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   dcf0c:	b508      	push	{r3, lr}
	return second(now());
   dcf0e:	f7ff ffe2 	bl	dced6 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dcf12:	f7ff fe8d 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   dcf16:	4b01      	ldr	r3, [pc, #4]	; (dcf1c <_ZN9TimeClass6secondEv+0x10>)
   dcf18:	6818      	ldr	r0, [r3, #0]
   dcf1a:	bd08      	pop	{r3, pc}
   dcf1c:	2003e1e4 	.word	0x2003e1e4

000dcf20 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   dcf20:	b508      	push	{r3, lr}
	return day(now());
   dcf22:	f7ff ffd8 	bl	dced6 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dcf26:	f7ff fe83 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   dcf2a:	4b01      	ldr	r3, [pc, #4]	; (dcf30 <_ZN9TimeClass3dayEv+0x10>)
   dcf2c:	68d8      	ldr	r0, [r3, #12]
   dcf2e:	bd08      	pop	{r3, pc}
   dcf30:	2003e1e4 	.word	0x2003e1e4

000dcf34 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   dcf34:	b508      	push	{r3, lr}
	return month(now());
   dcf36:	f7ff ffce 	bl	dced6 <_ZN9TimeClass3nowEv>
}
   dcf3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   dcf3e:	f7ff bee1 	b.w	dcd04 <_ZN9TimeClass5monthEl>
	...

000dcf44 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   dcf44:	b508      	push	{r3, lr}
	return year(now());
   dcf46:	f7ff ffc6 	bl	dced6 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dcf4a:	f7ff fe71 	bl	dcc30 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   dcf4e:	4b01      	ldr	r3, [pc, #4]	; (dcf54 <_ZN9TimeClass4yearEv+0x10>)
   dcf50:	6958      	ldr	r0, [r3, #20]
   dcf52:	bd08      	pop	{r3, pc}
   dcf54:	2003e1e4 	.word	0x2003e1e4

000dcf58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dcf58:	4b02      	ldr	r3, [pc, #8]	; (dcf64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dcf5a:	681a      	ldr	r2, [r3, #0]
   dcf5c:	4b02      	ldr	r3, [pc, #8]	; (dcf68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dcf5e:	601a      	str	r2, [r3, #0]
   dcf60:	4770      	bx	lr
   dcf62:	bf00      	nop
   dcf64:	2003bb18 	.word	0x2003bb18
   dcf68:	2003e208 	.word	0x2003e208

000dcf6c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dcf6c:	2100      	movs	r1, #0
   dcf6e:	f7fe bd19 	b.w	db9a4 <system_delay_ms>

000dcf72 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   dcf72:	b510      	push	{r4, lr}
   dcf74:	4604      	mov	r4, r0
   dcf76:	f7f7 f9ba 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
   dcf7a:	4620      	mov	r0, r4
   dcf7c:	bd10      	pop	{r4, pc}

000dcf7e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   dcf7e:	b513      	push	{r0, r1, r4, lr}
   dcf80:	460b      	mov	r3, r1
   dcf82:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dcf84:	c803      	ldmia	r0, {r0, r1}
   dcf86:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   dcf8a:	e893 0003 	ldmia.w	r3, {r0, r1}
   dcf8e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   dcf92:	e89d 0003 	ldmia.w	sp, {r0, r1}
   dcf96:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   dcf9a:	b002      	add	sp, #8
   dcf9c:	bd10      	pop	{r4, pc}
	...

000dcfa0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dcfa0:	4803      	ldr	r0, [pc, #12]	; (dcfb0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   dcfa2:	4a04      	ldr	r2, [pc, #16]	; (dcfb4 <_GLOBAL__sub_I_RGB+0x14>)
   dcfa4:	4904      	ldr	r1, [pc, #16]	; (dcfb8 <_GLOBAL__sub_I_RGB+0x18>)
   dcfa6:	2300      	movs	r3, #0
   dcfa8:	6083      	str	r3, [r0, #8]
   dcfaa:	f001 bb39 	b.w	de620 <__aeabi_atexit>
   dcfae:	bf00      	nop
   dcfb0:	2003e21c 	.word	0x2003e21c
   dcfb4:	2003bc08 	.word	0x2003bc08
   dcfb8:	000dcf73 	.word	0x000dcf73

000dcfbc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   dcfbc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dcfbe:	4b0c      	ldr	r3, [pc, #48]	; (dcff0 <serialEventRun+0x34>)
   dcfc0:	b133      	cbz	r3, dcfd0 <serialEventRun+0x14>
   dcfc2:	f000 fc3f 	bl	dd844 <_Z16_fetch_usbserialv>
   dcfc6:	6803      	ldr	r3, [r0, #0]
   dcfc8:	691b      	ldr	r3, [r3, #16]
   dcfca:	4798      	blx	r3
   dcfcc:	2800      	cmp	r0, #0
   dcfce:	dc09      	bgt.n	dcfe4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   dcfd0:	4b08      	ldr	r3, [pc, #32]	; (dcff4 <serialEventRun+0x38>)
   dcfd2:	b163      	cbz	r3, dcfee <serialEventRun+0x32>
   dcfd4:	f000 fd6c 	bl	ddab0 <_Z22__fetch_global_Serial1v>
   dcfd8:	6803      	ldr	r3, [r0, #0]
   dcfda:	691b      	ldr	r3, [r3, #16]
   dcfdc:	4798      	blx	r3
   dcfde:	2800      	cmp	r0, #0
   dcfe0:	dc03      	bgt.n	dcfea <serialEventRun+0x2e>
   dcfe2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   dcfe4:	f3af 8000 	nop.w
   dcfe8:	e7f2      	b.n	dcfd0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   dcfea:	f3af 8000 	nop.w
   dcfee:	bd08      	pop	{r3, pc}
	...

000dcff8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   dcff8:	b508      	push	{r3, lr}
	serialEventRun();
   dcffa:	f7ff ffdf 	bl	dcfbc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dcffe:	f7fe fabf 	bl	db580 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dd002:	4b01      	ldr	r3, [pc, #4]	; (dd008 <_post_loop+0x10>)
   dd004:	6018      	str	r0, [r3, #0]
   dd006:	bd08      	pop	{r3, pc}
   dd008:	2003e608 	.word	0x2003e608

000dd00c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dd00c:	4802      	ldr	r0, [pc, #8]	; (dd018 <_Z33system_initialize_user_backup_ramv+0xc>)
   dd00e:	4a03      	ldr	r2, [pc, #12]	; (dd01c <_Z33system_initialize_user_backup_ramv+0x10>)
   dd010:	4903      	ldr	r1, [pc, #12]	; (dd020 <_Z33system_initialize_user_backup_ramv+0x14>)
   dd012:	1a12      	subs	r2, r2, r0
   dd014:	f004 baa5 	b.w	e1562 <memcpy>
   dd018:	2003f400 	.word	0x2003f400
   dd01c:	2003f404 	.word	0x2003f404
   dd020:	000e63c8 	.word	0x000e63c8

000dd024 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dd024:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dd026:	2300      	movs	r3, #0
   dd028:	9300      	str	r3, [sp, #0]
   dd02a:	461a      	mov	r2, r3
   dd02c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dd030:	f7fe fcf2 	bl	dba18 <system_ctrl_set_result>
}
   dd034:	b003      	add	sp, #12
   dd036:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dd03c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   dd03c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dd03e:	8843      	ldrh	r3, [r0, #2]
   dd040:	2b0a      	cmp	r3, #10
   dd042:	d008      	beq.n	dd056 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dd044:	2b50      	cmp	r3, #80	; 0x50
   dd046:	d109      	bne.n	dd05c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   dd048:	4b09      	ldr	r3, [pc, #36]	; (dd070 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dd04a:	681b      	ldr	r3, [r3, #0]
   dd04c:	b13b      	cbz	r3, dd05e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   dd04e:	b003      	add	sp, #12
   dd050:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   dd054:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   dd056:	f7ff ffe5 	bl	dd024 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   dd05a:	e006      	b.n	dd06a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dd05c:	2300      	movs	r3, #0
   dd05e:	9300      	str	r3, [sp, #0]
   dd060:	461a      	mov	r2, r3
   dd062:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dd066:	f7fe fcd7 	bl	dba18 <system_ctrl_set_result>
        break;
    }
}
   dd06a:	b003      	add	sp, #12
   dd06c:	f85d fb04 	ldr.w	pc, [sp], #4
   dd070:	2003e22c 	.word	0x2003e22c

000dd074 <module_user_init_hook>:

void module_user_init_hook()
{
   dd074:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dd076:	4c10      	ldr	r4, [pc, #64]	; (dd0b8 <module_user_init_hook+0x44>)
   dd078:	4d10      	ldr	r5, [pc, #64]	; (dd0bc <module_user_init_hook+0x48>)
   dd07a:	6823      	ldr	r3, [r4, #0]
   dd07c:	42ab      	cmp	r3, r5
   dd07e:	4b10      	ldr	r3, [pc, #64]	; (dd0c0 <module_user_init_hook+0x4c>)
   dd080:	bf0c      	ite	eq
   dd082:	2201      	moveq	r2, #1
   dd084:	2200      	movne	r2, #0
   dd086:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dd088:	d002      	beq.n	dd090 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   dd08a:	f7ff ffbf 	bl	dd00c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   dd08e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dd090:	f7fe fa5e 	bl	db550 <HAL_RNG_GetRandomNumber>
   dd094:	4604      	mov	r4, r0
    srand(seed);
   dd096:	f004 fcc5 	bl	e1a24 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dd09a:	4b0a      	ldr	r3, [pc, #40]	; (dd0c4 <module_user_init_hook+0x50>)
   dd09c:	b113      	cbz	r3, dd0a4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   dd09e:	4620      	mov	r0, r4
   dd0a0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dd0a4:	2100      	movs	r1, #0
   dd0a6:	4807      	ldr	r0, [pc, #28]	; (dd0c4 <module_user_init_hook+0x50>)
   dd0a8:	f7fe fd48 	bl	dbb3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dd0ac:	2100      	movs	r1, #0
   dd0ae:	4806      	ldr	r0, [pc, #24]	; (dd0c8 <module_user_init_hook+0x54>)
}
   dd0b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dd0b4:	f7fe bca6 	b.w	dba04 <system_ctrl_set_app_request_handler>
   dd0b8:	2003f400 	.word	0x2003f400
   dd0bc:	9a271c1e 	.word	0x9a271c1e
   dd0c0:	2003e230 	.word	0x2003e230
   dd0c4:	00000000 	.word	0x00000000
   dd0c8:	000dd03d 	.word	0x000dd03d

000dd0cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dd0cc:	4770      	bx	lr

000dd0ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   dd0ce:	2000      	movs	r0, #0
   dd0d0:	4770      	bx	lr

000dd0d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dd0d2:	b510      	push	{r4, lr}
   dd0d4:	2110      	movs	r1, #16
   dd0d6:	4604      	mov	r4, r0
   dd0d8:	f001 fab0 	bl	de63c <_ZdlPvj>
   dd0dc:	4620      	mov	r0, r4
   dd0de:	bd10      	pop	{r4, pc}

000dd0e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   dd0e0:	b508      	push	{r3, lr}
      { delete this; }
   dd0e2:	b108      	cbz	r0, dd0e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   dd0e4:	f7ff fff5 	bl	dd0d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dd0e8:	bd08      	pop	{r3, pc}

000dd0ea <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dd0ea:	2200      	movs	r2, #0
   dd0ec:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dd0ee:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dd0f0:	f64f 729c 	movw	r2, #65436	; 0xff9c
   dd0f4:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dd0f6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   dd0fa:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dd0fc:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd0fe:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   dd100:	680c      	ldr	r4, [r1, #0]
   dd102:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dd104:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   dd106:	bd10      	pop	{r4, pc}

000dd108 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dd108:	b510      	push	{r4, lr}
   dd10a:	4604      	mov	r4, r0
    free((void*)msg_);
   dd10c:	6800      	ldr	r0, [r0, #0]
   dd10e:	f7fe fd25 	bl	dbb5c <free>
}
   dd112:	4620      	mov	r0, r4
   dd114:	bd10      	pop	{r4, pc}

000dd116 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   dd116:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dd118:	68c4      	ldr	r4, [r0, #12]
   dd11a:	b1f4      	cbz	r4, dd15a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   dd11c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dd11e:	2b02      	cmp	r3, #2
   dd120:	d103      	bne.n	dd12a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dd122:	f104 000c 	add.w	r0, r4, #12
   dd126:	f7ff ffef 	bl	dd108 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   dd12a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   dd12c:	b135      	cbz	r5, dd13c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dd12e:	4628      	mov	r0, r5
   dd130:	f7f7 f8dd 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
   dd134:	2110      	movs	r1, #16
   dd136:	4628      	mov	r0, r5
   dd138:	f001 fa80 	bl	de63c <_ZdlPvj>
   dd13c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dd13e:	b135      	cbz	r5, dd14e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dd140:	4628      	mov	r0, r5
   dd142:	f7f7 f8d4 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
   dd146:	2110      	movs	r1, #16
   dd148:	4628      	mov	r0, r5
   dd14a:	f001 fa77 	bl	de63c <_ZdlPvj>
   dd14e:	4620      	mov	r0, r4
   dd150:	2114      	movs	r1, #20
   dd152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dd156:	f001 ba71 	b.w	de63c <_ZdlPvj>
   dd15a:	bd38      	pop	{r3, r4, r5, pc}

000dd15c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   dd15c:	b513      	push	{r0, r1, r4, lr}
   dd15e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dd160:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   dd164:	2300      	movs	r3, #0
   dd166:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dd168:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dd16a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dd16c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dd16e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dd170:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dd172:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dd174:	f7f7 fb1c 	bl	d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd178:	4620      	mov	r0, r4
   dd17a:	b002      	add	sp, #8
   dd17c:	bd10      	pop	{r4, pc}

000dd17e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dd17e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dd180:	460c      	mov	r4, r1
   dd182:	ad02      	add	r5, sp, #8
   dd184:	f854 3b04 	ldr.w	r3, [r4], #4
   dd188:	f845 3d08 	str.w	r3, [r5, #-8]!
   dd18c:	4606      	mov	r6, r0
   dd18e:	460f      	mov	r7, r1
   dd190:	a801      	add	r0, sp, #4
   dd192:	4621      	mov	r1, r4
   dd194:	f7ff fbc6 	bl	dc924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   dd198:	4629      	mov	r1, r5
   dd19a:	4630      	mov	r0, r6
   dd19c:	f7ff ffde 	bl	dd15c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dd1a0:	a801      	add	r0, sp, #4
   dd1a2:	f7f7 fb05 	bl	d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd1a6:	4620      	mov	r0, r4
   dd1a8:	f7f7 fb02 	bl	d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   dd1ac:	4638      	mov	r0, r7
   dd1ae:	2108      	movs	r1, #8
   dd1b0:	f001 fa44 	bl	de63c <_ZdlPvj>
        return p;
    }
   dd1b4:	4630      	mov	r0, r6
   dd1b6:	b003      	add	sp, #12
   dd1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dd1bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dd1bc:	b538      	push	{r3, r4, r5, lr}
   dd1be:	2300      	movs	r3, #0
   dd1c0:	4604      	mov	r4, r0
   dd1c2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd1c4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dd1c6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd1c8:	f7f6 ff67 	bl	d409a <_Znwj>
   dd1cc:	b128      	cbz	r0, dd1da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dd1ce:	2301      	movs	r3, #1
   dd1d0:	6043      	str	r3, [r0, #4]
   dd1d2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   dd1d4:	4b02      	ldr	r3, [pc, #8]	; (dd1e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dd1d6:	6003      	str	r3, [r0, #0]
   dd1d8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd1da:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   dd1dc:	4620      	mov	r0, r4
   dd1de:	bd38      	pop	{r3, r4, r5, pc}
   dd1e0:	000e5860 	.word	0x000e5860

000dd1e4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dd1e4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dd1e6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dd1e8:	b90a      	cbnz	r2, dd1ee <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dd1ea:	f001 fbde 	bl	de9aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd1ee:	68c3      	ldr	r3, [r0, #12]
    }
   dd1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd1f4:	4718      	bx	r3

000dd1f6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dd1f6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dd1f8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dd1fa:	f100 0110 	add.w	r1, r0, #16
   dd1fe:	f7ff fff1 	bl	dd1e4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dd202:	bd08      	pop	{r3, pc}

000dd204 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dd204:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dd206:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dd208:	b90a      	cbnz	r2, dd20e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dd20a:	f001 fbce 	bl	de9aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd20e:	68c3      	ldr	r3, [r0, #12]
    }
   dd210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd214:	4718      	bx	r3

000dd216 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dd216:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dd218:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dd21a:	f100 0110 	add.w	r1, r0, #16
   dd21e:	f7ff fff1 	bl	dd204 <_ZNKSt8functionIFvRKbEEclES1_>
   dd222:	bd08      	pop	{r3, pc}

000dd224 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dd224:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dd226:	2300      	movs	r3, #0
   dd228:	6083      	str	r3, [r0, #8]
   dd22a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dd22c:	4604      	mov	r4, r0
   dd22e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dd230:	b12b      	cbz	r3, dd23e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dd232:	2202      	movs	r2, #2
   dd234:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dd236:	68eb      	ldr	r3, [r5, #12]
   dd238:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dd23a:	68ab      	ldr	r3, [r5, #8]
   dd23c:	60a3      	str	r3, [r4, #8]
	}
    }
   dd23e:	4620      	mov	r0, r4
   dd240:	bd38      	pop	{r3, r4, r5, pc}
	...

000dd244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   dd244:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd246:	b089      	sub	sp, #36	; 0x24
   dd248:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dd24a:	4668      	mov	r0, sp
   dd24c:	f7ff ff4d 	bl	dd0ea <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dd250:	2300      	movs	r3, #0
   dd252:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dd256:	f04f 0202 	mov.w	r2, #2
   dd25a:	e8d4 3f4f 	ldrexb	r3, [r4]
   dd25e:	2b00      	cmp	r3, #0
   dd260:	d103      	bne.n	dd26a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   dd262:	e8c4 2f41 	strexb	r1, r2, [r4]
   dd266:	2900      	cmp	r1, #0
   dd268:	d1f7      	bne.n	dd25a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   dd26a:	d002      	beq.n	dd272 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   dd26c:	f88d 3008 	strb.w	r3, [sp, #8]
   dd270:	e063      	b.n	dd33a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   dd272:	f114 050c 	adds.w	r5, r4, #12
   dd276:	d003      	beq.n	dd280 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   dd278:	4669      	mov	r1, sp
   dd27a:	4628      	mov	r0, r5
   dd27c:	f7ff ff35 	bl	dd0ea <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dd280:	f3bf 8f5f 	dmb	sy
   dd284:	2301      	movs	r3, #1
   dd286:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dd288:	2000      	movs	r0, #0
   dd28a:	f104 0308 	add.w	r3, r4, #8
   dd28e:	f3bf 8f5f 	dmb	sy
   dd292:	e853 6f00 	ldrex	r6, [r3]
   dd296:	e843 0200 	strex	r2, r0, [r3]
   dd29a:	2a00      	cmp	r2, #0
   dd29c:	d1f9      	bne.n	dd292 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   dd29e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dd2a2:	2e00      	cmp	r6, #0
   dd2a4:	d049      	beq.n	dd33a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dd2a6:	f7fe fb8d 	bl	db9c4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dd2aa:	b120      	cbz	r0, dd2b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dd2ac:	4629      	mov	r1, r5
   dd2ae:	4630      	mov	r0, r6
   dd2b0:	f7ff ff98 	bl	dd1e4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dd2b4:	e03a      	b.n	dd32c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dd2b6:	4631      	mov	r1, r6
   dd2b8:	a802      	add	r0, sp, #8
   dd2ba:	f7ff ffb3 	bl	dd224 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dd2be:	68e0      	ldr	r0, [r4, #12]
   dd2c0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dd2c4:	b108      	cbz	r0, dd2ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   dd2c6:	f004 fbf5 	bl	e1ab4 <strdup>
   dd2ca:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dd2cc:	2010      	movs	r0, #16
   dd2ce:	f8ad 501c 	strh.w	r5, [sp, #28]
   dd2d2:	f7f6 fee2 	bl	d409a <_Znwj>
   dd2d6:	4605      	mov	r5, r0
   dd2d8:	b1e8      	cbz	r0, dd316 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dd2da:	2700      	movs	r7, #0
   dd2dc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dd2de:	2018      	movs	r0, #24
   dd2e0:	f7f6 fedb 	bl	d409a <_Znwj>
   dd2e4:	4604      	mov	r4, r0
   dd2e6:	b188      	cbz	r0, dd30c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dd2e8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dd2ea:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dd2ec:	a802      	add	r0, sp, #8
   dd2ee:	f7ff fe46 	bl	dcf7e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd2f2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dd2f4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dd2f6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd2f8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dd2fa:	9204      	str	r2, [sp, #16]
   dd2fc:	a906      	add	r1, sp, #24
   dd2fe:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dd300:	60e3      	str	r3, [r4, #12]
   dd302:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dd306:	9205      	str	r2, [sp, #20]
   dd308:	f7ff feef 	bl	dd0ea <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dd30c:	4b0d      	ldr	r3, [pc, #52]	; (dd344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   dd30e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dd310:	4b0d      	ldr	r3, [pc, #52]	; (dd348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dd312:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dd314:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   dd316:	a806      	add	r0, sp, #24
   dd318:	f7ff fef6 	bl	dd108 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dd31c:	a802      	add	r0, sp, #8
   dd31e:	f7f6 ffe6 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dd322:	2200      	movs	r2, #0
   dd324:	4629      	mov	r1, r5
   dd326:	4809      	ldr	r0, [pc, #36]	; (dd34c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   dd328:	f7fe fb54 	bl	db9d4 <application_thread_invoke>
   dd32c:	4630      	mov	r0, r6
   dd32e:	f7f6 ffde 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dd332:	2110      	movs	r1, #16
   dd334:	4630      	mov	r0, r6
   dd336:	f001 f981 	bl	de63c <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   dd33a:	4668      	mov	r0, sp
   dd33c:	f7ff fee4 	bl	dd108 <_ZN8particle5ErrorD1Ev>
    }
   dd340:	b009      	add	sp, #36	; 0x24
   dd342:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd344:	000dd1f7 	.word	0x000dd1f7
   dd348:	000dd46d 	.word	0x000dd46d
   dd34c:	000ddafd 	.word	0x000ddafd

000dd350 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dd350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd354:	b08b      	sub	sp, #44	; 0x2c
   dd356:	4606      	mov	r6, r0
   dd358:	460f      	mov	r7, r1
   dd35a:	4690      	mov	r8, r2
   dd35c:	4699      	mov	r9, r3
   dd35e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dd362:	f7fe fbcb 	bl	dbafc <spark_cloud_flag_connected>
   dd366:	ad07      	add	r5, sp, #28
    if (!connected()) {
   dd368:	4683      	mov	fp, r0
   dd36a:	bb30      	cbnz	r0, dd3ba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dd36c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dd370:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dd372:	a905      	add	r1, sp, #20
   dd374:	4628      	mov	r0, r5
   dd376:	f8ad 3018 	strh.w	r3, [sp, #24]
   dd37a:	f7ff feb6 	bl	dd0ea <_ZN8particle5ErrorC1EOS0_>
   dd37e:	2014      	movs	r0, #20
   dd380:	f7f6 fe8b 	bl	d409a <_Znwj>
   dd384:	4604      	mov	r4, r0
   dd386:	b158      	cbz	r0, dd3a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dd388:	2302      	movs	r3, #2
   dd38a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dd38c:	2301      	movs	r3, #1
   dd38e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dd390:	f8c0 b004 	str.w	fp, [r0, #4]
   dd394:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   dd398:	4629      	mov	r1, r5
   dd39a:	300c      	adds	r0, #12
   dd39c:	f7ff fea5 	bl	dd0ea <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   dd3a0:	4630      	mov	r0, r6
   dd3a2:	4621      	mov	r1, r4
   dd3a4:	f840 4b04 	str.w	r4, [r0], #4
   dd3a8:	f7ff ff08 	bl	dd1bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dd3ac:	4628      	mov	r0, r5
   dd3ae:	f7ff feab 	bl	dd108 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dd3b2:	a805      	add	r0, sp, #20
   dd3b4:	f7ff fea8 	bl	dd108 <_ZN8particle5ErrorD1Ev>
   dd3b8:	e052      	b.n	dd460 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dd3ba:	2400      	movs	r4, #0
   dd3bc:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dd3be:	2014      	movs	r0, #20
   dd3c0:	606c      	str	r4, [r5, #4]
   dd3c2:	60ac      	str	r4, [r5, #8]
   dd3c4:	9307      	str	r3, [sp, #28]
   dd3c6:	f7f6 fe68 	bl	d409a <_Znwj>
   dd3ca:	4601      	mov	r1, r0
   dd3cc:	b118      	cbz	r0, dd3d6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   dd3ce:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dd3d0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dd3d2:	6044      	str	r4, [r0, #4]
   dd3d4:	6084      	str	r4, [r0, #8]
   dd3d6:	a804      	add	r0, sp, #16
   dd3d8:	9103      	str	r1, [sp, #12]
   dd3da:	f7ff feef 	bl	dd1bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   dd3de:	4b22      	ldr	r3, [pc, #136]	; (dd468 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   dd3e0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dd3e2:	2008      	movs	r0, #8
   dd3e4:	f7f6 fe59 	bl	d409a <_Znwj>
   dd3e8:	4604      	mov	r4, r0
   dd3ea:	b128      	cbz	r0, dd3f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dd3ec:	9b03      	ldr	r3, [sp, #12]
   dd3ee:	f840 3b04 	str.w	r3, [r0], #4
   dd3f2:	a904      	add	r1, sp, #16
   dd3f4:	f7ff fa96 	bl	dc924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dd3f8:	9500      	str	r5, [sp, #0]
   dd3fa:	fa5f f38a 	uxtb.w	r3, sl
   dd3fe:	464a      	mov	r2, r9
   dd400:	4641      	mov	r1, r8
   dd402:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   dd404:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dd406:	f7fe fb89 	bl	dbb1c <spark_send_event>
   dd40a:	b920      	cbnz	r0, dd416 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   dd40c:	9b03      	ldr	r3, [sp, #12]
   dd40e:	785b      	ldrb	r3, [r3, #1]
   dd410:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dd414:	b183      	cbz	r3, dd438 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   dd416:	9b03      	ldr	r3, [sp, #12]
   dd418:	9305      	str	r3, [sp, #20]
   dd41a:	a904      	add	r1, sp, #16
   dd41c:	a806      	add	r0, sp, #24
   dd41e:	f7ff fa81 	bl	dc924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   dd422:	a905      	add	r1, sp, #20
   dd424:	4630      	mov	r0, r6
   dd426:	f7ff fe99 	bl	dd15c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dd42a:	a806      	add	r0, sp, #24
   dd42c:	f7f7 f9c0 	bl	d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd430:	a804      	add	r0, sp, #16
   dd432:	f7f7 f9bd 	bl	d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd436:	e013      	b.n	dd460 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   dd438:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   dd43c:	a905      	add	r1, sp, #20
   dd43e:	a803      	add	r0, sp, #12
   dd440:	9205      	str	r2, [sp, #20]
   dd442:	f8ad 3018 	strh.w	r3, [sp, #24]
   dd446:	f7ff fefd 	bl	dd244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dd44a:	a805      	add	r0, sp, #20
   dd44c:	f7ff fe5c 	bl	dd108 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dd450:	a805      	add	r0, sp, #20
   dd452:	9909      	ldr	r1, [sp, #36]	; 0x24
   dd454:	f7ff fe93 	bl	dd17e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   dd458:	a806      	add	r0, sp, #24
   dd45a:	f7f7 f9a9 	bl	d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd45e:	e7da      	b.n	dd416 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   dd460:	4630      	mov	r0, r6
   dd462:	b00b      	add	sp, #44	; 0x2c
   dd464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd468:	000dd5dd 	.word	0x000dd5dd

000dd46c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dd46c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dd46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd470:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dd472:	d006      	beq.n	dd482 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   dd474:	2a03      	cmp	r2, #3
   dd476:	d017      	beq.n	dd4a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   dd478:	2a01      	cmp	r2, #1
   dd47a:	d122      	bne.n	dd4c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dd47c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dd47e:	6003      	str	r3, [r0, #0]
	      break;
   dd480:	e01f      	b.n	dd4c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dd482:	2018      	movs	r0, #24
   dd484:	680e      	ldr	r6, [r1, #0]
   dd486:	f7f6 fe08 	bl	d409a <_Znwj>
   dd48a:	4605      	mov	r5, r0
   dd48c:	b150      	cbz	r0, dd4a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dd48e:	4631      	mov	r1, r6
   dd490:	f7ff fec8 	bl	dd224 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dd494:	6930      	ldr	r0, [r6, #16]
   dd496:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dd49a:	b108      	cbz	r0, dd4a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   dd49c:	f004 fb0a 	bl	e1ab4 <strdup>
   dd4a0:	6128      	str	r0, [r5, #16]
   dd4a2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dd4a4:	6025      	str	r5, [r4, #0]
   dd4a6:	e00c      	b.n	dd4c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dd4a8:	6804      	ldr	r4, [r0, #0]
   dd4aa:	b154      	cbz	r4, dd4c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   dd4ac:	f104 0010 	add.w	r0, r4, #16
   dd4b0:	f7ff fe2a 	bl	dd108 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dd4b4:	4620      	mov	r0, r4
   dd4b6:	f7f6 ff1a 	bl	d42ee <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dd4ba:	2118      	movs	r1, #24
   dd4bc:	4620      	mov	r0, r4
   dd4be:	f001 f8bd 	bl	de63c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dd4c2:	2000      	movs	r0, #0
   dd4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dd4c6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dd4c6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dd4c8:	2300      	movs	r3, #0
   dd4ca:	6083      	str	r3, [r0, #8]
   dd4cc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dd4ce:	4604      	mov	r4, r0
   dd4d0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dd4d2:	b12b      	cbz	r3, dd4e0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dd4d4:	2202      	movs	r2, #2
   dd4d6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dd4d8:	68eb      	ldr	r3, [r5, #12]
   dd4da:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dd4dc:	68ab      	ldr	r3, [r5, #8]
   dd4de:	60a3      	str	r3, [r4, #8]
	}
    }
   dd4e0:	4620      	mov	r0, r4
   dd4e2:	bd38      	pop	{r3, r4, r5, pc}

000dd4e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dd4e4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dd4e6:	b570      	push	{r4, r5, r6, lr}
   dd4e8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dd4ea:	d006      	beq.n	dd4fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   dd4ec:	2a03      	cmp	r2, #3
   dd4ee:	d011      	beq.n	dd514 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   dd4f0:	2a01      	cmp	r2, #1
   dd4f2:	d118      	bne.n	dd526 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dd4f4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dd4f6:	6003      	str	r3, [r0, #0]
	      break;
   dd4f8:	e015      	b.n	dd526 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dd4fa:	2014      	movs	r0, #20
   dd4fc:	680e      	ldr	r6, [r1, #0]
   dd4fe:	f7f6 fdcc 	bl	d409a <_Znwj>
   dd502:	4605      	mov	r5, r0
   dd504:	b120      	cbz	r0, dd510 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dd506:	4631      	mov	r1, r6
   dd508:	f7ff ffdd 	bl	dd4c6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dd50c:	7c33      	ldrb	r3, [r6, #16]
   dd50e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dd510:	6025      	str	r5, [r4, #0]
   dd512:	e008      	b.n	dd526 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dd514:	6804      	ldr	r4, [r0, #0]
   dd516:	b134      	cbz	r4, dd526 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dd518:	4620      	mov	r0, r4
   dd51a:	f7f6 fee8 	bl	d42ee <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dd51e:	2114      	movs	r1, #20
   dd520:	4620      	mov	r0, r4
   dd522:	f001 f88b 	bl	de63c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dd526:	2000      	movs	r0, #0
   dd528:	bd70      	pop	{r4, r5, r6, pc}
	...

000dd52c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   dd52c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dd52e:	2300      	movs	r3, #0
   dd530:	b087      	sub	sp, #28
   dd532:	460c      	mov	r4, r1
   dd534:	f3bf 8f5f 	dmb	sy
   dd538:	e850 6f00 	ldrex	r6, [r0]
   dd53c:	e840 3200 	strex	r2, r3, [r0]
   dd540:	2a00      	cmp	r2, #0
   dd542:	d1f9      	bne.n	dd538 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   dd544:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dd548:	2e00      	cmp	r6, #0
   dd54a:	d03f      	beq.n	dd5cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dd54c:	4618      	mov	r0, r3
   dd54e:	f7fe fa39 	bl	db9c4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dd552:	4607      	mov	r7, r0
   dd554:	b120      	cbz	r0, dd560 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dd556:	4621      	mov	r1, r4
   dd558:	4630      	mov	r0, r6
   dd55a:	f7ff fe53 	bl	dd204 <_ZNKSt8functionIFvRKbEEclES1_>
   dd55e:	e02e      	b.n	dd5be <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dd560:	4631      	mov	r1, r6
   dd562:	a801      	add	r0, sp, #4
   dd564:	f7ff ffaf 	bl	dd4c6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dd568:	7823      	ldrb	r3, [r4, #0]
   dd56a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dd56e:	2010      	movs	r0, #16
   dd570:	f7f6 fd93 	bl	d409a <_Znwj>
   dd574:	4605      	mov	r5, r0
   dd576:	b1d0      	cbz	r0, dd5ae <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dd578:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dd57a:	2014      	movs	r0, #20
   dd57c:	f7f6 fd8d 	bl	d409a <_Znwj>
   dd580:	4604      	mov	r4, r0
   dd582:	b178      	cbz	r0, dd5a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dd584:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dd586:	4601      	mov	r1, r0
   dd588:	a801      	add	r0, sp, #4
   dd58a:	f7ff fcf8 	bl	dcf7e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd58e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   dd590:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dd592:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd594:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dd596:	9203      	str	r2, [sp, #12]
   dd598:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dd59a:	60e3      	str	r3, [r4, #12]
   dd59c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dd5a0:	9204      	str	r2, [sp, #16]
   dd5a2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dd5a4:	4b0a      	ldr	r3, [pc, #40]	; (dd5d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   dd5a6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dd5a8:	4b0a      	ldr	r3, [pc, #40]	; (dd5d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dd5aa:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dd5ac:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dd5ae:	a801      	add	r0, sp, #4
   dd5b0:	f7f6 fe9d 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dd5b4:	2200      	movs	r2, #0
   dd5b6:	4629      	mov	r1, r5
   dd5b8:	4807      	ldr	r0, [pc, #28]	; (dd5d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   dd5ba:	f7fe fa0b 	bl	db9d4 <application_thread_invoke>
   dd5be:	4630      	mov	r0, r6
   dd5c0:	f7f6 fe95 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dd5c4:	2110      	movs	r1, #16
   dd5c6:	4630      	mov	r0, r6
   dd5c8:	f001 f838 	bl	de63c <_ZdlPvj>
        }
    }
   dd5cc:	b007      	add	sp, #28
   dd5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd5d0:	000dd217 	.word	0x000dd217
   dd5d4:	000dd4e5 	.word	0x000dd4e5
   dd5d8:	000ddafd 	.word	0x000ddafd

000dd5dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dd5dc:	b530      	push	{r4, r5, lr}
   dd5de:	b085      	sub	sp, #20
   dd5e0:	4604      	mov	r4, r0
   dd5e2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dd5e4:	4668      	mov	r0, sp
   dd5e6:	4611      	mov	r1, r2
   dd5e8:	f7ff fdc9 	bl	dd17e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dd5ec:	b17c      	cbz	r4, dd60e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   dd5ee:	b224      	sxth	r4, r4
   dd5f0:	4628      	mov	r0, r5
   dd5f2:	b10d      	cbz	r5, dd5f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   dd5f4:	f004 fa5e 	bl	e1ab4 <strdup>
   dd5f8:	9002      	str	r0, [sp, #8]
   dd5fa:	a902      	add	r1, sp, #8
   dd5fc:	4668      	mov	r0, sp
   dd5fe:	f8ad 400c 	strh.w	r4, [sp, #12]
   dd602:	f7ff fe1f 	bl	dd244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dd606:	a802      	add	r0, sp, #8
   dd608:	f7ff fd7e 	bl	dd108 <_ZN8particle5ErrorD1Ev>
   dd60c:	e01d      	b.n	dd64a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   dd60e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dd610:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dd614:	f04f 0201 	mov.w	r2, #1
   dd618:	e8d0 3f4f 	ldrexb	r3, [r0]
   dd61c:	42a3      	cmp	r3, r4
   dd61e:	d103      	bne.n	dd628 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   dd620:	e8c0 2f41 	strexb	r1, r2, [r0]
   dd624:	2900      	cmp	r1, #0
   dd626:	d1f7      	bne.n	dd618 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   dd628:	d002      	beq.n	dd630 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   dd62a:	f88d 3008 	strb.w	r3, [sp, #8]
   dd62e:	e00c      	b.n	dd64a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   dd630:	f110 010c 	adds.w	r1, r0, #12
   dd634:	f04f 0301 	mov.w	r3, #1
   dd638:	bf18      	it	ne
   dd63a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dd63c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   dd640:	3004      	adds	r0, #4
   dd642:	f800 3c03 	strb.w	r3, [r0, #-3]
   dd646:	f7ff ff71 	bl	dd52c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   dd64a:	a801      	add	r0, sp, #4
   dd64c:	f7f7 f8b0 	bl	d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   dd650:	b005      	add	sp, #20
   dd652:	bd30      	pop	{r4, r5, pc}

000dd654 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dd654:	4770      	bx	lr

000dd656 <_ZN9IPAddressD0Ev>:
   dd656:	b510      	push	{r4, lr}
   dd658:	2118      	movs	r1, #24
   dd65a:	4604      	mov	r4, r0
   dd65c:	f000 ffee 	bl	de63c <_ZdlPvj>
   dd660:	4620      	mov	r0, r4
   dd662:	bd10      	pop	{r4, pc}

000dd664 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dd664:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dd666:	7d03      	ldrb	r3, [r0, #20]
   dd668:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dd66a:	b08d      	sub	sp, #52	; 0x34
   dd66c:	460e      	mov	r6, r1
   dd66e:	f100 0704 	add.w	r7, r0, #4
   dd672:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dd676:	d002      	beq.n	dd67e <_ZNK9IPAddress7printToER5Print+0x1a>
   dd678:	f100 0508 	add.w	r5, r0, #8
   dd67c:	e018      	b.n	dd6b0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dd67e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dd680:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   dd682:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dd686:	232f      	movs	r3, #47	; 0x2f
   dd688:	462a      	mov	r2, r5
   dd68a:	200a      	movs	r0, #10
   dd68c:	f7fe f800 	bl	db690 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   dd690:	4628      	mov	r0, r5
   dd692:	f004 ff3f 	bl	e2514 <strlen>
   dd696:	6833      	ldr	r3, [r6, #0]
   dd698:	4602      	mov	r2, r0
   dd69a:	68db      	ldr	r3, [r3, #12]
   dd69c:	4629      	mov	r1, r5
   dd69e:	4630      	mov	r0, r6
   dd6a0:	4798      	blx	r3
   dd6a2:	e00f      	b.n	dd6c4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   dd6a4:	b124      	cbz	r4, dd6b0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   dd6a6:	212e      	movs	r1, #46	; 0x2e
   dd6a8:	4630      	mov	r0, r6
   dd6aa:	f7ff f971 	bl	dc990 <_ZN5Print5printEc>
   dd6ae:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   dd6b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   dd6b4:	220a      	movs	r2, #10
   dd6b6:	4630      	mov	r0, r6
   dd6b8:	f7ff f989 	bl	dc9ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dd6bc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dd6be:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   dd6c0:	d1f0      	bne.n	dd6a4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   dd6c2:	4620      	mov	r0, r4
    }
    return n;
}
   dd6c4:	b00d      	add	sp, #52	; 0x34
   dd6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dd6c8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   dd6c8:	b510      	push	{r4, lr}
   dd6ca:	4b05      	ldr	r3, [pc, #20]	; (dd6e0 <_ZN9IPAddressC1Ev+0x18>)
   dd6cc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dd6ce:	2211      	movs	r2, #17
   dd6d0:	f840 3b04 	str.w	r3, [r0], #4
   dd6d4:	2100      	movs	r1, #0
   dd6d6:	f003 ff4f 	bl	e1578 <memset>
{
    clear();
}
   dd6da:	4620      	mov	r0, r4
   dd6dc:	bd10      	pop	{r4, pc}
   dd6de:	bf00      	nop
   dd6e0:	000e587c 	.word	0x000e587c

000dd6e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   dd6e4:	4603      	mov	r3, r0
   dd6e6:	4a07      	ldr	r2, [pc, #28]	; (dd704 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dd6e8:	b510      	push	{r4, lr}
   dd6ea:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   dd6ee:	f101 0210 	add.w	r2, r1, #16
   dd6f2:	f851 4b04 	ldr.w	r4, [r1], #4
   dd6f6:	f843 4b04 	str.w	r4, [r3], #4
   dd6fa:	4291      	cmp	r1, r2
   dd6fc:	d1f9      	bne.n	dd6f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dd6fe:	780a      	ldrb	r2, [r1, #0]
   dd700:	701a      	strb	r2, [r3, #0]
}
   dd702:	bd10      	pop	{r4, pc}
   dd704:	000e587c 	.word	0x000e587c

000dd708 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   dd708:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   dd70a:	2b04      	cmp	r3, #4
   dd70c:	d101      	bne.n	dd712 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   dd70e:	6840      	ldr	r0, [r0, #4]
   dd710:	e008      	b.n	dd724 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   dd712:	2b06      	cmp	r3, #6
   dd714:	d10a      	bne.n	dd72c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dd716:	6843      	ldr	r3, [r0, #4]
   dd718:	b953      	cbnz	r3, dd730 <_ZNK9IPAddresscvbEv+0x28>
   dd71a:	6883      	ldr	r3, [r0, #8]
   dd71c:	b943      	cbnz	r3, dd730 <_ZNK9IPAddresscvbEv+0x28>
   dd71e:	68c3      	ldr	r3, [r0, #12]
   dd720:	b933      	cbnz	r3, dd730 <_ZNK9IPAddresscvbEv+0x28>
   dd722:	6900      	ldr	r0, [r0, #16]
   dd724:	3000      	adds	r0, #0
   dd726:	bf18      	it	ne
   dd728:	2001      	movne	r0, #1
   dd72a:	4770      	bx	lr
    } else {
        return false;
   dd72c:	2000      	movs	r0, #0
   dd72e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dd730:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   dd732:	4770      	bx	lr

000dd734 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   dd734:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dd736:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dd73a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dd73e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dd742:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   dd746:	2304      	movs	r3, #4
   dd748:	6041      	str	r1, [r0, #4]
   dd74a:	7503      	strb	r3, [r0, #20]
   dd74c:	bd10      	pop	{r4, pc}
	...

000dd750 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   dd750:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dd752:	4d04      	ldr	r5, [pc, #16]	; (dd764 <_ZN9IPAddressC1Ehhhh+0x14>)
   dd754:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   dd756:	f89d 5018 	ldrb.w	r5, [sp, #24]
   dd75a:	9500      	str	r5, [sp, #0]
   dd75c:	f7ff ffea 	bl	dd734 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   dd760:	b003      	add	sp, #12
   dd762:	bd30      	pop	{r4, r5, pc}
   dd764:	000e587c 	.word	0x000e587c

000dd768 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   dd768:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dd76a:	780d      	ldrb	r5, [r1, #0]
   dd76c:	788b      	ldrb	r3, [r1, #2]
   dd76e:	784a      	ldrb	r2, [r1, #1]
   dd770:	78c9      	ldrb	r1, [r1, #3]
   dd772:	9100      	str	r1, [sp, #0]
   dd774:	4629      	mov	r1, r5
   dd776:	f7ff ffdd 	bl	dd734 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   dd77a:	b003      	add	sp, #12
   dd77c:	bd30      	pop	{r4, r5, pc}

000dd77e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dd77e:	7441      	strb	r1, [r0, #17]
   dd780:	4770      	bx	lr

000dd782 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dd782:	4770      	bx	lr

000dd784 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   dd784:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dd786:	2100      	movs	r1, #0
   dd788:	7c00      	ldrb	r0, [r0, #16]
   dd78a:	f7fe f8c9 	bl	db920 <HAL_USB_USART_Receive_Data>
}
   dd78e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dd792:	bf28      	it	cs
   dd794:	f04f 30ff 	movcs.w	r0, #4294967295
   dd798:	bd08      	pop	{r3, pc}

000dd79a <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   dd79a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dd79c:	2101      	movs	r1, #1
   dd79e:	7c00      	ldrb	r0, [r0, #16]
   dd7a0:	f7fe f8be 	bl	db920 <HAL_USB_USART_Receive_Data>
}
   dd7a4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dd7a8:	bf28      	it	cs
   dd7aa:	f04f 30ff 	movcs.w	r0, #4294967295
   dd7ae:	bd08      	pop	{r3, pc}

000dd7b0 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   dd7b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dd7b2:	7c00      	ldrb	r0, [r0, #16]
   dd7b4:	f7fe f8ac 	bl	db910 <HAL_USB_USART_Available_Data_For_Write>
}
   dd7b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dd7bc:	bd08      	pop	{r3, pc}

000dd7be <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   dd7be:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dd7c0:	7c00      	ldrb	r0, [r0, #16]
   dd7c2:	f7fe f89d 	bl	db900 <HAL_USB_USART_Available_Data>
}
   dd7c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dd7ca:	bd08      	pop	{r3, pc}

000dd7cc <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   dd7cc:	7c00      	ldrb	r0, [r0, #16]
   dd7ce:	f7fe b8b7 	b.w	db940 <HAL_USB_USART_Flush_Data>

000dd7d2 <_ZN9USBSerialD0Ev>:
   dd7d2:	b510      	push	{r4, lr}
   dd7d4:	2114      	movs	r1, #20
   dd7d6:	4604      	mov	r4, r0
   dd7d8:	f000 ff30 	bl	de63c <_ZdlPvj>
   dd7dc:	4620      	mov	r0, r4
   dd7de:	bd10      	pop	{r4, pc}

000dd7e0 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dd7e0:	b538      	push	{r3, r4, r5, lr}
   dd7e2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dd7e4:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dd7e6:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dd7e8:	f7fe f892 	bl	db910 <HAL_USB_USART_Available_Data_For_Write>
   dd7ec:	2800      	cmp	r0, #0
   dd7ee:	dc01      	bgt.n	dd7f4 <_ZN9USBSerial5writeEh+0x14>
   dd7f0:	7c60      	ldrb	r0, [r4, #17]
   dd7f2:	b128      	cbz	r0, dd800 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dd7f4:	4629      	mov	r1, r5
   dd7f6:	7c20      	ldrb	r0, [r4, #16]
   dd7f8:	f7fe f89a 	bl	db930 <HAL_USB_USART_Send_Data>
   dd7fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   dd800:	bd38      	pop	{r3, r4, r5, pc}
	...

000dd804 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dd804:	b510      	push	{r4, lr}
   dd806:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dd808:	2300      	movs	r3, #0
   dd80a:	6063      	str	r3, [r4, #4]
   dd80c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dd810:	60a3      	str	r3, [r4, #8]
   dd812:	4b05      	ldr	r3, [pc, #20]	; (dd828 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dd814:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   dd816:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dd818:	4608      	mov	r0, r1
{
  _serial = serial;
   dd81a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   dd81c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   dd81e:	4611      	mov	r1, r2
   dd820:	f7fe f85e 	bl	db8e0 <HAL_USB_USART_Init>
}
   dd824:	4620      	mov	r0, r4
   dd826:	bd10      	pop	{r4, pc}
   dd828:	000e5890 	.word	0x000e5890

000dd82c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dd82c:	2200      	movs	r2, #0
   dd82e:	7c00      	ldrb	r0, [r0, #16]
   dd830:	f7fe b85e 	b.w	db8f0 <HAL_USB_USART_Begin>

000dd834 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dd834:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dd836:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dd838:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dd83a:	2100      	movs	r1, #0
   dd83c:	f003 fe9c 	bl	e1578 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   dd840:	4620      	mov	r0, r4
   dd842:	bd10      	pop	{r4, pc}

000dd844 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   dd844:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dd846:	4d0e      	ldr	r5, [pc, #56]	; (dd880 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   dd848:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dd84a:	a801      	add	r0, sp, #4
   dd84c:	f7ff fff2 	bl	dd834 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dd850:	6829      	ldr	r1, [r5, #0]
   dd852:	f011 0401 	ands.w	r4, r1, #1
   dd856:	d110      	bne.n	dd87a <_Z16_fetch_usbserialv+0x36>
   dd858:	4628      	mov	r0, r5
   dd85a:	f7f6 fc26 	bl	d40aa <__cxa_guard_acquire>
   dd85e:	b160      	cbz	r0, dd87a <_Z16_fetch_usbserialv+0x36>
   dd860:	aa01      	add	r2, sp, #4
   dd862:	4621      	mov	r1, r4
   dd864:	4807      	ldr	r0, [pc, #28]	; (dd884 <_Z16_fetch_usbserialv+0x40>)
   dd866:	f7ff ffcd 	bl	dd804 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dd86a:	4628      	mov	r0, r5
   dd86c:	f7f6 fc22 	bl	d40b4 <__cxa_guard_release>
   dd870:	4a05      	ldr	r2, [pc, #20]	; (dd888 <_Z16_fetch_usbserialv+0x44>)
   dd872:	4906      	ldr	r1, [pc, #24]	; (dd88c <_Z16_fetch_usbserialv+0x48>)
   dd874:	4803      	ldr	r0, [pc, #12]	; (dd884 <_Z16_fetch_usbserialv+0x40>)
   dd876:	f000 fed3 	bl	de620 <__aeabi_atexit>
	return _usbserial;
}
   dd87a:	4802      	ldr	r0, [pc, #8]	; (dd884 <_Z16_fetch_usbserialv+0x40>)
   dd87c:	b007      	add	sp, #28
   dd87e:	bd30      	pop	{r4, r5, pc}
   dd880:	2003e234 	.word	0x2003e234
   dd884:	2003e238 	.word	0x2003e238
   dd888:	2003bc08 	.word	0x2003bc08
   dd88c:	000dd783 	.word	0x000dd783

000dd890 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dd890:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   dd892:	b510      	push	{r4, lr}
   dd894:	b90a      	cbnz	r2, dd89a <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   dd896:	f001 f888 	bl	de9aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd89a:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   dd89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   dd8a0:	4718      	bx	r3

000dd8a2 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dd8a2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dd8a4:	2300      	movs	r3, #0
   dd8a6:	6083      	str	r3, [r0, #8]
   dd8a8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dd8aa:	4604      	mov	r4, r0
   dd8ac:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dd8ae:	b12b      	cbz	r3, dd8bc <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dd8b0:	2202      	movs	r2, #2
   dd8b2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dd8b4:	68eb      	ldr	r3, [r5, #12]
   dd8b6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dd8b8:	68ab      	ldr	r3, [r5, #8]
   dd8ba:	60a3      	str	r3, [r4, #8]
	}
    }
   dd8bc:	4620      	mov	r0, r4
   dd8be:	bd38      	pop	{r3, r4, r5, pc}

000dd8c0 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   dd8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   dd8c2:	4b0d      	ldr	r3, [pc, #52]	; (dd8f8 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
   dd8c4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   dd8c8:	4606      	mov	r6, r0
   dd8ca:	460f      	mov	r7, r1
   dd8cc:	461c      	mov	r4, r3
    delete handlers[pin];
   dd8ce:	b135      	cbz	r5, dd8de <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dd8d0:	4628      	mov	r0, r5
   dd8d2:	f7f6 fd0c 	bl	d42ee <_ZNSt14_Function_baseD1Ev>
   dd8d6:	2110      	movs	r1, #16
   dd8d8:	4628      	mov	r0, r5
   dd8da:	f000 feaf 	bl	de63c <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   dd8de:	2010      	movs	r0, #16
   dd8e0:	f7f6 fbdb 	bl	d409a <_Znwj>
   dd8e4:	4605      	mov	r5, r0
   dd8e6:	b110      	cbz	r0, dd8ee <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
   dd8e8:	4639      	mov	r1, r7
   dd8ea:	f7ff ffda 	bl	dd8a2 <_ZNSt8functionIFvvEEC1ERKS1_>
   dd8ee:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
   dd8f2:	4628      	mov	r0, r5
   dd8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd8f6:	bf00      	nop
   dd8f8:	2003e24c 	.word	0x2003e24c

000dd8fc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   dd8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd8fe:	460c      	mov	r4, r1
   dd900:	b085      	sub	sp, #20
   dd902:	4605      	mov	r5, r0
   dd904:	4617      	mov	r7, r2
   dd906:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   dd908:	f7fd fdba 	bl	db480 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   dd90c:	4621      	mov	r1, r4
   dd90e:	4628      	mov	r0, r5
   dd910:	f7ff ffd6 	bl	dd8c0 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   dd914:	4604      	mov	r4, r0
   dd916:	b1c8      	cbz	r0, dd94c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
        HAL_InterruptExtraConfiguration extra = {0};
   dd918:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dd91a:	2304      	movs	r3, #4
  if (priority >= 0) {
   dd91c:	428e      	cmp	r6, r1
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
   dd91e:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   dd920:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   dd924:	bfa5      	ittet	ge
   dd926:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   dd92a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   dd92e:	460b      	movlt	r3, r1
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   dd930:	ab03      	addge	r3, sp, #12
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dd932:	9300      	str	r3, [sp, #0]
   dd934:	4602      	mov	r2, r0
   dd936:	463b      	mov	r3, r7
   dd938:	4907      	ldr	r1, [pc, #28]	; (dd958 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x5c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   dd93a:	bfa8      	it	ge
   dd93c:	f88d 600d 	strbge.w	r6, [sp, #13]
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   dd940:	4628      	mov	r0, r5
   dd942:	f7fd fd95 	bl	db470 <HAL_Interrupts_Attach>
   dd946:	b108      	cbz	r0, dd94c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
            return false;
   dd948:	2000      	movs	r0, #0
   dd94a:	e002      	b.n	dd952 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x56>
        }
    }
    return handler!=NULL;
   dd94c:	1c20      	adds	r0, r4, #0
   dd94e:	bf18      	it	ne
   dd950:	2001      	movne	r0, #1
}
   dd952:	b005      	add	sp, #20
   dd954:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd956:	bf00      	nop
   dd958:	000dd891 	.word	0x000dd891

000dd95c <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dd95c:	2200      	movs	r2, #0
   dd95e:	4611      	mov	r1, r2
   dd960:	6840      	ldr	r0, [r0, #4]
   dd962:	f7fe b89b 	b.w	dba9c <network_listening>

000dd966 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dd966:	2200      	movs	r2, #0
   dd968:	4611      	mov	r1, r2
   dd96a:	6840      	ldr	r0, [r0, #4]
   dd96c:	f7fe b8a6 	b.w	dbabc <network_get_listen_timeout>

000dd970 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dd970:	2200      	movs	r2, #0
   dd972:	6840      	ldr	r0, [r0, #4]
   dd974:	f7fe b89a 	b.w	dbaac <network_set_listen_timeout>

000dd978 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dd978:	2200      	movs	r2, #0
   dd97a:	f081 0101 	eor.w	r1, r1, #1
   dd97e:	6840      	ldr	r0, [r0, #4]
   dd980:	f7fe b884 	b.w	dba8c <network_listen>

000dd984 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   dd984:	2300      	movs	r3, #0
   dd986:	461a      	mov	r2, r3
   dd988:	4619      	mov	r1, r3
   dd98a:	6840      	ldr	r0, [r0, #4]
   dd98c:	f7fe b876 	b.w	dba7c <network_off>

000dd990 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   dd990:	2300      	movs	r3, #0
   dd992:	461a      	mov	r2, r3
   dd994:	4619      	mov	r1, r3
   dd996:	6840      	ldr	r0, [r0, #4]
   dd998:	f7fe b868 	b.w	dba6c <network_on>

000dd99c <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dd99c:	2200      	movs	r2, #0
   dd99e:	4611      	mov	r1, r2
   dd9a0:	6840      	ldr	r0, [r0, #4]
   dd9a2:	f7fe b84b 	b.w	dba3c <network_connecting>

000dd9a6 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dd9a6:	2200      	movs	r2, #0
   dd9a8:	2102      	movs	r1, #2
   dd9aa:	6840      	ldr	r0, [r0, #4]
   dd9ac:	f7fe b84e 	b.w	dba4c <network_disconnect>

000dd9b0 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dd9b0:	2300      	movs	r3, #0
   dd9b2:	461a      	mov	r2, r3
   dd9b4:	6840      	ldr	r0, [r0, #4]
   dd9b6:	f7fe b839 	b.w	dba2c <network_connect>
	...

000dd9bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   dd9bc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   dd9be:	4c08      	ldr	r4, [pc, #32]	; (dd9e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   dd9c0:	2528      	movs	r5, #40	; 0x28
   dd9c2:	462a      	mov	r2, r5
   dd9c4:	2100      	movs	r1, #0
   dd9c6:	4620      	mov	r0, r4
   dd9c8:	f003 fdd6 	bl	e1578 <memset>
        cid = -1;
   dd9cc:	f04f 33ff 	mov.w	r3, #4294967295
   dd9d0:	6063      	str	r3, [r4, #4]
   dd9d2:	4b04      	ldr	r3, [pc, #16]	; (dd9e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   dd9d4:	8025      	strh	r5, [r4, #0]
   dd9d6:	2204      	movs	r2, #4
   dd9d8:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   dd9da:	4a03      	ldr	r2, [pc, #12]	; (dd9e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   dd9dc:	601a      	str	r2, [r3, #0]
   dd9de:	bd38      	pop	{r3, r4, r5, pc}
   dd9e0:	2003e2e4 	.word	0x2003e2e4
   dd9e4:	2003e2dc 	.word	0x2003e2dc
   dd9e8:	000e58c0 	.word	0x000e58c0

000dd9ec <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   dd9ec:	4770      	bx	lr

000dd9ee <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dd9ee:	7441      	strb	r1, [r0, #17]
   dd9f0:	4770      	bx	lr

000dd9f2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   dd9f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   dd9f4:	7c00      	ldrb	r0, [r0, #16]
   dd9f6:	f7fd feab 	bl	db750 <HAL_USART_Available_Data_For_Write>
}
   dd9fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dd9fe:	bd08      	pop	{r3, pc}

000dda00 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   dda00:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   dda02:	7c00      	ldrb	r0, [r0, #16]
   dda04:	f7fd fe7c 	bl	db700 <HAL_USART_Available_Data>
}
   dda08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dda0c:	bd08      	pop	{r3, pc}

000dda0e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   dda0e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   dda10:	7c00      	ldrb	r0, [r0, #16]
   dda12:	f7fd fe85 	bl	db720 <HAL_USART_Peek_Data>
}
   dda16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dda1a:	bf28      	it	cs
   dda1c:	f04f 30ff 	movcs.w	r0, #4294967295
   dda20:	bd08      	pop	{r3, pc}

000dda22 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   dda22:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   dda24:	7c00      	ldrb	r0, [r0, #16]
   dda26:	f7fd fe73 	bl	db710 <HAL_USART_Read_Data>
}
   dda2a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dda2e:	bf28      	it	cs
   dda30:	f04f 30ff 	movcs.w	r0, #4294967295
   dda34:	bd08      	pop	{r3, pc}

000dda36 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   dda36:	7c00      	ldrb	r0, [r0, #16]
   dda38:	f7fd be7a 	b.w	db730 <HAL_USART_Flush_Data>

000dda3c <_ZN11USARTSerialD0Ev>:
   dda3c:	b510      	push	{r4, lr}
   dda3e:	2114      	movs	r1, #20
   dda40:	4604      	mov	r4, r0
   dda42:	f000 fdfb 	bl	de63c <_ZdlPvj>
   dda46:	4620      	mov	r0, r4
   dda48:	bd10      	pop	{r4, pc}

000dda4a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   dda4a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dda4c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   dda4e:	4604      	mov	r4, r0
   dda50:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dda52:	b925      	cbnz	r5, dda5e <_ZN11USARTSerial5writeEh+0x14>
   dda54:	7c00      	ldrb	r0, [r0, #16]
   dda56:	f7fd fe7b 	bl	db750 <HAL_USART_Available_Data_For_Write>
   dda5a:	2800      	cmp	r0, #0
   dda5c:	dd05      	ble.n	dda6a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dda5e:	4631      	mov	r1, r6
   dda60:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   dda62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dda66:	f7fd be43 	b.w	db6f0 <HAL_USART_Write_Data>
  }
  return 0;
}
   dda6a:	4628      	mov	r0, r5
   dda6c:	bd70      	pop	{r4, r5, r6, pc}
	...

000dda70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   dda70:	b510      	push	{r4, lr}
   dda72:	4604      	mov	r4, r0
   dda74:	4608      	mov	r0, r1
   dda76:	4611      	mov	r1, r2
   dda78:	2200      	movs	r2, #0
   dda7a:	6062      	str	r2, [r4, #4]
   dda7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dda80:	60a2      	str	r2, [r4, #8]
   dda82:	4a05      	ldr	r2, [pc, #20]	; (dda98 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   dda84:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   dda86:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   dda88:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   dda8a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   dda8c:	461a      	mov	r2, r3
   dda8e:	f7fd fe1f 	bl	db6d0 <HAL_USART_Init>
}
   dda92:	4620      	mov	r0, r4
   dda94:	bd10      	pop	{r4, pc}
   dda96:	bf00      	nop
   dda98:	000e58f4 	.word	0x000e58f4

000dda9c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   dda9c:	2300      	movs	r3, #0
   dda9e:	7c00      	ldrb	r0, [r0, #16]
   ddaa0:	f7fd be5e 	b.w	db760 <HAL_USART_BeginConfig>

000ddaa4 <_ZN11USARTSerial3endEv>:
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   ddaa4:	7c00      	ldrb	r0, [r0, #16]
   ddaa6:	f7fd be1b 	b.w	db6e0 <HAL_USART_End>

000ddaaa <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   ddaaa:	7c00      	ldrb	r0, [r0, #16]
   ddaac:	f7fd be48 	b.w	db740 <HAL_USART_Is_Enabled>

000ddab0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   ddab0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   ddab2:	4d0c      	ldr	r5, [pc, #48]	; (ddae4 <_Z22__fetch_global_Serial1v+0x34>)
   ddab4:	6829      	ldr	r1, [r5, #0]
   ddab6:	f011 0401 	ands.w	r4, r1, #1
   ddaba:	d111      	bne.n	ddae0 <_Z22__fetch_global_Serial1v+0x30>
   ddabc:	4628      	mov	r0, r5
   ddabe:	f7f6 faf4 	bl	d40aa <__cxa_guard_acquire>
   ddac2:	b168      	cbz	r0, ddae0 <_Z22__fetch_global_Serial1v+0x30>
   ddac4:	4a08      	ldr	r2, [pc, #32]	; (ddae8 <_Z22__fetch_global_Serial1v+0x38>)
   ddac6:	4b09      	ldr	r3, [pc, #36]	; (ddaec <_Z22__fetch_global_Serial1v+0x3c>)
   ddac8:	4809      	ldr	r0, [pc, #36]	; (ddaf0 <_Z22__fetch_global_Serial1v+0x40>)
   ddaca:	4621      	mov	r1, r4
   ddacc:	f7ff ffd0 	bl	dda70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   ddad0:	4628      	mov	r0, r5
   ddad2:	f7f6 faef 	bl	d40b4 <__cxa_guard_release>
   ddad6:	4a07      	ldr	r2, [pc, #28]	; (ddaf4 <_Z22__fetch_global_Serial1v+0x44>)
   ddad8:	4907      	ldr	r1, [pc, #28]	; (ddaf8 <_Z22__fetch_global_Serial1v+0x48>)
   ddada:	4805      	ldr	r0, [pc, #20]	; (ddaf0 <_Z22__fetch_global_Serial1v+0x40>)
   ddadc:	f000 fda0 	bl	de620 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   ddae0:	4803      	ldr	r0, [pc, #12]	; (ddaf0 <_Z22__fetch_global_Serial1v+0x40>)
   ddae2:	bd38      	pop	{r3, r4, r5, pc}
   ddae4:	2003e3a4 	.word	0x2003e3a4
   ddae8:	2003e3a8 	.word	0x2003e3a8
   ddaec:	2003e320 	.word	0x2003e320
   ddaf0:	2003e30c 	.word	0x2003e30c
   ddaf4:	2003bc08 	.word	0x2003bc08
   ddaf8:	000dd9ed 	.word	0x000dd9ed

000ddafc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   ddafc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   ddafe:	6883      	ldr	r3, [r0, #8]
   ddb00:	4604      	mov	r4, r0
   ddb02:	b90b      	cbnz	r3, ddb08 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   ddb04:	f000 ff51 	bl	de9aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ddb08:	68c3      	ldr	r3, [r0, #12]
   ddb0a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   ddb0c:	68a3      	ldr	r3, [r4, #8]
   ddb0e:	b11b      	cbz	r3, ddb18 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   ddb10:	2203      	movs	r2, #3
   ddb12:	4621      	mov	r1, r4
   ddb14:	4620      	mov	r0, r4
   ddb16:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   ddb18:	4620      	mov	r0, r4
   ddb1a:	2110      	movs	r1, #16
}
   ddb1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   ddb20:	f000 bd8c 	b.w	de63c <_ZdlPvj>

000ddb24 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   ddb24:	4770      	bx	lr

000ddb26 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ddb26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ddb28:	4606      	mov	r6, r0
   ddb2a:	4615      	mov	r5, r2
   ddb2c:	460c      	mov	r4, r1
   ddb2e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ddb30:	42bc      	cmp	r4, r7
   ddb32:	d006      	beq.n	ddb42 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ddb34:	6833      	ldr	r3, [r6, #0]
   ddb36:	f814 1b01 	ldrb.w	r1, [r4], #1
   ddb3a:	689b      	ldr	r3, [r3, #8]
   ddb3c:	4630      	mov	r0, r6
   ddb3e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ddb40:	e7f6      	b.n	ddb30 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   ddb42:	4628      	mov	r0, r5
   ddb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ddb46 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   ddb46:	2200      	movs	r2, #0
   ddb48:	7c00      	ldrb	r0, [r0, #16]
   ddb4a:	f7fd be29 	b.w	db7a0 <HAL_I2C_Write_Data>

000ddb4e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   ddb4e:	2100      	movs	r1, #0
   ddb50:	7c00      	ldrb	r0, [r0, #16]
   ddb52:	f7fd be2d 	b.w	db7b0 <HAL_I2C_Available_Data>

000ddb56 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   ddb56:	2100      	movs	r1, #0
   ddb58:	7c00      	ldrb	r0, [r0, #16]
   ddb5a:	f7fd be31 	b.w	db7c0 <HAL_I2C_Read_Data>

000ddb5e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   ddb5e:	2100      	movs	r1, #0
   ddb60:	7c00      	ldrb	r0, [r0, #16]
   ddb62:	f7fd be35 	b.w	db7d0 <HAL_I2C_Peek_Data>

000ddb66 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   ddb66:	2100      	movs	r1, #0
   ddb68:	7c00      	ldrb	r0, [r0, #16]
   ddb6a:	f7fd be39 	b.w	db7e0 <HAL_I2C_Flush_Data>

000ddb6e <_ZN7TwoWireD0Ev>:
   ddb6e:	b510      	push	{r4, lr}
   ddb70:	2114      	movs	r1, #20
   ddb72:	4604      	mov	r4, r0
   ddb74:	f000 fd62 	bl	de63c <_ZdlPvj>
   ddb78:	4620      	mov	r0, r4
   ddb7a:	bd10      	pop	{r4, pc}

000ddb7c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   ddb7c:	b510      	push	{r4, lr}
   ddb7e:	4604      	mov	r4, r0
   ddb80:	2300      	movs	r3, #0
   ddb82:	6063      	str	r3, [r4, #4]
   ddb84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ddb88:	60a3      	str	r3, [r4, #8]
   ddb8a:	4b04      	ldr	r3, [pc, #16]	; (ddb9c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   ddb8c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   ddb8e:	4608      	mov	r0, r1
   ddb90:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   ddb92:	4611      	mov	r1, r2
   ddb94:	f7fd fe34 	bl	db800 <HAL_I2C_Init>
}
   ddb98:	4620      	mov	r0, r4
   ddb9a:	bd10      	pop	{r4, pc}
   ddb9c:	000e5924 	.word	0x000e5924

000ddba0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   ddba0:	2300      	movs	r3, #0
   ddba2:	461a      	mov	r2, r3
   ddba4:	4619      	mov	r1, r3
   ddba6:	7c00      	ldrb	r0, [r0, #16]
   ddba8:	f7fd bde2 	b.w	db770 <HAL_I2C_Begin>

000ddbac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   ddbac:	b570      	push	{r4, r5, r6, lr}
   ddbae:	460c      	mov	r4, r1
   ddbb0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   ddbb2:	2514      	movs	r5, #20
   ddbb4:	4606      	mov	r6, r0
   ddbb6:	462a      	mov	r2, r5
   ddbb8:	2100      	movs	r1, #0
   ddbba:	a801      	add	r0, sp, #4
   ddbbc:	f003 fcdc 	bl	e1578 <memset>
   ddbc0:	7823      	ldrb	r3, [r4, #0]
   ddbc2:	f88d 3008 	strb.w	r3, [sp, #8]
   ddbc6:	6863      	ldr	r3, [r4, #4]
   ddbc8:	9303      	str	r3, [sp, #12]
   ddbca:	68e3      	ldr	r3, [r4, #12]
   ddbcc:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   ddbce:	2200      	movs	r2, #0
   ddbd0:	7a23      	ldrb	r3, [r4, #8]
   ddbd2:	7c30      	ldrb	r0, [r6, #16]
   ddbd4:	f8ad 5004 	strh.w	r5, [sp, #4]
   ddbd8:	a901      	add	r1, sp, #4
   ddbda:	9305      	str	r3, [sp, #20]
   ddbdc:	f7fd fe30 	bl	db840 <HAL_I2C_Request_Data_Ex>
}
   ddbe0:	b006      	add	sp, #24
   ddbe2:	bd70      	pop	{r4, r5, r6, pc}

000ddbe4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   ddbe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   ddbe6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ddbe8:	f88d 1000 	strb.w	r1, [sp]
   ddbec:	f04f 0164 	mov.w	r1, #100	; 0x64
   ddbf0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   ddbf2:	bf18      	it	ne
   ddbf4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   ddbf6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   ddbf8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   ddbfa:	f88d 3008 	strb.w	r3, [sp, #8]
   ddbfe:	f7ff ffd5 	bl	ddbac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   ddc02:	b005      	add	sp, #20
   ddc04:	f85d fb04 	ldr.w	pc, [sp], #4

000ddc08 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   ddc08:	2301      	movs	r3, #1
   ddc0a:	f7ff bfeb 	b.w	ddbe4 <_ZN7TwoWire11requestFromEhjh>

000ddc0e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   ddc0e:	2200      	movs	r2, #0
   ddc10:	7c00      	ldrb	r0, [r0, #16]
   ddc12:	f7fd bdb5 	b.w	db780 <HAL_I2C_Begin_Transmission>

000ddc16 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   ddc16:	b2c9      	uxtb	r1, r1
   ddc18:	f7ff bff9 	b.w	ddc0e <_ZN7TwoWire17beginTransmissionEh>

000ddc1c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   ddc1c:	2200      	movs	r2, #0
   ddc1e:	7c00      	ldrb	r0, [r0, #16]
   ddc20:	f7fd bdb6 	b.w	db790 <HAL_I2C_End_Transmission>

000ddc24 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   ddc24:	2101      	movs	r1, #1
   ddc26:	f7ff bff9 	b.w	ddc1c <_ZN7TwoWire15endTransmissionEh>

000ddc2a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   ddc2a:	2100      	movs	r1, #0
   ddc2c:	7c00      	ldrb	r0, [r0, #16]
   ddc2e:	f7fd bddf 	b.w	db7f0 <HAL_I2C_Is_Enabled>

000ddc32 <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  HAL_I2C_Reset(_i2c, 0, NULL);
   ddc32:	2200      	movs	r2, #0
   ddc34:	4611      	mov	r1, r2
   ddc36:	7c00      	ldrb	r0, [r0, #16]
   ddc38:	f7fd bdea 	b.w	db810 <HAL_I2C_Reset>

000ddc3c <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
   ddc3c:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   ddc3e:	2100      	movs	r1, #0
   ddc40:	7c00      	ldrb	r0, [r0, #16]
   ddc42:	f7fd fded 	bl	db820 <HAL_I2C_Acquire>
}
   ddc46:	fab0 f080 	clz	r0, r0
   ddc4a:	0940      	lsrs	r0, r0, #5
   ddc4c:	bd08      	pop	{r3, pc}

000ddc4e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   ddc4e:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   ddc50:	2100      	movs	r1, #0
   ddc52:	7c00      	ldrb	r0, [r0, #16]
   ddc54:	f7fd fdec 	bl	db830 <HAL_I2C_Release>
}
   ddc58:	fab0 f080 	clz	r0, r0
   ddc5c:	0940      	lsrs	r0, r0, #5
   ddc5e:	bd08      	pop	{r3, pc}

000ddc60 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ddc60:	2200      	movs	r2, #0
   ddc62:	4611      	mov	r1, r2
   ddc64:	6840      	ldr	r0, [r0, #4]
   ddc66:	f7fd bf19 	b.w	dba9c <network_listening>

000ddc6a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   ddc6a:	2200      	movs	r2, #0
   ddc6c:	4611      	mov	r1, r2
   ddc6e:	6840      	ldr	r0, [r0, #4]
   ddc70:	f7fd bf24 	b.w	dbabc <network_get_listen_timeout>

000ddc74 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   ddc74:	2200      	movs	r2, #0
   ddc76:	6840      	ldr	r0, [r0, #4]
   ddc78:	f7fd bf18 	b.w	dbaac <network_set_listen_timeout>

000ddc7c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   ddc7c:	2200      	movs	r2, #0
   ddc7e:	f081 0101 	eor.w	r1, r1, #1
   ddc82:	6840      	ldr	r0, [r0, #4]
   ddc84:	f7fd bf02 	b.w	dba8c <network_listen>

000ddc88 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   ddc88:	2300      	movs	r3, #0
   ddc8a:	461a      	mov	r2, r3
   ddc8c:	2101      	movs	r1, #1
   ddc8e:	6840      	ldr	r0, [r0, #4]
   ddc90:	f7fd bef4 	b.w	dba7c <network_off>

000ddc94 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   ddc94:	2300      	movs	r3, #0
   ddc96:	461a      	mov	r2, r3
   ddc98:	4619      	mov	r1, r3
   ddc9a:	6840      	ldr	r0, [r0, #4]
   ddc9c:	f7fd bee6 	b.w	dba6c <network_on>

000ddca0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   ddca0:	2200      	movs	r2, #0
   ddca2:	4611      	mov	r1, r2
   ddca4:	6840      	ldr	r0, [r0, #4]
   ddca6:	f7fd bec9 	b.w	dba3c <network_connecting>

000ddcaa <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ddcaa:	2200      	movs	r2, #0
   ddcac:	2102      	movs	r1, #2
   ddcae:	6840      	ldr	r0, [r0, #4]
   ddcb0:	f7fd becc 	b.w	dba4c <network_disconnect>

000ddcb4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   ddcb4:	2300      	movs	r3, #0
   ddcb6:	461a      	mov	r2, r3
   ddcb8:	6840      	ldr	r0, [r0, #4]
   ddcba:	f7fd beb7 	b.w	dba2c <network_connect>

000ddcbe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   ddcbe:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   ddcc0:	4605      	mov	r5, r0
   ddcc2:	b188      	cbz	r0, ddce8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   ddcc4:	6804      	ldr	r4, [r0, #0]
   ddcc6:	b14c      	cbz	r4, ddcdc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   ddcc8:	68a3      	ldr	r3, [r4, #8]
   ddcca:	b11b      	cbz	r3, ddcd4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   ddccc:	2203      	movs	r2, #3
   ddcce:	4621      	mov	r1, r4
   ddcd0:	4620      	mov	r0, r4
   ddcd2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   ddcd4:	2110      	movs	r1, #16
   ddcd6:	4620      	mov	r0, r4
   ddcd8:	f000 fcb0 	bl	de63c <_ZdlPvj>
   ddcdc:	4628      	mov	r0, r5
   ddcde:	2114      	movs	r1, #20
      }
   ddce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   ddce4:	f000 bcaa 	b.w	de63c <_ZdlPvj>
   ddce8:	bd38      	pop	{r3, r4, r5, pc}

000ddcea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   ddcea:	b110      	cbz	r0, ddcf2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   ddcec:	6803      	ldr	r3, [r0, #0]
   ddcee:	685b      	ldr	r3, [r3, #4]
   ddcf0:	4718      	bx	r3
   ddcf2:	4770      	bx	lr

000ddcf4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   ddcf4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   ddcf6:	6803      	ldr	r3, [r0, #0]
   ddcf8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   ddcfa:	b1bb      	cbz	r3, ddd2c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   ddcfc:	6858      	ldr	r0, [r3, #4]
   ddcfe:	f7fd fc67 	bl	db5d0 <os_thread_is_current>
   ddd02:	b978      	cbnz	r0, ddd24 <_ZN6ThreadD1Ev+0x30>
   ddd04:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   ddd06:	7c5a      	ldrb	r2, [r3, #17]
   ddd08:	b912      	cbnz	r2, ddd10 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   ddd0a:	6858      	ldr	r0, [r3, #4]
   ddd0c:	f7fd fc70 	bl	db5f0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   ddd10:	6823      	ldr	r3, [r4, #0]
   ddd12:	6858      	ldr	r0, [r3, #4]
   ddd14:	f7fd fc74 	bl	db600 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ddd18:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ddd1a:	2300      	movs	r3, #0
   ddd1c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   ddd1e:	b128      	cbz	r0, ddd2c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   ddd20:	f7ff ffcd 	bl	ddcbe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   ddd24:	6820      	ldr	r0, [r4, #0]
   ddd26:	b108      	cbz	r0, ddd2c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   ddd28:	f7ff ffc9 	bl	ddcbe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   ddd2c:	4620      	mov	r0, r4
   ddd2e:	bd10      	pop	{r4, pc}

000ddd30 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   ddd30:	b538      	push	{r3, r4, r5, lr}
   ddd32:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   ddd34:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   ddd38:	b108      	cbz	r0, ddd3e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   ddd3a:	f7f6 f9b4 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   ddd3e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   ddd42:	b108      	cbz	r0, ddd48 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   ddd44:	f7fd fc94 	bl	db670 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   ddd48:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   ddd4c:	b135      	cbz	r5, ddd5c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   ddd4e:	4628      	mov	r0, r5
   ddd50:	f7ff ffd0 	bl	ddcf4 <_ZN6ThreadD1Ev>
   ddd54:	2104      	movs	r1, #4
   ddd56:	4628      	mov	r0, r5
   ddd58:	f000 fc70 	bl	de63c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   ddd5c:	6820      	ldr	r0, [r4, #0]
   ddd5e:	b108      	cbz	r0, ddd64 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   ddd60:	f7ff ffc3 	bl	ddcea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   ddd64:	4620      	mov	r0, r4
   ddd66:	bd38      	pop	{r3, r4, r5, pc}

000ddd68 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   ddd68:	b510      	push	{r4, lr}
   ddd6a:	4b04      	ldr	r3, [pc, #16]	; (ddd7c <_ZN5spark9MeshClassD1Ev+0x14>)
   ddd6c:	4604      	mov	r4, r0
   ddd6e:	f840 3b08 	str.w	r3, [r0], #8
   ddd72:	f7ff ffdd 	bl	ddd30 <_ZN5spark11MeshPublishD1Ev>
   ddd76:	4620      	mov	r0, r4
   ddd78:	bd10      	pop	{r4, pc}
   ddd7a:	bf00      	nop
   ddd7c:	000e594c 	.word	0x000e594c

000ddd80 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   ddd80:	b538      	push	{r3, r4, r5, lr}
   ddd82:	4c0e      	ldr	r4, [pc, #56]	; (dddbc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   ddd84:	4b0e      	ldr	r3, [pc, #56]	; (dddc0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   ddd86:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   ddd88:	2500      	movs	r5, #0
   ddd8a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   ddd8c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   ddd90:	6063      	str	r3, [r4, #4]
   ddd92:	60a5      	str	r5, [r4, #8]
   ddd94:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   ddd98:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   ddd9c:	f7fd fc60 	bl	db660 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   ddda0:	4b08      	ldr	r3, [pc, #32]	; (dddc4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   ddda2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   ddda6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   dddaa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   dddac:	4620      	mov	r0, r4
   dddae:	4a06      	ldr	r2, [pc, #24]	; (dddc8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   dddb0:	4906      	ldr	r1, [pc, #24]	; (dddcc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   dddb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   dddb6:	f000 bc33 	b.w	de620 <__aeabi_atexit>
   dddba:	bf00      	nop
   dddbc:	2003e42c 	.word	0x2003e42c
   dddc0:	000e5a00 	.word	0x000e5a00
   dddc4:	000e594c 	.word	0x000e594c
   dddc8:	2003bc08 	.word	0x2003bc08
   dddcc:	000ddd69 	.word	0x000ddd69

000dddd0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   dddd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dddd2:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   dddd4:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   dddd6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   dddda:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   ddddc:	2201      	movs	r2, #1
   dddde:	f04f 33ff 	mov.w	r3, #4294967295
   ddde2:	4621      	mov	r1, r4
   ddde4:	47a8      	blx	r5
}
   ddde6:	b003      	add	sp, #12
   ddde8:	bd30      	pop	{r4, r5, pc}

000dddea <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   dddea:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   dddec:	6803      	ldr	r3, [r0, #0]
   dddee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   dddf0:	f04f 33ff 	mov.w	r3, #4294967295
   dddf4:	46a4      	mov	ip, r4
}
   dddf6:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   dddfa:	4760      	bx	ip

000dddfc <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   dddfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dddfe:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   dde00:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   dde02:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   dde06:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   dde08:	4621      	mov	r1, r4
   dde0a:	4613      	mov	r3, r2
   dde0c:	2201      	movs	r2, #1
   dde0e:	47a8      	blx	r5
}
   dde10:	b003      	add	sp, #12
   dde12:	bd30      	pop	{r4, r5, pc}

000dde14 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   dde14:	4770      	bx	lr

000dde16 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   dde16:	b538      	push	{r3, r4, r5, lr}
   dde18:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   dde1a:	681a      	ldr	r2, [r3, #0]
   dde1c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   dde1e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   dde20:	da05      	bge.n	dde2e <_ZN9TCPClient9connectedEv+0x18>
   dde22:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   dde26:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   dde2a:	429a      	cmp	r2, r3
   dde2c:	d001      	beq.n	dde32 <_ZN9TCPClient9connectedEv+0x1c>
   dde2e:	2501      	movs	r5, #1
   dde30:	e00b      	b.n	dde4a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   dde32:	6803      	ldr	r3, [r0, #0]
   dde34:	691b      	ldr	r3, [r3, #16]
   dde36:	4798      	blx	r3
   dde38:	2800      	cmp	r0, #0
   dde3a:	bf14      	ite	ne
   dde3c:	2501      	movne	r5, #1
   dde3e:	2500      	moveq	r5, #0
        if (!rv) {
   dde40:	d103      	bne.n	dde4a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   dde42:	6823      	ldr	r3, [r4, #0]
   dde44:	4620      	mov	r0, r4
   dde46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dde48:	4798      	blx	r3
        }
    }
    return rv;
}
   dde4a:	4628      	mov	r0, r5
   dde4c:	bd38      	pop	{r3, r4, r5, pc}

000dde4e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   dde4e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   dde50:	6818      	ldr	r0, [r3, #0]
}
   dde52:	43c0      	mvns	r0, r0
   dde54:	0fc0      	lsrs	r0, r0, #31
   dde56:	4770      	bx	lr

000dde58 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   dde58:	4770      	bx	lr

000dde5a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   dde5a:	2000      	movs	r0, #0
   dde5c:	4770      	bx	lr

000dde5e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   dde5e:	b510      	push	{r4, lr}
   dde60:	2114      	movs	r1, #20
   dde62:	4604      	mov	r4, r0
   dde64:	f000 fbea 	bl	de63c <_ZdlPvj>
   dde68:	4620      	mov	r0, r4
   dde6a:	bd10      	pop	{r4, pc}

000dde6c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   dde6c:	f7f6 b919 	b.w	d40a2 <_ZdlPv>

000dde70 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   dde70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   dde72:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   dde74:	2200      	movs	r2, #0
   dde76:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   dde78:	9202      	str	r2, [sp, #8]
   dde7a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   dde7c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   dde7e:	4604      	mov	r4, r0
   dde80:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   dde82:	d008      	beq.n	dde96 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   dde84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dde88:	fbb3 f1f2 	udiv	r1, r3, r2
   dde8c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   dde8e:	fb02 3111 	mls	r1, r2, r1, r3
   dde92:	434a      	muls	r2, r1
   dde94:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   dde96:	6960      	ldr	r0, [r4, #20]
   dde98:	2308      	movs	r3, #8
   dde9a:	9300      	str	r3, [sp, #0]
   dde9c:	f241 0205 	movw	r2, #4101	; 0x1005
   ddea0:	446b      	add	r3, sp
   ddea2:	f640 71ff 	movw	r1, #4095	; 0xfff
   ddea6:	6800      	ldr	r0, [r0, #0]
   ddea8:	f7fd fcda 	bl	db860 <sock_setsockopt>
    if (ret < 0) {
   ddeac:	2800      	cmp	r0, #0
   ddeae:	db08      	blt.n	ddec2 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   ddeb0:	6960      	ldr	r0, [r4, #20]
   ddeb2:	2300      	movs	r3, #0
   ddeb4:	4632      	mov	r2, r6
   ddeb6:	4629      	mov	r1, r5
   ddeb8:	6800      	ldr	r0, [r0, #0]
   ddeba:	f7fd fcf9 	bl	db8b0 <sock_send>
    if (ret < 0) {
   ddebe:	2800      	cmp	r0, #0
   ddec0:	da04      	bge.n	ddecc <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   ddec2:	f7fd fe9b 	bl	dbbfc <__errno>
   ddec6:	6803      	ldr	r3, [r0, #0]
   ddec8:	6063      	str	r3, [r4, #4]
   ddeca:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   ddecc:	b004      	add	sp, #16
   ddece:	bd70      	pop	{r4, r5, r6, pc}

000dded0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dded0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   dded2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   dded4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   dded6:	689b      	ldr	r3, [r3, #8]
   dded8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   ddeda:	68a3      	ldr	r3, [r4, #8]
   ddedc:	3b01      	subs	r3, #1
   ddede:	60a3      	str	r3, [r4, #8]
   ddee0:	b92b      	cbnz	r3, ddeee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   ddee2:	6823      	ldr	r3, [r4, #0]
   ddee4:	4620      	mov	r0, r4
   ddee6:	68db      	ldr	r3, [r3, #12]
        }
    }
   ddee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   ddeec:	4718      	bx	r3
   ddeee:	bd10      	pop	{r4, pc}

000ddef0 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   ddef0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   ddef2:	4604      	mov	r4, r0
   ddef4:	694d      	ldr	r5, [r1, #20]
   ddef6:	4b05      	ldr	r3, [pc, #20]	; (ddf0c <_ZN9TCPClient8remoteIPEv+0x1c>)
   ddef8:	f844 3b04 	str.w	r3, [r4], #4
   ddefc:	358c      	adds	r5, #140	; 0x8c
   ddefe:	4606      	mov	r6, r0
   ddf00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ddf02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ddf04:	682b      	ldr	r3, [r5, #0]
   ddf06:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   ddf08:	4630      	mov	r0, r6
   ddf0a:	bd70      	pop	{r4, r5, r6, pc}
   ddf0c:	000e587c 	.word	0x000e587c

000ddf10 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   ddf10:	b510      	push	{r4, lr}
   ddf12:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   ddf14:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ddf18:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ddf1c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   ddf1e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   ddf20:	d005      	beq.n	ddf2e <_ZN9TCPClient4peekEv+0x1e>
   ddf22:	6962      	ldr	r2, [r4, #20]
   ddf24:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   ddf28:	4413      	add	r3, r2
   ddf2a:	7918      	ldrb	r0, [r3, #4]
   ddf2c:	bd10      	pop	{r4, pc}
   ddf2e:	6803      	ldr	r3, [r0, #0]
   ddf30:	691b      	ldr	r3, [r3, #16]
   ddf32:	4798      	blx	r3
   ddf34:	2800      	cmp	r0, #0
   ddf36:	d1f4      	bne.n	ddf22 <_ZN9TCPClient4peekEv+0x12>
   ddf38:	f04f 30ff 	mov.w	r0, #4294967295
}
   ddf3c:	bd10      	pop	{r4, pc}

000ddf3e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   ddf3e:	b510      	push	{r4, lr}
   ddf40:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ddf42:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ddf46:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ddf4a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   ddf4c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ddf4e:	d008      	beq.n	ddf62 <_ZN9TCPClient4readEv+0x24>
   ddf50:	6962      	ldr	r2, [r4, #20]
   ddf52:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   ddf56:	1c59      	adds	r1, r3, #1
   ddf58:	4413      	add	r3, r2
   ddf5a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   ddf5e:	7918      	ldrb	r0, [r3, #4]
   ddf60:	bd10      	pop	{r4, pc}
   ddf62:	6803      	ldr	r3, [r0, #0]
   ddf64:	691b      	ldr	r3, [r3, #16]
   ddf66:	4798      	blx	r3
   ddf68:	2800      	cmp	r0, #0
   ddf6a:	d1f1      	bne.n	ddf50 <_ZN9TCPClient4readEv+0x12>
   ddf6c:	f04f 30ff 	mov.w	r0, #4294967295
}
   ddf70:	bd10      	pop	{r4, pc}

000ddf72 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   ddf72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ddf74:	6943      	ldr	r3, [r0, #20]
   ddf76:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   ddf78:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ddf7c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ddf80:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   ddf82:	4605      	mov	r5, r0
   ddf84:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   ddf86:	d106      	bne.n	ddf96 <_ZN9TCPClient4readEPhj+0x24>
   ddf88:	6803      	ldr	r3, [r0, #0]
   ddf8a:	691b      	ldr	r3, [r3, #16]
   ddf8c:	4798      	blx	r3
   ddf8e:	b910      	cbnz	r0, ddf96 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   ddf90:	f04f 34ff 	mov.w	r4, #4294967295
   ddf94:	e014      	b.n	ddfc0 <_ZN9TCPClient4readEPhj+0x4e>
   ddf96:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   ddf98:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   ddf9c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   ddfa0:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   ddfa2:	42bc      	cmp	r4, r7
   ddfa4:	bf28      	it	cs
   ddfa6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   ddfa8:	4419      	add	r1, r3
   ddfaa:	4622      	mov	r2, r4
   ddfac:	3104      	adds	r1, #4
   ddfae:	4630      	mov	r0, r6
   ddfb0:	f003 fad7 	bl	e1562 <memcpy>
   ddfb4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   ddfb6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   ddfba:	4423      	add	r3, r4
   ddfbc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   ddfc0:	4620      	mov	r0, r4
   ddfc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ddfc4 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ddfc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ddfc8:	4698      	mov	r8, r3
    stop();
   ddfca:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ddfcc:	b093      	sub	sp, #76	; 0x4c
    stop();
   ddfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ddfd0:	460d      	mov	r5, r1
   ddfd2:	4606      	mov	r6, r0
   ddfd4:	4617      	mov	r7, r2
    stop();
   ddfd6:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   ddfd8:	ab12      	add	r3, sp, #72	; 0x48
   ddfda:	2400      	movs	r4, #0
   ddfdc:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ddfe0:	4622      	mov	r2, r4
   ddfe2:	4621      	mov	r1, r4
   ddfe4:	4628      	mov	r0, r5
   ddfe6:	f7fd fa13 	bl	db410 <netdb_getaddrinfo>
   ddfea:	4681      	mov	r9, r0
   ddfec:	2800      	cmp	r0, #0
   ddfee:	d13d      	bne.n	de06c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   ddff0:	9b00      	ldr	r3, [sp, #0]
   ddff2:	2b00      	cmp	r3, #0
   ddff4:	d056      	beq.n	de0a4 <_ZN9TCPClient7connectEPKctm+0xe0>
   ddff6:	695b      	ldr	r3, [r3, #20]
   ddff8:	2b00      	cmp	r3, #0
   ddffa:	d053      	beq.n	de0a4 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   ddffc:	a806      	add	r0, sp, #24
   ddffe:	f7ff fb63 	bl	dd6c8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   de002:	9b00      	ldr	r3, [sp, #0]
   de004:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   de006:	7863      	ldrb	r3, [r4, #1]
   de008:	2b02      	cmp	r3, #2
   de00a:	d101      	bne.n	de010 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   de00c:	1d21      	adds	r1, r4, #4
   de00e:	e013      	b.n	de038 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   de010:	2b0a      	cmp	r3, #10
   de012:	d114      	bne.n	de03e <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   de014:	2211      	movs	r2, #17
   de016:	4649      	mov	r1, r9
   de018:	a801      	add	r0, sp, #4
   de01a:	f003 faad 	bl	e1578 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   de01e:	68a3      	ldr	r3, [r4, #8]
   de020:	bb33      	cbnz	r3, de070 <_ZN9TCPClient7connectEPKctm+0xac>
   de022:	68e3      	ldr	r3, [r4, #12]
   de024:	bb23      	cbnz	r3, de070 <_ZN9TCPClient7connectEPKctm+0xac>
   de026:	f64f 70ff 	movw	r0, #65535	; 0xffff
   de02a:	6925      	ldr	r5, [r4, #16]
   de02c:	f7fd fb38 	bl	db6a0 <inet_htonl>
   de030:	4285      	cmp	r5, r0
   de032:	d11d      	bne.n	de070 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   de034:	f104 0114 	add.w	r1, r4, #20
   de038:	a806      	add	r0, sp, #24
   de03a:	f7ff fb95 	bl	dd768 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   de03e:	a806      	add	r0, sp, #24
   de040:	f7ff fb62 	bl	dd708 <_ZNK9IPAddresscvbEv>
        if (addr) {
   de044:	2800      	cmp	r0, #0
   de046:	d02d      	beq.n	de0a4 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   de048:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   de04a:	ad07      	add	r5, sp, #28
   de04c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   de050:	4b18      	ldr	r3, [pc, #96]	; (de0b4 <_ZN9TCPClient7connectEPKctm+0xf0>)
   de052:	930c      	str	r3, [sp, #48]	; 0x30
   de054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   de056:	ac0d      	add	r4, sp, #52	; 0x34
   de058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   de05a:	682b      	ldr	r3, [r5, #0]
   de05c:	7023      	strb	r3, [r4, #0]
   de05e:	463a      	mov	r2, r7
   de060:	4643      	mov	r3, r8
   de062:	a90c      	add	r1, sp, #48	; 0x30
   de064:	4630      	mov	r0, r6
   de066:	47c8      	blx	r9
   de068:	4681      	mov	r9, r0
   de06a:	e01b      	b.n	de0a4 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   de06c:	46a1      	mov	r9, r4
   de06e:	e019      	b.n	de0a4 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   de070:	f104 0308 	add.w	r3, r4, #8
   de074:	ad01      	add	r5, sp, #4
   de076:	3418      	adds	r4, #24
   de078:	6818      	ldr	r0, [r3, #0]
   de07a:	6859      	ldr	r1, [r3, #4]
   de07c:	462a      	mov	r2, r5
   de07e:	c203      	stmia	r2!, {r0, r1}
   de080:	3308      	adds	r3, #8
   de082:	42a3      	cmp	r3, r4
   de084:	4615      	mov	r5, r2
   de086:	d1f7      	bne.n	de078 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   de088:	2306      	movs	r3, #6
            addr = IPAddress(a);
   de08a:	a901      	add	r1, sp, #4
   de08c:	a80c      	add	r0, sp, #48	; 0x30
   de08e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   de090:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   de094:	f7ff fb26 	bl	dd6e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   de098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   de09a:	ac07      	add	r4, sp, #28
   de09c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   de09e:	682b      	ldr	r3, [r5, #0]
   de0a0:	7023      	strb	r3, [r4, #0]
   de0a2:	e7cc      	b.n	de03e <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   de0a4:	9800      	ldr	r0, [sp, #0]
   de0a6:	f7fd f9ab 	bl	db400 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   de0aa:	4648      	mov	r0, r9
   de0ac:	b013      	add	sp, #76	; 0x4c
   de0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de0b2:	bf00      	nop
   de0b4:	000e587c 	.word	0x000e587c

000de0b8 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   de0b8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   de0ba:	2300      	movs	r3, #0
   de0bc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   de0c0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   de0c2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   de0c6:	4770      	bx	lr

000de0c8 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   de0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de0cc:	461e      	mov	r6, r3
    stop();
   de0ce:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   de0d0:	460c      	mov	r4, r1
   de0d2:	b08a      	sub	sp, #40	; 0x28
    stop();
   de0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   de0d6:	4605      	mov	r5, r0
   de0d8:	4617      	mov	r7, r2
    stop();
   de0da:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   de0dc:	7d23      	ldrb	r3, [r4, #20]
   de0de:	f8d5 8014 	ldr.w	r8, [r5, #20]
   de0e2:	2b04      	cmp	r3, #4
   de0e4:	bf0c      	ite	eq
   de0e6:	2002      	moveq	r0, #2
   de0e8:	200a      	movne	r0, #10
   de0ea:	2206      	movs	r2, #6
   de0ec:	2101      	movs	r1, #1
   de0ee:	f7fd fbef 	bl	db8d0 <sock_socket>
   de0f2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   de0f6:	696b      	ldr	r3, [r5, #20]
   de0f8:	681b      	ldr	r3, [r3, #0]
   de0fa:	2b00      	cmp	r3, #0
   de0fc:	db18      	blt.n	de130 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   de0fe:	4628      	mov	r0, r5
   de100:	f7ff ffda 	bl	de0b8 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   de104:	b1d6      	cbz	r6, de13c <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   de106:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   de108:	a903      	add	r1, sp, #12
   de10a:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   de10c:	9303      	str	r3, [sp, #12]
   de10e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   de112:	f7fd fa15 	bl	db540 <if_index_to_name>
   de116:	b958      	cbnz	r0, de130 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   de118:	6968      	ldr	r0, [r5, #20]
   de11a:	2306      	movs	r3, #6
   de11c:	9300      	str	r3, [sp, #0]
   de11e:	f241 020b 	movw	r2, #4107	; 0x100b
   de122:	ab03      	add	r3, sp, #12
   de124:	f640 71ff 	movw	r1, #4095	; 0xfff
   de128:	6800      	ldr	r0, [r0, #0]
   de12a:	f7fd fb99 	bl	db860 <sock_setsockopt>
   de12e:	b128      	cbz	r0, de13c <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   de130:	682b      	ldr	r3, [r5, #0]
   de132:	4628      	mov	r0, r5
   de134:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   de136:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   de138:	4798      	blx	r3
   de13a:	e03b      	b.n	de1b4 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   de13c:	261c      	movs	r6, #28
   de13e:	4632      	mov	r2, r6
   de140:	2100      	movs	r1, #0
   de142:	a803      	add	r0, sp, #12
   de144:	f003 fa18 	bl	e1578 <memset>
    if (ip.version() == 4) {
   de148:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   de14a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   de14e:	2b04      	cmp	r3, #4
   de150:	d10c      	bne.n	de16c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   de152:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   de154:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   de156:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   de15a:	f7fd fab1 	bl	db6c0 <inet_htons>
   de15e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   de162:	6860      	ldr	r0, [r4, #4]
   de164:	f7fd fa9c 	bl	db6a0 <inet_htonl>
   de168:	9004      	str	r0, [sp, #16]
   de16a:	e013      	b.n	de194 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   de16c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   de16e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   de170:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   de174:	f7fd faa4 	bl	db6c0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   de178:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   de17a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   de17e:	1d23      	adds	r3, r4, #4
   de180:	f104 0714 	add.w	r7, r4, #20
   de184:	6818      	ldr	r0, [r3, #0]
   de186:	6859      	ldr	r1, [r3, #4]
   de188:	4632      	mov	r2, r6
   de18a:	c203      	stmia	r2!, {r0, r1}
   de18c:	3308      	adds	r3, #8
   de18e:	42bb      	cmp	r3, r7
   de190:	4616      	mov	r6, r2
   de192:	d1f7      	bne.n	de184 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   de194:	696b      	ldr	r3, [r5, #20]
   de196:	221c      	movs	r2, #28
   de198:	a903      	add	r1, sp, #12
   de19a:	6818      	ldr	r0, [r3, #0]
   de19c:	f7fd fb70 	bl	db880 <sock_connect>
   de1a0:	2800      	cmp	r0, #0
   de1a2:	d1c5      	bne.n	de130 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   de1a4:	3404      	adds	r4, #4
   de1a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   de1a8:	696d      	ldr	r5, [r5, #20]
   de1aa:	358c      	adds	r5, #140	; 0x8c
   de1ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   de1ae:	6823      	ldr	r3, [r4, #0]
   de1b0:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   de1b2:	2401      	movs	r4, #1
}
   de1b4:	4620      	mov	r0, r4
   de1b6:	b00a      	add	sp, #40	; 0x28
   de1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000de1bc <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   de1bc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   de1be:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   de1c0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   de1c2:	6818      	ldr	r0, [r3, #0]
   de1c4:	2800      	cmp	r0, #0
   de1c6:	db01      	blt.n	de1cc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   de1c8:	f7fd fb52 	bl	db870 <sock_close>
   de1cc:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   de1ce:	f04f 32ff 	mov.w	r2, #4294967295
   de1d2:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   de1d4:	6960      	ldr	r0, [r4, #20]
   de1d6:	2211      	movs	r2, #17
   de1d8:	2100      	movs	r1, #0
   de1da:	308c      	adds	r0, #140	; 0x8c
   de1dc:	f003 f9cc 	bl	e1578 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   de1e0:	4620      	mov	r0, r4
}
   de1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   de1e6:	f7ff bf67 	b.w	de0b8 <_ZN9TCPClient12flush_bufferEv>
	...

000de1ec <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   de1ec:	b530      	push	{r4, r5, lr}
   de1ee:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   de1f0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   de1f4:	b08b      	sub	sp, #44	; 0x2c
   de1f6:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   de1f8:	b11b      	cbz	r3, de202 <_ZN9TCPClient9availableEv+0x16>
   de1fa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   de1fe:	429a      	cmp	r2, r3
   de200:	d040      	beq.n	de284 <_ZN9TCPClient9availableEv+0x98>
   de202:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   de204:	6818      	ldr	r0, [r3, #0]
   de206:	2800      	cmp	r0, #0
   de208:	db3f      	blt.n	de28a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   de20a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   de20e:	2d7f      	cmp	r5, #127	; 0x7f
   de210:	d83b      	bhi.n	de28a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   de212:	1d19      	adds	r1, r3, #4
   de214:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   de218:	2308      	movs	r3, #8
   de21a:	4429      	add	r1, r5
   de21c:	f7fd fb38 	bl	db890 <sock_recv>
            if (ret > 0) {
   de220:	2800      	cmp	r0, #0
   de222:	dd0c      	ble.n	de23e <_ZN9TCPClient9availableEv+0x52>
   de224:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   de226:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   de22a:	b90a      	cbnz	r2, de230 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   de22c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   de230:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   de232:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   de236:	4418      	add	r0, r3
   de238:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   de23c:	e025      	b.n	de28a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   de23e:	f7fd fcdd 	bl	dbbfc <__errno>
   de242:	6803      	ldr	r3, [r0, #0]
   de244:	2b0b      	cmp	r3, #11
   de246:	d020      	beq.n	de28a <_ZN9TCPClient9availableEv+0x9e>
   de248:	f7fd fcd8 	bl	dbbfc <__errno>
   de24c:	6803      	ldr	r3, [r0, #0]
   de24e:	2b0b      	cmp	r3, #11
   de250:	d01b      	beq.n	de28a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   de252:	2320      	movs	r3, #32
   de254:	2500      	movs	r5, #0
   de256:	9302      	str	r3, [sp, #8]
   de258:	9503      	str	r5, [sp, #12]
   de25a:	f7fd fccf 	bl	dbbfc <__errno>
   de25e:	6803      	ldr	r3, [r0, #0]
   de260:	9301      	str	r3, [sp, #4]
   de262:	4b0e      	ldr	r3, [pc, #56]	; (de29c <_ZN9TCPClient9availableEv+0xb0>)
   de264:	9300      	str	r3, [sp, #0]
   de266:	aa02      	add	r2, sp, #8
   de268:	462b      	mov	r3, r5
   de26a:	490d      	ldr	r1, [pc, #52]	; (de2a0 <_ZN9TCPClient9availableEv+0xb4>)
   de26c:	2032      	movs	r0, #50	; 0x32
   de26e:	f7fd fb77 	bl	db960 <log_message>
                    sock_close(d_->sock);
   de272:	6963      	ldr	r3, [r4, #20]
   de274:	6818      	ldr	r0, [r3, #0]
   de276:	f7fd fafb 	bl	db870 <sock_close>
   de27a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   de27c:	f04f 32ff 	mov.w	r2, #4294967295
   de280:	601a      	str	r2, [r3, #0]
   de282:	e002      	b.n	de28a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   de284:	f7ff ff18 	bl	de0b8 <_ZN9TCPClient12flush_bufferEv>
   de288:	e7bb      	b.n	de202 <_ZN9TCPClient9availableEv+0x16>
   de28a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   de28c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   de290:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   de294:	1a18      	subs	r0, r3, r0
}
   de296:	b00b      	add	sp, #44	; 0x2c
   de298:	bd30      	pop	{r4, r5, pc}
   de29a:	bf00      	nop
   de29c:	000e59e7 	.word	0x000e59e7
   de2a0:	000e59e0 	.word	0x000e59e0

000de2a4 <_ZN9TCPClient6statusEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   de2a4:	6943      	ldr	r3, [r0, #20]
   de2a6:	6818      	ldr	r0, [r3, #0]
}
   de2a8:	43c0      	mvns	r0, r0
   de2aa:	0fc0      	lsrs	r0, r0, #31
   de2ac:	4770      	bx	lr

000de2ae <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   de2ae:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   de2b0:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   de2b2:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   de2b4:	6001      	str	r1, [r0, #0]
   de2b6:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   de2ba:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   de2be:	3088      	adds	r0, #136	; 0x88
   de2c0:	f7ff fa02 	bl	dd6c8 <_ZN9IPAddressC1Ev>
}
   de2c4:	4620      	mov	r0, r4
   de2c6:	bd10      	pop	{r4, pc}

000de2c8 <_ZN9TCPClientC1Ei>:
   de2c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   de2cc:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   de2ce:	2300      	movs	r3, #0
   de2d0:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   de2d2:	4a14      	ldr	r2, [pc, #80]	; (de324 <_ZN9TCPClientC1Ei+0x5c>)
   de2d4:	6043      	str	r3, [r0, #4]
   de2d6:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   de2d8:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   de2da:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   de2dc:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   de2de:	20a0      	movs	r0, #160	; 0xa0
   de2e0:	460e      	mov	r6, r1
   de2e2:	f7f5 feda 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   de2e6:	4605      	mov	r5, r0
   de2e8:	b110      	cbz	r0, de2f0 <_ZN9TCPClientC1Ei+0x28>
   de2ea:	4631      	mov	r1, r6
   de2ec:	f7ff ffdf 	bl	de2ae <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   de2f0:	2014      	movs	r0, #20
   de2f2:	f7f5 fed2 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   de2f6:	4603      	mov	r3, r0
   de2f8:	b128      	cbz	r0, de306 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   de2fa:	2201      	movs	r2, #1
   de2fc:	6042      	str	r2, [r0, #4]
   de2fe:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   de300:	4a09      	ldr	r2, [pc, #36]	; (de328 <_ZN9TCPClientC1Ei+0x60>)
   de302:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   de304:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   de306:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   de308:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   de30a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   de30c:	b128      	cbz	r0, de31a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   de30e:	6843      	ldr	r3, [r0, #4]
   de310:	3b01      	subs	r3, #1
   de312:	6043      	str	r3, [r0, #4]
   de314:	b90b      	cbnz	r3, de31a <_ZN9TCPClientC1Ei+0x52>
   de316:	f7ff fddb 	bl	dded0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   de31a:	4620      	mov	r0, r4
   de31c:	f7ff fecc 	bl	de0b8 <_ZN9TCPClient12flush_bufferEv>
}
   de320:	4620      	mov	r0, r4
   de322:	bd70      	pop	{r4, r5, r6, pc}
   de324:	000e599c 	.word	0x000e599c
   de328:	000e5980 	.word	0x000e5980

000de32c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   de32c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   de32e:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   de332:	4604      	mov	r4, r0
        : TCPClient(-1) {
   de334:	f7ff ffc8 	bl	de2c8 <_ZN9TCPClientC1Ei>
}
   de338:	4620      	mov	r0, r4
   de33a:	bd10      	pop	{r4, pc}

000de33c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   de33c:	b510      	push	{r4, lr}
   de33e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   de340:	6800      	ldr	r0, [r0, #0]
   de342:	2800      	cmp	r0, #0
   de344:	db01      	blt.n	de34a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   de346:	f7fd fa93 	bl	db870 <sock_close>
    }
}
   de34a:	4620      	mov	r0, r4
   de34c:	bd10      	pop	{r4, pc}

000de34e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   de34e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   de350:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   de352:	4620      	mov	r0, r4
   de354:	f7ff fff2 	bl	de33c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   de358:	b124      	cbz	r4, de364 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   de35a:	4620      	mov	r0, r4
   de35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   de360:	f7f5 be9f 	b.w	d40a2 <_ZdlPv>
   de364:	bd10      	pop	{r4, pc}

000de366 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   de366:	2300      	movs	r3, #0
   de368:	461a      	mov	r2, r3
   de36a:	6840      	ldr	r0, [r0, #4]
   de36c:	f7fd bb5e 	b.w	dba2c <network_connect>

000de370 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   de370:	2200      	movs	r2, #0
   de372:	2102      	movs	r1, #2
   de374:	6840      	ldr	r0, [r0, #4]
   de376:	f7fd bb69 	b.w	dba4c <network_disconnect>

000de37a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   de37a:	2200      	movs	r2, #0
   de37c:	4611      	mov	r1, r2
   de37e:	6840      	ldr	r0, [r0, #4]
   de380:	f7fd bb5c 	b.w	dba3c <network_connecting>

000de384 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   de384:	2200      	movs	r2, #0
   de386:	4611      	mov	r1, r2
   de388:	6840      	ldr	r0, [r0, #4]
   de38a:	f7fd bb67 	b.w	dba5c <network_ready>

000de38e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   de38e:	2300      	movs	r3, #0
   de390:	461a      	mov	r2, r3
   de392:	4619      	mov	r1, r3
   de394:	6840      	ldr	r0, [r0, #4]
   de396:	f7fd bb69 	b.w	dba6c <network_on>

000de39a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   de39a:	2300      	movs	r3, #0
   de39c:	461a      	mov	r2, r3
   de39e:	4619      	mov	r1, r3
   de3a0:	6840      	ldr	r0, [r0, #4]
   de3a2:	f7fd bb6b 	b.w	dba7c <network_off>

000de3a6 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   de3a6:	2200      	movs	r2, #0
   de3a8:	f081 0101 	eor.w	r1, r1, #1
   de3ac:	6840      	ldr	r0, [r0, #4]
   de3ae:	f7fd bb6d 	b.w	dba8c <network_listen>

000de3b2 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   de3b2:	2200      	movs	r2, #0
   de3b4:	6840      	ldr	r0, [r0, #4]
   de3b6:	f7fd bb79 	b.w	dbaac <network_set_listen_timeout>

000de3ba <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   de3ba:	2200      	movs	r2, #0
   de3bc:	4611      	mov	r1, r2
   de3be:	6840      	ldr	r0, [r0, #4]
   de3c0:	f7fd bb7c 	b.w	dbabc <network_get_listen_timeout>

000de3c4 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   de3c4:	2200      	movs	r2, #0
   de3c6:	4611      	mov	r1, r2
   de3c8:	6840      	ldr	r0, [r0, #4]
   de3ca:	f7fd bb67 	b.w	dba9c <network_listening>

000de3ce <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   de3ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   de3d2:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   de3d4:	b095      	sub	sp, #84	; 0x54
   de3d6:	4616      	mov	r6, r2
   de3d8:	460d      	mov	r5, r1
   de3da:	4607      	mov	r7, r0
    IPAddress addr;
   de3dc:	f7ff f974 	bl	dd6c8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   de3e0:	4621      	mov	r1, r4
   de3e2:	2220      	movs	r2, #32
   de3e4:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   de3e6:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   de3e8:	f003 f8c6 	bl	e1578 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   de3ec:	2340      	movs	r3, #64	; 0x40
   de3ee:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   de3f0:	4621      	mov	r1, r4
   de3f2:	466b      	mov	r3, sp
   de3f4:	aa0c      	add	r2, sp, #48	; 0x30
   de3f6:	4630      	mov	r0, r6
   de3f8:	f7fd f80a 	bl	db410 <netdb_getaddrinfo>
    if (!r) {
   de3fc:	4604      	mov	r4, r0
   de3fe:	2800      	cmp	r0, #0
   de400:	d144      	bne.n	de48c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   de402:	4602      	mov	r2, r0
   de404:	2101      	movs	r1, #1
   de406:	6868      	ldr	r0, [r5, #4]
   de408:	f7fd fb28 	bl	dba5c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   de40c:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   de40e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   de410:	4622      	mov	r2, r4
   de412:	6868      	ldr	r0, [r5, #4]
   de414:	f7fd fb22 	bl	dba5c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   de418:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   de41a:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   de41c:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   de41e:	2e00      	cmp	r6, #0
   de420:	d034      	beq.n	de48c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   de422:	2900      	cmp	r1, #0
   de424:	d132      	bne.n	de48c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   de426:	6873      	ldr	r3, [r6, #4]
   de428:	2b02      	cmp	r3, #2
   de42a:	d002      	beq.n	de432 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   de42c:	2b0a      	cmp	r3, #10
   de42e:	d009      	beq.n	de444 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   de430:	e02a      	b.n	de488 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   de432:	f1b8 0f00 	cmp.w	r8, #0
   de436:	d027      	beq.n	de488 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   de438:	6971      	ldr	r1, [r6, #20]
   de43a:	4638      	mov	r0, r7
   de43c:	3104      	adds	r1, #4
   de43e:	f7ff f993 	bl	dd768 <_ZN9IPAddressaSEPKh>
   de442:	e020      	b.n	de486 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   de444:	f1b9 0f00 	cmp.w	r9, #0
   de448:	d01e      	beq.n	de488 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   de44a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   de44c:	2211      	movs	r2, #17
   de44e:	a801      	add	r0, sp, #4
   de450:	f003 f892 	bl	e1578 <memset>
                    a.v = 6;
   de454:	2306      	movs	r3, #6
   de456:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   de45a:	ad01      	add	r5, sp, #4
   de45c:	f104 0308 	add.w	r3, r4, #8
   de460:	3418      	adds	r4, #24
   de462:	6818      	ldr	r0, [r3, #0]
   de464:	6859      	ldr	r1, [r3, #4]
   de466:	462a      	mov	r2, r5
   de468:	c203      	stmia	r2!, {r0, r1}
   de46a:	3308      	adds	r3, #8
   de46c:	42a3      	cmp	r3, r4
   de46e:	4615      	mov	r5, r2
   de470:	d1f7      	bne.n	de462 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   de472:	a901      	add	r1, sp, #4
   de474:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   de476:	ad07      	add	r5, sp, #28
   de478:	f7ff f934 	bl	dd6e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   de47c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   de47e:	1d3c      	adds	r4, r7, #4
   de480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   de482:	682b      	ldr	r3, [r5, #0]
   de484:	7023      	strb	r3, [r4, #0]
                    ok = true;
   de486:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   de488:	69f6      	ldr	r6, [r6, #28]
   de48a:	e7c8      	b.n	de41e <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   de48c:	9800      	ldr	r0, [sp, #0]
   de48e:	f7fc ffb7 	bl	db400 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   de492:	4638      	mov	r0, r7
   de494:	b015      	add	sp, #84	; 0x54
   de496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000de49c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   de49c:	4b02      	ldr	r3, [pc, #8]	; (de4a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   de49e:	4a03      	ldr	r2, [pc, #12]	; (de4ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   de4a0:	601a      	str	r2, [r3, #0]
   de4a2:	2200      	movs	r2, #0
   de4a4:	605a      	str	r2, [r3, #4]
   de4a6:	4770      	bx	lr
   de4a8:	2003e600 	.word	0x2003e600
   de4ac:	000e5a00 	.word	0x000e5a00

000de4b0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   de4b0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   de4b2:	4e18      	ldr	r6, [pc, #96]	; (de514 <pinAvailable+0x64>)
   de4b4:	6831      	ldr	r1, [r6, #0]
   de4b6:	f011 0501 	ands.w	r5, r1, #1
   de4ba:	4604      	mov	r4, r0
   de4bc:	d10a      	bne.n	de4d4 <pinAvailable+0x24>
   de4be:	4630      	mov	r0, r6
   de4c0:	f7f5 fdf3 	bl	d40aa <__cxa_guard_acquire>
   de4c4:	b130      	cbz	r0, de4d4 <pinAvailable+0x24>
   de4c6:	4629      	mov	r1, r5
   de4c8:	4813      	ldr	r0, [pc, #76]	; (de518 <pinAvailable+0x68>)
   de4ca:	f7fd fc0b 	bl	dbce4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   de4ce:	4630      	mov	r0, r6
   de4d0:	f7f5 fdf0 	bl	d40b4 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   de4d4:	4810      	ldr	r0, [pc, #64]	; (de518 <pinAvailable+0x68>)
   de4d6:	f7fd fcc2 	bl	dbe5e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   de4da:	b128      	cbz	r0, de4e8 <pinAvailable+0x38>
   de4dc:	f1a4 030b 	sub.w	r3, r4, #11
   de4e0:	2b02      	cmp	r3, #2
   de4e2:	d801      	bhi.n	de4e8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   de4e4:	2000      	movs	r0, #0
   de4e6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   de4e8:	f000 f874 	bl	de5d4 <_Z19__fetch_global_Wirev>
   de4ec:	f7ff fb9d 	bl	ddc2a <_ZN7TwoWire9isEnabledEv>
   de4f0:	b108      	cbz	r0, de4f6 <pinAvailable+0x46>
   de4f2:	2c01      	cmp	r4, #1
   de4f4:	d9f6      	bls.n	de4e4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   de4f6:	f7ff fadb 	bl	ddab0 <_Z22__fetch_global_Serial1v>
   de4fa:	f7ff fad6 	bl	ddaaa <_ZN11USARTSerial9isEnabledEv>
   de4fe:	b118      	cbz	r0, de508 <pinAvailable+0x58>
   de500:	f1a4 0309 	sub.w	r3, r4, #9
   de504:	2b01      	cmp	r3, #1
   de506:	d9ed      	bls.n	de4e4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   de508:	2c23      	cmp	r4, #35	; 0x23
   de50a:	bf8c      	ite	hi
   de50c:	2000      	movhi	r0, #0
   de50e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   de510:	bd70      	pop	{r4, r5, r6, pc}
   de512:	bf00      	nop
   de514:	2003bc0c 	.word	0x2003bc0c
   de518:	2003bc10 	.word	0x2003bc10

000de51c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   de51c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   de51e:	b538      	push	{r3, r4, r5, lr}
   de520:	4604      	mov	r4, r0
   de522:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   de524:	d80a      	bhi.n	de53c <pinMode+0x20>
   de526:	29ff      	cmp	r1, #255	; 0xff
   de528:	d008      	beq.n	de53c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   de52a:	f7ff ffc1 	bl	de4b0 <pinAvailable>
   de52e:	b128      	cbz	r0, de53c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   de530:	4629      	mov	r1, r5
   de532:	4620      	mov	r0, r4
}
   de534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   de538:	f7fc bf82 	b.w	db440 <HAL_Pin_Mode>
   de53c:	bd38      	pop	{r3, r4, r5, pc}

000de53e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   de53e:	b538      	push	{r3, r4, r5, lr}
   de540:	4604      	mov	r4, r0
   de542:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   de544:	f7fc ff84 	bl	db450 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   de548:	28ff      	cmp	r0, #255	; 0xff
   de54a:	d010      	beq.n	de56e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   de54c:	2806      	cmp	r0, #6
   de54e:	d804      	bhi.n	de55a <digitalWrite+0x1c>
   de550:	234d      	movs	r3, #77	; 0x4d
   de552:	fa23 f000 	lsr.w	r0, r3, r0
   de556:	07c3      	lsls	r3, r0, #31
   de558:	d409      	bmi.n	de56e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   de55a:	4620      	mov	r0, r4
   de55c:	f7ff ffa8 	bl	de4b0 <pinAvailable>
   de560:	b128      	cbz	r0, de56e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   de562:	4629      	mov	r1, r5
   de564:	4620      	mov	r0, r4
}
   de566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   de56a:	f7fc bf79 	b.w	db460 <HAL_GPIO_Write>
   de56e:	bd38      	pop	{r3, r4, r5, pc}

000de570 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   de570:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   de572:	b510      	push	{r4, lr}
   de574:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   de576:	bf9c      	itt	ls
   de578:	340e      	addls	r4, #14
   de57a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   de57c:	4620      	mov	r0, r4
   de57e:	f7ff ff97 	bl	de4b0 <pinAvailable>
   de582:	b150      	cbz	r0, de59a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   de584:	2103      	movs	r1, #3
   de586:	4620      	mov	r0, r4
   de588:	f7fc ff52 	bl	db430 <HAL_Validate_Pin_Function>
   de58c:	2803      	cmp	r0, #3
   de58e:	d104      	bne.n	de59a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   de590:	4620      	mov	r0, r4
}
   de592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   de596:	f7fc bf7b 	b.w	db490 <HAL_ADC_Read>
}
   de59a:	2000      	movs	r0, #0
   de59c:	bd10      	pop	{r4, pc}
	...

000de5a0 <_Z17acquireWireBufferv>:
   de5a0:	b570      	push	{r4, r5, r6, lr}
   de5a2:	4604      	mov	r4, r0
   de5a4:	2514      	movs	r5, #20
   de5a6:	462a      	mov	r2, r5
   de5a8:	4e09      	ldr	r6, [pc, #36]	; (de5d0 <_Z17acquireWireBufferv+0x30>)
   de5aa:	2100      	movs	r1, #0
   de5ac:	f002 ffe4 	bl	e1578 <memset>
   de5b0:	8025      	strh	r5, [r4, #0]
   de5b2:	2520      	movs	r5, #32
   de5b4:	4631      	mov	r1, r6
   de5b6:	60a5      	str	r5, [r4, #8]
   de5b8:	6125      	str	r5, [r4, #16]
   de5ba:	4628      	mov	r0, r5
   de5bc:	f000 f840 	bl	de640 <_ZnajRKSt9nothrow_t>
   de5c0:	4631      	mov	r1, r6
   de5c2:	6060      	str	r0, [r4, #4]
   de5c4:	4628      	mov	r0, r5
   de5c6:	f000 f83b 	bl	de640 <_ZnajRKSt9nothrow_t>
   de5ca:	60e0      	str	r0, [r4, #12]
   de5cc:	4620      	mov	r0, r4
   de5ce:	bd70      	pop	{r4, r5, r6, pc}
   de5d0:	000e5a2c 	.word	0x000e5a2c

000de5d4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   de5d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   de5d6:	4d0e      	ldr	r5, [pc, #56]	; (de610 <_Z19__fetch_global_Wirev+0x3c>)
   de5d8:	6829      	ldr	r1, [r5, #0]
   de5da:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   de5de:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   de5e0:	d113      	bne.n	de60a <_Z19__fetch_global_Wirev+0x36>
   de5e2:	4628      	mov	r0, r5
   de5e4:	f7f5 fd61 	bl	d40aa <__cxa_guard_acquire>
   de5e8:	b178      	cbz	r0, de60a <_Z19__fetch_global_Wirev+0x36>
   de5ea:	a801      	add	r0, sp, #4
   de5ec:	f7ff ffd8 	bl	de5a0 <_Z17acquireWireBufferv>
   de5f0:	aa01      	add	r2, sp, #4
   de5f2:	4621      	mov	r1, r4
   de5f4:	4807      	ldr	r0, [pc, #28]	; (de614 <_Z19__fetch_global_Wirev+0x40>)
   de5f6:	f7ff fac1 	bl	ddb7c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   de5fa:	4628      	mov	r0, r5
   de5fc:	f7f5 fd5a 	bl	d40b4 <__cxa_guard_release>
   de600:	4a05      	ldr	r2, [pc, #20]	; (de618 <_Z19__fetch_global_Wirev+0x44>)
   de602:	4906      	ldr	r1, [pc, #24]	; (de61c <_Z19__fetch_global_Wirev+0x48>)
   de604:	4803      	ldr	r0, [pc, #12]	; (de614 <_Z19__fetch_global_Wirev+0x40>)
   de606:	f000 f80b 	bl	de620 <__aeabi_atexit>
	return wire;
}
   de60a:	4802      	ldr	r0, [pc, #8]	; (de614 <_Z19__fetch_global_Wirev+0x40>)
   de60c:	b007      	add	sp, #28
   de60e:	bd30      	pop	{r4, r5, pc}
   de610:	2003e60c 	.word	0x2003e60c
   de614:	2003e610 	.word	0x2003e610
   de618:	2003bc08 	.word	0x2003bc08
   de61c:	000ddb25 	.word	0x000ddb25

000de620 <__aeabi_atexit>:
   de620:	460b      	mov	r3, r1
   de622:	4601      	mov	r1, r0
   de624:	4618      	mov	r0, r3
   de626:	f002 be83 	b.w	e1330 <__cxa_atexit>
	...

000de62c <_ZSt15get_new_handlerv>:
   de62c:	4b02      	ldr	r3, [pc, #8]	; (de638 <_ZSt15get_new_handlerv+0xc>)
   de62e:	6818      	ldr	r0, [r3, #0]
   de630:	f3bf 8f5f 	dmb	sy
   de634:	4770      	bx	lr
   de636:	bf00      	nop
   de638:	2003e624 	.word	0x2003e624

000de63c <_ZdlPvj>:
   de63c:	f7f5 bd31 	b.w	d40a2 <_ZdlPv>

000de640 <_ZnajRKSt9nothrow_t>:
   de640:	f000 b800 	b.w	de644 <_ZnwjRKSt9nothrow_t>

000de644 <_ZnwjRKSt9nothrow_t>:
   de644:	b510      	push	{r4, lr}
   de646:	2800      	cmp	r0, #0
   de648:	bf14      	ite	ne
   de64a:	4604      	movne	r4, r0
   de64c:	2401      	moveq	r4, #1
   de64e:	4620      	mov	r0, r4
   de650:	f7fd fa7c 	bl	dbb4c <malloc>
   de654:	b920      	cbnz	r0, de660 <_ZnwjRKSt9nothrow_t+0x1c>
   de656:	f7ff ffe9 	bl	de62c <_ZSt15get_new_handlerv>
   de65a:	b108      	cbz	r0, de660 <_ZnwjRKSt9nothrow_t+0x1c>
   de65c:	4780      	blx	r0
   de65e:	e7f6      	b.n	de64e <_ZnwjRKSt9nothrow_t+0xa>
   de660:	bd10      	pop	{r4, pc}

000de662 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   de662:	68c3      	ldr	r3, [r0, #12]
   de664:	689a      	ldr	r2, [r3, #8]
   de666:	60c2      	str	r2, [r0, #12]
   de668:	b102      	cbz	r2, de66c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
   de66a:	6050      	str	r0, [r2, #4]
   de66c:	6842      	ldr	r2, [r0, #4]
   de66e:	605a      	str	r2, [r3, #4]
   de670:	680a      	ldr	r2, [r1, #0]
   de672:	4290      	cmp	r0, r2
   de674:	d101      	bne.n	de67a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
   de676:	600b      	str	r3, [r1, #0]
   de678:	e005      	b.n	de686 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
   de67a:	6842      	ldr	r2, [r0, #4]
   de67c:	6891      	ldr	r1, [r2, #8]
   de67e:	4288      	cmp	r0, r1
   de680:	bf0c      	ite	eq
   de682:	6093      	streq	r3, [r2, #8]
   de684:	60d3      	strne	r3, [r2, #12]
   de686:	6098      	str	r0, [r3, #8]
   de688:	6043      	str	r3, [r0, #4]
   de68a:	4770      	bx	lr

000de68c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   de68c:	6883      	ldr	r3, [r0, #8]
   de68e:	68da      	ldr	r2, [r3, #12]
   de690:	6082      	str	r2, [r0, #8]
   de692:	b102      	cbz	r2, de696 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
   de694:	6050      	str	r0, [r2, #4]
   de696:	6842      	ldr	r2, [r0, #4]
   de698:	605a      	str	r2, [r3, #4]
   de69a:	680a      	ldr	r2, [r1, #0]
   de69c:	4290      	cmp	r0, r2
   de69e:	d101      	bne.n	de6a4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
   de6a0:	600b      	str	r3, [r1, #0]
   de6a2:	e005      	b.n	de6b0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
   de6a4:	6842      	ldr	r2, [r0, #4]
   de6a6:	68d1      	ldr	r1, [r2, #12]
   de6a8:	4288      	cmp	r0, r1
   de6aa:	bf0c      	ite	eq
   de6ac:	60d3      	streq	r3, [r2, #12]
   de6ae:	6093      	strne	r3, [r2, #8]
   de6b0:	60d8      	str	r0, [r3, #12]
   de6b2:	6043      	str	r3, [r0, #4]
   de6b4:	4770      	bx	lr

000de6b6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   de6b6:	7803      	ldrb	r3, [r0, #0]
   de6b8:	b92b      	cbnz	r3, de6c6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   de6ba:	6843      	ldr	r3, [r0, #4]
   de6bc:	685b      	ldr	r3, [r3, #4]
   de6be:	4298      	cmp	r0, r3
   de6c0:	d101      	bne.n	de6c6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   de6c2:	68c3      	ldr	r3, [r0, #12]
   de6c4:	e00c      	b.n	de6e0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   de6c6:	6883      	ldr	r3, [r0, #8]
   de6c8:	b11b      	cbz	r3, de6d2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
   de6ca:	68da      	ldr	r2, [r3, #12]
   de6cc:	b142      	cbz	r2, de6e0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   de6ce:	4613      	mov	r3, r2
   de6d0:	e7fb      	b.n	de6ca <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
   de6d2:	6843      	ldr	r3, [r0, #4]
   de6d4:	689a      	ldr	r2, [r3, #8]
   de6d6:	4282      	cmp	r2, r0
   de6d8:	d102      	bne.n	de6e0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   de6da:	4618      	mov	r0, r3
   de6dc:	685b      	ldr	r3, [r3, #4]
   de6de:	e7f9      	b.n	de6d4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
   de6e0:	4618      	mov	r0, r3
   de6e2:	4770      	bx	lr

000de6e4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   de6e4:	68c3      	ldr	r3, [r0, #12]
   de6e6:	b123      	cbz	r3, de6f2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   de6e8:	4618      	mov	r0, r3
   de6ea:	689b      	ldr	r3, [r3, #8]
   de6ec:	2b00      	cmp	r3, #0
   de6ee:	d1fb      	bne.n	de6e8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   de6f0:	e00a      	b.n	de708 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
   de6f2:	6843      	ldr	r3, [r0, #4]
   de6f4:	68da      	ldr	r2, [r3, #12]
   de6f6:	4282      	cmp	r2, r0
   de6f8:	d102      	bne.n	de700 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   de6fa:	4618      	mov	r0, r3
   de6fc:	685b      	ldr	r3, [r3, #4]
   de6fe:	e7f9      	b.n	de6f4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   de700:	68c2      	ldr	r2, [r0, #12]
   de702:	4293      	cmp	r3, r2
   de704:	bf18      	it	ne
   de706:	4618      	movne	r0, r3
   de708:	4770      	bx	lr

000de70a <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
   de70a:	68c3      	ldr	r3, [r0, #12]
   de70c:	b123      	cbz	r3, de718 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0xe>
   de70e:	4618      	mov	r0, r3
   de710:	689b      	ldr	r3, [r3, #8]
   de712:	2b00      	cmp	r3, #0
   de714:	d1fb      	bne.n	de70e <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x4>
   de716:	e00a      	b.n	de72e <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x24>
   de718:	6843      	ldr	r3, [r0, #4]
   de71a:	68da      	ldr	r2, [r3, #12]
   de71c:	4282      	cmp	r2, r0
   de71e:	d102      	bne.n	de726 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x1c>
   de720:	4618      	mov	r0, r3
   de722:	685b      	ldr	r3, [r3, #4]
   de724:	e7f9      	b.n	de71a <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x10>
   de726:	68c2      	ldr	r2, [r0, #12]
   de728:	4293      	cmp	r3, r2
   de72a:	bf18      	it	ne
   de72c:	4618      	movne	r0, r3
   de72e:	4770      	bx	lr

000de730 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   de730:	f7ff bfc1 	b.w	de6b6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000de734 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   de734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de738:	461f      	mov	r7, r3
   de73a:	f103 0904 	add.w	r9, r3, #4
   de73e:	2300      	movs	r3, #0
   de740:	460c      	mov	r4, r1
   de742:	604a      	str	r2, [r1, #4]
   de744:	608b      	str	r3, [r1, #8]
   de746:	60cb      	str	r3, [r1, #12]
   de748:	700b      	strb	r3, [r1, #0]
   de74a:	b168      	cbz	r0, de768 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
   de74c:	4297      	cmp	r7, r2
   de74e:	6091      	str	r1, [r2, #8]
   de750:	d101      	bne.n	de756 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   de752:	6079      	str	r1, [r7, #4]
   de754:	e00c      	b.n	de770 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
   de756:	68bb      	ldr	r3, [r7, #8]
   de758:	429a      	cmp	r2, r3
   de75a:	bf08      	it	eq
   de75c:	60b9      	streq	r1, [r7, #8]
   de75e:	f04f 0801 	mov.w	r8, #1
   de762:	f04f 0a00 	mov.w	sl, #0
   de766:	e017      	b.n	de798 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   de768:	60d1      	str	r1, [r2, #12]
   de76a:	68fb      	ldr	r3, [r7, #12]
   de76c:	429a      	cmp	r2, r3
   de76e:	d1f6      	bne.n	de75e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   de770:	60fc      	str	r4, [r7, #12]
   de772:	e7f4      	b.n	de75e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   de774:	6866      	ldr	r6, [r4, #4]
   de776:	7832      	ldrb	r2, [r6, #0]
   de778:	2a00      	cmp	r2, #0
   de77a:	d13a      	bne.n	de7f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   de77c:	6875      	ldr	r5, [r6, #4]
   de77e:	68ab      	ldr	r3, [r5, #8]
   de780:	429e      	cmp	r6, r3
   de782:	d11f      	bne.n	de7c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
   de784:	68eb      	ldr	r3, [r5, #12]
   de786:	b15b      	cbz	r3, de7a0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   de788:	781a      	ldrb	r2, [r3, #0]
   de78a:	b94a      	cbnz	r2, de7a0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   de78c:	f886 8000 	strb.w	r8, [r6]
   de790:	f883 8000 	strb.w	r8, [r3]
   de794:	702a      	strb	r2, [r5, #0]
   de796:	462c      	mov	r4, r5
   de798:	687b      	ldr	r3, [r7, #4]
   de79a:	429c      	cmp	r4, r3
   de79c:	d1ea      	bne.n	de774 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
   de79e:	e028      	b.n	de7f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   de7a0:	68f3      	ldr	r3, [r6, #12]
   de7a2:	429c      	cmp	r4, r3
   de7a4:	d104      	bne.n	de7b0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
   de7a6:	4649      	mov	r1, r9
   de7a8:	4630      	mov	r0, r6
   de7aa:	f7ff ff5a 	bl	de662 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   de7ae:	4634      	mov	r4, r6
   de7b0:	6863      	ldr	r3, [r4, #4]
   de7b2:	4649      	mov	r1, r9
   de7b4:	f883 8000 	strb.w	r8, [r3]
   de7b8:	4628      	mov	r0, r5
   de7ba:	f885 a000 	strb.w	sl, [r5]
   de7be:	f7ff ff65 	bl	de68c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   de7c2:	e014      	b.n	de7ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
   de7c4:	b113      	cbz	r3, de7cc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
   de7c6:	781a      	ldrb	r2, [r3, #0]
   de7c8:	2a00      	cmp	r2, #0
   de7ca:	d0df      	beq.n	de78c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
   de7cc:	68b3      	ldr	r3, [r6, #8]
   de7ce:	429c      	cmp	r4, r3
   de7d0:	d104      	bne.n	de7dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
   de7d2:	4649      	mov	r1, r9
   de7d4:	4630      	mov	r0, r6
   de7d6:	f7ff ff59 	bl	de68c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   de7da:	4634      	mov	r4, r6
   de7dc:	6863      	ldr	r3, [r4, #4]
   de7de:	4649      	mov	r1, r9
   de7e0:	f883 8000 	strb.w	r8, [r3]
   de7e4:	4628      	mov	r0, r5
   de7e6:	f885 a000 	strb.w	sl, [r5]
   de7ea:	f7ff ff3a 	bl	de662 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   de7ee:	4625      	mov	r5, r4
   de7f0:	e7d1      	b.n	de796 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
   de7f2:	2201      	movs	r2, #1
   de7f4:	701a      	strb	r2, [r3, #0]
   de7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000de7fa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
   de7fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de7fe:	460f      	mov	r7, r1
   de800:	6881      	ldr	r1, [r0, #8]
   de802:	68c2      	ldr	r2, [r0, #12]
   de804:	4605      	mov	r5, r0
   de806:	b909      	cbnz	r1, de80c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x12>
   de808:	4616      	mov	r6, r2
   de80a:	e029      	b.n	de860 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x66>
   de80c:	4614      	mov	r4, r2
   de80e:	2a00      	cmp	r2, #0
   de810:	f000 80c5 	beq.w	de99e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a4>
   de814:	4613      	mov	r3, r2
   de816:	6898      	ldr	r0, [r3, #8]
   de818:	b108      	cbz	r0, de81e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x24>
   de81a:	4603      	mov	r3, r0
   de81c:	e7fb      	b.n	de816 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c>
   de81e:	42ab      	cmp	r3, r5
   de820:	68de      	ldr	r6, [r3, #12]
   de822:	d01d      	beq.n	de860 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x66>
   de824:	4293      	cmp	r3, r2
   de826:	604b      	str	r3, [r1, #4]
   de828:	6099      	str	r1, [r3, #8]
   de82a:	d007      	beq.n	de83c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x42>
   de82c:	685c      	ldr	r4, [r3, #4]
   de82e:	b106      	cbz	r6, de832 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x38>
   de830:	6074      	str	r4, [r6, #4]
   de832:	6859      	ldr	r1, [r3, #4]
   de834:	608e      	str	r6, [r1, #8]
   de836:	60da      	str	r2, [r3, #12]
   de838:	68ea      	ldr	r2, [r5, #12]
   de83a:	6053      	str	r3, [r2, #4]
   de83c:	687a      	ldr	r2, [r7, #4]
   de83e:	4295      	cmp	r5, r2
   de840:	d101      	bne.n	de846 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x4c>
   de842:	607b      	str	r3, [r7, #4]
   de844:	e005      	b.n	de852 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x58>
   de846:	686a      	ldr	r2, [r5, #4]
   de848:	6891      	ldr	r1, [r2, #8]
   de84a:	428d      	cmp	r5, r1
   de84c:	bf0c      	ite	eq
   de84e:	6093      	streq	r3, [r2, #8]
   de850:	60d3      	strne	r3, [r2, #12]
   de852:	686a      	ldr	r2, [r5, #4]
   de854:	605a      	str	r2, [r3, #4]
   de856:	7829      	ldrb	r1, [r5, #0]
   de858:	781a      	ldrb	r2, [r3, #0]
   de85a:	7019      	strb	r1, [r3, #0]
   de85c:	702a      	strb	r2, [r5, #0]
   de85e:	e027      	b.n	de8b0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb6>
   de860:	686c      	ldr	r4, [r5, #4]
   de862:	b106      	cbz	r6, de866 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x6c>
   de864:	6074      	str	r4, [r6, #4]
   de866:	687b      	ldr	r3, [r7, #4]
   de868:	429d      	cmp	r5, r3
   de86a:	d101      	bne.n	de870 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
   de86c:	607e      	str	r6, [r7, #4]
   de86e:	e005      	b.n	de87c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x82>
   de870:	686b      	ldr	r3, [r5, #4]
   de872:	689a      	ldr	r2, [r3, #8]
   de874:	4295      	cmp	r5, r2
   de876:	bf0c      	ite	eq
   de878:	609e      	streq	r6, [r3, #8]
   de87a:	60de      	strne	r6, [r3, #12]
   de87c:	68bb      	ldr	r3, [r7, #8]
   de87e:	429d      	cmp	r5, r3
   de880:	d109      	bne.n	de896 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9c>
   de882:	68eb      	ldr	r3, [r5, #12]
   de884:	b90b      	cbnz	r3, de88a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   de886:	686b      	ldr	r3, [r5, #4]
   de888:	e004      	b.n	de894 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9a>
   de88a:	4633      	mov	r3, r6
   de88c:	689a      	ldr	r2, [r3, #8]
   de88e:	b10a      	cbz	r2, de894 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9a>
   de890:	4613      	mov	r3, r2
   de892:	e7fb      	b.n	de88c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x92>
   de894:	60bb      	str	r3, [r7, #8]
   de896:	68fb      	ldr	r3, [r7, #12]
   de898:	429d      	cmp	r5, r3
   de89a:	d109      	bne.n	de8b0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb6>
   de89c:	68ab      	ldr	r3, [r5, #8]
   de89e:	b90b      	cbnz	r3, de8a4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xaa>
   de8a0:	686b      	ldr	r3, [r5, #4]
   de8a2:	e004      	b.n	de8ae <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb4>
   de8a4:	4633      	mov	r3, r6
   de8a6:	68da      	ldr	r2, [r3, #12]
   de8a8:	b10a      	cbz	r2, de8ae <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb4>
   de8aa:	4613      	mov	r3, r2
   de8ac:	e7fb      	b.n	de8a6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   de8ae:	60fb      	str	r3, [r7, #12]
   de8b0:	782b      	ldrb	r3, [r5, #0]
   de8b2:	2b00      	cmp	r3, #0
   de8b4:	d076      	beq.n	de9a4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   de8b6:	f107 0804 	add.w	r8, r7, #4
   de8ba:	f04f 0900 	mov.w	r9, #0
   de8be:	f04f 0a01 	mov.w	sl, #1
   de8c2:	687b      	ldr	r3, [r7, #4]
   de8c4:	429e      	cmp	r6, r3
   de8c6:	d067      	beq.n	de998 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19e>
   de8c8:	b12e      	cbz	r6, de8d6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   de8ca:	7833      	ldrb	r3, [r6, #0]
   de8cc:	2b01      	cmp	r3, #1
   de8ce:	d002      	beq.n	de8d6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   de8d0:	2301      	movs	r3, #1
   de8d2:	7033      	strb	r3, [r6, #0]
   de8d4:	e066      	b.n	de9a4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   de8d6:	68a0      	ldr	r0, [r4, #8]
   de8d8:	4286      	cmp	r6, r0
   de8da:	d12c      	bne.n	de936 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x13c>
   de8dc:	68e0      	ldr	r0, [r4, #12]
   de8de:	7803      	ldrb	r3, [r0, #0]
   de8e0:	b93b      	cbnz	r3, de8f2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xf8>
   de8e2:	f880 a000 	strb.w	sl, [r0]
   de8e6:	4641      	mov	r1, r8
   de8e8:	4620      	mov	r0, r4
   de8ea:	7023      	strb	r3, [r4, #0]
   de8ec:	f7ff feb9 	bl	de662 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   de8f0:	68e0      	ldr	r0, [r4, #12]
   de8f2:	6882      	ldr	r2, [r0, #8]
   de8f4:	68c3      	ldr	r3, [r0, #12]
   de8f6:	b112      	cbz	r2, de8fe <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x104>
   de8f8:	7811      	ldrb	r1, [r2, #0]
   de8fa:	2901      	cmp	r1, #1
   de8fc:	d103      	bne.n	de906 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x10c>
   de8fe:	b373      	cbz	r3, de95e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   de900:	7819      	ldrb	r1, [r3, #0]
   de902:	2901      	cmp	r1, #1
   de904:	d02b      	beq.n	de95e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   de906:	b113      	cbz	r3, de90e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x114>
   de908:	781b      	ldrb	r3, [r3, #0]
   de90a:	2b01      	cmp	r3, #1
   de90c:	d107      	bne.n	de91e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   de90e:	2301      	movs	r3, #1
   de910:	7013      	strb	r3, [r2, #0]
   de912:	2300      	movs	r3, #0
   de914:	7003      	strb	r3, [r0, #0]
   de916:	4641      	mov	r1, r8
   de918:	f7ff feb8 	bl	de68c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   de91c:	68e0      	ldr	r0, [r4, #12]
   de91e:	7823      	ldrb	r3, [r4, #0]
   de920:	7003      	strb	r3, [r0, #0]
   de922:	68c3      	ldr	r3, [r0, #12]
   de924:	2201      	movs	r2, #1
   de926:	7022      	strb	r2, [r4, #0]
   de928:	b103      	cbz	r3, de92c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x132>
   de92a:	701a      	strb	r2, [r3, #0]
   de92c:	4641      	mov	r1, r8
   de92e:	4620      	mov	r0, r4
   de930:	f7ff fe97 	bl	de662 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   de934:	e030      	b.n	de998 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19e>
   de936:	7803      	ldrb	r3, [r0, #0]
   de938:	b93b      	cbnz	r3, de94a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x150>
   de93a:	f880 a000 	strb.w	sl, [r0]
   de93e:	4641      	mov	r1, r8
   de940:	4620      	mov	r0, r4
   de942:	7023      	strb	r3, [r4, #0]
   de944:	f7ff fea2 	bl	de68c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   de948:	68a0      	ldr	r0, [r4, #8]
   de94a:	68c2      	ldr	r2, [r0, #12]
   de94c:	6883      	ldr	r3, [r0, #8]
   de94e:	b112      	cbz	r2, de956 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15c>
   de950:	7811      	ldrb	r1, [r2, #0]
   de952:	2901      	cmp	r1, #1
   de954:	d109      	bne.n	de96a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x170>
   de956:	b113      	cbz	r3, de95e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   de958:	7819      	ldrb	r1, [r3, #0]
   de95a:	2901      	cmp	r1, #1
   de95c:	d105      	bne.n	de96a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x170>
   de95e:	6863      	ldr	r3, [r4, #4]
   de960:	f880 9000 	strb.w	r9, [r0]
   de964:	4626      	mov	r6, r4
   de966:	461c      	mov	r4, r3
   de968:	e7ab      	b.n	de8c2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc8>
   de96a:	b113      	cbz	r3, de972 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x178>
   de96c:	781b      	ldrb	r3, [r3, #0]
   de96e:	2b01      	cmp	r3, #1
   de970:	d107      	bne.n	de982 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x188>
   de972:	2301      	movs	r3, #1
   de974:	7013      	strb	r3, [r2, #0]
   de976:	2300      	movs	r3, #0
   de978:	7003      	strb	r3, [r0, #0]
   de97a:	4641      	mov	r1, r8
   de97c:	f7ff fe71 	bl	de662 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   de980:	68a0      	ldr	r0, [r4, #8]
   de982:	7823      	ldrb	r3, [r4, #0]
   de984:	7003      	strb	r3, [r0, #0]
   de986:	6883      	ldr	r3, [r0, #8]
   de988:	2201      	movs	r2, #1
   de98a:	7022      	strb	r2, [r4, #0]
   de98c:	b103      	cbz	r3, de990 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x196>
   de98e:	701a      	strb	r2, [r3, #0]
   de990:	4641      	mov	r1, r8
   de992:	4620      	mov	r0, r4
   de994:	f7ff fe7a 	bl	de68c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   de998:	2e00      	cmp	r6, #0
   de99a:	d199      	bne.n	de8d0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd6>
   de99c:	e002      	b.n	de9a4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   de99e:	6844      	ldr	r4, [r0, #4]
   de9a0:	460e      	mov	r6, r1
   de9a2:	e75f      	b.n	de864 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x6a>
   de9a4:	4628      	mov	r0, r5
   de9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000de9aa <_ZSt25__throw_bad_function_callv>:
   de9aa:	b508      	push	{r3, lr}
   de9ac:	f7fd f916 	bl	dbbdc <abort>

000de9b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   de9b0:	4b18      	ldr	r3, [pc, #96]	; (dea14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   de9b2:	681a      	ldr	r2, [r3, #0]
   de9b4:	07d1      	lsls	r1, r2, #31
   de9b6:	bf5c      	itt	pl
   de9b8:	2201      	movpl	r2, #1
   de9ba:	601a      	strpl	r2, [r3, #0]
   de9bc:	4b16      	ldr	r3, [pc, #88]	; (dea18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   de9be:	681a      	ldr	r2, [r3, #0]
   de9c0:	07d2      	lsls	r2, r2, #31
   de9c2:	bf5c      	itt	pl
   de9c4:	2201      	movpl	r2, #1
   de9c6:	601a      	strpl	r2, [r3, #0]
   de9c8:	4b14      	ldr	r3, [pc, #80]	; (dea1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   de9ca:	681a      	ldr	r2, [r3, #0]
   de9cc:	07d0      	lsls	r0, r2, #31
   de9ce:	bf5c      	itt	pl
   de9d0:	2201      	movpl	r2, #1
   de9d2:	601a      	strpl	r2, [r3, #0]
   de9d4:	4b12      	ldr	r3, [pc, #72]	; (dea20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   de9d6:	681a      	ldr	r2, [r3, #0]
   de9d8:	07d1      	lsls	r1, r2, #31
   de9da:	bf5c      	itt	pl
   de9dc:	2201      	movpl	r2, #1
   de9de:	601a      	strpl	r2, [r3, #0]
   de9e0:	4b10      	ldr	r3, [pc, #64]	; (dea24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   de9e2:	681a      	ldr	r2, [r3, #0]
   de9e4:	07d2      	lsls	r2, r2, #31
   de9e6:	bf5c      	itt	pl
   de9e8:	2201      	movpl	r2, #1
   de9ea:	601a      	strpl	r2, [r3, #0]
   de9ec:	4b0e      	ldr	r3, [pc, #56]	; (dea28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   de9ee:	681a      	ldr	r2, [r3, #0]
   de9f0:	07d0      	lsls	r0, r2, #31
   de9f2:	bf5c      	itt	pl
   de9f4:	2201      	movpl	r2, #1
   de9f6:	601a      	strpl	r2, [r3, #0]
   de9f8:	4b0c      	ldr	r3, [pc, #48]	; (dea2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   de9fa:	681a      	ldr	r2, [r3, #0]
   de9fc:	07d1      	lsls	r1, r2, #31
   de9fe:	bf5c      	itt	pl
   dea00:	2201      	movpl	r2, #1
   dea02:	601a      	strpl	r2, [r3, #0]
   dea04:	4b0a      	ldr	r3, [pc, #40]	; (dea30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dea06:	681a      	ldr	r2, [r3, #0]
   dea08:	07d2      	lsls	r2, r2, #31
   dea0a:	bf5c      	itt	pl
   dea0c:	2201      	movpl	r2, #1
   dea0e:	601a      	strpl	r2, [r3, #0]
   dea10:	4770      	bx	lr
   dea12:	bf00      	nop
   dea14:	2003e644 	.word	0x2003e644
   dea18:	2003e640 	.word	0x2003e640
   dea1c:	2003e63c 	.word	0x2003e63c
   dea20:	2003e638 	.word	0x2003e638
   dea24:	2003e634 	.word	0x2003e634
   dea28:	2003e630 	.word	0x2003e630
   dea2c:	2003e62c 	.word	0x2003e62c
   dea30:	2003e628 	.word	0x2003e628

000dea34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dea34:	4b24      	ldr	r3, [pc, #144]	; (deac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dea36:	681a      	ldr	r2, [r3, #0]
   dea38:	07d0      	lsls	r0, r2, #31
   dea3a:	bf5c      	itt	pl
   dea3c:	2201      	movpl	r2, #1
   dea3e:	601a      	strpl	r2, [r3, #0]
   dea40:	4b22      	ldr	r3, [pc, #136]	; (deacc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dea42:	681a      	ldr	r2, [r3, #0]
   dea44:	07d1      	lsls	r1, r2, #31
   dea46:	bf5c      	itt	pl
   dea48:	2201      	movpl	r2, #1
   dea4a:	601a      	strpl	r2, [r3, #0]
   dea4c:	4b20      	ldr	r3, [pc, #128]	; (dead0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dea4e:	681a      	ldr	r2, [r3, #0]
   dea50:	07d2      	lsls	r2, r2, #31
   dea52:	bf5c      	itt	pl
   dea54:	2201      	movpl	r2, #1
   dea56:	601a      	strpl	r2, [r3, #0]
   dea58:	4b1e      	ldr	r3, [pc, #120]	; (dead4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dea5a:	681a      	ldr	r2, [r3, #0]
   dea5c:	07d0      	lsls	r0, r2, #31
   dea5e:	bf5c      	itt	pl
   dea60:	2201      	movpl	r2, #1
   dea62:	601a      	strpl	r2, [r3, #0]
   dea64:	4b1c      	ldr	r3, [pc, #112]	; (dead8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dea66:	681a      	ldr	r2, [r3, #0]
   dea68:	07d1      	lsls	r1, r2, #31
   dea6a:	bf5c      	itt	pl
   dea6c:	2201      	movpl	r2, #1
   dea6e:	601a      	strpl	r2, [r3, #0]
   dea70:	4b1a      	ldr	r3, [pc, #104]	; (deadc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dea72:	681a      	ldr	r2, [r3, #0]
   dea74:	07d2      	lsls	r2, r2, #31
   dea76:	bf5c      	itt	pl
   dea78:	2201      	movpl	r2, #1
   dea7a:	601a      	strpl	r2, [r3, #0]
   dea7c:	4b18      	ldr	r3, [pc, #96]	; (deae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dea7e:	681a      	ldr	r2, [r3, #0]
   dea80:	07d0      	lsls	r0, r2, #31
   dea82:	bf5c      	itt	pl
   dea84:	2201      	movpl	r2, #1
   dea86:	601a      	strpl	r2, [r3, #0]
   dea88:	4b16      	ldr	r3, [pc, #88]	; (deae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dea8a:	681a      	ldr	r2, [r3, #0]
   dea8c:	07d1      	lsls	r1, r2, #31
   dea8e:	bf5c      	itt	pl
   dea90:	2201      	movpl	r2, #1
   dea92:	601a      	strpl	r2, [r3, #0]
   dea94:	4b14      	ldr	r3, [pc, #80]	; (deae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dea96:	681a      	ldr	r2, [r3, #0]
   dea98:	07d2      	lsls	r2, r2, #31
   dea9a:	bf5c      	itt	pl
   dea9c:	2201      	movpl	r2, #1
   dea9e:	601a      	strpl	r2, [r3, #0]
   deaa0:	4b12      	ldr	r3, [pc, #72]	; (deaec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   deaa2:	681a      	ldr	r2, [r3, #0]
   deaa4:	07d0      	lsls	r0, r2, #31
   deaa6:	bf5c      	itt	pl
   deaa8:	2201      	movpl	r2, #1
   deaaa:	601a      	strpl	r2, [r3, #0]
   deaac:	4b10      	ldr	r3, [pc, #64]	; (deaf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   deaae:	681a      	ldr	r2, [r3, #0]
   deab0:	07d1      	lsls	r1, r2, #31
   deab2:	bf5c      	itt	pl
   deab4:	2201      	movpl	r2, #1
   deab6:	601a      	strpl	r2, [r3, #0]
   deab8:	4b0e      	ldr	r3, [pc, #56]	; (deaf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   deaba:	681a      	ldr	r2, [r3, #0]
   deabc:	07d2      	lsls	r2, r2, #31
   deabe:	bf5c      	itt	pl
   deac0:	2201      	movpl	r2, #1
   deac2:	601a      	strpl	r2, [r3, #0]
   deac4:	4770      	bx	lr
   deac6:	bf00      	nop
   deac8:	2003e674 	.word	0x2003e674
   deacc:	2003e670 	.word	0x2003e670
   dead0:	2003e66c 	.word	0x2003e66c
   dead4:	2003e668 	.word	0x2003e668
   dead8:	2003e664 	.word	0x2003e664
   deadc:	2003e660 	.word	0x2003e660
   deae0:	2003e65c 	.word	0x2003e65c
   deae4:	2003e658 	.word	0x2003e658
   deae8:	2003e654 	.word	0x2003e654
   deaec:	2003e650 	.word	0x2003e650
   deaf0:	2003e64c 	.word	0x2003e64c
   deaf4:	2003e648 	.word	0x2003e648

000deaf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   deaf8:	4b24      	ldr	r3, [pc, #144]	; (deb8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   deafa:	681a      	ldr	r2, [r3, #0]
   deafc:	07d0      	lsls	r0, r2, #31
   deafe:	bf5c      	itt	pl
   deb00:	2201      	movpl	r2, #1
   deb02:	601a      	strpl	r2, [r3, #0]
   deb04:	4b22      	ldr	r3, [pc, #136]	; (deb90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   deb06:	681a      	ldr	r2, [r3, #0]
   deb08:	07d1      	lsls	r1, r2, #31
   deb0a:	bf5c      	itt	pl
   deb0c:	2201      	movpl	r2, #1
   deb0e:	601a      	strpl	r2, [r3, #0]
   deb10:	4b20      	ldr	r3, [pc, #128]	; (deb94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   deb12:	681a      	ldr	r2, [r3, #0]
   deb14:	07d2      	lsls	r2, r2, #31
   deb16:	bf5c      	itt	pl
   deb18:	2201      	movpl	r2, #1
   deb1a:	601a      	strpl	r2, [r3, #0]
   deb1c:	4b1e      	ldr	r3, [pc, #120]	; (deb98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   deb1e:	681a      	ldr	r2, [r3, #0]
   deb20:	07d0      	lsls	r0, r2, #31
   deb22:	bf5c      	itt	pl
   deb24:	2201      	movpl	r2, #1
   deb26:	601a      	strpl	r2, [r3, #0]
   deb28:	4b1c      	ldr	r3, [pc, #112]	; (deb9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   deb2a:	681a      	ldr	r2, [r3, #0]
   deb2c:	07d1      	lsls	r1, r2, #31
   deb2e:	bf5c      	itt	pl
   deb30:	2201      	movpl	r2, #1
   deb32:	601a      	strpl	r2, [r3, #0]
   deb34:	4b1a      	ldr	r3, [pc, #104]	; (deba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   deb36:	681a      	ldr	r2, [r3, #0]
   deb38:	07d2      	lsls	r2, r2, #31
   deb3a:	bf5c      	itt	pl
   deb3c:	2201      	movpl	r2, #1
   deb3e:	601a      	strpl	r2, [r3, #0]
   deb40:	4b18      	ldr	r3, [pc, #96]	; (deba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   deb42:	681a      	ldr	r2, [r3, #0]
   deb44:	07d0      	lsls	r0, r2, #31
   deb46:	bf5c      	itt	pl
   deb48:	2201      	movpl	r2, #1
   deb4a:	601a      	strpl	r2, [r3, #0]
   deb4c:	4b16      	ldr	r3, [pc, #88]	; (deba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   deb4e:	681a      	ldr	r2, [r3, #0]
   deb50:	07d1      	lsls	r1, r2, #31
   deb52:	bf5c      	itt	pl
   deb54:	2201      	movpl	r2, #1
   deb56:	601a      	strpl	r2, [r3, #0]
   deb58:	4b14      	ldr	r3, [pc, #80]	; (debac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   deb5a:	681a      	ldr	r2, [r3, #0]
   deb5c:	07d2      	lsls	r2, r2, #31
   deb5e:	bf5c      	itt	pl
   deb60:	2201      	movpl	r2, #1
   deb62:	601a      	strpl	r2, [r3, #0]
   deb64:	4b12      	ldr	r3, [pc, #72]	; (debb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   deb66:	681a      	ldr	r2, [r3, #0]
   deb68:	07d0      	lsls	r0, r2, #31
   deb6a:	bf5c      	itt	pl
   deb6c:	2201      	movpl	r2, #1
   deb6e:	601a      	strpl	r2, [r3, #0]
   deb70:	4b10      	ldr	r3, [pc, #64]	; (debb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   deb72:	681a      	ldr	r2, [r3, #0]
   deb74:	07d1      	lsls	r1, r2, #31
   deb76:	bf5c      	itt	pl
   deb78:	2201      	movpl	r2, #1
   deb7a:	601a      	strpl	r2, [r3, #0]
   deb7c:	4b0e      	ldr	r3, [pc, #56]	; (debb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   deb7e:	681a      	ldr	r2, [r3, #0]
   deb80:	07d2      	lsls	r2, r2, #31
   deb82:	bf5c      	itt	pl
   deb84:	2201      	movpl	r2, #1
   deb86:	601a      	strpl	r2, [r3, #0]
   deb88:	4770      	bx	lr
   deb8a:	bf00      	nop
   deb8c:	2003e6a4 	.word	0x2003e6a4
   deb90:	2003e6a0 	.word	0x2003e6a0
   deb94:	2003e69c 	.word	0x2003e69c
   deb98:	2003e698 	.word	0x2003e698
   deb9c:	2003e694 	.word	0x2003e694
   deba0:	2003e690 	.word	0x2003e690
   deba4:	2003e68c 	.word	0x2003e68c
   deba8:	2003e688 	.word	0x2003e688
   debac:	2003e684 	.word	0x2003e684
   debb0:	2003e680 	.word	0x2003e680
   debb4:	2003e67c 	.word	0x2003e67c
   debb8:	2003e678 	.word	0x2003e678

000debbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   debbc:	4b18      	ldr	r3, [pc, #96]	; (dec20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   debbe:	681a      	ldr	r2, [r3, #0]
   debc0:	07d1      	lsls	r1, r2, #31
   debc2:	bf5c      	itt	pl
   debc4:	2201      	movpl	r2, #1
   debc6:	601a      	strpl	r2, [r3, #0]
   debc8:	4b16      	ldr	r3, [pc, #88]	; (dec24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   debca:	681a      	ldr	r2, [r3, #0]
   debcc:	07d2      	lsls	r2, r2, #31
   debce:	bf5c      	itt	pl
   debd0:	2201      	movpl	r2, #1
   debd2:	601a      	strpl	r2, [r3, #0]
   debd4:	4b14      	ldr	r3, [pc, #80]	; (dec28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   debd6:	681a      	ldr	r2, [r3, #0]
   debd8:	07d0      	lsls	r0, r2, #31
   debda:	bf5c      	itt	pl
   debdc:	2201      	movpl	r2, #1
   debde:	601a      	strpl	r2, [r3, #0]
   debe0:	4b12      	ldr	r3, [pc, #72]	; (dec2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   debe2:	681a      	ldr	r2, [r3, #0]
   debe4:	07d1      	lsls	r1, r2, #31
   debe6:	bf5c      	itt	pl
   debe8:	2201      	movpl	r2, #1
   debea:	601a      	strpl	r2, [r3, #0]
   debec:	4b10      	ldr	r3, [pc, #64]	; (dec30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   debee:	681a      	ldr	r2, [r3, #0]
   debf0:	07d2      	lsls	r2, r2, #31
   debf2:	bf5c      	itt	pl
   debf4:	2201      	movpl	r2, #1
   debf6:	601a      	strpl	r2, [r3, #0]
   debf8:	4b0e      	ldr	r3, [pc, #56]	; (dec34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   debfa:	681a      	ldr	r2, [r3, #0]
   debfc:	07d0      	lsls	r0, r2, #31
   debfe:	bf5c      	itt	pl
   dec00:	2201      	movpl	r2, #1
   dec02:	601a      	strpl	r2, [r3, #0]
   dec04:	4b0c      	ldr	r3, [pc, #48]	; (dec38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dec06:	681a      	ldr	r2, [r3, #0]
   dec08:	07d1      	lsls	r1, r2, #31
   dec0a:	bf5c      	itt	pl
   dec0c:	2201      	movpl	r2, #1
   dec0e:	601a      	strpl	r2, [r3, #0]
   dec10:	4b0a      	ldr	r3, [pc, #40]	; (dec3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dec12:	681a      	ldr	r2, [r3, #0]
   dec14:	07d2      	lsls	r2, r2, #31
   dec16:	bf5c      	itt	pl
   dec18:	2201      	movpl	r2, #1
   dec1a:	601a      	strpl	r2, [r3, #0]
   dec1c:	4770      	bx	lr
   dec1e:	bf00      	nop
   dec20:	2003e6c4 	.word	0x2003e6c4
   dec24:	2003e6c0 	.word	0x2003e6c0
   dec28:	2003e6bc 	.word	0x2003e6bc
   dec2c:	2003e6b8 	.word	0x2003e6b8
   dec30:	2003e6b4 	.word	0x2003e6b4
   dec34:	2003e6b0 	.word	0x2003e6b0
   dec38:	2003e6ac 	.word	0x2003e6ac
   dec3c:	2003e6a8 	.word	0x2003e6a8

000dec40 <atan>:
   dec40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dec44:	ec55 4b10 	vmov	r4, r5, d0
   dec48:	4bd1      	ldr	r3, [pc, #836]	; (def90 <atan+0x350>)
   dec4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dec4e:	429e      	cmp	r6, r3
   dec50:	46ab      	mov	fp, r5
   dec52:	dd10      	ble.n	dec76 <atan+0x36>
   dec54:	4bcf      	ldr	r3, [pc, #828]	; (def94 <atan+0x354>)
   dec56:	429e      	cmp	r6, r3
   dec58:	f300 80b2 	bgt.w	dedc0 <atan+0x180>
   dec5c:	f000 80ad 	beq.w	dedba <atan+0x17a>
   dec60:	f1bb 0f00 	cmp.w	fp, #0
   dec64:	f340 80fd 	ble.w	dee62 <atan+0x222>
   dec68:	a5ad      	add	r5, pc, #692	; (adr r5, def20 <atan+0x2e0>)
   dec6a:	e9d5 4500 	ldrd	r4, r5, [r5]
   dec6e:	ec45 4b10 	vmov	d0, r4, r5
   dec72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dec76:	4bc8      	ldr	r3, [pc, #800]	; (def98 <atan+0x358>)
   dec78:	429e      	cmp	r6, r3
   dec7a:	f300 80c0 	bgt.w	dedfe <atan+0x1be>
   dec7e:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dec82:	429e      	cmp	r6, r3
   dec84:	f340 80a8 	ble.w	dedd8 <atan+0x198>
   dec88:	f04f 3aff 	mov.w	sl, #4294967295
   dec8c:	4622      	mov	r2, r4
   dec8e:	462b      	mov	r3, r5
   dec90:	4620      	mov	r0, r4
   dec92:	4629      	mov	r1, r5
   dec94:	f001 fe0c 	bl	e08b0 <__aeabi_dmul>
   dec98:	4602      	mov	r2, r0
   dec9a:	460b      	mov	r3, r1
   dec9c:	4680      	mov	r8, r0
   dec9e:	4689      	mov	r9, r1
   deca0:	f001 fe06 	bl	e08b0 <__aeabi_dmul>
   deca4:	a3a0      	add	r3, pc, #640	; (adr r3, def28 <atan+0x2e8>)
   deca6:	e9d3 2300 	ldrd	r2, r3, [r3]
   decaa:	4606      	mov	r6, r0
   decac:	460f      	mov	r7, r1
   decae:	f001 fdff 	bl	e08b0 <__aeabi_dmul>
   decb2:	a39f      	add	r3, pc, #636	; (adr r3, def30 <atan+0x2f0>)
   decb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   decb8:	f001 fc48 	bl	e054c <__adddf3>
   decbc:	4632      	mov	r2, r6
   decbe:	463b      	mov	r3, r7
   decc0:	f001 fdf6 	bl	e08b0 <__aeabi_dmul>
   decc4:	a39c      	add	r3, pc, #624	; (adr r3, def38 <atan+0x2f8>)
   decc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   decca:	f001 fc3f 	bl	e054c <__adddf3>
   decce:	4632      	mov	r2, r6
   decd0:	463b      	mov	r3, r7
   decd2:	f001 fded 	bl	e08b0 <__aeabi_dmul>
   decd6:	a39a      	add	r3, pc, #616	; (adr r3, def40 <atan+0x300>)
   decd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   decdc:	f001 fc36 	bl	e054c <__adddf3>
   dece0:	4632      	mov	r2, r6
   dece2:	463b      	mov	r3, r7
   dece4:	f001 fde4 	bl	e08b0 <__aeabi_dmul>
   dece8:	a397      	add	r3, pc, #604	; (adr r3, def48 <atan+0x308>)
   decea:	e9d3 2300 	ldrd	r2, r3, [r3]
   decee:	f001 fc2d 	bl	e054c <__adddf3>
   decf2:	4632      	mov	r2, r6
   decf4:	463b      	mov	r3, r7
   decf6:	f001 fddb 	bl	e08b0 <__aeabi_dmul>
   decfa:	a395      	add	r3, pc, #596	; (adr r3, def50 <atan+0x310>)
   decfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded00:	f001 fc24 	bl	e054c <__adddf3>
   ded04:	4642      	mov	r2, r8
   ded06:	464b      	mov	r3, r9
   ded08:	f001 fdd2 	bl	e08b0 <__aeabi_dmul>
   ded0c:	a392      	add	r3, pc, #584	; (adr r3, def58 <atan+0x318>)
   ded0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded12:	4680      	mov	r8, r0
   ded14:	4689      	mov	r9, r1
   ded16:	4630      	mov	r0, r6
   ded18:	4639      	mov	r1, r7
   ded1a:	f001 fdc9 	bl	e08b0 <__aeabi_dmul>
   ded1e:	a390      	add	r3, pc, #576	; (adr r3, def60 <atan+0x320>)
   ded20:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded24:	f001 fc10 	bl	e0548 <__aeabi_dsub>
   ded28:	4632      	mov	r2, r6
   ded2a:	463b      	mov	r3, r7
   ded2c:	f001 fdc0 	bl	e08b0 <__aeabi_dmul>
   ded30:	a38d      	add	r3, pc, #564	; (adr r3, def68 <atan+0x328>)
   ded32:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded36:	f001 fc07 	bl	e0548 <__aeabi_dsub>
   ded3a:	4632      	mov	r2, r6
   ded3c:	463b      	mov	r3, r7
   ded3e:	f001 fdb7 	bl	e08b0 <__aeabi_dmul>
   ded42:	a38b      	add	r3, pc, #556	; (adr r3, def70 <atan+0x330>)
   ded44:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded48:	f001 fbfe 	bl	e0548 <__aeabi_dsub>
   ded4c:	4632      	mov	r2, r6
   ded4e:	463b      	mov	r3, r7
   ded50:	f001 fdae 	bl	e08b0 <__aeabi_dmul>
   ded54:	a388      	add	r3, pc, #544	; (adr r3, def78 <atan+0x338>)
   ded56:	e9d3 2300 	ldrd	r2, r3, [r3]
   ded5a:	f001 fbf5 	bl	e0548 <__aeabi_dsub>
   ded5e:	4632      	mov	r2, r6
   ded60:	463b      	mov	r3, r7
   ded62:	f001 fda5 	bl	e08b0 <__aeabi_dmul>
   ded66:	f1ba 3fff 	cmp.w	sl, #4294967295
   ded6a:	4602      	mov	r2, r0
   ded6c:	460b      	mov	r3, r1
   ded6e:	d07c      	beq.n	dee6a <atan+0x22a>
   ded70:	4640      	mov	r0, r8
   ded72:	4649      	mov	r1, r9
   ded74:	f001 fbea 	bl	e054c <__adddf3>
   ded78:	4622      	mov	r2, r4
   ded7a:	462b      	mov	r3, r5
   ded7c:	f001 fd98 	bl	e08b0 <__aeabi_dmul>
   ded80:	4e86      	ldr	r6, [pc, #536]	; (def9c <atan+0x35c>)
   ded82:	4b87      	ldr	r3, [pc, #540]	; (defa0 <atan+0x360>)
   ded84:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   ded88:	4456      	add	r6, sl
   ded8a:	449a      	add	sl, r3
   ded8c:	e9da 2300 	ldrd	r2, r3, [sl]
   ded90:	f001 fbda 	bl	e0548 <__aeabi_dsub>
   ded94:	4622      	mov	r2, r4
   ded96:	462b      	mov	r3, r5
   ded98:	f001 fbd6 	bl	e0548 <__aeabi_dsub>
   ded9c:	4602      	mov	r2, r0
   ded9e:	460b      	mov	r3, r1
   deda0:	e9d6 0100 	ldrd	r0, r1, [r6]
   deda4:	f001 fbd0 	bl	e0548 <__aeabi_dsub>
   deda8:	f1bb 0f00 	cmp.w	fp, #0
   dedac:	db52      	blt.n	dee54 <atan+0x214>
   dedae:	4604      	mov	r4, r0
   dedb0:	460d      	mov	r5, r1
   dedb2:	ec45 4b10 	vmov	d0, r4, r5
   dedb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dedba:	2c00      	cmp	r4, #0
   dedbc:	f43f af50 	beq.w	dec60 <atan+0x20>
   dedc0:	4622      	mov	r2, r4
   dedc2:	462b      	mov	r3, r5
   dedc4:	4620      	mov	r0, r4
   dedc6:	4629      	mov	r1, r5
   dedc8:	f001 fbc0 	bl	e054c <__adddf3>
   dedcc:	4604      	mov	r4, r0
   dedce:	460d      	mov	r5, r1
   dedd0:	ec45 4b10 	vmov	d0, r4, r5
   dedd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dedd8:	a369      	add	r3, pc, #420	; (adr r3, def80 <atan+0x340>)
   dedda:	e9d3 2300 	ldrd	r2, r3, [r3]
   dedde:	ee10 0a10 	vmov	r0, s0
   dede2:	4629      	mov	r1, r5
   dede4:	f001 fbb2 	bl	e054c <__adddf3>
   dede8:	2200      	movs	r2, #0
   dedea:	4b6e      	ldr	r3, [pc, #440]	; (defa4 <atan+0x364>)
   dedec:	f001 fff0 	bl	e0dd0 <__aeabi_dcmpgt>
   dedf0:	2800      	cmp	r0, #0
   dedf2:	f43f af49 	beq.w	dec88 <atan+0x48>
   dedf6:	ec45 4b10 	vmov	d0, r4, r5
   dedfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dedfe:	f000 f9cb 	bl	df198 <fabs>
   dee02:	4b69      	ldr	r3, [pc, #420]	; (defa8 <atan+0x368>)
   dee04:	429e      	cmp	r6, r3
   dee06:	ec55 4b10 	vmov	r4, r5, d0
   dee0a:	dc3f      	bgt.n	dee8c <atan+0x24c>
   dee0c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dee10:	429e      	cmp	r6, r3
   dee12:	dc68      	bgt.n	deee6 <atan+0x2a6>
   dee14:	ee10 2a10 	vmov	r2, s0
   dee18:	ee10 0a10 	vmov	r0, s0
   dee1c:	462b      	mov	r3, r5
   dee1e:	4629      	mov	r1, r5
   dee20:	f001 fb94 	bl	e054c <__adddf3>
   dee24:	2200      	movs	r2, #0
   dee26:	4b5f      	ldr	r3, [pc, #380]	; (defa4 <atan+0x364>)
   dee28:	f001 fb8e 	bl	e0548 <__aeabi_dsub>
   dee2c:	2200      	movs	r2, #0
   dee2e:	4606      	mov	r6, r0
   dee30:	460f      	mov	r7, r1
   dee32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dee36:	4620      	mov	r0, r4
   dee38:	4629      	mov	r1, r5
   dee3a:	f001 fb87 	bl	e054c <__adddf3>
   dee3e:	4602      	mov	r2, r0
   dee40:	460b      	mov	r3, r1
   dee42:	4630      	mov	r0, r6
   dee44:	4639      	mov	r1, r7
   dee46:	f001 fe5d 	bl	e0b04 <__aeabi_ddiv>
   dee4a:	f04f 0a00 	mov.w	sl, #0
   dee4e:	4604      	mov	r4, r0
   dee50:	460d      	mov	r5, r1
   dee52:	e71b      	b.n	dec8c <atan+0x4c>
   dee54:	4604      	mov	r4, r0
   dee56:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   dee5a:	ec45 4b10 	vmov	d0, r4, r5
   dee5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dee62:	a549      	add	r5, pc, #292	; (adr r5, def88 <atan+0x348>)
   dee64:	e9d5 4500 	ldrd	r4, r5, [r5]
   dee68:	e7b2      	b.n	dedd0 <atan+0x190>
   dee6a:	4640      	mov	r0, r8
   dee6c:	4649      	mov	r1, r9
   dee6e:	f001 fb6d 	bl	e054c <__adddf3>
   dee72:	4622      	mov	r2, r4
   dee74:	462b      	mov	r3, r5
   dee76:	f001 fd1b 	bl	e08b0 <__aeabi_dmul>
   dee7a:	4602      	mov	r2, r0
   dee7c:	460b      	mov	r3, r1
   dee7e:	4620      	mov	r0, r4
   dee80:	4629      	mov	r1, r5
   dee82:	f001 fb61 	bl	e0548 <__aeabi_dsub>
   dee86:	4604      	mov	r4, r0
   dee88:	460d      	mov	r5, r1
   dee8a:	e7a1      	b.n	dedd0 <atan+0x190>
   dee8c:	4b47      	ldr	r3, [pc, #284]	; (defac <atan+0x36c>)
   dee8e:	429e      	cmp	r6, r3
   dee90:	dc1d      	bgt.n	deece <atan+0x28e>
   dee92:	ee10 0a10 	vmov	r0, s0
   dee96:	2200      	movs	r2, #0
   dee98:	4b45      	ldr	r3, [pc, #276]	; (defb0 <atan+0x370>)
   dee9a:	4629      	mov	r1, r5
   dee9c:	f001 fb54 	bl	e0548 <__aeabi_dsub>
   deea0:	2200      	movs	r2, #0
   deea2:	4606      	mov	r6, r0
   deea4:	460f      	mov	r7, r1
   deea6:	4b42      	ldr	r3, [pc, #264]	; (defb0 <atan+0x370>)
   deea8:	4620      	mov	r0, r4
   deeaa:	4629      	mov	r1, r5
   deeac:	f001 fd00 	bl	e08b0 <__aeabi_dmul>
   deeb0:	2200      	movs	r2, #0
   deeb2:	4b3c      	ldr	r3, [pc, #240]	; (defa4 <atan+0x364>)
   deeb4:	f001 fb4a 	bl	e054c <__adddf3>
   deeb8:	4602      	mov	r2, r0
   deeba:	460b      	mov	r3, r1
   deebc:	4630      	mov	r0, r6
   deebe:	4639      	mov	r1, r7
   deec0:	f001 fe20 	bl	e0b04 <__aeabi_ddiv>
   deec4:	f04f 0a02 	mov.w	sl, #2
   deec8:	4604      	mov	r4, r0
   deeca:	460d      	mov	r5, r1
   deecc:	e6de      	b.n	dec8c <atan+0x4c>
   deece:	462b      	mov	r3, r5
   deed0:	ee10 2a10 	vmov	r2, s0
   deed4:	2000      	movs	r0, #0
   deed6:	4937      	ldr	r1, [pc, #220]	; (defb4 <atan+0x374>)
   deed8:	f001 fe14 	bl	e0b04 <__aeabi_ddiv>
   deedc:	f04f 0a03 	mov.w	sl, #3
   deee0:	4604      	mov	r4, r0
   deee2:	460d      	mov	r5, r1
   deee4:	e6d2      	b.n	dec8c <atan+0x4c>
   deee6:	ee10 0a10 	vmov	r0, s0
   deeea:	2200      	movs	r2, #0
   deeec:	4b2d      	ldr	r3, [pc, #180]	; (defa4 <atan+0x364>)
   deeee:	4629      	mov	r1, r5
   deef0:	f001 fb2a 	bl	e0548 <__aeabi_dsub>
   deef4:	2200      	movs	r2, #0
   deef6:	4606      	mov	r6, r0
   deef8:	460f      	mov	r7, r1
   deefa:	4b2a      	ldr	r3, [pc, #168]	; (defa4 <atan+0x364>)
   deefc:	4620      	mov	r0, r4
   deefe:	4629      	mov	r1, r5
   def00:	f001 fb24 	bl	e054c <__adddf3>
   def04:	4602      	mov	r2, r0
   def06:	460b      	mov	r3, r1
   def08:	4630      	mov	r0, r6
   def0a:	4639      	mov	r1, r7
   def0c:	f001 fdfa 	bl	e0b04 <__aeabi_ddiv>
   def10:	f04f 0a01 	mov.w	sl, #1
   def14:	4604      	mov	r4, r0
   def16:	460d      	mov	r5, r1
   def18:	e6b8      	b.n	dec8c <atan+0x4c>
   def1a:	bf00      	nop
   def1c:	f3af 8000 	nop.w
   def20:	54442d18 	.word	0x54442d18
   def24:	3ff921fb 	.word	0x3ff921fb
   def28:	e322da11 	.word	0xe322da11
   def2c:	3f90ad3a 	.word	0x3f90ad3a
   def30:	24760deb 	.word	0x24760deb
   def34:	3fa97b4b 	.word	0x3fa97b4b
   def38:	a0d03d51 	.word	0xa0d03d51
   def3c:	3fb10d66 	.word	0x3fb10d66
   def40:	c54c206e 	.word	0xc54c206e
   def44:	3fb745cd 	.word	0x3fb745cd
   def48:	920083ff 	.word	0x920083ff
   def4c:	3fc24924 	.word	0x3fc24924
   def50:	5555550d 	.word	0x5555550d
   def54:	3fd55555 	.word	0x3fd55555
   def58:	2c6a6c2f 	.word	0x2c6a6c2f
   def5c:	bfa2b444 	.word	0xbfa2b444
   def60:	52defd9a 	.word	0x52defd9a
   def64:	3fadde2d 	.word	0x3fadde2d
   def68:	af749a6d 	.word	0xaf749a6d
   def6c:	3fb3b0f2 	.word	0x3fb3b0f2
   def70:	fe231671 	.word	0xfe231671
   def74:	3fbc71c6 	.word	0x3fbc71c6
   def78:	9998ebc4 	.word	0x9998ebc4
   def7c:	3fc99999 	.word	0x3fc99999
   def80:	8800759c 	.word	0x8800759c
   def84:	7e37e43c 	.word	0x7e37e43c
   def88:	54442d18 	.word	0x54442d18
   def8c:	bff921fb 	.word	0xbff921fb
   def90:	440fffff 	.word	0x440fffff
   def94:	7ff00000 	.word	0x7ff00000
   def98:	3fdbffff 	.word	0x3fdbffff
   def9c:	000e5a50 	.word	0x000e5a50
   defa0:	000e5a30 	.word	0x000e5a30
   defa4:	3ff00000 	.word	0x3ff00000
   defa8:	3ff2ffff 	.word	0x3ff2ffff
   defac:	40037fff 	.word	0x40037fff
   defb0:	3ff80000 	.word	0x3ff80000
   defb4:	bff00000 	.word	0xbff00000

000defb8 <ceil>:
   defb8:	ec51 0b10 	vmov	r0, r1, d0
   defbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
   defc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   defc4:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   defc8:	2d13      	cmp	r5, #19
   defca:	460c      	mov	r4, r1
   defcc:	460f      	mov	r7, r1
   defce:	ee10 6a10 	vmov	r6, s0
   defd2:	dc22      	bgt.n	df01a <ceil+0x62>
   defd4:	2d00      	cmp	r5, #0
   defd6:	db52      	blt.n	df07e <ceil+0xc6>
   defd8:	4b3d      	ldr	r3, [pc, #244]	; (df0d0 <ceil+0x118>)
   defda:	fa43 f805 	asr.w	r8, r3, r5
   defde:	ea01 0308 	and.w	r3, r1, r8
   defe2:	4303      	orrs	r3, r0
   defe4:	d01e      	beq.n	df024 <ceil+0x6c>
   defe6:	a338      	add	r3, pc, #224	; (adr r3, df0c8 <ceil+0x110>)
   defe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   defec:	f001 faae 	bl	e054c <__adddf3>
   deff0:	2200      	movs	r2, #0
   deff2:	2300      	movs	r3, #0
   deff4:	f001 feec 	bl	e0dd0 <__aeabi_dcmpgt>
   deff8:	b148      	cbz	r0, df00e <ceil+0x56>
   deffa:	2c00      	cmp	r4, #0
   deffc:	dd04      	ble.n	df008 <ceil+0x50>
   deffe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   df002:	fa43 f505 	asr.w	r5, r3, r5
   df006:	442f      	add	r7, r5
   df008:	ea27 0408 	bic.w	r4, r7, r8
   df00c:	2600      	movs	r6, #0
   df00e:	4623      	mov	r3, r4
   df010:	4632      	mov	r2, r6
   df012:	ec43 2b10 	vmov	d0, r2, r3
   df016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   df01a:	2d33      	cmp	r5, #51	; 0x33
   df01c:	dd06      	ble.n	df02c <ceil+0x74>
   df01e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   df022:	d03e      	beq.n	df0a2 <ceil+0xea>
   df024:	ec41 0b10 	vmov	d0, r0, r1
   df028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   df02c:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   df030:	f04f 38ff 	mov.w	r8, #4294967295
   df034:	fa28 f803 	lsr.w	r8, r8, r3
   df038:	ea10 0f08 	tst.w	r0, r8
   df03c:	d0f2      	beq.n	df024 <ceil+0x6c>
   df03e:	a322      	add	r3, pc, #136	; (adr r3, df0c8 <ceil+0x110>)
   df040:	e9d3 2300 	ldrd	r2, r3, [r3]
   df044:	f001 fa82 	bl	e054c <__adddf3>
   df048:	2200      	movs	r2, #0
   df04a:	2300      	movs	r3, #0
   df04c:	f001 fec0 	bl	e0dd0 <__aeabi_dcmpgt>
   df050:	2800      	cmp	r0, #0
   df052:	d0dc      	beq.n	df00e <ceil+0x56>
   df054:	2c00      	cmp	r4, #0
   df056:	dd09      	ble.n	df06c <ceil+0xb4>
   df058:	2d14      	cmp	r5, #20
   df05a:	d031      	beq.n	df0c0 <ceil+0x108>
   df05c:	2301      	movs	r3, #1
   df05e:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   df062:	fa03 f505 	lsl.w	r5, r3, r5
   df066:	19ae      	adds	r6, r5, r6
   df068:	bf28      	it	cs
   df06a:	18ff      	addcs	r7, r7, r3
   df06c:	463c      	mov	r4, r7
   df06e:	ea26 0608 	bic.w	r6, r6, r8
   df072:	4623      	mov	r3, r4
   df074:	4632      	mov	r2, r6
   df076:	ec43 2b10 	vmov	d0, r2, r3
   df07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   df07e:	a312      	add	r3, pc, #72	; (adr r3, df0c8 <ceil+0x110>)
   df080:	e9d3 2300 	ldrd	r2, r3, [r3]
   df084:	f001 fa62 	bl	e054c <__adddf3>
   df088:	2200      	movs	r2, #0
   df08a:	2300      	movs	r3, #0
   df08c:	f001 fea0 	bl	e0dd0 <__aeabi_dcmpgt>
   df090:	2800      	cmp	r0, #0
   df092:	d0bc      	beq.n	df00e <ceil+0x56>
   df094:	2c00      	cmp	r4, #0
   df096:	db0f      	blt.n	df0b8 <ceil+0x100>
   df098:	4326      	orrs	r6, r4
   df09a:	d00b      	beq.n	df0b4 <ceil+0xfc>
   df09c:	2600      	movs	r6, #0
   df09e:	4c0d      	ldr	r4, [pc, #52]	; (df0d4 <ceil+0x11c>)
   df0a0:	e7b5      	b.n	df00e <ceil+0x56>
   df0a2:	ee10 2a10 	vmov	r2, s0
   df0a6:	460b      	mov	r3, r1
   df0a8:	f001 fa50 	bl	e054c <__adddf3>
   df0ac:	ec41 0b10 	vmov	d0, r0, r1
   df0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   df0b4:	4634      	mov	r4, r6
   df0b6:	e7aa      	b.n	df00e <ceil+0x56>
   df0b8:	2600      	movs	r6, #0
   df0ba:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   df0be:	e7a6      	b.n	df00e <ceil+0x56>
   df0c0:	3701      	adds	r7, #1
   df0c2:	e7d3      	b.n	df06c <ceil+0xb4>
   df0c4:	f3af 8000 	nop.w
   df0c8:	8800759c 	.word	0x8800759c
   df0cc:	7e37e43c 	.word	0x7e37e43c
   df0d0:	000fffff 	.word	0x000fffff
   df0d4:	3ff00000 	.word	0x3ff00000

000df0d8 <cos>:
   df0d8:	b500      	push	{lr}
   df0da:	ec51 0b10 	vmov	r0, r1, d0
   df0de:	4a2c      	ldr	r2, [pc, #176]	; (df190 <cos+0xb8>)
   df0e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   df0e4:	4293      	cmp	r3, r2
   df0e6:	b085      	sub	sp, #20
   df0e8:	dd20      	ble.n	df12c <cos+0x54>
   df0ea:	4a2a      	ldr	r2, [pc, #168]	; (df194 <cos+0xbc>)
   df0ec:	4293      	cmp	r3, r2
   df0ee:	dd09      	ble.n	df104 <cos+0x2c>
   df0f0:	ee10 2a10 	vmov	r2, s0
   df0f4:	460b      	mov	r3, r1
   df0f6:	f001 fa27 	bl	e0548 <__aeabi_dsub>
   df0fa:	ec41 0b10 	vmov	d0, r0, r1
   df0fe:	b005      	add	sp, #20
   df100:	f85d fb04 	ldr.w	pc, [sp], #4
   df104:	4668      	mov	r0, sp
   df106:	f000 f8af 	bl	df268 <__ieee754_rem_pio2>
   df10a:	f000 0003 	and.w	r0, r0, #3
   df10e:	2801      	cmp	r0, #1
   df110:	d028      	beq.n	df164 <cos+0x8c>
   df112:	2802      	cmp	r0, #2
   df114:	d015      	beq.n	df142 <cos+0x6a>
   df116:	b360      	cbz	r0, df172 <cos+0x9a>
   df118:	2001      	movs	r0, #1
   df11a:	ed9d 1b02 	vldr	d1, [sp, #8]
   df11e:	ed9d 0b00 	vldr	d0, [sp]
   df122:	f001 f81d 	bl	e0160 <__kernel_sin>
   df126:	ec51 0b10 	vmov	r0, r1, d0
   df12a:	e7e6      	b.n	df0fa <cos+0x22>
   df12c:	ed9f 1b16 	vldr	d1, [pc, #88]	; df188 <cos+0xb0>
   df130:	f000 fac2 	bl	df6b8 <__kernel_cos>
   df134:	ec51 0b10 	vmov	r0, r1, d0
   df138:	ec41 0b10 	vmov	d0, r0, r1
   df13c:	b005      	add	sp, #20
   df13e:	f85d fb04 	ldr.w	pc, [sp], #4
   df142:	ed9d 1b02 	vldr	d1, [sp, #8]
   df146:	ed9d 0b00 	vldr	d0, [sp]
   df14a:	f000 fab5 	bl	df6b8 <__kernel_cos>
   df14e:	ec53 2b10 	vmov	r2, r3, d0
   df152:	ee10 0a10 	vmov	r0, s0
   df156:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   df15a:	ec41 0b10 	vmov	d0, r0, r1
   df15e:	b005      	add	sp, #20
   df160:	f85d fb04 	ldr.w	pc, [sp], #4
   df164:	ed9d 1b02 	vldr	d1, [sp, #8]
   df168:	ed9d 0b00 	vldr	d0, [sp]
   df16c:	f000 fff8 	bl	e0160 <__kernel_sin>
   df170:	e7ed      	b.n	df14e <cos+0x76>
   df172:	ed9d 1b02 	vldr	d1, [sp, #8]
   df176:	ed9d 0b00 	vldr	d0, [sp]
   df17a:	f000 fa9d 	bl	df6b8 <__kernel_cos>
   df17e:	ec51 0b10 	vmov	r0, r1, d0
   df182:	e7ba      	b.n	df0fa <cos+0x22>
   df184:	f3af 8000 	nop.w
	...
   df190:	3fe921fb 	.word	0x3fe921fb
   df194:	7fefffff 	.word	0x7fefffff

000df198 <fabs>:
   df198:	ec53 2b10 	vmov	r2, r3, d0
   df19c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   df1a0:	ec43 2b10 	vmov	d0, r2, r3
   df1a4:	4770      	bx	lr
   df1a6:	bf00      	nop

000df1a8 <sin>:
   df1a8:	b500      	push	{lr}
   df1aa:	ec51 0b10 	vmov	r0, r1, d0
   df1ae:	4a2c      	ldr	r2, [pc, #176]	; (df260 <sin+0xb8>)
   df1b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   df1b4:	4293      	cmp	r3, r2
   df1b6:	b085      	sub	sp, #20
   df1b8:	dd27      	ble.n	df20a <sin+0x62>
   df1ba:	4a2a      	ldr	r2, [pc, #168]	; (df264 <sin+0xbc>)
   df1bc:	4293      	cmp	r3, r2
   df1be:	dd09      	ble.n	df1d4 <sin+0x2c>
   df1c0:	ee10 2a10 	vmov	r2, s0
   df1c4:	460b      	mov	r3, r1
   df1c6:	f001 f9bf 	bl	e0548 <__aeabi_dsub>
   df1ca:	ec41 0b10 	vmov	d0, r0, r1
   df1ce:	b005      	add	sp, #20
   df1d0:	f85d fb04 	ldr.w	pc, [sp], #4
   df1d4:	4668      	mov	r0, sp
   df1d6:	f000 f847 	bl	df268 <__ieee754_rem_pio2>
   df1da:	f000 0003 	and.w	r0, r0, #3
   df1de:	2801      	cmp	r0, #1
   df1e0:	d027      	beq.n	df232 <sin+0x8a>
   df1e2:	2802      	cmp	r0, #2
   df1e4:	d01d      	beq.n	df222 <sin+0x7a>
   df1e6:	b368      	cbz	r0, df244 <sin+0x9c>
   df1e8:	ed9d 1b02 	vldr	d1, [sp, #8]
   df1ec:	ed9d 0b00 	vldr	d0, [sp]
   df1f0:	f000 fa62 	bl	df6b8 <__kernel_cos>
   df1f4:	ec53 2b10 	vmov	r2, r3, d0
   df1f8:	ee10 0a10 	vmov	r0, s0
   df1fc:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   df200:	ec41 0b10 	vmov	d0, r0, r1
   df204:	b005      	add	sp, #20
   df206:	f85d fb04 	ldr.w	pc, [sp], #4
   df20a:	2000      	movs	r0, #0
   df20c:	ed9f 1b12 	vldr	d1, [pc, #72]	; df258 <sin+0xb0>
   df210:	f000 ffa6 	bl	e0160 <__kernel_sin>
   df214:	ec51 0b10 	vmov	r0, r1, d0
   df218:	ec41 0b10 	vmov	d0, r0, r1
   df21c:	b005      	add	sp, #20
   df21e:	f85d fb04 	ldr.w	pc, [sp], #4
   df222:	2001      	movs	r0, #1
   df224:	ed9d 1b02 	vldr	d1, [sp, #8]
   df228:	ed9d 0b00 	vldr	d0, [sp]
   df22c:	f000 ff98 	bl	e0160 <__kernel_sin>
   df230:	e7e0      	b.n	df1f4 <sin+0x4c>
   df232:	ed9d 1b02 	vldr	d1, [sp, #8]
   df236:	ed9d 0b00 	vldr	d0, [sp]
   df23a:	f000 fa3d 	bl	df6b8 <__kernel_cos>
   df23e:	ec51 0b10 	vmov	r0, r1, d0
   df242:	e7c2      	b.n	df1ca <sin+0x22>
   df244:	2001      	movs	r0, #1
   df246:	ed9d 1b02 	vldr	d1, [sp, #8]
   df24a:	ed9d 0b00 	vldr	d0, [sp]
   df24e:	f000 ff87 	bl	e0160 <__kernel_sin>
   df252:	ec51 0b10 	vmov	r0, r1, d0
   df256:	e7b8      	b.n	df1ca <sin+0x22>
	...
   df260:	3fe921fb 	.word	0x3fe921fb
   df264:	7fefffff 	.word	0x7fefffff

000df268 <__ieee754_rem_pio2>:
   df268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df26c:	ec53 2b10 	vmov	r2, r3, d0
   df270:	4997      	ldr	r1, [pc, #604]	; (df4d0 <__ieee754_rem_pio2+0x268>)
   df272:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   df276:	458b      	cmp	fp, r1
   df278:	b08f      	sub	sp, #60	; 0x3c
   df27a:	f340 8087 	ble.w	df38c <__ieee754_rem_pio2+0x124>
   df27e:	4995      	ldr	r1, [pc, #596]	; (df4d4 <__ieee754_rem_pio2+0x26c>)
   df280:	458b      	cmp	fp, r1
   df282:	461c      	mov	r4, r3
   df284:	4682      	mov	sl, r0
   df286:	dc29      	bgt.n	df2dc <__ieee754_rem_pio2+0x74>
   df288:	2c00      	cmp	r4, #0
   df28a:	4619      	mov	r1, r3
   df28c:	ee10 0a10 	vmov	r0, s0
   df290:	a385      	add	r3, pc, #532	; (adr r3, df4a8 <__ieee754_rem_pio2+0x240>)
   df292:	e9d3 2300 	ldrd	r2, r3, [r3]
   df296:	f340 81a5 	ble.w	df5e4 <__ieee754_rem_pio2+0x37c>
   df29a:	f001 f955 	bl	e0548 <__aeabi_dsub>
   df29e:	4b8e      	ldr	r3, [pc, #568]	; (df4d8 <__ieee754_rem_pio2+0x270>)
   df2a0:	459b      	cmp	fp, r3
   df2a2:	4604      	mov	r4, r0
   df2a4:	460d      	mov	r5, r1
   df2a6:	f000 8087 	beq.w	df3b8 <__ieee754_rem_pio2+0x150>
   df2aa:	a381      	add	r3, pc, #516	; (adr r3, df4b0 <__ieee754_rem_pio2+0x248>)
   df2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   df2b0:	f001 f94a 	bl	e0548 <__aeabi_dsub>
   df2b4:	4602      	mov	r2, r0
   df2b6:	460b      	mov	r3, r1
   df2b8:	e9ca 2300 	strd	r2, r3, [sl]
   df2bc:	4620      	mov	r0, r4
   df2be:	4629      	mov	r1, r5
   df2c0:	f001 f942 	bl	e0548 <__aeabi_dsub>
   df2c4:	a37a      	add	r3, pc, #488	; (adr r3, df4b0 <__ieee754_rem_pio2+0x248>)
   df2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df2ca:	f001 f93d 	bl	e0548 <__aeabi_dsub>
   df2ce:	2501      	movs	r5, #1
   df2d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
   df2d4:	4628      	mov	r0, r5
   df2d6:	b00f      	add	sp, #60	; 0x3c
   df2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df2dc:	497f      	ldr	r1, [pc, #508]	; (df4dc <__ieee754_rem_pio2+0x274>)
   df2de:	458b      	cmp	fp, r1
   df2e0:	f340 8087 	ble.w	df3f2 <__ieee754_rem_pio2+0x18a>
   df2e4:	497e      	ldr	r1, [pc, #504]	; (df4e0 <__ieee754_rem_pio2+0x278>)
   df2e6:	458b      	cmp	fp, r1
   df2e8:	dc5b      	bgt.n	df3a2 <__ieee754_rem_pio2+0x13a>
   df2ea:	ea4f 552b 	mov.w	r5, fp, asr #20
   df2ee:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   df2f2:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   df2f6:	4610      	mov	r0, r2
   df2f8:	4639      	mov	r1, r7
   df2fa:	ee10 6a10 	vmov	r6, s0
   df2fe:	f001 fd87 	bl	e0e10 <__aeabi_d2iz>
   df302:	f001 fa6f 	bl	e07e4 <__aeabi_i2d>
   df306:	4680      	mov	r8, r0
   df308:	4689      	mov	r9, r1
   df30a:	4642      	mov	r2, r8
   df30c:	464b      	mov	r3, r9
   df30e:	4630      	mov	r0, r6
   df310:	4639      	mov	r1, r7
   df312:	e9cd 8908 	strd	r8, r9, [sp, #32]
   df316:	f001 f917 	bl	e0548 <__aeabi_dsub>
   df31a:	2200      	movs	r2, #0
   df31c:	4b71      	ldr	r3, [pc, #452]	; (df4e4 <__ieee754_rem_pio2+0x27c>)
   df31e:	f001 fac7 	bl	e08b0 <__aeabi_dmul>
   df322:	4689      	mov	r9, r1
   df324:	4680      	mov	r8, r0
   df326:	f001 fd73 	bl	e0e10 <__aeabi_d2iz>
   df32a:	f001 fa5b 	bl	e07e4 <__aeabi_i2d>
   df32e:	4606      	mov	r6, r0
   df330:	460f      	mov	r7, r1
   df332:	4632      	mov	r2, r6
   df334:	463b      	mov	r3, r7
   df336:	4640      	mov	r0, r8
   df338:	4649      	mov	r1, r9
   df33a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   df33e:	f001 f903 	bl	e0548 <__aeabi_dsub>
   df342:	2200      	movs	r2, #0
   df344:	4b67      	ldr	r3, [pc, #412]	; (df4e4 <__ieee754_rem_pio2+0x27c>)
   df346:	f001 fab3 	bl	e08b0 <__aeabi_dmul>
   df34a:	2200      	movs	r2, #0
   df34c:	2300      	movs	r3, #0
   df34e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   df352:	f001 fd15 	bl	e0d80 <__aeabi_dcmpeq>
   df356:	2800      	cmp	r0, #0
   df358:	f000 8170 	beq.w	df63c <__ieee754_rem_pio2+0x3d4>
   df35c:	2300      	movs	r3, #0
   df35e:	4630      	mov	r0, r6
   df360:	4639      	mov	r1, r7
   df362:	2200      	movs	r2, #0
   df364:	f001 fd0c 	bl	e0d80 <__aeabi_dcmpeq>
   df368:	2800      	cmp	r0, #0
   df36a:	bf14      	ite	ne
   df36c:	2301      	movne	r3, #1
   df36e:	2302      	moveq	r3, #2
   df370:	4a5d      	ldr	r2, [pc, #372]	; (df4e8 <__ieee754_rem_pio2+0x280>)
   df372:	9201      	str	r2, [sp, #4]
   df374:	2102      	movs	r1, #2
   df376:	9100      	str	r1, [sp, #0]
   df378:	462a      	mov	r2, r5
   df37a:	4651      	mov	r1, sl
   df37c:	a808      	add	r0, sp, #32
   df37e:	f000 fadf 	bl	df940 <__kernel_rem_pio2>
   df382:	2c00      	cmp	r4, #0
   df384:	f2c0 814c 	blt.w	df620 <__ieee754_rem_pio2+0x3b8>
   df388:	4605      	mov	r5, r0
   df38a:	e006      	b.n	df39a <__ieee754_rem_pio2+0x132>
   df38c:	ed80 0b00 	vstr	d0, [r0]
   df390:	2500      	movs	r5, #0
   df392:	2400      	movs	r4, #0
   df394:	e9c0 4502 	strd	r4, r5, [r0, #8]
   df398:	2500      	movs	r5, #0
   df39a:	4628      	mov	r0, r5
   df39c:	b00f      	add	sp, #60	; 0x3c
   df39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df3a2:	ee10 0a10 	vmov	r0, s0
   df3a6:	4619      	mov	r1, r3
   df3a8:	f001 f8ce 	bl	e0548 <__aeabi_dsub>
   df3ac:	2500      	movs	r5, #0
   df3ae:	e9ca 0102 	strd	r0, r1, [sl, #8]
   df3b2:	e9ca 0100 	strd	r0, r1, [sl]
   df3b6:	e7f0      	b.n	df39a <__ieee754_rem_pio2+0x132>
   df3b8:	a33f      	add	r3, pc, #252	; (adr r3, df4b8 <__ieee754_rem_pio2+0x250>)
   df3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3be:	f001 f8c3 	bl	e0548 <__aeabi_dsub>
   df3c2:	a33f      	add	r3, pc, #252	; (adr r3, df4c0 <__ieee754_rem_pio2+0x258>)
   df3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3c8:	460d      	mov	r5, r1
   df3ca:	4604      	mov	r4, r0
   df3cc:	f001 f8bc 	bl	e0548 <__aeabi_dsub>
   df3d0:	4602      	mov	r2, r0
   df3d2:	460b      	mov	r3, r1
   df3d4:	e9ca 2300 	strd	r2, r3, [sl]
   df3d8:	4629      	mov	r1, r5
   df3da:	4620      	mov	r0, r4
   df3dc:	f001 f8b4 	bl	e0548 <__aeabi_dsub>
   df3e0:	a337      	add	r3, pc, #220	; (adr r3, df4c0 <__ieee754_rem_pio2+0x258>)
   df3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   df3e6:	f001 f8af 	bl	e0548 <__aeabi_dsub>
   df3ea:	2501      	movs	r5, #1
   df3ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
   df3f0:	e7d3      	b.n	df39a <__ieee754_rem_pio2+0x132>
   df3f2:	f7ff fed1 	bl	df198 <fabs>
   df3f6:	ec57 6b10 	vmov	r6, r7, d0
   df3fa:	ee10 0a10 	vmov	r0, s0
   df3fe:	a332      	add	r3, pc, #200	; (adr r3, df4c8 <__ieee754_rem_pio2+0x260>)
   df400:	e9d3 2300 	ldrd	r2, r3, [r3]
   df404:	4639      	mov	r1, r7
   df406:	f001 fa53 	bl	e08b0 <__aeabi_dmul>
   df40a:	2200      	movs	r2, #0
   df40c:	4b37      	ldr	r3, [pc, #220]	; (df4ec <__ieee754_rem_pio2+0x284>)
   df40e:	f001 f89d 	bl	e054c <__adddf3>
   df412:	f001 fcfd 	bl	e0e10 <__aeabi_d2iz>
   df416:	4605      	mov	r5, r0
   df418:	f001 f9e4 	bl	e07e4 <__aeabi_i2d>
   df41c:	a322      	add	r3, pc, #136	; (adr r3, df4a8 <__ieee754_rem_pio2+0x240>)
   df41e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df422:	e9cd 0104 	strd	r0, r1, [sp, #16]
   df426:	f001 fa43 	bl	e08b0 <__aeabi_dmul>
   df42a:	4602      	mov	r2, r0
   df42c:	460b      	mov	r3, r1
   df42e:	4630      	mov	r0, r6
   df430:	4639      	mov	r1, r7
   df432:	f001 f889 	bl	e0548 <__aeabi_dsub>
   df436:	a31e      	add	r3, pc, #120	; (adr r3, df4b0 <__ieee754_rem_pio2+0x248>)
   df438:	e9d3 2300 	ldrd	r2, r3, [r3]
   df43c:	4680      	mov	r8, r0
   df43e:	4689      	mov	r9, r1
   df440:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df444:	f001 fa34 	bl	e08b0 <__aeabi_dmul>
   df448:	2d1f      	cmp	r5, #31
   df44a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   df44e:	dc51      	bgt.n	df4f4 <__ieee754_rem_pio2+0x28c>
   df450:	4b27      	ldr	r3, [pc, #156]	; (df4f0 <__ieee754_rem_pio2+0x288>)
   df452:	1e6a      	subs	r2, r5, #1
   df454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   df458:	459b      	cmp	fp, r3
   df45a:	d04b      	beq.n	df4f4 <__ieee754_rem_pio2+0x28c>
   df45c:	4602      	mov	r2, r0
   df45e:	460b      	mov	r3, r1
   df460:	4640      	mov	r0, r8
   df462:	4649      	mov	r1, r9
   df464:	f001 f870 	bl	e0548 <__aeabi_dsub>
   df468:	4606      	mov	r6, r0
   df46a:	460f      	mov	r7, r1
   df46c:	e9ca 6700 	strd	r6, r7, [sl]
   df470:	4632      	mov	r2, r6
   df472:	463b      	mov	r3, r7
   df474:	4640      	mov	r0, r8
   df476:	4649      	mov	r1, r9
   df478:	f001 f866 	bl	e0548 <__aeabi_dsub>
   df47c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df480:	f001 f862 	bl	e0548 <__aeabi_dsub>
   df484:	2c00      	cmp	r4, #0
   df486:	e9ca 0102 	strd	r0, r1, [sl, #8]
   df48a:	da86      	bge.n	df39a <__ieee754_rem_pio2+0x132>
   df48c:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   df490:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   df494:	426d      	negs	r5, r5
   df496:	f8ca 6000 	str.w	r6, [sl]
   df49a:	f8ca 4004 	str.w	r4, [sl, #4]
   df49e:	f8ca 0008 	str.w	r0, [sl, #8]
   df4a2:	f8ca 300c 	str.w	r3, [sl, #12]
   df4a6:	e778      	b.n	df39a <__ieee754_rem_pio2+0x132>
   df4a8:	54400000 	.word	0x54400000
   df4ac:	3ff921fb 	.word	0x3ff921fb
   df4b0:	1a626331 	.word	0x1a626331
   df4b4:	3dd0b461 	.word	0x3dd0b461
   df4b8:	1a600000 	.word	0x1a600000
   df4bc:	3dd0b461 	.word	0x3dd0b461
   df4c0:	2e037073 	.word	0x2e037073
   df4c4:	3ba3198a 	.word	0x3ba3198a
   df4c8:	6dc9c883 	.word	0x6dc9c883
   df4cc:	3fe45f30 	.word	0x3fe45f30
   df4d0:	3fe921fb 	.word	0x3fe921fb
   df4d4:	4002d97b 	.word	0x4002d97b
   df4d8:	3ff921fb 	.word	0x3ff921fb
   df4dc:	413921fb 	.word	0x413921fb
   df4e0:	7fefffff 	.word	0x7fefffff
   df4e4:	41700000 	.word	0x41700000
   df4e8:	000e5af0 	.word	0x000e5af0
   df4ec:	3fe00000 	.word	0x3fe00000
   df4f0:	000e5a70 	.word	0x000e5a70
   df4f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   df4f8:	4640      	mov	r0, r8
   df4fa:	4649      	mov	r1, r9
   df4fc:	f001 f824 	bl	e0548 <__aeabi_dsub>
   df500:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   df504:	f3c1 530a 	ubfx	r3, r1, #20, #11
   df508:	ebc3 030b 	rsb	r3, r3, fp
   df50c:	4606      	mov	r6, r0
   df50e:	460f      	mov	r7, r1
   df510:	2b10      	cmp	r3, #16
   df512:	e9ca 6700 	strd	r6, r7, [sl]
   df516:	ddab      	ble.n	df470 <__ieee754_rem_pio2+0x208>
   df518:	a35d      	add	r3, pc, #372	; (adr r3, df690 <__ieee754_rem_pio2+0x428>)
   df51a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df51e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df522:	f001 f9c5 	bl	e08b0 <__aeabi_dmul>
   df526:	4606      	mov	r6, r0
   df528:	460f      	mov	r7, r1
   df52a:	4602      	mov	r2, r0
   df52c:	460b      	mov	r3, r1
   df52e:	4640      	mov	r0, r8
   df530:	4649      	mov	r1, r9
   df532:	f001 f809 	bl	e0548 <__aeabi_dsub>
   df536:	e9cd 0106 	strd	r0, r1, [sp, #24]
   df53a:	4602      	mov	r2, r0
   df53c:	460b      	mov	r3, r1
   df53e:	4640      	mov	r0, r8
   df540:	4649      	mov	r1, r9
   df542:	f001 f801 	bl	e0548 <__aeabi_dsub>
   df546:	4632      	mov	r2, r6
   df548:	463b      	mov	r3, r7
   df54a:	f000 fffd 	bl	e0548 <__aeabi_dsub>
   df54e:	a352      	add	r3, pc, #328	; (adr r3, df698 <__ieee754_rem_pio2+0x430>)
   df550:	e9d3 2300 	ldrd	r2, r3, [r3]
   df554:	4606      	mov	r6, r0
   df556:	460f      	mov	r7, r1
   df558:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df55c:	f001 f9a8 	bl	e08b0 <__aeabi_dmul>
   df560:	4632      	mov	r2, r6
   df562:	463b      	mov	r3, r7
   df564:	f000 fff0 	bl	e0548 <__aeabi_dsub>
   df568:	460b      	mov	r3, r1
   df56a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   df56e:	4602      	mov	r2, r0
   df570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   df574:	f000 ffe8 	bl	e0548 <__aeabi_dsub>
   df578:	f3c1 530a 	ubfx	r3, r1, #20, #11
   df57c:	ebc3 0b0b 	rsb	fp, r3, fp
   df580:	4606      	mov	r6, r0
   df582:	460f      	mov	r7, r1
   df584:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   df588:	e9ca 6700 	strd	r6, r7, [sl]
   df58c:	dd76      	ble.n	df67c <__ieee754_rem_pio2+0x414>
   df58e:	a345      	add	r3, pc, #276	; (adr r3, df6a4 <__ieee754_rem_pio2+0x43c>)
   df590:	e9d3 2300 	ldrd	r2, r3, [r3]
   df594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df598:	f001 f98a 	bl	e08b0 <__aeabi_dmul>
   df59c:	4606      	mov	r6, r0
   df59e:	460f      	mov	r7, r1
   df5a0:	4602      	mov	r2, r0
   df5a2:	460b      	mov	r3, r1
   df5a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   df5a8:	f000 ffce 	bl	e0548 <__aeabi_dsub>
   df5ac:	4602      	mov	r2, r0
   df5ae:	460b      	mov	r3, r1
   df5b0:	4680      	mov	r8, r0
   df5b2:	4689      	mov	r9, r1
   df5b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   df5b8:	f000 ffc6 	bl	e0548 <__aeabi_dsub>
   df5bc:	4632      	mov	r2, r6
   df5be:	463b      	mov	r3, r7
   df5c0:	f000 ffc2 	bl	e0548 <__aeabi_dsub>
   df5c4:	a339      	add	r3, pc, #228	; (adr r3, df6ac <__ieee754_rem_pio2+0x444>)
   df5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df5ca:	4606      	mov	r6, r0
   df5cc:	460f      	mov	r7, r1
   df5ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   df5d2:	f001 f96d 	bl	e08b0 <__aeabi_dmul>
   df5d6:	4632      	mov	r2, r6
   df5d8:	463b      	mov	r3, r7
   df5da:	f000 ffb5 	bl	e0548 <__aeabi_dsub>
   df5de:	e9cd 0102 	strd	r0, r1, [sp, #8]
   df5e2:	e73b      	b.n	df45c <__ieee754_rem_pio2+0x1f4>
   df5e4:	f000 ffb2 	bl	e054c <__adddf3>
   df5e8:	4b2d      	ldr	r3, [pc, #180]	; (df6a0 <__ieee754_rem_pio2+0x438>)
   df5ea:	459b      	cmp	fp, r3
   df5ec:	4604      	mov	r4, r0
   df5ee:	460d      	mov	r5, r1
   df5f0:	d026      	beq.n	df640 <__ieee754_rem_pio2+0x3d8>
   df5f2:	a325      	add	r3, pc, #148	; (adr r3, df688 <__ieee754_rem_pio2+0x420>)
   df5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   df5f8:	f000 ffa8 	bl	e054c <__adddf3>
   df5fc:	4602      	mov	r2, r0
   df5fe:	460b      	mov	r3, r1
   df600:	e9ca 2300 	strd	r2, r3, [sl]
   df604:	4629      	mov	r1, r5
   df606:	4620      	mov	r0, r4
   df608:	f000 ff9e 	bl	e0548 <__aeabi_dsub>
   df60c:	a31e      	add	r3, pc, #120	; (adr r3, df688 <__ieee754_rem_pio2+0x420>)
   df60e:	e9d3 2300 	ldrd	r2, r3, [r3]
   df612:	f000 ff9b 	bl	e054c <__adddf3>
   df616:	f04f 35ff 	mov.w	r5, #4294967295
   df61a:	e9ca 0102 	strd	r0, r1, [sl, #8]
   df61e:	e6bc      	b.n	df39a <__ieee754_rem_pio2+0x132>
   df620:	f8da 2004 	ldr.w	r2, [sl, #4]
   df624:	f8da 300c 	ldr.w	r3, [sl, #12]
   df628:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   df62c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   df630:	4245      	negs	r5, r0
   df632:	f8ca 2004 	str.w	r2, [sl, #4]
   df636:	f8ca 300c 	str.w	r3, [sl, #12]
   df63a:	e6ae      	b.n	df39a <__ieee754_rem_pio2+0x132>
   df63c:	2303      	movs	r3, #3
   df63e:	e697      	b.n	df370 <__ieee754_rem_pio2+0x108>
   df640:	a313      	add	r3, pc, #76	; (adr r3, df690 <__ieee754_rem_pio2+0x428>)
   df642:	e9d3 2300 	ldrd	r2, r3, [r3]
   df646:	f000 ff81 	bl	e054c <__adddf3>
   df64a:	a313      	add	r3, pc, #76	; (adr r3, df698 <__ieee754_rem_pio2+0x430>)
   df64c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df650:	460d      	mov	r5, r1
   df652:	4604      	mov	r4, r0
   df654:	f000 ff7a 	bl	e054c <__adddf3>
   df658:	4602      	mov	r2, r0
   df65a:	460b      	mov	r3, r1
   df65c:	e9ca 2300 	strd	r2, r3, [sl]
   df660:	4629      	mov	r1, r5
   df662:	4620      	mov	r0, r4
   df664:	f000 ff70 	bl	e0548 <__aeabi_dsub>
   df668:	a30b      	add	r3, pc, #44	; (adr r3, df698 <__ieee754_rem_pio2+0x430>)
   df66a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df66e:	f000 ff6d 	bl	e054c <__adddf3>
   df672:	f04f 35ff 	mov.w	r5, #4294967295
   df676:	e9ca 0102 	strd	r0, r1, [sl, #8]
   df67a:	e68e      	b.n	df39a <__ieee754_rem_pio2+0x132>
   df67c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   df680:	e6f6      	b.n	df470 <__ieee754_rem_pio2+0x208>
   df682:	bf00      	nop
   df684:	f3af 8000 	nop.w
   df688:	1a626331 	.word	0x1a626331
   df68c:	3dd0b461 	.word	0x3dd0b461
   df690:	1a600000 	.word	0x1a600000
   df694:	3dd0b461 	.word	0x3dd0b461
   df698:	2e037073 	.word	0x2e037073
   df69c:	3ba3198a 	.word	0x3ba3198a
   df6a0:	3ff921fb 	.word	0x3ff921fb
   df6a4:	2e000000 	.word	0x2e000000
   df6a8:	3ba3198a 	.word	0x3ba3198a
   df6ac:	252049c1 	.word	0x252049c1
   df6b0:	397b839a 	.word	0x397b839a
   df6b4:	00000000 	.word	0x00000000

000df6b8 <__kernel_cos>:
   df6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df6bc:	ec57 6b10 	vmov	r6, r7, d0
   df6c0:	ed2d 8b02 	vpush	{d8}
   df6c4:	eeb0 8a41 	vmov.f32	s16, s2
   df6c8:	eef0 8a61 	vmov.f32	s17, s3
   df6cc:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   df6d0:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   df6d4:	b083      	sub	sp, #12
   df6d6:	da72      	bge.n	df7be <__kernel_cos+0x106>
   df6d8:	ee10 0a10 	vmov	r0, s0
   df6dc:	4639      	mov	r1, r7
   df6de:	f001 fb97 	bl	e0e10 <__aeabi_d2iz>
   df6e2:	2800      	cmp	r0, #0
   df6e4:	f000 80f6 	beq.w	df8d4 <__kernel_cos+0x21c>
   df6e8:	4632      	mov	r2, r6
   df6ea:	463b      	mov	r3, r7
   df6ec:	4630      	mov	r0, r6
   df6ee:	4639      	mov	r1, r7
   df6f0:	f001 f8de 	bl	e08b0 <__aeabi_dmul>
   df6f4:	a37c      	add	r3, pc, #496	; (adr r3, df8e8 <__kernel_cos+0x230>)
   df6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   df6fa:	4604      	mov	r4, r0
   df6fc:	460d      	mov	r5, r1
   df6fe:	f001 f8d7 	bl	e08b0 <__aeabi_dmul>
   df702:	a37b      	add	r3, pc, #492	; (adr r3, df8f0 <__kernel_cos+0x238>)
   df704:	e9d3 2300 	ldrd	r2, r3, [r3]
   df708:	f000 ff20 	bl	e054c <__adddf3>
   df70c:	4622      	mov	r2, r4
   df70e:	462b      	mov	r3, r5
   df710:	f001 f8ce 	bl	e08b0 <__aeabi_dmul>
   df714:	a378      	add	r3, pc, #480	; (adr r3, df8f8 <__kernel_cos+0x240>)
   df716:	e9d3 2300 	ldrd	r2, r3, [r3]
   df71a:	f000 ff15 	bl	e0548 <__aeabi_dsub>
   df71e:	4622      	mov	r2, r4
   df720:	462b      	mov	r3, r5
   df722:	f001 f8c5 	bl	e08b0 <__aeabi_dmul>
   df726:	a376      	add	r3, pc, #472	; (adr r3, df900 <__kernel_cos+0x248>)
   df728:	e9d3 2300 	ldrd	r2, r3, [r3]
   df72c:	f000 ff0e 	bl	e054c <__adddf3>
   df730:	4622      	mov	r2, r4
   df732:	462b      	mov	r3, r5
   df734:	f001 f8bc 	bl	e08b0 <__aeabi_dmul>
   df738:	a373      	add	r3, pc, #460	; (adr r3, df908 <__kernel_cos+0x250>)
   df73a:	e9d3 2300 	ldrd	r2, r3, [r3]
   df73e:	f000 ff03 	bl	e0548 <__aeabi_dsub>
   df742:	4622      	mov	r2, r4
   df744:	462b      	mov	r3, r5
   df746:	f001 f8b3 	bl	e08b0 <__aeabi_dmul>
   df74a:	a371      	add	r3, pc, #452	; (adr r3, df910 <__kernel_cos+0x258>)
   df74c:	e9d3 2300 	ldrd	r2, r3, [r3]
   df750:	f000 fefc 	bl	e054c <__adddf3>
   df754:	4622      	mov	r2, r4
   df756:	462b      	mov	r3, r5
   df758:	f001 f8aa 	bl	e08b0 <__aeabi_dmul>
   df75c:	4682      	mov	sl, r0
   df75e:	468b      	mov	fp, r1
   df760:	2200      	movs	r2, #0
   df762:	4b71      	ldr	r3, [pc, #452]	; (df928 <__kernel_cos+0x270>)
   df764:	4620      	mov	r0, r4
   df766:	4629      	mov	r1, r5
   df768:	f001 f8a2 	bl	e08b0 <__aeabi_dmul>
   df76c:	4652      	mov	r2, sl
   df76e:	4680      	mov	r8, r0
   df770:	4689      	mov	r9, r1
   df772:	465b      	mov	r3, fp
   df774:	4620      	mov	r0, r4
   df776:	4629      	mov	r1, r5
   df778:	f001 f89a 	bl	e08b0 <__aeabi_dmul>
   df77c:	ec53 2b18 	vmov	r2, r3, d8
   df780:	4604      	mov	r4, r0
   df782:	460d      	mov	r5, r1
   df784:	4630      	mov	r0, r6
   df786:	4639      	mov	r1, r7
   df788:	f001 f892 	bl	e08b0 <__aeabi_dmul>
   df78c:	4602      	mov	r2, r0
   df78e:	460b      	mov	r3, r1
   df790:	4620      	mov	r0, r4
   df792:	4629      	mov	r1, r5
   df794:	f000 fed8 	bl	e0548 <__aeabi_dsub>
   df798:	4602      	mov	r2, r0
   df79a:	460b      	mov	r3, r1
   df79c:	4640      	mov	r0, r8
   df79e:	4649      	mov	r1, r9
   df7a0:	f000 fed2 	bl	e0548 <__aeabi_dsub>
   df7a4:	4602      	mov	r2, r0
   df7a6:	460b      	mov	r3, r1
   df7a8:	2000      	movs	r0, #0
   df7aa:	4960      	ldr	r1, [pc, #384]	; (df92c <__kernel_cos+0x274>)
   df7ac:	f000 fecc 	bl	e0548 <__aeabi_dsub>
   df7b0:	ec41 0b10 	vmov	d0, r0, r1
   df7b4:	b003      	add	sp, #12
   df7b6:	ecbd 8b02 	vpop	{d8}
   df7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df7be:	ee10 2a10 	vmov	r2, s0
   df7c2:	ee10 0a10 	vmov	r0, s0
   df7c6:	463b      	mov	r3, r7
   df7c8:	4639      	mov	r1, r7
   df7ca:	f001 f871 	bl	e08b0 <__aeabi_dmul>
   df7ce:	a346      	add	r3, pc, #280	; (adr r3, df8e8 <__kernel_cos+0x230>)
   df7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df7d4:	4604      	mov	r4, r0
   df7d6:	460d      	mov	r5, r1
   df7d8:	f001 f86a 	bl	e08b0 <__aeabi_dmul>
   df7dc:	a344      	add	r3, pc, #272	; (adr r3, df8f0 <__kernel_cos+0x238>)
   df7de:	e9d3 2300 	ldrd	r2, r3, [r3]
   df7e2:	f000 feb3 	bl	e054c <__adddf3>
   df7e6:	4622      	mov	r2, r4
   df7e8:	462b      	mov	r3, r5
   df7ea:	f001 f861 	bl	e08b0 <__aeabi_dmul>
   df7ee:	a342      	add	r3, pc, #264	; (adr r3, df8f8 <__kernel_cos+0x240>)
   df7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   df7f4:	f000 fea8 	bl	e0548 <__aeabi_dsub>
   df7f8:	4622      	mov	r2, r4
   df7fa:	462b      	mov	r3, r5
   df7fc:	f001 f858 	bl	e08b0 <__aeabi_dmul>
   df800:	a33f      	add	r3, pc, #252	; (adr r3, df900 <__kernel_cos+0x248>)
   df802:	e9d3 2300 	ldrd	r2, r3, [r3]
   df806:	f000 fea1 	bl	e054c <__adddf3>
   df80a:	4622      	mov	r2, r4
   df80c:	462b      	mov	r3, r5
   df80e:	f001 f84f 	bl	e08b0 <__aeabi_dmul>
   df812:	a33d      	add	r3, pc, #244	; (adr r3, df908 <__kernel_cos+0x250>)
   df814:	e9d3 2300 	ldrd	r2, r3, [r3]
   df818:	f000 fe96 	bl	e0548 <__aeabi_dsub>
   df81c:	4622      	mov	r2, r4
   df81e:	462b      	mov	r3, r5
   df820:	f001 f846 	bl	e08b0 <__aeabi_dmul>
   df824:	a33a      	add	r3, pc, #232	; (adr r3, df910 <__kernel_cos+0x258>)
   df826:	e9d3 2300 	ldrd	r2, r3, [r3]
   df82a:	f000 fe8f 	bl	e054c <__adddf3>
   df82e:	462b      	mov	r3, r5
   df830:	4622      	mov	r2, r4
   df832:	f001 f83d 	bl	e08b0 <__aeabi_dmul>
   df836:	4b3e      	ldr	r3, [pc, #248]	; (df930 <__kernel_cos+0x278>)
   df838:	4599      	cmp	r9, r3
   df83a:	4682      	mov	sl, r0
   df83c:	468b      	mov	fp, r1
   df83e:	dd8f      	ble.n	df760 <__kernel_cos+0xa8>
   df840:	4b3c      	ldr	r3, [pc, #240]	; (df934 <__kernel_cos+0x27c>)
   df842:	4599      	cmp	r9, r3
   df844:	dc3d      	bgt.n	df8c2 <__kernel_cos+0x20a>
   df846:	2200      	movs	r2, #0
   df848:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   df84c:	2000      	movs	r0, #0
   df84e:	4937      	ldr	r1, [pc, #220]	; (df92c <__kernel_cos+0x274>)
   df850:	4690      	mov	r8, r2
   df852:	4699      	mov	r9, r3
   df854:	f000 fe78 	bl	e0548 <__aeabi_dsub>
   df858:	e9cd 0100 	strd	r0, r1, [sp]
   df85c:	2200      	movs	r2, #0
   df85e:	4b32      	ldr	r3, [pc, #200]	; (df928 <__kernel_cos+0x270>)
   df860:	4620      	mov	r0, r4
   df862:	4629      	mov	r1, r5
   df864:	f001 f824 	bl	e08b0 <__aeabi_dmul>
   df868:	4642      	mov	r2, r8
   df86a:	464b      	mov	r3, r9
   df86c:	f000 fe6c 	bl	e0548 <__aeabi_dsub>
   df870:	4652      	mov	r2, sl
   df872:	4680      	mov	r8, r0
   df874:	4689      	mov	r9, r1
   df876:	465b      	mov	r3, fp
   df878:	4620      	mov	r0, r4
   df87a:	4629      	mov	r1, r5
   df87c:	f001 f818 	bl	e08b0 <__aeabi_dmul>
   df880:	ec53 2b18 	vmov	r2, r3, d8
   df884:	4604      	mov	r4, r0
   df886:	460d      	mov	r5, r1
   df888:	4630      	mov	r0, r6
   df88a:	4639      	mov	r1, r7
   df88c:	f001 f810 	bl	e08b0 <__aeabi_dmul>
   df890:	4602      	mov	r2, r0
   df892:	460b      	mov	r3, r1
   df894:	4620      	mov	r0, r4
   df896:	4629      	mov	r1, r5
   df898:	f000 fe56 	bl	e0548 <__aeabi_dsub>
   df89c:	4602      	mov	r2, r0
   df89e:	460b      	mov	r3, r1
   df8a0:	4640      	mov	r0, r8
   df8a2:	4649      	mov	r1, r9
   df8a4:	f000 fe50 	bl	e0548 <__aeabi_dsub>
   df8a8:	4602      	mov	r2, r0
   df8aa:	460b      	mov	r3, r1
   df8ac:	e9dd 0100 	ldrd	r0, r1, [sp]
   df8b0:	f000 fe4a 	bl	e0548 <__aeabi_dsub>
   df8b4:	ec41 0b10 	vmov	d0, r0, r1
   df8b8:	b003      	add	sp, #12
   df8ba:	ecbd 8b02 	vpop	{d8}
   df8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df8c2:	ed9f 7b15 	vldr	d7, [pc, #84]	; df918 <__kernel_cos+0x260>
   df8c6:	f04f 0800 	mov.w	r8, #0
   df8ca:	ed8d 7b00 	vstr	d7, [sp]
   df8ce:	f8df 9068 	ldr.w	r9, [pc, #104]	; df938 <__kernel_cos+0x280>
   df8d2:	e7c3      	b.n	df85c <__kernel_cos+0x1a4>
   df8d4:	ed9f 0b12 	vldr	d0, [pc, #72]	; df920 <__kernel_cos+0x268>
   df8d8:	b003      	add	sp, #12
   df8da:	ecbd 8b02 	vpop	{d8}
   df8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df8e2:	bf00      	nop
   df8e4:	f3af 8000 	nop.w
   df8e8:	be8838d4 	.word	0xbe8838d4
   df8ec:	bda8fae9 	.word	0xbda8fae9
   df8f0:	bdb4b1c4 	.word	0xbdb4b1c4
   df8f4:	3e21ee9e 	.word	0x3e21ee9e
   df8f8:	809c52ad 	.word	0x809c52ad
   df8fc:	3e927e4f 	.word	0x3e927e4f
   df900:	19cb1590 	.word	0x19cb1590
   df904:	3efa01a0 	.word	0x3efa01a0
   df908:	16c15177 	.word	0x16c15177
   df90c:	3f56c16c 	.word	0x3f56c16c
   df910:	5555554c 	.word	0x5555554c
   df914:	3fa55555 	.word	0x3fa55555
   df918:	00000000 	.word	0x00000000
   df91c:	3fe70000 	.word	0x3fe70000
   df920:	00000000 	.word	0x00000000
   df924:	3ff00000 	.word	0x3ff00000
   df928:	3fe00000 	.word	0x3fe00000
   df92c:	3ff00000 	.word	0x3ff00000
   df930:	3fd33332 	.word	0x3fd33332
   df934:	3fe90000 	.word	0x3fe90000
   df938:	3fd20000 	.word	0x3fd20000
   df93c:	00000000 	.word	0x00000000

000df940 <__kernel_rem_pio2>:
   df940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df944:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   df948:	4c81      	ldr	r4, [pc, #516]	; (dfb50 <__kernel_rem_pio2+0x210>)
   df94a:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   df94c:	4d81      	ldr	r5, [pc, #516]	; (dfb54 <__kernel_rem_pio2+0x214>)
   df94e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   df952:	9407      	str	r4, [sp, #28]
   df954:	4626      	mov	r6, r4
   df956:	1ed4      	subs	r4, r2, #3
   df958:	fb85 7504 	smull	r7, r5, r5, r4
   df95c:	17e4      	asrs	r4, r4, #31
   df95e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   df962:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   df966:	461d      	mov	r5, r3
   df968:	930a      	str	r3, [sp, #40]	; 0x28
   df96a:	1c63      	adds	r3, r4, #1
   df96c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   df970:	3d01      	subs	r5, #1
   df972:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   df976:	9306      	str	r3, [sp, #24]
   df978:	462b      	mov	r3, r5
   df97a:	940b      	str	r4, [sp, #44]	; 0x2c
   df97c:	9500      	str	r5, [sp, #0]
   df97e:	1b65      	subs	r5, r4, r5
   df980:	18f4      	adds	r4, r6, r3
   df982:	9003      	str	r0, [sp, #12]
   df984:	9108      	str	r1, [sp, #32]
   df986:	d416      	bmi.n	df9b6 <__kernel_rem_pio2+0x76>
   df988:	442c      	add	r4, r5
   df98a:	3401      	adds	r4, #1
   df98c:	ae22      	add	r6, sp, #136	; 0x88
   df98e:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   df990:	e008      	b.n	df9a4 <__kernel_rem_pio2+0x64>
   df992:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   df996:	f000 ff25 	bl	e07e4 <__aeabi_i2d>
   df99a:	3501      	adds	r5, #1
   df99c:	42a5      	cmp	r5, r4
   df99e:	e8e6 0102 	strd	r0, r1, [r6], #8
   df9a2:	d008      	beq.n	df9b6 <__kernel_rem_pio2+0x76>
   df9a4:	2d00      	cmp	r5, #0
   df9a6:	daf4      	bge.n	df992 <__kernel_rem_pio2+0x52>
   df9a8:	3501      	adds	r5, #1
   df9aa:	2000      	movs	r0, #0
   df9ac:	2100      	movs	r1, #0
   df9ae:	42a5      	cmp	r5, r4
   df9b0:	e8e6 0102 	strd	r0, r1, [r6], #8
   df9b4:	d1f6      	bne.n	df9a4 <__kernel_rem_pio2+0x64>
   df9b6:	9b07      	ldr	r3, [sp, #28]
   df9b8:	2b00      	cmp	r3, #0
   df9ba:	f2c0 83c2 	blt.w	e0142 <__kernel_rem_pio2+0x802>
   df9be:	9b07      	ldr	r3, [sp, #28]
   df9c0:	f103 0b01 	add.w	fp, r3, #1
   df9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   df9c6:	a922      	add	r1, sp, #136	; 0x88
   df9c8:	00db      	lsls	r3, r3, #3
   df9ca:	461a      	mov	r2, r3
   df9cc:	eb01 0903 	add.w	r9, r1, r3
   df9d0:	9304      	str	r3, [sp, #16]
   df9d2:	9b03      	ldr	r3, [sp, #12]
   df9d4:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   df9d8:	4619      	mov	r1, r3
   df9da:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   df9de:	eb01 0802 	add.w	r8, r1, r2
   df9e2:	9b00      	ldr	r3, [sp, #0]
   df9e4:	2b00      	cmp	r3, #0
   df9e6:	f2c0 818f 	blt.w	dfd08 <__kernel_rem_pio2+0x3c8>
   df9ea:	9c03      	ldr	r4, [sp, #12]
   df9ec:	464d      	mov	r5, r9
   df9ee:	2600      	movs	r6, #0
   df9f0:	2700      	movs	r7, #0
   df9f2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   df9f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   df9fa:	f000 ff59 	bl	e08b0 <__aeabi_dmul>
   df9fe:	4602      	mov	r2, r0
   dfa00:	460b      	mov	r3, r1
   dfa02:	4630      	mov	r0, r6
   dfa04:	4639      	mov	r1, r7
   dfa06:	f000 fda1 	bl	e054c <__adddf3>
   dfa0a:	4544      	cmp	r4, r8
   dfa0c:	4606      	mov	r6, r0
   dfa0e:	460f      	mov	r7, r1
   dfa10:	d1ef      	bne.n	df9f2 <__kernel_rem_pio2+0xb2>
   dfa12:	e8ea 6702 	strd	r6, r7, [sl], #8
   dfa16:	45da      	cmp	sl, fp
   dfa18:	f109 0908 	add.w	r9, r9, #8
   dfa1c:	d1e1      	bne.n	df9e2 <__kernel_rem_pio2+0xa2>
   dfa1e:	9907      	ldr	r1, [sp, #28]
   dfa20:	9804      	ldr	r0, [sp, #16]
   dfa22:	9c03      	ldr	r4, [sp, #12]
   dfa24:	9104      	str	r1, [sp, #16]
   dfa26:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   dfa2a:	3b02      	subs	r3, #2
   dfa2c:	009b      	lsls	r3, r3, #2
   dfa2e:	4420      	add	r0, r4
   dfa30:	1d1a      	adds	r2, r3, #4
   dfa32:	4683      	mov	fp, r0
   dfa34:	a80e      	add	r0, sp, #56	; 0x38
   dfa36:	4402      	add	r2, r0
   dfa38:	4403      	add	r3, r0
   dfa3a:	920d      	str	r2, [sp, #52]	; 0x34
   dfa3c:	930c      	str	r3, [sp, #48]	; 0x30
   dfa3e:	9a04      	ldr	r2, [sp, #16]
   dfa40:	a99a      	add	r1, sp, #616	; 0x268
   dfa42:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   dfa46:	2a00      	cmp	r2, #0
   dfa48:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   dfa4c:	dd29      	ble.n	dfaa2 <__kernel_rem_pio2+0x162>
   dfa4e:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   dfa52:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   dfa56:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   dfa5a:	2200      	movs	r2, #0
   dfa5c:	4b3e      	ldr	r3, [pc, #248]	; (dfb58 <__kernel_rem_pio2+0x218>)
   dfa5e:	4620      	mov	r0, r4
   dfa60:	4629      	mov	r1, r5
   dfa62:	f000 ff25 	bl	e08b0 <__aeabi_dmul>
   dfa66:	f001 f9d3 	bl	e0e10 <__aeabi_d2iz>
   dfa6a:	f000 febb 	bl	e07e4 <__aeabi_i2d>
   dfa6e:	2200      	movs	r2, #0
   dfa70:	4b3a      	ldr	r3, [pc, #232]	; (dfb5c <__kernel_rem_pio2+0x21c>)
   dfa72:	4606      	mov	r6, r0
   dfa74:	460f      	mov	r7, r1
   dfa76:	f000 ff1b 	bl	e08b0 <__aeabi_dmul>
   dfa7a:	4602      	mov	r2, r0
   dfa7c:	460b      	mov	r3, r1
   dfa7e:	4620      	mov	r0, r4
   dfa80:	4629      	mov	r1, r5
   dfa82:	f000 fd61 	bl	e0548 <__aeabi_dsub>
   dfa86:	f001 f9c3 	bl	e0e10 <__aeabi_d2iz>
   dfa8a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   dfa8e:	f849 0f04 	str.w	r0, [r9, #4]!
   dfa92:	4639      	mov	r1, r7
   dfa94:	4630      	mov	r0, r6
   dfa96:	f000 fd59 	bl	e054c <__adddf3>
   dfa9a:	45d0      	cmp	r8, sl
   dfa9c:	4604      	mov	r4, r0
   dfa9e:	460d      	mov	r5, r1
   dfaa0:	d1db      	bne.n	dfa5a <__kernel_rem_pio2+0x11a>
   dfaa2:	f8dd 9018 	ldr.w	r9, [sp, #24]
   dfaa6:	ec45 4b10 	vmov	d0, r4, r5
   dfaaa:	4648      	mov	r0, r9
   dfaac:	f000 fcb4 	bl	e0418 <scalbn>
   dfab0:	ec55 4b10 	vmov	r4, r5, d0
   dfab4:	2200      	movs	r2, #0
   dfab6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   dfaba:	ee10 0a10 	vmov	r0, s0
   dfabe:	4629      	mov	r1, r5
   dfac0:	f000 fef6 	bl	e08b0 <__aeabi_dmul>
   dfac4:	ec41 0b10 	vmov	d0, r0, r1
   dfac8:	f000 fc16 	bl	e02f8 <floor>
   dfacc:	2200      	movs	r2, #0
   dface:	ec51 0b10 	vmov	r0, r1, d0
   dfad2:	4b23      	ldr	r3, [pc, #140]	; (dfb60 <__kernel_rem_pio2+0x220>)
   dfad4:	f000 feec 	bl	e08b0 <__aeabi_dmul>
   dfad8:	4602      	mov	r2, r0
   dfada:	460b      	mov	r3, r1
   dfadc:	4620      	mov	r0, r4
   dfade:	4629      	mov	r1, r5
   dfae0:	f000 fd32 	bl	e0548 <__aeabi_dsub>
   dfae4:	460d      	mov	r5, r1
   dfae6:	4604      	mov	r4, r0
   dfae8:	f001 f992 	bl	e0e10 <__aeabi_d2iz>
   dfaec:	4680      	mov	r8, r0
   dfaee:	f000 fe79 	bl	e07e4 <__aeabi_i2d>
   dfaf2:	460b      	mov	r3, r1
   dfaf4:	4602      	mov	r2, r0
   dfaf6:	4629      	mov	r1, r5
   dfaf8:	4620      	mov	r0, r4
   dfafa:	f000 fd25 	bl	e0548 <__aeabi_dsub>
   dfafe:	464b      	mov	r3, r9
   dfb00:	2b00      	cmp	r3, #0
   dfb02:	4606      	mov	r6, r0
   dfb04:	460f      	mov	r7, r1
   dfb06:	f340 80e5 	ble.w	dfcd4 <__kernel_rem_pio2+0x394>
   dfb0a:	9a04      	ldr	r2, [sp, #16]
   dfb0c:	a90e      	add	r1, sp, #56	; 0x38
   dfb0e:	3a01      	subs	r2, #1
   dfb10:	f1c9 0318 	rsb	r3, r9, #24
   dfb14:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   dfb18:	fa45 f103 	asr.w	r1, r5, r3
   dfb1c:	fa01 f303 	lsl.w	r3, r1, r3
   dfb20:	a80e      	add	r0, sp, #56	; 0x38
   dfb22:	1aeb      	subs	r3, r5, r3
   dfb24:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   dfb28:	f1c9 0517 	rsb	r5, r9, #23
   dfb2c:	4488      	add	r8, r1
   dfb2e:	fa43 f505 	asr.w	r5, r3, r5
   dfb32:	2d00      	cmp	r5, #0
   dfb34:	dd41      	ble.n	dfbba <__kernel_rem_pio2+0x27a>
   dfb36:	9b04      	ldr	r3, [sp, #16]
   dfb38:	2b00      	cmp	r3, #0
   dfb3a:	f108 0801 	add.w	r8, r8, #1
   dfb3e:	f340 82c9 	ble.w	e00d4 <__kernel_rem_pio2+0x794>
   dfb42:	2200      	movs	r2, #0
   dfb44:	4614      	mov	r4, r2
   dfb46:	a90d      	add	r1, sp, #52	; 0x34
   dfb48:	9804      	ldr	r0, [sp, #16]
   dfb4a:	46ae      	mov	lr, r5
   dfb4c:	e012      	b.n	dfb74 <__kernel_rem_pio2+0x234>
   dfb4e:	bf00      	nop
   dfb50:	000e5bf8 	.word	0x000e5bf8
   dfb54:	2aaaaaab 	.word	0x2aaaaaab
   dfb58:	3e700000 	.word	0x3e700000
   dfb5c:	41700000 	.word	0x41700000
   dfb60:	40200000 	.word	0x40200000
   dfb64:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   dfb68:	b10b      	cbz	r3, dfb6e <__kernel_rem_pio2+0x22e>
   dfb6a:	600d      	str	r5, [r1, #0]
   dfb6c:	2401      	movs	r4, #1
   dfb6e:	3201      	adds	r2, #1
   dfb70:	4290      	cmp	r0, r2
   dfb72:	dd0d      	ble.n	dfb90 <__kernel_rem_pio2+0x250>
   dfb74:	f851 3f04 	ldr.w	r3, [r1, #4]!
   dfb78:	2c00      	cmp	r4, #0
   dfb7a:	d0f3      	beq.n	dfb64 <__kernel_rem_pio2+0x224>
   dfb7c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   dfb80:	3201      	adds	r2, #1
   dfb82:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   dfb86:	4290      	cmp	r0, r2
   dfb88:	600b      	str	r3, [r1, #0]
   dfb8a:	f04f 0401 	mov.w	r4, #1
   dfb8e:	dcf1      	bgt.n	dfb74 <__kernel_rem_pio2+0x234>
   dfb90:	4675      	mov	r5, lr
   dfb92:	9b06      	ldr	r3, [sp, #24]
   dfb94:	2b00      	cmp	r3, #0
   dfb96:	dd0e      	ble.n	dfbb6 <__kernel_rem_pio2+0x276>
   dfb98:	2b01      	cmp	r3, #1
   dfb9a:	f000 80a3 	beq.w	dfce4 <__kernel_rem_pio2+0x3a4>
   dfb9e:	2b02      	cmp	r3, #2
   dfba0:	d109      	bne.n	dfbb6 <__kernel_rem_pio2+0x276>
   dfba2:	9b04      	ldr	r3, [sp, #16]
   dfba4:	1e5a      	subs	r2, r3, #1
   dfba6:	ab0e      	add	r3, sp, #56	; 0x38
   dfba8:	a90e      	add	r1, sp, #56	; 0x38
   dfbaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   dfbae:	f3c3 0315 	ubfx	r3, r3, #0, #22
   dfbb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   dfbb6:	2d02      	cmp	r5, #2
   dfbb8:	d074      	beq.n	dfca4 <__kernel_rem_pio2+0x364>
   dfbba:	2200      	movs	r2, #0
   dfbbc:	2300      	movs	r3, #0
   dfbbe:	4630      	mov	r0, r6
   dfbc0:	4639      	mov	r1, r7
   dfbc2:	f001 f8dd 	bl	e0d80 <__aeabi_dcmpeq>
   dfbc6:	2800      	cmp	r0, #0
   dfbc8:	f000 8249 	beq.w	e005e <__kernel_rem_pio2+0x71e>
   dfbcc:	9a04      	ldr	r2, [sp, #16]
   dfbce:	9b07      	ldr	r3, [sp, #28]
   dfbd0:	1e50      	subs	r0, r2, #1
   dfbd2:	4283      	cmp	r3, r0
   dfbd4:	dc10      	bgt.n	dfbf8 <__kernel_rem_pio2+0x2b8>
   dfbd6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   dfbda:	3b01      	subs	r3, #1
   dfbdc:	aa0e      	add	r2, sp, #56	; 0x38
   dfbde:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   dfbe0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dfbe4:	2200      	movs	r2, #0
   dfbe6:	f853 1904 	ldr.w	r1, [r3], #-4
   dfbea:	42a3      	cmp	r3, r4
   dfbec:	ea42 0201 	orr.w	r2, r2, r1
   dfbf0:	d1f9      	bne.n	dfbe6 <__kernel_rem_pio2+0x2a6>
   dfbf2:	2a00      	cmp	r2, #0
   dfbf4:	f040 80a4 	bne.w	dfd40 <__kernel_rem_pio2+0x400>
   dfbf8:	9b07      	ldr	r3, [sp, #28]
   dfbfa:	aa0e      	add	r2, sp, #56	; 0x38
   dfbfc:	3b01      	subs	r3, #1
   dfbfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   dfc02:	2b00      	cmp	r3, #0
   dfc04:	f040 8264 	bne.w	e00d0 <__kernel_rem_pio2+0x790>
   dfc08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   dfc0a:	2301      	movs	r3, #1
   dfc0c:	f852 1904 	ldr.w	r1, [r2], #-4
   dfc10:	3301      	adds	r3, #1
   dfc12:	2900      	cmp	r1, #0
   dfc14:	d0fa      	beq.n	dfc0c <__kernel_rem_pio2+0x2cc>
   dfc16:	9a04      	ldr	r2, [sp, #16]
   dfc18:	18d3      	adds	r3, r2, r3
   dfc1a:	f102 0a01 	add.w	sl, r2, #1
   dfc1e:	459a      	cmp	sl, r3
   dfc20:	9309      	str	r3, [sp, #36]	; 0x24
   dfc22:	dc3c      	bgt.n	dfc9e <__kernel_rem_pio2+0x35e>
   dfc24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dfc26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dfc28:	9909      	ldr	r1, [sp, #36]	; 0x24
   dfc2a:	eb0a 0903 	add.w	r9, sl, r3
   dfc2e:	9b04      	ldr	r3, [sp, #16]
   dfc30:	4698      	mov	r8, r3
   dfc32:	4490      	add	r8, r2
   dfc34:	188b      	adds	r3, r1, r2
   dfc36:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   dfc3a:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   dfc3c:	f109 39ff 	add.w	r9, r9, #4294967295
   dfc40:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   dfc44:	aa22      	add	r2, sp, #136	; 0x88
   dfc46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   dfc4a:	9304      	str	r3, [sp, #16]
   dfc4c:	ab72      	add	r3, sp, #456	; 0x1c8
   dfc4e:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   dfc52:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   dfc56:	f859 0f04 	ldr.w	r0, [r9, #4]!
   dfc5a:	f000 fdc3 	bl	e07e4 <__aeabi_i2d>
   dfc5e:	9b00      	ldr	r3, [sp, #0]
   dfc60:	2b00      	cmp	r3, #0
   dfc62:	e8e8 0102 	strd	r0, r1, [r8], #8
   dfc66:	f04f 0600 	mov.w	r6, #0
   dfc6a:	f04f 0700 	mov.w	r7, #0
   dfc6e:	db11      	blt.n	dfc94 <__kernel_rem_pio2+0x354>
   dfc70:	9c03      	ldr	r4, [sp, #12]
   dfc72:	4645      	mov	r5, r8
   dfc74:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   dfc78:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   dfc7c:	f000 fe18 	bl	e08b0 <__aeabi_dmul>
   dfc80:	4602      	mov	r2, r0
   dfc82:	460b      	mov	r3, r1
   dfc84:	4630      	mov	r0, r6
   dfc86:	4639      	mov	r1, r7
   dfc88:	f000 fc60 	bl	e054c <__adddf3>
   dfc8c:	455c      	cmp	r4, fp
   dfc8e:	4606      	mov	r6, r0
   dfc90:	460f      	mov	r7, r1
   dfc92:	d1ef      	bne.n	dfc74 <__kernel_rem_pio2+0x334>
   dfc94:	9b04      	ldr	r3, [sp, #16]
   dfc96:	4598      	cmp	r8, r3
   dfc98:	e8ea 6702 	strd	r6, r7, [sl], #8
   dfc9c:	d1db      	bne.n	dfc56 <__kernel_rem_pio2+0x316>
   dfc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dfca0:	9304      	str	r3, [sp, #16]
   dfca2:	e6cc      	b.n	dfa3e <__kernel_rem_pio2+0xfe>
   dfca4:	4632      	mov	r2, r6
   dfca6:	463b      	mov	r3, r7
   dfca8:	2000      	movs	r0, #0
   dfcaa:	49b3      	ldr	r1, [pc, #716]	; (dff78 <__kernel_rem_pio2+0x638>)
   dfcac:	f000 fc4c 	bl	e0548 <__aeabi_dsub>
   dfcb0:	4606      	mov	r6, r0
   dfcb2:	460f      	mov	r7, r1
   dfcb4:	2c00      	cmp	r4, #0
   dfcb6:	d080      	beq.n	dfbba <__kernel_rem_pio2+0x27a>
   dfcb8:	9806      	ldr	r0, [sp, #24]
   dfcba:	ed9f 0bab 	vldr	d0, [pc, #684]	; dff68 <__kernel_rem_pio2+0x628>
   dfcbe:	f000 fbab 	bl	e0418 <scalbn>
   dfcc2:	4630      	mov	r0, r6
   dfcc4:	4639      	mov	r1, r7
   dfcc6:	ec53 2b10 	vmov	r2, r3, d0
   dfcca:	f000 fc3d 	bl	e0548 <__aeabi_dsub>
   dfcce:	4606      	mov	r6, r0
   dfcd0:	460f      	mov	r7, r1
   dfcd2:	e772      	b.n	dfbba <__kernel_rem_pio2+0x27a>
   dfcd4:	d111      	bne.n	dfcfa <__kernel_rem_pio2+0x3ba>
   dfcd6:	9b04      	ldr	r3, [sp, #16]
   dfcd8:	aa0e      	add	r2, sp, #56	; 0x38
   dfcda:	3b01      	subs	r3, #1
   dfcdc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   dfce0:	15ed      	asrs	r5, r5, #23
   dfce2:	e726      	b.n	dfb32 <__kernel_rem_pio2+0x1f2>
   dfce4:	9b04      	ldr	r3, [sp, #16]
   dfce6:	1e5a      	subs	r2, r3, #1
   dfce8:	ab0e      	add	r3, sp, #56	; 0x38
   dfcea:	a90e      	add	r1, sp, #56	; 0x38
   dfcec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   dfcf0:	f3c3 0316 	ubfx	r3, r3, #0, #23
   dfcf4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   dfcf8:	e75d      	b.n	dfbb6 <__kernel_rem_pio2+0x276>
   dfcfa:	2200      	movs	r2, #0
   dfcfc:	4b9f      	ldr	r3, [pc, #636]	; (dff7c <__kernel_rem_pio2+0x63c>)
   dfcfe:	f001 f85d 	bl	e0dbc <__aeabi_dcmpge>
   dfd02:	b958      	cbnz	r0, dfd1c <__kernel_rem_pio2+0x3dc>
   dfd04:	4605      	mov	r5, r0
   dfd06:	e758      	b.n	dfbba <__kernel_rem_pio2+0x27a>
   dfd08:	2600      	movs	r6, #0
   dfd0a:	2700      	movs	r7, #0
   dfd0c:	e8ea 6702 	strd	r6, r7, [sl], #8
   dfd10:	45da      	cmp	sl, fp
   dfd12:	f109 0908 	add.w	r9, r9, #8
   dfd16:	f47f ae64 	bne.w	df9e2 <__kernel_rem_pio2+0xa2>
   dfd1a:	e680      	b.n	dfa1e <__kernel_rem_pio2+0xde>
   dfd1c:	9b04      	ldr	r3, [sp, #16]
   dfd1e:	2b00      	cmp	r3, #0
   dfd20:	f108 0801 	add.w	r8, r8, #1
   dfd24:	bfc8      	it	gt
   dfd26:	2502      	movgt	r5, #2
   dfd28:	f73f af0b 	bgt.w	dfb42 <__kernel_rem_pio2+0x202>
   dfd2c:	4632      	mov	r2, r6
   dfd2e:	463b      	mov	r3, r7
   dfd30:	2000      	movs	r0, #0
   dfd32:	4991      	ldr	r1, [pc, #580]	; (dff78 <__kernel_rem_pio2+0x638>)
   dfd34:	f000 fc08 	bl	e0548 <__aeabi_dsub>
   dfd38:	2502      	movs	r5, #2
   dfd3a:	4606      	mov	r6, r0
   dfd3c:	460f      	mov	r7, r1
   dfd3e:	e73c      	b.n	dfbba <__kernel_rem_pio2+0x27a>
   dfd40:	a90e      	add	r1, sp, #56	; 0x38
   dfd42:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   dfd46:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   dfd4a:	9906      	ldr	r1, [sp, #24]
   dfd4c:	9000      	str	r0, [sp, #0]
   dfd4e:	3918      	subs	r1, #24
   dfd50:	4602      	mov	r2, r0
   dfd52:	9503      	str	r5, [sp, #12]
   dfd54:	9106      	str	r1, [sp, #24]
   dfd56:	b96b      	cbnz	r3, dfd74 <__kernel_rem_pio2+0x434>
   dfd58:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   dfd5c:	3b01      	subs	r3, #1
   dfd5e:	a80e      	add	r0, sp, #56	; 0x38
   dfd60:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   dfd64:	f853 0904 	ldr.w	r0, [r3], #-4
   dfd68:	3a01      	subs	r2, #1
   dfd6a:	3918      	subs	r1, #24
   dfd6c:	2800      	cmp	r0, #0
   dfd6e:	d0f9      	beq.n	dfd64 <__kernel_rem_pio2+0x424>
   dfd70:	9200      	str	r2, [sp, #0]
   dfd72:	9106      	str	r1, [sp, #24]
   dfd74:	9806      	ldr	r0, [sp, #24]
   dfd76:	ed9f 0b7c 	vldr	d0, [pc, #496]	; dff68 <__kernel_rem_pio2+0x628>
   dfd7a:	f000 fb4d 	bl	e0418 <scalbn>
   dfd7e:	9b00      	ldr	r3, [sp, #0]
   dfd80:	2b00      	cmp	r3, #0
   dfd82:	ec55 4b10 	vmov	r4, r5, d0
   dfd86:	f2c0 81c1 	blt.w	e010c <__kernel_rem_pio2+0x7cc>
   dfd8a:	00da      	lsls	r2, r3, #3
   dfd8c:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   dfd90:	a90e      	add	r1, sp, #56	; 0x38
   dfd92:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   dfd96:	eb08 0b02 	add.w	fp, r8, r2
   dfd9a:	9206      	str	r2, [sp, #24]
   dfd9c:	3604      	adds	r6, #4
   dfd9e:	f10b 0708 	add.w	r7, fp, #8
   dfda2:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   dfda6:	f000 fd1d 	bl	e07e4 <__aeabi_i2d>
   dfdaa:	4622      	mov	r2, r4
   dfdac:	462b      	mov	r3, r5
   dfdae:	f000 fd7f 	bl	e08b0 <__aeabi_dmul>
   dfdb2:	2200      	movs	r2, #0
   dfdb4:	e967 0102 	strd	r0, r1, [r7, #-8]!
   dfdb8:	4b71      	ldr	r3, [pc, #452]	; (dff80 <__kernel_rem_pio2+0x640>)
   dfdba:	4620      	mov	r0, r4
   dfdbc:	4629      	mov	r1, r5
   dfdbe:	f000 fd77 	bl	e08b0 <__aeabi_dmul>
   dfdc2:	4547      	cmp	r7, r8
   dfdc4:	4604      	mov	r4, r0
   dfdc6:	460d      	mov	r5, r1
   dfdc8:	d1eb      	bne.n	dfda2 <__kernel_rem_pio2+0x462>
   dfdca:	ac4a      	add	r4, sp, #296	; 0x128
   dfdcc:	f8dd 901c 	ldr.w	r9, [sp, #28]
   dfdd0:	9404      	str	r4, [sp, #16]
   dfdd2:	f04f 0a00 	mov.w	sl, #0
   dfdd6:	f1b9 0f00 	cmp.w	r9, #0
   dfdda:	f2c0 812b 	blt.w	e0034 <__kernel_rem_pio2+0x6f4>
   dfdde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; dff84 <__kernel_rem_pio2+0x644>
   dfde2:	465d      	mov	r5, fp
   dfde4:	a362      	add	r3, pc, #392	; (adr r3, dff70 <__kernel_rem_pio2+0x630>)
   dfde6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dfdea:	2600      	movs	r6, #0
   dfdec:	2700      	movs	r7, #0
   dfdee:	2400      	movs	r4, #0
   dfdf0:	e003      	b.n	dfdfa <__kernel_rem_pio2+0x4ba>
   dfdf2:	45a2      	cmp	sl, r4
   dfdf4:	db10      	blt.n	dfe18 <__kernel_rem_pio2+0x4d8>
   dfdf6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   dfdfa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   dfdfe:	f000 fd57 	bl	e08b0 <__aeabi_dmul>
   dfe02:	4602      	mov	r2, r0
   dfe04:	460b      	mov	r3, r1
   dfe06:	4630      	mov	r0, r6
   dfe08:	4639      	mov	r1, r7
   dfe0a:	f000 fb9f 	bl	e054c <__adddf3>
   dfe0e:	3401      	adds	r4, #1
   dfe10:	45a1      	cmp	r9, r4
   dfe12:	4606      	mov	r6, r0
   dfe14:	460f      	mov	r7, r1
   dfe16:	daec      	bge.n	dfdf2 <__kernel_rem_pio2+0x4b2>
   dfe18:	9b04      	ldr	r3, [sp, #16]
   dfe1a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   dfe1e:	f1ab 0b08 	sub.w	fp, fp, #8
   dfe22:	e9c3 6700 	strd	r6, r7, [r3]
   dfe26:	ab70      	add	r3, sp, #448	; 0x1c0
   dfe28:	459b      	cmp	fp, r3
   dfe2a:	f10a 0a01 	add.w	sl, sl, #1
   dfe2e:	d1d2      	bne.n	dfdd6 <__kernel_rem_pio2+0x496>
   dfe30:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   dfe32:	9c04      	ldr	r4, [sp, #16]
   dfe34:	2b03      	cmp	r3, #3
   dfe36:	f200 808d 	bhi.w	dff54 <__kernel_rem_pio2+0x614>
   dfe3a:	e8df f013 	tbh	[pc, r3, lsl #1]
   dfe3e:	00dd      	.short	0x00dd
   dfe40:	00a500a5 	.word	0x00a500a5
   dfe44:	0004      	.short	0x0004
   dfe46:	9b00      	ldr	r3, [sp, #0]
   dfe48:	2b00      	cmp	r3, #0
   dfe4a:	f340 815c 	ble.w	e0106 <__kernel_rem_pio2+0x7c6>
   dfe4e:	9b00      	ldr	r3, [sp, #0]
   dfe50:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   dfe54:	9b06      	ldr	r3, [sp, #24]
   dfe56:	f10b 3bff 	add.w	fp, fp, #4294967295
   dfe5a:	18e2      	adds	r2, r4, r3
   dfe5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   dfe60:	e9d2 8900 	ldrd	r8, r9, [r2]
   dfe64:	f103 0208 	add.w	r2, r3, #8
   dfe68:	3310      	adds	r3, #16
   dfe6a:	eb04 0a02 	add.w	sl, r4, r2
   dfe6e:	18e5      	adds	r5, r4, r3
   dfe70:	ed3a 7b02 	vldmdb	sl!, {d7}
   dfe74:	4642      	mov	r2, r8
   dfe76:	464b      	mov	r3, r9
   dfe78:	ec51 0b17 	vmov	r0, r1, d7
   dfe7c:	ed8d 7b04 	vstr	d7, [sp, #16]
   dfe80:	f000 fb64 	bl	e054c <__adddf3>
   dfe84:	4606      	mov	r6, r0
   dfe86:	460f      	mov	r7, r1
   dfe88:	4602      	mov	r2, r0
   dfe8a:	460b      	mov	r3, r1
   dfe8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dfe90:	f000 fb5a 	bl	e0548 <__aeabi_dsub>
   dfe94:	464b      	mov	r3, r9
   dfe96:	4642      	mov	r2, r8
   dfe98:	f000 fb58 	bl	e054c <__adddf3>
   dfe9c:	e965 0102 	strd	r0, r1, [r5, #-8]!
   dfea0:	ab4c      	add	r3, sp, #304	; 0x130
   dfea2:	429d      	cmp	r5, r3
   dfea4:	46b0      	mov	r8, r6
   dfea6:	46b9      	mov	r9, r7
   dfea8:	e9ca 6700 	strd	r6, r7, [sl]
   dfeac:	d1e0      	bne.n	dfe70 <__kernel_rem_pio2+0x530>
   dfeae:	9b00      	ldr	r3, [sp, #0]
   dfeb0:	2b01      	cmp	r3, #1
   dfeb2:	f340 8128 	ble.w	e0106 <__kernel_rem_pio2+0x7c6>
   dfeb6:	9b06      	ldr	r3, [sp, #24]
   dfeb8:	4423      	add	r3, r4
   dfeba:	ed93 7b00 	vldr	d7, [r3]
   dfebe:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   dfec2:	f10b 0a10 	add.w	sl, fp, #16
   dfec6:	ed8d 7b00 	vstr	d7, [sp]
   dfeca:	44a2      	add	sl, r4
   dfecc:	f10b 0b08 	add.w	fp, fp, #8
   dfed0:	eb04 050b 	add.w	r5, r4, fp
   dfed4:	46d0      	mov	r8, sl
   dfed6:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   dfeda:	f8cd a010 	str.w	sl, [sp, #16]
   dfede:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   dfee2:	e9dd 0100 	ldrd	r0, r1, [sp]
   dfee6:	464a      	mov	r2, r9
   dfee8:	4653      	mov	r3, sl
   dfeea:	f000 fb2f 	bl	e054c <__adddf3>
   dfeee:	4606      	mov	r6, r0
   dfef0:	460f      	mov	r7, r1
   dfef2:	4602      	mov	r2, r0
   dfef4:	460b      	mov	r3, r1
   dfef6:	4648      	mov	r0, r9
   dfef8:	4651      	mov	r1, sl
   dfefa:	f000 fb25 	bl	e0548 <__aeabi_dsub>
   dfefe:	e9dd 2300 	ldrd	r2, r3, [sp]
   dff02:	f000 fb23 	bl	e054c <__adddf3>
   dff06:	e968 0102 	strd	r0, r1, [r8, #-8]!
   dff0a:	45c3      	cmp	fp, r8
   dff0c:	e9cd 6700 	strd	r6, r7, [sp]
   dff10:	e9c5 6700 	strd	r6, r7, [r5]
   dff14:	d1e3      	bne.n	dfede <__kernel_rem_pio2+0x59e>
   dff16:	f8dd a010 	ldr.w	sl, [sp, #16]
   dff1a:	2000      	movs	r0, #0
   dff1c:	2100      	movs	r1, #0
   dff1e:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   dff22:	f000 fb13 	bl	e054c <__adddf3>
   dff26:	45d3      	cmp	fp, sl
   dff28:	d1f9      	bne.n	dff1e <__kernel_rem_pio2+0x5de>
   dff2a:	9b03      	ldr	r3, [sp, #12]
   dff2c:	2b00      	cmp	r3, #0
   dff2e:	f000 80d3 	beq.w	e00d8 <__kernel_rem_pio2+0x798>
   dff32:	6862      	ldr	r2, [r4, #4]
   dff34:	68e3      	ldr	r3, [r4, #12]
   dff36:	9f08      	ldr	r7, [sp, #32]
   dff38:	6825      	ldr	r5, [r4, #0]
   dff3a:	68a4      	ldr	r4, [r4, #8]
   dff3c:	603d      	str	r5, [r7, #0]
   dff3e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   dff42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   dff46:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   dff4a:	607a      	str	r2, [r7, #4]
   dff4c:	60fb      	str	r3, [r7, #12]
   dff4e:	60bc      	str	r4, [r7, #8]
   dff50:	6138      	str	r0, [r7, #16]
   dff52:	6179      	str	r1, [r7, #20]
   dff54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dff56:	f003 0007 	and.w	r0, r3, #7
   dff5a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   dff5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dff62:	bf00      	nop
   dff64:	f3af 8000 	nop.w
   dff68:	00000000 	.word	0x00000000
   dff6c:	3ff00000 	.word	0x3ff00000
   dff70:	40000000 	.word	0x40000000
   dff74:	3ff921fb 	.word	0x3ff921fb
   dff78:	3ff00000 	.word	0x3ff00000
   dff7c:	3fe00000 	.word	0x3fe00000
   dff80:	3e700000 	.word	0x3e700000
   dff84:	000e5c10 	.word	0x000e5c10
   dff88:	9d06      	ldr	r5, [sp, #24]
   dff8a:	3508      	adds	r5, #8
   dff8c:	4425      	add	r5, r4
   dff8e:	2000      	movs	r0, #0
   dff90:	2100      	movs	r1, #0
   dff92:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   dff96:	f000 fad9 	bl	e054c <__adddf3>
   dff9a:	42a5      	cmp	r5, r4
   dff9c:	d1f9      	bne.n	dff92 <__kernel_rem_pio2+0x652>
   dff9e:	9b03      	ldr	r3, [sp, #12]
   dffa0:	2b00      	cmp	r3, #0
   dffa2:	d04a      	beq.n	e003a <__kernel_rem_pio2+0x6fa>
   dffa4:	9e08      	ldr	r6, [sp, #32]
   dffa6:	4602      	mov	r2, r0
   dffa8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dffac:	e886 000c 	stmia.w	r6, {r2, r3}
   dffb0:	460b      	mov	r3, r1
   dffb2:	4602      	mov	r2, r0
   dffb4:	e9d4 0100 	ldrd	r0, r1, [r4]
   dffb8:	f000 fac6 	bl	e0548 <__aeabi_dsub>
   dffbc:	9b00      	ldr	r3, [sp, #0]
   dffbe:	2b00      	cmp	r3, #0
   dffc0:	dd0d      	ble.n	dffde <__kernel_rem_pio2+0x69e>
   dffc2:	ad4c      	add	r5, sp, #304	; 0x130
   dffc4:	2401      	movs	r4, #1
   dffc6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   dffca:	f000 fabf 	bl	e054c <__adddf3>
   dffce:	9b00      	ldr	r3, [sp, #0]
   dffd0:	3401      	adds	r4, #1
   dffd2:	42a3      	cmp	r3, r4
   dffd4:	daf7      	bge.n	dffc6 <__kernel_rem_pio2+0x686>
   dffd6:	9b03      	ldr	r3, [sp, #12]
   dffd8:	2b00      	cmp	r3, #0
   dffda:	f000 80a7 	beq.w	e012c <__kernel_rem_pio2+0x7ec>
   dffde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dffe2:	9908      	ldr	r1, [sp, #32]
   dffe4:	4602      	mov	r2, r0
   dffe6:	e9c1 2302 	strd	r2, r3, [r1, #8]
   dffea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dffec:	f003 0007 	and.w	r0, r3, #7
   dfff0:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   dfff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfff8:	9b06      	ldr	r3, [sp, #24]
   dfffa:	9d00      	ldr	r5, [sp, #0]
   dfffc:	3308      	adds	r3, #8
   dfffe:	2000      	movs	r0, #0
   e0000:	2100      	movs	r1, #0
   e0002:	441c      	add	r4, r3
   e0004:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   e0008:	3d01      	subs	r5, #1
   e000a:	f000 fa9f 	bl	e054c <__adddf3>
   e000e:	1c6b      	adds	r3, r5, #1
   e0010:	d1f8      	bne.n	e0004 <__kernel_rem_pio2+0x6c4>
   e0012:	9b03      	ldr	r3, [sp, #12]
   e0014:	4602      	mov	r2, r0
   e0016:	2b00      	cmp	r3, #0
   e0018:	f000 808e 	beq.w	e0138 <__kernel_rem_pio2+0x7f8>
   e001c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e0020:	9908      	ldr	r1, [sp, #32]
   e0022:	e9c1 2300 	strd	r2, r3, [r1]
   e0026:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e0028:	f003 0007 	and.w	r0, r3, #7
   e002c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   e0030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0034:	2600      	movs	r6, #0
   e0036:	2700      	movs	r7, #0
   e0038:	e6ee      	b.n	dfe18 <__kernel_rem_pio2+0x4d8>
   e003a:	9b08      	ldr	r3, [sp, #32]
   e003c:	4602      	mov	r2, r0
   e003e:	e9c3 0100 	strd	r0, r1, [r3]
   e0042:	460b      	mov	r3, r1
   e0044:	e9d4 0100 	ldrd	r0, r1, [r4]
   e0048:	f000 fa7e 	bl	e0548 <__aeabi_dsub>
   e004c:	9c00      	ldr	r4, [sp, #0]
   e004e:	2c00      	cmp	r4, #0
   e0050:	4602      	mov	r2, r0
   e0052:	460b      	mov	r3, r1
   e0054:	dcb5      	bgt.n	dffc2 <__kernel_rem_pio2+0x682>
   e0056:	9908      	ldr	r1, [sp, #32]
   e0058:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e005c:	e7c5      	b.n	dffea <__kernel_rem_pio2+0x6aa>
   e005e:	9b06      	ldr	r3, [sp, #24]
   e0060:	9503      	str	r5, [sp, #12]
   e0062:	4258      	negs	r0, r3
   e0064:	ec47 6b10 	vmov	d0, r6, r7
   e0068:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   e006c:	f000 f9d4 	bl	e0418 <scalbn>
   e0070:	ec55 4b10 	vmov	r4, r5, d0
   e0074:	2200      	movs	r2, #0
   e0076:	4b38      	ldr	r3, [pc, #224]	; (e0158 <__kernel_rem_pio2+0x818>)
   e0078:	ee10 0a10 	vmov	r0, s0
   e007c:	4629      	mov	r1, r5
   e007e:	f000 fe9d 	bl	e0dbc <__aeabi_dcmpge>
   e0082:	2800      	cmp	r0, #0
   e0084:	d034      	beq.n	e00f0 <__kernel_rem_pio2+0x7b0>
   e0086:	2200      	movs	r2, #0
   e0088:	4b34      	ldr	r3, [pc, #208]	; (e015c <__kernel_rem_pio2+0x81c>)
   e008a:	4620      	mov	r0, r4
   e008c:	4629      	mov	r1, r5
   e008e:	f000 fc0f 	bl	e08b0 <__aeabi_dmul>
   e0092:	f000 febd 	bl	e0e10 <__aeabi_d2iz>
   e0096:	4606      	mov	r6, r0
   e0098:	f000 fba4 	bl	e07e4 <__aeabi_i2d>
   e009c:	2200      	movs	r2, #0
   e009e:	4b2e      	ldr	r3, [pc, #184]	; (e0158 <__kernel_rem_pio2+0x818>)
   e00a0:	f000 fc06 	bl	e08b0 <__aeabi_dmul>
   e00a4:	4602      	mov	r2, r0
   e00a6:	460b      	mov	r3, r1
   e00a8:	4620      	mov	r0, r4
   e00aa:	4629      	mov	r1, r5
   e00ac:	f000 fa4c 	bl	e0548 <__aeabi_dsub>
   e00b0:	f000 feae 	bl	e0e10 <__aeabi_d2iz>
   e00b4:	9904      	ldr	r1, [sp, #16]
   e00b6:	9b06      	ldr	r3, [sp, #24]
   e00b8:	460a      	mov	r2, r1
   e00ba:	3318      	adds	r3, #24
   e00bc:	3201      	adds	r2, #1
   e00be:	9306      	str	r3, [sp, #24]
   e00c0:	460b      	mov	r3, r1
   e00c2:	a90e      	add	r1, sp, #56	; 0x38
   e00c4:	9200      	str	r2, [sp, #0]
   e00c6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   e00ca:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   e00ce:	e651      	b.n	dfd74 <__kernel_rem_pio2+0x434>
   e00d0:	2301      	movs	r3, #1
   e00d2:	e5a0      	b.n	dfc16 <__kernel_rem_pio2+0x2d6>
   e00d4:	2400      	movs	r4, #0
   e00d6:	e55c      	b.n	dfb92 <__kernel_rem_pio2+0x252>
   e00d8:	e9d4 6700 	ldrd	r6, r7, [r4]
   e00dc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   e00e0:	9d08      	ldr	r5, [sp, #32]
   e00e2:	e9c5 0104 	strd	r0, r1, [r5, #16]
   e00e6:	e9c5 6700 	strd	r6, r7, [r5]
   e00ea:	e9c5 2302 	strd	r2, r3, [r5, #8]
   e00ee:	e731      	b.n	dff54 <__kernel_rem_pio2+0x614>
   e00f0:	4629      	mov	r1, r5
   e00f2:	4620      	mov	r0, r4
   e00f4:	f000 fe8c 	bl	e0e10 <__aeabi_d2iz>
   e00f8:	9a04      	ldr	r2, [sp, #16]
   e00fa:	9200      	str	r2, [sp, #0]
   e00fc:	a90e      	add	r1, sp, #56	; 0x38
   e00fe:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   e0102:	e637      	b.n	dfd74 <__kernel_rem_pio2+0x434>
   e0104:	ac4a      	add	r4, sp, #296	; 0x128
   e0106:	2000      	movs	r0, #0
   e0108:	2100      	movs	r1, #0
   e010a:	e70e      	b.n	dff2a <__kernel_rem_pio2+0x5ea>
   e010c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e010e:	2b03      	cmp	r3, #3
   e0110:	f63f af20 	bhi.w	dff54 <__kernel_rem_pio2+0x614>
   e0114:	a201      	add	r2, pc, #4	; (adr r2, e011c <__kernel_rem_pio2+0x7dc>)
   e0116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   e011a:	bf00      	nop
   e011c:	000e0153 	.word	0x000e0153
   e0120:	000e014b 	.word	0x000e014b
   e0124:	000e014b 	.word	0x000e014b
   e0128:	000e0105 	.word	0x000e0105
   e012c:	460b      	mov	r3, r1
   e012e:	9908      	ldr	r1, [sp, #32]
   e0130:	4602      	mov	r2, r0
   e0132:	e9c1 2302 	strd	r2, r3, [r1, #8]
   e0136:	e758      	b.n	dffea <__kernel_rem_pio2+0x6aa>
   e0138:	460b      	mov	r3, r1
   e013a:	9908      	ldr	r1, [sp, #32]
   e013c:	e9c1 2300 	strd	r2, r3, [r1]
   e0140:	e771      	b.n	e0026 <__kernel_rem_pio2+0x6e6>
   e0142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e0144:	00db      	lsls	r3, r3, #3
   e0146:	9304      	str	r3, [sp, #16]
   e0148:	e469      	b.n	dfa1e <__kernel_rem_pio2+0xde>
   e014a:	2000      	movs	r0, #0
   e014c:	2100      	movs	r1, #0
   e014e:	ac4a      	add	r4, sp, #296	; 0x128
   e0150:	e725      	b.n	dff9e <__kernel_rem_pio2+0x65e>
   e0152:	2000      	movs	r0, #0
   e0154:	2100      	movs	r1, #0
   e0156:	e75c      	b.n	e0012 <__kernel_rem_pio2+0x6d2>
   e0158:	41700000 	.word	0x41700000
   e015c:	3e700000 	.word	0x3e700000

000e0160 <__kernel_sin>:
   e0160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0164:	ec55 4b10 	vmov	r4, r5, d0
   e0168:	ed2d 8b02 	vpush	{d8}
   e016c:	eeb0 8a41 	vmov.f32	s16, s2
   e0170:	eef0 8a61 	vmov.f32	s17, s3
   e0174:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   e0178:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   e017c:	b083      	sub	sp, #12
   e017e:	4682      	mov	sl, r0
   e0180:	da07      	bge.n	e0192 <__kernel_sin+0x32>
   e0182:	ee10 0a10 	vmov	r0, s0
   e0186:	4629      	mov	r1, r5
   e0188:	f000 fe42 	bl	e0e10 <__aeabi_d2iz>
   e018c:	2800      	cmp	r0, #0
   e018e:	f000 808e 	beq.w	e02ae <__kernel_sin+0x14e>
   e0192:	4622      	mov	r2, r4
   e0194:	462b      	mov	r3, r5
   e0196:	4620      	mov	r0, r4
   e0198:	4629      	mov	r1, r5
   e019a:	f000 fb89 	bl	e08b0 <__aeabi_dmul>
   e019e:	4606      	mov	r6, r0
   e01a0:	460f      	mov	r7, r1
   e01a2:	4602      	mov	r2, r0
   e01a4:	460b      	mov	r3, r1
   e01a6:	4620      	mov	r0, r4
   e01a8:	4629      	mov	r1, r5
   e01aa:	f000 fb81 	bl	e08b0 <__aeabi_dmul>
   e01ae:	a347      	add	r3, pc, #284	; (adr r3, e02cc <__kernel_sin+0x16c>)
   e01b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e01b4:	4680      	mov	r8, r0
   e01b6:	4689      	mov	r9, r1
   e01b8:	4630      	mov	r0, r6
   e01ba:	4639      	mov	r1, r7
   e01bc:	f000 fb78 	bl	e08b0 <__aeabi_dmul>
   e01c0:	a344      	add	r3, pc, #272	; (adr r3, e02d4 <__kernel_sin+0x174>)
   e01c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e01c6:	f000 f9bf 	bl	e0548 <__aeabi_dsub>
   e01ca:	4632      	mov	r2, r6
   e01cc:	463b      	mov	r3, r7
   e01ce:	f000 fb6f 	bl	e08b0 <__aeabi_dmul>
   e01d2:	a342      	add	r3, pc, #264	; (adr r3, e02dc <__kernel_sin+0x17c>)
   e01d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e01d8:	f000 f9b8 	bl	e054c <__adddf3>
   e01dc:	4632      	mov	r2, r6
   e01de:	463b      	mov	r3, r7
   e01e0:	f000 fb66 	bl	e08b0 <__aeabi_dmul>
   e01e4:	a33f      	add	r3, pc, #252	; (adr r3, e02e4 <__kernel_sin+0x184>)
   e01e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e01ea:	f000 f9ad 	bl	e0548 <__aeabi_dsub>
   e01ee:	4632      	mov	r2, r6
   e01f0:	463b      	mov	r3, r7
   e01f2:	f000 fb5d 	bl	e08b0 <__aeabi_dmul>
   e01f6:	a33d      	add	r3, pc, #244	; (adr r3, e02ec <__kernel_sin+0x18c>)
   e01f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e01fc:	f000 f9a6 	bl	e054c <__adddf3>
   e0200:	e9cd 0100 	strd	r0, r1, [sp]
   e0204:	f1ba 0f00 	cmp.w	sl, #0
   e0208:	d037      	beq.n	e027a <__kernel_sin+0x11a>
   e020a:	2200      	movs	r2, #0
   e020c:	4b2e      	ldr	r3, [pc, #184]	; (e02c8 <__kernel_sin+0x168>)
   e020e:	ec51 0b18 	vmov	r0, r1, d8
   e0212:	f000 fb4d 	bl	e08b0 <__aeabi_dmul>
   e0216:	e9dd 2300 	ldrd	r2, r3, [sp]
   e021a:	4682      	mov	sl, r0
   e021c:	468b      	mov	fp, r1
   e021e:	4640      	mov	r0, r8
   e0220:	4649      	mov	r1, r9
   e0222:	f000 fb45 	bl	e08b0 <__aeabi_dmul>
   e0226:	4602      	mov	r2, r0
   e0228:	460b      	mov	r3, r1
   e022a:	4650      	mov	r0, sl
   e022c:	4659      	mov	r1, fp
   e022e:	f000 f98b 	bl	e0548 <__aeabi_dsub>
   e0232:	4632      	mov	r2, r6
   e0234:	463b      	mov	r3, r7
   e0236:	f000 fb3b 	bl	e08b0 <__aeabi_dmul>
   e023a:	ec53 2b18 	vmov	r2, r3, d8
   e023e:	f000 f983 	bl	e0548 <__aeabi_dsub>
   e0242:	a31f      	add	r3, pc, #124	; (adr r3, e02c0 <__kernel_sin+0x160>)
   e0244:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0248:	4606      	mov	r6, r0
   e024a:	460f      	mov	r7, r1
   e024c:	4640      	mov	r0, r8
   e024e:	4649      	mov	r1, r9
   e0250:	f000 fb2e 	bl	e08b0 <__aeabi_dmul>
   e0254:	4602      	mov	r2, r0
   e0256:	460b      	mov	r3, r1
   e0258:	4630      	mov	r0, r6
   e025a:	4639      	mov	r1, r7
   e025c:	f000 f976 	bl	e054c <__adddf3>
   e0260:	4602      	mov	r2, r0
   e0262:	460b      	mov	r3, r1
   e0264:	4620      	mov	r0, r4
   e0266:	4629      	mov	r1, r5
   e0268:	f000 f96e 	bl	e0548 <__aeabi_dsub>
   e026c:	ec41 0b10 	vmov	d0, r0, r1
   e0270:	b003      	add	sp, #12
   e0272:	ecbd 8b02 	vpop	{d8}
   e0276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e027a:	4602      	mov	r2, r0
   e027c:	460b      	mov	r3, r1
   e027e:	4630      	mov	r0, r6
   e0280:	4639      	mov	r1, r7
   e0282:	f000 fb15 	bl	e08b0 <__aeabi_dmul>
   e0286:	a30e      	add	r3, pc, #56	; (adr r3, e02c0 <__kernel_sin+0x160>)
   e0288:	e9d3 2300 	ldrd	r2, r3, [r3]
   e028c:	f000 f95c 	bl	e0548 <__aeabi_dsub>
   e0290:	4642      	mov	r2, r8
   e0292:	464b      	mov	r3, r9
   e0294:	f000 fb0c 	bl	e08b0 <__aeabi_dmul>
   e0298:	4622      	mov	r2, r4
   e029a:	462b      	mov	r3, r5
   e029c:	f000 f956 	bl	e054c <__adddf3>
   e02a0:	ec41 0b10 	vmov	d0, r0, r1
   e02a4:	b003      	add	sp, #12
   e02a6:	ecbd 8b02 	vpop	{d8}
   e02aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e02ae:	ec45 4b10 	vmov	d0, r4, r5
   e02b2:	b003      	add	sp, #12
   e02b4:	ecbd 8b02 	vpop	{d8}
   e02b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e02bc:	f3af 8000 	nop.w
   e02c0:	55555549 	.word	0x55555549
   e02c4:	3fc55555 	.word	0x3fc55555
   e02c8:	3fe00000 	.word	0x3fe00000
   e02cc:	5acfd57c 	.word	0x5acfd57c
   e02d0:	3de5d93a 	.word	0x3de5d93a
   e02d4:	8a2b9ceb 	.word	0x8a2b9ceb
   e02d8:	3e5ae5e6 	.word	0x3e5ae5e6
   e02dc:	57b1fe7d 	.word	0x57b1fe7d
   e02e0:	3ec71de3 	.word	0x3ec71de3
   e02e4:	19c161d5 	.word	0x19c161d5
   e02e8:	3f2a01a0 	.word	0x3f2a01a0
   e02ec:	1110f8a6 	.word	0x1110f8a6
   e02f0:	3f811111 	.word	0x3f811111
   e02f4:	00000000 	.word	0x00000000

000e02f8 <floor>:
   e02f8:	ec51 0b10 	vmov	r0, r1, d0
   e02fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
   e0300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0304:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   e0308:	2d13      	cmp	r5, #19
   e030a:	460c      	mov	r4, r1
   e030c:	460f      	mov	r7, r1
   e030e:	ee10 6a10 	vmov	r6, s0
   e0312:	dc1d      	bgt.n	e0350 <floor+0x58>
   e0314:	2d00      	cmp	r5, #0
   e0316:	db43      	blt.n	e03a0 <floor+0xa8>
   e0318:	4b3d      	ldr	r3, [pc, #244]	; (e0410 <floor+0x118>)
   e031a:	fa43 f805 	asr.w	r8, r3, r5
   e031e:	ea01 0308 	and.w	r3, r1, r8
   e0322:	4303      	orrs	r3, r0
   e0324:	d019      	beq.n	e035a <floor+0x62>
   e0326:	a338      	add	r3, pc, #224	; (adr r3, e0408 <floor+0x110>)
   e0328:	e9d3 2300 	ldrd	r2, r3, [r3]
   e032c:	f000 f90e 	bl	e054c <__adddf3>
   e0330:	2200      	movs	r2, #0
   e0332:	2300      	movs	r3, #0
   e0334:	f000 fd4c 	bl	e0dd0 <__aeabi_dcmpgt>
   e0338:	b120      	cbz	r0, e0344 <floor+0x4c>
   e033a:	2c00      	cmp	r4, #0
   e033c:	db49      	blt.n	e03d2 <floor+0xda>
   e033e:	ea27 0408 	bic.w	r4, r7, r8
   e0342:	2600      	movs	r6, #0
   e0344:	4623      	mov	r3, r4
   e0346:	4632      	mov	r2, r6
   e0348:	ec43 2b10 	vmov	d0, r2, r3
   e034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0350:	2d33      	cmp	r5, #51	; 0x33
   e0352:	dd06      	ble.n	e0362 <floor+0x6a>
   e0354:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   e0358:	d032      	beq.n	e03c0 <floor+0xc8>
   e035a:	ec41 0b10 	vmov	d0, r0, r1
   e035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0362:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   e0366:	f04f 38ff 	mov.w	r8, #4294967295
   e036a:	fa28 f803 	lsr.w	r8, r8, r3
   e036e:	ea10 0f08 	tst.w	r0, r8
   e0372:	d0f2      	beq.n	e035a <floor+0x62>
   e0374:	a324      	add	r3, pc, #144	; (adr r3, e0408 <floor+0x110>)
   e0376:	e9d3 2300 	ldrd	r2, r3, [r3]
   e037a:	f000 f8e7 	bl	e054c <__adddf3>
   e037e:	2200      	movs	r2, #0
   e0380:	2300      	movs	r3, #0
   e0382:	f000 fd25 	bl	e0dd0 <__aeabi_dcmpgt>
   e0386:	2800      	cmp	r0, #0
   e0388:	d0dc      	beq.n	e0344 <floor+0x4c>
   e038a:	2c00      	cmp	r4, #0
   e038c:	db27      	blt.n	e03de <floor+0xe6>
   e038e:	463c      	mov	r4, r7
   e0390:	ea26 0608 	bic.w	r6, r6, r8
   e0394:	4623      	mov	r3, r4
   e0396:	4632      	mov	r2, r6
   e0398:	ec43 2b10 	vmov	d0, r2, r3
   e039c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e03a0:	a319      	add	r3, pc, #100	; (adr r3, e0408 <floor+0x110>)
   e03a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e03a6:	f000 f8d1 	bl	e054c <__adddf3>
   e03aa:	2200      	movs	r2, #0
   e03ac:	2300      	movs	r3, #0
   e03ae:	f000 fd0f 	bl	e0dd0 <__aeabi_dcmpgt>
   e03b2:	2800      	cmp	r0, #0
   e03b4:	d0c6      	beq.n	e0344 <floor+0x4c>
   e03b6:	2c00      	cmp	r4, #0
   e03b8:	db1c      	blt.n	e03f4 <floor+0xfc>
   e03ba:	2600      	movs	r6, #0
   e03bc:	4634      	mov	r4, r6
   e03be:	e7c1      	b.n	e0344 <floor+0x4c>
   e03c0:	ee10 2a10 	vmov	r2, s0
   e03c4:	460b      	mov	r3, r1
   e03c6:	f000 f8c1 	bl	e054c <__adddf3>
   e03ca:	ec41 0b10 	vmov	d0, r0, r1
   e03ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e03d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   e03d6:	fa43 f505 	asr.w	r5, r3, r5
   e03da:	442f      	add	r7, r5
   e03dc:	e7af      	b.n	e033e <floor+0x46>
   e03de:	2d14      	cmp	r5, #20
   e03e0:	d010      	beq.n	e0404 <floor+0x10c>
   e03e2:	2301      	movs	r3, #1
   e03e4:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   e03e8:	fa03 f505 	lsl.w	r5, r3, r5
   e03ec:	19ae      	adds	r6, r5, r6
   e03ee:	bf28      	it	cs
   e03f0:	18ff      	addcs	r7, r7, r3
   e03f2:	e7cc      	b.n	e038e <floor+0x96>
   e03f4:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   e03f8:	4b06      	ldr	r3, [pc, #24]	; (e0414 <floor+0x11c>)
   e03fa:	4332      	orrs	r2, r6
   e03fc:	bf18      	it	ne
   e03fe:	461c      	movne	r4, r3
   e0400:	2600      	movs	r6, #0
   e0402:	e79f      	b.n	e0344 <floor+0x4c>
   e0404:	3701      	adds	r7, #1
   e0406:	e7c2      	b.n	e038e <floor+0x96>
   e0408:	8800759c 	.word	0x8800759c
   e040c:	7e37e43c 	.word	0x7e37e43c
   e0410:	000fffff 	.word	0x000fffff
   e0414:	bff00000 	.word	0xbff00000

000e0418 <scalbn>:
   e0418:	ec53 2b10 	vmov	r2, r3, d0
   e041c:	b570      	push	{r4, r5, r6, lr}
   e041e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   e0422:	4619      	mov	r1, r3
   e0424:	4605      	mov	r5, r0
   e0426:	bb14      	cbnz	r4, e046e <scalbn+0x56>
   e0428:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e042c:	4311      	orrs	r1, r2
   e042e:	d02a      	beq.n	e0486 <scalbn+0x6e>
   e0430:	4619      	mov	r1, r3
   e0432:	2200      	movs	r2, #0
   e0434:	4b38      	ldr	r3, [pc, #224]	; (e0518 <scalbn+0x100>)
   e0436:	4e39      	ldr	r6, [pc, #228]	; (e051c <scalbn+0x104>)
   e0438:	ee10 0a10 	vmov	r0, s0
   e043c:	f000 fa38 	bl	e08b0 <__aeabi_dmul>
   e0440:	42b5      	cmp	r5, r6
   e0442:	4602      	mov	r2, r0
   e0444:	460b      	mov	r3, r1
   e0446:	db1f      	blt.n	e0488 <scalbn+0x70>
   e0448:	f3c1 540a 	ubfx	r4, r1, #20, #11
   e044c:	3c36      	subs	r4, #54	; 0x36
   e044e:	442c      	add	r4, r5
   e0450:	f240 70fe 	movw	r0, #2046	; 0x7fe
   e0454:	4284      	cmp	r4, r0
   e0456:	dc1f      	bgt.n	e0498 <scalbn+0x80>
   e0458:	2c00      	cmp	r4, #0
   e045a:	dd2d      	ble.n	e04b8 <scalbn+0xa0>
   e045c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e0460:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e0464:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e0468:	ec43 2b10 	vmov	d0, r2, r3
   e046c:	bd70      	pop	{r4, r5, r6, pc}
   e046e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   e0472:	4284      	cmp	r4, r0
   e0474:	d1eb      	bne.n	e044e <scalbn+0x36>
   e0476:	ee10 0a10 	vmov	r0, s0
   e047a:	4619      	mov	r1, r3
   e047c:	f000 f866 	bl	e054c <__adddf3>
   e0480:	ec41 0b10 	vmov	d0, r0, r1
   e0484:	bd70      	pop	{r4, r5, r6, pc}
   e0486:	bd70      	pop	{r4, r5, r6, pc}
   e0488:	a31f      	add	r3, pc, #124	; (adr r3, e0508 <scalbn+0xf0>)
   e048a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e048e:	f000 fa0f 	bl	e08b0 <__aeabi_dmul>
   e0492:	ec41 0b10 	vmov	d0, r0, r1
   e0496:	bd70      	pop	{r4, r5, r6, pc}
   e0498:	ec43 2b11 	vmov	d1, r2, r3
   e049c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; e0510 <scalbn+0xf8>
   e04a0:	f000 f840 	bl	e0524 <copysign>
   e04a4:	a31a      	add	r3, pc, #104	; (adr r3, e0510 <scalbn+0xf8>)
   e04a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   e04aa:	ec51 0b10 	vmov	r0, r1, d0
   e04ae:	f000 f9ff 	bl	e08b0 <__aeabi_dmul>
   e04b2:	ec41 0b10 	vmov	d0, r0, r1
   e04b6:	bd70      	pop	{r4, r5, r6, pc}
   e04b8:	f114 0f35 	cmn.w	r4, #53	; 0x35
   e04bc:	da13      	bge.n	e04e6 <scalbn+0xce>
   e04be:	f24c 3150 	movw	r1, #50000	; 0xc350
   e04c2:	428d      	cmp	r5, r1
   e04c4:	ec43 2b11 	vmov	d1, r2, r3
   e04c8:	dce8      	bgt.n	e049c <scalbn+0x84>
   e04ca:	ed9f 0b0f 	vldr	d0, [pc, #60]	; e0508 <scalbn+0xf0>
   e04ce:	f000 f829 	bl	e0524 <copysign>
   e04d2:	a30d      	add	r3, pc, #52	; (adr r3, e0508 <scalbn+0xf0>)
   e04d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e04d8:	ec51 0b10 	vmov	r0, r1, d0
   e04dc:	f000 f9e8 	bl	e08b0 <__aeabi_dmul>
   e04e0:	ec41 0b10 	vmov	d0, r0, r1
   e04e4:	bd70      	pop	{r4, r5, r6, pc}
   e04e6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   e04ea:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   e04ee:	3436      	adds	r4, #54	; 0x36
   e04f0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   e04f4:	4610      	mov	r0, r2
   e04f6:	4619      	mov	r1, r3
   e04f8:	2200      	movs	r2, #0
   e04fa:	4b09      	ldr	r3, [pc, #36]	; (e0520 <scalbn+0x108>)
   e04fc:	f000 f9d8 	bl	e08b0 <__aeabi_dmul>
   e0500:	ec41 0b10 	vmov	d0, r0, r1
   e0504:	bd70      	pop	{r4, r5, r6, pc}
   e0506:	bf00      	nop
   e0508:	c2f8f359 	.word	0xc2f8f359
   e050c:	01a56e1f 	.word	0x01a56e1f
   e0510:	8800759c 	.word	0x8800759c
   e0514:	7e37e43c 	.word	0x7e37e43c
   e0518:	43500000 	.word	0x43500000
   e051c:	ffff3cb0 	.word	0xffff3cb0
   e0520:	3c900000 	.word	0x3c900000

000e0524 <copysign>:
   e0524:	ec53 2b10 	vmov	r2, r3, d0
   e0528:	ee11 0a90 	vmov	r0, s3
   e052c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   e0530:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   e0534:	ea41 0300 	orr.w	r3, r1, r0
   e0538:	ec43 2b10 	vmov	d0, r2, r3
   e053c:	4770      	bx	lr
   e053e:	bf00      	nop

000e0540 <__aeabi_drsub>:
   e0540:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e0544:	e002      	b.n	e054c <__adddf3>
   e0546:	bf00      	nop

000e0548 <__aeabi_dsub>:
   e0548:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e054c <__adddf3>:
   e054c:	b530      	push	{r4, r5, lr}
   e054e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e0552:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e0556:	ea94 0f05 	teq	r4, r5
   e055a:	bf08      	it	eq
   e055c:	ea90 0f02 	teqeq	r0, r2
   e0560:	bf1f      	itttt	ne
   e0562:	ea54 0c00 	orrsne.w	ip, r4, r0
   e0566:	ea55 0c02 	orrsne.w	ip, r5, r2
   e056a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e056e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e0572:	f000 80e2 	beq.w	e073a <__adddf3+0x1ee>
   e0576:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e057a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e057e:	bfb8      	it	lt
   e0580:	426d      	neglt	r5, r5
   e0582:	dd0c      	ble.n	e059e <__adddf3+0x52>
   e0584:	442c      	add	r4, r5
   e0586:	ea80 0202 	eor.w	r2, r0, r2
   e058a:	ea81 0303 	eor.w	r3, r1, r3
   e058e:	ea82 0000 	eor.w	r0, r2, r0
   e0592:	ea83 0101 	eor.w	r1, r3, r1
   e0596:	ea80 0202 	eor.w	r2, r0, r2
   e059a:	ea81 0303 	eor.w	r3, r1, r3
   e059e:	2d36      	cmp	r5, #54	; 0x36
   e05a0:	bf88      	it	hi
   e05a2:	bd30      	pophi	{r4, r5, pc}
   e05a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e05a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e05ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e05b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e05b4:	d002      	beq.n	e05bc <__adddf3+0x70>
   e05b6:	4240      	negs	r0, r0
   e05b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e05bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e05c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e05c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e05c8:	d002      	beq.n	e05d0 <__adddf3+0x84>
   e05ca:	4252      	negs	r2, r2
   e05cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e05d0:	ea94 0f05 	teq	r4, r5
   e05d4:	f000 80a7 	beq.w	e0726 <__adddf3+0x1da>
   e05d8:	f1a4 0401 	sub.w	r4, r4, #1
   e05dc:	f1d5 0e20 	rsbs	lr, r5, #32
   e05e0:	db0d      	blt.n	e05fe <__adddf3+0xb2>
   e05e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   e05e6:	fa22 f205 	lsr.w	r2, r2, r5
   e05ea:	1880      	adds	r0, r0, r2
   e05ec:	f141 0100 	adc.w	r1, r1, #0
   e05f0:	fa03 f20e 	lsl.w	r2, r3, lr
   e05f4:	1880      	adds	r0, r0, r2
   e05f6:	fa43 f305 	asr.w	r3, r3, r5
   e05fa:	4159      	adcs	r1, r3
   e05fc:	e00e      	b.n	e061c <__adddf3+0xd0>
   e05fe:	f1a5 0520 	sub.w	r5, r5, #32
   e0602:	f10e 0e20 	add.w	lr, lr, #32
   e0606:	2a01      	cmp	r2, #1
   e0608:	fa03 fc0e 	lsl.w	ip, r3, lr
   e060c:	bf28      	it	cs
   e060e:	f04c 0c02 	orrcs.w	ip, ip, #2
   e0612:	fa43 f305 	asr.w	r3, r3, r5
   e0616:	18c0      	adds	r0, r0, r3
   e0618:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e061c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e0620:	d507      	bpl.n	e0632 <__adddf3+0xe6>
   e0622:	f04f 0e00 	mov.w	lr, #0
   e0626:	f1dc 0c00 	rsbs	ip, ip, #0
   e062a:	eb7e 0000 	sbcs.w	r0, lr, r0
   e062e:	eb6e 0101 	sbc.w	r1, lr, r1
   e0632:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e0636:	d31b      	bcc.n	e0670 <__adddf3+0x124>
   e0638:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e063c:	d30c      	bcc.n	e0658 <__adddf3+0x10c>
   e063e:	0849      	lsrs	r1, r1, #1
   e0640:	ea5f 0030 	movs.w	r0, r0, rrx
   e0644:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e0648:	f104 0401 	add.w	r4, r4, #1
   e064c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e0650:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e0654:	f080 809a 	bcs.w	e078c <__adddf3+0x240>
   e0658:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e065c:	bf08      	it	eq
   e065e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e0662:	f150 0000 	adcs.w	r0, r0, #0
   e0666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e066a:	ea41 0105 	orr.w	r1, r1, r5
   e066e:	bd30      	pop	{r4, r5, pc}
   e0670:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e0674:	4140      	adcs	r0, r0
   e0676:	eb41 0101 	adc.w	r1, r1, r1
   e067a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e067e:	f1a4 0401 	sub.w	r4, r4, #1
   e0682:	d1e9      	bne.n	e0658 <__adddf3+0x10c>
   e0684:	f091 0f00 	teq	r1, #0
   e0688:	bf04      	itt	eq
   e068a:	4601      	moveq	r1, r0
   e068c:	2000      	moveq	r0, #0
   e068e:	fab1 f381 	clz	r3, r1
   e0692:	bf08      	it	eq
   e0694:	3320      	addeq	r3, #32
   e0696:	f1a3 030b 	sub.w	r3, r3, #11
   e069a:	f1b3 0220 	subs.w	r2, r3, #32
   e069e:	da0c      	bge.n	e06ba <__adddf3+0x16e>
   e06a0:	320c      	adds	r2, #12
   e06a2:	dd08      	ble.n	e06b6 <__adddf3+0x16a>
   e06a4:	f102 0c14 	add.w	ip, r2, #20
   e06a8:	f1c2 020c 	rsb	r2, r2, #12
   e06ac:	fa01 f00c 	lsl.w	r0, r1, ip
   e06b0:	fa21 f102 	lsr.w	r1, r1, r2
   e06b4:	e00c      	b.n	e06d0 <__adddf3+0x184>
   e06b6:	f102 0214 	add.w	r2, r2, #20
   e06ba:	bfd8      	it	le
   e06bc:	f1c2 0c20 	rsble	ip, r2, #32
   e06c0:	fa01 f102 	lsl.w	r1, r1, r2
   e06c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   e06c8:	bfdc      	itt	le
   e06ca:	ea41 010c 	orrle.w	r1, r1, ip
   e06ce:	4090      	lslle	r0, r2
   e06d0:	1ae4      	subs	r4, r4, r3
   e06d2:	bfa2      	ittt	ge
   e06d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e06d8:	4329      	orrge	r1, r5
   e06da:	bd30      	popge	{r4, r5, pc}
   e06dc:	ea6f 0404 	mvn.w	r4, r4
   e06e0:	3c1f      	subs	r4, #31
   e06e2:	da1c      	bge.n	e071e <__adddf3+0x1d2>
   e06e4:	340c      	adds	r4, #12
   e06e6:	dc0e      	bgt.n	e0706 <__adddf3+0x1ba>
   e06e8:	f104 0414 	add.w	r4, r4, #20
   e06ec:	f1c4 0220 	rsb	r2, r4, #32
   e06f0:	fa20 f004 	lsr.w	r0, r0, r4
   e06f4:	fa01 f302 	lsl.w	r3, r1, r2
   e06f8:	ea40 0003 	orr.w	r0, r0, r3
   e06fc:	fa21 f304 	lsr.w	r3, r1, r4
   e0700:	ea45 0103 	orr.w	r1, r5, r3
   e0704:	bd30      	pop	{r4, r5, pc}
   e0706:	f1c4 040c 	rsb	r4, r4, #12
   e070a:	f1c4 0220 	rsb	r2, r4, #32
   e070e:	fa20 f002 	lsr.w	r0, r0, r2
   e0712:	fa01 f304 	lsl.w	r3, r1, r4
   e0716:	ea40 0003 	orr.w	r0, r0, r3
   e071a:	4629      	mov	r1, r5
   e071c:	bd30      	pop	{r4, r5, pc}
   e071e:	fa21 f004 	lsr.w	r0, r1, r4
   e0722:	4629      	mov	r1, r5
   e0724:	bd30      	pop	{r4, r5, pc}
   e0726:	f094 0f00 	teq	r4, #0
   e072a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e072e:	bf06      	itte	eq
   e0730:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e0734:	3401      	addeq	r4, #1
   e0736:	3d01      	subne	r5, #1
   e0738:	e74e      	b.n	e05d8 <__adddf3+0x8c>
   e073a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e073e:	bf18      	it	ne
   e0740:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e0744:	d029      	beq.n	e079a <__adddf3+0x24e>
   e0746:	ea94 0f05 	teq	r4, r5
   e074a:	bf08      	it	eq
   e074c:	ea90 0f02 	teqeq	r0, r2
   e0750:	d005      	beq.n	e075e <__adddf3+0x212>
   e0752:	ea54 0c00 	orrs.w	ip, r4, r0
   e0756:	bf04      	itt	eq
   e0758:	4619      	moveq	r1, r3
   e075a:	4610      	moveq	r0, r2
   e075c:	bd30      	pop	{r4, r5, pc}
   e075e:	ea91 0f03 	teq	r1, r3
   e0762:	bf1e      	ittt	ne
   e0764:	2100      	movne	r1, #0
   e0766:	2000      	movne	r0, #0
   e0768:	bd30      	popne	{r4, r5, pc}
   e076a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e076e:	d105      	bne.n	e077c <__adddf3+0x230>
   e0770:	0040      	lsls	r0, r0, #1
   e0772:	4149      	adcs	r1, r1
   e0774:	bf28      	it	cs
   e0776:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e077a:	bd30      	pop	{r4, r5, pc}
   e077c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e0780:	bf3c      	itt	cc
   e0782:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e0786:	bd30      	popcc	{r4, r5, pc}
   e0788:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e078c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e0790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e0794:	f04f 0000 	mov.w	r0, #0
   e0798:	bd30      	pop	{r4, r5, pc}
   e079a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e079e:	bf1a      	itte	ne
   e07a0:	4619      	movne	r1, r3
   e07a2:	4610      	movne	r0, r2
   e07a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e07a8:	bf1c      	itt	ne
   e07aa:	460b      	movne	r3, r1
   e07ac:	4602      	movne	r2, r0
   e07ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e07b2:	bf06      	itte	eq
   e07b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e07b8:	ea91 0f03 	teqeq	r1, r3
   e07bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e07c0:	bd30      	pop	{r4, r5, pc}
   e07c2:	bf00      	nop

000e07c4 <__aeabi_ui2d>:
   e07c4:	f090 0f00 	teq	r0, #0
   e07c8:	bf04      	itt	eq
   e07ca:	2100      	moveq	r1, #0
   e07cc:	4770      	bxeq	lr
   e07ce:	b530      	push	{r4, r5, lr}
   e07d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e07d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e07d8:	f04f 0500 	mov.w	r5, #0
   e07dc:	f04f 0100 	mov.w	r1, #0
   e07e0:	e750      	b.n	e0684 <__adddf3+0x138>
   e07e2:	bf00      	nop

000e07e4 <__aeabi_i2d>:
   e07e4:	f090 0f00 	teq	r0, #0
   e07e8:	bf04      	itt	eq
   e07ea:	2100      	moveq	r1, #0
   e07ec:	4770      	bxeq	lr
   e07ee:	b530      	push	{r4, r5, lr}
   e07f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e07f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e07f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e07fc:	bf48      	it	mi
   e07fe:	4240      	negmi	r0, r0
   e0800:	f04f 0100 	mov.w	r1, #0
   e0804:	e73e      	b.n	e0684 <__adddf3+0x138>
   e0806:	bf00      	nop

000e0808 <__aeabi_f2d>:
   e0808:	0042      	lsls	r2, r0, #1
   e080a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e080e:	ea4f 0131 	mov.w	r1, r1, rrx
   e0812:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e0816:	bf1f      	itttt	ne
   e0818:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e081c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e0820:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e0824:	4770      	bxne	lr
   e0826:	f092 0f00 	teq	r2, #0
   e082a:	bf14      	ite	ne
   e082c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e0830:	4770      	bxeq	lr
   e0832:	b530      	push	{r4, r5, lr}
   e0834:	f44f 7460 	mov.w	r4, #896	; 0x380
   e0838:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e083c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e0840:	e720      	b.n	e0684 <__adddf3+0x138>
   e0842:	bf00      	nop

000e0844 <__aeabi_ul2d>:
   e0844:	ea50 0201 	orrs.w	r2, r0, r1
   e0848:	bf08      	it	eq
   e084a:	4770      	bxeq	lr
   e084c:	b530      	push	{r4, r5, lr}
   e084e:	f04f 0500 	mov.w	r5, #0
   e0852:	e00a      	b.n	e086a <__aeabi_l2d+0x16>

000e0854 <__aeabi_l2d>:
   e0854:	ea50 0201 	orrs.w	r2, r0, r1
   e0858:	bf08      	it	eq
   e085a:	4770      	bxeq	lr
   e085c:	b530      	push	{r4, r5, lr}
   e085e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e0862:	d502      	bpl.n	e086a <__aeabi_l2d+0x16>
   e0864:	4240      	negs	r0, r0
   e0866:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e086a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e086e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e0872:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e0876:	f43f aedc 	beq.w	e0632 <__adddf3+0xe6>
   e087a:	f04f 0203 	mov.w	r2, #3
   e087e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e0882:	bf18      	it	ne
   e0884:	3203      	addne	r2, #3
   e0886:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e088a:	bf18      	it	ne
   e088c:	3203      	addne	r2, #3
   e088e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e0892:	f1c2 0320 	rsb	r3, r2, #32
   e0896:	fa00 fc03 	lsl.w	ip, r0, r3
   e089a:	fa20 f002 	lsr.w	r0, r0, r2
   e089e:	fa01 fe03 	lsl.w	lr, r1, r3
   e08a2:	ea40 000e 	orr.w	r0, r0, lr
   e08a6:	fa21 f102 	lsr.w	r1, r1, r2
   e08aa:	4414      	add	r4, r2
   e08ac:	e6c1      	b.n	e0632 <__adddf3+0xe6>
   e08ae:	bf00      	nop

000e08b0 <__aeabi_dmul>:
   e08b0:	b570      	push	{r4, r5, r6, lr}
   e08b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e08b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e08ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e08be:	bf1d      	ittte	ne
   e08c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e08c4:	ea94 0f0c 	teqne	r4, ip
   e08c8:	ea95 0f0c 	teqne	r5, ip
   e08cc:	f000 f8de 	bleq	e0a8c <__aeabi_dmul+0x1dc>
   e08d0:	442c      	add	r4, r5
   e08d2:	ea81 0603 	eor.w	r6, r1, r3
   e08d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e08da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e08de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e08e2:	bf18      	it	ne
   e08e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e08e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e08ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e08f0:	d038      	beq.n	e0964 <__aeabi_dmul+0xb4>
   e08f2:	fba0 ce02 	umull	ip, lr, r0, r2
   e08f6:	f04f 0500 	mov.w	r5, #0
   e08fa:	fbe1 e502 	umlal	lr, r5, r1, r2
   e08fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e0902:	fbe0 e503 	umlal	lr, r5, r0, r3
   e0906:	f04f 0600 	mov.w	r6, #0
   e090a:	fbe1 5603 	umlal	r5, r6, r1, r3
   e090e:	f09c 0f00 	teq	ip, #0
   e0912:	bf18      	it	ne
   e0914:	f04e 0e01 	orrne.w	lr, lr, #1
   e0918:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e091c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e0920:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e0924:	d204      	bcs.n	e0930 <__aeabi_dmul+0x80>
   e0926:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e092a:	416d      	adcs	r5, r5
   e092c:	eb46 0606 	adc.w	r6, r6, r6
   e0930:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e0934:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e0938:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e093c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e0940:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e0944:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e0948:	bf88      	it	hi
   e094a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e094e:	d81e      	bhi.n	e098e <__aeabi_dmul+0xde>
   e0950:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e0954:	bf08      	it	eq
   e0956:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e095a:	f150 0000 	adcs.w	r0, r0, #0
   e095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e0962:	bd70      	pop	{r4, r5, r6, pc}
   e0964:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e0968:	ea46 0101 	orr.w	r1, r6, r1
   e096c:	ea40 0002 	orr.w	r0, r0, r2
   e0970:	ea81 0103 	eor.w	r1, r1, r3
   e0974:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e0978:	bfc2      	ittt	gt
   e097a:	ebd4 050c 	rsbsgt	r5, r4, ip
   e097e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e0982:	bd70      	popgt	{r4, r5, r6, pc}
   e0984:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e0988:	f04f 0e00 	mov.w	lr, #0
   e098c:	3c01      	subs	r4, #1
   e098e:	f300 80ab 	bgt.w	e0ae8 <__aeabi_dmul+0x238>
   e0992:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e0996:	bfde      	ittt	le
   e0998:	2000      	movle	r0, #0
   e099a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e099e:	bd70      	pople	{r4, r5, r6, pc}
   e09a0:	f1c4 0400 	rsb	r4, r4, #0
   e09a4:	3c20      	subs	r4, #32
   e09a6:	da35      	bge.n	e0a14 <__aeabi_dmul+0x164>
   e09a8:	340c      	adds	r4, #12
   e09aa:	dc1b      	bgt.n	e09e4 <__aeabi_dmul+0x134>
   e09ac:	f104 0414 	add.w	r4, r4, #20
   e09b0:	f1c4 0520 	rsb	r5, r4, #32
   e09b4:	fa00 f305 	lsl.w	r3, r0, r5
   e09b8:	fa20 f004 	lsr.w	r0, r0, r4
   e09bc:	fa01 f205 	lsl.w	r2, r1, r5
   e09c0:	ea40 0002 	orr.w	r0, r0, r2
   e09c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e09c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e09cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e09d0:	fa21 f604 	lsr.w	r6, r1, r4
   e09d4:	eb42 0106 	adc.w	r1, r2, r6
   e09d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e09dc:	bf08      	it	eq
   e09de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e09e2:	bd70      	pop	{r4, r5, r6, pc}
   e09e4:	f1c4 040c 	rsb	r4, r4, #12
   e09e8:	f1c4 0520 	rsb	r5, r4, #32
   e09ec:	fa00 f304 	lsl.w	r3, r0, r4
   e09f0:	fa20 f005 	lsr.w	r0, r0, r5
   e09f4:	fa01 f204 	lsl.w	r2, r1, r4
   e09f8:	ea40 0002 	orr.w	r0, r0, r2
   e09fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e0a00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e0a04:	f141 0100 	adc.w	r1, r1, #0
   e0a08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e0a0c:	bf08      	it	eq
   e0a0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e0a12:	bd70      	pop	{r4, r5, r6, pc}
   e0a14:	f1c4 0520 	rsb	r5, r4, #32
   e0a18:	fa00 f205 	lsl.w	r2, r0, r5
   e0a1c:	ea4e 0e02 	orr.w	lr, lr, r2
   e0a20:	fa20 f304 	lsr.w	r3, r0, r4
   e0a24:	fa01 f205 	lsl.w	r2, r1, r5
   e0a28:	ea43 0302 	orr.w	r3, r3, r2
   e0a2c:	fa21 f004 	lsr.w	r0, r1, r4
   e0a30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e0a34:	fa21 f204 	lsr.w	r2, r1, r4
   e0a38:	ea20 0002 	bic.w	r0, r0, r2
   e0a3c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e0a40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e0a44:	bf08      	it	eq
   e0a46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e0a4a:	bd70      	pop	{r4, r5, r6, pc}
   e0a4c:	f094 0f00 	teq	r4, #0
   e0a50:	d10f      	bne.n	e0a72 <__aeabi_dmul+0x1c2>
   e0a52:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e0a56:	0040      	lsls	r0, r0, #1
   e0a58:	eb41 0101 	adc.w	r1, r1, r1
   e0a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e0a60:	bf08      	it	eq
   e0a62:	3c01      	subeq	r4, #1
   e0a64:	d0f7      	beq.n	e0a56 <__aeabi_dmul+0x1a6>
   e0a66:	ea41 0106 	orr.w	r1, r1, r6
   e0a6a:	f095 0f00 	teq	r5, #0
   e0a6e:	bf18      	it	ne
   e0a70:	4770      	bxne	lr
   e0a72:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e0a76:	0052      	lsls	r2, r2, #1
   e0a78:	eb43 0303 	adc.w	r3, r3, r3
   e0a7c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e0a80:	bf08      	it	eq
   e0a82:	3d01      	subeq	r5, #1
   e0a84:	d0f7      	beq.n	e0a76 <__aeabi_dmul+0x1c6>
   e0a86:	ea43 0306 	orr.w	r3, r3, r6
   e0a8a:	4770      	bx	lr
   e0a8c:	ea94 0f0c 	teq	r4, ip
   e0a90:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e0a94:	bf18      	it	ne
   e0a96:	ea95 0f0c 	teqne	r5, ip
   e0a9a:	d00c      	beq.n	e0ab6 <__aeabi_dmul+0x206>
   e0a9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e0aa0:	bf18      	it	ne
   e0aa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e0aa6:	d1d1      	bne.n	e0a4c <__aeabi_dmul+0x19c>
   e0aa8:	ea81 0103 	eor.w	r1, r1, r3
   e0aac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e0ab0:	f04f 0000 	mov.w	r0, #0
   e0ab4:	bd70      	pop	{r4, r5, r6, pc}
   e0ab6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e0aba:	bf06      	itte	eq
   e0abc:	4610      	moveq	r0, r2
   e0abe:	4619      	moveq	r1, r3
   e0ac0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e0ac4:	d019      	beq.n	e0afa <__aeabi_dmul+0x24a>
   e0ac6:	ea94 0f0c 	teq	r4, ip
   e0aca:	d102      	bne.n	e0ad2 <__aeabi_dmul+0x222>
   e0acc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e0ad0:	d113      	bne.n	e0afa <__aeabi_dmul+0x24a>
   e0ad2:	ea95 0f0c 	teq	r5, ip
   e0ad6:	d105      	bne.n	e0ae4 <__aeabi_dmul+0x234>
   e0ad8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e0adc:	bf1c      	itt	ne
   e0ade:	4610      	movne	r0, r2
   e0ae0:	4619      	movne	r1, r3
   e0ae2:	d10a      	bne.n	e0afa <__aeabi_dmul+0x24a>
   e0ae4:	ea81 0103 	eor.w	r1, r1, r3
   e0ae8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e0aec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e0af0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e0af4:	f04f 0000 	mov.w	r0, #0
   e0af8:	bd70      	pop	{r4, r5, r6, pc}
   e0afa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e0afe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e0b02:	bd70      	pop	{r4, r5, r6, pc}

000e0b04 <__aeabi_ddiv>:
   e0b04:	b570      	push	{r4, r5, r6, lr}
   e0b06:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e0b0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e0b0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e0b12:	bf1d      	ittte	ne
   e0b14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e0b18:	ea94 0f0c 	teqne	r4, ip
   e0b1c:	ea95 0f0c 	teqne	r5, ip
   e0b20:	f000 f8a7 	bleq	e0c72 <__aeabi_ddiv+0x16e>
   e0b24:	eba4 0405 	sub.w	r4, r4, r5
   e0b28:	ea81 0e03 	eor.w	lr, r1, r3
   e0b2c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e0b30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e0b34:	f000 8088 	beq.w	e0c48 <__aeabi_ddiv+0x144>
   e0b38:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e0b3c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e0b40:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e0b44:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e0b48:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e0b4c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e0b50:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e0b54:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e0b58:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e0b5c:	429d      	cmp	r5, r3
   e0b5e:	bf08      	it	eq
   e0b60:	4296      	cmpeq	r6, r2
   e0b62:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e0b66:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e0b6a:	d202      	bcs.n	e0b72 <__aeabi_ddiv+0x6e>
   e0b6c:	085b      	lsrs	r3, r3, #1
   e0b6e:	ea4f 0232 	mov.w	r2, r2, rrx
   e0b72:	1ab6      	subs	r6, r6, r2
   e0b74:	eb65 0503 	sbc.w	r5, r5, r3
   e0b78:	085b      	lsrs	r3, r3, #1
   e0b7a:	ea4f 0232 	mov.w	r2, r2, rrx
   e0b7e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e0b82:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e0b86:	ebb6 0e02 	subs.w	lr, r6, r2
   e0b8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e0b8e:	bf22      	ittt	cs
   e0b90:	1ab6      	subcs	r6, r6, r2
   e0b92:	4675      	movcs	r5, lr
   e0b94:	ea40 000c 	orrcs.w	r0, r0, ip
   e0b98:	085b      	lsrs	r3, r3, #1
   e0b9a:	ea4f 0232 	mov.w	r2, r2, rrx
   e0b9e:	ebb6 0e02 	subs.w	lr, r6, r2
   e0ba2:	eb75 0e03 	sbcs.w	lr, r5, r3
   e0ba6:	bf22      	ittt	cs
   e0ba8:	1ab6      	subcs	r6, r6, r2
   e0baa:	4675      	movcs	r5, lr
   e0bac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e0bb0:	085b      	lsrs	r3, r3, #1
   e0bb2:	ea4f 0232 	mov.w	r2, r2, rrx
   e0bb6:	ebb6 0e02 	subs.w	lr, r6, r2
   e0bba:	eb75 0e03 	sbcs.w	lr, r5, r3
   e0bbe:	bf22      	ittt	cs
   e0bc0:	1ab6      	subcs	r6, r6, r2
   e0bc2:	4675      	movcs	r5, lr
   e0bc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e0bc8:	085b      	lsrs	r3, r3, #1
   e0bca:	ea4f 0232 	mov.w	r2, r2, rrx
   e0bce:	ebb6 0e02 	subs.w	lr, r6, r2
   e0bd2:	eb75 0e03 	sbcs.w	lr, r5, r3
   e0bd6:	bf22      	ittt	cs
   e0bd8:	1ab6      	subcs	r6, r6, r2
   e0bda:	4675      	movcs	r5, lr
   e0bdc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e0be0:	ea55 0e06 	orrs.w	lr, r5, r6
   e0be4:	d018      	beq.n	e0c18 <__aeabi_ddiv+0x114>
   e0be6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e0bea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e0bee:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e0bf2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e0bf6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e0bfa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e0bfe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e0c02:	d1c0      	bne.n	e0b86 <__aeabi_ddiv+0x82>
   e0c04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e0c08:	d10b      	bne.n	e0c22 <__aeabi_ddiv+0x11e>
   e0c0a:	ea41 0100 	orr.w	r1, r1, r0
   e0c0e:	f04f 0000 	mov.w	r0, #0
   e0c12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e0c16:	e7b6      	b.n	e0b86 <__aeabi_ddiv+0x82>
   e0c18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e0c1c:	bf04      	itt	eq
   e0c1e:	4301      	orreq	r1, r0
   e0c20:	2000      	moveq	r0, #0
   e0c22:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e0c26:	bf88      	it	hi
   e0c28:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e0c2c:	f63f aeaf 	bhi.w	e098e <__aeabi_dmul+0xde>
   e0c30:	ebb5 0c03 	subs.w	ip, r5, r3
   e0c34:	bf04      	itt	eq
   e0c36:	ebb6 0c02 	subseq.w	ip, r6, r2
   e0c3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e0c3e:	f150 0000 	adcs.w	r0, r0, #0
   e0c42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e0c46:	bd70      	pop	{r4, r5, r6, pc}
   e0c48:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e0c4c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e0c50:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e0c54:	bfc2      	ittt	gt
   e0c56:	ebd4 050c 	rsbsgt	r5, r4, ip
   e0c5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e0c5e:	bd70      	popgt	{r4, r5, r6, pc}
   e0c60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e0c64:	f04f 0e00 	mov.w	lr, #0
   e0c68:	3c01      	subs	r4, #1
   e0c6a:	e690      	b.n	e098e <__aeabi_dmul+0xde>
   e0c6c:	ea45 0e06 	orr.w	lr, r5, r6
   e0c70:	e68d      	b.n	e098e <__aeabi_dmul+0xde>
   e0c72:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e0c76:	ea94 0f0c 	teq	r4, ip
   e0c7a:	bf08      	it	eq
   e0c7c:	ea95 0f0c 	teqeq	r5, ip
   e0c80:	f43f af3b 	beq.w	e0afa <__aeabi_dmul+0x24a>
   e0c84:	ea94 0f0c 	teq	r4, ip
   e0c88:	d10a      	bne.n	e0ca0 <__aeabi_ddiv+0x19c>
   e0c8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e0c8e:	f47f af34 	bne.w	e0afa <__aeabi_dmul+0x24a>
   e0c92:	ea95 0f0c 	teq	r5, ip
   e0c96:	f47f af25 	bne.w	e0ae4 <__aeabi_dmul+0x234>
   e0c9a:	4610      	mov	r0, r2
   e0c9c:	4619      	mov	r1, r3
   e0c9e:	e72c      	b.n	e0afa <__aeabi_dmul+0x24a>
   e0ca0:	ea95 0f0c 	teq	r5, ip
   e0ca4:	d106      	bne.n	e0cb4 <__aeabi_ddiv+0x1b0>
   e0ca6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e0caa:	f43f aefd 	beq.w	e0aa8 <__aeabi_dmul+0x1f8>
   e0cae:	4610      	mov	r0, r2
   e0cb0:	4619      	mov	r1, r3
   e0cb2:	e722      	b.n	e0afa <__aeabi_dmul+0x24a>
   e0cb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e0cb8:	bf18      	it	ne
   e0cba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e0cbe:	f47f aec5 	bne.w	e0a4c <__aeabi_dmul+0x19c>
   e0cc2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e0cc6:	f47f af0d 	bne.w	e0ae4 <__aeabi_dmul+0x234>
   e0cca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e0cce:	f47f aeeb 	bne.w	e0aa8 <__aeabi_dmul+0x1f8>
   e0cd2:	e712      	b.n	e0afa <__aeabi_dmul+0x24a>

000e0cd4 <__gedf2>:
   e0cd4:	f04f 3cff 	mov.w	ip, #4294967295
   e0cd8:	e006      	b.n	e0ce8 <__cmpdf2+0x4>
   e0cda:	bf00      	nop

000e0cdc <__ledf2>:
   e0cdc:	f04f 0c01 	mov.w	ip, #1
   e0ce0:	e002      	b.n	e0ce8 <__cmpdf2+0x4>
   e0ce2:	bf00      	nop

000e0ce4 <__cmpdf2>:
   e0ce4:	f04f 0c01 	mov.w	ip, #1
   e0ce8:	f84d cd04 	str.w	ip, [sp, #-4]!
   e0cec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e0cf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e0cf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e0cf8:	bf18      	it	ne
   e0cfa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e0cfe:	d01b      	beq.n	e0d38 <__cmpdf2+0x54>
   e0d00:	b001      	add	sp, #4
   e0d02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e0d06:	bf0c      	ite	eq
   e0d08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e0d0c:	ea91 0f03 	teqne	r1, r3
   e0d10:	bf02      	ittt	eq
   e0d12:	ea90 0f02 	teqeq	r0, r2
   e0d16:	2000      	moveq	r0, #0
   e0d18:	4770      	bxeq	lr
   e0d1a:	f110 0f00 	cmn.w	r0, #0
   e0d1e:	ea91 0f03 	teq	r1, r3
   e0d22:	bf58      	it	pl
   e0d24:	4299      	cmppl	r1, r3
   e0d26:	bf08      	it	eq
   e0d28:	4290      	cmpeq	r0, r2
   e0d2a:	bf2c      	ite	cs
   e0d2c:	17d8      	asrcs	r0, r3, #31
   e0d2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e0d32:	f040 0001 	orr.w	r0, r0, #1
   e0d36:	4770      	bx	lr
   e0d38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e0d3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e0d40:	d102      	bne.n	e0d48 <__cmpdf2+0x64>
   e0d42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e0d46:	d107      	bne.n	e0d58 <__cmpdf2+0x74>
   e0d48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e0d4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e0d50:	d1d6      	bne.n	e0d00 <__cmpdf2+0x1c>
   e0d52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e0d56:	d0d3      	beq.n	e0d00 <__cmpdf2+0x1c>
   e0d58:	f85d 0b04 	ldr.w	r0, [sp], #4
   e0d5c:	4770      	bx	lr
   e0d5e:	bf00      	nop

000e0d60 <__aeabi_cdrcmple>:
   e0d60:	4684      	mov	ip, r0
   e0d62:	4610      	mov	r0, r2
   e0d64:	4662      	mov	r2, ip
   e0d66:	468c      	mov	ip, r1
   e0d68:	4619      	mov	r1, r3
   e0d6a:	4663      	mov	r3, ip
   e0d6c:	e000      	b.n	e0d70 <__aeabi_cdcmpeq>
   e0d6e:	bf00      	nop

000e0d70 <__aeabi_cdcmpeq>:
   e0d70:	b501      	push	{r0, lr}
   e0d72:	f7ff ffb7 	bl	e0ce4 <__cmpdf2>
   e0d76:	2800      	cmp	r0, #0
   e0d78:	bf48      	it	mi
   e0d7a:	f110 0f00 	cmnmi.w	r0, #0
   e0d7e:	bd01      	pop	{r0, pc}

000e0d80 <__aeabi_dcmpeq>:
   e0d80:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0d84:	f7ff fff4 	bl	e0d70 <__aeabi_cdcmpeq>
   e0d88:	bf0c      	ite	eq
   e0d8a:	2001      	moveq	r0, #1
   e0d8c:	2000      	movne	r0, #0
   e0d8e:	f85d fb08 	ldr.w	pc, [sp], #8
   e0d92:	bf00      	nop

000e0d94 <__aeabi_dcmplt>:
   e0d94:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0d98:	f7ff ffea 	bl	e0d70 <__aeabi_cdcmpeq>
   e0d9c:	bf34      	ite	cc
   e0d9e:	2001      	movcc	r0, #1
   e0da0:	2000      	movcs	r0, #0
   e0da2:	f85d fb08 	ldr.w	pc, [sp], #8
   e0da6:	bf00      	nop

000e0da8 <__aeabi_dcmple>:
   e0da8:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0dac:	f7ff ffe0 	bl	e0d70 <__aeabi_cdcmpeq>
   e0db0:	bf94      	ite	ls
   e0db2:	2001      	movls	r0, #1
   e0db4:	2000      	movhi	r0, #0
   e0db6:	f85d fb08 	ldr.w	pc, [sp], #8
   e0dba:	bf00      	nop

000e0dbc <__aeabi_dcmpge>:
   e0dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0dc0:	f7ff ffce 	bl	e0d60 <__aeabi_cdrcmple>
   e0dc4:	bf94      	ite	ls
   e0dc6:	2001      	movls	r0, #1
   e0dc8:	2000      	movhi	r0, #0
   e0dca:	f85d fb08 	ldr.w	pc, [sp], #8
   e0dce:	bf00      	nop

000e0dd0 <__aeabi_dcmpgt>:
   e0dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e0dd4:	f7ff ffc4 	bl	e0d60 <__aeabi_cdrcmple>
   e0dd8:	bf34      	ite	cc
   e0dda:	2001      	movcc	r0, #1
   e0ddc:	2000      	movcs	r0, #0
   e0dde:	f85d fb08 	ldr.w	pc, [sp], #8
   e0de2:	bf00      	nop

000e0de4 <__aeabi_dcmpun>:
   e0de4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e0de8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e0dec:	d102      	bne.n	e0df4 <__aeabi_dcmpun+0x10>
   e0dee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e0df2:	d10a      	bne.n	e0e0a <__aeabi_dcmpun+0x26>
   e0df4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e0df8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e0dfc:	d102      	bne.n	e0e04 <__aeabi_dcmpun+0x20>
   e0dfe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e0e02:	d102      	bne.n	e0e0a <__aeabi_dcmpun+0x26>
   e0e04:	f04f 0000 	mov.w	r0, #0
   e0e08:	4770      	bx	lr
   e0e0a:	f04f 0001 	mov.w	r0, #1
   e0e0e:	4770      	bx	lr

000e0e10 <__aeabi_d2iz>:
   e0e10:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e0e14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e0e18:	d215      	bcs.n	e0e46 <__aeabi_d2iz+0x36>
   e0e1a:	d511      	bpl.n	e0e40 <__aeabi_d2iz+0x30>
   e0e1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e0e20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e0e24:	d912      	bls.n	e0e4c <__aeabi_d2iz+0x3c>
   e0e26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e0e2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e0e2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e0e32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e0e36:	fa23 f002 	lsr.w	r0, r3, r2
   e0e3a:	bf18      	it	ne
   e0e3c:	4240      	negne	r0, r0
   e0e3e:	4770      	bx	lr
   e0e40:	f04f 0000 	mov.w	r0, #0
   e0e44:	4770      	bx	lr
   e0e46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e0e4a:	d105      	bne.n	e0e58 <__aeabi_d2iz+0x48>
   e0e4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e0e50:	bf08      	it	eq
   e0e52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e0e56:	4770      	bx	lr
   e0e58:	f04f 0000 	mov.w	r0, #0
   e0e5c:	4770      	bx	lr
   e0e5e:	bf00      	nop

000e0e60 <__aeabi_d2uiz>:
   e0e60:	004a      	lsls	r2, r1, #1
   e0e62:	d211      	bcs.n	e0e88 <__aeabi_d2uiz+0x28>
   e0e64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e0e68:	d211      	bcs.n	e0e8e <__aeabi_d2uiz+0x2e>
   e0e6a:	d50d      	bpl.n	e0e88 <__aeabi_d2uiz+0x28>
   e0e6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e0e70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e0e74:	d40e      	bmi.n	e0e94 <__aeabi_d2uiz+0x34>
   e0e76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e0e7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e0e7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e0e82:	fa23 f002 	lsr.w	r0, r3, r2
   e0e86:	4770      	bx	lr
   e0e88:	f04f 0000 	mov.w	r0, #0
   e0e8c:	4770      	bx	lr
   e0e8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e0e92:	d102      	bne.n	e0e9a <__aeabi_d2uiz+0x3a>
   e0e94:	f04f 30ff 	mov.w	r0, #4294967295
   e0e98:	4770      	bx	lr
   e0e9a:	f04f 0000 	mov.w	r0, #0
   e0e9e:	4770      	bx	lr

000e0ea0 <__aeabi_d2f>:
   e0ea0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e0ea4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e0ea8:	bf24      	itt	cs
   e0eaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e0eae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e0eb2:	d90d      	bls.n	e0ed0 <__aeabi_d2f+0x30>
   e0eb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e0eb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e0ebc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e0ec0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e0ec4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e0ec8:	bf08      	it	eq
   e0eca:	f020 0001 	biceq.w	r0, r0, #1
   e0ece:	4770      	bx	lr
   e0ed0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e0ed4:	d121      	bne.n	e0f1a <__aeabi_d2f+0x7a>
   e0ed6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e0eda:	bfbc      	itt	lt
   e0edc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e0ee0:	4770      	bxlt	lr
   e0ee2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e0ee6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e0eea:	f1c2 0218 	rsb	r2, r2, #24
   e0eee:	f1c2 0c20 	rsb	ip, r2, #32
   e0ef2:	fa10 f30c 	lsls.w	r3, r0, ip
   e0ef6:	fa20 f002 	lsr.w	r0, r0, r2
   e0efa:	bf18      	it	ne
   e0efc:	f040 0001 	orrne.w	r0, r0, #1
   e0f00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e0f04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e0f08:	fa03 fc0c 	lsl.w	ip, r3, ip
   e0f0c:	ea40 000c 	orr.w	r0, r0, ip
   e0f10:	fa23 f302 	lsr.w	r3, r3, r2
   e0f14:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e0f18:	e7cc      	b.n	e0eb4 <__aeabi_d2f+0x14>
   e0f1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e0f1e:	d107      	bne.n	e0f30 <__aeabi_d2f+0x90>
   e0f20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e0f24:	bf1e      	ittt	ne
   e0f26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e0f2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e0f2e:	4770      	bxne	lr
   e0f30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e0f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e0f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e0f3c:	4770      	bx	lr
   e0f3e:	bf00      	nop

000e0f40 <__aeabi_uldivmod>:
   e0f40:	b953      	cbnz	r3, e0f58 <__aeabi_uldivmod+0x18>
   e0f42:	b94a      	cbnz	r2, e0f58 <__aeabi_uldivmod+0x18>
   e0f44:	2900      	cmp	r1, #0
   e0f46:	bf08      	it	eq
   e0f48:	2800      	cmpeq	r0, #0
   e0f4a:	bf1c      	itt	ne
   e0f4c:	f04f 31ff 	movne.w	r1, #4294967295
   e0f50:	f04f 30ff 	movne.w	r0, #4294967295
   e0f54:	f000 b9a2 	b.w	e129c <__aeabi_idiv0>
   e0f58:	f1ad 0c08 	sub.w	ip, sp, #8
   e0f5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   e0f60:	f000 f82a 	bl	e0fb8 <__udivmoddi4>
   e0f64:	f8dd e004 	ldr.w	lr, [sp, #4]
   e0f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e0f6c:	b004      	add	sp, #16
   e0f6e:	4770      	bx	lr

000e0f70 <__aeabi_d2ulz>:
   e0f70:	b5d0      	push	{r4, r6, r7, lr}
   e0f72:	2200      	movs	r2, #0
   e0f74:	4b0e      	ldr	r3, [pc, #56]	; (e0fb0 <__aeabi_d2ulz+0x40>)
   e0f76:	4606      	mov	r6, r0
   e0f78:	460f      	mov	r7, r1
   e0f7a:	f7ff fc99 	bl	e08b0 <__aeabi_dmul>
   e0f7e:	f7ff ff6f 	bl	e0e60 <__aeabi_d2uiz>
   e0f82:	4604      	mov	r4, r0
   e0f84:	f7ff fc1e 	bl	e07c4 <__aeabi_ui2d>
   e0f88:	2200      	movs	r2, #0
   e0f8a:	4b0a      	ldr	r3, [pc, #40]	; (e0fb4 <__aeabi_d2ulz+0x44>)
   e0f8c:	f7ff fc90 	bl	e08b0 <__aeabi_dmul>
   e0f90:	4602      	mov	r2, r0
   e0f92:	460b      	mov	r3, r1
   e0f94:	4630      	mov	r0, r6
   e0f96:	4639      	mov	r1, r7
   e0f98:	f7ff fad6 	bl	e0548 <__aeabi_dsub>
   e0f9c:	f7ff ff60 	bl	e0e60 <__aeabi_d2uiz>
   e0fa0:	4623      	mov	r3, r4
   e0fa2:	2200      	movs	r2, #0
   e0fa4:	ea42 0200 	orr.w	r2, r2, r0
   e0fa8:	4610      	mov	r0, r2
   e0faa:	4619      	mov	r1, r3
   e0fac:	bdd0      	pop	{r4, r6, r7, pc}
   e0fae:	bf00      	nop
   e0fb0:	3df00000 	.word	0x3df00000
   e0fb4:	41f00000 	.word	0x41f00000

000e0fb8 <__udivmoddi4>:
   e0fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e0fbc:	468c      	mov	ip, r1
   e0fbe:	460e      	mov	r6, r1
   e0fc0:	4604      	mov	r4, r0
   e0fc2:	9d08      	ldr	r5, [sp, #32]
   e0fc4:	2b00      	cmp	r3, #0
   e0fc6:	d150      	bne.n	e106a <__udivmoddi4+0xb2>
   e0fc8:	428a      	cmp	r2, r1
   e0fca:	4617      	mov	r7, r2
   e0fcc:	d96c      	bls.n	e10a8 <__udivmoddi4+0xf0>
   e0fce:	fab2 fe82 	clz	lr, r2
   e0fd2:	f1be 0f00 	cmp.w	lr, #0
   e0fd6:	d00b      	beq.n	e0ff0 <__udivmoddi4+0x38>
   e0fd8:	f1ce 0420 	rsb	r4, lr, #32
   e0fdc:	fa20 f404 	lsr.w	r4, r0, r4
   e0fe0:	fa01 f60e 	lsl.w	r6, r1, lr
   e0fe4:	ea44 0c06 	orr.w	ip, r4, r6
   e0fe8:	fa02 f70e 	lsl.w	r7, r2, lr
   e0fec:	fa00 f40e 	lsl.w	r4, r0, lr
   e0ff0:	ea4f 4917 	mov.w	r9, r7, lsr #16
   e0ff4:	0c22      	lsrs	r2, r4, #16
   e0ff6:	fbbc f0f9 	udiv	r0, ip, r9
   e0ffa:	fa1f f887 	uxth.w	r8, r7
   e0ffe:	fb09 c610 	mls	r6, r9, r0, ip
   e1002:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e1006:	fb00 f308 	mul.w	r3, r0, r8
   e100a:	42b3      	cmp	r3, r6
   e100c:	d909      	bls.n	e1022 <__udivmoddi4+0x6a>
   e100e:	19f6      	adds	r6, r6, r7
   e1010:	f100 32ff 	add.w	r2, r0, #4294967295
   e1014:	f080 8122 	bcs.w	e125c <__udivmoddi4+0x2a4>
   e1018:	42b3      	cmp	r3, r6
   e101a:	f240 811f 	bls.w	e125c <__udivmoddi4+0x2a4>
   e101e:	3802      	subs	r0, #2
   e1020:	443e      	add	r6, r7
   e1022:	1af6      	subs	r6, r6, r3
   e1024:	b2a2      	uxth	r2, r4
   e1026:	fbb6 f3f9 	udiv	r3, r6, r9
   e102a:	fb09 6613 	mls	r6, r9, r3, r6
   e102e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e1032:	fb03 f808 	mul.w	r8, r3, r8
   e1036:	45a0      	cmp	r8, r4
   e1038:	d909      	bls.n	e104e <__udivmoddi4+0x96>
   e103a:	19e4      	adds	r4, r4, r7
   e103c:	f103 32ff 	add.w	r2, r3, #4294967295
   e1040:	f080 810a 	bcs.w	e1258 <__udivmoddi4+0x2a0>
   e1044:	45a0      	cmp	r8, r4
   e1046:	f240 8107 	bls.w	e1258 <__udivmoddi4+0x2a0>
   e104a:	3b02      	subs	r3, #2
   e104c:	443c      	add	r4, r7
   e104e:	ebc8 0404 	rsb	r4, r8, r4
   e1052:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e1056:	2100      	movs	r1, #0
   e1058:	2d00      	cmp	r5, #0
   e105a:	d062      	beq.n	e1122 <__udivmoddi4+0x16a>
   e105c:	fa24 f40e 	lsr.w	r4, r4, lr
   e1060:	2300      	movs	r3, #0
   e1062:	602c      	str	r4, [r5, #0]
   e1064:	606b      	str	r3, [r5, #4]
   e1066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e106a:	428b      	cmp	r3, r1
   e106c:	d907      	bls.n	e107e <__udivmoddi4+0xc6>
   e106e:	2d00      	cmp	r5, #0
   e1070:	d055      	beq.n	e111e <__udivmoddi4+0x166>
   e1072:	2100      	movs	r1, #0
   e1074:	e885 0041 	stmia.w	r5, {r0, r6}
   e1078:	4608      	mov	r0, r1
   e107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e107e:	fab3 f183 	clz	r1, r3
   e1082:	2900      	cmp	r1, #0
   e1084:	f040 8090 	bne.w	e11a8 <__udivmoddi4+0x1f0>
   e1088:	42b3      	cmp	r3, r6
   e108a:	d302      	bcc.n	e1092 <__udivmoddi4+0xda>
   e108c:	4282      	cmp	r2, r0
   e108e:	f200 80f8 	bhi.w	e1282 <__udivmoddi4+0x2ca>
   e1092:	1a84      	subs	r4, r0, r2
   e1094:	eb66 0603 	sbc.w	r6, r6, r3
   e1098:	2001      	movs	r0, #1
   e109a:	46b4      	mov	ip, r6
   e109c:	2d00      	cmp	r5, #0
   e109e:	d040      	beq.n	e1122 <__udivmoddi4+0x16a>
   e10a0:	e885 1010 	stmia.w	r5, {r4, ip}
   e10a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e10a8:	b912      	cbnz	r2, e10b0 <__udivmoddi4+0xf8>
   e10aa:	2701      	movs	r7, #1
   e10ac:	fbb7 f7f2 	udiv	r7, r7, r2
   e10b0:	fab7 fe87 	clz	lr, r7
   e10b4:	f1be 0f00 	cmp.w	lr, #0
   e10b8:	d135      	bne.n	e1126 <__udivmoddi4+0x16e>
   e10ba:	1bf3      	subs	r3, r6, r7
   e10bc:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e10c0:	fa1f fc87 	uxth.w	ip, r7
   e10c4:	2101      	movs	r1, #1
   e10c6:	fbb3 f0f8 	udiv	r0, r3, r8
   e10ca:	0c22      	lsrs	r2, r4, #16
   e10cc:	fb08 3610 	mls	r6, r8, r0, r3
   e10d0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e10d4:	fb0c f300 	mul.w	r3, ip, r0
   e10d8:	42b3      	cmp	r3, r6
   e10da:	d907      	bls.n	e10ec <__udivmoddi4+0x134>
   e10dc:	19f6      	adds	r6, r6, r7
   e10de:	f100 32ff 	add.w	r2, r0, #4294967295
   e10e2:	d202      	bcs.n	e10ea <__udivmoddi4+0x132>
   e10e4:	42b3      	cmp	r3, r6
   e10e6:	f200 80ce 	bhi.w	e1286 <__udivmoddi4+0x2ce>
   e10ea:	4610      	mov	r0, r2
   e10ec:	1af6      	subs	r6, r6, r3
   e10ee:	b2a2      	uxth	r2, r4
   e10f0:	fbb6 f3f8 	udiv	r3, r6, r8
   e10f4:	fb08 6613 	mls	r6, r8, r3, r6
   e10f8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e10fc:	fb0c fc03 	mul.w	ip, ip, r3
   e1100:	45a4      	cmp	ip, r4
   e1102:	d907      	bls.n	e1114 <__udivmoddi4+0x15c>
   e1104:	19e4      	adds	r4, r4, r7
   e1106:	f103 32ff 	add.w	r2, r3, #4294967295
   e110a:	d202      	bcs.n	e1112 <__udivmoddi4+0x15a>
   e110c:	45a4      	cmp	ip, r4
   e110e:	f200 80b5 	bhi.w	e127c <__udivmoddi4+0x2c4>
   e1112:	4613      	mov	r3, r2
   e1114:	ebcc 0404 	rsb	r4, ip, r4
   e1118:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e111c:	e79c      	b.n	e1058 <__udivmoddi4+0xa0>
   e111e:	4629      	mov	r1, r5
   e1120:	4628      	mov	r0, r5
   e1122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1126:	f1ce 0120 	rsb	r1, lr, #32
   e112a:	fa06 f30e 	lsl.w	r3, r6, lr
   e112e:	fa07 f70e 	lsl.w	r7, r7, lr
   e1132:	fa20 f901 	lsr.w	r9, r0, r1
   e1136:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e113a:	40ce      	lsrs	r6, r1
   e113c:	ea49 0903 	orr.w	r9, r9, r3
   e1140:	fbb6 faf8 	udiv	sl, r6, r8
   e1144:	ea4f 4419 	mov.w	r4, r9, lsr #16
   e1148:	fb08 661a 	mls	r6, r8, sl, r6
   e114c:	fa1f fc87 	uxth.w	ip, r7
   e1150:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   e1154:	fb0a f20c 	mul.w	r2, sl, ip
   e1158:	429a      	cmp	r2, r3
   e115a:	fa00 f40e 	lsl.w	r4, r0, lr
   e115e:	d90a      	bls.n	e1176 <__udivmoddi4+0x1be>
   e1160:	19db      	adds	r3, r3, r7
   e1162:	f10a 31ff 	add.w	r1, sl, #4294967295
   e1166:	f080 8087 	bcs.w	e1278 <__udivmoddi4+0x2c0>
   e116a:	429a      	cmp	r2, r3
   e116c:	f240 8084 	bls.w	e1278 <__udivmoddi4+0x2c0>
   e1170:	f1aa 0a02 	sub.w	sl, sl, #2
   e1174:	443b      	add	r3, r7
   e1176:	1a9b      	subs	r3, r3, r2
   e1178:	fa1f f989 	uxth.w	r9, r9
   e117c:	fbb3 f1f8 	udiv	r1, r3, r8
   e1180:	fb08 3311 	mls	r3, r8, r1, r3
   e1184:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   e1188:	fb01 f60c 	mul.w	r6, r1, ip
   e118c:	429e      	cmp	r6, r3
   e118e:	d907      	bls.n	e11a0 <__udivmoddi4+0x1e8>
   e1190:	19db      	adds	r3, r3, r7
   e1192:	f101 32ff 	add.w	r2, r1, #4294967295
   e1196:	d26b      	bcs.n	e1270 <__udivmoddi4+0x2b8>
   e1198:	429e      	cmp	r6, r3
   e119a:	d969      	bls.n	e1270 <__udivmoddi4+0x2b8>
   e119c:	3902      	subs	r1, #2
   e119e:	443b      	add	r3, r7
   e11a0:	1b9b      	subs	r3, r3, r6
   e11a2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   e11a6:	e78e      	b.n	e10c6 <__udivmoddi4+0x10e>
   e11a8:	f1c1 0e20 	rsb	lr, r1, #32
   e11ac:	fa22 f40e 	lsr.w	r4, r2, lr
   e11b0:	408b      	lsls	r3, r1
   e11b2:	4323      	orrs	r3, r4
   e11b4:	fa20 f70e 	lsr.w	r7, r0, lr
   e11b8:	fa06 f401 	lsl.w	r4, r6, r1
   e11bc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   e11c0:	fa26 f60e 	lsr.w	r6, r6, lr
   e11c4:	433c      	orrs	r4, r7
   e11c6:	fbb6 f9fc 	udiv	r9, r6, ip
   e11ca:	0c27      	lsrs	r7, r4, #16
   e11cc:	fb0c 6619 	mls	r6, ip, r9, r6
   e11d0:	fa1f f883 	uxth.w	r8, r3
   e11d4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   e11d8:	fb09 f708 	mul.w	r7, r9, r8
   e11dc:	42b7      	cmp	r7, r6
   e11de:	fa02 f201 	lsl.w	r2, r2, r1
   e11e2:	fa00 fa01 	lsl.w	sl, r0, r1
   e11e6:	d908      	bls.n	e11fa <__udivmoddi4+0x242>
   e11e8:	18f6      	adds	r6, r6, r3
   e11ea:	f109 30ff 	add.w	r0, r9, #4294967295
   e11ee:	d241      	bcs.n	e1274 <__udivmoddi4+0x2bc>
   e11f0:	42b7      	cmp	r7, r6
   e11f2:	d93f      	bls.n	e1274 <__udivmoddi4+0x2bc>
   e11f4:	f1a9 0902 	sub.w	r9, r9, #2
   e11f8:	441e      	add	r6, r3
   e11fa:	1bf6      	subs	r6, r6, r7
   e11fc:	b2a0      	uxth	r0, r4
   e11fe:	fbb6 f4fc 	udiv	r4, r6, ip
   e1202:	fb0c 6614 	mls	r6, ip, r4, r6
   e1206:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   e120a:	fb04 f808 	mul.w	r8, r4, r8
   e120e:	45b8      	cmp	r8, r7
   e1210:	d907      	bls.n	e1222 <__udivmoddi4+0x26a>
   e1212:	18ff      	adds	r7, r7, r3
   e1214:	f104 30ff 	add.w	r0, r4, #4294967295
   e1218:	d228      	bcs.n	e126c <__udivmoddi4+0x2b4>
   e121a:	45b8      	cmp	r8, r7
   e121c:	d926      	bls.n	e126c <__udivmoddi4+0x2b4>
   e121e:	3c02      	subs	r4, #2
   e1220:	441f      	add	r7, r3
   e1222:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   e1226:	ebc8 0707 	rsb	r7, r8, r7
   e122a:	fba0 8902 	umull	r8, r9, r0, r2
   e122e:	454f      	cmp	r7, r9
   e1230:	4644      	mov	r4, r8
   e1232:	464e      	mov	r6, r9
   e1234:	d314      	bcc.n	e1260 <__udivmoddi4+0x2a8>
   e1236:	d029      	beq.n	e128c <__udivmoddi4+0x2d4>
   e1238:	b365      	cbz	r5, e1294 <__udivmoddi4+0x2dc>
   e123a:	ebba 0304 	subs.w	r3, sl, r4
   e123e:	eb67 0706 	sbc.w	r7, r7, r6
   e1242:	fa07 fe0e 	lsl.w	lr, r7, lr
   e1246:	40cb      	lsrs	r3, r1
   e1248:	40cf      	lsrs	r7, r1
   e124a:	ea4e 0303 	orr.w	r3, lr, r3
   e124e:	e885 0088 	stmia.w	r5, {r3, r7}
   e1252:	2100      	movs	r1, #0
   e1254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1258:	4613      	mov	r3, r2
   e125a:	e6f8      	b.n	e104e <__udivmoddi4+0x96>
   e125c:	4610      	mov	r0, r2
   e125e:	e6e0      	b.n	e1022 <__udivmoddi4+0x6a>
   e1260:	ebb8 0402 	subs.w	r4, r8, r2
   e1264:	eb69 0603 	sbc.w	r6, r9, r3
   e1268:	3801      	subs	r0, #1
   e126a:	e7e5      	b.n	e1238 <__udivmoddi4+0x280>
   e126c:	4604      	mov	r4, r0
   e126e:	e7d8      	b.n	e1222 <__udivmoddi4+0x26a>
   e1270:	4611      	mov	r1, r2
   e1272:	e795      	b.n	e11a0 <__udivmoddi4+0x1e8>
   e1274:	4681      	mov	r9, r0
   e1276:	e7c0      	b.n	e11fa <__udivmoddi4+0x242>
   e1278:	468a      	mov	sl, r1
   e127a:	e77c      	b.n	e1176 <__udivmoddi4+0x1be>
   e127c:	3b02      	subs	r3, #2
   e127e:	443c      	add	r4, r7
   e1280:	e748      	b.n	e1114 <__udivmoddi4+0x15c>
   e1282:	4608      	mov	r0, r1
   e1284:	e70a      	b.n	e109c <__udivmoddi4+0xe4>
   e1286:	3802      	subs	r0, #2
   e1288:	443e      	add	r6, r7
   e128a:	e72f      	b.n	e10ec <__udivmoddi4+0x134>
   e128c:	45c2      	cmp	sl, r8
   e128e:	d3e7      	bcc.n	e1260 <__udivmoddi4+0x2a8>
   e1290:	463e      	mov	r6, r7
   e1292:	e7d1      	b.n	e1238 <__udivmoddi4+0x280>
   e1294:	4629      	mov	r1, r5
   e1296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e129a:	bf00      	nop

000e129c <__aeabi_idiv0>:
   e129c:	4770      	bx	lr
   e129e:	bf00      	nop

000e12a0 <asctime>:
   e12a0:	4b09      	ldr	r3, [pc, #36]	; (e12c8 <asctime+0x28>)
   e12a2:	b570      	push	{r4, r5, r6, lr}
   e12a4:	681c      	ldr	r4, [r3, #0]
   e12a6:	6c25      	ldr	r5, [r4, #64]	; 0x40
   e12a8:	4606      	mov	r6, r0
   e12aa:	b93d      	cbnz	r5, e12bc <asctime+0x1c>
   e12ac:	201a      	movs	r0, #26
   e12ae:	f7fa fc4d 	bl	dbb4c <malloc>
   e12b2:	221a      	movs	r2, #26
   e12b4:	6420      	str	r0, [r4, #64]	; 0x40
   e12b6:	4629      	mov	r1, r5
   e12b8:	f000 f95e 	bl	e1578 <memset>
   e12bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   e12be:	4630      	mov	r0, r6
   e12c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e12c4:	f000 b802 	b.w	e12cc <asctime_r>
   e12c8:	2003bb80 	.word	0x2003bb80

000e12cc <asctime_r>:
   e12cc:	b510      	push	{r4, lr}
   e12ce:	460c      	mov	r4, r1
   e12d0:	6941      	ldr	r1, [r0, #20]
   e12d2:	6903      	ldr	r3, [r0, #16]
   e12d4:	6982      	ldr	r2, [r0, #24]
   e12d6:	b086      	sub	sp, #24
   e12d8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e12dc:	9104      	str	r1, [sp, #16]
   e12de:	6801      	ldr	r1, [r0, #0]
   e12e0:	9103      	str	r1, [sp, #12]
   e12e2:	6841      	ldr	r1, [r0, #4]
   e12e4:	9102      	str	r1, [sp, #8]
   e12e6:	6881      	ldr	r1, [r0, #8]
   e12e8:	9101      	str	r1, [sp, #4]
   e12ea:	68c1      	ldr	r1, [r0, #12]
   e12ec:	9100      	str	r1, [sp, #0]
   e12ee:	4907      	ldr	r1, [pc, #28]	; (e130c <asctime_r+0x40>)
   e12f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e12f4:	440b      	add	r3, r1
   e12f6:	4906      	ldr	r1, [pc, #24]	; (e1310 <asctime_r+0x44>)
   e12f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e12fc:	440a      	add	r2, r1
   e12fe:	4620      	mov	r0, r4
   e1300:	4904      	ldr	r1, [pc, #16]	; (e1314 <asctime_r+0x48>)
   e1302:	f7fa fc43 	bl	dbb8c <siprintf>
   e1306:	4620      	mov	r0, r4
   e1308:	b006      	add	sp, #24
   e130a:	bd10      	pop	{r4, pc}
   e130c:	000e5c5d 	.word	0x000e5c5d
   e1310:	000e5c48 	.word	0x000e5c48
   e1314:	000e5c81 	.word	0x000e5c81

000e1318 <atof>:
   e1318:	2100      	movs	r1, #0
   e131a:	f001 bf61 	b.w	e31e0 <strtod>

000e131e <atoi>:
   e131e:	220a      	movs	r2, #10
   e1320:	2100      	movs	r1, #0
   e1322:	f001 bfeb 	b.w	e32fc <strtol>

000e1326 <atol>:
   e1326:	220a      	movs	r2, #10
   e1328:	2100      	movs	r1, #0
   e132a:	f001 bfe7 	b.w	e32fc <strtol>
	...

000e1330 <__cxa_atexit>:
   e1330:	b510      	push	{r4, lr}
   e1332:	4c05      	ldr	r4, [pc, #20]	; (e1348 <__cxa_atexit+0x18>)
   e1334:	4613      	mov	r3, r2
   e1336:	b12c      	cbz	r4, e1344 <__cxa_atexit+0x14>
   e1338:	460a      	mov	r2, r1
   e133a:	4601      	mov	r1, r0
   e133c:	2002      	movs	r0, #2
   e133e:	f3af 8000 	nop.w
   e1342:	bd10      	pop	{r4, pc}
   e1344:	4620      	mov	r0, r4
   e1346:	bd10      	pop	{r4, pc}
   e1348:	00000000 	.word	0x00000000

000e134c <localtime>:
   e134c:	b538      	push	{r3, r4, r5, lr}
   e134e:	4b07      	ldr	r3, [pc, #28]	; (e136c <localtime+0x20>)
   e1350:	681c      	ldr	r4, [r3, #0]
   e1352:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e1354:	4605      	mov	r5, r0
   e1356:	b91b      	cbnz	r3, e1360 <localtime+0x14>
   e1358:	2024      	movs	r0, #36	; 0x24
   e135a:	f7fa fbf7 	bl	dbb4c <malloc>
   e135e:	63e0      	str	r0, [r4, #60]	; 0x3c
   e1360:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e1362:	4628      	mov	r0, r5
   e1364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e1368:	f000 b802 	b.w	e1370 <localtime_r>
   e136c:	2003bb80 	.word	0x2003bb80

000e1370 <localtime_r>:
   e1370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e1374:	460c      	mov	r4, r1
   e1376:	4680      	mov	r8, r0
   e1378:	f002 fe0c 	bl	e3f94 <__gettzinfo>
   e137c:	4621      	mov	r1, r4
   e137e:	4607      	mov	r7, r0
   e1380:	4640      	mov	r0, r8
   e1382:	f002 fe0b 	bl	e3f9c <gmtime_r>
   e1386:	6946      	ldr	r6, [r0, #20]
   e1388:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e138c:	07b3      	lsls	r3, r6, #30
   e138e:	4604      	mov	r4, r0
   e1390:	d105      	bne.n	e139e <localtime_r+0x2e>
   e1392:	2264      	movs	r2, #100	; 0x64
   e1394:	fb96 f3f2 	sdiv	r3, r6, r2
   e1398:	fb02 6313 	mls	r3, r2, r3, r6
   e139c:	b94b      	cbnz	r3, e13b2 <localtime_r+0x42>
   e139e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e13a2:	fb96 f3f5 	sdiv	r3, r6, r5
   e13a6:	fb05 6513 	mls	r5, r5, r3, r6
   e13aa:	fab5 f385 	clz	r3, r5
   e13ae:	095b      	lsrs	r3, r3, #5
   e13b0:	e000      	b.n	e13b4 <localtime_r+0x44>
   e13b2:	2301      	movs	r3, #1
   e13b4:	4a5f      	ldr	r2, [pc, #380]	; (e1534 <localtime_r+0x1c4>)
   e13b6:	2530      	movs	r5, #48	; 0x30
   e13b8:	fb05 2503 	mla	r5, r5, r3, r2
   e13bc:	f002 f8e8 	bl	e3590 <__tz_lock>
   e13c0:	f002 f8e8 	bl	e3594 <_tzset_unlocked>
   e13c4:	4b5c      	ldr	r3, [pc, #368]	; (e1538 <localtime_r+0x1c8>)
   e13c6:	681b      	ldr	r3, [r3, #0]
   e13c8:	b1f3      	cbz	r3, e1408 <localtime_r+0x98>
   e13ca:	687b      	ldr	r3, [r7, #4]
   e13cc:	429e      	cmp	r6, r3
   e13ce:	d105      	bne.n	e13dc <localtime_r+0x6c>
   e13d0:	6839      	ldr	r1, [r7, #0]
   e13d2:	f8d8 3000 	ldr.w	r3, [r8]
   e13d6:	69fa      	ldr	r2, [r7, #28]
   e13d8:	b941      	cbnz	r1, e13ec <localtime_r+0x7c>
   e13da:	e00a      	b.n	e13f2 <localtime_r+0x82>
   e13dc:	4630      	mov	r0, r6
   e13de:	f002 f82f 	bl	e3440 <__tzcalc_limits>
   e13e2:	2800      	cmp	r0, #0
   e13e4:	d1f4      	bne.n	e13d0 <localtime_r+0x60>
   e13e6:	f04f 33ff 	mov.w	r3, #4294967295
   e13ea:	e00d      	b.n	e1408 <localtime_r+0x98>
   e13ec:	4293      	cmp	r3, r2
   e13ee:	db08      	blt.n	e1402 <localtime_r+0x92>
   e13f0:	e001      	b.n	e13f6 <localtime_r+0x86>
   e13f2:	4293      	cmp	r3, r2
   e13f4:	da07      	bge.n	e1406 <localtime_r+0x96>
   e13f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e13f8:	4293      	cmp	r3, r2
   e13fa:	bfac      	ite	ge
   e13fc:	2300      	movge	r3, #0
   e13fe:	2301      	movlt	r3, #1
   e1400:	e002      	b.n	e1408 <localtime_r+0x98>
   e1402:	2300      	movs	r3, #0
   e1404:	e000      	b.n	e1408 <localtime_r+0x98>
   e1406:	2301      	movs	r3, #1
   e1408:	6223      	str	r3, [r4, #32]
   e140a:	6a23      	ldr	r3, [r4, #32]
   e140c:	2b01      	cmp	r3, #1
   e140e:	bf0c      	ite	eq
   e1410:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e1412:	6a39      	ldrne	r1, [r7, #32]
   e1414:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e1418:	203c      	movs	r0, #60	; 0x3c
   e141a:	fb91 f6f3 	sdiv	r6, r1, r3
   e141e:	fb03 1316 	mls	r3, r3, r6, r1
   e1422:	6861      	ldr	r1, [r4, #4]
   e1424:	fb93 f2f0 	sdiv	r2, r3, r0
   e1428:	fb00 3012 	mls	r0, r0, r2, r3
   e142c:	6823      	ldr	r3, [r4, #0]
   e142e:	1a89      	subs	r1, r1, r2
   e1430:	68a2      	ldr	r2, [r4, #8]
   e1432:	6061      	str	r1, [r4, #4]
   e1434:	1a1b      	subs	r3, r3, r0
   e1436:	1b92      	subs	r2, r2, r6
   e1438:	2b3b      	cmp	r3, #59	; 0x3b
   e143a:	6023      	str	r3, [r4, #0]
   e143c:	60a2      	str	r2, [r4, #8]
   e143e:	dd03      	ble.n	e1448 <localtime_r+0xd8>
   e1440:	3101      	adds	r1, #1
   e1442:	6061      	str	r1, [r4, #4]
   e1444:	3b3c      	subs	r3, #60	; 0x3c
   e1446:	e004      	b.n	e1452 <localtime_r+0xe2>
   e1448:	2b00      	cmp	r3, #0
   e144a:	da03      	bge.n	e1454 <localtime_r+0xe4>
   e144c:	3901      	subs	r1, #1
   e144e:	6061      	str	r1, [r4, #4]
   e1450:	333c      	adds	r3, #60	; 0x3c
   e1452:	6023      	str	r3, [r4, #0]
   e1454:	6863      	ldr	r3, [r4, #4]
   e1456:	2b3b      	cmp	r3, #59	; 0x3b
   e1458:	dd03      	ble.n	e1462 <localtime_r+0xf2>
   e145a:	3201      	adds	r2, #1
   e145c:	60a2      	str	r2, [r4, #8]
   e145e:	3b3c      	subs	r3, #60	; 0x3c
   e1460:	e004      	b.n	e146c <localtime_r+0xfc>
   e1462:	2b00      	cmp	r3, #0
   e1464:	da03      	bge.n	e146e <localtime_r+0xfe>
   e1466:	3a01      	subs	r2, #1
   e1468:	60a2      	str	r2, [r4, #8]
   e146a:	333c      	adds	r3, #60	; 0x3c
   e146c:	6063      	str	r3, [r4, #4]
   e146e:	68a3      	ldr	r3, [r4, #8]
   e1470:	2b17      	cmp	r3, #23
   e1472:	dd22      	ble.n	e14ba <localtime_r+0x14a>
   e1474:	69e2      	ldr	r2, [r4, #28]
   e1476:	3201      	adds	r2, #1
   e1478:	61e2      	str	r2, [r4, #28]
   e147a:	69a2      	ldr	r2, [r4, #24]
   e147c:	3201      	adds	r2, #1
   e147e:	2a06      	cmp	r2, #6
   e1480:	bfc8      	it	gt
   e1482:	2200      	movgt	r2, #0
   e1484:	61a2      	str	r2, [r4, #24]
   e1486:	68e2      	ldr	r2, [r4, #12]
   e1488:	3b18      	subs	r3, #24
   e148a:	3201      	adds	r2, #1
   e148c:	60a3      	str	r3, [r4, #8]
   e148e:	6923      	ldr	r3, [r4, #16]
   e1490:	60e2      	str	r2, [r4, #12]
   e1492:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e1496:	428a      	cmp	r2, r1
   e1498:	dd46      	ble.n	e1528 <localtime_r+0x1b8>
   e149a:	3301      	adds	r3, #1
   e149c:	2b0c      	cmp	r3, #12
   e149e:	bf0c      	ite	eq
   e14a0:	6963      	ldreq	r3, [r4, #20]
   e14a2:	6123      	strne	r3, [r4, #16]
   e14a4:	eba2 0201 	sub.w	r2, r2, r1
   e14a8:	60e2      	str	r2, [r4, #12]
   e14aa:	bf01      	itttt	eq
   e14ac:	3301      	addeq	r3, #1
   e14ae:	2200      	moveq	r2, #0
   e14b0:	6122      	streq	r2, [r4, #16]
   e14b2:	6163      	streq	r3, [r4, #20]
   e14b4:	bf08      	it	eq
   e14b6:	61e2      	streq	r2, [r4, #28]
   e14b8:	e036      	b.n	e1528 <localtime_r+0x1b8>
   e14ba:	2b00      	cmp	r3, #0
   e14bc:	da34      	bge.n	e1528 <localtime_r+0x1b8>
   e14be:	69e2      	ldr	r2, [r4, #28]
   e14c0:	3a01      	subs	r2, #1
   e14c2:	61e2      	str	r2, [r4, #28]
   e14c4:	69a2      	ldr	r2, [r4, #24]
   e14c6:	3a01      	subs	r2, #1
   e14c8:	bf48      	it	mi
   e14ca:	2206      	movmi	r2, #6
   e14cc:	61a2      	str	r2, [r4, #24]
   e14ce:	68e2      	ldr	r2, [r4, #12]
   e14d0:	3318      	adds	r3, #24
   e14d2:	3a01      	subs	r2, #1
   e14d4:	60e2      	str	r2, [r4, #12]
   e14d6:	60a3      	str	r3, [r4, #8]
   e14d8:	bb32      	cbnz	r2, e1528 <localtime_r+0x1b8>
   e14da:	6923      	ldr	r3, [r4, #16]
   e14dc:	3b01      	subs	r3, #1
   e14de:	d401      	bmi.n	e14e4 <localtime_r+0x174>
   e14e0:	6123      	str	r3, [r4, #16]
   e14e2:	e01d      	b.n	e1520 <localtime_r+0x1b0>
   e14e4:	230b      	movs	r3, #11
   e14e6:	6123      	str	r3, [r4, #16]
   e14e8:	6963      	ldr	r3, [r4, #20]
   e14ea:	1e5a      	subs	r2, r3, #1
   e14ec:	f012 0f03 	tst.w	r2, #3
   e14f0:	6162      	str	r2, [r4, #20]
   e14f2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e14f6:	d105      	bne.n	e1504 <localtime_r+0x194>
   e14f8:	2164      	movs	r1, #100	; 0x64
   e14fa:	fb93 f2f1 	sdiv	r2, r3, r1
   e14fe:	fb01 3212 	mls	r2, r1, r2, r3
   e1502:	b94a      	cbnz	r2, e1518 <localtime_r+0x1a8>
   e1504:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e1508:	fb93 f2f1 	sdiv	r2, r3, r1
   e150c:	fb01 3312 	mls	r3, r1, r2, r3
   e1510:	fab3 f383 	clz	r3, r3
   e1514:	095b      	lsrs	r3, r3, #5
   e1516:	e000      	b.n	e151a <localtime_r+0x1aa>
   e1518:	2301      	movs	r3, #1
   e151a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e151e:	61e3      	str	r3, [r4, #28]
   e1520:	6923      	ldr	r3, [r4, #16]
   e1522:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e1526:	60e3      	str	r3, [r4, #12]
   e1528:	f002 f833 	bl	e3592 <__tz_unlock>
   e152c:	4620      	mov	r0, r4
   e152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e1532:	bf00      	nop
   e1534:	000e5e6c 	.word	0x000e5e6c
   e1538:	2003e7e4 	.word	0x2003e7e4

000e153c <_localeconv_r>:
   e153c:	4800      	ldr	r0, [pc, #0]	; (e1540 <_localeconv_r+0x4>)
   e153e:	4770      	bx	lr
   e1540:	2003bb84 	.word	0x2003bb84

000e1544 <memcmp>:
   e1544:	b510      	push	{r4, lr}
   e1546:	3901      	subs	r1, #1
   e1548:	4402      	add	r2, r0
   e154a:	4290      	cmp	r0, r2
   e154c:	d007      	beq.n	e155e <memcmp+0x1a>
   e154e:	f810 3b01 	ldrb.w	r3, [r0], #1
   e1552:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e1556:	42a3      	cmp	r3, r4
   e1558:	d0f7      	beq.n	e154a <memcmp+0x6>
   e155a:	1b18      	subs	r0, r3, r4
   e155c:	bd10      	pop	{r4, pc}
   e155e:	2000      	movs	r0, #0
   e1560:	bd10      	pop	{r4, pc}

000e1562 <memcpy>:
   e1562:	b510      	push	{r4, lr}
   e1564:	1e43      	subs	r3, r0, #1
   e1566:	440a      	add	r2, r1
   e1568:	4291      	cmp	r1, r2
   e156a:	d004      	beq.n	e1576 <memcpy+0x14>
   e156c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e1570:	f803 4f01 	strb.w	r4, [r3, #1]!
   e1574:	e7f8      	b.n	e1568 <memcpy+0x6>
   e1576:	bd10      	pop	{r4, pc}

000e1578 <memset>:
   e1578:	4402      	add	r2, r0
   e157a:	4603      	mov	r3, r0
   e157c:	4293      	cmp	r3, r2
   e157e:	d002      	beq.n	e1586 <memset+0xe>
   e1580:	f803 1b01 	strb.w	r1, [r3], #1
   e1584:	e7fa      	b.n	e157c <memset+0x4>
   e1586:	4770      	bx	lr

000e1588 <validate_structure>:
   e1588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   e158a:	6801      	ldr	r1, [r0, #0]
   e158c:	293b      	cmp	r1, #59	; 0x3b
   e158e:	4604      	mov	r4, r0
   e1590:	d911      	bls.n	e15b6 <validate_structure+0x2e>
   e1592:	223c      	movs	r2, #60	; 0x3c
   e1594:	4668      	mov	r0, sp
   e1596:	f002 f987 	bl	e38a8 <div>
   e159a:	9a01      	ldr	r2, [sp, #4]
   e159c:	6863      	ldr	r3, [r4, #4]
   e159e:	9900      	ldr	r1, [sp, #0]
   e15a0:	2a00      	cmp	r2, #0
   e15a2:	440b      	add	r3, r1
   e15a4:	6063      	str	r3, [r4, #4]
   e15a6:	bfbb      	ittet	lt
   e15a8:	323c      	addlt	r2, #60	; 0x3c
   e15aa:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e15ae:	6022      	strge	r2, [r4, #0]
   e15b0:	6022      	strlt	r2, [r4, #0]
   e15b2:	bfb8      	it	lt
   e15b4:	6063      	strlt	r3, [r4, #4]
   e15b6:	6861      	ldr	r1, [r4, #4]
   e15b8:	293b      	cmp	r1, #59	; 0x3b
   e15ba:	d911      	bls.n	e15e0 <validate_structure+0x58>
   e15bc:	223c      	movs	r2, #60	; 0x3c
   e15be:	4668      	mov	r0, sp
   e15c0:	f002 f972 	bl	e38a8 <div>
   e15c4:	9a01      	ldr	r2, [sp, #4]
   e15c6:	68a1      	ldr	r1, [r4, #8]
   e15c8:	9b00      	ldr	r3, [sp, #0]
   e15ca:	2a00      	cmp	r2, #0
   e15cc:	440b      	add	r3, r1
   e15ce:	60a3      	str	r3, [r4, #8]
   e15d0:	bfbb      	ittet	lt
   e15d2:	323c      	addlt	r2, #60	; 0x3c
   e15d4:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e15d8:	6062      	strge	r2, [r4, #4]
   e15da:	6062      	strlt	r2, [r4, #4]
   e15dc:	bfb8      	it	lt
   e15de:	60a3      	strlt	r3, [r4, #8]
   e15e0:	68a1      	ldr	r1, [r4, #8]
   e15e2:	2917      	cmp	r1, #23
   e15e4:	d911      	bls.n	e160a <validate_structure+0x82>
   e15e6:	2218      	movs	r2, #24
   e15e8:	4668      	mov	r0, sp
   e15ea:	f002 f95d 	bl	e38a8 <div>
   e15ee:	9a01      	ldr	r2, [sp, #4]
   e15f0:	68e1      	ldr	r1, [r4, #12]
   e15f2:	9b00      	ldr	r3, [sp, #0]
   e15f4:	2a00      	cmp	r2, #0
   e15f6:	440b      	add	r3, r1
   e15f8:	60e3      	str	r3, [r4, #12]
   e15fa:	bfbb      	ittet	lt
   e15fc:	3218      	addlt	r2, #24
   e15fe:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e1602:	60a2      	strge	r2, [r4, #8]
   e1604:	60a2      	strlt	r2, [r4, #8]
   e1606:	bfb8      	it	lt
   e1608:	60e3      	strlt	r3, [r4, #12]
   e160a:	6921      	ldr	r1, [r4, #16]
   e160c:	290b      	cmp	r1, #11
   e160e:	d911      	bls.n	e1634 <validate_structure+0xac>
   e1610:	220c      	movs	r2, #12
   e1612:	4668      	mov	r0, sp
   e1614:	f002 f948 	bl	e38a8 <div>
   e1618:	9a01      	ldr	r2, [sp, #4]
   e161a:	6961      	ldr	r1, [r4, #20]
   e161c:	9b00      	ldr	r3, [sp, #0]
   e161e:	2a00      	cmp	r2, #0
   e1620:	440b      	add	r3, r1
   e1622:	6163      	str	r3, [r4, #20]
   e1624:	bfbb      	ittet	lt
   e1626:	320c      	addlt	r2, #12
   e1628:	f103 33ff 	addlt.w	r3, r3, #4294967295
   e162c:	6122      	strge	r2, [r4, #16]
   e162e:	6122      	strlt	r2, [r4, #16]
   e1630:	bfb8      	it	lt
   e1632:	6163      	strlt	r3, [r4, #20]
   e1634:	6963      	ldr	r3, [r4, #20]
   e1636:	0799      	lsls	r1, r3, #30
   e1638:	d112      	bne.n	e1660 <validate_structure+0xd8>
   e163a:	2164      	movs	r1, #100	; 0x64
   e163c:	fb93 f2f1 	sdiv	r2, r3, r1
   e1640:	fb01 3212 	mls	r2, r1, r2, r3
   e1644:	b972      	cbnz	r2, e1664 <validate_structure+0xdc>
   e1646:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   e164a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e164e:	fb93 f2f1 	sdiv	r2, r3, r1
   e1652:	fb01 3312 	mls	r3, r1, r2, r3
   e1656:	2b00      	cmp	r3, #0
   e1658:	bf14      	ite	ne
   e165a:	231c      	movne	r3, #28
   e165c:	231d      	moveq	r3, #29
   e165e:	e002      	b.n	e1666 <validate_structure+0xde>
   e1660:	231c      	movs	r3, #28
   e1662:	e000      	b.n	e1666 <validate_structure+0xde>
   e1664:	231d      	movs	r3, #29
   e1666:	68e2      	ldr	r2, [r4, #12]
   e1668:	2a00      	cmp	r2, #0
   e166a:	dd06      	ble.n	e167a <validate_structure+0xf2>
   e166c:	4f33      	ldr	r7, [pc, #204]	; (e173c <validate_structure+0x1b4>)
   e166e:	f04f 0e00 	mov.w	lr, #0
   e1672:	2564      	movs	r5, #100	; 0x64
   e1674:	f44f 76c8 	mov.w	r6, #400	; 0x190
   e1678:	e039      	b.n	e16ee <validate_structure+0x166>
   e167a:	4f30      	ldr	r7, [pc, #192]	; (e173c <validate_structure+0x1b4>)
   e167c:	260b      	movs	r6, #11
   e167e:	2064      	movs	r0, #100	; 0x64
   e1680:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e1684:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   e1688:	f1be 0f00 	cmp.w	lr, #0
   e168c:	dc53      	bgt.n	e1736 <validate_structure+0x1ae>
   e168e:	6921      	ldr	r1, [r4, #16]
   e1690:	3901      	subs	r1, #1
   e1692:	6121      	str	r1, [r4, #16]
   e1694:	3101      	adds	r1, #1
   e1696:	d118      	bne.n	e16ca <validate_structure+0x142>
   e1698:	6963      	ldr	r3, [r4, #20]
   e169a:	6126      	str	r6, [r4, #16]
   e169c:	1e59      	subs	r1, r3, #1
   e169e:	078a      	lsls	r2, r1, #30
   e16a0:	6161      	str	r1, [r4, #20]
   e16a2:	d10f      	bne.n	e16c4 <validate_structure+0x13c>
   e16a4:	fb91 f2f0 	sdiv	r2, r1, r0
   e16a8:	fb00 1112 	mls	r1, r0, r2, r1
   e16ac:	b961      	cbnz	r1, e16c8 <validate_structure+0x140>
   e16ae:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e16b2:	fb93 f2f5 	sdiv	r2, r3, r5
   e16b6:	fb05 3312 	mls	r3, r5, r2, r3
   e16ba:	2b00      	cmp	r3, #0
   e16bc:	bf14      	ite	ne
   e16be:	231c      	movne	r3, #28
   e16c0:	231d      	moveq	r3, #29
   e16c2:	e002      	b.n	e16ca <validate_structure+0x142>
   e16c4:	231c      	movs	r3, #28
   e16c6:	e000      	b.n	e16ca <validate_structure+0x142>
   e16c8:	231d      	movs	r3, #29
   e16ca:	6922      	ldr	r2, [r4, #16]
   e16cc:	2a01      	cmp	r2, #1
   e16ce:	bf14      	ite	ne
   e16d0:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   e16d4:	461a      	moveq	r2, r3
   e16d6:	4472      	add	r2, lr
   e16d8:	60e2      	str	r2, [r4, #12]
   e16da:	e7d3      	b.n	e1684 <validate_structure+0xfc>
   e16dc:	428b      	cmp	r3, r1
   e16de:	da2a      	bge.n	e1736 <validate_structure+0x1ae>
   e16e0:	4618      	mov	r0, r3
   e16e2:	3201      	adds	r2, #1
   e16e4:	1a09      	subs	r1, r1, r0
   e16e6:	2a0c      	cmp	r2, #12
   e16e8:	60e1      	str	r1, [r4, #12]
   e16ea:	6122      	str	r2, [r4, #16]
   e16ec:	d008      	beq.n	e1700 <validate_structure+0x178>
   e16ee:	6922      	ldr	r2, [r4, #16]
   e16f0:	68e1      	ldr	r1, [r4, #12]
   e16f2:	2a01      	cmp	r2, #1
   e16f4:	d0f2      	beq.n	e16dc <validate_structure+0x154>
   e16f6:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   e16fa:	4281      	cmp	r1, r0
   e16fc:	dcf1      	bgt.n	e16e2 <validate_structure+0x15a>
   e16fe:	e01a      	b.n	e1736 <validate_structure+0x1ae>
   e1700:	6963      	ldr	r3, [r4, #20]
   e1702:	f8c4 e010 	str.w	lr, [r4, #16]
   e1706:	1c5a      	adds	r2, r3, #1
   e1708:	0791      	lsls	r1, r2, #30
   e170a:	6162      	str	r2, [r4, #20]
   e170c:	d10f      	bne.n	e172e <validate_structure+0x1a6>
   e170e:	fb92 f1f5 	sdiv	r1, r2, r5
   e1712:	fb05 2211 	mls	r2, r5, r1, r2
   e1716:	b962      	cbnz	r2, e1732 <validate_structure+0x1aa>
   e1718:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   e171c:	fb93 f2f6 	sdiv	r2, r3, r6
   e1720:	fb06 3312 	mls	r3, r6, r2, r3
   e1724:	2b00      	cmp	r3, #0
   e1726:	bf14      	ite	ne
   e1728:	231c      	movne	r3, #28
   e172a:	231d      	moveq	r3, #29
   e172c:	e7df      	b.n	e16ee <validate_structure+0x166>
   e172e:	231c      	movs	r3, #28
   e1730:	e7dd      	b.n	e16ee <validate_structure+0x166>
   e1732:	231d      	movs	r3, #29
   e1734:	e7db      	b.n	e16ee <validate_structure+0x166>
   e1736:	b003      	add	sp, #12
   e1738:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e173a:	bf00      	nop
   e173c:	000e5e3c 	.word	0x000e5e3c

000e1740 <mktime>:
   e1740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e1744:	4605      	mov	r5, r0
   e1746:	f002 fc25 	bl	e3f94 <__gettzinfo>
   e174a:	4681      	mov	r9, r0
   e174c:	4628      	mov	r0, r5
   e174e:	f7ff ff1b 	bl	e1588 <validate_structure>
   e1752:	e895 000c 	ldmia.w	r5, {r2, r3}
   e1756:	213c      	movs	r1, #60	; 0x3c
   e1758:	fb01 2303 	mla	r3, r1, r3, r2
   e175c:	68aa      	ldr	r2, [r5, #8]
   e175e:	68ec      	ldr	r4, [r5, #12]
   e1760:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   e1764:	fb08 3102 	mla	r1, r8, r2, r3
   e1768:	692b      	ldr	r3, [r5, #16]
   e176a:	4aab      	ldr	r2, [pc, #684]	; (e1a18 <mktime+0x2d8>)
   e176c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   e1770:	3c01      	subs	r4, #1
   e1772:	2b01      	cmp	r3, #1
   e1774:	4414      	add	r4, r2
   e1776:	696b      	ldr	r3, [r5, #20]
   e1778:	dd11      	ble.n	e179e <mktime+0x5e>
   e177a:	079e      	lsls	r6, r3, #30
   e177c:	d10f      	bne.n	e179e <mktime+0x5e>
   e177e:	2064      	movs	r0, #100	; 0x64
   e1780:	fb93 f2f0 	sdiv	r2, r3, r0
   e1784:	fb00 3212 	mls	r2, r0, r2, r3
   e1788:	b942      	cbnz	r2, e179c <mktime+0x5c>
   e178a:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   e178e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e1792:	fb96 f0f2 	sdiv	r0, r6, r2
   e1796:	fb02 6210 	mls	r2, r2, r0, r6
   e179a:	b902      	cbnz	r2, e179e <mktime+0x5e>
   e179c:	3401      	adds	r4, #1
   e179e:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   e17a2:	3210      	adds	r2, #16
   e17a4:	f644 6020 	movw	r0, #20000	; 0x4e20
   e17a8:	4282      	cmp	r2, r0
   e17aa:	61ec      	str	r4, [r5, #28]
   e17ac:	461f      	mov	r7, r3
   e17ae:	f200 812e 	bhi.w	e1a0e <mktime+0x2ce>
   e17b2:	2b46      	cmp	r3, #70	; 0x46
   e17b4:	dd22      	ble.n	e17fc <mktime+0xbc>
   e17b6:	2246      	movs	r2, #70	; 0x46
   e17b8:	f240 1c6d 	movw	ip, #365	; 0x16d
   e17bc:	2664      	movs	r6, #100	; 0x64
   e17be:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   e17c2:	0790      	lsls	r0, r2, #30
   e17c4:	d110      	bne.n	e17e8 <mktime+0xa8>
   e17c6:	fb92 f0f6 	sdiv	r0, r2, r6
   e17ca:	fb06 2010 	mls	r0, r6, r0, r2
   e17ce:	b970      	cbnz	r0, e17ee <mktime+0xae>
   e17d0:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   e17d4:	fb98 f0fe 	sdiv	r0, r8, lr
   e17d8:	fb0e 8010 	mls	r0, lr, r0, r8
   e17dc:	2800      	cmp	r0, #0
   e17de:	bf14      	ite	ne
   e17e0:	4660      	movne	r0, ip
   e17e2:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e17e6:	e004      	b.n	e17f2 <mktime+0xb2>
   e17e8:	f240 106d 	movw	r0, #365	; 0x16d
   e17ec:	e001      	b.n	e17f2 <mktime+0xb2>
   e17ee:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e17f2:	3201      	adds	r2, #1
   e17f4:	4293      	cmp	r3, r2
   e17f6:	4404      	add	r4, r0
   e17f8:	d1e3      	bne.n	e17c2 <mktime+0x82>
   e17fa:	e044      	b.n	e1886 <mktime+0x146>
   e17fc:	d043      	beq.n	e1886 <mktime+0x146>
   e17fe:	2245      	movs	r2, #69	; 0x45
   e1800:	f240 1e6d 	movw	lr, #365	; 0x16d
   e1804:	2664      	movs	r6, #100	; 0x64
   e1806:	f44f 77c8 	mov.w	r7, #400	; 0x190
   e180a:	429a      	cmp	r2, r3
   e180c:	dd1a      	ble.n	e1844 <mktime+0x104>
   e180e:	0790      	lsls	r0, r2, #30
   e1810:	d110      	bne.n	e1834 <mktime+0xf4>
   e1812:	fb92 f0f6 	sdiv	r0, r2, r6
   e1816:	fb06 2010 	mls	r0, r6, r0, r2
   e181a:	b970      	cbnz	r0, e183a <mktime+0xfa>
   e181c:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   e1820:	fb9c f0f7 	sdiv	r0, ip, r7
   e1824:	fb07 c010 	mls	r0, r7, r0, ip
   e1828:	2800      	cmp	r0, #0
   e182a:	bf14      	ite	ne
   e182c:	4670      	movne	r0, lr
   e182e:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   e1832:	e004      	b.n	e183e <mktime+0xfe>
   e1834:	f240 106d 	movw	r0, #365	; 0x16d
   e1838:	e001      	b.n	e183e <mktime+0xfe>
   e183a:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   e183e:	1a24      	subs	r4, r4, r0
   e1840:	3a01      	subs	r2, #1
   e1842:	e7e2      	b.n	e180a <mktime+0xca>
   e1844:	2b45      	cmp	r3, #69	; 0x45
   e1846:	bfa8      	it	ge
   e1848:	2345      	movge	r3, #69	; 0x45
   e184a:	079e      	lsls	r6, r3, #30
   e184c:	461f      	mov	r7, r3
   e184e:	d114      	bne.n	e187a <mktime+0x13a>
   e1850:	2264      	movs	r2, #100	; 0x64
   e1852:	fb93 f3f2 	sdiv	r3, r3, r2
   e1856:	fb02 7313 	mls	r3, r2, r3, r7
   e185a:	b98b      	cbnz	r3, e1880 <mktime+0x140>
   e185c:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   e1860:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e1864:	fb90 f2f3 	sdiv	r2, r0, r3
   e1868:	fb03 0312 	mls	r3, r3, r2, r0
   e186c:	2b00      	cmp	r3, #0
   e186e:	f240 136d 	movw	r3, #365	; 0x16d
   e1872:	bf08      	it	eq
   e1874:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   e1878:	e004      	b.n	e1884 <mktime+0x144>
   e187a:	f240 136d 	movw	r3, #365	; 0x16d
   e187e:	e001      	b.n	e1884 <mktime+0x144>
   e1880:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   e1884:	1ae4      	subs	r4, r4, r3
   e1886:	4865      	ldr	r0, [pc, #404]	; (e1a1c <mktime+0x2dc>)
   e1888:	fb00 1804 	mla	r8, r0, r4, r1
   e188c:	f001 fe80 	bl	e3590 <__tz_lock>
   e1890:	f001 fe80 	bl	e3594 <_tzset_unlocked>
   e1894:	4b62      	ldr	r3, [pc, #392]	; (e1a20 <mktime+0x2e0>)
   e1896:	681e      	ldr	r6, [r3, #0]
   e1898:	2e00      	cmp	r6, #0
   e189a:	f000 80a4 	beq.w	e19e6 <mktime+0x2a6>
   e189e:	6a2b      	ldr	r3, [r5, #32]
   e18a0:	6968      	ldr	r0, [r5, #20]
   e18a2:	2b01      	cmp	r3, #1
   e18a4:	bfa8      	it	ge
   e18a6:	2301      	movge	r3, #1
   e18a8:	469a      	mov	sl, r3
   e18aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
   e18ae:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e18b2:	4298      	cmp	r0, r3
   e18b4:	d10d      	bne.n	e18d2 <mktime+0x192>
   e18b6:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   e18ba:	f8d9 3020 	ldr.w	r3, [r9, #32]
   e18be:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e18c2:	f8d9 101c 	ldr.w	r1, [r9, #28]
   e18c6:	1ad6      	subs	r6, r2, r3
   e18c8:	45b0      	cmp	r8, r6
   e18ca:	eba1 0100 	sub.w	r1, r1, r0
   e18ce:	da05      	bge.n	e18dc <mktime+0x19c>
   e18d0:	e007      	b.n	e18e2 <mktime+0x1a2>
   e18d2:	f001 fdb5 	bl	e3440 <__tzcalc_limits>
   e18d6:	2800      	cmp	r0, #0
   e18d8:	d1ed      	bne.n	e18b6 <mktime+0x176>
   e18da:	e076      	b.n	e19ca <mktime+0x28a>
   e18dc:	1a12      	subs	r2, r2, r0
   e18de:	4590      	cmp	r8, r2
   e18e0:	db73      	blt.n	e19ca <mktime+0x28a>
   e18e2:	f8d9 2000 	ldr.w	r2, [r9]
   e18e6:	b112      	cbz	r2, e18ee <mktime+0x1ae>
   e18e8:	4588      	cmp	r8, r1
   e18ea:	db77      	blt.n	e19dc <mktime+0x29c>
   e18ec:	e001      	b.n	e18f2 <mktime+0x1b2>
   e18ee:	4588      	cmp	r8, r1
   e18f0:	da07      	bge.n	e1902 <mktime+0x1c2>
   e18f2:	45b0      	cmp	r8, r6
   e18f4:	bfac      	ite	ge
   e18f6:	2600      	movge	r6, #0
   e18f8:	2601      	movlt	r6, #1
   e18fa:	f1ba 0f00 	cmp.w	sl, #0
   e18fe:	da04      	bge.n	e190a <mktime+0x1ca>
   e1900:	e064      	b.n	e19cc <mktime+0x28c>
   e1902:	f1ba 0f00 	cmp.w	sl, #0
   e1906:	db63      	blt.n	e19d0 <mktime+0x290>
   e1908:	2601      	movs	r6, #1
   e190a:	ea8a 0a06 	eor.w	sl, sl, r6
   e190e:	f1ba 0f01 	cmp.w	sl, #1
   e1912:	d15b      	bne.n	e19cc <mktime+0x28c>
   e1914:	1a1b      	subs	r3, r3, r0
   e1916:	b906      	cbnz	r6, e191a <mktime+0x1da>
   e1918:	425b      	negs	r3, r3
   e191a:	682a      	ldr	r2, [r5, #0]
   e191c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   e1920:	441a      	add	r2, r3
   e1922:	602a      	str	r2, [r5, #0]
   e1924:	4628      	mov	r0, r5
   e1926:	4498      	add	r8, r3
   e1928:	f7ff fe2e 	bl	e1588 <validate_structure>
   e192c:	68eb      	ldr	r3, [r5, #12]
   e192e:	ebb3 030a 	subs.w	r3, r3, sl
   e1932:	d04b      	beq.n	e19cc <mktime+0x28c>
   e1934:	2b01      	cmp	r3, #1
   e1936:	dc03      	bgt.n	e1940 <mktime+0x200>
   e1938:	1c98      	adds	r0, r3, #2
   e193a:	bfd8      	it	le
   e193c:	2301      	movle	r3, #1
   e193e:	e001      	b.n	e1944 <mktime+0x204>
   e1940:	f04f 33ff 	mov.w	r3, #4294967295
   e1944:	69ea      	ldr	r2, [r5, #28]
   e1946:	441c      	add	r4, r3
   e1948:	189b      	adds	r3, r3, r2
   e194a:	d51d      	bpl.n	e1988 <mktime+0x248>
   e194c:	1e7b      	subs	r3, r7, #1
   e194e:	0799      	lsls	r1, r3, #30
   e1950:	d114      	bne.n	e197c <mktime+0x23c>
   e1952:	2164      	movs	r1, #100	; 0x64
   e1954:	fb93 f2f1 	sdiv	r2, r3, r1
   e1958:	fb01 3312 	mls	r3, r1, r2, r3
   e195c:	b98b      	cbnz	r3, e1982 <mktime+0x242>
   e195e:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   e1962:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e1966:	fb97 f3f2 	sdiv	r3, r7, r2
   e196a:	fb02 7713 	mls	r7, r2, r3, r7
   e196e:	2f00      	cmp	r7, #0
   e1970:	f240 136d 	movw	r3, #365	; 0x16d
   e1974:	bf18      	it	ne
   e1976:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   e197a:	e024      	b.n	e19c6 <mktime+0x286>
   e197c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   e1980:	e021      	b.n	e19c6 <mktime+0x286>
   e1982:	f240 136d 	movw	r3, #365	; 0x16d
   e1986:	e01e      	b.n	e19c6 <mktime+0x286>
   e1988:	07ba      	lsls	r2, r7, #30
   e198a:	d114      	bne.n	e19b6 <mktime+0x276>
   e198c:	2164      	movs	r1, #100	; 0x64
   e198e:	fb97 f2f1 	sdiv	r2, r7, r1
   e1992:	fb01 7212 	mls	r2, r1, r2, r7
   e1996:	b98a      	cbnz	r2, e19bc <mktime+0x27c>
   e1998:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   e199c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e19a0:	fb97 f2f1 	sdiv	r2, r7, r1
   e19a4:	fb01 7712 	mls	r7, r1, r2, r7
   e19a8:	2f00      	cmp	r7, #0
   e19aa:	f240 126d 	movw	r2, #365	; 0x16d
   e19ae:	bf08      	it	eq
   e19b0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   e19b4:	e004      	b.n	e19c0 <mktime+0x280>
   e19b6:	f240 126d 	movw	r2, #365	; 0x16d
   e19ba:	e001      	b.n	e19c0 <mktime+0x280>
   e19bc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   e19c0:	429a      	cmp	r2, r3
   e19c2:	bfd8      	it	le
   e19c4:	1a9b      	suble	r3, r3, r2
   e19c6:	61eb      	str	r3, [r5, #28]
   e19c8:	e000      	b.n	e19cc <mktime+0x28c>
   e19ca:	4656      	mov	r6, sl
   e19cc:	2e01      	cmp	r6, #1
   e19ce:	d10a      	bne.n	e19e6 <mktime+0x2a6>
   e19d0:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   e19d4:	2601      	movs	r6, #1
   e19d6:	eb08 0700 	add.w	r7, r8, r0
   e19da:	e008      	b.n	e19ee <mktime+0x2ae>
   e19dc:	f1ba 0f00 	cmp.w	sl, #0
   e19e0:	f04f 0600 	mov.w	r6, #0
   e19e4:	da91      	bge.n	e190a <mktime+0x1ca>
   e19e6:	f8d9 0020 	ldr.w	r0, [r9, #32]
   e19ea:	eb08 0700 	add.w	r7, r8, r0
   e19ee:	f001 fdd0 	bl	e3592 <__tz_unlock>
   e19f2:	3404      	adds	r4, #4
   e19f4:	2307      	movs	r3, #7
   e19f6:	fb94 f3f3 	sdiv	r3, r4, r3
   e19fa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e19fe:	1ae4      	subs	r4, r4, r3
   e1a00:	bf48      	it	mi
   e1a02:	3407      	addmi	r4, #7
   e1a04:	622e      	str	r6, [r5, #32]
   e1a06:	61ac      	str	r4, [r5, #24]
   e1a08:	4638      	mov	r0, r7
   e1a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1a0e:	f04f 30ff 	mov.w	r0, #4294967295
   e1a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e1a16:	bf00      	nop
   e1a18:	000e5e0c 	.word	0x000e5e0c
   e1a1c:	00015180 	.word	0x00015180
   e1a20:	2003e7e4 	.word	0x2003e7e4

000e1a24 <srand>:
   e1a24:	b538      	push	{r3, r4, r5, lr}
   e1a26:	4b12      	ldr	r3, [pc, #72]	; (e1a70 <srand+0x4c>)
   e1a28:	681c      	ldr	r4, [r3, #0]
   e1a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e1a2c:	4605      	mov	r5, r0
   e1a2e:	b9d3      	cbnz	r3, e1a66 <srand+0x42>
   e1a30:	2018      	movs	r0, #24
   e1a32:	f7fa f88b 	bl	dbb4c <malloc>
   e1a36:	f243 330e 	movw	r3, #13070	; 0x330e
   e1a3a:	63a0      	str	r0, [r4, #56]	; 0x38
   e1a3c:	8003      	strh	r3, [r0, #0]
   e1a3e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e1a42:	8043      	strh	r3, [r0, #2]
   e1a44:	f241 2334 	movw	r3, #4660	; 0x1234
   e1a48:	8083      	strh	r3, [r0, #4]
   e1a4a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e1a4e:	80c3      	strh	r3, [r0, #6]
   e1a50:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e1a54:	8103      	strh	r3, [r0, #8]
   e1a56:	2305      	movs	r3, #5
   e1a58:	8143      	strh	r3, [r0, #10]
   e1a5a:	230b      	movs	r3, #11
   e1a5c:	8183      	strh	r3, [r0, #12]
   e1a5e:	2201      	movs	r2, #1
   e1a60:	2300      	movs	r3, #0
   e1a62:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e1a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e1a68:	2200      	movs	r2, #0
   e1a6a:	611d      	str	r5, [r3, #16]
   e1a6c:	615a      	str	r2, [r3, #20]
   e1a6e:	bd38      	pop	{r3, r4, r5, pc}
   e1a70:	2003bb80 	.word	0x2003bb80

000e1a74 <strchr>:
   e1a74:	b2c9      	uxtb	r1, r1
   e1a76:	4603      	mov	r3, r0
   e1a78:	f810 2b01 	ldrb.w	r2, [r0], #1
   e1a7c:	b11a      	cbz	r2, e1a86 <strchr+0x12>
   e1a7e:	4291      	cmp	r1, r2
   e1a80:	d1f9      	bne.n	e1a76 <strchr+0x2>
   e1a82:	4618      	mov	r0, r3
   e1a84:	4770      	bx	lr
   e1a86:	2900      	cmp	r1, #0
   e1a88:	bf0c      	ite	eq
   e1a8a:	4618      	moveq	r0, r3
   e1a8c:	2000      	movne	r0, #0
   e1a8e:	4770      	bx	lr

000e1a90 <strcmp>:
   e1a90:	f810 2b01 	ldrb.w	r2, [r0], #1
   e1a94:	f811 3b01 	ldrb.w	r3, [r1], #1
   e1a98:	2a01      	cmp	r2, #1
   e1a9a:	bf28      	it	cs
   e1a9c:	429a      	cmpcs	r2, r3
   e1a9e:	d0f7      	beq.n	e1a90 <strcmp>
   e1aa0:	1ad0      	subs	r0, r2, r3
   e1aa2:	4770      	bx	lr

000e1aa4 <strcpy>:
   e1aa4:	4603      	mov	r3, r0
   e1aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
   e1aaa:	f803 2b01 	strb.w	r2, [r3], #1
   e1aae:	2a00      	cmp	r2, #0
   e1ab0:	d1f9      	bne.n	e1aa6 <strcpy+0x2>
   e1ab2:	4770      	bx	lr

000e1ab4 <strdup>:
   e1ab4:	4b02      	ldr	r3, [pc, #8]	; (e1ac0 <strdup+0xc>)
   e1ab6:	4601      	mov	r1, r0
   e1ab8:	6818      	ldr	r0, [r3, #0]
   e1aba:	f000 b803 	b.w	e1ac4 <_strdup_r>
   e1abe:	bf00      	nop
   e1ac0:	2003bb80 	.word	0x2003bb80

000e1ac4 <_strdup_r>:
   e1ac4:	b570      	push	{r4, r5, r6, lr}
   e1ac6:	4606      	mov	r6, r0
   e1ac8:	4608      	mov	r0, r1
   e1aca:	460c      	mov	r4, r1
   e1acc:	f000 fd22 	bl	e2514 <strlen>
   e1ad0:	1c45      	adds	r5, r0, #1
   e1ad2:	4629      	mov	r1, r5
   e1ad4:	4630      	mov	r0, r6
   e1ad6:	f7fa f889 	bl	dbbec <_malloc_r>
   e1ada:	4606      	mov	r6, r0
   e1adc:	b118      	cbz	r0, e1ae6 <_strdup_r+0x22>
   e1ade:	462a      	mov	r2, r5
   e1ae0:	4621      	mov	r1, r4
   e1ae2:	f7ff fd3e 	bl	e1562 <memcpy>
   e1ae6:	4630      	mov	r0, r6
   e1ae8:	bd70      	pop	{r4, r5, r6, pc}

000e1aea <iso_year_adjust>:
   e1aea:	6941      	ldr	r1, [r0, #20]
   e1aec:	078b      	lsls	r3, r1, #30
   e1aee:	b510      	push	{r4, lr}
   e1af0:	d10c      	bne.n	e1b0c <iso_year_adjust+0x22>
   e1af2:	2900      	cmp	r1, #0
   e1af4:	f240 736c 	movw	r3, #1900	; 0x76c
   e1af8:	bfa8      	it	ge
   e1afa:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e1afe:	440b      	add	r3, r1
   e1b00:	2464      	movs	r4, #100	; 0x64
   e1b02:	fb93 f2f4 	sdiv	r2, r3, r4
   e1b06:	fb04 3312 	mls	r3, r4, r2, r3
   e1b0a:	b983      	cbnz	r3, e1b2e <iso_year_adjust+0x44>
   e1b0c:	2900      	cmp	r1, #0
   e1b0e:	f240 736c 	movw	r3, #1900	; 0x76c
   e1b12:	bfa8      	it	ge
   e1b14:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   e1b18:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e1b1c:	440b      	add	r3, r1
   e1b1e:	fb93 f1f2 	sdiv	r1, r3, r2
   e1b22:	fb02 3311 	mls	r3, r2, r1, r3
   e1b26:	fab3 f283 	clz	r2, r3
   e1b2a:	0952      	lsrs	r2, r2, #5
   e1b2c:	e000      	b.n	e1b30 <iso_year_adjust+0x46>
   e1b2e:	2201      	movs	r2, #1
   e1b30:	6983      	ldr	r3, [r0, #24]
   e1b32:	69c1      	ldr	r1, [r0, #28]
   e1b34:	005b      	lsls	r3, r3, #1
   e1b36:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   e1b3a:	4413      	add	r3, r2
   e1b3c:	2b21      	cmp	r3, #33	; 0x21
   e1b3e:	dc0e      	bgt.n	e1b5e <iso_year_adjust+0x74>
   e1b40:	2b20      	cmp	r3, #32
   e1b42:	da2f      	bge.n	e1ba4 <iso_year_adjust+0xba>
   e1b44:	2b0d      	cmp	r3, #13
   e1b46:	dc02      	bgt.n	e1b4e <iso_year_adjust+0x64>
   e1b48:	2b0a      	cmp	r3, #10
   e1b4a:	db05      	blt.n	e1b58 <iso_year_adjust+0x6e>
   e1b4c:	e02a      	b.n	e1ba4 <iso_year_adjust+0xba>
   e1b4e:	2b10      	cmp	r3, #16
   e1b50:	db26      	blt.n	e1ba0 <iso_year_adjust+0xb6>
   e1b52:	2b11      	cmp	r3, #17
   e1b54:	dd26      	ble.n	e1ba4 <iso_year_adjust+0xba>
   e1b56:	3b1c      	subs	r3, #28
   e1b58:	2b01      	cmp	r3, #1
   e1b5a:	d923      	bls.n	e1ba4 <iso_year_adjust+0xba>
   e1b5c:	e020      	b.n	e1ba0 <iso_year_adjust+0xb6>
   e1b5e:	f241 62c6 	movw	r2, #5830	; 0x16c6
   e1b62:	4293      	cmp	r3, r2
   e1b64:	dc0e      	bgt.n	e1b84 <iso_year_adjust+0x9a>
   e1b66:	f241 62c2 	movw	r2, #5826	; 0x16c2
   e1b6a:	4293      	cmp	r3, r2
   e1b6c:	da16      	bge.n	e1b9c <iso_year_adjust+0xb2>
   e1b6e:	f241 62a2 	movw	r2, #5794	; 0x16a2
   e1b72:	4293      	cmp	r3, r2
   e1b74:	d012      	beq.n	e1b9c <iso_year_adjust+0xb2>
   e1b76:	db13      	blt.n	e1ba0 <iso_year_adjust+0xb6>
   e1b78:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   e1b7c:	3b12      	subs	r3, #18
   e1b7e:	2b02      	cmp	r3, #2
   e1b80:	d90c      	bls.n	e1b9c <iso_year_adjust+0xb2>
   e1b82:	e00d      	b.n	e1ba0 <iso_year_adjust+0xb6>
   e1b84:	f241 62d5 	movw	r2, #5845	; 0x16d5
   e1b88:	4293      	cmp	r3, r2
   e1b8a:	d007      	beq.n	e1b9c <iso_year_adjust+0xb2>
   e1b8c:	f241 62d7 	movw	r2, #5847	; 0x16d7
   e1b90:	4293      	cmp	r3, r2
   e1b92:	d003      	beq.n	e1b9c <iso_year_adjust+0xb2>
   e1b94:	f241 62d3 	movw	r2, #5843	; 0x16d3
   e1b98:	4293      	cmp	r3, r2
   e1b9a:	d101      	bne.n	e1ba0 <iso_year_adjust+0xb6>
   e1b9c:	2001      	movs	r0, #1
   e1b9e:	bd10      	pop	{r4, pc}
   e1ba0:	2000      	movs	r0, #0
   e1ba2:	bd10      	pop	{r4, pc}
   e1ba4:	f04f 30ff 	mov.w	r0, #4294967295
   e1ba8:	bd10      	pop	{r4, pc}
	...

000e1bac <strftime>:
   e1bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1bb0:	b093      	sub	sp, #76	; 0x4c
   e1bb2:	460e      	mov	r6, r1
   e1bb4:	461d      	mov	r5, r3
   e1bb6:	4607      	mov	r7, r0
   e1bb8:	4691      	mov	r9, r2
   e1bba:	f001 fc31 	bl	e3420 <__get_current_time_locale>
   e1bbe:	2300      	movs	r3, #0
   e1bc0:	9306      	str	r3, [sp, #24]
   e1bc2:	461c      	mov	r4, r3
   e1bc4:	1e73      	subs	r3, r6, #1
   e1bc6:	9003      	str	r0, [sp, #12]
   e1bc8:	9302      	str	r3, [sp, #8]
   e1bca:	f899 3000 	ldrb.w	r3, [r9]
   e1bce:	2b00      	cmp	r3, #0
   e1bd0:	f000 8492 	beq.w	e24f8 <strftime+0x94c>
   e1bd4:	2b25      	cmp	r3, #37	; 0x25
   e1bd6:	d008      	beq.n	e1bea <strftime+0x3e>
   e1bd8:	9a02      	ldr	r2, [sp, #8]
   e1bda:	4294      	cmp	r4, r2
   e1bdc:	f080 8490 	bcs.w	e2500 <strftime+0x954>
   e1be0:	553b      	strb	r3, [r7, r4]
   e1be2:	f109 0901 	add.w	r9, r9, #1
   e1be6:	3401      	adds	r4, #1
   e1be8:	e7ef      	b.n	e1bca <strftime+0x1e>
   e1bea:	f899 a001 	ldrb.w	sl, [r9, #1]
   e1bee:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   e1bf2:	d007      	beq.n	e1c04 <strftime+0x58>
   e1bf4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e1bf8:	d004      	beq.n	e1c04 <strftime+0x58>
   e1bfa:	f109 0901 	add.w	r9, r9, #1
   e1bfe:	f04f 0a00 	mov.w	sl, #0
   e1c02:	e001      	b.n	e1c08 <strftime+0x5c>
   e1c04:	f109 0902 	add.w	r9, r9, #2
   e1c08:	f899 3000 	ldrb.w	r3, [r9]
   e1c0c:	3b31      	subs	r3, #49	; 0x31
   e1c0e:	2b08      	cmp	r3, #8
   e1c10:	d808      	bhi.n	e1c24 <strftime+0x78>
   e1c12:	4648      	mov	r0, r9
   e1c14:	220a      	movs	r2, #10
   e1c16:	a90a      	add	r1, sp, #40	; 0x28
   e1c18:	f001 fbf8 	bl	e340c <strtoul>
   e1c1c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   e1c20:	4680      	mov	r8, r0
   e1c22:	e001      	b.n	e1c28 <strftime+0x7c>
   e1c24:	f04f 0800 	mov.w	r8, #0
   e1c28:	f899 3000 	ldrb.w	r3, [r9]
   e1c2c:	2b45      	cmp	r3, #69	; 0x45
   e1c2e:	d001      	beq.n	e1c34 <strftime+0x88>
   e1c30:	2b4f      	cmp	r3, #79	; 0x4f
   e1c32:	d101      	bne.n	e1c38 <strftime+0x8c>
   e1c34:	f109 0901 	add.w	r9, r9, #1
   e1c38:	f899 0000 	ldrb.w	r0, [r9]
   e1c3c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   e1c40:	2b55      	cmp	r3, #85	; 0x55
   e1c42:	f200 845d 	bhi.w	e2500 <strftime+0x954>
   e1c46:	e8df f013 	tbh	[pc, r3, lsl #1]
   e1c4a:	044a      	.short	0x044a
   e1c4c:	045b045b 	.word	0x045b045b
   e1c50:	045b045b 	.word	0x045b045b
   e1c54:	045b045b 	.word	0x045b045b
   e1c58:	045b045b 	.word	0x045b045b
   e1c5c:	045b045b 	.word	0x045b045b
   e1c60:	045b045b 	.word	0x045b045b
   e1c64:	045b045b 	.word	0x045b045b
   e1c68:	045b045b 	.word	0x045b045b
   e1c6c:	045b045b 	.word	0x045b045b
   e1c70:	045b045b 	.word	0x045b045b
   e1c74:	045b045b 	.word	0x045b045b
   e1c78:	045b045b 	.word	0x045b045b
   e1c7c:	045b045b 	.word	0x045b045b
   e1c80:	006f045b 	.word	0x006f045b
   e1c84:	00d400a1 	.word	0x00d400a1
   e1c88:	045b011a 	.word	0x045b011a
   e1c8c:	01a0013f 	.word	0x01a0013f
   e1c90:	022d0226 	.word	0x022d0226
   e1c94:	045b045b 	.word	0x045b045b
   e1c98:	0260045b 	.word	0x0260045b
   e1c9c:	045b045b 	.word	0x045b045b
   e1ca0:	045b0268 	.word	0x045b0268
   e1ca4:	031d0297 	.word	0x031d0297
   e1ca8:	033b0325 	.word	0x033b0325
   e1cac:	03860343 	.word	0x03860343
   e1cb0:	03a000c6 	.word	0x03a000c6
   e1cb4:	045b041f 	.word	0x045b041f
   e1cb8:	045b045b 	.word	0x045b045b
   e1cbc:	045b045b 	.word	0x045b045b
   e1cc0:	0056045b 	.word	0x0056045b
   e1cc4:	00ba0089 	.word	0x00ba0089
   e1cc8:	010c010c 	.word	0x010c010c
   e1ccc:	0171045b 	.word	0x0171045b
   e1cd0:	045b0089 	.word	0x045b0089
   e1cd4:	0226023d 	.word	0x0226023d
   e1cd8:	025d022d 	.word	0x025d022d
   e1cdc:	045b0262 	.word	0x045b0262
   e1ce0:	045b0268 	.word	0x045b0268
   e1ce4:	029c00be 	.word	0x029c00be
   e1ce8:	032e031f 	.word	0x032e031f
   e1cec:	037f045b 	.word	0x037f045b
   e1cf0:	039200c2 	.word	0x039200c2
   e1cf4:	03e7      	.short	0x03e7
   e1cf6:	69ab      	ldr	r3, [r5, #24]
   e1cf8:	9a03      	ldr	r2, [sp, #12]
   e1cfa:	3318      	adds	r3, #24
   e1cfc:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e1d00:	4640      	mov	r0, r8
   e1d02:	f000 fc07 	bl	e2514 <strlen>
   e1d06:	f108 38ff 	add.w	r8, r8, #4294967295
   e1d0a:	193b      	adds	r3, r7, r4
   e1d0c:	4420      	add	r0, r4
   e1d0e:	4284      	cmp	r4, r0
   e1d10:	f000 83eb 	beq.w	e24ea <strftime+0x93e>
   e1d14:	9a02      	ldr	r2, [sp, #8]
   e1d16:	4294      	cmp	r4, r2
   e1d18:	f080 83f2 	bcs.w	e2500 <strftime+0x954>
   e1d1c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e1d20:	f803 2b01 	strb.w	r2, [r3], #1
   e1d24:	3401      	adds	r4, #1
   e1d26:	e7f2      	b.n	e1d0e <strftime+0x162>
   e1d28:	69ab      	ldr	r3, [r5, #24]
   e1d2a:	9a03      	ldr	r2, [sp, #12]
   e1d2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e1d30:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   e1d34:	4640      	mov	r0, r8
   e1d36:	f000 fbed 	bl	e2514 <strlen>
   e1d3a:	f108 38ff 	add.w	r8, r8, #4294967295
   e1d3e:	193b      	adds	r3, r7, r4
   e1d40:	4420      	add	r0, r4
   e1d42:	4284      	cmp	r4, r0
   e1d44:	f000 83d1 	beq.w	e24ea <strftime+0x93e>
   e1d48:	9a02      	ldr	r2, [sp, #8]
   e1d4a:	4294      	cmp	r4, r2
   e1d4c:	f080 83d8 	bcs.w	e2500 <strftime+0x954>
   e1d50:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e1d54:	f803 2b01 	strb.w	r2, [r3], #1
   e1d58:	3401      	adds	r4, #1
   e1d5a:	e7f2      	b.n	e1d42 <strftime+0x196>
   e1d5c:	692b      	ldr	r3, [r5, #16]
   e1d5e:	9a03      	ldr	r2, [sp, #12]
   e1d60:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e1d64:	4640      	mov	r0, r8
   e1d66:	f000 fbd5 	bl	e2514 <strlen>
   e1d6a:	f108 38ff 	add.w	r8, r8, #4294967295
   e1d6e:	193b      	adds	r3, r7, r4
   e1d70:	4420      	add	r0, r4
   e1d72:	4284      	cmp	r4, r0
   e1d74:	f000 83b9 	beq.w	e24ea <strftime+0x93e>
   e1d78:	9a02      	ldr	r2, [sp, #8]
   e1d7a:	4294      	cmp	r4, r2
   e1d7c:	f080 83c0 	bcs.w	e2500 <strftime+0x954>
   e1d80:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e1d84:	f803 2b01 	strb.w	r2, [r3], #1
   e1d88:	3401      	adds	r4, #1
   e1d8a:	e7f2      	b.n	e1d72 <strftime+0x1c6>
   e1d8c:	692b      	ldr	r3, [r5, #16]
   e1d8e:	9a03      	ldr	r2, [sp, #12]
   e1d90:	330c      	adds	r3, #12
   e1d92:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e1d96:	4640      	mov	r0, r8
   e1d98:	f000 fbbc 	bl	e2514 <strlen>
   e1d9c:	f108 38ff 	add.w	r8, r8, #4294967295
   e1da0:	193b      	adds	r3, r7, r4
   e1da2:	4420      	add	r0, r4
   e1da4:	4284      	cmp	r4, r0
   e1da6:	f000 83a0 	beq.w	e24ea <strftime+0x93e>
   e1daa:	9a02      	ldr	r2, [sp, #8]
   e1dac:	4294      	cmp	r4, r2
   e1dae:	f080 83a7 	bcs.w	e2500 <strftime+0x954>
   e1db2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e1db6:	f803 2b01 	strb.w	r2, [r3], #1
   e1dba:	3401      	adds	r4, #1
   e1dbc:	e7f2      	b.n	e1da4 <strftime+0x1f8>
   e1dbe:	9b03      	ldr	r3, [sp, #12]
   e1dc0:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   e1dc4:	e00a      	b.n	e1ddc <strftime+0x230>
   e1dc6:	9b03      	ldr	r3, [sp, #12]
   e1dc8:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   e1dcc:	e006      	b.n	e1ddc <strftime+0x230>
   e1dce:	9b03      	ldr	r3, [sp, #12]
   e1dd0:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   e1dd4:	e002      	b.n	e1ddc <strftime+0x230>
   e1dd6:	9b03      	ldr	r3, [sp, #12]
   e1dd8:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   e1ddc:	4640      	mov	r0, r8
   e1dde:	f000 fb99 	bl	e2514 <strlen>
   e1de2:	f898 3000 	ldrb.w	r3, [r8]
   e1de6:	2b00      	cmp	r3, #0
   e1de8:	f000 837f 	beq.w	e24ea <strftime+0x93e>
   e1dec:	462b      	mov	r3, r5
   e1dee:	4642      	mov	r2, r8
   e1df0:	e093      	b.n	e1f1a <strftime+0x36e>
   e1df2:	49b6      	ldr	r1, [pc, #728]	; (e20cc <strftime+0x520>)
   e1df4:	f8d5 b014 	ldr.w	fp, [r5, #20]
   e1df8:	458b      	cmp	fp, r1
   e1dfa:	bfac      	ite	ge
   e1dfc:	2100      	movge	r1, #0
   e1dfe:	2101      	movlt	r1, #1
   e1e00:	f1bb 0f00 	cmp.w	fp, #0
   e1e04:	db04      	blt.n	e1e10 <strftime+0x264>
   e1e06:	2064      	movs	r0, #100	; 0x64
   e1e08:	fb9b f0f0 	sdiv	r0, fp, r0
   e1e0c:	3013      	adds	r0, #19
   e1e0e:	e008      	b.n	e1e22 <strftime+0x276>
   e1e10:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   e1e14:	9107      	str	r1, [sp, #28]
   e1e16:	f001 fd43 	bl	e38a0 <abs>
   e1e1a:	9907      	ldr	r1, [sp, #28]
   e1e1c:	2364      	movs	r3, #100	; 0x64
   e1e1e:	fb90 f0f3 	sdiv	r0, r0, r3
   e1e22:	f1ba 0f00 	cmp.w	sl, #0
   e1e26:	d008      	beq.n	e1e3a <strftime+0x28e>
   e1e28:	2863      	cmp	r0, #99	; 0x63
   e1e2a:	dd09      	ble.n	e1e40 <strftime+0x294>
   e1e2c:	4ba8      	ldr	r3, [pc, #672]	; (e20d0 <strftime+0x524>)
   e1e2e:	4aa9      	ldr	r2, [pc, #676]	; (e20d4 <strftime+0x528>)
   e1e30:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e1e34:	bf18      	it	ne
   e1e36:	4613      	movne	r3, r2
   e1e38:	e003      	b.n	e1e42 <strftime+0x296>
   e1e3a:	4ba6      	ldr	r3, [pc, #664]	; (e20d4 <strftime+0x528>)
   e1e3c:	4aa6      	ldr	r2, [pc, #664]	; (e20d8 <strftime+0x52c>)
   e1e3e:	e001      	b.n	e1e44 <strftime+0x298>
   e1e40:	4ba4      	ldr	r3, [pc, #656]	; (e20d4 <strftime+0x528>)
   e1e42:	4aa6      	ldr	r2, [pc, #664]	; (e20dc <strftime+0x530>)
   e1e44:	9001      	str	r0, [sp, #4]
   e1e46:	f1b8 0f01 	cmp.w	r8, #1
   e1e4a:	bf98      	it	ls
   e1e4c:	f04f 0802 	movls.w	r8, #2
   e1e50:	ebc1 0108 	rsb	r1, r1, r8
   e1e54:	9100      	str	r1, [sp, #0]
   e1e56:	489d      	ldr	r0, [pc, #628]	; (e20cc <strftime+0x520>)
   e1e58:	49a1      	ldr	r1, [pc, #644]	; (e20e0 <strftime+0x534>)
   e1e5a:	4583      	cmp	fp, r0
   e1e5c:	bfb8      	it	lt
   e1e5e:	460b      	movlt	r3, r1
   e1e60:	e21e      	b.n	e22a0 <strftime+0x6f4>
   e1e62:	4aa0      	ldr	r2, [pc, #640]	; (e20e4 <strftime+0x538>)
   e1e64:	49a0      	ldr	r1, [pc, #640]	; (e20e8 <strftime+0x53c>)
   e1e66:	68eb      	ldr	r3, [r5, #12]
   e1e68:	2864      	cmp	r0, #100	; 0x64
   e1e6a:	bf08      	it	eq
   e1e6c:	460a      	moveq	r2, r1
   e1e6e:	1b31      	subs	r1, r6, r4
   e1e70:	1938      	adds	r0, r7, r4
   e1e72:	f7f9 fea3 	bl	dbbbc <sniprintf>
   e1e76:	2800      	cmp	r0, #0
   e1e78:	f280 8302 	bge.w	e2480 <strftime+0x8d4>
   e1e7c:	e340      	b.n	e2500 <strftime+0x954>
   e1e7e:	6968      	ldr	r0, [r5, #20]
   e1e80:	692b      	ldr	r3, [r5, #16]
   e1e82:	2800      	cmp	r0, #0
   e1e84:	f103 0b01 	add.w	fp, r3, #1
   e1e88:	eb07 0804 	add.w	r8, r7, r4
   e1e8c:	ebc4 0a06 	rsb	sl, r4, r6
   e1e90:	68eb      	ldr	r3, [r5, #12]
   e1e92:	db05      	blt.n	e1ea0 <strftime+0x2f4>
   e1e94:	2264      	movs	r2, #100	; 0x64
   e1e96:	fb90 f1f2 	sdiv	r1, r0, r2
   e1e9a:	fb02 0011 	mls	r0, r2, r1, r0
   e1e9e:	e00a      	b.n	e1eb6 <strftime+0x30a>
   e1ea0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e1ea4:	9307      	str	r3, [sp, #28]
   e1ea6:	f001 fcfb 	bl	e38a0 <abs>
   e1eaa:	2264      	movs	r2, #100	; 0x64
   e1eac:	9b07      	ldr	r3, [sp, #28]
   e1eae:	fb90 f1f2 	sdiv	r1, r0, r2
   e1eb2:	fb01 0012 	mls	r0, r1, r2, r0
   e1eb6:	4a8d      	ldr	r2, [pc, #564]	; (e20ec <strftime+0x540>)
   e1eb8:	9001      	str	r0, [sp, #4]
   e1eba:	9300      	str	r3, [sp, #0]
   e1ebc:	4651      	mov	r1, sl
   e1ebe:	465b      	mov	r3, fp
   e1ec0:	4640      	mov	r0, r8
   e1ec2:	f7f9 fe7b 	bl	dbbbc <sniprintf>
   e1ec6:	e7d6      	b.n	e1e76 <strftime+0x2ca>
   e1ec8:	2325      	movs	r3, #37	; 0x25
   e1eca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e1ece:	f1ba 0f00 	cmp.w	sl, #0
   e1ed2:	d007      	beq.n	e1ee4 <strftime+0x338>
   e1ed4:	f1b8 0f05 	cmp.w	r8, #5
   e1ed8:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   e1edc:	bf98      	it	ls
   e1ede:	f04f 0806 	movls.w	r8, #6
   e1ee2:	e004      	b.n	e1eee <strftime+0x342>
   e1ee4:	232b      	movs	r3, #43	; 0x2b
   e1ee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   e1eea:	f04f 080a 	mov.w	r8, #10
   e1eee:	f1b8 0306 	subs.w	r3, r8, #6
   e1ef2:	d102      	bne.n	e1efa <strftime+0x34e>
   e1ef4:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e1ef8:	e00a      	b.n	e1f10 <strftime+0x364>
   e1efa:	4a7d      	ldr	r2, [pc, #500]	; (e20f0 <strftime+0x544>)
   e1efc:	211e      	movs	r1, #30
   e1efe:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   e1f02:	f7f9 fe5b 	bl	dbbbc <sniprintf>
   e1f06:	2800      	cmp	r0, #0
   e1f08:	ddf4      	ble.n	e1ef4 <strftime+0x348>
   e1f0a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   e1f0e:	4418      	add	r0, r3
   e1f10:	4978      	ldr	r1, [pc, #480]	; (e20f4 <strftime+0x548>)
   e1f12:	f7ff fdc7 	bl	e1aa4 <strcpy>
   e1f16:	462b      	mov	r3, r5
   e1f18:	aa0a      	add	r2, sp, #40	; 0x28
   e1f1a:	1b31      	subs	r1, r6, r4
   e1f1c:	1938      	adds	r0, r7, r4
   e1f1e:	f7ff fe45 	bl	e1bac <strftime>
   e1f22:	2800      	cmp	r0, #0
   e1f24:	f340 82ec 	ble.w	e2500 <strftime+0x954>
   e1f28:	4404      	add	r4, r0
   e1f2a:	e2de      	b.n	e24ea <strftime+0x93e>
   e1f2c:	4628      	mov	r0, r5
   e1f2e:	f7ff fddc 	bl	e1aea <iso_year_adjust>
   e1f32:	4680      	mov	r8, r0
   e1f34:	6968      	ldr	r0, [r5, #20]
   e1f36:	2800      	cmp	r0, #0
   e1f38:	db05      	blt.n	e1f46 <strftime+0x39a>
   e1f3a:	2264      	movs	r2, #100	; 0x64
   e1f3c:	fb90 f1f2 	sdiv	r1, r0, r2
   e1f40:	fb02 0011 	mls	r0, r2, r1, r0
   e1f44:	e008      	b.n	e1f58 <strftime+0x3ac>
   e1f46:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e1f4a:	f001 fca9 	bl	e38a0 <abs>
   e1f4e:	2264      	movs	r2, #100	; 0x64
   e1f50:	fb90 f3f2 	sdiv	r3, r0, r2
   e1f54:	fb03 0012 	mls	r0, r3, r2, r0
   e1f58:	f1b8 0f00 	cmp.w	r8, #0
   e1f5c:	da06      	bge.n	e1f6c <strftime+0x3c0>
   e1f5e:	696a      	ldr	r2, [r5, #20]
   e1f60:	4b65      	ldr	r3, [pc, #404]	; (e20f8 <strftime+0x54c>)
   e1f62:	429a      	cmp	r2, r3
   e1f64:	bfb8      	it	lt
   e1f66:	f04f 0801 	movlt.w	r8, #1
   e1f6a:	e006      	b.n	e1f7a <strftime+0x3ce>
   e1f6c:	d005      	beq.n	e1f7a <strftime+0x3ce>
   e1f6e:	696a      	ldr	r2, [r5, #20]
   e1f70:	4b56      	ldr	r3, [pc, #344]	; (e20cc <strftime+0x520>)
   e1f72:	429a      	cmp	r2, r3
   e1f74:	bfb8      	it	lt
   e1f76:	f04f 38ff 	movlt.w	r8, #4294967295
   e1f7a:	2364      	movs	r3, #100	; 0x64
   e1f7c:	4440      	add	r0, r8
   e1f7e:	fb90 f2f3 	sdiv	r2, r0, r3
   e1f82:	fb03 0012 	mls	r0, r3, r2, r0
   e1f86:	4418      	add	r0, r3
   e1f88:	e1f9      	b.n	e237e <strftime+0x7d2>
   e1f8a:	4b50      	ldr	r3, [pc, #320]	; (e20cc <strftime+0x520>)
   e1f8c:	6969      	ldr	r1, [r5, #20]
   e1f8e:	9108      	str	r1, [sp, #32]
   e1f90:	4299      	cmp	r1, r3
   e1f92:	bfac      	ite	ge
   e1f94:	2300      	movge	r3, #0
   e1f96:	2301      	movlt	r3, #1
   e1f98:	4628      	mov	r0, r5
   e1f9a:	9307      	str	r3, [sp, #28]
   e1f9c:	f7ff fda5 	bl	e1aea <iso_year_adjust>
   e1fa0:	9908      	ldr	r1, [sp, #32]
   e1fa2:	2900      	cmp	r1, #0
   e1fa4:	4683      	mov	fp, r0
   e1fa6:	db04      	blt.n	e1fb2 <strftime+0x406>
   e1fa8:	2364      	movs	r3, #100	; 0x64
   e1faa:	fb91 f3f3 	sdiv	r3, r1, r3
   e1fae:	3313      	adds	r3, #19
   e1fb0:	e008      	b.n	e1fc4 <strftime+0x418>
   e1fb2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   e1fb6:	9108      	str	r1, [sp, #32]
   e1fb8:	f001 fc72 	bl	e38a0 <abs>
   e1fbc:	9908      	ldr	r1, [sp, #32]
   e1fbe:	2364      	movs	r3, #100	; 0x64
   e1fc0:	fb90 f3f3 	sdiv	r3, r0, r3
   e1fc4:	6968      	ldr	r0, [r5, #20]
   e1fc6:	2800      	cmp	r0, #0
   e1fc8:	db06      	blt.n	e1fd8 <strftime+0x42c>
   e1fca:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e1fce:	fb90 fcfe 	sdiv	ip, r0, lr
   e1fd2:	fb0e 001c 	mls	r0, lr, ip, r0
   e1fd6:	e00d      	b.n	e1ff4 <strftime+0x448>
   e1fd8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e1fdc:	9109      	str	r1, [sp, #36]	; 0x24
   e1fde:	9308      	str	r3, [sp, #32]
   e1fe0:	f001 fc5e 	bl	e38a0 <abs>
   e1fe4:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e1fe8:	9909      	ldr	r1, [sp, #36]	; 0x24
   e1fea:	9b08      	ldr	r3, [sp, #32]
   e1fec:	fb90 fcfe 	sdiv	ip, r0, lr
   e1ff0:	fb0c 001e 	mls	r0, ip, lr, r0
   e1ff4:	f1bb 0f00 	cmp.w	fp, #0
   e1ff8:	da08      	bge.n	e200c <strftime+0x460>
   e1ffa:	6969      	ldr	r1, [r5, #20]
   e1ffc:	4a3e      	ldr	r2, [pc, #248]	; (e20f8 <strftime+0x54c>)
   e1ffe:	4291      	cmp	r1, r2
   e2000:	da0a      	bge.n	e2018 <strftime+0x46c>
   e2002:	f04f 0b01 	mov.w	fp, #1
   e2006:	f8cd b01c 	str.w	fp, [sp, #28]
   e200a:	e005      	b.n	e2018 <strftime+0x46c>
   e200c:	d004      	beq.n	e2018 <strftime+0x46c>
   e200e:	4a2f      	ldr	r2, [pc, #188]	; (e20cc <strftime+0x520>)
   e2010:	4291      	cmp	r1, r2
   e2012:	bfb8      	it	lt
   e2014:	f04f 3bff 	movlt.w	fp, #4294967295
   e2018:	eb0b 0200 	add.w	r2, fp, r0
   e201c:	1c50      	adds	r0, r2, #1
   e201e:	d102      	bne.n	e2026 <strftime+0x47a>
   e2020:	3b01      	subs	r3, #1
   e2022:	2263      	movs	r2, #99	; 0x63
   e2024:	e003      	b.n	e202e <strftime+0x482>
   e2026:	2a64      	cmp	r2, #100	; 0x64
   e2028:	bf04      	itt	eq
   e202a:	3301      	addeq	r3, #1
   e202c:	2200      	moveq	r2, #0
   e202e:	2064      	movs	r0, #100	; 0x64
   e2030:	fb00 2303 	mla	r3, r0, r3, r2
   e2034:	9a07      	ldr	r2, [sp, #28]
   e2036:	b142      	cbz	r2, e204a <strftime+0x49e>
   e2038:	222d      	movs	r2, #45	; 0x2d
   e203a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   e203e:	f1b8 0f00 	cmp.w	r8, #0
   e2042:	d013      	beq.n	e206c <strftime+0x4c0>
   e2044:	f108 38ff 	add.w	r8, r8, #4294967295
   e2048:	e010      	b.n	e206c <strftime+0x4c0>
   e204a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e204e:	d110      	bne.n	e2072 <strftime+0x4c6>
   e2050:	f242 720f 	movw	r2, #9999	; 0x270f
   e2054:	4293      	cmp	r3, r2
   e2056:	d90c      	bls.n	e2072 <strftime+0x4c6>
   e2058:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e205c:	f1b8 0f00 	cmp.w	r8, #0
   e2060:	d1f0      	bne.n	e2044 <strftime+0x498>
   e2062:	aa12      	add	r2, sp, #72	; 0x48
   e2064:	2125      	movs	r1, #37	; 0x25
   e2066:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   e206a:	e00a      	b.n	e2082 <strftime+0x4d6>
   e206c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   e2070:	e000      	b.n	e2074 <strftime+0x4c8>
   e2072:	aa0a      	add	r2, sp, #40	; 0x28
   e2074:	2125      	movs	r1, #37	; 0x25
   e2076:	7011      	strb	r1, [r2, #0]
   e2078:	f1ba 0f00 	cmp.w	sl, #0
   e207c:	d101      	bne.n	e2082 <strftime+0x4d6>
   e207e:	1c50      	adds	r0, r2, #1
   e2080:	e002      	b.n	e2088 <strftime+0x4dc>
   e2082:	2130      	movs	r1, #48	; 0x30
   e2084:	1c90      	adds	r0, r2, #2
   e2086:	7051      	strb	r1, [r2, #1]
   e2088:	491c      	ldr	r1, [pc, #112]	; (e20fc <strftime+0x550>)
   e208a:	9307      	str	r3, [sp, #28]
   e208c:	f7ff fd0a 	bl	e1aa4 <strcpy>
   e2090:	9b07      	ldr	r3, [sp, #28]
   e2092:	9300      	str	r3, [sp, #0]
   e2094:	e1ad      	b.n	e23f2 <strftime+0x846>
   e2096:	4a14      	ldr	r2, [pc, #80]	; (e20e8 <strftime+0x53c>)
   e2098:	4912      	ldr	r1, [pc, #72]	; (e20e4 <strftime+0x538>)
   e209a:	68ab      	ldr	r3, [r5, #8]
   e209c:	286b      	cmp	r0, #107	; 0x6b
   e209e:	bf08      	it	eq
   e20a0:	460a      	moveq	r2, r1
   e20a2:	e6e4      	b.n	e1e6e <strftime+0x2c2>
   e20a4:	68a9      	ldr	r1, [r5, #8]
   e20a6:	230c      	movs	r3, #12
   e20a8:	b131      	cbz	r1, e20b8 <strftime+0x50c>
   e20aa:	4299      	cmp	r1, r3
   e20ac:	bf0e      	itee	eq
   e20ae:	460b      	moveq	r3, r1
   e20b0:	fb91 f2f3 	sdivne	r2, r1, r3
   e20b4:	fb03 1312 	mlsne	r3, r3, r2, r1
   e20b8:	4a0a      	ldr	r2, [pc, #40]	; (e20e4 <strftime+0x538>)
   e20ba:	490b      	ldr	r1, [pc, #44]	; (e20e8 <strftime+0x53c>)
   e20bc:	2849      	cmp	r0, #73	; 0x49
   e20be:	bf08      	it	eq
   e20c0:	460a      	moveq	r2, r1
   e20c2:	e6d4      	b.n	e1e6e <strftime+0x2c2>
   e20c4:	69eb      	ldr	r3, [r5, #28]
   e20c6:	4a0e      	ldr	r2, [pc, #56]	; (e2100 <strftime+0x554>)
   e20c8:	3301      	adds	r3, #1
   e20ca:	e6d0      	b.n	e1e6e <strftime+0x2c2>
   e20cc:	fffff894 	.word	0xfffff894
   e20d0:	000e5edb 	.word	0x000e5edb
   e20d4:	000e52f7 	.word	0x000e52f7
   e20d8:	000e5ecc 	.word	0x000e5ecc
   e20dc:	000e5ed3 	.word	0x000e5ed3
   e20e0:	000e4ed6 	.word	0x000e4ed6
   e20e4:	000e5edd 	.word	0x000e5edd
   e20e8:	000e5eeb 	.word	0x000e5eeb
   e20ec:	000e5ee1 	.word	0x000e5ee1
   e20f0:	000e4fe0 	.word	0x000e4fe0
   e20f4:	000e5ef0 	.word	0x000e5ef0
   e20f8:	fffff895 	.word	0xfffff895
   e20fc:	000e5ef8 	.word	0x000e5ef8
   e2100:	000e5efc 	.word	0x000e5efc
   e2104:	692b      	ldr	r3, [r5, #16]
   e2106:	3301      	adds	r3, #1
   e2108:	e13d      	b.n	e2386 <strftime+0x7da>
   e210a:	686b      	ldr	r3, [r5, #4]
   e210c:	e13b      	b.n	e2386 <strftime+0x7da>
   e210e:	9b02      	ldr	r3, [sp, #8]
   e2110:	429c      	cmp	r4, r3
   e2112:	f080 81f5 	bcs.w	e2500 <strftime+0x954>
   e2116:	230a      	movs	r3, #10
   e2118:	e1e5      	b.n	e24e6 <strftime+0x93a>
   e211a:	68ab      	ldr	r3, [r5, #8]
   e211c:	9a03      	ldr	r2, [sp, #12]
   e211e:	2b0b      	cmp	r3, #11
   e2120:	bfcc      	ite	gt
   e2122:	23a4      	movgt	r3, #164	; 0xa4
   e2124:	23a0      	movle	r3, #160	; 0xa0
   e2126:	4413      	add	r3, r2
   e2128:	f8d3 8004 	ldr.w	r8, [r3, #4]
   e212c:	4640      	mov	r0, r8
   e212e:	f000 f9f1 	bl	e2514 <strlen>
   e2132:	4bb2      	ldr	r3, [pc, #712]	; (e23fc <strftime+0x850>)
   e2134:	f8d3 e000 	ldr.w	lr, [r3]
   e2138:	1939      	adds	r1, r7, r4
   e213a:	4642      	mov	r2, r8
   e213c:	4420      	add	r0, r4
   e213e:	4284      	cmp	r4, r0
   e2140:	f000 81d3 	beq.w	e24ea <strftime+0x93e>
   e2144:	9b02      	ldr	r3, [sp, #8]
   e2146:	429c      	cmp	r4, r3
   e2148:	f080 81da 	bcs.w	e2500 <strftime+0x954>
   e214c:	f899 3000 	ldrb.w	r3, [r9]
   e2150:	2b50      	cmp	r3, #80	; 0x50
   e2152:	f104 0401 	add.w	r4, r4, #1
   e2156:	7813      	ldrb	r3, [r2, #0]
   e2158:	d10a      	bne.n	e2170 <strftime+0x5c4>
   e215a:	eb0e 0c03 	add.w	ip, lr, r3
   e215e:	f89c c001 	ldrb.w	ip, [ip, #1]
   e2162:	f00c 0c03 	and.w	ip, ip, #3
   e2166:	f1bc 0f01 	cmp.w	ip, #1
   e216a:	bf08      	it	eq
   e216c:	3320      	addeq	r3, #32
   e216e:	b2db      	uxtb	r3, r3
   e2170:	f801 3b01 	strb.w	r3, [r1], #1
   e2174:	3201      	adds	r2, #1
   e2176:	e7e2      	b.n	e213e <strftime+0x592>
   e2178:	686b      	ldr	r3, [r5, #4]
   e217a:	9300      	str	r3, [sp, #0]
   e217c:	4aa0      	ldr	r2, [pc, #640]	; (e2400 <strftime+0x854>)
   e217e:	68ab      	ldr	r3, [r5, #8]
   e2180:	e139      	b.n	e23f6 <strftime+0x84a>
   e2182:	6a2b      	ldr	r3, [r5, #32]
   e2184:	2b00      	cmp	r3, #0
   e2186:	db17      	blt.n	e21b8 <strftime+0x60c>
   e2188:	f001 fa02 	bl	e3590 <__tz_lock>
   e218c:	9b06      	ldr	r3, [sp, #24]
   e218e:	b91b      	cbnz	r3, e2198 <strftime+0x5ec>
   e2190:	f001 fa00 	bl	e3594 <_tzset_unlocked>
   e2194:	2301      	movs	r3, #1
   e2196:	9306      	str	r3, [sp, #24]
   e2198:	f001 fefc 	bl	e3f94 <__gettzinfo>
   e219c:	6a2b      	ldr	r3, [r5, #32]
   e219e:	2b00      	cmp	r3, #0
   e21a0:	bfd4      	ite	le
   e21a2:	2300      	movle	r3, #0
   e21a4:	2301      	movgt	r3, #1
   e21a6:	221c      	movs	r2, #28
   e21a8:	fb02 0003 	mla	r0, r2, r3, r0
   e21ac:	6a03      	ldr	r3, [r0, #32]
   e21ae:	f1c3 0800 	rsb	r8, r3, #0
   e21b2:	f001 f9ee 	bl	e3592 <__tz_unlock>
   e21b6:	e001      	b.n	e21bc <strftime+0x610>
   e21b8:	f04f 0800 	mov.w	r8, #0
   e21bc:	f8d5 e014 	ldr.w	lr, [r5, #20]
   e21c0:	4670      	mov	r0, lr
   e21c2:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   e21c6:	ea4f 71e0 	mov.w	r1, r0, asr #31
   e21ca:	f141 33ff 	adc.w	r3, r1, #4294967295
   e21ce:	2a00      	cmp	r2, #0
   e21d0:	f173 0b00 	sbcs.w	fp, r3, #0
   e21d4:	ebc4 0c06 	rsb	ip, r4, r6
   e21d8:	eb07 0a04 	add.w	sl, r7, r4
   e21dc:	da03      	bge.n	e21e6 <strftime+0x63a>
   e21de:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   e21e2:	f141 33ff 	adc.w	r3, r1, #4294967295
   e21e6:	0891      	lsrs	r1, r2, #2
   e21e8:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   e21ec:	109b      	asrs	r3, r3, #2
   e21ee:	9104      	str	r1, [sp, #16]
   e21f0:	9305      	str	r3, [sp, #20]
   e21f2:	f10e 31ff 	add.w	r1, lr, #4294967295
   e21f6:	2364      	movs	r3, #100	; 0x64
   e21f8:	fb91 f1f3 	sdiv	r1, r1, r3
   e21fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   e2200:	1a52      	subs	r2, r2, r1
   e2202:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   e2206:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   e220a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e220e:	fb90 f1f1 	sdiv	r1, r0, r1
   e2212:	1852      	adds	r2, r2, r1
   e2214:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e2218:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   e221c:	f240 116d 	movw	r1, #365	; 0x16d
   e2220:	fb01 fe0e 	mul.w	lr, r1, lr
   e2224:	69e9      	ldr	r1, [r5, #28]
   e2226:	eb12 020e 	adds.w	r2, r2, lr
   e222a:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   e222e:	1852      	adds	r2, r2, r1
   e2230:	f04f 0e18 	mov.w	lr, #24
   e2234:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e2238:	fba2 010e 	umull	r0, r1, r2, lr
   e223c:	fb0e 1103 	mla	r1, lr, r3, r1
   e2240:	68ab      	ldr	r3, [r5, #8]
   e2242:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   e2246:	18c0      	adds	r0, r0, r3
   e2248:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e224c:	fba0 230e 	umull	r2, r3, r0, lr
   e2250:	fb0e 3301 	mla	r3, lr, r1, r3
   e2254:	6869      	ldr	r1, [r5, #4]
   e2256:	1852      	adds	r2, r2, r1
   e2258:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   e225c:	fba2 010e 	umull	r0, r1, r2, lr
   e2260:	fb0e 1103 	mla	r1, lr, r3, r1
   e2264:	682b      	ldr	r3, [r5, #0]
   e2266:	4a67      	ldr	r2, [pc, #412]	; (e2404 <strftime+0x858>)
   e2268:	18c0      	adds	r0, r0, r3
   e226a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   e226e:	ebb0 0008 	subs.w	r0, r0, r8
   e2272:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   e2276:	e9cd 0100 	strd	r0, r1, [sp]
   e227a:	4661      	mov	r1, ip
   e227c:	4650      	mov	r0, sl
   e227e:	f7f9 fc9d 	bl	dbbbc <sniprintf>
   e2282:	e5f8      	b.n	e1e76 <strftime+0x2ca>
   e2284:	682b      	ldr	r3, [r5, #0]
   e2286:	e07e      	b.n	e2386 <strftime+0x7da>
   e2288:	9b02      	ldr	r3, [sp, #8]
   e228a:	429c      	cmp	r4, r3
   e228c:	f080 8138 	bcs.w	e2500 <strftime+0x954>
   e2290:	2309      	movs	r3, #9
   e2292:	e128      	b.n	e24e6 <strftime+0x93a>
   e2294:	682b      	ldr	r3, [r5, #0]
   e2296:	9301      	str	r3, [sp, #4]
   e2298:	686b      	ldr	r3, [r5, #4]
   e229a:	9300      	str	r3, [sp, #0]
   e229c:	4a5a      	ldr	r2, [pc, #360]	; (e2408 <strftime+0x85c>)
   e229e:	68ab      	ldr	r3, [r5, #8]
   e22a0:	1b31      	subs	r1, r6, r4
   e22a2:	1938      	adds	r0, r7, r4
   e22a4:	e60d      	b.n	e1ec2 <strftime+0x316>
   e22a6:	9b02      	ldr	r3, [sp, #8]
   e22a8:	429c      	cmp	r4, r3
   e22aa:	f080 8129 	bcs.w	e2500 <strftime+0x954>
   e22ae:	69ab      	ldr	r3, [r5, #24]
   e22b0:	1c62      	adds	r2, r4, #1
   e22b2:	b90b      	cbnz	r3, e22b8 <strftime+0x70c>
   e22b4:	2337      	movs	r3, #55	; 0x37
   e22b6:	e000      	b.n	e22ba <strftime+0x70e>
   e22b8:	3330      	adds	r3, #48	; 0x30
   e22ba:	553b      	strb	r3, [r7, r4]
   e22bc:	4614      	mov	r4, r2
   e22be:	e114      	b.n	e24ea <strftime+0x93e>
   e22c0:	69eb      	ldr	r3, [r5, #28]
   e22c2:	69aa      	ldr	r2, [r5, #24]
   e22c4:	3307      	adds	r3, #7
   e22c6:	1a9b      	subs	r3, r3, r2
   e22c8:	2207      	movs	r2, #7
   e22ca:	fb93 f3f2 	sdiv	r3, r3, r2
   e22ce:	e05a      	b.n	e2386 <strftime+0x7da>
   e22d0:	4628      	mov	r0, r5
   e22d2:	f7ff fc0a 	bl	e1aea <iso_year_adjust>
   e22d6:	69aa      	ldr	r2, [r5, #24]
   e22d8:	b10a      	cbz	r2, e22de <strftime+0x732>
   e22da:	1e53      	subs	r3, r2, #1
   e22dc:	e000      	b.n	e22e0 <strftime+0x734>
   e22de:	2306      	movs	r3, #6
   e22e0:	2800      	cmp	r0, #0
   e22e2:	dc2f      	bgt.n	e2344 <strftime+0x798>
   e22e4:	69ea      	ldr	r2, [r5, #28]
   e22e6:	d101      	bne.n	e22ec <strftime+0x740>
   e22e8:	320a      	adds	r2, #10
   e22ea:	e03b      	b.n	e2364 <strftime+0x7b8>
   e22ec:	1a9a      	subs	r2, r3, r2
   e22ee:	696b      	ldr	r3, [r5, #20]
   e22f0:	f240 716b 	movw	r1, #1899	; 0x76b
   e22f4:	2b00      	cmp	r3, #0
   e22f6:	bfb4      	ite	lt
   e22f8:	4608      	movlt	r0, r1
   e22fa:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   e22fe:	4418      	add	r0, r3
   e2300:	0781      	lsls	r1, r0, #30
   e2302:	d107      	bne.n	e2314 <strftime+0x768>
   e2304:	4601      	mov	r1, r0
   e2306:	f04f 0e64 	mov.w	lr, #100	; 0x64
   e230a:	fb90 f0fe 	sdiv	r0, r0, lr
   e230e:	fb0e 1110 	mls	r1, lr, r0, r1
   e2312:	b981      	cbnz	r1, e2336 <strftime+0x78a>
   e2314:	2b00      	cmp	r3, #0
   e2316:	f240 716b 	movw	r1, #1899	; 0x76b
   e231a:	bfa8      	it	ge
   e231c:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   e2320:	4419      	add	r1, r3
   e2322:	f44f 73c8 	mov.w	r3, #400	; 0x190
   e2326:	fb91 f0f3 	sdiv	r0, r1, r3
   e232a:	fb03 1110 	mls	r1, r3, r0, r1
   e232e:	fab1 f181 	clz	r1, r1
   e2332:	0949      	lsrs	r1, r1, #5
   e2334:	e000      	b.n	e2338 <strftime+0x78c>
   e2336:	2101      	movs	r1, #1
   e2338:	1a52      	subs	r2, r2, r1
   e233a:	2a05      	cmp	r2, #5
   e233c:	bfb4      	ite	lt
   e233e:	2335      	movlt	r3, #53	; 0x35
   e2340:	2334      	movge	r3, #52	; 0x34
   e2342:	e020      	b.n	e2386 <strftime+0x7da>
   e2344:	2301      	movs	r3, #1
   e2346:	e01e      	b.n	e2386 <strftime+0x7da>
   e2348:	9b02      	ldr	r3, [sp, #8]
   e234a:	429c      	cmp	r4, r3
   e234c:	f080 80d8 	bcs.w	e2500 <strftime+0x954>
   e2350:	69ab      	ldr	r3, [r5, #24]
   e2352:	3330      	adds	r3, #48	; 0x30
   e2354:	e0c7      	b.n	e24e6 <strftime+0x93a>
   e2356:	69aa      	ldr	r2, [r5, #24]
   e2358:	b10a      	cbz	r2, e235e <strftime+0x7b2>
   e235a:	1e53      	subs	r3, r2, #1
   e235c:	e000      	b.n	e2360 <strftime+0x7b4>
   e235e:	2306      	movs	r3, #6
   e2360:	69ea      	ldr	r2, [r5, #28]
   e2362:	3207      	adds	r2, #7
   e2364:	1ad2      	subs	r2, r2, r3
   e2366:	2307      	movs	r3, #7
   e2368:	fb92 f3f3 	sdiv	r3, r2, r3
   e236c:	e00b      	b.n	e2386 <strftime+0x7da>
   e236e:	6968      	ldr	r0, [r5, #20]
   e2370:	2800      	cmp	r0, #0
   e2372:	da03      	bge.n	e237c <strftime+0x7d0>
   e2374:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   e2378:	f001 fa92 	bl	e38a0 <abs>
   e237c:	2364      	movs	r3, #100	; 0x64
   e237e:	fb90 f2f3 	sdiv	r2, r0, r3
   e2382:	fb02 0313 	mls	r3, r2, r3, r0
   e2386:	4a21      	ldr	r2, [pc, #132]	; (e240c <strftime+0x860>)
   e2388:	e571      	b.n	e1e6e <strftime+0x2c2>
   e238a:	696b      	ldr	r3, [r5, #20]
   e238c:	4a20      	ldr	r2, [pc, #128]	; (e2410 <strftime+0x864>)
   e238e:	4293      	cmp	r3, r2
   e2390:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   e2394:	da05      	bge.n	e23a2 <strftime+0x7f6>
   e2396:	232d      	movs	r3, #45	; 0x2d
   e2398:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e239c:	f1cb 0b00 	rsb	fp, fp, #0
   e23a0:	e008      	b.n	e23b4 <strftime+0x808>
   e23a2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   e23a6:	d10d      	bne.n	e23c4 <strftime+0x818>
   e23a8:	f242 730f 	movw	r3, #9999	; 0x270f
   e23ac:	459b      	cmp	fp, r3
   e23ae:	d911      	bls.n	e23d4 <strftime+0x828>
   e23b0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   e23b4:	f1b8 0f00 	cmp.w	r8, #0
   e23b8:	d001      	beq.n	e23be <strftime+0x812>
   e23ba:	f108 38ff 	add.w	r8, r8, #4294967295
   e23be:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   e23c2:	e000      	b.n	e23c6 <strftime+0x81a>
   e23c4:	ab0a      	add	r3, sp, #40	; 0x28
   e23c6:	2225      	movs	r2, #37	; 0x25
   e23c8:	701a      	strb	r2, [r3, #0]
   e23ca:	f1ba 0f00 	cmp.w	sl, #0
   e23ce:	d108      	bne.n	e23e2 <strftime+0x836>
   e23d0:	1c58      	adds	r0, r3, #1
   e23d2:	e009      	b.n	e23e8 <strftime+0x83c>
   e23d4:	f1b8 0f00 	cmp.w	r8, #0
   e23d8:	d1f4      	bne.n	e23c4 <strftime+0x818>
   e23da:	2325      	movs	r3, #37	; 0x25
   e23dc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   e23e0:	ab0a      	add	r3, sp, #40	; 0x28
   e23e2:	2230      	movs	r2, #48	; 0x30
   e23e4:	1c98      	adds	r0, r3, #2
   e23e6:	705a      	strb	r2, [r3, #1]
   e23e8:	490a      	ldr	r1, [pc, #40]	; (e2414 <strftime+0x868>)
   e23ea:	f7ff fb5b 	bl	e1aa4 <strcpy>
   e23ee:	f8cd b000 	str.w	fp, [sp]
   e23f2:	4643      	mov	r3, r8
   e23f4:	aa0a      	add	r2, sp, #40	; 0x28
   e23f6:	1b31      	subs	r1, r6, r4
   e23f8:	1938      	adds	r0, r7, r4
   e23fa:	e03e      	b.n	e247a <strftime+0x8ce>
   e23fc:	2003bb1c 	.word	0x2003bb1c
   e2400:	000e5f0b 	.word	0x000e5f0b
   e2404:	000e5f01 	.word	0x000e5f01
   e2408:	000e5f06 	.word	0x000e5f06
   e240c:	000e5eeb 	.word	0x000e5eeb
   e2410:	fffff894 	.word	0xfffff894
   e2414:	000e5ef8 	.word	0x000e5ef8
   e2418:	6a2b      	ldr	r3, [r5, #32]
   e241a:	2b00      	cmp	r3, #0
   e241c:	db65      	blt.n	e24ea <strftime+0x93e>
   e241e:	f001 f8b7 	bl	e3590 <__tz_lock>
   e2422:	9b06      	ldr	r3, [sp, #24]
   e2424:	b91b      	cbnz	r3, e242e <strftime+0x882>
   e2426:	f001 f8b5 	bl	e3594 <_tzset_unlocked>
   e242a:	2301      	movs	r3, #1
   e242c:	9306      	str	r3, [sp, #24]
   e242e:	f001 fdb1 	bl	e3f94 <__gettzinfo>
   e2432:	6a2b      	ldr	r3, [r5, #32]
   e2434:	2b00      	cmp	r3, #0
   e2436:	bfd4      	ite	le
   e2438:	2300      	movle	r3, #0
   e243a:	2301      	movgt	r3, #1
   e243c:	221c      	movs	r2, #28
   e243e:	fb02 0003 	mla	r0, r2, r3, r0
   e2442:	eb07 0a04 	add.w	sl, r7, r4
   e2446:	6a03      	ldr	r3, [r0, #32]
   e2448:	f1c3 0800 	rsb	r8, r3, #0
   e244c:	f001 f8a1 	bl	e3592 <__tz_unlock>
   e2450:	233c      	movs	r3, #60	; 0x3c
   e2452:	fb98 f0f3 	sdiv	r0, r8, r3
   e2456:	9307      	str	r3, [sp, #28]
   e2458:	f001 fe38 	bl	e40cc <labs>
   e245c:	9b07      	ldr	r3, [sp, #28]
   e245e:	fb90 f2f3 	sdiv	r2, r0, r3
   e2462:	ebc4 0b06 	rsb	fp, r4, r6
   e2466:	fb02 0013 	mls	r0, r2, r3, r0
   e246a:	4a28      	ldr	r2, [pc, #160]	; (e250c <strftime+0x960>)
   e246c:	9000      	str	r0, [sp, #0]
   e246e:	4659      	mov	r1, fp
   e2470:	4650      	mov	r0, sl
   e2472:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e2476:	fb98 f3f3 	sdiv	r3, r8, r3
   e247a:	f7f9 fb9f 	bl	dbbbc <sniprintf>
   e247e:	e4fa      	b.n	e1e76 <strftime+0x2ca>
   e2480:	4404      	add	r4, r0
   e2482:	42a6      	cmp	r6, r4
   e2484:	d831      	bhi.n	e24ea <strftime+0x93e>
   e2486:	e03b      	b.n	e2500 <strftime+0x954>
   e2488:	6a2b      	ldr	r3, [r5, #32]
   e248a:	2b00      	cmp	r3, #0
   e248c:	db2d      	blt.n	e24ea <strftime+0x93e>
   e248e:	f001 f87f 	bl	e3590 <__tz_lock>
   e2492:	9b06      	ldr	r3, [sp, #24]
   e2494:	b91b      	cbnz	r3, e249e <strftime+0x8f2>
   e2496:	f001 f87d 	bl	e3594 <_tzset_unlocked>
   e249a:	2301      	movs	r3, #1
   e249c:	9306      	str	r3, [sp, #24]
   e249e:	6a2b      	ldr	r3, [r5, #32]
   e24a0:	4a1b      	ldr	r2, [pc, #108]	; (e2510 <strftime+0x964>)
   e24a2:	2b00      	cmp	r3, #0
   e24a4:	bfd4      	ite	le
   e24a6:	2300      	movle	r3, #0
   e24a8:	2301      	movgt	r3, #1
   e24aa:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   e24ae:	4640      	mov	r0, r8
   e24b0:	f000 f830 	bl	e2514 <strlen>
   e24b4:	f108 38ff 	add.w	r8, r8, #4294967295
   e24b8:	193b      	adds	r3, r7, r4
   e24ba:	4420      	add	r0, r4
   e24bc:	4284      	cmp	r4, r0
   e24be:	d00b      	beq.n	e24d8 <strftime+0x92c>
   e24c0:	9a02      	ldr	r2, [sp, #8]
   e24c2:	4294      	cmp	r4, r2
   e24c4:	d205      	bcs.n	e24d2 <strftime+0x926>
   e24c6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   e24ca:	f803 2b01 	strb.w	r2, [r3], #1
   e24ce:	3401      	adds	r4, #1
   e24d0:	e7f4      	b.n	e24bc <strftime+0x910>
   e24d2:	f001 f85e 	bl	e3592 <__tz_unlock>
   e24d6:	e013      	b.n	e2500 <strftime+0x954>
   e24d8:	f001 f85b 	bl	e3592 <__tz_unlock>
   e24dc:	e005      	b.n	e24ea <strftime+0x93e>
   e24de:	9b02      	ldr	r3, [sp, #8]
   e24e0:	429c      	cmp	r4, r3
   e24e2:	d20d      	bcs.n	e2500 <strftime+0x954>
   e24e4:	2325      	movs	r3, #37	; 0x25
   e24e6:	553b      	strb	r3, [r7, r4]
   e24e8:	3401      	adds	r4, #1
   e24ea:	f899 3000 	ldrb.w	r3, [r9]
   e24ee:	b11b      	cbz	r3, e24f8 <strftime+0x94c>
   e24f0:	f109 0901 	add.w	r9, r9, #1
   e24f4:	f7ff bb69 	b.w	e1bca <strftime+0x1e>
   e24f8:	b126      	cbz	r6, e2504 <strftime+0x958>
   e24fa:	2300      	movs	r3, #0
   e24fc:	553b      	strb	r3, [r7, r4]
   e24fe:	e001      	b.n	e2504 <strftime+0x958>
   e2500:	2000      	movs	r0, #0
   e2502:	e000      	b.n	e2506 <strftime+0x95a>
   e2504:	4620      	mov	r0, r4
   e2506:	b013      	add	sp, #76	; 0x4c
   e2508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e250c:	000e5f15 	.word	0x000e5f15
   e2510:	2003bbbc 	.word	0x2003bbbc

000e2514 <strlen>:
   e2514:	4603      	mov	r3, r0
   e2516:	f813 2b01 	ldrb.w	r2, [r3], #1
   e251a:	2a00      	cmp	r2, #0
   e251c:	d1fb      	bne.n	e2516 <strlen+0x2>
   e251e:	1a18      	subs	r0, r3, r0
   e2520:	3801      	subs	r0, #1
   e2522:	4770      	bx	lr

000e2524 <strncmp>:
   e2524:	b530      	push	{r4, r5, lr}
   e2526:	b182      	cbz	r2, e254a <strncmp+0x26>
   e2528:	1e45      	subs	r5, r0, #1
   e252a:	3901      	subs	r1, #1
   e252c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e2530:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e2534:	42a3      	cmp	r3, r4
   e2536:	d106      	bne.n	e2546 <strncmp+0x22>
   e2538:	43ec      	mvns	r4, r5
   e253a:	4414      	add	r4, r2
   e253c:	42e0      	cmn	r0, r4
   e253e:	d001      	beq.n	e2544 <strncmp+0x20>
   e2540:	2b00      	cmp	r3, #0
   e2542:	d1f3      	bne.n	e252c <strncmp+0x8>
   e2544:	461c      	mov	r4, r3
   e2546:	1b18      	subs	r0, r3, r4
   e2548:	bd30      	pop	{r4, r5, pc}
   e254a:	4610      	mov	r0, r2
   e254c:	bd30      	pop	{r4, r5, pc}

000e254e <strncpy>:
   e254e:	b510      	push	{r4, lr}
   e2550:	4603      	mov	r3, r0
   e2552:	b142      	cbz	r2, e2566 <strncpy+0x18>
   e2554:	f811 4b01 	ldrb.w	r4, [r1], #1
   e2558:	f803 4b01 	strb.w	r4, [r3], #1
   e255c:	3a01      	subs	r2, #1
   e255e:	2c00      	cmp	r4, #0
   e2560:	d1f7      	bne.n	e2552 <strncpy+0x4>
   e2562:	441a      	add	r2, r3
   e2564:	e000      	b.n	e2568 <strncpy+0x1a>
   e2566:	bd10      	pop	{r4, pc}
   e2568:	4293      	cmp	r3, r2
   e256a:	d002      	beq.n	e2572 <strncpy+0x24>
   e256c:	f803 4b01 	strb.w	r4, [r3], #1
   e2570:	e7fa      	b.n	e2568 <strncpy+0x1a>
   e2572:	bd10      	pop	{r4, pc}

000e2574 <strstr>:
   e2574:	b5f0      	push	{r4, r5, r6, r7, lr}
   e2576:	7803      	ldrb	r3, [r0, #0]
   e2578:	b963      	cbnz	r3, e2594 <strstr+0x20>
   e257a:	780b      	ldrb	r3, [r1, #0]
   e257c:	2b00      	cmp	r3, #0
   e257e:	bf18      	it	ne
   e2580:	2000      	movne	r0, #0
   e2582:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e2584:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   e2588:	b162      	cbz	r2, e25a4 <strstr+0x30>
   e258a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   e258e:	4297      	cmp	r7, r2
   e2590:	4630      	mov	r0, r6
   e2592:	d0f7      	beq.n	e2584 <strstr+0x10>
   e2594:	4603      	mov	r3, r0
   e2596:	1c46      	adds	r6, r0, #1
   e2598:	7800      	ldrb	r0, [r0, #0]
   e259a:	b110      	cbz	r0, e25a2 <strstr+0x2e>
   e259c:	1e4d      	subs	r5, r1, #1
   e259e:	1e5c      	subs	r4, r3, #1
   e25a0:	e7f0      	b.n	e2584 <strstr+0x10>
   e25a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e25a4:	4618      	mov	r0, r3
   e25a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e25a8 <sulp>:
   e25a8:	b570      	push	{r4, r5, r6, lr}
   e25aa:	4604      	mov	r4, r0
   e25ac:	460d      	mov	r5, r1
   e25ae:	ec45 4b10 	vmov	d0, r4, r5
   e25b2:	4616      	mov	r6, r2
   e25b4:	f002 f854 	bl	e4660 <__ulp>
   e25b8:	ec51 0b10 	vmov	r0, r1, d0
   e25bc:	b17e      	cbz	r6, e25de <sulp+0x36>
   e25be:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e25c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e25c6:	2b00      	cmp	r3, #0
   e25c8:	dd09      	ble.n	e25de <sulp+0x36>
   e25ca:	051b      	lsls	r3, r3, #20
   e25cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e25d0:	2400      	movs	r4, #0
   e25d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e25d6:	4622      	mov	r2, r4
   e25d8:	462b      	mov	r3, r5
   e25da:	f7fe f969 	bl	e08b0 <__aeabi_dmul>
   e25de:	bd70      	pop	{r4, r5, r6, pc}

000e25e0 <_strtod_r>:
   e25e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e25e4:	b09d      	sub	sp, #116	; 0x74
   e25e6:	2300      	movs	r3, #0
   e25e8:	9002      	str	r0, [sp, #8]
   e25ea:	460c      	mov	r4, r1
   e25ec:	9213      	str	r2, [sp, #76]	; 0x4c
   e25ee:	9318      	str	r3, [sp, #96]	; 0x60
   e25f0:	f04f 0a00 	mov.w	sl, #0
   e25f4:	f04f 0b00 	mov.w	fp, #0
   e25f8:	9117      	str	r1, [sp, #92]	; 0x5c
   e25fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e25fc:	781a      	ldrb	r2, [r3, #0]
   e25fe:	2a0d      	cmp	r2, #13
   e2600:	d805      	bhi.n	e260e <_strtod_r+0x2e>
   e2602:	2a09      	cmp	r2, #9
   e2604:	d213      	bcs.n	e262e <_strtod_r+0x4e>
   e2606:	2a00      	cmp	r2, #0
   e2608:	f000 81ac 	beq.w	e2964 <_strtod_r+0x384>
   e260c:	e012      	b.n	e2634 <_strtod_r+0x54>
   e260e:	2a2b      	cmp	r2, #43	; 0x2b
   e2610:	d004      	beq.n	e261c <_strtod_r+0x3c>
   e2612:	2a2d      	cmp	r2, #45	; 0x2d
   e2614:	d004      	beq.n	e2620 <_strtod_r+0x40>
   e2616:	2a20      	cmp	r2, #32
   e2618:	d10c      	bne.n	e2634 <_strtod_r+0x54>
   e261a:	e008      	b.n	e262e <_strtod_r+0x4e>
   e261c:	2200      	movs	r2, #0
   e261e:	e000      	b.n	e2622 <_strtod_r+0x42>
   e2620:	2201      	movs	r2, #1
   e2622:	920c      	str	r2, [sp, #48]	; 0x30
   e2624:	1c5a      	adds	r2, r3, #1
   e2626:	9217      	str	r2, [sp, #92]	; 0x5c
   e2628:	785b      	ldrb	r3, [r3, #1]
   e262a:	b92b      	cbnz	r3, e2638 <_strtod_r+0x58>
   e262c:	e19a      	b.n	e2964 <_strtod_r+0x384>
   e262e:	3301      	adds	r3, #1
   e2630:	9317      	str	r3, [sp, #92]	; 0x5c
   e2632:	e7e2      	b.n	e25fa <_strtod_r+0x1a>
   e2634:	2300      	movs	r3, #0
   e2636:	930c      	str	r3, [sp, #48]	; 0x30
   e2638:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e263a:	782b      	ldrb	r3, [r5, #0]
   e263c:	2b30      	cmp	r3, #48	; 0x30
   e263e:	d15c      	bne.n	e26fa <_strtod_r+0x11a>
   e2640:	786b      	ldrb	r3, [r5, #1]
   e2642:	2b58      	cmp	r3, #88	; 0x58
   e2644:	d001      	beq.n	e264a <_strtod_r+0x6a>
   e2646:	2b78      	cmp	r3, #120	; 0x78
   e2648:	d14c      	bne.n	e26e4 <_strtod_r+0x104>
   e264a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e264c:	9301      	str	r3, [sp, #4]
   e264e:	ab18      	add	r3, sp, #96	; 0x60
   e2650:	9300      	str	r3, [sp, #0]
   e2652:	4aa9      	ldr	r2, [pc, #676]	; (e28f8 <_strtod_r+0x318>)
   e2654:	9802      	ldr	r0, [sp, #8]
   e2656:	ab19      	add	r3, sp, #100	; 0x64
   e2658:	a917      	add	r1, sp, #92	; 0x5c
   e265a:	f001 f984 	bl	e3966 <__gethex>
   e265e:	f010 0607 	ands.w	r6, r0, #7
   e2662:	4604      	mov	r4, r0
   e2664:	f000 8587 	beq.w	e3176 <_strtod_r+0xb96>
   e2668:	2e06      	cmp	r6, #6
   e266a:	d105      	bne.n	e2678 <_strtod_r+0x98>
   e266c:	3501      	adds	r5, #1
   e266e:	2300      	movs	r3, #0
   e2670:	9517      	str	r5, [sp, #92]	; 0x5c
   e2672:	930c      	str	r3, [sp, #48]	; 0x30
   e2674:	f000 bd7f 	b.w	e3176 <_strtod_r+0xb96>
   e2678:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e267a:	b13a      	cbz	r2, e268c <_strtod_r+0xac>
   e267c:	2135      	movs	r1, #53	; 0x35
   e267e:	a81a      	add	r0, sp, #104	; 0x68
   e2680:	f002 f8db 	bl	e483a <__copybits>
   e2684:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2686:	9802      	ldr	r0, [sp, #8]
   e2688:	f001 fd59 	bl	e413e <_Bfree>
   e268c:	2e06      	cmp	r6, #6
   e268e:	d822      	bhi.n	e26d6 <_strtod_r+0xf6>
   e2690:	e8df f006 	tbb	[pc, r6]
   e2694:	18080d04 	.word	0x18080d04
   e2698:	0d1d      	.short	0x0d1d
   e269a:	04          	.byte	0x04
   e269b:	00          	.byte	0x00
   e269c:	f04f 0b00 	mov.w	fp, #0
   e26a0:	46da      	mov	sl, fp
   e26a2:	e018      	b.n	e26d6 <_strtod_r+0xf6>
   e26a4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e26a8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e26ac:	e013      	b.n	e26d6 <_strtod_r+0xf6>
   e26ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e26b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e26b2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e26b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e26ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e26be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e26c2:	e008      	b.n	e26d6 <_strtod_r+0xf6>
   e26c4:	f8df b234 	ldr.w	fp, [pc, #564]	; e28fc <_strtod_r+0x31c>
   e26c8:	f04f 0a00 	mov.w	sl, #0
   e26cc:	e003      	b.n	e26d6 <_strtod_r+0xf6>
   e26ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e26d2:	f04f 3aff 	mov.w	sl, #4294967295
   e26d6:	0721      	lsls	r1, r4, #28
   e26d8:	f140 854d 	bpl.w	e3176 <_strtod_r+0xb96>
   e26dc:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e26e0:	f000 bd49 	b.w	e3176 <_strtod_r+0xb96>
   e26e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e26e6:	1c5a      	adds	r2, r3, #1
   e26e8:	9217      	str	r2, [sp, #92]	; 0x5c
   e26ea:	785b      	ldrb	r3, [r3, #1]
   e26ec:	2b30      	cmp	r3, #48	; 0x30
   e26ee:	d0f9      	beq.n	e26e4 <_strtod_r+0x104>
   e26f0:	2b00      	cmp	r3, #0
   e26f2:	f000 8540 	beq.w	e3176 <_strtod_r+0xb96>
   e26f6:	2301      	movs	r3, #1
   e26f8:	e000      	b.n	e26fc <_strtod_r+0x11c>
   e26fa:	2300      	movs	r3, #0
   e26fc:	f04f 0800 	mov.w	r8, #0
   e2700:	9306      	str	r3, [sp, #24]
   e2702:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2704:	9307      	str	r3, [sp, #28]
   e2706:	f8cd 8014 	str.w	r8, [sp, #20]
   e270a:	f8cd 8010 	str.w	r8, [sp, #16]
   e270e:	220a      	movs	r2, #10
   e2710:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e2712:	782e      	ldrb	r6, [r5, #0]
   e2714:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e2718:	b2d9      	uxtb	r1, r3
   e271a:	2909      	cmp	r1, #9
   e271c:	d80e      	bhi.n	e273c <_strtod_r+0x15c>
   e271e:	9904      	ldr	r1, [sp, #16]
   e2720:	2908      	cmp	r1, #8
   e2722:	bfdd      	ittte	le
   e2724:	9905      	ldrle	r1, [sp, #20]
   e2726:	fb02 3301 	mlale	r3, r2, r1, r3
   e272a:	9305      	strle	r3, [sp, #20]
   e272c:	fb02 3808 	mlagt	r8, r2, r8, r3
   e2730:	9b04      	ldr	r3, [sp, #16]
   e2732:	3501      	adds	r5, #1
   e2734:	3301      	adds	r3, #1
   e2736:	9304      	str	r3, [sp, #16]
   e2738:	9517      	str	r5, [sp, #92]	; 0x5c
   e273a:	e7e9      	b.n	e2710 <_strtod_r+0x130>
   e273c:	9802      	ldr	r0, [sp, #8]
   e273e:	f7fe fefd 	bl	e153c <_localeconv_r>
   e2742:	6807      	ldr	r7, [r0, #0]
   e2744:	9802      	ldr	r0, [sp, #8]
   e2746:	f7fe fef9 	bl	e153c <_localeconv_r>
   e274a:	6800      	ldr	r0, [r0, #0]
   e274c:	f7ff fee2 	bl	e2514 <strlen>
   e2750:	4639      	mov	r1, r7
   e2752:	4602      	mov	r2, r0
   e2754:	4628      	mov	r0, r5
   e2756:	f7ff fee5 	bl	e2524 <strncmp>
   e275a:	4607      	mov	r7, r0
   e275c:	b128      	cbz	r0, e276a <_strtod_r+0x18a>
   e275e:	2000      	movs	r0, #0
   e2760:	4633      	mov	r3, r6
   e2762:	9d04      	ldr	r5, [sp, #16]
   e2764:	4602      	mov	r2, r0
   e2766:	4601      	mov	r1, r0
   e2768:	e057      	b.n	e281a <_strtod_r+0x23a>
   e276a:	9802      	ldr	r0, [sp, #8]
   e276c:	f7fe fee6 	bl	e153c <_localeconv_r>
   e2770:	6800      	ldr	r0, [r0, #0]
   e2772:	f7ff fecf 	bl	e2514 <strlen>
   e2776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2778:	181a      	adds	r2, r3, r0
   e277a:	9217      	str	r2, [sp, #92]	; 0x5c
   e277c:	9a04      	ldr	r2, [sp, #16]
   e277e:	5c1b      	ldrb	r3, [r3, r0]
   e2780:	2a00      	cmp	r2, #0
   e2782:	d142      	bne.n	e280a <_strtod_r+0x22a>
   e2784:	4610      	mov	r0, r2
   e2786:	2b30      	cmp	r3, #48	; 0x30
   e2788:	d105      	bne.n	e2796 <_strtod_r+0x1b6>
   e278a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e278c:	1c5a      	adds	r2, r3, #1
   e278e:	9217      	str	r2, [sp, #92]	; 0x5c
   e2790:	3001      	adds	r0, #1
   e2792:	785b      	ldrb	r3, [r3, #1]
   e2794:	e7f7      	b.n	e2786 <_strtod_r+0x1a6>
   e2796:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e279a:	2a08      	cmp	r2, #8
   e279c:	d843      	bhi.n	e2826 <_strtod_r+0x246>
   e279e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e27a0:	9207      	str	r2, [sp, #28]
   e27a2:	4602      	mov	r2, r0
   e27a4:	2000      	movs	r0, #0
   e27a6:	4605      	mov	r5, r0
   e27a8:	3b30      	subs	r3, #48	; 0x30
   e27aa:	f100 0101 	add.w	r1, r0, #1
   e27ae:	d026      	beq.n	e27fe <_strtod_r+0x21e>
   e27b0:	440a      	add	r2, r1
   e27b2:	eb05 0c00 	add.w	ip, r5, r0
   e27b6:	4629      	mov	r1, r5
   e27b8:	260a      	movs	r6, #10
   e27ba:	4561      	cmp	r1, ip
   e27bc:	d00e      	beq.n	e27dc <_strtod_r+0x1fc>
   e27be:	3101      	adds	r1, #1
   e27c0:	f101 3eff 	add.w	lr, r1, #4294967295
   e27c4:	f1be 0f08 	cmp.w	lr, #8
   e27c8:	dc03      	bgt.n	e27d2 <_strtod_r+0x1f2>
   e27ca:	9f05      	ldr	r7, [sp, #20]
   e27cc:	4377      	muls	r7, r6
   e27ce:	9705      	str	r7, [sp, #20]
   e27d0:	e7f3      	b.n	e27ba <_strtod_r+0x1da>
   e27d2:	2910      	cmp	r1, #16
   e27d4:	bfd8      	it	le
   e27d6:	fb06 f808 	mulle.w	r8, r6, r8
   e27da:	e7ee      	b.n	e27ba <_strtod_r+0x1da>
   e27dc:	4428      	add	r0, r5
   e27de:	2808      	cmp	r0, #8
   e27e0:	f100 0501 	add.w	r5, r0, #1
   e27e4:	dc05      	bgt.n	e27f2 <_strtod_r+0x212>
   e27e6:	9805      	ldr	r0, [sp, #20]
   e27e8:	210a      	movs	r1, #10
   e27ea:	fb01 3300 	mla	r3, r1, r0, r3
   e27ee:	9305      	str	r3, [sp, #20]
   e27f0:	e004      	b.n	e27fc <_strtod_r+0x21c>
   e27f2:	2d10      	cmp	r5, #16
   e27f4:	bfdc      	itt	le
   e27f6:	210a      	movle	r1, #10
   e27f8:	fb01 3808 	mlale	r8, r1, r8, r3
   e27fc:	2100      	movs	r1, #0
   e27fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2800:	1c58      	adds	r0, r3, #1
   e2802:	9017      	str	r0, [sp, #92]	; 0x5c
   e2804:	785b      	ldrb	r3, [r3, #1]
   e2806:	4608      	mov	r0, r1
   e2808:	e002      	b.n	e2810 <_strtod_r+0x230>
   e280a:	9d04      	ldr	r5, [sp, #16]
   e280c:	4638      	mov	r0, r7
   e280e:	463a      	mov	r2, r7
   e2810:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e2814:	2909      	cmp	r1, #9
   e2816:	d9c7      	bls.n	e27a8 <_strtod_r+0x1c8>
   e2818:	2101      	movs	r1, #1
   e281a:	2b65      	cmp	r3, #101	; 0x65
   e281c:	d001      	beq.n	e2822 <_strtod_r+0x242>
   e281e:	2b45      	cmp	r3, #69	; 0x45
   e2820:	d151      	bne.n	e28c6 <_strtod_r+0x2e6>
   e2822:	b96d      	cbnz	r5, e2840 <_strtod_r+0x260>
   e2824:	e004      	b.n	e2830 <_strtod_r+0x250>
   e2826:	2b65      	cmp	r3, #101	; 0x65
   e2828:	f040 84b3 	bne.w	e3192 <_strtod_r+0xbb2>
   e282c:	2200      	movs	r2, #0
   e282e:	2101      	movs	r1, #1
   e2830:	b928      	cbnz	r0, e283e <_strtod_r+0x25e>
   e2832:	9b06      	ldr	r3, [sp, #24]
   e2834:	2b00      	cmp	r3, #0
   e2836:	f000 8095 	beq.w	e2964 <_strtod_r+0x384>
   e283a:	4605      	mov	r5, r0
   e283c:	e000      	b.n	e2840 <_strtod_r+0x260>
   e283e:	2500      	movs	r5, #0
   e2840:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e2842:	1c63      	adds	r3, r4, #1
   e2844:	9317      	str	r3, [sp, #92]	; 0x5c
   e2846:	7863      	ldrb	r3, [r4, #1]
   e2848:	2b2b      	cmp	r3, #43	; 0x2b
   e284a:	d006      	beq.n	e285a <_strtod_r+0x27a>
   e284c:	2b2d      	cmp	r3, #45	; 0x2d
   e284e:	d002      	beq.n	e2856 <_strtod_r+0x276>
   e2850:	2600      	movs	r6, #0
   e2852:	9603      	str	r6, [sp, #12]
   e2854:	e006      	b.n	e2864 <_strtod_r+0x284>
   e2856:	2301      	movs	r3, #1
   e2858:	e000      	b.n	e285c <_strtod_r+0x27c>
   e285a:	2300      	movs	r3, #0
   e285c:	9303      	str	r3, [sp, #12]
   e285e:	1ca3      	adds	r3, r4, #2
   e2860:	9317      	str	r3, [sp, #92]	; 0x5c
   e2862:	78a3      	ldrb	r3, [r4, #2]
   e2864:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e2868:	2e09      	cmp	r6, #9
   e286a:	d82b      	bhi.n	e28c4 <_strtod_r+0x2e4>
   e286c:	2b30      	cmp	r3, #48	; 0x30
   e286e:	d104      	bne.n	e287a <_strtod_r+0x29a>
   e2870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2872:	1c5e      	adds	r6, r3, #1
   e2874:	9617      	str	r6, [sp, #92]	; 0x5c
   e2876:	785b      	ldrb	r3, [r3, #1]
   e2878:	e7f8      	b.n	e286c <_strtod_r+0x28c>
   e287a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e287e:	2e08      	cmp	r6, #8
   e2880:	d821      	bhi.n	e28c6 <_strtod_r+0x2e6>
   e2882:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e2886:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2888:	f04f 0c0a 	mov.w	ip, #10
   e288c:	461f      	mov	r7, r3
   e288e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2890:	1c5e      	adds	r6, r3, #1
   e2892:	9617      	str	r6, [sp, #92]	; 0x5c
   e2894:	785b      	ldrb	r3, [r3, #1]
   e2896:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e289a:	f1b9 0f09 	cmp.w	r9, #9
   e289e:	d804      	bhi.n	e28aa <_strtod_r+0x2ca>
   e28a0:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e28a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e28a8:	e7f1      	b.n	e288e <_strtod_r+0x2ae>
   e28aa:	1bf6      	subs	r6, r6, r7
   e28ac:	2e08      	cmp	r6, #8
   e28ae:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e28b2:	dc02      	bgt.n	e28ba <_strtod_r+0x2da>
   e28b4:	45f1      	cmp	r9, lr
   e28b6:	bfa8      	it	ge
   e28b8:	46f1      	movge	r9, lr
   e28ba:	9e03      	ldr	r6, [sp, #12]
   e28bc:	b12e      	cbz	r6, e28ca <_strtod_r+0x2ea>
   e28be:	f1c9 0900 	rsb	r9, r9, #0
   e28c2:	e002      	b.n	e28ca <_strtod_r+0x2ea>
   e28c4:	9417      	str	r4, [sp, #92]	; 0x5c
   e28c6:	f04f 0900 	mov.w	r9, #0
   e28ca:	2d00      	cmp	r5, #0
   e28cc:	d153      	bne.n	e2976 <_strtod_r+0x396>
   e28ce:	2800      	cmp	r0, #0
   e28d0:	f040 8451 	bne.w	e3176 <_strtod_r+0xb96>
   e28d4:	9a06      	ldr	r2, [sp, #24]
   e28d6:	2a00      	cmp	r2, #0
   e28d8:	f040 844d 	bne.w	e3176 <_strtod_r+0xb96>
   e28dc:	2900      	cmp	r1, #0
   e28de:	d141      	bne.n	e2964 <_strtod_r+0x384>
   e28e0:	2b4e      	cmp	r3, #78	; 0x4e
   e28e2:	d020      	beq.n	e2926 <_strtod_r+0x346>
   e28e4:	dc02      	bgt.n	e28ec <_strtod_r+0x30c>
   e28e6:	2b49      	cmp	r3, #73	; 0x49
   e28e8:	d00a      	beq.n	e2900 <_strtod_r+0x320>
   e28ea:	e03b      	b.n	e2964 <_strtod_r+0x384>
   e28ec:	2b69      	cmp	r3, #105	; 0x69
   e28ee:	d007      	beq.n	e2900 <_strtod_r+0x320>
   e28f0:	2b6e      	cmp	r3, #110	; 0x6e
   e28f2:	d018      	beq.n	e2926 <_strtod_r+0x346>
   e28f4:	e036      	b.n	e2964 <_strtod_r+0x384>
   e28f6:	bf00      	nop
   e28f8:	000e5f24 	.word	0x000e5f24
   e28fc:	7ff00000 	.word	0x7ff00000
   e2900:	49a8      	ldr	r1, [pc, #672]	; (e2ba4 <_strtod_r+0x5c4>)
   e2902:	a817      	add	r0, sp, #92	; 0x5c
   e2904:	f001 fa60 	bl	e3dc8 <__match>
   e2908:	b360      	cbz	r0, e2964 <_strtod_r+0x384>
   e290a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e290c:	49a6      	ldr	r1, [pc, #664]	; (e2ba8 <_strtod_r+0x5c8>)
   e290e:	3b01      	subs	r3, #1
   e2910:	a817      	add	r0, sp, #92	; 0x5c
   e2912:	9317      	str	r3, [sp, #92]	; 0x5c
   e2914:	f001 fa58 	bl	e3dc8 <__match>
   e2918:	b910      	cbnz	r0, e2920 <_strtod_r+0x340>
   e291a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e291c:	3301      	adds	r3, #1
   e291e:	9317      	str	r3, [sp, #92]	; 0x5c
   e2920:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e2bc4 <_strtod_r+0x5e4>
   e2924:	e01a      	b.n	e295c <_strtod_r+0x37c>
   e2926:	49a1      	ldr	r1, [pc, #644]	; (e2bac <_strtod_r+0x5cc>)
   e2928:	a817      	add	r0, sp, #92	; 0x5c
   e292a:	f001 fa4d 	bl	e3dc8 <__match>
   e292e:	b1c8      	cbz	r0, e2964 <_strtod_r+0x384>
   e2930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2932:	781b      	ldrb	r3, [r3, #0]
   e2934:	2b28      	cmp	r3, #40	; 0x28
   e2936:	d10f      	bne.n	e2958 <_strtod_r+0x378>
   e2938:	aa1a      	add	r2, sp, #104	; 0x68
   e293a:	499d      	ldr	r1, [pc, #628]	; (e2bb0 <_strtod_r+0x5d0>)
   e293c:	a817      	add	r0, sp, #92	; 0x5c
   e293e:	f001 fa56 	bl	e3dee <__hexnan>
   e2942:	2805      	cmp	r0, #5
   e2944:	d108      	bne.n	e2958 <_strtod_r+0x378>
   e2946:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e2948:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e294c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e2950:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e2954:	f000 bc0f 	b.w	e3176 <_strtod_r+0xb96>
   e2958:	f8df b26c 	ldr.w	fp, [pc, #620]	; e2bc8 <_strtod_r+0x5e8>
   e295c:	f04f 0a00 	mov.w	sl, #0
   e2960:	f000 bc09 	b.w	e3176 <_strtod_r+0xb96>
   e2964:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e2966:	9417      	str	r4, [sp, #92]	; 0x5c
   e2968:	2b00      	cmp	r3, #0
   e296a:	f000 840f 	beq.w	e318c <_strtod_r+0xbac>
   e296e:	2300      	movs	r3, #0
   e2970:	930c      	str	r3, [sp, #48]	; 0x30
   e2972:	f000 bc02 	b.w	e317a <_strtod_r+0xb9a>
   e2976:	9b04      	ldr	r3, [sp, #16]
   e2978:	9805      	ldr	r0, [sp, #20]
   e297a:	2b00      	cmp	r3, #0
   e297c:	bf08      	it	eq
   e297e:	462b      	moveq	r3, r5
   e2980:	2d10      	cmp	r5, #16
   e2982:	462c      	mov	r4, r5
   e2984:	ebc2 0909 	rsb	r9, r2, r9
   e2988:	bfa8      	it	ge
   e298a:	2410      	movge	r4, #16
   e298c:	9304      	str	r3, [sp, #16]
   e298e:	f7fd ff19 	bl	e07c4 <__aeabi_ui2d>
   e2992:	2c09      	cmp	r4, #9
   e2994:	4682      	mov	sl, r0
   e2996:	468b      	mov	fp, r1
   e2998:	dd13      	ble.n	e29c2 <_strtod_r+0x3e2>
   e299a:	4b86      	ldr	r3, [pc, #536]	; (e2bb4 <_strtod_r+0x5d4>)
   e299c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e29a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e29a4:	f7fd ff84 	bl	e08b0 <__aeabi_dmul>
   e29a8:	4606      	mov	r6, r0
   e29aa:	4640      	mov	r0, r8
   e29ac:	460f      	mov	r7, r1
   e29ae:	f7fd ff09 	bl	e07c4 <__aeabi_ui2d>
   e29b2:	4602      	mov	r2, r0
   e29b4:	460b      	mov	r3, r1
   e29b6:	4630      	mov	r0, r6
   e29b8:	4639      	mov	r1, r7
   e29ba:	f7fd fdc7 	bl	e054c <__adddf3>
   e29be:	4682      	mov	sl, r0
   e29c0:	468b      	mov	fp, r1
   e29c2:	2d0f      	cmp	r5, #15
   e29c4:	dc36      	bgt.n	e2a34 <_strtod_r+0x454>
   e29c6:	f1b9 0f00 	cmp.w	r9, #0
   e29ca:	f000 83d4 	beq.w	e3176 <_strtod_r+0xb96>
   e29ce:	dd24      	ble.n	e2a1a <_strtod_r+0x43a>
   e29d0:	f1b9 0f16 	cmp.w	r9, #22
   e29d4:	dc07      	bgt.n	e29e6 <_strtod_r+0x406>
   e29d6:	4d77      	ldr	r5, [pc, #476]	; (e2bb4 <_strtod_r+0x5d4>)
   e29d8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e29dc:	4652      	mov	r2, sl
   e29de:	465b      	mov	r3, fp
   e29e0:	e9d9 0100 	ldrd	r0, r1, [r9]
   e29e4:	e014      	b.n	e2a10 <_strtod_r+0x430>
   e29e6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e29ea:	4599      	cmp	r9, r3
   e29ec:	dc22      	bgt.n	e2a34 <_strtod_r+0x454>
   e29ee:	4c71      	ldr	r4, [pc, #452]	; (e2bb4 <_strtod_r+0x5d4>)
   e29f0:	f1c5 050f 	rsb	r5, r5, #15
   e29f4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e29f8:	ebc5 0509 	rsb	r5, r5, r9
   e29fc:	4652      	mov	r2, sl
   e29fe:	465b      	mov	r3, fp
   e2a00:	e9d1 0100 	ldrd	r0, r1, [r1]
   e2a04:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e2a08:	f7fd ff52 	bl	e08b0 <__aeabi_dmul>
   e2a0c:	e9d4 2300 	ldrd	r2, r3, [r4]
   e2a10:	f7fd ff4e 	bl	e08b0 <__aeabi_dmul>
   e2a14:	4682      	mov	sl, r0
   e2a16:	468b      	mov	fp, r1
   e2a18:	e3ad      	b.n	e3176 <_strtod_r+0xb96>
   e2a1a:	f119 0f16 	cmn.w	r9, #22
   e2a1e:	db09      	blt.n	e2a34 <_strtod_r+0x454>
   e2a20:	4d64      	ldr	r5, [pc, #400]	; (e2bb4 <_strtod_r+0x5d4>)
   e2a22:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e2a26:	e9d9 2300 	ldrd	r2, r3, [r9]
   e2a2a:	4650      	mov	r0, sl
   e2a2c:	4659      	mov	r1, fp
   e2a2e:	f7fe f869 	bl	e0b04 <__aeabi_ddiv>
   e2a32:	e7ef      	b.n	e2a14 <_strtod_r+0x434>
   e2a34:	1b2c      	subs	r4, r5, r4
   e2a36:	444c      	add	r4, r9
   e2a38:	2c00      	cmp	r4, #0
   e2a3a:	dd57      	ble.n	e2aec <_strtod_r+0x50c>
   e2a3c:	f014 010f 	ands.w	r1, r4, #15
   e2a40:	d00a      	beq.n	e2a58 <_strtod_r+0x478>
   e2a42:	4b5c      	ldr	r3, [pc, #368]	; (e2bb4 <_strtod_r+0x5d4>)
   e2a44:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e2a48:	4652      	mov	r2, sl
   e2a4a:	465b      	mov	r3, fp
   e2a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
   e2a50:	f7fd ff2e 	bl	e08b0 <__aeabi_dmul>
   e2a54:	4682      	mov	sl, r0
   e2a56:	468b      	mov	fp, r1
   e2a58:	f034 040f 	bics.w	r4, r4, #15
   e2a5c:	f000 80b8 	beq.w	e2bd0 <_strtod_r+0x5f0>
   e2a60:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e2a64:	dd0b      	ble.n	e2a7e <_strtod_r+0x49e>
   e2a66:	2400      	movs	r4, #0
   e2a68:	4625      	mov	r5, r4
   e2a6a:	9405      	str	r4, [sp, #20]
   e2a6c:	9404      	str	r4, [sp, #16]
   e2a6e:	9a02      	ldr	r2, [sp, #8]
   e2a70:	f8df b150 	ldr.w	fp, [pc, #336]	; e2bc4 <_strtod_r+0x5e4>
   e2a74:	2322      	movs	r3, #34	; 0x22
   e2a76:	6013      	str	r3, [r2, #0]
   e2a78:	f04f 0a00 	mov.w	sl, #0
   e2a7c:	e187      	b.n	e2d8e <_strtod_r+0x7ae>
   e2a7e:	4e4e      	ldr	r6, [pc, #312]	; (e2bb8 <_strtod_r+0x5d8>)
   e2a80:	2300      	movs	r3, #0
   e2a82:	1124      	asrs	r4, r4, #4
   e2a84:	4650      	mov	r0, sl
   e2a86:	4659      	mov	r1, fp
   e2a88:	4698      	mov	r8, r3
   e2a8a:	4637      	mov	r7, r6
   e2a8c:	2c01      	cmp	r4, #1
   e2a8e:	dd0b      	ble.n	e2aa8 <_strtod_r+0x4c8>
   e2a90:	07e2      	lsls	r2, r4, #31
   e2a92:	d504      	bpl.n	e2a9e <_strtod_r+0x4be>
   e2a94:	e9d6 2300 	ldrd	r2, r3, [r6]
   e2a98:	f7fd ff0a 	bl	e08b0 <__aeabi_dmul>
   e2a9c:	2301      	movs	r3, #1
   e2a9e:	f108 0801 	add.w	r8, r8, #1
   e2aa2:	1064      	asrs	r4, r4, #1
   e2aa4:	3608      	adds	r6, #8
   e2aa6:	e7f1      	b.n	e2a8c <_strtod_r+0x4ac>
   e2aa8:	b10b      	cbz	r3, e2aae <_strtod_r+0x4ce>
   e2aaa:	4682      	mov	sl, r0
   e2aac:	468b      	mov	fp, r1
   e2aae:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e2ab2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e2ab6:	4652      	mov	r2, sl
   e2ab8:	465b      	mov	r3, fp
   e2aba:	e9d7 0100 	ldrd	r0, r1, [r7]
   e2abe:	f7fd fef7 	bl	e08b0 <__aeabi_dmul>
   e2ac2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e2ac6:	468b      	mov	fp, r1
   e2ac8:	460a      	mov	r2, r1
   e2aca:	0d1b      	lsrs	r3, r3, #20
   e2acc:	493b      	ldr	r1, [pc, #236]	; (e2bbc <_strtod_r+0x5dc>)
   e2ace:	051b      	lsls	r3, r3, #20
   e2ad0:	428b      	cmp	r3, r1
   e2ad2:	4682      	mov	sl, r0
   e2ad4:	d8c7      	bhi.n	e2a66 <_strtod_r+0x486>
   e2ad6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e2ada:	428b      	cmp	r3, r1
   e2adc:	bf86      	itte	hi
   e2ade:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e2bcc <_strtod_r+0x5ec>
   e2ae2:	f04f 3aff 	movhi.w	sl, #4294967295
   e2ae6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e2aea:	e071      	b.n	e2bd0 <_strtod_r+0x5f0>
   e2aec:	d070      	beq.n	e2bd0 <_strtod_r+0x5f0>
   e2aee:	4264      	negs	r4, r4
   e2af0:	f014 020f 	ands.w	r2, r4, #15
   e2af4:	d00a      	beq.n	e2b0c <_strtod_r+0x52c>
   e2af6:	4b2f      	ldr	r3, [pc, #188]	; (e2bb4 <_strtod_r+0x5d4>)
   e2af8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e2afc:	4650      	mov	r0, sl
   e2afe:	4659      	mov	r1, fp
   e2b00:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2b04:	f7fd fffe 	bl	e0b04 <__aeabi_ddiv>
   e2b08:	4682      	mov	sl, r0
   e2b0a:	468b      	mov	fp, r1
   e2b0c:	1124      	asrs	r4, r4, #4
   e2b0e:	d05f      	beq.n	e2bd0 <_strtod_r+0x5f0>
   e2b10:	2c1f      	cmp	r4, #31
   e2b12:	dd04      	ble.n	e2b1e <_strtod_r+0x53e>
   e2b14:	2400      	movs	r4, #0
   e2b16:	4625      	mov	r5, r4
   e2b18:	9405      	str	r4, [sp, #20]
   e2b1a:	9404      	str	r4, [sp, #16]
   e2b1c:	e130      	b.n	e2d80 <_strtod_r+0x7a0>
   e2b1e:	f014 0f10 	tst.w	r4, #16
   e2b22:	bf0c      	ite	eq
   e2b24:	2300      	moveq	r3, #0
   e2b26:	236a      	movne	r3, #106	; 0x6a
   e2b28:	4e25      	ldr	r6, [pc, #148]	; (e2bc0 <_strtod_r+0x5e0>)
   e2b2a:	9303      	str	r3, [sp, #12]
   e2b2c:	4650      	mov	r0, sl
   e2b2e:	4659      	mov	r1, fp
   e2b30:	2300      	movs	r3, #0
   e2b32:	2c00      	cmp	r4, #0
   e2b34:	dd09      	ble.n	e2b4a <_strtod_r+0x56a>
   e2b36:	07e2      	lsls	r2, r4, #31
   e2b38:	d504      	bpl.n	e2b44 <_strtod_r+0x564>
   e2b3a:	e9d6 2300 	ldrd	r2, r3, [r6]
   e2b3e:	f7fd feb7 	bl	e08b0 <__aeabi_dmul>
   e2b42:	2301      	movs	r3, #1
   e2b44:	1064      	asrs	r4, r4, #1
   e2b46:	3608      	adds	r6, #8
   e2b48:	e7f3      	b.n	e2b32 <_strtod_r+0x552>
   e2b4a:	b10b      	cbz	r3, e2b50 <_strtod_r+0x570>
   e2b4c:	4682      	mov	sl, r0
   e2b4e:	468b      	mov	fp, r1
   e2b50:	9b03      	ldr	r3, [sp, #12]
   e2b52:	b1eb      	cbz	r3, e2b90 <_strtod_r+0x5b0>
   e2b54:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e2b58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e2b5c:	2b00      	cmp	r3, #0
   e2b5e:	4659      	mov	r1, fp
   e2b60:	dd16      	ble.n	e2b90 <_strtod_r+0x5b0>
   e2b62:	2b1f      	cmp	r3, #31
   e2b64:	dd0e      	ble.n	e2b84 <_strtod_r+0x5a4>
   e2b66:	2b34      	cmp	r3, #52	; 0x34
   e2b68:	bfde      	ittt	le
   e2b6a:	3b20      	suble	r3, #32
   e2b6c:	f04f 32ff 	movle.w	r2, #4294967295
   e2b70:	fa02 f303 	lslle.w	r3, r2, r3
   e2b74:	f04f 0a00 	mov.w	sl, #0
   e2b78:	bfcc      	ite	gt
   e2b7a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e2b7e:	ea03 0b01 	andle.w	fp, r3, r1
   e2b82:	e005      	b.n	e2b90 <_strtod_r+0x5b0>
   e2b84:	f04f 32ff 	mov.w	r2, #4294967295
   e2b88:	fa02 f303 	lsl.w	r3, r2, r3
   e2b8c:	ea03 0a0a 	and.w	sl, r3, sl
   e2b90:	2200      	movs	r2, #0
   e2b92:	2300      	movs	r3, #0
   e2b94:	4650      	mov	r0, sl
   e2b96:	4659      	mov	r1, fp
   e2b98:	f7fe f8f2 	bl	e0d80 <__aeabi_dcmpeq>
   e2b9c:	2800      	cmp	r0, #0
   e2b9e:	d1b9      	bne.n	e2b14 <_strtod_r+0x534>
   e2ba0:	e018      	b.n	e2bd4 <_strtod_r+0x5f4>
   e2ba2:	bf00      	nop
   e2ba4:	000e5755 	.word	0x000e5755
   e2ba8:	000e5f4c 	.word	0x000e5f4c
   e2bac:	000e5f89 	.word	0x000e5f89
   e2bb0:	000e5f38 	.word	0x000e5f38
   e2bb4:	000e61e8 	.word	0x000e61e8
   e2bb8:	000e62b0 	.word	0x000e62b0
   e2bbc:	7ca00000 	.word	0x7ca00000
   e2bc0:	000e5f58 	.word	0x000e5f58
   e2bc4:	7ff00000 	.word	0x7ff00000
   e2bc8:	fff80000 	.word	0xfff80000
   e2bcc:	7fefffff 	.word	0x7fefffff
   e2bd0:	2300      	movs	r3, #0
   e2bd2:	9303      	str	r3, [sp, #12]
   e2bd4:	9b05      	ldr	r3, [sp, #20]
   e2bd6:	9300      	str	r3, [sp, #0]
   e2bd8:	9a04      	ldr	r2, [sp, #16]
   e2bda:	9907      	ldr	r1, [sp, #28]
   e2bdc:	9802      	ldr	r0, [sp, #8]
   e2bde:	462b      	mov	r3, r5
   e2be0:	f001 faff 	bl	e41e2 <__s2b>
   e2be4:	9005      	str	r0, [sp, #20]
   e2be6:	2800      	cmp	r0, #0
   e2be8:	f43f af3d 	beq.w	e2a66 <_strtod_r+0x486>
   e2bec:	f1b9 0f00 	cmp.w	r9, #0
   e2bf0:	f1c9 0300 	rsb	r3, r9, #0
   e2bf4:	bfa8      	it	ge
   e2bf6:	2300      	movge	r3, #0
   e2bf8:	930d      	str	r3, [sp, #52]	; 0x34
   e2bfa:	2400      	movs	r4, #0
   e2bfc:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e2c00:	9312      	str	r3, [sp, #72]	; 0x48
   e2c02:	4625      	mov	r5, r4
   e2c04:	9b05      	ldr	r3, [sp, #20]
   e2c06:	9802      	ldr	r0, [sp, #8]
   e2c08:	6859      	ldr	r1, [r3, #4]
   e2c0a:	f001 fa63 	bl	e40d4 <_Balloc>
   e2c0e:	9004      	str	r0, [sp, #16]
   e2c10:	2800      	cmp	r0, #0
   e2c12:	f43f af2c 	beq.w	e2a6e <_strtod_r+0x48e>
   e2c16:	9b05      	ldr	r3, [sp, #20]
   e2c18:	691a      	ldr	r2, [r3, #16]
   e2c1a:	3202      	adds	r2, #2
   e2c1c:	f103 010c 	add.w	r1, r3, #12
   e2c20:	0092      	lsls	r2, r2, #2
   e2c22:	300c      	adds	r0, #12
   e2c24:	f7fe fc9d 	bl	e1562 <memcpy>
   e2c28:	aa1a      	add	r2, sp, #104	; 0x68
   e2c2a:	a919      	add	r1, sp, #100	; 0x64
   e2c2c:	ec4b ab10 	vmov	d0, sl, fp
   e2c30:	9802      	ldr	r0, [sp, #8]
   e2c32:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e2c36:	f001 fd88 	bl	e474a <__d2b>
   e2c3a:	9018      	str	r0, [sp, #96]	; 0x60
   e2c3c:	2800      	cmp	r0, #0
   e2c3e:	f43f af16 	beq.w	e2a6e <_strtod_r+0x48e>
   e2c42:	2101      	movs	r1, #1
   e2c44:	9802      	ldr	r0, [sp, #8]
   e2c46:	f001 fb57 	bl	e42f8 <__i2b>
   e2c4a:	4605      	mov	r5, r0
   e2c4c:	2800      	cmp	r0, #0
   e2c4e:	f43f af0e 	beq.w	e2a6e <_strtod_r+0x48e>
   e2c52:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e2c54:	9903      	ldr	r1, [sp, #12]
   e2c56:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e2c58:	2b00      	cmp	r3, #0
   e2c5a:	bfad      	iteet	ge
   e2c5c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e2c5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e2c60:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e2c64:	eb02 0803 	addge.w	r8, r2, r3
   e2c68:	bfb8      	it	lt
   e2c6a:	1ad2      	sublt	r2, r2, r3
   e2c6c:	eba3 0301 	sub.w	r3, r3, r1
   e2c70:	4433      	add	r3, r6
   e2c72:	49b5      	ldr	r1, [pc, #724]	; (e2f48 <_strtod_r+0x968>)
   e2c74:	bfa8      	it	ge
   e2c76:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e2c78:	3b01      	subs	r3, #1
   e2c7a:	428b      	cmp	r3, r1
   e2c7c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e2c80:	f280 808a 	bge.w	e2d98 <_strtod_r+0x7b8>
   e2c84:	1ac9      	subs	r1, r1, r3
   e2c86:	291f      	cmp	r1, #31
   e2c88:	bfc8      	it	gt
   e2c8a:	4fb0      	ldrgt	r7, [pc, #704]	; (e2f4c <_strtod_r+0x96c>)
   e2c8c:	f04f 0901 	mov.w	r9, #1
   e2c90:	bfd4      	ite	le
   e2c92:	fa09 f301 	lslle.w	r3, r9, r1
   e2c96:	1aff      	subgt	r7, r7, r3
   e2c98:	eba6 0601 	sub.w	r6, r6, r1
   e2c9c:	bfd9      	ittee	le
   e2c9e:	9306      	strle	r3, [sp, #24]
   e2ca0:	2700      	movle	r7, #0
   e2ca2:	fa09 f707 	lslgt.w	r7, r9, r7
   e2ca6:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e2caa:	eb08 0906 	add.w	r9, r8, r6
   e2cae:	9b03      	ldr	r3, [sp, #12]
   e2cb0:	45c8      	cmp	r8, r9
   e2cb2:	4416      	add	r6, r2
   e2cb4:	441e      	add	r6, r3
   e2cb6:	4643      	mov	r3, r8
   e2cb8:	bfa8      	it	ge
   e2cba:	464b      	movge	r3, r9
   e2cbc:	42b3      	cmp	r3, r6
   e2cbe:	bfa8      	it	ge
   e2cc0:	4633      	movge	r3, r6
   e2cc2:	2b00      	cmp	r3, #0
   e2cc4:	bfc2      	ittt	gt
   e2cc6:	ebc3 0909 	rsbgt	r9, r3, r9
   e2cca:	1af6      	subgt	r6, r6, r3
   e2ccc:	ebc3 0808 	rsbgt	r8, r3, r8
   e2cd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e2cd2:	2b00      	cmp	r3, #0
   e2cd4:	d164      	bne.n	e2da0 <_strtod_r+0x7c0>
   e2cd6:	f1b9 0f00 	cmp.w	r9, #0
   e2cda:	dc7a      	bgt.n	e2dd2 <_strtod_r+0x7f2>
   e2cdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e2cde:	2b00      	cmp	r3, #0
   e2ce0:	f040 8081 	bne.w	e2de6 <_strtod_r+0x806>
   e2ce4:	2e00      	cmp	r6, #0
   e2ce6:	f300 8088 	bgt.w	e2dfa <_strtod_r+0x81a>
   e2cea:	f1b8 0f00 	cmp.w	r8, #0
   e2cee:	f300 808e 	bgt.w	e2e0e <_strtod_r+0x82e>
   e2cf2:	9a04      	ldr	r2, [sp, #16]
   e2cf4:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2cf6:	9802      	ldr	r0, [sp, #8]
   e2cf8:	f001 fc53 	bl	e45a2 <__mdiff>
   e2cfc:	4604      	mov	r4, r0
   e2cfe:	2800      	cmp	r0, #0
   e2d00:	f43f aeb5 	beq.w	e2a6e <_strtod_r+0x48e>
   e2d04:	68c3      	ldr	r3, [r0, #12]
   e2d06:	9307      	str	r3, [sp, #28]
   e2d08:	2300      	movs	r3, #0
   e2d0a:	60c3      	str	r3, [r0, #12]
   e2d0c:	4629      	mov	r1, r5
   e2d0e:	f001 fc2c 	bl	e456a <__mcmp>
   e2d12:	2800      	cmp	r0, #0
   e2d14:	f280 8089 	bge.w	e2e2a <_strtod_r+0x84a>
   e2d18:	9b07      	ldr	r3, [sp, #28]
   e2d1a:	2b00      	cmp	r3, #0
   e2d1c:	f040 8204 	bne.w	e3128 <_strtod_r+0xb48>
   e2d20:	f1ba 0f00 	cmp.w	sl, #0
   e2d24:	f040 8200 	bne.w	e3128 <_strtod_r+0xb48>
   e2d28:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2d2c:	2b00      	cmp	r3, #0
   e2d2e:	f040 81fb 	bne.w	e3128 <_strtod_r+0xb48>
   e2d32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2d36:	0d1b      	lsrs	r3, r3, #20
   e2d38:	051b      	lsls	r3, r3, #20
   e2d3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e2d3e:	f240 81f3 	bls.w	e3128 <_strtod_r+0xb48>
   e2d42:	6963      	ldr	r3, [r4, #20]
   e2d44:	2b00      	cmp	r3, #0
   e2d46:	d06c      	beq.n	e2e22 <_strtod_r+0x842>
   e2d48:	4621      	mov	r1, r4
   e2d4a:	2201      	movs	r2, #1
   e2d4c:	9802      	ldr	r0, [sp, #8]
   e2d4e:	f001 fbbb 	bl	e44c8 <__lshift>
   e2d52:	4629      	mov	r1, r5
   e2d54:	4604      	mov	r4, r0
   e2d56:	f001 fc08 	bl	e456a <__mcmp>
   e2d5a:	2800      	cmp	r0, #0
   e2d5c:	f340 81e4 	ble.w	e3128 <_strtod_r+0xb48>
   e2d60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2d64:	9a03      	ldr	r2, [sp, #12]
   e2d66:	0d1b      	lsrs	r3, r3, #20
   e2d68:	051b      	lsls	r3, r3, #20
   e2d6a:	2a00      	cmp	r2, #0
   e2d6c:	f000 808c 	beq.w	e2e88 <_strtod_r+0x8a8>
   e2d70:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e2d74:	f300 8088 	bgt.w	e2e88 <_strtod_r+0x8a8>
   e2d78:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e2d7c:	f300 81d6 	bgt.w	e312c <_strtod_r+0xb4c>
   e2d80:	9a02      	ldr	r2, [sp, #8]
   e2d82:	2322      	movs	r3, #34	; 0x22
   e2d84:	f04f 0a00 	mov.w	sl, #0
   e2d88:	f04f 0b00 	mov.w	fp, #0
   e2d8c:	6013      	str	r3, [r2, #0]
   e2d8e:	9b05      	ldr	r3, [sp, #20]
   e2d90:	2b00      	cmp	r3, #0
   e2d92:	f040 81dc 	bne.w	e314e <_strtod_r+0xb6e>
   e2d96:	e1ee      	b.n	e3176 <_strtod_r+0xb96>
   e2d98:	2301      	movs	r3, #1
   e2d9a:	2700      	movs	r7, #0
   e2d9c:	9306      	str	r3, [sp, #24]
   e2d9e:	e784      	b.n	e2caa <_strtod_r+0x6ca>
   e2da0:	4629      	mov	r1, r5
   e2da2:	461a      	mov	r2, r3
   e2da4:	9802      	ldr	r0, [sp, #8]
   e2da6:	f001 fb41 	bl	e442c <__pow5mult>
   e2daa:	4605      	mov	r5, r0
   e2dac:	2800      	cmp	r0, #0
   e2dae:	f43f ae5e 	beq.w	e2a6e <_strtod_r+0x48e>
   e2db2:	4601      	mov	r1, r0
   e2db4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e2db6:	9802      	ldr	r0, [sp, #8]
   e2db8:	f001 faa7 	bl	e430a <__multiply>
   e2dbc:	9007      	str	r0, [sp, #28]
   e2dbe:	2800      	cmp	r0, #0
   e2dc0:	f43f ae55 	beq.w	e2a6e <_strtod_r+0x48e>
   e2dc4:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2dc6:	9802      	ldr	r0, [sp, #8]
   e2dc8:	f001 f9b9 	bl	e413e <_Bfree>
   e2dcc:	9b07      	ldr	r3, [sp, #28]
   e2dce:	9318      	str	r3, [sp, #96]	; 0x60
   e2dd0:	e781      	b.n	e2cd6 <_strtod_r+0x6f6>
   e2dd2:	464a      	mov	r2, r9
   e2dd4:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2dd6:	9802      	ldr	r0, [sp, #8]
   e2dd8:	f001 fb76 	bl	e44c8 <__lshift>
   e2ddc:	9018      	str	r0, [sp, #96]	; 0x60
   e2dde:	2800      	cmp	r0, #0
   e2de0:	f47f af7c 	bne.w	e2cdc <_strtod_r+0x6fc>
   e2de4:	e643      	b.n	e2a6e <_strtod_r+0x48e>
   e2de6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e2de8:	9904      	ldr	r1, [sp, #16]
   e2dea:	9802      	ldr	r0, [sp, #8]
   e2dec:	f001 fb1e 	bl	e442c <__pow5mult>
   e2df0:	9004      	str	r0, [sp, #16]
   e2df2:	2800      	cmp	r0, #0
   e2df4:	f47f af76 	bne.w	e2ce4 <_strtod_r+0x704>
   e2df8:	e639      	b.n	e2a6e <_strtod_r+0x48e>
   e2dfa:	4632      	mov	r2, r6
   e2dfc:	9904      	ldr	r1, [sp, #16]
   e2dfe:	9802      	ldr	r0, [sp, #8]
   e2e00:	f001 fb62 	bl	e44c8 <__lshift>
   e2e04:	9004      	str	r0, [sp, #16]
   e2e06:	2800      	cmp	r0, #0
   e2e08:	f47f af6f 	bne.w	e2cea <_strtod_r+0x70a>
   e2e0c:	e62f      	b.n	e2a6e <_strtod_r+0x48e>
   e2e0e:	4629      	mov	r1, r5
   e2e10:	4642      	mov	r2, r8
   e2e12:	9802      	ldr	r0, [sp, #8]
   e2e14:	f001 fb58 	bl	e44c8 <__lshift>
   e2e18:	4605      	mov	r5, r0
   e2e1a:	2800      	cmp	r0, #0
   e2e1c:	f47f af69 	bne.w	e2cf2 <_strtod_r+0x712>
   e2e20:	e625      	b.n	e2a6e <_strtod_r+0x48e>
   e2e22:	6923      	ldr	r3, [r4, #16]
   e2e24:	2b01      	cmp	r3, #1
   e2e26:	dc8f      	bgt.n	e2d48 <_strtod_r+0x768>
   e2e28:	e17e      	b.n	e3128 <_strtod_r+0xb48>
   e2e2a:	d161      	bne.n	e2ef0 <_strtod_r+0x910>
   e2e2c:	9a07      	ldr	r2, [sp, #28]
   e2e2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2e32:	b322      	cbz	r2, e2e7e <_strtod_r+0x89e>
   e2e34:	4946      	ldr	r1, [pc, #280]	; (e2f50 <_strtod_r+0x970>)
   e2e36:	428b      	cmp	r3, r1
   e2e38:	465a      	mov	r2, fp
   e2e3a:	d12e      	bne.n	e2e9a <_strtod_r+0x8ba>
   e2e3c:	9b03      	ldr	r3, [sp, #12]
   e2e3e:	4651      	mov	r1, sl
   e2e40:	b163      	cbz	r3, e2e5c <_strtod_r+0x87c>
   e2e42:	4b44      	ldr	r3, [pc, #272]	; (e2f54 <_strtod_r+0x974>)
   e2e44:	4013      	ands	r3, r2
   e2e46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e2e4a:	d807      	bhi.n	e2e5c <_strtod_r+0x87c>
   e2e4c:	0d1b      	lsrs	r3, r3, #20
   e2e4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e2e52:	f04f 30ff 	mov.w	r0, #4294967295
   e2e56:	fa00 f303 	lsl.w	r3, r0, r3
   e2e5a:	e001      	b.n	e2e60 <_strtod_r+0x880>
   e2e5c:	f04f 33ff 	mov.w	r3, #4294967295
   e2e60:	428b      	cmp	r3, r1
   e2e62:	d11a      	bne.n	e2e9a <_strtod_r+0x8ba>
   e2e64:	493c      	ldr	r1, [pc, #240]	; (e2f58 <_strtod_r+0x978>)
   e2e66:	428a      	cmp	r2, r1
   e2e68:	d102      	bne.n	e2e70 <_strtod_r+0x890>
   e2e6a:	3301      	adds	r3, #1
   e2e6c:	f43f adff 	beq.w	e2a6e <_strtod_r+0x48e>
   e2e70:	4b38      	ldr	r3, [pc, #224]	; (e2f54 <_strtod_r+0x974>)
   e2e72:	4013      	ands	r3, r2
   e2e74:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e2e78:	f04f 0a00 	mov.w	sl, #0
   e2e7c:	e154      	b.n	e3128 <_strtod_r+0xb48>
   e2e7e:	b963      	cbnz	r3, e2e9a <_strtod_r+0x8ba>
   e2e80:	f1ba 0f00 	cmp.w	sl, #0
   e2e84:	d109      	bne.n	e2e9a <_strtod_r+0x8ba>
   e2e86:	e76b      	b.n	e2d60 <_strtod_r+0x780>
   e2e88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e2e8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e2e90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e2e94:	f04f 3aff 	mov.w	sl, #4294967295
   e2e98:	e146      	b.n	e3128 <_strtod_r+0xb48>
   e2e9a:	b117      	cbz	r7, e2ea2 <_strtod_r+0x8c2>
   e2e9c:	ea17 0f0b 	tst.w	r7, fp
   e2ea0:	e002      	b.n	e2ea8 <_strtod_r+0x8c8>
   e2ea2:	9b06      	ldr	r3, [sp, #24]
   e2ea4:	ea13 0f0a 	tst.w	r3, sl
   e2ea8:	f000 813e 	beq.w	e3128 <_strtod_r+0xb48>
   e2eac:	9b07      	ldr	r3, [sp, #28]
   e2eae:	9a03      	ldr	r2, [sp, #12]
   e2eb0:	4650      	mov	r0, sl
   e2eb2:	4659      	mov	r1, fp
   e2eb4:	b153      	cbz	r3, e2ecc <_strtod_r+0x8ec>
   e2eb6:	f7ff fb77 	bl	e25a8 <sulp>
   e2eba:	4602      	mov	r2, r0
   e2ebc:	460b      	mov	r3, r1
   e2ebe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2ec2:	f7fd fb43 	bl	e054c <__adddf3>
   e2ec6:	4682      	mov	sl, r0
   e2ec8:	468b      	mov	fp, r1
   e2eca:	e12d      	b.n	e3128 <_strtod_r+0xb48>
   e2ecc:	f7ff fb6c 	bl	e25a8 <sulp>
   e2ed0:	4602      	mov	r2, r0
   e2ed2:	460b      	mov	r3, r1
   e2ed4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2ed8:	f7fd fb36 	bl	e0548 <__aeabi_dsub>
   e2edc:	2200      	movs	r2, #0
   e2ede:	2300      	movs	r3, #0
   e2ee0:	4682      	mov	sl, r0
   e2ee2:	468b      	mov	fp, r1
   e2ee4:	f7fd ff4c 	bl	e0d80 <__aeabi_dcmpeq>
   e2ee8:	2800      	cmp	r0, #0
   e2eea:	f47f af49 	bne.w	e2d80 <_strtod_r+0x7a0>
   e2eee:	e11b      	b.n	e3128 <_strtod_r+0xb48>
   e2ef0:	4629      	mov	r1, r5
   e2ef2:	4620      	mov	r0, r4
   e2ef4:	f001 fc77 	bl	e47e6 <__ratio>
   e2ef8:	ec57 6b10 	vmov	r6, r7, d0
   e2efc:	2200      	movs	r2, #0
   e2efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e2f02:	ee10 0a10 	vmov	r0, s0
   e2f06:	4639      	mov	r1, r7
   e2f08:	f7fd ff4e 	bl	e0da8 <__aeabi_dcmple>
   e2f0c:	2800      	cmp	r0, #0
   e2f0e:	d042      	beq.n	e2f96 <_strtod_r+0x9b6>
   e2f10:	9b07      	ldr	r3, [sp, #28]
   e2f12:	b123      	cbz	r3, e2f1e <_strtod_r+0x93e>
   e2f14:	f04f 0800 	mov.w	r8, #0
   e2f18:	f8df 9040 	ldr.w	r9, [pc, #64]	; e2f5c <_strtod_r+0x97c>
   e2f1c:	e011      	b.n	e2f42 <_strtod_r+0x962>
   e2f1e:	f1ba 0f00 	cmp.w	sl, #0
   e2f22:	d103      	bne.n	e2f2c <_strtod_r+0x94c>
   e2f24:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2f28:	b93b      	cbnz	r3, e2f3a <_strtod_r+0x95a>
   e2f2a:	e01b      	b.n	e2f64 <_strtod_r+0x984>
   e2f2c:	f1ba 0f01 	cmp.w	sl, #1
   e2f30:	d103      	bne.n	e2f3a <_strtod_r+0x95a>
   e2f32:	f1bb 0f00 	cmp.w	fp, #0
   e2f36:	f43f af23 	beq.w	e2d80 <_strtod_r+0x7a0>
   e2f3a:	f8df 9024 	ldr.w	r9, [pc, #36]	; e2f60 <_strtod_r+0x980>
   e2f3e:	f04f 0800 	mov.w	r8, #0
   e2f42:	2600      	movs	r6, #0
   e2f44:	4f05      	ldr	r7, [pc, #20]	; (e2f5c <_strtod_r+0x97c>)
   e2f46:	e039      	b.n	e2fbc <_strtod_r+0x9dc>
   e2f48:	fffffc02 	.word	0xfffffc02
   e2f4c:	fffffbe2 	.word	0xfffffbe2
   e2f50:	000fffff 	.word	0x000fffff
   e2f54:	7ff00000 	.word	0x7ff00000
   e2f58:	7fefffff 	.word	0x7fefffff
   e2f5c:	3ff00000 	.word	0x3ff00000
   e2f60:	bff00000 	.word	0xbff00000
   e2f64:	2200      	movs	r2, #0
   e2f66:	4b98      	ldr	r3, [pc, #608]	; (e31c8 <_strtod_r+0xbe8>)
   e2f68:	4630      	mov	r0, r6
   e2f6a:	4639      	mov	r1, r7
   e2f6c:	f7fd ff12 	bl	e0d94 <__aeabi_dcmplt>
   e2f70:	b940      	cbnz	r0, e2f84 <_strtod_r+0x9a4>
   e2f72:	4630      	mov	r0, r6
   e2f74:	4639      	mov	r1, r7
   e2f76:	2200      	movs	r2, #0
   e2f78:	4b94      	ldr	r3, [pc, #592]	; (e31cc <_strtod_r+0xbec>)
   e2f7a:	f7fd fc99 	bl	e08b0 <__aeabi_dmul>
   e2f7e:	4606      	mov	r6, r0
   e2f80:	460f      	mov	r7, r1
   e2f82:	e001      	b.n	e2f88 <_strtod_r+0x9a8>
   e2f84:	4f91      	ldr	r7, [pc, #580]	; (e31cc <_strtod_r+0xbec>)
   e2f86:	2600      	movs	r6, #0
   e2f88:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e2f8c:	9614      	str	r6, [sp, #80]	; 0x50
   e2f8e:	9315      	str	r3, [sp, #84]	; 0x54
   e2f90:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e2f94:	e012      	b.n	e2fbc <_strtod_r+0x9dc>
   e2f96:	4b8d      	ldr	r3, [pc, #564]	; (e31cc <_strtod_r+0xbec>)
   e2f98:	4630      	mov	r0, r6
   e2f9a:	4639      	mov	r1, r7
   e2f9c:	2200      	movs	r2, #0
   e2f9e:	f7fd fc87 	bl	e08b0 <__aeabi_dmul>
   e2fa2:	9b07      	ldr	r3, [sp, #28]
   e2fa4:	4606      	mov	r6, r0
   e2fa6:	460f      	mov	r7, r1
   e2fa8:	b923      	cbnz	r3, e2fb4 <_strtod_r+0x9d4>
   e2faa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e2fae:	900e      	str	r0, [sp, #56]	; 0x38
   e2fb0:	930f      	str	r3, [sp, #60]	; 0x3c
   e2fb2:	e001      	b.n	e2fb8 <_strtod_r+0x9d8>
   e2fb4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e2fb8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e2fbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2fc0:	0d1b      	lsrs	r3, r3, #20
   e2fc2:	051b      	lsls	r3, r3, #20
   e2fc4:	9306      	str	r3, [sp, #24]
   e2fc6:	9a06      	ldr	r2, [sp, #24]
   e2fc8:	4b81      	ldr	r3, [pc, #516]	; (e31d0 <_strtod_r+0xbf0>)
   e2fca:	429a      	cmp	r2, r3
   e2fcc:	d12b      	bne.n	e3026 <_strtod_r+0xa46>
   e2fce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e2fd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e2fd6:	ec4b ab10 	vmov	d0, sl, fp
   e2fda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e2fde:	f001 fb3f 	bl	e4660 <__ulp>
   e2fe2:	4640      	mov	r0, r8
   e2fe4:	ec53 2b10 	vmov	r2, r3, d0
   e2fe8:	4649      	mov	r1, r9
   e2fea:	f7fd fc61 	bl	e08b0 <__aeabi_dmul>
   e2fee:	4652      	mov	r2, sl
   e2ff0:	465b      	mov	r3, fp
   e2ff2:	f7fd faab 	bl	e054c <__adddf3>
   e2ff6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e2ffa:	0d1b      	lsrs	r3, r3, #20
   e2ffc:	4a75      	ldr	r2, [pc, #468]	; (e31d4 <_strtod_r+0xbf4>)
   e2ffe:	051b      	lsls	r3, r3, #20
   e3000:	4293      	cmp	r3, r2
   e3002:	4682      	mov	sl, r0
   e3004:	d90c      	bls.n	e3020 <_strtod_r+0xa40>
   e3006:	4b74      	ldr	r3, [pc, #464]	; (e31d8 <_strtod_r+0xbf8>)
   e3008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e300a:	429a      	cmp	r2, r3
   e300c:	d103      	bne.n	e3016 <_strtod_r+0xa36>
   e300e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3010:	3301      	adds	r3, #1
   e3012:	f43f ad2c 	beq.w	e2a6e <_strtod_r+0x48e>
   e3016:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e31d8 <_strtod_r+0xbf8>
   e301a:	f04f 3aff 	mov.w	sl, #4294967295
   e301e:	e072      	b.n	e3106 <_strtod_r+0xb26>
   e3020:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e3024:	e038      	b.n	e3098 <_strtod_r+0xab8>
   e3026:	9b03      	ldr	r3, [sp, #12]
   e3028:	b333      	cbz	r3, e3078 <_strtod_r+0xa98>
   e302a:	9b06      	ldr	r3, [sp, #24]
   e302c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e3030:	d822      	bhi.n	e3078 <_strtod_r+0xa98>
   e3032:	a35d      	add	r3, pc, #372	; (adr r3, e31a8 <_strtod_r+0xbc8>)
   e3034:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3038:	4630      	mov	r0, r6
   e303a:	4639      	mov	r1, r7
   e303c:	f7fd feb4 	bl	e0da8 <__aeabi_dcmple>
   e3040:	b1a8      	cbz	r0, e306e <_strtod_r+0xa8e>
   e3042:	4639      	mov	r1, r7
   e3044:	4630      	mov	r0, r6
   e3046:	f7fd ff0b 	bl	e0e60 <__aeabi_d2uiz>
   e304a:	2800      	cmp	r0, #0
   e304c:	bf08      	it	eq
   e304e:	2001      	moveq	r0, #1
   e3050:	f7fd fbb8 	bl	e07c4 <__aeabi_ui2d>
   e3054:	9b07      	ldr	r3, [sp, #28]
   e3056:	4606      	mov	r6, r0
   e3058:	460f      	mov	r7, r1
   e305a:	b923      	cbnz	r3, e3066 <_strtod_r+0xa86>
   e305c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e3060:	9010      	str	r0, [sp, #64]	; 0x40
   e3062:	9311      	str	r3, [sp, #68]	; 0x44
   e3064:	e001      	b.n	e306a <_strtod_r+0xa8a>
   e3066:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e306a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e306e:	9a06      	ldr	r2, [sp, #24]
   e3070:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e3074:	ebc2 0903 	rsb	r9, r2, r3
   e3078:	ed9d 0b08 	vldr	d0, [sp, #32]
   e307c:	f001 faf0 	bl	e4660 <__ulp>
   e3080:	4640      	mov	r0, r8
   e3082:	ec53 2b10 	vmov	r2, r3, d0
   e3086:	4649      	mov	r1, r9
   e3088:	f7fd fc12 	bl	e08b0 <__aeabi_dmul>
   e308c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e3090:	f7fd fa5c 	bl	e054c <__adddf3>
   e3094:	4682      	mov	sl, r0
   e3096:	468b      	mov	fp, r1
   e3098:	9b03      	ldr	r3, [sp, #12]
   e309a:	bba3      	cbnz	r3, e3106 <_strtod_r+0xb26>
   e309c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e30a0:	0d1b      	lsrs	r3, r3, #20
   e30a2:	9a06      	ldr	r2, [sp, #24]
   e30a4:	051b      	lsls	r3, r3, #20
   e30a6:	429a      	cmp	r2, r3
   e30a8:	46d8      	mov	r8, fp
   e30aa:	d12c      	bne.n	e3106 <_strtod_r+0xb26>
   e30ac:	4639      	mov	r1, r7
   e30ae:	4630      	mov	r0, r6
   e30b0:	f7fd feae 	bl	e0e10 <__aeabi_d2iz>
   e30b4:	f7fd fb96 	bl	e07e4 <__aeabi_i2d>
   e30b8:	460b      	mov	r3, r1
   e30ba:	4602      	mov	r2, r0
   e30bc:	4639      	mov	r1, r7
   e30be:	4630      	mov	r0, r6
   e30c0:	f7fd fa42 	bl	e0548 <__aeabi_dsub>
   e30c4:	9b07      	ldr	r3, [sp, #28]
   e30c6:	4606      	mov	r6, r0
   e30c8:	460f      	mov	r7, r1
   e30ca:	b92b      	cbnz	r3, e30d8 <_strtod_r+0xaf8>
   e30cc:	f1ba 0f00 	cmp.w	sl, #0
   e30d0:	d102      	bne.n	e30d8 <_strtod_r+0xaf8>
   e30d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e30d6:	b183      	cbz	r3, e30fa <_strtod_r+0xb1a>
   e30d8:	a335      	add	r3, pc, #212	; (adr r3, e31b0 <_strtod_r+0xbd0>)
   e30da:	e9d3 2300 	ldrd	r2, r3, [r3]
   e30de:	4630      	mov	r0, r6
   e30e0:	4639      	mov	r1, r7
   e30e2:	f7fd fe57 	bl	e0d94 <__aeabi_dcmplt>
   e30e6:	2800      	cmp	r0, #0
   e30e8:	d131      	bne.n	e314e <_strtod_r+0xb6e>
   e30ea:	a333      	add	r3, pc, #204	; (adr r3, e31b8 <_strtod_r+0xbd8>)
   e30ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   e30f0:	4630      	mov	r0, r6
   e30f2:	4639      	mov	r1, r7
   e30f4:	f7fd fe6c 	bl	e0dd0 <__aeabi_dcmpgt>
   e30f8:	e004      	b.n	e3104 <_strtod_r+0xb24>
   e30fa:	a331      	add	r3, pc, #196	; (adr r3, e31c0 <_strtod_r+0xbe0>)
   e30fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3100:	f7fd fe48 	bl	e0d94 <__aeabi_dcmplt>
   e3104:	bb18      	cbnz	r0, e314e <_strtod_r+0xb6e>
   e3106:	9918      	ldr	r1, [sp, #96]	; 0x60
   e3108:	9802      	ldr	r0, [sp, #8]
   e310a:	f001 f818 	bl	e413e <_Bfree>
   e310e:	9904      	ldr	r1, [sp, #16]
   e3110:	9802      	ldr	r0, [sp, #8]
   e3112:	f001 f814 	bl	e413e <_Bfree>
   e3116:	4629      	mov	r1, r5
   e3118:	9802      	ldr	r0, [sp, #8]
   e311a:	f001 f810 	bl	e413e <_Bfree>
   e311e:	4621      	mov	r1, r4
   e3120:	9802      	ldr	r0, [sp, #8]
   e3122:	f001 f80c 	bl	e413e <_Bfree>
   e3126:	e56d      	b.n	e2c04 <_strtod_r+0x624>
   e3128:	9b03      	ldr	r3, [sp, #12]
   e312a:	b183      	cbz	r3, e314e <_strtod_r+0xb6e>
   e312c:	4b2b      	ldr	r3, [pc, #172]	; (e31dc <_strtod_r+0xbfc>)
   e312e:	930b      	str	r3, [sp, #44]	; 0x2c
   e3130:	2300      	movs	r3, #0
   e3132:	930a      	str	r3, [sp, #40]	; 0x28
   e3134:	4650      	mov	r0, sl
   e3136:	4659      	mov	r1, fp
   e3138:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e313c:	f7fd fbb8 	bl	e08b0 <__aeabi_dmul>
   e3140:	4682      	mov	sl, r0
   e3142:	468b      	mov	fp, r1
   e3144:	b919      	cbnz	r1, e314e <_strtod_r+0xb6e>
   e3146:	b910      	cbnz	r0, e314e <_strtod_r+0xb6e>
   e3148:	9a02      	ldr	r2, [sp, #8]
   e314a:	2322      	movs	r3, #34	; 0x22
   e314c:	6013      	str	r3, [r2, #0]
   e314e:	9918      	ldr	r1, [sp, #96]	; 0x60
   e3150:	9802      	ldr	r0, [sp, #8]
   e3152:	f000 fff4 	bl	e413e <_Bfree>
   e3156:	9904      	ldr	r1, [sp, #16]
   e3158:	9802      	ldr	r0, [sp, #8]
   e315a:	f000 fff0 	bl	e413e <_Bfree>
   e315e:	4629      	mov	r1, r5
   e3160:	9802      	ldr	r0, [sp, #8]
   e3162:	f000 ffec 	bl	e413e <_Bfree>
   e3166:	9905      	ldr	r1, [sp, #20]
   e3168:	9802      	ldr	r0, [sp, #8]
   e316a:	f000 ffe8 	bl	e413e <_Bfree>
   e316e:	4621      	mov	r1, r4
   e3170:	9802      	ldr	r0, [sp, #8]
   e3172:	f000 ffe4 	bl	e413e <_Bfree>
   e3176:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e3178:	b113      	cbz	r3, e3180 <_strtod_r+0xba0>
   e317a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e317c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e317e:	6013      	str	r3, [r2, #0]
   e3180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e3182:	b11b      	cbz	r3, e318c <_strtod_r+0xbac>
   e3184:	4652      	mov	r2, sl
   e3186:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e318a:	e007      	b.n	e319c <_strtod_r+0xbbc>
   e318c:	4652      	mov	r2, sl
   e318e:	465b      	mov	r3, fp
   e3190:	e004      	b.n	e319c <_strtod_r+0xbbc>
   e3192:	2500      	movs	r5, #0
   e3194:	462a      	mov	r2, r5
   e3196:	2101      	movs	r1, #1
   e3198:	f7ff bb41 	b.w	e281e <_strtod_r+0x23e>
   e319c:	ec43 2b10 	vmov	d0, r2, r3
   e31a0:	b01d      	add	sp, #116	; 0x74
   e31a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e31a6:	bf00      	nop
   e31a8:	ffc00000 	.word	0xffc00000
   e31ac:	41dfffff 	.word	0x41dfffff
   e31b0:	94a03595 	.word	0x94a03595
   e31b4:	3fdfffff 	.word	0x3fdfffff
   e31b8:	35afe535 	.word	0x35afe535
   e31bc:	3fe00000 	.word	0x3fe00000
   e31c0:	94a03595 	.word	0x94a03595
   e31c4:	3fcfffff 	.word	0x3fcfffff
   e31c8:	3ff00000 	.word	0x3ff00000
   e31cc:	3fe00000 	.word	0x3fe00000
   e31d0:	7fe00000 	.word	0x7fe00000
   e31d4:	7c9fffff 	.word	0x7c9fffff
   e31d8:	7fefffff 	.word	0x7fefffff
   e31dc:	39500000 	.word	0x39500000

000e31e0 <strtod>:
   e31e0:	4b02      	ldr	r3, [pc, #8]	; (e31ec <strtod+0xc>)
   e31e2:	460a      	mov	r2, r1
   e31e4:	4601      	mov	r1, r0
   e31e6:	6818      	ldr	r0, [r3, #0]
   e31e8:	f7ff b9fa 	b.w	e25e0 <_strtod_r>
   e31ec:	2003bb80 	.word	0x2003bb80

000e31f0 <_strtol_r>:
   e31f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e31f4:	4680      	mov	r8, r0
   e31f6:	4840      	ldr	r0, [pc, #256]	; (e32f8 <_strtol_r+0x108>)
   e31f8:	f8d0 9000 	ldr.w	r9, [r0]
   e31fc:	460f      	mov	r7, r1
   e31fe:	463d      	mov	r5, r7
   e3200:	f815 4b01 	ldrb.w	r4, [r5], #1
   e3204:	eb09 0004 	add.w	r0, r9, r4
   e3208:	7840      	ldrb	r0, [r0, #1]
   e320a:	f000 0008 	and.w	r0, r0, #8
   e320e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   e3212:	b108      	cbz	r0, e3218 <_strtol_r+0x28>
   e3214:	462f      	mov	r7, r5
   e3216:	e7f2      	b.n	e31fe <_strtol_r+0xe>
   e3218:	2c2d      	cmp	r4, #45	; 0x2d
   e321a:	d103      	bne.n	e3224 <_strtol_r+0x34>
   e321c:	1cbd      	adds	r5, r7, #2
   e321e:	787c      	ldrb	r4, [r7, #1]
   e3220:	2601      	movs	r6, #1
   e3222:	e003      	b.n	e322c <_strtol_r+0x3c>
   e3224:	2c2b      	cmp	r4, #43	; 0x2b
   e3226:	bf04      	itt	eq
   e3228:	787c      	ldrbeq	r4, [r7, #1]
   e322a:	1cbd      	addeq	r5, r7, #2
   e322c:	b113      	cbz	r3, e3234 <_strtol_r+0x44>
   e322e:	2b10      	cmp	r3, #16
   e3230:	d10a      	bne.n	e3248 <_strtol_r+0x58>
   e3232:	e05b      	b.n	e32ec <_strtol_r+0xfc>
   e3234:	2c30      	cmp	r4, #48	; 0x30
   e3236:	d157      	bne.n	e32e8 <_strtol_r+0xf8>
   e3238:	7828      	ldrb	r0, [r5, #0]
   e323a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e323e:	2858      	cmp	r0, #88	; 0x58
   e3240:	d14d      	bne.n	e32de <_strtol_r+0xee>
   e3242:	786c      	ldrb	r4, [r5, #1]
   e3244:	2310      	movs	r3, #16
   e3246:	3502      	adds	r5, #2
   e3248:	2e00      	cmp	r6, #0
   e324a:	bf14      	ite	ne
   e324c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   e3250:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   e3254:	2700      	movs	r7, #0
   e3256:	fbbc faf3 	udiv	sl, ip, r3
   e325a:	4638      	mov	r0, r7
   e325c:	fb03 cc1a 	mls	ip, r3, sl, ip
   e3260:	eb09 0e04 	add.w	lr, r9, r4
   e3264:	f89e e001 	ldrb.w	lr, [lr, #1]
   e3268:	f01e 0f04 	tst.w	lr, #4
   e326c:	d001      	beq.n	e3272 <_strtol_r+0x82>
   e326e:	3c30      	subs	r4, #48	; 0x30
   e3270:	e00b      	b.n	e328a <_strtol_r+0x9a>
   e3272:	f01e 0e03 	ands.w	lr, lr, #3
   e3276:	d01b      	beq.n	e32b0 <_strtol_r+0xc0>
   e3278:	f1be 0f01 	cmp.w	lr, #1
   e327c:	bf0c      	ite	eq
   e327e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e3282:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e3286:	ebce 0404 	rsb	r4, lr, r4
   e328a:	42a3      	cmp	r3, r4
   e328c:	dd10      	ble.n	e32b0 <_strtol_r+0xc0>
   e328e:	f1b7 3fff 	cmp.w	r7, #4294967295
   e3292:	d00a      	beq.n	e32aa <_strtol_r+0xba>
   e3294:	4550      	cmp	r0, sl
   e3296:	d806      	bhi.n	e32a6 <_strtol_r+0xb6>
   e3298:	d101      	bne.n	e329e <_strtol_r+0xae>
   e329a:	4564      	cmp	r4, ip
   e329c:	dc03      	bgt.n	e32a6 <_strtol_r+0xb6>
   e329e:	fb03 4000 	mla	r0, r3, r0, r4
   e32a2:	2701      	movs	r7, #1
   e32a4:	e001      	b.n	e32aa <_strtol_r+0xba>
   e32a6:	f04f 37ff 	mov.w	r7, #4294967295
   e32aa:	f815 4b01 	ldrb.w	r4, [r5], #1
   e32ae:	e7d7      	b.n	e3260 <_strtol_r+0x70>
   e32b0:	1c7b      	adds	r3, r7, #1
   e32b2:	d10c      	bne.n	e32ce <_strtol_r+0xde>
   e32b4:	2e00      	cmp	r6, #0
   e32b6:	f04f 0322 	mov.w	r3, #34	; 0x22
   e32ba:	bf14      	ite	ne
   e32bc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   e32c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e32c4:	f8c8 3000 	str.w	r3, [r8]
   e32c8:	b92a      	cbnz	r2, e32d6 <_strtol_r+0xe6>
   e32ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e32ce:	b106      	cbz	r6, e32d2 <_strtol_r+0xe2>
   e32d0:	4240      	negs	r0, r0
   e32d2:	b172      	cbz	r2, e32f2 <_strtol_r+0x102>
   e32d4:	b107      	cbz	r7, e32d8 <_strtol_r+0xe8>
   e32d6:	1e69      	subs	r1, r5, #1
   e32d8:	6011      	str	r1, [r2, #0]
   e32da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e32de:	2430      	movs	r4, #48	; 0x30
   e32e0:	2b00      	cmp	r3, #0
   e32e2:	d1b1      	bne.n	e3248 <_strtol_r+0x58>
   e32e4:	2308      	movs	r3, #8
   e32e6:	e7af      	b.n	e3248 <_strtol_r+0x58>
   e32e8:	230a      	movs	r3, #10
   e32ea:	e7ad      	b.n	e3248 <_strtol_r+0x58>
   e32ec:	2c30      	cmp	r4, #48	; 0x30
   e32ee:	d0a3      	beq.n	e3238 <_strtol_r+0x48>
   e32f0:	e7aa      	b.n	e3248 <_strtol_r+0x58>
   e32f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e32f6:	bf00      	nop
   e32f8:	2003bb1c 	.word	0x2003bb1c

000e32fc <strtol>:
   e32fc:	4613      	mov	r3, r2
   e32fe:	460a      	mov	r2, r1
   e3300:	4601      	mov	r1, r0
   e3302:	4802      	ldr	r0, [pc, #8]	; (e330c <strtol+0x10>)
   e3304:	6800      	ldr	r0, [r0, #0]
   e3306:	f7ff bf73 	b.w	e31f0 <_strtol_r>
   e330a:	bf00      	nop
   e330c:	2003bb80 	.word	0x2003bb80

000e3310 <_strtoul_r>:
   e3310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3314:	4680      	mov	r8, r0
   e3316:	483c      	ldr	r0, [pc, #240]	; (e3408 <_strtoul_r+0xf8>)
   e3318:	f8d0 9000 	ldr.w	r9, [r0]
   e331c:	460e      	mov	r6, r1
   e331e:	4635      	mov	r5, r6
   e3320:	f815 4b01 	ldrb.w	r4, [r5], #1
   e3324:	eb09 0004 	add.w	r0, r9, r4
   e3328:	7840      	ldrb	r0, [r0, #1]
   e332a:	f000 0008 	and.w	r0, r0, #8
   e332e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e3332:	b108      	cbz	r0, e3338 <_strtoul_r+0x28>
   e3334:	462e      	mov	r6, r5
   e3336:	e7f2      	b.n	e331e <_strtoul_r+0xe>
   e3338:	2c2d      	cmp	r4, #45	; 0x2d
   e333a:	d103      	bne.n	e3344 <_strtoul_r+0x34>
   e333c:	1cb5      	adds	r5, r6, #2
   e333e:	7874      	ldrb	r4, [r6, #1]
   e3340:	2701      	movs	r7, #1
   e3342:	e003      	b.n	e334c <_strtoul_r+0x3c>
   e3344:	2c2b      	cmp	r4, #43	; 0x2b
   e3346:	bf04      	itt	eq
   e3348:	7874      	ldrbeq	r4, [r6, #1]
   e334a:	1cb5      	addeq	r5, r6, #2
   e334c:	b113      	cbz	r3, e3354 <_strtoul_r+0x44>
   e334e:	2b10      	cmp	r3, #16
   e3350:	d10a      	bne.n	e3368 <_strtoul_r+0x58>
   e3352:	e053      	b.n	e33fc <_strtoul_r+0xec>
   e3354:	2c30      	cmp	r4, #48	; 0x30
   e3356:	d14f      	bne.n	e33f8 <_strtoul_r+0xe8>
   e3358:	7828      	ldrb	r0, [r5, #0]
   e335a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e335e:	2858      	cmp	r0, #88	; 0x58
   e3360:	d145      	bne.n	e33ee <_strtoul_r+0xde>
   e3362:	786c      	ldrb	r4, [r5, #1]
   e3364:	2310      	movs	r3, #16
   e3366:	3502      	adds	r5, #2
   e3368:	f04f 3cff 	mov.w	ip, #4294967295
   e336c:	2600      	movs	r6, #0
   e336e:	fbbc fcf3 	udiv	ip, ip, r3
   e3372:	fb03 fa0c 	mul.w	sl, r3, ip
   e3376:	ea6f 0a0a 	mvn.w	sl, sl
   e337a:	4630      	mov	r0, r6
   e337c:	eb09 0e04 	add.w	lr, r9, r4
   e3380:	f89e e001 	ldrb.w	lr, [lr, #1]
   e3384:	f01e 0f04 	tst.w	lr, #4
   e3388:	d001      	beq.n	e338e <_strtoul_r+0x7e>
   e338a:	3c30      	subs	r4, #48	; 0x30
   e338c:	e00b      	b.n	e33a6 <_strtoul_r+0x96>
   e338e:	f01e 0e03 	ands.w	lr, lr, #3
   e3392:	d01a      	beq.n	e33ca <_strtoul_r+0xba>
   e3394:	f1be 0f01 	cmp.w	lr, #1
   e3398:	bf0c      	ite	eq
   e339a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e339e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e33a2:	ebce 0404 	rsb	r4, lr, r4
   e33a6:	42a3      	cmp	r3, r4
   e33a8:	dd0f      	ble.n	e33ca <_strtoul_r+0xba>
   e33aa:	2e00      	cmp	r6, #0
   e33ac:	db08      	blt.n	e33c0 <_strtoul_r+0xb0>
   e33ae:	4560      	cmp	r0, ip
   e33b0:	d806      	bhi.n	e33c0 <_strtoul_r+0xb0>
   e33b2:	d101      	bne.n	e33b8 <_strtoul_r+0xa8>
   e33b4:	4554      	cmp	r4, sl
   e33b6:	dc03      	bgt.n	e33c0 <_strtoul_r+0xb0>
   e33b8:	fb03 4000 	mla	r0, r3, r0, r4
   e33bc:	2601      	movs	r6, #1
   e33be:	e001      	b.n	e33c4 <_strtoul_r+0xb4>
   e33c0:	f04f 36ff 	mov.w	r6, #4294967295
   e33c4:	f815 4b01 	ldrb.w	r4, [r5], #1
   e33c8:	e7d8      	b.n	e337c <_strtoul_r+0x6c>
   e33ca:	2e00      	cmp	r6, #0
   e33cc:	da07      	bge.n	e33de <_strtoul_r+0xce>
   e33ce:	2322      	movs	r3, #34	; 0x22
   e33d0:	f8c8 3000 	str.w	r3, [r8]
   e33d4:	f04f 30ff 	mov.w	r0, #4294967295
   e33d8:	b92a      	cbnz	r2, e33e6 <_strtoul_r+0xd6>
   e33da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e33de:	b107      	cbz	r7, e33e2 <_strtoul_r+0xd2>
   e33e0:	4240      	negs	r0, r0
   e33e2:	b172      	cbz	r2, e3402 <_strtoul_r+0xf2>
   e33e4:	b106      	cbz	r6, e33e8 <_strtoul_r+0xd8>
   e33e6:	1e69      	subs	r1, r5, #1
   e33e8:	6011      	str	r1, [r2, #0]
   e33ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e33ee:	2430      	movs	r4, #48	; 0x30
   e33f0:	2b00      	cmp	r3, #0
   e33f2:	d1b9      	bne.n	e3368 <_strtoul_r+0x58>
   e33f4:	2308      	movs	r3, #8
   e33f6:	e7b7      	b.n	e3368 <_strtoul_r+0x58>
   e33f8:	230a      	movs	r3, #10
   e33fa:	e7b5      	b.n	e3368 <_strtoul_r+0x58>
   e33fc:	2c30      	cmp	r4, #48	; 0x30
   e33fe:	d0ab      	beq.n	e3358 <_strtoul_r+0x48>
   e3400:	e7b2      	b.n	e3368 <_strtoul_r+0x58>
   e3402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3406:	bf00      	nop
   e3408:	2003bb1c 	.word	0x2003bb1c

000e340c <strtoul>:
   e340c:	4613      	mov	r3, r2
   e340e:	460a      	mov	r2, r1
   e3410:	4601      	mov	r1, r0
   e3412:	4802      	ldr	r0, [pc, #8]	; (e341c <strtoul+0x10>)
   e3414:	6800      	ldr	r0, [r0, #0]
   e3416:	f7ff bf7b 	b.w	e3310 <_strtoul_r>
   e341a:	bf00      	nop
   e341c:	2003bb80 	.word	0x2003bb80

000e3420 <__get_current_time_locale>:
   e3420:	4b04      	ldr	r3, [pc, #16]	; (e3434 <__get_current_time_locale+0x14>)
   e3422:	4a05      	ldr	r2, [pc, #20]	; (e3438 <__get_current_time_locale+0x18>)
   e3424:	6818      	ldr	r0, [r3, #0]
   e3426:	4b05      	ldr	r3, [pc, #20]	; (e343c <__get_current_time_locale+0x1c>)
   e3428:	2800      	cmp	r0, #0
   e342a:	bf14      	ite	ne
   e342c:	4610      	movne	r0, r2
   e342e:	4618      	moveq	r0, r3
   e3430:	4770      	bx	lr
   e3432:	bf00      	nop
   e3434:	2003e6c8 	.word	0x2003e6c8
   e3438:	2003e6cc 	.word	0x2003e6cc
   e343c:	000e60b0 	.word	0x000e60b0

000e3440 <__tzcalc_limits>:
   e3440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3444:	4604      	mov	r4, r0
   e3446:	f000 fda5 	bl	e3f94 <__gettzinfo>
   e344a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e344e:	429c      	cmp	r4, r3
   e3450:	f340 8096 	ble.w	e3580 <__tzcalc_limits+0x140>
   e3454:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e3458:	18e3      	adds	r3, r4, r3
   e345a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e345e:	109b      	asrs	r3, r3, #2
   e3460:	f240 156d 	movw	r5, #365	; 0x16d
   e3464:	fb05 3502 	mla	r5, r5, r2, r3
   e3468:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e346c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e3470:	fb92 f3f3 	sdiv	r3, r2, r3
   e3474:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e3478:	442b      	add	r3, r5
   e347a:	18a5      	adds	r5, r4, r2
   e347c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3480:	fb95 f5f2 	sdiv	r5, r5, r2
   e3484:	441d      	add	r5, r3
   e3486:	2364      	movs	r3, #100	; 0x64
   e3488:	fb94 f7f2 	sdiv	r7, r4, r2
   e348c:	fb94 f6f3 	sdiv	r6, r4, r3
   e3490:	fb02 4717 	mls	r7, r2, r7, r4
   e3494:	fb03 4616 	mls	r6, r3, r6, r4
   e3498:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e349c:	fab7 fe87 	clz	lr, r7
   e34a0:	9301      	str	r3, [sp, #4]
   e34a2:	f004 0303 	and.w	r3, r4, #3
   e34a6:	6044      	str	r4, [r0, #4]
   e34a8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e34ac:	4601      	mov	r1, r0
   e34ae:	9300      	str	r3, [sp, #0]
   e34b0:	f04f 0c07 	mov.w	ip, #7
   e34b4:	7a0b      	ldrb	r3, [r1, #8]
   e34b6:	2b4a      	cmp	r3, #74	; 0x4a
   e34b8:	d10e      	bne.n	e34d8 <__tzcalc_limits+0x98>
   e34ba:	694b      	ldr	r3, [r1, #20]
   e34bc:	9a00      	ldr	r2, [sp, #0]
   e34be:	18ec      	adds	r4, r5, r3
   e34c0:	b902      	cbnz	r2, e34c4 <__tzcalc_limits+0x84>
   e34c2:	b906      	cbnz	r6, e34c6 <__tzcalc_limits+0x86>
   e34c4:	b927      	cbnz	r7, e34d0 <__tzcalc_limits+0x90>
   e34c6:	2b3b      	cmp	r3, #59	; 0x3b
   e34c8:	bfd4      	ite	le
   e34ca:	2300      	movle	r3, #0
   e34cc:	2301      	movgt	r3, #1
   e34ce:	e000      	b.n	e34d2 <__tzcalc_limits+0x92>
   e34d0:	2300      	movs	r3, #0
   e34d2:	4423      	add	r3, r4
   e34d4:	3b01      	subs	r3, #1
   e34d6:	e03f      	b.n	e3558 <__tzcalc_limits+0x118>
   e34d8:	2b44      	cmp	r3, #68	; 0x44
   e34da:	d102      	bne.n	e34e2 <__tzcalc_limits+0xa2>
   e34dc:	694b      	ldr	r3, [r1, #20]
   e34de:	442b      	add	r3, r5
   e34e0:	e03a      	b.n	e3558 <__tzcalc_limits+0x118>
   e34e2:	9b00      	ldr	r3, [sp, #0]
   e34e4:	b92b      	cbnz	r3, e34f2 <__tzcalc_limits+0xb2>
   e34e6:	2e00      	cmp	r6, #0
   e34e8:	bf0c      	ite	eq
   e34ea:	46f0      	moveq	r8, lr
   e34ec:	f04f 0801 	movne.w	r8, #1
   e34f0:	e000      	b.n	e34f4 <__tzcalc_limits+0xb4>
   e34f2:	46f0      	mov	r8, lr
   e34f4:	4b24      	ldr	r3, [pc, #144]	; (e3588 <__tzcalc_limits+0x148>)
   e34f6:	68cc      	ldr	r4, [r1, #12]
   e34f8:	2230      	movs	r2, #48	; 0x30
   e34fa:	fb02 3808 	mla	r8, r2, r8, r3
   e34fe:	f1a8 0a04 	sub.w	sl, r8, #4
   e3502:	46a9      	mov	r9, r5
   e3504:	2301      	movs	r3, #1
   e3506:	42a3      	cmp	r3, r4
   e3508:	da04      	bge.n	e3514 <__tzcalc_limits+0xd4>
   e350a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e350e:	3301      	adds	r3, #1
   e3510:	44d9      	add	r9, fp
   e3512:	e7f8      	b.n	e3506 <__tzcalc_limits+0xc6>
   e3514:	f109 0304 	add.w	r3, r9, #4
   e3518:	fb93 fbfc 	sdiv	fp, r3, ip
   e351c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e3520:	2c01      	cmp	r4, #1
   e3522:	ebca 0a03 	rsb	sl, sl, r3
   e3526:	694b      	ldr	r3, [r1, #20]
   e3528:	bfb8      	it	lt
   e352a:	2401      	movlt	r4, #1
   e352c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e3530:	ebb3 0a0a 	subs.w	sl, r3, sl
   e3534:	690b      	ldr	r3, [r1, #16]
   e3536:	f104 34ff 	add.w	r4, r4, #4294967295
   e353a:	f103 33ff 	add.w	r3, r3, #4294967295
   e353e:	bf48      	it	mi
   e3540:	f10a 0a07 	addmi.w	sl, sl, #7
   e3544:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e3548:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e354c:	4453      	add	r3, sl
   e354e:	42a3      	cmp	r3, r4
   e3550:	db01      	blt.n	e3556 <__tzcalc_limits+0x116>
   e3552:	3b07      	subs	r3, #7
   e3554:	e7fb      	b.n	e354e <__tzcalc_limits+0x10e>
   e3556:	444b      	add	r3, r9
   e3558:	698c      	ldr	r4, [r1, #24]
   e355a:	4a0c      	ldr	r2, [pc, #48]	; (e358c <__tzcalc_limits+0x14c>)
   e355c:	fb02 4303 	mla	r3, r2, r3, r4
   e3560:	6a0c      	ldr	r4, [r1, #32]
   e3562:	4423      	add	r3, r4
   e3564:	f841 3f1c 	str.w	r3, [r1, #28]!
   e3568:	9b01      	ldr	r3, [sp, #4]
   e356a:	4299      	cmp	r1, r3
   e356c:	d1a2      	bne.n	e34b4 <__tzcalc_limits+0x74>
   e356e:	69c3      	ldr	r3, [r0, #28]
   e3570:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e3572:	4293      	cmp	r3, r2
   e3574:	bfac      	ite	ge
   e3576:	2300      	movge	r3, #0
   e3578:	2301      	movlt	r3, #1
   e357a:	6003      	str	r3, [r0, #0]
   e357c:	2001      	movs	r0, #1
   e357e:	e000      	b.n	e3582 <__tzcalc_limits+0x142>
   e3580:	2000      	movs	r0, #0
   e3582:	b003      	add	sp, #12
   e3584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3588:	000e5e6c 	.word	0x000e5e6c
   e358c:	00015180 	.word	0x00015180

000e3590 <__tz_lock>:
   e3590:	4770      	bx	lr

000e3592 <__tz_unlock>:
   e3592:	4770      	bx	lr

000e3594 <_tzset_unlocked>:
   e3594:	4b01      	ldr	r3, [pc, #4]	; (e359c <_tzset_unlocked+0x8>)
   e3596:	6818      	ldr	r0, [r3, #0]
   e3598:	f000 b802 	b.w	e35a0 <_tzset_unlocked_r>
   e359c:	2003bb80 	.word	0x2003bb80

000e35a0 <_tzset_unlocked_r>:
   e35a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e35a4:	b08d      	sub	sp, #52	; 0x34
   e35a6:	4607      	mov	r7, r0
   e35a8:	f000 fcf4 	bl	e3f94 <__gettzinfo>
   e35ac:	49b0      	ldr	r1, [pc, #704]	; (e3870 <_tzset_unlocked_r+0x2d0>)
   e35ae:	4eb1      	ldr	r6, [pc, #708]	; (e3874 <_tzset_unlocked_r+0x2d4>)
   e35b0:	4604      	mov	r4, r0
   e35b2:	4638      	mov	r0, r7
   e35b4:	f000 fce6 	bl	e3f84 <_getenv_r>
   e35b8:	4605      	mov	r5, r0
   e35ba:	b960      	cbnz	r0, e35d6 <_tzset_unlocked_r+0x36>
   e35bc:	4bae      	ldr	r3, [pc, #696]	; (e3878 <_tzset_unlocked_r+0x2d8>)
   e35be:	4aaf      	ldr	r2, [pc, #700]	; (e387c <_tzset_unlocked_r+0x2dc>)
   e35c0:	6018      	str	r0, [r3, #0]
   e35c2:	4baf      	ldr	r3, [pc, #700]	; (e3880 <_tzset_unlocked_r+0x2e0>)
   e35c4:	6018      	str	r0, [r3, #0]
   e35c6:	4baf      	ldr	r3, [pc, #700]	; (e3884 <_tzset_unlocked_r+0x2e4>)
   e35c8:	6830      	ldr	r0, [r6, #0]
   e35ca:	601a      	str	r2, [r3, #0]
   e35cc:	605a      	str	r2, [r3, #4]
   e35ce:	f7f8 fac5 	bl	dbb5c <free>
   e35d2:	6035      	str	r5, [r6, #0]
   e35d4:	e148      	b.n	e3868 <_tzset_unlocked_r+0x2c8>
   e35d6:	6831      	ldr	r1, [r6, #0]
   e35d8:	b979      	cbnz	r1, e35fa <_tzset_unlocked_r+0x5a>
   e35da:	6830      	ldr	r0, [r6, #0]
   e35dc:	f7f8 fabe 	bl	dbb5c <free>
   e35e0:	4628      	mov	r0, r5
   e35e2:	f7fe ff97 	bl	e2514 <strlen>
   e35e6:	1c41      	adds	r1, r0, #1
   e35e8:	4638      	mov	r0, r7
   e35ea:	f7f8 faff 	bl	dbbec <_malloc_r>
   e35ee:	6030      	str	r0, [r6, #0]
   e35f0:	b148      	cbz	r0, e3606 <_tzset_unlocked_r+0x66>
   e35f2:	4629      	mov	r1, r5
   e35f4:	f7fe fa56 	bl	e1aa4 <strcpy>
   e35f8:	e005      	b.n	e3606 <_tzset_unlocked_r+0x66>
   e35fa:	f7fe fa49 	bl	e1a90 <strcmp>
   e35fe:	2800      	cmp	r0, #0
   e3600:	f000 8132 	beq.w	e3868 <_tzset_unlocked_r+0x2c8>
   e3604:	e7e9      	b.n	e35da <_tzset_unlocked_r+0x3a>
   e3606:	782b      	ldrb	r3, [r5, #0]
   e3608:	4a9f      	ldr	r2, [pc, #636]	; (e3888 <_tzset_unlocked_r+0x2e8>)
   e360a:	49a0      	ldr	r1, [pc, #640]	; (e388c <_tzset_unlocked_r+0x2ec>)
   e360c:	2b3a      	cmp	r3, #58	; 0x3a
   e360e:	bf08      	it	eq
   e3610:	3501      	addeq	r5, #1
   e3612:	ae0a      	add	r6, sp, #40	; 0x28
   e3614:	4633      	mov	r3, r6
   e3616:	4628      	mov	r0, r5
   e3618:	f7f8 fac0 	bl	dbb9c <siscanf>
   e361c:	2800      	cmp	r0, #0
   e361e:	f340 8123 	ble.w	e3868 <_tzset_unlocked_r+0x2c8>
   e3622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3624:	18ef      	adds	r7, r5, r3
   e3626:	5ceb      	ldrb	r3, [r5, r3]
   e3628:	2b2d      	cmp	r3, #45	; 0x2d
   e362a:	d103      	bne.n	e3634 <_tzset_unlocked_r+0x94>
   e362c:	3701      	adds	r7, #1
   e362e:	f04f 35ff 	mov.w	r5, #4294967295
   e3632:	e003      	b.n	e363c <_tzset_unlocked_r+0x9c>
   e3634:	2b2b      	cmp	r3, #43	; 0x2b
   e3636:	bf08      	it	eq
   e3638:	3701      	addeq	r7, #1
   e363a:	2501      	movs	r5, #1
   e363c:	f10d 0a20 	add.w	sl, sp, #32
   e3640:	f10d 0b1e 	add.w	fp, sp, #30
   e3644:	f04f 0800 	mov.w	r8, #0
   e3648:	9603      	str	r6, [sp, #12]
   e364a:	f8cd a008 	str.w	sl, [sp, #8]
   e364e:	9601      	str	r6, [sp, #4]
   e3650:	f8cd b000 	str.w	fp, [sp]
   e3654:	4633      	mov	r3, r6
   e3656:	aa07      	add	r2, sp, #28
   e3658:	498d      	ldr	r1, [pc, #564]	; (e3890 <_tzset_unlocked_r+0x2f0>)
   e365a:	f8ad 801e 	strh.w	r8, [sp, #30]
   e365e:	4638      	mov	r0, r7
   e3660:	f8ad 8020 	strh.w	r8, [sp, #32]
   e3664:	f7f8 fa9a 	bl	dbb9c <siscanf>
   e3668:	4540      	cmp	r0, r8
   e366a:	f340 80fd 	ble.w	e3868 <_tzset_unlocked_r+0x2c8>
   e366e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e3672:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e3676:	f8df 9224 	ldr.w	r9, [pc, #548]	; e389c <_tzset_unlocked_r+0x2fc>
   e367a:	213c      	movs	r1, #60	; 0x3c
   e367c:	fb01 3302 	mla	r3, r1, r2, r3
   e3680:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e3684:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e3688:	fb01 3302 	mla	r3, r1, r2, r3
   e368c:	435d      	muls	r5, r3
   e368e:	6225      	str	r5, [r4, #32]
   e3690:	4d7c      	ldr	r5, [pc, #496]	; (e3884 <_tzset_unlocked_r+0x2e4>)
   e3692:	4b7d      	ldr	r3, [pc, #500]	; (e3888 <_tzset_unlocked_r+0x2e8>)
   e3694:	602b      	str	r3, [r5, #0]
   e3696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3698:	497c      	ldr	r1, [pc, #496]	; (e388c <_tzset_unlocked_r+0x2ec>)
   e369a:	441f      	add	r7, r3
   e369c:	464a      	mov	r2, r9
   e369e:	4633      	mov	r3, r6
   e36a0:	4638      	mov	r0, r7
   e36a2:	f7f8 fa7b 	bl	dbb9c <siscanf>
   e36a6:	4540      	cmp	r0, r8
   e36a8:	dc08      	bgt.n	e36bc <_tzset_unlocked_r+0x11c>
   e36aa:	682b      	ldr	r3, [r5, #0]
   e36ac:	606b      	str	r3, [r5, #4]
   e36ae:	4b72      	ldr	r3, [pc, #456]	; (e3878 <_tzset_unlocked_r+0x2d8>)
   e36b0:	6a22      	ldr	r2, [r4, #32]
   e36b2:	601a      	str	r2, [r3, #0]
   e36b4:	4b72      	ldr	r3, [pc, #456]	; (e3880 <_tzset_unlocked_r+0x2e0>)
   e36b6:	f8c3 8000 	str.w	r8, [r3]
   e36ba:	e0d5      	b.n	e3868 <_tzset_unlocked_r+0x2c8>
   e36bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e36be:	f8c5 9004 	str.w	r9, [r5, #4]
   e36c2:	18fd      	adds	r5, r7, r3
   e36c4:	5cfb      	ldrb	r3, [r7, r3]
   e36c6:	2b2d      	cmp	r3, #45	; 0x2d
   e36c8:	d103      	bne.n	e36d2 <_tzset_unlocked_r+0x132>
   e36ca:	3501      	adds	r5, #1
   e36cc:	f04f 37ff 	mov.w	r7, #4294967295
   e36d0:	e003      	b.n	e36da <_tzset_unlocked_r+0x13a>
   e36d2:	2b2b      	cmp	r3, #43	; 0x2b
   e36d4:	bf08      	it	eq
   e36d6:	3501      	addeq	r5, #1
   e36d8:	2701      	movs	r7, #1
   e36da:	2300      	movs	r3, #0
   e36dc:	f8ad 301c 	strh.w	r3, [sp, #28]
   e36e0:	f8ad 301e 	strh.w	r3, [sp, #30]
   e36e4:	f8ad 3020 	strh.w	r3, [sp, #32]
   e36e8:	930a      	str	r3, [sp, #40]	; 0x28
   e36ea:	9603      	str	r6, [sp, #12]
   e36ec:	f8cd a008 	str.w	sl, [sp, #8]
   e36f0:	9601      	str	r6, [sp, #4]
   e36f2:	f8cd b000 	str.w	fp, [sp]
   e36f6:	4633      	mov	r3, r6
   e36f8:	aa07      	add	r2, sp, #28
   e36fa:	4965      	ldr	r1, [pc, #404]	; (e3890 <_tzset_unlocked_r+0x2f0>)
   e36fc:	4628      	mov	r0, r5
   e36fe:	f7f8 fa4d 	bl	dbb9c <siscanf>
   e3702:	2800      	cmp	r0, #0
   e3704:	dc04      	bgt.n	e3710 <_tzset_unlocked_r+0x170>
   e3706:	6a23      	ldr	r3, [r4, #32]
   e3708:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e370c:	63e3      	str	r3, [r4, #60]	; 0x3c
   e370e:	e00e      	b.n	e372e <_tzset_unlocked_r+0x18e>
   e3710:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e3714:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e3718:	213c      	movs	r1, #60	; 0x3c
   e371a:	fb01 3302 	mla	r3, r1, r2, r3
   e371e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e3722:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e3726:	fb01 3302 	mla	r3, r1, r2, r3
   e372a:	435f      	muls	r7, r3
   e372c:	63e7      	str	r7, [r4, #60]	; 0x3c
   e372e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3730:	4627      	mov	r7, r4
   e3732:	441d      	add	r5, r3
   e3734:	f04f 0900 	mov.w	r9, #0
   e3738:	782b      	ldrb	r3, [r5, #0]
   e373a:	2b2c      	cmp	r3, #44	; 0x2c
   e373c:	bf08      	it	eq
   e373e:	3501      	addeq	r5, #1
   e3740:	f895 8000 	ldrb.w	r8, [r5]
   e3744:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e3748:	d126      	bne.n	e3798 <_tzset_unlocked_r+0x1f8>
   e374a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e374e:	9302      	str	r3, [sp, #8]
   e3750:	ab09      	add	r3, sp, #36	; 0x24
   e3752:	9300      	str	r3, [sp, #0]
   e3754:	9603      	str	r6, [sp, #12]
   e3756:	9601      	str	r6, [sp, #4]
   e3758:	4633      	mov	r3, r6
   e375a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e375e:	494d      	ldr	r1, [pc, #308]	; (e3894 <_tzset_unlocked_r+0x2f4>)
   e3760:	4628      	mov	r0, r5
   e3762:	f7f8 fa1b 	bl	dbb9c <siscanf>
   e3766:	2803      	cmp	r0, #3
   e3768:	d17e      	bne.n	e3868 <_tzset_unlocked_r+0x2c8>
   e376a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e376e:	1e4b      	subs	r3, r1, #1
   e3770:	2b0b      	cmp	r3, #11
   e3772:	d879      	bhi.n	e3868 <_tzset_unlocked_r+0x2c8>
   e3774:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e3778:	1e53      	subs	r3, r2, #1
   e377a:	2b04      	cmp	r3, #4
   e377c:	d874      	bhi.n	e3868 <_tzset_unlocked_r+0x2c8>
   e377e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e3782:	2b06      	cmp	r3, #6
   e3784:	d870      	bhi.n	e3868 <_tzset_unlocked_r+0x2c8>
   e3786:	f887 8008 	strb.w	r8, [r7, #8]
   e378a:	60f9      	str	r1, [r7, #12]
   e378c:	613a      	str	r2, [r7, #16]
   e378e:	617b      	str	r3, [r7, #20]
   e3790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3792:	eb05 0803 	add.w	r8, r5, r3
   e3796:	e02a      	b.n	e37ee <_tzset_unlocked_r+0x24e>
   e3798:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e379c:	bf06      	itte	eq
   e379e:	3501      	addeq	r5, #1
   e37a0:	4643      	moveq	r3, r8
   e37a2:	2344      	movne	r3, #68	; 0x44
   e37a4:	220a      	movs	r2, #10
   e37a6:	a90b      	add	r1, sp, #44	; 0x2c
   e37a8:	4628      	mov	r0, r5
   e37aa:	9305      	str	r3, [sp, #20]
   e37ac:	f7ff fe2e 	bl	e340c <strtoul>
   e37b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e37b4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e37b8:	4545      	cmp	r5, r8
   e37ba:	9b05      	ldr	r3, [sp, #20]
   e37bc:	d114      	bne.n	e37e8 <_tzset_unlocked_r+0x248>
   e37be:	234d      	movs	r3, #77	; 0x4d
   e37c0:	f1b9 0f00 	cmp.w	r9, #0
   e37c4:	d107      	bne.n	e37d6 <_tzset_unlocked_r+0x236>
   e37c6:	7223      	strb	r3, [r4, #8]
   e37c8:	2303      	movs	r3, #3
   e37ca:	60e3      	str	r3, [r4, #12]
   e37cc:	2302      	movs	r3, #2
   e37ce:	6123      	str	r3, [r4, #16]
   e37d0:	f8c4 9014 	str.w	r9, [r4, #20]
   e37d4:	e00b      	b.n	e37ee <_tzset_unlocked_r+0x24e>
   e37d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e37da:	230b      	movs	r3, #11
   e37dc:	62a3      	str	r3, [r4, #40]	; 0x28
   e37de:	2301      	movs	r3, #1
   e37e0:	62e3      	str	r3, [r4, #44]	; 0x2c
   e37e2:	2300      	movs	r3, #0
   e37e4:	6323      	str	r3, [r4, #48]	; 0x30
   e37e6:	e002      	b.n	e37ee <_tzset_unlocked_r+0x24e>
   e37e8:	b280      	uxth	r0, r0
   e37ea:	723b      	strb	r3, [r7, #8]
   e37ec:	6178      	str	r0, [r7, #20]
   e37ee:	2302      	movs	r3, #2
   e37f0:	f8ad 301c 	strh.w	r3, [sp, #28]
   e37f4:	2300      	movs	r3, #0
   e37f6:	f8ad 301e 	strh.w	r3, [sp, #30]
   e37fa:	f8ad 3020 	strh.w	r3, [sp, #32]
   e37fe:	930a      	str	r3, [sp, #40]	; 0x28
   e3800:	f898 3000 	ldrb.w	r3, [r8]
   e3804:	2b2f      	cmp	r3, #47	; 0x2f
   e3806:	d10b      	bne.n	e3820 <_tzset_unlocked_r+0x280>
   e3808:	9603      	str	r6, [sp, #12]
   e380a:	f8cd a008 	str.w	sl, [sp, #8]
   e380e:	9601      	str	r6, [sp, #4]
   e3810:	f8cd b000 	str.w	fp, [sp]
   e3814:	4633      	mov	r3, r6
   e3816:	aa07      	add	r2, sp, #28
   e3818:	491f      	ldr	r1, [pc, #124]	; (e3898 <_tzset_unlocked_r+0x2f8>)
   e381a:	4640      	mov	r0, r8
   e381c:	f7f8 f9be 	bl	dbb9c <siscanf>
   e3820:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e3824:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e3828:	213c      	movs	r1, #60	; 0x3c
   e382a:	fb01 3302 	mla	r3, r1, r2, r3
   e382e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e3832:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e3836:	fb01 3302 	mla	r3, r1, r2, r3
   e383a:	61bb      	str	r3, [r7, #24]
   e383c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e383e:	f109 0901 	add.w	r9, r9, #1
   e3842:	f1b9 0f02 	cmp.w	r9, #2
   e3846:	4445      	add	r5, r8
   e3848:	f107 071c 	add.w	r7, r7, #28
   e384c:	f47f af74 	bne.w	e3738 <_tzset_unlocked_r+0x198>
   e3850:	6860      	ldr	r0, [r4, #4]
   e3852:	f7ff fdf5 	bl	e3440 <__tzcalc_limits>
   e3856:	4b08      	ldr	r3, [pc, #32]	; (e3878 <_tzset_unlocked_r+0x2d8>)
   e3858:	6a22      	ldr	r2, [r4, #32]
   e385a:	601a      	str	r2, [r3, #0]
   e385c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e385e:	1a9b      	subs	r3, r3, r2
   e3860:	4a07      	ldr	r2, [pc, #28]	; (e3880 <_tzset_unlocked_r+0x2e0>)
   e3862:	bf18      	it	ne
   e3864:	2301      	movne	r3, #1
   e3866:	6013      	str	r3, [r2, #0]
   e3868:	b00d      	add	sp, #52	; 0x34
   e386a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e386e:	bf00      	nop
   e3870:	000e61ac 	.word	0x000e61ac
   e3874:	2003e7e0 	.word	0x2003e7e0
   e3878:	2003e7e8 	.word	0x2003e7e8
   e387c:	000e61af 	.word	0x000e61af
   e3880:	2003e7e4 	.word	0x2003e7e4
   e3884:	2003bbbc 	.word	0x2003bbbc
   e3888:	2003e7d3 	.word	0x2003e7d3
   e388c:	000e61b3 	.word	0x000e61b3
   e3890:	000e61d6 	.word	0x000e61d6
   e3894:	000e61c2 	.word	0x000e61c2
   e3898:	000e61d5 	.word	0x000e61d5
   e389c:	2003e7c8 	.word	0x2003e7c8

000e38a0 <abs>:
   e38a0:	2800      	cmp	r0, #0
   e38a2:	bfb8      	it	lt
   e38a4:	4240      	neglt	r0, r0
   e38a6:	4770      	bx	lr

000e38a8 <div>:
   e38a8:	2900      	cmp	r1, #0
   e38aa:	b510      	push	{r4, lr}
   e38ac:	fb91 f4f2 	sdiv	r4, r1, r2
   e38b0:	fb02 1314 	mls	r3, r2, r4, r1
   e38b4:	db04      	blt.n	e38c0 <div+0x18>
   e38b6:	2b00      	cmp	r3, #0
   e38b8:	da07      	bge.n	e38ca <div+0x22>
   e38ba:	3401      	adds	r4, #1
   e38bc:	1a9b      	subs	r3, r3, r2
   e38be:	e004      	b.n	e38ca <div+0x22>
   e38c0:	2b00      	cmp	r3, #0
   e38c2:	bfc4      	itt	gt
   e38c4:	f104 34ff 	addgt.w	r4, r4, #4294967295
   e38c8:	189b      	addgt	r3, r3, r2
   e38ca:	6004      	str	r4, [r0, #0]
   e38cc:	6043      	str	r3, [r0, #4]
   e38ce:	bd10      	pop	{r4, pc}

000e38d0 <rshift>:
   e38d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e38d2:	6906      	ldr	r6, [r0, #16]
   e38d4:	114b      	asrs	r3, r1, #5
   e38d6:	42b3      	cmp	r3, r6
   e38d8:	f100 0514 	add.w	r5, r0, #20
   e38dc:	da27      	bge.n	e392e <rshift+0x5e>
   e38de:	f011 011f 	ands.w	r1, r1, #31
   e38e2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e38e6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e38ea:	d101      	bne.n	e38f0 <rshift+0x20>
   e38ec:	4629      	mov	r1, r5
   e38ee:	e016      	b.n	e391e <rshift+0x4e>
   e38f0:	1d14      	adds	r4, r2, #4
   e38f2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e38f6:	f1c1 0e20 	rsb	lr, r1, #32
   e38fa:	40ca      	lsrs	r2, r1
   e38fc:	462b      	mov	r3, r5
   e38fe:	42b4      	cmp	r4, r6
   e3900:	d209      	bcs.n	e3916 <rshift+0x46>
   e3902:	6827      	ldr	r7, [r4, #0]
   e3904:	fa07 f70e 	lsl.w	r7, r7, lr
   e3908:	433a      	orrs	r2, r7
   e390a:	f843 2b04 	str.w	r2, [r3], #4
   e390e:	f854 2b04 	ldr.w	r2, [r4], #4
   e3912:	40ca      	lsrs	r2, r1
   e3914:	e7f3      	b.n	e38fe <rshift+0x2e>
   e3916:	601a      	str	r2, [r3, #0]
   e3918:	b152      	cbz	r2, e3930 <rshift+0x60>
   e391a:	3304      	adds	r3, #4
   e391c:	e008      	b.n	e3930 <rshift+0x60>
   e391e:	42b2      	cmp	r2, r6
   e3920:	460b      	mov	r3, r1
   e3922:	d205      	bcs.n	e3930 <rshift+0x60>
   e3924:	f852 3b04 	ldr.w	r3, [r2], #4
   e3928:	f841 3b04 	str.w	r3, [r1], #4
   e392c:	e7f7      	b.n	e391e <rshift+0x4e>
   e392e:	462b      	mov	r3, r5
   e3930:	1b5b      	subs	r3, r3, r5
   e3932:	109b      	asrs	r3, r3, #2
   e3934:	6103      	str	r3, [r0, #16]
   e3936:	b903      	cbnz	r3, e393a <rshift+0x6a>
   e3938:	6143      	str	r3, [r0, #20]
   e393a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e393c <__hexdig_fun>:
   e393c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e3940:	2b09      	cmp	r3, #9
   e3942:	d801      	bhi.n	e3948 <__hexdig_fun+0xc>
   e3944:	3820      	subs	r0, #32
   e3946:	e00a      	b.n	e395e <__hexdig_fun+0x22>
   e3948:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e394c:	2b05      	cmp	r3, #5
   e394e:	d801      	bhi.n	e3954 <__hexdig_fun+0x18>
   e3950:	3847      	subs	r0, #71	; 0x47
   e3952:	e004      	b.n	e395e <__hexdig_fun+0x22>
   e3954:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e3958:	2b05      	cmp	r3, #5
   e395a:	d802      	bhi.n	e3962 <__hexdig_fun+0x26>
   e395c:	3827      	subs	r0, #39	; 0x27
   e395e:	b2c0      	uxtb	r0, r0
   e3960:	4770      	bx	lr
   e3962:	2000      	movs	r0, #0
   e3964:	4770      	bx	lr

000e3966 <__gethex>:
   e3966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e396a:	b08b      	sub	sp, #44	; 0x2c
   e396c:	468a      	mov	sl, r1
   e396e:	4690      	mov	r8, r2
   e3970:	9306      	str	r3, [sp, #24]
   e3972:	9002      	str	r0, [sp, #8]
   e3974:	f7fd fde2 	bl	e153c <_localeconv_r>
   e3978:	6803      	ldr	r3, [r0, #0]
   e397a:	9303      	str	r3, [sp, #12]
   e397c:	4618      	mov	r0, r3
   e397e:	f7fe fdc9 	bl	e2514 <strlen>
   e3982:	9b03      	ldr	r3, [sp, #12]
   e3984:	9001      	str	r0, [sp, #4]
   e3986:	4403      	add	r3, r0
   e3988:	f04f 0b00 	mov.w	fp, #0
   e398c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e3990:	9307      	str	r3, [sp, #28]
   e3992:	f8da 3000 	ldr.w	r3, [sl]
   e3996:	3302      	adds	r3, #2
   e3998:	461f      	mov	r7, r3
   e399a:	f813 0b01 	ldrb.w	r0, [r3], #1
   e399e:	2830      	cmp	r0, #48	; 0x30
   e39a0:	d102      	bne.n	e39a8 <__gethex+0x42>
   e39a2:	f10b 0b01 	add.w	fp, fp, #1
   e39a6:	e7f7      	b.n	e3998 <__gethex+0x32>
   e39a8:	f7ff ffc8 	bl	e393c <__hexdig_fun>
   e39ac:	4604      	mov	r4, r0
   e39ae:	b9e0      	cbnz	r0, e39ea <__gethex+0x84>
   e39b0:	9a01      	ldr	r2, [sp, #4]
   e39b2:	9903      	ldr	r1, [sp, #12]
   e39b4:	4638      	mov	r0, r7
   e39b6:	f7fe fdb5 	bl	e2524 <strncmp>
   e39ba:	2800      	cmp	r0, #0
   e39bc:	d134      	bne.n	e3a28 <__gethex+0xc2>
   e39be:	9b01      	ldr	r3, [sp, #4]
   e39c0:	5cf8      	ldrb	r0, [r7, r3]
   e39c2:	18fe      	adds	r6, r7, r3
   e39c4:	f7ff ffba 	bl	e393c <__hexdig_fun>
   e39c8:	b380      	cbz	r0, e3a2c <__gethex+0xc6>
   e39ca:	4633      	mov	r3, r6
   e39cc:	7818      	ldrb	r0, [r3, #0]
   e39ce:	2830      	cmp	r0, #48	; 0x30
   e39d0:	461f      	mov	r7, r3
   e39d2:	f103 0301 	add.w	r3, r3, #1
   e39d6:	d0f9      	beq.n	e39cc <__gethex+0x66>
   e39d8:	f7ff ffb0 	bl	e393c <__hexdig_fun>
   e39dc:	fab0 f580 	clz	r5, r0
   e39e0:	096d      	lsrs	r5, r5, #5
   e39e2:	4634      	mov	r4, r6
   e39e4:	f04f 0b01 	mov.w	fp, #1
   e39e8:	e001      	b.n	e39ee <__gethex+0x88>
   e39ea:	2500      	movs	r5, #0
   e39ec:	462c      	mov	r4, r5
   e39ee:	463a      	mov	r2, r7
   e39f0:	4616      	mov	r6, r2
   e39f2:	3201      	adds	r2, #1
   e39f4:	7830      	ldrb	r0, [r6, #0]
   e39f6:	f7ff ffa1 	bl	e393c <__hexdig_fun>
   e39fa:	2800      	cmp	r0, #0
   e39fc:	d1f8      	bne.n	e39f0 <__gethex+0x8a>
   e39fe:	9a01      	ldr	r2, [sp, #4]
   e3a00:	9903      	ldr	r1, [sp, #12]
   e3a02:	4630      	mov	r0, r6
   e3a04:	f7fe fd8e 	bl	e2524 <strncmp>
   e3a08:	b950      	cbnz	r0, e3a20 <__gethex+0xba>
   e3a0a:	b954      	cbnz	r4, e3a22 <__gethex+0xbc>
   e3a0c:	9b01      	ldr	r3, [sp, #4]
   e3a0e:	18f4      	adds	r4, r6, r3
   e3a10:	4622      	mov	r2, r4
   e3a12:	4616      	mov	r6, r2
   e3a14:	3201      	adds	r2, #1
   e3a16:	7830      	ldrb	r0, [r6, #0]
   e3a18:	f7ff ff90 	bl	e393c <__hexdig_fun>
   e3a1c:	2800      	cmp	r0, #0
   e3a1e:	d1f8      	bne.n	e3a12 <__gethex+0xac>
   e3a20:	b134      	cbz	r4, e3a30 <__gethex+0xca>
   e3a22:	1ba4      	subs	r4, r4, r6
   e3a24:	00a4      	lsls	r4, r4, #2
   e3a26:	e003      	b.n	e3a30 <__gethex+0xca>
   e3a28:	463e      	mov	r6, r7
   e3a2a:	e000      	b.n	e3a2e <__gethex+0xc8>
   e3a2c:	4604      	mov	r4, r0
   e3a2e:	2501      	movs	r5, #1
   e3a30:	7833      	ldrb	r3, [r6, #0]
   e3a32:	2b50      	cmp	r3, #80	; 0x50
   e3a34:	d001      	beq.n	e3a3a <__gethex+0xd4>
   e3a36:	2b70      	cmp	r3, #112	; 0x70
   e3a38:	d12a      	bne.n	e3a90 <__gethex+0x12a>
   e3a3a:	7873      	ldrb	r3, [r6, #1]
   e3a3c:	2b2b      	cmp	r3, #43	; 0x2b
   e3a3e:	d008      	beq.n	e3a52 <__gethex+0xec>
   e3a40:	2b2d      	cmp	r3, #45	; 0x2d
   e3a42:	d003      	beq.n	e3a4c <__gethex+0xe6>
   e3a44:	1c71      	adds	r1, r6, #1
   e3a46:	f04f 0900 	mov.w	r9, #0
   e3a4a:	e005      	b.n	e3a58 <__gethex+0xf2>
   e3a4c:	f04f 0901 	mov.w	r9, #1
   e3a50:	e001      	b.n	e3a56 <__gethex+0xf0>
   e3a52:	f04f 0900 	mov.w	r9, #0
   e3a56:	1cb1      	adds	r1, r6, #2
   e3a58:	7808      	ldrb	r0, [r1, #0]
   e3a5a:	f7ff ff6f 	bl	e393c <__hexdig_fun>
   e3a5e:	1e43      	subs	r3, r0, #1
   e3a60:	b2db      	uxtb	r3, r3
   e3a62:	2b18      	cmp	r3, #24
   e3a64:	d814      	bhi.n	e3a90 <__gethex+0x12a>
   e3a66:	f1a0 0210 	sub.w	r2, r0, #16
   e3a6a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e3a6e:	f7ff ff65 	bl	e393c <__hexdig_fun>
   e3a72:	1e43      	subs	r3, r0, #1
   e3a74:	b2db      	uxtb	r3, r3
   e3a76:	2b18      	cmp	r3, #24
   e3a78:	d804      	bhi.n	e3a84 <__gethex+0x11e>
   e3a7a:	230a      	movs	r3, #10
   e3a7c:	fb03 0202 	mla	r2, r3, r2, r0
   e3a80:	3a10      	subs	r2, #16
   e3a82:	e7f2      	b.n	e3a6a <__gethex+0x104>
   e3a84:	f1b9 0f00 	cmp.w	r9, #0
   e3a88:	d000      	beq.n	e3a8c <__gethex+0x126>
   e3a8a:	4252      	negs	r2, r2
   e3a8c:	4414      	add	r4, r2
   e3a8e:	e000      	b.n	e3a92 <__gethex+0x12c>
   e3a90:	4631      	mov	r1, r6
   e3a92:	f8ca 1000 	str.w	r1, [sl]
   e3a96:	b12d      	cbz	r5, e3aa4 <__gethex+0x13e>
   e3a98:	f1bb 0f00 	cmp.w	fp, #0
   e3a9c:	bf14      	ite	ne
   e3a9e:	2000      	movne	r0, #0
   e3aa0:	2006      	moveq	r0, #6
   e3aa2:	e17c      	b.n	e3d9e <__gethex+0x438>
   e3aa4:	1bf3      	subs	r3, r6, r7
   e3aa6:	3b01      	subs	r3, #1
   e3aa8:	4629      	mov	r1, r5
   e3aaa:	2b07      	cmp	r3, #7
   e3aac:	dd02      	ble.n	e3ab4 <__gethex+0x14e>
   e3aae:	3101      	adds	r1, #1
   e3ab0:	105b      	asrs	r3, r3, #1
   e3ab2:	e7fa      	b.n	e3aaa <__gethex+0x144>
   e3ab4:	9802      	ldr	r0, [sp, #8]
   e3ab6:	f000 fb0d 	bl	e40d4 <_Balloc>
   e3aba:	9b01      	ldr	r3, [sp, #4]
   e3abc:	f100 0a14 	add.w	sl, r0, #20
   e3ac0:	f04f 0900 	mov.w	r9, #0
   e3ac4:	f1c3 0301 	rsb	r3, r3, #1
   e3ac8:	4605      	mov	r5, r0
   e3aca:	f8cd a010 	str.w	sl, [sp, #16]
   e3ace:	46cb      	mov	fp, r9
   e3ad0:	9308      	str	r3, [sp, #32]
   e3ad2:	42b7      	cmp	r7, r6
   e3ad4:	d22f      	bcs.n	e3b36 <__gethex+0x1d0>
   e3ad6:	1e73      	subs	r3, r6, #1
   e3ad8:	9305      	str	r3, [sp, #20]
   e3ada:	9a07      	ldr	r2, [sp, #28]
   e3adc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e3ae0:	4293      	cmp	r3, r2
   e3ae2:	d00b      	beq.n	e3afc <__gethex+0x196>
   e3ae4:	f1bb 0f20 	cmp.w	fp, #32
   e3ae8:	d116      	bne.n	e3b18 <__gethex+0x1b2>
   e3aea:	9b04      	ldr	r3, [sp, #16]
   e3aec:	f8c3 9000 	str.w	r9, [r3]
   e3af0:	3304      	adds	r3, #4
   e3af2:	f04f 0900 	mov.w	r9, #0
   e3af6:	9304      	str	r3, [sp, #16]
   e3af8:	46cb      	mov	fp, r9
   e3afa:	e00d      	b.n	e3b18 <__gethex+0x1b2>
   e3afc:	9b05      	ldr	r3, [sp, #20]
   e3afe:	9a08      	ldr	r2, [sp, #32]
   e3b00:	4413      	add	r3, r2
   e3b02:	429f      	cmp	r7, r3
   e3b04:	d8ee      	bhi.n	e3ae4 <__gethex+0x17e>
   e3b06:	4618      	mov	r0, r3
   e3b08:	9a01      	ldr	r2, [sp, #4]
   e3b0a:	9903      	ldr	r1, [sp, #12]
   e3b0c:	9309      	str	r3, [sp, #36]	; 0x24
   e3b0e:	f7fe fd09 	bl	e2524 <strncmp>
   e3b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3b14:	b168      	cbz	r0, e3b32 <__gethex+0x1cc>
   e3b16:	e7e5      	b.n	e3ae4 <__gethex+0x17e>
   e3b18:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e3b1c:	f7ff ff0e 	bl	e393c <__hexdig_fun>
   e3b20:	f000 000f 	and.w	r0, r0, #15
   e3b24:	fa00 f00b 	lsl.w	r0, r0, fp
   e3b28:	9b05      	ldr	r3, [sp, #20]
   e3b2a:	ea49 0900 	orr.w	r9, r9, r0
   e3b2e:	f10b 0b04 	add.w	fp, fp, #4
   e3b32:	461e      	mov	r6, r3
   e3b34:	e7cd      	b.n	e3ad2 <__gethex+0x16c>
   e3b36:	9804      	ldr	r0, [sp, #16]
   e3b38:	f840 9b04 	str.w	r9, [r0], #4
   e3b3c:	ebca 0000 	rsb	r0, sl, r0
   e3b40:	1080      	asrs	r0, r0, #2
   e3b42:	6128      	str	r0, [r5, #16]
   e3b44:	0147      	lsls	r7, r0, #5
   e3b46:	4648      	mov	r0, r9
   e3b48:	f000 fb89 	bl	e425e <__hi0bits>
   e3b4c:	f8d8 6000 	ldr.w	r6, [r8]
   e3b50:	1a38      	subs	r0, r7, r0
   e3b52:	42b0      	cmp	r0, r6
   e3b54:	dd26      	ble.n	e3ba4 <__gethex+0x23e>
   e3b56:	1b87      	subs	r7, r0, r6
   e3b58:	4639      	mov	r1, r7
   e3b5a:	4628      	mov	r0, r5
   e3b5c:	f000 fe87 	bl	e486e <__any_on>
   e3b60:	b1c8      	cbz	r0, e3b96 <__gethex+0x230>
   e3b62:	1e7b      	subs	r3, r7, #1
   e3b64:	1159      	asrs	r1, r3, #5
   e3b66:	f003 021f 	and.w	r2, r3, #31
   e3b6a:	f04f 0901 	mov.w	r9, #1
   e3b6e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e3b72:	fa09 f202 	lsl.w	r2, r9, r2
   e3b76:	420a      	tst	r2, r1
   e3b78:	d00e      	beq.n	e3b98 <__gethex+0x232>
   e3b7a:	454b      	cmp	r3, r9
   e3b7c:	dc02      	bgt.n	e3b84 <__gethex+0x21e>
   e3b7e:	f04f 0902 	mov.w	r9, #2
   e3b82:	e009      	b.n	e3b98 <__gethex+0x232>
   e3b84:	1eb9      	subs	r1, r7, #2
   e3b86:	4628      	mov	r0, r5
   e3b88:	f000 fe71 	bl	e486e <__any_on>
   e3b8c:	2800      	cmp	r0, #0
   e3b8e:	d0f6      	beq.n	e3b7e <__gethex+0x218>
   e3b90:	f04f 0903 	mov.w	r9, #3
   e3b94:	e000      	b.n	e3b98 <__gethex+0x232>
   e3b96:	4681      	mov	r9, r0
   e3b98:	4639      	mov	r1, r7
   e3b9a:	4628      	mov	r0, r5
   e3b9c:	f7ff fe98 	bl	e38d0 <rshift>
   e3ba0:	443c      	add	r4, r7
   e3ba2:	e00c      	b.n	e3bbe <__gethex+0x258>
   e3ba4:	da09      	bge.n	e3bba <__gethex+0x254>
   e3ba6:	1a37      	subs	r7, r6, r0
   e3ba8:	4629      	mov	r1, r5
   e3baa:	463a      	mov	r2, r7
   e3bac:	9802      	ldr	r0, [sp, #8]
   e3bae:	f000 fc8b 	bl	e44c8 <__lshift>
   e3bb2:	1be4      	subs	r4, r4, r7
   e3bb4:	4605      	mov	r5, r0
   e3bb6:	f100 0a14 	add.w	sl, r0, #20
   e3bba:	f04f 0900 	mov.w	r9, #0
   e3bbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e3bc2:	429c      	cmp	r4, r3
   e3bc4:	dd08      	ble.n	e3bd8 <__gethex+0x272>
   e3bc6:	9802      	ldr	r0, [sp, #8]
   e3bc8:	4629      	mov	r1, r5
   e3bca:	f000 fab8 	bl	e413e <_Bfree>
   e3bce:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e3bd0:	2300      	movs	r3, #0
   e3bd2:	6013      	str	r3, [r2, #0]
   e3bd4:	20a3      	movs	r0, #163	; 0xa3
   e3bd6:	e0e2      	b.n	e3d9e <__gethex+0x438>
   e3bd8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e3bdc:	4284      	cmp	r4, r0
   e3bde:	da53      	bge.n	e3c88 <__gethex+0x322>
   e3be0:	1b04      	subs	r4, r0, r4
   e3be2:	42a6      	cmp	r6, r4
   e3be4:	dc2e      	bgt.n	e3c44 <__gethex+0x2de>
   e3be6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e3bea:	2b02      	cmp	r3, #2
   e3bec:	d01a      	beq.n	e3c24 <__gethex+0x2be>
   e3bee:	2b03      	cmp	r3, #3
   e3bf0:	d01c      	beq.n	e3c2c <__gethex+0x2c6>
   e3bf2:	2b01      	cmp	r3, #1
   e3bf4:	d11d      	bne.n	e3c32 <__gethex+0x2cc>
   e3bf6:	42a6      	cmp	r6, r4
   e3bf8:	d11b      	bne.n	e3c32 <__gethex+0x2cc>
   e3bfa:	2e01      	cmp	r6, #1
   e3bfc:	dc0b      	bgt.n	e3c16 <__gethex+0x2b0>
   e3bfe:	9a06      	ldr	r2, [sp, #24]
   e3c00:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e3c04:	6013      	str	r3, [r2, #0]
   e3c06:	2301      	movs	r3, #1
   e3c08:	612b      	str	r3, [r5, #16]
   e3c0a:	f8ca 3000 	str.w	r3, [sl]
   e3c0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e3c10:	2062      	movs	r0, #98	; 0x62
   e3c12:	601d      	str	r5, [r3, #0]
   e3c14:	e0c3      	b.n	e3d9e <__gethex+0x438>
   e3c16:	1e71      	subs	r1, r6, #1
   e3c18:	4628      	mov	r0, r5
   e3c1a:	f000 fe28 	bl	e486e <__any_on>
   e3c1e:	2800      	cmp	r0, #0
   e3c20:	d1ed      	bne.n	e3bfe <__gethex+0x298>
   e3c22:	e006      	b.n	e3c32 <__gethex+0x2cc>
   e3c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e3c26:	2b00      	cmp	r3, #0
   e3c28:	d0e9      	beq.n	e3bfe <__gethex+0x298>
   e3c2a:	e002      	b.n	e3c32 <__gethex+0x2cc>
   e3c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e3c2e:	2b00      	cmp	r3, #0
   e3c30:	d1e5      	bne.n	e3bfe <__gethex+0x298>
   e3c32:	9802      	ldr	r0, [sp, #8]
   e3c34:	4629      	mov	r1, r5
   e3c36:	f000 fa82 	bl	e413e <_Bfree>
   e3c3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e3c3c:	2300      	movs	r3, #0
   e3c3e:	6013      	str	r3, [r2, #0]
   e3c40:	2050      	movs	r0, #80	; 0x50
   e3c42:	e0ac      	b.n	e3d9e <__gethex+0x438>
   e3c44:	1e67      	subs	r7, r4, #1
   e3c46:	f1b9 0f00 	cmp.w	r9, #0
   e3c4a:	d106      	bne.n	e3c5a <__gethex+0x2f4>
   e3c4c:	b13f      	cbz	r7, e3c5e <__gethex+0x2f8>
   e3c4e:	4639      	mov	r1, r7
   e3c50:	4628      	mov	r0, r5
   e3c52:	f000 fe0c 	bl	e486e <__any_on>
   e3c56:	4681      	mov	r9, r0
   e3c58:	e001      	b.n	e3c5e <__gethex+0x2f8>
   e3c5a:	f04f 0901 	mov.w	r9, #1
   e3c5e:	117a      	asrs	r2, r7, #5
   e3c60:	2301      	movs	r3, #1
   e3c62:	f007 071f 	and.w	r7, r7, #31
   e3c66:	fa03 f707 	lsl.w	r7, r3, r7
   e3c6a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e3c6e:	4621      	mov	r1, r4
   e3c70:	421f      	tst	r7, r3
   e3c72:	4628      	mov	r0, r5
   e3c74:	bf18      	it	ne
   e3c76:	f049 0902 	orrne.w	r9, r9, #2
   e3c7a:	1b36      	subs	r6, r6, r4
   e3c7c:	f7ff fe28 	bl	e38d0 <rshift>
   e3c80:	2702      	movs	r7, #2
   e3c82:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e3c86:	e000      	b.n	e3c8a <__gethex+0x324>
   e3c88:	2701      	movs	r7, #1
   e3c8a:	f1b9 0f00 	cmp.w	r9, #0
   e3c8e:	f000 8081 	beq.w	e3d94 <__gethex+0x42e>
   e3c92:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e3c96:	2b02      	cmp	r3, #2
   e3c98:	d00e      	beq.n	e3cb8 <__gethex+0x352>
   e3c9a:	2b03      	cmp	r3, #3
   e3c9c:	d010      	beq.n	e3cc0 <__gethex+0x35a>
   e3c9e:	2b01      	cmp	r3, #1
   e3ca0:	d176      	bne.n	e3d90 <__gethex+0x42a>
   e3ca2:	f019 0f02 	tst.w	r9, #2
   e3ca6:	d073      	beq.n	e3d90 <__gethex+0x42a>
   e3ca8:	f8da 0000 	ldr.w	r0, [sl]
   e3cac:	ea49 0900 	orr.w	r9, r9, r0
   e3cb0:	f019 0f01 	tst.w	r9, #1
   e3cb4:	d107      	bne.n	e3cc6 <__gethex+0x360>
   e3cb6:	e06b      	b.n	e3d90 <__gethex+0x42a>
   e3cb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e3cba:	f1c3 0301 	rsb	r3, r3, #1
   e3cbe:	9315      	str	r3, [sp, #84]	; 0x54
   e3cc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e3cc2:	2b00      	cmp	r3, #0
   e3cc4:	d064      	beq.n	e3d90 <__gethex+0x42a>
   e3cc6:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e3cca:	f105 0314 	add.w	r3, r5, #20
   e3cce:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e3cd2:	eb03 0109 	add.w	r1, r3, r9
   e3cd6:	2000      	movs	r0, #0
   e3cd8:	681a      	ldr	r2, [r3, #0]
   e3cda:	f1b2 3fff 	cmp.w	r2, #4294967295
   e3cde:	d002      	beq.n	e3ce6 <__gethex+0x380>
   e3ce0:	3201      	adds	r2, #1
   e3ce2:	601a      	str	r2, [r3, #0]
   e3ce4:	e020      	b.n	e3d28 <__gethex+0x3c2>
   e3ce6:	f843 0b04 	str.w	r0, [r3], #4
   e3cea:	4299      	cmp	r1, r3
   e3cec:	d8f4      	bhi.n	e3cd8 <__gethex+0x372>
   e3cee:	68ab      	ldr	r3, [r5, #8]
   e3cf0:	459a      	cmp	sl, r3
   e3cf2:	db12      	blt.n	e3d1a <__gethex+0x3b4>
   e3cf4:	6869      	ldr	r1, [r5, #4]
   e3cf6:	9802      	ldr	r0, [sp, #8]
   e3cf8:	3101      	adds	r1, #1
   e3cfa:	f000 f9eb 	bl	e40d4 <_Balloc>
   e3cfe:	692a      	ldr	r2, [r5, #16]
   e3d00:	3202      	adds	r2, #2
   e3d02:	f105 010c 	add.w	r1, r5, #12
   e3d06:	4683      	mov	fp, r0
   e3d08:	0092      	lsls	r2, r2, #2
   e3d0a:	300c      	adds	r0, #12
   e3d0c:	f7fd fc29 	bl	e1562 <memcpy>
   e3d10:	4629      	mov	r1, r5
   e3d12:	9802      	ldr	r0, [sp, #8]
   e3d14:	f000 fa13 	bl	e413e <_Bfree>
   e3d18:	465d      	mov	r5, fp
   e3d1a:	692b      	ldr	r3, [r5, #16]
   e3d1c:	1c5a      	adds	r2, r3, #1
   e3d1e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e3d22:	612a      	str	r2, [r5, #16]
   e3d24:	2201      	movs	r2, #1
   e3d26:	615a      	str	r2, [r3, #20]
   e3d28:	2f02      	cmp	r7, #2
   e3d2a:	f105 0214 	add.w	r2, r5, #20
   e3d2e:	d111      	bne.n	e3d54 <__gethex+0x3ee>
   e3d30:	f8d8 3000 	ldr.w	r3, [r8]
   e3d34:	3b01      	subs	r3, #1
   e3d36:	429e      	cmp	r6, r3
   e3d38:	d127      	bne.n	e3d8a <__gethex+0x424>
   e3d3a:	1171      	asrs	r1, r6, #5
   e3d3c:	2301      	movs	r3, #1
   e3d3e:	f006 061f 	and.w	r6, r6, #31
   e3d42:	fa03 f606 	lsl.w	r6, r3, r6
   e3d46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e3d4a:	421e      	tst	r6, r3
   e3d4c:	bf0c      	ite	eq
   e3d4e:	2702      	moveq	r7, #2
   e3d50:	2701      	movne	r7, #1
   e3d52:	e01a      	b.n	e3d8a <__gethex+0x424>
   e3d54:	692b      	ldr	r3, [r5, #16]
   e3d56:	459a      	cmp	sl, r3
   e3d58:	da0a      	bge.n	e3d70 <__gethex+0x40a>
   e3d5a:	2101      	movs	r1, #1
   e3d5c:	4628      	mov	r0, r5
   e3d5e:	f7ff fdb7 	bl	e38d0 <rshift>
   e3d62:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e3d66:	3401      	adds	r4, #1
   e3d68:	429c      	cmp	r4, r3
   e3d6a:	f73f af2c 	bgt.w	e3bc6 <__gethex+0x260>
   e3d6e:	e00b      	b.n	e3d88 <__gethex+0x422>
   e3d70:	f016 061f 	ands.w	r6, r6, #31
   e3d74:	d008      	beq.n	e3d88 <__gethex+0x422>
   e3d76:	4491      	add	r9, r2
   e3d78:	f1c6 0620 	rsb	r6, r6, #32
   e3d7c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e3d80:	f000 fa6d 	bl	e425e <__hi0bits>
   e3d84:	42b0      	cmp	r0, r6
   e3d86:	dbe8      	blt.n	e3d5a <__gethex+0x3f4>
   e3d88:	2701      	movs	r7, #1
   e3d8a:	f047 0720 	orr.w	r7, r7, #32
   e3d8e:	e001      	b.n	e3d94 <__gethex+0x42e>
   e3d90:	f047 0710 	orr.w	r7, r7, #16
   e3d94:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e3d96:	601d      	str	r5, [r3, #0]
   e3d98:	9b06      	ldr	r3, [sp, #24]
   e3d9a:	4638      	mov	r0, r7
   e3d9c:	601c      	str	r4, [r3, #0]
   e3d9e:	b00b      	add	sp, #44	; 0x2c
   e3da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e3da4 <L_shift>:
   e3da4:	f1c2 0208 	rsb	r2, r2, #8
   e3da8:	0092      	lsls	r2, r2, #2
   e3daa:	b570      	push	{r4, r5, r6, lr}
   e3dac:	f1c2 0620 	rsb	r6, r2, #32
   e3db0:	6843      	ldr	r3, [r0, #4]
   e3db2:	6805      	ldr	r5, [r0, #0]
   e3db4:	fa03 f406 	lsl.w	r4, r3, r6
   e3db8:	432c      	orrs	r4, r5
   e3dba:	40d3      	lsrs	r3, r2
   e3dbc:	6004      	str	r4, [r0, #0]
   e3dbe:	f840 3f04 	str.w	r3, [r0, #4]!
   e3dc2:	4288      	cmp	r0, r1
   e3dc4:	d3f4      	bcc.n	e3db0 <L_shift+0xc>
   e3dc6:	bd70      	pop	{r4, r5, r6, pc}

000e3dc8 <__match>:
   e3dc8:	b530      	push	{r4, r5, lr}
   e3dca:	6803      	ldr	r3, [r0, #0]
   e3dcc:	f811 4b01 	ldrb.w	r4, [r1], #1
   e3dd0:	3301      	adds	r3, #1
   e3dd2:	b14c      	cbz	r4, e3de8 <__match+0x20>
   e3dd4:	781a      	ldrb	r2, [r3, #0]
   e3dd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e3dda:	2d19      	cmp	r5, #25
   e3ddc:	bf98      	it	ls
   e3dde:	3220      	addls	r2, #32
   e3de0:	42a2      	cmp	r2, r4
   e3de2:	d0f3      	beq.n	e3dcc <__match+0x4>
   e3de4:	2000      	movs	r0, #0
   e3de6:	bd30      	pop	{r4, r5, pc}
   e3de8:	6003      	str	r3, [r0, #0]
   e3dea:	2001      	movs	r0, #1
   e3dec:	bd30      	pop	{r4, r5, pc}

000e3dee <__hexnan>:
   e3dee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3df2:	680b      	ldr	r3, [r1, #0]
   e3df4:	f8d0 b000 	ldr.w	fp, [r0]
   e3df8:	115e      	asrs	r6, r3, #5
   e3dfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e3dfe:	f013 031f 	ands.w	r3, r3, #31
   e3e02:	b085      	sub	sp, #20
   e3e04:	bf18      	it	ne
   e3e06:	3604      	addne	r6, #4
   e3e08:	1f35      	subs	r5, r6, #4
   e3e0a:	4617      	mov	r7, r2
   e3e0c:	2200      	movs	r2, #0
   e3e0e:	4682      	mov	sl, r0
   e3e10:	9301      	str	r3, [sp, #4]
   e3e12:	f846 2c04 	str.w	r2, [r6, #-4]
   e3e16:	46a8      	mov	r8, r5
   e3e18:	462c      	mov	r4, r5
   e3e1a:	9200      	str	r2, [sp, #0]
   e3e1c:	4691      	mov	r9, r2
   e3e1e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e3e22:	2900      	cmp	r1, #0
   e3e24:	d03c      	beq.n	e3ea0 <__hexnan+0xb2>
   e3e26:	4608      	mov	r0, r1
   e3e28:	9203      	str	r2, [sp, #12]
   e3e2a:	9102      	str	r1, [sp, #8]
   e3e2c:	f7ff fd86 	bl	e393c <__hexdig_fun>
   e3e30:	9a03      	ldr	r2, [sp, #12]
   e3e32:	bb00      	cbnz	r0, e3e76 <__hexnan+0x88>
   e3e34:	9902      	ldr	r1, [sp, #8]
   e3e36:	2920      	cmp	r1, #32
   e3e38:	d816      	bhi.n	e3e68 <__hexnan+0x7a>
   e3e3a:	9b00      	ldr	r3, [sp, #0]
   e3e3c:	4599      	cmp	r9, r3
   e3e3e:	ddee      	ble.n	e3e1e <__hexnan+0x30>
   e3e40:	4544      	cmp	r4, r8
   e3e42:	d205      	bcs.n	e3e50 <__hexnan+0x62>
   e3e44:	2a07      	cmp	r2, #7
   e3e46:	dc03      	bgt.n	e3e50 <__hexnan+0x62>
   e3e48:	4641      	mov	r1, r8
   e3e4a:	4620      	mov	r0, r4
   e3e4c:	f7ff ffaa 	bl	e3da4 <L_shift>
   e3e50:	42bc      	cmp	r4, r7
   e3e52:	d923      	bls.n	e3e9c <__hexnan+0xae>
   e3e54:	2300      	movs	r3, #0
   e3e56:	f1a4 0804 	sub.w	r8, r4, #4
   e3e5a:	f844 3c04 	str.w	r3, [r4, #-4]
   e3e5e:	f8cd 9000 	str.w	r9, [sp]
   e3e62:	4644      	mov	r4, r8
   e3e64:	461a      	mov	r2, r3
   e3e66:	e7da      	b.n	e3e1e <__hexnan+0x30>
   e3e68:	2929      	cmp	r1, #41	; 0x29
   e3e6a:	d148      	bne.n	e3efe <__hexnan+0x110>
   e3e6c:	f10b 0301 	add.w	r3, fp, #1
   e3e70:	f8ca 3000 	str.w	r3, [sl]
   e3e74:	e014      	b.n	e3ea0 <__hexnan+0xb2>
   e3e76:	3201      	adds	r2, #1
   e3e78:	2a08      	cmp	r2, #8
   e3e7a:	f109 0901 	add.w	r9, r9, #1
   e3e7e:	dd06      	ble.n	e3e8e <__hexnan+0xa0>
   e3e80:	42bc      	cmp	r4, r7
   e3e82:	d9cc      	bls.n	e3e1e <__hexnan+0x30>
   e3e84:	2300      	movs	r3, #0
   e3e86:	f844 3c04 	str.w	r3, [r4, #-4]
   e3e8a:	2201      	movs	r2, #1
   e3e8c:	3c04      	subs	r4, #4
   e3e8e:	6821      	ldr	r1, [r4, #0]
   e3e90:	f000 000f 	and.w	r0, r0, #15
   e3e94:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e3e98:	6020      	str	r0, [r4, #0]
   e3e9a:	e7c0      	b.n	e3e1e <__hexnan+0x30>
   e3e9c:	2208      	movs	r2, #8
   e3e9e:	e7be      	b.n	e3e1e <__hexnan+0x30>
   e3ea0:	f1b9 0f00 	cmp.w	r9, #0
   e3ea4:	d02b      	beq.n	e3efe <__hexnan+0x110>
   e3ea6:	4544      	cmp	r4, r8
   e3ea8:	d205      	bcs.n	e3eb6 <__hexnan+0xc8>
   e3eaa:	2a07      	cmp	r2, #7
   e3eac:	dc03      	bgt.n	e3eb6 <__hexnan+0xc8>
   e3eae:	4641      	mov	r1, r8
   e3eb0:	4620      	mov	r0, r4
   e3eb2:	f7ff ff77 	bl	e3da4 <L_shift>
   e3eb6:	42bc      	cmp	r4, r7
   e3eb8:	d90c      	bls.n	e3ed4 <__hexnan+0xe6>
   e3eba:	463b      	mov	r3, r7
   e3ebc:	f854 2b04 	ldr.w	r2, [r4], #4
   e3ec0:	f843 2b04 	str.w	r2, [r3], #4
   e3ec4:	42a5      	cmp	r5, r4
   e3ec6:	d2f9      	bcs.n	e3ebc <__hexnan+0xce>
   e3ec8:	2200      	movs	r2, #0
   e3eca:	f843 2b04 	str.w	r2, [r3], #4
   e3ece:	429d      	cmp	r5, r3
   e3ed0:	d2fb      	bcs.n	e3eca <__hexnan+0xdc>
   e3ed2:	e00b      	b.n	e3eec <__hexnan+0xfe>
   e3ed4:	9b01      	ldr	r3, [sp, #4]
   e3ed6:	b14b      	cbz	r3, e3eec <__hexnan+0xfe>
   e3ed8:	f1c3 0220 	rsb	r2, r3, #32
   e3edc:	f04f 33ff 	mov.w	r3, #4294967295
   e3ee0:	40d3      	lsrs	r3, r2
   e3ee2:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e3ee6:	4013      	ands	r3, r2
   e3ee8:	f846 3c04 	str.w	r3, [r6, #-4]
   e3eec:	682b      	ldr	r3, [r5, #0]
   e3eee:	b943      	cbnz	r3, e3f02 <__hexnan+0x114>
   e3ef0:	42bd      	cmp	r5, r7
   e3ef2:	d102      	bne.n	e3efa <__hexnan+0x10c>
   e3ef4:	2301      	movs	r3, #1
   e3ef6:	602b      	str	r3, [r5, #0]
   e3ef8:	e003      	b.n	e3f02 <__hexnan+0x114>
   e3efa:	3d04      	subs	r5, #4
   e3efc:	e7f6      	b.n	e3eec <__hexnan+0xfe>
   e3efe:	2004      	movs	r0, #4
   e3f00:	e000      	b.n	e3f04 <__hexnan+0x116>
   e3f02:	2005      	movs	r0, #5
   e3f04:	b005      	add	sp, #20
   e3f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e3f0c <_findenv_r>:
   e3f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3f10:	4607      	mov	r7, r0
   e3f12:	468b      	mov	fp, r1
   e3f14:	4690      	mov	r8, r2
   e3f16:	f000 fcda 	bl	e48ce <__env_lock>
   e3f1a:	4b19      	ldr	r3, [pc, #100]	; (e3f80 <_findenv_r+0x74>)
   e3f1c:	681d      	ldr	r5, [r3, #0]
   e3f1e:	469a      	mov	sl, r3
   e3f20:	b13d      	cbz	r5, e3f32 <_findenv_r+0x26>
   e3f22:	465c      	mov	r4, fp
   e3f24:	4623      	mov	r3, r4
   e3f26:	f813 2b01 	ldrb.w	r2, [r3], #1
   e3f2a:	b142      	cbz	r2, e3f3e <_findenv_r+0x32>
   e3f2c:	2a3d      	cmp	r2, #61	; 0x3d
   e3f2e:	461c      	mov	r4, r3
   e3f30:	d1f8      	bne.n	e3f24 <_findenv_r+0x18>
   e3f32:	4638      	mov	r0, r7
   e3f34:	f000 fccc 	bl	e48d0 <__env_unlock>
   e3f38:	2000      	movs	r0, #0
   e3f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3f3e:	ebcb 0404 	rsb	r4, fp, r4
   e3f42:	46a9      	mov	r9, r5
   e3f44:	f859 0b04 	ldr.w	r0, [r9], #4
   e3f48:	2800      	cmp	r0, #0
   e3f4a:	d0f2      	beq.n	e3f32 <_findenv_r+0x26>
   e3f4c:	4622      	mov	r2, r4
   e3f4e:	4659      	mov	r1, fp
   e3f50:	f7fe fae8 	bl	e2524 <strncmp>
   e3f54:	b988      	cbnz	r0, e3f7a <_findenv_r+0x6e>
   e3f56:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e3f5a:	191e      	adds	r6, r3, r4
   e3f5c:	5d1b      	ldrb	r3, [r3, r4]
   e3f5e:	2b3d      	cmp	r3, #61	; 0x3d
   e3f60:	d10b      	bne.n	e3f7a <_findenv_r+0x6e>
   e3f62:	f8da 3000 	ldr.w	r3, [sl]
   e3f66:	1aed      	subs	r5, r5, r3
   e3f68:	10ad      	asrs	r5, r5, #2
   e3f6a:	4638      	mov	r0, r7
   e3f6c:	f8c8 5000 	str.w	r5, [r8]
   e3f70:	f000 fcae 	bl	e48d0 <__env_unlock>
   e3f74:	1c70      	adds	r0, r6, #1
   e3f76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3f7a:	464d      	mov	r5, r9
   e3f7c:	e7e1      	b.n	e3f42 <_findenv_r+0x36>
   e3f7e:	bf00      	nop
   e3f80:	2003bc04 	.word	0x2003bc04

000e3f84 <_getenv_r>:
   e3f84:	b507      	push	{r0, r1, r2, lr}
   e3f86:	aa01      	add	r2, sp, #4
   e3f88:	f7ff ffc0 	bl	e3f0c <_findenv_r>
   e3f8c:	b003      	add	sp, #12
   e3f8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e3f94 <__gettzinfo>:
   e3f94:	4800      	ldr	r0, [pc, #0]	; (e3f98 <__gettzinfo+0x4>)
   e3f96:	4770      	bx	lr
   e3f98:	2003bbc4 	.word	0x2003bbc4

000e3f9c <gmtime_r>:
   e3f9c:	6802      	ldr	r2, [r0, #0]
   e3f9e:	4b47      	ldr	r3, [pc, #284]	; (e40bc <gmtime_r+0x120>)
   e3fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e3fa2:	fb92 f4f3 	sdiv	r4, r2, r3
   e3fa6:	fb03 2214 	mls	r2, r3, r4, r2
   e3faa:	2a00      	cmp	r2, #0
   e3fac:	bfbc      	itt	lt
   e3fae:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e3fb2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e3fb6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e3fba:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e3fbe:	fb92 f3f0 	sdiv	r3, r2, r0
   e3fc2:	fb00 2213 	mls	r2, r0, r3, r2
   e3fc6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e3fca:	bfac      	ite	ge
   e3fcc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e3fd0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e3fd4:	608b      	str	r3, [r1, #8]
   e3fd6:	fb92 f3f0 	sdiv	r3, r2, r0
   e3fda:	fb00 2213 	mls	r2, r0, r3, r2
   e3fde:	604b      	str	r3, [r1, #4]
   e3fe0:	600a      	str	r2, [r1, #0]
   e3fe2:	2307      	movs	r3, #7
   e3fe4:	1ce2      	adds	r2, r4, #3
   e3fe6:	fb92 f3f3 	sdiv	r3, r2, r3
   e3fea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e3fee:	1ad3      	subs	r3, r2, r3
   e3ff0:	618b      	str	r3, [r1, #24]
   e3ff2:	4b33      	ldr	r3, [pc, #204]	; (e40c0 <gmtime_r+0x124>)
   e3ff4:	4d33      	ldr	r5, [pc, #204]	; (e40c4 <gmtime_r+0x128>)
   e3ff6:	fb94 f5f5 	sdiv	r5, r4, r5
   e3ffa:	fb03 4405 	mla	r4, r3, r5, r4
   e3ffe:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e4002:	fbb4 f2f2 	udiv	r2, r4, r2
   e4006:	4422      	add	r2, r4
   e4008:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e400c:	fbb4 f3f7 	udiv	r3, r4, r7
   e4010:	1ad2      	subs	r2, r2, r3
   e4012:	482d      	ldr	r0, [pc, #180]	; (e40c8 <gmtime_r+0x12c>)
   e4014:	fbb4 f0f0 	udiv	r0, r4, r0
   e4018:	f648 6694 	movw	r6, #36500	; 0x8e94
   e401c:	1a13      	subs	r3, r2, r0
   e401e:	fbb3 f6f6 	udiv	r6, r3, r6
   e4022:	4434      	add	r4, r6
   e4024:	f240 126d 	movw	r2, #365	; 0x16d
   e4028:	fbb3 f0f2 	udiv	r0, r3, r2
   e402c:	fbb3 f3f7 	udiv	r3, r3, r7
   e4030:	1ae3      	subs	r3, r4, r3
   e4032:	fb02 3310 	mls	r3, r2, r0, r3
   e4036:	2499      	movs	r4, #153	; 0x99
   e4038:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e403c:	3202      	adds	r2, #2
   e403e:	fbb2 f2f4 	udiv	r2, r2, r4
   e4042:	2a0a      	cmp	r2, #10
   e4044:	fb04 f402 	mul.w	r4, r4, r2
   e4048:	f104 0602 	add.w	r6, r4, #2
   e404c:	f04f 0405 	mov.w	r4, #5
   e4050:	fbb6 f4f4 	udiv	r4, r6, r4
   e4054:	bf34      	ite	cc
   e4056:	2602      	movcc	r6, #2
   e4058:	f06f 0609 	mvncs.w	r6, #9
   e405c:	4416      	add	r6, r2
   e405e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e4062:	fb02 0505 	mla	r5, r2, r5, r0
   e4066:	1c5f      	adds	r7, r3, #1
   e4068:	2e01      	cmp	r6, #1
   e406a:	bf98      	it	ls
   e406c:	3501      	addls	r5, #1
   e406e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e4072:	eba7 0704 	sub.w	r7, r7, r4
   e4076:	d302      	bcc.n	e407e <gmtime_r+0xe2>
   e4078:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e407c:	e014      	b.n	e40a8 <gmtime_r+0x10c>
   e407e:	0782      	lsls	r2, r0, #30
   e4080:	d105      	bne.n	e408e <gmtime_r+0xf2>
   e4082:	2464      	movs	r4, #100	; 0x64
   e4084:	fbb0 f2f4 	udiv	r2, r0, r4
   e4088:	fb04 0212 	mls	r2, r4, r2, r0
   e408c:	b94a      	cbnz	r2, e40a2 <gmtime_r+0x106>
   e408e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e4092:	fbb0 f4f2 	udiv	r4, r0, r2
   e4096:	fb02 0014 	mls	r0, r2, r4, r0
   e409a:	fab0 f280 	clz	r2, r0
   e409e:	0952      	lsrs	r2, r2, #5
   e40a0:	e000      	b.n	e40a4 <gmtime_r+0x108>
   e40a2:	2201      	movs	r2, #1
   e40a4:	333b      	adds	r3, #59	; 0x3b
   e40a6:	441a      	add	r2, r3
   e40a8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e40ac:	2300      	movs	r3, #0
   e40ae:	61ca      	str	r2, [r1, #28]
   e40b0:	614d      	str	r5, [r1, #20]
   e40b2:	610e      	str	r6, [r1, #16]
   e40b4:	60cf      	str	r7, [r1, #12]
   e40b6:	620b      	str	r3, [r1, #32]
   e40b8:	4608      	mov	r0, r1
   e40ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e40bc:	00015180 	.word	0x00015180
   e40c0:	fffdc54f 	.word	0xfffdc54f
   e40c4:	00023ab1 	.word	0x00023ab1
   e40c8:	00023ab0 	.word	0x00023ab0

000e40cc <labs>:
   e40cc:	2800      	cmp	r0, #0
   e40ce:	bfb8      	it	lt
   e40d0:	4240      	neglt	r0, r0
   e40d2:	4770      	bx	lr

000e40d4 <_Balloc>:
   e40d4:	b570      	push	{r4, r5, r6, lr}
   e40d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e40d8:	4604      	mov	r4, r0
   e40da:	460e      	mov	r6, r1
   e40dc:	b93d      	cbnz	r5, e40ee <_Balloc+0x1a>
   e40de:	2010      	movs	r0, #16
   e40e0:	f7f7 fd34 	bl	dbb4c <malloc>
   e40e4:	6260      	str	r0, [r4, #36]	; 0x24
   e40e6:	6045      	str	r5, [r0, #4]
   e40e8:	6085      	str	r5, [r0, #8]
   e40ea:	6005      	str	r5, [r0, #0]
   e40ec:	60c5      	str	r5, [r0, #12]
   e40ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e40f0:	68eb      	ldr	r3, [r5, #12]
   e40f2:	b143      	cbz	r3, e4106 <_Balloc+0x32>
   e40f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e40f6:	68db      	ldr	r3, [r3, #12]
   e40f8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e40fc:	b178      	cbz	r0, e411e <_Balloc+0x4a>
   e40fe:	6802      	ldr	r2, [r0, #0]
   e4100:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e4104:	e017      	b.n	e4136 <_Balloc+0x62>
   e4106:	2221      	movs	r2, #33	; 0x21
   e4108:	2104      	movs	r1, #4
   e410a:	4620      	mov	r0, r4
   e410c:	f000 fbd1 	bl	e48b2 <_calloc_r>
   e4110:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e4112:	60e8      	str	r0, [r5, #12]
   e4114:	68db      	ldr	r3, [r3, #12]
   e4116:	2b00      	cmp	r3, #0
   e4118:	d1ec      	bne.n	e40f4 <_Balloc+0x20>
   e411a:	2000      	movs	r0, #0
   e411c:	bd70      	pop	{r4, r5, r6, pc}
   e411e:	2101      	movs	r1, #1
   e4120:	fa01 f506 	lsl.w	r5, r1, r6
   e4124:	1d6a      	adds	r2, r5, #5
   e4126:	0092      	lsls	r2, r2, #2
   e4128:	4620      	mov	r0, r4
   e412a:	f000 fbc2 	bl	e48b2 <_calloc_r>
   e412e:	2800      	cmp	r0, #0
   e4130:	d0f3      	beq.n	e411a <_Balloc+0x46>
   e4132:	6046      	str	r6, [r0, #4]
   e4134:	6085      	str	r5, [r0, #8]
   e4136:	2300      	movs	r3, #0
   e4138:	6103      	str	r3, [r0, #16]
   e413a:	60c3      	str	r3, [r0, #12]
   e413c:	bd70      	pop	{r4, r5, r6, pc}

000e413e <_Bfree>:
   e413e:	b570      	push	{r4, r5, r6, lr}
   e4140:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e4142:	4606      	mov	r6, r0
   e4144:	460d      	mov	r5, r1
   e4146:	b93c      	cbnz	r4, e4158 <_Bfree+0x1a>
   e4148:	2010      	movs	r0, #16
   e414a:	f7f7 fcff 	bl	dbb4c <malloc>
   e414e:	6270      	str	r0, [r6, #36]	; 0x24
   e4150:	6044      	str	r4, [r0, #4]
   e4152:	6084      	str	r4, [r0, #8]
   e4154:	6004      	str	r4, [r0, #0]
   e4156:	60c4      	str	r4, [r0, #12]
   e4158:	b13d      	cbz	r5, e416a <_Bfree+0x2c>
   e415a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e415c:	686a      	ldr	r2, [r5, #4]
   e415e:	68db      	ldr	r3, [r3, #12]
   e4160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e4164:	6029      	str	r1, [r5, #0]
   e4166:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e416a:	bd70      	pop	{r4, r5, r6, pc}

000e416c <__multadd>:
   e416c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e4170:	690d      	ldr	r5, [r1, #16]
   e4172:	461f      	mov	r7, r3
   e4174:	4606      	mov	r6, r0
   e4176:	460c      	mov	r4, r1
   e4178:	f101 0e14 	add.w	lr, r1, #20
   e417c:	2300      	movs	r3, #0
   e417e:	f8de 0000 	ldr.w	r0, [lr]
   e4182:	b281      	uxth	r1, r0
   e4184:	fb02 7101 	mla	r1, r2, r1, r7
   e4188:	0c0f      	lsrs	r7, r1, #16
   e418a:	0c00      	lsrs	r0, r0, #16
   e418c:	fb02 7000 	mla	r0, r2, r0, r7
   e4190:	b289      	uxth	r1, r1
   e4192:	3301      	adds	r3, #1
   e4194:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e4198:	429d      	cmp	r5, r3
   e419a:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e419e:	f84e 1b04 	str.w	r1, [lr], #4
   e41a2:	dcec      	bgt.n	e417e <__multadd+0x12>
   e41a4:	b1d7      	cbz	r7, e41dc <__multadd+0x70>
   e41a6:	68a3      	ldr	r3, [r4, #8]
   e41a8:	429d      	cmp	r5, r3
   e41aa:	db12      	blt.n	e41d2 <__multadd+0x66>
   e41ac:	6861      	ldr	r1, [r4, #4]
   e41ae:	4630      	mov	r0, r6
   e41b0:	3101      	adds	r1, #1
   e41b2:	f7ff ff8f 	bl	e40d4 <_Balloc>
   e41b6:	6922      	ldr	r2, [r4, #16]
   e41b8:	3202      	adds	r2, #2
   e41ba:	f104 010c 	add.w	r1, r4, #12
   e41be:	4680      	mov	r8, r0
   e41c0:	0092      	lsls	r2, r2, #2
   e41c2:	300c      	adds	r0, #12
   e41c4:	f7fd f9cd 	bl	e1562 <memcpy>
   e41c8:	4621      	mov	r1, r4
   e41ca:	4630      	mov	r0, r6
   e41cc:	f7ff ffb7 	bl	e413e <_Bfree>
   e41d0:	4644      	mov	r4, r8
   e41d2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e41d6:	3501      	adds	r5, #1
   e41d8:	615f      	str	r7, [r3, #20]
   e41da:	6125      	str	r5, [r4, #16]
   e41dc:	4620      	mov	r0, r4
   e41de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e41e2 <__s2b>:
   e41e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e41e6:	460c      	mov	r4, r1
   e41e8:	4615      	mov	r5, r2
   e41ea:	461f      	mov	r7, r3
   e41ec:	2209      	movs	r2, #9
   e41ee:	3308      	adds	r3, #8
   e41f0:	4606      	mov	r6, r0
   e41f2:	fb93 f3f2 	sdiv	r3, r3, r2
   e41f6:	2100      	movs	r1, #0
   e41f8:	2201      	movs	r2, #1
   e41fa:	429a      	cmp	r2, r3
   e41fc:	da02      	bge.n	e4204 <__s2b+0x22>
   e41fe:	0052      	lsls	r2, r2, #1
   e4200:	3101      	adds	r1, #1
   e4202:	e7fa      	b.n	e41fa <__s2b+0x18>
   e4204:	4630      	mov	r0, r6
   e4206:	f7ff ff65 	bl	e40d4 <_Balloc>
   e420a:	9b08      	ldr	r3, [sp, #32]
   e420c:	6143      	str	r3, [r0, #20]
   e420e:	2d09      	cmp	r5, #9
   e4210:	f04f 0301 	mov.w	r3, #1
   e4214:	6103      	str	r3, [r0, #16]
   e4216:	dd11      	ble.n	e423c <__s2b+0x5a>
   e4218:	f104 0809 	add.w	r8, r4, #9
   e421c:	46c1      	mov	r9, r8
   e421e:	442c      	add	r4, r5
   e4220:	f819 3b01 	ldrb.w	r3, [r9], #1
   e4224:	4601      	mov	r1, r0
   e4226:	3b30      	subs	r3, #48	; 0x30
   e4228:	220a      	movs	r2, #10
   e422a:	4630      	mov	r0, r6
   e422c:	f7ff ff9e 	bl	e416c <__multadd>
   e4230:	45a1      	cmp	r9, r4
   e4232:	d1f5      	bne.n	e4220 <__s2b+0x3e>
   e4234:	eb08 0405 	add.w	r4, r8, r5
   e4238:	3c08      	subs	r4, #8
   e423a:	e001      	b.n	e4240 <__s2b+0x5e>
   e423c:	340a      	adds	r4, #10
   e423e:	2509      	movs	r5, #9
   e4240:	1b2d      	subs	r5, r5, r4
   e4242:	1963      	adds	r3, r4, r5
   e4244:	429f      	cmp	r7, r3
   e4246:	dd08      	ble.n	e425a <__s2b+0x78>
   e4248:	f814 3b01 	ldrb.w	r3, [r4], #1
   e424c:	4601      	mov	r1, r0
   e424e:	3b30      	subs	r3, #48	; 0x30
   e4250:	220a      	movs	r2, #10
   e4252:	4630      	mov	r0, r6
   e4254:	f7ff ff8a 	bl	e416c <__multadd>
   e4258:	e7f3      	b.n	e4242 <__s2b+0x60>
   e425a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e425e <__hi0bits>:
   e425e:	0c03      	lsrs	r3, r0, #16
   e4260:	041b      	lsls	r3, r3, #16
   e4262:	b913      	cbnz	r3, e426a <__hi0bits+0xc>
   e4264:	0400      	lsls	r0, r0, #16
   e4266:	2310      	movs	r3, #16
   e4268:	e000      	b.n	e426c <__hi0bits+0xe>
   e426a:	2300      	movs	r3, #0
   e426c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e4270:	bf04      	itt	eq
   e4272:	0200      	lsleq	r0, r0, #8
   e4274:	3308      	addeq	r3, #8
   e4276:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e427a:	bf04      	itt	eq
   e427c:	0100      	lsleq	r0, r0, #4
   e427e:	3304      	addeq	r3, #4
   e4280:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e4284:	bf04      	itt	eq
   e4286:	0080      	lsleq	r0, r0, #2
   e4288:	3302      	addeq	r3, #2
   e428a:	2800      	cmp	r0, #0
   e428c:	db03      	blt.n	e4296 <__hi0bits+0x38>
   e428e:	0042      	lsls	r2, r0, #1
   e4290:	d503      	bpl.n	e429a <__hi0bits+0x3c>
   e4292:	1c58      	adds	r0, r3, #1
   e4294:	4770      	bx	lr
   e4296:	4618      	mov	r0, r3
   e4298:	4770      	bx	lr
   e429a:	2020      	movs	r0, #32
   e429c:	4770      	bx	lr

000e429e <__lo0bits>:
   e429e:	6803      	ldr	r3, [r0, #0]
   e42a0:	f013 0207 	ands.w	r2, r3, #7
   e42a4:	d00b      	beq.n	e42be <__lo0bits+0x20>
   e42a6:	07d9      	lsls	r1, r3, #31
   e42a8:	d422      	bmi.n	e42f0 <__lo0bits+0x52>
   e42aa:	079a      	lsls	r2, r3, #30
   e42ac:	bf4b      	itete	mi
   e42ae:	085b      	lsrmi	r3, r3, #1
   e42b0:	089b      	lsrpl	r3, r3, #2
   e42b2:	6003      	strmi	r3, [r0, #0]
   e42b4:	6003      	strpl	r3, [r0, #0]
   e42b6:	bf4c      	ite	mi
   e42b8:	2001      	movmi	r0, #1
   e42ba:	2002      	movpl	r0, #2
   e42bc:	4770      	bx	lr
   e42be:	b299      	uxth	r1, r3
   e42c0:	b909      	cbnz	r1, e42c6 <__lo0bits+0x28>
   e42c2:	0c1b      	lsrs	r3, r3, #16
   e42c4:	2210      	movs	r2, #16
   e42c6:	f013 0fff 	tst.w	r3, #255	; 0xff
   e42ca:	bf04      	itt	eq
   e42cc:	0a1b      	lsreq	r3, r3, #8
   e42ce:	3208      	addeq	r2, #8
   e42d0:	0719      	lsls	r1, r3, #28
   e42d2:	bf04      	itt	eq
   e42d4:	091b      	lsreq	r3, r3, #4
   e42d6:	3204      	addeq	r2, #4
   e42d8:	0799      	lsls	r1, r3, #30
   e42da:	bf04      	itt	eq
   e42dc:	089b      	lsreq	r3, r3, #2
   e42de:	3202      	addeq	r2, #2
   e42e0:	07d9      	lsls	r1, r3, #31
   e42e2:	d402      	bmi.n	e42ea <__lo0bits+0x4c>
   e42e4:	085b      	lsrs	r3, r3, #1
   e42e6:	d005      	beq.n	e42f4 <__lo0bits+0x56>
   e42e8:	3201      	adds	r2, #1
   e42ea:	6003      	str	r3, [r0, #0]
   e42ec:	4610      	mov	r0, r2
   e42ee:	4770      	bx	lr
   e42f0:	2000      	movs	r0, #0
   e42f2:	4770      	bx	lr
   e42f4:	2020      	movs	r0, #32
   e42f6:	4770      	bx	lr

000e42f8 <__i2b>:
   e42f8:	b510      	push	{r4, lr}
   e42fa:	460c      	mov	r4, r1
   e42fc:	2101      	movs	r1, #1
   e42fe:	f7ff fee9 	bl	e40d4 <_Balloc>
   e4302:	2201      	movs	r2, #1
   e4304:	6144      	str	r4, [r0, #20]
   e4306:	6102      	str	r2, [r0, #16]
   e4308:	bd10      	pop	{r4, pc}

000e430a <__multiply>:
   e430a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e430e:	4614      	mov	r4, r2
   e4310:	690a      	ldr	r2, [r1, #16]
   e4312:	6923      	ldr	r3, [r4, #16]
   e4314:	429a      	cmp	r2, r3
   e4316:	bfb8      	it	lt
   e4318:	460b      	movlt	r3, r1
   e431a:	4688      	mov	r8, r1
   e431c:	bfbc      	itt	lt
   e431e:	46a0      	movlt	r8, r4
   e4320:	461c      	movlt	r4, r3
   e4322:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e4326:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e432a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e432e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e4332:	eb07 0609 	add.w	r6, r7, r9
   e4336:	429e      	cmp	r6, r3
   e4338:	bfc8      	it	gt
   e433a:	3101      	addgt	r1, #1
   e433c:	f7ff feca 	bl	e40d4 <_Balloc>
   e4340:	f100 0514 	add.w	r5, r0, #20
   e4344:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e4348:	462b      	mov	r3, r5
   e434a:	2200      	movs	r2, #0
   e434c:	4563      	cmp	r3, ip
   e434e:	d202      	bcs.n	e4356 <__multiply+0x4c>
   e4350:	f843 2b04 	str.w	r2, [r3], #4
   e4354:	e7fa      	b.n	e434c <__multiply+0x42>
   e4356:	f104 0214 	add.w	r2, r4, #20
   e435a:	f108 0114 	add.w	r1, r8, #20
   e435e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e4362:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e4366:	9300      	str	r3, [sp, #0]
   e4368:	9b00      	ldr	r3, [sp, #0]
   e436a:	9201      	str	r2, [sp, #4]
   e436c:	4293      	cmp	r3, r2
   e436e:	d957      	bls.n	e4420 <__multiply+0x116>
   e4370:	f8b2 b000 	ldrh.w	fp, [r2]
   e4374:	f1bb 0f00 	cmp.w	fp, #0
   e4378:	d023      	beq.n	e43c2 <__multiply+0xb8>
   e437a:	4689      	mov	r9, r1
   e437c:	46ae      	mov	lr, r5
   e437e:	f04f 0800 	mov.w	r8, #0
   e4382:	f859 4b04 	ldr.w	r4, [r9], #4
   e4386:	f8be a000 	ldrh.w	sl, [lr]
   e438a:	b2a3      	uxth	r3, r4
   e438c:	fb0b a303 	mla	r3, fp, r3, sl
   e4390:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e4394:	f8de 4000 	ldr.w	r4, [lr]
   e4398:	4443      	add	r3, r8
   e439a:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e439e:	fb0b 840a 	mla	r4, fp, sl, r8
   e43a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e43a6:	46f2      	mov	sl, lr
   e43a8:	b29b      	uxth	r3, r3
   e43aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e43ae:	454f      	cmp	r7, r9
   e43b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e43b4:	f84a 3b04 	str.w	r3, [sl], #4
   e43b8:	d901      	bls.n	e43be <__multiply+0xb4>
   e43ba:	46d6      	mov	lr, sl
   e43bc:	e7e1      	b.n	e4382 <__multiply+0x78>
   e43be:	f8ce 8004 	str.w	r8, [lr, #4]
   e43c2:	9b01      	ldr	r3, [sp, #4]
   e43c4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e43c8:	3204      	adds	r2, #4
   e43ca:	f1ba 0f00 	cmp.w	sl, #0
   e43ce:	d021      	beq.n	e4414 <__multiply+0x10a>
   e43d0:	682b      	ldr	r3, [r5, #0]
   e43d2:	462c      	mov	r4, r5
   e43d4:	4689      	mov	r9, r1
   e43d6:	f04f 0800 	mov.w	r8, #0
   e43da:	f8b9 e000 	ldrh.w	lr, [r9]
   e43de:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e43e2:	fb0a be0e 	mla	lr, sl, lr, fp
   e43e6:	44f0      	add	r8, lr
   e43e8:	46a3      	mov	fp, r4
   e43ea:	b29b      	uxth	r3, r3
   e43ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e43f0:	f84b 3b04 	str.w	r3, [fp], #4
   e43f4:	f859 3b04 	ldr.w	r3, [r9], #4
   e43f8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e43fc:	0c1b      	lsrs	r3, r3, #16
   e43fe:	fb0a e303 	mla	r3, sl, r3, lr
   e4402:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e4406:	454f      	cmp	r7, r9
   e4408:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e440c:	d901      	bls.n	e4412 <__multiply+0x108>
   e440e:	465c      	mov	r4, fp
   e4410:	e7e3      	b.n	e43da <__multiply+0xd0>
   e4412:	6063      	str	r3, [r4, #4]
   e4414:	3504      	adds	r5, #4
   e4416:	e7a7      	b.n	e4368 <__multiply+0x5e>
   e4418:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e441c:	b913      	cbnz	r3, e4424 <__multiply+0x11a>
   e441e:	3e01      	subs	r6, #1
   e4420:	2e00      	cmp	r6, #0
   e4422:	dcf9      	bgt.n	e4418 <__multiply+0x10e>
   e4424:	6106      	str	r6, [r0, #16]
   e4426:	b003      	add	sp, #12
   e4428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e442c <__pow5mult>:
   e442c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e4430:	4615      	mov	r5, r2
   e4432:	f012 0203 	ands.w	r2, r2, #3
   e4436:	4606      	mov	r6, r0
   e4438:	460f      	mov	r7, r1
   e443a:	d007      	beq.n	e444c <__pow5mult+0x20>
   e443c:	3a01      	subs	r2, #1
   e443e:	4c21      	ldr	r4, [pc, #132]	; (e44c4 <__pow5mult+0x98>)
   e4440:	2300      	movs	r3, #0
   e4442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e4446:	f7ff fe91 	bl	e416c <__multadd>
   e444a:	4607      	mov	r7, r0
   e444c:	10ad      	asrs	r5, r5, #2
   e444e:	d036      	beq.n	e44be <__pow5mult+0x92>
   e4450:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e4452:	b93c      	cbnz	r4, e4464 <__pow5mult+0x38>
   e4454:	2010      	movs	r0, #16
   e4456:	f7f7 fb79 	bl	dbb4c <malloc>
   e445a:	6270      	str	r0, [r6, #36]	; 0x24
   e445c:	6044      	str	r4, [r0, #4]
   e445e:	6084      	str	r4, [r0, #8]
   e4460:	6004      	str	r4, [r0, #0]
   e4462:	60c4      	str	r4, [r0, #12]
   e4464:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e4468:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e446c:	b94c      	cbnz	r4, e4482 <__pow5mult+0x56>
   e446e:	f240 2171 	movw	r1, #625	; 0x271
   e4472:	4630      	mov	r0, r6
   e4474:	f7ff ff40 	bl	e42f8 <__i2b>
   e4478:	2300      	movs	r3, #0
   e447a:	f8c8 0008 	str.w	r0, [r8, #8]
   e447e:	4604      	mov	r4, r0
   e4480:	6003      	str	r3, [r0, #0]
   e4482:	f04f 0800 	mov.w	r8, #0
   e4486:	07eb      	lsls	r3, r5, #31
   e4488:	d50a      	bpl.n	e44a0 <__pow5mult+0x74>
   e448a:	4639      	mov	r1, r7
   e448c:	4622      	mov	r2, r4
   e448e:	4630      	mov	r0, r6
   e4490:	f7ff ff3b 	bl	e430a <__multiply>
   e4494:	4639      	mov	r1, r7
   e4496:	4681      	mov	r9, r0
   e4498:	4630      	mov	r0, r6
   e449a:	f7ff fe50 	bl	e413e <_Bfree>
   e449e:	464f      	mov	r7, r9
   e44a0:	106d      	asrs	r5, r5, #1
   e44a2:	d00c      	beq.n	e44be <__pow5mult+0x92>
   e44a4:	6820      	ldr	r0, [r4, #0]
   e44a6:	b108      	cbz	r0, e44ac <__pow5mult+0x80>
   e44a8:	4604      	mov	r4, r0
   e44aa:	e7ec      	b.n	e4486 <__pow5mult+0x5a>
   e44ac:	4622      	mov	r2, r4
   e44ae:	4621      	mov	r1, r4
   e44b0:	4630      	mov	r0, r6
   e44b2:	f7ff ff2a 	bl	e430a <__multiply>
   e44b6:	6020      	str	r0, [r4, #0]
   e44b8:	f8c0 8000 	str.w	r8, [r0]
   e44bc:	e7f4      	b.n	e44a8 <__pow5mult+0x7c>
   e44be:	4638      	mov	r0, r7
   e44c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e44c4:	000e62d8 	.word	0x000e62d8

000e44c8 <__lshift>:
   e44c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e44cc:	460c      	mov	r4, r1
   e44ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e44d2:	6926      	ldr	r6, [r4, #16]
   e44d4:	6849      	ldr	r1, [r1, #4]
   e44d6:	68a3      	ldr	r3, [r4, #8]
   e44d8:	4456      	add	r6, sl
   e44da:	4607      	mov	r7, r0
   e44dc:	4691      	mov	r9, r2
   e44de:	1c75      	adds	r5, r6, #1
   e44e0:	42ab      	cmp	r3, r5
   e44e2:	da02      	bge.n	e44ea <__lshift+0x22>
   e44e4:	3101      	adds	r1, #1
   e44e6:	005b      	lsls	r3, r3, #1
   e44e8:	e7fa      	b.n	e44e0 <__lshift+0x18>
   e44ea:	4638      	mov	r0, r7
   e44ec:	f7ff fdf2 	bl	e40d4 <_Balloc>
   e44f0:	2300      	movs	r3, #0
   e44f2:	4680      	mov	r8, r0
   e44f4:	f100 0114 	add.w	r1, r0, #20
   e44f8:	461a      	mov	r2, r3
   e44fa:	4553      	cmp	r3, sl
   e44fc:	da03      	bge.n	e4506 <__lshift+0x3e>
   e44fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e4502:	3301      	adds	r3, #1
   e4504:	e7f9      	b.n	e44fa <__lshift+0x32>
   e4506:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e450a:	6920      	ldr	r0, [r4, #16]
   e450c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e4510:	f019 091f 	ands.w	r9, r9, #31
   e4514:	f104 0114 	add.w	r1, r4, #20
   e4518:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e451c:	d014      	beq.n	e4548 <__lshift+0x80>
   e451e:	f1c9 0c20 	rsb	ip, r9, #32
   e4522:	2200      	movs	r2, #0
   e4524:	6808      	ldr	r0, [r1, #0]
   e4526:	fa00 f009 	lsl.w	r0, r0, r9
   e452a:	4302      	orrs	r2, r0
   e452c:	469a      	mov	sl, r3
   e452e:	f843 2b04 	str.w	r2, [r3], #4
   e4532:	f851 2b04 	ldr.w	r2, [r1], #4
   e4536:	458e      	cmp	lr, r1
   e4538:	fa22 f20c 	lsr.w	r2, r2, ip
   e453c:	d8f2      	bhi.n	e4524 <__lshift+0x5c>
   e453e:	f8ca 2004 	str.w	r2, [sl, #4]
   e4542:	b142      	cbz	r2, e4556 <__lshift+0x8e>
   e4544:	1cb5      	adds	r5, r6, #2
   e4546:	e006      	b.n	e4556 <__lshift+0x8e>
   e4548:	3b04      	subs	r3, #4
   e454a:	f851 2b04 	ldr.w	r2, [r1], #4
   e454e:	f843 2f04 	str.w	r2, [r3, #4]!
   e4552:	458e      	cmp	lr, r1
   e4554:	d8f9      	bhi.n	e454a <__lshift+0x82>
   e4556:	3d01      	subs	r5, #1
   e4558:	4638      	mov	r0, r7
   e455a:	f8c8 5010 	str.w	r5, [r8, #16]
   e455e:	4621      	mov	r1, r4
   e4560:	f7ff fded 	bl	e413e <_Bfree>
   e4564:	4640      	mov	r0, r8
   e4566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e456a <__mcmp>:
   e456a:	6903      	ldr	r3, [r0, #16]
   e456c:	690a      	ldr	r2, [r1, #16]
   e456e:	1a9b      	subs	r3, r3, r2
   e4570:	b510      	push	{r4, lr}
   e4572:	d111      	bne.n	e4598 <__mcmp+0x2e>
   e4574:	0092      	lsls	r2, r2, #2
   e4576:	3014      	adds	r0, #20
   e4578:	3114      	adds	r1, #20
   e457a:	1883      	adds	r3, r0, r2
   e457c:	440a      	add	r2, r1
   e457e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e4582:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e4586:	428c      	cmp	r4, r1
   e4588:	d002      	beq.n	e4590 <__mcmp+0x26>
   e458a:	d307      	bcc.n	e459c <__mcmp+0x32>
   e458c:	2001      	movs	r0, #1
   e458e:	bd10      	pop	{r4, pc}
   e4590:	4298      	cmp	r0, r3
   e4592:	d3f4      	bcc.n	e457e <__mcmp+0x14>
   e4594:	2000      	movs	r0, #0
   e4596:	bd10      	pop	{r4, pc}
   e4598:	4618      	mov	r0, r3
   e459a:	bd10      	pop	{r4, pc}
   e459c:	f04f 30ff 	mov.w	r0, #4294967295
   e45a0:	bd10      	pop	{r4, pc}

000e45a2 <__mdiff>:
   e45a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e45a6:	460c      	mov	r4, r1
   e45a8:	4607      	mov	r7, r0
   e45aa:	4611      	mov	r1, r2
   e45ac:	4620      	mov	r0, r4
   e45ae:	4615      	mov	r5, r2
   e45b0:	f7ff ffdb 	bl	e456a <__mcmp>
   e45b4:	1e06      	subs	r6, r0, #0
   e45b6:	d108      	bne.n	e45ca <__mdiff+0x28>
   e45b8:	4631      	mov	r1, r6
   e45ba:	4638      	mov	r0, r7
   e45bc:	f7ff fd8a 	bl	e40d4 <_Balloc>
   e45c0:	2301      	movs	r3, #1
   e45c2:	6103      	str	r3, [r0, #16]
   e45c4:	6146      	str	r6, [r0, #20]
   e45c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e45ca:	bfbc      	itt	lt
   e45cc:	4623      	movlt	r3, r4
   e45ce:	462c      	movlt	r4, r5
   e45d0:	4638      	mov	r0, r7
   e45d2:	6861      	ldr	r1, [r4, #4]
   e45d4:	bfba      	itte	lt
   e45d6:	461d      	movlt	r5, r3
   e45d8:	2601      	movlt	r6, #1
   e45da:	2600      	movge	r6, #0
   e45dc:	f7ff fd7a 	bl	e40d4 <_Balloc>
   e45e0:	692b      	ldr	r3, [r5, #16]
   e45e2:	60c6      	str	r6, [r0, #12]
   e45e4:	6926      	ldr	r6, [r4, #16]
   e45e6:	f105 0914 	add.w	r9, r5, #20
   e45ea:	3414      	adds	r4, #20
   e45ec:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e45f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e45f4:	f100 0514 	add.w	r5, r0, #20
   e45f8:	f04f 0c00 	mov.w	ip, #0
   e45fc:	f854 3b04 	ldr.w	r3, [r4], #4
   e4600:	f859 2b04 	ldr.w	r2, [r9], #4
   e4604:	fa1c f183 	uxtah	r1, ip, r3
   e4608:	fa1f fe82 	uxth.w	lr, r2
   e460c:	0c12      	lsrs	r2, r2, #16
   e460e:	ebce 0101 	rsb	r1, lr, r1
   e4612:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e4616:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e461a:	b289      	uxth	r1, r1
   e461c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e4620:	45c8      	cmp	r8, r9
   e4622:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e4626:	46a6      	mov	lr, r4
   e4628:	f845 3b04 	str.w	r3, [r5], #4
   e462c:	d8e6      	bhi.n	e45fc <__mdiff+0x5a>
   e462e:	45be      	cmp	lr, r7
   e4630:	d20e      	bcs.n	e4650 <__mdiff+0xae>
   e4632:	f85e 1b04 	ldr.w	r1, [lr], #4
   e4636:	fa1c f281 	uxtah	r2, ip, r1
   e463a:	1413      	asrs	r3, r2, #16
   e463c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e4640:	b292      	uxth	r2, r2
   e4642:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e4646:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e464a:	f845 2b04 	str.w	r2, [r5], #4
   e464e:	e7ee      	b.n	e462e <__mdiff+0x8c>
   e4650:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e4654:	b90b      	cbnz	r3, e465a <__mdiff+0xb8>
   e4656:	3e01      	subs	r6, #1
   e4658:	e7fa      	b.n	e4650 <__mdiff+0xae>
   e465a:	6106      	str	r6, [r0, #16]
   e465c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e4660 <__ulp>:
   e4660:	4b12      	ldr	r3, [pc, #72]	; (e46ac <__ulp+0x4c>)
   e4662:	ee10 2a90 	vmov	r2, s1
   e4666:	401a      	ands	r2, r3
   e4668:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e466c:	2b00      	cmp	r3, #0
   e466e:	dd02      	ble.n	e4676 <__ulp+0x16>
   e4670:	2000      	movs	r0, #0
   e4672:	4619      	mov	r1, r3
   e4674:	e017      	b.n	e46a6 <__ulp+0x46>
   e4676:	425b      	negs	r3, r3
   e4678:	151b      	asrs	r3, r3, #20
   e467a:	2b13      	cmp	r3, #19
   e467c:	f04f 0000 	mov.w	r0, #0
   e4680:	f04f 0100 	mov.w	r1, #0
   e4684:	dc04      	bgt.n	e4690 <__ulp+0x30>
   e4686:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e468a:	fa42 f103 	asr.w	r1, r2, r3
   e468e:	e00a      	b.n	e46a6 <__ulp+0x46>
   e4690:	3b14      	subs	r3, #20
   e4692:	2b1e      	cmp	r3, #30
   e4694:	f04f 0201 	mov.w	r2, #1
   e4698:	bfda      	itte	le
   e469a:	f1c3 031f 	rsble	r3, r3, #31
   e469e:	fa02 f303 	lslle.w	r3, r2, r3
   e46a2:	4613      	movgt	r3, r2
   e46a4:	4618      	mov	r0, r3
   e46a6:	ec41 0b10 	vmov	d0, r0, r1
   e46aa:	4770      	bx	lr
   e46ac:	7ff00000 	.word	0x7ff00000

000e46b0 <__b2d>:
   e46b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e46b2:	6905      	ldr	r5, [r0, #16]
   e46b4:	f100 0614 	add.w	r6, r0, #20
   e46b8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e46bc:	1f2f      	subs	r7, r5, #4
   e46be:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e46c2:	4620      	mov	r0, r4
   e46c4:	f7ff fdcb 	bl	e425e <__hi0bits>
   e46c8:	f1c0 0320 	rsb	r3, r0, #32
   e46cc:	280a      	cmp	r0, #10
   e46ce:	600b      	str	r3, [r1, #0]
   e46d0:	dc14      	bgt.n	e46fc <__b2d+0x4c>
   e46d2:	f1c0 0e0b 	rsb	lr, r0, #11
   e46d6:	fa24 f10e 	lsr.w	r1, r4, lr
   e46da:	42be      	cmp	r6, r7
   e46dc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e46e0:	bf34      	ite	cc
   e46e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e46e6:	2100      	movcs	r1, #0
   e46e8:	3015      	adds	r0, #21
   e46ea:	fa04 f000 	lsl.w	r0, r4, r0
   e46ee:	fa21 f10e 	lsr.w	r1, r1, lr
   e46f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e46f6:	ea40 0201 	orr.w	r2, r0, r1
   e46fa:	e023      	b.n	e4744 <__b2d+0x94>
   e46fc:	42be      	cmp	r6, r7
   e46fe:	bf3a      	itte	cc
   e4700:	f1a5 0708 	subcc.w	r7, r5, #8
   e4704:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e4708:	2100      	movcs	r1, #0
   e470a:	380b      	subs	r0, #11
   e470c:	d015      	beq.n	e473a <__b2d+0x8a>
   e470e:	4084      	lsls	r4, r0
   e4710:	f1c0 0520 	rsb	r5, r0, #32
   e4714:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e4718:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e471c:	42b7      	cmp	r7, r6
   e471e:	fa21 fe05 	lsr.w	lr, r1, r5
   e4722:	ea44 030e 	orr.w	r3, r4, lr
   e4726:	bf8c      	ite	hi
   e4728:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e472c:	2400      	movls	r4, #0
   e472e:	fa01 f000 	lsl.w	r0, r1, r0
   e4732:	40ec      	lsrs	r4, r5
   e4734:	ea40 0204 	orr.w	r2, r0, r4
   e4738:	e004      	b.n	e4744 <__b2d+0x94>
   e473a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e473e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e4742:	460a      	mov	r2, r1
   e4744:	ec43 2b10 	vmov	d0, r2, r3
   e4748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e474a <__d2b>:
   e474a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e474e:	460e      	mov	r6, r1
   e4750:	2101      	movs	r1, #1
   e4752:	ec59 8b10 	vmov	r8, r9, d0
   e4756:	4615      	mov	r5, r2
   e4758:	f7ff fcbc 	bl	e40d4 <_Balloc>
   e475c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e4760:	4607      	mov	r7, r0
   e4762:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e4766:	b10c      	cbz	r4, e476c <__d2b+0x22>
   e4768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e476c:	9301      	str	r3, [sp, #4]
   e476e:	f1b8 0f00 	cmp.w	r8, #0
   e4772:	d019      	beq.n	e47a8 <__d2b+0x5e>
   e4774:	a802      	add	r0, sp, #8
   e4776:	f840 8d08 	str.w	r8, [r0, #-8]!
   e477a:	f7ff fd90 	bl	e429e <__lo0bits>
   e477e:	9b00      	ldr	r3, [sp, #0]
   e4780:	b148      	cbz	r0, e4796 <__d2b+0x4c>
   e4782:	9a01      	ldr	r2, [sp, #4]
   e4784:	f1c0 0120 	rsb	r1, r0, #32
   e4788:	fa02 f101 	lsl.w	r1, r2, r1
   e478c:	430b      	orrs	r3, r1
   e478e:	40c2      	lsrs	r2, r0
   e4790:	617b      	str	r3, [r7, #20]
   e4792:	9201      	str	r2, [sp, #4]
   e4794:	e000      	b.n	e4798 <__d2b+0x4e>
   e4796:	617b      	str	r3, [r7, #20]
   e4798:	9b01      	ldr	r3, [sp, #4]
   e479a:	61bb      	str	r3, [r7, #24]
   e479c:	2b00      	cmp	r3, #0
   e479e:	bf14      	ite	ne
   e47a0:	2102      	movne	r1, #2
   e47a2:	2101      	moveq	r1, #1
   e47a4:	6139      	str	r1, [r7, #16]
   e47a6:	e007      	b.n	e47b8 <__d2b+0x6e>
   e47a8:	a801      	add	r0, sp, #4
   e47aa:	f7ff fd78 	bl	e429e <__lo0bits>
   e47ae:	9b01      	ldr	r3, [sp, #4]
   e47b0:	617b      	str	r3, [r7, #20]
   e47b2:	2101      	movs	r1, #1
   e47b4:	6139      	str	r1, [r7, #16]
   e47b6:	3020      	adds	r0, #32
   e47b8:	b134      	cbz	r4, e47c8 <__d2b+0x7e>
   e47ba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e47be:	4404      	add	r4, r0
   e47c0:	6034      	str	r4, [r6, #0]
   e47c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e47c6:	e009      	b.n	e47dc <__d2b+0x92>
   e47c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e47cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e47d0:	6030      	str	r0, [r6, #0]
   e47d2:	6918      	ldr	r0, [r3, #16]
   e47d4:	f7ff fd43 	bl	e425e <__hi0bits>
   e47d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e47dc:	6028      	str	r0, [r5, #0]
   e47de:	4638      	mov	r0, r7
   e47e0:	b003      	add	sp, #12
   e47e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e47e6 <__ratio>:
   e47e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e47ea:	4688      	mov	r8, r1
   e47ec:	4669      	mov	r1, sp
   e47ee:	4681      	mov	r9, r0
   e47f0:	f7ff ff5e 	bl	e46b0 <__b2d>
   e47f4:	a901      	add	r1, sp, #4
   e47f6:	4640      	mov	r0, r8
   e47f8:	ec55 4b10 	vmov	r4, r5, d0
   e47fc:	f7ff ff58 	bl	e46b0 <__b2d>
   e4800:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e4804:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e4808:	1a9a      	subs	r2, r3, r2
   e480a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e480e:	1ac9      	subs	r1, r1, r3
   e4810:	ec57 6b10 	vmov	r6, r7, d0
   e4814:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e4818:	2b00      	cmp	r3, #0
   e481a:	bfcc      	ite	gt
   e481c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e4820:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e4824:	4632      	mov	r2, r6
   e4826:	463b      	mov	r3, r7
   e4828:	4620      	mov	r0, r4
   e482a:	4629      	mov	r1, r5
   e482c:	f7fc f96a 	bl	e0b04 <__aeabi_ddiv>
   e4830:	ec41 0b10 	vmov	d0, r0, r1
   e4834:	b003      	add	sp, #12
   e4836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e483a <__copybits>:
   e483a:	3901      	subs	r1, #1
   e483c:	b510      	push	{r4, lr}
   e483e:	1149      	asrs	r1, r1, #5
   e4840:	6914      	ldr	r4, [r2, #16]
   e4842:	3101      	adds	r1, #1
   e4844:	f102 0314 	add.w	r3, r2, #20
   e4848:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e484c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e4850:	42a3      	cmp	r3, r4
   e4852:	4602      	mov	r2, r0
   e4854:	d204      	bcs.n	e4860 <__copybits+0x26>
   e4856:	f853 2b04 	ldr.w	r2, [r3], #4
   e485a:	f840 2b04 	str.w	r2, [r0], #4
   e485e:	e7f7      	b.n	e4850 <__copybits+0x16>
   e4860:	2300      	movs	r3, #0
   e4862:	428a      	cmp	r2, r1
   e4864:	d202      	bcs.n	e486c <__copybits+0x32>
   e4866:	f842 3b04 	str.w	r3, [r2], #4
   e486a:	e7fa      	b.n	e4862 <__copybits+0x28>
   e486c:	bd10      	pop	{r4, pc}

000e486e <__any_on>:
   e486e:	f100 0214 	add.w	r2, r0, #20
   e4872:	6900      	ldr	r0, [r0, #16]
   e4874:	114b      	asrs	r3, r1, #5
   e4876:	4298      	cmp	r0, r3
   e4878:	b510      	push	{r4, lr}
   e487a:	db0c      	blt.n	e4896 <__any_on+0x28>
   e487c:	dd0c      	ble.n	e4898 <__any_on+0x2a>
   e487e:	f011 011f 	ands.w	r1, r1, #31
   e4882:	d009      	beq.n	e4898 <__any_on+0x2a>
   e4884:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e4888:	fa24 f001 	lsr.w	r0, r4, r1
   e488c:	fa00 f101 	lsl.w	r1, r0, r1
   e4890:	428c      	cmp	r4, r1
   e4892:	d10c      	bne.n	e48ae <__any_on+0x40>
   e4894:	e000      	b.n	e4898 <__any_on+0x2a>
   e4896:	4603      	mov	r3, r0
   e4898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e489c:	4293      	cmp	r3, r2
   e489e:	d904      	bls.n	e48aa <__any_on+0x3c>
   e48a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e48a4:	2900      	cmp	r1, #0
   e48a6:	d0f9      	beq.n	e489c <__any_on+0x2e>
   e48a8:	e001      	b.n	e48ae <__any_on+0x40>
   e48aa:	2000      	movs	r0, #0
   e48ac:	bd10      	pop	{r4, pc}
   e48ae:	2001      	movs	r0, #1
   e48b0:	bd10      	pop	{r4, pc}

000e48b2 <_calloc_r>:
   e48b2:	b538      	push	{r3, r4, r5, lr}
   e48b4:	fb02 f401 	mul.w	r4, r2, r1
   e48b8:	4621      	mov	r1, r4
   e48ba:	f7f7 f997 	bl	dbbec <_malloc_r>
   e48be:	4605      	mov	r5, r0
   e48c0:	b118      	cbz	r0, e48ca <_calloc_r+0x18>
   e48c2:	4622      	mov	r2, r4
   e48c4:	2100      	movs	r1, #0
   e48c6:	f7fc fe57 	bl	e1578 <memset>
   e48ca:	4628      	mov	r0, r5
   e48cc:	bd38      	pop	{r3, r4, r5, pc}

000e48ce <__env_lock>:
   e48ce:	4770      	bx	lr

000e48d0 <__env_unlock>:
   e48d0:	4770      	bx	lr

000e48d2 <link_code_end>:
	...

000e48d4 <dynalib_user>:
   e48d4:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e48e4:	0000 0000                                   ....

000e48e8 <_ZTVN8particle13__SPISettingsE>:
	...
   e48f0:	41e9 000d                                   .A..

000e48f4 <_ZTV5Timer>:
	...
   e48fc:	4385 000d 43cd 000d 41cf 000d               .C...C...A..

000e4908 <_ZTVN8particle9LEDStatusE>:
	...
   e4910:	42b5 000d 42d1 000d 40bf 000d               .B...B...@..

000e491c <_ZL15firmwareVersion>:
   e491c:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   e492c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   e493c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   e494c:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   e495c:	4d20 444f 2545 3e64 4400 7665 6369 2065      MODE%d>.Device 
   e496c:	2000 4f4e 2054 7461 2000 6461 7264 7365     . NOT at. addres
   e497c:	3a73 7830 5300 6163 6e6e 6e69 2e67 2e2e     s:0x.Scanning...
   e498c:	5500 6b6e 6f6e 6e77 6520 7272 726f 6120     .Unknown error a
   e499c:	2074 6461 7264 7365 2073 7830 4e00 206f     t address 0x.No 
   e49ac:	3249 2043 6564 6976 6563 2073 6f66 6e75     I2C devices foun
   e49bc:	0a64 6400 6e6f 0a65 4100 7474 6d65 7470     d..done..Attempt
   e49cc:	6e69 2067 6f74 6320 6e6f 656e 7463 6320     ing to connect c
   e49dc:	6c65 756c 616c 2e72 2e2e 4300 6c65 756c     ellular....Cellu
   e49ec:	616c 2072 6f6e 2074 6572 6461 2079 202d     lar not ready - 
   e49fc:	6572 6573 7474 6e69 0067 6543 6c6c 6c75     resetting.Cellul
   e4a0c:	7261 7220 6165 7964 4100 7474 6d65 7470     ar ready.Attempt
   e4a1c:	6e69 2067 6f74 6320 6e6f 656e 7463 7420     ing to connect t
   e4a2c:	206f 6150 7472 6369 656c 2e2e 002e 6150     o Particle....Pa
   e4a3c:	7472 6369 656c 6e20 746f 6320 6e6f 656e     rticle not conne
   e4a4c:	7463 6465 2d20 7220 7365 7465 6974 676e     cted - resetting
   e4a5c:	5000 7261 6974 6c63 2065 6f63 6e6e 6365     .Particle connec
   e4a6c:	6574 0064 6954 656d 4e20 544f 7320 6e79     ted.Time NOT syn
   e4a7c:	6563 0064 6576 7372 6f69 006e 6564 6976     ced.version.devi
   e4a8c:	6563 7473 7461 7375 5000 756c 2067 6874     cestatus.Plug th
   e4a9c:	2065 6564 6976 6563 6920 746e 206f 6874     e device into th
   e4aac:	2065 6f49 2054 6f4e 6564 4400 7665 6369     e IoT Node.Devic
   e4abc:	2065 7369 6e20 746f 7020 756c 6767 6465     e is not plugged
   e4acc:	6920 746e 206f 6874 2065 6f49 4e54 646f      into the IoTNod
   e4adc:	0065 6552 6573 7474 6e69 2067 6e69 3120     e.Resetting in 1
   e4aec:	2030 6573 6f63 646e 0073 5452 2043 7973     0 seconds.RTC sy
   e4afc:	636e 6527 2064 6977 6874 6320 6f6c 6475     nc'ed with cloud
   e4b0c:	5200 4354 6e20 746f 7320 6e79 2763 6465     .RTC not sync'ed
   e4b1c:	7720 7469 2068 6c63 756f 0064 6e55 6c70      with cloud.Unpl
   e4b2c:	6775 6567 0064 227b 5455 3a22 2520 2c75     ugged.{"UT": %u,
   e4b3c:	2220 5656 3a22 2520 312e 2066 202c 5022      "VV": %.1f , "P
   e4b4c:	6572 6963 2270 203a 2e25 6631 2c20 2220     recip": %.1f , "
   e4b5c:	5644 3a22 2520 312e 2066 202c 5422 6d65     DV": %.1f , "Tem
   e4b6c:	2270 203a 2e25 6631 2c20 4822 6d75 3a22     p": %.1f ,"Hum":
   e4b7c:	2520 2075 2c20 6d22 4256 3a22 2520 2075      %u  ,"mVB": %u 
   e4b8c:	202c 4f22 2233 203a 2e25 6636 2c20 4322     , "O3": %.6f ,"C
   e4b9c:	224f 203a 2e25 6636 2c20 4e22 324f 3a22     O": %.6f ,"NO2":
   e4bac:	2520 362e 2066 222c 4f53 2232 203a 2e25      %.6f ,"SO2": %.
   e4bbc:	6636 2c20 5622 4147 4f53 2233 203a 2e25     6f ,"VGASO3": %.
   e4bcc:	3431 2066 222c 4756 5341 4f43 3a22 2520     14f ,"VGASCO": %
   e4bdc:	312e 6634 2c20 5622 4147 4e53 324f 3a22     .14f ,"VGASNO2":
   e4bec:	2520 312e 6634 2c20 5622 4147 5353 324f      %.14f ,"VGASSO2
   e4bfc:	3a22 2520 312e 6634 2c20 5022 314d 3a22     ": %.14f ,"PM1":
   e4c0c:	2520 2075 222c 4d50 2e32 2235 203a 7525      %u ,"PM2.5": %u
   e4c1c:	2c20 5022 314d 2230 203a 7525 2c20 007d      ,"PM10": %u ,}.
   e4c2c:	6e55 7869 6954 656d 5600 6c65 636f 6469     UnixTime.Velocid
   e4c3c:	6461 6420 6c65 5620 6569 746e 006f 7250     ad del Viento.Pr
   e4c4c:	6365 7069 7469 6361 6f69 006e 6944 6572     ecipitacion.Dire
   e4c5c:	6363 6f69 206e 6564 206c 6976 6e65 6f74     ccion del viento
   e4c6c:	5400 6d65 6570 6172 7574 6172 4800 6d75     .Temperatura.Hum
   e4c7c:	6465 6461 4d00 6c69 7669 6c6f 7374 7200     edad.Milivolts.r
   e4c8c:	6165 7964 6f54 6547 5274 7365 7465 6e41     eadyToGetResetAn
   e4c9c:	5364 6e65 5364 6e65 6f73 7372 4300 7061     dSendSensors.Cap
   e4cac:	7574 6972 676e 7320 6e65 6f73 7372 6300     turing sensors.c
   e4cbc:	7061 7574 6572 7700 6265 6f68 6b6f 5200     apture.webhook.R
   e4ccc:	4354 4500 7078 5200 4354 4520 5045 4f52     TC.Exp.RTC EEPRO
   e4cdc:	004d 4441 0043 5246 4d41 4100 324d 3133     M.ADC.FRAM.AM231
   e4cec:	0035 504d 334c 3131 0035 5354 324c 3935     5.MPL3115.TSL259
   e4cfc:	0031 4441 3153 3131 0035 6255 6469 746f     1.ADS1115.Ubidot
   e4d0c:	0073 0000                                   s...

000e4d10 <_ZTV4File>:
	...
   e4d18:	59cd 000d 5a19 000d 5a01 000d 59fb 000d     .Y...Z...Z...Y..
   e4d28:	59b1 000d 59db 000d 59d5 000d 59cf 000d     .Y...Y...Y...Y..
   e4d38:	206f 4d57 6c50 676f 0073 3025 7536 742e     o WMPlogs.%06u.t
   e4d48:	7478 7200 6d65 766f 6e69 2067 6c6f 2064     xt.removing old 
   e4d58:	6f6c 2067 6966 656c 2520 0073 6b6d 6964     log file %s.mkdi
   e4d68:	2072 6166 6c69 6465 6600 6961 656c 2064     r failed.failed 
   e4d78:	6f74 6f20 6570 206e 6f6c 7367 6420 7269     to open logs dir
   e4d88:	6300 6572 7461 6e69 2067 6f6c 7367 6420     .creating logs d
   e4d98:	7269 2520 0073 7263 6165 6974 676e 6e20     ir %s.creating n
   e4da8:	7765 6c20 676f 6620 6c69 2065 3025 6434     ew log file %04d
   e4db8:	7700 6972 6574 7420 206f 6473 6320 7261     .write to sd car
   e4dc8:	2064 6166 6c69 6465 0000 0000               d failed....

000e4dd4 <_ZTV18SdCardPrintHandler>:
	...
   e4ddc:	606d 000d 6089 000d 639d 000d c95d 000d     m`...`...c..]...

000e4dec <CSWTCH.22>:
   e4dec:	0000 4348 0000 4396 0000 43c8 0000 43fa     ..HC...C...C...C
   e4dfc:	0000 4416                                   ...D

000e4e00 <_ZTV16Adafruit_TSL2591>:
	...
   e4e08:	6851 000d 689d 000d 40c1 000d 6b53 000d     Qh...h...@..Sk..
   e4e18:	6855 000d 7441 6574 706d 6974 676e 7420     Uh..Attempting t
   e4e28:	206f 6572 6f63 6e6e 6365 0074 7254 6979     o reconnect.Tryi
   e4e38:	676e 7420 206f 6f63 6e6e 6365 2074 6f74     ng to connect to
   e4e48:	0020 2c20 6120 7474 6d65 7470 6e20 6d75      . , attempt num
   e4e58:	6562 3a72 0020 6974 656d 756f 2c74 6320     ber: .timeout, c
   e4e68:	756f 646c 6e20 746f 7220 6165 2064 6e61     ould not read an
   e4e78:	2079 6572 7073 6e6f 6573 6620 6f72 206d     y response from 
   e4e88:	6874 2065 6f68 7473 5300 7265 6576 2772     the host.Server'
   e4e98:	2073 6572 7073 6e6f 6573 003a 2d0a 2d2d     s response:..---
   e4ea8:	2d2d 2d2d 2d2d 002d 4f50 5453 4f00 004b     -------.POST.OK.
   e4eb8:	4c7c 7c56 5000 7961 6f6c 6461 6620 726f     |LV|.Payload for
   e4ec8:	7220 7165 6575 7473 003a 2d0a 2d2d 002d      request:..----.
   e4ed8:	564c 4500 5252 524f 6320 756f 646c 6e20     LV.ERROR could n
   e4ee8:	746f 6320 6e6f 656e 7463 7420 206f 6874     ot connect to th
   e4ef8:	2065 6573 7672 7265 4300 756f 646c 6e20     e server.Could n
   e4f08:	746f 6320 6e6f 656e 7463 7420 206f 6874     ot connect to th
   e4f18:	2065 6f68 7473 0000                         e host..

000e4f20 <_ZTV6UbiTCP>:
	...
   e4f28:	8c81 000d 8b1d 000d 8913 000d 6f59 2075     ............You 
   e4f38:	7261 2065 6573 646e 6e69 2067 6f6d 6572     are sending more
   e4f48:	7420 6168 206e 6874 2065 616d 6978 756d      than the maximu
   e4f58:	206d 666f 6320 6e6f 6573 7563 6974 6576     m of consecutive
   e4f68:	7620 7261 6169 6c62 7365 4500 5252 524f      variables.ERROR
   e4f78:	202c 6164 6174 7220 7465 6972 7665 6c61     , data retrieval
   e4f88:	6920 2073 6e6f 796c 7320 7075 6f70 7472      is only support
   e4f98:	6465 7520 6973 676e 5420 5043 6f20 2072     ed using TCP or 
   e4fa8:	5448 5054 7020 6f72 6f74 6f63 736c 2500     HTTP protocols.%
   e4fb8:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   e4fc8:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   e4fd8:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   e4fe8:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   e4ff8:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   e5008:	2500 2c73 7000 7961 6f6c 6461 003a 6255     .%s,.payload:.Ub
   e5018:	6469 746f 5073 7261 6974 6c63 2f65 2e33     idotsParticle/3.
   e5028:	0031 7325 507c 534f 7c54 7325 007c 7325     1.%s|POST|%s|.%s
   e5038:	7325 253a 0073 7325 3e3d 2500 2473 7325     %s:%s.%s=>.%s$%s
   e5048:	2500 4073 6c25 0075 7325 657c 646e 5300     .%s@%lu.%s|end.S
   e5058:	6e65 6964 676e 6420 7461 2e61 2e2e 6900     ending data....i
   e5068:	646e 7375 7274 6169 2e6c 7061 2e69 6275     ndustrial.api.ub
   e5078:	6469 746f 2e73 6f63 006d 575b 5241 494e     idots.com.[WARNI
   e5088:	474e 205d 6854 2065 654d 6873 5020 6f72     NG] The Mesh Pro
   e5098:	6f74 6f63 206c 7369 6e20 746f 7320 7075     tocol is not sup
   e50a8:	6f70 7472 6465 6920 206e 6874 7369 6420     ported in this d
   e50b8:	7665 6369 2065 6f66 2072 6573 646e 6e69     evice for sendin
   e50c8:	2067 6164 6174 5b00 6157 6e72 6e69 5d67     g data.[Warning]
   e50d8:	5420 206f 6572 7274 6569 6576 6420 7461      To retrieve dat
   e50e8:	2c61 7020 656c 7361 2065 6573 2074 2061     a, please set a 
   e50f8:	6176 696c 2064 6c63 756f 2064 7270 746f     valid cloud prot
   e5108:	636f 6c6f 6920 206e 6874 2065 6255 6469     ocol in the Ubid
   e5118:	746f 2073 6f63 736e 7274 6375 6f74 0072     ots constructor.
   e5128:	6f59 2075 7261 2065 6461 6964 676e 6d20     You are adding m
   e5138:	726f 2065 6874 6e61 7420 6568 6d20 7861     ore than the max
   e5148:	6d69 6d75 6f20 2066 6f63 736e 6365 7475     imum of consecut
   e5158:	7669 2065 656b 2d79 6176 756c 7365 7020     ive key-values p
   e5168:	6961 7372 2500 2573 3d73 7325 2500 2473     airs.%s%s=%s.%s$
   e5178:	2500 2273 7325 3a22 2522 2273 0000 0000     .%s"%s":"%s"....

000e5188 <_ZTV7UbiHTTP>:
	...
   e5190:	9565 000d 97b5 000d 9339 000d 7441 6574     e.......9...Atte
   e51a0:	706d 2074 6966 696e 6873 6465 5000 534f     mpt finished.POS
   e51b0:	2054 612f 6970 762f 2e31 2f36 6564 6976     T /api/v1.6/devi
   e51c0:	6563 2f73 2000 5448 5054 312f 312e 0a0d     ces/. HTTP/1.1..
   e51d0:	4800 736f 3a74 0020 7355 7265 412d 6567     .Host: .User-Age
   e51e0:	746e 203a 5800 412d 7475 2d68 6f54 656b     nt: .X-Auth-Toke
   e51f0:	3a6e 0020 6f43 6e6e 6365 6974 6e6f 203a     n: .Connection: 
   e5200:	6c63 736f 0d65 000a 6f43 746e 6e65 2d74     close...Content-
   e5210:	7954 6570 203a 7061 6c70 6369 7461 6f69     Type: applicatio
   e5220:	2f6e 736a 6e6f 0a0d 4300 6e6f 6574 746e     n/json...Content
   e5230:	4c2d 6e65 7467 3a68 0020 614d 696b 676e     -Length: .Making
   e5240:	7220 7165 6575 7473 7420 206f 6255 6469      request to Ubid
   e5250:	746f 3a73 000a 6177 7469 6e69 2067 6f66     ots:..waiting fo
   e5260:	2072 6573 7672 7265 6120 736e 6577 2072     r server answer 
   e5270:	2e2e 002e 550a 6962 6f64 7374 2027 6553     .....Ubidots' Se
   e5280:	7672 7265 7220 7365 6f70 736e 3a65 000a     rver response:..
   e5290:	6f43 6c75 2064 6f6e 2074 6573 646e 6420     Could not send d
   e52a0:	7461 2061 6f74 7520 6962 6f64 7374 7520     ata to ubidots u
   e52b0:	6973 676e 4820 5454 0050 4547 2054 612f     sing HTTP.GET /a
   e52c0:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
   e52d0:	2f00 766c 4300 6e6f 6574 746e 542d 7079     ./lv.Content-Typ
   e52e0:	3a65 6120 7070 696c 6163 6974 6e6f 6a2f     e: application/j
   e52f0:	6f73 0d6e 0d0a 000a 6f43 6e6e 6365 6974     son.....Connecti
   e5300:	6e6f 4620 6961 656c 2064 6275 6469 746f     on Failed ubidot
   e5310:	2073 202d 7254 2079 6741 6961 006e          s - Try Again.

000e531e <_ZStL19piecewise_construct>:
   e531e:	5b00 4157 4e52 4e49 5d47 5920 756f 2072     .[WARNING] Your 
   e532e:	654d 6873 6320 6e6f 6574 7478 6c20 6e65     Mesh context len
   e533e:	7467 2068 756d 7473 6220 2065 6f6c 6577     gth must be lowe
   e534e:	2072 6874 6e61 3120 3030 2500 7c73 6625     r than 100.%s|%f
   e535e:	257c 7c73 7325 257c 0073 2041 7270 626f     |%s|%s|%s.A prob
   e536e:	656c 206d 6168 2073 6172 7369 6465 7720     lem has raised w
   e537e:	7469 2068 6874 2065 6564 6976 6563 7420     ith the device t
   e538e:	7972 6e69 2067 6f74 6f20 6570 206e 2061     rying to open a 
   e539e:	654d 6873 6f73 6b63 7465 5900 756f 6820     Meshsocket.You h
   e53ae:	7661 2065 6f6e 2074 6461 6564 2064 6e61     ave not added an
   e53be:	2079 6176 6972 6261 656c 7620 6c61 6575     y variable value
   e53ce:	202c 6c70 6165 6573 6320 6c61 206c 6874     , please call th
   e53de:	2065 6461 2864 6d29 7465 6f68 2064 6966     e add()method fi
   e53ee:	7372 0074 6275 6469 746f 2d73 656d 6873     rst.ubidots-mesh
   e53fe:	5b00 4157 4e52 4e49 5d47 7920 756f 2072     .[WARNING] your 
   e540e:	6173 706d 656c 7420 6d69 2065 6572 6361     sample time reac
   e541e:	6568 2064 6874 2065 6874 6f72 7474 696c     hed the throttli
   e542e:	676e 6f20 2066 3032 7320 202c 6c70 6165     ng of 20 s, plea
   e543e:	6573 7320 7465 6120 6820 6769 6568 2072     se set a higher 
   e544e:	6173 706d 656c 7420 6d69 2065 726f 7520     sample time or u
   e545e:	6573 5520 5044 6f20 2072 6150 7472 6369     se UDP or Partic
   e546e:	656c 5720 6265 6f68 6b6f 2073 6f74 7320     le Webhooks to s
   e547e:	6e65 2064 6164 6174 5b00 6157 6e72 6e69     end data.[Warnin
   e548e:	5d67 4320 756f 646c 6e20 746f 7320 6c6f     g] Could not sol
   e549e:	6576 4920 2050 6441 7264 7365 2073 666f     ve IP Address of
   e54ae:	7420 6568 7220 6d65 746f 2065 6f68 7473      the remote host
   e54be:	202c 6977 6874 7920 756f 2072 4e44 2053     , with your DNS 
   e54ce:	6573 7574 2e70 2020 2020 2020 2020 2020     setup.          
   e54de:	0a20 7355 6e69 2067 6564 6166 6c75 2074      .Using default 
   e54ee:	6e49 7564 7473 6972 6c61 5520 6962 6f64     Industrial Ubido
   e54fe:	7374 4920 3a50 3120 3936 352e 2e35 3136     ts IP: 169.55.61
   e550e:	322e 3334 4500 5252 524f 7320 6e65 6964     .243.ERROR sendi
   e551e:	676e 7620 6c61 6575 2073 6977 6874 5520     ng values with U
   e552e:	5044 0000 0000                              DP....

000e5534 <_ZTV6UbiUDP>:
	...
   e553c:	9f8d 000d 9f21 000d 9f2d 000d               ....!...-...

000e5548 <_ZTV11UbiParticle>:
	...
   e5550:	a0bb 000d a055 000d a061 000d 2e25 6631     ....U...a...%.1f
   e5560:	2500 332e 0066 2e25 6632 5300 6174 7472     .%.3f.%.2f.Start
   e5570:	6e69 2067 6441 6661 7572 7469 5420 4c53     ing Adafruit TSL
   e5580:	3532 3139 5420 7365 2174 4600 756f 646e     2591 Test!.Found
   e5590:	6120 5420 4c53 3532 3139 7320 6e65 6f73      a TSL2591 senso
   e55a0:	0072 6f4e 7320 6e65 6f73 2072 6f66 6e75     r.No sensor foun
   e55b0:	2064 2e2e 202e 6863 6365 206b 6f79 7275     d ... check your
   e55c0:	7720 7269 6e69 3f67 2d00 2d2d 2d2d 2d2d      wiring?.-------
   e55d0:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   e55e0:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 002d 6553     -------------.Se
   e55f0:	736e 726f 203a 2020 2020 2020 4400 6972     nsor:       .Dri
   e5600:	6576 2072 6556 3a72 2020 0020 6e55 7169     ver Ver:   .Uniq
   e5610:	6575 4920 3a44 2020 2020 4d00 7861 5620     ue ID:    .Max V
   e5620:	6c61 6575 203a 2020 0020 6c20 7875 4d00     alue:    . lux.M
   e5630:	6e69 5620 6c61 6575 203a 2020 0020 6552     in Value:    .Re
   e5640:	6f73 756c 6974 6e6f 203a 2020 4700 6961     solution:   .Gai
   e5650:	3a6e 2020 2020 2020 2020 0020 7831 2820     n:         .1x (
   e5660:	6f4c 2977 3200 7835 2820 654d 6964 6d75     Low).25x (Medium
   e5670:	0029 3234 7838 2820 6948 6867 0029 3839     ).428x (High).98
   e5680:	3637 2078 4d28 7861 0029 6954 696d 676e     76x (Max).Timing
   e5690:	203a 2020 2020 2020 2000 736d 0000 0000     :       . ms....

000e56a0 <_ZTVN5spark13EthernetClassE>:
	...
   e56a8:	bc6b 000d bc61 000d bc57 000d bc4d 000d     k...a...W...M...
   e56b8:	bc41 000d bc35 000d bc29 000d bc21 000d     A...5...)...!...
   e56c8:	bc17 000d bc0d 000d e3cf 000d               ............

000e56d4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   e56d4:	0800 1810 2820 3830                         .... (08

000e56dc <_ZTV3UDP>:
	...
   e56e4:	9aa1 000d 9ac1 000d bf91 000d c0bb 000d     ................
   e56f4:	bf89 000d bfa7 000d bfc5 000d bfdf 000d     ................
   e5704:	c003 000d c09f 000d c3a1 000d c141 000d     ............A...
   e5714:	c2c1 000d bf71 000d c481 000d c245 000d     ....q.......E...
   e5724:	c179 000d c4af 000d c0e5 000d bf7f 000d     y...............
   e5734:	c121 000d bf85 000d bfe1 000d fff0 ffff     !...............
   e5744:	0000 0000 bffb 000d 616e 006e 766f 0066     ........nan.ovf.
   e5754:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   e5764:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   e5774:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   e5784:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   e5794:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   e57a4:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   e57b4:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   e57c4:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   e57d4:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   e57e4:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   e57f4:	736c 3d20 0020 6e6c 6600 006e 6f63 6564     ls = .ln.fn.code
   e5804:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   e5814:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   e5824:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
   e5834:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   e5844:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   e5854:	6d69 0065                                   ime.

000e5858 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e5860:	d0cd 000d d0d3 000d d117 000d d0e1 000d     ................
   e5870:	d0cf 000d                                   ....

000e5874 <_ZTV9IPAddress>:
	...
   e587c:	d665 000d d655 000d d657 000d               e...U...W...

000e5888 <_ZTV9USBSerial>:
	...
   e5890:	d783 000d d7d3 000d d7e1 000d c95d 000d     ............]...
   e58a0:	d7bf 000d d785 000d d79b 000d d7cd 000d     ................
   e58b0:	d7b1 000d d77f 000d                         ........

000e58b8 <_ZTVN5spark13CellularClassE>:
	...
   e58c0:	d9b1 000d d9a7 000d d99d 000d 42e5 000d     .............B..
   e58d0:	d991 000d d985 000d d979 000d d971 000d     ........y...q...
   e58e0:	d967 000d d95d 000d e3cf 000d               g...].......

000e58ec <_ZTV11USARTSerial>:
	...
   e58f4:	d9ed 000d da3d 000d da4b 000d c95d 000d     ....=...K...]...
   e5904:	da01 000d da23 000d da0f 000d da37 000d     ....#.......7...
   e5914:	d9ef 000d d9f3 000d                         ........

000e591c <_ZTV7TwoWire>:
	...
   e5924:	db25 000d db6f 000d db47 000d db27 000d     %...o...G...'...
   e5934:	db4f 000d db57 000d db5f 000d db67 000d     O...W..._...g...

000e5944 <_ZTVN5spark9MeshClassE>:
	...
   e594c:	dcb5 000d dcab 000d dca1 000d 9e0d 000d     ................
   e595c:	dc95 000d dc89 000d dc7d 000d dc75 000d     ........}...u...
   e596c:	dc6b 000d dc61 000d e3cf 000d               k...a.......

000e5978 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   e5980:	de59 000d de5f 000d e34f 000d de6d 000d     Y..._...O...m...
   e5990:	de5b 000d                                   [...

000e5994 <_ZTV9TCPClient>:
	...
   e599c:	8919 000d 894d 000d ddd1 000d ddeb 000d     ....M...........
   e59ac:	e1ed 000d df3f 000d df11 000d de15 000d     ....?...........
   e59bc:	e0c9 000d dfc5 000d df73 000d e1bd 000d     ........s.......
   e59cc:	de17 000d de4f 000d ddfd 000d de71 000d     ....O.......q...
   e59dc:	def1 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   e59ec:	7265 6f72 2072 203d 6425 0000               error = %d..

000e59f8 <_ZTVN5spark12NetworkClassE>:
	...
   e5a00:	e367 000d e371 000d e37b 000d e385 000d     g...q...{.......
   e5a10:	e38f 000d e39b 000d e3a7 000d e3b3 000d     ................
   e5a20:	e3bb 000d e3c5 000d e3cf 000d               ............

000e5a2c <_ZSt7nothrow>:
   e5a2c:	0000 0000                                   ....

000e5a30 <atanlo>:
   e5a30:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   e5a40:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000e5a50 <atanhi>:
   e5a50:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   e5a60:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000e5a70 <npio2_hw>:
   e5a70:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   e5a80:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   e5a90:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   e5aa0:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   e5ab0:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   e5ac0:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   e5ad0:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   e5ae0:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000e5af0 <two_over_pi>:
   e5af0:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   e5b00:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   e5b10:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   e5b20:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   e5b30:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   e5b40:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   e5b50:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   e5b60:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   e5b70:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   e5b80:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   e5b90:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   e5ba0:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   e5bb0:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   e5bc0:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   e5bd0:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   e5be0:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   e5bf0:	e27b 0060 8c6b 00c0                         {.`.k...

000e5bf8 <init_jk>:
   e5bf8:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000e5c08 <PIo2>:
   e5c08:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   e5c18:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   e5c28:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   e5c38:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000e5c48 <day_name.4725>:
   e5c48:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e5c58:	6972 6153 4a74                                   riSat

000e5c5d <mon_name.4726>:
   e5c5d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e5c6d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e5c7d:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   e5c8d:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   e5c9d:	6425 000a                                   %d..

000e5ca1 <_ctype_>:
   e5ca1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e5cb1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e5cc1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e5cd1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e5ce1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e5cf1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e5d01:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e5d11:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e5d21:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e5da4 <__sf_fake_stdin>:
	...

000e5dc4 <__sf_fake_stdout>:
	...

000e5de4 <__sf_fake_stderr>:
	...
   e5e04:	4f50 4953 0058 0000                         POSIX...

000e5e0c <_DAYS_BEFORE_MONTH>:
   e5e0c:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   e5e1c:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   e5e2c:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000e5e3c <DAYS_IN_MONTH>:
   e5e3c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e5e4c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e5e5c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e5e6c <__month_lengths>:
   e5e6c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e5e7c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e5e8c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e5e9c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e5eac:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e5ebc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e5ecc:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e5edc:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   e5eec:	322e 0064 2d59 6d25 252d 0064 2a2e 0075     .2d.Y-%m-%d..*u.
   e5efc:	2e25 6433 2500 6c6c 0064 2e25 6432 253a     %.3d.%lld.%.2d:%
   e5f0c:	322e 3a64 2e25 6432 2500 302b 6c33 2564     .2d:%.2d.%+03ld%
   e5f1c:	322e 646c 0000 0000                         .2ld....

000e5f24 <fpi.5344>:
   e5f24:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e5f34:	0000 0000                                   ....

000e5f38 <fpinan.5380>:
   e5f38:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e5f48:	0000 0000 6e69 7469 0079 0000 0000 0000     ....inity.......

000e5f58 <tinytens>:
   e5f58:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e5f68:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e5f78:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   e5f88:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   e5f98:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   e5fa8:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   e5fb8:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   e5fc8:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   e5fd8:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   e5fe8:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   e5ff8:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   e6008:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   e6018:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   e6028:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   e6038:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   e6048:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   e6058:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   e6068:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   e6078:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   e6088:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   e6098:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   e60a8:	2053 7025 0000 0000                         S %p....

000e60b0 <_C_time_locale>:
   e60b0:	5f88 000e 5f8c 000e 5f90 000e 5f94 000e     ._..._..._..._..
   e60c0:	5f98 000e 5f9c 000e 5fa0 000e 5fa4 000e     ._..._..._..._..
   e60d0:	5fa8 000e 5fac 000e 5fb0 000e 5fb4 000e     ._..._..._..._..
   e60e0:	5fb8 000e 5fc0 000e 5fc9 000e 5fcf 000e     ._..._..._..._..
   e60f0:	5f98 000e 5fd5 000e 5fda 000e 5fdf 000e     ._..._..._..._..
   e6100:	5fe6 000e 5ff0 000e 5ff8 000e 6001 000e     ._..._..._...`..
   e6110:	600a 000e 600e 000e 6012 000e 6016 000e     .`...`...`...`..
   e6120:	601a 000e 601e 000e 6022 000e 6026 000e     .`...`.."`..&`..
   e6130:	602d 000e 6034 000e 603c 000e 6046 000e     -`..4`..<`..F`..
   e6140:	604f 000e 6056 000e 605f 000e 6068 000e     O`..V`.._`..h`..
   e6150:	6071 000e 4ce4 000e 6086 000e 6089 000e     q`...L...`...`..
   e6160:	5fb8 000e 5fc0 000e 5fc9 000e 5fcf 000e     ._..._..._..._..
   e6170:	5f98 000e 5fd5 000e 5fda 000e 5fdf 000e     ._..._..._..._..
   e6180:	5fe6 000e 5ff0 000e 5ff8 000e 6001 000e     ._..._..._...`..
   e6190:	5778 000e 60a1 000e 52f7 000e 52f7 000e     xW...`...R...R..
   e61a0:	52f7 000e 52f7 000e 52f7 000e 5a54 4700     .R...R...R..TZ.G
   e61b0:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e61c0:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e61d0:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e61e0:	3a6e 6825 2575 006e                         n:%hu%n.

000e61e8 <__mprec_tens>:
   e61e8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e61f8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e6208:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e6218:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e6228:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e6238:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e6248:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e6258:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e6268:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e6278:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e6288:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e6298:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e62a8:	9db4 79d9 7843 44ea                         ...yCx.D

000e62b0 <__mprec_bigtens>:
   e62b0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e62c0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e62d0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e62d8 <p05.5387>:
   e62d8:	0005 0000 0019 0000 007d 0000               ........}...

000e62e4 <link_const_variable_data_end>:
   e62e4:	000d54ed 	.word	0x000d54ed
   e62e8:	000d599d 	.word	0x000d599d
   e62ec:	000d59ad 	.word	0x000d59ad
   e62f0:	000d5e49 	.word	0x000d5e49
   e62f4:	000d63bb 	.word	0x000d63bb
   e62f8:	000d64bf 	.word	0x000d64bf
   e62fc:	000d684d 	.word	0x000d684d
   e6300:	000d6b93 	.word	0x000d6b93
   e6304:	000d6b97 	.word	0x000d6b97
   e6308:	000d6cbf 	.word	0x000d6cbf
   e630c:	000d6cc3 	.word	0x000d6cc3
   e6310:	000d6cc7 	.word	0x000d6cc7
   e6314:	000d74d5 	.word	0x000d74d5
   e6318:	000d74d9 	.word	0x000d74d9
   e631c:	000d74dd 	.word	0x000d74dd
   e6320:	000d750f 	.word	0x000d750f
   e6324:	000d7e71 	.word	0x000d7e71
   e6328:	000d7e95 	.word	0x000d7e95
   e632c:	000d7e99 	.word	0x000d7e99
   e6330:	000d81bd 	.word	0x000d81bd
   e6334:	000d81c1 	.word	0x000d81c1
   e6338:	000d81c5 	.word	0x000d81c5
   e633c:	000d86ff 	.word	0x000d86ff
   e6340:	000d8703 	.word	0x000d8703
   e6344:	000d8707 	.word	0x000d8707
   e6348:	000d87ad 	.word	0x000d87ad
   e634c:	000d890f 	.word	0x000d890f
   e6350:	000d8d25 	.word	0x000d8d25
   e6354:	000d922d 	.word	0x000d922d
   e6358:	000d932b 	.word	0x000d932b
   e635c:	000d9999 	.word	0x000d9999
   e6360:	000d9db1 	.word	0x000d9db1
   e6364:	000d9f0d 	.word	0x000d9f0d
   e6368:	000d9f51 	.word	0x000d9f51
   e636c:	000da123 	.word	0x000da123
   e6370:	000da2d9 	.word	0x000da2d9
   e6374:	000dad6f 	.word	0x000dad6f
   e6378:	000db2e7 	.word	0x000db2e7
   e637c:	000db3fb 	.word	0x000db3fb
   e6380:	000dbc75 	.word	0x000dbc75
   e6384:	000dbe95 	.word	0x000dbe95
   e6388:	000dc935 	.word	0x000dc935
   e638c:	000dcc21 	.word	0x000dcc21
   e6390:	000dcf59 	.word	0x000dcf59
   e6394:	000dcfa1 	.word	0x000dcfa1
   e6398:	000dd9bd 	.word	0x000dd9bd
   e639c:	000ddd81 	.word	0x000ddd81
   e63a0:	000de49d 	.word	0x000de49d
   e63a4:	000de9b1 	.word	0x000de9b1
   e63a8:	000dea35 	.word	0x000dea35
   e63ac:	000deaf9 	.word	0x000deaf9
   e63b0:	000debbd 	.word	0x000debbd

000e63b4 <link_constructors_end>:
	...
