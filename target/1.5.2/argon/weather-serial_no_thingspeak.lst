
c:/Users/BtX/Downloads/weather-serial_no_thingspeak/target/1.5.2/argon/weather-serial_no_thingspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d090  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000e10b0  000e10b0  000110b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000e10b8  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c4  2003bdd8  000e10bc  0002bdd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002954  2003be9c  2003be9c  0003be9c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000e1180  000e1180  00031180  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000e11a8  000e11a8  000311a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00232afe  00000000  00000000  000311ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0002a450  00000000  00000000  00263caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003801b  00000000  00000000  0028e0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003cd8  00000000  00000000  002c6115  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000073d0  00000000  00000000  002c9ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005ecec  00000000  00000000  002d11bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00073532  00000000  00000000  0032fea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0011e326  00000000  00000000  003a33db  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011ef8  00000000  00000000  004c1704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00a fbae 	bl	de792 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00a fbb3 	bl	de7a8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003bdd8 	.word	0x2003bdd8
   d404c:	000e10bc 	.word	0x000e10bc
   d4050:	2003be9c 	.word	0x2003be9c
   d4054:	2003be9c 	.word	0x2003be9c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f006 fc31 	bl	da8c4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e10a8 	.word	0x000e10a8
   d4084:	000e0ffc 	.word	0x000e0ffc

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bd0c 	b.w	d4aa4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fbb9 	bl	d4804 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f006 bbd7 	b.w	da848 <_post_loop>

000d409a <_Znwj>:
   d409a:	f005 bc4d 	b.w	d9938 <malloc>

000d409e <_ZdlPv>:
   d409e:	f005 bc53 	b.w	d9948 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f005 bc51 	b.w	d9948 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b6:	6810      	ldr	r0, [r2, #0]
   d40b8:	4770      	bx	lr

000d40ba <_ZN8particle9LEDStatus6updateEm>:

inline bool particle::LEDStatus::isActive() const {
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
   d40ba:	4770      	bx	lr

000d40bc <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d40bc:	4770      	bx	lr
	...

000d40c0 <_Z18capturePollSensorsv>:
}

void capturePollSensors()
{
  // Set the flag to poll the sensors
  readyToCapturePollSensors = true;
   d40c0:	4b01      	ldr	r3, [pc, #4]	; (d40c8 <_Z18capturePollSensorsv+0x8>)
   d40c2:	2201      	movs	r2, #1
   d40c4:	701a      	strb	r2, [r3, #0]
   d40c6:	4770      	bx	lr
   d40c8:	2003c129 	.word	0x2003c129

000d40cc <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	4718      	bx	r3

000d40d0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40d0:	2a01      	cmp	r2, #1
   d40d2:	d002      	beq.n	d40da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40d4:	2a02      	cmp	r2, #2
   d40d6:	d002      	beq.n	d40de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40d8:	e004      	b.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40da:	6001      	str	r1, [r0, #0]
	      break;
   d40dc:	e002      	b.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40de:	680b      	ldr	r3, [r1, #0]
   d40e0:	b100      	cbz	r0, d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40e2:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40e4:	2000      	movs	r0, #0
   d40e6:	4770      	bx	lr

000d40e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d40e8:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40ea:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d40ec:	6898      	ldr	r0, [r3, #8]
   d40ee:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d40f0:	f012 0f01 	tst.w	r2, #1
   d40f4:	ea4f 0262 	mov.w	r2, r2, asr #1
   d40f8:	bf18      	it	ne
   d40fa:	5881      	ldrne	r1, [r0, r2]
   d40fc:	4410      	add	r0, r2
   d40fe:	bf18      	it	ne
   d4100:	58cb      	ldrne	r3, [r1, r3]
   d4102:	4718      	bx	r3

000d4104 <__tcf_0>:

String deviceStatus;
String i2cDevices;
bool resetDevice = false;

String i2cNames[] =
   d4104:	b538      	push	{r3, r4, r5, lr}
   d4106:	4d06      	ldr	r5, [pc, #24]	; (d4120 <__tcf_0+0x1c>)
   d4108:	2400      	movs	r4, #0
   d410a:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d410e:	4428      	add	r0, r5
   d4110:	3c10      	subs	r4, #16
   d4112:	f005 fe77 	bl	d9e04 <_ZN6StringD1Ev>
   d4116:	f114 0f80 	cmn.w	r4, #128	; 0x80
   d411a:	d1f6      	bne.n	d410a <__tcf_0+0x6>
   d411c:	bd38      	pop	{r3, r4, r5, pc}
   d411e:	bf00      	nop
   d4120:	2003c000 	.word	0x2003c000

000d4124 <_ZN7IoTNodeD1Ev>:
 * @brief Main IoT Node class.
 * Includes functions to manage external power. Read the state of the battery charger.
 * Send a "tickle" to reset the watchdog timer and control GPIO on the IO headers. 
 * 
 */
class IoTNode
   d4124:	b510      	push	{r4, lr}
   d4126:	4604      	mov	r4, r0
   d4128:	f005 fe6c 	bl	d9e04 <_ZN6StringD1Ev>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}

000d4130 <_Z22getResetAndSendSensorsv>:
  // Set the flag to poll the sensors
  readyToCapturePollSensors = true;
}

void getResetAndSendSensors()
{
   d4130:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4132:	f005 f993 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
  // Set the flag to read and send data.
  // Has to be done out of this Timer thread
  timeToNextSendMS = millis();
   d4136:	4b03      	ldr	r3, [pc, #12]	; (d4144 <_Z22getResetAndSendSensorsv+0x14>)
   d4138:	6018      	str	r0, [r3, #0]
  readyToGetResetAndSendSensors = true;
   d413a:	4b03      	ldr	r3, [pc, #12]	; (d4148 <_Z22getResetAndSendSensorsv+0x18>)
   d413c:	2201      	movs	r2, #1
   d413e:	701a      	strb	r2, [r3, #0]
   d4140:	bd08      	pop	{r3, pc}
   d4142:	bf00      	nop
   d4144:	2003d87c 	.word	0x2003d87c
   d4148:	2003c144 	.word	0x2003c144

000d414c <_ZN14WeatherSensors15handleRainEventEv>:
      }

      lastAnemoneterEvent = timeAnemometerEvent; // set up for next event
    }

    void handleRainEvent() {
   d414c:	b510      	push	{r4, lr}
   d414e:	4604      	mov	r4, r0
   d4150:	f005 f984 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
      // Count rain gauge bucket tips as they occur
      // Activated by the magnet and reed switch in the rain gauge, attached to input D2
      unsigned int timeRainEvent = millis(); // grab current time

      // ignore switch-bounce glitches less than 10mS after initial edge
      if(timeRainEvent - lastRainEvent < 10) {
   d4154:	f241 6264 	movw	r2, #5732	; 0x1664
   d4158:	58a3      	ldr	r3, [r4, r2]
   d415a:	1ac3      	subs	r3, r0, r3
   d415c:	2b09      	cmp	r3, #9
   d415e:	d905      	bls.n	d416c <_ZN14WeatherSensors15handleRainEventEv+0x20>
        return;
      }
      rainEventCount++; //Increase this minute's amount of rain
   d4160:	f504 51b3 	add.w	r1, r4, #5728	; 0x1660
   d4164:	680b      	ldr	r3, [r1, #0]
   d4166:	3301      	adds	r3, #1
   d4168:	600b      	str	r3, [r1, #0]
      lastRainEvent = timeRainEvent; // set up for next event
   d416a:	50a0      	str	r0, [r4, r2]
   d416c:	bd10      	pop	{r4, pc}

000d416e <_ZN14WeatherSensors21handleAnemometerEventEv>:
      attachInterrupt(AnemometerPin, &WeatherSensors::handleAnemometerEvent, this, FALLING);

      pinMode(RainPin, INPUT_PULLUP);
      attachInterrupt(RainPin, &WeatherSensors::handleRainEvent, this, FALLING);
    }
    void handleAnemometerEvent() {
   d416e:	b538      	push	{r3, r4, r5, lr}
   d4170:	4604      	mov	r4, r0
   d4172:	f005 f973 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
      // Activated by the magnet in the anemometer (2 ticks per rotation), attached to input D3
       unsigned int timeAnemometerEvent = millis(); // grab current time

      //If there's never been an event before (first time through), then just capture it
      if(lastAnemoneterEvent != 0) {
   d4176:	f504 51b4 	add.w	r1, r4, #5760	; 0x1680
   d417a:	680b      	ldr	r3, [r1, #0]
   d417c:	b193      	cbz	r3, d41a4 <_ZN14WeatherSensors21handleAnemometerEventEv+0x36>
          // Calculate time since last event
          unsigned int period = timeAnemometerEvent - lastAnemoneterEvent;
   d417e:	1ac3      	subs	r3, r0, r3
          // ignore switch-bounce glitches less than 10mS after initial edge (which implies a max windspeed of 149mph)
          if(period < 10) {
   d4180:	2b09      	cmp	r3, #9
   d4182:	d910      	bls.n	d41a6 <_ZN14WeatherSensors21handleAnemometerEventEv+0x38>
            return;
          }
          if(period < GustPeriod) {
   d4184:	f241 627c 	movw	r2, #5756	; 0x167c
   d4188:	58a5      	ldr	r5, [r4, r2]
   d418a:	42ab      	cmp	r3, r5
              // If the period is the shortest (and therefore fastest windspeed) seen, capture it
              GustPeriod = period;
   d418c:	bf38      	it	cc
   d418e:	50a3      	strcc	r3, [r4, r2]
          }
          AnemoneterPeriodTotal += period;
   d4190:	f241 6574 	movw	r5, #5748	; 0x1674
   d4194:	5962      	ldr	r2, [r4, r5]
   d4196:	4413      	add	r3, r2
   d4198:	5163      	str	r3, [r4, r5]
          AnemoneterPeriodReadingCount++;
   d419a:	f241 6278 	movw	r2, #5752	; 0x1678
   d419e:	58a3      	ldr	r3, [r4, r2]
   d41a0:	3301      	adds	r3, #1
   d41a2:	50a3      	str	r3, [r4, r2]
      }

      lastAnemoneterEvent = timeAnemometerEvent; // set up for next event
   d41a4:	6008      	str	r0, [r1, #0]
   d41a6:	bd38      	pop	{r3, r4, r5, pc}

000d41a8 <_ZN14WeatherSensorsD1Ev>:
  float longitude;
}config_t;
extern config_t config;

// library interface description
class WeatherSensors
   d41a8:	b510      	push	{r4, lr}
   d41aa:	4604      	mov	r4, r0
   d41ac:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
   d41b0:	3004      	adds	r0, #4
   d41b2:	f005 fe27 	bl	d9e04 <_ZN6StringD1Ev>
   d41b6:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d41ba:	f005 f814 	bl	d91e6 <_ZN13RunningMedianD1Ev>
   d41be:	f104 000a 	add.w	r0, r4, #10
   d41c2:	f005 f810 	bl	d91e6 <_ZN13RunningMedianD1Ev>
   d41c6:	4620      	mov	r0, r4
   d41c8:	bd10      	pop	{r4, pc}

000d41ca <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41ca:	6943      	ldr	r3, [r0, #20]
   d41cc:	b113      	cbz	r3, d41d4 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41ce:	6983      	ldr	r3, [r0, #24]
   d41d0:	300c      	adds	r0, #12
   d41d2:	4718      	bx	r3
   d41d4:	4770      	bx	lr
	...

000d41d8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d41d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d41da:	4602      	mov	r2, r0
   d41dc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d41de:	7913      	ldrb	r3, [r2, #4]
   d41e0:	6895      	ldr	r5, [r2, #8]
   d41e2:	b133      	cbz	r3, d41f2 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d41e4:	b93d      	cbnz	r5, d41f6 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d41e6:	490c      	ldr	r1, [pc, #48]	; (d4218 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d41e8:	b004      	add	sp, #16
   d41ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d41ee:	f005 bff3 	b.w	da1d8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d41f2:	4b0a      	ldr	r3, [pc, #40]	; (d421c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d41f4:	e000      	b.n	d41f8 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d41f6:	4b0a      	ldr	r3, [pc, #40]	; (d4220 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d41f8:	7b16      	ldrb	r6, [r2, #12]
   d41fa:	4c0a      	ldr	r4, [pc, #40]	; (d4224 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d41fc:	490a      	ldr	r1, [pc, #40]	; (d4228 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d41fe:	7b52      	ldrb	r2, [r2, #13]
   d4200:	9202      	str	r2, [sp, #8]
   d4202:	2e01      	cmp	r6, #1
   d4204:	bf08      	it	eq
   d4206:	4621      	moveq	r1, r4
   d4208:	9101      	str	r1, [sp, #4]
   d420a:	9500      	str	r5, [sp, #0]
   d420c:	4a07      	ldr	r2, [pc, #28]	; (d422c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d420e:	2100      	movs	r1, #0
   d4210:	f006 f8f3 	bl	da3fa <_ZN5Print11printf_implEbPKcz>
  }
   d4214:	b004      	add	sp, #16
   d4216:	bd70      	pop	{r4, r5, r6, pc}
   d4218:	000e00a9 	.word	0x000e00a9
   d421c:	000e06ec 	.word	0x000e06ec
   d4220:	000e0098 	.word	0x000e0098
   d4224:	000e00a1 	.word	0x000e00a1
   d4228:	000e00a5 	.word	0x000e00a5
   d422c:	000e00bf 	.word	0x000e00bf

000d4230 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4230:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4232:	2100      	movs	r1, #0
   d4234:	4604      	mov	r4, r0
   d4236:	4608      	mov	r0, r1
   d4238:	f005 f958 	bl	d94ec <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d423c:	a902      	add	r1, sp, #8
   d423e:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4240:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4242:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d4246:	f005 f969 	bl	d951c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d424a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d424c:	b10c      	cbz	r4, d4252 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d424e:	2301      	movs	r3, #1
   d4250:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4252:	2100      	movs	r1, #0
   d4254:	2001      	movs	r0, #1
   d4256:	f005 f949 	bl	d94ec <os_thread_scheduling>
            }
        }
        if (t) {
   d425a:	b12c      	cbz	r4, d4268 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d425c:	6823      	ldr	r3, [r4, #0]
   d425e:	4620      	mov	r0, r4
   d4260:	689b      	ldr	r3, [r3, #8]
   d4262:	4798      	blx	r3
            t->running = false;
   d4264:	2300      	movs	r3, #0
   d4266:	7123      	strb	r3, [r4, #4]
        }
    }
   d4268:	b002      	add	sp, #8
   d426a:	bd10      	pop	{r4, pc}

000d426c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d426c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d426e:	b538      	push	{r3, r4, r5, lr}
   d4270:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4272:	d005      	beq.n	d4280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d4274:	2a03      	cmp	r2, #3
   d4276:	d00f      	beq.n	d4298 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
   d4278:	2a01      	cmp	r2, #1
   d427a:	d111      	bne.n	d42a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d427c:	680b      	ldr	r3, [r1, #0]
   d427e:	e009      	b.n	d4294 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4280:	200c      	movs	r0, #12
   d4282:	680d      	ldr	r5, [r1, #0]
   d4284:	f7ff ff09 	bl	d409a <_Znwj>
   d4288:	4603      	mov	r3, r0
   d428a:	b118      	cbz	r0, d4294 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
   d428c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4290:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4294:	6023      	str	r3, [r4, #0]
   d4296:	e003      	b.n	d42a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14WeatherSensorsFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4298:	210c      	movs	r1, #12
   d429a:	6800      	ldr	r0, [r0, #0]
   d429c:	f007 fafe 	bl	db89c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d42a0:	2000      	movs	r0, #0
   d42a2:	bd38      	pop	{r3, r4, r5, pc}

000d42a4 <_ZN8particle9LEDStatusD1Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42a4:	b510      	push	{r4, lr}
   d42a6:	4b05      	ldr	r3, [pc, #20]	; (d42bc <_ZN8particle9LEDStatusD1Ev+0x18>)
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42a8:	2200      	movs	r2, #0

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42aa:	4604      	mov	r4, r0
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42ac:	4611      	mov	r1, r2

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42ae:	f840 3b04 	str.w	r3, [r0], #4
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d42b2:	f005 fa53 	bl	d975c <led_set_status_active>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
    setActive(false);
}
   d42b6:	4620      	mov	r0, r4
   d42b8:	bd10      	pop	{r4, pc}
   d42ba:	bf00      	nop
   d42bc:	000e008c 	.word	0x000e008c

000d42c0 <_ZN8particle9LEDStatusD0Ev>:

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
}

inline particle::LEDStatus::~LEDStatus() {
   d42c0:	b510      	push	{r4, lr}
   d42c2:	4604      	mov	r4, r0
    setActive(false);
}
   d42c4:	f7ff ffee 	bl	d42a4 <_ZN8particle9LEDStatusD1Ev>
   d42c8:	4620      	mov	r0, r4
   d42ca:	2120      	movs	r1, #32
   d42cc:	f007 fae6 	bl	db89c <_ZdlPvj>
   d42d0:	4620      	mov	r0, r4
   d42d2:	bd10      	pop	{r4, pc}

000d42d4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42d4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d42d6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d42d8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d42da:	b113      	cbz	r3, d42e2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42dc:	2203      	movs	r2, #3
   d42de:	4601      	mov	r1, r0
   d42e0:	4798      	blx	r3
    }
   d42e2:	4620      	mov	r0, r4
   d42e4:	bd10      	pop	{r4, pc}

000d42e6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d42e6:	2200      	movs	r2, #0
   d42e8:	4611      	mov	r1, r2
   d42ea:	6840      	ldr	r0, [r0, #4]
   d42ec:	f005 baac 	b.w	d9848 <network_ready>

000d42f0 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d42f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42f2:	2500      	movs	r5, #0
   d42f4:	468e      	mov	lr, r1
   d42f6:	4915      	ldr	r1, [pc, #84]	; (d434c <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   d42f8:	7105      	strb	r5, [r0, #4]
   d42fa:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d42fc:	6145      	str	r5, [r0, #20]
   d42fe:	6001      	str	r1, [r0, #0]
   d4300:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4302:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4306:	b085      	sub	sp, #20
   d4308:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d430a:	f104 060c 	add.w	r6, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d430e:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4312:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4316:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d431a:	e897 0003 	ldmia.w	r7, {r0, r1}
   d431e:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4322:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4324:	6960      	ldr	r0, [r4, #20]
   d4326:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4328:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d432a:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   d432c:	69a0      	ldr	r0, [r4, #24]
   d432e:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4330:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4332:	e88d 0028 	stmia.w	sp, {r3, r5}
   d4336:	4a06      	ldr	r2, [pc, #24]	; (d4350 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
   d4338:	4623      	mov	r3, r4
   d433a:	4671      	mov	r1, lr
   d433c:	f104 0008 	add.w	r0, r4, #8
   d4340:	f005 f8dc 	bl	d94fc <os_timer_create>
    }
   d4344:	4620      	mov	r0, r4
   d4346:	b005      	add	sp, #20
   d4348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d434a:	bf00      	nop
   d434c:	000e0078 	.word	0x000e0078
   d4350:	000d4231 	.word	0x000d4231

000d4354 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4354:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4356:	6880      	ldr	r0, [r0, #8]
   d4358:	2300      	movs	r3, #0
   d435a:	b138      	cbz	r0, d436c <_ZN5Timer5_stopEjb+0x18>
   d435c:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4360:	2102      	movs	r1, #2
   d4362:	f005 f8e3 	bl	d952c <os_timer_change>
   d4366:	fab0 f080 	clz	r0, r0
   d436a:	0940      	lsrs	r0, r0, #5
    }
   d436c:	b003      	add	sp, #12
   d436e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4374 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4374:	b538      	push	{r3, r4, r5, lr}
   d4376:	4b10      	ldr	r3, [pc, #64]	; (d43b8 <_ZN5TimerD1Ev+0x44>)
   d4378:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d437a:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d437c:	4604      	mov	r4, r0
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
   d437e:	b1a3      	cbz	r3, d43aa <_ZN5TimerD1Ev+0x36>
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4384:	2200      	movs	r2, #0
   d4386:	f7ff ffe5 	bl	d4354 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d438a:	2100      	movs	r1, #0
   d438c:	68a0      	ldr	r0, [r4, #8]
   d438e:	f005 f8e5 	bl	d955c <os_timer_set_id>
            while (running) {
   d4392:	7923      	ldrb	r3, [r4, #4]
   d4394:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4398:	b113      	cbz	r3, d43a0 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d439a:	f005 f88f 	bl	d94bc <os_thread_yield>
   d439e:	e7f8      	b.n	d4392 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d43a0:	4629      	mov	r1, r5
   d43a2:	68a0      	ldr	r0, [r4, #8]
   d43a4:	f005 f8b2 	bl	d950c <os_timer_destroy>
            handle = nullptr;
   d43a8:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d43aa:	f104 000c 	add.w	r0, r4, #12
   d43ae:	f7ff ff91 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43b2:	4620      	mov	r0, r4
   d43b4:	bd38      	pop	{r3, r4, r5, pc}
   d43b6:	bf00      	nop
   d43b8:	000e0078 	.word	0x000e0078

000d43bc <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d43bc:	b510      	push	{r4, lr}
   d43be:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d43c0:	f7ff ffd8 	bl	d4374 <_ZN5TimerD1Ev>
   d43c4:	4620      	mov	r0, r4
   d43c6:	211c      	movs	r1, #28
   d43c8:	f007 fa68 	bl	db89c <_ZdlPvj>
   d43cc:	4620      	mov	r0, r4
   d43ce:	bd10      	pop	{r4, pc}

000d43d0 <_ZN5Timer5startEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43d2:	4605      	mov	r5, r0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43d4:	2200      	movs	r2, #0
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43d6:	460c      	mov	r4, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d43d8:	4611      	mov	r1, r2
   d43da:	f7ff ffbb 	bl	d4354 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d43de:	68a8      	ldr	r0, [r5, #8]
   d43e0:	2300      	movs	r3, #0
   d43e2:	b140      	cbz	r0, d43f6 <_ZN5Timer5startEj+0x26>
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	9400      	str	r4, [sp, #0]
   d43e8:	461a      	mov	r2, r3
   d43ea:	4619      	mov	r1, r3
   d43ec:	f005 f89e 	bl	d952c <os_timer_change>
   d43f0:	fab0 f080 	clz	r0, r0
   d43f4:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }
    inline bool changePeriodFromISR(std::chrono::milliseconds ms) { return changePeriodFromISR(ms.count()); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
   d43f6:	b003      	add	sp, #12
   d43f8:	bd30      	pop	{r4, r5, pc}
	...

000d43fc <_Z15checkI2CDevicesv>:
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
   d43fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4400:	4f4d      	ldr	r7, [pc, #308]	; (d4538 <_Z15checkI2CDevicesv+0x13c>)
  for (size_t i; i<i2cLength; ++i)
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];
   d4402:	f8df 9148 	ldr.w	r9, [pc, #328]	; d454c <_Z15checkI2CDevicesv+0x150>
   d4406:	f8df 8148 	ldr.w	r8, [pc, #328]	; d4550 <_Z15checkI2CDevicesv+0x154>
  false
};

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
   d440a:	b08d      	sub	sp, #52	; 0x34
   d440c:	2400      	movs	r4, #0
  byte error, address;
  bool result = true;
   d440e:	2501      	movs	r5, #1
  for (size_t i; i<i2cLength; ++i)
   d4410:	2c08      	cmp	r4, #8
   d4412:	f000 808d 	beq.w	d4530 <_Z15checkI2CDevicesv+0x134>
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAddr[i];
   d4416:	f814 6009 	ldrb.w	r6, [r4, r9]

    Wire.beginTransmission(address);
   d441a:	f007 fa0b 	bl	db834 <_Z19__fetch_global_Wirev>
   d441e:	4631      	mov	r1, r6
   d4420:	f006 ffb1 	bl	db386 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d4424:	f007 fa06 	bl	db834 <_Z19__fetch_global_Wirev>
   d4428:	f006 ffb8 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

    //Try again if !error=0
    if (!error==0)
   d442c:	2800      	cmp	r0, #0
   d442e:	d04e      	beq.n	d44ce <_Z15checkI2CDevicesv+0xd2>
    {
      delay(10);
   d4430:	200a      	movs	r0, #10
   d4432:	f006 f9c3 	bl	da7bc <delay>
      Wire.beginTransmission(address);
   d4436:	f007 f9fd 	bl	db834 <_Z19__fetch_global_Wirev>
   d443a:	4631      	mov	r1, r6
   d443c:	f006 ffa3 	bl	db386 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d4440:	f007 f9f8 	bl	db834 <_Z19__fetch_global_Wirev>
   d4444:	f006 ffaa 	bl	db39c <_ZN7TwoWire15endTransmissionEv>
    }

    //Try reset if !error=0
    if (!error==0)
   d4448:	2800      	cmp	r0, #0
   d444a:	d040      	beq.n	d44ce <_Z15checkI2CDevicesv+0xd2>
    {
      Wire.reset();
   d444c:	f007 f9f2 	bl	db834 <_Z19__fetch_global_Wirev>
   d4450:	f006 ffab 	bl	db3aa <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d4454:	f007 f9ee 	bl	db834 <_Z19__fetch_global_Wirev>
   d4458:	4631      	mov	r1, r6
   d445a:	f006 ff94 	bl	db386 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d445e:	f007 f9e9 	bl	db834 <_Z19__fetch_global_Wirev>
   d4462:	f006 ff9b 	bl	db39c <_ZN7TwoWire15endTransmissionEv>
    }
 
    if (error == 0)
   d4466:	b390      	cbz	r0, d44ce <_Z15checkI2CDevicesv+0xd2>
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
      i2cExists[i]=true;
    }
    else
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " NOT at"+" address:0x"+String(address, HEX)));
   d4468:	f006 fdf0 	bl	db04c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d446c:	4933      	ldr	r1, [pc, #204]	; (d453c <_Z15checkI2CDevicesv+0x140>)
   d446e:	4605      	mov	r5, r0
   d4470:	4668      	mov	r0, sp
   d4472:	f005 fd0e 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4476:	4639      	mov	r1, r7
   d4478:	4668      	mov	r0, sp
   d447a:	f005 fde8 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d447e:	4930      	ldr	r1, [pc, #192]	; (d4540 <_Z15checkI2CDevicesv+0x144>)
   d4480:	f005 fdf1 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d4484:	492f      	ldr	r1, [pc, #188]	; (d4544 <_Z15checkI2CDevicesv+0x148>)
   d4486:	f005 fdee 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d448a:	2210      	movs	r2, #16
   d448c:	4682      	mov	sl, r0
   d448e:	4631      	mov	r1, r6
   d4490:	eb0d 0002 	add.w	r0, sp, r2
   d4494:	f005 fd71 	bl	d9f7a <_ZN6StringC1Ehh>
   d4498:	a904      	add	r1, sp, #16
   d449a:	4650      	mov	r0, sl
   d449c:	f005 fdd7 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d44a0:	4601      	mov	r1, r0
   d44a2:	a808      	add	r0, sp, #32
   d44a4:	f005 fd34 	bl	d9f10 <_ZN6StringC1ERKS_>
   d44a8:	9908      	ldr	r1, [sp, #32]
   d44aa:	4628      	mov	r0, r5
   d44ac:	f005 feab 	bl	da206 <_ZN5Print7printlnEPKc>
   d44b0:	a808      	add	r0, sp, #32
   d44b2:	f005 fca7 	bl	d9e04 <_ZN6StringD1Ev>
   d44b6:	a804      	add	r0, sp, #16
   d44b8:	f005 fca4 	bl	d9e04 <_ZN6StringD1Ev>
      i2cExists[i]=false;
   d44bc:	2500      	movs	r5, #0

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d44be:	4668      	mov	r0, sp
   d44c0:	f005 fca0 	bl	d9e04 <_ZN6StringD1Ev>
   d44c4:	f808 5004 	strb.w	r5, [r8, r4]
// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool checkI2CDevices()
{
  byte error, address;
  bool result = true;
  for (size_t i; i<i2cLength; ++i)
   d44c8:	3401      	adds	r4, #1
   d44ca:	3710      	adds	r7, #16
   d44cc:	e7a0      	b.n	d4410 <_Z15checkI2CDevicesv+0x14>
      error = Wire.endTransmission();
    }
 
    if (error == 0)
    {
      DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(address, HEX)));
   d44ce:	f006 fdbd 	bl	db04c <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d44d2:	491a      	ldr	r1, [pc, #104]	; (d453c <_Z15checkI2CDevicesv+0x140>)
   d44d4:	4682      	mov	sl, r0
   d44d6:	4668      	mov	r0, sp
   d44d8:	f005 fcdb 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d44dc:	4639      	mov	r1, r7
   d44de:	4668      	mov	r0, sp
   d44e0:	f005 fdb5 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d44e4:	4918      	ldr	r1, [pc, #96]	; (d4548 <_Z15checkI2CDevicesv+0x14c>)
   d44e6:	f005 fdbe 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d44ea:	4916      	ldr	r1, [pc, #88]	; (d4544 <_Z15checkI2CDevicesv+0x148>)
   d44ec:	f005 fdbb 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d44f0:	2210      	movs	r2, #16
   d44f2:	4683      	mov	fp, r0
   d44f4:	4631      	mov	r1, r6
   d44f6:	eb0d 0002 	add.w	r0, sp, r2
   d44fa:	f005 fd3e 	bl	d9f7a <_ZN6StringC1Ehh>
   d44fe:	a904      	add	r1, sp, #16
   d4500:	4658      	mov	r0, fp
   d4502:	f005 fda4 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d4506:	4601      	mov	r1, r0
   d4508:	a808      	add	r0, sp, #32
   d450a:	f005 fd01 	bl	d9f10 <_ZN6StringC1ERKS_>
   d450e:	9908      	ldr	r1, [sp, #32]
   d4510:	4650      	mov	r0, sl
   d4512:	f005 fe78 	bl	da206 <_ZN5Print7printlnEPKc>
   d4516:	a808      	add	r0, sp, #32
   d4518:	f005 fc74 	bl	d9e04 <_ZN6StringD1Ev>
   d451c:	a804      	add	r0, sp, #16
   d451e:	f005 fc71 	bl	d9e04 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4522:	4668      	mov	r0, sp
   d4524:	f005 fc6e 	bl	d9e04 <_ZN6StringD1Ev>
      i2cExists[i]=true;
   d4528:	2301      	movs	r3, #1
   d452a:	f808 3004 	strb.w	r3, [r8, r4]
   d452e:	e7cb      	b.n	d44c8 <_Z15checkI2CDevicesv+0xcc>
      i2cExists[i]=false;
      result = false;
    }
  }
  return result;
}
   d4530:	4628      	mov	r0, r5
   d4532:	b00d      	add	sp, #52	; 0x34
   d4534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4538:	2003c000 	.word	0x2003c000
   d453c:	000e00dd 	.word	0x000e00dd
   d4540:	000e00e5 	.word	0x000e00e5
   d4544:	000e00ed 	.word	0x000e00ed
   d4548:	000e00e9 	.word	0x000e00e9
   d454c:	2003bdd8 	.word	0x2003bdd8
   d4550:	2003d880 	.word	0x2003d880

000d4554 <_Z8printI2Ci>:


void printI2C(int inx)
{
   d4554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4558:	4d1e      	ldr	r5, [pc, #120]	; (d45d4 <_Z8printI2Ci+0x80>)
    for (int i=0; i<i2cLength; i++)
        {
          if (i2cAddr[i] == inx)
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));
   d455a:	4f1f      	ldr	r7, [pc, #124]	; (d45d8 <_Z8printI2Ci+0x84>)
  return result;
}


void printI2C(int inx)
{
   d455c:	b08d      	sub	sp, #52	; 0x34
   d455e:	4606      	mov	r6, r0
    for (int i=0; i<i2cLength; i++)
   d4560:	2400      	movs	r4, #0
        {
          if (i2cAddr[i] == inx)
   d4562:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d4566:	42b3      	cmp	r3, r6
   d4568:	d12d      	bne.n	d45c6 <_Z8printI2Ci+0x72>
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));
   d456a:	f006 fd6f 	bl	db04c <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d456e:	491b      	ldr	r1, [pc, #108]	; (d45dc <_Z8printI2Ci+0x88>)
   d4570:	4680      	mov	r8, r0
   d4572:	4668      	mov	r0, sp
   d4574:	f005 fc8d 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4578:	eb07 1104 	add.w	r1, r7, r4, lsl #4
   d457c:	4668      	mov	r0, sp
   d457e:	f005 fd66 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d4582:	4917      	ldr	r1, [pc, #92]	; (d45e0 <_Z8printI2Ci+0x8c>)
   d4584:	f005 fd6f 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d4588:	4916      	ldr	r1, [pc, #88]	; (d45e4 <_Z8printI2Ci+0x90>)
   d458a:	f005 fd6c 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d458e:	2210      	movs	r2, #16
   d4590:	4681      	mov	r9, r0
   d4592:	7829      	ldrb	r1, [r5, #0]
   d4594:	eb0d 0002 	add.w	r0, sp, r2
   d4598:	f005 fcef 	bl	d9f7a <_ZN6StringC1Ehh>
   d459c:	a904      	add	r1, sp, #16
   d459e:	4648      	mov	r0, r9
   d45a0:	f005 fd55 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d45a4:	4601      	mov	r1, r0
   d45a6:	a808      	add	r0, sp, #32
   d45a8:	f005 fcb2 	bl	d9f10 <_ZN6StringC1ERKS_>
   d45ac:	9908      	ldr	r1, [sp, #32]
   d45ae:	4640      	mov	r0, r8
   d45b0:	f005 fe29 	bl	da206 <_ZN5Print7printlnEPKc>
   d45b4:	a808      	add	r0, sp, #32
   d45b6:	f005 fc25 	bl	d9e04 <_ZN6StringD1Ev>
   d45ba:	a804      	add	r0, sp, #16
   d45bc:	f005 fc22 	bl	d9e04 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d45c0:	4668      	mov	r0, sp
   d45c2:	f005 fc1f 	bl	d9e04 <_ZN6StringD1Ev>
}


void printI2C(int inx)
{
    for (int i=0; i<i2cLength; i++)
   d45c6:	3401      	adds	r4, #1
   d45c8:	2c08      	cmp	r4, #8
   d45ca:	d1ca      	bne.n	d4562 <_Z8printI2Ci+0xe>
          if (i2cAddr[i] == inx)
          {
              DEBUG_PRINTLN(String("Device "+i2cNames[i]+ " at"+" address:0x"+String(i2cAddr[i], HEX)));
          }
        }        
}
   d45cc:	b00d      	add	sp, #52	; 0x34
   d45ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d45d2:	bf00      	nop
   d45d4:	2003bdd7 	.word	0x2003bdd7
   d45d8:	2003c000 	.word	0x2003c000
   d45dc:	000e00dd 	.word	0x000e00dd
   d45e0:	000e00e9 	.word	0x000e00e9
   d45e4:	000e00ed 	.word	0x000e00ed

000d45e8 <_Z7scanI2Cv>:

void scanI2C()
{
   d45e8:	b570      	push	{r4, r5, r6, lr}
  byte error, address;
  int nDevices;
 
  DEBUG_PRINTLN("Scanning...");
   d45ea:	f006 fd2f 	bl	db04c <_Z16_fetch_usbserialv>
   d45ee:	491d      	ldr	r1, [pc, #116]	; (d4664 <_Z7scanI2Cv+0x7c>)
   d45f0:	f005 fe09 	bl	da206 <_ZN5Print7printlnEPKc>
   d45f4:	2401      	movs	r4, #1
  nDevices = 0;
   d45f6:	2500      	movs	r5, #0
  for(address = 1; address < 127; address++ )
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
   d45f8:	f007 f91c 	bl	db834 <_Z19__fetch_global_Wirev>
   d45fc:	b2e1      	uxtb	r1, r4
   d45fe:	f006 fec2 	bl	db386 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d4602:	f007 f917 	bl	db834 <_Z19__fetch_global_Wirev>
   d4606:	f006 fec9 	bl	db39c <_ZN7TwoWire15endTransmissionEv>
 
    if (error == 0)
   d460a:	b920      	cbnz	r0, d4616 <_Z7scanI2Cv+0x2e>
    {
      printI2C(address);
   d460c:	4620      	mov	r0, r4
   d460e:	f7ff ffa1 	bl	d4554 <_Z8printI2Ci>
 
      nDevices++;
   d4612:	3501      	adds	r5, #1
   d4614:	e017      	b.n	d4646 <_Z7scanI2Cv+0x5e>
    }
    else if (error==4)
   d4616:	2804      	cmp	r0, #4
   d4618:	d115      	bne.n	d4646 <_Z7scanI2Cv+0x5e>
    {
      DEBUG_PRINT("Unknown error at address 0x");
   d461a:	f006 fd17 	bl	db04c <_Z16_fetch_usbserialv>
   d461e:	4912      	ldr	r1, [pc, #72]	; (d4668 <_Z7scanI2Cv+0x80>)
   d4620:	f005 fdda 	bl	da1d8 <_ZN5Print5printEPKc>
      if (address<16)
   d4624:	2c0f      	cmp	r4, #15
   d4626:	d804      	bhi.n	d4632 <_Z7scanI2Cv+0x4a>
        DEBUG_PRINT("0");
   d4628:	f006 fd10 	bl	db04c <_Z16_fetch_usbserialv>
   d462c:	490f      	ldr	r1, [pc, #60]	; (d466c <_Z7scanI2Cv+0x84>)
   d462e:	f005 fdd3 	bl	da1d8 <_ZN5Print5printEPKc>
      DEBUG_PRINTLN(address,HEX);
   d4632:	f006 fd0b 	bl	db04c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4636:	2210      	movs	r2, #16
   d4638:	4606      	mov	r6, r0
   d463a:	4621      	mov	r1, r4
   d463c:	f005 fdef 	bl	da21e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4640:	4630      	mov	r0, r6
   d4642:	f005 fdd4 	bl	da1ee <_ZN5Print7printlnEv>
   d4646:	3401      	adds	r4, #1
  byte error, address;
  int nDevices;
 
  DEBUG_PRINTLN("Scanning...");
  nDevices = 0;
  for(address = 1; address < 127; address++ )
   d4648:	2c7f      	cmp	r4, #127	; 0x7f
   d464a:	d1d5      	bne.n	d45f8 <_Z7scanI2Cv+0x10>
      if (address<16)
        DEBUG_PRINT("0");
      DEBUG_PRINTLN(address,HEX);
    }    
  }
  if (nDevices == 0)
   d464c:	b91d      	cbnz	r5, d4656 <_Z7scanI2Cv+0x6e>
    DEBUG_PRINTLN("No I2C devices found\n");
   d464e:	f006 fcfd 	bl	db04c <_Z16_fetch_usbserialv>
   d4652:	4907      	ldr	r1, [pc, #28]	; (d4670 <_Z7scanI2Cv+0x88>)
   d4654:	e002      	b.n	d465c <_Z7scanI2Cv+0x74>
  else
    DEBUG_PRINTLN("done\n");
   d4656:	f006 fcf9 	bl	db04c <_Z16_fetch_usbserialv>
   d465a:	4906      	ldr	r1, [pc, #24]	; (d4674 <_Z7scanI2Cv+0x8c>)
}
   d465c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }    
  }
  if (nDevices == 0)
    DEBUG_PRINTLN("No I2C devices found\n");
  else
    DEBUG_PRINTLN("done\n");
   d4660:	f005 bdd1 	b.w	da206 <_ZN5Print7printlnEPKc>
   d4664:	000e00f9 	.word	0x000e00f9
   d4668:	000e0105 	.word	0x000e0105
   d466c:	000e0121 	.word	0x000e0121
   d4670:	000e0123 	.word	0x000e0123
   d4674:	000e0139 	.word	0x000e0139

000d4678 <_Z7connectv>:
}

// Adding explicit connect routine that has to work before the rest of the code runs
void connect()
{
   d4678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
   d467a:	4b4e      	ldr	r3, [pc, #312]	; (d47b4 <_Z7connectv+0x13c>)
   d467c:	2200      	movs	r2, #0
   d467e:	4611      	mov	r1, r2
   d4680:	6858      	ldr	r0, [r3, #4]
   d4682:	f005 f909 	bl	d9898 <network_has_credentials>
    DEBUG_PRINTLN("Cellular ready");
  }
  #endif
  
  #if Wiring_WiFi
  if (!WiFi.hasCredentials())
   d4686:	b978      	cbnz	r0, d46a8 <_Z7connectv+0x30>
  {
    DEBUG_PRINTLN("Please add WiFi credentials");
   d4688:	f006 fce0 	bl	db04c <_Z16_fetch_usbserialv>
   d468c:	494a      	ldr	r1, [pc, #296]	; (d47b8 <_Z7connectv+0x140>)
   d468e:	f005 fdba 	bl	da206 <_ZN5Print7printlnEPKc>
    DEBUG_PRINTLN("Resetting in 60 seconds");
   d4692:	f006 fcdb 	bl	db04c <_Z16_fetch_usbserialv>
   d4696:	4949      	ldr	r1, [pc, #292]	; (d47bc <_Z7connectv+0x144>)
   d4698:	f005 fdb5 	bl	da206 <_ZN5Print7printlnEPKc>
    delay(60000);
   d469c:	f64e 2060 	movw	r0, #60000	; 0xea60
   d46a0:	f006 f88c 	bl	da7bc <delay>
    System.reset();
   d46a4:	f005 fad8 	bl	d9c58 <_ZN11SystemClass5resetEv>
  }
  bool wifiready=WiFi.ready();
   d46a8:	4d42      	ldr	r5, [pc, #264]	; (d47b4 <_Z7connectv+0x13c>)
   d46aa:	4628      	mov	r0, r5
   d46ac:	f7ff fe1b 	bl	d42e6 <_ZN5spark9WiFiClass5readyEv>
  if (!wifiready)
   d46b0:	4604      	mov	r4, r0
   d46b2:	bb48      	cbnz	r0, d4708 <_Z7connectv+0x90>
  {
    DEBUG_PRINTLN("Attempting to connect to WiFi...");
   d46b4:	f006 fcca 	bl	db04c <_Z16_fetch_usbserialv>
   d46b8:	4941      	ldr	r1, [pc, #260]	; (d47c0 <_Z7connectv+0x148>)
   d46ba:	f005 fda4 	bl	da206 <_ZN5Print7printlnEPKc>
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d46be:	4623      	mov	r3, r4
   d46c0:	4622      	mov	r2, r4
   d46c2:	4621      	mov	r1, r4
   d46c4:	6868      	ldr	r0, [r5, #4]
   d46c6:	f005 f8c7 	bl	d9858 <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46ca:	4623      	mov	r3, r4
   d46cc:	4622      	mov	r2, r4
   d46ce:	4621      	mov	r1, r4
   d46d0:	6868      	ldr	r0, [r5, #4]
   d46d2:	f005 f8a1 	bl	d9818 <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46d6:	4620      	mov	r0, r4
   d46d8:	f004 fed8 	bl	d948c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d46dc:	2500      	movs	r5, #0
   d46de:	4604      	mov	r4, r0
   d46e0:	f64e 265f 	movw	r6, #59999	; 0xea5f
   d46e4:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46e6:	2000      	movs	r0, #0
   d46e8:	f004 fed0 	bl	d948c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d46ec:	1b00      	subs	r0, r0, r4
   d46ee:	eb61 0105 	sbc.w	r1, r1, r5
   d46f2:	428f      	cmp	r7, r1
   d46f4:	bf08      	it	eq
   d46f6:	4286      	cmpeq	r6, r0
   d46f8:	d333      	bcc.n	d4762 <_Z7connectv+0xea>
    WiFi.on();
    WiFi.connect();
    waitFor(WiFi.ready,60000);
   d46fa:	482e      	ldr	r0, [pc, #184]	; (d47b4 <_Z7connectv+0x13c>)
   d46fc:	f7ff fdf3 	bl	d42e6 <_ZN5spark9WiFiClass5readyEv>
   d4700:	bb78      	cbnz	r0, d4762 <_Z7connectv+0xea>
            spark_process();
   d4702:	f005 f8e9 	bl	d98d8 <spark_process>
   d4706:	e7ee      	b.n	d46e6 <_Z7connectv+0x6e>
    System.reset();
    }
  }
  else
  {
    DEBUG_PRINTLN("Cellular ready");
   d4708:	f006 fca0 	bl	db04c <_Z16_fetch_usbserialv>
   d470c:	492d      	ldr	r1, [pc, #180]	; (d47c4 <_Z7connectv+0x14c>)
   d470e:	f005 fd7a 	bl	da206 <_ZN5Print7printlnEPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4712:	f005 f8f1 	bl	d98f8 <spark_cloud_flag_connected>
  }
  #endif

  bool partconnected=Particle.connected();
  if (!partconnected)
   d4716:	4604      	mov	r4, r0
   d4718:	b9e0      	cbnz	r0, d4754 <_Z7connectv+0xdc>
  {
    DEBUG_PRINTLN("Attempting to connect to Particle...");
   d471a:	f006 fc97 	bl	db04c <_Z16_fetch_usbserialv>
   d471e:	492a      	ldr	r1, [pc, #168]	; (d47c8 <_Z7connectv+0x150>)
   d4720:	f005 fd71 	bl	da206 <_ZN5Print7printlnEPKc>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4724:	f005 f8e0 	bl	d98e8 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4728:	4620      	mov	r0, r4
   d472a:	f004 feaf 	bl	d948c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d472e:	2500      	movs	r5, #0
   d4730:	4604      	mov	r4, r0
   d4732:	f64e 265f 	movw	r6, #59999	; 0xea5f
   d4736:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4738:	2000      	movs	r0, #0
   d473a:	f004 fea7 	bl	d948c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d473e:	1b00      	subs	r0, r0, r4
   d4740:	eb61 0105 	sbc.w	r1, r1, r5
   d4744:	428f      	cmp	r7, r1
   d4746:	bf08      	it	eq
   d4748:	4286      	cmpeq	r6, r0
   d474a:	d31d      	bcc.n	d4788 <_Z7connectv+0x110>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d474c:	f005 f8d4 	bl	d98f8 <spark_cloud_flag_connected>
   d4750:	b9d0      	cbnz	r0, d4788 <_Z7connectv+0x110>
   d4752:	e02a      	b.n	d47aa <_Z7connectv+0x132>
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d4754:	f006 fc7a 	bl	db04c <_Z16_fetch_usbserialv>
   d4758:	491c      	ldr	r1, [pc, #112]	; (d47cc <_Z7connectv+0x154>)
  }
}
   d475a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      System.reset();
    } 
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
   d475e:	f005 bd52 	b.w	da206 <_ZN5Print7printlnEPKc>
  if (!wifiready)
  {
    DEBUG_PRINTLN("Attempting to connect to WiFi...");
    WiFi.on();
    WiFi.connect();
    waitFor(WiFi.ready,60000);
   d4762:	4814      	ldr	r0, [pc, #80]	; (d47b4 <_Z7connectv+0x13c>)
   d4764:	f7ff fdbf 	bl	d42e6 <_ZN5spark9WiFiClass5readyEv>
    if (!WiFi.ready())
   d4768:	4812      	ldr	r0, [pc, #72]	; (d47b4 <_Z7connectv+0x13c>)
   d476a:	f7ff fdbc 	bl	d42e6 <_ZN5spark9WiFiClass5readyEv>
   d476e:	2800      	cmp	r0, #0
   d4770:	d1cf      	bne.n	d4712 <_Z7connectv+0x9a>
    {
    DEBUG_PRINTLN("WiFi not ready - resetting");
   d4772:	f006 fc6b 	bl	db04c <_Z16_fetch_usbserialv>
   d4776:	4916      	ldr	r1, [pc, #88]	; (d47d0 <_Z7connectv+0x158>)
   d4778:	f005 fd45 	bl	da206 <_ZN5Print7printlnEPKc>
    delay(200);
   d477c:	20c8      	movs	r0, #200	; 0xc8
   d477e:	f006 f81d 	bl	da7bc <delay>
    System.reset();
   d4782:	f005 fa69 	bl	d9c58 <_ZN11SystemClass5resetEv>
   d4786:	e7c4      	b.n	d4712 <_Z7connectv+0x9a>
   d4788:	f005 f8b6 	bl	d98f8 <spark_cloud_flag_connected>
   d478c:	f005 f8b4 	bl	d98f8 <spark_cloud_flag_connected>
    DEBUG_PRINTLN("Attempting to connect to Particle...");
    Particle.connect();
    // Note: that conditions must be a function that takes a void argument function(void) with the () removed,
    // e.g. Particle.connected instead of Particle.connected().
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
   d4790:	b970      	cbnz	r0, d47b0 <_Z7connectv+0x138>
    {
      DEBUG_PRINTLN("Particle not connected - resetting");
   d4792:	f006 fc5b 	bl	db04c <_Z16_fetch_usbserialv>
   d4796:	490f      	ldr	r1, [pc, #60]	; (d47d4 <_Z7connectv+0x15c>)
   d4798:	f005 fd35 	bl	da206 <_ZN5Print7printlnEPKc>
      delay(200);
   d479c:	20c8      	movs	r0, #200	; 0xc8
   d479e:	f006 f80d 	bl	da7bc <delay>
  }
  else
  {
    DEBUG_PRINTLN("Particle connected");
  }
}
   d47a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    waitFor(Particle.connected,60000);
    if (!Particle.connected())
    {
      DEBUG_PRINTLN("Particle not connected - resetting");
      delay(200);
      System.reset();
   d47a6:	f005 ba57 	b.w	d9c58 <_ZN11SystemClass5resetEv>
            spark_process();
   d47aa:	f005 f895 	bl	d98d8 <spark_process>
   d47ae:	e7c3      	b.n	d4738 <_Z7connectv+0xc0>
   d47b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d47b2:	bf00      	nop
   d47b4:	2003e5f8 	.word	0x2003e5f8
   d47b8:	000e013f 	.word	0x000e013f
   d47bc:	000e015b 	.word	0x000e015b
   d47c0:	000e0173 	.word	0x000e0173
   d47c4:	000e01af 	.word	0x000e01af
   d47c8:	000e01be 	.word	0x000e01be
   d47cc:	000e0206 	.word	0x000e0206
   d47d0:	000e0194 	.word	0x000e0194
   d47d4:	000e01e3 	.word	0x000e01e3

000d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47d8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d47da:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47dc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d47de:	b17c      	cbz	r4, d4800 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d47e0:	6863      	ldr	r3, [r4, #4]
   d47e2:	3b01      	subs	r3, #1
   d47e4:	6063      	str	r3, [r4, #4]
   d47e6:	b95b      	cbnz	r3, d4800 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d47e8:	6823      	ldr	r3, [r4, #0]
   d47ea:	4620      	mov	r0, r4
   d47ec:	689b      	ldr	r3, [r3, #8]
   d47ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d47f0:	68a3      	ldr	r3, [r4, #8]
   d47f2:	3b01      	subs	r3, #1
   d47f4:	60a3      	str	r3, [r4, #8]
   d47f6:	b91b      	cbnz	r3, d4800 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d47f8:	6823      	ldr	r3, [r4, #0]
   d47fa:	4620      	mov	r0, r4
   d47fc:	68db      	ldr	r3, [r3, #12]
   d47fe:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4800:	4628      	mov	r0, r5
   d4802:	bd38      	pop	{r3, r4, r5, pc}

000d4804 <loop>:
  }
}

// Note that CSV format is:
// unixTime,windDegrees,wind_speed,humidity,air_temp,rain,pressure,wind_gust,millivolts,lux
void loop() {
   d4804:	b570      	push	{r4, r5, r6, lr}
  if (readyToGetResetAndSendSensors)
   d4806:	4c5d      	ldr	r4, [pc, #372]	; (d497c <loop+0x178>)
   d4808:	7823      	ldrb	r3, [r4, #0]
  }
}

// Note that CSV format is:
// unixTime,windDegrees,wind_speed,humidity,air_temp,rain,pressure,wind_gust,millivolts,lux
void loop() {
   d480a:	b0a2      	sub	sp, #136	; 0x88
  if (readyToGetResetAndSendSensors)
   d480c:	2b00      	cmp	r3, #0
   d480e:	f000 808f 	beq.w	d4930 <loop+0x12c>
  {
    sensors.getAndResetAllSensors();
   d4812:	485b      	ldr	r0, [pc, #364]	; (d4980 <loop+0x17c>)

    DEBUG_PRINTLN(currentCsvData);

    readyToGetResetAndSendSensors = false;

    if (tickleWD)
   d4814:	4d5b      	ldr	r5, [pc, #364]	; (d4984 <loop+0x180>)
// Note that CSV format is:
// unixTime,windDegrees,wind_speed,humidity,air_temp,rain,pressure,wind_gust,millivolts,lux
void loop() {
  if (readyToGetResetAndSendSensors)
  {
    sensors.getAndResetAllSensors();
   d4816:	f004 f8d3 	bl	d89c0 <_ZN14WeatherSensors21getAndResetAllSensorsEv>

    String currentCsvData = sensors.sensorReadingsToCsvUS();
   d481a:	4959      	ldr	r1, [pc, #356]	; (d4980 <loop+0x17c>)
   d481c:	a802      	add	r0, sp, #8
   d481e:	f003 ff7b 	bl	d8718 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv>

    // Consider putting the SD logging in the IoTNode library
    printToSd.println(currentCsvData);
   d4822:	9902      	ldr	r1, [sp, #8]
   d4824:	4858      	ldr	r0, [pc, #352]	; (d4988 <loop+0x184>)
   d4826:	f005 fcee 	bl	da206 <_ZN5Print7printlnEPKc>

    DEBUG_PRINTLN(currentCsvData);
   d482a:	f006 fc0f 	bl	db04c <_Z16_fetch_usbserialv>
   d482e:	9902      	ldr	r1, [sp, #8]
   d4830:	f005 fce9 	bl	da206 <_ZN5Print7printlnEPKc>

    readyToGetResetAndSendSensors = false;

    if (tickleWD)
   d4834:	782b      	ldrb	r3, [r5, #0]
    // Consider putting the SD logging in the IoTNode library
    printToSd.println(currentCsvData);

    DEBUG_PRINTLN(currentCsvData);

    readyToGetResetAndSendSensors = false;
   d4836:	2600      	movs	r6, #0
   d4838:	7026      	strb	r6, [r4, #0]

    if (tickleWD)
   d483a:	b11b      	cbz	r3, d4844 <loop+0x40>
    {
      node.tickleWatchdog();
   d483c:	4853      	ldr	r0, [pc, #332]	; (d498c <loop+0x188>)
   d483e:	f000 fceb 	bl	d5218 <_ZN7IoTNode14tickleWatchdogEv>
      tickleWD = false;
   d4842:	702e      	strb	r6, [r5, #0]
    }

    readyToGetResetAndSendSensors = false;
   d4844:	2300      	movs	r3, #0
   d4846:	7023      	strb	r3, [r4, #0]
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d4848:	4c51      	ldr	r4, [pc, #324]	; (d4990 <loop+0x18c>)
      tickleWD = false;
    }

    readyToGetResetAndSendSensors = false;
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
   d484a:	f006 fbff 	bl	db04c <_Z16_fetch_usbserialv>
   d484e:	4951      	ldr	r1, [pc, #324]	; (d4994 <loop+0x190>)
   d4850:	f005 fcd9 	bl	da206 <_ZN5Print7printlnEPKc>
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d4854:	220a      	movs	r2, #10
   d4856:	6821      	ldr	r1, [r4, #0]
   d4858:	a806      	add	r0, sp, #24
   d485a:	f005 fba0 	bl	d9f9e <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d485e:	a906      	add	r1, sp, #24
   d4860:	a80a      	add	r0, sp, #40	; 0x28
   d4862:	f005 fb55 	bl	d9f10 <_ZN6StringC1ERKS_>
   d4866:	494c      	ldr	r1, [pc, #304]	; (d4998 <loop+0x194>)
   d4868:	a80a      	add	r0, sp, #40	; 0x28
   d486a:	f005 fbfc 	bl	da066 <_ZplRK15StringSumHelperPKc>

    String(config.unitType)+"|"+
   d486e:	7921      	ldrb	r1, [r4, #4]
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d4870:	4605      	mov	r5, r0

    String(config.unitType)+"|"+
   d4872:	a80e      	add	r0, sp, #56	; 0x38
   d4874:	f005 fb70 	bl	d9f58 <_ZN6StringC1Ec>
   d4878:	a90e      	add	r1, sp, #56	; 0x38
   d487a:	4628      	mov	r0, r5
   d487c:	f005 fbe7 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d4880:	4945      	ldr	r1, [pc, #276]	; (d4998 <loop+0x194>)
   d4882:	f005 fbf0 	bl	da066 <_ZplRK15StringSumHelperPKc>
    String(config.firmwareVersion)+"|"+
   d4886:	220a      	movs	r2, #10
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
   d4888:	4605      	mov	r5, r0
    String(config.firmwareVersion)+"|"+
   d488a:	68a1      	ldr	r1, [r4, #8]
   d488c:	a812      	add	r0, sp, #72	; 0x48
   d488e:	f005 fb86 	bl	d9f9e <_ZN6StringC1Eih>
   d4892:	a912      	add	r1, sp, #72	; 0x48
   d4894:	4628      	mov	r0, r5
   d4896:	f005 fbda 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d489a:	493f      	ldr	r1, [pc, #252]	; (d4998 <loop+0x194>)
   d489c:	f005 fbe3 	bl	da066 <_ZplRK15StringSumHelperPKc>
    String(config.particleTimeout)+"|"+
   d48a0:	220a      	movs	r2, #10
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
   d48a2:	4605      	mov	r5, r0
    String(config.particleTimeout)+"|"+
   d48a4:	68e1      	ldr	r1, [r4, #12]
   d48a6:	a816      	add	r0, sp, #88	; 0x58
   d48a8:	f005 fb79 	bl	d9f9e <_ZN6StringC1Eih>
   d48ac:	a916      	add	r1, sp, #88	; 0x58
   d48ae:	4628      	mov	r0, r5
   d48b0:	f005 fbcd 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d48b4:	4938      	ldr	r1, [pc, #224]	; (d4998 <loop+0x194>)
   d48b6:	f005 fbd6 	bl	da066 <_ZplRK15StringSumHelperPKc>
    String(config.latitude)+"|"+
   d48ba:	ed94 0a04 	vldr	s0, [r4, #16]
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
   d48be:	4605      	mov	r5, r0
    String(config.latitude)+"|"+
   d48c0:	2106      	movs	r1, #6
   d48c2:	a81a      	add	r0, sp, #104	; 0x68
   d48c4:	f005 fb92 	bl	d9fec <_ZN6StringC1Efi>
   d48c8:	a91a      	add	r1, sp, #104	; 0x68
   d48ca:	4628      	mov	r0, r5
   d48cc:	f005 fbbf 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d48d0:	4931      	ldr	r1, [pc, #196]	; (d4998 <loop+0x194>)
   d48d2:	f005 fbc8 	bl	da066 <_ZplRK15StringSumHelperPKc>
    String(config.longitude)+"|"+
   d48d6:	ed94 0a05 	vldr	s0, [r4, #20]
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
   d48da:	4605      	mov	r5, r0
    String(config.longitude)+"|"+
   d48dc:	2106      	movs	r1, #6
   d48de:	a81e      	add	r0, sp, #120	; 0x78
   d48e0:	f005 fb84 	bl	d9fec <_ZN6StringC1Efi>
   d48e4:	a91e      	add	r1, sp, #120	; 0x78
   d48e6:	4628      	mov	r0, r5
   d48e8:	f005 fbb1 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d48ec:	492a      	ldr	r1, [pc, #168]	; (d4998 <loop+0x194>)
   d48ee:	f005 fbba 	bl	da066 <_ZplRK15StringSumHelperPKc>
    i2cDevices;
   d48f2:	492a      	ldr	r1, [pc, #168]	; (d499c <loop+0x198>)
   d48f4:	f005 fbab 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d48f8:	4601      	mov	r1, r0
   d48fa:	4829      	ldr	r0, [pc, #164]	; (d49a0 <loop+0x19c>)
   d48fc:	f005 faf9 	bl	d9ef2 <_ZN6StringaSERKS_>

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
    String(config.longitude)+"|"+
   d4900:	a81e      	add	r0, sp, #120	; 0x78
   d4902:	f005 fa7f 	bl	d9e04 <_ZN6StringD1Ev>
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
    String(config.latitude)+"|"+
   d4906:	a81a      	add	r0, sp, #104	; 0x68
   d4908:	f005 fa7c 	bl	d9e04 <_ZN6StringD1Ev>
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
    String(config.particleTimeout)+"|"+
   d490c:	a816      	add	r0, sp, #88	; 0x58
   d490e:	f005 fa79 	bl	d9e04 <_ZN6StringD1Ev>
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
    String(config.firmwareVersion)+"|"+
   d4912:	a812      	add	r0, sp, #72	; 0x48
   d4914:	f005 fa76 	bl	d9e04 <_ZN6StringD1Ev>
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+

    String(config.unitType)+"|"+
   d4918:	a80e      	add	r0, sp, #56	; 0x38
   d491a:	f005 fa73 	bl	d9e04 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d491e:	a80a      	add	r0, sp, #40	; 0x28
   d4920:	f005 fa70 	bl	d9e04 <_ZN6StringD1Ev>
    #ifdef IOTDEBUG
    DEBUG_PRINTLN("readyToGetResetAndSendSensors");
    #endif
    // Update status information
    deviceStatus = 
    String(config.testCheck)+"|"+
   d4924:	a806      	add	r0, sp, #24
   d4926:	f005 fa6d 	bl	d9e04 <_ZN6StringD1Ev>
void loop() {
  if (readyToGetResetAndSendSensors)
  {
    sensors.getAndResetAllSensors();

    String currentCsvData = sensors.sensorReadingsToCsvUS();
   d492a:	a802      	add	r0, sp, #8
   d492c:	f005 fa6a 	bl	d9e04 <_ZN6StringD1Ev>
    String(config.longitude)+"|"+
    i2cDevices;

  }

  if (readyToCapturePollSensors)
   d4930:	4c1c      	ldr	r4, [pc, #112]	; (d49a4 <loop+0x1a0>)
   d4932:	7823      	ldrb	r3, [r4, #0]
   d4934:	b1db      	cbz	r3, d496e <loop+0x16a>
  {
    sensors.captureTempHumidityPressure();
   d4936:	4812      	ldr	r0, [pc, #72]	; (d4980 <loop+0x17c>)
   d4938:	f003 fde6 	bl	d8508 <_ZN14WeatherSensors27captureTempHumidityPressureEv>
    sensors.captureWindVane();
   d493c:	4810      	ldr	r0, [pc, #64]	; (d4980 <loop+0x17c>)
   d493e:	f003 fd8b 	bl	d8458 <_ZN14WeatherSensors15captureWindVaneEv>
    //sensors.captureLightLux();//
    sensors.captureBatteryVoltage();
   d4942:	480f      	ldr	r0, [pc, #60]	; (d4980 <loop+0x17c>)
   d4944:	f003 fc1c 	bl	d8180 <_ZN14WeatherSensors21captureBatteryVoltageEv>
   d4948:	4b17      	ldr	r3, [pc, #92]	; (d49a8 <loop+0x1a4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d494a:	4918      	ldr	r1, [pc, #96]	; (d49ac <loop+0x1a8>)
   d494c:	781b      	ldrb	r3, [r3, #0]
    readyToCapturePollSensors = false;
   d494e:	2200      	movs	r2, #0
   d4950:	7022      	strb	r2, [r4, #0]
   d4952:	a81e      	add	r0, sp, #120	; 0x78
   d4954:	f88d 3000 	strb.w	r3, [sp]
   d4958:	233c      	movs	r3, #60	; 0x3c
   d495a:	f006 f921 	bl	daba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d495e:	a81f      	add	r0, sp, #124	; 0x7c
   d4960:	f7ff ff3a 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    #ifdef IOTDEBUG
    Particle.publish("Capturing sensors",PRIVATE);
    DEBUG_PRINTLN("capture");
   d4964:	f006 fb72 	bl	db04c <_Z16_fetch_usbserialv>
   d4968:	4911      	ldr	r1, [pc, #68]	; (d49b0 <loop+0x1ac>)
   d496a:	f005 fc4c 	bl	da206 <_ZN5Print7printlnEPKc>
    #endif
  }
  // If flag set then reset here
  if (resetDevice)
   d496e:	4b11      	ldr	r3, [pc, #68]	; (d49b4 <loop+0x1b0>)
   d4970:	781b      	ldrb	r3, [r3, #0]
   d4972:	b10b      	cbz	r3, d4978 <loop+0x174>
  {
    System.reset();
   d4974:	f005 f970 	bl	d9c58 <_ZN11SystemClass5resetEv>
  }

}
   d4978:	b022      	add	sp, #136	; 0x88
   d497a:	bd70      	pop	{r4, r5, r6, pc}
   d497c:	2003c144 	.word	0x2003c144
   d4980:	2003c164 	.word	0x2003c164
   d4984:	2003c0ec 	.word	0x2003c0ec
   d4988:	2003beac 	.word	0x2003beac
   d498c:	2003d834 	.word	0x2003d834
   d4990:	2003c12c 	.word	0x2003c12c
   d4994:	000e0219 	.word	0x000e0219
   d4998:	000e0237 	.word	0x000e0237
   d499c:	2003c0a0 	.word	0x2003c0a0
   d49a0:	2003dd0c 	.word	0x2003dd0c
   d49a4:	2003c129 	.word	0x2003c129
   d49a8:	2003c128 	.word	0x2003c128
   d49ac:	000e0239 	.word	0x000e0239
   d49b0:	000e024b 	.word	0x000e024b
   d49b4:	2003dd1c 	.word	0x2003dd1c

000d49b8 <_Z7syncRTCv>:
  timeToNextSendMS = millis();
  readyToGetResetAndSendSensors = true;
}

bool syncRTC()
{
   d49b8:	b570      	push	{r4, r5, r6, lr}
   d49ba:	b094      	sub	sp, #80	; 0x50
   d49bc:	f004 fd4e 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d49c0:	4d2f      	ldr	r5, [pc, #188]	; (d4a80 <_Z7syncRTCv+0xc8>)

    do
    {
      Particle.process();
      delay(100);
    } while (Time.now() < 1465823822 && millis()-syncTimer<500);
   d49c2:	4e30      	ldr	r6, [pc, #192]	; (d4a84 <_Z7syncRTCv+0xcc>)
   d49c4:	4604      	mov	r4, r0
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d49c6:	f004 fd49 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d49ca:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d49cc:	f004 ff84 	bl	d98d8 <spark_process>
    unsigned long syncTimer = millis();

    do
    {
      Particle.process();
      delay(100);
   d49d0:	2064      	movs	r0, #100	; 0x64
   d49d2:	f005 fef3 	bl	da7bc <delay>
    } while (Time.now() < 1465823822 && millis()-syncTimer<500);
   d49d6:	f005 fea6 	bl	da726 <_ZN9TimeClass3nowEv>
   d49da:	42b0      	cmp	r0, r6
   d49dc:	dc05      	bgt.n	d49ea <_Z7syncRTCv+0x32>
   d49de:	f004 fd3d 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
   d49e2:	1b00      	subs	r0, r0, r4
   d49e4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d49e8:	d3ed      	bcc.n	d49c6 <_Z7syncRTCv+0xe>

    if (Time.now() > 1465823822)
   d49ea:	f005 fe9c 	bl	da726 <_ZN9TimeClass3nowEv>
   d49ee:	4b26      	ldr	r3, [pc, #152]	; (d4a88 <_Z7syncRTCv+0xd0>)
   d49f0:	4298      	cmp	r0, r3
   d49f2:	dd07      	ble.n	d4a04 <_Z7syncRTCv+0x4c>
    {
        syncNow = Time.now();//put time into memory
   d49f4:	f005 fe97 	bl	da726 <_ZN9TimeClass3nowEv>
        node.setUnixTime(syncNow);
   d49f8:	4601      	mov	r1, r0
   d49fa:	4824      	ldr	r0, [pc, #144]	; (d4a8c <_Z7syncRTCv+0xd4>)
   d49fc:	f000 fc26 	bl	d524c <_ZN7IoTNode11setUnixTimeEm>
        sync = true;
   d4a00:	2001      	movs	r0, #1
   d4a02:	e03a      	b.n	d4a7a <_Z7syncRTCv+0xc2>
    }

    if (!sync)
    {
        #ifdef DEBUG
        Particle.publish("Time NOT synced",String(Time.format(syncNow, TIME_FORMAT_ISO8601_FULL)+"  "+Time.format(node.unixTime(), TIME_FORMAT_ISO8601_FULL)),PRIVATE);
   d4a04:	4c22      	ldr	r4, [pc, #136]	; (d4a90 <_Z7syncRTCv+0xd8>)
   d4a06:	4923      	ldr	r1, [pc, #140]	; (d4a94 <_Z7syncRTCv+0xdc>)
   d4a08:	6823      	ldr	r3, [r4, #0]
   d4a0a:	2200      	movs	r2, #0
   d4a0c:	a804      	add	r0, sp, #16
   d4a0e:	f005 fe37 	bl	da680 <_ZN9TimeClass6formatElPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4a12:	a904      	add	r1, sp, #16
   d4a14:	a808      	add	r0, sp, #32
   d4a16:	f005 fa7b 	bl	d9f10 <_ZN6StringC1ERKS_>
   d4a1a:	491f      	ldr	r1, [pc, #124]	; (d4a98 <_Z7syncRTCv+0xe0>)
   d4a1c:	a808      	add	r0, sp, #32
   d4a1e:	f005 fb22 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d4a22:	4605      	mov	r5, r0
   d4a24:	4819      	ldr	r0, [pc, #100]	; (d4a8c <_Z7syncRTCv+0xd4>)
   d4a26:	f000 fc0b 	bl	d5240 <_ZN7IoTNode8unixTimeEv>
   d4a2a:	6823      	ldr	r3, [r4, #0]
   d4a2c:	4919      	ldr	r1, [pc, #100]	; (d4a94 <_Z7syncRTCv+0xdc>)
   d4a2e:	4602      	mov	r2, r0
   d4a30:	a80c      	add	r0, sp, #48	; 0x30
   d4a32:	f005 fe25 	bl	da680 <_ZN9TimeClass6formatElPKc>
   d4a36:	a90c      	add	r1, sp, #48	; 0x30
   d4a38:	4628      	mov	r0, r5
   d4a3a:	f005 fb08 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d4a3e:	4601      	mov	r1, r0
   d4a40:	a810      	add	r0, sp, #64	; 0x40
   d4a42:	f005 fa65 	bl	d9f10 <_ZN6StringC1ERKS_>
   d4a46:	4b15      	ldr	r3, [pc, #84]	; (d4a9c <_Z7syncRTCv+0xe4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4a48:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4a4a:	781b      	ldrb	r3, [r3, #0]
   d4a4c:	4914      	ldr	r1, [pc, #80]	; (d4aa0 <_Z7syncRTCv+0xe8>)
   d4a4e:	f88d 3000 	strb.w	r3, [sp]
   d4a52:	a802      	add	r0, sp, #8
   d4a54:	233c      	movs	r3, #60	; 0x3c
   d4a56:	f006 f8a3 	bl	daba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4a5a:	a803      	add	r0, sp, #12
   d4a5c:	f7ff febc 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a60:	a810      	add	r0, sp, #64	; 0x40
   d4a62:	f005 f9cf 	bl	d9e04 <_ZN6StringD1Ev>
   d4a66:	a80c      	add	r0, sp, #48	; 0x30
   d4a68:	f005 f9cc 	bl	d9e04 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4a6c:	a808      	add	r0, sp, #32
   d4a6e:	f005 f9c9 	bl	d9e04 <_ZN6StringD1Ev>
   d4a72:	a804      	add	r0, sp, #16
   d4a74:	f005 f9c6 	bl	d9e04 <_ZN6StringD1Ev>
}

bool syncRTC()
{
    uint32_t syncNow;
    bool sync = false;
   d4a78:	2000      	movs	r0, #0
        #ifdef DEBUG
        Particle.publish("Time NOT synced",String(Time.format(syncNow, TIME_FORMAT_ISO8601_FULL)+"  "+Time.format(node.unixTime(), TIME_FORMAT_ISO8601_FULL)),PRIVATE);
        #endif
    }
    return sync;
}
   d4a7a:	b014      	add	sp, #80	; 0x50
   d4a7c:	bd70      	pop	{r4, r5, r6, pc}
   d4a7e:	bf00      	nop
   d4a80:	2003e608 	.word	0x2003e608
   d4a84:	575eb24d 	.word	0x575eb24d
   d4a88:	575eb24e 	.word	0x575eb24e
   d4a8c:	2003d834 	.word	0x2003d834
   d4a90:	2003bde0 	.word	0x2003bde0
   d4a94:	2003e240 	.word	0x2003e240
   d4a98:	000e05b9 	.word	0x000e05b9
   d4a9c:	2003c128 	.word	0x2003c128
   d4aa0:	000e0253 	.word	0x000e0253

000d4aa4 <setup>:
    DEBUG_PRINTLN("Particle connected");
  }
}

// setup() runs once, when the device is first turned on.
void setup() {
   d4aa4:	b530      	push	{r4, r5, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4aa6:	2300      	movs	r3, #0
   d4aa8:	b085      	sub	sp, #20
   d4aaa:	2202      	movs	r2, #2
   d4aac:	4942      	ldr	r1, [pc, #264]	; (d4bb8 <setup+0x114>)
   d4aae:	4843      	ldr	r0, [pc, #268]	; (d4bbc <setup+0x118>)
   d4ab0:	f004 ff0a 	bl	d98c8 <spark_variable>
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d4ab4:	2500      	movs	r5, #0
        extra.size = sizeof(extra);
   d4ab6:	230c      	movs	r3, #12
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d4ab8:	9501      	str	r5, [sp, #4]
        extra.size = sizeof(extra);
   d4aba:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
   d4abe:	4b40      	ldr	r3, [pc, #256]	; (d4bc0 <setup+0x11c>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4ac0:	4940      	ldr	r1, [pc, #256]	; (d4bc4 <setup+0x120>)
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
   d4ac2:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4ac4:	2204      	movs	r2, #4
   d4ac6:	ab01      	add	r3, sp, #4
   d4ac8:	483f      	ldr	r0, [pc, #252]	; (d4bc8 <setup+0x124>)
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d4aca:	9503      	str	r5, [sp, #12]
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4acc:	f004 fefc 	bl	d98c8 <spark_variable>
  // register cloudy things
  Particle.variable("version",firmwareVersion);
  Particle.variable("devicestatus",deviceStatus);

  Serial.begin(115200);
   d4ad0:	f006 fabc 	bl	db04c <_Z16_fetch_usbserialv>
   d4ad4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4ad8:	f006 faac 	bl	db034 <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   d4adc:	f006 fba4 	bl	db228 <_Z22__fetch_global_Serial1v>
   d4ae0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4ae4:	f006 fb9a 	bl	db21c <_ZN11USARTSerial5beginEm>

  node.begin();
   d4ae8:	4838      	ldr	r0, [pc, #224]	; (d4bcc <setup+0x128>)
   d4aea:	f000 fbd1 	bl	d5290 <_ZN7IoTNode5beginEv>
  node.setPowerON(EXT3V3,true);
   d4aee:	2201      	movs	r2, #1
   d4af0:	2102      	movs	r1, #2
   d4af2:	4836      	ldr	r0, [pc, #216]	; (d4bcc <setup+0x128>)
   d4af4:	f000 fb8a 	bl	d520c <_ZN7IoTNode10setPowerONE9powerNameb>
  node.setPowerON(EXT5V,true);
   d4af8:	2201      	movs	r2, #1
   d4afa:	2103      	movs	r1, #3
   d4afc:	4833      	ldr	r0, [pc, #204]	; (d4bcc <setup+0x128>)
   d4afe:	f000 fb85 	bl	d520c <_ZN7IoTNode10setPowerONE9powerNameb>

  #ifdef IOTDEBUG
  delay(5000);
   d4b02:	f241 3088 	movw	r0, #5000	; 0x1388
   d4b06:	f005 fe59 	bl	da7bc <delay>
 
  checkI2CDevices();
   d4b0a:	f7ff fc77 	bl	d43fc <_Z15checkI2CDevicesv>
  scanI2C();
   d4b0e:	f7ff fd6b 	bl	d45e8 <_Z7scanI2Cv>
  #endif

    // Check for I2C devices again
  if (!node.ok())
   d4b12:	482e      	ldr	r0, [pc, #184]	; (d4bcc <setup+0x128>)
   d4b14:	f000 fb44 	bl	d51a0 <_ZN7IoTNode2okEv>
   d4b18:	4604      	mov	r4, r0
   d4b1a:	b9c8      	cbnz	r0, d4b50 <setup+0xac>
  {
    #ifdef IOTDEBUG
    // Particle.publish("Unplugged","Plug the device into the IoT Node",PRIVATE);
    DEBUG_PRINTLN("Plug the device into the IoT Node");
   d4b1c:	f006 fa96 	bl	db04c <_Z16_fetch_usbserialv>
   d4b20:	492b      	ldr	r1, [pc, #172]	; (d4bd0 <setup+0x12c>)
   d4b22:	f005 fb70 	bl	da206 <_ZN5Print7printlnEPKc>
    #endif
    deviceStatus="Device is not plugged into the IoTNode";
   d4b26:	492b      	ldr	r1, [pc, #172]	; (d4bd4 <setup+0x130>)
   d4b28:	4826      	ldr	r0, [pc, #152]	; (d4bc4 <setup+0x120>)
   d4b2a:	f005 fa04 	bl	d9f36 <_ZN6StringaSEPKc>
    setPriority(priority);
    setActive(true);
}

inline void particle::LEDStatus::setActive(bool active) {
    led_set_status_active(&d_, active, nullptr);
   d4b2e:	4622      	mov	r2, r4
   d4b30:	2101      	movs	r1, #1
   d4b32:	4829      	ldr	r0, [pc, #164]	; (d4bd8 <setup+0x134>)
   d4b34:	f004 fe12 	bl	d975c <led_set_status_active>
    fadeRed.setActive(true);
    DEBUG_PRINTLN("Resetting in 10 seconds");
   d4b38:	f006 fa88 	bl	db04c <_Z16_fetch_usbserialv>
   d4b3c:	4927      	ldr	r1, [pc, #156]	; (d4bdc <setup+0x138>)
   d4b3e:	f005 fb62 	bl	da206 <_ZN5Print7printlnEPKc>
    delay(10000);
   d4b42:	f242 7010 	movw	r0, #10000	; 0x2710
   d4b46:	f005 fe39 	bl	da7bc <delay>
    System.reset();
   d4b4a:	f005 f885 	bl	d9c58 <_ZN11SystemClass5resetEv>
   d4b4e:	e030      	b.n	d4bb2 <setup+0x10e>
  }
  else
  {
    
    connect();
    framConfig.read(0, (uint8_t*)&config);
   d4b50:	4c23      	ldr	r4, [pc, #140]	; (d4be0 <setup+0x13c>)
    System.reset();
  }
  else
  {
    
    connect();
   d4b52:	f7ff fd91 	bl	d4678 <_Z7connectv>
    framConfig.read(0, (uint8_t*)&config);
   d4b56:	4622      	mov	r2, r4
   d4b58:	4629      	mov	r1, r5
   d4b5a:	4822      	ldr	r0, [pc, #136]	; (d4be4 <setup+0x140>)
   d4b5c:	f000 fcb3 	bl	d54c6 <_ZN9framArray4readEmPh>
      // 1. A new ThingSpeak channel is created
      // 2. The channel id and keys are Saved
      // 3. a firstRunTest variable is saved in persistent memory as a flag to indicate
      // that the IoT node has been set up already.

    if (config.testCheck != firstRunTest)
   d4b60:	4b21      	ldr	r3, [pc, #132]	; (d4be8 <setup+0x144>)
   d4b62:	6822      	ldr	r2, [r4, #0]
   d4b64:	429a      	cmp	r2, r3
   d4b66:	d008      	beq.n	d4b7a <setup+0xd6>
    {
        config.testCheck = firstRunTest;
   d4b68:	6023      	str	r3, [r4, #0]
        /// Defaults
        config.particleTimeout = 20000;
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d4b6a:	4622      	mov	r2, r4

    if (config.testCheck != firstRunTest)
    {
        config.testCheck = firstRunTest;
        /// Defaults
        config.particleTimeout = 20000;
   d4b6c:	f644 6320 	movw	r3, #20000	; 0x4e20
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d4b70:	4629      	mov	r1, r5
   d4b72:	481c      	ldr	r0, [pc, #112]	; (d4be4 <setup+0x140>)

    if (config.testCheck != firstRunTest)
    {
        config.testCheck = firstRunTest;
        /// Defaults
        config.particleTimeout = 20000;
   d4b74:	60e3      	str	r3, [r4, #12]
        // Save to FRAM
        framConfig.write(0, (uint8_t*)&config);     
   d4b76:	f000 fc97 	bl	d54a8 <_ZN9framArray5writeEmPh>
    }
      // end of first run code.

      if (syncRTC())
   d4b7a:	f7ff ff1d 	bl	d49b8 <_Z7syncRTCv>
   d4b7e:	b118      	cbz	r0, d4b88 <setup+0xe4>
      {
        DEBUG_PRINTLN("RTC sync'ed with cloud");
   d4b80:	f006 fa64 	bl	db04c <_Z16_fetch_usbserialv>
   d4b84:	4919      	ldr	r1, [pc, #100]	; (d4bec <setup+0x148>)
   d4b86:	e002      	b.n	d4b8e <setup+0xea>
      }
      else
      {
        DEBUG_PRINTLN("RTC not sync'ed with cloud");
   d4b88:	f006 fa60 	bl	db04c <_Z16_fetch_usbserialv>
   d4b8c:	4918      	ldr	r1, [pc, #96]	; (d4bf0 <setup+0x14c>)
   d4b8e:	f005 fb3a 	bl	da206 <_ZN5Print7printlnEPKc>
      }
      // load pointers
      dataRing.initialize();
   d4b92:	4818      	ldr	r0, [pc, #96]	; (d4bf4 <setup+0x150>)
   d4b94:	f000 fcc0 	bl	d5518 <_ZN8framRing10initializeEv>
      sensors.begin();
   d4b98:	4817      	ldr	r0, [pc, #92]	; (d4bf8 <setup+0x154>)
   d4b9a:	f004 f869 	bl	d8c70 <_ZN14WeatherSensors5beginEv>
      pollSensorTimer.start();
   d4b9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4ba2:	4816      	ldr	r0, [pc, #88]	; (d4bfc <setup+0x158>)
   d4ba4:	f7ff fc14 	bl	d43d0 <_ZN5Timer5startEj>
      sensorSendTimer.start();  
   d4ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4bac:	4814      	ldr	r0, [pc, #80]	; (d4c00 <setup+0x15c>)
   d4bae:	f7ff fc0f 	bl	d43d0 <_ZN5Timer5startEj>
  }
}
   d4bb2:	b005      	add	sp, #20
   d4bb4:	bd30      	pop	{r4, r5, pc}
   d4bb6:	bf00      	nop
   d4bb8:	000e0348 	.word	0x000e0348
   d4bbc:	000e0263 	.word	0x000e0263
   d4bc0:	000d40b7 	.word	0x000d40b7
   d4bc4:	2003dd0c 	.word	0x2003dd0c
   d4bc8:	000e026b 	.word	0x000e026b
   d4bcc:	2003d834 	.word	0x2003d834
   d4bd0:	000e0278 	.word	0x000e0278
   d4bd4:	000e029a 	.word	0x000e029a
   d4bd8:	2003bfe4 	.word	0x2003bfe4
   d4bdc:	000e02c1 	.word	0x000e02c1
   d4be0:	2003c12c 	.word	0x2003c12c
   d4be4:	2003c080 	.word	0x2003c080
   d4be8:	00111f4c 	.word	0x00111f4c
   d4bec:	000e02d9 	.word	0x000e02d9
   d4bf0:	000e02f0 	.word	0x000e02f0
   d4bf4:	2003c0b0 	.word	0x2003c0b0
   d4bf8:	2003c164 	.word	0x2003c164
   d4bfc:	2003c0f0 	.word	0x2003c0f0
   d4c00:	2003c10c 	.word	0x2003c10c

000d4c04 <_Z9unpluggedv>:
    }
    return sync;
}

void unplugged()
{
   d4c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4c06:	4b0a      	ldr	r3, [pc, #40]	; (d4c30 <_Z9unpluggedv+0x2c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4c08:	4c0a      	ldr	r4, [pc, #40]	; (d4c34 <_Z9unpluggedv+0x30>)
   d4c0a:	781b      	ldrb	r3, [r3, #0]
   d4c0c:	490a      	ldr	r1, [pc, #40]	; (d4c38 <_Z9unpluggedv+0x34>)
   d4c0e:	f88d 3000 	strb.w	r3, [sp]
   d4c12:	4622      	mov	r2, r4
   d4c14:	233c      	movs	r3, #60	; 0x3c
   d4c16:	a802      	add	r0, sp, #8
   d4c18:	f005 ffc2 	bl	daba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4c1c:	a803      	add	r0, sp, #12
   d4c1e:	f7ff fddb 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  #ifdef IOTDEBUG
  Particle.publish("Unplugged","Plug the device into the IoT Node",PRIVATE);
  DEBUG_PRINTLN("Plug the device into the IoT Node");
   d4c22:	f006 fa13 	bl	db04c <_Z16_fetch_usbserialv>
   d4c26:	4621      	mov	r1, r4
   d4c28:	f005 faed 	bl	da206 <_ZN5Print7printlnEPKc>
  #endif

   d4c2c:	b004      	add	sp, #16
   d4c2e:	bd10      	pop	{r4, pc}
   d4c30:	2003c128 	.word	0x2003c128
   d4c34:	000e0278 	.word	0x000e0278
   d4c38:	000e030b 	.word	0x000e030b

000d4c3c <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
   d4c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c3e:	b089      	sub	sp, #36	; 0x24
   d4c40:	4604      	mov	r4, r0
   d4c42:	a802      	add	r0, sp, #8
   d4c44:	e880 0006 	stmia.w	r0, {r1, r2}
   d4c48:	461d      	mov	r5, r3
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c4a:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c4c:	2300      	movs	r3, #0
   d4c4e:	460f      	mov	r7, r1
   d4c50:	9e03      	ldr	r6, [sp, #12]
   d4c52:	9306      	str	r3, [sp, #24]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c54:	f7ff fa21 	bl	d409a <_Znwj>
   d4c58:	b110      	cbz	r0, d4c60 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x24>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d4c5a:	6007      	str	r7, [r0, #0]
   d4c5c:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c5e:	6085      	str	r5, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4c60:	4b0b      	ldr	r3, [pc, #44]	; (d4c90 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x54>)
   d4c62:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   d4c64:	4b0b      	ldr	r3, [pc, #44]	; (d4c94 <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah+0x58>)
   d4c66:	9306      	str	r3, [sp, #24]
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
   d4c68:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c6c:	9004      	str	r0, [sp, #16]
   d4c6e:	9300      	str	r3, [sp, #0]
   d4c70:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d4c74:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
   d4c78:	a904      	add	r1, sp, #16
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	f006 fa42 	bl	db104 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
   d4c80:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c82:	a804      	add	r0, sp, #16
   d4c84:	f7ff fb26 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
}
   d4c88:	4620      	mov	r0, r4
   d4c8a:	b009      	add	sp, #36	; 0x24
   d4c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c8e:	bf00      	nop
   d4c90:	000d40e9 	.word	0x000d40e9
   d4c94:	000d426d 	.word	0x000d426d

000d4c98 <_GLOBAL__sub_I_sd>:
   d4c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c9c:	4bbc      	ldr	r3, [pc, #752]	; (d4f90 <_GLOBAL__sub_I_sd+0x2f8>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4c9e:	4fbd      	ldr	r7, [pc, #756]	; (d4f94 <_GLOBAL__sub_I_sd+0x2fc>)
   d4ca0:	2401      	movs	r4, #1
   d4ca2:	b08a      	sub	sp, #40	; 0x28
   d4ca4:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4ca6:	f004 fb39 	bl	d931c <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4caa:	4bbb      	ldr	r3, [pc, #748]	; (d4f98 <_GLOBAL__sub_I_sd+0x300>)
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4cac:	48bb      	ldr	r0, [pc, #748]	; (d4f9c <_GLOBAL__sub_I_sd+0x304>)
   d4cae:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4cb2:	2164      	movs	r1, #100	; 0x64
   d4cb4:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
   d4cb8:	6839      	ldr	r1, [r7, #0]
   d4cba:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
   d4cbe:	2200      	movs	r2, #0
   d4cc0:	ea11 0604 	ands.w	r6, r1, r4
   d4cc4:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4cc6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4cca:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4cce:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4cd2:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4cd6:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4cda:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d4cde:	461c      	mov	r4, r3
   d4ce0:	4605      	mov	r5, r0
   d4ce2:	d10a      	bne.n	d4cfa <_GLOBAL__sub_I_sd+0x62>
   d4ce4:	4638      	mov	r0, r7
   d4ce6:	f7ff f9de 	bl	d40a6 <__cxa_guard_acquire>
   d4cea:	b130      	cbz	r0, d4cfa <_GLOBAL__sub_I_sd+0x62>
   d4cec:	4631      	mov	r1, r6
   d4cee:	48ac      	ldr	r0, [pc, #688]	; (d4fa0 <_GLOBAL__sub_I_sd+0x308>)
   d4cf0:	f004 fede 	bl	d9ab0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4cf4:	4638      	mov	r0, r7
   d4cf6:	f7ff f9db 	bl	d40b0 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4cfa:	4ba9      	ldr	r3, [pc, #676]	; (d4fa0 <_GLOBAL__sub_I_sd+0x308>)
   d4cfc:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
  #define DEBUG_PRINTLN(...)
#endif

const int SD_CHIP_SELECT = N_D0;
SdFat sd;
SdCardPrintHandler printToSd(sd, SD_CHIP_SELECT, SPI_FULL_SPEED);
   d4d00:	4ca8      	ldr	r4, [pc, #672]	; (d4fa4 <_GLOBAL__sub_I_sd+0x30c>)
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4d02:	4ba9      	ldr	r3, [pc, #676]	; (d4fa8 <_GLOBAL__sub_I_sd+0x310>)
   d4d04:	9506      	str	r5, [sp, #24]
   d4d06:	ae06      	add	r6, sp, #24
   d4d08:	2500      	movs	r5, #0
   d4d0a:	2701      	movs	r7, #1
   d4d0c:	9308      	str	r3, [sp, #32]
   d4d0e:	2202      	movs	r2, #2
   d4d10:	4633      	mov	r3, r6
   d4d12:	49a1      	ldr	r1, [pc, #644]	; (d4f98 <_GLOBAL__sub_I_sd+0x300>)
   d4d14:	f88d 501c 	strb.w	r5, [sp, #28]
   d4d18:	4620      	mov	r0, r4
   d4d1a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
   d4d1e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
   d4d22:	f000 fc79 	bl	d5618 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE>
   d4d26:	4aa1      	ldr	r2, [pc, #644]	; (d4fac <_GLOBAL__sub_I_sd+0x314>)
   d4d28:	49a1      	ldr	r1, [pc, #644]	; (d4fb0 <_GLOBAL__sub_I_sd+0x318>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4d2a:	f8df 9344 	ldr.w	r9, [pc, #836]	; d5070 <_GLOBAL__sub_I_sd+0x3d8>
   d4d2e:	4620      	mov	r0, r4
   d4d30:	f006 fda6 	bl	db880 <__aeabi_atexit>
	 * The maximum number of log files to keep is enforced at startup, when a SD card is inserted, and when
	 * the current log file is full.
	 *
	 * @param value Number of files to kee. Values are 1 <= num <= 999999 (size_t)
	 */
	inline SdCardPrintHandler &withMaxFilesToKeep(size_t value) { maxFilesToKeep = value; return *this; };
   d4d34:	f640 33b8 	movw	r3, #3000	; 0xbb8
inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, LED_SPEED_NORMAL, priority, source) { // Use normal speed by default
}

inline particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, LEDSpeed speed, LEDPriority priority, LEDSource source) :
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   d4d38:	462a      	mov	r2, r5
   d4d3a:	2114      	movs	r1, #20
   d4d3c:	2003      	movs	r0, #3
   d4d3e:	62a3      	str	r3, [r4, #40]	; 0x28
   d4d40:	f004 fd4e 	bl	d97e0 <led_pattern_period>
   d4d44:	f04f 081e 	mov.w	r8, #30
   d4d48:	4603      	mov	r3, r0
   d4d4a:	f8cd 8000 	str.w	r8, [sp]
   d4d4e:	9701      	str	r7, [sp, #4]
   d4d50:	2203      	movs	r2, #3
   d4d52:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   d4d56:	4897      	ldr	r0, [pc, #604]	; (d4fb4 <_GLOBAL__sub_I_sd+0x31c>)
	    _M_manager = &_My_handler::_M_manager;
   d4d58:	4c97      	ldr	r4, [pc, #604]	; (d4fb8 <_GLOBAL__sub_I_sd+0x320>)
   d4d5a:	f004 fe81 	bl	d9a60 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
#define SENSOR_SEND_TIME_MS 60000
#define SENSOR_POLL_TIME_MS 2000

#define IOTDEBUG

LEDStatus fadeRed(RGB_COLOR_RED, LED_PATTERN_FADE, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   d4d5e:	4a93      	ldr	r2, [pc, #588]	; (d4fac <_GLOBAL__sub_I_sd+0x314>)
   d4d60:	4996      	ldr	r1, [pc, #600]	; (d4fbc <_GLOBAL__sub_I_sd+0x324>)
   d4d62:	4894      	ldr	r0, [pc, #592]	; (d4fb4 <_GLOBAL__sub_I_sd+0x31c>)
   d4d64:	f006 fd8c 	bl	db880 <__aeabi_atexit>

const int firmwareVersion = 0;

SYSTEM_THREAD(ENABLED);
   d4d68:	4629      	mov	r1, r5
   d4d6a:	4638      	mov	r0, r7
   d4d6c:	f004 fd18 	bl	d97a0 <system_thread_set_state>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4d70:	4b93      	ldr	r3, [pc, #588]	; (d4fc0 <_GLOBAL__sub_I_sd+0x328>)
   d4d72:	9306      	str	r3, [sp, #24]
// This is the index for the updateTSChan
int returnIndex;

byte messageSize = 1;

Timer pollSensorTimer(SENSOR_POLL_TIME_MS, capturePollSensors);
   d4d74:	4632      	mov	r2, r6
   d4d76:	462b      	mov	r3, r5
   d4d78:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d4d7c:	4891      	ldr	r0, [pc, #580]	; (d4fc4 <_GLOBAL__sub_I_sd+0x32c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4d7e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d4d82:	9408      	str	r4, [sp, #32]
   d4d84:	f7ff fab4 	bl	d42f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d88:	4630      	mov	r0, r6
   d4d8a:	f7ff faa3 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
   d4d8e:	4a87      	ldr	r2, [pc, #540]	; (d4fac <_GLOBAL__sub_I_sd+0x314>)
   d4d90:	498d      	ldr	r1, [pc, #564]	; (d4fc8 <_GLOBAL__sub_I_sd+0x330>)
   d4d92:	488c      	ldr	r0, [pc, #560]	; (d4fc4 <_GLOBAL__sub_I_sd+0x32c>)
   d4d94:	f006 fd74 	bl	db880 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4d98:	4b8c      	ldr	r3, [pc, #560]	; (d4fcc <_GLOBAL__sub_I_sd+0x334>)
   d4d9a:	9306      	str	r3, [sp, #24]

Timer sensorSendTimer(SENSOR_SEND_TIME_MS, getResetAndSendSensors);
   d4d9c:	4632      	mov	r2, r6
   d4d9e:	462b      	mov	r3, r5
   d4da0:	f64e 2160 	movw	r1, #60000	; 0xea60
   d4da4:	488a      	ldr	r0, [pc, #552]	; (d4fd0 <_GLOBAL__sub_I_sd+0x338>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4da6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d4daa:	9408      	str	r4, [sp, #32]
   d4dac:	f7ff faa0 	bl	d42f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4db0:	4630      	mov	r0, r6
   d4db2:	f7ff fa8f 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
   d4db6:	4a7d      	ldr	r2, [pc, #500]	; (d4fac <_GLOBAL__sub_I_sd+0x314>)
   d4db8:	4983      	ldr	r1, [pc, #524]	; (d4fc8 <_GLOBAL__sub_I_sd+0x330>)
   d4dba:	4885      	ldr	r0, [pc, #532]	; (d4fd0 <_GLOBAL__sub_I_sd+0x338>)
   d4dbc:	f006 fd60 	bl	db880 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4dc0:	4b84      	ldr	r3, [pc, #528]	; (d4fd4 <_GLOBAL__sub_I_sd+0x33c>)
   d4dc2:	9306      	str	r3, [sp, #24]

Timer unpluggedTimer(5000,unplugged);
   d4dc4:	4632      	mov	r2, r6
   d4dc6:	462b      	mov	r3, r5
   d4dc8:	f241 3188 	movw	r1, #5000	; 0x1388
   d4dcc:	4882      	ldr	r0, [pc, #520]	; (d4fd8 <_GLOBAL__sub_I_sd+0x340>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4dce:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   d4dd2:	9408      	str	r4, [sp, #32]
{
  // user-accessible "public" interface
  public:
    WeatherSensors() : airTempKMedian(30), relativeHumidtyMedian(30), node()
   d4dd4:	4c81      	ldr	r4, [pc, #516]	; (d4fdc <_GLOBAL__sub_I_sd+0x344>)
   d4dd6:	f7ff fa8b 	bl	d42f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dda:	4630      	mov	r0, r6
   d4ddc:	f7ff fa7a 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
   d4de0:	4a72      	ldr	r2, [pc, #456]	; (d4fac <_GLOBAL__sub_I_sd+0x314>)
   d4de2:	4979      	ldr	r1, [pc, #484]	; (d4fc8 <_GLOBAL__sub_I_sd+0x330>)
   d4de4:	487c      	ldr	r0, [pc, #496]	; (d4fd8 <_GLOBAL__sub_I_sd+0x340>)
   d4de6:	f006 fd4b 	bl	db880 <__aeabi_atexit>
   d4dea:	4620      	mov	r0, r4
   d4dec:	f001 f9bf 	bl	d616e <_ZN15Adafruit_AM2315C1Ev>
   d4df0:	f104 0008 	add.w	r0, r4, #8
   d4df4:	f003 f877 	bl	d7ee6 <_ZN9MPL3115A2C1Ev>
   d4df8:	4641      	mov	r1, r8
   d4dfa:	f104 000a 	add.w	r0, r4, #10
   d4dfe:	f004 fa02 	bl	d9206 <_ZN13RunningMedianC1Et>
   d4e02:	4641      	mov	r1, r8
   d4e04:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d4e08:	f004 f9fd 	bl	d9206 <_ZN13RunningMedianC1Et>
   d4e0c:	4874      	ldr	r0, [pc, #464]	; (d4fe0 <_GLOBAL__sub_I_sd+0x348>)
   d4e0e:	f000 f9b7 	bl	d5180 <_ZN7IoTNodeC1Ev>
   d4e12:	f241 6a5c 	movw	sl, #5724	; 0x165c
   d4e16:	f640 211f 	movw	r1, #2591	; 0xa1f
   d4e1a:	4872      	ldr	r0, [pc, #456]	; (d4fe4 <_GLOBAL__sub_I_sd+0x34c>)
   d4e1c:	f001 f830 	bl	d5e80 <_ZN16Adafruit_TSL2591C1El>
   d4e20:	2304      	movs	r3, #4
   d4e22:	f844 300a 	str.w	r3, [r4, sl]
   d4e26:	f504 53b3 	add.w	r3, r4, #5728	; 0x1660
   d4e2a:	4a6f      	ldr	r2, [pc, #444]	; (d4fe8 <_GLOBAL__sub_I_sd+0x350>)
   d4e2c:	609a      	str	r2, [r3, #8]
   d4e2e:	4a6f      	ldr	r2, [pc, #444]	; (d4fec <_GLOBAL__sub_I_sd+0x354>)
   d4e30:	601d      	str	r5, [r3, #0]
   d4e32:	611a      	str	r2, [r3, #16]
   d4e34:	f241 6374 	movw	r3, #5748	; 0x1674
   d4e38:	f04f 39ff 	mov.w	r9, #4294967295
   d4e3c:	50e5      	str	r5, [r4, r3]
   d4e3e:	f241 6378 	movw	r3, #5752	; 0x1678
   d4e42:	2211      	movs	r2, #17
   d4e44:	50e5      	str	r5, [r4, r3]
   d4e46:	f241 637c 	movw	r3, #5756	; 0x167c
   d4e4a:	f241 686c 	movw	r8, #5740	; 0x166c
   d4e4e:	f844 9003 	str.w	r9, [r4, r3]
   d4e52:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d4e56:	2003      	movs	r0, #3
   d4e58:	601d      	str	r5, [r3, #0]
   d4e5a:	f241 6384 	movw	r3, #5764	; 0x1684
    {
      pinMode(AnemometerPin, INPUT_PULLUP);
   d4e5e:	2102      	movs	r1, #2
// library interface description
class WeatherSensors
{
  // user-accessible "public" interface
  public:
    WeatherSensors() : airTempKMedian(30), relativeHumidtyMedian(30), node()
   d4e60:	50e2      	str	r2, [r4, r3]
   d4e62:	4a63      	ldr	r2, [pc, #396]	; (d4ff0 <_GLOBAL__sub_I_sd+0x358>)
   d4e64:	f844 0008 	str.w	r0, [r4, r8]
   d4e68:	2300      	movs	r3, #0
   d4e6a:	6013      	str	r3, [r2, #0]
   d4e6c:	6053      	str	r3, [r2, #4]
   d4e6e:	f241 6290 	movw	r2, #5776	; 0x1690
   d4e72:	50a5      	str	r5, [r4, r2]
   d4e74:	4a5f      	ldr	r2, [pc, #380]	; (d4ff4 <_GLOBAL__sub_I_sd+0x35c>)
   d4e76:	6013      	str	r3, [r2, #0]
   d4e78:	f241 6298 	movw	r2, #5784	; 0x1698
   d4e7c:	50a5      	str	r5, [r4, r2]
   d4e7e:	4a5e      	ldr	r2, [pc, #376]	; (d4ff8 <_GLOBAL__sub_I_sd+0x360>)
   d4e80:	6013      	str	r3, [r2, #0]
   d4e82:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
   d4e86:	6015      	str	r5, [r2, #0]
   d4e88:	6053      	str	r3, [r2, #4]
   d4e8a:	f241 62a8 	movw	r2, #5800	; 0x16a8
   d4e8e:	50a5      	str	r5, [r4, r2]
   d4e90:	4a5a      	ldr	r2, [pc, #360]	; (d4ffc <_GLOBAL__sub_I_sd+0x364>)
   d4e92:	6013      	str	r3, [r2, #0]
   d4e94:	6053      	str	r3, [r2, #4]
   d4e96:	f241 63b4 	movw	r3, #5812	; 0x16b4
   d4e9a:	50e5      	str	r5, [r4, r3]
    {
      pinMode(AnemometerPin, INPUT_PULLUP);
   d4e9c:	f006 fc6e 	bl	db77c <pinMode>
      attachInterrupt(AnemometerPin, &WeatherSensors::handleAnemometerEvent, this, FALLING);
   d4ea0:	f834 0008 	ldrh.w	r0, [r4, r8]
   d4ea4:	4b56      	ldr	r3, [pc, #344]	; (d5000 <_GLOBAL__sub_I_sd+0x368>)
   d4ea6:	9306      	str	r3, [sp, #24]
   d4ea8:	f04f 0802 	mov.w	r8, #2
   d4eac:	9507      	str	r5, [sp, #28]
   d4eae:	9502      	str	r5, [sp, #8]
   d4eb0:	f8cd 9004 	str.w	r9, [sp, #4]
   d4eb4:	f8cd 8000 	str.w	r8, [sp]
   d4eb8:	e896 0006 	ldmia.w	r6, {r1, r2}
   d4ebc:	4623      	mov	r3, r4
   d4ebe:	f7ff febd 	bl	d4c3c <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>

      pinMode(RainPin, INPUT_PULLUP);
   d4ec2:	4641      	mov	r1, r8
   d4ec4:	f834 000a 	ldrh.w	r0, [r4, sl]
   d4ec8:	f006 fc58 	bl	db77c <pinMode>
      attachInterrupt(RainPin, &WeatherSensors::handleRainEvent, this, FALLING);
   d4ecc:	f834 000a 	ldrh.w	r0, [r4, sl]
   d4ed0:	4b4c      	ldr	r3, [pc, #304]	; (d5004 <_GLOBAL__sub_I_sd+0x36c>)
   d4ed2:	9304      	str	r3, [sp, #16]
   d4ed4:	e88d 0300 	stmia.w	sp, {r8, r9}
   d4ed8:	9505      	str	r5, [sp, #20]
   d4eda:	9502      	str	r5, [sp, #8]
   d4edc:	aa04      	add	r2, sp, #16
   d4ede:	4623      	mov	r3, r4
   d4ee0:	ca06      	ldmia	r2, {r1, r2}
   d4ee2:	f7ff feab 	bl	d4c3c <_Z15attachInterruptI14WeatherSensorsEbtMT_FvvEPS1_13InterruptModeah>

WeatherSensors sensors; //Interrupts for anemometer and rain bucket
   d4ee6:	4a31      	ldr	r2, [pc, #196]	; (d4fac <_GLOBAL__sub_I_sd+0x314>)
   d4ee8:	4947      	ldr	r1, [pc, #284]	; (d5008 <_GLOBAL__sub_I_sd+0x370>)
   d4eea:	4620      	mov	r0, r4
   d4eec:	f006 fcc8 	bl	db880 <__aeabi_atexit>
// are set up here too

IoTNode node;
   d4ef0:	4846      	ldr	r0, [pc, #280]	; (d500c <_GLOBAL__sub_I_sd+0x374>)
   d4ef2:	f000 f945 	bl	d5180 <_ZN7IoTNodeC1Ev>
   d4ef6:	4a2d      	ldr	r2, [pc, #180]	; (d4fac <_GLOBAL__sub_I_sd+0x314>)
   d4ef8:	4945      	ldr	r1, [pc, #276]	; (d5010 <_GLOBAL__sub_I_sd+0x378>)
   d4efa:	4844      	ldr	r0, [pc, #272]	; (d500c <_GLOBAL__sub_I_sd+0x374>)
   d4efc:	f006 fcc0 	bl	db880 <__aeabi_atexit>

// // Create FRAM array and ring
framArray framConfig = node.makeFramArray(1, sizeof(config));
   d4f00:	463a      	mov	r2, r7
   d4f02:	2318      	movs	r3, #24
   d4f04:	4941      	ldr	r1, [pc, #260]	; (d500c <_GLOBAL__sub_I_sd+0x374>)
   d4f06:	4843      	ldr	r0, [pc, #268]	; (d5014 <_GLOBAL__sub_I_sd+0x37c>)
   d4f08:	f000 fac3 	bl	d5492 <_ZN7IoTNode13makeFramArrayEmh>

framRing dataRing = node.makeFramRing(300, sizeof(sensorReadings));
   d4f0c:	2318      	movs	r3, #24
   d4f0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
   d4f12:	493e      	ldr	r1, [pc, #248]	; (d500c <_GLOBAL__sub_I_sd+0x374>)
   d4f14:	4840      	ldr	r0, [pc, #256]	; (d5018 <_GLOBAL__sub_I_sd+0x380>)
   d4f16:	f000 faf4 	bl	d5502 <_ZN7IoTNode12makeFramRingEmh>
bool readyToCapturePollSensors = false;
bool tickleWD = false;

unsigned long timeToNextSendMS;

String deviceStatus;
   d4f1a:	4940      	ldr	r1, [pc, #256]	; (d501c <_GLOBAL__sub_I_sd+0x384>)
   d4f1c:	4840      	ldr	r0, [pc, #256]	; (d5020 <_GLOBAL__sub_I_sd+0x388>)
   d4f1e:	f004 ffb8 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f22:	4a22      	ldr	r2, [pc, #136]	; (d4fac <_GLOBAL__sub_I_sd+0x314>)
   d4f24:	493f      	ldr	r1, [pc, #252]	; (d5024 <_GLOBAL__sub_I_sd+0x38c>)
   d4f26:	483e      	ldr	r0, [pc, #248]	; (d5020 <_GLOBAL__sub_I_sd+0x388>)
   d4f28:	f006 fcaa 	bl	db880 <__aeabi_atexit>
String i2cDevices;
   d4f2c:	493b      	ldr	r1, [pc, #236]	; (d501c <_GLOBAL__sub_I_sd+0x384>)
   d4f2e:	483e      	ldr	r0, [pc, #248]	; (d5028 <_GLOBAL__sub_I_sd+0x390>)
   d4f30:	f004 ffaf 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f34:	4a1d      	ldr	r2, [pc, #116]	; (d4fac <_GLOBAL__sub_I_sd+0x314>)
   d4f36:	493b      	ldr	r1, [pc, #236]	; (d5024 <_GLOBAL__sub_I_sd+0x38c>)
   d4f38:	483b      	ldr	r0, [pc, #236]	; (d5028 <_GLOBAL__sub_I_sd+0x390>)
   d4f3a:	f006 fca1 	bl	db880 <__aeabi_atexit>
    "ADC",
    "FRAM",
    "AM2315",
    "MPL3115",
    "TSL2591"
};
   d4f3e:	493b      	ldr	r1, [pc, #236]	; (d502c <_GLOBAL__sub_I_sd+0x394>)
   d4f40:	483b      	ldr	r0, [pc, #236]	; (d5030 <_GLOBAL__sub_I_sd+0x398>)
   d4f42:	f004 ffa6 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f46:	493b      	ldr	r1, [pc, #236]	; (d5034 <_GLOBAL__sub_I_sd+0x39c>)
   d4f48:	483b      	ldr	r0, [pc, #236]	; (d5038 <_GLOBAL__sub_I_sd+0x3a0>)
   d4f4a:	f004 ffa2 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f4e:	493b      	ldr	r1, [pc, #236]	; (d503c <_GLOBAL__sub_I_sd+0x3a4>)
   d4f50:	483b      	ldr	r0, [pc, #236]	; (d5040 <_GLOBAL__sub_I_sd+0x3a8>)
   d4f52:	f004 ff9e 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f56:	493b      	ldr	r1, [pc, #236]	; (d5044 <_GLOBAL__sub_I_sd+0x3ac>)
   d4f58:	483b      	ldr	r0, [pc, #236]	; (d5048 <_GLOBAL__sub_I_sd+0x3b0>)
   d4f5a:	f004 ff9a 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f5e:	493b      	ldr	r1, [pc, #236]	; (d504c <_GLOBAL__sub_I_sd+0x3b4>)
   d4f60:	483b      	ldr	r0, [pc, #236]	; (d5050 <_GLOBAL__sub_I_sd+0x3b8>)
   d4f62:	f004 ff96 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f66:	493b      	ldr	r1, [pc, #236]	; (d5054 <_GLOBAL__sub_I_sd+0x3bc>)
   d4f68:	483b      	ldr	r0, [pc, #236]	; (d5058 <_GLOBAL__sub_I_sd+0x3c0>)
   d4f6a:	f004 ff92 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f6e:	493b      	ldr	r1, [pc, #236]	; (d505c <_GLOBAL__sub_I_sd+0x3c4>)
   d4f70:	483b      	ldr	r0, [pc, #236]	; (d5060 <_GLOBAL__sub_I_sd+0x3c8>)
   d4f72:	f004 ff8e 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f76:	493b      	ldr	r1, [pc, #236]	; (d5064 <_GLOBAL__sub_I_sd+0x3cc>)
   d4f78:	483b      	ldr	r0, [pc, #236]	; (d5068 <_GLOBAL__sub_I_sd+0x3d0>)
   d4f7a:	f004 ff8a 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>

String deviceStatus;
String i2cDevices;
bool resetDevice = false;

String i2cNames[] =
   d4f7e:	4a0b      	ldr	r2, [pc, #44]	; (d4fac <_GLOBAL__sub_I_sd+0x314>)
   d4f80:	493a      	ldr	r1, [pc, #232]	; (d506c <_GLOBAL__sub_I_sd+0x3d4>)
   d4f82:	4628      	mov	r0, r5
   d4f84:	f006 fc7c 	bl	db880 <__aeabi_atexit>
  #ifdef IOTDEBUG
  Particle.publish("Unplugged","Plug the device into the IoT Node",PRIVATE);
  DEBUG_PRINTLN("Plug the device into the IoT Node");
  #endif

   d4f88:	b00a      	add	sp, #40	; 0x28
   d4f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4f8e:	bf00      	nop
   d4f90:	2003c128 	.word	0x2003c128
   d4f94:	2003bea0 	.word	0x2003bea0
   d4f98:	2003d888 	.word	0x2003d888
   d4f9c:	000e006c 	.word	0x000e006c
   d4fa0:	2003bea4 	.word	0x2003bea4
   d4fa4:	2003beac 	.word	0x2003beac
   d4fa8:	02faf080 	.word	0x02faf080
   d4fac:	2003be9c 	.word	0x2003be9c
   d4fb0:	000d5745 	.word	0x000d5745
   d4fb4:	2003bfe0 	.word	0x2003bfe0
   d4fb8:	000d40d1 	.word	0x000d40d1
   d4fbc:	000d42a5 	.word	0x000d42a5
   d4fc0:	000d40c1 	.word	0x000d40c1
   d4fc4:	2003c0f0 	.word	0x2003c0f0
   d4fc8:	000d4375 	.word	0x000d4375
   d4fcc:	000d4131 	.word	0x000d4131
   d4fd0:	2003c10c 	.word	0x2003c10c
   d4fd4:	000d4c05 	.word	0x000d4c05
   d4fd8:	2003c148 	.word	0x2003c148
   d4fdc:	2003c164 	.word	0x2003c164
   d4fe0:	2003d768 	.word	0x2003d768
   d4fe4:	2003d7b0 	.word	0x2003d7b0
   d4fe8:	3c343958 	.word	0x3c343958
   d4fec:	3fbef9db 	.word	0x3fbef9db
   d4ff0:	2003d7ec 	.word	0x2003d7ec
   d4ff4:	2003d7f8 	.word	0x2003d7f8
   d4ff8:	2003d800 	.word	0x2003d800
   d4ffc:	2003d810 	.word	0x2003d810
   d5000:	000d416f 	.word	0x000d416f
   d5004:	000d414d 	.word	0x000d414d
   d5008:	000d41a9 	.word	0x000d41a9
   d500c:	2003d834 	.word	0x2003d834
   d5010:	000d4125 	.word	0x000d4125
   d5014:	2003c080 	.word	0x2003c080
   d5018:	2003c0b0 	.word	0x2003c0b0
   d501c:	000e06ec 	.word	0x000e06ec
   d5020:	2003dd0c 	.word	0x2003dd0c
   d5024:	000d9e05 	.word	0x000d9e05
   d5028:	2003c0a0 	.word	0x2003c0a0
   d502c:	000e0315 	.word	0x000e0315
   d5030:	2003c000 	.word	0x2003c000
   d5034:	000e0319 	.word	0x000e0319
   d5038:	2003c010 	.word	0x2003c010
   d503c:	000e031d 	.word	0x000e031d
   d5040:	2003c020 	.word	0x2003c020
   d5044:	000e0328 	.word	0x000e0328
   d5048:	2003c030 	.word	0x2003c030
   d504c:	000e032c 	.word	0x000e032c
   d5050:	2003c040 	.word	0x2003c040
   d5054:	000e0331 	.word	0x000e0331
   d5058:	2003c050 	.word	0x2003c050
   d505c:	000e0338 	.word	0x000e0338
   d5060:	2003c060 	.word	0x2003c060
   d5064:	000e0340 	.word	0x000e0340
   d5068:	2003c070 	.word	0x2003c070
   d506c:	000d4105 	.word	0x000d4105
   d5070:	000d40cd 	.word	0x000d40cd

000d5074 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d5074:	b508      	push	{r3, lr}
   d5076:	f004 f951 	bl	d931c <HAL_Pin_Map>
   d507a:	4b01      	ldr	r3, [pc, #4]	; (d5080 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d507c:	6018      	str	r0, [r3, #0]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	2003dd20 	.word	0x2003dd20

000d5084 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d5084:	f004 b94a 	b.w	d931c <HAL_Pin_Map>

000d5088 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d5088:	7c03      	ldrb	r3, [r0, #16]
   d508a:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d508e:	4602      	mov	r2, r0
   d5090:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d5094:	b12b      	cbz	r3, d50a2 <_ZN4File9availableEv+0x1a>
   d5096:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d5098:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d509a:	1a18      	subs	r0, r3, r0
   d509c:	bf48      	it	mi
   d509e:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d50a2:	4770      	bx	lr

000d50a4 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d50a4:	4770      	bx	lr

000d50a6 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d50a6:	3010      	adds	r0, #16
   d50a8:	f001 bf92 	b.w	d6fd0 <_ZN7FatFile4syncEv>

000d50ac <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d50ac:	3010      	adds	r0, #16
   d50ae:	f001 be69 	b.w	d6d84 <_ZN7FatFile4peekEv>

000d50b2 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d50b2:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d50b4:	2201      	movs	r2, #1
   d50b6:	f10d 0107 	add.w	r1, sp, #7
   d50ba:	3010      	adds	r0, #16
   d50bc:	f001 fdaf 	bl	d6c1e <_ZN7FatFile4readEPvj>
   d50c0:	2801      	cmp	r0, #1
   d50c2:	bf0c      	ite	eq
   d50c4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d50c8:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d50cc:	b003      	add	sp, #12
   d50ce:	f85d fb04 	ldr.w	pc, [sp], #4

000d50d2 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d50d2:	3010      	adds	r0, #16
   d50d4:	f002 b8ea 	b.w	d72ac <_ZN7FatFile5writeEPKvj>

000d50d8 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d50d8:	b507      	push	{r0, r1, r2, lr}
   d50da:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d50dc:	2201      	movs	r2, #1
   d50de:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d50e2:	3010      	adds	r0, #16
   d50e4:	4619      	mov	r1, r3
   d50e6:	f002 f8e1 	bl	d72ac <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d50ea:	b003      	add	sp, #12
   d50ec:	f85d fb04 	ldr.w	pc, [sp], #4

000d50f0 <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d50f0:	b510      	push	{r4, lr}
   d50f2:	2134      	movs	r1, #52	; 0x34
   d50f4:	4604      	mov	r4, r0
   d50f6:	f006 fbd1 	bl	db89c <_ZdlPvj>
   d50fa:	4620      	mov	r0, r4
   d50fc:	bd10      	pop	{r4, pc}
	...

000d5100 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d5100:	b530      	push	{r4, r5, lr}
   d5102:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5104:	4b1c      	ldr	r3, [pc, #112]	; (d5178 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d5106:	9300      	str	r3, [sp, #0]
   d5108:	7913      	ldrb	r3, [r2, #4]
   d510a:	f88d 3004 	strb.w	r3, [sp, #4]
   d510e:	6893      	ldr	r3, [r2, #8]
   d5110:	9302      	str	r3, [sp, #8]
   d5112:	7b13      	ldrb	r3, [r2, #12]
   d5114:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5118:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d511c:	7b53      	ldrb	r3, [r2, #13]
   d511e:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d5122:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d5124:	460a      	mov	r2, r1
   d5126:	466b      	mov	r3, sp
   d5128:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d512c:	4628      	mov	r0, r5
   d512e:	f002 fc05 	bl	d793c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d5132:	b1f0      	cbz	r0, d5172 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d5134:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d5136:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d513a:	4628      	mov	r0, r5
   d513c:	f001 ff7e 	bl	d703c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d5140:	2101      	movs	r1, #1
   d5142:	4620      	mov	r0, r4
   d5144:	f002 faa3 	bl	d768e <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d5148:	4601      	mov	r1, r0
   d514a:	b168      	cbz	r0, d5168 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d514c:	4621      	mov	r1, r4
   d514e:	4628      	mov	r0, r5
   d5150:	f001 fd4d 	bl	d6bee <_ZN7FatFile8openRootEP9FatVolume>
   d5154:	b168      	cbz	r0, d5172 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d5156:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d515a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d515e:	bf16      	itet	ne
   d5160:	4b06      	ldrne	r3, [pc, #24]	; (d517c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d5162:	4618      	moveq	r0, r3
   d5164:	601d      	strne	r5, [r3, #0]
   d5166:	e005      	b.n	d5174 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d5168:	4620      	mov	r0, r4
   d516a:	f002 fa90 	bl	d768e <_ZN9FatVolume4initEh>
   d516e:	2800      	cmp	r0, #0
   d5170:	d1ec      	bne.n	d514c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d5172:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d5174:	b005      	add	sp, #20
   d5176:	bd30      	pop	{r4, r5, pc}
   d5178:	000e006c 	.word	0x000e006c
   d517c:	2003e1e0 	.word	0x2003e1e0

000d5180 <_ZN7IoTNodeC1Ev>:
// Create FRAM instances
#define PART_NUMBER MB85RC256V


// Constructor
IoTNode::IoTNode() : myFram(PART_NUMBER)
   d5180:	b510      	push	{r4, lr}
   d5182:	4906      	ldr	r1, [pc, #24]	; (d519c <_ZN7IoTNodeC1Ev+0x1c>)
   d5184:	4604      	mov	r4, r0
   d5186:	f004 fe84 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d518a:	2363      	movs	r3, #99	; 0x63
   d518c:	7423      	strb	r3, [r4, #16]
   d518e:	2105      	movs	r1, #5
   d5190:	f104 0014 	add.w	r0, r4, #20
   d5194:	f003 fe94 	bl	d8ec0 <_ZN7FramI2CC1E14framPartNumber>
{

}
   d5198:	4620      	mov	r0, r4
   d519a:	bd10      	pop	{r4, pc}
   d519c:	000e06ec 	.word	0x000e06ec

000d51a0 <_ZN7IoTNode2okEv>:

}

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool IoTNode::ok()
{
   d51a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
      0x6F, //111
      0x20, //32
      0x57, //87
      0x4D, //77
      0x50 //80
  };
   d51a2:	4b19      	ldr	r3, [pc, #100]	; (d5208 <_ZN7IoTNode2okEv+0x68>)
   d51a4:	6818      	ldr	r0, [r3, #0]
   d51a6:	791b      	ldrb	r3, [r3, #4]
   d51a8:	f88d 3004 	strb.w	r3, [sp, #4]
   d51ac:	9000      	str	r0, [sp, #0]
  if (!Wire.isEnabled())
   d51ae:	f006 fb41 	bl	db834 <_Z19__fetch_global_Wirev>
   d51b2:	f006 f8f6 	bl	db3a2 <_ZN7TwoWire9isEnabledEv>
   d51b6:	b918      	cbnz	r0, d51c0 <_ZN7IoTNode2okEv+0x20>
  {
    Wire.begin();
   d51b8:	f006 fb3c 	bl	db834 <_Z19__fetch_global_Wirev>
   d51bc:	f006 f8ac 	bl	db318 <_ZN7TwoWire5beginEv>

}

// check i2c devices with i2c names at i2c address of length i2c length returned in i2cExists
bool IoTNode::ok()
{
   d51c0:	2400      	movs	r4, #0
  for (int i=0; i<5; ++i)
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    address = i2cAd[i];
   d51c2:	f81d 5004 	ldrb.w	r5, [sp, r4]
    Wire.beginTransmission(address);
   d51c6:	f006 fb35 	bl	db834 <_Z19__fetch_global_Wirev>
   d51ca:	4629      	mov	r1, r5
   d51cc:	f006 f8db 	bl	db386 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d51d0:	f006 fb30 	bl	db834 <_Z19__fetch_global_Wirev>
   d51d4:	f006 f8e2 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

    // Try again if there is an error
    if (!error==0)
   d51d8:	b920      	cbnz	r0, d51e4 <_ZN7IoTNode2okEv+0x44>
  {
    Wire.begin();
  }
  byte error, address;
  bool result = true;
  for (int i=0; i<5; ++i)
   d51da:	3401      	adds	r4, #1
   d51dc:	2c05      	cmp	r4, #5
   d51de:	d1f0      	bne.n	d51c2 <_ZN7IoTNode2okEv+0x22>
  if (!Wire.isEnabled())
  {
    Wire.begin();
  }
  byte error, address;
  bool result = true;
   d51e0:	2001      	movs	r0, #1
   d51e2:	e00f      	b.n	d5204 <_ZN7IoTNode2okEv+0x64>
    error = Wire.endTransmission();

    // Try again if there is an error
    if (!error==0)
    {
      Wire.reset();
   d51e4:	f006 fb26 	bl	db834 <_Z19__fetch_global_Wirev>
   d51e8:	f006 f8df 	bl	db3aa <_ZN7TwoWire5resetEv>
      Wire.beginTransmission(address);
   d51ec:	f006 fb22 	bl	db834 <_Z19__fetch_global_Wirev>
   d51f0:	4629      	mov	r1, r5
   d51f2:	f006 f8c8 	bl	db386 <_ZN7TwoWire17beginTransmissionEh>
      error = Wire.endTransmission();
   d51f6:	f006 fb1d 	bl	db834 <_Z19__fetch_global_Wirev>
   d51fa:	f006 f8cf 	bl	db39c <_ZN7TwoWire15endTransmissionEv>
    }
 
    // Return false if there is an error
    if (!error == 0)
   d51fe:	2800      	cmp	r0, #0
   d5200:	d0eb      	beq.n	d51da <_ZN7IoTNode2okEv+0x3a>
    {
      result = false;
   d5202:	2000      	movs	r0, #0
      break;
    }
  }
  return result;
}
   d5204:	b003      	add	sp, #12
   d5206:	bd30      	pop	{r4, r5, pc}
   d5208:	000e0374 	.word	0x000e0374

000d520c <_ZN7IoTNode10setPowerONE9powerNameb>:
   d520c:	4801      	ldr	r0, [pc, #4]	; (d5214 <_ZN7IoTNode10setPowerONE9powerNameb+0x8>)
   d520e:	f002 be42 	b.w	d7e96 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d5212:	bf00      	nop
   d5214:	2003dd25 	.word	0x2003dd25

000d5218 <_ZN7IoTNode14tickleWatchdogEv>:
// Note that the WATCHDOG switch must be set to On
// for the watchdog reset to be connected
// See documentation for setting up the watchdog delay
// using the dip switch on the IoT Node board
void IoTNode::tickleWatchdog()
{
   d5218:	b510      	push	{r4, lr}
  expand.digitalWrite(5,true);
   d521a:	4c08      	ldr	r4, [pc, #32]	; (d523c <_ZN7IoTNode14tickleWatchdogEv+0x24>)
   d521c:	2201      	movs	r2, #1
   d521e:	2105      	movs	r1, #5
   d5220:	4620      	mov	r0, r4
   d5222:	f002 fe38 	bl	d7e96 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
  //delayMicroseconds(100);
  delay(50);
   d5226:	2032      	movs	r0, #50	; 0x32
   d5228:	f005 fac8 	bl	da7bc <delay>
  expand.digitalWrite(5,false);
   d522c:	4620      	mov	r0, r4
   d522e:	2200      	movs	r2, #0
   d5230:	2105      	movs	r1, #5
}
   d5232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void IoTNode::tickleWatchdog()
{
  expand.digitalWrite(5,true);
  //delayMicroseconds(100);
  delay(50);
  expand.digitalWrite(5,false);
   d5236:	f002 be2e 	b.w	d7e96 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
   d523a:	bf00      	nop
   d523c:	2003dd25 	.word	0x2003dd25

000d5240 <_ZN7IoTNode8unixTimeEv>:
}


uint32_t IoTNode::unixTime()
{
  return rtc.rtcNow();
   d5240:	4801      	ldr	r0, [pc, #4]	; (d5248 <_ZN7IoTNode8unixTimeEv+0x8>)
   d5242:	f000 bdb7 	b.w	d5db4 <_ZN8MCP7941x6rtcNowEv>
   d5246:	bf00      	nop
   d5248:	2003dd24 	.word	0x2003dd24

000d524c <_ZN7IoTNode11setUnixTimeEm>:
}

void IoTNode::setUnixTime(uint32_t unixtime)
{
  rtc.setUnixTime(unixtime);
   d524c:	4801      	ldr	r0, [pc, #4]	; (d5254 <_ZN7IoTNode11setUnixTimeEm+0x8>)
   d524e:	f000 bd68 	b.w	d5d22 <_ZN8MCP7941x11setUnixTimeEm>
   d5252:	bf00      	nop
   d5254:	2003dd24 	.word	0x2003dd24

000d5258 <_ZN7IoTNode15array_to_stringEPhjPc>:


// Private

void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
   d5258:	b530      	push	{r4, r5, lr}
    for (unsigned int i = 0; i < len; i++)
   d525a:	2400      	movs	r4, #0
   d525c:	4294      	cmp	r4, r2
   d525e:	d012      	beq.n	d5286 <_ZN7IoTNode15array_to_stringEPhjPc+0x2e>
    {
        byte nib1 = (array[i] >> 4) & 0x0F;
   d5260:	5d08      	ldrb	r0, [r1, r4]
   d5262:	0905      	lsrs	r5, r0, #4
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
   d5264:	2d09      	cmp	r5, #9
void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
    for (unsigned int i = 0; i < len; i++)
    {
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
   d5266:	f000 000f 	and.w	r0, r0, #15
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
   d526a:	bf94      	ite	ls
   d526c:	3530      	addls	r5, #48	; 0x30
   d526e:	3537      	addhi	r5, #55	; 0x37
   d5270:	f803 5014 	strb.w	r5, [r3, r4, lsl #1]
        buffer[i*2+1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
   d5274:	2809      	cmp	r0, #9
   d5276:	eb03 0544 	add.w	r5, r3, r4, lsl #1
   d527a:	bf94      	ite	ls
   d527c:	3030      	addls	r0, #48	; 0x30
   d527e:	3037      	addhi	r0, #55	; 0x37
   d5280:	7068      	strb	r0, [r5, #1]

// Private

void IoTNode::array_to_string(byte array[], unsigned int len, char buffer[])
{
    for (unsigned int i = 0; i < len; i++)
   d5282:	3401      	adds	r4, #1
   d5284:	e7ea      	b.n	d525c <_ZN7IoTNode15array_to_stringEPhjPc+0x4>
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i*2+0] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
        buffer[i*2+1] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
    }
    buffer[len*2] = '\0';
   d5286:	2200      	movs	r2, #0
   d5288:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
   d528c:	bd30      	pop	{r4, r5, pc}
	...

000d5290 <_ZN7IoTNode5beginEv>:
{

}

bool IoTNode::begin()
{
   d5290:	b530      	push	{r4, r5, lr}
   d5292:	b08d      	sub	sp, #52	; 0x34
   d5294:	4605      	mov	r5, r0
  if (!Wire.isEnabled())
   d5296:	f006 facd 	bl	db834 <_Z19__fetch_global_Wirev>
   d529a:	f006 f882 	bl	db3a2 <_ZN7TwoWire9isEnabledEv>
   d529e:	b918      	cbnz	r0, d52a8 <_ZN7IoTNode5beginEv+0x18>
  {
    Wire.begin();
   d52a0:	f006 fac8 	bl	db834 <_Z19__fetch_global_Wirev>
   d52a4:	f006 f838 	bl	db318 <_ZN7TwoWire5beginEv>
  }
  delay(20);
   d52a8:	2014      	movs	r0, #20
   d52aa:	f005 fa87 	bl	da7bc <delay>

  // The i2c_scanner uses the return value of
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  address = 0x20; // MCP23017 address
  Wire.beginTransmission(address);
   d52ae:	f006 fac1 	bl	db834 <_Z19__fetch_global_Wirev>
   d52b2:	2120      	movs	r1, #32
   d52b4:	f006 f867 	bl	db386 <_ZN7TwoWire17beginTransmissionEh>
  error = Wire.endTransmission();
   d52b8:	f006 fabc 	bl	db834 <_Z19__fetch_global_Wirev>
   d52bc:	f006 f86e 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

  // Try again if there is an error
  if (!error==0)
   d52c0:	b180      	cbz	r0, d52e4 <_ZN7IoTNode5beginEv+0x54>
  {
    Wire.reset();
   d52c2:	f006 fab7 	bl	db834 <_Z19__fetch_global_Wirev>
   d52c6:	f006 f870 	bl	db3aa <_ZN7TwoWire5resetEv>
    Wire.beginTransmission(address);
   d52ca:	f006 fab3 	bl	db834 <_Z19__fetch_global_Wirev>
   d52ce:	2120      	movs	r1, #32
   d52d0:	f006 f859 	bl	db386 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d52d4:	f006 faae 	bl	db834 <_Z19__fetch_global_Wirev>
   d52d8:	f006 f860 	bl	db39c <_ZN7TwoWire15endTransmissionEv>
  }

  // Return false if there is an error
  if (!error == 0)
   d52dc:	fab0 f480 	clz	r4, r0
   d52e0:	0964      	lsrs	r4, r4, #5
   d52e2:	e000      	b.n	d52e6 <_ZN7IoTNode5beginEv+0x56>
  {
    Wire.begin();
  }
  delay(20);
  byte error, address;
  bool result = true;
   d52e4:	2401      	movs	r4, #1
  {
    result = false;
  }
  

  expand.begin();
   d52e6:	4861      	ldr	r0, [pc, #388]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d52e8:	f002 fdc6 	bl	d7e78 <_ZN17Adafruit_MCP230175beginEv>
  //Set pin direction 1 = out, 0 = in
  //PORT_A,0b10111111 | PORT_B,0b00001111
  expand.pinMode(0,OUTPUT);
   d52ec:	2201      	movs	r2, #1
   d52ee:	2100      	movs	r1, #0
   d52f0:	485e      	ldr	r0, [pc, #376]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d52f2:	f002 fdc4 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(1,OUTPUT);
   d52f6:	2201      	movs	r2, #1
   d52f8:	4611      	mov	r1, r2
   d52fa:	485c      	ldr	r0, [pc, #368]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d52fc:	f002 fdbf 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(2,OUTPUT);
   d5300:	2201      	movs	r2, #1
   d5302:	2102      	movs	r1, #2
   d5304:	4859      	ldr	r0, [pc, #356]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5306:	f002 fdba 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(3,OUTPUT);
   d530a:	2201      	movs	r2, #1
   d530c:	2103      	movs	r1, #3
   d530e:	4857      	ldr	r0, [pc, #348]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5310:	f002 fdb5 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(4,OUTPUT);
   d5314:	2201      	movs	r2, #1
   d5316:	2104      	movs	r1, #4
   d5318:	4854      	ldr	r0, [pc, #336]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d531a:	f002 fdb0 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(5,OUTPUT);
   d531e:	2201      	movs	r2, #1
   d5320:	2105      	movs	r1, #5
   d5322:	4852      	ldr	r0, [pc, #328]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5324:	f002 fdab 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(6,INPUT);
   d5328:	2200      	movs	r2, #0
   d532a:	2106      	movs	r1, #6
   d532c:	484f      	ldr	r0, [pc, #316]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d532e:	f002 fda6 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(7,OUTPUT);
   d5332:	2201      	movs	r2, #1
   d5334:	2107      	movs	r1, #7
   d5336:	484d      	ldr	r0, [pc, #308]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5338:	f002 fda1 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(8,INPUT);
   d533c:	2200      	movs	r2, #0
   d533e:	2108      	movs	r1, #8
   d5340:	484a      	ldr	r0, [pc, #296]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5342:	f002 fd9c 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(9,INPUT);
   d5346:	2200      	movs	r2, #0
   d5348:	2109      	movs	r1, #9
   d534a:	4848      	ldr	r0, [pc, #288]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d534c:	f002 fd97 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(10,INPUT);
   d5350:	2200      	movs	r2, #0
   d5352:	210a      	movs	r1, #10
   d5354:	4845      	ldr	r0, [pc, #276]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5356:	f002 fd92 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(11,INPUT);
   d535a:	2200      	movs	r2, #0
   d535c:	210b      	movs	r1, #11
   d535e:	4843      	ldr	r0, [pc, #268]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5360:	f002 fd8d 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(12,INPUT);
   d5364:	2200      	movs	r2, #0
   d5366:	210c      	movs	r1, #12
   d5368:	4840      	ldr	r0, [pc, #256]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d536a:	f002 fd88 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(13,INPUT);
   d536e:	2200      	movs	r2, #0
   d5370:	210d      	movs	r1, #13
   d5372:	483e      	ldr	r0, [pc, #248]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5374:	f002 fd83 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(14,INPUT);
   d5378:	2200      	movs	r2, #0
   d537a:	210e      	movs	r1, #14
   d537c:	483b      	ldr	r0, [pc, #236]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d537e:	f002 fd7e 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>
  expand.pinMode(15,INPUT);
   d5382:	2200      	movs	r2, #0
   d5384:	210f      	movs	r1, #15
   d5386:	4839      	ldr	r0, [pc, #228]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5388:	f002 fd79 	bl	d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>

  expand.pullUp(0,HIGH);
   d538c:	2201      	movs	r2, #1
   d538e:	2100      	movs	r1, #0
   d5390:	4836      	ldr	r0, [pc, #216]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5392:	f002 fd9d 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(1,HIGH);
   d5396:	2201      	movs	r2, #1
   d5398:	4611      	mov	r1, r2
   d539a:	4834      	ldr	r0, [pc, #208]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d539c:	f002 fd98 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(2,HIGH);
   d53a0:	2201      	movs	r2, #1
   d53a2:	2102      	movs	r1, #2
   d53a4:	4831      	ldr	r0, [pc, #196]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d53a6:	f002 fd93 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(3,HIGH);
   d53aa:	2201      	movs	r2, #1
   d53ac:	2103      	movs	r1, #3
   d53ae:	482f      	ldr	r0, [pc, #188]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d53b0:	f002 fd8e 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(4,HIGH);
   d53b4:	2201      	movs	r2, #1
   d53b6:	2104      	movs	r1, #4
   d53b8:	482c      	ldr	r0, [pc, #176]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d53ba:	f002 fd89 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(5,HIGH);
   d53be:	2201      	movs	r2, #1
   d53c0:	2105      	movs	r1, #5
   d53c2:	482a      	ldr	r0, [pc, #168]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d53c4:	f002 fd84 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(6,HIGH);
   d53c8:	2201      	movs	r2, #1
   d53ca:	2106      	movs	r1, #6
   d53cc:	4827      	ldr	r0, [pc, #156]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d53ce:	f002 fd7f 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(7,HIGH);
   d53d2:	2201      	movs	r2, #1
   d53d4:	2107      	movs	r1, #7
   d53d6:	4825      	ldr	r0, [pc, #148]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d53d8:	f002 fd7a 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(8,HIGH);
   d53dc:	2201      	movs	r2, #1
   d53de:	2108      	movs	r1, #8
   d53e0:	4822      	ldr	r0, [pc, #136]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d53e2:	f002 fd75 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(9,HIGH);
   d53e6:	2201      	movs	r2, #1
   d53e8:	2109      	movs	r1, #9
   d53ea:	4820      	ldr	r0, [pc, #128]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d53ec:	f002 fd70 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(10,HIGH);
   d53f0:	2201      	movs	r2, #1
   d53f2:	210a      	movs	r1, #10
   d53f4:	481d      	ldr	r0, [pc, #116]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d53f6:	f002 fd6b 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(11,HIGH); 
   d53fa:	2201      	movs	r2, #1
   d53fc:	210b      	movs	r1, #11
   d53fe:	481b      	ldr	r0, [pc, #108]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5400:	f002 fd66 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(12,HIGH);
   d5404:	2201      	movs	r2, #1
   d5406:	210c      	movs	r1, #12
   d5408:	4818      	ldr	r0, [pc, #96]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d540a:	f002 fd61 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(13,HIGH);
   d540e:	2201      	movs	r2, #1
   d5410:	210d      	movs	r1, #13
   d5412:	4816      	ldr	r0, [pc, #88]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5414:	f002 fd5c 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(14,HIGH);
   d5418:	2201      	movs	r2, #1
   d541a:	210e      	movs	r1, #14
   d541c:	4813      	ldr	r0, [pc, #76]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d541e:	f002 fd57 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>
  expand.pullUp(15,HIGH);
   d5422:	2201      	movs	r2, #1
   d5424:	210f      	movs	r1, #15
   d5426:	4811      	ldr	r0, [pc, #68]	; (d546c <_ZN7IoTNode5beginEv+0x1dc>)
   d5428:	f002 fd52 	bl	d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>

  // Get node ID from MCP79412 EUI-64 node address
  byte nodeHex[8] = "";
   d542c:	2100      	movs	r1, #0
  char nodeHexStr[17] = "";
   d542e:	220d      	movs	r2, #13
   d5430:	a808      	add	r0, sp, #32
  expand.pullUp(13,HIGH);
  expand.pullUp(14,HIGH);
  expand.pullUp(15,HIGH);

  // Get node ID from MCP79412 EUI-64 node address
  byte nodeHex[8] = "";
   d5432:	9101      	str	r1, [sp, #4]
   d5434:	9102      	str	r1, [sp, #8]
  char nodeHexStr[17] = "";
   d5436:	9107      	str	r1, [sp, #28]
   d5438:	f009 f9b6 	bl	de7a8 <memset>
  rtc.getMacAddress(nodeHex);
   d543c:	a901      	add	r1, sp, #4
   d543e:	480c      	ldr	r0, [pc, #48]	; (d5470 <_ZN7IoTNode5beginEv+0x1e0>)
   d5440:	f000 fb2e 	bl	d5aa0 <_ZN8MCP7941x13getMacAddressEPh>
  array_to_string(nodeHex, 8, nodeHexStr);
   d5444:	ab07      	add	r3, sp, #28
   d5446:	2208      	movs	r2, #8
   d5448:	a901      	add	r1, sp, #4
   d544a:	4628      	mov	r0, r5
   d544c:	f7ff ff04 	bl	d5258 <_ZN7IoTNode15array_to_stringEPhjPc>
  nodeID = String(nodeHexStr);
   d5450:	a907      	add	r1, sp, #28
   d5452:	a803      	add	r0, sp, #12
   d5454:	f004 fd1d 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
   d5458:	a903      	add	r1, sp, #12
   d545a:	4628      	mov	r0, r5
   d545c:	f004 fd63 	bl	d9f26 <_ZN6StringaSEOS_>
   d5460:	a803      	add	r0, sp, #12
   d5462:	f004 fccf 	bl	d9e04 <_ZN6StringD1Ev>
  return result;

}
   d5466:	4620      	mov	r0, r4
   d5468:	b00d      	add	sp, #52	; 0x34
   d546a:	bd30      	pop	{r4, r5, pc}
   d546c:	2003dd25 	.word	0x2003dd25
   d5470:	2003dd24 	.word	0x2003dd24

000d5474 <_ZN9framArrayC1ER7FramI2CmhR10framResult>:
}

//////////////////

// Fram Array Constructor
framArray::framArray(FramI2C& fram, uint32_t numberOfElements, byte sizeOfElement, framResult& result):
   d5474:	b513      	push	{r0, r1, r4, lr}
   d5476:	4604      	mov	r4, r0
   d5478:	9804      	ldr	r0, [sp, #16]
  _numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), myFram(fram), myResult(result),
  myArray(fram, _numberOfElements, _sizeOfElement, result)
   d547a:	60e0      	str	r0, [r4, #12]
   d547c:	9000      	str	r0, [sp, #0]
   d547e:	6022      	str	r2, [r4, #0]
   d5480:	7123      	strb	r3, [r4, #4]
   d5482:	60a1      	str	r1, [r4, #8]
   d5484:	f104 0010 	add.w	r0, r4, #16
   d5488:	f003 fe0e 	bl	d90a8 <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult>
{

}
   d548c:	4620      	mov	r0, r4
   d548e:	b002      	add	sp, #8
   d5490:	bd10      	pop	{r4, pc}

000d5492 <_ZN7IoTNode13makeFramArrayEmh>:

framArray IoTNode::makeFramArray(uint32_t numberOfElements, byte sizeOfElement)
{
   d5492:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return framArray(myFram, numberOfElements,sizeOfElement, myResult);
   d5494:	f101 0510 	add.w	r5, r1, #16
   d5498:	9500      	str	r5, [sp, #0]
   d549a:	3114      	adds	r1, #20
{

}

framArray IoTNode::makeFramArray(uint32_t numberOfElements, byte sizeOfElement)
{
   d549c:	4604      	mov	r4, r0
  return framArray(myFram, numberOfElements,sizeOfElement, myResult);
   d549e:	f7ff ffe9 	bl	d5474 <_ZN9framArrayC1ER7FramI2CmhR10framResult>
}
   d54a2:	4620      	mov	r0, r4
   d54a4:	b003      	add	sp, #12
   d54a6:	bd30      	pop	{r4, r5, pc}

000d54a8 <_ZN9framArray5writeEmPh>:

bool framArray::write(uint32_t index, byte *buffer)
{
   d54a8:	b513      	push	{r0, r1, r4, lr}
  framResult checkResult = framUnknownError;
   d54aa:	ab02      	add	r3, sp, #8
   d54ac:	2463      	movs	r4, #99	; 0x63
   d54ae:	f803 4d01 	strb.w	r4, [r3, #-1]!
  myArray.writeElement(index, buffer, checkResult);
   d54b2:	3010      	adds	r0, #16
   d54b4:	f003 fe23 	bl	d90fe <_ZN12FramI2CArray12writeElementEmPhR10framResult>
  if (checkResult==framOK)
   d54b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
  else
  {
    return false;
  }
  
}
   d54bc:	fab0 f080 	clz	r0, r0
   d54c0:	0940      	lsrs	r0, r0, #5
   d54c2:	b002      	add	sp, #8
   d54c4:	bd10      	pop	{r4, pc}

000d54c6 <_ZN9framArray4readEmPh>:

bool framArray::read(uint32_t index, byte *buffer)
{
   d54c6:	b513      	push	{r0, r1, r4, lr}
  framResult checkResult = framUnknownError;
   d54c8:	ab02      	add	r3, sp, #8
   d54ca:	2463      	movs	r4, #99	; 0x63
   d54cc:	f803 4d01 	strb.w	r4, [r3, #-1]!
  myArray.readElement(index, buffer, checkResult);
   d54d0:	3010      	adds	r0, #16
   d54d2:	f003 fdfe 	bl	d90d2 <_ZN12FramI2CArray11readElementEmPhR10framResult>
  if (checkResult==framOK)
   d54d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
  else
  {
    return false;
  }
  
}
   d54da:	fab0 f080 	clz	r0, r0
   d54de:	0940      	lsrs	r0, r0, #5
   d54e0:	b002      	add	sp, #8
   d54e2:	bd10      	pop	{r4, pc}

000d54e4 <_ZN8framRingC1ER7FramI2CmhR10framResult>:


//////////////////

// Fram Ring Array Constructor
framRing::framRing(FramI2C& fram, uint32_t numberOfElements, byte sizeOfElement, framResult& result):
   d54e4:	b513      	push	{r0, r1, r4, lr}
   d54e6:	4604      	mov	r4, r0
   d54e8:	9804      	ldr	r0, [sp, #16]
  _numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), myFram(fram), myResult(result),
  myRing(fram, _numberOfElements, _sizeOfElement, result)
   d54ea:	60e0      	str	r0, [r4, #12]
   d54ec:	9000      	str	r0, [sp, #0]
   d54ee:	6022      	str	r2, [r4, #0]
   d54f0:	7123      	strb	r3, [r4, #4]
   d54f2:	60a1      	str	r1, [r4, #8]
   d54f4:	f104 0010 	add.w	r0, r4, #16
   d54f8:	f003 fe17 	bl	d912a <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult>
{

}
   d54fc:	4620      	mov	r0, r4
   d54fe:	b002      	add	sp, #8
   d5500:	bd10      	pop	{r4, pc}

000d5502 <_ZN7IoTNode12makeFramRingEmh>:

framRing IoTNode::makeFramRing(uint32_t numberOfElements, byte sizeOfElement)
{
   d5502:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return framRing(myFram, numberOfElements,sizeOfElement, myResult);
   d5504:	f101 0510 	add.w	r5, r1, #16
   d5508:	9500      	str	r5, [sp, #0]
   d550a:	3114      	adds	r1, #20
{

}

framRing IoTNode::makeFramRing(uint32_t numberOfElements, byte sizeOfElement)
{
   d550c:	4604      	mov	r4, r0
  return framRing(myFram, numberOfElements,sizeOfElement, myResult);
   d550e:	f7ff ffe9 	bl	d54e4 <_ZN8framRingC1ER7FramI2CmhR10framResult>
}
   d5512:	4620      	mov	r0, r4
   d5514:	b003      	add	sp, #12
   d5516:	bd30      	pop	{r4, r5, pc}

000d5518 <_ZN8framRing10initializeEv>:

void framRing::initialize()
{
  myRing.initialize();
   d5518:	3010      	adds	r0, #16
   d551a:	f003 be3e 	b.w	d919a <_ZN14Ring_FramArray10initializeEv>
	...

000d5520 <_GLOBAL__sub_I_expand>:
}

bool framRing::isFull()
{
  return myRing.isFull();
}
   d5520:	b570      	push	{r4, r5, r6, lr}
   d5522:	f003 fefb 	bl	d931c <HAL_Pin_Map>

#include "IoTNode.h"

Adafruit_MCP23017 expand;

MCP7941x rtc = MCP7941x();
   d5526:	481e      	ldr	r0, [pc, #120]	; (d55a0 <_GLOBAL__sub_I_expand+0x80>)
   d5528:	4e1e      	ldr	r6, [pc, #120]	; (d55a4 <_GLOBAL__sub_I_expand+0x84>)
   d552a:	f000 fab8 	bl	d5a9e <_ZN8MCP7941xC1Ev>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d552e:	481e      	ldr	r0, [pc, #120]	; (d55a8 <_GLOBAL__sub_I_expand+0x88>)

File myFile;
   d5530:	4a1e      	ldr	r2, [pc, #120]	; (d55ac <_GLOBAL__sub_I_expand+0x8c>)
   d5532:	491f      	ldr	r1, [pc, #124]	; (d55b0 <_GLOBAL__sub_I_expand+0x90>)
   d5534:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d553a:	7404      	strb	r4, [r0, #16]
   d553c:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d553e:	6044      	str	r4, [r0, #4]
   d5540:	6083      	str	r3, [r0, #8]
 public:
  File() {}
   d5542:	4b1c      	ldr	r3, [pc, #112]	; (d55b4 <_GLOBAL__sub_I_expand+0x94>)
   d5544:	6003      	str	r3, [r0, #0]
   d5546:	f006 f99b 	bl	db880 <__aeabi_atexit>
   d554a:	4b1b      	ldr	r3, [pc, #108]	; (d55b8 <_GLOBAL__sub_I_expand+0x98>)
   d554c:	6831      	ldr	r1, [r6, #0]
   d554e:	71dc      	strb	r4, [r3, #7]
   d5550:	2264      	movs	r2, #100	; 0x64
   d5552:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5556:	4a19      	ldr	r2, [pc, #100]	; (d55bc <_GLOBAL__sub_I_expand+0x9c>)
   d5558:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d555c:	2201      	movs	r2, #1
   d555e:	ea11 0502 	ands.w	r5, r1, r2
   d5562:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d5566:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d556a:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d556e:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d5572:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d5576:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d557a:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
   d557e:	461c      	mov	r4, r3
   d5580:	d10a      	bne.n	d5598 <_GLOBAL__sub_I_expand+0x78>
   d5582:	4630      	mov	r0, r6
   d5584:	f7fe fd8f 	bl	d40a6 <__cxa_guard_acquire>
   d5588:	b130      	cbz	r0, d5598 <_GLOBAL__sub_I_expand+0x78>
   d558a:	4629      	mov	r1, r5
   d558c:	480c      	ldr	r0, [pc, #48]	; (d55c0 <_GLOBAL__sub_I_expand+0xa0>)
   d558e:	f004 fa8f 	bl	d9ab0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5592:	4630      	mov	r0, r6
   d5594:	f7fe fd8c 	bl	d40b0 <__cxa_guard_release>
   d5598:	4b09      	ldr	r3, [pc, #36]	; (d55c0 <_GLOBAL__sub_I_expand+0xa0>)
   d559a:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d559e:	bd70      	pop	{r4, r5, r6, pc}
   d55a0:	2003dd24 	.word	0x2003dd24
   d55a4:	2003bea0 	.word	0x2003bea0
   d55a8:	2003dd28 	.word	0x2003dd28
   d55ac:	2003be9c 	.word	0x2003be9c
   d55b0:	000d50a5 	.word	0x000d50a5
   d55b4:	000e0354 	.word	0x000e0354
   d55b8:	2003dd5c 	.word	0x2003dd5c
   d55bc:	000e006c 	.word	0x000e006c
   d55c0:	2003bea4 	.word	0x2003bea4

000d55c4 <_ZN18SdCardPrintHandler16dateTimeCallbackEPtS0_>:
	// Start over at beginning of buffer
	bufOffset = 0;
}

// [static]
void SdCardPrintHandler::dateTimeCallback(uint16_t* date, uint16_t* time) {
   d55c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55c6:	460e      	mov	r6, r1
   d55c8:	4607      	mov	r7, r0
	*date = FAT_DATE(Time.year(), Time.month(), Time.day());
   d55ca:	f005 f8e3 	bl	da794 <_ZN9TimeClass4yearEv>
   d55ce:	4605      	mov	r5, r0
   d55d0:	f005 f8d8 	bl	da784 <_ZN9TimeClass5monthEv>
   d55d4:	4604      	mov	r4, r0
   d55d6:	f005 f8cb 	bl	da770 <_ZN9TimeClass3dayEv>
   d55da:	0164      	lsls	r4, r4, #5
   d55dc:	b2c0      	uxtb	r0, r0
   d55de:	b2ad      	uxth	r5, r5
   d55e0:	f404 54ff 	and.w	r4, r4, #8160	; 0x1fe0
   d55e4:	f2a5 75bc 	subw	r5, r5, #1980	; 0x7bc
   d55e8:	4304      	orrs	r4, r0
   d55ea:	ea44 2445 	orr.w	r4, r4, r5, lsl #9
   d55ee:	803c      	strh	r4, [r7, #0]
	*time = FAT_TIME(Time.hour(), Time.minute(), Time.second());
   d55f0:	f005 f8a0 	bl	da734 <_ZN9TimeClass4hourEv>
   d55f4:	4605      	mov	r5, r0
   d55f6:	f005 f8a7 	bl	da748 <_ZN9TimeClass6minuteEv>
   d55fa:	4604      	mov	r4, r0
   d55fc:	f005 f8ae 	bl	da75c <_ZN9TimeClass6secondEv>
   d5600:	02ed      	lsls	r5, r5, #11
   d5602:	0164      	lsls	r4, r4, #5
   d5604:	f405 25ff 	and.w	r5, r5, #522240	; 0x7f800
   d5608:	f404 54ff 	and.w	r4, r4, #8160	; 0x1fe0
   d560c:	432c      	orrs	r4, r5
   d560e:	f3c0 0046 	ubfx	r0, r0, #1, #7
   d5612:	4304      	orrs	r4, r0
   d5614:	8034      	strh	r4, [r6, #0]
   d5616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5618 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE>:
}

//
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
   d5618:	b570      	push	{r4, r5, r6, lr}
   d561a:	4604      	mov	r4, r0
   d561c:	2500      	movs	r5, #0
   d561e:	6045      	str	r5, [r0, #4]
   d5620:	7322      	strb	r2, [r4, #12]
   d5622:	481d      	ldr	r0, [pc, #116]	; (d5698 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x80>)
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5624:	4a1d      	ldr	r2, [pc, #116]	; (d569c <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x84>)
   d5626:	6020      	str	r0, [r4, #0]
   d5628:	60a1      	str	r1, [r4, #8]
   d562a:	6122      	str	r2, [r4, #16]
   d562c:	791a      	ldrb	r2, [r3, #4]
   d562e:	7522      	strb	r2, [r4, #20]
   d5630:	689a      	ldr	r2, [r3, #8]
   d5632:	61a2      	str	r2, [r4, #24]
   d5634:	7b1a      	ldrb	r2, [r3, #12]
   d5636:	7722      	strb	r2, [r4, #28]
   d5638:	7b5b      	ldrb	r3, [r3, #13]
   d563a:	7763      	strb	r3, [r4, #29]
   d563c:	4b18      	ldr	r3, [pc, #96]	; (d56a0 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x88>)
   d563e:	6223      	str	r3, [r4, #32]
   d5640:	4b18      	ldr	r3, [pc, #96]	; (d56a4 <_ZN18SdCardPrintHandlerC1ER5SdFathN8particle13__SPISettingsE+0x8c>)
   d5642:	6263      	str	r3, [r4, #36]	; 0x24
   d5644:	230a      	movs	r3, #10
   d5646:	62a3      	str	r3, [r4, #40]	; 0x28
   d5648:	f242 7310 	movw	r3, #10000	; 0x2710
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
   d564c:	f504 768e 	add.w	r6, r4, #284	; 0x11c
   d5650:	62e3      	str	r3, [r4, #44]	; 0x2c
   d5652:	2301      	movs	r3, #1
   d5654:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   d5658:	6365      	str	r5, [r4, #52]	; 0x34
   d565a:	63a5      	str	r5, [r4, #56]	; 0x38
   d565c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   d5660:	f884 50c9 	strb.w	r5, [r4, #201]	; 0xc9
   d5664:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
   d5668:	f884 50d0 	strb.w	r5, [r4, #208]	; 0xd0
   d566c:	f884 50d1 	strb.w	r5, [r4, #209]	; 0xd1
   d5670:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
   d5674:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
   d5678:	2210      	movs	r2, #16
   d567a:	4629      	mov	r1, r5
   d567c:	4630      	mov	r0, r6
   d567e:	f009 f893 	bl	de7a8 <memset>
   d5682:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
	  void
	  _M_initialize()
	  {
	    this->_M_header._M_color = _S_red;
	    this->_M_header._M_parent = 0;
	    this->_M_header._M_left = &this->_M_header;
   d5686:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
	    this->_M_header._M_right = &this->_M_header;
   d568a:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
   d568e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
}
   d5692:	4620      	mov	r0, r4
   d5694:	bd70      	pop	{r4, r5, r6, pc}
   d5696:	bf00      	nop
   d5698:	000e0418 	.word	0x000e0418
   d569c:	000e006c 	.word	0x000e006c
   d56a0:	000e0379 	.word	0x000e0379
   d56a4:	000f4240 	.word	0x000f4240

000d56a8 <_ZN18SdCardPrintHandler7getNameEi>:
		needsScanCard = true;
		lastCardCheck = millis();
	}
}

const char *SdCardPrintHandler::getName(int num) {
   d56a8:	b510      	push	{r4, lr}
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
   d56aa:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
   d56ae:	460b      	mov	r3, r1
   d56b0:	4a03      	ldr	r2, [pc, #12]	; (d56c0 <_ZN18SdCardPrintHandler7getNameEi+0x18>)
   d56b2:	210c      	movs	r1, #12
   d56b4:	4620      	mov	r0, r4
   d56b6:	f004 f967 	bl	d9988 <snprintf>
	return nameBuf;
}
   d56ba:	4620      	mov	r0, r4
   d56bc:	bd10      	pop	{r4, pc}
   d56be:	bf00      	nop
   d56c0:	000e037e 	.word	0x000e037e

000d56c4 <_ZN18SdCardPrintHandler13checkMaxFilesEv>:
		return false;
	}
}


void SdCardPrintHandler::checkMaxFiles() {
   d56c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56c6:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
   d56ca:	4604      	mov	r4, r0
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
		const char *name = getName(*it);
		DEBUG_NORMAL(("removing old log file %s", name));
		FatFile::remove(&logsDir, name);
   d56cc:	f100 07d0 	add.w	r7, r0, #208	; 0xd0


void SdCardPrintHandler::checkMaxFiles() {
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
   d56d0:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   d56d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d56d6:	429a      	cmp	r2, r3
   d56d8:	d921      	bls.n	d571e <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x5a>
		const char *name = getName(*it);
   d56da:	6929      	ldr	r1, [r5, #16]
   d56dc:	4620      	mov	r0, r4
   d56de:	f7ff ffe3 	bl	d56a8 <_ZN18SdCardPrintHandler7getNameEi>
   d56e2:	4606      	mov	r6, r0
		DEBUG_NORMAL(("removing old log file %s", name));
   d56e4:	f005 fcb2 	bl	db04c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d56e8:	4633      	mov	r3, r6
   d56ea:	4a0d      	ldr	r2, [pc, #52]	; (d5720 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0x5c>)
   d56ec:	2101      	movs	r1, #1
   d56ee:	f004 fe84 	bl	da3fa <_ZN5Print11printf_implEbPKcz>
		FatFile::remove(&logsDir, name);
   d56f2:	4631      	mov	r1, r6
   d56f4:	4638      	mov	r0, r7
   d56f6:	f001 fcf7 	bl	d70e8 <_ZN7FatFile6removeEPS_PKc>
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d56fa:	4628      	mov	r0, r5
   d56fc:	f006 f922 	bl	db944 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   d5700:	f504 718e 	add.w	r1, r4, #284	; 0x11c
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_increment(_M_node);
   d5704:	4606      	mov	r6, r0
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
				(const_cast<_Base_ptr>(__position._M_node),
				 this->_M_impl._M_header));
   d5706:	4628      	mov	r0, r5
   d5708:	f006 f994 	bl	dba34 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d570c:	f7fe fcc7 	bl	d409e <_ZdlPv>
      _M_drop_node(__y);
      --_M_impl._M_node_count;
   d5710:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   d5714:	3b01      	subs	r3, #1
   d5716:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
		it = fileNums.erase(it);
   d571a:	4635      	mov	r5, r6


void SdCardPrintHandler::checkMaxFiles() {
	auto it = fileNums.begin();

	while(fileNums.size() > maxFilesToKeep) {
   d571c:	e7d8      	b.n	d56d0 <_ZN18SdCardPrintHandler13checkMaxFilesEv+0xc>
   d571e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5720:	000e0387 	.word	0x000e0387

000d5724 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5724:	b570      	push	{r4, r5, r6, lr}
   d5726:	4606      	mov	r6, r0
   d5728:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d572a:	b14c      	cbz	r4, d5740 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x1c>
	{
	  _M_erase(_S_right(__x));
   d572c:	68e1      	ldr	r1, [r4, #12]
   d572e:	4630      	mov	r0, r6
   d5730:	f7ff fff8 	bl	d5724 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>
   d5734:	68a5      	ldr	r5, [r4, #8]
   d5736:	4620      	mov	r0, r4
   d5738:	f7fe fcb1 	bl	d409e <_ZdlPv>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
   d573c:	462c      	mov	r4, r5
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
   d573e:	e7f4      	b.n	d572a <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE+0x6>
   d5740:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5744 <_ZN18SdCardPrintHandlerD1Ev>:
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
}

SdCardPrintHandler::~SdCardPrintHandler() {
   d5744:	b510      	push	{r4, lr}
   d5746:	4b05      	ldr	r3, [pc, #20]	; (d575c <_ZN18SdCardPrintHandlerD1Ev+0x18>)

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      { _M_erase(_M_begin()); }
   d5748:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
   d574c:	6003      	str	r3, [r0, #0]
   d574e:	4604      	mov	r4, r0
   d5750:	f500 708c 	add.w	r0, r0, #280	; 0x118
   d5754:	f7ff ffe6 	bl	d5724 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE>

}
   d5758:	4620      	mov	r0, r4
   d575a:	bd10      	pop	{r4, pc}
   d575c:	000e0418 	.word	0x000e0418

000d5760 <_ZN18SdCardPrintHandlerD0Ev>:
//
//
SdCardPrintHandler::SdCardPrintHandler(SdFat &sd, uint8_t csPin, SPISettings spiSettings) : sd(sd), csPin(csPin), spiSettings(spiSettings){
}

SdCardPrintHandler::~SdCardPrintHandler() {
   d5760:	b510      	push	{r4, lr}
   d5762:	4604      	mov	r4, r0

}
   d5764:	f7ff ffee 	bl	d5744 <_ZN18SdCardPrintHandlerD1Ev>
   d5768:	4620      	mov	r0, r4
   d576a:	f44f 719a 	mov.w	r1, #308	; 0x134
   d576e:	f006 f895 	bl	db89c <_ZdlPvj>
   d5772:	4620      	mov	r0, r4
   d5774:	bd10      	pop	{r4, pc}

000d5776 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>:
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d577a:	460e      	mov	r6, r1
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d577c:	f106 0a04 	add.w	sl, r6, #4
   d5780:	6889      	ldr	r1, [r1, #8]
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5782:	4605      	mov	r5, r0
   d5784:	4617      	mov	r7, r2
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() _GLIBCXX_NOEXCEPT
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
   d5786:	4654      	mov	r4, sl
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
   d5788:	2301      	movs	r3, #1
      while (__x != 0)
   d578a:	b159      	cbz	r1, d57a4 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x2e>
   d578c:	683a      	ldr	r2, [r7, #0]
   d578e:	690b      	ldr	r3, [r1, #16]
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   d5790:	429a      	cmp	r2, r3
   d5792:	bfb4      	ite	lt
   d5794:	688a      	ldrlt	r2, [r1, #8]
   d5796:	68ca      	ldrge	r2, [r1, #12]
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5798:	460c      	mov	r4, r1
   d579a:	bfb4      	ite	lt
   d579c:	2301      	movlt	r3, #1
   d579e:	2300      	movge	r3, #0
   d57a0:	4611      	mov	r1, r2
   d57a2:	e7f2      	b.n	d578a <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x14>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d57a4:	b133      	cbz	r3, d57b4 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x3e>
	{
	  if (__j == begin())
   d57a6:	68f3      	ldr	r3, [r6, #12]
   d57a8:	429c      	cmp	r4, r3
   d57aa:	d00e      	beq.n	d57ca <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x54>
      }

      _Self&
      operator--() _GLIBCXX_NOEXCEPT
      {
	_M_node = _Rb_tree_decrement(_M_node);
   d57ac:	4620      	mov	r0, r4
   d57ae:	f006 f8dc 	bl	db96a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d57b2:	e000      	b.n	d57b6 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x40>
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
      if (__comp)
   d57b4:	4620      	mov	r0, r4
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d57b6:	6902      	ldr	r2, [r0, #16]
   d57b8:	683b      	ldr	r3, [r7, #0]
   d57ba:	429a      	cmp	r2, r3
   d57bc:	db05      	blt.n	d57ca <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x54>

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d57be:	6028      	str	r0, [r5, #0]
   d57c0:	2300      	movs	r3, #0
   d57c2:	712b      	strb	r3, [r5, #4]
				 _GLIBCXX_FORWARD(_Arg, __v), __an),
		      true);
	}

      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    }
   d57c4:	4628      	mov	r0, r5
   d57c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
		 _NodeGen& __node_gen)
      {
	bool __insert_left = (__x != 0 || __p == _M_end()
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
							_S_key(__p)));
   d57ca:	45a2      	cmp	sl, r4
   d57cc:	d008      	beq.n	d57e0 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x6a>
   d57ce:	683a      	ldr	r2, [r7, #0]
   d57d0:	6923      	ldr	r3, [r4, #16]
   d57d2:	429a      	cmp	r2, r3
   d57d4:	bfac      	ite	ge
   d57d6:	f04f 0900 	movge.w	r9, #0
   d57da:	f04f 0901 	movlt.w	r9, #1
   d57de:	e001      	b.n	d57e4 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x6e>
   d57e0:	f04f 0901 	mov.w	r9, #1
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d57e4:	2014      	movs	r0, #20
   d57e6:	f7fe fc58 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d57ea:	683b      	ldr	r3, [r7, #0]
   d57ec:	f110 0f10 	cmn.w	r0, #16
   d57f0:	bf18      	it	ne
   d57f2:	6103      	strne	r3, [r0, #16]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d57f4:	4680      	mov	r8, r0

	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));

	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d57f6:	4653      	mov	r3, sl
   d57f8:	4601      	mov	r1, r0
   d57fa:	4622      	mov	r2, r4
   d57fc:	4648      	mov	r0, r9
   d57fe:	f006 f8b6 	bl	db96e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
				      this->_M_impl._M_header);
	++_M_impl._M_node_count;
   d5802:	6973      	ldr	r3, [r6, #20]
   d5804:	f8c5 8000 	str.w	r8, [r5]
   d5808:	3301      	adds	r3, #1
   d580a:	6173      	str	r3, [r6, #20]
   d580c:	2301      	movs	r3, #1
   d580e:	e7d8      	b.n	d57c2 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x4c>

000d5810 <_ZN18SdCardPrintHandler11openLogFileEv>:
const char *SdCardPrintHandler::getName(int num) {
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
	return nameBuf;
}

bool SdCardPrintHandler::openLogFile() {
   d5810:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const char *name = getName(lastFileNum);
   d5812:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
const char *SdCardPrintHandler::getName(int num) {
	snprintf(nameBuf, sizeof(nameBuf), "%06u.txt", num);
	return nameBuf;
}

bool SdCardPrintHandler::openLogFile() {
   d5816:	4604      	mov	r4, r0
	const char *name = getName(lastFileNum);
   d5818:	f7ff ff46 	bl	d56a8 <_ZN18SdCardPrintHandler7getNameEi>
	if (curLogFile.open(&logsDir, name, O_RDWR | O_APPEND | O_CREAT)) {
   d581c:	f240 230a 	movw	r3, #522	; 0x20a
   d5820:	4602      	mov	r2, r0
   d5822:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
   d5826:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   d582a:	f001 fc0e 	bl	d704a <_ZN7FatFile4openEPS_PKci>
   d582e:	4605      	mov	r5, r0
   d5830:	b130      	cbz	r0, d5840 <_ZN18SdCardPrintHandler11openLogFileEv+0x30>
       */
      std::pair<iterator, bool>
      insert(const value_type& __x)
      {
	std::pair<typename _Rep_type::iterator, bool> __p =
	  _M_t._M_insert_unique(__x);
   d5832:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   d5836:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d583a:	4668      	mov	r0, sp
   d583c:	f7ff ff9b 	bl	d5776 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
	}
	else {
		DEBUG_HIGH(("failed to open log file %s", name));
		return false;
	}
}
   d5840:	4628      	mov	r0, r5
   d5842:	b003      	add	sp, #12
   d5844:	bd30      	pop	{r4, r5, pc}
	...

000d5848 <_ZN18SdCardPrintHandler8scanCardEv>:
	}

	return 1;
}

void SdCardPrintHandler::scanCard() {
   d5848:	b530      	push	{r4, r5, lr}
	DEBUG_HIGH(("scanCard"));
	needsScanCard = false;
   d584a:	2300      	movs	r3, #0
   d584c:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8

	if (!lastBeginResult) {
   d5850:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
	}

	return 1;
}

void SdCardPrintHandler::scanCard() {
   d5854:	b09d      	sub	sp, #116	; 0x74
   d5856:	4604      	mov	r4, r0
	DEBUG_HIGH(("scanCard"));
	needsScanCard = false;

	if (!lastBeginResult) {
   d5858:	b9e3      	cbnz	r3, d5894 <_ZN18SdCardPrintHandler8scanCardEv+0x4c>
   *
   * See the timestamp() function.
   */
  static void dateTimeCallback(
    void (*dateTime)(uint16_t* date, uint16_t* time)) {
    m_dateTime = dateTime;
   d585a:	4b49      	ldr	r3, [pc, #292]	; (d5980 <_ZN18SdCardPrintHandler8scanCardEv+0x138>)
   d585c:	4a49      	ldr	r2, [pc, #292]	; (d5984 <_ZN18SdCardPrintHandler8scanCardEv+0x13c>)
		// Set the date time callback
		SdFile::dateTimeCallback(dateTimeCallback);

		pinMode(csPin, OUTPUT);
   d585e:	7b00      	ldrb	r0, [r0, #12]
   d5860:	601a      	str	r2, [r3, #0]
   d5862:	2101      	movs	r1, #1
   d5864:	f005 ff8a 	bl	db77c <pinMode>
   d5868:	4b47      	ldr	r3, [pc, #284]	; (d5988 <_ZN18SdCardPrintHandler8scanCardEv+0x140>)
   d586a:	930c      	str	r3, [sp, #48]	; 0x30
   d586c:	7d23      	ldrb	r3, [r4, #20]
   d586e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   d5872:	69a3      	ldr	r3, [r4, #24]
   d5874:	930e      	str	r3, [sp, #56]	; 0x38
   d5876:	7f23      	ldrb	r3, [r4, #28]
   d5878:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
		lastBeginResult = sd.begin(csPin, spiSettings);
   d587c:	7b21      	ldrb	r1, [r4, #12]
   d587e:	7f63      	ldrb	r3, [r4, #29]
   d5880:	68a0      	ldr	r0, [r4, #8]
   d5882:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   d5886:	aa0c      	add	r2, sp, #48	; 0x30
   d5888:	f7ff fc3a 	bl	d5100 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d588c:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
		if (!lastBeginResult) {
   d5890:	2800      	cmp	r0, #0
   d5892:	d06b      	beq.n	d596c <_ZN18SdCardPrintHandler8scanCardEv+0x124>
			lastCardCheck = millis();
			return;
		}
	}

	if (logsDirName != NULL && !sd.exists(logsDirName)) {
   d5894:	6a22      	ldr	r2, [r4, #32]
   d5896:	b332      	cbz	r2, d58e6 <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d5898:	68a1      	ldr	r1, [r4, #8]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d589a:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d589c:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d58a0:	a80c      	add	r0, sp, #48	; 0x30
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d58a2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   d58a6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d58aa:	f001 fbce 	bl	d704a <_ZN7FatFile4openEPS_PKci>
   d58ae:	4605      	mov	r5, r0
   d58b0:	b9c8      	cbnz	r0, d58e6 <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
		DEBUG_NORMAL(("creating logs dir %s", logsDirName));
   d58b2:	f005 fbcb 	bl	db04c <_Z16_fetch_usbserialv>
   d58b6:	6a23      	ldr	r3, [r4, #32]
   d58b8:	4a34      	ldr	r2, [pc, #208]	; (d598c <_ZN18SdCardPrintHandler8scanCardEv+0x144>)
   d58ba:	2101      	movs	r1, #1
   d58bc:	f004 fd9d 	bl	da3fa <_ZN5Print11printf_implEbPKcz>
		if (!sd.mkdir(logsDirName)) {
   d58c0:	68a1      	ldr	r1, [r4, #8]
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
   d58c2:	6a22      	ldr	r2, [r4, #32]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d58c4:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
   d58c8:	2301      	movs	r3, #1
   d58ca:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d58ce:	a80c      	add	r0, sp, #48	; 0x30
   d58d0:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
   d58d4:	f001 fc99 	bl	d720a <_ZN7FatFile5mkdirEPS_PKcb>
   d58d8:	b928      	cbnz	r0, d58e6 <_ZN18SdCardPrintHandler8scanCardEv+0x9e>
			DEBUG_NORMAL(("mkdir failed"));
   d58da:	f005 fbb7 	bl	db04c <_Z16_fetch_usbserialv>
   d58de:	4a2c      	ldr	r2, [pc, #176]	; (d5990 <_ZN18SdCardPrintHandler8scanCardEv+0x148>)
   d58e0:	2101      	movs	r1, #1
   d58e2:	f004 fd8a 	bl	da3fa <_ZN5Print11printf_implEbPKcz>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d58e6:	68a1      	ldr	r1, [r4, #8]
		}
	}

	if (logsDir.open(sd.vwd(), logsDirName, O_READ)) {
   d58e8:	6a22      	ldr	r2, [r4, #32]
   d58ea:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   d58ee:	2300      	movs	r3, #0
   d58f0:	f201 413c 	addw	r1, r1, #1084	; 0x43c
   d58f4:	4628      	mov	r0, r5
   d58f6:	f001 fba8 	bl	d704a <_ZN7FatFile4openEPS_PKci>
   d58fa:	b388      	cbz	r0, d5960 <_ZN18SdCardPrintHandler8scanCardEv+0x118>
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d58fc:	2100      	movs	r1, #0
   d58fe:	4628      	mov	r0, r5
   d5900:	f001 fa70 	bl	d6de4 <_ZN7FatFile7seekSetEm>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5904:	2300      	movs	r3, #0
   d5906:	f88d 300c 	strb.w	r3, [sp, #12]
   d590a:	f88d 300d 	strb.w	r3, [sp, #13]

		logsDir.rewind();

		FatFile tempFile;

		while (tempFile.openNext(&logsDir, O_READ)) {
   d590e:	2200      	movs	r2, #0
   d5910:	4629      	mov	r1, r5
   d5912:	a803      	add	r0, sp, #12
   d5914:	f001 fb1d 	bl	d6f52 <_ZN7FatFile8openNextEPS_i>
   d5918:	b1d0      	cbz	r0, d5950 <_ZN18SdCardPrintHandler8scanCardEv+0x108>
			char name[64];
			tempFile.getName(name, sizeof(name));
   d591a:	2240      	movs	r2, #64	; 0x40
   d591c:	a90c      	add	r1, sp, #48	; 0x30
   d591e:	a803      	add	r0, sp, #12
   d5920:	f000 fcf0 	bl	d6304 <_ZN7FatFile7getNameEPcj>
			DEBUG_HIGH(("logs dir file %s", name));

			int num = atoi(name);
   d5924:	a80c      	add	r0, sp, #48	; 0x30
   d5926:	f008 fe17 	bl	de558 <atoi>
   d592a:	9000      	str	r0, [sp, #0]
			if (num != 0) {
   d592c:	b160      	cbz	r0, d5948 <_ZN18SdCardPrintHandler8scanCardEv+0x100>
   d592e:	466a      	mov	r2, sp
   d5930:	f504 718c 	add.w	r1, r4, #280	; 0x118
   d5934:	a801      	add	r0, sp, #4
   d5936:	f7ff ff1e 	bl	d5776 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>
				fileNums.insert(num);
				if (num > lastFileNum) {
   d593a:	9b00      	ldr	r3, [sp, #0]
   d593c:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   d5940:	429a      	cmp	r2, r3
					lastFileNum = num;
   d5942:	bfb8      	it	lt
   d5944:	f8c4 30cc 	strlt.w	r3, [r4, #204]	; 0xcc
				}
			}
			tempFile.close();
   d5948:	a803      	add	r0, sp, #12
   d594a:	f001 fb77 	bl	d703c <_ZN7FatFile5closeEv>

		logsDir.rewind();

		FatFile tempFile;

		while (tempFile.openNext(&logsDir, O_READ)) {
   d594e:	e7de      	b.n	d590e <_ZN18SdCardPrintHandler8scanCardEv+0xc6>
					lastFileNum = num;
				}
			}
			tempFile.close();
		}
		checkMaxFiles();
   d5950:	4620      	mov	r0, r4
   d5952:	f7ff feb7 	bl	d56c4 <_ZN18SdCardPrintHandler13checkMaxFilesEv>

		if (!openLogFile()) {
   d5956:	4620      	mov	r0, r4
   d5958:	f7ff ff5a 	bl	d5810 <_ZN18SdCardPrintHandler11openLogFileEv>
   d595c:	b968      	cbnz	r0, d597a <_ZN18SdCardPrintHandler8scanCardEv+0x132>
   d595e:	e005      	b.n	d596c <_ZN18SdCardPrintHandler8scanCardEv+0x124>
			needsScanCard = true;
			lastCardCheck = millis();
		}
	}
	else {
		DEBUG_NORMAL(("failed to open logs dir"));
   d5960:	f005 fb74 	bl	db04c <_Z16_fetch_usbserialv>
   d5964:	4a0b      	ldr	r2, [pc, #44]	; (d5994 <_ZN18SdCardPrintHandler8scanCardEv+0x14c>)
   d5966:	2101      	movs	r1, #1
   d5968:	f004 fd47 	bl	da3fa <_ZN5Print11printf_implEbPKcz>
		needsScanCard = true;
   d596c:	2301      	movs	r3, #1
   d596e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   d5972:	f003 fd73 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
		lastCardCheck = millis();
   d5976:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
	}
}
   d597a:	b01d      	add	sp, #116	; 0x74
   d597c:	bd30      	pop	{r4, r5, pc}
   d597e:	bf00      	nop
   d5980:	2003e1e4 	.word	0x2003e1e4
   d5984:	000d55c5 	.word	0x000d55c5
   d5988:	000e006c 	.word	0x000e006c
   d598c:	000e03c5 	.word	0x000e03c5
   d5990:	000e03a0 	.word	0x000e03a0
   d5994:	000e03ad 	.word	0x000e03ad

000d5998 <_ZN18SdCardPrintHandler8writeBufEv>:
		it = fileNums.erase(it);
	}
}


void SdCardPrintHandler::writeBuf() {
   d5998:	b538      	push	{r3, r4, r5, lr}
   d599a:	4604      	mov	r4, r0

	if (writeToStream) {
   d599c:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d599e:	b128      	cbz	r0, d59ac <_ZN18SdCardPrintHandler8writeBufEv+0x14>
		writeToStream->write(buf, bufOffset);
   d59a0:	6803      	ldr	r3, [r0, #0]
   d59a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d59a4:	68db      	ldr	r3, [r3, #12]
   d59a6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d59aa:	4798      	blx	r3
	}

	if (needsScanCard) {
   d59ac:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   d59b0:	b15b      	cbz	r3, d59ca <_ZN18SdCardPrintHandler8writeBufEv+0x32>
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
   d59b2:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d59b6:	2b00      	cmp	r3, #0
   d59b8:	d053      	beq.n	d5a62 <_ZN18SdCardPrintHandler8writeBufEv+0xca>
   d59ba:	f003 fd4f 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
   d59be:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   d59c2:	1ac0      	subs	r0, r0, r3
   d59c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d59c6:	4298      	cmp	r0, r3
   d59c8:	d24b      	bcs.n	d5a62 <_ZN18SdCardPrintHandler8writeBufEv+0xca>
			scanCard();
		}
	}

	if (lastBeginResult) {
   d59ca:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
   d59ce:	2b00      	cmp	r3, #0
   d59d0:	d044      	beq.n	d5a5c <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
		if (curLogFile.isOpen()) {
   d59d2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   d59d6:	2b00      	cmp	r3, #0
   d59d8:	d040      	beq.n	d5a5c <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
			if (curLogFile.write(buf, bufOffset) > 0) {
   d59da:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
   d59de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d59e0:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d59e4:	4628      	mov	r0, r5
   d59e6:	f001 fc61 	bl	d72ac <_ZN7FatFile5writeEPKvj>
   d59ea:	2800      	cmp	r0, #0
   d59ec:	dd21      	ble.n	d5a32 <_ZN18SdCardPrintHandler8writeBufEv+0x9a>
				if (syncEveryEntry) {
   d59ee:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d59f2:	b113      	cbz	r3, d59fa <_ZN18SdCardPrintHandler8writeBufEv+0x62>
					curLogFile.sync();
   d59f4:	4628      	mov	r0, r5
   d59f6:	f001 faeb 	bl	d6fd0 <_ZN7FatFile4syncEv>
				}

				if (curLogFile.fileSize() > desiredFileSize) {
   d59fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d59fc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d5a00:	429a      	cmp	r2, r3
   d5a02:	d22b      	bcs.n	d5a5c <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
					// File is too large now. Make a new one.
					curLogFile.close();
   d5a04:	4628      	mov	r0, r5
   d5a06:	f001 fb19 	bl	d703c <_ZN7FatFile5closeEv>
					lastFileNum++;
   d5a0a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d5a0e:	3301      	adds	r3, #1
   d5a10:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
					DEBUG_NORMAL(("creating new log file %04d", lastFileNum));
   d5a14:	f005 fb1a 	bl	db04c <_Z16_fetch_usbserialv>
   d5a18:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d5a1c:	4a13      	ldr	r2, [pc, #76]	; (d5a6c <_ZN18SdCardPrintHandler8writeBufEv+0xd4>)
   d5a1e:	2101      	movs	r1, #1
   d5a20:	f004 fceb 	bl	da3fa <_ZN5Print11printf_implEbPKcz>
					openLogFile();
   d5a24:	4620      	mov	r0, r4
   d5a26:	f7ff fef3 	bl	d5810 <_ZN18SdCardPrintHandler11openLogFileEv>

					// Are there too many old files?
					checkMaxFiles();
   d5a2a:	4620      	mov	r0, r4
   d5a2c:	f7ff fe4a 	bl	d56c4 <_ZN18SdCardPrintHandler13checkMaxFilesEv>
   d5a30:	e014      	b.n	d5a5c <_ZN18SdCardPrintHandler8writeBufEv+0xc4>
				}
			}
			else {
				// Write failed
				DEBUG_NORMAL(("write to sd card failed"));
   d5a32:	f005 fb0b 	bl	db04c <_Z16_fetch_usbserialv>
   d5a36:	4a0e      	ldr	r2, [pc, #56]	; (d5a70 <_ZN18SdCardPrintHandler8writeBufEv+0xd8>)
   d5a38:	2101      	movs	r1, #1
   d5a3a:	f004 fcde 	bl	da3fa <_ZN5Print11printf_implEbPKcz>
				curLogFile.close();
   d5a3e:	4628      	mov	r0, r5
   d5a40:	f001 fafc 	bl	d703c <_ZN7FatFile5closeEv>
				logsDir.close();
   d5a44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d5a48:	f001 faf8 	bl	d703c <_ZN7FatFile5closeEv>
				needsScanCard = true;
   d5a4c:	2301      	movs	r3, #1
   d5a4e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
				lastBeginResult = false;
   d5a52:	2300      	movs	r3, #0
   d5a54:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
				lastCardCheck = 0;
   d5a58:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
			}
		}
	}

	// Start over at beginning of buffer
	bufOffset = 0;
   d5a5c:	2300      	movs	r3, #0
   d5a5e:	63a3      	str	r3, [r4, #56]	; 0x38
}
   d5a60:	bd38      	pop	{r3, r4, r5, pc}
		writeToStream->write(buf, bufOffset);
	}

	if (needsScanCard) {
		if (lastCardCheck == 0 || millis() - lastCardCheck >= cardCheckPeriod) {
			scanCard();
   d5a62:	4620      	mov	r0, r4
   d5a64:	f7ff fef0 	bl	d5848 <_ZN18SdCardPrintHandler8scanCardEv>
   d5a68:	e7af      	b.n	d59ca <_ZN18SdCardPrintHandler8writeBufEv+0x32>
   d5a6a:	bf00      	nop
   d5a6c:	000e03da 	.word	0x000e03da
   d5a70:	000e03f5 	.word	0x000e03f5

000d5a74 <_ZN18SdCardPrintHandler5writeEh>:
SdCardPrintHandler::~SdCardPrintHandler() {

}


size_t SdCardPrintHandler::write(uint8_t c) {
   d5a74:	b508      	push	{r3, lr}

	buf[bufOffset++] = c;
   d5a76:	6b83      	ldr	r3, [r0, #56]	; 0x38
   d5a78:	1c5a      	adds	r2, r3, #1
   d5a7a:	4403      	add	r3, r0
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d5a7c:	2a7f      	cmp	r2, #127	; 0x7f
}


size_t SdCardPrintHandler::write(uint8_t c) {

	buf[bufOffset++] = c;
   d5a7e:	6382      	str	r2, [r0, #56]	; 0x38
   d5a80:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
	if (bufOffset >= BUF_SIZE || c == '\n') {
   d5a84:	d801      	bhi.n	d5a8a <_ZN18SdCardPrintHandler5writeEh+0x16>
   d5a86:	290a      	cmp	r1, #10
   d5a88:	d101      	bne.n	d5a8e <_ZN18SdCardPrintHandler5writeEh+0x1a>
		// Buffer is full or have the LF in CRLF, write it out
		writeBuf();
   d5a8a:	f7ff ff85 	bl	d5998 <_ZN18SdCardPrintHandler8writeBufEv>
	}

	return 1;
}
   d5a8e:	2001      	movs	r0, #1
   d5a90:	bd08      	pop	{r3, pc}

000d5a92 <_GLOBAL__sub_I__ZN22SdCardLogHandlerBufferC2EPhjR5SdFathN8particle13__SPISettingsE8LogLevelN5spark6VectorINS6_17LogCategoryFilterENS6_16DefaultAllocatorEEE>:
   d5a92:	f003 bc43 	b.w	d931c <HAL_Pin_Map>

000d5a96 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5a96:	6803      	ldr	r3, [r0, #0]
   d5a98:	b2c9      	uxtb	r1, r1
   d5a9a:	689b      	ldr	r3, [r3, #8]
   d5a9c:	4718      	bx	r3

000d5a9e <_ZN8MCP7941xC1Ev>:
  //  Wire.setSpeed(400000);
  // Initialize the I2C bus if not already enabled
  // if (!Wire.isEnabled()) {
  //     Wire.begin();
  // }
}
   d5a9e:	4770      	bx	lr

000d5aa0 <_ZN8MCP7941x13getMacAddressEPh>:
}


// Function to read the mac address from the eeprom:
void MCP7941x::getMacAddress(byte *mac_address)
{
   d5aa0:	b538      	push	{r3, r4, r5, lr}
   d5aa2:	460c      	mov	r4, r1
  Wire.beginTransmission(MCP7941x_EEPROM_I2C_ADDR);
   d5aa4:	f005 fec6 	bl	db834 <_Z19__fetch_global_Wirev>
   d5aa8:	2157      	movs	r1, #87	; 0x57
   d5aaa:	f005 fc70 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
  WireSend(MAC_LOCATION);
   d5aae:	f005 fec1 	bl	db834 <_Z19__fetch_global_Wirev>
   d5ab2:	21f2      	movs	r1, #242	; 0xf2
   d5ab4:	f7ff ffef 	bl	d5a96 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d5ab8:	f005 febc 	bl	db834 <_Z19__fetch_global_Wirev>
   d5abc:	f005 fc6e 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(MCP7941x_EEPROM_I2C_ADDR, 6);
   d5ac0:	f005 feb8 	bl	db834 <_Z19__fetch_global_Wirev>
   d5ac4:	2206      	movs	r2, #6
   d5ac6:	2157      	movs	r1, #87	; 0x57
   d5ac8:	f005 fc5a 	bl	db380 <_ZN7TwoWire11requestFromEhj>
   d5acc:	1e65      	subs	r5, r4, #1
   d5ace:	3405      	adds	r4, #5

  for( int i=0; i<6; i++ )
  {
    mac_address[i] = WireReceive();
   d5ad0:	f005 feb0 	bl	db834 <_Z19__fetch_global_Wirev>
   d5ad4:	6803      	ldr	r3, [r0, #0]
   d5ad6:	695b      	ldr	r3, [r3, #20]
   d5ad8:	4798      	blx	r3
   d5ada:	f805 0f01 	strb.w	r0, [r5, #1]!
  WireSend(MAC_LOCATION);
  Wire.endTransmission();

  Wire.requestFrom(MCP7941x_EEPROM_I2C_ADDR, 6);

  for( int i=0; i<6; i++ )
   d5ade:	42a5      	cmp	r5, r4
   d5ae0:	d1f6      	bne.n	d5ad0 <_ZN8MCP7941x13getMacAddressEPh+0x30>
  {
    mac_address[i] = WireReceive();
  }
}
   d5ae2:	bd38      	pop	{r3, r4, r5, pc}

000d5ae4 <_ZN8MCP7941x11setDateTimeEhhhhhhh>:
  byte hr,          // 1-23
  byte dyofWk,     // 1-7
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
   d5ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ae8:	469a      	mov	sl, r3
   d5aea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   d5aee:	9301      	str	r3, [sp, #4]
   d5af0:	4693      	mov	fp, r2
   d5af2:	460d      	mov	r5, r1
   d5af4:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
   d5af8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
   d5afc:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
  WITH_LOCK(Wire) {
   d5b00:	f005 fe98 	bl	db834 <_Z19__fetch_global_Wirev>
   d5b04:	4680      	mov	r8, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5b06:	f005 fc55 	bl	db3b4 <_ZN7TwoWire4lockEv>
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5b0a:	f005 fe93 	bl	db834 <_Z19__fetch_global_Wirev>
   d5b0e:	216f      	movs	r1, #111	; 0x6f


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d5b10:	240a      	movs	r4, #10
  byte dyofMnth,    // 1-28/29/30/31
  byte mnth,         // 1-12
  byte yr)          // 0-99
{
  WITH_LOCK(Wire) {
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5b12:	f005 fc3c 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5b16:	f005 fe8d 	bl	db834 <_Z19__fetch_global_Wirev>
   d5b1a:	2100      	movs	r1, #0
   d5b1c:	f7ff ffbb 	bl	d5a96 <_ZN7TwoWire5writeEi>

    WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d5b20:	f005 fe88 	bl	db834 <_Z19__fetch_global_Wirev>


// Convert normal decimal numbers to binary coded decimal:
byte MCP7941x::decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
   d5b24:	fbb5 f2f4 	udiv	r2, r5, r4
   d5b28:	fb04 5512 	mls	r5, r4, r2, r5
   d5b2c:	eb05 1502 	add.w	r5, r5, r2, lsl #4
   d5b30:	b2ed      	uxtb	r5, r5
{
  WITH_LOCK(Wire) {
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
    WireSend(RTC_LOCATION);

    WireSend(decToBcd(sec) & 0x7f);              // set seconds and disable clock (01111111)
   d5b32:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d5b36:	f7ff ffae 	bl	d5a96 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(min) & 0x7f);              // set minutes (01111111)
   d5b3a:	f005 fe7b 	bl	db834 <_Z19__fetch_global_Wirev>
   d5b3e:	fbbb f1f4 	udiv	r1, fp, r4
   d5b42:	fb04 bb11 	mls	fp, r4, r1, fp
   d5b46:	eb0b 1101 	add.w	r1, fp, r1, lsl #4
   d5b4a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   d5b4e:	f7ff ffa2 	bl	d5a96 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(hr) & 0x3f);                // set hours and to 24hr clock (00111111)
   d5b52:	f005 fe6f 	bl	db834 <_Z19__fetch_global_Wirev>
   d5b56:	fbba f1f4 	udiv	r1, sl, r4
   d5b5a:	fb04 aa11 	mls	sl, r4, r1, sl
   d5b5e:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
   d5b62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d5b66:	f7ff ff96 	bl	d5a96 <_ZN7TwoWire5writeEi>
    WireSend(0x08 | (decToBcd(dyofWk) & 0x07));  // set the day and enable battery backup (00000111)|(00001000)
   d5b6a:	f005 fe63 	bl	db834 <_Z19__fetch_global_Wirev>
   d5b6e:	9b01      	ldr	r3, [sp, #4]
   d5b70:	fbb3 f1f4 	udiv	r1, r3, r4
   d5b74:	fb04 3111 	mls	r1, r4, r1, r3
   d5b78:	f001 0107 	and.w	r1, r1, #7
   d5b7c:	f041 0108 	orr.w	r1, r1, #8
   d5b80:	f7ff ff89 	bl	d5a96 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(dyofMnth) & 0x3f);          // set the date in mnth (00111111)
   d5b84:	f005 fe56 	bl	db834 <_Z19__fetch_global_Wirev>
   d5b88:	fbb7 f1f4 	udiv	r1, r7, r4
   d5b8c:	fb04 7711 	mls	r7, r4, r1, r7
   d5b90:	eb07 1101 	add.w	r1, r7, r1, lsl #4
   d5b94:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d5b98:	f7ff ff7d 	bl	d5a96 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(mnth) & 0x1f);               // set the mnth (00011111)
   d5b9c:	f005 fe4a 	bl	db834 <_Z19__fetch_global_Wirev>
   d5ba0:	fbb6 f1f4 	udiv	r1, r6, r4
   d5ba4:	fb04 6611 	mls	r6, r4, r1, r6
   d5ba8:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   d5bac:	f001 011f 	and.w	r1, r1, #31
   d5bb0:	f7ff ff71 	bl	d5a96 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(yr));                       // set the yr (11111111)
   d5bb4:	f005 fe3e 	bl	db834 <_Z19__fetch_global_Wirev>
   d5bb8:	fbb9 f1f4 	udiv	r1, r9, r4
   d5bbc:	6803      	ldr	r3, [r0, #0]
   d5bbe:	fb04 9411 	mls	r4, r4, r1, r9
   d5bc2:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   d5bc6:	689b      	ldr	r3, [r3, #8]
   d5bc8:	b2c9      	uxtb	r1, r1
   d5bca:	4798      	blx	r3

    Wire.endTransmission();
   d5bcc:	f005 fe32 	bl	db834 <_Z19__fetch_global_Wirev>
   d5bd0:	f005 fbe4 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

    // Start Clock:
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5bd4:	f005 fe2e 	bl	db834 <_Z19__fetch_global_Wirev>
   d5bd8:	216f      	movs	r1, #111	; 0x6f
   d5bda:	f005 fbd8 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5bde:	f005 fe29 	bl	db834 <_Z19__fetch_global_Wirev>
   d5be2:	2100      	movs	r1, #0
   d5be4:	f7ff ff57 	bl	d5a96 <_ZN7TwoWire5writeEi>
    WireSend(decToBcd(sec) | 0x80);     // set seconds and enable clock (10000000)
   d5be8:	f005 fe24 	bl	db834 <_Z19__fetch_global_Wirev>
   d5bec:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5bf0:	f7ff ff51 	bl	d5a96 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5bf4:	f005 fe1e 	bl	db834 <_Z19__fetch_global_Wirev>
   d5bf8:	f005 fbd0 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5bfc:	4640      	mov	r0, r8
  }

// Serial.print("Set time: ");
// Serial.println(String(yr)+":"+String(mnth)+":"+String(dyofMnth)+":"+String(dyofWk)+":"+String(hr)+":"+String(min)+":"+String(sec));

}
   d5bfe:	b003      	add	sp, #12
   d5c00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c04:	f005 bbdf 	b.w	db3c6 <_ZN7TwoWire6unlockEv>

000d5c08 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>:
  byte *hr,
  byte *dyofWk,
  byte *dyofMnth,
  byte *mnth,
  byte *yr)
{
   d5c08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c0c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   d5c10:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d5c12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d5c14:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d5c16:	4699      	mov	r9, r3
   d5c18:	4692      	mov	sl, r2
   d5c1a:	468b      	mov	fp, r1
  WITH_LOCK(Wire) {
   d5c1c:	f005 fe0a 	bl	db834 <_Z19__fetch_global_Wirev>
   d5c20:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5c22:	f005 fbc7 	bl	db3b4 <_ZN7TwoWire4lockEv>
    Wire.beginTransmission(MCP7941x_RTC_I2C_ADDR);
   d5c26:	f005 fe05 	bl	db834 <_Z19__fetch_global_Wirev>
   d5c2a:	216f      	movs	r1, #111	; 0x6f
   d5c2c:	f005 fbaf 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
    WireSend(RTC_LOCATION);
   d5c30:	f005 fe00 	bl	db834 <_Z19__fetch_global_Wirev>
   d5c34:	2100      	movs	r1, #0
   d5c36:	f7ff ff2e 	bl	d5a96 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d5c3a:	f005 fdfb 	bl	db834 <_Z19__fetch_global_Wirev>
   d5c3e:	f005 fbad 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(MCP7941x_RTC_I2C_ADDR, 7);
   d5c42:	f005 fdf7 	bl	db834 <_Z19__fetch_global_Wirev>
   d5c46:	216f      	movs	r1, #111	; 0x6f
   d5c48:	2207      	movs	r2, #7
   d5c4a:	f005 fb99 	bl	db380 <_ZN7TwoWire11requestFromEhj>

    // A few of these need masks because certain bits are control bits
    *sec     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d5c4e:	f005 fdf1 	bl	db834 <_Z19__fetch_global_Wirev>
   d5c52:	6803      	ldr	r3, [r0, #0]
   d5c54:	695b      	ldr	r3, [r3, #20]
   d5c56:	4798      	blx	r3
   d5c58:	b2c0      	uxtb	r0, r0
   d5c5a:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d5c5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5c62:	f000 000f 	and.w	r0, r0, #15
   d5c66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5c6a:	f88b 0000 	strb.w	r0, [fp]
    *min     = bcdToDec(WireReceive() & 0x7f);  // 01111111
   d5c6e:	f005 fde1 	bl	db834 <_Z19__fetch_global_Wirev>
   d5c72:	6803      	ldr	r3, [r0, #0]
   d5c74:	695b      	ldr	r3, [r3, #20]
   d5c76:	4798      	blx	r3
   d5c78:	b2c0      	uxtb	r0, r0
   d5c7a:	f3c0 1302 	ubfx	r3, r0, #4, #3
   d5c7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5c82:	f000 000f 	and.w	r0, r0, #15
   d5c86:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5c8a:	f88a 0000 	strb.w	r0, [sl]
    *hr       = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d5c8e:	f005 fdd1 	bl	db834 <_Z19__fetch_global_Wirev>
   d5c92:	6803      	ldr	r3, [r0, #0]
   d5c94:	695b      	ldr	r3, [r3, #20]
   d5c96:	4798      	blx	r3
   d5c98:	b2c0      	uxtb	r0, r0
   d5c9a:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d5c9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5ca2:	f000 000f 	and.w	r0, r0, #15
   d5ca6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5caa:	f889 0000 	strb.w	r0, [r9]
    *dyofWk  = bcdToDec(WireReceive() & 0x07);  // 01111111
   d5cae:	f005 fdc1 	bl	db834 <_Z19__fetch_global_Wirev>
   d5cb2:	6803      	ldr	r3, [r0, #0]
   d5cb4:	695b      	ldr	r3, [r3, #20]
   d5cb6:	4798      	blx	r3
   d5cb8:	f000 0007 	and.w	r0, r0, #7
   d5cbc:	f888 0000 	strb.w	r0, [r8]
    *dyofMnth = bcdToDec(WireReceive() & 0x3f);  // 00111111
   d5cc0:	f005 fdb8 	bl	db834 <_Z19__fetch_global_Wirev>
   d5cc4:	6803      	ldr	r3, [r0, #0]
   d5cc6:	695b      	ldr	r3, [r3, #20]
   d5cc8:	4798      	blx	r3
   d5cca:	b2c0      	uxtb	r0, r0
   d5ccc:	f3c0 1301 	ubfx	r3, r0, #4, #2
   d5cd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5cd4:	f000 000f 	and.w	r0, r0, #15
   d5cd8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5cdc:	7038      	strb	r0, [r7, #0]
    *mnth      = bcdToDec(WireReceive() & 0x1f);  // 00011111
   d5cde:	f005 fda9 	bl	db834 <_Z19__fetch_global_Wirev>
   d5ce2:	6803      	ldr	r3, [r0, #0]
   d5ce4:	695b      	ldr	r3, [r3, #20]
   d5ce6:	4798      	blx	r3
   d5ce8:	b2c0      	uxtb	r0, r0
   d5cea:	f3c0 1200 	ubfx	r2, r0, #4, #1
   d5cee:	0093      	lsls	r3, r2, #2
   d5cf0:	4413      	add	r3, r2
   d5cf2:	f000 000f 	and.w	r0, r0, #15
   d5cf6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5cfa:	7030      	strb	r0, [r6, #0]
    *yr       = bcdToDec(WireReceive());         // 11111111
   d5cfc:	f005 fd9a 	bl	db834 <_Z19__fetch_global_Wirev>
   d5d00:	6803      	ldr	r3, [r0, #0]
   d5d02:	695b      	ldr	r3, [r3, #20]
   d5d04:	4798      	blx	r3
   d5d06:	b2c0      	uxtb	r0, r0
   d5d08:	0903      	lsrs	r3, r0, #4
   d5d0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5d0e:	f000 000f 	and.w	r0, r0, #15
   d5d12:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d5d16:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5d18:	4620      	mov	r0, r4
  }
}
   d5d1a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d1e:	f005 bb52 	b.w	db3c6 <_ZN7TwoWire6unlockEv>

000d5d22 <_ZN8MCP7941x11setUnixTimeEm>:
}

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d5d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d26:	4607      	mov	r7, r0
   d5d28:	b08d      	sub	sp, #52	; 0x34
  byte sec = (byte)Time.second(unixTime);
   d5d2a:	4608      	mov	r0, r1
}

// Set the date/time, set to 24hr and enable the clock:
// (assumes you're passing in valid numbers)
void MCP7941x::setUnixTime(uint32_t unixTime)
{
   d5d2c:	460c      	mov	r4, r1
  byte sec = (byte)Time.second(unixTime);
   d5d2e:	f004 fbf7 	bl	da520 <_ZN9TimeClass6secondEl>
   d5d32:	4680      	mov	r8, r0
  byte min= (byte)Time.minute(unixTime);
   d5d34:	4620      	mov	r0, r4
   d5d36:	f004 fbeb 	bl	da510 <_ZN9TimeClass6minuteEl>
   d5d3a:	4681      	mov	r9, r0
  byte hr= (byte)Time.hour(unixTime);
   d5d3c:	4620      	mov	r0, r4
   d5d3e:	f004 fbdf 	bl	da500 <_ZN9TimeClass4hourEl>
   d5d42:	4682      	mov	sl, r0
  byte dyofWk= (byte)Time.weekday(unixTime);
   d5d44:	4620      	mov	r0, r4
   d5d46:	f004 fbfb 	bl	da540 <_ZN9TimeClass7weekdayEl>
   d5d4a:	4605      	mov	r5, r0
  byte dyofMnth= (byte)Time.day(unixTime);
   d5d4c:	4620      	mov	r0, r4
   d5d4e:	f004 fbef 	bl	da530 <_ZN9TimeClass3dayEl>
   d5d52:	4606      	mov	r6, r0
  byte mnth= (byte)Time.month(unixTime);
   d5d54:	4620      	mov	r0, r4
   d5d56:	f004 fbfd 	bl	da554 <_ZN9TimeClass5monthEl>
   d5d5a:	4683      	mov	fp, r0
  String yrString = String(Time.year(unixTime));
   d5d5c:	4620      	mov	r0, r4
   d5d5e:	f004 fc03 	bl	da568 <_ZN9TimeClass4yearEl>
   d5d62:	220a      	movs	r2, #10
   d5d64:	4601      	mov	r1, r0
   d5d66:	a804      	add	r0, sp, #16
   d5d68:	f004 f919 	bl	d9f9e <_ZN6StringC1Eih>
  byte yr = (byte) yrString.substring(2).toInt();
   d5d6c:	a904      	add	r1, sp, #16
   d5d6e:	2202      	movs	r2, #2
   d5d70:	a808      	add	r0, sp, #32
   d5d72:	f004 f9c3 	bl	da0fc <_ZNK6String9substringEj>
   d5d76:	a808      	add	r0, sp, #32
   d5d78:	f004 f9c7 	bl	da10a <_ZNK6String5toIntEv>
   d5d7c:	4604      	mov	r4, r0
   d5d7e:	a808      	add	r0, sp, #32
   d5d80:	f004 f840 	bl	d9e04 <_ZN6StringD1Ev>
    min,        // 0-59
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
   d5d84:	b2e4      	uxtb	r4, r4
   d5d86:	fa5f f38b 	uxtb.w	r3, fp
   d5d8a:	b2f6      	uxtb	r6, r6
   d5d8c:	b2ed      	uxtb	r5, r5
   d5d8e:	9302      	str	r3, [sp, #8]
   d5d90:	fa5f f289 	uxtb.w	r2, r9
   d5d94:	fa5f f38a 	uxtb.w	r3, sl
   d5d98:	fa5f f188 	uxtb.w	r1, r8
   d5d9c:	4638      	mov	r0, r7
   d5d9e:	9403      	str	r4, [sp, #12]
   d5da0:	9601      	str	r6, [sp, #4]
   d5da2:	9500      	str	r5, [sp, #0]
   d5da4:	f7ff fe9e 	bl	d5ae4 <_ZN8MCP7941x11setDateTimeEhhhhhhh>
  byte min= (byte)Time.minute(unixTime);
  byte hr= (byte)Time.hour(unixTime);
  byte dyofWk= (byte)Time.weekday(unixTime);
  byte dyofMnth= (byte)Time.day(unixTime);
  byte mnth= (byte)Time.month(unixTime);
  String yrString = String(Time.year(unixTime));
   d5da8:	a804      	add	r0, sp, #16
   d5daa:	f004 f82b 	bl	d9e04 <_ZN6StringD1Ev>
    hr,          // 1-23
    dyofWk,     // 1-7
    dyofMnth,    // 1-28/29/30/31
    mnth,         // 1-12
    yr);          // 0-99
}
   d5dae:	b00d      	add	sp, #52	; 0x34
   d5db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5db4 <_ZN8MCP7941x6rtcNowEv>:

//gets unix as defined by the external RTC
// Note that since the MCP7941 only stores years 0-99
// we assume time from 2000 onwards.
// Only works to year 2037!
uint32_t MCP7941x::rtcNow(){
   d5db4:	b500      	push	{lr}
   d5db6:	b091      	sub	sp, #68	; 0x44
		  &min,
		  &hr,
		  &dyofWk,
		  &dyofMnth,
		  &mnth,
		  &yr);
   d5db8:	f10d 031b 	add.w	r3, sp, #27
   d5dbc:	9303      	str	r3, [sp, #12]
   d5dbe:	f10d 031a 	add.w	r3, sp, #26
   d5dc2:	9302      	str	r3, [sp, #8]
   d5dc4:	f10d 0319 	add.w	r3, sp, #25
   d5dc8:	9301      	str	r3, [sp, #4]
   d5dca:	ab06      	add	r3, sp, #24
   d5dcc:	9300      	str	r3, [sp, #0]
   d5dce:	f10d 0216 	add.w	r2, sp, #22
   d5dd2:	f10d 0317 	add.w	r3, sp, #23
   d5dd6:	f10d 0115 	add.w	r1, sp, #21
   d5dda:	f7ff ff15 	bl	d5c08 <_ZN8MCP7941x11getDateTimeEPhS0_S0_S0_S0_S0_S0_>

  // Deal with mktime 2038 bug
  if (yr>37)
   d5dde:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d5de2:	2b25      	cmp	r3, #37	; 0x25
  {
    yr = 0;
   d5de4:	bf84      	itt	hi
   d5de6:	2300      	movhi	r3, #0
   d5de8:	f88d 301b 	strbhi.w	r3, [sp, #27]
  }

  //declare variable
  struct tm tm;
  tm.tm_sec = (sec);
   d5dec:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d5df0:	9307      	str	r3, [sp, #28]
  tm.tm_min = (min);
   d5df2:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d5df6:	9308      	str	r3, [sp, #32]
  tm.tm_hour = (hr);
   d5df8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d5dfc:	9309      	str	r3, [sp, #36]	; 0x24
  tm.tm_mday = (dyofMnth);
   d5dfe:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d5e02:	930a      	str	r3, [sp, #40]	; 0x28
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
   d5e04:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d5e08:	3b01      	subs	r3, #1
   d5e0a:	930b      	str	r3, [sp, #44]	; 0x2c
  tm.tm_year = yr + 100; // The number of years since 1900 (by definition of tm)
   d5e0c:	f89d 301b 	ldrb.w	r3, [sp, #27]

  time_t moment = mktime(&tm);//create epoc time_t object
   d5e10:	a807      	add	r0, sp, #28
  tm.tm_sec = (sec);
  tm.tm_min = (min);
  tm.tm_hour = (hr);
  tm.tm_mday = (dyofMnth);
  tm.tm_mon = (mnth)- 1;    // Assuming your month represents Jan with 1
  tm.tm_year = yr + 100; // The number of years since 1900 (by definition of tm)
   d5e12:	3364      	adds	r3, #100	; 0x64
   d5e14:	930c      	str	r3, [sp, #48]	; 0x30

  time_t moment = mktime(&tm);//create epoc time_t object
   d5e16:	f008 fdab 	bl	de970 <mktime>

  return uint32_t(moment);
}
   d5e1a:	b011      	add	sp, #68	; 0x44
   d5e1c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5e20 <_GLOBAL__sub_I__ZN8MCP7941xC2Ev>:
   d5e20:	f003 ba7c 	b.w	d931c <HAL_Pin_Map>

000d5e24 <_ZN16Adafruit_TSL2591D1Ev>:
/**************************************************************************/
/*! 
    @brief  Class that stores state and functions for interacting with TSL2591 Light Sensor
*/
/**************************************************************************/
class Adafruit_TSL2591 : public Adafruit_Sensor
   d5e24:	4770      	bx	lr
	...

000d5e28 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t>:
    @brief  Gets the overall sensor_t data including the type, range and resulution
    @param  sensor Pointer to Adafruit_Sensor sensor_t object that will be filled with sensor type data
*/
/**************************************************************************/
void Adafruit_TSL2591::getSensor(sensor_t *sensor)
{
   d5e28:	b538      	push	{r3, r4, r5, lr}
   d5e2a:	460c      	mov	r4, r1
   d5e2c:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d5e2e:	2228      	movs	r2, #40	; 0x28
   d5e30:	2100      	movs	r1, #0
   d5e32:	4620      	mov	r0, r4
   d5e34:	f008 fcb8 	bl	de7a8 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
   d5e38:	220b      	movs	r2, #11
   d5e3a:	490a      	ldr	r1, [pc, #40]	; (d5e64 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x3c>)
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	f009 fc9e 	bl	df77e <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5e42:	2300      	movs	r3, #0
  sensor->version     = 1;
   d5e44:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d5e46:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
   d5e48:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
   d5e4a:	68aa      	ldr	r2, [r5, #8]
  sensor->type        = SENSOR_TYPE_LIGHT;
  sensor->min_delay   = 0;
   d5e4c:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 88000.0;
   d5e4e:	4b06      	ldr	r3, [pc, #24]	; (d5e68 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x40>)
   d5e50:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0.0;
   d5e52:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
   d5e54:	6122      	str	r2, [r4, #16]
  sensor->type        = SENSOR_TYPE_LIGHT;
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
   d5e56:	61e3      	str	r3, [r4, #28]
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_LIGHT;
   d5e58:	2205      	movs	r2, #5
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
  sensor->resolution  = 0.001;
   d5e5a:	4b04      	ldr	r3, [pc, #16]	; (d5e6c <_ZN16Adafruit_TSL25919getSensorEP8sensor_t+0x44>)
  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "TSL2591", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_LIGHT;
   d5e5c:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 88000.0;
  sensor->min_value   = 0.0;
  sensor->resolution  = 0.001;
   d5e5e:	6223      	str	r3, [r4, #32]
   d5e60:	bd38      	pop	{r3, r4, r5, pc}
   d5e62:	bf00      	nop
   d5e64:	000e0340 	.word	0x000e0340
   d5e68:	47abe000 	.word	0x47abe000
   d5e6c:	3a83126f 	.word	0x3a83126f

000d5e70 <_ZN16Adafruit_TSL2591D0Ev>:
   d5e70:	b510      	push	{r4, lr}
   d5e72:	2110      	movs	r1, #16
   d5e74:	4604      	mov	r4, r0
   d5e76:	f005 fd11 	bl	db89c <_ZdlPvj>
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	bd10      	pop	{r4, pc}
	...

000d5e80 <_ZN16Adafruit_TSL2591C1El>:
/*!
    @brief  Instantiates a new Adafruit TSL2591 class
    @param  sensorID An optional ID # so you can track this sensor, it will tag sensorEvents you create.
*/
/**************************************************************************/
Adafruit_TSL2591::Adafruit_TSL2591(int32_t sensorID)
   d5e80:	4a04      	ldr	r2, [pc, #16]	; (d5e94 <_ZN16Adafruit_TSL2591C1El+0x14>)
   d5e82:	6002      	str	r2, [r0, #0]
{
  _initialized = false;
   d5e84:	2200      	movs	r2, #0
   d5e86:	7302      	strb	r2, [r0, #12]
  _integration = TSL2591_INTEGRATIONTIME_100MS;
   d5e88:	7142      	strb	r2, [r0, #5]
  _gain        = TSL2591_GAIN_MED;
   d5e8a:	2210      	movs	r2, #16
   d5e8c:	7182      	strb	r2, [r0, #6]
  _sensorID    = sensorID;
   d5e8e:	6081      	str	r1, [r0, #8]

  // we cant do wire initialization till later, because we havent loaded Wire yet
}
   d5e90:	4770      	bx	lr
   d5e92:	bf00      	nop
   d5e94:	000e0444 	.word	0x000e0444

000d5e98 <_ZN16Adafruit_TSL25917getGainEv>:
*/
/**************************************************************************/
tsl2591Gain_t Adafruit_TSL2591::getGain()
{
  return _gain;
}
   d5e98:	7980      	ldrb	r0, [r0, #6]
   d5e9a:	4770      	bx	lr

000d5e9c <_ZN16Adafruit_TSL25919getTimingEv>:
*/
/**************************************************************************/
tsl2591IntegrationTime_t Adafruit_TSL2591::getTiming()
{
  return _integration;
}
   d5e9c:	7940      	ldrb	r0, [r0, #5]
   d5e9e:	4770      	bx	lr

000d5ea0 <_ZN16Adafruit_TSL259112calculateLuxEtt>:
  float    atime, again;
  float    cpl, lux1, lux2, lux;
  uint32_t chan0, chan1;

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
   d5ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5ea4:	4299      	cmp	r1, r3
    @param  ch1 Data from channel 1 (IR)
    @returns Lux, based on AMS coefficients
*/
/**************************************************************************/
float Adafruit_TSL2591::calculateLux(uint16_t ch0, uint16_t ch1)
{
   d5ea6:	b510      	push	{r4, lr}
  float    atime, again;
  float    cpl, lux1, lux2, lux;
  uint32_t chan0, chan1;

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
   d5ea8:	d039      	beq.n	d5f1e <_ZN16Adafruit_TSL259112calculateLuxEtt+0x7e>
   d5eaa:	429a      	cmp	r2, r3
   d5eac:	d037      	beq.n	d5f1e <_ZN16Adafruit_TSL259112calculateLuxEtt+0x7e>
   d5eae:	7943      	ldrb	r3, [r0, #5]
   d5eb0:	3b01      	subs	r3, #1
   d5eb2:	b2db      	uxtb	r3, r3
   d5eb4:	2b04      	cmp	r3, #4
   d5eb6:	bf97      	itett	ls
   d5eb8:	4c1a      	ldrls	r4, [pc, #104]	; (d5f24 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x84>)
  }

  // Note: This algorithm is based on preliminary coefficients
  // provided by AMS and may need to be updated in the future

  switch (_integration)
   d5eba:	eddf 5a1b 	vldrhi	s11, [pc, #108]	; d5f28 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x88>
   d5ebe:	eb04 0383 	addls.w	r3, r4, r3, lsl #2
   d5ec2:	edd3 5a00 	vldrls	s11, [r3]
    default: // 100ms
      atime = 100.0F;
      break;
  }

  switch (_gain)
   d5ec6:	7983      	ldrb	r3, [r0, #6]
   d5ec8:	2b20      	cmp	r3, #32
   d5eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d5ece:	d008      	beq.n	d5ee2 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x42>
   d5ed0:	2b30      	cmp	r3, #48	; 0x30
   d5ed2:	d009      	beq.n	d5ee8 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x48>
   d5ed4:	2b10      	cmp	r3, #16
  {
    case TSL2591_GAIN_LOW :
      again = 1.0F;
   d5ed6:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
   d5eda:	bf18      	it	ne
   d5edc:	eef0 6a47 	vmovne.f32	s13, s14
   d5ee0:	e004      	b.n	d5eec <_ZN16Adafruit_TSL259112calculateLuxEtt+0x4c>
      break;
    case TSL2591_GAIN_MED :
      again = 25.0F;
      break;
    case TSL2591_GAIN_HIGH :
      again = 428.0F;
   d5ee2:	eddf 6a12 	vldr	s13, [pc, #72]	; d5f2c <_ZN16Adafruit_TSL259112calculateLuxEtt+0x8c>
   d5ee6:	e001      	b.n	d5eec <_ZN16Adafruit_TSL259112calculateLuxEtt+0x4c>
      break;
    case TSL2591_GAIN_MAX :
      again = 9876.0F;
   d5ee8:	eddf 6a11 	vldr	s13, [pc, #68]	; d5f30 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x90>
  //lux2 = ( ( TSL2591_LUX_COEFC * (float)ch0 ) - ( TSL2591_LUX_COEFD * (float)ch1 ) ) / cpl;
  //lux = lux1 > lux2 ? lux1 : lux2;

  // Alternate lux calculation 1
  // See: https://github.com/adafruit/Adafruit_TSL2591_Library/issues/14
  lux = ( ((float)ch0 - (float)ch1 )) * (1.0F - ((float)ch1/(float)ch0) ) / cpl;
   d5eec:	ee07 1a90 	vmov	s15, r1
   d5ef0:	ee06 2a10 	vmov	s12, r2
   d5ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d5ef8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
   d5efc:	ee65 6aa6 	vmul.f32	s13, s11, s13
   d5f00:	ee86 5a27 	vdiv.f32	s10, s12, s15
   d5f04:	ee77 7ac6 	vsub.f32	s15, s15, s12
   d5f08:	ee37 7a45 	vsub.f32	s14, s14, s10
   d5f0c:	ed9f 6a09 	vldr	s12, [pc, #36]	; d5f34 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x94>
   d5f10:	ee67 7a27 	vmul.f32	s15, s14, s15
   d5f14:	ee86 7a86 	vdiv.f32	s14, s13, s12
   d5f18:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d5f1c:	bd10      	pop	{r4, pc}

  // Check for overflow conditions first
  if ((ch0 == 0xFFFF) | (ch1 == 0xFFFF))
  {
    // Signal an overflow
    return 0;
   d5f1e:	ed9f 0a06 	vldr	s0, [pc, #24]	; d5f38 <_ZN16Adafruit_TSL259112calculateLuxEtt+0x98>
  // Alternate lux calculation 2
  //lux = ( (float)ch0 - ( 1.7F * (float)ch1 ) ) / cpl;

  // Signal I2C had no errors
  return lux;
}
   d5f22:	bd10      	pop	{r4, pc}
   d5f24:	000e0428 	.word	0x000e0428
   d5f28:	42c80000 	.word	0x42c80000
   d5f2c:	43d60000 	.word	0x43d60000
   d5f30:	461a5000 	.word	0x461a5000
   d5f34:	43cc0000 	.word	0x43cc0000
   d5f38:	00000000 	.word	0x00000000

000d5f3c <_ZN16Adafruit_TSL25915read8Eh>:
}
/*******************************************************/


uint8_t Adafruit_TSL2591::read8(uint8_t reg)
{
   d5f3c:	b510      	push	{r4, lr}
   d5f3e:	460c      	mov	r4, r1
  uint8_t x;

  Wire.beginTransmission(TSL2591_ADDR);
   d5f40:	f005 fc78 	bl	db834 <_Z19__fetch_global_Wirev>
   d5f44:	2129      	movs	r1, #41	; 0x29
   d5f46:	f005 fa22 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d5f4a:	f005 fc73 	bl	db834 <_Z19__fetch_global_Wirev>
   d5f4e:	6803      	ldr	r3, [r0, #0]
   d5f50:	4621      	mov	r1, r4
   d5f52:	689b      	ldr	r3, [r3, #8]
   d5f54:	4798      	blx	r3
  Wire.endTransmission();
   d5f56:	f005 fc6d 	bl	db834 <_Z19__fetch_global_Wirev>
   d5f5a:	f005 fa1f 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(TSL2591_ADDR, 1);
   d5f5e:	f005 fc69 	bl	db834 <_Z19__fetch_global_Wirev>
   d5f62:	2201      	movs	r2, #1
   d5f64:	2129      	movs	r1, #41	; 0x29
   d5f66:	f005 fa0b 	bl	db380 <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
   d5f6a:	f005 fc63 	bl	db834 <_Z19__fetch_global_Wirev>
   d5f6e:	6803      	ldr	r3, [r0, #0]
   d5f70:	695b      	ldr	r3, [r3, #20]
   d5f72:	4798      	blx	r3

  return x;
}
   d5f74:	b2c0      	uxtb	r0, r0
   d5f76:	bd10      	pop	{r4, pc}

000d5f78 <_ZN16Adafruit_TSL25916read16Eh>:

uint16_t Adafruit_TSL2591::read16(uint8_t reg)
{
   d5f78:	b510      	push	{r4, lr}
   d5f7a:	460c      	mov	r4, r1
  uint16_t x;
  uint16_t t;

  Wire.beginTransmission(TSL2591_ADDR);
   d5f7c:	f005 fc5a 	bl	db834 <_Z19__fetch_global_Wirev>
   d5f80:	2129      	movs	r1, #41	; 0x29
   d5f82:	f005 fa04 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d5f86:	f005 fc55 	bl	db834 <_Z19__fetch_global_Wirev>
   d5f8a:	6803      	ldr	r3, [r0, #0]
   d5f8c:	4621      	mov	r1, r4
   d5f8e:	689b      	ldr	r3, [r3, #8]
   d5f90:	4798      	blx	r3
  Wire.endTransmission();
   d5f92:	f005 fc4f 	bl	db834 <_Z19__fetch_global_Wirev>
   d5f96:	f005 fa01 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(TSL2591_ADDR, 2);
   d5f9a:	f005 fc4b 	bl	db834 <_Z19__fetch_global_Wirev>
   d5f9e:	2202      	movs	r2, #2
   d5fa0:	2129      	movs	r1, #41	; 0x29
   d5fa2:	f005 f9ed 	bl	db380 <_ZN7TwoWire11requestFromEhj>
  t = Wire.read();
   d5fa6:	f005 fc45 	bl	db834 <_Z19__fetch_global_Wirev>
   d5faa:	6803      	ldr	r3, [r0, #0]
   d5fac:	695b      	ldr	r3, [r3, #20]
   d5fae:	4798      	blx	r3
   d5fb0:	4604      	mov	r4, r0
  x = Wire.read();
   d5fb2:	f005 fc3f 	bl	db834 <_Z19__fetch_global_Wirev>
   d5fb6:	6803      	ldr	r3, [r0, #0]
   d5fb8:	695b      	ldr	r3, [r3, #20]
   d5fba:	4798      	blx	r3

  x <<= 8;
  x |= t;
  return x;
   d5fbc:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
   d5fc0:	b280      	uxth	r0, r0
   d5fc2:	bd10      	pop	{r4, pc}

000d5fc4 <_ZN16Adafruit_TSL25916write8Ehh>:

void Adafruit_TSL2591::write8 (uint8_t reg, uint8_t value)
{
   d5fc4:	b538      	push	{r3, r4, r5, lr}
   d5fc6:	4614      	mov	r4, r2
   d5fc8:	460d      	mov	r5, r1
  Wire.beginTransmission(TSL2591_ADDR);
   d5fca:	f005 fc33 	bl	db834 <_Z19__fetch_global_Wirev>
   d5fce:	2129      	movs	r1, #41	; 0x29
   d5fd0:	f005 f9dd 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d5fd4:	f005 fc2e 	bl	db834 <_Z19__fetch_global_Wirev>
   d5fd8:	6803      	ldr	r3, [r0, #0]
   d5fda:	4629      	mov	r1, r5
   d5fdc:	689b      	ldr	r3, [r3, #8]
   d5fde:	4798      	blx	r3
  Wire.write(value);
   d5fe0:	f005 fc28 	bl	db834 <_Z19__fetch_global_Wirev>
   d5fe4:	6803      	ldr	r3, [r0, #0]
   d5fe6:	4621      	mov	r1, r4
   d5fe8:	689b      	ldr	r3, [r3, #8]
   d5fea:	4798      	blx	r3
  Wire.endTransmission();
   d5fec:	f005 fc22 	bl	db834 <_Z19__fetch_global_Wirev>
}
   d5ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_TSL2591::write8 (uint8_t reg, uint8_t value)
{
  Wire.beginTransmission(TSL2591_ADDR);
  Wire.write(reg);
  Wire.write(value);
  Wire.endTransmission();
   d5ff4:	f005 b9d2 	b.w	db39c <_ZN7TwoWire15endTransmissionEv>

000d5ff8 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>:
    @brief  Setter for sensor light gain
    @param  gain {@link tsl2591Gain_t} gain value
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
   d5ff8:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d5ffa:	7b03      	ldrb	r3, [r0, #12]
    @brief  Setter for sensor light gain
    @param  gain {@link tsl2591Gain_t} gain value
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
   d5ffc:	4604      	mov	r4, r0
   d5ffe:	460d      	mov	r5, r1
  if (!_initialized) {
   d6000:	b173      	cbz	r3, d6020 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0x28>
    if (!begin()) {
      return;
    }
  }

  enable();
   d6002:	4620      	mov	r0, r4
   d6004:	f000 f82e 	bl	d6064 <_ZN16Adafruit_TSL25916enableEv>
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d6008:	7962      	ldrb	r2, [r4, #5]
      return;
    }
  }

  enable();
  _gain = gain;
   d600a:	71a5      	strb	r5, [r4, #6]
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d600c:	4620      	mov	r0, r4
   d600e:	432a      	orrs	r2, r5
   d6010:	21a1      	movs	r1, #161	; 0xa1
   d6012:	f7ff ffd7 	bl	d5fc4 <_ZN16Adafruit_TSL25916write8Ehh>
  disable();
   d6016:	4620      	mov	r0, r4
}
   d6018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  enable();
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
   d601c:	f000 b832 	b.w	d6084 <_ZN16Adafruit_TSL25917disableEv>
*/
/**************************************************************************/
void Adafruit_TSL2591::setGain(tsl2591Gain_t gain)
{
  if (!_initialized) {
    if (!begin()) {
   d6020:	f000 f803 	bl	d602a <_ZN16Adafruit_TSL25915beginEv>
   d6024:	2800      	cmp	r0, #0
   d6026:	d1ec      	bne.n	d6002 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t+0xa>

  enable();
  _gain = gain;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
}
   d6028:	bd38      	pop	{r3, r4, r5, pc}

000d602a <_ZN16Adafruit_TSL25915beginEv>:
    @brief  Setups the I2C interface and hardware, identifies if chip is found
    @returns True if a TSL2591 is found, false on any failure
*/
/**************************************************************************/
boolean Adafruit_TSL2591::begin(void)
{
   d602a:	b538      	push	{r3, r4, r5, lr}
   d602c:	4604      	mov	r4, r0
  Wire.begin();
   d602e:	f005 fc01 	bl	db834 <_Z19__fetch_global_Wirev>
   d6032:	f005 f971 	bl	db318 <_ZN7TwoWire5beginEv>
    Serial.print("$"); Serial.print(i, HEX);
    Serial.print(" = 0x"); Serial.println(read8(i), HEX);
  }
  */

  uint8_t id = read8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_DEVICE_ID);
   d6036:	21b2      	movs	r1, #178	; 0xb2
   d6038:	4620      	mov	r0, r4
   d603a:	f7ff ff7f 	bl	d5f3c <_ZN16Adafruit_TSL25915read8Eh>
  if (id != 0x50 ) {
   d603e:	2850      	cmp	r0, #80	; 0x50
   d6040:	d10e      	bne.n	d6060 <_ZN16Adafruit_TSL25915beginEv+0x36>
    return false;
  }
  // Serial.println("Found Adafruit_TSL2591");

  _initialized = true;
   d6042:	2501      	movs	r5, #1

  // Set default integration time and gain
  setTiming(_integration);
   d6044:	7961      	ldrb	r1, [r4, #5]
  if (id != 0x50 ) {
    return false;
  }
  // Serial.println("Found Adafruit_TSL2591");

  _initialized = true;
   d6046:	7325      	strb	r5, [r4, #12]

  // Set default integration time and gain
  setTiming(_integration);
   d6048:	4620      	mov	r0, r4
   d604a:	f000 f82b 	bl	d60a4 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>
  setGain(_gain);
   d604e:	79a1      	ldrb	r1, [r4, #6]
   d6050:	4620      	mov	r0, r4
   d6052:	f7ff ffd1 	bl	d5ff8 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>

  // Note: by default, the device is in power down mode on bootup
  disable();
   d6056:	4620      	mov	r0, r4
   d6058:	f000 f814 	bl	d6084 <_ZN16Adafruit_TSL25917disableEv>
   d605c:	4628      	mov	r0, r5
   d605e:	bd38      	pop	{r3, r4, r5, pc}
  }
  */

  uint8_t id = read8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_DEVICE_ID);
  if (id != 0x50 ) {
    return false;
   d6060:	2000      	movs	r0, #0

  // Note: by default, the device is in power down mode on bootup
  disable();

  return true;
}
   d6062:	bd38      	pop	{r3, r4, r5, pc}

000d6064 <_ZN16Adafruit_TSL25916enableEv>:
/*!
    @brief  Enables the chip, so it's ready to take readings
*/
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
   d6064:	b510      	push	{r4, lr}
  if (!_initialized)
   d6066:	7b03      	ldrb	r3, [r0, #12]
/*!
    @brief  Enables the chip, so it's ready to take readings
*/
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
   d6068:	4604      	mov	r4, r0
  if (!_initialized)
   d606a:	b133      	cbz	r3, d607a <_ZN16Adafruit_TSL25916enableEv+0x16>
    }
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
   d606c:	4620      	mov	r0, r4
   d606e:	2293      	movs	r2, #147	; 0x93
   d6070:	21a0      	movs	r1, #160	; 0xa0
}
   d6072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
   d6076:	f7ff bfa5 	b.w	d5fc4 <_ZN16Adafruit_TSL25916write8Ehh>
/**************************************************************************/
void Adafruit_TSL2591::enable(void)
{
  if (!_initialized)
  {
    if (!begin())
   d607a:	f7ff ffd6 	bl	d602a <_ZN16Adafruit_TSL25915beginEv>
   d607e:	2800      	cmp	r0, #0
   d6080:	d1f4      	bne.n	d606c <_ZN16Adafruit_TSL25916enableEv+0x8>
  }

  // Enable the device by setting the control bit to 0x01
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE,
	 TSL2591_ENABLE_POWERON | TSL2591_ENABLE_AEN | TSL2591_ENABLE_AIEN | TSL2591_ENABLE_NPIEN);
}
   d6082:	bd10      	pop	{r4, pc}

000d6084 <_ZN16Adafruit_TSL25917disableEv>:
/*!
    @brief Disables the chip, so it's in power down mode
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
   d6084:	b510      	push	{r4, lr}
  if (!_initialized) {
   d6086:	7b03      	ldrb	r3, [r0, #12]
/*!
    @brief Disables the chip, so it's in power down mode
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
   d6088:	4604      	mov	r4, r0
  if (!_initialized) {
   d608a:	b133      	cbz	r3, d609a <_ZN16Adafruit_TSL25917disableEv+0x16>
      return;
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
   d608c:	4620      	mov	r0, r4
   d608e:	2200      	movs	r2, #0
   d6090:	21a0      	movs	r1, #160	; 0xa0
}
   d6092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return;
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
   d6096:	f7ff bf95 	b.w	d5fc4 <_ZN16Adafruit_TSL25916write8Ehh>
*/
/**************************************************************************/
void Adafruit_TSL2591::disable(void)
{
  if (!_initialized) {
    if (!begin()) {
   d609a:	f7ff ffc6 	bl	d602a <_ZN16Adafruit_TSL25915beginEv>
   d609e:	2800      	cmp	r0, #0
   d60a0:	d1f4      	bne.n	d608c <_ZN16Adafruit_TSL25917disableEv+0x8>
    }
  }

  // Disable the device by setting the control bit to 0x00
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_ENABLE, TSL2591_ENABLE_POWEROFF);
}
   d60a2:	bd10      	pop	{r4, pc}

000d60a4 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>:
    @brief  Setter for sensor integration time setting
    @param integration {@link tsl2591IntegrationTime_t} integration time setting
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
   d60a4:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d60a6:	7b03      	ldrb	r3, [r0, #12]
    @brief  Setter for sensor integration time setting
    @param integration {@link tsl2591IntegrationTime_t} integration time setting
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
   d60a8:	4604      	mov	r4, r0
   d60aa:	460d      	mov	r5, r1
  if (!_initialized) {
   d60ac:	b173      	cbz	r3, d60cc <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0x28>
    if (!begin()) {
      return;
    }
  }

  enable();
   d60ae:	4620      	mov	r0, r4
   d60b0:	f7ff ffd8 	bl	d6064 <_ZN16Adafruit_TSL25916enableEv>
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d60b4:	79a2      	ldrb	r2, [r4, #6]
      return;
    }
  }

  enable();
  _integration = integration;
   d60b6:	7165      	strb	r5, [r4, #5]
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
   d60b8:	4620      	mov	r0, r4
   d60ba:	432a      	orrs	r2, r5
   d60bc:	21a1      	movs	r1, #161	; 0xa1
   d60be:	f7ff ff81 	bl	d5fc4 <_ZN16Adafruit_TSL25916write8Ehh>
  disable();
   d60c2:	4620      	mov	r0, r4
}
   d60c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  enable();
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
   d60c8:	f7ff bfdc 	b.w	d6084 <_ZN16Adafruit_TSL25917disableEv>
*/
/**************************************************************************/
void Adafruit_TSL2591::setTiming(tsl2591IntegrationTime_t integration)
{
  if (!_initialized) {
    if (!begin()) {
   d60cc:	f7ff ffad 	bl	d602a <_ZN16Adafruit_TSL25915beginEv>
   d60d0:	2800      	cmp	r0, #0
   d60d2:	d1ec      	bne.n	d60ae <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t+0xa>

  enable();
  _integration = integration;
  write8(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CONTROL, _integration | _gain);
  disable();
}
   d60d4:	bd38      	pop	{r3, r4, r5, pc}

000d60d6 <_ZN16Adafruit_TSL259117getFullLuminosityEv>:
    @brief  Reads the raw data from both light channels
    @returns 32-bit raw count where high word is IR, low word is IR+Visible
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
   d60d6:	b538      	push	{r3, r4, r5, lr}
  if (!_initialized) {
   d60d8:	7b03      	ldrb	r3, [r0, #12]
    @brief  Reads the raw data from both light channels
    @returns 32-bit raw count where high word is IR, low word is IR+Visible
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
   d60da:	4605      	mov	r5, r0
  if (!_initialized) {
   d60dc:	b123      	cbz	r3, d60e8 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x12>
      return 0;
    }
  }

  // Enable the device
  enable();
   d60de:	4628      	mov	r0, r5
   d60e0:	f7ff ffc0 	bl	d6064 <_ZN16Adafruit_TSL25916enableEv>
   d60e4:	2400      	movs	r4, #0
   d60e6:	e004      	b.n	d60f2 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x1c>
*/
/**************************************************************************/
uint32_t Adafruit_TSL2591::getFullLuminosity (void)
{
  if (!_initialized) {
    if (!begin()) {
   d60e8:	f7ff ff9f 	bl	d602a <_ZN16Adafruit_TSL25915beginEv>
   d60ec:	2800      	cmp	r0, #0
   d60ee:	d1f6      	bne.n	d60de <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x8>
   d60f0:	bd38      	pop	{r3, r4, r5, pc}

  // Enable the device
  enable();

  // Wait x ms for ADC to complete
  for (uint8_t d=0; d<=_integration; d++)
   d60f2:	796a      	ldrb	r2, [r5, #5]
   d60f4:	b2e3      	uxtb	r3, r4
   d60f6:	429a      	cmp	r2, r3
   d60f8:	f104 0401 	add.w	r4, r4, #1
   d60fc:	d303      	bcc.n	d6106 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x30>
  {
    delay(120);
   d60fe:	2078      	movs	r0, #120	; 0x78
   d6100:	f004 fb5c 	bl	da7bc <delay>

  // Enable the device
  enable();

  // Wait x ms for ADC to complete
  for (uint8_t d=0; d<=_integration; d++)
   d6104:	e7f5      	b.n	d60f2 <_ZN16Adafruit_TSL259117getFullLuminosityEv+0x1c>

  // CHAN0 must be read before CHAN1
  // See: https://forums.adafruit.com/viewtopic.php?f=19&t=124176
  uint32_t x;
  uint16_t y;
  y |= read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN0_LOW);
   d6106:	21b4      	movs	r1, #180	; 0xb4
   d6108:	4628      	mov	r0, r5
   d610a:	f7ff ff35 	bl	d5f78 <_ZN16Adafruit_TSL25916read16Eh>
  x = read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN1_LOW);
   d610e:	21b6      	movs	r1, #182	; 0xb6

  // CHAN0 must be read before CHAN1
  // See: https://forums.adafruit.com/viewtopic.php?f=19&t=124176
  uint32_t x;
  uint16_t y;
  y |= read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN0_LOW);
   d6110:	b284      	uxth	r4, r0
  x = read16(TSL2591_COMMAND_BIT | TSL2591_REGISTER_CHAN1_LOW);
   d6112:	4628      	mov	r0, r5
   d6114:	f7ff ff30 	bl	d5f78 <_ZN16Adafruit_TSL25916read16Eh>
  x <<= 16;
  x |= y;
   d6118:	ea44 4400 	orr.w	r4, r4, r0, lsl #16

  disable();
   d611c:	4628      	mov	r0, r5
   d611e:	f7ff ffb1 	bl	d6084 <_ZN16Adafruit_TSL25917disableEv>

  return x;
   d6122:	4620      	mov	r0, r4
}
   d6124:	bd38      	pop	{r3, r4, r5, pc}

000d6126 <_ZN16Adafruit_TSL25918getEventEP15sensors_event_t>:
    @param  event Pointer to Adafruit_Sensor sensors_event_t object that will be filled with sensor data
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_TSL2591::getEvent(sensors_event_t *event)
{
   d6126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6128:	4605      	mov	r5, r0
   d612a:	460c      	mov	r4, r1
  uint16_t ir, full;
  uint32_t lum = getFullLuminosity();
   d612c:	f7ff ffd3 	bl	d60d6 <_ZN16Adafruit_TSL259117getFullLuminosityEv>
  /* Early silicon seems to have issues when there is a sudden jump in */
  /* light levels. :( To work around this for now sample the sensor 2x */
  lum = getFullLuminosity();
   d6130:	4628      	mov	r0, r5
   d6132:	f7ff ffd0 	bl	d60d6 <_ZN16Adafruit_TSL259117getFullLuminosityEv>
  ir = lum >> 16;
  full = lum & 0xFFFF;

  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d6136:	2724      	movs	r7, #36	; 0x24
{
  uint16_t ir, full;
  uint32_t lum = getFullLuminosity();
  /* Early silicon seems to have issues when there is a sudden jump in */
  /* light levels. :( To work around this for now sample the sensor 2x */
  lum = getFullLuminosity();
   d6138:	4606      	mov	r6, r0
  ir = lum >> 16;
  full = lum & 0xFFFF;

  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d613a:	463a      	mov	r2, r7
   d613c:	2100      	movs	r1, #0
   d613e:	4620      	mov	r0, r4
   d6140:	f008 fb32 	bl	de7a8 <memset>

  event->version   = sizeof(sensors_event_t);
   d6144:	6027      	str	r7, [r4, #0]
  event->sensor_id = _sensorID;
   d6146:	68ab      	ldr	r3, [r5, #8]
   d6148:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_LIGHT;
   d614a:	2305      	movs	r3, #5
   d614c:	60a3      	str	r3, [r4, #8]
   d614e:	f003 f985 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();

  /* Calculate the actual lux value */
  /* 0 = sensor overflow (too much light) */
  event->light = calculateLux(full, ir);
   d6152:	0c32      	lsrs	r2, r6, #16
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
  event->type      = SENSOR_TYPE_LIGHT;
  event->timestamp = millis();
   d6154:	6120      	str	r0, [r4, #16]

  /* Calculate the actual lux value */
  /* 0 = sensor overflow (too much light) */
  event->light = calculateLux(full, ir);
   d6156:	b2b1      	uxth	r1, r6
   d6158:	4628      	mov	r0, r5
   d615a:	f7ff fea1 	bl	d5ea0 <_ZN16Adafruit_TSL259112calculateLuxEtt>
   d615e:	ed84 0a05 	vstr	s0, [r4, #20]

  return true;
}
   d6162:	2001      	movs	r0, #1
   d6164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6166 <_GLOBAL__sub_I__ZN16Adafruit_TSL2591C2El>:
   d6166:	f003 b8d9 	b.w	d931c <HAL_Pin_Map>

000d616a <_GLOBAL__sub_I__ZN7DS18B20C2EP7OneWire>:
   d616a:	f003 b8d7 	b.w	d931c <HAL_Pin_Map>

000d616e <_ZN15Adafruit_AM2315C1Ev>:
  #include <util/delay.h>
#endif


Adafruit_AM2315::Adafruit_AM2315() {
}
   d616e:	4770      	bx	lr

000d6170 <_ZN15Adafruit_AM23158readDataEv>:

   // try to read data, as a test
  return readData();
}

bool Adafruit_AM2315::readData(void) {
   d6170:	b530      	push	{r4, r5, lr}
   d6172:	b085      	sub	sp, #20
   d6174:	4605      	mov	r5, r0
  uint8_t reply[10];

  // Wake up the sensor
  Wire.beginTransmission(AM2315_I2CADDR);
   d6176:	f005 fb5d 	bl	db834 <_Z19__fetch_global_Wirev>
   d617a:	215c      	movs	r1, #92	; 0x5c
   d617c:	f005 f907 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
  delay(2);
   d6180:	2002      	movs	r0, #2
   d6182:	f004 fb1b 	bl	da7bc <delay>
  Wire.endTransmission();
   d6186:	f005 fb55 	bl	db834 <_Z19__fetch_global_Wirev>
   d618a:	f005 f907 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

  // OK lets ready!
  Wire.beginTransmission(AM2315_I2CADDR);
   d618e:	f005 fb51 	bl	db834 <_Z19__fetch_global_Wirev>
   d6192:	215c      	movs	r1, #92	; 0x5c
   d6194:	f005 f8fb 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(AM2315_READREG);
   d6198:	f005 fb4c 	bl	db834 <_Z19__fetch_global_Wirev>
   d619c:	2103      	movs	r1, #3
   d619e:	f7ff fc7a 	bl	d5a96 <_ZN7TwoWire5writeEi>
  Wire.write(0x00);  // start at address 0x0
   d61a2:	f005 fb47 	bl	db834 <_Z19__fetch_global_Wirev>
   d61a6:	2100      	movs	r1, #0
   d61a8:	f7ff fc75 	bl	d5a96 <_ZN7TwoWire5writeEi>
  Wire.write(4);  // request 4 bytes data
   d61ac:	f005 fb42 	bl	db834 <_Z19__fetch_global_Wirev>
   d61b0:	2104      	movs	r1, #4
   d61b2:	f7ff fc70 	bl	d5a96 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d61b6:	f005 fb3d 	bl	db834 <_Z19__fetch_global_Wirev>
   d61ba:	f005 f8ef 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

  delay(10); // add delay between request and actual read!
   d61be:	200a      	movs	r0, #10
   d61c0:	f004 fafc 	bl	da7bc <delay>

  Wire.requestFrom(AM2315_I2CADDR, 8);
   d61c4:	f005 fb36 	bl	db834 <_Z19__fetch_global_Wirev>
   d61c8:	2208      	movs	r2, #8
   d61ca:	215c      	movs	r1, #92	; 0x5c
   d61cc:	f005 f8d8 	bl	db380 <_ZN7TwoWire11requestFromEhj>
   d61d0:	2400      	movs	r4, #0
  for (uint8_t i=0; i<8; i++) {
    reply[i] = Wire.read();
   d61d2:	f005 fb2f 	bl	db834 <_Z19__fetch_global_Wirev>
   d61d6:	6803      	ldr	r3, [r0, #0]
   d61d8:	695b      	ldr	r3, [r3, #20]
   d61da:	4798      	blx	r3
   d61dc:	ab01      	add	r3, sp, #4
   d61de:	5518      	strb	r0, [r3, r4]
   d61e0:	3401      	adds	r4, #1
  Wire.endTransmission();

  delay(10); // add delay between request and actual read!

  Wire.requestFrom(AM2315_I2CADDR, 8);
  for (uint8_t i=0; i<8; i++) {
   d61e2:	2c08      	cmp	r4, #8
   d61e4:	d1f5      	bne.n	d61d2 <_ZN15Adafruit_AM23158readDataEv+0x62>
    reply[i] = Wire.read();
    //Serial.println(reply[i], HEX);
  }

  if (reply[0] != AM2315_READREG) return false;
   d61e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d61ea:	2b03      	cmp	r3, #3
   d61ec:	d134      	bne.n	d6258 <_ZN15Adafruit_AM23158readDataEv+0xe8>
  if (reply[1] != 4) return false; // bytes req'd
   d61ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d61f2:	2b04      	cmp	r3, #4
   d61f4:	d130      	bne.n	d6258 <_ZN15Adafruit_AM23158readDataEv+0xe8>

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d61f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d61fa:	ed9f 6a19 	vldr	s12, [pc, #100]	; d6260 <_ZN15Adafruit_AM23158readDataEv+0xf0>
   d61fe:	ee07 3a10 	vmov	s14, r3
   d6202:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6206:	ee07 3a90 	vmov	s15, r3
   d620a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d620e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6212:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   d6216:	eee7 7a06 	vfma.f32	s15, s14, s12
  //Serial.print("H"); Serial.println(humidity);

  temp = reply[4] & 0x7F;
   d621a:	f89d 3008 	ldrb.w	r3, [sp, #8]
  temp *= 256;
  temp += reply[5];
  temp /= 10;
   d621e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
  if (reply[1] != 4) return false; // bytes req'd

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d6222:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  temp += reply[5];
  temp /= 10;
  //Serial.print("T"); Serial.println(temp);

  // change sign
  if (reply[4] >> 7) temp = -temp;
   d6226:	09db      	lsrs	r3, r3, #7

  return true;
   d6228:	f04f 0001 	mov.w	r0, #1
  if (reply[1] != 4) return false; // bytes req'd

  humidity = reply[2];
  humidity *= 256;
  humidity += reply[3];
  humidity /= 10;
   d622c:	ed85 7a00 	vstr	s14, [r5]
  //Serial.print("H"); Serial.println(humidity);

  temp = reply[4] & 0x7F;
  temp *= 256;
  temp += reply[5];
  temp /= 10;
   d6230:	ee07 2a10 	vmov	s14, r2
   d6234:	f89d 2009 	ldrb.w	r2, [sp, #9]
   d6238:	ee07 2a90 	vmov	s15, r2
   d623c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d6240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6244:	eee7 7a06 	vfma.f32	s15, s14, s12
   d6248:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  //Serial.print("T"); Serial.println(temp);

  // change sign
  if (reply[4] >> 7) temp = -temp;
   d624c:	bf18      	it	ne
   d624e:	eeb1 7a47 	vnegne.f32	s14, s14
   d6252:	ed85 7a01 	vstr	s14, [r5, #4]
   d6256:	e000      	b.n	d625a <_ZN15Adafruit_AM23158readDataEv+0xea>
  for (uint8_t i=0; i<8; i++) {
    reply[i] = Wire.read();
    //Serial.println(reply[i], HEX);
  }

  if (reply[0] != AM2315_READREG) return false;
   d6258:	2000      	movs	r0, #0

  // change sign
  if (reply[4] >> 7) temp = -temp;

  return true;
}
   d625a:	b005      	add	sp, #20
   d625c:	bd30      	pop	{r4, r5, pc}
   d625e:	bf00      	nop
   d6260:	43800000 	.word	0x43800000

000d6264 <_ZN15Adafruit_AM23155beginEv>:

Adafruit_AM2315::Adafruit_AM2315() {
}


bool Adafruit_AM2315::begin(void) {
   d6264:	b510      	push	{r4, lr}
   d6266:	4604      	mov	r4, r0
  Wire.begin();
   d6268:	f005 fae4 	bl	db834 <_Z19__fetch_global_Wirev>
   d626c:	f005 f854 	bl	db318 <_ZN7TwoWire5beginEv>

   // try to read data, as a test
  return readData();
   d6270:	4620      	mov	r0, r4
}
   d6272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

bool Adafruit_AM2315::begin(void) {
  Wire.begin();

   // try to read data, as a test
  return readData();
   d6276:	f7ff bf7b 	b.w	d6170 <_ZN15Adafruit_AM23158readDataEv>

000d627a <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_>:
 * If you want to obtain both temperature and humidity when you sample the sensor, be aware that calling
 * readTemperature() and readHumidity() in rapid succession may swamp the sensor and result in invalid
 * readingings (the AM2315 manual advisess that continuous samples must be at least 2 seconds apart).
 * Calling this method avoids the double I2C request.
 */
bool Adafruit_AM2315::readTemperatureAndHumidity(float &t, float &h) {
   d627a:	b570      	push	{r4, r5, r6, lr}
   d627c:	4604      	mov	r4, r0
   d627e:	460e      	mov	r6, r1
   d6280:	4615      	mov	r5, r2
    if (!readData()) return false;
   d6282:	f7ff ff75 	bl	d6170 <_ZN15Adafruit_AM23158readDataEv>
   d6286:	b118      	cbz	r0, d6290 <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_+0x16>

    t = temp;
   d6288:	6863      	ldr	r3, [r4, #4]
   d628a:	6033      	str	r3, [r6, #0]
    h = humidity;
   d628c:	6823      	ldr	r3, [r4, #0]
   d628e:	602b      	str	r3, [r5, #0]

    return true;
}
   d6290:	bd70      	pop	{r4, r5, r6, pc}

000d6292 <_GLOBAL__sub_I__ZN15Adafruit_AM2315C2Ev>:
   d6292:	f003 b843 	b.w	d931c <HAL_Pin_Map>

000d6296 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d6296:	f003 b841 	b.w	d931c <HAL_Pin_Map>

000d629a <_GLOBAL__sub_I__ZN7istream3getEv>:
   d629a:	f003 b83f 	b.w	d931c <HAL_Pin_Map>

000d629e <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d629e:	b510      	push	{r4, lr}
   d62a0:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d62a2:	3024      	adds	r0, #36	; 0x24
   d62a4:	f001 f8e4 	bl	d7470 <_ZN8FatCache4syncEv>
   d62a8:	b128      	cbz	r0, d62b6 <_ZN9FatVolume9cacheSyncEv+0x18>
   d62aa:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d62ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d62b2:	f001 b8dd 	b.w	d7470 <_ZN8FatCache4syncEv>
  }
   d62b6:	bd10      	pop	{r4, pc}

000d62b8 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d62b8:	1e41      	subs	r1, r0, #1
   d62ba:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d62be:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d62c0:	0843      	lsrs	r3, r0, #1
   d62c2:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d62c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d62ca:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d62ce:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d62d0:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d62d2:	d1f5      	bne.n	d62c0 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d62d4:	4770      	bx	lr

000d62d6 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d62d6:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   d62d8:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   d62da:	4604      	mov	r4, r0
   d62dc:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   d62de:	b923      	cbnz	r3, d62ea <_ZN7FatFile11openClusterEPS_+0x14>
    return openRoot(file->m_vol);
   d62e0:	6889      	ldr	r1, [r1, #8]
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   d62e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
   d62e6:	f000 bc82 	b.w	d6bee <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
   d62ea:	2224      	movs	r2, #36	; 0x24
   d62ec:	2100      	movs	r1, #0
   d62ee:	f008 fa5b 	bl	de7a8 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   d62f2:	2310      	movs	r3, #16
  m_flags = F_READ;
   d62f4:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
   d62f6:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   d62f8:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   d62fa:	68ab      	ldr	r3, [r5, #8]
   d62fc:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   d62fe:	68eb      	ldr	r3, [r5, #12]
   d6300:	6223      	str	r3, [r4, #32]
  return true;
}
   d6302:	bd38      	pop	{r3, r4, r5, pc}

000d6304 <_ZN7FatFile7getNameEPcj>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d6304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6308:	b08b      	sub	sp, #44	; 0x2c
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d630a:	7803      	ldrb	r3, [r0, #0]
   d630c:	2500      	movs	r5, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
   d630e:	4680      	mov	r8, r0
   d6310:	460e      	mov	r6, r1
   d6312:	4617      	mov	r7, r2
   d6314:	f88d 5004 	strb.w	r5, [sp, #4]
   d6318:	f88d 5005 	strb.w	r5, [sp, #5]
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
   d631c:	b163      	cbz	r3, d6338 <_ZN7FatFile7getNameEPcj+0x34>
   d631e:	2a0c      	cmp	r2, #12
   d6320:	d90a      	bls.n	d6338 <_ZN7FatFile7getNameEPcj+0x34>
   d6322:	e00e      	b.n	d6342 <_ZN7FatFile7getNameEPcj+0x3e>
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
   d6324:	4641      	mov	r1, r8
   d6326:	a801      	add	r0, sp, #4
   d6328:	f7ff ffd5 	bl	d62d6 <_ZN7FatFile11openClusterEPS_>
   d632c:	b120      	cbz	r0, d6338 <_ZN7FatFile7getNameEPcj+0x34>
   d632e:	2401      	movs	r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d6330:	f898 3003 	ldrb.w	r3, [r8, #3]
   d6334:	42a3      	cmp	r3, r4
   d6336:	d20b      	bcs.n	d6350 <_ZN7FatFile7getNameEPcj+0x4c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
   d6338:	f04f 0900 	mov.w	r9, #0
   d633c:	f886 9000 	strb.w	r9, [r6]
  return false;
   d6340:	e055      	b.n	d63ee <_ZN7FatFile7getNameEPcj+0xea>
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6342:	78c3      	ldrb	r3, [r0, #3]
   d6344:	2b00      	cmp	r3, #0
   d6346:	d1ed      	bne.n	d6324 <_ZN7FatFile7getNameEPcj+0x20>
    return getSFN(name);
   d6348:	f000 fbb4 	bl	d6ab4 <_ZN7FatFile6getSFNEPc>
   d634c:	4681      	mov	r9, r0
   d634e:	e04e      	b.n	d63ee <_ZN7FatFile7getNameEPcj+0xea>
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d6350:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   d6354:	1b09      	subs	r1, r1, r4
   d6356:	0149      	lsls	r1, r1, #5
   d6358:	a801      	add	r0, sp, #4
   d635a:	f000 fd43 	bl	d6de4 <_ZN7FatFile7seekSetEm>
   d635e:	4681      	mov	r9, r0
   d6360:	2800      	cmp	r0, #0
   d6362:	d0e9      	beq.n	d6338 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d6364:	2100      	movs	r1, #0
   d6366:	a801      	add	r0, sp, #4
   d6368:	f000 fd1f 	bl	d6daa <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d636c:	2800      	cmp	r0, #0
   d636e:	d0e3      	beq.n	d6338 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   d6370:	7ac3      	ldrb	r3, [r0, #11]
   d6372:	2b0f      	cmp	r3, #15
   d6374:	d1e0      	bne.n	d6338 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ord != (ldir->ord & 0X1F)) {
   d6376:	7803      	ldrb	r3, [r0, #0]
   d6378:	f003 031f 	and.w	r3, r3, #31
   d637c:	429c      	cmp	r4, r3
   d637e:	d1db      	bne.n	d6338 <_ZN7FatFile7getNameEPcj+0x34>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6380:	1e63      	subs	r3, r4, #1
   d6382:	220d      	movs	r2, #13
   d6384:	435a      	muls	r2, r3
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d6386:	eb06 0e02 	add.w	lr, r6, r2
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d638a:	2300      	movs	r3, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d638c:	2b04      	cmp	r3, #4
   d638e:	b2d9      	uxtb	r1, r3
   d6390:	d804      	bhi.n	d639c <_ZN7FatFile7getNameEPcj+0x98>
    return ldir->name1[i];
   d6392:	eb00 0143 	add.w	r1, r0, r3, lsl #1
   d6396:	f8b1 1001 	ldrh.w	r1, [r1, #1]
   d639a:	e00b      	b.n	d63b4 <_ZN7FatFile7getNameEPcj+0xb0>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d639c:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d639e:	bf95      	itete	ls
   d63a0:	f103 31ff 	addls.w	r1, r3, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d63a4:	1c59      	addhi	r1, r3, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d63a6:	eb00 0141 	addls.w	r1, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d63aa:	eb00 0141 	addhi.w	r1, r0, r1, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d63ae:	bf94      	ite	ls
   d63b0:	88c9      	ldrhls	r1, [r1, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d63b2:	8889      	ldrhhi	r1, [r1, #4]
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
   d63b4:	b161      	cbz	r1, d63d0 <_ZN7FatFile7getNameEPcj+0xcc>
   d63b6:	4297      	cmp	r7, r2
   d63b8:	d910      	bls.n	d63dc <_ZN7FatFile7getNameEPcj+0xd8>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d63ba:	297e      	cmp	r1, #126	; 0x7e
   d63bc:	bf94      	ite	ls
   d63be:	b2c9      	uxtbls	r1, r1
   d63c0:	213f      	movhi	r1, #63	; 0x3f
   d63c2:	f80e 1003 	strb.w	r1, [lr, r3]
   d63c6:	3301      	adds	r3, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d63c8:	2b0d      	cmp	r3, #13
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
   d63ca:	f102 0201 	add.w	r2, r2, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
   d63ce:	d1dd      	bne.n	d638c <_ZN7FatFile7getNameEPcj+0x88>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   d63d0:	4297      	cmp	r7, r2
   d63d2:	d903      	bls.n	d63dc <_ZN7FatFile7getNameEPcj+0xd8>
   d63d4:	7803      	ldrb	r3, [r0, #0]
   d63d6:	0659      	lsls	r1, r3, #25
    name[k] = 0;
   d63d8:	bf48      	it	mi
   d63da:	54b5      	strbmi	r5, [r6, r2]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
   d63dc:	19f3      	adds	r3, r6, r7
   d63de:	f803 5c01 	strb.w	r5, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d63e2:	7803      	ldrb	r3, [r0, #0]
   d63e4:	065b      	lsls	r3, r3, #25
   d63e6:	d402      	bmi.n	d63ee <_ZN7FatFile7getNameEPcj+0xea>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   d63e8:	3401      	adds	r4, #1
   d63ea:	b2e4      	uxtb	r4, r4
   d63ec:	e7a0      	b.n	d6330 <_ZN7FatFile7getNameEPcj+0x2c>
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
   d63ee:	4648      	mov	r0, r9
   d63f0:	b00b      	add	sp, #44	; 0x2c
   d63f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d63f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d63f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d63fc:	7803      	ldrb	r3, [r0, #0]
   d63fe:	2b20      	cmp	r3, #32
   d6400:	f100 0401 	add.w	r4, r0, #1
   d6404:	d101      	bne.n	d640a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d6406:	4620      	mov	r0, r4
   d6408:	e7f8      	b.n	d63fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d640a:	4f70      	ldr	r7, [pc, #448]	; (d65cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d640c:	6088      	str	r0, [r1, #8]
   d640e:	4605      	mov	r5, r0
   d6410:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d6412:	462e      	mov	r6, r5
   d6414:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d6418:	b30b      	cbz	r3, d645e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d641a:	2b2f      	cmp	r3, #47	; 0x2f
   d641c:	d101      	bne.n	d6422 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d641e:	1903      	adds	r3, r0, r4
   d6420:	e017      	b.n	d6452 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6422:	2b5c      	cmp	r3, #92	; 0x5c
   d6424:	d102      	bne.n	d642c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6426:	2000      	movs	r0, #0
   d6428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d642c:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d6430:	b2e4      	uxtb	r4, r4
   d6432:	2c1d      	cmp	r4, #29
   d6434:	d803      	bhi.n	d643e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d6436:	fa27 f404 	lsr.w	r4, r7, r4
   d643a:	07e4      	lsls	r4, r4, #31
   d643c:	d4f3      	bmi.n	d6426 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d643e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d6442:	2c3c      	cmp	r4, #60	; 0x3c
   d6444:	d0ef      	beq.n	d6426 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d6446:	3b20      	subs	r3, #32
   d6448:	2b5e      	cmp	r3, #94	; 0x5e
   d644a:	d9e1      	bls.n	d6410 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d644c:	e7eb      	b.n	d6426 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d644e:	2d2f      	cmp	r5, #47	; 0x2f
   d6450:	d105      	bne.n	d645e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d6452:	461e      	mov	r6, r3
   d6454:	f813 5b01 	ldrb.w	r5, [r3], #1
   d6458:	2d20      	cmp	r5, #32
   d645a:	d1f8      	bne.n	d644e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d645c:	e7f9      	b.n	d6452 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d645e:	6016      	str	r6, [r2, #0]
   d6460:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d6462:	4298      	cmp	r0, r3
   d6464:	ebc0 0803 	rsb	r8, r0, r3
   d6468:	d009      	beq.n	d647e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d646a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d646e:	2a2e      	cmp	r2, #46	; 0x2e
   d6470:	d0f7      	beq.n	d6462 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d6472:	2a20      	cmp	r2, #32
   d6474:	d0f5      	beq.n	d6462 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d6476:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d647a:	dcd4      	bgt.n	d6426 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d647c:	e001      	b.n	d6482 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d647e:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d6482:	f8c1 8004 	str.w	r8, [r1, #4]
   d6486:	f101 030c 	add.w	r3, r1, #12
   d648a:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d648e:	2420      	movs	r4, #32
   d6490:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d6494:	4293      	cmp	r3, r2
   d6496:	d1fb      	bne.n	d6490 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6498:	4603      	mov	r3, r0
   d649a:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d649c:	f813 4b01 	ldrb.w	r4, [r3], #1
   d64a0:	2c2e      	cmp	r4, #46	; 0x2e
   d64a2:	d0fa      	beq.n	d649a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d64a4:	2c20      	cmp	r4, #32
   d64a6:	d0f8      	beq.n	d649a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d64a8:	fab2 f482 	clz	r4, r2
   d64ac:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d64ae:	f108 36ff 	add.w	r6, r8, #4294967295
   d64b2:	1c73      	adds	r3, r6, #1
   d64b4:	d107      	bne.n	d64c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d64b6:	2700      	movs	r7, #0
   d64b8:	f04f 0e07 	mov.w	lr, #7
   d64bc:	463d      	mov	r5, r7
   d64be:	46ba      	mov	sl, r7
   d64c0:	f04f 0908 	mov.w	r9, #8
   d64c4:	e009      	b.n	d64da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d64c6:	5d83      	ldrb	r3, [r0, r6]
   d64c8:	2b2e      	cmp	r3, #46	; 0x2e
   d64ca:	d0f4      	beq.n	d64b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d64cc:	3e01      	subs	r6, #1
   d64ce:	e7f0      	b.n	d64b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d64d0:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d64d2:	2b20      	cmp	r3, #32
   d64d4:	d104      	bne.n	d64e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d64d6:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d64d8:	3201      	adds	r2, #1
   d64da:	4542      	cmp	r2, r8
   d64dc:	dbf8      	blt.n	d64d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d64de:	e04b      	b.n	d6578 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d64e0:	2b2e      	cmp	r3, #46	; 0x2e
   d64e2:	d102      	bne.n	d64ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d64e4:	42b2      	cmp	r2, r6
   d64e6:	d1f6      	bne.n	d64d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d64e8:	e003      	b.n	d64f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d64ea:	2b22      	cmp	r3, #34	; 0x22
   d64ec:	d017      	beq.n	d651e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d64ee:	2b7c      	cmp	r3, #124	; 0x7c
   d64f0:	d015      	beq.n	d651e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d64f2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d64f6:	f1bc 0f05 	cmp.w	ip, #5
   d64fa:	d801      	bhi.n	d6500 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d64fc:	2b2d      	cmp	r3, #45	; 0x2d
   d64fe:	d10e      	bne.n	d651e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d6500:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6504:	f1bc 0f05 	cmp.w	ip, #5
   d6508:	d909      	bls.n	d651e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d650a:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d650e:	f1bc 0f02 	cmp.w	ip, #2
   d6512:	d904      	bls.n	d651e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d6514:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6518:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d651c:	d902      	bls.n	d6524 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d651e:	42b2      	cmp	r2, r6
   d6520:	d10e      	bne.n	d6540 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d6522:	e049      	b.n	d65b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6524:	42b2      	cmp	r2, r6
   d6526:	d047      	beq.n	d65b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d6528:	4575      	cmp	r5, lr
   d652a:	d821      	bhi.n	d6570 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d652c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6530:	f1bc 0f19 	cmp.w	ip, #25
   d6534:	d808      	bhi.n	d6548 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d6536:	3b20      	subs	r3, #32
   d6538:	b2db      	uxtb	r3, r3
        lc |= bit;
   d653a:	ea49 0707 	orr.w	r7, r9, r7
   d653e:	e00a      	b.n	d6556 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d6540:	4575      	cmp	r5, lr
   d6542:	d815      	bhi.n	d6570 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d6544:	2400      	movs	r4, #0
      c = '_';
   d6546:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d6548:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d654c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6550:	bf98      	it	ls
   d6552:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d6556:	f105 0c01 	add.w	ip, r5, #1
   d655a:	fa5f fc8c 	uxtb.w	ip, ip
   d655e:	440d      	add	r5, r1
      if (i < 7) {
   d6560:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d6564:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d6566:	d801      	bhi.n	d656c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d6568:	f881 c00c 	strb.w	ip, [r1, #12]
   d656c:	4665      	mov	r5, ip
   d656e:	e7b3      	b.n	d64d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d6570:	f1be 0f0a 	cmp.w	lr, #10
   d6574:	d117      	bne.n	d65a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d6576:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d6578:	7b4b      	ldrb	r3, [r1, #13]
   d657a:	2b20      	cmp	r3, #32
   d657c:	f43f af53 	beq.w	d6426 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d6580:	b13c      	cbz	r4, d6592 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6582:	ea1a 0f07 	tst.w	sl, r7
   d6586:	bf18      	it	ne
   d6588:	2702      	movne	r7, #2
   d658a:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d658c:	2001      	movs	r0, #1
   d658e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d6592:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6594:	2001      	movs	r0, #1
   d6596:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6598:	4419      	add	r1, r3
   d659a:	237e      	movs	r3, #126	; 0x7e
   d659c:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d659e:	2331      	movs	r3, #49	; 0x31
   d65a0:	738b      	strb	r3, [r1, #14]
   d65a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d65a6:	42b2      	cmp	r2, r6
   d65a8:	dce5      	bgt.n	d6576 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d65aa:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d65ac:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d65b0:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d65b2:	f04f 0910 	mov.w	r9, #16
   d65b6:	e78e      	b.n	d64d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d65b8:	f1be 0f0a 	cmp.w	lr, #10
   d65bc:	d0db      	beq.n	d6576 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d65be:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d65c0:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d65c4:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d65c6:	f04f 0910 	mov.w	r9, #16
   d65ca:	e785      	b.n	d64d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d65cc:	31000101 	.word	0x31000101

000d65d0 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d65d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d65d2:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d65d4:	2300      	movs	r3, #0
   d65d6:	f88d 3004 	strb.w	r3, [sp, #4]
   d65da:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d65de:	7803      	ldrb	r3, [r0, #0]
   d65e0:	0719      	lsls	r1, r3, #28

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   d65e2:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   d65e4:	d508      	bpl.n	d65f8 <_ZN7FatFile6removeEv+0x28>
   d65e6:	7883      	ldrb	r3, [r0, #2]
   d65e8:	079a      	lsls	r2, r3, #30
   d65ea:	d505      	bpl.n	d65f8 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   d65ec:	6a01      	ldr	r1, [r0, #32]
   d65ee:	b129      	cbz	r1, d65fc <_ZN7FatFile6removeEv+0x2c>
   d65f0:	68a0      	ldr	r0, [r4, #8]
   d65f2:	f001 f82e 	bl	d7652 <_ZN9FatVolume9freeChainEm>
   d65f6:	b908      	cbnz	r0, d65fc <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   d65f8:	2000      	movs	r0, #0
   d65fa:	e049      	b.n	d6690 <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d65fc:	2101      	movs	r1, #1
   d65fe:	4620      	mov	r0, r4
   d6600:	f000 fabc 	bl	d6b7c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6604:	4605      	mov	r5, r0
   d6606:	2800      	cmp	r0, #0
   d6608:	d0f6      	beq.n	d65f8 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d660a:	f7ff fe55 	bl	d62b8 <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
   d660e:	26e5      	movs	r6, #229	; 0xe5
   d6610:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6612:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
   d6614:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
   d6616:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   d6618:	68a0      	ldr	r0, [r4, #8]
   d661a:	f7ff fe40 	bl	d629e <_ZN9FatVolume9cacheSyncEv>
   d661e:	2800      	cmp	r0, #0
   d6620:	d0ea      	beq.n	d65f8 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
   d6622:	78e3      	ldrb	r3, [r4, #3]
   d6624:	2b00      	cmp	r3, #0
   d6626:	d033      	beq.n	d6690 <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
   d6628:	4621      	mov	r1, r4
   d662a:	a801      	add	r0, sp, #4
   d662c:	f7ff fe53 	bl	d62d6 <_ZN7FatFile11openClusterEPS_>
   d6630:	2800      	cmp	r0, #0
   d6632:	d0e1      	beq.n	d65f8 <_ZN7FatFile6removeEv+0x28>
   d6634:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d6636:	78e3      	ldrb	r3, [r4, #3]
   d6638:	42ab      	cmp	r3, r5
   d663a:	d3dd      	bcc.n	d65f8 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   d663c:	88a1      	ldrh	r1, [r4, #4]
   d663e:	1b49      	subs	r1, r1, r5
   d6640:	0149      	lsls	r1, r1, #5
   d6642:	a801      	add	r0, sp, #4
   d6644:	f000 fbce 	bl	d6de4 <_ZN7FatFile7seekSetEm>
   d6648:	2800      	cmp	r0, #0
   d664a:	d0d5      	beq.n	d65f8 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   d664c:	2100      	movs	r1, #0
   d664e:	a801      	add	r0, sp, #4
   d6650:	f000 fbab 	bl	d6daa <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6654:	2800      	cmp	r0, #0
   d6656:	d0cf      	beq.n	d65f8 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6658:	7ac3      	ldrb	r3, [r0, #11]
   d665a:	2b0f      	cmp	r3, #15
   d665c:	d1cc      	bne.n	d65f8 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d665e:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   d6660:	f002 031f 	and.w	r3, r2, #31
   d6664:	429d      	cmp	r5, r3
   d6666:	d1c7      	bne.n	d65f8 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   d6668:	7b43      	ldrb	r3, [r0, #13]
   d666a:	42bb      	cmp	r3, r7
   d666c:	d1c4      	bne.n	d65f8 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
   d666e:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   d6670:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d6672:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   d6676:	f043 0301 	orr.w	r3, r3, #1
   d667a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   d667e:	0653      	lsls	r3, r2, #25
   d6680:	d503      	bpl.n	d668a <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
   d6682:	68a0      	ldr	r0, [r4, #8]
   d6684:	f7ff fe0b 	bl	d629e <_ZN9FatVolume9cacheSyncEv>
   d6688:	e002      	b.n	d6690 <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   d668a:	3501      	adds	r5, #1
   d668c:	b2ed      	uxtb	r5, r5
   d668e:	e7d2      	b.n	d6636 <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
   d6690:	b00b      	add	sp, #44	; 0x2c
   d6692:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6694 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6698:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d669c:	4606      	mov	r6, r0
   d669e:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d66a0:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d66a2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d66a4:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d66a8:	6869      	ldr	r1, [r5, #4]
   d66aa:	68aa      	ldr	r2, [r5, #8]
   d66ac:	1863      	adds	r3, r4, r1
   d66ae:	b29b      	uxth	r3, r3
   d66b0:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d66b2:	4291      	cmp	r1, r2
   d66b4:	d006      	beq.n	d66c4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d66b6:	f812 0b01 	ldrb.w	r0, [r2], #1
   d66ba:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d66be:	4043      	eors	r3, r0
   d66c0:	b29b      	uxth	r3, r3
   d66c2:	e7f6      	b.n	d66b2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d66c4:	f1b9 0f03 	cmp.w	r9, #3
   d66c8:	bf28      	it	cs
   d66ca:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d66ce:	f109 0204 	add.w	r2, r9, #4
   d66d2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d66d4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d66d8:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d66da:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d66dc:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d66de:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d66e0:	bf94      	ite	ls
   d66e2:	3130      	addls	r1, #48	; 0x30
   d66e4:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d66e6:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d66e8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d66ea:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d66ee:	d3f1      	bcc.n	d66d4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d66f0:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d66f4:	2100      	movs	r1, #0
   d66f6:	735f      	strb	r7, [r3, #13]
   d66f8:	4630      	mov	r0, r6
   d66fa:	f000 fb73 	bl	d6de4 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d66fe:	2101      	movs	r1, #1
   d6700:	4630      	mov	r0, r6
   d6702:	f000 fb52 	bl	d6daa <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6706:	4601      	mov	r1, r0
   d6708:	b928      	cbnz	r0, d6716 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d670a:	7870      	ldrb	r0, [r6, #1]
   d670c:	fab0 f080 	clz	r0, r0
   d6710:	0940      	lsrs	r0, r0, #5
   d6712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d6716:	7803      	ldrb	r3, [r0, #0]
   d6718:	b14b      	cbz	r3, d672e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d671a:	7ac3      	ldrb	r3, [r0, #11]
   d671c:	071b      	lsls	r3, r3, #28
   d671e:	d4ee      	bmi.n	d66fe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6720:	220b      	movs	r2, #11
   d6722:	4640      	mov	r0, r8
   d6724:	f008 f826 	bl	de774 <memcmp>
   d6728:	2800      	cmp	r0, #0
   d672a:	d1e8      	bne.n	d66fe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d672c:	e002      	b.n	d6734 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d672e:	2001      	movs	r0, #1
   d6730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6734:	3401      	adds	r4, #1
   d6736:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d6738:	2c64      	cmp	r4, #100	; 0x64
   d673a:	d1b5      	bne.n	d66a8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d673c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6740 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6744:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6746:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6748:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d674a:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d674e:	9005      	str	r0, [sp, #20]
   d6750:	460e      	mov	r6, r1
   d6752:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d6754:	d101      	bne.n	d675a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d6756:	2000      	movs	r0, #0
   d6758:	e1a0      	b.n	d6a9c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d675a:	9b05      	ldr	r3, [sp, #20]
   d675c:	781b      	ldrb	r3, [r3, #0]
   d675e:	2b00      	cmp	r3, #0
   d6760:	d1f9      	bne.n	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d6762:	6853      	ldr	r3, [r2, #4]
   d6764:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6766:	7813      	ldrb	r3, [r2, #0]
   d6768:	079b      	lsls	r3, r3, #30
   d676a:	f000 818d 	beq.w	d6a88 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d676e:	9b02      	ldr	r3, [sp, #8]
   d6770:	270d      	movs	r7, #13
   d6772:	330c      	adds	r3, #12
   d6774:	fbb3 f7f7 	udiv	r7, r3, r7
   d6778:	3701      	adds	r7, #1
   d677a:	b2ff      	uxtb	r7, r7
   d677c:	2100      	movs	r1, #0
   d677e:	4630      	mov	r0, r6
   d6780:	f000 fb30 	bl	d6de4 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d6784:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6788:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d678c:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d6790:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d6792:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d6794:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d6796:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d679a:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d679c:	6972      	ldr	r2, [r6, #20]
   d679e:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d67a0:	2101      	movs	r1, #1
   d67a2:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d67a4:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d67a8:	f000 faff 	bl	d6daa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d67ac:	9b07      	ldr	r3, [sp, #28]
   d67ae:	b920      	cbnz	r0, d67ba <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d67b0:	7873      	ldrb	r3, [r6, #1]
   d67b2:	2b00      	cmp	r3, #0
   d67b4:	f000 8090 	beq.w	d68d8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d67b8:	e7cd      	b.n	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d67ba:	7802      	ldrb	r2, [r0, #0]
   d67bc:	2ae5      	cmp	r2, #229	; 0xe5
   d67be:	d000      	beq.n	d67c2 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d67c0:	b942      	cbnz	r2, d67d4 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d67c2:	2c00      	cmp	r4, #0
   d67c4:	bf08      	it	eq
   d67c6:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d67c8:	42bc      	cmp	r4, r7
        freeFound++;
   d67ca:	bf3c      	itt	cc
   d67cc:	3401      	addcc	r4, #1
   d67ce:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d67d0:	b922      	cbnz	r2, d67dc <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d67d2:	e081      	b.n	d68d8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d67d4:	42bc      	cmp	r4, r7
   d67d6:	bf38      	it	cc
   d67d8:	2400      	movcc	r4, #0
   d67da:	e003      	b.n	d67e4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d67dc:	2ae5      	cmp	r2, #229	; 0xe5
   d67de:	d101      	bne.n	d67e4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d67e0:	2500      	movs	r5, #0
   d67e2:	e7db      	b.n	d679c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d67e4:	2a2e      	cmp	r2, #46	; 0x2e
   d67e6:	d0fb      	beq.n	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d67e8:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d67ea:	290f      	cmp	r1, #15
   d67ec:	d152      	bne.n	d6894 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d67ee:	b93d      	cbnz	r5, d6800 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d67f0:	0651      	lsls	r1, r2, #25
   d67f2:	d5d3      	bpl.n	d679c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d67f4:	7b43      	ldrb	r3, [r0, #13]
   d67f6:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d67f8:	f002 051f 	and.w	r5, r2, #31
   d67fc:	462b      	mov	r3, r5
   d67fe:	e007      	b.n	d6810 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6800:	3b01      	subs	r3, #1
   d6802:	b2db      	uxtb	r3, r3
   d6804:	429a      	cmp	r2, r3
   d6806:	d1eb      	bne.n	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6808:	7b42      	ldrb	r2, [r0, #13]
   d680a:	9903      	ldr	r1, [sp, #12]
   d680c:	4291      	cmp	r1, r2
   d680e:	d1e7      	bne.n	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d6810:	1e5a      	subs	r2, r3, #1
   d6812:	f04f 0c0d 	mov.w	ip, #13
   d6816:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d681a:	9a02      	ldr	r2, [sp, #8]
   d681c:	4562      	cmp	r2, ip
   d681e:	d9df      	bls.n	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6820:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d6824:	f1be 0f04 	cmp.w	lr, #4
   d6828:	fa5f f28e 	uxtb.w	r2, lr
   d682c:	d804      	bhi.n	d6838 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d682e:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d6832:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d6836:	e00c      	b.n	d6852 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6838:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d683a:	bf95      	itete	ls
   d683c:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6840:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6844:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6848:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d684c:	bf94      	ite	ls
   d684e:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6850:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d6852:	9902      	ldr	r1, [sp, #8]
   d6854:	4561      	cmp	r1, ip
   d6856:	d103      	bne.n	d6860 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d6858:	2a00      	cmp	r2, #0
   d685a:	bf18      	it	ne
   d685c:	2500      	movne	r5, #0
   d685e:	e79d      	b.n	d679c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6860:	2aff      	cmp	r2, #255	; 0xff
   d6862:	d8bd      	bhi.n	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6864:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6866:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d686a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d686c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d6870:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6874:	bf98      	it	ls
   d6876:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6878:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d687c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d6880:	bf98      	it	ls
   d6882:	b2d2      	uxtbls	r2, r2
   d6884:	f1bc 0f19 	cmp.w	ip, #25
   d6888:	bf9c      	itt	ls
   d688a:	3120      	addls	r1, #32
   d688c:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d688e:	4291      	cmp	r1, r2
   d6890:	d1a6      	bne.n	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d6892:	e0fb      	b.n	d6a8c <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6894:	0709      	lsls	r1, r1, #28
   d6896:	d4a3      	bmi.n	d67e0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d6898:	b14d      	cbz	r5, d68ae <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d689a:	2b01      	cmp	r3, #1
   d689c:	f47f af5b 	bne.w	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d68a0:	f7ff fd0a 	bl	d62b8 <_ZN7FatFile11lfnChecksumEPh>
   d68a4:	9b03      	ldr	r3, [sp, #12]
   d68a6:	4283      	cmp	r3, r0
   d68a8:	f47f af55 	bne.w	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d68ac:	e00f      	b.n	d68ce <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d68ae:	220b      	movs	r2, #11
   d68b0:	9906      	ldr	r1, [sp, #24]
   d68b2:	9307      	str	r3, [sp, #28]
   d68b4:	f007 ff5e 	bl	de774 <memcmp>
   d68b8:	9b07      	ldr	r3, [sp, #28]
   d68ba:	2800      	cmp	r0, #0
   d68bc:	f47f af6e 	bne.w	d679c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d68c0:	f899 2000 	ldrb.w	r2, [r9]
   d68c4:	07d2      	lsls	r2, r2, #31
   d68c6:	d502      	bpl.n	d68ce <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d68c8:	2201      	movs	r2, #1
   d68ca:	9204      	str	r2, [sp, #16]
   d68cc:	e766      	b.n	d679c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d68ce:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d68d2:	f000 80d1 	beq.w	d6a78 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d68d6:	e73e      	b.n	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d68d8:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d68dc:	f43f af3b 	beq.w	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d68e0:	f00b 0303 	and.w	r3, fp, #3
   d68e4:	3b01      	subs	r3, #1
   d68e6:	2b01      	cmp	r3, #1
   d68e8:	f63f af35 	bhi.w	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d68ec:	2c00      	cmp	r4, #0
   d68ee:	bf08      	it	eq
   d68f0:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d68f2:	42bc      	cmp	r4, r7
   d68f4:	d302      	bcc.n	d68fc <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d68f6:	9b04      	ldr	r3, [sp, #16]
   d68f8:	b9cb      	cbnz	r3, d692e <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d68fa:	e01f      	b.n	d693c <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d68fc:	2100      	movs	r1, #0
   d68fe:	4630      	mov	r0, r6
   d6900:	f000 fa53 	bl	d6daa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6904:	b910      	cbnz	r0, d690c <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d6906:	7873      	ldrb	r3, [r6, #1]
   d6908:	b15b      	cbz	r3, d6922 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d690a:	e724      	b.n	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d690c:	3401      	adds	r4, #1
   d690e:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d6910:	e7ef      	b.n	d68f2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d6912:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6914:	791b      	ldrb	r3, [r3, #4]
   d6916:	2b01      	cmp	r3, #1
   d6918:	d8ed      	bhi.n	d68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d691a:	3410      	adds	r4, #16
   d691c:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d691e:	42a7      	cmp	r7, r4
   d6920:	d9e9      	bls.n	d68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d6922:	4630      	mov	r0, r6
   d6924:	f000 f8ea 	bl	d6afc <_ZN7FatFile13addDirClusterEv>
   d6928:	2800      	cmp	r0, #0
   d692a:	d1f2      	bne.n	d6912 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d692c:	e713      	b.n	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d692e:	4649      	mov	r1, r9
   d6930:	4630      	mov	r0, r6
   d6932:	f7ff feaf 	bl	d6694 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d6936:	2800      	cmp	r0, #0
   d6938:	f43f af0d 	beq.w	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d693c:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d6940:	4630      	mov	r0, r6
   d6942:	f000 fa4f 	bl	d6de4 <_ZN7FatFile7seekSetEm>
   d6946:	2800      	cmp	r0, #0
   d6948:	f43f af05 	beq.w	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d694c:	1e7d      	subs	r5, r7, #1
   d694e:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6950:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6952:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d6956:	f04f 080f 	mov.w	r8, #15
   d695a:	e041      	b.n	d69e0 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d695c:	2100      	movs	r1, #0
   d695e:	4630      	mov	r0, r6
   d6960:	f000 fa23 	bl	d6daa <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6964:	4607      	mov	r7, r0
   d6966:	2800      	cmp	r0, #0
   d6968:	f43f aef5 	beq.w	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d696c:	68b2      	ldr	r2, [r6, #8]
   d696e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6972:	42ac      	cmp	r4, r5
   d6974:	f043 0301 	orr.w	r3, r3, #1
   d6978:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d697c:	bf0c      	ite	eq
   d697e:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d6982:	4622      	movne	r2, r4
   d6984:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6986:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d698a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d698e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6992:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d6994:	f7ff fc90 	bl	d62b8 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6998:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d699a:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d699c:	f887 a01a 	strb.w	sl, [r7, #26]
   d69a0:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d69a4:	f002 021f 	and.w	r2, r2, #31
   d69a8:	230d      	movs	r3, #13
   d69aa:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d69ac:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d69b0:	435a      	muls	r2, r3
   d69b2:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d69b4:	9902      	ldr	r1, [sp, #8]
   d69b6:	4291      	cmp	r1, r2
   d69b8:	d915      	bls.n	d69e6 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d69ba:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d69be:	2b04      	cmp	r3, #4
   d69c0:	fa5f fc83 	uxtb.w	ip, r3
   d69c4:	f103 0001 	add.w	r0, r3, #1
   d69c8:	d813      	bhi.n	d69f2 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d69ca:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d69ce:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d69d2:	280d      	cmp	r0, #13
   d69d4:	f102 0201 	add.w	r2, r2, #1
   d69d8:	4603      	mov	r3, r0
   d69da:	d1eb      	bne.n	d69b4 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d69dc:	3c01      	subs	r4, #1
   d69de:	b2e4      	uxtb	r4, r4
   d69e0:	2c00      	cmp	r4, #0
   d69e2:	d1bb      	bne.n	d695c <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d69e4:	e00e      	b.n	d6a04 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d69e6:	bf14      	ite	ne
   d69e8:	f04f 31ff 	movne.w	r1, #4294967295
   d69ec:	2100      	moveq	r1, #0
   d69ee:	b289      	uxth	r1, r1
   d69f0:	e7e5      	b.n	d69be <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d69f2:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d69f6:	bf94      	ite	ls
   d69f8:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d69fc:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d6a00:	8099      	strh	r1, [r3, #4]
   d6a02:	e7e6      	b.n	d69d2 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6a04:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d6a06:	4621      	mov	r1, r4
   d6a08:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d6a0a:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d6a0e:	f000 f9cc 	bl	d6daa <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6a12:	4607      	mov	r7, r0
   d6a14:	2800      	cmp	r0, #0
   d6a16:	f43f ae9e 	beq.w	d6756 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d6a1a:	2220      	movs	r2, #32
   d6a1c:	4621      	mov	r1, r4
   d6a1e:	f007 fec3 	bl	de7a8 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6a22:	464b      	mov	r3, r9
   d6a24:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6a28:	603a      	str	r2, [r7, #0]
   d6a2a:	685a      	ldr	r2, [r3, #4]
   d6a2c:	607a      	str	r2, [r7, #4]
   d6a2e:	891a      	ldrh	r2, [r3, #8]
   d6a30:	813a      	strh	r2, [r7, #8]
   d6a32:	7a9b      	ldrb	r3, [r3, #10]
   d6a34:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6a36:	f899 3000 	ldrb.w	r3, [r9]
   d6a3a:	f003 0318 	and.w	r3, r3, #24
   d6a3e:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d6a40:	4b18      	ldr	r3, [pc, #96]	; (d6aa4 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d6a42:	681b      	ldr	r3, [r3, #0]
   d6a44:	b12b      	cbz	r3, d6a52 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6a46:	f107 010e 	add.w	r1, r7, #14
   d6a4a:	f107 0010 	add.w	r0, r7, #16
   d6a4e:	4798      	blx	r3
   d6a50:	e006      	b.n	d6a60 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d6a52:	2321      	movs	r3, #33	; 0x21
   d6a54:	743b      	strb	r3, [r7, #16]
   d6a56:	2328      	movs	r3, #40	; 0x28
   d6a58:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6a5a:	2308      	movs	r3, #8
   d6a5c:	73bc      	strb	r4, [r7, #14]
   d6a5e:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d6a60:	8a3b      	ldrh	r3, [r7, #16]
   d6a62:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d6a64:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d6a66:	89fb      	ldrh	r3, [r7, #14]
   d6a68:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d6a6a:	68b2      	ldr	r2, [r6, #8]
   d6a6c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6a70:	f043 0301 	orr.w	r3, r3, #1
   d6a74:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6a78:	9500      	str	r5, [sp, #0]
   d6a7a:	465b      	mov	r3, fp
   d6a7c:	4652      	mov	r2, sl
   d6a7e:	4631      	mov	r1, r6
   d6a80:	9805      	ldr	r0, [sp, #20]
   d6a82:	f000 f9f8 	bl	d6e76 <_ZN7FatFile15openCachedEntryEPS_tih>
   d6a86:	e009      	b.n	d6a9c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6a88:	2701      	movs	r7, #1
   d6a8a:	e677      	b.n	d677c <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d6a8c:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d6a90:	f1be 0f0d 	cmp.w	lr, #13
   d6a94:	f43f ae82 	beq.w	d679c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6a98:	46d4      	mov	ip, sl
   d6a9a:	e6c3      	b.n	d6824 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d6a9c:	b009      	add	sp, #36	; 0x24
   d6a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6aa2:	bf00      	nop
   d6aa4:	2003e1e4 	.word	0x2003e1e4

000d6aa8 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d6aa8:	f002 bc38 	b.w	d931c <HAL_Pin_Map>

000d6aac <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d6aac:	f002 bc36 	b.w	d931c <HAL_Pin_Map>

000d6ab0 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d6ab0:	f002 bc34 	b.w	d931c <HAL_Pin_Map>

000d6ab4 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   d6ab4:	b510      	push	{r4, lr}
   d6ab6:	460c      	mov	r4, r1
   d6ab8:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   d6aba:	b909      	cbnz	r1, d6ac0 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   d6abc:	2000      	movs	r0, #0
   d6abe:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   d6ac0:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   d6ac4:	d004      	beq.n	d6ad0 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
   d6ac6:	232f      	movs	r3, #47	; 0x2f
   d6ac8:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   d6aca:	2300      	movs	r3, #0
   d6acc:	7063      	strb	r3, [r4, #1]
   d6ace:	e006      	b.n	d6ade <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   d6ad0:	f000 f854 	bl	d6b7c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d6ad4:	2800      	cmp	r0, #0
   d6ad6:	d0f1      	beq.n	d6abc <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
   d6ad8:	4621      	mov	r1, r4
   d6ada:	f000 f85e 	bl	d6b9a <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
   d6ade:	2001      	movs	r0, #1

fail:
  return false;
}
   d6ae0:	bd10      	pop	{r4, pc}

000d6ae2 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d6ae2:	f002 bc1b 	b.w	d931c <HAL_Pin_Map>

000d6ae6 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6ae6:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6ae8:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6aea:	f043 0304 	orr.w	r3, r3, #4
   d6aee:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6af0:	f100 0210 	add.w	r2, r0, #16
   d6af4:	6880      	ldr	r0, [r0, #8]
   d6af6:	f000 bd71 	b.w	d75dc <_ZN9FatVolume15allocateClusterEmPm>
	...

000d6afc <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6b00:	7803      	ldrb	r3, [r0, #0]
   d6b02:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6b06:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6b08:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d6b0c:	b10b      	cbz	r3, d6b12 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d6b0e:	2600      	movs	r6, #0
   d6b10:	e02e      	b.n	d6b70 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d6b12:	6942      	ldr	r2, [r0, #20]
   d6b14:	4b18      	ldr	r3, [pc, #96]	; (d6b78 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d6b16:	429a      	cmp	r2, r3
   d6b18:	d8f9      	bhi.n	d6b0e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d6b1a:	f7ff ffe4 	bl	d6ae6 <_ZN7FatFile10addClusterEv>
   d6b1e:	4606      	mov	r6, r0
   d6b20:	2800      	cmp	r0, #0
   d6b22:	d0f4      	beq.n	d6b0e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6b24:	6921      	ldr	r1, [r4, #16]
   d6b26:	68a0      	ldr	r0, [r4, #8]
   d6b28:	f000 fced 	bl	d7506 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6b2c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6b2e:	68a0      	ldr	r0, [r4, #8]
   d6b30:	2205      	movs	r2, #5
   d6b32:	4639      	mov	r1, r7
   d6b34:	3024      	adds	r0, #36	; 0x24
   d6b36:	f000 fcc2 	bl	d74be <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d6b3a:	4680      	mov	r8, r0
   d6b3c:	2800      	cmp	r0, #0
   d6b3e:	d0e6      	beq.n	d6b0e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d6b40:	4629      	mov	r1, r5
   d6b42:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6b46:	f007 fe2f 	bl	de7a8 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6b4a:	2501      	movs	r5, #1
   d6b4c:	68a3      	ldr	r3, [r4, #8]
   d6b4e:	791a      	ldrb	r2, [r3, #4]
   d6b50:	42aa      	cmp	r2, r5
   d6b52:	d909      	bls.n	d6b68 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6b54:	4642      	mov	r2, r8
   d6b56:	19e9      	adds	r1, r5, r7
   d6b58:	6818      	ldr	r0, [r3, #0]
   d6b5a:	f001 f82d 	bl	d7bb8 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6b5e:	2800      	cmp	r0, #0
   d6b60:	d0d5      	beq.n	d6b0e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6b62:	3501      	adds	r5, #1
   d6b64:	b2ed      	uxtb	r5, r5
   d6b66:	e7f1      	b.n	d6b4c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d6b68:	6963      	ldr	r3, [r4, #20]
   d6b6a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d6b6e:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d6b70:	4630      	mov	r0, r6
   d6b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b76:	bf00      	nop
   d6b78:	001ffdff 	.word	0x001ffdff

000d6b7c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d6b7c:	b510      	push	{r4, lr}
   d6b7e:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6b80:	6880      	ldr	r0, [r0, #8]
   d6b82:	460a      	mov	r2, r1
   d6b84:	3024      	adds	r0, #36	; 0x24
   d6b86:	69a1      	ldr	r1, [r4, #24]
   d6b88:	f000 fc99 	bl	d74be <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d6b8c:	b120      	cbz	r0, d6b98 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d6b8e:	88a3      	ldrh	r3, [r4, #4]
   d6b90:	f003 030f 	and.w	r3, r3, #15
   d6b94:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d6b98:	bd10      	pop	{r4, pc}

000d6b9a <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   d6b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b9c:	2400      	movs	r4, #0
   d6b9e:	1e45      	subs	r5, r0, #1
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
   d6ba0:	2608      	movs	r6, #8
fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
   d6ba2:	4623      	mov	r3, r4
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6ba4:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
   d6ba6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6baa:	2a20      	cmp	r2, #32
   d6bac:	d018      	beq.n	d6be0 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
   d6bae:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
   d6bb0:	bf02      	ittt	eq
   d6bb2:	54cf      	strbeq	r7, [r1, r3]
   d6bb4:	1c5a      	addeq	r2, r3, #1
   d6bb6:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
   d6bb8:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6bba:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
   d6bbe:	bf08      	it	eq
   d6bc0:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   d6bc2:	f1be 0f19 	cmp.w	lr, #25
   d6bc6:	d806      	bhi.n	d6bd6 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
   d6bc8:	f890 e00c 	ldrb.w	lr, [r0, #12]
   d6bcc:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
   d6bd0:	bf1c      	itt	ne
   d6bd2:	3220      	addne	r2, #32
   d6bd4:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
   d6bd6:	f103 0e01 	add.w	lr, r3, #1
   d6bda:	54ca      	strb	r2, [r1, r3]
   d6bdc:	fa5f f38e 	uxtb.w	r3, lr
   d6be0:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
   d6be2:	2c0b      	cmp	r4, #11
   d6be4:	d1df      	bne.n	d6ba6 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
   d6be6:	2200      	movs	r2, #0
   d6be8:	54ca      	strb	r2, [r1, r3]
  return j;
}
   d6bea:	4618      	mov	r0, r3
   d6bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6bee <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6bee:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d6bf0:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d6bf2:	4605      	mov	r5, r0
   d6bf4:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d6bf6:	b984      	cbnz	r4, d6c1a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d6bf8:	2224      	movs	r2, #36	; 0x24
   d6bfa:	4621      	mov	r1, r4
   d6bfc:	f007 fdd4 	bl	de7a8 <memset>

  m_vol = vol;
   d6c00:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d6c02:	79f3      	ldrb	r3, [r6, #7]
   d6c04:	2b10      	cmp	r3, #16
   d6c06:	d003      	beq.n	d6c10 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d6c08:	2b20      	cmp	r3, #32
   d6c0a:	d106      	bne.n	d6c1a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6c0c:	2340      	movs	r3, #64	; 0x40
   d6c0e:	e000      	b.n	d6c12 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d6c10:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6c12:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d6c14:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d6c16:	70a8      	strb	r0, [r5, #2]
   d6c18:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d6c1a:	2000      	movs	r0, #0
   d6c1c:	bd70      	pop	{r4, r5, r6, pc}

000d6c1e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d6c1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c22:	7803      	ldrb	r3, [r0, #0]
   d6c24:	4604      	mov	r4, r0
   d6c26:	4689      	mov	r9, r1
   d6c28:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d6c2a:	b14b      	cbz	r3, d6c40 <_ZN7FatFile4readEPvj+0x22>
   d6c2c:	7882      	ldrb	r2, [r0, #2]
   d6c2e:	07d1      	lsls	r1, r2, #31
   d6c30:	d506      	bpl.n	d6c40 <_ZN7FatFile4readEPvj+0x22>
   d6c32:	e00c      	b.n	d6c4e <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6c34:	465a      	mov	r2, fp
   d6c36:	6921      	ldr	r1, [r4, #16]
   d6c38:	f000 fc6b 	bl	d7512 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d6c3c:	2800      	cmp	r0, #0
   d6c3e:	da3d      	bge.n	d6cbc <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d6c40:	7863      	ldrb	r3, [r4, #1]
   d6c42:	f043 0302 	orr.w	r3, r3, #2
   d6c46:	7063      	strb	r3, [r4, #1]
  return -1;
   d6c48:	f04f 30ff 	mov.w	r0, #4294967295
   d6c4c:	e097      	b.n	d6d7e <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d6c4e:	071a      	lsls	r2, r3, #28
   d6c50:	d503      	bpl.n	d6c5a <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d6c52:	69e3      	ldr	r3, [r4, #28]
   d6c54:	6962      	ldr	r2, [r4, #20]
   d6c56:	1a9b      	subs	r3, r3, r2
   d6c58:	e007      	b.n	d6c6a <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d6c5a:	069a      	lsls	r2, r3, #26
   d6c5c:	d508      	bpl.n	d6c70 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6c5e:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d6c60:	891a      	ldrh	r2, [r3, #8]
   d6c62:	6963      	ldr	r3, [r4, #20]
   d6c64:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d6c68:	b29b      	uxth	r3, r3
   d6c6a:	429d      	cmp	r5, r3
   d6c6c:	bf28      	it	cs
   d6c6e:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d6c70:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d6c72:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6c76:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6c7a:	2e00      	cmp	r6, #0
   d6c7c:	d035      	beq.n	d6cea <_ZN7FatFile4readEPvj+0xcc>
   d6c7e:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6c80:	6963      	ldr	r3, [r4, #20]
   d6c82:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d6c84:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6c88:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d6c8c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d6c90:	d002      	beq.n	d6c98 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d6c92:	6a03      	ldr	r3, [r0, #32]
   d6c94:	4419      	add	r1, r3
   d6c96:	e01d      	b.n	d6cd4 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6c98:	f890 8005 	ldrb.w	r8, [r0, #5]
   d6c9c:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d6ca0:	f1ba 0f00 	cmp.w	sl, #0
   d6ca4:	d110      	bne.n	d6cc8 <_ZN7FatFile4readEPvj+0xaa>
   d6ca6:	f1b8 0f00 	cmp.w	r8, #0
   d6caa:	d10d      	bne.n	d6cc8 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d6cac:	2b00      	cmp	r3, #0
   d6cae:	d1c1      	bne.n	d6c34 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6cb0:	0653      	lsls	r3, r2, #25
   d6cb2:	bf4c      	ite	mi
   d6cb4:	6a03      	ldrmi	r3, [r0, #32]
   d6cb6:	6a23      	ldrpl	r3, [r4, #32]
   d6cb8:	6123      	str	r3, [r4, #16]
   d6cba:	e005      	b.n	d6cc8 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d6cbc:	d104      	bne.n	d6cc8 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d6cbe:	7823      	ldrb	r3, [r4, #0]
   d6cc0:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6cc4:	d111      	bne.n	d6cea <_ZN7FatFile4readEPvj+0xcc>
   d6cc6:	e7bb      	b.n	d6c40 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6cc8:	6921      	ldr	r1, [r4, #16]
   d6cca:	68a0      	ldr	r0, [r4, #8]
   d6ccc:	f000 fc1b 	bl	d7506 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6cd0:	eb08 0100 	add.w	r1, r8, r0
   d6cd4:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6cd6:	f1ba 0f00 	cmp.w	sl, #0
   d6cda:	d135      	bne.n	d6d48 <_ZN7FatFile4readEPvj+0x12a>
   d6cdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6ce0:	d332      	bcc.n	d6d48 <_ZN7FatFile4readEPvj+0x12a>
   d6ce2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6ce4:	4299      	cmp	r1, r3
   d6ce6:	d102      	bne.n	d6cee <_ZN7FatFile4readEPvj+0xd0>
   d6ce8:	e02e      	b.n	d6d48 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d6cea:	1ba8      	subs	r0, r5, r6
   d6cec:	e047      	b.n	d6d7e <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d6cee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6cf2:	d31b      	bcc.n	d6d2c <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d6cf4:	7822      	ldrb	r2, [r4, #0]
   d6cf6:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d6cf8:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d6cfc:	d406      	bmi.n	d6d0c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d6cfe:	7902      	ldrb	r2, [r0, #4]
   d6d00:	ebc8 0202 	rsb	r2, r8, r2
   d6d04:	b2d2      	uxtb	r2, r2
   d6d06:	4592      	cmp	sl, r2
   d6d08:	bf28      	it	cs
   d6d0a:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6d0c:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d6d0e:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6d12:	d207      	bcs.n	d6d24 <_ZN7FatFile4readEPvj+0x106>
   d6d14:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d6d16:	4653      	mov	r3, sl
   d6d18:	464a      	mov	r2, r9
   d6d1a:	6800      	ldr	r0, [r0, #0]
   d6d1c:	f000 ff0a 	bl	d7b34 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6d20:	b960      	cbnz	r0, d6d3c <_ZN7FatFile4readEPvj+0x11e>
   d6d22:	e78d      	b.n	d6c40 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6d24:	4453      	add	r3, sl
   d6d26:	4299      	cmp	r1, r3
   d6d28:	d321      	bcc.n	d6d6e <_ZN7FatFile4readEPvj+0x150>
   d6d2a:	e7f3      	b.n	d6d14 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6d2c:	464a      	mov	r2, r9
   d6d2e:	6800      	ldr	r0, [r0, #0]
   d6d30:	f000 feb8 	bl	d7aa4 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6d34:	2800      	cmp	r0, #0
   d6d36:	d083      	beq.n	d6c40 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d6d38:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d6d3c:	6963      	ldr	r3, [r4, #20]
   d6d3e:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d6d40:	44b9      	add	r9, r7
    m_curPosition += n;
   d6d42:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6d44:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6d46:	e798      	b.n	d6c7a <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6d48:	2200      	movs	r2, #0
   d6d4a:	3024      	adds	r0, #36	; 0x24
   d6d4c:	f000 fbb7 	bl	d74be <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d6d50:	2800      	cmp	r0, #0
   d6d52:	f43f af75 	beq.w	d6c40 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d6d56:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d6d5a:	42b7      	cmp	r7, r6
   d6d5c:	bf28      	it	cs
   d6d5e:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d6d60:	eb00 010a 	add.w	r1, r0, sl
   d6d64:	463a      	mov	r2, r7
   d6d66:	4648      	mov	r0, r9
   d6d68:	f007 fd13 	bl	de792 <memcpy>
   d6d6c:	e7e6      	b.n	d6d3c <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6d6e:	3024      	adds	r0, #36	; 0x24
   d6d70:	9101      	str	r1, [sp, #4]
   d6d72:	f000 fb7d 	bl	d7470 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d6d76:	9901      	ldr	r1, [sp, #4]
   d6d78:	2800      	cmp	r0, #0
   d6d7a:	d1cb      	bne.n	d6d14 <_ZN7FatFile4readEPvj+0xf6>
   d6d7c:	e760      	b.n	d6c40 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d6d7e:	b003      	add	sp, #12
   d6d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6d84 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d6d84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d6d86:	2201      	movs	r2, #1
   d6d88:	f10d 0107 	add.w	r1, sp, #7
   d6d8c:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d6d8e:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d6d90:	6905      	ldr	r5, [r0, #16]
   d6d92:	f7ff ff44 	bl	d6c1e <_ZN7FatFile4readEPvj>
   d6d96:	2801      	cmp	r0, #1
   d6d98:	bf05      	ittet	eq
   d6d9a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d6d9e:	6166      	streq	r6, [r4, #20]
   d6da0:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d6da4:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d6da6:	b002      	add	sp, #8
   d6da8:	bd70      	pop	{r4, r5, r6, pc}

000d6daa <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6daa:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6dac:	6943      	ldr	r3, [r0, #20]
   d6dae:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6db2:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d6db4:	b105      	cbz	r5, d6db8 <_ZN7FatFile12readDirCacheEb+0xe>
   d6db6:	b969      	cbnz	r1, d6dd4 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d6db8:	2201      	movs	r2, #1
   d6dba:	f10d 0107 	add.w	r1, sp, #7
   d6dbe:	4620      	mov	r0, r4
   d6dc0:	f7ff ff2d 	bl	d6c1e <_ZN7FatFile4readEPvj>
   d6dc4:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d6dc6:	2801      	cmp	r0, #1
   d6dc8:	d001      	beq.n	d6dce <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d6dca:	2000      	movs	r0, #0
   d6dcc:	e008      	b.n	d6de0 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d6dce:	6963      	ldr	r3, [r4, #20]
   d6dd0:	331f      	adds	r3, #31
   d6dd2:	e000      	b.n	d6dd6 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d6dd4:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6dd6:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d6dd8:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6dda:	3030      	adds	r0, #48	; 0x30
   d6ddc:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d6de0:	b003      	add	sp, #12
   d6de2:	bd30      	pop	{r4, r5, pc}

000d6de4 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6de8:	460e      	mov	r6, r1
   d6dea:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d6dec:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d6dee:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d6df0:	2900      	cmp	r1, #0
   d6df2:	d039      	beq.n	d6e68 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d6df4:	6945      	ldr	r5, [r0, #20]
   d6df6:	42b5      	cmp	r5, r6
   d6df8:	d03a      	beq.n	d6e70 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d6dfa:	b90e      	cbnz	r6, d6e00 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d6dfc:	6106      	str	r6, [r0, #16]
    goto done;
   d6dfe:	e031      	b.n	d6e64 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d6e00:	070b      	lsls	r3, r1, #28
   d6e02:	d503      	bpl.n	d6e0c <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d6e04:	69c3      	ldr	r3, [r0, #28]
   d6e06:	429e      	cmp	r6, r3
   d6e08:	d82e      	bhi.n	d6e68 <_ZN7FatFile7seekSetEm+0x84>
   d6e0a:	e007      	b.n	d6e1c <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d6e0c:	0688      	lsls	r0, r1, #26
   d6e0e:	d505      	bpl.n	d6e1c <_ZN7FatFile7seekSetEm+0x38>
   d6e10:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d6e12:	891b      	ldrh	r3, [r3, #8]
   d6e14:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d6e18:	d826      	bhi.n	d6e68 <_ZN7FatFile7seekSetEm+0x84>
   d6e1a:	e023      	b.n	d6e64 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6e1c:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d6e20:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d6e24:	1e6a      	subs	r2, r5, #1
   d6e26:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6e2a:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6e2c:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6e2e:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d6e30:	429a      	cmp	r2, r3
   d6e32:	d800      	bhi.n	d6e36 <_ZN7FatFile7seekSetEm+0x52>
   d6e34:	b94d      	cbnz	r5, d6e4a <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6e36:	064a      	lsls	r2, r1, #25
   d6e38:	bf4c      	ite	mi
   d6e3a:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d6e3e:	6a22      	ldrpl	r2, [r4, #32]
   d6e40:	6122      	str	r2, [r4, #16]
   d6e42:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6e44:	f104 0810 	add.w	r8, r4, #16
   d6e48:	e00a      	b.n	d6e60 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d6e4a:	1a9b      	subs	r3, r3, r2
   d6e4c:	e7f9      	b.n	d6e42 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6e4e:	4642      	mov	r2, r8
   d6e50:	6921      	ldr	r1, [r4, #16]
   d6e52:	68a0      	ldr	r0, [r4, #8]
   d6e54:	f000 fb5d 	bl	d7512 <_ZN9FatVolume6fatGetEmPm>
   d6e58:	2800      	cmp	r0, #0
   d6e5a:	f105 35ff 	add.w	r5, r5, #4294967295
   d6e5e:	dd03      	ble.n	d6e68 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d6e60:	2d00      	cmp	r5, #0
   d6e62:	d1f4      	bne.n	d6e4e <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d6e64:	6166      	str	r6, [r4, #20]
   d6e66:	e003      	b.n	d6e70 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d6e68:	6127      	str	r7, [r4, #16]
  return false;
   d6e6a:	2000      	movs	r0, #0
   d6e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d6e70:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d6e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6e76 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e78:	460f      	mov	r7, r1
   d6e7a:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6e7c:	2100      	movs	r1, #0
   d6e7e:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6e80:	4604      	mov	r4, r0
   d6e82:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6e84:	f007 fc90 	bl	de7a8 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d6e88:	68b8      	ldr	r0, [r7, #8]
   d6e8a:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6e8c:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d6e90:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6e92:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d6e96:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d6e98:	6a3b      	ldr	r3, [r7, #32]
   d6e9a:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6e9c:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6e9e:	7acb      	ldrb	r3, [r1, #11]
   d6ea0:	071d      	lsls	r5, r3, #28
   d6ea2:	d44c      	bmi.n	d6f3e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d6ea4:	1883      	adds	r3, r0, r2
   d6ea6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6eaa:	f003 0317 	and.w	r3, r3, #23
   d6eae:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d6eb0:	7ac9      	ldrb	r1, [r1, #11]
   d6eb2:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d6eb6:	bf04      	itt	eq
   d6eb8:	f043 0308 	orreq.w	r3, r3, #8
   d6ebc:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d6ebe:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6ec2:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d6ec4:	f006 0303 	and.w	r3, r6, #3
   d6ec8:	2b01      	cmp	r3, #1
   d6eca:	d009      	beq.n	d6ee0 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d6ecc:	2b02      	cmp	r3, #2
   d6ece:	d005      	beq.n	d6edc <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d6ed0:	2b00      	cmp	r3, #0
   d6ed2:	d134      	bne.n	d6f3e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d6ed4:	0571      	lsls	r1, r6, #21
   d6ed6:	d432      	bmi.n	d6f3e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d6ed8:	2301      	movs	r3, #1
   d6eda:	e002      	b.n	d6ee2 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d6edc:	2303      	movs	r3, #3
   d6ede:	e000      	b.n	d6ee2 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d6ee0:	2302      	movs	r3, #2
   d6ee2:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d6ee4:	78a1      	ldrb	r1, [r4, #2]
   d6ee6:	078b      	lsls	r3, r1, #30
   d6ee8:	d503      	bpl.n	d6ef2 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d6eea:	7823      	ldrb	r3, [r4, #0]
   d6eec:	f013 0f11 	tst.w	r3, #17
   d6ef0:	d125      	bne.n	d6f3e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6ef2:	b24b      	sxtb	r3, r1
   d6ef4:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d6ef8:	f006 0108 	and.w	r1, r6, #8
   d6efc:	bf14      	ite	ne
   d6efe:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d6f02:	2700      	moveq	r7, #0
   d6f04:	4319      	orrs	r1, r3
   d6f06:	4339      	orrs	r1, r7
   d6f08:	70a1      	strb	r1, [r4, #2]
   d6f0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d6f0c:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6f0e:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d6f10:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d6f12:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d6f16:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d6f1a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d6f1e:	d504      	bpl.n	d6f2a <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6f20:	b181      	cbz	r1, d6f44 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6f22:	f000 fb96 	bl	d7652 <_ZN9FatVolume9freeChainEm>
   d6f26:	b968      	cbnz	r0, d6f44 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d6f28:	e009      	b.n	d6f3e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d6f2a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d6f2c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d6f2e:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6f30:	0473      	lsls	r3, r6, #17
   d6f32:	d50c      	bpl.n	d6f4e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d6f34:	69e1      	ldr	r1, [r4, #28]
   d6f36:	4620      	mov	r0, r4
   d6f38:	f7ff ff54 	bl	d6de4 <_ZN7FatFile7seekSetEm>
   d6f3c:	b938      	cbnz	r0, d6f4e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d6f3e:	2000      	movs	r0, #0
   d6f40:	7020      	strb	r0, [r4, #0]
  return false;
   d6f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d6f44:	78a3      	ldrb	r3, [r4, #2]
   d6f46:	f043 0304 	orr.w	r3, r3, #4
   d6f4a:	70a3      	strb	r3, [r4, #2]
   d6f4c:	e7f0      	b.n	d6f30 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d6f4e:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d6f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f52 <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6f52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6f56:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   d6f58:	4606      	mov	r6, r0
   d6f5a:	460d      	mov	r5, r1
   d6f5c:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   d6f5e:	bb53      	cbnz	r3, d6fb6 <_ZN7FatFile8openNextEPS_i+0x64>
   d6f60:	780b      	ldrb	r3, [r1, #0]
   d6f62:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6f66:	d026      	beq.n	d6fb6 <_ZN7FatFile8openNextEPS_i+0x64>
   d6f68:	694c      	ldr	r4, [r1, #20]
   d6f6a:	f014 041f 	ands.w	r4, r4, #31
   d6f6e:	d122      	bne.n	d6fb6 <_ZN7FatFile8openNextEPS_i+0x64>
   d6f70:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
   d6f72:	2100      	movs	r1, #0
   d6f74:	4628      	mov	r0, r5
   d6f76:	f8d5 9014 	ldr.w	r9, [r5, #20]
   d6f7a:	f7ff ff16 	bl	d6daa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6f7e:	b1d0      	cbz	r0, d6fb6 <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
   d6f80:	7803      	ldrb	r3, [r0, #0]
   d6f82:	b1c3      	cbz	r3, d6fb6 <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6f84:	2b2e      	cmp	r3, #46	; 0x2e
   d6f86:	d101      	bne.n	d6f8c <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
   d6f88:	2400      	movs	r4, #0
   d6f8a:	e7f2      	b.n	d6f72 <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   d6f8c:	2be5      	cmp	r3, #229	; 0xe5
   d6f8e:	d0fb      	beq.n	d6f88 <_ZN7FatFile8openNextEPS_i+0x36>
   d6f90:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6f92:	f011 0f08 	tst.w	r1, #8
   d6f96:	d105      	bne.n	d6fa4 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   d6f98:	b17c      	cbz	r4, d6fba <_ZN7FatFile8openNextEPS_i+0x68>
   d6f9a:	f7ff f98d 	bl	d62b8 <_ZN7FatFile11lfnChecksumEPh>
   d6f9e:	4580      	cmp	r8, r0
   d6fa0:	d109      	bne.n	d6fb6 <_ZN7FatFile8openNextEPS_i+0x64>
   d6fa2:	e00a      	b.n	d6fba <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6fa4:	290f      	cmp	r1, #15
   d6fa6:	d1ef      	bne.n	d6f88 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   d6fa8:	0659      	lsls	r1, r3, #25
   d6faa:	d5e2      	bpl.n	d6f72 <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
   d6fac:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
   d6fb0:	f890 800d 	ldrb.w	r8, [r0, #13]
   d6fb4:	e7dd      	b.n	d6f72 <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
   d6fb6:	2000      	movs	r0, #0
   d6fb8:	e007      	b.n	d6fca <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   d6fba:	9400      	str	r4, [sp, #0]
   d6fbc:	463b      	mov	r3, r7
   d6fbe:	f3c9 124f 	ubfx	r2, r9, #5, #16
   d6fc2:	4629      	mov	r1, r5
   d6fc4:	4630      	mov	r0, r6
   d6fc6:	f7ff ff56 	bl	d6e76 <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
   d6fca:	b003      	add	sp, #12
   d6fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6fd0 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6fd0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d6fd2:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6fd4:	4604      	mov	r4, r0
  if (!isOpen()) {
   d6fd6:	b90b      	cbnz	r3, d6fdc <_ZN7FatFile4syncEv+0xc>
    return true;
   d6fd8:	2001      	movs	r0, #1
   d6fda:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6fdc:	7883      	ldrb	r3, [r0, #2]
   d6fde:	075a      	lsls	r2, r3, #29
   d6fe0:	d523      	bpl.n	d702a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6fe2:	2101      	movs	r1, #1
   d6fe4:	f7ff fdca 	bl	d6b7c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6fe8:	4605      	mov	r5, r0
   d6fea:	b928      	cbnz	r0, d6ff8 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d6fec:	7863      	ldrb	r3, [r4, #1]
   d6fee:	f043 0301 	orr.w	r3, r3, #1
   d6ff2:	7063      	strb	r3, [r4, #1]
  return false;
   d6ff4:	2000      	movs	r0, #0
   d6ff6:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6ff8:	7803      	ldrb	r3, [r0, #0]
   d6ffa:	2be5      	cmp	r3, #229	; 0xe5
   d6ffc:	d0f6      	beq.n	d6fec <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d6ffe:	7823      	ldrb	r3, [r4, #0]
   d7000:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d7002:	bf44      	itt	mi
   d7004:	69e3      	ldrmi	r3, [r4, #28]
   d7006:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d7008:	8c23      	ldrh	r3, [r4, #32]
   d700a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d700c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d700e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d7010:	4b09      	ldr	r3, [pc, #36]	; (d7038 <_ZN7FatFile4syncEv+0x68>)
   d7012:	681b      	ldr	r3, [r3, #0]
   d7014:	b12b      	cbz	r3, d7022 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d7016:	f100 0116 	add.w	r1, r0, #22
   d701a:	3018      	adds	r0, #24
   d701c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d701e:	8b2b      	ldrh	r3, [r5, #24]
   d7020:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d7022:	78a3      	ldrb	r3, [r4, #2]
   d7024:	f023 0304 	bic.w	r3, r3, #4
   d7028:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d702a:	68a0      	ldr	r0, [r4, #8]
   d702c:	f7ff f937 	bl	d629e <_ZN9FatVolume9cacheSyncEv>
   d7030:	2800      	cmp	r0, #0
   d7032:	d0db      	beq.n	d6fec <_ZN7FatFile4syncEv+0x1c>
   d7034:	e7d0      	b.n	d6fd8 <_ZN7FatFile4syncEv+0x8>
   d7036:	bf00      	nop
   d7038:	2003e1e4 	.word	0x2003e1e4

000d703c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d703c:	b510      	push	{r4, lr}
   d703e:	4604      	mov	r4, r0
  bool rtn = sync();
   d7040:	f7ff ffc6 	bl	d6fd0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d7044:	2300      	movs	r3, #0
   d7046:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d7048:	bd10      	pop	{r4, pc}

000d704a <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d704a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d704c:	b093      	sub	sp, #76	; 0x4c
   d704e:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7050:	2300      	movs	r3, #0
   d7052:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d7056:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d705a:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d705c:	9201      	str	r2, [sp, #4]
   d705e:	4606      	mov	r6, r0
   d7060:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7062:	b10b      	cbz	r3, d7068 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d7064:	2000      	movs	r0, #0
   d7066:	e03d      	b.n	d70e4 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d7068:	780b      	ldrb	r3, [r1, #0]
   d706a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d706e:	d0f9      	beq.n	d7064 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d7070:	7813      	ldrb	r3, [r2, #0]
   d7072:	2b2f      	cmp	r3, #47	; 0x2f
   d7074:	d112      	bne.n	d709c <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d7076:	9b01      	ldr	r3, [sp, #4]
   d7078:	781a      	ldrb	r2, [r3, #0]
   d707a:	2a2f      	cmp	r2, #47	; 0x2f
   d707c:	d102      	bne.n	d7084 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d707e:	3301      	adds	r3, #1
   d7080:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d7082:	e7f8      	b.n	d7076 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d7084:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d7086:	b91a      	cbnz	r2, d7090 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d7088:	4630      	mov	r0, r6
   d708a:	f7ff fdb0 	bl	d6bee <_ZN7FatFile8openRootEP9FatVolume>
   d708e:	e029      	b.n	d70e4 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d7090:	a809      	add	r0, sp, #36	; 0x24
   d7092:	f7ff fdac 	bl	d6bee <_ZN7FatFile8openRootEP9FatVolume>
   d7096:	2800      	cmp	r0, #0
   d7098:	d0e4      	beq.n	d7064 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d709a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d709c:	aa01      	add	r2, sp, #4
   d709e:	a903      	add	r1, sp, #12
   d70a0:	9801      	ldr	r0, [sp, #4]
   d70a2:	f7ff f9a9 	bl	d63f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d70a6:	2800      	cmp	r0, #0
   d70a8:	d0dc      	beq.n	d7064 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d70aa:	9b01      	ldr	r3, [sp, #4]
   d70ac:	781b      	ldrb	r3, [r3, #0]
   d70ae:	b19b      	cbz	r3, d70d8 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d70b0:	2300      	movs	r3, #0
   d70b2:	aa03      	add	r2, sp, #12
   d70b4:	4621      	mov	r1, r4
   d70b6:	4630      	mov	r0, r6
   d70b8:	f7ff fb42 	bl	d6740 <_ZN7FatFile4openEPS_P7fname_ti>
   d70bc:	2800      	cmp	r0, #0
   d70be:	d0d1      	beq.n	d7064 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d70c0:	4635      	mov	r5, r6
   d70c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70c4:	ac09      	add	r4, sp, #36	; 0x24
   d70c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70cc:	682b      	ldr	r3, [r5, #0]
   d70ce:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d70d0:	4630      	mov	r0, r6
   d70d2:	f7ff ffb3 	bl	d703c <_ZN7FatFile5closeEv>
   d70d6:	e7e0      	b.n	d709a <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d70d8:	463b      	mov	r3, r7
   d70da:	aa03      	add	r2, sp, #12
   d70dc:	4621      	mov	r1, r4
   d70de:	4630      	mov	r0, r6
   d70e0:	f7ff fb2e 	bl	d6740 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d70e4:	b013      	add	sp, #76	; 0x4c
   d70e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d70e8 <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
   d70e8:	b500      	push	{lr}
   d70ea:	b08b      	sub	sp, #44	; 0x2c
   d70ec:	2300      	movs	r3, #0
   d70ee:	f88d 3004 	strb.w	r3, [sp, #4]
   d70f2:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
   d70f6:	460a      	mov	r2, r1
   d70f8:	2301      	movs	r3, #1
   d70fa:	4601      	mov	r1, r0
   d70fc:	a801      	add	r0, sp, #4
   d70fe:	f7ff ffa4 	bl	d704a <_ZN7FatFile4openEPS_PKci>
   d7102:	b110      	cbz	r0, d710a <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
   d7104:	a801      	add	r0, sp, #4
   d7106:	f7ff fa63 	bl	d65d0 <_ZN7FatFile6removeEv>

fail:
  return false;
}
   d710a:	b00b      	add	sp, #44	; 0x2c
   d710c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7110 <_ZN7FatFile5mkdirEPS_P7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d7110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  dir_t dot;
  dir_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
   d7114:	780b      	ldrb	r3, [r1, #0]
   d7116:	f013 0f70 	tst.w	r3, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   d711a:	b088      	sub	sp, #32
   d711c:	4604      	mov	r4, r0
   d711e:	460f      	mov	r7, r1
  uint32_t block;
  dir_t dot;
  dir_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
   d7120:	d01c      	beq.n	d715c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
   d7122:	f640 2302 	movw	r3, #2562	; 0xa02
   d7126:	f7ff fb0b 	bl	d6740 <_ZN7FatFile4openEPS_P7fname_ti>
   d712a:	b1b8      	cbz	r0, d715c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = F_READ;
   d712c:	2601      	movs	r6, #1
  m_attr = FILE_ATTR_SUBDIR;
   d712e:	2510      	movs	r5, #16
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = F_READ;
   d7130:	70a6      	strb	r6, [r4, #2]
  m_attr = FILE_ATTR_SUBDIR;
   d7132:	7025      	strb	r5, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
   d7134:	4620      	mov	r0, r4
   d7136:	f7ff fce1 	bl	d6afc <_ZN7FatFile13addDirClusterEv>
   d713a:	b178      	cbz	r0, d715c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
   d713c:	6923      	ldr	r3, [r4, #16]
   d713e:	6223      	str	r3, [r4, #32]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d7140:	2100      	movs	r1, #0
   d7142:	4620      	mov	r0, r4
   d7144:	f7ff fe4e 	bl	d6de4 <_ZN7FatFile7seekSetEm>
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
   d7148:	4620      	mov	r0, r4
   d714a:	f7ff ff41 	bl	d6fd0 <_ZN7FatFile4syncEv>
   d714e:	b128      	cbz	r0, d715c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d7150:	4631      	mov	r1, r6
   d7152:	4620      	mov	r0, r4
   d7154:	f7ff fd12 	bl	d6b7c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   d7158:	4603      	mov	r3, r0
   d715a:	b908      	cbnz	r0, d7160 <_ZN7FatFile5mkdirEPS_P7fname_t+0x50>
  memcpy(&pc->dir[1], &dot, sizeof(dot));
  // write first block
  return m_vol->cacheSync();

fail:
  return false;
   d715c:	2000      	movs	r0, #0
   d715e:	e051      	b.n	d7204 <_ZN7FatFile5mkdirEPS_P7fname_t+0xf4>
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = DIR_ATT_DIRECTORY;
   d7160:	72c5      	strb	r5, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
   d7162:	4602      	mov	r2, r0
   d7164:	466e      	mov	r6, sp
   d7166:	f100 0c20 	add.w	ip, r0, #32
   d716a:	466d      	mov	r5, sp
   d716c:	6810      	ldr	r0, [r2, #0]
   d716e:	6851      	ldr	r1, [r2, #4]
   d7170:	46b6      	mov	lr, r6
   d7172:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d7176:	3208      	adds	r2, #8
   d7178:	4562      	cmp	r2, ip
   d717a:	4676      	mov	r6, lr
   d717c:	d1f6      	bne.n	d716c <_ZN7FatFile5mkdirEPS_P7fname_t+0x5c>
   d717e:	f8b3 8014 	ldrh.w	r8, [r3, #20]
   d7182:	8b5e      	ldrh	r6, [r3, #26]
  dot.name[0] = '.';
   d7184:	232e      	movs	r3, #46	; 0x2e
   d7186:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
   d718a:	2120      	movs	r1, #32
  // change directory entry  attribute
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
   d718c:	2300      	movs	r3, #0
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
   d718e:	18ea      	adds	r2, r5, r3
   d7190:	3301      	adds	r3, #1
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
   d7192:	2b0a      	cmp	r3, #10
    dot.name[i] = ' ';
   d7194:	7051      	strb	r1, [r2, #1]
  dir->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
   d7196:	d1fa      	bne.n	d718e <_ZN7FatFile5mkdirEPS_P7fname_t+0x7e>
    dot.name[i] = ' ';
  }

  // cache block for '.'  and '..'
  block = m_vol->clusterFirstBlock(m_firstCluster);
   d7198:	6a21      	ldr	r1, [r4, #32]
   d719a:	68a0      	ldr	r0, [r4, #8]
   d719c:	f000 f9b3 	bl	d7506 <_ZNK9FatVolume17clusterFirstBlockEm>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d71a0:	68a3      	ldr	r3, [r4, #8]
   d71a2:	4601      	mov	r1, r0
   d71a4:	2201      	movs	r2, #1
   d71a6:	f103 0024 	add.w	r0, r3, #36	; 0x24
   d71aa:	f000 f988 	bl	d74be <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
   d71ae:	4603      	mov	r3, r0
   d71b0:	2800      	cmp	r0, #0
   d71b2:	d0d3      	beq.n	d715c <_ZN7FatFile5mkdirEPS_P7fname_t+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to block
  memcpy(&pc->dir[0], &dot, sizeof(dot));
   d71b4:	f8ad 601a 	strh.w	r6, [sp, #26]
   d71b8:	f8ad 8014 	strh.w	r8, [sp, #20]
   d71bc:	46ae      	mov	lr, r5
   d71be:	4606      	mov	r6, r0
   d71c0:	f10d 0c20 	add.w	ip, sp, #32
   d71c4:	4672      	mov	r2, lr
   d71c6:	ca03      	ldmia	r2!, {r0, r1}
   d71c8:	4562      	cmp	r2, ip
   d71ca:	6030      	str	r0, [r6, #0]
   d71cc:	6071      	str	r1, [r6, #4]
   d71ce:	4696      	mov	lr, r2
   d71d0:	f106 0608 	add.w	r6, r6, #8
   d71d4:	d1f6      	bne.n	d71c4 <_ZN7FatFile5mkdirEPS_P7fname_t+0xb4>
  // make entry for '..'
  dot.name[1] = '.';
   d71d6:	222e      	movs	r2, #46	; 0x2e
   d71d8:	f88d 2001 	strb.w	r2, [sp, #1]
  dot.firstClusterLow = parent->m_firstCluster & 0XFFFF;
   d71dc:	6a3a      	ldr	r2, [r7, #32]
  dot.firstClusterHigh = parent->m_firstCluster >> 16;
  // copy '..' to block
  memcpy(&pc->dir[1], &dot, sizeof(dot));
   d71de:	f8ad 201a 	strh.w	r2, [sp, #26]
   d71e2:	0c11      	lsrs	r1, r2, #16
   d71e4:	f8ad 1014 	strh.w	r1, [sp, #20]
   d71e8:	3320      	adds	r3, #32
   d71ea:	ae08      	add	r6, sp, #32
   d71ec:	462a      	mov	r2, r5
   d71ee:	ca03      	ldmia	r2!, {r0, r1}
   d71f0:	42b2      	cmp	r2, r6
   d71f2:	6018      	str	r0, [r3, #0]
   d71f4:	6059      	str	r1, [r3, #4]
   d71f6:	4615      	mov	r5, r2
   d71f8:	f103 0308 	add.w	r3, r3, #8
   d71fc:	d1f6      	bne.n	d71ec <_ZN7FatFile5mkdirEPS_P7fname_t+0xdc>
  // write first block
  return m_vol->cacheSync();
   d71fe:	68a0      	ldr	r0, [r4, #8]
   d7200:	f7ff f84d 	bl	d629e <_ZN9FatVolume9cacheSyncEv>

fail:
  return false;
}
   d7204:	b008      	add	sp, #32
   d7206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d720a <_ZN7FatFile5mkdirEPS_PKcb>:
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
  pos->cluster = m_curCluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d720a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d720c:	b093      	sub	sp, #76	; 0x4c
   d720e:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d7210:	2300      	movs	r3, #0
   d7212:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d7216:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
   d721a:	7803      	ldrb	r3, [r0, #0]
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
  pos->cluster = m_curCluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   d721c:	9201      	str	r2, [sp, #4]
   d721e:	4606      	mov	r6, r0
   d7220:	460c      	mov	r4, r1
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
   d7222:	2b00      	cmp	r3, #0
   d7224:	d13e      	bne.n	d72a4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
   d7226:	780b      	ldrb	r3, [r1, #0]
   d7228:	f013 0f70 	tst.w	r3, #112	; 0x70
   d722c:	d03a      	beq.n	d72a4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d722e:	7813      	ldrb	r3, [r2, #0]
   d7230:	2b2f      	cmp	r3, #47	; 0x2f
   d7232:	d10c      	bne.n	d724e <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
   d7234:	9b01      	ldr	r3, [sp, #4]
   d7236:	781a      	ldrb	r2, [r3, #0]
   d7238:	2a2f      	cmp	r2, #47	; 0x2f
   d723a:	d102      	bne.n	d7242 <_ZN7FatFile5mkdirEPS_PKcb+0x38>
      path++;
   d723c:	3301      	adds	r3, #1
   d723e:	9301      	str	r3, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d7240:	e7f8      	b.n	d7234 <_ZN7FatFile5mkdirEPS_PKcb+0x2a>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
   d7242:	68a1      	ldr	r1, [r4, #8]
   d7244:	a809      	add	r0, sp, #36	; 0x24
   d7246:	f7ff fcd2 	bl	d6bee <_ZN7FatFile8openRootEP9FatVolume>
   d724a:	b358      	cbz	r0, d72a4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
   d724c:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d724e:	aa01      	add	r2, sp, #4
   d7250:	a903      	add	r1, sp, #12
   d7252:	9801      	ldr	r0, [sp, #4]
   d7254:	f7ff f8d0 	bl	d63f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d7258:	b320      	cbz	r0, d72a4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
   d725a:	9b01      	ldr	r3, [sp, #4]
   d725c:	781b      	ldrb	r3, [r3, #0]
   d725e:	b1db      	cbz	r3, d7298 <_ZN7FatFile5mkdirEPS_PKcb+0x8e>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
   d7260:	2300      	movs	r3, #0
   d7262:	aa03      	add	r2, sp, #12
   d7264:	4621      	mov	r1, r4
   d7266:	4630      	mov	r0, r6
   d7268:	f7ff fa6a 	bl	d6740 <_ZN7FatFile4openEPS_P7fname_ti>
   d726c:	b158      	cbz	r0, d7286 <_ZN7FatFile5mkdirEPS_PKcb+0x7c>
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
   d726e:	4635      	mov	r5, r6
   d7270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7272:	ac09      	add	r4, sp, #36	; 0x24
   d7274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d727a:	682b      	ldr	r3, [r5, #0]
   d727c:	6023      	str	r3, [r4, #0]
    parent = &tmpDir;
    close();
   d727e:	4630      	mov	r0, r6
   d7280:	f7ff fedc 	bl	d703c <_ZN7FatFile5closeEv>
   d7284:	e7e2      	b.n	d724c <_ZN7FatFile5mkdirEPS_PKcb+0x42>
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
   d7286:	b16f      	cbz	r7, d72a4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
   d7288:	aa03      	add	r2, sp, #12
   d728a:	4621      	mov	r1, r4
   d728c:	4630      	mov	r0, r6
   d728e:	f7ff ff3f 	bl	d7110 <_ZN7FatFile5mkdirEPS_P7fname_t>
   d7292:	2800      	cmp	r0, #0
   d7294:	d1eb      	bne.n	d726e <_ZN7FatFile5mkdirEPS_PKcb+0x64>
   d7296:	e005      	b.n	d72a4 <_ZN7FatFile5mkdirEPS_PKcb+0x9a>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
   d7298:	aa03      	add	r2, sp, #12
   d729a:	4621      	mov	r1, r4
   d729c:	4630      	mov	r0, r6
   d729e:	f7ff ff37 	bl	d7110 <_ZN7FatFile5mkdirEPS_P7fname_t>
   d72a2:	e000      	b.n	d72a6 <_ZN7FatFile5mkdirEPS_PKcb+0x9c>

fail:
  return false;
   d72a4:	2000      	movs	r0, #0
}
   d72a6:	b013      	add	sp, #76	; 0x4c
   d72a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d72ac <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d72ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d72b0:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d72b2:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d72b4:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d72b6:	4604      	mov	r4, r0
   d72b8:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d72ba:	d508      	bpl.n	d72ce <_ZN7FatFile5writeEPKvj+0x22>
   d72bc:	7883      	ldrb	r3, [r0, #2]
   d72be:	079a      	lsls	r2, r3, #30
   d72c0:	d505      	bpl.n	d72ce <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d72c2:	071b      	lsls	r3, r3, #28
   d72c4:	d50b      	bpl.n	d72de <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d72c6:	69e1      	ldr	r1, [r4, #28]
   d72c8:	f7ff fd8c 	bl	d6de4 <_ZN7FatFile7seekSetEm>
   d72cc:	b938      	cbnz	r0, d72de <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d72ce:	7863      	ldrb	r3, [r4, #1]
   d72d0:	f043 0301 	orr.w	r3, r3, #1
   d72d4:	7063      	strb	r3, [r4, #1]
  return -1;
   d72d6:	f04f 30ff 	mov.w	r0, #4294967295
   d72da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d72de:	6963      	ldr	r3, [r4, #20]
   d72e0:	43db      	mvns	r3, r3
   d72e2:	4598      	cmp	r8, r3
   d72e4:	d8f3      	bhi.n	d72ce <_ZN7FatFile5writeEPKvj+0x22>
   d72e6:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d72e8:	f04f 0a00 	mov.w	sl, #0
   d72ec:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d72ee:	2e00      	cmp	r6, #0
   d72f0:	f000 8081 	beq.w	d73f6 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d72f4:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d72f6:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d72f8:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d72fc:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d7300:	d11c      	bne.n	d733c <_ZN7FatFile5writeEPKvj+0x90>
   d7302:	b9df      	cbnz	r7, d733c <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d7304:	6921      	ldr	r1, [r4, #16]
   d7306:	b171      	cbz	r1, d7326 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d7308:	f104 0210 	add.w	r2, r4, #16
   d730c:	f000 f901 	bl	d7512 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d7310:	2800      	cmp	r0, #0
   d7312:	dbdc      	blt.n	d72ce <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d7314:	f040 808e 	bne.w	d7434 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d7318:	4620      	mov	r0, r4
   d731a:	f7ff fbe4 	bl	d6ae6 <_ZN7FatFile10addClusterEv>
   d731e:	2800      	cmp	r0, #0
   d7320:	f040 8088 	bne.w	d7434 <_ZN7FatFile5writeEPKvj+0x188>
   d7324:	e7d3      	b.n	d72ce <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d7326:	6a23      	ldr	r3, [r4, #32]
   d7328:	b93b      	cbnz	r3, d733a <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d732a:	4620      	mov	r0, r4
   d732c:	f7ff fbdb 	bl	d6ae6 <_ZN7FatFile10addClusterEv>
   d7330:	2800      	cmp	r0, #0
   d7332:	d0cc      	beq.n	d72ce <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d7334:	6923      	ldr	r3, [r4, #16]
   d7336:	6223      	str	r3, [r4, #32]
   d7338:	e000      	b.n	d733c <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d733a:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d733c:	6921      	ldr	r1, [r4, #16]
   d733e:	68a0      	ldr	r0, [r4, #8]
   d7340:	f000 f8e1 	bl	d7506 <_ZNK9FatVolume17clusterFirstBlockEm>
   d7344:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d7346:	b917      	cbnz	r7, d734e <_ZN7FatFile5writeEPKvj+0xa2>
   d7348:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d734c:	d221      	bcs.n	d7392 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d734e:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d7352:	42b5      	cmp	r5, r6
   d7354:	bf28      	it	cs
   d7356:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d7358:	b937      	cbnz	r7, d7368 <_ZN7FatFile5writeEPKvj+0xbc>
   d735a:	6963      	ldr	r3, [r4, #20]
   d735c:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d735e:	4293      	cmp	r3, r2
   d7360:	bf34      	ite	cc
   d7362:	2201      	movcc	r2, #1
   d7364:	2205      	movcs	r2, #5
   d7366:	e000      	b.n	d736a <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d7368:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d736a:	68a0      	ldr	r0, [r4, #8]
   d736c:	3024      	adds	r0, #36	; 0x24
   d736e:	f000 f8a6 	bl	d74be <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d7372:	2800      	cmp	r0, #0
   d7374:	d0ab      	beq.n	d72ce <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d7376:	4438      	add	r0, r7
   d7378:	462a      	mov	r2, r5
   d737a:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d737c:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d737e:	f007 fa08 	bl	de792 <memcpy>
      if (512 == (n + blockOffset)) {
   d7382:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d7386:	d130      	bne.n	d73ea <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d7388:	68a0      	ldr	r0, [r4, #8]
   d738a:	3024      	adds	r0, #36	; 0x24
   d738c:	f000 f870 	bl	d7470 <_ZN8FatCache4syncEv>
   d7390:	e017      	b.n	d73c2 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d7392:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d7396:	68a0      	ldr	r0, [r4, #8]
   d7398:	d315      	bcc.n	d73c6 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d739a:	7902      	ldrb	r2, [r0, #4]
   d739c:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d739e:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d73a0:	b2d2      	uxtb	r2, r2
   d73a2:	4293      	cmp	r3, r2
   d73a4:	bf28      	it	cs
   d73a6:	4613      	movcs	r3, r2
   d73a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d73aa:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d73ac:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d73b0:	d302      	bcc.n	d73b8 <_ZN7FatFile5writeEPKvj+0x10c>
   d73b2:	441a      	add	r2, r3
   d73b4:	4291      	cmp	r1, r2
   d73b6:	d337      	bcc.n	d7428 <_ZN7FatFile5writeEPKvj+0x17c>
   d73b8:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d73ba:	464a      	mov	r2, r9
   d73bc:	6838      	ldr	r0, [r7, #0]
   d73be:	f000 fc6d 	bl	d7c9c <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d73c2:	b990      	cbnz	r0, d73ea <_ZN7FatFile5writeEPKvj+0x13e>
   d73c4:	e783      	b.n	d72ce <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d73c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d73c8:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d73ca:	bf02      	ittt	eq
   d73cc:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d73d0:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d73d4:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d73d6:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d73d8:	464a      	mov	r2, r9
   d73da:	6818      	ldr	r0, [r3, #0]
   d73dc:	f000 fbec 	bl	d7bb8 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d73e0:	2800      	cmp	r0, #0
   d73e2:	f43f af74 	beq.w	d72ce <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d73e6:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d73ea:	6963      	ldr	r3, [r4, #20]
   d73ec:	442b      	add	r3, r5
   d73ee:	6163      	str	r3, [r4, #20]
    src += n;
   d73f0:	44a9      	add	r9, r5
    nToWrite -= n;
   d73f2:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d73f4:	e77a      	b.n	d72ec <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d73f6:	69e2      	ldr	r2, [r4, #28]
   d73f8:	4293      	cmp	r3, r2
   d73fa:	d901      	bls.n	d7400 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d73fc:	61e3      	str	r3, [r4, #28]
   d73fe:	e002      	b.n	d7406 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d7400:	4b0f      	ldr	r3, [pc, #60]	; (d7440 <_ZN7FatFile5writeEPKvj+0x194>)
   d7402:	681b      	ldr	r3, [r3, #0]
   d7404:	b11b      	cbz	r3, d740e <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d7406:	78a3      	ldrb	r3, [r4, #2]
   d7408:	f043 0304 	orr.w	r3, r3, #4
   d740c:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d740e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d7412:	2b00      	cmp	r3, #0
   d7414:	db02      	blt.n	d741c <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d7416:	4640      	mov	r0, r8
   d7418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d741c:	4620      	mov	r0, r4
   d741e:	f7ff fdd7 	bl	d6fd0 <_ZN7FatFile4syncEv>
   d7422:	2800      	cmp	r0, #0
   d7424:	d1f7      	bne.n	d7416 <_ZN7FatFile5writeEPKvj+0x16a>
   d7426:	e752      	b.n	d72ce <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7428:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d742c:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7430:	62c2      	str	r2, [r0, #44]	; 0x2c
   d7432:	e7c1      	b.n	d73b8 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d7434:	6921      	ldr	r1, [r4, #16]
   d7436:	68a0      	ldr	r0, [r4, #8]
   d7438:	f000 f865 	bl	d7506 <_ZNK9FatVolume17clusterFirstBlockEm>
   d743c:	4601      	mov	r1, r0
   d743e:	e783      	b.n	d7348 <_ZN7FatFile5writeEPKvj+0x9c>
   d7440:	2003e1e4 	.word	0x2003e1e4

000d7444 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d7444:	f001 bf6a 	b.w	d931c <HAL_Pin_Map>

000d7448 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7448:	b570      	push	{r4, r5, r6, lr}
   d744a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d744c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d744e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7450:	b149      	cbz	r1, d7466 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7452:	f008 f977 	bl	df744 <strlen>
   d7456:	682b      	ldr	r3, [r5, #0]
   d7458:	4602      	mov	r2, r0
   d745a:	4621      	mov	r1, r4
   d745c:	4628      	mov	r0, r5
   d745e:	68db      	ldr	r3, [r3, #12]
    }
   d7460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7464:	4718      	bx	r3
    }
   d7466:	bd70      	pop	{r4, r5, r6, pc}

000d7468 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d7468:	f001 bf58 	b.w	d931c <HAL_Pin_Map>

000d746c <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d746c:	f001 bf56 	b.w	d931c <HAL_Pin_Map>

000d7470 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7470:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d7472:	7803      	ldrb	r3, [r0, #0]
   d7474:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7476:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d7478:	d51e      	bpl.n	d74b8 <_ZN8FatCache4syncEv+0x48>
   d747a:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d747c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d747e:	f100 060c 	add.w	r6, r0, #12
   d7482:	4632      	mov	r2, r6
   d7484:	6818      	ldr	r0, [r3, #0]
   d7486:	f000 fb97 	bl	d7bb8 <_ZN9SdSpiCard10writeBlockEmPKh>
   d748a:	4605      	mov	r5, r0
   d748c:	b908      	cbnz	r0, d7492 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d748e:	2500      	movs	r5, #0
   d7490:	e013      	b.n	d74ba <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d7492:	7823      	ldrb	r3, [r4, #0]
   d7494:	079b      	lsls	r3, r3, #30
   d7496:	d404      	bmi.n	d74a2 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d7498:	7823      	ldrb	r3, [r4, #0]
   d749a:	f023 0301 	bic.w	r3, r3, #1
   d749e:	7023      	strb	r3, [r4, #0]
   d74a0:	e00b      	b.n	d74ba <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d74a2:	6863      	ldr	r3, [r4, #4]
   d74a4:	68a0      	ldr	r0, [r4, #8]
   d74a6:	6919      	ldr	r1, [r3, #16]
   d74a8:	4632      	mov	r2, r6
   d74aa:	4401      	add	r1, r0
   d74ac:	6818      	ldr	r0, [r3, #0]
   d74ae:	f000 fb83 	bl	d7bb8 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d74b2:	2800      	cmp	r0, #0
   d74b4:	d1f0      	bne.n	d7498 <_ZN8FatCache4syncEv+0x28>
   d74b6:	e7ea      	b.n	d748e <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d74b8:	2501      	movs	r5, #1

fail:
  return false;
}
   d74ba:	4628      	mov	r0, r5
   d74bc:	bd70      	pop	{r4, r5, r6, pc}

000d74be <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d74be:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d74c0:	6883      	ldr	r3, [r0, #8]
   d74c2:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d74c4:	4604      	mov	r4, r0
   d74c6:	460e      	mov	r6, r1
   d74c8:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d74ca:	d014      	beq.n	d74f6 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d74cc:	f7ff ffd0 	bl	d7470 <_ZN8FatCache4syncEv>
   d74d0:	b908      	cbnz	r0, d74d6 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d74d2:	2000      	movs	r0, #0
   d74d4:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d74d6:	076b      	lsls	r3, r5, #29
   d74d8:	d503      	bpl.n	d74e2 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d74da:	2300      	movs	r3, #0
   d74dc:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d74de:	60a6      	str	r6, [r4, #8]
   d74e0:	e009      	b.n	d74f6 <_ZN8FatCache4readEmh+0x38>
   d74e2:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d74e4:	f104 020c 	add.w	r2, r4, #12
   d74e8:	4631      	mov	r1, r6
   d74ea:	6818      	ldr	r0, [r3, #0]
   d74ec:	f000 fada 	bl	d7aa4 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d74f0:	2800      	cmp	r0, #0
   d74f2:	d1f2      	bne.n	d74da <_ZN8FatCache4readEmh+0x1c>
   d74f4:	e7ed      	b.n	d74d2 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d74f6:	7823      	ldrb	r3, [r4, #0]
   d74f8:	4620      	mov	r0, r4
   d74fa:	f005 0503 	and.w	r5, r5, #3
   d74fe:	431d      	orrs	r5, r3
   d7500:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d7504:	bd70      	pop	{r4, r5, r6, pc}

000d7506 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d7506:	7983      	ldrb	r3, [r0, #6]
   d7508:	6940      	ldr	r0, [r0, #20]
   d750a:	3902      	subs	r1, #2
   d750c:	4099      	lsls	r1, r3
}
   d750e:	4408      	add	r0, r1
   d7510:	4770      	bx	lr

000d7512 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7512:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d7514:	b570      	push	{r4, r5, r6, lr}
   d7516:	4605      	mov	r5, r0
   d7518:	460c      	mov	r4, r1
   d751a:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d751c:	d802      	bhi.n	d7524 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d751e:	f04f 30ff 	mov.w	r0, #4294967295
   d7522:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7524:	69c3      	ldr	r3, [r0, #28]
   d7526:	4299      	cmp	r1, r3
   d7528:	d8f9      	bhi.n	d751e <_ZN9FatVolume6fatGetEmPm+0xc>
   d752a:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d752c:	2b20      	cmp	r3, #32
   d752e:	d110      	bne.n	d7552 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d7530:	6981      	ldr	r1, [r0, #24]
   d7532:	2202      	movs	r2, #2
   d7534:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7538:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d753c:	f7ff ffbf 	bl	d74be <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7540:	2800      	cmp	r0, #0
   d7542:	d0ec      	beq.n	d751e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d7544:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7548:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d754c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d7550:	e00f      	b.n	d7572 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d7552:	2b10      	cmp	r3, #16
   d7554:	d1e3      	bne.n	d751e <_ZN9FatVolume6fatGetEmPm+0xc>
   d7556:	6983      	ldr	r3, [r0, #24]
   d7558:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d755c:	2202      	movs	r2, #2
   d755e:	4419      	add	r1, r3
   d7560:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7564:	f7ff ffab 	bl	d74be <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d7568:	2800      	cmp	r0, #0
   d756a:	d0d8      	beq.n	d751e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d756c:	b2e4      	uxtb	r4, r4
   d756e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d7572:	69ea      	ldr	r2, [r5, #28]
   d7574:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d7576:	bf9a      	itte	ls
   d7578:	6033      	strls	r3, [r6, #0]
  return 1;
   d757a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d757c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d757e:	bd70      	pop	{r4, r5, r6, pc}

000d7580 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7580:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d7582:	b538      	push	{r3, r4, r5, lr}
   d7584:	460c      	mov	r4, r1
   d7586:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7588:	d801      	bhi.n	d758e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d758a:	2000      	movs	r0, #0
   d758c:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d758e:	69c3      	ldr	r3, [r0, #28]
   d7590:	4299      	cmp	r1, r3
   d7592:	d8fa      	bhi.n	d758a <_ZN9FatVolume6fatPutEmm+0xa>
   d7594:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d7596:	2b20      	cmp	r3, #32
   d7598:	d10e      	bne.n	d75b8 <_ZN9FatVolume6fatPutEmm+0x38>
   d759a:	6981      	ldr	r1, [r0, #24]
   d759c:	2203      	movs	r2, #3
   d759e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d75a2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d75a6:	f7ff ff8a 	bl	d74be <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d75aa:	2800      	cmp	r0, #0
   d75ac:	d0ed      	beq.n	d758a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d75ae:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d75b2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d75b6:	e00f      	b.n	d75d8 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d75b8:	2b10      	cmp	r3, #16
   d75ba:	d1e6      	bne.n	d758a <_ZN9FatVolume6fatPutEmm+0xa>
   d75bc:	6983      	ldr	r3, [r0, #24]
   d75be:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d75c2:	2203      	movs	r2, #3
   d75c4:	4419      	add	r1, r3
   d75c6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d75ca:	f7ff ff78 	bl	d74be <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d75ce:	2800      	cmp	r0, #0
   d75d0:	d0db      	beq.n	d758a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d75d2:	b2e4      	uxtb	r4, r4
   d75d4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d75d8:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d75da:	bd38      	pop	{r3, r4, r5, pc}

000d75dc <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d75dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d75e0:	68c4      	ldr	r4, [r0, #12]
   d75e2:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d75e4:	4605      	mov	r5, r0
   d75e6:	460e      	mov	r6, r1
   d75e8:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d75ea:	d207      	bcs.n	d75fc <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d75ec:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d75ee:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d75f0:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d75f2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d75f4:	429c      	cmp	r4, r3
   d75f6:	d903      	bls.n	d7600 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d75f8:	b9cf      	cbnz	r7, d762e <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d75fa:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d75fc:	2701      	movs	r7, #1
   d75fe:	e7f7      	b.n	d75f0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d7600:	42a6      	cmp	r6, r4
   d7602:	d014      	beq.n	d762e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d7604:	aa01      	add	r2, sp, #4
   d7606:	4621      	mov	r1, r4
   d7608:	4628      	mov	r0, r5
   d760a:	f7ff ff82 	bl	d7512 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d760e:	2800      	cmp	r0, #0
   d7610:	db0d      	blt.n	d762e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d7612:	d0ed      	beq.n	d75f0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d7614:	9b01      	ldr	r3, [sp, #4]
   d7616:	2b00      	cmp	r3, #0
   d7618:	d1ea      	bne.n	d75f0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d761a:	b107      	cbz	r7, d761e <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d761c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d761e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d7622:	4621      	mov	r1, r4
   d7624:	4628      	mov	r0, r5
   d7626:	f7ff ffab 	bl	d7580 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d762a:	4607      	mov	r7, r0
   d762c:	b908      	cbnz	r0, d7632 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d762e:	2700      	movs	r7, #0
   d7630:	e00b      	b.n	d764a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d7632:	b916      	cbnz	r6, d763a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d7634:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d7638:	e007      	b.n	d764a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d763a:	4622      	mov	r2, r4
   d763c:	4631      	mov	r1, r6
   d763e:	4628      	mov	r0, r5
   d7640:	f7ff ff9e 	bl	d7580 <_ZN9FatVolume6fatPutEmm>
   d7644:	2800      	cmp	r0, #0
   d7646:	d1f5      	bne.n	d7634 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d7648:	e7f1      	b.n	d762e <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d764a:	4638      	mov	r0, r7
   d764c:	b002      	add	sp, #8
   d764e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7652 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d7652:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7654:	4605      	mov	r5, r0
   d7656:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d7658:	aa01      	add	r2, sp, #4
   d765a:	4621      	mov	r1, r4
   d765c:	4628      	mov	r0, r5
   d765e:	f7ff ff58 	bl	d7512 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7662:	1e06      	subs	r6, r0, #0
   d7664:	da01      	bge.n	d766a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d7666:	2000      	movs	r0, #0
   d7668:	e00f      	b.n	d768a <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d766a:	2200      	movs	r2, #0
   d766c:	4621      	mov	r1, r4
   d766e:	4628      	mov	r0, r5
   d7670:	f7ff ff86 	bl	d7580 <_ZN9FatVolume6fatPutEmm>
   d7674:	2800      	cmp	r0, #0
   d7676:	d0f6      	beq.n	d7666 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d7678:	68eb      	ldr	r3, [r5, #12]
   d767a:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d767c:	bf9c      	itt	ls
   d767e:	f104 34ff 	addls.w	r4, r4, #4294967295
   d7682:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d7684:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d7686:	2e00      	cmp	r6, #0
   d7688:	d1e6      	bne.n	d7658 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d768a:	b002      	add	sp, #8
   d768c:	bd70      	pop	{r4, r5, r6, pc}

000d768e <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d768e:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d7690:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d7692:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d7694:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d7696:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d7698:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d769c:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d769e:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d76a0:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d76a2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d76a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d76a8:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d76ac:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d76b0:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d76b4:	b1a1      	cbz	r1, d76e0 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d76b6:	2904      	cmp	r1, #4
   d76b8:	d85d      	bhi.n	d7776 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d76ba:	4611      	mov	r1, r2
   d76bc:	3024      	adds	r0, #36	; 0x24
   d76be:	f7ff fefe 	bl	d74be <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d76c2:	2800      	cmp	r0, #0
   d76c4:	d057      	beq.n	d7776 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d76c6:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d76ca:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d76ce:	065b      	lsls	r3, r3, #25
   d76d0:	d151      	bne.n	d7776 <_ZN9FatVolume4initEh+0xe8>
   d76d2:	351b      	adds	r5, #27
   d76d4:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d76d8:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d76dc:	2d00      	cmp	r5, #0
   d76de:	d04a      	beq.n	d7776 <_ZN9FatVolume4initEh+0xe8>
   d76e0:	2200      	movs	r2, #0
   d76e2:	4629      	mov	r1, r5
   d76e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d76e8:	f7ff fee9 	bl	d74be <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d76ec:	2800      	cmp	r0, #0
   d76ee:	d042      	beq.n	d7776 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d76f0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d76f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d76f8:	d13d      	bne.n	d7776 <_ZN9FatVolume4initEh+0xe8>
   d76fa:	7c03      	ldrb	r3, [r0, #16]
   d76fc:	2b02      	cmp	r3, #2
   d76fe:	d13a      	bne.n	d7776 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d7700:	89c3      	ldrh	r3, [r0, #14]
   d7702:	2b00      	cmp	r3, #0
   d7704:	d037      	beq.n	d7776 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d7706:	7b41      	ldrb	r1, [r0, #13]
   d7708:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d770a:	1e4b      	subs	r3, r1, #1
   d770c:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d770e:	2300      	movs	r3, #0
   d7710:	71a3      	strb	r3, [r4, #6]
   d7712:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7714:	2301      	movs	r3, #1
   d7716:	428b      	cmp	r3, r1
   d7718:	d007      	beq.n	d772a <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d771a:	3e01      	subs	r6, #1
   d771c:	d02b      	beq.n	d7776 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d771e:	79a2      	ldrb	r2, [r4, #6]
   d7720:	005b      	lsls	r3, r3, #1
   d7722:	3201      	adds	r2, #1
   d7724:	b2db      	uxtb	r3, r3
   d7726:	71a2      	strb	r2, [r4, #6]
   d7728:	e7f5      	b.n	d7716 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d772a:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d772c:	b902      	cbnz	r2, d7730 <_ZN9FatVolume4initEh+0xa2>
   d772e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d7730:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d7732:	89c6      	ldrh	r6, [r0, #14]
   d7734:	442e      	add	r6, r5
   d7736:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d7738:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d773c:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d773e:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d7742:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d7744:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d7748:	0152      	lsls	r2, r2, #5
   d774a:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d774e:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d7752:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d7754:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d7758:	b903      	cbnz	r3, d775c <_ZN9FatVolume4initEh+0xce>
   d775a:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d775c:	1aad      	subs	r5, r5, r2
   d775e:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d7760:	79a5      	ldrb	r5, [r4, #6]
   d7762:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d7766:	1c6b      	adds	r3, r5, #1
   d7768:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d776a:	f640 73f4 	movw	r3, #4084	; 0xff4
   d776e:	429d      	cmp	r5, r3
   d7770:	d803      	bhi.n	d777a <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d7772:	230c      	movs	r3, #12
   d7774:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7776:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d7778:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d777a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d777e:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d7780:	bf85      	ittet	hi
   d7782:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d7784:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d7786:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d7788:	2320      	movhi	r3, #32
   d778a:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d778c:	2001      	movs	r0, #1

fail:
  return false;
}
   d778e:	bd70      	pop	{r4, r5, r6, pc}

000d7790 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d7790:	f001 bdc4 	b.w	d931c <HAL_Pin_Map>

000d7794 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d7794:	f001 bdc2 	b.w	d931c <HAL_Pin_Map>

000d7798 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d7798:	f001 bdc0 	b.w	d931c <HAL_Pin_Map>

000d779c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d779c:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d779e:	4c0e      	ldr	r4, [pc, #56]	; (d77d8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d77a0:	460e      	mov	r6, r1
   d77a2:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d77a4:	f001 fe52 	bl	d944c <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d77a8:	6823      	ldr	r3, [r4, #0]
   d77aa:	1ac0      	subs	r0, r0, r3
   d77ac:	4b0b      	ldr	r3, [pc, #44]	; (d77dc <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d77ae:	4298      	cmp	r0, r3
   d77b0:	d908      	bls.n	d77c4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d77b2:	f001 fe53 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d77b6:	4b0a      	ldr	r3, [pc, #40]	; (d77e0 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d77b8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d77ba:	f002 f88d 	bl	d98d8 <spark_process>
   d77be:	f001 fe45 	bl	d944c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d77c2:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d77c4:	f001 fe4a 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d77c8:	b280      	uxth	r0, r0
   d77ca:	1b80      	subs	r0, r0, r6
}
   d77cc:	42a8      	cmp	r0, r5
   d77ce:	bfd4      	ite	le
   d77d0:	2000      	movle	r0, #0
   d77d2:	2001      	movgt	r0, #1
   d77d4:	bd70      	pop	{r4, r5, r6, pc}
   d77d6:	bf00      	nop
   d77d8:	2003e1e8 	.word	0x2003e1e8
   d77dc:	000186a0 	.word	0x000186a0
   d77e0:	2003e608 	.word	0x2003e608

000d77e4 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d77e4:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d77e6:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d77e8:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d77ea:	b94d      	cbnz	r5, d7800 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d77ec:	6840      	ldr	r0, [r0, #4]
   d77ee:	f000 fa7d 	bl	d7cec <_ZN14SdSpiAltDriver8activateEv>
   d77f2:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d77f4:	4629      	mov	r1, r5
   d77f6:	7d18      	ldrb	r0, [r3, #20]
   d77f8:	f003 ffd1 	bl	db79e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d77fc:	2301      	movs	r3, #1
   d77fe:	7223      	strb	r3, [r4, #8]
   d7800:	bd38      	pop	{r3, r4, r5, pc}

000d7802 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7802:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7804:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7806:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7808:	b16b      	cbz	r3, d7826 <_ZN9SdSpiCard7spiStopEv+0x24>
   d780a:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d780c:	2101      	movs	r1, #1
   d780e:	7d18      	ldrb	r0, [r3, #20]
   d7810:	f003 ffc5 	bl	db79e <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7814:	21ff      	movs	r1, #255	; 0xff
   d7816:	6860      	ldr	r0, [r4, #4]
   d7818:	f000 fa9a 	bl	d7d50 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d781c:	6860      	ldr	r0, [r4, #4]
   d781e:	f000 fa79 	bl	d7d14 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d7822:	2300      	movs	r3, #0
   d7824:	7223      	strb	r3, [r4, #8]
   d7826:	bd10      	pop	{r4, pc}

000d7828 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d7828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d782a:	4604      	mov	r4, r0
   d782c:	460d      	mov	r5, r1
   d782e:	4616      	mov	r6, r2
   d7830:	f001 fe14 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d7834:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7836:	6860      	ldr	r0, [r4, #4]
   d7838:	f000 fa6f 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d783c:	28ff      	cmp	r0, #255	; 0xff
   d783e:	7260      	strb	r0, [r4, #9]
   d7840:	d109      	bne.n	d7856 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d7842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7846:	4639      	mov	r1, r7
   d7848:	4620      	mov	r0, r4
   d784a:	f7ff ffa7 	bl	d779c <_ZN9SdSpiCard10isTimedOutEtt>
   d784e:	2800      	cmp	r0, #0
   d7850:	d0f1      	beq.n	d7836 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7852:	2355      	movs	r3, #85	; 0x55
   d7854:	e00b      	b.n	d786e <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d7856:	28fe      	cmp	r0, #254	; 0xfe
   d7858:	d001      	beq.n	d785e <_ZN9SdSpiCard8readDataEPhj+0x36>
   d785a:	2350      	movs	r3, #80	; 0x50
   d785c:	e007      	b.n	d786e <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d785e:	4632      	mov	r2, r6
   d7860:	4629      	mov	r1, r5
   d7862:	6860      	ldr	r0, [r4, #4]
   d7864:	f000 fa5e 	bl	d7d24 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d7868:	7260      	strb	r0, [r4, #9]
   d786a:	b130      	cbz	r0, d787a <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d786c:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d786e:	4620      	mov	r0, r4
   d7870:	7023      	strb	r3, [r4, #0]
   d7872:	f7ff ffc6 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7876:	2000      	movs	r0, #0
}
   d7878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d787a:	6860      	ldr	r0, [r4, #4]
   d787c:	f000 fa4d 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
   d7880:	6860      	ldr	r0, [r4, #4]
   d7882:	f000 fa4a 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
   d7886:	2001      	movs	r0, #1
   d7888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d788a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d788a:	b570      	push	{r4, r5, r6, lr}
   d788c:	4604      	mov	r4, r0
   d788e:	460e      	mov	r6, r1
   d7890:	f001 fde4 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
   d7894:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d7896:	4632      	mov	r2, r6
   d7898:	4629      	mov	r1, r5
   d789a:	4620      	mov	r0, r4
   d789c:	f7ff ff7e 	bl	d779c <_ZN9SdSpiCard10isTimedOutEtt>
   d78a0:	b930      	cbnz	r0, d78b0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d78a2:	6860      	ldr	r0, [r4, #4]
   d78a4:	f000 fa39 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d78a8:	28ff      	cmp	r0, #255	; 0xff
   d78aa:	d1f4      	bne.n	d7896 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d78ac:	2001      	movs	r0, #1
   d78ae:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d78b0:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d78b2:	bd70      	pop	{r4, r5, r6, pc}

000d78b4 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d78b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d78b6:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d78b8:	9201      	str	r2, [sp, #4]
   d78ba:	4604      	mov	r4, r0
   d78bc:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d78be:	b90b      	cbnz	r3, d78c4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d78c0:	f7ff ff90 	bl	d77e4 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d78c4:	b125      	cbz	r5, d78d0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d78c6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d78ca:	4620      	mov	r0, r4
   d78cc:	f7ff ffdd 	bl	d788a <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d78d0:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d78d4:	6860      	ldr	r0, [r4, #4]
   d78d6:	f000 fa3b 	bl	d7d50 <_ZN14SdSpiAltDriver4sendEh>
   d78da:	f10d 0607 	add.w	r6, sp, #7
   d78de:	f10d 0703 	add.w	r7, sp, #3
   d78e2:	f816 1901 	ldrb.w	r1, [r6], #-1
   d78e6:	6860      	ldr	r0, [r4, #4]
   d78e8:	f000 fa32 	bl	d7d50 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d78ec:	42be      	cmp	r6, r7
   d78ee:	d1f8      	bne.n	d78e2 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d78f0:	2d00      	cmp	r5, #0
   d78f2:	bf0c      	ite	eq
   d78f4:	2195      	moveq	r1, #149	; 0x95
   d78f6:	2187      	movne	r1, #135	; 0x87
   d78f8:	6860      	ldr	r0, [r4, #4]
   d78fa:	f000 fa29 	bl	d7d50 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d78fe:	6860      	ldr	r0, [r4, #4]
   d7900:	f000 fa0b 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
   d7904:	250b      	movs	r5, #11
   d7906:	6860      	ldr	r0, [r4, #4]
   d7908:	f000 fa07 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d790c:	0603      	lsls	r3, r0, #24
   d790e:	7260      	strb	r0, [r4, #9]
   d7910:	d503      	bpl.n	d791a <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d7912:	3d01      	subs	r5, #1
   d7914:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7918:	d1f5      	bne.n	d7906 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d791a:	b003      	add	sp, #12
   d791c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d791e <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d791e:	b570      	push	{r4, r5, r6, lr}
   d7920:	4604      	mov	r4, r0
   d7922:	460d      	mov	r5, r1
   d7924:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d7926:	2137      	movs	r1, #55	; 0x37
   d7928:	2200      	movs	r2, #0
   d792a:	f7ff ffc3 	bl	d78b4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d792e:	4632      	mov	r2, r6
   d7930:	4629      	mov	r1, r5
   d7932:	4620      	mov	r0, r4
  }
   d7934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d7938:	f7ff bfbc 	b.w	d78b4 <_ZN9SdSpiCard11cardCommandEhm>

000d793c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d793c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d7940:	2500      	movs	r5, #0
   d7942:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d7944:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d7946:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d7948:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d794a:	4604      	mov	r4, r0
   d794c:	4690      	mov	r8, r2
   d794e:	461e      	mov	r6, r3
   d7950:	f001 fd84 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d7954:	4641      	mov	r1, r8
   d7956:	4607      	mov	r7, r0
   d7958:	6860      	ldr	r0, [r4, #4]
   d795a:	f000 f9cb 	bl	d7cf4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d795e:	6863      	ldr	r3, [r4, #4]
   d7960:	4a4f      	ldr	r2, [pc, #316]	; (d7aa0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d7962:	721d      	strb	r5, [r3, #8]
   d7964:	f04f 0801 	mov.w	r8, #1
   d7968:	60da      	str	r2, [r3, #12]
   d796a:	745d      	strb	r5, [r3, #17]
   d796c:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d7970:	4620      	mov	r0, r4
   d7972:	f7ff ff37 	bl	d77e4 <_ZN9SdSpiCard8spiStartEv>
   d7976:	6863      	ldr	r3, [r4, #4]
   d7978:	4641      	mov	r1, r8
   d797a:	7d18      	ldrb	r0, [r3, #20]
   d797c:	f003 ff0f 	bl	db79e <digitalWrite>
   d7980:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7982:	21ff      	movs	r1, #255	; 0xff
   d7984:	6860      	ldr	r0, [r4, #4]
   d7986:	3d01      	subs	r5, #1
   d7988:	f000 f9e2 	bl	d7d50 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d798c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7990:	d1f7      	bne.n	d7982 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d7992:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d7994:	4629      	mov	r1, r5
   d7996:	7d18      	ldrb	r0, [r3, #20]
   d7998:	f003 ff01 	bl	db79e <digitalWrite>
   d799c:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d799e:	2200      	movs	r2, #0
   d79a0:	4611      	mov	r1, r2
   d79a2:	4620      	mov	r0, r4
   d79a4:	f7ff ff86 	bl	d78b4 <_ZN9SdSpiCard11cardCommandEhm>
   d79a8:	2801      	cmp	r0, #1
   d79aa:	4680      	mov	r8, r0
   d79ac:	d012      	beq.n	d79d4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d79ae:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d79b0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d79b4:	d101      	bne.n	d79ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d79b6:	2320      	movs	r3, #32
   d79b8:	e057      	b.n	d7a6a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d79ba:	21fd      	movs	r1, #253	; 0xfd
   d79bc:	6860      	ldr	r0, [r4, #4]
   d79be:	f000 f9c7 	bl	d7d50 <_ZN14SdSpiAltDriver4sendEh>
   d79c2:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d79c6:	6860      	ldr	r0, [r4, #4]
   d79c8:	f000 f9a7 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d79cc:	f1b8 0801 	subs.w	r8, r8, #1
   d79d0:	d1f9      	bne.n	d79c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d79d2:	e7e4      	b.n	d799e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d79d4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d79d8:	2108      	movs	r1, #8
   d79da:	4620      	mov	r0, r4
   d79dc:	f7ff ff6a 	bl	d78b4 <_ZN9SdSpiCard11cardCommandEhm>
   d79e0:	2805      	cmp	r0, #5
   d79e2:	d102      	bne.n	d79ea <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d79e4:	f884 800a 	strb.w	r8, [r4, #10]
   d79e8:	e00f      	b.n	d7a0a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d79ea:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d79ec:	6860      	ldr	r0, [r4, #4]
   d79ee:	f000 f994 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
   d79f2:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d79f4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d79f8:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d79fa:	d1f7      	bne.n	d79ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d79fc:	28aa      	cmp	r0, #170	; 0xaa
   d79fe:	d102      	bne.n	d7a06 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7a00:	2302      	movs	r3, #2
   d7a02:	72a3      	strb	r3, [r4, #10]
   d7a04:	e001      	b.n	d7a0a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7a06:	2325      	movs	r3, #37	; 0x25
   d7a08:	e02f      	b.n	d7a6a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7a0a:	7aa3      	ldrb	r3, [r4, #10]
   d7a0c:	2b02      	cmp	r3, #2
   d7a0e:	bf0c      	ite	eq
   d7a10:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d7a14:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7a16:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d7a18:	462a      	mov	r2, r5
   d7a1a:	2129      	movs	r1, #41	; 0x29
   d7a1c:	4620      	mov	r0, r4
   d7a1e:	f7ff ff7e 	bl	d791e <_ZN9SdSpiCard8cardAcmdEhm>
   d7a22:	4602      	mov	r2, r0
   d7a24:	b148      	cbz	r0, d7a3a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7a26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7a2a:	4639      	mov	r1, r7
   d7a2c:	4620      	mov	r0, r4
   d7a2e:	f7ff feb5 	bl	d779c <_ZN9SdSpiCard10isTimedOutEtt>
   d7a32:	2800      	cmp	r0, #0
   d7a34:	d0f0      	beq.n	d7a18 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d7a36:	2343      	movs	r3, #67	; 0x43
   d7a38:	e017      	b.n	d7a6a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d7a3a:	7aa3      	ldrb	r3, [r4, #10]
   d7a3c:	2b02      	cmp	r3, #2
   d7a3e:	d00e      	beq.n	d7a5e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d7a40:	4620      	mov	r0, r4
   d7a42:	f7ff fede 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d7a46:	6863      	ldr	r3, [r4, #4]
   d7a48:	68b0      	ldr	r0, [r6, #8]
   d7a4a:	7934      	ldrb	r4, [r6, #4]
   d7a4c:	7b31      	ldrb	r1, [r6, #12]
   d7a4e:	7b72      	ldrb	r2, [r6, #13]
   d7a50:	745a      	strb	r2, [r3, #17]
   d7a52:	60d8      	str	r0, [r3, #12]
   d7a54:	721c      	strb	r4, [r3, #8]
   d7a56:	7419      	strb	r1, [r3, #16]
  return true;
   d7a58:	2001      	movs	r0, #1
   d7a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d7a5e:	213a      	movs	r1, #58	; 0x3a
   d7a60:	4620      	mov	r0, r4
   d7a62:	f7ff ff27 	bl	d78b4 <_ZN9SdSpiCard11cardCommandEhm>
   d7a66:	b138      	cbz	r0, d7a78 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d7a68:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d7a6a:	4620      	mov	r0, r4
   d7a6c:	7023      	strb	r3, [r4, #0]
   d7a6e:	f7ff fec8 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a72:	2000      	movs	r0, #0
}
   d7a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7a78:	6860      	ldr	r0, [r4, #4]
   d7a7a:	f000 f94e 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d7a7e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d7a82:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d7a84:	bf04      	itt	eq
   d7a86:	2303      	moveq	r3, #3
   d7a88:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7a8a:	6860      	ldr	r0, [r4, #4]
   d7a8c:	f000 f945 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
   d7a90:	6860      	ldr	r0, [r4, #4]
   d7a92:	f000 f942 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
   d7a96:	6860      	ldr	r0, [r4, #4]
   d7a98:	f000 f93f 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
   d7a9c:	e7d0      	b.n	d7a40 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d7a9e:	bf00      	nop
   d7aa0:	0003d090 	.word	0x0003d090

000d7aa4 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7aa4:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7aa6:	7a83      	ldrb	r3, [r0, #10]
   d7aa8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7aaa:	bf18      	it	ne
   d7aac:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7aae:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7ab0:	460a      	mov	r2, r1
   d7ab2:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7ab4:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d7ab6:	f7ff fefd 	bl	d78b4 <_ZN9SdSpiCard11cardCommandEhm>
   d7aba:	b110      	cbz	r0, d7ac2 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7abc:	2330      	movs	r3, #48	; 0x30
   d7abe:	7023      	strb	r3, [r4, #0]
   d7ac0:	e00b      	b.n	d7ada <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d7ac2:	4629      	mov	r1, r5
   d7ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7ac8:	4620      	mov	r0, r4
   d7aca:	f7ff fead 	bl	d7828 <_ZN9SdSpiCard8readDataEPhj>
   d7ace:	4605      	mov	r5, r0
   d7ad0:	b118      	cbz	r0, d7ada <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d7ad2:	4620      	mov	r0, r4
   d7ad4:	f7ff fe95 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7ad8:	e003      	b.n	d7ae2 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d7ada:	4620      	mov	r0, r4
   d7adc:	f7ff fe91 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7ae0:	2500      	movs	r5, #0
}
   d7ae2:	4628      	mov	r0, r5
   d7ae4:	bd38      	pop	{r3, r4, r5, pc}

000d7ae6 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7ae6:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d7ae8:	7a83      	ldrb	r3, [r0, #10]
   d7aea:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7aec:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7aee:	bf18      	it	ne
   d7af0:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7af2:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7af4:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d7af6:	f7ff fedd 	bl	d78b4 <_ZN9SdSpiCard11cardCommandEhm>
   d7afa:	b130      	cbz	r0, d7b0a <_ZN9SdSpiCard9readStartEm+0x24>
   d7afc:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d7afe:	4620      	mov	r0, r4
   d7b00:	7023      	strb	r3, [r4, #0]
   d7b02:	f7ff fe7e 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7b06:	2000      	movs	r0, #0
   d7b08:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d7b0a:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7b0c:	bd10      	pop	{r4, pc}

000d7b0e <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7b0e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d7b10:	2200      	movs	r2, #0
   d7b12:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d7b14:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d7b16:	f7ff fecd 	bl	d78b4 <_ZN9SdSpiCard11cardCommandEhm>
   d7b1a:	b130      	cbz	r0, d7b2a <_ZN9SdSpiCard8readStopEv+0x1c>
   d7b1c:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d7b1e:	4620      	mov	r0, r4
   d7b20:	7023      	strb	r3, [r4, #0]
   d7b22:	f7ff fe6e 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7b26:	2000      	movs	r0, #0
   d7b28:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d7b2a:	4620      	mov	r0, r4
   d7b2c:	f7ff fe69 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7b30:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7b32:	bd10      	pop	{r4, pc}

000d7b34 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b36:	4605      	mov	r5, r0
   d7b38:	4616      	mov	r6, r2
   d7b3a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7b3c:	f7ff ffd3 	bl	d7ae6 <_ZN9SdSpiCard9readStartEm>
   d7b40:	b198      	cbz	r0, d7b6a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d7b42:	2400      	movs	r4, #0
   d7b44:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d7b46:	429f      	cmp	r7, r3
   d7b48:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d7b4c:	d908      	bls.n	d7b60 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d7b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7b52:	4628      	mov	r0, r5
   d7b54:	f7ff fe68 	bl	d7828 <_ZN9SdSpiCard8readDataEPhj>
   d7b58:	3401      	adds	r4, #1
   d7b5a:	2800      	cmp	r0, #0
   d7b5c:	d1f2      	bne.n	d7b44 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d7b5e:	e004      	b.n	d7b6a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d7b60:	4628      	mov	r0, r5
}
   d7b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d7b66:	f7ff bfd2 	b.w	d7b0e <_ZN9SdSpiCard8readStopEv>
}
   d7b6a:	2000      	movs	r0, #0
   d7b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b6e <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d7b6e:	b538      	push	{r3, r4, r5, lr}
   d7b70:	4604      	mov	r4, r0
   d7b72:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7b74:	6840      	ldr	r0, [r0, #4]
   d7b76:	f000 f8eb 	bl	d7d50 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d7b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7b7e:	4629      	mov	r1, r5
   d7b80:	6860      	ldr	r0, [r4, #4]
   d7b82:	f000 f8e9 	bl	d7d58 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7b86:	21ff      	movs	r1, #255	; 0xff
   d7b88:	6860      	ldr	r0, [r4, #4]
   d7b8a:	f000 f8e1 	bl	d7d50 <_ZN14SdSpiAltDriver4sendEh>
   d7b8e:	21ff      	movs	r1, #255	; 0xff
   d7b90:	6860      	ldr	r0, [r4, #4]
   d7b92:	f000 f8dd 	bl	d7d50 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7b96:	6860      	ldr	r0, [r4, #4]
   d7b98:	f000 f8bf 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7b9c:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d7b9e:	f000 001f 	and.w	r0, r0, #31
   d7ba2:	2805      	cmp	r0, #5
   d7ba4:	d006      	beq.n	d7bb4 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7ba6:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7ba8:	4620      	mov	r0, r4
   d7baa:	7023      	strb	r3, [r4, #0]
   d7bac:	f7ff fe29 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7bb0:	2000      	movs	r0, #0
   d7bb2:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d7bb4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7bb6:	bd38      	pop	{r3, r4, r5, pc}

000d7bb8 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7bb8:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7bba:	7a83      	ldrb	r3, [r0, #10]
   d7bbc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7bbe:	bf18      	it	ne
   d7bc0:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7bc2:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7bc4:	460a      	mov	r2, r1
   d7bc6:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7bc8:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d7bca:	f7ff fe73 	bl	d78b4 <_ZN9SdSpiCard11cardCommandEhm>
   d7bce:	4606      	mov	r6, r0
   d7bd0:	b108      	cbz	r0, d7bd6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d7bd2:	2332      	movs	r3, #50	; 0x32
   d7bd4:	e01d      	b.n	d7c12 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d7bd6:	462a      	mov	r2, r5
   d7bd8:	21fe      	movs	r1, #254	; 0xfe
   d7bda:	4620      	mov	r0, r4
   d7bdc:	f7ff ffc7 	bl	d7b6e <_ZN9SdSpiCard9writeDataEhPKh>
   d7be0:	b1c0      	cbz	r0, d7c14 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7be2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7be6:	4620      	mov	r0, r4
   d7be8:	f7ff fe4f 	bl	d788a <_ZN9SdSpiCard11waitNotBusyEt>
   d7bec:	4605      	mov	r5, r0
   d7bee:	b908      	cbnz	r0, d7bf4 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d7bf0:	235a      	movs	r3, #90	; 0x5a
   d7bf2:	e00e      	b.n	d7c12 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7bf4:	4632      	mov	r2, r6
   d7bf6:	210d      	movs	r1, #13
   d7bf8:	4620      	mov	r0, r4
   d7bfa:	f7ff fe5b 	bl	d78b4 <_ZN9SdSpiCard11cardCommandEhm>
   d7bfe:	b938      	cbnz	r0, d7c10 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d7c00:	6860      	ldr	r0, [r4, #4]
   d7c02:	f000 f88a 	bl	d7d1a <_ZN14SdSpiAltDriver7receiveEv>
   d7c06:	b918      	cbnz	r0, d7c10 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d7c08:	4620      	mov	r0, r4
   d7c0a:	f7ff fdfa 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7c0e:	e005      	b.n	d7c1c <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7c10:	2329      	movs	r3, #41	; 0x29
   d7c12:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d7c14:	4620      	mov	r0, r4
   d7c16:	f7ff fdf4 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7c1a:	2500      	movs	r5, #0
}
   d7c1c:	4628      	mov	r0, r5
   d7c1e:	bd70      	pop	{r4, r5, r6, pc}

000d7c20 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7c20:	b538      	push	{r3, r4, r5, lr}
   d7c22:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7c24:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d7c28:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7c2a:	f7ff fe2e 	bl	d788a <_ZN9SdSpiCard11waitNotBusyEt>
   d7c2e:	b910      	cbnz	r0, d7c36 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d7c30:	235b      	movs	r3, #91	; 0x5b
   d7c32:	7023      	strb	r3, [r4, #0]
   d7c34:	e005      	b.n	d7c42 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7c36:	462a      	mov	r2, r5
   d7c38:	21fc      	movs	r1, #252	; 0xfc
   d7c3a:	4620      	mov	r0, r4
   d7c3c:	f7ff ff97 	bl	d7b6e <_ZN9SdSpiCard9writeDataEhPKh>
   d7c40:	b918      	cbnz	r0, d7c4a <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7c42:	4620      	mov	r0, r4
   d7c44:	f7ff fddd 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7c48:	2000      	movs	r0, #0
}
   d7c4a:	bd38      	pop	{r3, r4, r5, pc}

000d7c4c <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7c4c:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7c4e:	7a83      	ldrb	r3, [r0, #10]
   d7c50:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7c52:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d7c54:	bf18      	it	ne
   d7c56:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7c58:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7c5a:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7c5c:	f7ff fe2a 	bl	d78b4 <_ZN9SdSpiCard11cardCommandEhm>
   d7c60:	b130      	cbz	r0, d7c70 <_ZN9SdSpiCard10writeStartEm+0x24>
   d7c62:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7c64:	4620      	mov	r0, r4
   d7c66:	7023      	strb	r3, [r4, #0]
   d7c68:	f7ff fdcb 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7c6c:	2000      	movs	r0, #0
   d7c6e:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d7c70:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d7c72:	bd10      	pop	{r4, pc}

000d7c74 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7c74:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7c76:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7c7a:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7c7c:	f7ff fe05 	bl	d788a <_ZN9SdSpiCard11waitNotBusyEt>
   d7c80:	4605      	mov	r5, r0
   d7c82:	b120      	cbz	r0, d7c8e <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d7c84:	21fd      	movs	r1, #253	; 0xfd
   d7c86:	6860      	ldr	r0, [r4, #4]
   d7c88:	f000 f862 	bl	d7d50 <_ZN14SdSpiAltDriver4sendEh>
   d7c8c:	e001      	b.n	d7c92 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d7c8e:	2356      	movs	r3, #86	; 0x56
   d7c90:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d7c92:	4620      	mov	r0, r4
   d7c94:	f7ff fdb5 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7c98:	4628      	mov	r0, r5
   d7c9a:	bd38      	pop	{r3, r4, r5, pc}

000d7c9c <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c9e:	4605      	mov	r5, r0
   d7ca0:	4616      	mov	r6, r2
   d7ca2:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7ca4:	f7ff ffd2 	bl	d7c4c <_ZN9SdSpiCard10writeStartEm>
   d7ca8:	b170      	cbz	r0, d7cc8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d7caa:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7cac:	42bc      	cmp	r4, r7
   d7cae:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7cb2:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7cb4:	d004      	beq.n	d7cc0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7cb6:	f7ff ffb3 	bl	d7c20 <_ZN9SdSpiCard9writeDataEPKh>
   d7cba:	b128      	cbz	r0, d7cc8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d7cbc:	3401      	adds	r4, #1
   d7cbe:	e7f5      	b.n	d7cac <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d7cc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d7cc4:	f7ff bfd6 	b.w	d7c74 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d7cc8:	4628      	mov	r0, r5
   d7cca:	f7ff fd9a 	bl	d7802 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d7cce:	2000      	movs	r0, #0
   d7cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cd2 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d7cd2:	f001 bb23 	b.w	d931c <HAL_Pin_Map>

000d7cd6 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d7cd6:	f001 bb21 	b.w	d931c <HAL_Pin_Map>

000d7cda <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d7cda:	f001 bb1f 	b.w	d931c <HAL_Pin_Map>
	...

000d7ce0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7ce0:	4b01      	ldr	r3, [pc, #4]	; (d7ce8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7ce2:	2201      	movs	r2, #1
   d7ce4:	701a      	strb	r2, [r3, #0]
   d7ce6:	4770      	bx	lr
   d7ce8:	2003e1ec 	.word	0x2003e1ec

000d7cec <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7cec:	1d01      	adds	r1, r0, #4
   d7cee:	6800      	ldr	r0, [r0, #0]
   d7cf0:	f001 bf12 	b.w	d9b18 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d7cf4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7cf4:	b510      	push	{r4, lr}
   d7cf6:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7cf8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7cfa:	6800      	ldr	r0, [r0, #0]
   d7cfc:	f001 fee2 	bl	d9ac4 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7d00:	7d20      	ldrb	r0, [r4, #20]
   d7d02:	2101      	movs	r1, #1
   d7d04:	f003 fd3a 	bl	db77c <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7d08:	7d20      	ldrb	r0, [r4, #20]
   d7d0a:	2101      	movs	r1, #1
}
   d7d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d7d10:	f003 bd45 	b.w	db79e <digitalWrite>

000d7d14 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7d14:	6800      	ldr	r0, [r0, #0]
   d7d16:	f001 bee6 	b.w	d9ae6 <_ZN8SPIClass14endTransactionEv>

000d7d1a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7d1a:	21ff      	movs	r1, #255	; 0xff
   d7d1c:	6800      	ldr	r0, [r0, #0]
   d7d1e:	f001 bf6b 	b.w	d9bf8 <_ZN8SPIClass8transferEh>
	...

000d7d24 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7d26:	4b08      	ldr	r3, [pc, #32]	; (d7d48 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7d28:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7d2a:	2500      	movs	r5, #0
   d7d2c:	4c07      	ldr	r4, [pc, #28]	; (d7d4c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7d2e:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7d30:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7d32:	4613      	mov	r3, r2
   d7d34:	460a      	mov	r2, r1
   d7d36:	4629      	mov	r1, r5
   d7d38:	f001 ff64 	bl	d9c04 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7d3c:	7823      	ldrb	r3, [r4, #0]
   d7d3e:	2b00      	cmp	r3, #0
   d7d40:	d0fc      	beq.n	d7d3c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d7d42:	2000      	movs	r0, #0
   d7d44:	b003      	add	sp, #12
   d7d46:	bd30      	pop	{r4, r5, pc}
   d7d48:	000d7ce1 	.word	0x000d7ce1
   d7d4c:	2003e1ec 	.word	0x2003e1ec

000d7d50 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7d50:	6800      	ldr	r0, [r0, #0]
   d7d52:	f001 bf51 	b.w	d9bf8 <_ZN8SPIClass8transferEh>
	...

000d7d58 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7d5a:	4b07      	ldr	r3, [pc, #28]	; (d7d78 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7d5c:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7d5e:	2500      	movs	r5, #0
   d7d60:	4c06      	ldr	r4, [pc, #24]	; (d7d7c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7d62:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d7d64:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d7d66:	4613      	mov	r3, r2
   d7d68:	462a      	mov	r2, r5
   d7d6a:	f001 ff4b 	bl	d9c04 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d7d6e:	7823      	ldrb	r3, [r4, #0]
   d7d70:	2b00      	cmp	r3, #0
   d7d72:	d0fc      	beq.n	d7d6e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7d74:	b003      	add	sp, #12
   d7d76:	bd30      	pop	{r4, r5, pc}
   d7d78:	000d7ce1 	.word	0x000d7ce1
   d7d7c:	2003e1ec 	.word	0x2003e1ec

000d7d80 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d7d80:	f001 bacc 	b.w	d931c <HAL_Pin_Map>

000d7d84 <_ZL8wiresendh>:
#include "WProgram.h"
#endif
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
   d7d84:	b510      	push	{r4, lr}
   d7d86:	4604      	mov	r4, r0
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d7d88:	f003 fd54 	bl	db834 <_Z19__fetch_global_Wirev>
   d7d8c:	6803      	ldr	r3, [r0, #0]
   d7d8e:	4621      	mov	r1, r4
   d7d90:	689b      	ldr	r3, [r3, #8]
#else
	Wire.send(x);
#endif
}
   d7d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif //Particle

// minihelper to keep Arduino backward compatibility
static inline void wiresend(uint8_t x) {
#if (ARDUINO >= 100) || defined (PARTICLE)
	Wire.write((uint8_t) x);
   d7d96:	4718      	bx	r3

000d7d98 <_ZL8wirerecvv>:
#else
	Wire.send(x);
#endif
}

static inline uint8_t wirerecv(void) {
   d7d98:	b508      	push	{r3, lr}
#if (ARDUINO >= 100) || defined (PARTICLE)
	return Wire.read();
   d7d9a:	f003 fd4b 	bl	db834 <_Z19__fetch_global_Wirev>
   d7d9e:	6803      	ldr	r3, [r0, #0]
   d7da0:	695b      	ldr	r3, [r3, #20]
   d7da2:	4798      	blx	r3
#else
	return Wire.receive();
#endif
}
   d7da4:	b2c0      	uxtb	r0, r0
   d7da6:	bd08      	pop	{r3, pc}

000d7da8 <_ZN17Adafruit_MCP2301712readRegisterEh>:
}

/**
 * Reads a given register
 */
uint8_t Adafruit_MCP23017::readRegister(uint8_t addr){
   d7da8:	b538      	push	{r3, r4, r5, lr}
   d7daa:	4604      	mov	r4, r0
   d7dac:	460d      	mov	r5, r1
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d7dae:	f003 fd41 	bl	db834 <_Z19__fetch_global_Wirev>
   d7db2:	7821      	ldrb	r1, [r4, #0]
   d7db4:	f041 0120 	orr.w	r1, r1, #32
   d7db8:	f003 fae9 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
	wiresend(addr);
   d7dbc:	4628      	mov	r0, r5
   d7dbe:	f7ff ffe1 	bl	d7d84 <_ZL8wiresendh>
	Wire.endTransmission();
   d7dc2:	f003 fd37 	bl	db834 <_Z19__fetch_global_Wirev>
   d7dc6:	f003 fae9 	bl	db39c <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
   d7dca:	f003 fd33 	bl	db834 <_Z19__fetch_global_Wirev>
   d7dce:	7821      	ldrb	r1, [r4, #0]
   d7dd0:	2201      	movs	r2, #1
   d7dd2:	f041 0120 	orr.w	r1, r1, #32
   d7dd6:	f003 fad3 	bl	db380 <_ZN7TwoWire11requestFromEhj>
	return wirerecv();
}
   d7dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// read the current GPINTEN
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(addr);
	Wire.endTransmission();
	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
	return wirerecv();
   d7dde:	f7ff bfdb 	b.w	d7d98 <_ZL8wirerecvv>

000d7de2 <_ZN17Adafruit_MCP2301713writeRegisterEhh>:


/**
 * Writes a given register
 */
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
   d7de2:	b570      	push	{r4, r5, r6, lr}
   d7de4:	4606      	mov	r6, r0
   d7de6:	4614      	mov	r4, r2
   d7de8:	460d      	mov	r5, r1
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
   d7dea:	f003 fd23 	bl	db834 <_Z19__fetch_global_Wirev>
   d7dee:	7831      	ldrb	r1, [r6, #0]
   d7df0:	f041 0120 	orr.w	r1, r1, #32
   d7df4:	f003 facb 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
	wiresend(regAddr);
   d7df8:	4628      	mov	r0, r5
   d7dfa:	f7ff ffc3 	bl	d7d84 <_ZL8wiresendh>
	wiresend(regValue);
   d7dfe:	4620      	mov	r0, r4
   d7e00:	f7ff ffc0 	bl	d7d84 <_ZL8wiresendh>
	Wire.endTransmission();
   d7e04:	f003 fd16 	bl	db834 <_Z19__fetch_global_Wirev>
}
   d7e08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MCP23017::writeRegister(uint8_t regAddr, uint8_t regValue){
	// Write the register
	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
	wiresend(regAddr);
	wiresend(regValue);
	Wire.endTransmission();
   d7e0c:	f003 bac6 	b.w	db39c <_ZN7TwoWire15endTransmissionEv>

000d7e10 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d7e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7e14:	f89d 6018 	ldrb.w	r6, [sp, #24]

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d7e18:	2907      	cmp	r1, #7
   d7e1a:	bf98      	it	ls
   d7e1c:	461e      	movls	r6, r3

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d7e1e:	f001 0707 	and.w	r7, r1, #7
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d7e22:	4690      	mov	r8, r2
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d7e24:	4631      	mov	r1, r6
   d7e26:	2401      	movs	r4, #1
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   d7e28:	4605      	mov	r5, r0
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d7e2a:	40bc      	lsls	r4, r7
 */
void Adafruit_MCP23017::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
	uint8_t bit=bitForPin(pin);
	regValue = readRegister(regAddr);
   d7e2c:	f7ff ffbc 	bl	d7da8 <_ZN17Adafruit_MCP2301712readRegisterEh>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   d7e30:	f1b8 0f00 	cmp.w	r8, #0
   d7e34:	d001      	beq.n	d7e3a <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2a>
   d7e36:	4304      	orrs	r4, r0
   d7e38:	e001      	b.n	d7e3e <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh+0x2e>
   d7e3a:	ea20 0404 	bic.w	r4, r0, r4
   d7e3e:	b2e2      	uxtb	r2, r4

	writeRegister(regAddr,regValue);
   d7e40:	4631      	mov	r1, r6
   d7e42:	4628      	mov	r0, r5
}
   d7e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	regValue = readRegister(regAddr);

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);

	writeRegister(regAddr,regValue);
   d7e48:	f7ff bfcb 	b.w	d7de2 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d7e4c <_ZN17Adafruit_MCP230175beginEh>:
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d7e4c:	b510      	push	{r4, lr}
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;
   d7e4e:	2907      	cmp	r1, #7
   d7e50:	bf28      	it	cs
   d7e52:	2107      	movcs	r1, #7
   d7e54:	7001      	strb	r1, [r0, #0]
////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 */
void Adafruit_MCP23017::begin(uint8_t addr) {
   d7e56:	4604      	mov	r4, r0
	if (addr > 7) {
		addr = 7;
	}
	i2caddr = addr;

	Wire.begin();
   d7e58:	f003 fcec 	bl	db834 <_Z19__fetch_global_Wirev>
   d7e5c:	f003 fa5c 	bl	db318 <_ZN7TwoWire5beginEv>

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
   d7e60:	4620      	mov	r0, r4
   d7e62:	22ff      	movs	r2, #255	; 0xff
   d7e64:	2100      	movs	r1, #0
   d7e66:	f7ff ffbc 	bl	d7de2 <_ZN17Adafruit_MCP2301713writeRegisterEhh>
	writeRegister(MCP23017_IODIRB,0xff);
   d7e6a:	4620      	mov	r0, r4
   d7e6c:	22ff      	movs	r2, #255	; 0xff
   d7e6e:	2101      	movs	r1, #1
}
   d7e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Wire.begin();

	// set defaults!
	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
	writeRegister(MCP23017_IODIRB,0xff);
   d7e74:	f7ff bfb5 	b.w	d7de2 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d7e78 <_ZN17Adafruit_MCP230175beginEv>:

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void Adafruit_MCP23017::begin(void) {
	begin(0);
   d7e78:	2100      	movs	r1, #0
   d7e7a:	f7ff bfe7 	b.w	d7e4c <_ZN17Adafruit_MCP230175beginEh>

000d7e7e <_ZN17Adafruit_MCP230177pinModeEhh>:
}

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
   d7e7e:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   d7e80:	2301      	movs	r3, #1
   d7e82:	fab2 f282 	clz	r2, r2
   d7e86:	9300      	str	r3, [sp, #0]
   d7e88:	0952      	lsrs	r2, r2, #5
   d7e8a:	2300      	movs	r3, #0
   d7e8c:	f7ff ffc0 	bl	d7e10 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d7e90:	b003      	add	sp, #12
   d7e92:	f85d fb04 	ldr.w	pc, [sp], #4

000d7e96 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d7e96:	2908      	cmp	r1, #8
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d7e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/**
 * Bit number associated to a give Pin
 */
uint8_t Adafruit_MCP23017::bitForPin(uint8_t pin){
	return pin%8;
   d7e9a:	f001 0607 	and.w	r6, r1, #7
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d7e9e:	460c      	mov	r4, r1
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d7ea0:	bf34      	ite	cc
   d7ea2:	2114      	movcc	r1, #20
   d7ea4:	2115      	movcs	r1, #21
	wiresend(ba & 0xFF);
	wiresend(ba >> 8);
	Wire.endTransmission();
}

void Adafruit_MCP23017::digitalWrite(uint8_t pin, uint8_t d) {
   d7ea6:	4605      	mov	r5, r0
   d7ea8:	4617      	mov	r7, r2
	uint8_t bit=bitForPin(pin);


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);
   d7eaa:	f7ff ff7d 	bl	d7da8 <_ZN17Adafruit_MCP2301712readRegisterEh>
   d7eae:	2301      	movs	r3, #1

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d7eb0:	40b3      	lsls	r3, r6
   d7eb2:	b10f      	cbz	r7, d7eb8 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x22>
   d7eb4:	4303      	orrs	r3, r0
   d7eb6:	e001      	b.n	d7ebc <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x26>
   d7eb8:	ea20 0303 	bic.w	r3, r0, r3

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t Adafruit_MCP23017::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
	return(pin<8) ?portAaddr:portBaddr;
   d7ebc:	2c08      	cmp	r4, #8
	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
	gpio = readRegister(regAddr);

	// set the pin and direction
	bitWrite(gpio,bit,d);
   d7ebe:	b2da      	uxtb	r2, r3

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d7ec0:	4628      	mov	r0, r5
   d7ec2:	bf34      	ite	cc
   d7ec4:	2112      	movcc	r1, #18
   d7ec6:	2113      	movcs	r1, #19
}
   d7ec8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// set the pin and direction
	bitWrite(gpio,bit,d);

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	writeRegister(regAddr,gpio);
   d7ecc:	f7ff bf89 	b.w	d7de2 <_ZN17Adafruit_MCP2301713writeRegisterEhh>

000d7ed0 <_ZN17Adafruit_MCP230176pullUpEhh>:
}

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
   d7ed0:	b507      	push	{r0, r1, r2, lr}
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   d7ed2:	230d      	movs	r3, #13
   d7ed4:	9300      	str	r3, [sp, #0]
   d7ed6:	230c      	movs	r3, #12
   d7ed8:	f7ff ff9a 	bl	d7e10 <_ZN17Adafruit_MCP2301717updateRegisterBitEhhhh>
}
   d7edc:	b003      	add	sp, #12
   d7ede:	f85d fb04 	ldr.w	pc, [sp], #4

000d7ee2 <_GLOBAL__sub_I__ZN17Adafruit_MCP230179bitForPinEh>:
   d7ee2:	f001 ba1b 	b.w	d931c <HAL_Pin_Map>

000d7ee6 <_ZN9MPL3115A2C1Ev>:
#include "SparkFun_MPL3115A2.h"

MPL3115A2::MPL3115A2()
{
  //Set initial values for private vars
}
   d7ee6:	4770      	bx	lr

000d7ee8 <_ZN9MPL3115A28IIC_ReadEh>:
}


// These are the two I2C functions in this sketch.
byte MPL3115A2::IIC_Read(byte regAddr)
{
   d7ee8:	b510      	push	{r4, lr}
   d7eea:	460c      	mov	r4, r1
  // This function reads one byte over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
   d7eec:	f003 fca2 	bl	db834 <_Z19__fetch_global_Wirev>
   d7ef0:	2160      	movs	r1, #96	; 0x60
   d7ef2:	f003 fa4c 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);  // Address of CTRL_REG1
   d7ef6:	f003 fc9d 	bl	db834 <_Z19__fetch_global_Wirev>
   d7efa:	6803      	ldr	r3, [r0, #0]
   d7efc:	4621      	mov	r1, r4
   d7efe:	689b      	ldr	r3, [r3, #8]
   d7f00:	4798      	blx	r3
  Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   d7f02:	f003 fc97 	bl	db834 <_Z19__fetch_global_Wirev>
   d7f06:	2100      	movs	r1, #0
   d7f08:	f003 fa44 	bl	db394 <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPL3115A2_ADDRESS, 1); // Request the data...
   d7f0c:	f003 fc92 	bl	db834 <_Z19__fetch_global_Wirev>
   d7f10:	2201      	movs	r2, #1
   d7f12:	2160      	movs	r1, #96	; 0x60
   d7f14:	f003 fa34 	bl	db380 <_ZN7TwoWire11requestFromEhj>
  return Wire.read();
   d7f18:	f003 fc8c 	bl	db834 <_Z19__fetch_global_Wirev>
   d7f1c:	6803      	ldr	r3, [r0, #0]
   d7f1e:	695b      	ldr	r3, [r3, #20]
   d7f20:	4798      	blx	r3
}
   d7f22:	b2c0      	uxtb	r0, r0
   d7f24:	bd10      	pop	{r4, pc}

000d7f26 <_ZN9MPL3115A25beginEv>:

//Begin
/*******************************************************************************************/
//Start I2C communication
bool MPL3115A2::begin()
{
   d7f26:	b510      	push	{r4, lr}
   d7f28:	4604      	mov	r4, r0
  Wire.begin();
   d7f2a:	f003 fc83 	bl	db834 <_Z19__fetch_global_Wirev>
   d7f2e:	f003 f9f3 	bl	db318 <_ZN7TwoWire5beginEv>
  uint8_t identify = IIC_Read(WHO_AM_I );
   d7f32:	210c      	movs	r1, #12
   d7f34:	4620      	mov	r0, r4
   d7f36:	f7ff ffd7 	bl	d7ee8 <_ZN9MPL3115A28IIC_ReadEh>
  {
    return false;
  }
  else
    return true;
}
   d7f3a:	f1a0 03c4 	sub.w	r3, r0, #196	; 0xc4
   d7f3e:	4258      	negs	r0, r3
   d7f40:	4158      	adcs	r0, r3
   d7f42:	bd10      	pop	{r4, pc}

000d7f44 <_ZN9MPL3115A29IIC_WriteEhh>:
  Wire.requestFrom(MPL3115A2_ADDRESS, 1); // Request the data...
  return Wire.read();
}

void MPL3115A2::IIC_Write(byte regAddr, byte value)
{
   d7f44:	b538      	push	{r3, r4, r5, lr}
   d7f46:	4614      	mov	r4, r2
   d7f48:	460d      	mov	r5, r1
  // This function writes one byto over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
   d7f4a:	f003 fc73 	bl	db834 <_Z19__fetch_global_Wirev>
   d7f4e:	2160      	movs	r1, #96	; 0x60
   d7f50:	f003 fa1d 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);
   d7f54:	f003 fc6e 	bl	db834 <_Z19__fetch_global_Wirev>
   d7f58:	6803      	ldr	r3, [r0, #0]
   d7f5a:	4629      	mov	r1, r5
   d7f5c:	689b      	ldr	r3, [r3, #8]
   d7f5e:	4798      	blx	r3
  Wire.write(value);
   d7f60:	f003 fc68 	bl	db834 <_Z19__fetch_global_Wirev>
   d7f64:	6803      	ldr	r3, [r0, #0]
   d7f66:	4621      	mov	r1, r4
   d7f68:	689b      	ldr	r3, [r3, #8]
   d7f6a:	4798      	blx	r3
  Wire.endTransmission(true);
   d7f6c:	f003 fc62 	bl	db834 <_Z19__fetch_global_Wirev>
   d7f70:	2101      	movs	r1, #1
}
   d7f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
  // This function writes one byto over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
  Wire.write(regAddr);
  Wire.write(value);
  Wire.endTransmission(true);
   d7f76:	f003 ba0d 	b.w	db394 <_ZN7TwoWire15endTransmissionEh>

000d7f7a <_ZN9MPL3115A216setModeBarometerEv>:
}

//Sets the mode to Barometer
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
   d7f7a:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7f7c:	2126      	movs	r1, #38	; 0x26
}

//Sets the mode to Barometer
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
   d7f7e:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7f80:	f7ff ffb2 	bl	d7ee8 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= ~(1<<7); //Clear ALT bit
  IIC_Write(CTRL_REG1, tempSetting);
   d7f84:	2126      	movs	r1, #38	; 0x26
   d7f86:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d7f8a:	4620      	mov	r0, r4
}
   d7f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//CTRL_REG1, ALT bit
void MPL3115A2::setModeBarometer()
{
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
  tempSetting &= ~(1<<7); //Clear ALT bit
  IIC_Write(CTRL_REG1, tempSetting);
   d7f90:	f7ff bfd8 	b.w	d7f44 <_ZN9MPL3115A29IIC_WriteEhh>

000d7f94 <_ZN9MPL3115A217setOversampleRateEh>:
//Call with a rate from 0 to 7. See page 33 for table of ratios.
//Sets the over sample rate. Datasheet calls for 128 but you can set it
//from 1 to 128 samples. The higher the oversample rate the greater
//the time between data samples.
void MPL3115A2::setOversampleRate(byte sampleRate)
{
   d7f94:	2907      	cmp	r1, #7
   d7f96:	bf28      	it	cs
   d7f98:	2107      	movcs	r1, #7
   d7f9a:	b538      	push	{r3, r4, r5, lr}
   d7f9c:	460d      	mov	r5, r1
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7f9e:	2126      	movs	r1, #38	; 0x26
//Call with a rate from 0 to 7. See page 33 for table of ratios.
//Sets the over sample rate. Datasheet calls for 128 but you can set it
//from 1 to 128 samples. The higher the oversample rate the greater
//the time between data samples.
void MPL3115A2::setOversampleRate(byte sampleRate)
{
   d7fa0:	4604      	mov	r4, r0
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7fa2:	f7ff ffa1 	bl	d7ee8 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= 0b11000111; //Clear out old OS bits
   d7fa6:	f000 00c7 	and.w	r0, r0, #199	; 0xc7
  tempSetting |= sampleRate; //Mask in new OS bits
  IIC_Write(CTRL_REG1, tempSetting);
   d7faa:	ea40 02c5 	orr.w	r2, r0, r5, lsl #3
   d7fae:	b2d2      	uxtb	r2, r2
   d7fb0:	4620      	mov	r0, r4
   d7fb2:	2126      	movs	r1, #38	; 0x26
}
   d7fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  sampleRate <<= 3; //Align it for the CTRL_REG1 register

  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
  tempSetting &= 0b11000111; //Clear out old OS bits
  tempSetting |= sampleRate; //Mask in new OS bits
  IIC_Write(CTRL_REG1, tempSetting);
   d7fb8:	f7ff bfc4 	b.w	d7f44 <_ZN9MPL3115A29IIC_WriteEhh>

000d7fbc <_ZN9MPL3115A216enableEventFlagsEv>:

//Enables the pressure and temp measurement event flags so that we can
//test against them. This is recommended in datasheet during setup.
void MPL3115A2::enableEventFlags()
{
  IIC_Write(PT_DATA_CFG, 0x07); // Enable all three pressure and temp event flags
   d7fbc:	2207      	movs	r2, #7
   d7fbe:	2113      	movs	r1, #19
   d7fc0:	f7ff bfc0 	b.w	d7f44 <_ZN9MPL3115A29IIC_WriteEhh>

000d7fc4 <_ZN9MPL3115A213toggleOneShotEv>:
}

//Clears then sets the OST bit which causes the sensor to immediately take another reading
//Needed to sample faster than 1Hz
void MPL3115A2::toggleOneShot(void)
{
   d7fc4:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7fc6:	2126      	movs	r1, #38	; 0x26
}

//Clears then sets the OST bit which causes the sensor to immediately take another reading
//Needed to sample faster than 1Hz
void MPL3115A2::toggleOneShot(void)
{
   d7fc8:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
   d7fca:	f7ff ff8d 	bl	d7ee8 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting &= ~(1<<1); //Clear OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   d7fce:	2126      	movs	r1, #38	; 0x26
   d7fd0:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
   d7fd4:	4620      	mov	r0, r4
   d7fd6:	f7ff ffb5 	bl	d7f44 <_ZN9MPL3115A29IIC_WriteEhh>

  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
   d7fda:	2126      	movs	r1, #38	; 0x26
   d7fdc:	4620      	mov	r0, r4
   d7fde:	f7ff ff83 	bl	d7ee8 <_ZN9MPL3115A28IIC_ReadEh>
  tempSetting |= (1<<1); //Set OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   d7fe2:	f040 0202 	orr.w	r2, r0, #2
   d7fe6:	b2d2      	uxtb	r2, r2
   d7fe8:	4620      	mov	r0, r4
   d7fea:	2126      	movs	r1, #38	; 0x26
}
   d7fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tempSetting &= ~(1<<1); //Clear OST bit
  IIC_Write(CTRL_REG1, tempSetting);

  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
  tempSetting |= (1<<1); //Set OST bit
  IIC_Write(CTRL_REG1, tempSetting);
   d7ff0:	f7ff bfa8 	b.w	d7f44 <_ZN9MPL3115A29IIC_WriteEhh>

000d7ff4 <_ZN9MPL3115A212readPressureEv>:

//Reads the current pressure in Pa
//Unit must be set in barometric pressure mode
//Returns -1 if no new data is available
float MPL3115A2::readPressure()
{
   d7ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Check PDR bit, if it's not set then toggle OST
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d7ff6:	2100      	movs	r1, #0

//Reads the current pressure in Pa
//Unit must be set in barometric pressure mode
//Returns -1 if no new data is available
float MPL3115A2::readPressure()
{
   d7ff8:	4607      	mov	r7, r0
	//Check PDR bit, if it's not set then toggle OST
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d7ffa:	f7ff ff75 	bl	d7ee8 <_ZN9MPL3115A28IIC_ReadEh>

	//Wait for PDR bit, indicates we have new pressure data
	int counter = 0;
	while(IIC_Read(STATUS) & (1<<2) == 0)
   d7ffe:	2100      	movs	r1, #0
   d8000:	4638      	mov	r0, r7
   d8002:	f7ff ff71 	bl	d7ee8 <_ZN9MPL3115A28IIC_ReadEh>
		if(++counter > 600) return(-999); //Error out after max of 512ms for a read
		delay(1);
	}

	// Read pressure registers
	Wire.beginTransmission(MPL3115A2_ADDRESS);
   d8006:	f003 fc15 	bl	db834 <_Z19__fetch_global_Wirev>
   d800a:	2160      	movs	r1, #96	; 0x60
   d800c:	f003 f9bf 	bl	db38e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(OUT_P_MSB);  // Address of data to get
   d8010:	f003 fc10 	bl	db834 <_Z19__fetch_global_Wirev>
   d8014:	2101      	movs	r1, #1
   d8016:	f7fd fd3e 	bl	d5a96 <_ZN7TwoWire5writeEi>
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
   d801a:	f003 fc0b 	bl	db834 <_Z19__fetch_global_Wirev>
   d801e:	2100      	movs	r1, #0
   d8020:	f003 f9b8 	bl	db394 <_ZN7TwoWire15endTransmissionEh>
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 3) != 3) { // Request three bytes
   d8024:	f003 fc06 	bl	db834 <_Z19__fetch_global_Wirev>
   d8028:	2203      	movs	r2, #3
   d802a:	2160      	movs	r1, #96	; 0x60
   d802c:	f003 f9a8 	bl	db380 <_ZN7TwoWire11requestFromEhj>
   d8030:	2803      	cmp	r0, #3
   d8032:	d12c      	bne.n	d808e <_ZN9MPL3115A212readPressureEv+0x9a>
		return -999;
	}

	byte msb, csb, lsb;
	msb = Wire.read();
   d8034:	f003 fbfe 	bl	db834 <_Z19__fetch_global_Wirev>
   d8038:	6803      	ldr	r3, [r0, #0]
   d803a:	695b      	ldr	r3, [r3, #20]
   d803c:	4798      	blx	r3
   d803e:	4606      	mov	r6, r0
	csb = Wire.read();
   d8040:	f003 fbf8 	bl	db834 <_Z19__fetch_global_Wirev>
   d8044:	6803      	ldr	r3, [r0, #0]
   d8046:	695b      	ldr	r3, [r3, #20]
   d8048:	4798      	blx	r3
   d804a:	4604      	mov	r4, r0
	lsb = Wire.read();
   d804c:	f003 fbf2 	bl	db834 <_Z19__fetch_global_Wirev>
   d8050:	6803      	ldr	r3, [r0, #0]
   d8052:	695b      	ldr	r3, [r3, #20]
   d8054:	4798      	blx	r3

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading

	// Pressure comes back as a left shifted 20 bit number
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   d8056:	0436      	lsls	r6, r6, #16
   d8058:	0224      	lsls	r4, r4, #8
   d805a:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
   d805e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
	}

	byte msb, csb, lsb;
	msb = Wire.read();
	csb = Wire.read();
	lsb = Wire.read();
   d8062:	b2c5      	uxtb	r5, r0

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading

	// Pressure comes back as a left shifted 20 bit number
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
   d8064:	4334      	orrs	r4, r6
   d8066:	432c      	orrs	r4, r5
	byte msb, csb, lsb;
	msb = Wire.read();
	csb = Wire.read();
	lsb = Wire.read();

	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
   d8068:	4638      	mov	r0, r7
   d806a:	f7ff ffab 	bl	d7fc4 <_ZN9MPL3115A213toggleOneShotEv>

	lsb &= 0b00110000; //Bits 5/4 represent the fractional component
	lsb >>= 4; //Get it right aligned
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction

	float pressure = (float)pressure_whole + pressure_decimal;
   d806e:	f3c5 1501 	ubfx	r5, r5, #4, #2
   d8072:	11a3      	asrs	r3, r4, #6
   d8074:	ee07 5a90 	vmov	s15, r5
   d8078:	ee00 3a10 	vmov	s0, r3
   d807c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d8080:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d8084:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   d8088:	eea7 0a87 	vfma.f32	s0, s15, s14

	return(pressure);
   d808c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Read pressure registers
	Wire.beginTransmission(MPL3115A2_ADDRESS);
	Wire.write(OUT_P_MSB);  // Address of data to get
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 3) != 3) { // Request three bytes
		return -999;
   d808e:	ed9f 0a01 	vldr	s0, [pc, #4]	; d8094 <_ZN9MPL3115A212readPressureEv+0xa0>
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction

	float pressure = (float)pressure_whole + pressure_decimal;

	return(pressure);
}
   d8092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8094:	c479c000 	.word	0xc479c000

000d8098 <_GLOBAL__sub_I__ZN9MPL3115A2C2Ev>:
   d8098:	f001 b940 	b.w	d931c <HAL_Pin_Map>

000d809c <_ZN10CloudClass7publishEPKcS1_.isra.8>:
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d809c:	b513      	push	{r0, r1, r4, lr}
   d809e:	4b05      	ldr	r3, [pc, #20]	; (d80b4 <_ZN10CloudClass7publishEPKcS1_.isra.8+0x18>)
   d80a0:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d80a2:	f88d 3000 	strb.w	r3, [sp]
   d80a6:	233c      	movs	r3, #60	; 0x3c
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d80a8:	4604      	mov	r4, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d80aa:	f002 fd79 	bl	daba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
}
   d80ae:	4620      	mov	r0, r4
   d80b0:	b002      	add	sp, #8
   d80b2:	bd10      	pop	{r4, pc}
   d80b4:	2003e1ed 	.word	0x2003e1ed

000d80b8 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf>:
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   d80b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d80bc:	ed2d 8b02 	vpush	{d8}
    if(AnemoneterPeriodReadingCount == 0)
   d80c0:	f241 6578 	movw	r5, #5752	; 0x1678
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   d80c4:	4604      	mov	r4, r0
    if(AnemoneterPeriodReadingCount == 0)
   d80c6:	5943      	ldr	r3, [r0, r5]
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

float  WeatherSensors::getAndResetAnemometerMPH(float * gustMPH)
{
   d80c8:	468a      	mov	sl, r1
    if(AnemoneterPeriodReadingCount == 0)
   d80ca:	b923      	cbnz	r3, d80d6 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0x1e>
    {
        *gustMPH = 0.0;
   d80cc:	ed9f 0a2a 	vldr	s0, [pc, #168]	; d8178 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xc0>
   d80d0:	ed81 0a00 	vstr	s0, [r1]
        return 0;
   d80d4:	e04c      	b.n	d8170 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xb8>
    }
    // Nonintuitive math:  We've collected the sum of the observed periods between pulses, and the number of observations.
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
   d80d6:	f500 53b3 	add.w	r3, r0, #5728	; 0x1660
   d80da:	f241 6b74 	movw	fp, #5748	; 0x1674
   d80de:	6918      	ldr	r0, [r3, #16]
   d80e0:	f005 fcb2 	bl	dda48 <__aeabi_f2d>
   d80e4:	2200      	movs	r2, #0
   d80e6:	4b25      	ldr	r3, [pc, #148]	; (d817c <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf+0xc4>)
   d80e8:	f005 fd02 	bl	ddaf0 <__aeabi_dmul>
   d80ec:	4606      	mov	r6, r0
   d80ee:	5960      	ldr	r0, [r4, r5]
   d80f0:	f854 300b 	ldr.w	r3, [r4, fp]
   d80f4:	ee07 0a90 	vmov	s15, r0
   d80f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d80fc:	460f      	mov	r7, r1
   d80fe:	ee17 0a90 	vmov	r0, s15
   d8102:	ee08 3a10 	vmov	s16, r3
   d8106:	f005 fc9f 	bl	dda48 <__aeabi_f2d>
   d810a:	4632      	mov	r2, r6
   d810c:	463b      	mov	r3, r7
   d810e:	f005 fcef 	bl	ddaf0 <__aeabi_dmul>
   d8112:	eef8 7a48 	vcvt.f32.u32	s15, s16
   d8116:	4680      	mov	r8, r0
   d8118:	ee17 0a90 	vmov	r0, s15
   d811c:	4689      	mov	r9, r1
   d811e:	f005 fc93 	bl	dda48 <__aeabi_f2d>
   d8122:	4602      	mov	r2, r0
   d8124:	460b      	mov	r3, r1
   d8126:	4640      	mov	r0, r8
   d8128:	4649      	mov	r1, r9
   d812a:	f005 fe0b 	bl	ddd44 <__aeabi_ddiv>
   d812e:	f005 ffd7 	bl	de0e0 <__aeabi_d2f>
    AnemoneterPeriodTotal = 0;
   d8132:	2300      	movs	r3, #0
   d8134:	f844 300b 	str.w	r3, [r4, fp]
    AnemoneterPeriodReadingCount = 0;
   d8138:	5163      	str	r3, [r4, r5]
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d813a:	f241 657c 	movw	r5, #5756	; 0x167c
        return 0;
    }
    // Nonintuitive math:  We've collected the sum of the observed periods between pulses, and the number of observations.
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
   d813e:	4680      	mov	r8, r0
    AnemoneterPeriodTotal = 0;
    AnemoneterPeriodReadingCount = 0;
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d8140:	5960      	ldr	r0, [r4, r5]
   d8142:	ee07 0a90 	vmov	s15, r0
   d8146:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d814a:	ee17 0a90 	vmov	r0, s15
   d814e:	f005 fc7b 	bl	dda48 <__aeabi_f2d>
   d8152:	460b      	mov	r3, r1
   d8154:	4602      	mov	r2, r0
   d8156:	4639      	mov	r1, r7
   d8158:	4630      	mov	r0, r6
   d815a:	f005 fdf3 	bl	ddd44 <__aeabi_ddiv>
   d815e:	f005 ffbf 	bl	de0e0 <__aeabi_d2f>
    GustPeriod = UINT_MAX;
   d8162:	f04f 33ff 	mov.w	r3, #4294967295
    // Now, we calculate the average period (sum / number of readings), take the inverse and muliple by 1000 to give frequency, and then mulitply by our scale to get MPH.
    // The math below is transformed to maximize accuracy by doing all muliplications BEFORE dividing.
    float result = AnemometerScaleMPH * 1000.0 * float(AnemoneterPeriodReadingCount) / float(AnemoneterPeriodTotal);
    AnemoneterPeriodTotal = 0;
    AnemoneterPeriodReadingCount = 0;
    *gustMPH = AnemometerScaleMPH  * 1000.0 / float(GustPeriod);
   d8166:	f8ca 0000 	str.w	r0, [sl]
    GustPeriod = UINT_MAX;
   d816a:	ee00 8a10 	vmov	s0, r8
   d816e:	5163      	str	r3, [r4, r5]
    return result;
}
   d8170:	ecbd 8b02 	vpop	{d8}
   d8174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8178:	00000000 	.word	0x00000000
   d817c:	408f4000 	.word	0x408f4000

000d8180 <_ZN14WeatherSensors21captureBatteryVoltageEv>:

void WeatherSensors::captureBatteryVoltage()
{
   d8180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8182:	4605      	mov	r5, r0
  unsigned int rawVoltage = 0;
  Wire.requestFrom(0x4D, 2);
   d8184:	f003 fb56 	bl	db834 <_Z19__fetch_global_Wirev>
   d8188:	2202      	movs	r2, #2
   d818a:	214d      	movs	r1, #77	; 0x4d
   d818c:	f003 f8f8 	bl	db380 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() == 2)
   d8190:	f003 fb50 	bl	db834 <_Z19__fetch_global_Wirev>
   d8194:	6803      	ldr	r3, [r0, #0]
   d8196:	691b      	ldr	r3, [r3, #16]
   d8198:	4798      	blx	r3
   d819a:	2802      	cmp	r0, #2
   d819c:	d132      	bne.n	d8204 <_ZN14WeatherSensors21captureBatteryVoltageEv+0x84>
  {
    rawVoltage = (Wire.read() << 8) | (Wire.read());
   d819e:	f003 fb49 	bl	db834 <_Z19__fetch_global_Wirev>
   d81a2:	6803      	ldr	r3, [r0, #0]
   d81a4:	695b      	ldr	r3, [r3, #20]
   d81a6:	4798      	blx	r3
   d81a8:	4606      	mov	r6, r0
   d81aa:	f003 fb43 	bl	db834 <_Z19__fetch_global_Wirev>
   d81ae:	6803      	ldr	r3, [r0, #0]
   d81b0:	695b      	ldr	r3, [r3, #20]
   d81b2:	4798      	blx	r3
    batVoltageTotal += (float)(rawVoltage)/4096.0*13.64; // 3.3*(4.7+1.5)/1.5
   d81b4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   d81b8:	ee07 0a90 	vmov	s15, r0
   d81bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d81c0:	f505 54b5 	add.w	r4, r5, #5792	; 0x16a0
   d81c4:	ee17 0a90 	vmov	r0, s15
   d81c8:	f005 fc3e 	bl	dda48 <__aeabi_f2d>
   d81cc:	2200      	movs	r2, #0
   d81ce:	4b10      	ldr	r3, [pc, #64]	; (d8210 <_ZN14WeatherSensors21captureBatteryVoltageEv+0x90>)
   d81d0:	f005 fc8e 	bl	ddaf0 <__aeabi_dmul>
   d81d4:	a30c      	add	r3, pc, #48	; (adr r3, d8208 <_ZN14WeatherSensors21captureBatteryVoltageEv+0x88>)
   d81d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81da:	f005 fc89 	bl	ddaf0 <__aeabi_dmul>
   d81de:	4606      	mov	r6, r0
   d81e0:	6920      	ldr	r0, [r4, #16]
   d81e2:	460f      	mov	r7, r1
   d81e4:	f005 fc30 	bl	dda48 <__aeabi_f2d>
   d81e8:	4602      	mov	r2, r0
   d81ea:	460b      	mov	r3, r1
   d81ec:	4630      	mov	r0, r6
   d81ee:	4639      	mov	r1, r7
   d81f0:	f005 facc 	bl	dd78c <__adddf3>
   d81f4:	f005 ff74 	bl	de0e0 <__aeabi_d2f>
    batVoltageCount ++;
   d81f8:	f241 62b4 	movw	r2, #5812	; 0x16b4
  unsigned int rawVoltage = 0;
  Wire.requestFrom(0x4D, 2);
  if (Wire.available() == 2)
  {
    rawVoltage = (Wire.read() << 8) | (Wire.read());
    batVoltageTotal += (float)(rawVoltage)/4096.0*13.64; // 3.3*(4.7+1.5)/1.5
   d81fc:	6120      	str	r0, [r4, #16]
    batVoltageCount ++;
   d81fe:	58ab      	ldr	r3, [r5, r2]
   d8200:	3301      	adds	r3, #1
   d8202:	50ab      	str	r3, [r5, r2]
   d8204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8206:	bf00      	nop
   d8208:	147ae148 	.word	0x147ae148
   d820c:	402b47ae 	.word	0x402b47ae
   d8210:	3f300000 	.word	0x3f300000

000d8214 <_ZN14WeatherSensors20getAndResetBatteryMVEv>:
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d8214:	f241 62b4 	movw	r2, #5812	; 0x16b4
   d8218:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
   d821c:	5881      	ldr	r1, [r0, r2]
   d821e:	edd3 6a04 	vldr	s13, [r3, #16]
   d8222:	ee07 1a90 	vmov	s15, r1
   d8226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    batVoltageCount ++;
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
   d822a:	b082      	sub	sp, #8
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d822c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 batVoltageTotal = 0;
   d8230:	2100      	movs	r1, #0
   d8232:	6119      	str	r1, [r3, #16]
 batVoltageCount = 0;
   d8234:	2300      	movs	r3, #0
   d8236:	5083      	str	r3, [r0, r2]
  }  
}

uint16_t WeatherSensors::getAndResetBatteryMV()
{
 uint16_t result = (uint16_t) 1000*(batVoltageTotal/batVoltageCount);
   d8238:	ed9f 7a05 	vldr	s14, [pc, #20]	; d8250 <_ZN14WeatherSensors20getAndResetBatteryMVEv+0x3c>
   d823c:	ee67 7a87 	vmul.f32	s15, s15, s14
   d8240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d8244:	edcd 7a01 	vstr	s15, [sp, #4]
 batVoltageTotal = 0;
 batVoltageCount = 0;
 return result;
}
   d8248:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d824c:	b002      	add	sp, #8
   d824e:	4770      	bx	lr
   d8250:	447a0000 	.word	0x447a0000

000d8254 <_ZN14WeatherSensors21getAndResetRainInchesEv>:
}*/


float WeatherSensors::getAndResetRainInches()
{
    float result = RainScaleInches * float(rainEventCount);
   d8254:	f500 53b3 	add.w	r3, r0, #5728	; 0x1660
   d8258:	ed93 0a00 	vldr	s0, [r3]
   d825c:	edd3 7a02 	vldr	s15, [r3, #8]
   d8260:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    rainEventCount = 0;
   d8264:	2200      	movs	r2, #0
   d8266:	601a      	str	r2, [r3, #0]
    return result;
}
   d8268:	ee20 0a27 	vmul.f32	s0, s0, s15
   d826c:	4770      	bx	lr
	...

000d8270 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv>:
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   d8270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(windVaneReadingCount == 0) {
   d8272:	f241 6790 	movw	r7, #5776	; 0x1690
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   d8276:	ed2d 8b02 	vpush	{d8}
    if(windVaneReadingCount == 0) {
   d827a:	59c3      	ldr	r3, [r0, r7]
   d827c:	ed9f 8a28 	vldr	s16, [pc, #160]	; d8320 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb0>
    }
    return;
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
   d8280:	4604      	mov	r4, r0
    if(windVaneReadingCount == 0) {
   d8282:	2b00      	cmp	r3, #0
   d8284:	d041      	beq.n	d830a <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9a>
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   d8286:	ee07 3a90 	vmov	s15, r3
   d828a:	f500 56b4 	add.w	r6, r0, #5760	; 0x1680
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   d828e:	edd6 6a03 	vldr	s13, [r6, #12]
float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   d8292:	ed96 7a02 	vldr	s14, [r6, #8]
   d8296:	eef8 7a67 	vcvt.f32.u32	s15, s15
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
   d829a:	4635      	mov	r5, r6
float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
   d829c:	eec7 8a27 	vdiv.f32	s17, s14, s15
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   d82a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d82a4:	eec7 7a28 	vdiv.f32	s15, s14, s17
   d82a8:	ee17 0a90 	vmov	r0, s15
   d82ac:	f005 fbcc 	bl	dda48 <__aeabi_f2d>
   d82b0:	ec41 0b10 	vmov	d0, r0, r1
   d82b4:	f003 fde4 	bl	dbe80 <atan>
   d82b8:	2200      	movs	r2, #0
   d82ba:	ec51 0b10 	vmov	r0, r1, d0
   d82be:	4b19      	ldr	r3, [pc, #100]	; (d8324 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb4>)
   d82c0:	f005 fc16 	bl	ddaf0 <__aeabi_dmul>
   d82c4:	a314      	add	r3, pc, #80	; (adr r3, d8318 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xa8>)
   d82c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d82ca:	f005 fd3b 	bl	ddd44 <__aeabi_ddiv>
   d82ce:	f005 ff07 	bl	de0e0 <__aeabi_d2f>
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   d82d2:	eef4 8ac8 	vcmpe.f32	s17, s16
   d82d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if(windVaneReadingCount == 0) {
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
   d82da:	ee00 0a10 	vmov	s0, r0
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   d82de:	bf48      	it	mi
   d82e0:	eddf 7a11 	vldrmi	s15, [pc, #68]	; d8328 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xb8>
        return 0;
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
   d82e4:	ed86 8a02 	vstr	s16, [r6, #8]
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
   d82e8:	bf48      	it	mi
   d82ea:	ee30 0a27 	vaddmi.f32	s0, s0, s15
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
    windVaneReadingCount = 0;
   d82ee:	2300      	movs	r3, #0
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;
   d82f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d82f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
    float avgCos = windVaneCosTotal/float(windVaneReadingCount);
    float avgSin = windVaneSinTotal/float(windVaneReadingCount);
    float result = atan(avgSin/avgCos) * 180.0 / 3.14159;
    windVaneCosTotal = 0.0;
    windVaneSinTotal = 0.0;
   d82f8:	ed85 8a03 	vstr	s16, [r5, #12]
    windVaneReadingCount = 0;
   d82fc:	51e3      	str	r3, [r4, r7]
    // atan can only tell where the angle is within 180 degrees.  Need to look at cos to tell which half of circle we're in
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;
   d82fe:	d506      	bpl.n	d830e <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9e>
   d8300:	eddf 7a0a 	vldr	s15, [pc, #40]	; d832c <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0xbc>
   d8304:	ee30 0a27 	vadd.f32	s0, s0, s15
   d8308:	e001      	b.n	d830e <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv+0x9e>
}

float WeatherSensors::getAndResetWindVaneDegrees()
{
    if(windVaneReadingCount == 0) {
        return 0;
   d830a:	eeb0 0a48 	vmov.f32	s0, s16
    if(avgCos < 0) result += 180.0;
    // atan will return negative angles in the NW quadrant -- push those into positive space.
    if(result < 0) result += 360.0;

   return result;
}
   d830e:	ecbd 8b02 	vpop	{d8}
   d8312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8314:	f3af 8000 	nop.w
   d8318:	f01b866e 	.word	0xf01b866e
   d831c:	400921f9 	.word	0x400921f9
   d8320:	00000000 	.word	0x00000000
   d8324:	40668000 	.word	0x40668000
   d8328:	43340000 	.word	0x43340000
   d832c:	43b40000 	.word	0x43b40000

000d8330 <_ZN14WeatherSensors20lookupRadiansFromRawEj>:

float WeatherSensors::lookupRadiansFromRaw(unsigned int analogRaw)
{
//Serial.println(analogRaw);
    // The mechanism for reading the weathervane isn't arbitrary, but effectively, we just need to look up which of the 16 positions we're in.
    if(analogRaw >= 2200 && analogRaw < 2400) return (3.14);//South
   d8330:	f6a1 0398 	subw	r3, r1, #2200	; 0x898
   d8334:	2bc7      	cmp	r3, #199	; 0xc7
   d8336:	d942      	bls.n	d83be <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x8e>
    if(analogRaw >= 2100 && analogRaw < 2200) return (3.53);//SSW
   d8338:	f6a1 0334 	subw	r3, r1, #2100	; 0x834
   d833c:	2b63      	cmp	r3, #99	; 0x63
   d833e:	d941      	bls.n	d83c4 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x94>
    if(analogRaw >= 3200 && analogRaw < 3299) return (3.93);//SW
   d8340:	f5a1 6348 	sub.w	r3, r1, #3200	; 0xc80
   d8344:	2b62      	cmp	r3, #98	; 0x62
   d8346:	d940      	bls.n	d83ca <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x9a>
    if(analogRaw >= 3100 && analogRaw < 3200) return (4.32);//WSW
   d8348:	f6a1 431c 	subw	r3, r1, #3100	; 0xc1c
   d834c:	2b63      	cmp	r3, #99	; 0x63
   d834e:	d93f      	bls.n	d83d0 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xa0>
    if(analogRaw >= 3890 && analogRaw < 3999) return (4.71);//West
   d8350:	f6a1 7332 	subw	r3, r1, #3890	; 0xf32
   d8354:	2b6c      	cmp	r3, #108	; 0x6c
   d8356:	d93e      	bls.n	d83d6 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xa6>
    if(analogRaw >= 3700 && analogRaw < 3780) return (5.11);//WNW
   d8358:	f6a1 6374 	subw	r3, r1, #3700	; 0xe74
   d835c:	2b4f      	cmp	r3, #79	; 0x4f
   d835e:	d93d      	bls.n	d83dc <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xac>
    if(analogRaw >= 3780 && analogRaw < 3890) return (5.50);//NW
   d8360:	f6a1 63c4 	subw	r3, r1, #3780	; 0xec4
   d8364:	2b6d      	cmp	r3, #109	; 0x6d
   d8366:	d93c      	bls.n	d83e2 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xb2>
    if(analogRaw >= 3400 && analogRaw < 3500) return (5.89);//NNW
   d8368:	f6a1 5348 	subw	r3, r1, #3400	; 0xd48
   d836c:	2b63      	cmp	r3, #99	; 0x63
   d836e:	d93b      	bls.n	d83e8 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xb8>
    if(analogRaw >= 3570 && analogRaw < 3700) return (0.00);//North
   d8370:	f6a1 53f2 	subw	r3, r1, #3570	; 0xdf2
   d8374:	2b81      	cmp	r3, #129	; 0x81
   d8376:	d93a      	bls.n	d83ee <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xbe>
    if(analogRaw >= 2600 && analogRaw < 2700) return (0.39);//NNE
   d8378:	f6a1 2328 	subw	r3, r1, #2600	; 0xa28
   d837c:	2b63      	cmp	r3, #99	; 0x63
   d837e:	d939      	bls.n	d83f4 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xc4>
    if(analogRaw >= 2750 && analogRaw < 2850) return (0.79);//NE
   d8380:	f6a1 23be 	subw	r3, r1, #2750	; 0xabe
   d8384:	2b63      	cmp	r3, #99	; 0x63
   d8386:	d938      	bls.n	d83fa <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xca>
    if(analogRaw >= 1510 && analogRaw < 1580) return (1.18);//ENE
   d8388:	f2a1 53e6 	subw	r3, r1, #1510	; 0x5e6
   d838c:	2b45      	cmp	r3, #69	; 0x45
   d838e:	d937      	bls.n	d8400 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xd0>
    if(analogRaw >= 1580 && analogRaw < 1650) return (1.57);//East
   d8390:	f2a1 632c 	subw	r3, r1, #1580	; 0x62c
   d8394:	2b45      	cmp	r3, #69	; 0x45
   d8396:	d936      	bls.n	d8406 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xd6>
    if(analogRaw >= 1470 && analogRaw < 1510) return (1.96);//ESE
   d8398:	f2a1 53be 	subw	r3, r1, #1470	; 0x5be
   d839c:	2b27      	cmp	r3, #39	; 0x27
   d839e:	d935      	bls.n	d840c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xdc>
    if(analogRaw >= 1900 && analogRaw < 2000) return (2.36);//SE
   d83a0:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
   d83a4:	2b63      	cmp	r3, #99	; 0x63
   d83a6:	d934      	bls.n	d8412 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xe2>
    if(analogRaw >= 1700 && analogRaw < 1750) return (2.74);//SSE
   d83a8:	f2a1 61a4 	subw	r1, r1, #1700	; 0x6a4
    if(analogRaw > 4000) return(-1); // Open circuit?  Probably means the sensor is not connected
   d83ac:	eddf 7a1a 	vldr	s15, [pc, #104]	; d8418 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xe8>
   d83b0:	2932      	cmp	r1, #50	; 0x32
   d83b2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d83b6:	bf38      	it	cc
   d83b8:	eeb0 0a67 	vmovcc.f32	s0, s15
   d83bc:	4770      	bx	lr

float WeatherSensors::lookupRadiansFromRaw(unsigned int analogRaw)
{
//Serial.println(analogRaw);
    // The mechanism for reading the weathervane isn't arbitrary, but effectively, we just need to look up which of the 16 positions we're in.
    if(analogRaw >= 2200 && analogRaw < 2400) return (3.14);//South
   d83be:	ed9f 0a17 	vldr	s0, [pc, #92]	; d841c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xec>
   d83c2:	4770      	bx	lr
    if(analogRaw >= 2100 && analogRaw < 2200) return (3.53);//SSW
   d83c4:	ed9f 0a16 	vldr	s0, [pc, #88]	; d8420 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf0>
   d83c8:	4770      	bx	lr
    if(analogRaw >= 3200 && analogRaw < 3299) return (3.93);//SW
   d83ca:	ed9f 0a16 	vldr	s0, [pc, #88]	; d8424 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf4>
   d83ce:	4770      	bx	lr
    if(analogRaw >= 3100 && analogRaw < 3200) return (4.32);//WSW
   d83d0:	ed9f 0a15 	vldr	s0, [pc, #84]	; d8428 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xf8>
   d83d4:	4770      	bx	lr
    if(analogRaw >= 3890 && analogRaw < 3999) return (4.71);//West
   d83d6:	ed9f 0a15 	vldr	s0, [pc, #84]	; d842c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0xfc>
   d83da:	4770      	bx	lr
    if(analogRaw >= 3700 && analogRaw < 3780) return (5.11);//WNW
   d83dc:	ed9f 0a14 	vldr	s0, [pc, #80]	; d8430 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x100>
   d83e0:	4770      	bx	lr
    if(analogRaw >= 3780 && analogRaw < 3890) return (5.50);//NW
   d83e2:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
   d83e6:	4770      	bx	lr
    if(analogRaw >= 3400 && analogRaw < 3500) return (5.89);//NNW
   d83e8:	ed9f 0a12 	vldr	s0, [pc, #72]	; d8434 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x104>
   d83ec:	4770      	bx	lr
    if(analogRaw >= 3570 && analogRaw < 3700) return (0.00);//North
   d83ee:	ed9f 0a12 	vldr	s0, [pc, #72]	; d8438 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x108>
   d83f2:	4770      	bx	lr
    if(analogRaw >= 2600 && analogRaw < 2700) return (0.39);//NNE
   d83f4:	ed9f 0a11 	vldr	s0, [pc, #68]	; d843c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x10c>
   d83f8:	4770      	bx	lr
    if(analogRaw >= 2750 && analogRaw < 2850) return (0.79);//NE
   d83fa:	ed9f 0a11 	vldr	s0, [pc, #68]	; d8440 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x110>
   d83fe:	4770      	bx	lr
    if(analogRaw >= 1510 && analogRaw < 1580) return (1.18);//ENE
   d8400:	ed9f 0a10 	vldr	s0, [pc, #64]	; d8444 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x114>
   d8404:	4770      	bx	lr
    if(analogRaw >= 1580 && analogRaw < 1650) return (1.57);//East
   d8406:	ed9f 0a10 	vldr	s0, [pc, #64]	; d8448 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x118>
   d840a:	4770      	bx	lr
    if(analogRaw >= 1470 && analogRaw < 1510) return (1.96);//ESE
   d840c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; d844c <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x11c>
   d8410:	4770      	bx	lr
    if(analogRaw >= 1900 && analogRaw < 2000) return (2.36);//SE
   d8412:	ed9f 0a0f 	vldr	s0, [pc, #60]	; d8450 <_ZN14WeatherSensors20lookupRadiansFromRawEj+0x120>
    if(analogRaw >= 1700 && analogRaw < 1750) return (2.74);//SSE
    if(analogRaw > 4000) return(-1); // Open circuit?  Probably means the sensor is not connected
   // Particle.publish("error", String::format("Got %d from Windvane.",analogRaw), 60 , PRIVATE);
    return -1;
}
   d8416:	4770      	bx	lr
   d8418:	402f5c29 	.word	0x402f5c29
   d841c:	4048f5c3 	.word	0x4048f5c3
   d8420:	4061eb85 	.word	0x4061eb85
   d8424:	407b851f 	.word	0x407b851f
   d8428:	408a3d71 	.word	0x408a3d71
   d842c:	4096b852 	.word	0x4096b852
   d8430:	40a3851f 	.word	0x40a3851f
   d8434:	40bc7ae1 	.word	0x40bc7ae1
   d8438:	00000000 	.word	0x00000000
   d843c:	3ec7ae14 	.word	0x3ec7ae14
   d8440:	3f4a3d71 	.word	0x3f4a3d71
   d8444:	3f970a3d 	.word	0x3f970a3d
   d8448:	3fc8f5c3 	.word	0x3fc8f5c3
   d844c:	3ffae148 	.word	0x3ffae148
   d8450:	40170a3d 	.word	0x40170a3d
   d8454:	00000000 	.word	0x00000000

000d8458 <_ZN14WeatherSensors15captureWindVaneEv>:
    float result = RainScaleInches * float(rainEventCount);
    rainEventCount = 0;
    return result;
}
/// Wind Vane
void WeatherSensors::captureWindVane() {
   d8458:	b530      	push	{r4, r5, lr}
   d845a:	ed2d 8b02 	vpush	{d8}
    // Read the wind vane, and update the running average of the two components of the vector
    unsigned int windVaneRaw = analogRead(WindVanePin);
   d845e:	f241 6384 	movw	r3, #5764	; 0x1684
    float result = RainScaleInches * float(rainEventCount);
    rainEventCount = 0;
    return result;
}
/// Wind Vane
void WeatherSensors::captureWindVane() {
   d8462:	b083      	sub	sp, #12
   d8464:	4604      	mov	r4, r0
    // Read the wind vane, and update the running average of the two components of the vector
    unsigned int windVaneRaw = analogRead(WindVanePin);
   d8466:	5ac0      	ldrh	r0, [r0, r3]
   d8468:	f003 f9b2 	bl	db7d0 <analogRead>
    //Serial.println(windVaneRaw);
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
   d846c:	4601      	mov	r1, r0
   d846e:	4620      	mov	r0, r4
   d8470:	f7ff ff5e 	bl	d8330 <_ZN14WeatherSensors20lookupRadiansFromRawEj>
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
   d8474:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d8478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d847c:	dd3c      	ble.n	d84f8 <_ZN14WeatherSensors15captureWindVaneEv+0xa0>
   d847e:	ee10 0a10 	vmov	r0, s0
   d8482:	f005 fae1 	bl	dda48 <__aeabi_f2d>
   d8486:	a31e      	add	r3, pc, #120	; (adr r3, d8500 <_ZN14WeatherSensors15captureWindVaneEv+0xa8>)
   d8488:	e9d3 2300 	ldrd	r2, r3, [r3]
   d848c:	ec41 0b18 	vmov	d8, r0, r1
   d8490:	f005 fda0 	bl	ddfd4 <__aeabi_dcmplt>
   d8494:	b380      	cbz	r0, d84f8 <_ZN14WeatherSensors15captureWindVaneEv+0xa0>
    {
        windVaneCosTotal += cos(windVaneRadians);
   d8496:	eeb0 0a48 	vmov.f32	s0, s16
   d849a:	eef0 0a68 	vmov.f32	s1, s17
   d849e:	f003 ff3b 	bl	dc318 <cos>
   d84a2:	f504 55b4 	add.w	r5, r4, #5760	; 0x1680
   d84a6:	ec53 2b10 	vmov	r2, r3, d0
   d84aa:	68a8      	ldr	r0, [r5, #8]
   d84ac:	e9cd 2300 	strd	r2, r3, [sp]
   d84b0:	f005 faca 	bl	dda48 <__aeabi_f2d>
   d84b4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d84b8:	f005 f968 	bl	dd78c <__adddf3>
   d84bc:	f005 fe10 	bl	de0e0 <__aeabi_d2f>
        windVaneSinTotal += sin(windVaneRadians);
   d84c0:	eeb0 0a48 	vmov.f32	s0, s16
   d84c4:	eef0 0a68 	vmov.f32	s1, s17
    //Serial.println(windVaneRaw);
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
    {
        windVaneCosTotal += cos(windVaneRadians);
   d84c8:	60a8      	str	r0, [r5, #8]
        windVaneSinTotal += sin(windVaneRadians);
   d84ca:	f003 ff8d 	bl	dc3e8 <sin>
   d84ce:	f504 55b4 	add.w	r5, r4, #5760	; 0x1680
   d84d2:	ec53 2b10 	vmov	r2, r3, d0
   d84d6:	68e8      	ldr	r0, [r5, #12]
   d84d8:	e9cd 2300 	strd	r2, r3, [sp]
   d84dc:	f005 fab4 	bl	dda48 <__aeabi_f2d>
   d84e0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d84e4:	f005 f952 	bl	dd78c <__adddf3>
   d84e8:	f005 fdfa 	bl	de0e0 <__aeabi_d2f>
        windVaneReadingCount++;
   d84ec:	f241 6290 	movw	r2, #5776	; 0x1690
    float windVaneRadians = lookupRadiansFromRaw(windVaneRaw);
    //Serial.println(windVaneRadians);
    if(windVaneRadians > 0 && windVaneRadians < 6.14159)
    {
        windVaneCosTotal += cos(windVaneRadians);
        windVaneSinTotal += sin(windVaneRadians);
   d84f0:	60e8      	str	r0, [r5, #12]
        windVaneReadingCount++;
   d84f2:	58a3      	ldr	r3, [r4, r2]
   d84f4:	3301      	adds	r3, #1
   d84f6:	50a3      	str	r3, [r4, r2]
    }
    return;
}
   d84f8:	b003      	add	sp, #12
   d84fa:	ecbd 8b02 	vpop	{d8}
   d84fe:	bd30      	pop	{r4, r5, pc}
   d8500:	f80dc337 	.word	0xf80dc337
   d8504:	401890fc 	.word	0x401890fc

000d8508 <_ZN14WeatherSensors27captureTempHumidityPressureEv>:
    return -1;
}

/// end Wind vane

void WeatherSensors::captureTempHumidityPressure() {
   d8508:	b530      	push	{r4, r5, lr}
   d850a:	b085      	sub	sp, #20
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d850c:	aa02      	add	r2, sp, #8
   d850e:	a903      	add	r1, sp, #12
    return -1;
}

/// end Wind vane

void WeatherSensors::captureTempHumidityPressure() {
   d8510:	4604      	mov	r4, r0
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d8512:	f7fd feb2 	bl	d627a <_ZN15Adafruit_AM231526readTemperatureAndHumidityERfS0_>

  uint16_t tempKx10 = uint16_t(tempC*10)+2732;
  airTempKMedian.add(tempKx10);
   d8516:	eddd 7a03 	vldr	s15, [sp, #12]
   d851a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d851e:	ee67 7a87 	vmul.f32	s15, s15, s14
  // The running (mean) average is maintained by keeping a running sum of the observations,
  // and a count of the number of observations

  // Measure Relative Humidity and temperature from the AM2315
  float humidityRH, tempC, tempF;
  bool validTH = am2315.readTemperatureAndHumidity(tempC, humidityRH);
   d8522:	4605      	mov	r5, r0

  uint16_t tempKx10 = uint16_t(tempC*10)+2732;
  airTempKMedian.add(tempKx10);
   d8524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d8528:	f104 000a 	add.w	r0, r4, #10
   d852c:	ee17 1a90 	vmov	r1, s15
   d8530:	f601 21ac 	addw	r1, r1, #2732	; 0xaac
   d8534:	b289      	uxth	r1, r1
   d8536:	f000 fe76 	bl	d9226 <_ZN13RunningMedian3addEt>

  relativeHumidtyMedian.add(humidityRH);
   d853a:	eddd 7a02 	vldr	s15, [sp, #8]
   d853e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d8542:	f604 3006 	addw	r0, r4, #2822	; 0xb06
   d8546:	edcd 7a01 	vstr	s15, [sp, #4]
   d854a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d854e:	f000 fe6a 	bl	d9226 <_ZN13RunningMedian3addEt>

if (validTH){
   d8552:	2d00      	cmp	r5, #0
   d8554:	d048      	beq.n	d85e8 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
    //If the result is reasonable, add it to the running mean
    if(humidityRH > 0 && humidityRH < 105) // It's theoretically possible to get supersaturation humidity levels over 100%
   d8556:	ed9d 7a02 	vldr	s14, [sp, #8]
   d855a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d855e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8562:	dd13      	ble.n	d858c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x84>
   d8564:	eddf 7a31 	vldr	s15, [pc, #196]	; d862c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x124>
   d8568:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d856c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8570:	d50c      	bpl.n	d858c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x84>
    {
        // Add the observation to the running sum, and increment the number of observations
        humidityRHTotal += humidityRH;
   d8572:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d8576:	edd3 7a05 	vldr	s15, [r3, #20]
   d857a:	ee77 7a87 	vadd.f32	s15, s15, s14
        humidityRHReadingCount++;
   d857e:	f241 6298 	movw	r2, #5784	; 0x1698
if (validTH){
    //If the result is reasonable, add it to the running mean
    if(humidityRH > 0 && humidityRH < 105) // It's theoretically possible to get supersaturation humidity levels over 100%
    {
        // Add the observation to the running sum, and increment the number of observations
        humidityRHTotal += humidityRH;
   d8582:	edc3 7a05 	vstr	s15, [r3, #20]
        humidityRHReadingCount++;
   d8586:	58a3      	ldr	r3, [r4, r2]
   d8588:	3301      	adds	r3, #1
   d858a:	50a3      	str	r3, [r4, r2]
    }


    tempF = (tempC * 9.0) / 5.0 + 32.0;
   d858c:	9803      	ldr	r0, [sp, #12]
   d858e:	f005 fa5b 	bl	dda48 <__aeabi_f2d>
   d8592:	2200      	movs	r2, #0
   d8594:	4b26      	ldr	r3, [pc, #152]	; (d8630 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x128>)
   d8596:	f005 faab 	bl	ddaf0 <__aeabi_dmul>
   d859a:	2200      	movs	r2, #0
   d859c:	4b25      	ldr	r3, [pc, #148]	; (d8634 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x12c>)
   d859e:	f005 fbd1 	bl	ddd44 <__aeabi_ddiv>
   d85a2:	2200      	movs	r2, #0
   d85a4:	4b24      	ldr	r3, [pc, #144]	; (d8638 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x130>)
   d85a6:	f005 f8f1 	bl	dd78c <__adddf3>
   d85aa:	f005 fd99 	bl	de0e0 <__aeabi_d2f>
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
   d85ae:	eddf 7a23 	vldr	s15, [pc, #140]	; d863c <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x134>
        humidityRHTotal += humidityRH;
        humidityRHReadingCount++;
    }


    tempF = (tempC * 9.0) / 5.0 + 32.0;
   d85b2:	ee07 0a10 	vmov	s14, r0
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
   d85b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d85ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d85be:	dd13      	ble.n	d85e8 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
   d85c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; d8640 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x138>
   d85c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d85c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d85cc:	d50c      	bpl.n	d85e8 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0xe0>
    {
        // Add the observation to the running sum, and increment the number of observations
        tempFTotal += tempF;
   d85ce:	f504 53b4 	add.w	r3, r4, #5760	; 0x1680
   d85d2:	edd3 7a07 	vldr	s15, [r3, #28]
   d85d6:	ee77 7a87 	vadd.f32	s15, s15, s14
        tempFReadingCount++;
   d85da:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
    tempF = (tempC * 9.0) / 5.0 + 32.0;
    //If the result is reasonable, add it to the running mean
    if(tempF > -50 && tempF < 150)
    {
        // Add the observation to the running sum, and increment the number of observations
        tempFTotal += tempF;
   d85de:	edc3 7a07 	vstr	s15, [r3, #28]
        tempFReadingCount++;
   d85e2:	6813      	ldr	r3, [r2, #0]
   d85e4:	3301      	adds	r3, #1
   d85e6:	6013      	str	r3, [r2, #0]
    }
  }
  //Measure Pressure from the MPL3115A2
  float pressurePascals = barom.readPressure();
   d85e8:	f104 0008 	add.w	r0, r4, #8
   d85ec:	f7ff fd02 	bl	d7ff4 <_ZN9MPL3115A212readPressureEv>

  //If the result is reasonable, add it to the running mean
  // What's reasonable? http://findanswers.noaa.gov/noaa.answers/consumer/kbdetail.asp?kbid=544
  if(pressurePascals > 80000 && pressurePascals < 110000)
   d85f0:	eddf 7a14 	vldr	s15, [pc, #80]	; d8644 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x13c>
   d85f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d85f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d85fc:	dd13      	ble.n	d8626 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x11e>
   d85fe:	eddf 7a12 	vldr	s15, [pc, #72]	; d8648 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x140>
   d8602:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d860a:	d50c      	bpl.n	d8626 <_ZN14WeatherSensors27captureTempHumidityPressureEv+0x11e>
  {
      // Add the observation to the running sum, and increment the number of observations
      pressurePascalsTotal += pressurePascals;
   d860c:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
   d8610:	edd3 7a01 	vldr	s15, [r3, #4]
   d8614:	ee37 0a80 	vadd.f32	s0, s15, s0
      pressurePascalsReadingCount++;
   d8618:	f241 62a8 	movw	r2, #5800	; 0x16a8
  //If the result is reasonable, add it to the running mean
  // What's reasonable? http://findanswers.noaa.gov/noaa.answers/consumer/kbdetail.asp?kbid=544
  if(pressurePascals > 80000 && pressurePascals < 110000)
  {
      // Add the observation to the running sum, and increment the number of observations
      pressurePascalsTotal += pressurePascals;
   d861c:	ed83 0a01 	vstr	s0, [r3, #4]
      pressurePascalsReadingCount++;
   d8620:	58a3      	ldr	r3, [r4, r2]
   d8622:	3301      	adds	r3, #1
   d8624:	50a3      	str	r3, [r4, r2]
  }
  return;
}
   d8626:	b005      	add	sp, #20
   d8628:	bd30      	pop	{r4, r5, pc}
   d862a:	bf00      	nop
   d862c:	42d20000 	.word	0x42d20000
   d8630:	40220000 	.word	0x40220000
   d8634:	40140000 	.word	0x40140000
   d8638:	40400000 	.word	0x40400000
   d863c:	c2480000 	.word	0xc2480000
   d8640:	43160000 	.word	0x43160000
   d8644:	479c4000 	.word	0x479c4000
   d8648:	47d6d800 	.word	0x47d6d800

000d864c <_ZN14WeatherSensors16getAndResetTempFEv>:
  }
}

float WeatherSensors::getAndResetTempF()
{
    if(tempFReadingCount == 0) {
   d864c:	f500 52b5 	add.w	r2, r0, #5792	; 0x16a0
   d8650:	ed9f 0a09 	vldr	s0, [pc, #36]	; d8678 <_ZN14WeatherSensors16getAndResetTempFEv+0x2c>
   d8654:	6813      	ldr	r3, [r2, #0]
   d8656:	b16b      	cbz	r3, d8674 <_ZN14WeatherSensors16getAndResetTempFEv+0x28>
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
   d8658:	ee07 3a90 	vmov	s15, r3
   d865c:	f500 50b4 	add.w	r0, r0, #5760	; 0x1680
   d8660:	ed90 7a07 	vldr	s14, [r0, #28]
    tempFTotal = 0.0;
   d8664:	ed80 0a07 	vstr	s0, [r0, #28]
float WeatherSensors::getAndResetTempF()
{
    if(tempFReadingCount == 0) {
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
   d8668:	eef8 7a67 	vcvt.f32.u32	s15, s15
    tempFTotal = 0.0;
    tempFReadingCount = 0;
   d866c:	2300      	movs	r3, #0
    return result;
   d866e:	ee87 0a27 	vdiv.f32	s0, s14, s15
    if(tempFReadingCount == 0) {
        return 0;
    }
    float result = tempFTotal/float(tempFReadingCount);
    tempFTotal = 0.0;
    tempFReadingCount = 0;
   d8672:	6013      	str	r3, [r2, #0]
    return result;
}
   d8674:	4770      	bx	lr
   d8676:	bf00      	nop
   d8678:	00000000 	.word	0x00000000

000d867c <_ZN14WeatherSensors26getAndResetPressurePascalsEv>:
}


float WeatherSensors::getAndResetPressurePascals()
{
    if(pressurePascalsReadingCount == 0) {
   d867c:	f241 61a8 	movw	r1, #5800	; 0x16a8
   d8680:	ed9f 0a09 	vldr	s0, [pc, #36]	; d86a8 <_ZN14WeatherSensors26getAndResetPressurePascalsEv+0x2c>
   d8684:	5843      	ldr	r3, [r0, r1]
   d8686:	b16b      	cbz	r3, d86a4 <_ZN14WeatherSensors26getAndResetPressurePascalsEv+0x28>
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
   d8688:	ee07 3a90 	vmov	s15, r3
   d868c:	f500 52b5 	add.w	r2, r0, #5792	; 0x16a0
   d8690:	ed92 7a01 	vldr	s14, [r2, #4]
    pressurePascalsTotal = 0.0;
   d8694:	ed82 0a01 	vstr	s0, [r2, #4]
float WeatherSensors::getAndResetPressurePascals()
{
    if(pressurePascalsReadingCount == 0) {
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
   d8698:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pressurePascalsTotal = 0.0;
    pressurePascalsReadingCount = 0;
   d869c:	2300      	movs	r3, #0
    return result;
   d869e:	ee87 0a27 	vdiv.f32	s0, s14, s15
    if(pressurePascalsReadingCount == 0) {
        return 0;
    }
    float result = pressurePascalsTotal/float(pressurePascalsReadingCount);
    pressurePascalsTotal = 0.0;
    pressurePascalsReadingCount = 0;
   d86a2:	5043      	str	r3, [r0, r1]
    return result;
}
   d86a4:	4770      	bx	lr
   d86a6:	bf00      	nop
   d86a8:	00000000 	.word	0x00000000

000d86ac <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>:

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   d86ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d86ae:	4604      	mov	r4, r0
   d86b0:	4610      	mov	r0, r2
    int str_len = ss.length() + 1;
   d86b2:	6892      	ldr	r2, [r2, #8]

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   d86b4:	461e      	mov	r6, r3
    int str_len = ss.length() + 1;
    char s[str_len];
   d86b6:	f102 0308 	add.w	r3, r2, #8
   d86ba:	f023 0307 	bic.w	r3, r3, #7

// Private Methods /////////////////////////////////////////////////////////////
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
   d86be:	af00      	add	r7, sp, #0
    int str_len = ss.length() + 1;
    char s[str_len];
   d86c0:	ebad 0d03 	sub.w	sp, sp, r3
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d86c4:	4669      	mov	r1, sp
   d86c6:	2300      	movs	r3, #0
   d86c8:	3201      	adds	r2, #1
   d86ca:	f001 fcde 	bl	da08a <_ZNK6String8getBytesEPhjj>

    //Serial.println(s);
    char *p;
    int count;

    p = strchr (s,'.');         // Find decimal point, if any.
   d86ce:	212e      	movs	r1, #46	; 0x2e
   d86d0:	4668      	mov	r0, sp
// Functions only available to other functions in this library

//https://stackoverflow.com/questions/277772/avoid-trailing-zeroes-in-printf
String WeatherSensors::minimiseNumericString(String ss, int n) {
    int str_len = ss.length() + 1;
    char s[str_len];
   d86d2:	466d      	mov	r5, sp

    //Serial.println(s);
    char *p;
    int count;

    p = strchr (s,'.');         // Find decimal point, if any.
   d86d4:	f006 fae6 	bl	deca4 <strchr>
    if (p != NULL) {
   d86d8:	b1a8      	cbz	r0, d8706 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x5a>
   d86da:	4603      	mov	r3, r0
   d86dc:	1af2      	subs	r2, r6, r3
        count = n;              // Adjust for more or less decimals.
        while (count >= 0) {    // Maximum decimals allowed.
   d86de:	42d0      	cmn	r0, r2
   d86e0:	4619      	mov	r1, r3
   d86e2:	d403      	bmi.n	d86ec <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x40>
             count--;
             if (*p == '\0')    // If there's less than desired.
   d86e4:	780a      	ldrb	r2, [r1, #0]
   d86e6:	3301      	adds	r3, #1
   d86e8:	2a00      	cmp	r2, #0
   d86ea:	d1f7      	bne.n	d86dc <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x30>
                 break;
             p++;               // Next character.
        }

        *p-- = '\0';            // Truncate string.
   d86ec:	2200      	movs	r2, #0
   d86ee:	1e4b      	subs	r3, r1, #1
   d86f0:	700a      	strb	r2, [r1, #0]
        while (*p == '0')       // Remove trailing zeros.
   d86f2:	7819      	ldrb	r1, [r3, #0]
   d86f4:	2930      	cmp	r1, #48	; 0x30
   d86f6:	d102      	bne.n	d86fe <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x52>
            *p-- = '\0';
   d86f8:	f803 2901 	strb.w	r2, [r3], #-1
                 break;
             p++;               // Next character.
        }

        *p-- = '\0';            // Truncate string.
        while (*p == '0')       // Remove trailing zeros.
   d86fc:	e7f9      	b.n	d86f2 <_ZN14WeatherSensors21minimiseNumericStringE6Stringi+0x46>
            *p-- = '\0';

        if (*p == '.') {        // If all decimals were zeros, remove ".".
   d86fe:	292e      	cmp	r1, #46	; 0x2e
            *p = '\0';
   d8700:	bf04      	itt	eq
   d8702:	2200      	moveq	r2, #0
   d8704:	701a      	strbeq	r2, [r3, #0]
        }
    }
    return String(s);
   d8706:	4629      	mov	r1, r5
   d8708:	4620      	mov	r0, r4
   d870a:	f001 fbc2 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d870e:	4620      	mov	r0, r4
   d8710:	46bd      	mov	sp, r7
   d8712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8714:	0000      	movs	r0, r0
	...

000d8718 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv>:
  Particle.publish("Bateria", String( sensorReadings.millivolts));
}

// Convert sensorData to CSV String in US units
String WeatherSensors::sensorReadingsToCsvUS()
{
   d8718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   d871c:	4c9e      	ldr	r4, [pc, #632]	; (d8998 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x280>)
   d871e:	4d9f      	ldr	r5, [pc, #636]	; (d899c <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x284>)
  Particle.publish("Bateria", String( sensorReadings.millivolts));
}

// Convert sensorData to CSV String in US units
String WeatherSensors::sensorReadingsToCsvUS()
{
   d8720:	b0c0      	sub	sp, #256	; 0x100
   d8722:	460e      	mov	r6, r1
   d8724:	4680      	mov	r8, r0
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   d8726:	220a      	movs	r2, #10
   d8728:	6821      	ldr	r1, [r4, #0]
   d872a:	4668      	mov	r0, sp
   d872c:	f001 fc4a 	bl	d9fc4 <_ZN6StringC1Emh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d8730:	4669      	mov	r1, sp
   d8732:	a804      	add	r0, sp, #16
   d8734:	f001 fbec 	bl	d9f10 <_ZN6StringC1ERKS_>
   d8738:	4629      	mov	r1, r5
   d873a:	a804      	add	r0, sp, #16
   d873c:	f001 fc93 	bl	da066 <_ZplRK15StringSumHelperPKc>
  String(sensorReadings.windDegrees)+
   d8740:	220a      	movs	r2, #10
String WeatherSensors::sensorReadingsToCsvUS()
{
  String csvData =
//  String(Time.format(sensorReadings.unixTime, TIME_FORMAT_ISO8601_FULL))+
  String(sensorReadings.unixTime)+
  ","+
   d8742:	4607      	mov	r7, r0
  String(sensorReadings.windDegrees)+
   d8744:	88a1      	ldrh	r1, [r4, #4]
   d8746:	a808      	add	r0, sp, #32
   d8748:	f001 fc29 	bl	d9f9e <_ZN6StringC1Eih>
   d874c:	a908      	add	r1, sp, #32
   d874e:	4638      	mov	r0, r7
   d8750:	f001 fc7d 	bl	da04e <_ZplRK15StringSumHelperRK6String>
  ","+
   d8754:	4629      	mov	r1, r5
   d8756:	f001 fc86 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d875a:	4681      	mov	r9, r0
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
   d875c:	88e0      	ldrh	r0, [r4, #6]
   d875e:	4f90      	ldr	r7, [pc, #576]	; (d89a0 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x288>)
   d8760:	ee07 0a90 	vmov	s15, r0
   d8764:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d8768:	ee17 0a90 	vmov	r0, s15
   d876c:	f005 f96c 	bl	dda48 <__aeabi_f2d>
   d8770:	a383      	add	r3, pc, #524	; (adr r3, d8980 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x268>)
   d8772:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8776:	f005 fae5 	bl	ddd44 <__aeabi_ddiv>
   d877a:	4602      	mov	r2, r0
   d877c:	460b      	mov	r3, r1
   d877e:	a80c      	add	r0, sp, #48	; 0x30
   d8780:	4639      	mov	r1, r7
   d8782:	f001 fcc7 	bl	da114 <_ZN6String6formatEPKcz>
   d8786:	2301      	movs	r3, #1
   d8788:	aa0c      	add	r2, sp, #48	; 0x30
   d878a:	4631      	mov	r1, r6
   d878c:	a810      	add	r0, sp, #64	; 0x40
   d878e:	f7ff ff8d 	bl	d86ac <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d8792:	a910      	add	r1, sp, #64	; 0x40
   d8794:	4648      	mov	r0, r9
   d8796:	f001 fc5a 	bl	da04e <_ZplRK15StringSumHelperRK6String>
  ","+
   d879a:	4629      	mov	r1, r5
   d879c:	f001 fc63 	bl	da066 <_ZplRK15StringSumHelperPKc>
  String(sensorReadings.humid)+
   d87a0:	220a      	movs	r2, #10
  String(sensorReadings.unixTime)+
  ","+
  String(sensorReadings.windDegrees)+
  ","+
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
  ","+
   d87a2:	4681      	mov	r9, r0
  String(sensorReadings.humid)+
   d87a4:	7a21      	ldrb	r1, [r4, #8]
   d87a6:	a814      	add	r0, sp, #80	; 0x50
   d87a8:	f001 fbe7 	bl	d9f7a <_ZN6StringC1Ehh>
   d87ac:	a914      	add	r1, sp, #80	; 0x50
   d87ae:	4648      	mov	r0, r9
   d87b0:	f001 fc4d 	bl	da04e <_ZplRK15StringSumHelperRK6String>
  ","+
   d87b4:	4629      	mov	r1, r5
   d87b6:	f001 fc56 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d87ba:	4681      	mov	r9, r0
  minimiseNumericString(String::format("%.1f",(((float)sensorReadings.airTempKx10-2731.5)*9.0/50.0+32.0)),1)+
   d87bc:	8960      	ldrh	r0, [r4, #10]
   d87be:	ee07 0a90 	vmov	s15, r0
   d87c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d87c6:	ee17 0a90 	vmov	r0, s15
   d87ca:	f005 f93d 	bl	dda48 <__aeabi_f2d>
   d87ce:	a36e      	add	r3, pc, #440	; (adr r3, d8988 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x270>)
   d87d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87d4:	f004 ffd8 	bl	dd788 <__aeabi_dsub>
   d87d8:	2200      	movs	r2, #0
   d87da:	4b72      	ldr	r3, [pc, #456]	; (d89a4 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x28c>)
   d87dc:	f005 f988 	bl	ddaf0 <__aeabi_dmul>
   d87e0:	2200      	movs	r2, #0
   d87e2:	4b71      	ldr	r3, [pc, #452]	; (d89a8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x290>)
   d87e4:	f005 faae 	bl	ddd44 <__aeabi_ddiv>
   d87e8:	2200      	movs	r2, #0
   d87ea:	4b70      	ldr	r3, [pc, #448]	; (d89ac <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x294>)
   d87ec:	f004 ffce 	bl	dd78c <__adddf3>
   d87f0:	4602      	mov	r2, r0
   d87f2:	460b      	mov	r3, r1
   d87f4:	a818      	add	r0, sp, #96	; 0x60
   d87f6:	4639      	mov	r1, r7
   d87f8:	f001 fc8c 	bl	da114 <_ZN6String6formatEPKcz>
   d87fc:	aa18      	add	r2, sp, #96	; 0x60
   d87fe:	2301      	movs	r3, #1
   d8800:	4631      	mov	r1, r6
   d8802:	a81c      	add	r0, sp, #112	; 0x70
   d8804:	f7ff ff52 	bl	d86ac <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d8808:	a91c      	add	r1, sp, #112	; 0x70
   d880a:	4648      	mov	r0, r9
   d880c:	f001 fc1f 	bl	da04e <_ZplRK15StringSumHelperRK6String>
  ","+
   d8810:	4629      	mov	r1, r5
   d8812:	f001 fc28 	bl	da066 <_ZplRK15StringSumHelperPKc>
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   d8816:	89a3      	ldrh	r3, [r4, #12]
   d8818:	ed9f 7a65 	vldr	s14, [pc, #404]	; d89b0 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x298>
   d881c:	f8df 919c 	ldr.w	r9, [pc, #412]	; d89bc <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a4>
   d8820:	ee07 3a90 	vmov	s15, r3
   d8824:	eef8 7a67 	vcvt.f32.u32	s15, s15
  minimiseNumericString(String::format("%.1f",(float)sensorReadings.wind_metersph/1609.34),1)+
  ","+
  String(sensorReadings.humid)+
  ","+
  minimiseNumericString(String::format("%.1f",(((float)sensorReadings.airTempKx10-2731.5)*9.0/50.0+32.0)),1)+
  ","+
   d8828:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.3f",((float)sensorReadings.rainmmx1000/25400)),3)+
   d882a:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d882e:	ee16 0a90 	vmov	r0, s13
   d8832:	f005 f909 	bl	dda48 <__aeabi_f2d>
   d8836:	4602      	mov	r2, r0
   d8838:	460b      	mov	r3, r1
   d883a:	a820      	add	r0, sp, #128	; 0x80
   d883c:	4649      	mov	r1, r9
   d883e:	f001 fc69 	bl	da114 <_ZN6String6formatEPKcz>
   d8842:	aa20      	add	r2, sp, #128	; 0x80
   d8844:	2303      	movs	r3, #3
   d8846:	4631      	mov	r1, r6
   d8848:	a824      	add	r0, sp, #144	; 0x90
   d884a:	f7ff ff2f 	bl	d86ac <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d884e:	a924      	add	r1, sp, #144	; 0x90
   d8850:	4650      	mov	r0, sl
   d8852:	f001 fbfc 	bl	da04e <_ZplRK15StringSumHelperRK6String>
  ","+
   d8856:	4629      	mov	r1, r5
   d8858:	f001 fc05 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d885c:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.2f",(float)sensorReadings.barometerhPa/338.6389),2)+
   d885e:	6920      	ldr	r0, [r4, #16]
   d8860:	f005 f8f2 	bl	dda48 <__aeabi_f2d>
   d8864:	a34a      	add	r3, pc, #296	; (adr r3, d8990 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x278>)
   d8866:	e9d3 2300 	ldrd	r2, r3, [r3]
   d886a:	f005 fa6b 	bl	ddd44 <__aeabi_ddiv>
   d886e:	4602      	mov	r2, r0
   d8870:	460b      	mov	r3, r1
   d8872:	a828      	add	r0, sp, #160	; 0xa0
   d8874:	494f      	ldr	r1, [pc, #316]	; (d89b4 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x29c>)
   d8876:	f001 fc4d 	bl	da114 <_ZN6String6formatEPKcz>
   d887a:	aa28      	add	r2, sp, #160	; 0xa0
   d887c:	2302      	movs	r3, #2
   d887e:	4631      	mov	r1, r6
   d8880:	a82c      	add	r0, sp, #176	; 0xb0
   d8882:	f7ff ff13 	bl	d86ac <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d8886:	a92c      	add	r1, sp, #176	; 0xb0
   d8888:	4650      	mov	r0, sl
   d888a:	f001 fbe0 	bl	da04e <_ZplRK15StringSumHelperRK6String>
  ","+
   d888e:	4629      	mov	r1, r5
   d8890:	f001 fbe9 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d8894:	4682      	mov	sl, r0
  minimiseNumericString(String::format("%.1f",(float)(sensorReadings.gust_metersph/1609.34)),1)+
   d8896:	8aa0      	ldrh	r0, [r4, #20]
   d8898:	f005 f8c4 	bl	dda24 <__aeabi_i2d>
   d889c:	a338      	add	r3, pc, #224	; (adr r3, d8980 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x268>)
   d889e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d88a2:	f005 fa4f 	bl	ddd44 <__aeabi_ddiv>
   d88a6:	f005 fc1b 	bl	de0e0 <__aeabi_d2f>
   d88aa:	f005 f8cd 	bl	dda48 <__aeabi_f2d>
   d88ae:	4602      	mov	r2, r0
   d88b0:	460b      	mov	r3, r1
   d88b2:	a830      	add	r0, sp, #192	; 0xc0
   d88b4:	4639      	mov	r1, r7
   d88b6:	f001 fc2d 	bl	da114 <_ZN6String6formatEPKcz>
   d88ba:	aa30      	add	r2, sp, #192	; 0xc0
   d88bc:	2301      	movs	r3, #1
   d88be:	4631      	mov	r1, r6
   d88c0:	a834      	add	r0, sp, #208	; 0xd0
   d88c2:	f7ff fef3 	bl	d86ac <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d88c6:	a934      	add	r1, sp, #208	; 0xd0
   d88c8:	4650      	mov	r0, sl
   d88ca:	f001 fbc0 	bl	da04e <_ZplRK15StringSumHelperRK6String>
  ","+
   d88ce:	4629      	mov	r1, r5
   d88d0:	f001 fbc9 	bl	da066 <_ZplRK15StringSumHelperPKc>
   d88d4:	4605      	mov	r5, r0
  minimiseNumericString(String::format("%.3f",(float)sensorReadings.millivolts/1000.0),3); // replace with voltage/lux
   d88d6:	8ae0      	ldrh	r0, [r4, #22]
   d88d8:	ee07 0a90 	vmov	s15, r0
   d88dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d88e0:	ee17 0a90 	vmov	r0, s15
   d88e4:	f005 f8b0 	bl	dda48 <__aeabi_f2d>
   d88e8:	2200      	movs	r2, #0
   d88ea:	4b33      	ldr	r3, [pc, #204]	; (d89b8 <_ZN14WeatherSensors21sensorReadingsToCsvUSEv+0x2a0>)
   d88ec:	f005 fa2a 	bl	ddd44 <__aeabi_ddiv>
   d88f0:	4602      	mov	r2, r0
   d88f2:	460b      	mov	r3, r1
   d88f4:	a838      	add	r0, sp, #224	; 0xe0
   d88f6:	4649      	mov	r1, r9
   d88f8:	f001 fc0c 	bl	da114 <_ZN6String6formatEPKcz>
   d88fc:	2303      	movs	r3, #3
   d88fe:	aa38      	add	r2, sp, #224	; 0xe0
   d8900:	4631      	mov	r1, r6
   d8902:	a83c      	add	r0, sp, #240	; 0xf0
   d8904:	f7ff fed2 	bl	d86ac <_ZN14WeatherSensors21minimiseNumericStringE6Stringi>
   d8908:	a93c      	add	r1, sp, #240	; 0xf0
   d890a:	4628      	mov	r0, r5
   d890c:	f001 fb9f 	bl	da04e <_ZplRK15StringSumHelperRK6String>
   d8910:	4601      	mov	r1, r0
   d8912:	4640      	mov	r0, r8
   d8914:	f001 fafc 	bl	d9f10 <_ZN6StringC1ERKS_>
   d8918:	a83c      	add	r0, sp, #240	; 0xf0
   d891a:	f001 fa73 	bl	d9e04 <_ZN6StringD1Ev>
   d891e:	a838      	add	r0, sp, #224	; 0xe0
   d8920:	f001 fa70 	bl	d9e04 <_ZN6StringD1Ev>
   d8924:	a834      	add	r0, sp, #208	; 0xd0
   d8926:	f001 fa6d 	bl	d9e04 <_ZN6StringD1Ev>
   d892a:	a830      	add	r0, sp, #192	; 0xc0
   d892c:	f001 fa6a 	bl	d9e04 <_ZN6StringD1Ev>
   d8930:	a82c      	add	r0, sp, #176	; 0xb0
   d8932:	f001 fa67 	bl	d9e04 <_ZN6StringD1Ev>
   d8936:	a828      	add	r0, sp, #160	; 0xa0
   d8938:	f001 fa64 	bl	d9e04 <_ZN6StringD1Ev>
   d893c:	a824      	add	r0, sp, #144	; 0x90
   d893e:	f001 fa61 	bl	d9e04 <_ZN6StringD1Ev>
   d8942:	a820      	add	r0, sp, #128	; 0x80
   d8944:	f001 fa5e 	bl	d9e04 <_ZN6StringD1Ev>
   d8948:	a81c      	add	r0, sp, #112	; 0x70
   d894a:	f001 fa5b 	bl	d9e04 <_ZN6StringD1Ev>
   d894e:	a818      	add	r0, sp, #96	; 0x60
   d8950:	f001 fa58 	bl	d9e04 <_ZN6StringD1Ev>
   d8954:	a814      	add	r0, sp, #80	; 0x50
   d8956:	f001 fa55 	bl	d9e04 <_ZN6StringD1Ev>
   d895a:	a810      	add	r0, sp, #64	; 0x40
   d895c:	f001 fa52 	bl	d9e04 <_ZN6StringD1Ev>
   d8960:	a80c      	add	r0, sp, #48	; 0x30
   d8962:	f001 fa4f 	bl	d9e04 <_ZN6StringD1Ev>
   d8966:	a808      	add	r0, sp, #32
   d8968:	f001 fa4c 	bl	d9e04 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d896c:	a804      	add	r0, sp, #16
   d896e:	f001 fa49 	bl	d9e04 <_ZN6StringD1Ev>
   d8972:	4668      	mov	r0, sp
   d8974:	f001 fa46 	bl	d9e04 <_ZN6StringD1Ev>
  //","+
  //String(sensorReadings.lux)
  //;
  return csvData;
}
   d8978:	4640      	mov	r0, r8
   d897a:	b040      	add	sp, #256	; 0x100
   d897c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8980:	28f5c28f 	.word	0x28f5c28f
   d8984:	4099255c 	.word	0x4099255c
   d8988:	00000000 	.word	0x00000000
   d898c:	40a55700 	.word	0x40a55700
   d8990:	ef34d6a1 	.word	0xef34d6a1
   d8994:	40752a38 	.word	0x40752a38
   d8998:	2003d81c 	.word	0x2003d81c
   d899c:	000e0458 	.word	0x000e0458
   d89a0:	000e045a 	.word	0x000e045a
   d89a4:	40220000 	.word	0x40220000
   d89a8:	40490000 	.word	0x40490000
   d89ac:	40400000 	.word	0x40400000
   d89b0:	46c67000 	.word	0x46c67000
   d89b4:	000e0464 	.word	0x000e0464
   d89b8:	408f4000 	.word	0x408f4000
   d89bc:	000e045f 	.word	0x000e045f

000d89c0 <_ZN14WeatherSensors21getAndResetAllSensorsEv>:
    uint16_t gust_metersph; //meters per hour
    uint16_t millivolts; // voltage in mV
    uint16_t lux; //Light level in lux
*/
void WeatherSensors::getAndResetAllSensors()
{
   d89c0:	b530      	push	{r4, r5, lr}
   d89c2:	4605      	mov	r5, r0
  uint32_t timeRTC = node.unixTime();
   d89c4:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
    uint16_t gust_metersph; //meters per hour
    uint16_t millivolts; // voltage in mV
    uint16_t lux; //Light level in lux
*/
void WeatherSensors::getAndResetAllSensors()
{
   d89c8:	b089      	sub	sp, #36	; 0x24
  uint32_t timeRTC = node.unixTime();
   d89ca:	3004      	adds	r0, #4
   d89cc:	f7fc fc38 	bl	d5240 <_ZN7IoTNode8unixTimeEv>
  sensorReadings.unixTime = timeRTC;
   d89d0:	4c87      	ldr	r4, [pc, #540]	; (d8bf0 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x230>)
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
   d89d2:	a901      	add	r1, sp, #4
    uint16_t lux; //Light level in lux
*/
void WeatherSensors::getAndResetAllSensors()
{
  uint32_t timeRTC = node.unixTime();
  sensorReadings.unixTime = timeRTC;
   d89d4:	6020      	str	r0, [r4, #0]
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
   d89d6:	4628      	mov	r0, r5
   d89d8:	f7ff fb6e 	bl	d80b8 <_ZN14WeatherSensors24getAndResetAnemometerMPHEPf>
  sensorReadings.wind_metersph = (uint16_t) ceil(windMPH * 1609.34)/0.62137;
   d89dc:	ee10 0a10 	vmov	r0, s0
   d89e0:	f005 f832 	bl	dda48 <__aeabi_f2d>
   d89e4:	a37a      	add	r3, pc, #488	; (adr r3, d8bd0 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x210>)
   d89e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89ea:	f005 f881 	bl	ddaf0 <__aeabi_dmul>
   d89ee:	ec41 0b10 	vmov	d0, r0, r1
   d89f2:	f003 fc01 	bl	dc1f8 <ceil>
   d89f6:	ec51 0b10 	vmov	r0, r1, d0
   d89fa:	f005 fb51 	bl	de0a0 <__aeabi_d2uiz>
   d89fe:	b280      	uxth	r0, r0
   d8a00:	f005 f810 	bl	dda24 <__aeabi_i2d>
   d8a04:	a374      	add	r3, pc, #464	; (adr r3, d8bd8 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x218>)
   d8a06:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a0a:	f005 f99b 	bl	ddd44 <__aeabi_ddiv>
   d8a0e:	f005 fb47 	bl	de0a0 <__aeabi_d2uiz>
  Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
   d8a12:	220a      	movs	r2, #10
{
  uint32_t timeRTC = node.unixTime();
  sensorReadings.unixTime = timeRTC;
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
  sensorReadings.wind_metersph = (uint16_t) ceil(windMPH * 1609.34)/0.62137;
   d8a14:	b281      	uxth	r1, r0
  Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
   d8a16:	a804      	add	r0, sp, #16
{
  uint32_t timeRTC = node.unixTime();
  sensorReadings.unixTime = timeRTC;
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
  sensorReadings.wind_metersph = (uint16_t) ceil(windMPH * 1609.34)/0.62137;
   d8a18:	80e1      	strh	r1, [r4, #6]
  Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
   d8a1a:	f001 fac0 	bl	d9f9e <_ZN6StringC1Eih>
   d8a1e:	9a04      	ldr	r2, [sp, #16]
   d8a20:	4974      	ldr	r1, [pc, #464]	; (d8bf4 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x234>)
   d8a22:	a802      	add	r0, sp, #8
   d8a24:	f7ff fb3a 	bl	d809c <_ZN10CloudClass7publishEPKcS1_.isra.8>
   d8a28:	a803      	add	r0, sp, #12
   d8a2a:	f7fb fed5 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a2e:	a804      	add	r0, sp, #16
   d8a30:	f001 f9e8 	bl	d9e04 <_ZN6StringD1Ev>
  float rainInches = getAndResetRainInches();
   d8a34:	4628      	mov	r0, r5
   d8a36:	f7ff fc0d 	bl	d8254 <_ZN14WeatherSensors21getAndResetRainInchesEv>
  sensorReadings.rainmmx1000 = (uint16_t) ceil(rainInches * 25400)/0.39370;
   d8a3a:	eddf 7a6f 	vldr	s15, [pc, #444]	; d8bf8 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x238>
   d8a3e:	ee60 7a27 	vmul.f32	s15, s0, s15
   d8a42:	ee17 0a90 	vmov	r0, s15
   d8a46:	f004 ffff 	bl	dda48 <__aeabi_f2d>
   d8a4a:	ec41 0b10 	vmov	d0, r0, r1
   d8a4e:	f003 fbd3 	bl	dc1f8 <ceil>
   d8a52:	ec51 0b10 	vmov	r0, r1, d0
   d8a56:	f005 fb23 	bl	de0a0 <__aeabi_d2uiz>
   d8a5a:	b280      	uxth	r0, r0
   d8a5c:	f004 ffe2 	bl	dda24 <__aeabi_i2d>
   d8a60:	a35f      	add	r3, pc, #380	; (adr r3, d8be0 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x220>)
   d8a62:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a66:	f005 f96d 	bl	ddd44 <__aeabi_ddiv>
   d8a6a:	f005 fb19 	bl	de0a0 <__aeabi_d2uiz>
  Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
   d8a6e:	220a      	movs	r2, #10
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
  sensorReadings.wind_metersph = (uint16_t) ceil(windMPH * 1609.34)/0.62137;
  Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
  float rainInches = getAndResetRainInches();
  sensorReadings.rainmmx1000 = (uint16_t) ceil(rainInches * 25400)/0.39370;
   d8a70:	b281      	uxth	r1, r0
  Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
   d8a72:	a804      	add	r0, sp, #16
  float gustMPH;
  float windMPH = getAndResetAnemometerMPH(&gustMPH);
  sensorReadings.wind_metersph = (uint16_t) ceil(windMPH * 1609.34)/0.62137;
  Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
  float rainInches = getAndResetRainInches();
  sensorReadings.rainmmx1000 = (uint16_t) ceil(rainInches * 25400)/0.39370;
   d8a74:	81a1      	strh	r1, [r4, #12]
  Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
   d8a76:	f001 fa92 	bl	d9f9e <_ZN6StringC1Eih>
   d8a7a:	9a04      	ldr	r2, [sp, #16]
   d8a7c:	495f      	ldr	r1, [pc, #380]	; (d8bfc <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x23c>)
   d8a7e:	a802      	add	r0, sp, #8
   d8a80:	f7ff fb0c 	bl	d809c <_ZN10CloudClass7publishEPKcS1_.isra.8>
   d8a84:	a803      	add	r0, sp, #12
   d8a86:	f7fb fea7 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a8a:	a804      	add	r0, sp, #16
   d8a8c:	f001 f9ba 	bl	d9e04 <_ZN6StringD1Ev>
  float windDegrees = getAndResetWindVaneDegrees();
   d8a90:	4628      	mov	r0, r5
   d8a92:	f7ff fbed 	bl	d8270 <_ZN14WeatherSensors26getAndResetWindVaneDegreesEv>
  sensorReadings.windDegrees = (uint16_t) ceil(windDegrees);
   d8a96:	ee10 0a10 	vmov	r0, s0
   d8a9a:	f004 ffd5 	bl	dda48 <__aeabi_f2d>
   d8a9e:	ec41 0b10 	vmov	d0, r0, r1
   d8aa2:	f003 fba9 	bl	dc1f8 <ceil>
   d8aa6:	ec51 0b10 	vmov	r0, r1, d0
   d8aaa:	f005 faf9 	bl	de0a0 <__aeabi_d2uiz>
  Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
   d8aae:	220a      	movs	r2, #10
  Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
  float rainInches = getAndResetRainInches();
  sensorReadings.rainmmx1000 = (uint16_t) ceil(rainInches * 25400)/0.39370;
  Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
  float windDegrees = getAndResetWindVaneDegrees();
  sensorReadings.windDegrees = (uint16_t) ceil(windDegrees);
   d8ab0:	b281      	uxth	r1, r0
  Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
   d8ab2:	a804      	add	r0, sp, #16
  Particle.publish("viento en km por hora", String(sensorReadings.wind_metersph));
  float rainInches = getAndResetRainInches();
  sensorReadings.rainmmx1000 = (uint16_t) ceil(rainInches * 25400)/0.39370;
  Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
  float windDegrees = getAndResetWindVaneDegrees();
  sensorReadings.windDegrees = (uint16_t) ceil(windDegrees);
   d8ab4:	80a1      	strh	r1, [r4, #4]
  Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
   d8ab6:	f001 fa72 	bl	d9f9e <_ZN6StringC1Eih>
   d8aba:	9a04      	ldr	r2, [sp, #16]
   d8abc:	4950      	ldr	r1, [pc, #320]	; (d8c00 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x240>)
   d8abe:	a802      	add	r0, sp, #8
   d8ac0:	f7ff faec 	bl	d809c <_ZN10CloudClass7publishEPKcS1_.isra.8>
   d8ac4:	a803      	add	r0, sp, #12
   d8ac6:	f7fb fe87 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8aca:	a804      	add	r0, sp, #16
   d8acc:	f001 f99a 	bl	d9e04 <_ZN6StringD1Ev>
  float airTempF = getAndResetTempF();
   d8ad0:	4628      	mov	r0, r5
   d8ad2:	f7ff fdbb 	bl	d864c <_ZN14WeatherSensors16getAndResetTempFEv>
  sensorReadings.airTempKx10 = (uint16_t) ceil((airTempF-32.0)*50.0/9.0 + 2731.5);
   d8ad6:	ee10 0a10 	vmov	r0, s0
   d8ada:	f004 ffb5 	bl	dda48 <__aeabi_f2d>
   d8ade:	2200      	movs	r2, #0
   d8ae0:	4b48      	ldr	r3, [pc, #288]	; (d8c04 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x244>)
   d8ae2:	f004 fe51 	bl	dd788 <__aeabi_dsub>
   d8ae6:	2200      	movs	r2, #0
   d8ae8:	4b47      	ldr	r3, [pc, #284]	; (d8c08 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x248>)
   d8aea:	f005 f801 	bl	ddaf0 <__aeabi_dmul>
   d8aee:	2200      	movs	r2, #0
   d8af0:	4b46      	ldr	r3, [pc, #280]	; (d8c0c <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x24c>)
   d8af2:	f005 f927 	bl	ddd44 <__aeabi_ddiv>
   d8af6:	a33c      	add	r3, pc, #240	; (adr r3, d8be8 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x228>)
   d8af8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8afc:	f004 fe46 	bl	dd78c <__adddf3>
   d8b00:	ec41 0b10 	vmov	d0, r0, r1
   d8b04:	f003 fb78 	bl	dc1f8 <ceil>
   d8b08:	ec51 0b10 	vmov	r0, r1, d0
   d8b0c:	f005 fac8 	bl	de0a0 <__aeabi_d2uiz>
  Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
   d8b10:	220a      	movs	r2, #10
  Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
  float windDegrees = getAndResetWindVaneDegrees();
  sensorReadings.windDegrees = (uint16_t) ceil(windDegrees);
  Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
  float airTempF = getAndResetTempF();
  sensorReadings.airTempKx10 = (uint16_t) ceil((airTempF-32.0)*50.0/9.0 + 2731.5);
   d8b12:	b281      	uxth	r1, r0
  Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
   d8b14:	a804      	add	r0, sp, #16
  Particle.publish("pulgadas de lluvia", String(sensorReadings.rainmmx1000));
  float windDegrees = getAndResetWindVaneDegrees();
  sensorReadings.windDegrees = (uint16_t) ceil(windDegrees);
  Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
  float airTempF = getAndResetTempF();
  sensorReadings.airTempKx10 = (uint16_t) ceil((airTempF-32.0)*50.0/9.0 + 2731.5);
   d8b16:	8161      	strh	r1, [r4, #10]
  Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
   d8b18:	f001 fa41 	bl	d9f9e <_ZN6StringC1Eih>
   d8b1c:	9a04      	ldr	r2, [sp, #16]
   d8b1e:	493c      	ldr	r1, [pc, #240]	; (d8c10 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x250>)
   d8b20:	a802      	add	r0, sp, #8
   d8b22:	f7ff fabb 	bl	d809c <_ZN10CloudClass7publishEPKcS1_.isra.8>
   d8b26:	a803      	add	r0, sp, #12
   d8b28:	f7fb fe56 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b2c:	a804      	add	r0, sp, #16
   d8b2e:	f001 f969 	bl	d9e04 <_ZN6StringD1Ev>
  uint16_t humidityRH = relativeHumidtyMedian.getMedian();
   d8b32:	f605 3006 	addw	r0, r5, #2822	; 0xb06
   d8b36:	f000 fbb9 	bl	d92ac <_ZN13RunningMedian9getMedianEv>
  sensorReadings.humid =(uint8_t) ceil(humidityRH);
   d8b3a:	f004 ff63 	bl	dda04 <__aeabi_ui2d>
   d8b3e:	ec41 0b10 	vmov	d0, r0, r1
   d8b42:	f003 fb59 	bl	dc1f8 <ceil>
   d8b46:	ec51 0b10 	vmov	r0, r1, d0
   d8b4a:	f005 faa9 	bl	de0a0 <__aeabi_d2uiz>
  Particle.publish("Humedad", String(sensorReadings.humid));
   d8b4e:	220a      	movs	r2, #10
  Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
  float airTempF = getAndResetTempF();
  sensorReadings.airTempKx10 = (uint16_t) ceil((airTempF-32.0)*50.0/9.0 + 2731.5);
  Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
  uint16_t humidityRH = relativeHumidtyMedian.getMedian();
  sensorReadings.humid =(uint8_t) ceil(humidityRH);
   d8b50:	b2c1      	uxtb	r1, r0
  Particle.publish("Humedad", String(sensorReadings.humid));
   d8b52:	a804      	add	r0, sp, #16
  Particle.publish("direccion del viento" , String(sensorReadings.windDegrees));
  float airTempF = getAndResetTempF();
  sensorReadings.airTempKx10 = (uint16_t) ceil((airTempF-32.0)*50.0/9.0 + 2731.5);
  Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
  uint16_t humidityRH = relativeHumidtyMedian.getMedian();
  sensorReadings.humid =(uint8_t) ceil(humidityRH);
   d8b54:	7221      	strb	r1, [r4, #8]
  Particle.publish("Humedad", String(sensorReadings.humid));
   d8b56:	f001 fa10 	bl	d9f7a <_ZN6StringC1Ehh>
   d8b5a:	9a04      	ldr	r2, [sp, #16]
   d8b5c:	492d      	ldr	r1, [pc, #180]	; (d8c14 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x254>)
   d8b5e:	a802      	add	r0, sp, #8
   d8b60:	f7ff fa9c 	bl	d809c <_ZN10CloudClass7publishEPKcS1_.isra.8>
   d8b64:	a803      	add	r0, sp, #12
   d8b66:	f7fb fe37 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b6a:	a804      	add	r0, sp, #16
   d8b6c:	f001 f94a 	bl	d9e04 <_ZN6StringD1Ev>
  float pressure = getAndResetPressurePascals();
   d8b70:	4628      	mov	r0, r5
   d8b72:	f7ff fd83 	bl	d867c <_ZN14WeatherSensors26getAndResetPressurePascalsEv>
  sensorReadings.barometerhPa = pressure/10.0;
   d8b76:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d8b7a:	ee80 0a27 	vdiv.f32	s0, s0, s15
  Particle.publish("Presion", String(sensorReadings.barometerhPa));
   d8b7e:	2106      	movs	r1, #6
   d8b80:	a804      	add	r0, sp, #16
  Particle.publish("Temperatura", String(sensorReadings.airTempKx10));
  uint16_t humidityRH = relativeHumidtyMedian.getMedian();
  sensorReadings.humid =(uint8_t) ceil(humidityRH);
  Particle.publish("Humedad", String(sensorReadings.humid));
  float pressure = getAndResetPressurePascals();
  sensorReadings.barometerhPa = pressure/10.0;
   d8b82:	ed84 0a04 	vstr	s0, [r4, #16]
  Particle.publish("Presion", String(sensorReadings.barometerhPa));
   d8b86:	f001 fa31 	bl	d9fec <_ZN6StringC1Efi>
   d8b8a:	9a04      	ldr	r2, [sp, #16]
   d8b8c:	4922      	ldr	r1, [pc, #136]	; (d8c18 <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x258>)
   d8b8e:	a802      	add	r0, sp, #8
   d8b90:	f7ff fa84 	bl	d809c <_ZN10CloudClass7publishEPKcS1_.isra.8>
   d8b94:	a803      	add	r0, sp, #12
   d8b96:	f7fb fe1f 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b9a:	a804      	add	r0, sp, #16
   d8b9c:	f001 f932 	bl	d9e04 <_ZN6StringD1Ev>
  // Light and voltage needed
 // sensorReadings.lux = getAndResetLightLux();
  //Particle.publish("luminocidad", String(sensorReadings.lux));
  sensorReadings.millivolts=getAndResetBatteryMV();
   d8ba0:	4628      	mov	r0, r5
   d8ba2:	f7ff fb37 	bl	d8214 <_ZN14WeatherSensors20getAndResetBatteryMVEv>
  Particle.publish("Bateria", String( sensorReadings.millivolts));
   d8ba6:	220a      	movs	r2, #10
  sensorReadings.barometerhPa = pressure/10.0;
  Particle.publish("Presion", String(sensorReadings.barometerhPa));
  // Light and voltage needed
 // sensorReadings.lux = getAndResetLightLux();
  //Particle.publish("luminocidad", String(sensorReadings.lux));
  sensorReadings.millivolts=getAndResetBatteryMV();
   d8ba8:	4601      	mov	r1, r0
   d8baa:	82e0      	strh	r0, [r4, #22]
  Particle.publish("Bateria", String( sensorReadings.millivolts));
   d8bac:	a804      	add	r0, sp, #16
   d8bae:	f001 f9f6 	bl	d9f9e <_ZN6StringC1Eih>
   d8bb2:	9a04      	ldr	r2, [sp, #16]
   d8bb4:	4919      	ldr	r1, [pc, #100]	; (d8c1c <_ZN14WeatherSensors21getAndResetAllSensorsEv+0x25c>)
   d8bb6:	a802      	add	r0, sp, #8
   d8bb8:	f7ff fa70 	bl	d809c <_ZN10CloudClass7publishEPKcS1_.isra.8>
   d8bbc:	a803      	add	r0, sp, #12
   d8bbe:	f7fb fe0b 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8bc2:	a804      	add	r0, sp, #16
   d8bc4:	f001 f91e 	bl	d9e04 <_ZN6StringD1Ev>
}
   d8bc8:	b009      	add	sp, #36	; 0x24
   d8bca:	bd30      	pop	{r4, r5, pc}
   d8bcc:	f3af 8000 	nop.w
   d8bd0:	28f5c28f 	.word	0x28f5c28f
   d8bd4:	4099255c 	.word	0x4099255c
   d8bd8:	5696e58a 	.word	0x5696e58a
   d8bdc:	3fe3e243 	.word	0x3fe3e243
   d8be0:	7c1bda51 	.word	0x7c1bda51
   d8be4:	3fd93261 	.word	0x3fd93261
   d8be8:	00000000 	.word	0x00000000
   d8bec:	40a55700 	.word	0x40a55700
   d8bf0:	2003d81c 	.word	0x2003d81c
   d8bf4:	000e0469 	.word	0x000e0469
   d8bf8:	46c67000 	.word	0x46c67000
   d8bfc:	000e047f 	.word	0x000e047f
   d8c00:	000e0492 	.word	0x000e0492
   d8c04:	40400000 	.word	0x40400000
   d8c08:	40490000 	.word	0x40490000
   d8c0c:	40220000 	.word	0x40220000
   d8c10:	000e04a7 	.word	0x000e04a7
   d8c14:	000e04b3 	.word	0x000e04b3
   d8c18:	000e04bb 	.word	0x000e04bb
   d8c1c:	000e04c3 	.word	0x000e04c3

000d8c20 <_ZN5Print5printIlLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d8c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c24:	4607      	mov	r7, r0
   d8c26:	460c      	mov	r4, r1
{
    if (base == 0) {
   d8c28:	4615      	mov	r5, r2
   d8c2a:	b92a      	cbnz	r2, d8c38 <_ZN5Print5printIlLi0EEEjT_i+0x18>
        return write(n);
   d8c2c:	6803      	ldr	r3, [r0, #0]
   d8c2e:	b2c9      	uxtb	r1, r1
   d8c30:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d8c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d8c36:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d8c38:	2900      	cmp	r1, #0
   d8c3a:	da07      	bge.n	d8c4c <_ZN5Print5printIlLi0EEEjT_i+0x2c>
   d8c3c:	2a0a      	cmp	r2, #10
   d8c3e:	d105      	bne.n	d8c4c <_ZN5Print5printIlLi0EEEjT_i+0x2c>
            t = print('-');
   d8c40:	212d      	movs	r1, #45	; 0x2d
   d8c42:	f001 facd 	bl	da1e0 <_ZN5Print5printEc>
            val = -n;
   d8c46:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d8c48:	4606      	mov	r6, r0
            val = -n;
   d8c4a:	e001      	b.n	d8c50 <_ZN5Print5printIlLi0EEEjT_i+0x30>
        } else {
            val = n;
   d8c4c:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d8c4e:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8c50:	b2ea      	uxtb	r2, r5
   d8c52:	4638      	mov	r0, r7
   d8c54:	f001 fae3 	bl	da21e <_ZN5Print11printNumberEmh>
    }
}
   d8c58:	4430      	add	r0, r6
   d8c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d8c60 <_GLOBAL__sub_I__ZN14WeatherSensors5beginEv>:
   d8c60:	4b02      	ldr	r3, [pc, #8]	; (d8c6c <_GLOBAL__sub_I__ZN14WeatherSensors5beginEv+0xc>)
   d8c62:	2200      	movs	r2, #0
   d8c64:	701a      	strb	r2, [r3, #0]
   d8c66:	f000 bb59 	b.w	d931c <HAL_Pin_Map>
   d8c6a:	bf00      	nop
   d8c6c:	2003e1ed 	.word	0x2003e1ed

000d8c70 <_ZN14WeatherSensors5beginEv>:
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
   d8c70:	f241 6274 	movw	r2, #5748	; 0x1674
   d8c74:	2300      	movs	r3, #0
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   d8c76:	b530      	push	{r4, r5, lr}

  AnemoneterPeriodTotal = 0;
   d8c78:	5083      	str	r3, [r0, r2]
  AnemoneterPeriodReadingCount = 0;
   d8c7a:	f241 6278 	movw	r2, #5752	; 0x1678
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   d8c7e:	f04f 31ff 	mov.w	r1, #4294967295
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
   d8c82:	5083      	str	r3, [r0, r2]
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   d8c84:	f241 627c 	movw	r2, #5756	; 0x167c
  lastAnemoneterEvent = 0;


  barom.begin();
   d8c88:	f100 0508 	add.w	r5, r0, #8
void WeatherSensors::begin(void)
{

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
   d8c8c:	5081      	str	r1, [r0, r2]
  lastAnemoneterEvent = 0;
   d8c8e:	f500 52b4 	add.w	r2, r0, #5760	; 0x1680
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   d8c92:	b08b      	sub	sp, #44	; 0x2c

  AnemoneterPeriodTotal = 0;
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
  lastAnemoneterEvent = 0;
   d8c94:	6013      	str	r3, [r2, #0]
}
*/
// Public Methods //////////////////////////////////////////////////////////////
// Functions available in Wiring sketches, this library, and other libraries
void WeatherSensors::begin(void)
{
   d8c96:	4604      	mov	r4, r0
  AnemoneterPeriodReadingCount = 0;
  GustPeriod = UINT_MAX;  //  The shortest period (and therefore fastest gust) observed
  lastAnemoneterEvent = 0;


  barom.begin();
   d8c98:	4628      	mov	r0, r5
   d8c9a:	f7ff f944 	bl	d7f26 <_ZN9MPL3115A25beginEv>
  barom.setModeBarometer();
   d8c9e:	4628      	mov	r0, r5
   d8ca0:	f7ff f96b 	bl	d7f7a <_ZN9MPL3115A216setModeBarometerEv>
  barom.setOversampleRate(7);
   d8ca4:	2107      	movs	r1, #7
   d8ca6:	4628      	mov	r0, r5
   d8ca8:	f7ff f974 	bl	d7f94 <_ZN9MPL3115A217setOversampleRateEh>
  barom.enableEventFlags();
   d8cac:	4628      	mov	r0, r5
   d8cae:	f7ff f985 	bl	d7fbc <_ZN9MPL3115A216enableEventFlagsEv>

  am2315.begin();
   d8cb2:	4620      	mov	r0, r4
   d8cb4:	f7fd fad6 	bl	d6264 <_ZN15Adafruit_AM23155beginEv>

  Serial.begin(9600);

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
  
  if (tsl.begin()) 
   d8cb8:	f504 54b2 	add.w	r4, r4, #5696	; 0x1640
  barom.setOversampleRate(7);
  barom.enableEventFlags();

  am2315.begin();

  Serial.begin(9600);
   d8cbc:	f002 f9c6 	bl	db04c <_Z16_fetch_usbserialv>
   d8cc0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d8cc4:	f002 f9b6 	bl	db034 <_ZN9USBSerial5beginEl>

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
  
  if (tsl.begin()) 
   d8cc8:	340c      	adds	r4, #12

  am2315.begin();

  Serial.begin(9600);

  Serial.println(F("Starting Adafruit TSL2591 Test!"));
   d8cca:	f002 f9bf 	bl	db04c <_Z16_fetch_usbserialv>
   d8cce:	4969      	ldr	r1, [pc, #420]	; (d8e74 <_ZN14WeatherSensors5beginEv+0x204>)
   d8cd0:	f001 faa3 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
  
  if (tsl.begin()) 
   d8cd4:	4620      	mov	r0, r4
   d8cd6:	f7fd f9a8 	bl	d602a <_ZN16Adafruit_TSL25915beginEv>
   d8cda:	b118      	cbz	r0, d8ce4 <_ZN14WeatherSensors5beginEv+0x74>
  {
    Serial.println(F("Found a TSL2591 sensor"));
   d8cdc:	f002 f9b6 	bl	db04c <_Z16_fetch_usbserialv>
   d8ce0:	4965      	ldr	r1, [pc, #404]	; (d8e78 <_ZN14WeatherSensors5beginEv+0x208>)
   d8ce2:	e002      	b.n	d8cea <_ZN14WeatherSensors5beginEv+0x7a>
  } 
  else 
  {
    Serial.println(F("No sensor found ... check your wiring?"));
   d8ce4:	f002 f9b2 	bl	db04c <_Z16_fetch_usbserialv>
   d8ce8:	4964      	ldr	r1, [pc, #400]	; (d8e7c <_ZN14WeatherSensors5beginEv+0x20c>)
   d8cea:	f001 fa96 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
    
  /* Display some basic information on this sensor */
  sensor_t sensor;
  tsl.getSensor(&sensor);
   d8cee:	4669      	mov	r1, sp
   d8cf0:	4620      	mov	r0, r4
   d8cf2:	f7fd f899 	bl	d5e28 <_ZN16Adafruit_TSL25919getSensorEP8sensor_t>
  Serial.println(F("------------------------------------"));
   d8cf6:	f002 f9a9 	bl	db04c <_Z16_fetch_usbserialv>
   d8cfa:	4961      	ldr	r1, [pc, #388]	; (d8e80 <_ZN14WeatherSensors5beginEv+0x210>)
   d8cfc:	f001 fa8d 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Sensor:       ")); Serial.println(sensor.name);
   d8d00:	f002 f9a4 	bl	db04c <_Z16_fetch_usbserialv>
   d8d04:	495f      	ldr	r1, [pc, #380]	; (d8e84 <_ZN14WeatherSensors5beginEv+0x214>)
   d8d06:	f001 fa6e 	bl	da1e6 <_ZN5Print5printEPK19__FlashStringHelper>
   d8d0a:	f002 f99f 	bl	db04c <_Z16_fetch_usbserialv>
   d8d0e:	4669      	mov	r1, sp
   d8d10:	f001 fa79 	bl	da206 <_ZN5Print7printlnEPKc>
  Serial.print  (F("Driver Ver:   ")); Serial.println(sensor.version);
   d8d14:	f002 f99a 	bl	db04c <_Z16_fetch_usbserialv>
   d8d18:	495b      	ldr	r1, [pc, #364]	; (d8e88 <_ZN14WeatherSensors5beginEv+0x218>)
   d8d1a:	f001 fa64 	bl	da1e6 <_ZN5Print5printEPK19__FlashStringHelper>
   d8d1e:	f002 f995 	bl	db04c <_Z16_fetch_usbserialv>
    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
   d8d22:	220a      	movs	r2, #10
   d8d24:	9903      	ldr	r1, [sp, #12]
   d8d26:	4605      	mov	r5, r0
   d8d28:	f7ff ff7a 	bl	d8c20 <_ZN5Print5printIlLi0EEEjT_i>
        n += println();
   d8d2c:	4628      	mov	r0, r5
   d8d2e:	f001 fa5e 	bl	da1ee <_ZN5Print7printlnEv>
  Serial.print  (F("Unique ID:    ")); Serial.println(sensor.sensor_id);
   d8d32:	f002 f98b 	bl	db04c <_Z16_fetch_usbserialv>
   d8d36:	4955      	ldr	r1, [pc, #340]	; (d8e8c <_ZN14WeatherSensors5beginEv+0x21c>)
   d8d38:	f001 fa55 	bl	da1e6 <_ZN5Print5printEPK19__FlashStringHelper>
   d8d3c:	f002 f986 	bl	db04c <_Z16_fetch_usbserialv>
    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
   d8d40:	220a      	movs	r2, #10
   d8d42:	9904      	ldr	r1, [sp, #16]
   d8d44:	4605      	mov	r5, r0
   d8d46:	f7ff ff6b 	bl	d8c20 <_ZN5Print5printIlLi0EEEjT_i>
        n += println();
   d8d4a:	4628      	mov	r0, r5
   d8d4c:	f001 fa4f 	bl	da1ee <_ZN5Print7printlnEv>
  Serial.print  (F("Max Value:    ")); Serial.print(sensor.max_value); Serial.println(F(" lux"));
   d8d50:	f002 f97c 	bl	db04c <_Z16_fetch_usbserialv>
   d8d54:	494e      	ldr	r1, [pc, #312]	; (d8e90 <_ZN14WeatherSensors5beginEv+0x220>)
   d8d56:	f001 fa46 	bl	da1e6 <_ZN5Print5printEPK19__FlashStringHelper>
   d8d5a:	f002 f977 	bl	db04c <_Z16_fetch_usbserialv>
   d8d5e:	ed9d 0a06 	vldr	s0, [sp, #24]
   d8d62:	2102      	movs	r1, #2
   d8d64:	f001 fb3a 	bl	da3dc <_ZN5Print5printEfi>
   d8d68:	f002 f970 	bl	db04c <_Z16_fetch_usbserialv>
   d8d6c:	4949      	ldr	r1, [pc, #292]	; (d8e94 <_ZN14WeatherSensors5beginEv+0x224>)
   d8d6e:	f001 fa54 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Min Value:    ")); Serial.print(sensor.min_value); Serial.println(F(" lux"));
   d8d72:	f002 f96b 	bl	db04c <_Z16_fetch_usbserialv>
   d8d76:	4948      	ldr	r1, [pc, #288]	; (d8e98 <_ZN14WeatherSensors5beginEv+0x228>)
   d8d78:	f001 fa35 	bl	da1e6 <_ZN5Print5printEPK19__FlashStringHelper>
   d8d7c:	f002 f966 	bl	db04c <_Z16_fetch_usbserialv>
   d8d80:	ed9d 0a07 	vldr	s0, [sp, #28]
   d8d84:	2102      	movs	r1, #2
   d8d86:	f001 fb29 	bl	da3dc <_ZN5Print5printEfi>
   d8d8a:	f002 f95f 	bl	db04c <_Z16_fetch_usbserialv>
   d8d8e:	4941      	ldr	r1, [pc, #260]	; (d8e94 <_ZN14WeatherSensors5beginEv+0x224>)
   d8d90:	f001 fa43 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Resolution:   ")); Serial.print(sensor.resolution, 4); Serial.println(F(" lux"));  
   d8d94:	f002 f95a 	bl	db04c <_Z16_fetch_usbserialv>
   d8d98:	4940      	ldr	r1, [pc, #256]	; (d8e9c <_ZN14WeatherSensors5beginEv+0x22c>)
   d8d9a:	f001 fa24 	bl	da1e6 <_ZN5Print5printEPK19__FlashStringHelper>
   d8d9e:	f002 f955 	bl	db04c <_Z16_fetch_usbserialv>
   d8da2:	ed9d 0a08 	vldr	s0, [sp, #32]
   d8da6:	2104      	movs	r1, #4
   d8da8:	f001 fb18 	bl	da3dc <_ZN5Print5printEfi>
   d8dac:	f002 f94e 	bl	db04c <_Z16_fetch_usbserialv>
   d8db0:	4938      	ldr	r1, [pc, #224]	; (d8e94 <_ZN14WeatherSensors5beginEv+0x224>)
   d8db2:	f001 fa32 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("------------------------------------"));
   d8db6:	f002 f949 	bl	db04c <_Z16_fetch_usbserialv>
   d8dba:	4931      	ldr	r1, [pc, #196]	; (d8e80 <_ZN14WeatherSensors5beginEv+0x210>)
   d8dbc:	f001 fa2d 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F(""));
   d8dc0:	f002 f944 	bl	db04c <_Z16_fetch_usbserialv>
   d8dc4:	4936      	ldr	r1, [pc, #216]	; (d8ea0 <_ZN14WeatherSensors5beginEv+0x230>)
   d8dc6:	f001 fa28 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
  delay(500);
   d8dca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d8dce:	f001 fcf5 	bl	da7bc <delay>
  
  /* Configure the sensor */
  // You can change the gain on the fly, to adapt to brighter/dimmer light situations
  //tsl.setGain(TSL2591_GAIN_LOW);    // 1x gain (bright light)
  tsl.setGain(TSL2591_GAIN_MED);      // 25x gain
   d8dd2:	2110      	movs	r1, #16
   d8dd4:	4620      	mov	r0, r4
   d8dd6:	f7fd f90f 	bl	d5ff8 <_ZN16Adafruit_TSL25917setGainE13tsl2591Gain_t>
  
  // Changing the integration time gives you a longer time over which to sense light
  // longer timelines are slower, but are good in very low light situtations!
  //tsl.setTiming(TSL2591_INTEGRATIONTIME_100MS);  // shortest integration time (bright light)
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_200MS);
  tsl.setTiming(TSL2591_INTEGRATIONTIME_300MS);
   d8dda:	2102      	movs	r1, #2
   d8ddc:	4620      	mov	r0, r4
   d8dde:	f7fd f961 	bl	d60a4 <_ZN16Adafruit_TSL25919setTimingE24tsl2591IntegrationTime_t>
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_400MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_500MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_600MS);  // longest integration time (dim light)

  /* Display the gain and integration time for reference sake */  
  Serial.println(F("------------------------------------"));
   d8de2:	f002 f933 	bl	db04c <_Z16_fetch_usbserialv>
   d8de6:	4926      	ldr	r1, [pc, #152]	; (d8e80 <_ZN14WeatherSensors5beginEv+0x210>)
   d8de8:	f001 fa17 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print  (F("Gain:         "));
   d8dec:	f002 f92e 	bl	db04c <_Z16_fetch_usbserialv>
   d8df0:	492c      	ldr	r1, [pc, #176]	; (d8ea4 <_ZN14WeatherSensors5beginEv+0x234>)
   d8df2:	f001 f9f8 	bl	da1e6 <_ZN5Print5printEPK19__FlashStringHelper>
  tsl2591Gain_t gain = tsl.getGain();
   d8df6:	4620      	mov	r0, r4
   d8df8:	f7fd f84e 	bl	d5e98 <_ZN16Adafruit_TSL25917getGainEv>
  switch(gain)
   d8dfc:	2810      	cmp	r0, #16
   d8dfe:	d00d      	beq.n	d8e1c <_ZN14WeatherSensors5beginEv+0x1ac>
   d8e00:	d804      	bhi.n	d8e0c <_ZN14WeatherSensors5beginEv+0x19c>
   d8e02:	b9a0      	cbnz	r0, d8e2e <_ZN14WeatherSensors5beginEv+0x1be>
  {
    case TSL2591_GAIN_LOW:
      Serial.println(F("1x (Low)"));
   d8e04:	f002 f922 	bl	db04c <_Z16_fetch_usbserialv>
   d8e08:	4927      	ldr	r1, [pc, #156]	; (d8ea8 <_ZN14WeatherSensors5beginEv+0x238>)
   d8e0a:	e00e      	b.n	d8e2a <_ZN14WeatherSensors5beginEv+0x1ba>

  /* Display the gain and integration time for reference sake */  
  Serial.println(F("------------------------------------"));
  Serial.print  (F("Gain:         "));
  tsl2591Gain_t gain = tsl.getGain();
  switch(gain)
   d8e0c:	2820      	cmp	r0, #32
   d8e0e:	d009      	beq.n	d8e24 <_ZN14WeatherSensors5beginEv+0x1b4>
   d8e10:	2830      	cmp	r0, #48	; 0x30
   d8e12:	d10c      	bne.n	d8e2e <_ZN14WeatherSensors5beginEv+0x1be>
      break;
    case TSL2591_GAIN_HIGH:
      Serial.println(F("428x (High)"));
      break;
    case TSL2591_GAIN_MAX:
      Serial.println(F("9876x (Max)"));
   d8e14:	f002 f91a 	bl	db04c <_Z16_fetch_usbserialv>
   d8e18:	4924      	ldr	r1, [pc, #144]	; (d8eac <_ZN14WeatherSensors5beginEv+0x23c>)
   d8e1a:	e006      	b.n	d8e2a <_ZN14WeatherSensors5beginEv+0x1ba>
  {
    case TSL2591_GAIN_LOW:
      Serial.println(F("1x (Low)"));
      break;
    case TSL2591_GAIN_MED:
      Serial.println(F("25x (Medium)"));
   d8e1c:	f002 f916 	bl	db04c <_Z16_fetch_usbserialv>
   d8e20:	4923      	ldr	r1, [pc, #140]	; (d8eb0 <_ZN14WeatherSensors5beginEv+0x240>)
   d8e22:	e002      	b.n	d8e2a <_ZN14WeatherSensors5beginEv+0x1ba>
      break;
    case TSL2591_GAIN_HIGH:
      Serial.println(F("428x (High)"));
   d8e24:	f002 f912 	bl	db04c <_Z16_fetch_usbserialv>
   d8e28:	4922      	ldr	r1, [pc, #136]	; (d8eb4 <_ZN14WeatherSensors5beginEv+0x244>)
      break;
    case TSL2591_GAIN_MAX:
      Serial.println(F("9876x (Max)"));
   d8e2a:	f001 f9f6 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
      break;
  }
  Serial.print  (F("Timing:       "));
   d8e2e:	f002 f90d 	bl	db04c <_Z16_fetch_usbserialv>
   d8e32:	4921      	ldr	r1, [pc, #132]	; (d8eb8 <_ZN14WeatherSensors5beginEv+0x248>)
   d8e34:	f001 f9d7 	bl	da1e6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print((tsl.getTiming() + 1) * 100, DEC); 
   d8e38:	f002 f908 	bl	db04c <_Z16_fetch_usbserialv>
   d8e3c:	4605      	mov	r5, r0
   d8e3e:	4620      	mov	r0, r4
   d8e40:	f7fd f82c 	bl	d5e9c <_ZN16Adafruit_TSL25919getTimingEv>
   d8e44:	2164      	movs	r1, #100	; 0x64
   d8e46:	220a      	movs	r2, #10
   d8e48:	fb00 1101 	mla	r1, r0, r1, r1
   d8e4c:	4628      	mov	r0, r5
   d8e4e:	f7ff fee7 	bl	d8c20 <_ZN5Print5printIlLi0EEEjT_i>
  Serial.println(F(" ms"));
   d8e52:	f002 f8fb 	bl	db04c <_Z16_fetch_usbserialv>
   d8e56:	4919      	ldr	r1, [pc, #100]	; (d8ebc <_ZN14WeatherSensors5beginEv+0x24c>)
   d8e58:	f001 f9df 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F("------------------------------------"));
   d8e5c:	f002 f8f6 	bl	db04c <_Z16_fetch_usbserialv>
   d8e60:	4907      	ldr	r1, [pc, #28]	; (d8e80 <_ZN14WeatherSensors5beginEv+0x210>)
   d8e62:	f001 f9da 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.println(F(""));
   d8e66:	f002 f8f1 	bl	db04c <_Z16_fetch_usbserialv>
   d8e6a:	490d      	ldr	r1, [pc, #52]	; (d8ea0 <_ZN14WeatherSensors5beginEv+0x230>)
   d8e6c:	f001 f9d5 	bl	da21a <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   d8e70:	b00b      	add	sp, #44	; 0x2c
   d8e72:	bd30      	pop	{r4, r5, pc}
   d8e74:	000e04cb 	.word	0x000e04cb
   d8e78:	000e04eb 	.word	0x000e04eb
   d8e7c:	000e0502 	.word	0x000e0502
   d8e80:	000e0529 	.word	0x000e0529
   d8e84:	000e054e 	.word	0x000e054e
   d8e88:	000e055d 	.word	0x000e055d
   d8e8c:	000e056c 	.word	0x000e056c
   d8e90:	000e057b 	.word	0x000e057b
   d8e94:	000e058a 	.word	0x000e058a
   d8e98:	000e058f 	.word	0x000e058f
   d8e9c:	000e059e 	.word	0x000e059e
   d8ea0:	000e06ec 	.word	0x000e06ec
   d8ea4:	000e05ad 	.word	0x000e05ad
   d8ea8:	000e05bc 	.word	0x000e05bc
   d8eac:	000e05de 	.word	0x000e05de
   d8eb0:	000e05c5 	.word	0x000e05c5
   d8eb4:	000e05d2 	.word	0x000e05d2
   d8eb8:	000e05ea 	.word	0x000e05ea
   d8ebc:	000e05f9 	.word	0x000e05f9

000d8ec0 <_ZN7FramI2CC1E14framPartNumber>:
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   d8ec0:	2250      	movs	r2, #80	; 0x50
   d8ec2:	7042      	strb	r2, [r0, #1]
{
//	_topAddressForPartNumber[MB85RC16]		= 0x0007FFUL;
	_topAddressForPartNumber[MB85RC64]		= 0x001FFFUL;
   d8ec4:	f641 72ff 	movw	r2, #8191	; 0x1fff
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   d8ec8:	b510      	push	{r4, lr}
{
//	_topAddressForPartNumber[MB85RC16]		= 0x0007FFUL;
	_topAddressForPartNumber[MB85RC64]		= 0x001FFFUL;
   d8eca:	6042      	str	r2, [r0, #4]
	_topAddressForPartNumber[MB85RC128A]	= 0x003FFFUL;
   d8ecc:	f643 72ff 	movw	r2, #16383	; 0x3fff
   d8ed0:	6082      	str	r2, [r0, #8]
	_topAddressForPartNumber[MB85RC128B]	= 0x003FFFUL;
   d8ed2:	60c2      	str	r2, [r0, #12]
	_topAddressForPartNumber[MB85RC256A]	= 0x007FFFUL;
   d8ed4:	f647 72ff 	movw	r2, #32767	; 0x7fff
   d8ed8:	6102      	str	r2, [r0, #16]
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
   d8eda:	6142      	str	r2, [r0, #20]
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
   d8edc:	6182      	str	r2, [r0, #24]
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
   d8ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
// Modified for I2C and Particle by Robert Mawrey

#include "Particle.h"
#include "FramI2C.h"

FramI2C::FramI2C(framPartNumber partNumber): _partNumber(partNumber) // Add in I2C address later
   d8ee2:	7001      	strb	r1, [r0, #0]
	_topAddressForPartNumber[MB85RC128A]	= 0x003FFFUL;
	_topAddressForPartNumber[MB85RC128B]	= 0x003FFFUL;
	_topAddressForPartNumber[MB85RC256A]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
   d8ee4:	61c2      	str	r2, [r0, #28]
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
	_bottomAddress = _baseAddress + _maxBufferSize;
   d8ee6:	2480      	movs	r4, #128	; 0x80
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
   d8ee8:	2200      	movs	r2, #0
	_bottomAddress = _baseAddress + _maxBufferSize;
	_topAddress = _topAddressForPartNumber[_partNumber];
   d8eea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	_topAddressForPartNumber[MB85RC256B]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC256V]	= 0x007FFFUL;
	_topAddressForPartNumber[MB85RC512T]	= 0x00FFFFUL;
//	_topAddressForPartNumber[MB85RC1MT]		= 0x01FFFFUL;

	_baseAddress = 0x000000;
   d8eee:	6202      	str	r2, [r0, #32]
	_bottomAddress = _baseAddress + _maxBufferSize;
   d8ef0:	6244      	str	r4, [r0, #36]	; 0x24
	_topAddress = _topAddressForPartNumber[_partNumber];
   d8ef2:	684a      	ldr	r2, [r1, #4]
   d8ef4:	6282      	str	r2, [r0, #40]	; 0x28
	_numberOfBuffers = (_topAddress - _bottomAddress + 1) / _maxBufferSize;
   d8ef6:	3a7f      	subs	r2, #127	; 0x7f
   d8ef8:	09d2      	lsrs	r2, r2, #7
   d8efa:	62c2      	str	r2, [r0, #44]	; 0x2c
	_nextFreeByte = _bottomAddress;
   d8efc:	6304      	str	r4, [r0, #48]	; 0x30
}
   d8efe:	bd10      	pop	{r4, pc}

000d8f00 <_ZN7FramI2C11_readMemoryEmhPh>:
//
// PLATFORM SPECIFIC, LOW LEVEL METHODS
//

void FramI2C::_readMemory(uint32_t address, uint8_t numberOfBytes, uint8_t *buffer)
{
   d8f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8f04:	461e      	mov	r6, r3
   d8f06:	4614      	mov	r4, r2
   d8f08:	460f      	mov	r7, r1
   d8f0a:	4605      	mov	r5, r0
	WITH_LOCK(Wire)
   d8f0c:	f002 fc92 	bl	db834 <_Z19__fetch_global_Wirev>
   d8f10:	4680      	mov	r8, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d8f12:	f002 fa4f 	bl	db3b4 <_ZN7TwoWire4lockEv>
	{
		uint16_t framAddr = (uint16_t)address;
		// Address only correct for 64 through 512 kbit devices
		Wire.beginTransmission(framI2CAddress);
   d8f16:	f002 fc8d 	bl	db834 <_Z19__fetch_global_Wirev>
   d8f1a:	7869      	ldrb	r1, [r5, #1]
   d8f1c:	f002 fa33 	bl	db386 <_ZN7TwoWire17beginTransmissionEh>

		Wire.write(framAddr >> 8);
   d8f20:	f002 fc88 	bl	db834 <_Z19__fetch_global_Wirev>
   d8f24:	f3c7 2107 	ubfx	r1, r7, #8, #8
   d8f28:	f7fc fdb5 	bl	d5a96 <_ZN7TwoWire5writeEi>
		Wire.write(framAddr & 0xFF);
   d8f2c:	f002 fc82 	bl	db834 <_Z19__fetch_global_Wirev>
   d8f30:	b2f9      	uxtb	r1, r7
   d8f32:	f7fc fdb0 	bl	d5a96 <_ZN7TwoWire5writeEi>

		Wire.endTransmission();
   d8f36:	f002 fc7d 	bl	db834 <_Z19__fetch_global_Wirev>
   d8f3a:	f002 fa2f 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

		// Maximum request size of 32 bytes
		Wire.requestFrom(framI2CAddress, (uint8_t)numberOfBytes);
   d8f3e:	f002 fc79 	bl	db834 <_Z19__fetch_global_Wirev>
   d8f42:	4622      	mov	r2, r4
   d8f44:	7869      	ldrb	r1, [r5, #1]
   d8f46:	f002 fa1b 	bl	db380 <_ZN7TwoWire11requestFromEhj>
   d8f4a:	3c01      	subs	r4, #1
   d8f4c:	1e75      	subs	r5, r6, #1
   d8f4e:	4434      	add	r4, r6
		for (byte i=0; i < numberOfBytes; i++) {
   d8f50:	42a5      	cmp	r5, r4
   d8f52:	d007      	beq.n	d8f64 <_ZN7FramI2C11_readMemoryEmhPh+0x64>
			buffer[i] = Wire.read();
   d8f54:	f002 fc6e 	bl	db834 <_Z19__fetch_global_Wirev>
   d8f58:	6803      	ldr	r3, [r0, #0]
   d8f5a:	695b      	ldr	r3, [r3, #20]
   d8f5c:	4798      	blx	r3
   d8f5e:	f805 0f01 	strb.w	r0, [r5, #1]!

		Wire.endTransmission();

		// Maximum request size of 32 bytes
		Wire.requestFrom(framI2CAddress, (uint8_t)numberOfBytes);
		for (byte i=0; i < numberOfBytes; i++) {
   d8f62:	e7f5      	b.n	d8f50 <_ZN7FramI2C11_readMemoryEmhPh+0x50>
			buffer[i] = Wire.read();
		}
		Wire.endTransmission();
   d8f64:	f002 fc66 	bl	db834 <_Z19__fetch_global_Wirev>
   d8f68:	f002 fa18 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d8f6c:	4640      	mov	r0, r8
	}
}
   d8f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8f72:	f002 ba28 	b.w	db3c6 <_ZN7TwoWire6unlockEv>

000d8f76 <_ZN7FramI2C12_writeMemoryEmhPh>:


void FramI2C::_writeMemory(uint32_t address, uint8_t numberOfBytes, uint8_t *buffer)
{
   d8f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8f7a:	461e      	mov	r6, r3
   d8f7c:	4614      	mov	r4, r2
   d8f7e:	460d      	mov	r5, r1
   d8f80:	4680      	mov	r8, r0
	WITH_LOCK(Wire)
   d8f82:	f002 fc57 	bl	db834 <_Z19__fetch_global_Wirev>
   d8f86:	4607      	mov	r7, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d8f88:	f002 fa14 	bl	db3b4 <_ZN7TwoWire4lockEv>
	{	
		uint16_t framAddr = (uint16_t)address;
		// Address only correct for 64 through 512 kbit devices

		Wire.beginTransmission(framI2CAddress);
   d8f8c:	f002 fc52 	bl	db834 <_Z19__fetch_global_Wirev>
   d8f90:	f898 1001 	ldrb.w	r1, [r8, #1]
   d8f94:	f002 f9f7 	bl	db386 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(framAddr >> 8);
   d8f98:	f002 fc4c 	bl	db834 <_Z19__fetch_global_Wirev>
   d8f9c:	f3c5 2107 	ubfx	r1, r5, #8, #8
   d8fa0:	f7fc fd79 	bl	d5a96 <_ZN7TwoWire5writeEi>
		Wire.write(framAddr & 0xFF);
   d8fa4:	f002 fc46 	bl	db834 <_Z19__fetch_global_Wirev>
   d8fa8:	b2e9      	uxtb	r1, r5
   d8faa:	f7fc fd74 	bl	d5a96 <_ZN7TwoWire5writeEi>
   d8fae:	3c01      	subs	r4, #1
   d8fb0:	1e75      	subs	r5, r6, #1
   d8fb2:	4434      	add	r4, r6


		for (uint8_t i=0; i < numberOfBytes; i++) {
   d8fb4:	42a5      	cmp	r5, r4
   d8fb6:	d007      	beq.n	d8fc8 <_ZN7FramI2C12_writeMemoryEmhPh+0x52>
			Wire.write(buffer[i]);
   d8fb8:	f002 fc3c 	bl	db834 <_Z19__fetch_global_Wirev>
   d8fbc:	6803      	ldr	r3, [r0, #0]
   d8fbe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d8fc2:	689b      	ldr	r3, [r3, #8]
   d8fc4:	4798      	blx	r3
		Wire.beginTransmission(framI2CAddress);
		Wire.write(framAddr >> 8);
		Wire.write(framAddr & 0xFF);


		for (uint8_t i=0; i < numberOfBytes; i++) {
   d8fc6:	e7f5      	b.n	d8fb4 <_ZN7FramI2C12_writeMemoryEmhPh+0x3e>
			Wire.write(buffer[i]);
		}
		Wire.endTransmission();
   d8fc8:	f002 fc34 	bl	db834 <_Z19__fetch_global_Wirev>
   d8fcc:	f002 f9e6 	bl	db39c <_ZN7TwoWire15endTransmissionEv>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d8fd0:	4638      	mov	r0, r7
	}
}
   d8fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8fd6:	f002 b9f6 	b.w	db3c6 <_ZN7TwoWire6unlockEv>

000d8fda <_ZN7FramI2C4readEmjPh>:
  read((uint32_t) _baseAddress, (unsigned int) _maxBufferSize, buffer);
}


framResult FramI2C::read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   d8fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8fdc:	4614      	mov	r4, r2
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   d8fde:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d8fe0:	428a      	cmp	r2, r1
  read((uint32_t) _baseAddress, (unsigned int) _maxBufferSize, buffer);
}


framResult FramI2C::read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   d8fe2:	4607      	mov	r7, r0
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   d8fe4:	d81e      	bhi.n	d9024 <_ZN7FramI2C4readEmjPh+0x4a>
   d8fe6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d8fe8:	4281      	cmp	r1, r0
   d8fea:	d81b      	bhi.n	d9024 <_ZN7FramI2C4readEmjPh+0x4a>
	{
		return framBadStartAddress;
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
   d8fec:	1e62      	subs	r2, r4, #1
   d8fee:	2a7f      	cmp	r2, #127	; 0x7f
   d8ff0:	d81a      	bhi.n	d9028 <_ZN7FramI2C4readEmjPh+0x4e>
	{
		return framBadNumberOfBytes;
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
   d8ff2:	440a      	add	r2, r1
   d8ff4:	4290      	cmp	r0, r2
   d8ff6:	d319      	bcc.n	d902c <_ZN7FramI2C4readEmjPh+0x52>
   d8ff8:	461d      	mov	r5, r3
   d8ffa:	1ace      	subs	r6, r1, r3
// Read in 30 byte blocks due to wire requestFrom() limit
  const uint8_t blockSize = 30;
  byte* buf = buffer;
  uint32_t address = startAddress;

  while (numberOfBytes >= blockSize)
   d8ffc:	2c1d      	cmp	r4, #29
   d8ffe:	eb05 0106 	add.w	r1, r5, r6
   d9002:	d907      	bls.n	d9014 <_ZN7FramI2C4readEmjPh+0x3a>
  {
		_readMemory(address, blockSize, buf);
   d9004:	462b      	mov	r3, r5
   d9006:	221e      	movs	r2, #30
   d9008:	4638      	mov	r0, r7
   d900a:	f7ff ff79 	bl	d8f00 <_ZN7FramI2C11_readMemoryEmhPh>
	  address += blockSize;
		buf += blockSize;
   d900e:	351e      	adds	r5, #30
	  numberOfBytes -= blockSize;
   d9010:	3c1e      	subs	r4, #30
   d9012:	e7f3      	b.n	d8ffc <_ZN7FramI2C4readEmjPh+0x22>
  }
  if (numberOfBytes > 0)
   d9014:	b124      	cbz	r4, d9020 <_ZN7FramI2C4readEmjPh+0x46>
  {
    _readMemory(address, numberOfBytes, buf);
   d9016:	462b      	mov	r3, r5
   d9018:	b2e2      	uxtb	r2, r4
   d901a:	4638      	mov	r0, r7
   d901c:	f7ff ff70 	bl	d8f00 <_ZN7FramI2C11_readMemoryEmhPh>
   d9020:	2000      	movs	r0, #0
   d9022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
	{
		return framBadStartAddress;
   d9024:	2001      	movs	r0, #1
   d9026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
	{
		return framBadNumberOfBytes;
   d9028:	2002      	movs	r0, #2
   d902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
	{
		return framBadFinishAddress;
   d902c:	2003      	movs	r0, #3
   d902e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9030 <_ZN7FramI2C5writeEmjPh>:
	return framOK;
}


framResult FramI2C::write(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   d9030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9032:	4614      	mov	r4, r2
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   d9034:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d9036:	428a      	cmp	r2, r1
	return framOK;
}


framResult FramI2C::write(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
{
   d9038:	4607      	mov	r7, r0
	// Validations:
	//		_bottomAddress <= startAddress <= _topAddress
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
   d903a:	d81e      	bhi.n	d907a <_ZN7FramI2C5writeEmjPh+0x4a>
   d903c:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d903e:	4281      	cmp	r1, r0
   d9040:	d81b      	bhi.n	d907a <_ZN7FramI2C5writeEmjPh+0x4a>
	{
		return framBadStartAddress;
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
   d9042:	1e62      	subs	r2, r4, #1
   d9044:	2a7f      	cmp	r2, #127	; 0x7f
   d9046:	d81a      	bhi.n	d907e <_ZN7FramI2C5writeEmjPh+0x4e>
	{
		return framBadNumberOfBytes;
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
   d9048:	440a      	add	r2, r1
   d904a:	4290      	cmp	r0, r2
   d904c:	d319      	bcc.n	d9082 <_ZN7FramI2C5writeEmjPh+0x52>
   d904e:	461d      	mov	r5, r3
   d9050:	1ace      	subs	r6, r1, r3
	// Write in 32 byte blocks due to wire limit
	  const uint8_t blockSize = 30;
	  byte* buf = buffer;
	  uint32_t address = startAddress;

	  while (numberOfBytes >= blockSize)
   d9052:	2c1d      	cmp	r4, #29
   d9054:	eb05 0106 	add.w	r1, r5, r6
   d9058:	d907      	bls.n	d906a <_ZN7FramI2C5writeEmjPh+0x3a>
	  {
			_writeMemory(address, blockSize, buf);
   d905a:	462b      	mov	r3, r5
   d905c:	221e      	movs	r2, #30
   d905e:	4638      	mov	r0, r7
   d9060:	f7ff ff89 	bl	d8f76 <_ZN7FramI2C12_writeMemoryEmhPh>
		  address += blockSize;
			buf += blockSize;
   d9064:	351e      	adds	r5, #30
		  numberOfBytes -= blockSize;
   d9066:	3c1e      	subs	r4, #30
   d9068:	e7f3      	b.n	d9052 <_ZN7FramI2C5writeEmjPh+0x22>
	  }
	  if (numberOfBytes > 0)
   d906a:	b124      	cbz	r4, d9076 <_ZN7FramI2C5writeEmjPh+0x46>
	  {
	    _writeMemory(address, numberOfBytes, buf);
   d906c:	462b      	mov	r3, r5
   d906e:	b2e2      	uxtb	r2, r4
   d9070:	4638      	mov	r0, r7
   d9072:	f7ff ff80 	bl	d8f76 <_ZN7FramI2C12_writeMemoryEmhPh>
   d9076:	2000      	movs	r0, #0
   d9078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	//		0 < numberOfBytes <= maxBuffer
	//		startAddress + numberOfBytes - 1 <= _topAddress

	if ((startAddress < _bottomAddress) || (startAddress > _topAddress))
	{
		return framBadStartAddress;
   d907a:	2001      	movs	r0, #1
   d907c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((numberOfBytes > _maxBufferSize) || (numberOfBytes == 0))
	{
		return framBadNumberOfBytes;
   d907e:	2002      	movs	r0, #2
   d9080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((startAddress + numberOfBytes - 1) > _topAddress)
	{
		return framBadFinishAddress;
   d9082:	2003      	movs	r0, #3
   d9084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9086 <_ZN7FramI2C14allocateMemoryEmR10framResult>:
	return framOK;
}


uint32_t FramI2C::allocateMemory(uint32_t numberOfBytes, framResult& result)
{
   d9086:	b510      	push	{r4, lr}

	if ((_nextFreeByte + numberOfBytes) < _topAddress)
   d9088:	6b04      	ldr	r4, [r0, #48]	; 0x30
   d908a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   d908c:	4421      	add	r1, r4
   d908e:	4299      	cmp	r1, r3
	{
		uint16_t base = _nextFreeByte;
		_nextFreeByte += numberOfBytes;
   d9090:	bf38      	it	cc
   d9092:	6301      	strcc	r1, [r0, #48]	; 0x30
   d9094:	f04f 0300 	mov.w	r3, #0
		result = framOK;
		return base;
	}
	else
	{
		result = framBadFinishAddress;
   d9098:	bf2d      	iteet	cs
   d909a:	2103      	movcs	r1, #3
   d909c:	b2a0      	uxthcc	r0, r4

	if ((_nextFreeByte + numberOfBytes) < _topAddress)
	{
		uint16_t base = _nextFreeByte;
		_nextFreeByte += numberOfBytes;
		result = framOK;
   d909e:	7013      	strbcc	r3, [r2, #0]
		return base;
	}
	else
	{
		result = framBadFinishAddress;
   d90a0:	7011      	strbcs	r1, [r2, #0]
		return 0;
   d90a2:	bf28      	it	cs
   d90a4:	4618      	movcs	r0, r3
	}
}
   d90a6:	bd10      	pop	{r4, pc}

000d90a8 <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult>:
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d90a8:	b510      	push	{r4, lr}
   d90aa:	4604      	mov	r4, r0
	// Returns result code

	// Validations:
	//		_sizeOfElement <= _bufferSize

	if (_sizeOfElement < _f.getMaxBufferSize())
   d90ac:	2b80      	cmp	r3, #128	; 0x80
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d90ae:	4608      	mov	r0, r1
   d90b0:	4611      	mov	r1, r2
		_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   d90b2:	6021      	str	r1, [r4, #0]
	}
	return result;
}


FramI2CArray::FramI2CArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d90b4:	9a02      	ldr	r2, [sp, #8]
		_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   d90b6:	7123      	strb	r3, [r4, #4]
   d90b8:	60e0      	str	r0, [r4, #12]
	// Returns result code

	// Validations:
	//		_sizeOfElement <= _bufferSize

	if (_sizeOfElement < _f.getMaxBufferSize())
   d90ba:	d204      	bcs.n	d90c6 <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult+0x1e>
	{
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement, result);
   d90bc:	4359      	muls	r1, r3
   d90be:	f7ff ffe2 	bl	d9086 <_ZN7FramI2C14allocateMemoryEmR10framResult>
   d90c2:	60a0      	str	r0, [r4, #8]
   d90c4:	e003      	b.n	d90ce <_ZN12FramI2CArrayC1ER7FramI2CmhR10framResult+0x26>
	}
	else
	{
		result = framArrayElementTooBig;
   d90c6:	2304      	movs	r3, #4
   d90c8:	7013      	strb	r3, [r2, #0]
		_startAddress = 0;
   d90ca:	2300      	movs	r3, #0
   d90cc:	60a3      	str	r3, [r4, #8]
	}
}
   d90ce:	4620      	mov	r0, r4
   d90d0:	bd10      	pop	{r4, pc}

000d90d2 <_ZN12FramI2CArray11readElementEmPhR10framResult>:


void FramI2CArray::readElement(uint32_t index, byte *buffer, framResult &result)
{
   d90d2:	b570      	push	{r4, r5, r6, lr}

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   d90d4:	6885      	ldr	r5, [r0, #8]
	}
}


void FramI2CArray::readElement(uint32_t index, byte *buffer, framResult &result)
{
   d90d6:	4616      	mov	r6, r2
   d90d8:	461c      	mov	r4, r3

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   d90da:	b90d      	cbnz	r5, d90e0 <_ZN12FramI2CArray11readElementEmPhR10framResult+0xe>
	{
		result = framBadArrayStartAddress;
   d90dc:	2306      	movs	r3, #6
   d90de:	e003      	b.n	d90e8 <_ZN12FramI2CArray11readElementEmPhR10framResult+0x16>
	}
	else if (index >= _numberOfElements)
   d90e0:	6803      	ldr	r3, [r0, #0]
   d90e2:	428b      	cmp	r3, r1
   d90e4:	d802      	bhi.n	d90ec <_ZN12FramI2CArray11readElementEmPhR10framResult+0x1a>
	{
		result = framBadArrayIndex;
   d90e6:	2305      	movs	r3, #5
   d90e8:	7023      	strb	r3, [r4, #0]
   d90ea:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		result = _f.read(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
   d90ec:	7902      	ldrb	r2, [r0, #4]
   d90ee:	68c0      	ldr	r0, [r0, #12]
   d90f0:	4633      	mov	r3, r6
   d90f2:	fb02 5101 	mla	r1, r2, r1, r5
   d90f6:	f7ff ff70 	bl	d8fda <_ZN7FramI2C4readEmjPh>
   d90fa:	7020      	strb	r0, [r4, #0]
   d90fc:	bd70      	pop	{r4, r5, r6, pc}

000d90fe <_ZN12FramI2CArray12writeElementEmPhR10framResult>:
}



void FramI2CArray::writeElement(uint32_t index, byte *buffer, framResult &result)
{
   d90fe:	b570      	push	{r4, r5, r6, lr}

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   d9100:	6885      	ldr	r5, [r0, #8]
}



void FramI2CArray::writeElement(uint32_t index, byte *buffer, framResult &result)
{
   d9102:	4616      	mov	r6, r2
   d9104:	461c      	mov	r4, r3

	// Validations:
	//		_startAddress > 0 (otherwise array has probably not been created)
	//		index < _numberOfElements

	if (_startAddress == 0)
   d9106:	b90d      	cbnz	r5, d910c <_ZN12FramI2CArray12writeElementEmPhR10framResult+0xe>
	{
		result = framBadArrayStartAddress;
   d9108:	2306      	movs	r3, #6
   d910a:	e003      	b.n	d9114 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0x16>
	}
	else if (index >= _numberOfElements)
   d910c:	6803      	ldr	r3, [r0, #0]
   d910e:	428b      	cmp	r3, r1
   d9110:	d802      	bhi.n	d9118 <_ZN12FramI2CArray12writeElementEmPhR10framResult+0x1a>
	{
		result = framBadArrayIndex;
   d9112:	2305      	movs	r3, #5
   d9114:	7023      	strb	r3, [r4, #0]
   d9116:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		result = _f.write(_startAddress + (index * _sizeOfElement), _sizeOfElement, buffer);
   d9118:	7902      	ldrb	r2, [r0, #4]
   d911a:	68c0      	ldr	r0, [r0, #12]
   d911c:	4633      	mov	r3, r6
   d911e:	fb02 5101 	mla	r1, r2, r1, r5
   d9122:	f7ff ff85 	bl	d9030 <_ZN7FramI2C5writeEmjPh>
   d9126:	7020      	strb	r0, [r4, #0]
   d9128:	bd70      	pop	{r4, r5, r6, pc}

000d912a <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult>:
	{
		return (uint32_t)(x+b);
	}
}

Ring_FramArray::Ring_FramArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d912a:	b538      	push	{r3, r4, r5, lr}
   d912c:	4604      	mov	r4, r0
   d912e:	4615      	mov	r5, r2
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
{
	if (_sizeOfElement < _f.getMaxBufferSize())
   d9130:	2b80      	cmp	r3, #128	; 0x80
	{
		return (uint32_t)(x+b);
	}
}

Ring_FramArray::Ring_FramArray(FramI2C& f, uint32_t numberOfElements, byte sizeOfElement, framResult &result): 
   d9132:	4608      	mov	r0, r1
   d9134:	9a04      	ldr	r2, [sp, #16]
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
   d9136:	6025      	str	r5, [r4, #0]
   d9138:	7123      	strb	r3, [r4, #4]
   d913a:	60e1      	str	r1, [r4, #12]
{
	if (_sizeOfElement < _f.getMaxBufferSize())
   d913c:	d20b      	bcs.n	d9156 <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult+0x2c>
	{
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
   d913e:	3501      	adds	r5, #1
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   d9140:	fb05 f103 	mul.w	r1, r5, r3
	_numberOfElements(numberOfElements), _sizeOfElement(sizeOfElement), _f(f)
{
	if (_sizeOfElement < _f.getMaxBufferSize())
	{
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
   d9144:	6025      	str	r5, [r4, #0]
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   d9146:	310c      	adds	r1, #12
   d9148:	f7ff ff9d 	bl	d9086 <_ZN7FramI2C14allocateMemoryEmR10framResult>
	return _topAddress;
}

uint32_t FramI2C::getNextFreeByte()
{
	return _nextFreeByte;
   d914c:	68e3      	ldr	r3, [r4, #12]
		// The array size needs to be incremented so that there is room for one empty element
		_numberOfElements = _numberOfElements + 1;
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
   d914e:	60a0      	str	r0, [r4, #8]
	return _topAddress;
}

uint32_t FramI2C::getNextFreeByte()
{
	return _nextFreeByte;
   d9150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		_numberOfElements = _numberOfElements + 1;
		// allocateMemeory returns the base or start address and saves the new
		// _nextFreeByte = _bottomAddress
		// add sizeof(_pointers) to allocate 12 bytes to store the _pointer indices
		_startAddress = _f.allocateMemory(_numberOfElements * _sizeOfElement + sizeof(_pointers), result);
		_ringEndAddress = _f.getNextFreeByte();
   d9152:	61a3      	str	r3, [r4, #24]
   d9154:	e003      	b.n	d915e <_ZN14Ring_FramArrayC1ER7FramI2CmhR10framResult+0x34>
		// 	}
		// }
	}
	else
	{
		result = framArrayElementTooBig;
   d9156:	2304      	movs	r3, #4
   d9158:	7013      	strb	r3, [r2, #0]
		// Add checks in the other functions to use start address
		_startAddress = 0;
   d915a:	2300      	movs	r3, #0
   d915c:	60a3      	str	r3, [r4, #8]
		// _tailAddress = 0;
		// _headAddress = 0;
	}
}
   d915e:	4620      	mov	r0, r4
   d9160:	bd38      	pop	{r3, r4, r5, pc}

000d9162 <_ZN14Ring_FramArray11setPointersEv>:
	}
}

void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
   d9162:	6883      	ldr	r3, [r0, #8]
   d9164:	b16b      	cbz	r3, d9182 <_ZN14Ring_FramArray11setPointersEv+0x20>
	{
		_pointers.head = _headAddress;
   d9166:	6942      	ldr	r2, [r0, #20]
		_pointers.tail = _tailAddress;
   d9168:	6903      	ldr	r3, [r0, #16]
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   d916a:	6a81      	ldr	r1, [r0, #40]	; 0x28
void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
	{
		_pointers.head = _headAddress;
		_pointers.tail = _tailAddress;
   d916c:	6203      	str	r3, [r0, #32]
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   d916e:	4413      	add	r3, r2

void Ring_FramArray::setPointers()
{
	if (!(_startAddress==0))
	{
		_pointers.head = _headAddress;
   d9170:	6242      	str	r2, [r0, #36]	; 0x24
		_pointers.tail = _tailAddress;
		// Calculate the check pointer
		_pointers.pointerCheck = _pointersAddress + _pointers.tail + _pointers.head;
   d9172:	185a      	adds	r2, r3, r1
   d9174:	4603      	mov	r3, r0
   d9176:	f843 2f1c 	str.w	r2, [r3, #28]!
		// Save pointers to fram
		_f.write(_pointersAddress, sizeof(_pointers),(uint8_t*)&_pointers);
   d917a:	220c      	movs	r2, #12
   d917c:	68c0      	ldr	r0, [r0, #12]
   d917e:	f7ff bf57 	b.w	d9030 <_ZN7FramI2C5writeEmjPh>
   d9182:	4770      	bx	lr

000d9184 <_ZN14Ring_FramArray11getPointersEv>:
	}
}

void Ring_FramArray::getPointers()
{
_pointers.tail=99;
   d9184:	2363      	movs	r3, #99	; 0x63
   d9186:	6203      	str	r3, [r0, #32]
_pointers.head=100;
   d9188:	2364      	movs	r3, #100	; 0x64
   d918a:	6243      	str	r3, [r0, #36]	; 0x24

framResult checkresult;
	//read(uint32_t startAddress, unsigned int numberOfBytes, byte *buffer)
	checkresult = _f.read(_pointersAddress, sizeof(_pointers), (uint8_t*)&_pointers);
   d918c:	6a81      	ldr	r1, [r0, #40]	; 0x28
   d918e:	f100 031c 	add.w	r3, r0, #28
   d9192:	220c      	movs	r2, #12
   d9194:	68c0      	ldr	r0, [r0, #12]
   d9196:	f7ff bf20 	b.w	d8fda <_ZN7FramI2C4readEmjPh>

000d919a <_ZN14Ring_FramArray10initializeEv>:
		// _headAddress = 0;
	}
}

void Ring_FramArray::initialize()
{
   d919a:	b510      	push	{r4, lr}
   d919c:	4604      	mov	r4, r0
	// if (result==framOK)
	// {
		if (!Wire.isEnabled())
   d919e:	f002 fb49 	bl	db834 <_Z19__fetch_global_Wirev>
   d91a2:	f002 f8fe 	bl	db3a2 <_ZN7TwoWire9isEnabledEv>
   d91a6:	b918      	cbnz	r0, d91b0 <_ZN14Ring_FramArray10initializeEv+0x16>
		{
			Wire.begin();
   d91a8:	f002 fb44 	bl	db834 <_Z19__fetch_global_Wirev>
   d91ac:	f002 f8b4 	bl	db318 <_ZN7TwoWire5beginEv>
		}

		_pointersAddress = _ringEndAddress - (uint32_t)sizeof(_pointers);
   d91b0:	69a3      	ldr	r3, [r4, #24]
   d91b2:	3b0c      	subs	r3, #12
   d91b4:	62a3      	str	r3, [r4, #40]	; 0x28

		// Load pointers from FRAM
		getPointers();
   d91b6:	4620      	mov	r0, r4
   d91b8:	f7ff ffe4 	bl	d9184 <_ZN14Ring_FramArray11getPointersEv>
		// Check for initialization or existance of pointers
		// Rule to check _pointers.pointerCheck = _pointersAddress+_pointers.tail+pointers.head
		uint32_t check = _pointersAddress + _pointers.tail + _pointers.head;
		if (check==_pointers.pointerCheck)
   d91bc:	f104 0120 	add.w	r1, r4, #32
   d91c0:	c90e      	ldmia	r1, {r1, r2, r3}
   d91c2:	69e0      	ldr	r0, [r4, #28]
   d91c4:	440b      	add	r3, r1
   d91c6:	4413      	add	r3, r2
   d91c8:	4283      	cmp	r3, r0
			_headAddress = _pointers.head;
		}
		else
		{
			// First run
			_tailAddress = 0;
   d91ca:	bf13      	iteet	ne
   d91cc:	2300      	movne	r3, #0
		// Rule to check _pointers.pointerCheck = _pointersAddress+_pointers.tail+pointers.head
		uint32_t check = _pointersAddress + _pointers.tail + _pointers.head;
		if (check==_pointers.pointerCheck)
		{
			// Not first run so initialize from FRAM
			_tailAddress = _pointers.tail;
   d91ce:	6121      	streq	r1, [r4, #16]
			_headAddress = _pointers.head;
   d91d0:	6162      	streq	r2, [r4, #20]
		}
		else
		{
			// First run
			_tailAddress = 0;
   d91d2:	6123      	strne	r3, [r4, #16]
			_headAddress = 0;			
   d91d4:	bf18      	it	ne
   d91d6:	6163      	strne	r3, [r4, #20]
		}
		setPointers();
   d91d8:	4620      	mov	r0, r4
	// }
}
   d91da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		{
			// First run
			_tailAddress = 0;
			_headAddress = 0;			
		}
		setPointers();
   d91de:	f7ff bfc0 	b.w	d9162 <_ZN14Ring_FramArray11setPointersEv>

000d91e2 <_GLOBAL__sub_I__ZN7FramI2CC2E14framPartNumber>:
   d91e2:	f000 b89b 	b.w	d931c <HAL_Pin_Map>

000d91e6 <_ZN13RunningMedianD1Ev>:
{
#ifdef RUNNING_MEDIAN_USE_MALLOC
  free(_ar);
  free(_p);
#endif
}
   d91e6:	4770      	bx	lr

000d91e8 <_ZN13RunningMedian5clearEv>:

// resets all counters
void RunningMedian::clear()
{
  _cnt = 0;
   d91e8:	2300      	movs	r3, #0
   d91ea:	8083      	strh	r3, [r0, #4]
  _idx = 0;
   d91ec:	80c3      	strh	r3, [r0, #6]
  _sorted = false;
   d91ee:	7003      	strb	r3, [r0, #0]
  for (uint16_t i = 0; i < _size; i++) _p[i] = i;
   d91f0:	8841      	ldrh	r1, [r0, #2]
   d91f2:	f500 60b0 	add.w	r0, r0, #1408	; 0x580
   d91f6:	b29a      	uxth	r2, r3
   d91f8:	428a      	cmp	r2, r1
   d91fa:	d203      	bcs.n	d9204 <_ZN13RunningMedian5clearEv+0x1c>
   d91fc:	f820 2f02 	strh.w	r2, [r0, #2]!
   d9200:	3301      	adds	r3, #1
   d9202:	e7f8      	b.n	d91f6 <_ZN13RunningMedian5clearEv+0xe>
   d9204:	4770      	bx	lr

000d9206 <_ZN13RunningMedianC1Et>:
//
// Modified by Robert Mawrey for uint16_t values
#include "RunningMedian16Bit.h"

//RunningMedian::RunningMedian(const uint8_t size)
RunningMedian::RunningMedian(const uint16_t size)
   d9206:	b510      	push	{r4, lr}
   d9208:	4604      	mov	r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d920a:	b129      	cbz	r1, d9218 <_ZN13RunningMedianC1Et+0x12>
   d920c:	f240 23bd 	movw	r3, #701	; 0x2bd
   d9210:	4299      	cmp	r1, r3
   d9212:	bfa8      	it	ge
   d9214:	4619      	movge	r1, r3
   d9216:	e000      	b.n	d921a <_ZN13RunningMedianC1Et+0x14>
   d9218:	2101      	movs	r1, #1
//  _ar = (float *) malloc(_size * sizeof(float));
_ar = (uint16_t *) malloc(_size * sizeof(uint16_t));
  _p = (uint16_t *) malloc(_size * sizeof(uint16_t));
#endif

  clear();
   d921a:	4620      	mov	r0, r4
#include "RunningMedian16Bit.h"

//RunningMedian::RunningMedian(const uint8_t size)
RunningMedian::RunningMedian(const uint16_t size)
{
  _size = constrain(size, MEDIAN_MIN_SIZE, MEDIAN_MAX_SIZE);
   d921c:	8061      	strh	r1, [r4, #2]
//  _ar = (float *) malloc(_size * sizeof(float));
_ar = (uint16_t *) malloc(_size * sizeof(uint16_t));
  _p = (uint16_t *) malloc(_size * sizeof(uint16_t));
#endif

  clear();
   d921e:	f7ff ffe3 	bl	d91e8 <_ZN13RunningMedian5clearEv>
}
   d9222:	4620      	mov	r0, r4
   d9224:	bd10      	pop	{r4, pc}

000d9226 <_ZN13RunningMedian3addEt>:

// adds a new value to the data-set
// or overwrites the oldest if full.
void RunningMedian::add(uint16_t value)
{
  _ar[_idx++] = value;
   d9226:	88c2      	ldrh	r2, [r0, #6]
   d9228:	1c53      	adds	r3, r2, #1
   d922a:	3204      	adds	r2, #4
   d922c:	b29b      	uxth	r3, r3
   d922e:	80c3      	strh	r3, [r0, #6]
   d9230:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  if (_idx >= _size) _idx = 0; // wrap around
   d9234:	8842      	ldrh	r2, [r0, #2]
   d9236:	4293      	cmp	r3, r2
   d9238:	bf24      	itt	cs
   d923a:	2300      	movcs	r3, #0
   d923c:	80c3      	strhcs	r3, [r0, #6]
  if (_cnt < _size) _cnt++;
   d923e:	8883      	ldrh	r3, [r0, #4]
   d9240:	429a      	cmp	r2, r3
   d9242:	bf84      	itt	hi
   d9244:	3301      	addhi	r3, #1
   d9246:	8083      	strhhi	r3, [r0, #4]
  _sorted = false;
   d9248:	2300      	movs	r3, #0
   d924a:	7003      	strb	r3, [r0, #0]
   d924c:	4770      	bx	lr

000d924e <_ZN13RunningMedian4sortEv>:
  }
}
#endif

void RunningMedian::sort()
{
   d924e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // bubble sort with flag
  for (uint16_t i = 0; i < _cnt-1; i++)
   d9252:	f8b0 e004 	ldrh.w	lr, [r0, #4]
   d9256:	2600      	movs	r6, #0
   d9258:	f10e 3cff 	add.w	ip, lr, #4294967295
   d925c:	b2b2      	uxth	r2, r6
   d925e:	4562      	cmp	r2, ip
   d9260:	da20      	bge.n	d92a4 <_ZN13RunningMedian4sortEv+0x56>
   d9262:	2301      	movs	r3, #1
   d9264:	461f      	mov	r7, r3
  {
    bool flag = true;
    for (uint16_t j = 1; j < _cnt-i; j++)
   d9266:	ebc2 050e 	rsb	r5, r2, lr
   d926a:	42ab      	cmp	r3, r5
   d926c:	da17      	bge.n	d929e <_ZN13RunningMedian4sortEv+0x50>
   d926e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
   d9272:	3301      	adds	r3, #1
    {
      if (_ar[_p[j-1]] > _ar[_p[j]])
   d9274:	f8b2 1580 	ldrh.w	r1, [r2, #1408]	; 0x580
   d9278:	f8b2 4582 	ldrh.w	r4, [r2, #1410]	; 0x582
   d927c:	f101 0904 	add.w	r9, r1, #4
   d9280:	f104 0804 	add.w	r8, r4, #4
   d9284:	f830 9019 	ldrh.w	r9, [r0, r9, lsl #1]
   d9288:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
   d928c:	45c1      	cmp	r9, r8
      {
        uint16_t t = _p[j-1];
        _p[j-1] = _p[j];
   d928e:	bf82      	ittt	hi
   d9290:	f8a2 4580 	strhhi.w	r4, [r2, #1408]	; 0x580
        _p[j] = t;
   d9294:	f8a2 1582 	strhhi.w	r1, [r2, #1410]	; 0x582
        flag = false;
   d9298:	2700      	movhi	r7, #0
{
  // bubble sort with flag
  for (uint16_t i = 0; i < _cnt-1; i++)
  {
    bool flag = true;
    for (uint16_t j = 1; j < _cnt-i; j++)
   d929a:	b29b      	uxth	r3, r3
   d929c:	e7e5      	b.n	d926a <_ZN13RunningMedian4sortEv+0x1c>
   d929e:	3601      	adds	r6, #1
        _p[j-1] = _p[j];
        _p[j] = t;
        flag = false;
      }
    }
    if (flag) break;
   d92a0:	2f00      	cmp	r7, #0
   d92a2:	d0db      	beq.n	d925c <_ZN13RunningMedian4sortEv+0xe>
  }
  _sorted = true;
   d92a4:	2301      	movs	r3, #1
   d92a6:	7003      	strb	r3, [r0, #0]
   d92a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d92ac <_ZN13RunningMedian9getMedianEv>:
  if (_cnt < _size) _cnt++;
  _sorted = false;
}

uint16_t RunningMedian::getMedian()
{
   d92ac:	b510      	push	{r4, lr}
  if (_cnt == 0) return NAN;
   d92ae:	8883      	ldrh	r3, [r0, #4]
  if (_cnt < _size) _cnt++;
  _sorted = false;
}

uint16_t RunningMedian::getMedian()
{
   d92b0:	4604      	mov	r4, r0
  if (_cnt == 0) return NAN;
   d92b2:	b1f3      	cbz	r3, d92f2 <_ZN13RunningMedian9getMedianEv+0x46>

  if (_sorted == false) sort();
   d92b4:	7803      	ldrb	r3, [r0, #0]
   d92b6:	b90b      	cbnz	r3, d92bc <_ZN13RunningMedian9getMedianEv+0x10>
   d92b8:	f7ff ffc9 	bl	d924e <_ZN13RunningMedian4sortEv>

  if (_cnt & 0x01) return _ar[_p[_cnt/2]];
   d92bc:	88a3      	ldrh	r3, [r4, #4]
   d92be:	f013 0f01 	tst.w	r3, #1
   d92c2:	ea4f 0353 	mov.w	r3, r3, lsr #1
   d92c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d92ca:	d005      	beq.n	d92d8 <_ZN13RunningMedian9getMedianEv+0x2c>
   d92cc:	f8b3 3582 	ldrh.w	r3, [r3, #1410]	; 0x582
   d92d0:	3304      	adds	r3, #4
   d92d2:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   d92d6:	e00c      	b.n	d92f2 <_ZN13RunningMedian9getMedianEv+0x46>
  else return (_ar[_p[_cnt/2]] + _ar[_p[_cnt/2 - 1]]) / 2;
   d92d8:	f8b3 2582 	ldrh.w	r2, [r3, #1410]	; 0x582
   d92dc:	3204      	adds	r2, #4
   d92de:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
   d92e2:	f8b3 2580 	ldrh.w	r2, [r3, #1408]	; 0x580
   d92e6:	3204      	adds	r2, #4
   d92e8:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
   d92ec:	440b      	add	r3, r1
   d92ee:	f3c3 034f 	ubfx	r3, r3, #1, #16
}
   d92f2:	4618      	mov	r0, r3
   d92f4:	bd10      	pop	{r4, pc}

000d92f6 <_GLOBAL__sub_I__ZN13RunningMedianC2Et>:
   d92f6:	f000 b811 	b.w	d931c <HAL_Pin_Map>
	...

000d92fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d92fc:	b508      	push	{r3, lr}
   d92fe:	4b02      	ldr	r3, [pc, #8]	; (d9308 <netdb_freeaddrinfo+0xc>)
   d9300:	681b      	ldr	r3, [r3, #0]
   d9302:	689b      	ldr	r3, [r3, #8]
   d9304:	9301      	str	r3, [sp, #4]
   d9306:	bd08      	pop	{r3, pc}
   d9308:	00030268 	.word	0x00030268

000d930c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d930c:	b508      	push	{r3, lr}
   d930e:	4b02      	ldr	r3, [pc, #8]	; (d9318 <netdb_getaddrinfo+0xc>)
   d9310:	681b      	ldr	r3, [r3, #0]
   d9312:	68db      	ldr	r3, [r3, #12]
   d9314:	9301      	str	r3, [sp, #4]
   d9316:	bd08      	pop	{r3, pc}
   d9318:	00030268 	.word	0x00030268

000d931c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d931c:	b508      	push	{r3, lr}
   d931e:	4b02      	ldr	r3, [pc, #8]	; (d9328 <HAL_Pin_Map+0xc>)
   d9320:	681b      	ldr	r3, [r3, #0]
   d9322:	681b      	ldr	r3, [r3, #0]
   d9324:	9301      	str	r3, [sp, #4]
   d9326:	bd08      	pop	{r3, pc}
   d9328:	0003022c 	.word	0x0003022c

000d932c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d932c:	b508      	push	{r3, lr}
   d932e:	4b02      	ldr	r3, [pc, #8]	; (d9338 <HAL_Validate_Pin_Function+0xc>)
   d9330:	681b      	ldr	r3, [r3, #0]
   d9332:	685b      	ldr	r3, [r3, #4]
   d9334:	9301      	str	r3, [sp, #4]
   d9336:	bd08      	pop	{r3, pc}
   d9338:	0003022c 	.word	0x0003022c

000d933c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d933c:	b508      	push	{r3, lr}
   d933e:	4b02      	ldr	r3, [pc, #8]	; (d9348 <HAL_Pin_Mode+0xc>)
   d9340:	681b      	ldr	r3, [r3, #0]
   d9342:	689b      	ldr	r3, [r3, #8]
   d9344:	9301      	str	r3, [sp, #4]
   d9346:	bd08      	pop	{r3, pc}
   d9348:	0003022c 	.word	0x0003022c

000d934c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d934c:	b508      	push	{r3, lr}
   d934e:	4b02      	ldr	r3, [pc, #8]	; (d9358 <HAL_Get_Pin_Mode+0xc>)
   d9350:	681b      	ldr	r3, [r3, #0]
   d9352:	68db      	ldr	r3, [r3, #12]
   d9354:	9301      	str	r3, [sp, #4]
   d9356:	bd08      	pop	{r3, pc}
   d9358:	0003022c 	.word	0x0003022c

000d935c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d935c:	b508      	push	{r3, lr}
   d935e:	4b02      	ldr	r3, [pc, #8]	; (d9368 <HAL_GPIO_Write+0xc>)
   d9360:	681b      	ldr	r3, [r3, #0]
   d9362:	691b      	ldr	r3, [r3, #16]
   d9364:	9301      	str	r3, [sp, #4]
   d9366:	bd08      	pop	{r3, pc}
   d9368:	0003022c 	.word	0x0003022c

000d936c <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d936c:	b508      	push	{r3, lr}
   d936e:	4b02      	ldr	r3, [pc, #8]	; (d9378 <HAL_Interrupts_Attach+0xc>)
   d9370:	681b      	ldr	r3, [r3, #0]
   d9372:	699b      	ldr	r3, [r3, #24]
   d9374:	9301      	str	r3, [sp, #4]
   d9376:	bd08      	pop	{r3, pc}
   d9378:	0003022c 	.word	0x0003022c

000d937c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d937c:	b508      	push	{r3, lr}
   d937e:	4b02      	ldr	r3, [pc, #8]	; (d9388 <HAL_Interrupts_Detach+0xc>)
   d9380:	681b      	ldr	r3, [r3, #0]
   d9382:	69db      	ldr	r3, [r3, #28]
   d9384:	9301      	str	r3, [sp, #4]
   d9386:	bd08      	pop	{r3, pc}
   d9388:	0003022c 	.word	0x0003022c

000d938c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d938c:	b508      	push	{r3, lr}
   d938e:	4b02      	ldr	r3, [pc, #8]	; (d9398 <HAL_ADC_Read+0xc>)
   d9390:	681b      	ldr	r3, [r3, #0]
   d9392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9394:	9301      	str	r3, [sp, #4]
   d9396:	bd08      	pop	{r3, pc}
   d9398:	0003022c 	.word	0x0003022c

000d939c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d939c:	b508      	push	{r3, lr}
   d939e:	4b02      	ldr	r3, [pc, #8]	; (d93a8 <HAL_SPI_Begin+0xc>)
   d93a0:	681b      	ldr	r3, [r3, #0]
   d93a2:	681b      	ldr	r3, [r3, #0]
   d93a4:	9301      	str	r3, [sp, #4]
   d93a6:	bd08      	pop	{r3, pc}
   d93a8:	00030230 	.word	0x00030230

000d93ac <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d93ac:	b508      	push	{r3, lr}
   d93ae:	4b02      	ldr	r3, [pc, #8]	; (d93b8 <HAL_SPI_Send_Receive_Data+0xc>)
   d93b0:	681b      	ldr	r3, [r3, #0]
   d93b2:	695b      	ldr	r3, [r3, #20]
   d93b4:	9301      	str	r3, [sp, #4]
   d93b6:	bd08      	pop	{r3, pc}
   d93b8:	00030230 	.word	0x00030230

000d93bc <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d93bc:	b508      	push	{r3, lr}
   d93be:	4b02      	ldr	r3, [pc, #8]	; (d93c8 <HAL_SPI_Init+0xc>)
   d93c0:	681b      	ldr	r3, [r3, #0]
   d93c2:	69db      	ldr	r3, [r3, #28]
   d93c4:	9301      	str	r3, [sp, #4]
   d93c6:	bd08      	pop	{r3, pc}
   d93c8:	00030230 	.word	0x00030230

000d93cc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d93cc:	b508      	push	{r3, lr}
   d93ce:	4b02      	ldr	r3, [pc, #8]	; (d93d8 <HAL_SPI_Is_Enabled+0xc>)
   d93d0:	681b      	ldr	r3, [r3, #0]
   d93d2:	6a1b      	ldr	r3, [r3, #32]
   d93d4:	9301      	str	r3, [sp, #4]
   d93d6:	bd08      	pop	{r3, pc}
   d93d8:	00030230 	.word	0x00030230

000d93dc <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d93dc:	b508      	push	{r3, lr}
   d93de:	4b02      	ldr	r3, [pc, #8]	; (d93e8 <HAL_SPI_Info+0xc>)
   d93e0:	681b      	ldr	r3, [r3, #0]
   d93e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d93e4:	9301      	str	r3, [sp, #4]
   d93e6:	bd08      	pop	{r3, pc}
   d93e8:	00030230 	.word	0x00030230

000d93ec <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d93ec:	b508      	push	{r3, lr}
   d93ee:	4b02      	ldr	r3, [pc, #8]	; (d93f8 <HAL_SPI_DMA_Transfer+0xc>)
   d93f0:	681b      	ldr	r3, [r3, #0]
   d93f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d93f4:	9301      	str	r3, [sp, #4]
   d93f6:	bd08      	pop	{r3, pc}
   d93f8:	00030230 	.word	0x00030230

000d93fc <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d93fc:	b508      	push	{r3, lr}
   d93fe:	4b02      	ldr	r3, [pc, #8]	; (d9408 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d9400:	681b      	ldr	r3, [r3, #0]
   d9402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d9404:	9301      	str	r3, [sp, #4]
   d9406:	bd08      	pop	{r3, pc}
   d9408:	00030230 	.word	0x00030230

000d940c <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d940c:	b508      	push	{r3, lr}
   d940e:	4b02      	ldr	r3, [pc, #8]	; (d9418 <HAL_SPI_Set_Settings+0xc>)
   d9410:	681b      	ldr	r3, [r3, #0]
   d9412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d9414:	9301      	str	r3, [sp, #4]
   d9416:	bd08      	pop	{r3, pc}
   d9418:	00030230 	.word	0x00030230

000d941c <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d941c:	b508      	push	{r3, lr}
   d941e:	4b02      	ldr	r3, [pc, #8]	; (d9428 <HAL_SPI_Acquire+0xc>)
   d9420:	681b      	ldr	r3, [r3, #0]
   d9422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9424:	9301      	str	r3, [sp, #4]
   d9426:	bd08      	pop	{r3, pc}
   d9428:	00030230 	.word	0x00030230

000d942c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d942c:	b508      	push	{r3, lr}
   d942e:	4b02      	ldr	r3, [pc, #8]	; (d9438 <HAL_SPI_Release+0xc>)
   d9430:	681b      	ldr	r3, [r3, #0]
   d9432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9434:	9301      	str	r3, [sp, #4]
   d9436:	bd08      	pop	{r3, pc}
   d9438:	00030230 	.word	0x00030230

000d943c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d943c:	b508      	push	{r3, lr}
   d943e:	4b02      	ldr	r3, [pc, #8]	; (d9448 <HAL_RNG_GetRandomNumber+0xc>)
   d9440:	681b      	ldr	r3, [r3, #0]
   d9442:	685b      	ldr	r3, [r3, #4]
   d9444:	9301      	str	r3, [sp, #4]
   d9446:	bd08      	pop	{r3, pc}
   d9448:	00030218 	.word	0x00030218

000d944c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d944c:	b508      	push	{r3, lr}
   d944e:	4b02      	ldr	r3, [pc, #8]	; (d9458 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d9450:	681b      	ldr	r3, [r3, #0]
   d9452:	691b      	ldr	r3, [r3, #16]
   d9454:	9301      	str	r3, [sp, #4]
   d9456:	bd08      	pop	{r3, pc}
   d9458:	00030218 	.word	0x00030218

000d945c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d945c:	b508      	push	{r3, lr}
   d945e:	4b02      	ldr	r3, [pc, #8]	; (d9468 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d9460:	681b      	ldr	r3, [r3, #0]
   d9462:	695b      	ldr	r3, [r3, #20]
   d9464:	9301      	str	r3, [sp, #4]
   d9466:	bd08      	pop	{r3, pc}
   d9468:	00030218 	.word	0x00030218

000d946c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d946c:	b508      	push	{r3, lr}
   d946e:	4b02      	ldr	r3, [pc, #8]	; (d9478 <HAL_RTC_Get_UnixTime+0xc>)
   d9470:	681b      	ldr	r3, [r3, #0]
   d9472:	69db      	ldr	r3, [r3, #28]
   d9474:	9301      	str	r3, [sp, #4]
   d9476:	bd08      	pop	{r3, pc}
   d9478:	00030218 	.word	0x00030218

000d947c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d947c:	b508      	push	{r3, lr}
   d947e:	4b02      	ldr	r3, [pc, #8]	; (d9488 <HAL_RTC_Time_Is_Valid+0xc>)
   d9480:	681b      	ldr	r3, [r3, #0]
   d9482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d9484:	9301      	str	r3, [sp, #4]
   d9486:	bd08      	pop	{r3, pc}
   d9488:	00030218 	.word	0x00030218

000d948c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d948c:	b508      	push	{r3, lr}
   d948e:	4b02      	ldr	r3, [pc, #8]	; (d9498 <hal_timer_millis+0xc>)
   d9490:	681b      	ldr	r3, [r3, #0]
   d9492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d9494:	9301      	str	r3, [sp, #4]
   d9496:	bd08      	pop	{r3, pc}
   d9498:	00030218 	.word	0x00030218

000d949c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d949c:	b508      	push	{r3, lr}
   d949e:	4b02      	ldr	r3, [pc, #8]	; (d94a8 <HAL_Core_System_Reset_Ex+0xc>)
   d94a0:	681b      	ldr	r3, [r3, #0]
   d94a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d94a4:	9301      	str	r3, [sp, #4]
   d94a6:	bd08      	pop	{r3, pc}
   d94a8:	00030234 	.word	0x00030234

000d94ac <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d94ac:	b508      	push	{r3, lr}
   d94ae:	4b02      	ldr	r3, [pc, #8]	; (d94b8 <os_thread_is_current+0xc>)
   d94b0:	681b      	ldr	r3, [r3, #0]
   d94b2:	689b      	ldr	r3, [r3, #8]
   d94b4:	9301      	str	r3, [sp, #4]
   d94b6:	bd08      	pop	{r3, pc}
   d94b8:	00030248 	.word	0x00030248

000d94bc <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d94bc:	b508      	push	{r3, lr}
   d94be:	4b02      	ldr	r3, [pc, #8]	; (d94c8 <os_thread_yield+0xc>)
   d94c0:	681b      	ldr	r3, [r3, #0]
   d94c2:	68db      	ldr	r3, [r3, #12]
   d94c4:	9301      	str	r3, [sp, #4]
   d94c6:	bd08      	pop	{r3, pc}
   d94c8:	00030248 	.word	0x00030248

000d94cc <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d94cc:	b508      	push	{r3, lr}
   d94ce:	4b02      	ldr	r3, [pc, #8]	; (d94d8 <os_thread_join+0xc>)
   d94d0:	681b      	ldr	r3, [r3, #0]
   d94d2:	691b      	ldr	r3, [r3, #16]
   d94d4:	9301      	str	r3, [sp, #4]
   d94d6:	bd08      	pop	{r3, pc}
   d94d8:	00030248 	.word	0x00030248

000d94dc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d94dc:	b508      	push	{r3, lr}
   d94de:	4b02      	ldr	r3, [pc, #8]	; (d94e8 <os_thread_cleanup+0xc>)
   d94e0:	681b      	ldr	r3, [r3, #0]
   d94e2:	695b      	ldr	r3, [r3, #20]
   d94e4:	9301      	str	r3, [sp, #4]
   d94e6:	bd08      	pop	{r3, pc}
   d94e8:	00030248 	.word	0x00030248

000d94ec <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d94ec:	b508      	push	{r3, lr}
   d94ee:	4b02      	ldr	r3, [pc, #8]	; (d94f8 <os_thread_scheduling+0xc>)
   d94f0:	681b      	ldr	r3, [r3, #0]
   d94f2:	69db      	ldr	r3, [r3, #28]
   d94f4:	9301      	str	r3, [sp, #4]
   d94f6:	bd08      	pop	{r3, pc}
   d94f8:	00030248 	.word	0x00030248

000d94fc <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d94fc:	b508      	push	{r3, lr}
   d94fe:	4b02      	ldr	r3, [pc, #8]	; (d9508 <os_timer_create+0xc>)
   d9500:	681b      	ldr	r3, [r3, #0]
   d9502:	6a1b      	ldr	r3, [r3, #32]
   d9504:	9301      	str	r3, [sp, #4]
   d9506:	bd08      	pop	{r3, pc}
   d9508:	00030248 	.word	0x00030248

000d950c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d950c:	b508      	push	{r3, lr}
   d950e:	4b02      	ldr	r3, [pc, #8]	; (d9518 <os_timer_destroy+0xc>)
   d9510:	681b      	ldr	r3, [r3, #0]
   d9512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9514:	9301      	str	r3, [sp, #4]
   d9516:	bd08      	pop	{r3, pc}
   d9518:	00030248 	.word	0x00030248

000d951c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d951c:	b508      	push	{r3, lr}
   d951e:	4b02      	ldr	r3, [pc, #8]	; (d9528 <os_timer_get_id+0xc>)
   d9520:	681b      	ldr	r3, [r3, #0]
   d9522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9524:	9301      	str	r3, [sp, #4]
   d9526:	bd08      	pop	{r3, pc}
   d9528:	00030248 	.word	0x00030248

000d952c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d952c:	b508      	push	{r3, lr}
   d952e:	4b02      	ldr	r3, [pc, #8]	; (d9538 <os_timer_change+0xc>)
   d9530:	681b      	ldr	r3, [r3, #0]
   d9532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9534:	9301      	str	r3, [sp, #4]
   d9536:	bd08      	pop	{r3, pc}
   d9538:	00030248 	.word	0x00030248

000d953c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d953c:	b508      	push	{r3, lr}
   d953e:	4b02      	ldr	r3, [pc, #8]	; (d9548 <os_mutex_recursive_create+0xc>)
   d9540:	681b      	ldr	r3, [r3, #0]
   d9542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9544:	9301      	str	r3, [sp, #4]
   d9546:	bd08      	pop	{r3, pc}
   d9548:	00030248 	.word	0x00030248

000d954c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d954c:	b508      	push	{r3, lr}
   d954e:	4b02      	ldr	r3, [pc, #8]	; (d9558 <os_mutex_recursive_destroy+0xc>)
   d9550:	681b      	ldr	r3, [r3, #0]
   d9552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9554:	9301      	str	r3, [sp, #4]
   d9556:	bd08      	pop	{r3, pc}
   d9558:	00030248 	.word	0x00030248

000d955c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d955c:	b508      	push	{r3, lr}
   d955e:	4b02      	ldr	r3, [pc, #8]	; (d9568 <os_timer_set_id+0xc>)
   d9560:	681b      	ldr	r3, [r3, #0]
   d9562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d9564:	9301      	str	r3, [sp, #4]
   d9566:	bd08      	pop	{r3, pc}
   d9568:	00030248 	.word	0x00030248

000d956c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d956c:	b508      	push	{r3, lr}
   d956e:	4b02      	ldr	r3, [pc, #8]	; (d9578 <inet_inet_ntop+0xc>)
   d9570:	681b      	ldr	r3, [r3, #0]
   d9572:	695b      	ldr	r3, [r3, #20]
   d9574:	9301      	str	r3, [sp, #4]
   d9576:	bd08      	pop	{r3, pc}
   d9578:	00030264 	.word	0x00030264

000d957c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d957c:	b508      	push	{r3, lr}
   d957e:	4b02      	ldr	r3, [pc, #8]	; (d9588 <HAL_USART_Init+0xc>)
   d9580:	681b      	ldr	r3, [r3, #0]
   d9582:	681b      	ldr	r3, [r3, #0]
   d9584:	9301      	str	r3, [sp, #4]
   d9586:	bd08      	pop	{r3, pc}
   d9588:	0003023c 	.word	0x0003023c

000d958c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d958c:	b508      	push	{r3, lr}
   d958e:	4b02      	ldr	r3, [pc, #8]	; (d9598 <HAL_USART_Write_Data+0xc>)
   d9590:	681b      	ldr	r3, [r3, #0]
   d9592:	68db      	ldr	r3, [r3, #12]
   d9594:	9301      	str	r3, [sp, #4]
   d9596:	bd08      	pop	{r3, pc}
   d9598:	0003023c 	.word	0x0003023c

000d959c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d959c:	b508      	push	{r3, lr}
   d959e:	4b02      	ldr	r3, [pc, #8]	; (d95a8 <HAL_USART_Available_Data+0xc>)
   d95a0:	681b      	ldr	r3, [r3, #0]
   d95a2:	691b      	ldr	r3, [r3, #16]
   d95a4:	9301      	str	r3, [sp, #4]
   d95a6:	bd08      	pop	{r3, pc}
   d95a8:	0003023c 	.word	0x0003023c

000d95ac <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d95ac:	b508      	push	{r3, lr}
   d95ae:	4b02      	ldr	r3, [pc, #8]	; (d95b8 <HAL_USART_Read_Data+0xc>)
   d95b0:	681b      	ldr	r3, [r3, #0]
   d95b2:	695b      	ldr	r3, [r3, #20]
   d95b4:	9301      	str	r3, [sp, #4]
   d95b6:	bd08      	pop	{r3, pc}
   d95b8:	0003023c 	.word	0x0003023c

000d95bc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d95bc:	b508      	push	{r3, lr}
   d95be:	4b02      	ldr	r3, [pc, #8]	; (d95c8 <HAL_USART_Peek_Data+0xc>)
   d95c0:	681b      	ldr	r3, [r3, #0]
   d95c2:	699b      	ldr	r3, [r3, #24]
   d95c4:	9301      	str	r3, [sp, #4]
   d95c6:	bd08      	pop	{r3, pc}
   d95c8:	0003023c 	.word	0x0003023c

000d95cc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d95cc:	b508      	push	{r3, lr}
   d95ce:	4b02      	ldr	r3, [pc, #8]	; (d95d8 <HAL_USART_Flush_Data+0xc>)
   d95d0:	681b      	ldr	r3, [r3, #0]
   d95d2:	69db      	ldr	r3, [r3, #28]
   d95d4:	9301      	str	r3, [sp, #4]
   d95d6:	bd08      	pop	{r3, pc}
   d95d8:	0003023c 	.word	0x0003023c

000d95dc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d95dc:	b508      	push	{r3, lr}
   d95de:	4b02      	ldr	r3, [pc, #8]	; (d95e8 <HAL_USART_Is_Enabled+0xc>)
   d95e0:	681b      	ldr	r3, [r3, #0]
   d95e2:	6a1b      	ldr	r3, [r3, #32]
   d95e4:	9301      	str	r3, [sp, #4]
   d95e6:	bd08      	pop	{r3, pc}
   d95e8:	0003023c 	.word	0x0003023c

000d95ec <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d95ec:	b508      	push	{r3, lr}
   d95ee:	4b02      	ldr	r3, [pc, #8]	; (d95f8 <HAL_USART_Available_Data_For_Write+0xc>)
   d95f0:	681b      	ldr	r3, [r3, #0]
   d95f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d95f4:	9301      	str	r3, [sp, #4]
   d95f6:	bd08      	pop	{r3, pc}
   d95f8:	0003023c 	.word	0x0003023c

000d95fc <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d95fc:	b508      	push	{r3, lr}
   d95fe:	4b02      	ldr	r3, [pc, #8]	; (d9608 <HAL_USART_BeginConfig+0xc>)
   d9600:	681b      	ldr	r3, [r3, #0]
   d9602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9604:	9301      	str	r3, [sp, #4]
   d9606:	bd08      	pop	{r3, pc}
   d9608:	0003023c 	.word	0x0003023c

000d960c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d960c:	b508      	push	{r3, lr}
   d960e:	4b02      	ldr	r3, [pc, #8]	; (d9618 <HAL_I2C_Begin+0xc>)
   d9610:	681b      	ldr	r3, [r3, #0]
   d9612:	68db      	ldr	r3, [r3, #12]
   d9614:	9301      	str	r3, [sp, #4]
   d9616:	bd08      	pop	{r3, pc}
   d9618:	00030228 	.word	0x00030228

000d961c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d961c:	b508      	push	{r3, lr}
   d961e:	4b02      	ldr	r3, [pc, #8]	; (d9628 <HAL_I2C_Begin_Transmission+0xc>)
   d9620:	681b      	ldr	r3, [r3, #0]
   d9622:	699b      	ldr	r3, [r3, #24]
   d9624:	9301      	str	r3, [sp, #4]
   d9626:	bd08      	pop	{r3, pc}
   d9628:	00030228 	.word	0x00030228

000d962c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d962c:	b508      	push	{r3, lr}
   d962e:	4b02      	ldr	r3, [pc, #8]	; (d9638 <HAL_I2C_End_Transmission+0xc>)
   d9630:	681b      	ldr	r3, [r3, #0]
   d9632:	69db      	ldr	r3, [r3, #28]
   d9634:	9301      	str	r3, [sp, #4]
   d9636:	bd08      	pop	{r3, pc}
   d9638:	00030228 	.word	0x00030228

000d963c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d963c:	b508      	push	{r3, lr}
   d963e:	4b02      	ldr	r3, [pc, #8]	; (d9648 <HAL_I2C_Write_Data+0xc>)
   d9640:	681b      	ldr	r3, [r3, #0]
   d9642:	6a1b      	ldr	r3, [r3, #32]
   d9644:	9301      	str	r3, [sp, #4]
   d9646:	bd08      	pop	{r3, pc}
   d9648:	00030228 	.word	0x00030228

000d964c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d964c:	b508      	push	{r3, lr}
   d964e:	4b02      	ldr	r3, [pc, #8]	; (d9658 <HAL_I2C_Available_Data+0xc>)
   d9650:	681b      	ldr	r3, [r3, #0]
   d9652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9654:	9301      	str	r3, [sp, #4]
   d9656:	bd08      	pop	{r3, pc}
   d9658:	00030228 	.word	0x00030228

000d965c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d965c:	b508      	push	{r3, lr}
   d965e:	4b02      	ldr	r3, [pc, #8]	; (d9668 <HAL_I2C_Read_Data+0xc>)
   d9660:	681b      	ldr	r3, [r3, #0]
   d9662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9664:	9301      	str	r3, [sp, #4]
   d9666:	bd08      	pop	{r3, pc}
   d9668:	00030228 	.word	0x00030228

000d966c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d966c:	b508      	push	{r3, lr}
   d966e:	4b02      	ldr	r3, [pc, #8]	; (d9678 <HAL_I2C_Peek_Data+0xc>)
   d9670:	681b      	ldr	r3, [r3, #0]
   d9672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9674:	9301      	str	r3, [sp, #4]
   d9676:	bd08      	pop	{r3, pc}
   d9678:	00030228 	.word	0x00030228

000d967c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d967c:	b508      	push	{r3, lr}
   d967e:	4b02      	ldr	r3, [pc, #8]	; (d9688 <HAL_I2C_Flush_Data+0xc>)
   d9680:	681b      	ldr	r3, [r3, #0]
   d9682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9684:	9301      	str	r3, [sp, #4]
   d9686:	bd08      	pop	{r3, pc}
   d9688:	00030228 	.word	0x00030228

000d968c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d968c:	b508      	push	{r3, lr}
   d968e:	4b02      	ldr	r3, [pc, #8]	; (d9698 <HAL_I2C_Is_Enabled+0xc>)
   d9690:	681b      	ldr	r3, [r3, #0]
   d9692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d9694:	9301      	str	r3, [sp, #4]
   d9696:	bd08      	pop	{r3, pc}
   d9698:	00030228 	.word	0x00030228

000d969c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d969c:	b508      	push	{r3, lr}
   d969e:	4b02      	ldr	r3, [pc, #8]	; (d96a8 <HAL_I2C_Init+0xc>)
   d96a0:	681b      	ldr	r3, [r3, #0]
   d96a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d96a4:	9301      	str	r3, [sp, #4]
   d96a6:	bd08      	pop	{r3, pc}
   d96a8:	00030228 	.word	0x00030228

000d96ac <HAL_I2C_Reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
   d96ac:	b508      	push	{r3, lr}
   d96ae:	4b02      	ldr	r3, [pc, #8]	; (d96b8 <HAL_I2C_Reset+0xc>)
   d96b0:	681b      	ldr	r3, [r3, #0]
   d96b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d96b4:	9301      	str	r3, [sp, #4]
   d96b6:	bd08      	pop	{r3, pc}
   d96b8:	00030228 	.word	0x00030228

000d96bc <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d96bc:	b508      	push	{r3, lr}
   d96be:	4b02      	ldr	r3, [pc, #8]	; (d96c8 <HAL_I2C_Acquire+0xc>)
   d96c0:	681b      	ldr	r3, [r3, #0]
   d96c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d96c4:	9301      	str	r3, [sp, #4]
   d96c6:	bd08      	pop	{r3, pc}
   d96c8:	00030228 	.word	0x00030228

000d96cc <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d96cc:	b508      	push	{r3, lr}
   d96ce:	4b02      	ldr	r3, [pc, #8]	; (d96d8 <HAL_I2C_Release+0xc>)
   d96d0:	681b      	ldr	r3, [r3, #0]
   d96d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d96d4:	9301      	str	r3, [sp, #4]
   d96d6:	bd08      	pop	{r3, pc}
   d96d8:	00030228 	.word	0x00030228

000d96dc <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d96dc:	b508      	push	{r3, lr}
   d96de:	4b02      	ldr	r3, [pc, #8]	; (d96e8 <HAL_I2C_Request_Data_Ex+0xc>)
   d96e0:	681b      	ldr	r3, [r3, #0]
   d96e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d96e4:	9301      	str	r3, [sp, #4]
   d96e6:	bd08      	pop	{r3, pc}
   d96e8:	00030228 	.word	0x00030228

000d96ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d96ec:	b508      	push	{r3, lr}
   d96ee:	4b02      	ldr	r3, [pc, #8]	; (d96f8 <HAL_USB_USART_Init+0xc>)
   d96f0:	681b      	ldr	r3, [r3, #0]
   d96f2:	681b      	ldr	r3, [r3, #0]
   d96f4:	9301      	str	r3, [sp, #4]
   d96f6:	bd08      	pop	{r3, pc}
   d96f8:	0003024c 	.word	0x0003024c

000d96fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d96fc:	b508      	push	{r3, lr}
   d96fe:	4b02      	ldr	r3, [pc, #8]	; (d9708 <HAL_USB_USART_Begin+0xc>)
   d9700:	681b      	ldr	r3, [r3, #0]
   d9702:	685b      	ldr	r3, [r3, #4]
   d9704:	9301      	str	r3, [sp, #4]
   d9706:	bd08      	pop	{r3, pc}
   d9708:	0003024c 	.word	0x0003024c

000d970c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d970c:	b508      	push	{r3, lr}
   d970e:	4b02      	ldr	r3, [pc, #8]	; (d9718 <HAL_USB_USART_Available_Data+0xc>)
   d9710:	681b      	ldr	r3, [r3, #0]
   d9712:	691b      	ldr	r3, [r3, #16]
   d9714:	9301      	str	r3, [sp, #4]
   d9716:	bd08      	pop	{r3, pc}
   d9718:	0003024c 	.word	0x0003024c

000d971c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d971c:	b508      	push	{r3, lr}
   d971e:	4b02      	ldr	r3, [pc, #8]	; (d9728 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d9720:	681b      	ldr	r3, [r3, #0]
   d9722:	695b      	ldr	r3, [r3, #20]
   d9724:	9301      	str	r3, [sp, #4]
   d9726:	bd08      	pop	{r3, pc}
   d9728:	0003024c 	.word	0x0003024c

000d972c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d972c:	b508      	push	{r3, lr}
   d972e:	4b02      	ldr	r3, [pc, #8]	; (d9738 <HAL_USB_USART_Receive_Data+0xc>)
   d9730:	681b      	ldr	r3, [r3, #0]
   d9732:	699b      	ldr	r3, [r3, #24]
   d9734:	9301      	str	r3, [sp, #4]
   d9736:	bd08      	pop	{r3, pc}
   d9738:	0003024c 	.word	0x0003024c

000d973c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d973c:	b508      	push	{r3, lr}
   d973e:	4b02      	ldr	r3, [pc, #8]	; (d9748 <HAL_USB_USART_Send_Data+0xc>)
   d9740:	681b      	ldr	r3, [r3, #0]
   d9742:	69db      	ldr	r3, [r3, #28]
   d9744:	9301      	str	r3, [sp, #4]
   d9746:	bd08      	pop	{r3, pc}
   d9748:	0003024c 	.word	0x0003024c

000d974c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d974c:	b508      	push	{r3, lr}
   d974e:	4b02      	ldr	r3, [pc, #8]	; (d9758 <HAL_USB_USART_Flush_Data+0xc>)
   d9750:	681b      	ldr	r3, [r3, #0]
   d9752:	6a1b      	ldr	r3, [r3, #32]
   d9754:	9301      	str	r3, [sp, #4]
   d9756:	bd08      	pop	{r3, pc}
   d9758:	0003024c 	.word	0x0003024c

000d975c <led_set_status_active>:
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   d975c:	b508      	push	{r3, lr}
   d975e:	4b03      	ldr	r3, [pc, #12]	; (d976c <led_set_status_active+0x10>)
   d9760:	681b      	ldr	r3, [r3, #0]
   d9762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d9766:	9301      	str	r3, [sp, #4]
   d9768:	bd08      	pop	{r3, pc}
   d976a:	0000      	.short	0x0000
   d976c:	00030260 	.word	0x00030260

000d9770 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d9770:	b508      	push	{r3, lr}
   d9772:	4b02      	ldr	r3, [pc, #8]	; (d977c <system_mode+0xc>)
   d9774:	681b      	ldr	r3, [r3, #0]
   d9776:	681b      	ldr	r3, [r3, #0]
   d9778:	9301      	str	r3, [sp, #4]
   d977a:	bd08      	pop	{r3, pc}
   d977c:	00030220 	.word	0x00030220

000d9780 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d9780:	b508      	push	{r3, lr}
   d9782:	4b02      	ldr	r3, [pc, #8]	; (d978c <set_system_mode+0xc>)
   d9784:	681b      	ldr	r3, [r3, #0]
   d9786:	685b      	ldr	r3, [r3, #4]
   d9788:	9301      	str	r3, [sp, #4]
   d978a:	bd08      	pop	{r3, pc}
   d978c:	00030220 	.word	0x00030220

000d9790 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d9790:	b508      	push	{r3, lr}
   d9792:	4b02      	ldr	r3, [pc, #8]	; (d979c <system_delay_ms+0xc>)
   d9794:	681b      	ldr	r3, [r3, #0]
   d9796:	695b      	ldr	r3, [r3, #20]
   d9798:	9301      	str	r3, [sp, #4]
   d979a:	bd08      	pop	{r3, pc}
   d979c:	00030220 	.word	0x00030220

000d97a0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d97a0:	b508      	push	{r3, lr}
   d97a2:	4b02      	ldr	r3, [pc, #8]	; (d97ac <system_thread_set_state+0xc>)
   d97a4:	681b      	ldr	r3, [r3, #0]
   d97a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d97a8:	9301      	str	r3, [sp, #4]
   d97aa:	bd08      	pop	{r3, pc}
   d97ac:	00030220 	.word	0x00030220

000d97b0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d97b0:	b508      	push	{r3, lr}
   d97b2:	4b02      	ldr	r3, [pc, #8]	; (d97bc <application_thread_current+0xc>)
   d97b4:	681b      	ldr	r3, [r3, #0]
   d97b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d97b8:	9301      	str	r3, [sp, #4]
   d97ba:	bd08      	pop	{r3, pc}
   d97bc:	00030220 	.word	0x00030220

000d97c0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d97c0:	b508      	push	{r3, lr}
   d97c2:	4b02      	ldr	r3, [pc, #8]	; (d97cc <application_thread_invoke+0xc>)
   d97c4:	681b      	ldr	r3, [r3, #0]
   d97c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d97c8:	9301      	str	r3, [sp, #4]
   d97ca:	bd08      	pop	{r3, pc}
   d97cc:	00030220 	.word	0x00030220

000d97d0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d97d0:	b508      	push	{r3, lr}
   d97d2:	4b02      	ldr	r3, [pc, #8]	; (d97dc <system_thread_get_state+0xc>)
   d97d4:	681b      	ldr	r3, [r3, #0]
   d97d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d97d8:	9301      	str	r3, [sp, #4]
   d97da:	bd08      	pop	{r3, pc}
   d97dc:	00030220 	.word	0x00030220

000d97e0 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   d97e0:	b508      	push	{r3, lr}
   d97e2:	4b02      	ldr	r3, [pc, #8]	; (d97ec <led_pattern_period+0xc>)
   d97e4:	681b      	ldr	r3, [r3, #0]
   d97e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d97e8:	9301      	str	r3, [sp, #4]
   d97ea:	bd08      	pop	{r3, pc}
   d97ec:	00030220 	.word	0x00030220

000d97f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d97f0:	b508      	push	{r3, lr}
   d97f2:	4b03      	ldr	r3, [pc, #12]	; (d9800 <system_ctrl_set_app_request_handler+0x10>)
   d97f4:	681b      	ldr	r3, [r3, #0]
   d97f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d97fa:	9301      	str	r3, [sp, #4]
   d97fc:	bd08      	pop	{r3, pc}
   d97fe:	0000      	.short	0x0000
   d9800:	00030220 	.word	0x00030220

000d9804 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d9804:	b508      	push	{r3, lr}
   d9806:	4b03      	ldr	r3, [pc, #12]	; (d9814 <system_ctrl_set_result+0x10>)
   d9808:	681b      	ldr	r3, [r3, #0]
   d980a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d980e:	9301      	str	r3, [sp, #4]
   d9810:	bd08      	pop	{r3, pc}
   d9812:	0000      	.short	0x0000
   d9814:	00030220 	.word	0x00030220

000d9818 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d9818:	b508      	push	{r3, lr}
   d981a:	4b02      	ldr	r3, [pc, #8]	; (d9824 <network_connect+0xc>)
   d981c:	681b      	ldr	r3, [r3, #0]
   d981e:	685b      	ldr	r3, [r3, #4]
   d9820:	9301      	str	r3, [sp, #4]
   d9822:	bd08      	pop	{r3, pc}
   d9824:	00030240 	.word	0x00030240

000d9828 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d9828:	b508      	push	{r3, lr}
   d982a:	4b02      	ldr	r3, [pc, #8]	; (d9834 <network_connecting+0xc>)
   d982c:	681b      	ldr	r3, [r3, #0]
   d982e:	689b      	ldr	r3, [r3, #8]
   d9830:	9301      	str	r3, [sp, #4]
   d9832:	bd08      	pop	{r3, pc}
   d9834:	00030240 	.word	0x00030240

000d9838 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d9838:	b508      	push	{r3, lr}
   d983a:	4b02      	ldr	r3, [pc, #8]	; (d9844 <network_disconnect+0xc>)
   d983c:	681b      	ldr	r3, [r3, #0]
   d983e:	68db      	ldr	r3, [r3, #12]
   d9840:	9301      	str	r3, [sp, #4]
   d9842:	bd08      	pop	{r3, pc}
   d9844:	00030240 	.word	0x00030240

000d9848 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d9848:	b508      	push	{r3, lr}
   d984a:	4b02      	ldr	r3, [pc, #8]	; (d9854 <network_ready+0xc>)
   d984c:	681b      	ldr	r3, [r3, #0]
   d984e:	691b      	ldr	r3, [r3, #16]
   d9850:	9301      	str	r3, [sp, #4]
   d9852:	bd08      	pop	{r3, pc}
   d9854:	00030240 	.word	0x00030240

000d9858 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d9858:	b508      	push	{r3, lr}
   d985a:	4b02      	ldr	r3, [pc, #8]	; (d9864 <network_on+0xc>)
   d985c:	681b      	ldr	r3, [r3, #0]
   d985e:	695b      	ldr	r3, [r3, #20]
   d9860:	9301      	str	r3, [sp, #4]
   d9862:	bd08      	pop	{r3, pc}
   d9864:	00030240 	.word	0x00030240

000d9868 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d9868:	b508      	push	{r3, lr}
   d986a:	4b02      	ldr	r3, [pc, #8]	; (d9874 <network_off+0xc>)
   d986c:	681b      	ldr	r3, [r3, #0]
   d986e:	699b      	ldr	r3, [r3, #24]
   d9870:	9301      	str	r3, [sp, #4]
   d9872:	bd08      	pop	{r3, pc}
   d9874:	00030240 	.word	0x00030240

000d9878 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d9878:	b508      	push	{r3, lr}
   d987a:	4b02      	ldr	r3, [pc, #8]	; (d9884 <network_listen+0xc>)
   d987c:	681b      	ldr	r3, [r3, #0]
   d987e:	69db      	ldr	r3, [r3, #28]
   d9880:	9301      	str	r3, [sp, #4]
   d9882:	bd08      	pop	{r3, pc}
   d9884:	00030240 	.word	0x00030240

000d9888 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d9888:	b508      	push	{r3, lr}
   d988a:	4b02      	ldr	r3, [pc, #8]	; (d9894 <network_listening+0xc>)
   d988c:	681b      	ldr	r3, [r3, #0]
   d988e:	6a1b      	ldr	r3, [r3, #32]
   d9890:	9301      	str	r3, [sp, #4]
   d9892:	bd08      	pop	{r3, pc}
   d9894:	00030240 	.word	0x00030240

000d9898 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   d9898:	b508      	push	{r3, lr}
   d989a:	4b02      	ldr	r3, [pc, #8]	; (d98a4 <network_has_credentials+0xc>)
   d989c:	681b      	ldr	r3, [r3, #0]
   d989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d98a0:	9301      	str	r3, [sp, #4]
   d98a2:	bd08      	pop	{r3, pc}
   d98a4:	00030240 	.word	0x00030240

000d98a8 <network_set_listen_timeout>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d98a8:	b508      	push	{r3, lr}
   d98aa:	4b02      	ldr	r3, [pc, #8]	; (d98b4 <network_set_listen_timeout+0xc>)
   d98ac:	681b      	ldr	r3, [r3, #0]
   d98ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d98b0:	9301      	str	r3, [sp, #4]
   d98b2:	bd08      	pop	{r3, pc}
   d98b4:	00030240 	.word	0x00030240

000d98b8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d98b8:	b508      	push	{r3, lr}
   d98ba:	4b02      	ldr	r3, [pc, #8]	; (d98c4 <network_get_listen_timeout+0xc>)
   d98bc:	681b      	ldr	r3, [r3, #0]
   d98be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d98c0:	9301      	str	r3, [sp, #4]
   d98c2:	bd08      	pop	{r3, pc}
   d98c4:	00030240 	.word	0x00030240

000d98c8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d98c8:	b508      	push	{r3, lr}
   d98ca:	4b02      	ldr	r3, [pc, #8]	; (d98d4 <spark_variable+0xc>)
   d98cc:	681b      	ldr	r3, [r3, #0]
   d98ce:	681b      	ldr	r3, [r3, #0]
   d98d0:	9301      	str	r3, [sp, #4]
   d98d2:	bd08      	pop	{r3, pc}
   d98d4:	00030244 	.word	0x00030244

000d98d8 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d98d8:	b508      	push	{r3, lr}
   d98da:	4b02      	ldr	r3, [pc, #8]	; (d98e4 <spark_process+0xc>)
   d98dc:	681b      	ldr	r3, [r3, #0]
   d98de:	689b      	ldr	r3, [r3, #8]
   d98e0:	9301      	str	r3, [sp, #4]
   d98e2:	bd08      	pop	{r3, pc}
   d98e4:	00030244 	.word	0x00030244

000d98e8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d98e8:	b508      	push	{r3, lr}
   d98ea:	4b02      	ldr	r3, [pc, #8]	; (d98f4 <spark_cloud_flag_connect+0xc>)
   d98ec:	681b      	ldr	r3, [r3, #0]
   d98ee:	68db      	ldr	r3, [r3, #12]
   d98f0:	9301      	str	r3, [sp, #4]
   d98f2:	bd08      	pop	{r3, pc}
   d98f4:	00030244 	.word	0x00030244

000d98f8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d98f8:	b508      	push	{r3, lr}
   d98fa:	4b02      	ldr	r3, [pc, #8]	; (d9904 <spark_cloud_flag_connected+0xc>)
   d98fc:	681b      	ldr	r3, [r3, #0]
   d98fe:	695b      	ldr	r3, [r3, #20]
   d9900:	9301      	str	r3, [sp, #4]
   d9902:	bd08      	pop	{r3, pc}
   d9904:	00030244 	.word	0x00030244

000d9908 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d9908:	b508      	push	{r3, lr}
   d990a:	4b02      	ldr	r3, [pc, #8]	; (d9914 <spark_send_event+0xc>)
   d990c:	681b      	ldr	r3, [r3, #0]
   d990e:	6a1b      	ldr	r3, [r3, #32]
   d9910:	9301      	str	r3, [sp, #4]
   d9912:	bd08      	pop	{r3, pc}
   d9914:	00030244 	.word	0x00030244

000d9918 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d9918:	b508      	push	{r3, lr}
   d991a:	4b02      	ldr	r3, [pc, #8]	; (d9924 <spark_sync_time_pending+0xc>)
   d991c:	681b      	ldr	r3, [r3, #0]
   d991e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9920:	9301      	str	r3, [sp, #4]
   d9922:	bd08      	pop	{r3, pc}
   d9924:	00030244 	.word	0x00030244

000d9928 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d9928:	b508      	push	{r3, lr}
   d992a:	4b02      	ldr	r3, [pc, #8]	; (d9934 <spark_set_random_seed_from_cloud_handler+0xc>)
   d992c:	681b      	ldr	r3, [r3, #0]
   d992e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d9930:	9301      	str	r3, [sp, #4]
   d9932:	bd08      	pop	{r3, pc}
   d9934:	00030244 	.word	0x00030244

000d9938 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d9938:	b508      	push	{r3, lr}
   d993a:	4b02      	ldr	r3, [pc, #8]	; (d9944 <malloc+0xc>)
   d993c:	681b      	ldr	r3, [r3, #0]
   d993e:	681b      	ldr	r3, [r3, #0]
   d9940:	9301      	str	r3, [sp, #4]
   d9942:	bd08      	pop	{r3, pc}
   d9944:	0003021c 	.word	0x0003021c

000d9948 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d9948:	b508      	push	{r3, lr}
   d994a:	4b02      	ldr	r3, [pc, #8]	; (d9954 <free+0xc>)
   d994c:	681b      	ldr	r3, [r3, #0]
   d994e:	685b      	ldr	r3, [r3, #4]
   d9950:	9301      	str	r3, [sp, #4]
   d9952:	bd08      	pop	{r3, pc}
   d9954:	0003021c 	.word	0x0003021c

000d9958 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d9958:	b508      	push	{r3, lr}
   d995a:	4b02      	ldr	r3, [pc, #8]	; (d9964 <realloc+0xc>)
   d995c:	681b      	ldr	r3, [r3, #0]
   d995e:	689b      	ldr	r3, [r3, #8]
   d9960:	9301      	str	r3, [sp, #4]
   d9962:	bd08      	pop	{r3, pc}
   d9964:	0003021c 	.word	0x0003021c

000d9968 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d9968:	b508      	push	{r3, lr}
   d996a:	4b02      	ldr	r3, [pc, #8]	; (d9974 <siprintf+0xc>)
   d996c:	681b      	ldr	r3, [r3, #0]
   d996e:	691b      	ldr	r3, [r3, #16]
   d9970:	9301      	str	r3, [sp, #4]
   d9972:	bd08      	pop	{r3, pc}
   d9974:	0003021c 	.word	0x0003021c

000d9978 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d9978:	b508      	push	{r3, lr}
   d997a:	4b02      	ldr	r3, [pc, #8]	; (d9984 <siscanf+0xc>)
   d997c:	681b      	ldr	r3, [r3, #0]
   d997e:	699b      	ldr	r3, [r3, #24]
   d9980:	9301      	str	r3, [sp, #4]
   d9982:	bd08      	pop	{r3, pc}
   d9984:	0003021c 	.word	0x0003021c

000d9988 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d9988:	b508      	push	{r3, lr}
   d998a:	4b02      	ldr	r3, [pc, #8]	; (d9994 <snprintf+0xc>)
   d998c:	681b      	ldr	r3, [r3, #0]
   d998e:	69db      	ldr	r3, [r3, #28]
   d9990:	9301      	str	r3, [sp, #4]
   d9992:	bd08      	pop	{r3, pc}
   d9994:	0003021c 	.word	0x0003021c

000d9998 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d9998:	b508      	push	{r3, lr}
   d999a:	4b02      	ldr	r3, [pc, #8]	; (d99a4 <sniprintf+0xc>)
   d999c:	681b      	ldr	r3, [r3, #0]
   d999e:	6a1b      	ldr	r3, [r3, #32]
   d99a0:	9301      	str	r3, [sp, #4]
   d99a2:	bd08      	pop	{r3, pc}
   d99a4:	0003021c 	.word	0x0003021c

000d99a8 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d99a8:	b508      	push	{r3, lr}
   d99aa:	4b02      	ldr	r3, [pc, #8]	; (d99b4 <vsnprintf+0xc>)
   d99ac:	681b      	ldr	r3, [r3, #0]
   d99ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d99b0:	9301      	str	r3, [sp, #4]
   d99b2:	bd08      	pop	{r3, pc}
   d99b4:	0003021c 	.word	0x0003021c

000d99b8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d99b8:	b508      	push	{r3, lr}
   d99ba:	4b02      	ldr	r3, [pc, #8]	; (d99c4 <abort+0xc>)
   d99bc:	681b      	ldr	r3, [r3, #0]
   d99be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d99c0:	9301      	str	r3, [sp, #4]
   d99c2:	bd08      	pop	{r3, pc}
   d99c4:	0003021c 	.word	0x0003021c

000d99c8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d99c8:	b508      	push	{r3, lr}
   d99ca:	4b02      	ldr	r3, [pc, #8]	; (d99d4 <_malloc_r+0xc>)
   d99cc:	681b      	ldr	r3, [r3, #0]
   d99ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d99d0:	9301      	str	r3, [sp, #4]
   d99d2:	bd08      	pop	{r3, pc}
   d99d4:	0003021c 	.word	0x0003021c

000d99d8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d99d8:	2200      	movs	r2, #0
   d99da:	4611      	mov	r1, r2
   d99dc:	6840      	ldr	r0, [r0, #4]
   d99de:	f7ff bf53 	b.w	d9888 <network_listening>

000d99e2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d99e2:	2200      	movs	r2, #0
   d99e4:	4611      	mov	r1, r2
   d99e6:	6840      	ldr	r0, [r0, #4]
   d99e8:	f7ff bf66 	b.w	d98b8 <network_get_listen_timeout>

000d99ec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d99ec:	2200      	movs	r2, #0
   d99ee:	6840      	ldr	r0, [r0, #4]
   d99f0:	f7ff bf5a 	b.w	d98a8 <network_set_listen_timeout>

000d99f4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d99f4:	2200      	movs	r2, #0
   d99f6:	f081 0101 	eor.w	r1, r1, #1
   d99fa:	6840      	ldr	r0, [r0, #4]
   d99fc:	f7ff bf3c 	b.w	d9878 <network_listen>

000d9a00 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d9a00:	2300      	movs	r3, #0
   d9a02:	461a      	mov	r2, r3
   d9a04:	4619      	mov	r1, r3
   d9a06:	6840      	ldr	r0, [r0, #4]
   d9a08:	f7ff bf2e 	b.w	d9868 <network_off>

000d9a0c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d9a0c:	2300      	movs	r3, #0
   d9a0e:	461a      	mov	r2, r3
   d9a10:	4619      	mov	r1, r3
   d9a12:	6840      	ldr	r0, [r0, #4]
   d9a14:	f7ff bf20 	b.w	d9858 <network_on>

000d9a18 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9a18:	2200      	movs	r2, #0
   d9a1a:	4611      	mov	r1, r2
   d9a1c:	6840      	ldr	r0, [r0, #4]
   d9a1e:	f7ff bf13 	b.w	d9848 <network_ready>

000d9a22 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9a22:	2200      	movs	r2, #0
   d9a24:	4611      	mov	r1, r2
   d9a26:	6840      	ldr	r0, [r0, #4]
   d9a28:	f7ff befe 	b.w	d9828 <network_connecting>

000d9a2c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9a2c:	2200      	movs	r2, #0
   d9a2e:	2102      	movs	r1, #2
   d9a30:	6840      	ldr	r0, [r0, #4]
   d9a32:	f7ff bf01 	b.w	d9838 <network_disconnect>

000d9a36 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9a36:	2300      	movs	r3, #0
   d9a38:	461a      	mov	r2, r3
   d9a3a:	6840      	ldr	r0, [r0, #4]
   d9a3c:	f7ff beec 	b.w	d9818 <network_connect>

000d9a40 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d9a40:	4b02      	ldr	r3, [pc, #8]	; (d9a4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9a42:	2203      	movs	r2, #3
   d9a44:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9a46:	4a02      	ldr	r2, [pc, #8]	; (d9a50 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9a48:	601a      	str	r2, [r3, #0]
   d9a4a:	4770      	bx	lr
   d9a4c:	2003e1f0 	.word	0x2003e1f0
   d9a50:	000e0608 	.word	0x000e0608

000d9a54 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d9a54:	680a      	ldr	r2, [r1, #0]
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   d9a56:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   d9a58:	6892      	ldr	r2, [r2, #8]
   d9a5a:	4601      	mov	r1, r0
   d9a5c:	4618      	mov	r0, r3
   d9a5e:	4710      	bx	r2

000d9a60 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
 */

#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   d9a60:	b570      	push	{r4, r5, r6, lr}
   d9a62:	4c0e      	ldr	r4, [pc, #56]	; (d9a9c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   d9a64:	6004      	str	r4, [r0, #0]
    d_.size = sizeof(LEDStatusData);
   d9a66:	241c      	movs	r4, #28
   d9a68:	6044      	str	r4, [r0, #4]
    d_.next = nullptr;
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d9a6a:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d9a6e:	f89d 6010 	ldrb.w	r6, [sp, #16]
   d9a72:	f004 0403 	and.w	r4, r4, #3
   d9a76:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d9a7a:	2500      	movs	r5, #0
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   d9a7c:	b2e4      	uxtb	r4, r4
   d9a7e:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   d9a80:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   d9a82:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   d9a84:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d9a86:	7c42      	ldrb	r2, [r0, #17]
#include "spark_wiring_led.h"

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
   d9a88:	6085      	str	r5, [r0, #8]
    d_.prev = nullptr;
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   d9a8a:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   d9a8c:	bf08      	it	eq
   d9a8e:	4b04      	ldreq	r3, [pc, #16]	; (d9aa0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)

// particle::LEDStatus
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
    d_.size = sizeof(LEDStatusData);
    d_.next = nullptr;
    d_.prev = nullptr;
   d9a90:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
    d_.pattern = pattern;
    d_.flags = 0;
    d_.color = color;
    if (d_.pattern == LED_PATTERN_CUSTOM) {
        d_.callback = updateCallback; // User callback
   d9a92:	bf06      	itte	eq
   d9a94:	6183      	streq	r3, [r0, #24]
        d_.data = this; // Callback data
   d9a96:	61c0      	streq	r0, [r0, #28]
    } else {
        d_.period = period;
   d9a98:	8303      	strhne	r3, [r0, #24]
    }
}
   d9a9a:	bd70      	pop	{r4, r5, r6, pc}
   d9a9c:	000e008c 	.word	0x000e008c
   d9aa0:	000d9a55 	.word	0x000d9a55

000d9aa4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d9aa4:	2100      	movs	r1, #0
   d9aa6:	f7ff bcb9 	b.w	d941c <HAL_SPI_Acquire>

000d9aaa <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d9aaa:	2100      	movs	r1, #0
   d9aac:	f7ff bcbe 	b.w	d942c <HAL_SPI_Release>

000d9ab0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d9ab0:	b510      	push	{r4, lr}
   d9ab2:	4604      	mov	r4, r0
{
    _spi = spi;
   d9ab4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d9ab6:	4608      	mov	r0, r1
   d9ab8:	f7ff fc80 	bl	d93bc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9abc:	2300      	movs	r3, #0
   d9abe:	6063      	str	r3, [r4, #4]
}
   d9ac0:	4620      	mov	r0, r4
   d9ac2:	bd10      	pop	{r4, pc}

000d9ac4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d9ac4:	b510      	push	{r4, lr}
   d9ac6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d9ac8:	7800      	ldrb	r0, [r0, #0]
   d9aca:	f7ff ffeb 	bl	d9aa4 <_ZN8SPIClass4lockEv.isra.0>
   d9ace:	b948      	cbnz	r0, d9ae4 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d9ad0:	7820      	ldrb	r0, [r4, #0]
   d9ad2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d9ad6:	f7ff fc61 	bl	d939c <HAL_SPI_Begin>
        unlock();
   d9ada:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d9ae0:	f7ff bfe3 	b.w	d9aaa <_ZN8SPIClass6unlockEv.isra.1>
   d9ae4:	bd10      	pop	{r4, pc}

000d9ae6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9ae6:	7800      	ldrb	r0, [r0, #0]
   d9ae8:	f7ff bfdf 	b.w	d9aaa <_ZN8SPIClass6unlockEv.isra.1>

000d9aec <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9aec:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d9aee:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9af0:	6018      	str	r0, [r3, #0]
   d9af2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9af4:	6818      	ldr	r0, [r3, #0]
   d9af6:	4288      	cmp	r0, r1
   d9af8:	b2e5      	uxtb	r5, r4
   d9afa:	d906      	bls.n	d9b0a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d9afc:	3401      	adds	r4, #1
   d9afe:	2c08      	cmp	r4, #8
   d9b00:	d002      	beq.n	d9b08 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d9b02:	0840      	lsrs	r0, r0, #1
   d9b04:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d9b06:	e7f5      	b.n	d9af4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9b08:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d9b0a:	4b02      	ldr	r3, [pc, #8]	; (d9b14 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d9b0c:	5d5b      	ldrb	r3, [r3, r5]
   d9b0e:	7013      	strb	r3, [r2, #0]
   d9b10:	bd30      	pop	{r4, r5, pc}
   d9b12:	bf00      	nop
   d9b14:	000e0634 	.word	0x000e0634

000d9b18 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d9b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9b1c:	4607      	mov	r7, r0
   d9b1e:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d9b20:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d9b22:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d9b24:	f7ff ffbe 	bl	d9aa4 <_ZN8SPIClass4lockEv.isra.0>
   d9b28:	2800      	cmp	r0, #0
   d9b2a:	db62      	blt.n	d9bf2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d9b2c:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d9b2e:	2214      	movs	r2, #20
   d9b30:	2100      	movs	r1, #0
   d9b32:	a809      	add	r0, sp, #36	; 0x24
   d9b34:	f004 fe38 	bl	de7a8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9b38:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d9b3a:	4620      	mov	r0, r4
   d9b3c:	2200      	movs	r2, #0
   d9b3e:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d9b40:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d9b44:	f7ff fc4a 	bl	d93dc <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d9b48:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d9b4c:	b154      	cbz	r4, d9b64 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d9b4e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d9b52:	b935      	cbnz	r5, d9b62 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d9b54:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9b58:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9b5c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d9b60:	e003      	b.n	d9b6a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d9b62:	2400      	movs	r4, #0
   d9b64:	46a1      	mov	r9, r4
   d9b66:	46a0      	mov	r8, r4
   d9b68:	2501      	movs	r5, #1
   d9b6a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d9b6c:	b105      	cbz	r5, d9b70 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d9b6e:	b9bb      	cbnz	r3, d9ba0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d9b70:	429d      	cmp	r5, r3
   d9b72:	d10b      	bne.n	d9b8c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d9b74:	68b2      	ldr	r2, [r6, #8]
   d9b76:	4542      	cmp	r2, r8
   d9b78:	d108      	bne.n	d9b8c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9b7a:	f88d 9020 	strb.w	r9, [sp, #32]
   d9b7e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d9b82:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d9b86:	89b2      	ldrh	r2, [r6, #12]
   d9b88:	4291      	cmp	r1, r2
   d9b8a:	d009      	beq.n	d9ba0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d9b8c:	b153      	cbz	r3, d9ba4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9b8e:	2400      	movs	r4, #0
   d9b90:	7838      	ldrb	r0, [r7, #0]
   d9b92:	9401      	str	r4, [sp, #4]
   d9b94:	9400      	str	r4, [sp, #0]
   d9b96:	4623      	mov	r3, r4
   d9b98:	4622      	mov	r2, r4
   d9b9a:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d9b9c:	f7ff fc36 	bl	d940c <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d9ba0:	2000      	movs	r0, #0
   d9ba2:	e026      	b.n	d9bf2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d9ba4:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d9ba8:	68b1      	ldr	r1, [r6, #8]
   d9baa:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9bac:	ab04      	add	r3, sp, #16
   d9bae:	f10d 020f 	add.w	r2, sp, #15
   d9bb2:	f7ff ff9b 	bl	d9aec <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d9bb6:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d9bb8:	b105      	cbz	r5, d9bbc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d9bba:	b9b1      	cbnz	r1, d9bea <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d9bbc:	42a9      	cmp	r1, r5
   d9bbe:	d008      	beq.n	d9bd2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d9bc0:	2400      	movs	r4, #0
   d9bc2:	7838      	ldrb	r0, [r7, #0]
   d9bc4:	9401      	str	r4, [sp, #4]
   d9bc6:	7b74      	ldrb	r4, [r6, #13]
   d9bc8:	7b33      	ldrb	r3, [r6, #12]
   d9bca:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9bce:	9400      	str	r4, [sp, #0]
   d9bd0:	e7e4      	b.n	d9b9c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d9bd2:	68b3      	ldr	r3, [r6, #8]
   d9bd4:	4543      	cmp	r3, r8
   d9bd6:	d3f3      	bcc.n	d9bc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9bd8:	f88d 9020 	strb.w	r9, [sp, #32]
   d9bdc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d9be0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9be4:	89b3      	ldrh	r3, [r6, #12]
   d9be6:	429a      	cmp	r2, r3
   d9be8:	d1ea      	bne.n	d9bc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9bea:	9b04      	ldr	r3, [sp, #16]
   d9bec:	4543      	cmp	r3, r8
   d9bee:	d1e7      	bne.n	d9bc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d9bf0:	e7d6      	b.n	d9ba0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d9bf2:	b00f      	add	sp, #60	; 0x3c
   d9bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9bf8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9bf8:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d9bfa:	7800      	ldrb	r0, [r0, #0]
   d9bfc:	f7ff fbd6 	bl	d93ac <HAL_SPI_Send_Receive_Data>
}
   d9c00:	b2c0      	uxtb	r0, r0
   d9c02:	bd08      	pop	{r3, pc}

000d9c04 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d9c04:	b530      	push	{r4, r5, lr}
   d9c06:	b087      	sub	sp, #28
   d9c08:	4604      	mov	r4, r0
   d9c0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9c0c:	7800      	ldrb	r0, [r0, #0]
   d9c0e:	9500      	str	r5, [sp, #0]
   d9c10:	f7ff fbec 	bl	d93ec <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d9c14:	b93d      	cbnz	r5, d9c26 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d9c16:	a902      	add	r1, sp, #8
   d9c18:	7820      	ldrb	r0, [r4, #0]
   d9c1a:	f7ff fbef 	bl	d93fc <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d9c1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d9c22:	07db      	lsls	r3, r3, #31
   d9c24:	d4f7      	bmi.n	d9c16 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d9c26:	b007      	add	sp, #28
   d9c28:	bd30      	pop	{r4, r5, pc}

000d9c2a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d9c2a:	7800      	ldrb	r0, [r0, #0]
   d9c2c:	f7ff bbce 	b.w	d93cc <HAL_SPI_Is_Enabled>

000d9c30 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d9c30:	b510      	push	{r4, lr}
   d9c32:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d9c34:	6800      	ldr	r0, [r0, #0]
   d9c36:	b118      	cbz	r0, d9c40 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d9c38:	f7ff fe86 	bl	d9948 <free>
            wakeupSource_ = nullptr;
   d9c3c:	2300      	movs	r3, #0
   d9c3e:	6023      	str	r3, [r4, #0]
   d9c40:	bd10      	pop	{r4, pc}

000d9c42 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d9c42:	b510      	push	{r4, lr}
   d9c44:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d9c46:	f7ff fff3 	bl	d9c30 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d9c4a:	4620      	mov	r0, r4
   d9c4c:	bd10      	pop	{r4, pc}

000d9c4e <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d9c4e:	4601      	mov	r1, r0
   d9c50:	2200      	movs	r2, #0
   d9c52:	208c      	movs	r0, #140	; 0x8c
   d9c54:	f7ff bc22 	b.w	d949c <HAL_Core_System_Reset_Ex>

000d9c58 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d9c58:	2000      	movs	r0, #0
   d9c5a:	f7ff bff8 	b.w	d9c4e <_ZN11SystemClass5resetEm>
	...

000d9c60 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9c60:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9c62:	4c09      	ldr	r4, [pc, #36]	; (d9c88 <_GLOBAL__sub_I_System+0x28>)
   d9c64:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d9c66:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9c6a:	6020      	str	r0, [r4, #0]
   d9c6c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d9c6e:	71a0      	strb	r0, [r4, #6]
   d9c70:	8120      	strh	r0, [r4, #8]
   d9c72:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9c74:	f7ff fd84 	bl	d9780 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9c78:	4620      	mov	r0, r4
   d9c7a:	4a04      	ldr	r2, [pc, #16]	; (d9c8c <_GLOBAL__sub_I_System+0x2c>)
   d9c7c:	4904      	ldr	r1, [pc, #16]	; (d9c90 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9c82:	f001 bdfd 	b.w	db880 <__aeabi_atexit>
   d9c86:	bf00      	nop
   d9c88:	2003e1f8 	.word	0x2003e1f8
   d9c8c:	2003be9c 	.word	0x2003be9c
   d9c90:	000d9c43 	.word	0x000d9c43

000d9c94 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d9c94:	b510      	push	{r4, lr}
   d9c96:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9c98:	f005 fd54 	bl	df744 <strlen>
   d9c9c:	3801      	subs	r0, #1
   d9c9e:	1823      	adds	r3, r4, r0
   d9ca0:	4620      	mov	r0, r4
	while(i<j){
   d9ca2:	4298      	cmp	r0, r3
   d9ca4:	d206      	bcs.n	d9cb4 <_Z11str_reversePc+0x20>
		c = *i;
   d9ca6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d9ca8:	7819      	ldrb	r1, [r3, #0]
   d9caa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d9cae:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d9cb2:	e7f6      	b.n	d9ca2 <_Z11str_reversePc+0xe>
   d9cb4:	bd10      	pop	{r4, pc}

000d9cb6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9cb6:	b570      	push	{r4, r5, r6, lr}
   d9cb8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d9cba:	1e91      	subs	r1, r2, #2
   d9cbc:	2922      	cmp	r1, #34	; 0x22
   d9cbe:	d820      	bhi.n	d9d02 <ultoa+0x4c>
   d9cc0:	4625      	mov	r5, r4
   d9cc2:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d9cc4:	b910      	cbnz	r0, d9ccc <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9cc6:	4423      	add	r3, r4
            *ptr++ = '0';
   d9cc8:	2230      	movs	r2, #48	; 0x30
   d9cca:	e00e      	b.n	d9cea <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d9ccc:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d9cd0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d9cd4:	b2c1      	uxtb	r1, r0
   d9cd6:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d9cda:	2809      	cmp	r0, #9
                *ptr += '0';
   d9cdc:	bf94      	ite	ls
   d9cde:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d9ce0:	3157      	addhi	r1, #87	; 0x57
   d9ce2:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d9ce6:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d9ce8:	e7eb      	b.n	d9cc2 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9cea:	4299      	cmp	r1, r3
   d9cec:	d202      	bcs.n	d9cf4 <ultoa+0x3e>
            *ptr++ = '0';
   d9cee:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d9cf2:	e7fa      	b.n	d9cea <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d9cf4:	2300      	movs	r3, #0
	str_reverse(buffer);
   d9cf6:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d9cf8:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d9cfa:	f7ff ffcb 	bl	d9c94 <_Z11str_reversePc>
	return buffer;
   d9cfe:	4620      	mov	r0, r4
   d9d00:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d9d02:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d9d04:	bd70      	pop	{r4, r5, r6, pc}

000d9d06 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9d06:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d9d08:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9d0a:	460c      	mov	r4, r1
   d9d0c:	4615      	mov	r5, r2
	if(a<0){
   d9d0e:	da0b      	bge.n	d9d28 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d9d14:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9d18:	bf14      	ite	ne
   d9d1a:	4258      	negne	r0, r3
   d9d1c:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d9d1e:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d9d20:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d9d22:	462a      	mov	r2, r5
   d9d24:	4419      	add	r1, r3
   d9d26:	e000      	b.n	d9d2a <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d9d28:	2301      	movs	r3, #1
   d9d2a:	f7ff ffc4 	bl	d9cb6 <ultoa>
	}
	return buffer;
}
   d9d2e:	4620      	mov	r0, r4
   d9d30:	bd38      	pop	{r3, r4, r5, pc}

000d9d32 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d9d32:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d9d34:	2301      	movs	r3, #1
   d9d36:	f7ff ffbe 	bl	d9cb6 <ultoa>
}
   d9d3a:	bd08      	pop	{r3, pc}

000d9d3c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d9d3c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9d40:	ec59 8b10 	vmov	r8, r9, d0
   d9d44:	4607      	mov	r7, r0
   d9d46:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d9d48:	2200      	movs	r2, #0
   d9d4a:	2300      	movs	r3, #0
   d9d4c:	ee10 0a10 	vmov	r0, s0
   d9d50:	4649      	mov	r1, r9
   d9d52:	f004 f93f 	bl	ddfd4 <__aeabi_dcmplt>
   d9d56:	b128      	cbz	r0, d9d64 <_Z4dtoadhPc+0x28>
        val = -val;
   d9d58:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d9d5c:	4699      	mov	r9, r3
        *sout++ = '-';
   d9d5e:	232d      	movs	r3, #45	; 0x2d
   d9d60:	7033      	strb	r3, [r6, #0]
   d9d62:	3601      	adds	r6, #1
   d9d64:	2300      	movs	r3, #0
    }
    long scale = 1;
   d9d66:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d9d68:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d9d6a:	b2d9      	uxtb	r1, r3
   d9d6c:	428f      	cmp	r7, r1
   d9d6e:	d902      	bls.n	d9d76 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d9d70:	4354      	muls	r4, r2
   d9d72:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d9d74:	e7f9      	b.n	d9d6a <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d9d76:	4620      	mov	r0, r4
   d9d78:	f003 fe54 	bl	dda24 <__aeabi_i2d>
   d9d7c:	4642      	mov	r2, r8
   d9d7e:	464b      	mov	r3, r9
   d9d80:	f003 feb6 	bl	ddaf0 <__aeabi_dmul>
   d9d84:	4682      	mov	sl, r0
   d9d86:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d9d88:	f004 fa12 	bl	de1b0 <__aeabi_d2ulz>
   d9d8c:	4680      	mov	r8, r0
   d9d8e:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d9d90:	f003 fe78 	bl	dda84 <__aeabi_ul2d>
   d9d94:	4602      	mov	r2, r0
   d9d96:	460b      	mov	r3, r1
   d9d98:	4650      	mov	r0, sl
   d9d9a:	4659      	mov	r1, fp
   d9d9c:	f003 fcf4 	bl	dd788 <__aeabi_dsub>
   d9da0:	2200      	movs	r2, #0
   d9da2:	4b17      	ldr	r3, [pc, #92]	; (d9e00 <_Z4dtoadhPc+0xc4>)
   d9da4:	f004 f92a 	bl	ddffc <__aeabi_dcmpge>
   d9da8:	b118      	cbz	r0, d9db2 <_Z4dtoadhPc+0x76>
        fixed++;
   d9daa:	f118 0801 	adds.w	r8, r8, #1
   d9dae:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d9db2:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d9db4:	4622      	mov	r2, r4
   d9db6:	462b      	mov	r3, r5
   d9db8:	4640      	mov	r0, r8
   d9dba:	4649      	mov	r1, r9
   d9dbc:	f004 f9e0 	bl	de180 <__aeabi_uldivmod>
   d9dc0:	2301      	movs	r3, #1
   d9dc2:	220a      	movs	r2, #10
   d9dc4:	4631      	mov	r1, r6
   d9dc6:	f7ff ff76 	bl	d9cb6 <ultoa>
    if (prec) {
   d9dca:	b1af      	cbz	r7, d9df8 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d9dcc:	4630      	mov	r0, r6
   d9dce:	f005 fcb9 	bl	df744 <strlen>
        *sout++ = '.';
   d9dd2:	232e      	movs	r3, #46	; 0x2e
   d9dd4:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d9dd6:	3001      	adds	r0, #1
   d9dd8:	4406      	add	r6, r0
   d9dda:	4622      	mov	r2, r4
   d9ddc:	462b      	mov	r3, r5
   d9dde:	4640      	mov	r0, r8
   d9de0:	4649      	mov	r1, r9
   d9de2:	f004 f9cd 	bl	de180 <__aeabi_uldivmod>
   d9de6:	463b      	mov	r3, r7
   d9de8:	4610      	mov	r0, r2
   d9dea:	4631      	mov	r1, r6
   d9dec:	220a      	movs	r2, #10
    }
}
   d9dee:	b001      	add	sp, #4
   d9df0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d9df4:	f7ff bf5f 	b.w	d9cb6 <ultoa>
    }
}
   d9df8:	b001      	add	sp, #4
   d9dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9dfe:	bf00      	nop
   d9e00:	3fe00000 	.word	0x3fe00000

000d9e04 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9e04:	b510      	push	{r4, lr}
   d9e06:	4604      	mov	r4, r0
{
	free(buffer);
   d9e08:	6800      	ldr	r0, [r0, #0]
   d9e0a:	f7ff fd9d 	bl	d9948 <free>
}
   d9e0e:	4620      	mov	r0, r4
   d9e10:	bd10      	pop	{r4, pc}

000d9e12 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9e12:	b510      	push	{r4, lr}
   d9e14:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9e16:	6800      	ldr	r0, [r0, #0]
   d9e18:	b108      	cbz	r0, d9e1e <_ZN6String10invalidateEv+0xc>
   d9e1a:	f7ff fd95 	bl	d9948 <free>
	buffer = NULL;
   d9e1e:	2300      	movs	r3, #0
   d9e20:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d9e22:	60a3      	str	r3, [r4, #8]
   d9e24:	6063      	str	r3, [r4, #4]
   d9e26:	bd10      	pop	{r4, pc}

000d9e28 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9e28:	b538      	push	{r3, r4, r5, lr}
   d9e2a:	4604      	mov	r4, r0
   d9e2c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9e2e:	6800      	ldr	r0, [r0, #0]
   d9e30:	3101      	adds	r1, #1
   d9e32:	f7ff fd91 	bl	d9958 <realloc>
	if (newbuffer) {
   d9e36:	b110      	cbz	r0, d9e3e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9e38:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d9e3c:	2001      	movs	r0, #1
	}
	return 0;
}
   d9e3e:	bd38      	pop	{r3, r4, r5, pc}

000d9e40 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9e40:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9e42:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9e44:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9e46:	b113      	cbz	r3, d9e4e <_ZN6String7reserveEj+0xe>
   d9e48:	6843      	ldr	r3, [r0, #4]
   d9e4a:	428b      	cmp	r3, r1
   d9e4c:	d207      	bcs.n	d9e5e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d9e4e:	4620      	mov	r0, r4
   d9e50:	f7ff ffea 	bl	d9e28 <_ZN6String12changeBufferEj>
   d9e54:	b120      	cbz	r0, d9e60 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d9e56:	68a3      	ldr	r3, [r4, #8]
   d9e58:	b90b      	cbnz	r3, d9e5e <_ZN6String7reserveEj+0x1e>
   d9e5a:	6822      	ldr	r2, [r4, #0]
   d9e5c:	7013      	strb	r3, [r2, #0]
   d9e5e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d9e60:	bd10      	pop	{r4, pc}

000d9e62 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9e62:	b570      	push	{r4, r5, r6, lr}
   d9e64:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d9e66:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9e68:	4604      	mov	r4, r0
   d9e6a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d9e6c:	f7ff ffe8 	bl	d9e40 <_ZN6String7reserveEj>
   d9e70:	b918      	cbnz	r0, d9e7a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d9e72:	4620      	mov	r0, r4
   d9e74:	f7ff ffcd 	bl	d9e12 <_ZN6String10invalidateEv>
		return *this;
   d9e78:	e009      	b.n	d9e8e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d9e7a:	462a      	mov	r2, r5
   d9e7c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d9e7e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d9e80:	6820      	ldr	r0, [r4, #0]
   d9e82:	f004 fc86 	bl	de792 <memcpy>
	buffer[len] = 0;
   d9e86:	6822      	ldr	r2, [r4, #0]
   d9e88:	68a3      	ldr	r3, [r4, #8]
   d9e8a:	2100      	movs	r1, #0
   d9e8c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d9e8e:	4620      	mov	r0, r4
   d9e90:	bd70      	pop	{r4, r5, r6, pc}

000d9e92 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9e92:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9e94:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9e96:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9e98:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9e9a:	6043      	str	r3, [r0, #4]
	len = 0;
   d9e9c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9e9e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d9ea0:	460d      	mov	r5, r1
   d9ea2:	b139      	cbz	r1, d9eb4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d9ea4:	4608      	mov	r0, r1
   d9ea6:	f005 fc4d 	bl	df744 <strlen>
   d9eaa:	4629      	mov	r1, r5
   d9eac:	4602      	mov	r2, r0
   d9eae:	4620      	mov	r0, r4
   d9eb0:	f7ff ffd7 	bl	d9e62 <_ZN6String4copyEPKcj>
}
   d9eb4:	4620      	mov	r0, r4
   d9eb6:	bd38      	pop	{r3, r4, r5, pc}

000d9eb8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9eb8:	b538      	push	{r3, r4, r5, lr}
   d9eba:	4605      	mov	r5, r0
	if (buffer) {
   d9ebc:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9ebe:	460c      	mov	r4, r1
	if (buffer) {
   d9ec0:	b160      	cbz	r0, d9edc <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d9ec2:	686a      	ldr	r2, [r5, #4]
   d9ec4:	688b      	ldr	r3, [r1, #8]
   d9ec6:	429a      	cmp	r2, r3
   d9ec8:	d306      	bcc.n	d9ed8 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d9eca:	6809      	ldr	r1, [r1, #0]
   d9ecc:	f004 ff02 	bl	decd4 <strcpy>
			len = rhs.len;
   d9ed0:	68a3      	ldr	r3, [r4, #8]
   d9ed2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9ed4:	2300      	movs	r3, #0
   d9ed6:	e00a      	b.n	d9eee <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d9ed8:	f7ff fd36 	bl	d9948 <free>
		}
	}
	buffer = rhs.buffer;
   d9edc:	6823      	ldr	r3, [r4, #0]
   d9ede:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9ee0:	6863      	ldr	r3, [r4, #4]
   d9ee2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9ee4:	68a3      	ldr	r3, [r4, #8]
   d9ee6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9ee8:	2300      	movs	r3, #0
   d9eea:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d9eec:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d9eee:	60a3      	str	r3, [r4, #8]
   d9ef0:	bd38      	pop	{r3, r4, r5, pc}

000d9ef2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9ef2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d9ef4:	b510      	push	{r4, lr}
   d9ef6:	460b      	mov	r3, r1
   d9ef8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9efa:	d007      	beq.n	d9f0c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9efc:	6809      	ldr	r1, [r1, #0]
   d9efe:	b119      	cbz	r1, d9f08 <_ZN6StringaSERKS_+0x16>
   d9f00:	689a      	ldr	r2, [r3, #8]
   d9f02:	f7ff ffae 	bl	d9e62 <_ZN6String4copyEPKcj>
   d9f06:	e001      	b.n	d9f0c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d9f08:	f7ff ff83 	bl	d9e12 <_ZN6String10invalidateEv>

	return *this;
}
   d9f0c:	4620      	mov	r0, r4
   d9f0e:	bd10      	pop	{r4, pc}

000d9f10 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9f10:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9f12:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9f14:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9f16:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9f18:	6043      	str	r3, [r0, #4]
	len = 0;
   d9f1a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9f1c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d9f1e:	f7ff ffe8 	bl	d9ef2 <_ZN6StringaSERKS_>
}
   d9f22:	4620      	mov	r0, r4
   d9f24:	bd10      	pop	{r4, pc}

000d9f26 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9f26:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d9f28:	b510      	push	{r4, lr}
   d9f2a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d9f2c:	d001      	beq.n	d9f32 <_ZN6StringaSEOS_+0xc>
   d9f2e:	f7ff ffc3 	bl	d9eb8 <_ZN6String4moveERS_>
	return *this;
}
   d9f32:	4620      	mov	r0, r4
   d9f34:	bd10      	pop	{r4, pc}

000d9f36 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9f36:	b538      	push	{r3, r4, r5, lr}
   d9f38:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9f3a:	460c      	mov	r4, r1
   d9f3c:	b141      	cbz	r1, d9f50 <_ZN6StringaSEPKc+0x1a>
   d9f3e:	4608      	mov	r0, r1
   d9f40:	f005 fc00 	bl	df744 <strlen>
   d9f44:	4621      	mov	r1, r4
   d9f46:	4602      	mov	r2, r0
   d9f48:	4628      	mov	r0, r5
   d9f4a:	f7ff ff8a 	bl	d9e62 <_ZN6String4copyEPKcj>
   d9f4e:	e001      	b.n	d9f54 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d9f50:	f7ff ff5f 	bl	d9e12 <_ZN6String10invalidateEv>

	return *this;
}
   d9f54:	4628      	mov	r0, r5
   d9f56:	bd38      	pop	{r3, r4, r5, pc}

000d9f58 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   d9f58:	b513      	push	{r0, r1, r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9f5a:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
   d9f5c:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9f60:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9f62:	6043      	str	r3, [r0, #4]
	len = 0;
   d9f64:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9f66:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
   d9f68:	a901      	add	r1, sp, #4
	init();
	move(rval);
}
#endif

String::String(char c)
   d9f6a:	4604      	mov	r4, r0
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d9f6c:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d9f70:	f7ff ffe1 	bl	d9f36 <_ZN6StringaSEPKc>
}
   d9f74:	4620      	mov	r0, r4
   d9f76:	b002      	add	sp, #8
   d9f78:	bd10      	pop	{r4, pc}

000d9f7a <_ZN6StringC1Ehh>:

String::String(unsigned char value, unsigned char base)
   d9f7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9f7c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9f7e:	2300      	movs	r3, #0
   d9f80:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d9f82:	6063      	str	r3, [r4, #4]
	len = 0;
   d9f84:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9f86:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d9f88:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   d9f8a:	a901      	add	r1, sp, #4
   d9f8c:	f7ff fed1 	bl	d9d32 <utoa>
	*this = buf;
   d9f90:	a901      	add	r1, sp, #4
   d9f92:	4620      	mov	r0, r4
   d9f94:	f7ff ffcf 	bl	d9f36 <_ZN6StringaSEPKc>
}
   d9f98:	4620      	mov	r0, r4
   d9f9a:	b004      	add	sp, #16
   d9f9c:	bd10      	pop	{r4, pc}

000d9f9e <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   d9f9e:	b510      	push	{r4, lr}
   d9fa0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9fa2:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d9fa4:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9fa6:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d9fa8:	6063      	str	r3, [r4, #4]
	len = 0;
   d9faa:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9fac:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d9fae:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d9fb0:	a901      	add	r1, sp, #4
   d9fb2:	f7ff fea8 	bl	d9d06 <itoa>
	*this = buf;
   d9fb6:	a901      	add	r1, sp, #4
   d9fb8:	4620      	mov	r0, r4
   d9fba:	f7ff ffbc 	bl	d9f36 <_ZN6StringaSEPKc>
}
   d9fbe:	4620      	mov	r0, r4
   d9fc0:	b00a      	add	sp, #40	; 0x28
   d9fc2:	bd10      	pop	{r4, pc}

000d9fc4 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   d9fc4:	b510      	push	{r4, lr}
   d9fc6:	4604      	mov	r4, r0
   d9fc8:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9fca:	2300      	movs	r3, #0
   d9fcc:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d9fce:	6063      	str	r3, [r4, #4]
	len = 0;
   d9fd0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9fd2:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   d9fd4:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
   d9fd6:	2301      	movs	r3, #1
   d9fd8:	a901      	add	r1, sp, #4
   d9fda:	f7ff fe6c 	bl	d9cb6 <ultoa>
	*this = buf;
   d9fde:	a901      	add	r1, sp, #4
   d9fe0:	4620      	mov	r0, r4
   d9fe2:	f7ff ffa8 	bl	d9f36 <_ZN6StringaSEPKc>
}
   d9fe6:	4620      	mov	r0, r4
   d9fe8:	b00a      	add	sp, #40	; 0x28
   d9fea:	bd10      	pop	{r4, pc}

000d9fec <_ZN6StringC1Efi>:

String::String(float value, int decimalPlaces)
   d9fec:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9fee:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d9ff0:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9ff2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9ff4:	6043      	str	r3, [r0, #4]
	len = 0;
   d9ff6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9ff8:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d9ffa:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d9ffc:	ee10 0a10 	vmov	r0, s0
   da000:	b2cd      	uxtb	r5, r1
   da002:	f003 fd21 	bl	dda48 <__aeabi_f2d>
   da006:	ec41 0b10 	vmov	d0, r0, r1
   da00a:	a901      	add	r1, sp, #4
   da00c:	4628      	mov	r0, r5
   da00e:	f7ff fe95 	bl	d9d3c <_Z4dtoadhPc>
        *this = buf;
   da012:	a901      	add	r1, sp, #4
   da014:	4620      	mov	r0, r4
   da016:	f7ff ff8e 	bl	d9f36 <_ZN6StringaSEPKc>
}
   da01a:	4620      	mov	r0, r4
   da01c:	b00b      	add	sp, #44	; 0x2c
   da01e:	bd30      	pop	{r4, r5, pc}

000da020 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   da020:	b570      	push	{r4, r5, r6, lr}
   da022:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   da024:	460e      	mov	r6, r1
   da026:	b909      	cbnz	r1, da02c <_ZN6String6concatEPKcj+0xc>
   da028:	2000      	movs	r0, #0
   da02a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   da02c:	b16a      	cbz	r2, da04a <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   da02e:	6883      	ldr	r3, [r0, #8]
   da030:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   da032:	4629      	mov	r1, r5
   da034:	f7ff ff04 	bl	d9e40 <_ZN6String7reserveEj>
   da038:	2800      	cmp	r0, #0
   da03a:	d0f5      	beq.n	da028 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   da03c:	6820      	ldr	r0, [r4, #0]
   da03e:	68a3      	ldr	r3, [r4, #8]
   da040:	4631      	mov	r1, r6
   da042:	4418      	add	r0, r3
   da044:	f004 fe46 	bl	decd4 <strcpy>
	len = newlen;
   da048:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   da04a:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   da04c:	bd70      	pop	{r4, r5, r6, pc}

000da04e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   da04e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   da050:	688a      	ldr	r2, [r1, #8]
   da052:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   da054:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   da056:	f7ff ffe3 	bl	da020 <_ZN6String6concatEPKcj>
   da05a:	b910      	cbnz	r0, da062 <_ZplRK15StringSumHelperRK6String+0x14>
   da05c:	4620      	mov	r0, r4
   da05e:	f7ff fed8 	bl	d9e12 <_ZN6String10invalidateEv>
	return a;
}
   da062:	4620      	mov	r0, r4
   da064:	bd10      	pop	{r4, pc}

000da066 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   da066:	b538      	push	{r3, r4, r5, lr}
   da068:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   da06a:	460d      	mov	r5, r1
   da06c:	b141      	cbz	r1, da080 <_ZplRK15StringSumHelperPKc+0x1a>
   da06e:	4608      	mov	r0, r1
   da070:	f005 fb68 	bl	df744 <strlen>
   da074:	4629      	mov	r1, r5
   da076:	4602      	mov	r2, r0
   da078:	4620      	mov	r0, r4
   da07a:	f7ff ffd1 	bl	da020 <_ZN6String6concatEPKcj>
   da07e:	b910      	cbnz	r0, da086 <_ZplRK15StringSumHelperPKc+0x20>
   da080:	4620      	mov	r0, r4
   da082:	f7ff fec6 	bl	d9e12 <_ZN6String10invalidateEv>
	return a;
}
   da086:	4620      	mov	r0, r4
   da088:	bd38      	pop	{r3, r4, r5, pc}

000da08a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   da08a:	b570      	push	{r4, r5, r6, lr}
   da08c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   da08e:	b19a      	cbz	r2, da0b8 <_ZNK6String8getBytesEPhjj+0x2e>
   da090:	b191      	cbz	r1, da0b8 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   da092:	6885      	ldr	r5, [r0, #8]
   da094:	429d      	cmp	r5, r3
   da096:	d802      	bhi.n	da09e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   da098:	2300      	movs	r3, #0
   da09a:	700b      	strb	r3, [r1, #0]
		return;
   da09c:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   da09e:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   da0a0:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   da0a2:	6801      	ldr	r1, [r0, #0]
   da0a4:	42ac      	cmp	r4, r5
   da0a6:	bf28      	it	cs
   da0a8:	462c      	movcs	r4, r5
   da0aa:	4419      	add	r1, r3
   da0ac:	4622      	mov	r2, r4
   da0ae:	4630      	mov	r0, r6
   da0b0:	f005 fb65 	bl	df77e <strncpy>
	buf[n] = 0;
   da0b4:	2300      	movs	r3, #0
   da0b6:	5533      	strb	r3, [r6, r4]
   da0b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000da0bc <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   da0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   da0be:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   da0c0:	460f      	mov	r7, r1
   da0c2:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   da0c4:	490c      	ldr	r1, [pc, #48]	; (da0f8 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   da0c6:	bf88      	it	hi
   da0c8:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   da0ca:	4614      	mov	r4, r2
   da0cc:	4606      	mov	r6, r0
	if (left > right) {
   da0ce:	bf84      	itt	hi
   da0d0:	462c      	movhi	r4, r5
   da0d2:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   da0d4:	f7ff fedd 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   da0d8:	68ba      	ldr	r2, [r7, #8]
   da0da:	4294      	cmp	r4, r2
   da0dc:	d80a      	bhi.n	da0f4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   da0de:	6839      	ldr	r1, [r7, #0]
   da0e0:	4295      	cmp	r5, r2
   da0e2:	bf94      	ite	ls
   da0e4:	ebc4 0205 	rsbls	r2, r4, r5
   da0e8:	ebc4 0202 	rsbhi	r2, r4, r2
   da0ec:	4421      	add	r1, r4
   da0ee:	4630      	mov	r0, r6
   da0f0:	f7ff feb7 	bl	d9e62 <_ZN6String4copyEPKcj>
	return out;
}
   da0f4:	4630      	mov	r0, r6
   da0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da0f8:	000e06ec 	.word	0x000e06ec

000da0fc <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   da0fc:	b510      	push	{r4, lr}
   da0fe:	4604      	mov	r4, r0
	return substring(left, len);
   da100:	688b      	ldr	r3, [r1, #8]
   da102:	f7ff ffdb 	bl	da0bc <_ZNK6String9substringEjj>
}
   da106:	4620      	mov	r0, r4
   da108:	bd10      	pop	{r4, pc}

000da10a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   da10a:	6800      	ldr	r0, [r0, #0]
   da10c:	b108      	cbz	r0, da112 <_ZNK6String5toIntEv+0x8>
   da10e:	f004 ba27 	b.w	de560 <atol>
	return 0;
}
   da112:	4770      	bx	lr

000da114 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   da114:	b40e      	push	{r1, r2, r3}
   da116:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   da118:	ac09      	add	r4, sp, #36	; 0x24
   da11a:	4605      	mov	r5, r0
   da11c:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   da120:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da122:	4623      	mov	r3, r4
   da124:	463a      	mov	r2, r7
   da126:	2105      	movs	r1, #5
   da128:	a802      	add	r0, sp, #8
   da12a:	f7ff fc3d 	bl	d99a8 <vsnprintf>
    va_end(marker);

    String result;
   da12e:	490c      	ldr	r1, [pc, #48]	; (da160 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da130:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   da132:	4628      	mov	r0, r5
   da134:	f7ff fead 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   da138:	4631      	mov	r1, r6
   da13a:	4628      	mov	r0, r5
   da13c:	f7ff fe80 	bl	d9e40 <_ZN6String7reserveEj>
    if (result.buffer) {
   da140:	6828      	ldr	r0, [r5, #0]
   da142:	b130      	cbz	r0, da152 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da144:	4623      	mov	r3, r4
   da146:	463a      	mov	r2, r7
   da148:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   da14a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da14c:	f7ff fc2c 	bl	d99a8 <vsnprintf>
        va_end(marker);
        result.len = n;
   da150:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   da152:	4628      	mov	r0, r5
   da154:	b004      	add	sp, #16
   da156:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   da15a:	b003      	add	sp, #12
   da15c:	4770      	bx	lr
   da15e:	bf00      	nop
   da160:	000e06ec 	.word	0x000e06ec

000da164 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   da164:	b510      	push	{r4, lr}
   da166:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da168:	6800      	ldr	r0, [r0, #0]
   da16a:	b108      	cbz	r0, da170 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   da16c:	f7ff f9ee 	bl	d954c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   da170:	4620      	mov	r0, r4
   da172:	bd10      	pop	{r4, pc}

000da174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   da174:	680b      	ldr	r3, [r1, #0]
   da176:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   da178:	b113      	cbz	r3, da180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   da17a:	685a      	ldr	r2, [r3, #4]
   da17c:	3201      	adds	r2, #1
   da17e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   da180:	4770      	bx	lr
	...

000da184 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   da184:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da186:	4c06      	ldr	r4, [pc, #24]	; (da1a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   da188:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   da18a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da18c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   da18e:	f7ff f9d5 	bl	d953c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   da192:	4620      	mov	r0, r4
   da194:	4a03      	ldr	r2, [pc, #12]	; (da1a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   da196:	4904      	ldr	r1, [pc, #16]	; (da1a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   da198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   da19c:	f001 bb70 	b.w	db880 <__aeabi_atexit>
   da1a0:	2003e204 	.word	0x2003e204
   da1a4:	2003be9c 	.word	0x2003be9c
   da1a8:	000da165 	.word	0x000da165

000da1ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da1ae:	4606      	mov	r6, r0
   da1b0:	460d      	mov	r5, r1
   da1b2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   da1b4:	2400      	movs	r4, #0
  while (size--) {
   da1b6:	42bd      	cmp	r5, r7
   da1b8:	d00c      	beq.n	da1d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da1ba:	6833      	ldr	r3, [r6, #0]
   da1bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   da1c0:	689b      	ldr	r3, [r3, #8]
   da1c2:	4630      	mov	r0, r6
   da1c4:	4798      	blx	r3
     if (chunk>=0)
   da1c6:	2800      	cmp	r0, #0
   da1c8:	db01      	blt.n	da1ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da1ca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   da1cc:	e7f3      	b.n	da1b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da1ce:	2c00      	cmp	r4, #0
   da1d0:	bf08      	it	eq
   da1d2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   da1d4:	4620      	mov	r0, r4
   da1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da1d8 <_ZN5Print5printEPKc>:
   da1d8:	b508      	push	{r3, lr}
   da1da:	f7fd f935 	bl	d7448 <_ZN5Print5writeEPKc>
   da1de:	bd08      	pop	{r3, pc}

000da1e0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   da1e0:	6803      	ldr	r3, [r0, #0]
   da1e2:	689b      	ldr	r3, [r3, #8]
   da1e4:	4718      	bx	r3

000da1e6 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   da1e6:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da1e8:	f7fd f92e 	bl	d7448 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   da1ec:	bd08      	pop	{r3, pc}

000da1ee <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   da1ee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da1f0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da1f2:	4605      	mov	r5, r0
  size_t n = print('\r');
   da1f4:	f7ff fff4 	bl	da1e0 <_ZN5Print5printEc>
  n += print('\n');
   da1f8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   da1fa:	4604      	mov	r4, r0
  n += print('\n');
   da1fc:	4628      	mov	r0, r5
   da1fe:	f7ff ffef 	bl	da1e0 <_ZN5Print5printEc>
  return n;
}
   da202:	4420      	add	r0, r4
   da204:	bd38      	pop	{r3, r4, r5, pc}

000da206 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   da206:	b538      	push	{r3, r4, r5, lr}
   da208:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da20a:	f7fd f91d 	bl	d7448 <_ZN5Print5writeEPKc>
   da20e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   da210:	4628      	mov	r0, r5
   da212:	f7ff ffec 	bl	da1ee <_ZN5Print7printlnEv>
  return n;
}
   da216:	4420      	add	r0, r4
   da218:	bd38      	pop	{r3, r4, r5, pc}

000da21a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   da21a:	f7ff bff4 	b.w	da206 <_ZN5Print7printlnEPKc>

000da21e <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da21e:	b530      	push	{r4, r5, lr}
   da220:	b08b      	sub	sp, #44	; 0x2c
   da222:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da224:	2100      	movs	r1, #0
   da226:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da22a:	2a01      	cmp	r2, #1
   da22c:	bf98      	it	ls
   da22e:	220a      	movls	r2, #10
   da230:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   da234:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   da238:	fb05 3312 	mls	r3, r5, r2, r3
   da23c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da240:	2b09      	cmp	r3, #9
   da242:	bf94      	ite	ls
   da244:	3330      	addls	r3, #48	; 0x30
   da246:	3337      	addhi	r3, #55	; 0x37
   da248:	b2db      	uxtb	r3, r3
   da24a:	4621      	mov	r1, r4
   da24c:	f804 3901 	strb.w	r3, [r4], #-1
   da250:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   da252:	2d00      	cmp	r5, #0
   da254:	d1ee      	bne.n	da234 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   da256:	f7fd f8f7 	bl	d7448 <_ZN5Print5writeEPKc>
}
   da25a:	b00b      	add	sp, #44	; 0x2c
   da25c:	bd30      	pop	{r4, r5, pc}
	...

000da260 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   da260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da264:	ec57 6b10 	vmov	r6, r7, d0
   da268:	4682      	mov	sl, r0
   da26a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   da26c:	ee10 2a10 	vmov	r2, s0
   da270:	463b      	mov	r3, r7
   da272:	ee10 0a10 	vmov	r0, s0
   da276:	4639      	mov	r1, r7
   da278:	f003 fed4 	bl	de024 <__aeabi_dcmpun>
   da27c:	b108      	cbz	r0, da282 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da27e:	494e      	ldr	r1, [pc, #312]	; (da3b8 <_ZN5Print10printFloatEdh+0x158>)
   da280:	e012      	b.n	da2a8 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   da282:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   da286:	f04f 32ff 	mov.w	r2, #4294967295
   da28a:	4b4c      	ldr	r3, [pc, #304]	; (da3bc <_ZN5Print10printFloatEdh+0x15c>)
   da28c:	4630      	mov	r0, r6
   da28e:	4649      	mov	r1, r9
   da290:	f003 fec8 	bl	de024 <__aeabi_dcmpun>
   da294:	b968      	cbnz	r0, da2b2 <_ZN5Print10printFloatEdh+0x52>
   da296:	f04f 32ff 	mov.w	r2, #4294967295
   da29a:	4b48      	ldr	r3, [pc, #288]	; (da3bc <_ZN5Print10printFloatEdh+0x15c>)
   da29c:	4630      	mov	r0, r6
   da29e:	4649      	mov	r1, r9
   da2a0:	f003 fea2 	bl	ddfe8 <__aeabi_dcmple>
   da2a4:	b928      	cbnz	r0, da2b2 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da2a6:	4946      	ldr	r1, [pc, #280]	; (da3c0 <_ZN5Print10printFloatEdh+0x160>)
   da2a8:	4650      	mov	r0, sl
   da2aa:	f7fd f8cd 	bl	d7448 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   da2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   da2b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da2b6:	4b43      	ldr	r3, [pc, #268]	; (da3c4 <_ZN5Print10printFloatEdh+0x164>)
   da2b8:	4630      	mov	r0, r6
   da2ba:	4639      	mov	r1, r7
   da2bc:	f003 fea8 	bl	de010 <__aeabi_dcmpgt>
   da2c0:	b108      	cbz	r0, da2c6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da2c2:	4941      	ldr	r1, [pc, #260]	; (da3c8 <_ZN5Print10printFloatEdh+0x168>)
   da2c4:	e7f0      	b.n	da2a8 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   da2c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   da2ca:	4b40      	ldr	r3, [pc, #256]	; (da3cc <_ZN5Print10printFloatEdh+0x16c>)
   da2cc:	4630      	mov	r0, r6
   da2ce:	4639      	mov	r1, r7
   da2d0:	f003 fe80 	bl	ddfd4 <__aeabi_dcmplt>
   da2d4:	2800      	cmp	r0, #0
   da2d6:	d1f4      	bne.n	da2c2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   da2d8:	2200      	movs	r2, #0
   da2da:	2300      	movs	r3, #0
   da2dc:	4630      	mov	r0, r6
   da2de:	4639      	mov	r1, r7
   da2e0:	f003 fe78 	bl	ddfd4 <__aeabi_dcmplt>
   da2e4:	b140      	cbz	r0, da2f8 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   da2e6:	212d      	movs	r1, #45	; 0x2d
   da2e8:	4650      	mov	r0, sl
   da2ea:	f7ff ff79 	bl	da1e0 <_ZN5Print5printEc>
     number = -number;
   da2ee:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   da2f2:	4604      	mov	r4, r0
     number = -number;
   da2f4:	461f      	mov	r7, r3
   da2f6:	e000      	b.n	da2fa <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   da2f8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   da2fa:	4935      	ldr	r1, [pc, #212]	; (da3d0 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   da2fc:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   da300:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   da302:	fa5f f388 	uxtb.w	r3, r8
   da306:	429d      	cmp	r5, r3
   da308:	d906      	bls.n	da318 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   da30a:	2200      	movs	r2, #0
   da30c:	4b31      	ldr	r3, [pc, #196]	; (da3d4 <_ZN5Print10printFloatEdh+0x174>)
   da30e:	f003 fd19 	bl	ddd44 <__aeabi_ddiv>
   da312:	f108 0801 	add.w	r8, r8, #1
   da316:	e7f4      	b.n	da302 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   da318:	4632      	mov	r2, r6
   da31a:	463b      	mov	r3, r7
   da31c:	f003 fa36 	bl	dd78c <__adddf3>
   da320:	460f      	mov	r7, r1
   da322:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   da324:	f003 febc 	bl	de0a0 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   da328:	220a      	movs	r2, #10
   da32a:	4601      	mov	r1, r0
   da32c:	4680      	mov	r8, r0
   da32e:	4650      	mov	r0, sl
   da330:	f7ff ff75 	bl	da21e <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   da334:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   da336:	b3e5      	cbz	r5, da3b2 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   da338:	4640      	mov	r0, r8
   da33a:	f003 fb63 	bl	dda04 <__aeabi_ui2d>
   da33e:	4602      	mov	r2, r0
   da340:	460b      	mov	r3, r1
   da342:	4630      	mov	r0, r6
   da344:	4639      	mov	r1, r7
   da346:	f003 fa1f 	bl	dd788 <__aeabi_dsub>
   da34a:	4606      	mov	r6, r0
   da34c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da34e:	4650      	mov	r0, sl
   da350:	4921      	ldr	r1, [pc, #132]	; (da3d8 <_ZN5Print10printFloatEdh+0x178>)
   da352:	f7fd f879 	bl	d7448 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   da356:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   da358:	2200      	movs	r2, #0
   da35a:	4b1e      	ldr	r3, [pc, #120]	; (da3d4 <_ZN5Print10printFloatEdh+0x174>)
   da35c:	4630      	mov	r0, r6
   da35e:	4639      	mov	r1, r7
   da360:	f003 fbc6 	bl	ddaf0 <__aeabi_dmul>
   da364:	4606      	mov	r6, r0
   da366:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   da368:	f003 fe72 	bl	de050 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   da36c:	f1b0 0900 	subs.w	r9, r0, #0
   da370:	da07      	bge.n	da382 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   da372:	212d      	movs	r1, #45	; 0x2d
   da374:	4650      	mov	r0, sl
   da376:	f7ff ff33 	bl	da1e0 <_ZN5Print5printEc>
            val = -n;
   da37a:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   da37e:	4680      	mov	r8, r0
   da380:	e002      	b.n	da388 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   da382:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   da384:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   da388:	220a      	movs	r2, #10
   da38a:	4650      	mov	r0, sl
   da38c:	f7ff ff47 	bl	da21e <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   da390:	4440      	add	r0, r8
   da392:	4404      	add	r4, r0
    remainder -= toPrint;
   da394:	4648      	mov	r0, r9
   da396:	f003 fb45 	bl	dda24 <__aeabi_i2d>
   da39a:	4602      	mov	r2, r0
   da39c:	460b      	mov	r3, r1
   da39e:	4630      	mov	r0, r6
   da3a0:	4639      	mov	r1, r7
   da3a2:	f003 f9f1 	bl	dd788 <__aeabi_dsub>
   da3a6:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   da3a8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   da3ac:	4606      	mov	r6, r0
   da3ae:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   da3b0:	d1d2      	bne.n	da358 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   da3b2:	4620      	mov	r0, r4
   da3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da3b8:	000e063c 	.word	0x000e063c
   da3bc:	7fefffff 	.word	0x7fefffff
   da3c0:	000e0644 	.word	0x000e0644
   da3c4:	41efffff 	.word	0x41efffff
   da3c8:	000e0640 	.word	0x000e0640
   da3cc:	c1efffff 	.word	0xc1efffff
   da3d0:	3fe00000 	.word	0x3fe00000
   da3d4:	40240000 	.word	0x40240000
   da3d8:	000e01e1 	.word	0x000e01e1

000da3dc <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   da3dc:	b538      	push	{r3, r4, r5, lr}
   da3de:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   da3e0:	ee10 0a10 	vmov	r0, s0
   da3e4:	b2cd      	uxtb	r5, r1
   da3e6:	f003 fb2f 	bl	dda48 <__aeabi_f2d>
   da3ea:	ec41 0b10 	vmov	d0, r0, r1
   da3ee:	4629      	mov	r1, r5
   da3f0:	4620      	mov	r0, r4
}
   da3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   da3f6:	f7ff bf33 	b.w	da260 <_ZN5Print10printFloatEdh>

000da3fa <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   da3fa:	b40c      	push	{r2, r3}
   da3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da400:	b087      	sub	sp, #28
   da402:	af00      	add	r7, sp, #0
   da404:	f107 0438 	add.w	r4, r7, #56	; 0x38
   da408:	4605      	mov	r5, r0
   da40a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   da40e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   da410:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   da412:	4623      	mov	r3, r4
   da414:	464a      	mov	r2, r9
   da416:	2114      	movs	r1, #20
   da418:	1d38      	adds	r0, r7, #4
   da41a:	f7ff fac5 	bl	d99a8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   da41e:	2813      	cmp	r0, #19
   da420:	d805      	bhi.n	da42e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da422:	1d39      	adds	r1, r7, #4
   da424:	4628      	mov	r0, r5
   da426:	f7fd f80f 	bl	d7448 <_ZN5Print5writeEPKc>
   da42a:	4604      	mov	r4, r0
   da42c:	e013      	b.n	da456 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   da42e:	f100 0308 	add.w	r3, r0, #8
   da432:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   da436:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   da438:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   da43c:	1c41      	adds	r1, r0, #1
   da43e:	4623      	mov	r3, r4
   da440:	464a      	mov	r2, r9
   da442:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   da444:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   da446:	f7ff faaf 	bl	d99a8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da44a:	4669      	mov	r1, sp
   da44c:	4628      	mov	r0, r5
   da44e:	f7fc fffb 	bl	d7448 <_ZN5Print5writeEPKc>
   da452:	4604      	mov	r4, r0
   da454:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   da456:	b11e      	cbz	r6, da460 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   da458:	4628      	mov	r0, r5
   da45a:	f7ff fec8 	bl	da1ee <_ZN5Print7printlnEv>
   da45e:	4404      	add	r4, r0
    return n;
}
   da460:	4620      	mov	r0, r4
   da462:	371c      	adds	r7, #28
   da464:	46bd      	mov	sp, r7
   da466:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da46a:	b002      	add	sp, #8
   da46c:	4770      	bx	lr
	...

000da470 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   da470:	4b01      	ldr	r3, [pc, #4]	; (da478 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da472:	4a02      	ldr	r2, [pc, #8]	; (da47c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da474:	601a      	str	r2, [r3, #0]
   da476:	4770      	bx	lr
   da478:	2003e208 	.word	0x2003e208
   da47c:	000e06bb 	.word	0x000e06bb

000da480 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da480:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   da482:	4b14      	ldr	r3, [pc, #80]	; (da4d4 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da484:	4f14      	ldr	r7, [pc, #80]	; (da4d8 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   da486:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   da488:	4b14      	ldr	r3, [pc, #80]	; (da4dc <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   da48a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   da48c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   da48e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   da490:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   da492:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da494:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da496:	d01b      	beq.n	da4d0 <_ZL22Refresh_UnixTime_Cachel+0x50>
   da498:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   da49a:	ad01      	add	r5, sp, #4
   da49c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   da4a0:	f004 f870 	bl	de584 <localtime>
	calendar_time->tm_year += 1900;
   da4a4:	6943      	ldr	r3, [r0, #20]
   da4a6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   da4aa:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   da4ac:	4604      	mov	r4, r0
   da4ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da4b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da4b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da4b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da4b6:	f8d4 e000 	ldr.w	lr, [r4]
   da4ba:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da4be:	ad01      	add	r5, sp, #4
   da4c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da4c2:	4c07      	ldr	r4, [pc, #28]	; (da4e0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   da4c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da4c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da4c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da4ca:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da4cc:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   da4d0:	b00b      	add	sp, #44	; 0x2c
   da4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da4d4:	2003e23c 	.word	0x2003e23c
   da4d8:	2003e238 	.word	0x2003e238
   da4dc:	2003e234 	.word	0x2003e234
   da4e0:	2003e20c 	.word	0x2003e20c

000da4e4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   da4e4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   da4e6:	2000      	movs	r0, #0
   da4e8:	f7ff fa16 	bl	d9918 <spark_sync_time_pending>
   da4ec:	b128      	cbz	r0, da4fa <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   da4ee:	f7ff fa03 	bl	d98f8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   da4f2:	f080 0001 	eor.w	r0, r0, #1
   da4f6:	b2c0      	uxtb	r0, r0
   da4f8:	bd08      	pop	{r3, pc}
   da4fa:	2001      	movs	r0, #1
    }
   da4fc:	bd08      	pop	{r3, pc}
	...

000da500 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   da500:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da502:	f7ff ffbd 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   da506:	4b01      	ldr	r3, [pc, #4]	; (da50c <_ZN9TimeClass4hourEl+0xc>)
   da508:	6898      	ldr	r0, [r3, #8]
   da50a:	bd08      	pop	{r3, pc}
   da50c:	2003e20c 	.word	0x2003e20c

000da510 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   da510:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da512:	f7ff ffb5 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   da516:	4b01      	ldr	r3, [pc, #4]	; (da51c <_ZN9TimeClass6minuteEl+0xc>)
   da518:	6858      	ldr	r0, [r3, #4]
   da51a:	bd08      	pop	{r3, pc}
   da51c:	2003e20c 	.word	0x2003e20c

000da520 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   da520:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da522:	f7ff ffad 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   da526:	4b01      	ldr	r3, [pc, #4]	; (da52c <_ZN9TimeClass6secondEl+0xc>)
   da528:	6818      	ldr	r0, [r3, #0]
   da52a:	bd08      	pop	{r3, pc}
   da52c:	2003e20c 	.word	0x2003e20c

000da530 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   da530:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da532:	f7ff ffa5 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   da536:	4b01      	ldr	r3, [pc, #4]	; (da53c <_ZN9TimeClass3dayEl+0xc>)
   da538:	68d8      	ldr	r0, [r3, #12]
   da53a:	bd08      	pop	{r3, pc}
   da53c:	2003e20c 	.word	0x2003e20c

000da540 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   da540:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da542:	f7ff ff9d 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   da546:	4b02      	ldr	r3, [pc, #8]	; (da550 <_ZN9TimeClass7weekdayEl+0x10>)
   da548:	6998      	ldr	r0, [r3, #24]
}
   da54a:	3001      	adds	r0, #1
   da54c:	bd08      	pop	{r3, pc}
   da54e:	bf00      	nop
   da550:	2003e20c 	.word	0x2003e20c

000da554 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   da554:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da556:	f7ff ff93 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   da55a:	4b02      	ldr	r3, [pc, #8]	; (da564 <_ZN9TimeClass5monthEl+0x10>)
   da55c:	6918      	ldr	r0, [r3, #16]
}
   da55e:	3001      	adds	r0, #1
   da560:	bd08      	pop	{r3, pc}
   da562:	bf00      	nop
   da564:	2003e20c 	.word	0x2003e20c

000da568 <_ZN9TimeClass4yearEl>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   da568:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   da56a:	f7ff ff89 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_year;
}
   da56e:	4b01      	ldr	r3, [pc, #4]	; (da574 <_ZN9TimeClass4yearEl+0xc>)
   da570:	6958      	ldr	r0, [r3, #20]
   da572:	bd08      	pop	{r3, pc}
   da574:	2003e20c 	.word	0x2003e20c

000da578 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da578:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   da57a:	4b0e      	ldr	r3, [pc, #56]	; (da5b4 <_ZN9TimeClass7timeStrEl+0x3c>)
   da57c:	681b      	ldr	r3, [r3, #0]
   da57e:	4419      	add	r1, r3
   da580:	4b0d      	ldr	r3, [pc, #52]	; (da5b8 <_ZN9TimeClass7timeStrEl+0x40>)
   da582:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da584:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   da586:	a802      	add	r0, sp, #8
   da588:	4419      	add	r1, r3
   da58a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   da58e:	f003 fff9 	bl	de584 <localtime>
        char* ascstr = asctime(calendar_time);
   da592:	f003 ffa5 	bl	de4e0 <asctime>
   da596:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   da598:	f005 f8d4 	bl	df744 <strlen>
        ascstr[len-1] = 0; // remove final newline
   da59c:	4428      	add	r0, r5
   da59e:	2300      	movs	r3, #0
   da5a0:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   da5a4:	4629      	mov	r1, r5
   da5a6:	4620      	mov	r0, r4
   da5a8:	f7ff fc73 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
}
   da5ac:	4620      	mov	r0, r4
   da5ae:	b003      	add	sp, #12
   da5b0:	bd30      	pop	{r4, r5, pc}
   da5b2:	bf00      	nop
   da5b4:	2003e23c 	.word	0x2003e23c
   da5b8:	2003e234 	.word	0x2003e234

000da5bc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da5c0:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da5c2:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da5c4:	4607      	mov	r7, r0
   da5c6:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da5c8:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da5ca:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da5cc:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da5ce:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da5d0:	f005 f8d5 	bl	df77e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da5d4:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da5d6:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da5d8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da5dc:	f005 f8b2 	bl	df744 <strlen>
   da5e0:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da5e2:	b925      	cbnz	r5, da5ee <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   da5e4:	4924      	ldr	r1, [pc, #144]	; (da678 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   da5e6:	a803      	add	r0, sp, #12
   da5e8:	f004 fb74 	bl	decd4 <strcpy>
   da5ec:	e013      	b.n	da616 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da5ee:	213c      	movs	r1, #60	; 0x3c
   da5f0:	fb95 f2f1 	sdiv	r2, r5, r1
   da5f4:	2a00      	cmp	r2, #0
   da5f6:	bfb8      	it	lt
   da5f8:	4252      	neglt	r2, r2
   da5fa:	fb92 f3f1 	sdiv	r3, r2, r1
   da5fe:	fb01 2213 	mls	r2, r1, r3, r2
   da602:	9200      	str	r2, [sp, #0]
   da604:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da608:	4a1c      	ldr	r2, [pc, #112]	; (da67c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   da60a:	fb95 f3f3 	sdiv	r3, r5, r3
   da60e:	2110      	movs	r1, #16
   da610:	a803      	add	r0, sp, #12
   da612:	f7ff f9b9 	bl	d9988 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da616:	4625      	mov	r5, r4
   da618:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da61a:	f108 3aff 	add.w	sl, r8, #4294967295
   da61e:	45b2      	cmp	sl, r6
   da620:	d91b      	bls.n	da65a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da622:	782b      	ldrb	r3, [r5, #0]
   da624:	2b25      	cmp	r3, #37	; 0x25
   da626:	d116      	bne.n	da656 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   da628:	786b      	ldrb	r3, [r5, #1]
   da62a:	2b7a      	cmp	r3, #122	; 0x7a
   da62c:	d113      	bne.n	da656 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   da62e:	a803      	add	r0, sp, #12
   da630:	f005 f888 	bl	df744 <strlen>
   da634:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da636:	4430      	add	r0, r6
   da638:	ebc6 020a 	rsb	r2, r6, sl
   da63c:	1ca9      	adds	r1, r5, #2
   da63e:	4420      	add	r0, r4
   da640:	f004 f8a7 	bl	de792 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da644:	4642      	mov	r2, r8
   da646:	a903      	add	r1, sp, #12
   da648:	4628      	mov	r0, r5
   da64a:	f004 f8a2 	bl	de792 <memcpy>
            len = strlen(format_str);
   da64e:	4620      	mov	r0, r4
   da650:	f005 f878 	bl	df744 <strlen>
   da654:	4680      	mov	r8, r0
   da656:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da658:	e7de      	b.n	da618 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   da65a:	464b      	mov	r3, r9
   da65c:	4622      	mov	r2, r4
   da65e:	2132      	movs	r1, #50	; 0x32
   da660:	a807      	add	r0, sp, #28
   da662:	f004 fbbb 	bl	deddc <strftime>
    return String(buf);
   da666:	a907      	add	r1, sp, #28
   da668:	4638      	mov	r0, r7
   da66a:	f7ff fc12 	bl	d9e92 <_ZN6StringC1EPK19__FlashStringHelper>
}
   da66e:	4638      	mov	r0, r7
   da670:	b024      	add	sp, #144	; 0x90
   da672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da676:	bf00      	nop
   da678:	000e0fc1 	.word	0x000e0fc1
   da67c:	000e0724 	.word	0x000e0724

000da680 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   da680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da682:	4605      	mov	r5, r0
   da684:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   da686:	461c      	mov	r4, r3
   da688:	b913      	cbnz	r3, da690 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   da68a:	4b12      	ldr	r3, [pc, #72]	; (da6d4 <_ZN9TimeClass6formatElPKc+0x54>)
   da68c:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   da68e:	b12c      	cbz	r4, da69c <_ZN9TimeClass6formatElPKc+0x1c>
   da690:	4b11      	ldr	r3, [pc, #68]	; (da6d8 <_ZN9TimeClass6formatElPKc+0x58>)
   da692:	4620      	mov	r0, r4
   da694:	6819      	ldr	r1, [r3, #0]
   da696:	f004 fb13 	bl	decc0 <strcmp>
   da69a:	b920      	cbnz	r0, da6a6 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   da69c:	9901      	ldr	r1, [sp, #4]
   da69e:	4628      	mov	r0, r5
   da6a0:	f7ff ff6a 	bl	da578 <_ZN9TimeClass7timeStrEl>
   da6a4:	e013      	b.n	da6ce <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   da6a6:	4f0d      	ldr	r7, [pc, #52]	; (da6dc <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   da6a8:	9a01      	ldr	r2, [sp, #4]
   da6aa:	683b      	ldr	r3, [r7, #0]
   da6ac:	4e0c      	ldr	r6, [pc, #48]	; (da6e0 <_ZN9TimeClass6formatElPKc+0x60>)
   da6ae:	441a      	add	r2, r3
   da6b0:	6833      	ldr	r3, [r6, #0]
   da6b2:	a802      	add	r0, sp, #8
   da6b4:	4413      	add	r3, r2
   da6b6:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   da6ba:	f003 ff63 	bl	de584 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da6be:	683a      	ldr	r2, [r7, #0]
   da6c0:	6833      	ldr	r3, [r6, #0]
   da6c2:	4601      	mov	r1, r0
   da6c4:	4413      	add	r3, r2
   da6c6:	4628      	mov	r0, r5
   da6c8:	4622      	mov	r2, r4
   da6ca:	f7ff ff77 	bl	da5bc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   da6ce:	4628      	mov	r0, r5
   da6d0:	b003      	add	sp, #12
   da6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da6d4:	2003e230 	.word	0x2003e230
   da6d8:	2003bde4 	.word	0x2003bde4
   da6dc:	2003e23c 	.word	0x2003e23c
   da6e0:	2003e234 	.word	0x2003e234

000da6e4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   da6e4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   da6e6:	2000      	movs	r0, #0
   da6e8:	f7fe fec8 	bl	d947c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   da6ec:	4604      	mov	r4, r0
   da6ee:	b968      	cbnz	r0, da70c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da6f0:	f7ff f83e 	bl	d9770 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da6f4:	2801      	cmp	r0, #1
   da6f6:	d10b      	bne.n	da710 <_ZN9TimeClass7isValidEv+0x2c>
   da6f8:	4620      	mov	r0, r4
   da6fa:	f7ff f869 	bl	d97d0 <system_thread_get_state>
   da6fe:	b938      	cbnz	r0, da710 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   da700:	f7ff fef0 	bl	da4e4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da704:	b930      	cbnz	r0, da714 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   da706:	f7ff f8e7 	bl	d98d8 <spark_process>
   da70a:	e7f9      	b.n	da700 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   da70c:	2001      	movs	r0, #1
   da70e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   da710:	2000      	movs	r0, #0
   da712:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   da714:	f7ff fee6 	bl	da4e4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   da718:	2000      	movs	r0, #0
   da71a:	f7fe feaf 	bl	d947c <HAL_RTC_Time_Is_Valid>
   da71e:	3000      	adds	r0, #0
   da720:	bf18      	it	ne
   da722:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   da724:	bd10      	pop	{r4, pc}

000da726 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   da726:	b508      	push	{r3, lr}
    (void)isValid();
   da728:	f7ff ffdc 	bl	da6e4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   da72c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   da730:	f7fe be9c 	b.w	d946c <HAL_RTC_Get_UnixTime>

000da734 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   da734:	b508      	push	{r3, lr}
	return hour(now());
   da736:	f7ff fff6 	bl	da726 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   da73a:	f7ff fea1 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   da73e:	4b01      	ldr	r3, [pc, #4]	; (da744 <_ZN9TimeClass4hourEv+0x10>)
   da740:	6898      	ldr	r0, [r3, #8]
   da742:	bd08      	pop	{r3, pc}
   da744:	2003e20c 	.word	0x2003e20c

000da748 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   da748:	b508      	push	{r3, lr}
	return minute(now());
   da74a:	f7ff ffec 	bl	da726 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   da74e:	f7ff fe97 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   da752:	4b01      	ldr	r3, [pc, #4]	; (da758 <_ZN9TimeClass6minuteEv+0x10>)
   da754:	6858      	ldr	r0, [r3, #4]
   da756:	bd08      	pop	{r3, pc}
   da758:	2003e20c 	.word	0x2003e20c

000da75c <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   da75c:	b508      	push	{r3, lr}
	return second(now());
   da75e:	f7ff ffe2 	bl	da726 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   da762:	f7ff fe8d 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   da766:	4b01      	ldr	r3, [pc, #4]	; (da76c <_ZN9TimeClass6secondEv+0x10>)
   da768:	6818      	ldr	r0, [r3, #0]
   da76a:	bd08      	pop	{r3, pc}
   da76c:	2003e20c 	.word	0x2003e20c

000da770 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   da770:	b508      	push	{r3, lr}
	return day(now());
   da772:	f7ff ffd8 	bl	da726 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   da776:	f7ff fe83 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   da77a:	4b01      	ldr	r3, [pc, #4]	; (da780 <_ZN9TimeClass3dayEv+0x10>)
   da77c:	68d8      	ldr	r0, [r3, #12]
   da77e:	bd08      	pop	{r3, pc}
   da780:	2003e20c 	.word	0x2003e20c

000da784 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   da784:	b508      	push	{r3, lr}
	return month(now());
   da786:	f7ff ffce 	bl	da726 <_ZN9TimeClass3nowEv>
}
   da78a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   da78e:	f7ff bee1 	b.w	da554 <_ZN9TimeClass5monthEl>
	...

000da794 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   da794:	b508      	push	{r3, lr}
	return year(now());
   da796:	f7ff ffc6 	bl	da726 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   da79a:	f7ff fe71 	bl	da480 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   da79e:	4b01      	ldr	r3, [pc, #4]	; (da7a4 <_ZN9TimeClass4yearEv+0x10>)
   da7a0:	6958      	ldr	r0, [r3, #20]
   da7a2:	bd08      	pop	{r3, pc}
   da7a4:	2003e20c 	.word	0x2003e20c

000da7a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da7a8:	4b02      	ldr	r3, [pc, #8]	; (da7b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da7aa:	681a      	ldr	r2, [r3, #0]
   da7ac:	4b02      	ldr	r3, [pc, #8]	; (da7b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da7ae:	601a      	str	r2, [r3, #0]
   da7b0:	4770      	bx	lr
   da7b2:	bf00      	nop
   da7b4:	2003bde4 	.word	0x2003bde4
   da7b8:	2003e230 	.word	0x2003e230

000da7bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   da7bc:	2100      	movs	r1, #0
   da7be:	f7fe bfe7 	b.w	d9790 <system_delay_ms>

000da7c2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   da7c2:	b510      	push	{r4, lr}
   da7c4:	4604      	mov	r4, r0
   da7c6:	f7f9 fd85 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
   da7ca:	4620      	mov	r0, r4
   da7cc:	bd10      	pop	{r4, pc}

000da7ce <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   da7ce:	b513      	push	{r0, r1, r4, lr}
   da7d0:	460b      	mov	r3, r1
   da7d2:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da7d4:	c803      	ldmia	r0, {r0, r1}
   da7d6:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   da7da:	e893 0003 	ldmia.w	r3, {r0, r1}
   da7de:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   da7e2:	e89d 0003 	ldmia.w	sp, {r0, r1}
   da7e6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   da7ea:	b002      	add	sp, #8
   da7ec:	bd10      	pop	{r4, pc}
	...

000da7f0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   da7f0:	4803      	ldr	r0, [pc, #12]	; (da800 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   da7f2:	4a04      	ldr	r2, [pc, #16]	; (da804 <_GLOBAL__sub_I_RGB+0x14>)
   da7f4:	4904      	ldr	r1, [pc, #16]	; (da808 <_GLOBAL__sub_I_RGB+0x18>)
   da7f6:	2300      	movs	r3, #0
   da7f8:	6083      	str	r3, [r0, #8]
   da7fa:	f001 b841 	b.w	db880 <__aeabi_atexit>
   da7fe:	bf00      	nop
   da800:	2003e244 	.word	0x2003e244
   da804:	2003be9c 	.word	0x2003be9c
   da808:	000da7c3 	.word	0x000da7c3

000da80c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   da80c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da80e:	4b0c      	ldr	r3, [pc, #48]	; (da840 <serialEventRun+0x34>)
   da810:	b133      	cbz	r3, da820 <serialEventRun+0x14>
   da812:	f000 fc1b 	bl	db04c <_Z16_fetch_usbserialv>
   da816:	6803      	ldr	r3, [r0, #0]
   da818:	691b      	ldr	r3, [r3, #16]
   da81a:	4798      	blx	r3
   da81c:	2800      	cmp	r0, #0
   da81e:	dc09      	bgt.n	da834 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   da820:	4b08      	ldr	r3, [pc, #32]	; (da844 <serialEventRun+0x38>)
   da822:	b163      	cbz	r3, da83e <serialEventRun+0x32>
   da824:	f000 fd00 	bl	db228 <_Z22__fetch_global_Serial1v>
   da828:	6803      	ldr	r3, [r0, #0]
   da82a:	691b      	ldr	r3, [r3, #16]
   da82c:	4798      	blx	r3
   da82e:	2800      	cmp	r0, #0
   da830:	dc03      	bgt.n	da83a <serialEventRun+0x2e>
   da832:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   da834:	f3af 8000 	nop.w
   da838:	e7f2      	b.n	da820 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   da83a:	f3af 8000 	nop.w
   da83e:	bd08      	pop	{r3, pc}
	...

000da848 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   da848:	b508      	push	{r3, lr}
	serialEventRun();
   da84a:	f7ff ffdf 	bl	da80c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da84e:	f7fe fe05 	bl	d945c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da852:	4b01      	ldr	r3, [pc, #4]	; (da858 <_post_loop+0x10>)
   da854:	6018      	str	r0, [r3, #0]
   da856:	bd08      	pop	{r3, pc}
   da858:	2003e608 	.word	0x2003e608

000da85c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da85c:	4802      	ldr	r0, [pc, #8]	; (da868 <_Z33system_initialize_user_backup_ramv+0xc>)
   da85e:	4a03      	ldr	r2, [pc, #12]	; (da86c <_Z33system_initialize_user_backup_ramv+0x10>)
   da860:	4903      	ldr	r1, [pc, #12]	; (da870 <_Z33system_initialize_user_backup_ramv+0x14>)
   da862:	1a12      	subs	r2, r2, r0
   da864:	f003 bf95 	b.w	de792 <memcpy>
   da868:	2003f400 	.word	0x2003f400
   da86c:	2003f404 	.word	0x2003f404
   da870:	000e10b8 	.word	0x000e10b8

000da874 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da874:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da876:	2300      	movs	r3, #0
   da878:	9300      	str	r3, [sp, #0]
   da87a:	461a      	mov	r2, r3
   da87c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da880:	f7fe ffc0 	bl	d9804 <system_ctrl_set_result>
}
   da884:	b003      	add	sp, #12
   da886:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da88c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   da88c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da88e:	8843      	ldrh	r3, [r0, #2]
   da890:	2b0a      	cmp	r3, #10
   da892:	d008      	beq.n	da8a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da894:	2b50      	cmp	r3, #80	; 0x50
   da896:	d109      	bne.n	da8ac <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   da898:	4b09      	ldr	r3, [pc, #36]	; (da8c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da89a:	681b      	ldr	r3, [r3, #0]
   da89c:	b13b      	cbz	r3, da8ae <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   da89e:	b003      	add	sp, #12
   da8a0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   da8a4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   da8a6:	f7ff ffe5 	bl	da874 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   da8aa:	e006      	b.n	da8ba <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da8ac:	2300      	movs	r3, #0
   da8ae:	9300      	str	r3, [sp, #0]
   da8b0:	461a      	mov	r2, r3
   da8b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da8b6:	f7fe ffa5 	bl	d9804 <system_ctrl_set_result>
        break;
    }
}
   da8ba:	b003      	add	sp, #12
   da8bc:	f85d fb04 	ldr.w	pc, [sp], #4
   da8c0:	2003e254 	.word	0x2003e254

000da8c4 <module_user_init_hook>:

void module_user_init_hook()
{
   da8c4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da8c6:	4c10      	ldr	r4, [pc, #64]	; (da908 <module_user_init_hook+0x44>)
   da8c8:	4d10      	ldr	r5, [pc, #64]	; (da90c <module_user_init_hook+0x48>)
   da8ca:	6823      	ldr	r3, [r4, #0]
   da8cc:	42ab      	cmp	r3, r5
   da8ce:	4b10      	ldr	r3, [pc, #64]	; (da910 <module_user_init_hook+0x4c>)
   da8d0:	bf0c      	ite	eq
   da8d2:	2201      	moveq	r2, #1
   da8d4:	2200      	movne	r2, #0
   da8d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da8d8:	d002      	beq.n	da8e0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   da8da:	f7ff ffbf 	bl	da85c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   da8de:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da8e0:	f7fe fdac 	bl	d943c <HAL_RNG_GetRandomNumber>
   da8e4:	4604      	mov	r4, r0
    srand(seed);
   da8e6:	f004 f9b5 	bl	dec54 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da8ea:	4b0a      	ldr	r3, [pc, #40]	; (da914 <module_user_init_hook+0x50>)
   da8ec:	b113      	cbz	r3, da8f4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   da8ee:	4620      	mov	r0, r4
   da8f0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da8f4:	2100      	movs	r1, #0
   da8f6:	4807      	ldr	r0, [pc, #28]	; (da914 <module_user_init_hook+0x50>)
   da8f8:	f7ff f816 	bl	d9928 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da8fc:	2100      	movs	r1, #0
   da8fe:	4806      	ldr	r0, [pc, #24]	; (da918 <module_user_init_hook+0x54>)
}
   da900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da904:	f7fe bf74 	b.w	d97f0 <system_ctrl_set_app_request_handler>
   da908:	2003f400 	.word	0x2003f400
   da90c:	9a271c1e 	.word	0x9a271c1e
   da910:	2003e258 	.word	0x2003e258
   da914:	00000000 	.word	0x00000000
   da918:	000da88d 	.word	0x000da88d

000da91c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da91c:	4770      	bx	lr

000da91e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   da91e:	2000      	movs	r0, #0
   da920:	4770      	bx	lr

000da922 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   da922:	b510      	push	{r4, lr}
   da924:	2110      	movs	r1, #16
   da926:	4604      	mov	r4, r0
   da928:	f000 ffb8 	bl	db89c <_ZdlPvj>
   da92c:	4620      	mov	r0, r4
   da92e:	bd10      	pop	{r4, pc}

000da930 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   da930:	b508      	push	{r3, lr}
      { delete this; }
   da932:	b108      	cbz	r0, da938 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   da934:	f7ff fff5 	bl	da922 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   da938:	bd08      	pop	{r3, pc}

000da93a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   da93a:	2200      	movs	r2, #0
   da93c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   da93e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   da940:	f64f 729c 	movw	r2, #65436	; 0xff9c
   da944:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   da946:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   da94a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   da94c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da94e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   da950:	680c      	ldr	r4, [r1, #0]
   da952:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da954:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   da956:	bd10      	pop	{r4, pc}

000da958 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   da958:	b510      	push	{r4, lr}
   da95a:	4604      	mov	r4, r0
    free((void*)msg_);
   da95c:	6800      	ldr	r0, [r0, #0]
   da95e:	f7fe fff3 	bl	d9948 <free>
}
   da962:	4620      	mov	r0, r4
   da964:	bd10      	pop	{r4, pc}

000da966 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   da966:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   da968:	68c4      	ldr	r4, [r0, #12]
   da96a:	b1f4      	cbz	r4, da9aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   da96c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   da96e:	2b02      	cmp	r3, #2
   da970:	d103      	bne.n	da97a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   da972:	f104 000c 	add.w	r0, r4, #12
   da976:	f7ff ffef 	bl	da958 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   da97a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   da97c:	b135      	cbz	r5, da98c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   da97e:	4628      	mov	r0, r5
   da980:	f7f9 fca8 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
   da984:	2110      	movs	r1, #16
   da986:	4628      	mov	r0, r5
   da988:	f000 ff88 	bl	db89c <_ZdlPvj>
   da98c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   da98e:	b135      	cbz	r5, da99e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   da990:	4628      	mov	r0, r5
   da992:	f7f9 fc9f 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
   da996:	2110      	movs	r1, #16
   da998:	4628      	mov	r0, r5
   da99a:	f000 ff7f 	bl	db89c <_ZdlPvj>
   da99e:	4620      	mov	r0, r4
   da9a0:	2114      	movs	r1, #20
   da9a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da9a6:	f000 bf79 	b.w	db89c <_ZdlPvj>
   da9aa:	bd38      	pop	{r3, r4, r5, pc}

000da9ac <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   da9ac:	b513      	push	{r0, r1, r4, lr}
   da9ae:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   da9b0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   da9b4:	2300      	movs	r3, #0
   da9b6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   da9b8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   da9ba:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   da9bc:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da9be:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   da9c0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   da9c2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da9c4:	f7f9 ff08 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da9c8:	4620      	mov	r0, r4
   da9ca:	b002      	add	sp, #8
   da9cc:	bd10      	pop	{r4, pc}

000da9ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   da9ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   da9d0:	460c      	mov	r4, r1
   da9d2:	ad02      	add	r5, sp, #8
   da9d4:	f854 3b04 	ldr.w	r3, [r4], #4
   da9d8:	f845 3d08 	str.w	r3, [r5, #-8]!
   da9dc:	4606      	mov	r6, r0
   da9de:	460f      	mov	r7, r1
   da9e0:	a801      	add	r0, sp, #4
   da9e2:	4621      	mov	r1, r4
   da9e4:	f7ff fbc6 	bl	da174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   da9e8:	4629      	mov	r1, r5
   da9ea:	4630      	mov	r0, r6
   da9ec:	f7ff ffde 	bl	da9ac <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   da9f0:	a801      	add	r0, sp, #4
   da9f2:	f7f9 fef1 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da9f6:	4620      	mov	r0, r4
   da9f8:	f7f9 feee 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   da9fc:	4638      	mov	r0, r7
   da9fe:	2108      	movs	r1, #8
   daa00:	f000 ff4c 	bl	db89c <_ZdlPvj>
        return p;
    }
   daa04:	4630      	mov	r0, r6
   daa06:	b003      	add	sp, #12
   daa08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000daa0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   daa0c:	b538      	push	{r3, r4, r5, lr}
   daa0e:	2300      	movs	r3, #0
   daa10:	4604      	mov	r4, r0
   daa12:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   daa14:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   daa16:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   daa18:	f7f9 fb3f 	bl	d409a <_Znwj>
   daa1c:	b128      	cbz	r0, daa2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   daa1e:	2301      	movs	r3, #1
   daa20:	6043      	str	r3, [r0, #4]
   daa22:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   daa24:	4b02      	ldr	r3, [pc, #8]	; (daa30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   daa26:	6003      	str	r3, [r0, #0]
   daa28:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   daa2a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   daa2c:	4620      	mov	r0, r4
   daa2e:	bd38      	pop	{r3, r4, r5, pc}
   daa30:	000e0754 	.word	0x000e0754

000daa34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   daa34:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   daa36:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   daa38:	b90a      	cbnz	r2, daa3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   daa3a:	f001 f8d3 	bl	dbbe4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daa3e:	68c3      	ldr	r3, [r0, #12]
    }
   daa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daa44:	4718      	bx	r3

000daa46 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   daa46:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   daa48:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   daa4a:	f100 0110 	add.w	r1, r0, #16
   daa4e:	f7ff fff1 	bl	daa34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   daa52:	bd08      	pop	{r3, pc}

000daa54 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   daa54:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   daa56:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   daa58:	b90a      	cbnz	r2, daa5e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   daa5a:	f001 f8c3 	bl	dbbe4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daa5e:	68c3      	ldr	r3, [r0, #12]
    }
   daa60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daa64:	4718      	bx	r3

000daa66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   daa66:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   daa68:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   daa6a:	f100 0110 	add.w	r1, r0, #16
   daa6e:	f7ff fff1 	bl	daa54 <_ZNKSt8functionIFvRKbEEclES1_>
   daa72:	bd08      	pop	{r3, pc}

000daa74 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   daa74:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   daa76:	2300      	movs	r3, #0
   daa78:	6083      	str	r3, [r0, #8]
   daa7a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   daa7c:	4604      	mov	r4, r0
   daa7e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   daa80:	b12b      	cbz	r3, daa8e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   daa82:	2202      	movs	r2, #2
   daa84:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   daa86:	68eb      	ldr	r3, [r5, #12]
   daa88:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   daa8a:	68ab      	ldr	r3, [r5, #8]
   daa8c:	60a3      	str	r3, [r4, #8]
	}
    }
   daa8e:	4620      	mov	r0, r4
   daa90:	bd38      	pop	{r3, r4, r5, pc}
	...

000daa94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   daa94:	b5f0      	push	{r4, r5, r6, r7, lr}
   daa96:	b089      	sub	sp, #36	; 0x24
   daa98:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   daa9a:	4668      	mov	r0, sp
   daa9c:	f7ff ff4d 	bl	da93a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   daaa0:	2300      	movs	r3, #0
   daaa2:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   daaa6:	f04f 0202 	mov.w	r2, #2
   daaaa:	e8d4 3f4f 	ldrexb	r3, [r4]
   daaae:	2b00      	cmp	r3, #0
   daab0:	d103      	bne.n	daaba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   daab2:	e8c4 2f41 	strexb	r1, r2, [r4]
   daab6:	2900      	cmp	r1, #0
   daab8:	d1f7      	bne.n	daaaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   daaba:	d002      	beq.n	daac2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   daabc:	f88d 3008 	strb.w	r3, [sp, #8]
   daac0:	e063      	b.n	dab8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   daac2:	f114 050c 	adds.w	r5, r4, #12
   daac6:	d003      	beq.n	daad0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   daac8:	4669      	mov	r1, sp
   daaca:	4628      	mov	r0, r5
   daacc:	f7ff ff35 	bl	da93a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   daad0:	f3bf 8f5f 	dmb	sy
   daad4:	2301      	movs	r3, #1
   daad6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   daad8:	2000      	movs	r0, #0
   daada:	f104 0308 	add.w	r3, r4, #8
   daade:	f3bf 8f5f 	dmb	sy
   daae2:	e853 6f00 	ldrex	r6, [r3]
   daae6:	e843 0200 	strex	r2, r0, [r3]
   daaea:	2a00      	cmp	r2, #0
   daaec:	d1f9      	bne.n	daae2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   daaee:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   daaf2:	2e00      	cmp	r6, #0
   daaf4:	d049      	beq.n	dab8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   daaf6:	f7fe fe5b 	bl	d97b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   daafa:	b120      	cbz	r0, dab06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   daafc:	4629      	mov	r1, r5
   daafe:	4630      	mov	r0, r6
   dab00:	f7ff ff98 	bl	daa34 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dab04:	e03a      	b.n	dab7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dab06:	4631      	mov	r1, r6
   dab08:	a802      	add	r0, sp, #8
   dab0a:	f7ff ffb3 	bl	daa74 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dab0e:	68e0      	ldr	r0, [r4, #12]
   dab10:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dab14:	b108      	cbz	r0, dab1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   dab16:	f004 f8e5 	bl	dece4 <strdup>
   dab1a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dab1c:	2010      	movs	r0, #16
   dab1e:	f8ad 501c 	strh.w	r5, [sp, #28]
   dab22:	f7f9 faba 	bl	d409a <_Znwj>
   dab26:	4605      	mov	r5, r0
   dab28:	b1e8      	cbz	r0, dab66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dab2a:	2700      	movs	r7, #0
   dab2c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dab2e:	2018      	movs	r0, #24
   dab30:	f7f9 fab3 	bl	d409a <_Znwj>
   dab34:	4604      	mov	r4, r0
   dab36:	b188      	cbz	r0, dab5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dab38:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dab3a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dab3c:	a802      	add	r0, sp, #8
   dab3e:	f7ff fe46 	bl	da7ce <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dab42:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dab44:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dab46:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dab48:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dab4a:	9204      	str	r2, [sp, #16]
   dab4c:	a906      	add	r1, sp, #24
   dab4e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dab50:	60e3      	str	r3, [r4, #12]
   dab52:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dab56:	9205      	str	r2, [sp, #20]
   dab58:	f7ff feef 	bl	da93a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dab5c:	4b0d      	ldr	r3, [pc, #52]	; (dab94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   dab5e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dab60:	4b0d      	ldr	r3, [pc, #52]	; (dab98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dab62:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dab64:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   dab66:	a806      	add	r0, sp, #24
   dab68:	f7ff fef6 	bl	da958 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dab6c:	a802      	add	r0, sp, #8
   dab6e:	f7f9 fbb1 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dab72:	2200      	movs	r2, #0
   dab74:	4629      	mov	r1, r5
   dab76:	4809      	ldr	r0, [pc, #36]	; (dab9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   dab78:	f7fe fe22 	bl	d97c0 <application_thread_invoke>
   dab7c:	4630      	mov	r0, r6
   dab7e:	f7f9 fba9 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dab82:	2110      	movs	r1, #16
   dab84:	4630      	mov	r0, r6
   dab86:	f000 fe89 	bl	db89c <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   dab8a:	4668      	mov	r0, sp
   dab8c:	f7ff fee4 	bl	da958 <_ZN8particle5ErrorD1Ev>
    }
   dab90:	b009      	add	sp, #36	; 0x24
   dab92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dab94:	000daa47 	.word	0x000daa47
   dab98:	000dacbd 	.word	0x000dacbd
   dab9c:	000db275 	.word	0x000db275

000daba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   daba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daba4:	b08b      	sub	sp, #44	; 0x2c
   daba6:	4606      	mov	r6, r0
   daba8:	460f      	mov	r7, r1
   dabaa:	4690      	mov	r8, r2
   dabac:	4699      	mov	r9, r3
   dabae:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dabb2:	f7fe fea1 	bl	d98f8 <spark_cloud_flag_connected>
   dabb6:	ad07      	add	r5, sp, #28
    if (!connected()) {
   dabb8:	4683      	mov	fp, r0
   dabba:	bb30      	cbnz	r0, dac0a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dabbc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dabc0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dabc2:	a905      	add	r1, sp, #20
   dabc4:	4628      	mov	r0, r5
   dabc6:	f8ad 3018 	strh.w	r3, [sp, #24]
   dabca:	f7ff feb6 	bl	da93a <_ZN8particle5ErrorC1EOS0_>
   dabce:	2014      	movs	r0, #20
   dabd0:	f7f9 fa63 	bl	d409a <_Znwj>
   dabd4:	4604      	mov	r4, r0
   dabd6:	b158      	cbz	r0, dabf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dabd8:	2302      	movs	r3, #2
   dabda:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dabdc:	2301      	movs	r3, #1
   dabde:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dabe0:	f8c0 b004 	str.w	fp, [r0, #4]
   dabe4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   dabe8:	4629      	mov	r1, r5
   dabea:	300c      	adds	r0, #12
   dabec:	f7ff fea5 	bl	da93a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   dabf0:	4630      	mov	r0, r6
   dabf2:	4621      	mov	r1, r4
   dabf4:	f840 4b04 	str.w	r4, [r0], #4
   dabf8:	f7ff ff08 	bl	daa0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dabfc:	4628      	mov	r0, r5
   dabfe:	f7ff feab 	bl	da958 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dac02:	a805      	add	r0, sp, #20
   dac04:	f7ff fea8 	bl	da958 <_ZN8particle5ErrorD1Ev>
   dac08:	e052      	b.n	dacb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dac0a:	2400      	movs	r4, #0
   dac0c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dac0e:	2014      	movs	r0, #20
   dac10:	606c      	str	r4, [r5, #4]
   dac12:	60ac      	str	r4, [r5, #8]
   dac14:	9307      	str	r3, [sp, #28]
   dac16:	f7f9 fa40 	bl	d409a <_Znwj>
   dac1a:	4601      	mov	r1, r0
   dac1c:	b118      	cbz	r0, dac26 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   dac1e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dac20:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dac22:	6044      	str	r4, [r0, #4]
   dac24:	6084      	str	r4, [r0, #8]
   dac26:	a804      	add	r0, sp, #16
   dac28:	9103      	str	r1, [sp, #12]
   dac2a:	f7ff feef 	bl	daa0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   dac2e:	4b22      	ldr	r3, [pc, #136]	; (dacb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   dac30:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dac32:	2008      	movs	r0, #8
   dac34:	f7f9 fa31 	bl	d409a <_Znwj>
   dac38:	4604      	mov	r4, r0
   dac3a:	b128      	cbz	r0, dac48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dac3c:	9b03      	ldr	r3, [sp, #12]
   dac3e:	f840 3b04 	str.w	r3, [r0], #4
   dac42:	a904      	add	r1, sp, #16
   dac44:	f7ff fa96 	bl	da174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dac48:	9500      	str	r5, [sp, #0]
   dac4a:	fa5f f38a 	uxtb.w	r3, sl
   dac4e:	464a      	mov	r2, r9
   dac50:	4641      	mov	r1, r8
   dac52:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   dac54:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dac56:	f7fe fe57 	bl	d9908 <spark_send_event>
   dac5a:	b920      	cbnz	r0, dac66 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   dac5c:	9b03      	ldr	r3, [sp, #12]
   dac5e:	785b      	ldrb	r3, [r3, #1]
   dac60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dac64:	b183      	cbz	r3, dac88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   dac66:	9b03      	ldr	r3, [sp, #12]
   dac68:	9305      	str	r3, [sp, #20]
   dac6a:	a904      	add	r1, sp, #16
   dac6c:	a806      	add	r0, sp, #24
   dac6e:	f7ff fa81 	bl	da174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   dac72:	a905      	add	r1, sp, #20
   dac74:	4630      	mov	r0, r6
   dac76:	f7ff fe99 	bl	da9ac <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dac7a:	a806      	add	r0, sp, #24
   dac7c:	f7f9 fdac 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dac80:	a804      	add	r0, sp, #16
   dac82:	f7f9 fda9 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dac86:	e013      	b.n	dacb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   dac88:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   dac8c:	a905      	add	r1, sp, #20
   dac8e:	a803      	add	r0, sp, #12
   dac90:	9205      	str	r2, [sp, #20]
   dac92:	f8ad 3018 	strh.w	r3, [sp, #24]
   dac96:	f7ff fefd 	bl	daa94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dac9a:	a805      	add	r0, sp, #20
   dac9c:	f7ff fe5c 	bl	da958 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   daca0:	a805      	add	r0, sp, #20
   daca2:	9909      	ldr	r1, [sp, #36]	; 0x24
   daca4:	f7ff fe93 	bl	da9ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   daca8:	a806      	add	r0, sp, #24
   dacaa:	f7f9 fd95 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dacae:	e7da      	b.n	dac66 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   dacb0:	4630      	mov	r0, r6
   dacb2:	b00b      	add	sp, #44	; 0x2c
   dacb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dacb8:	000dae2d 	.word	0x000dae2d

000dacbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dacbc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dacbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dacc0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dacc2:	d006      	beq.n	dacd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   dacc4:	2a03      	cmp	r2, #3
   dacc6:	d017      	beq.n	dacf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   dacc8:	2a01      	cmp	r2, #1
   dacca:	d122      	bne.n	dad12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   daccc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dacce:	6003      	str	r3, [r0, #0]
	      break;
   dacd0:	e01f      	b.n	dad12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dacd2:	2018      	movs	r0, #24
   dacd4:	680e      	ldr	r6, [r1, #0]
   dacd6:	f7f9 f9e0 	bl	d409a <_Znwj>
   dacda:	4605      	mov	r5, r0
   dacdc:	b150      	cbz	r0, dacf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dacde:	4631      	mov	r1, r6
   dace0:	f7ff fec8 	bl	daa74 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dace4:	6930      	ldr	r0, [r6, #16]
   dace6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dacea:	b108      	cbz	r0, dacf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   dacec:	f003 fffa 	bl	dece4 <strdup>
   dacf0:	6128      	str	r0, [r5, #16]
   dacf2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dacf4:	6025      	str	r5, [r4, #0]
   dacf6:	e00c      	b.n	dad12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dacf8:	6804      	ldr	r4, [r0, #0]
   dacfa:	b154      	cbz	r4, dad12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   dacfc:	f104 0010 	add.w	r0, r4, #16
   dad00:	f7ff fe2a 	bl	da958 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dad04:	4620      	mov	r0, r4
   dad06:	f7f9 fae5 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dad0a:	2118      	movs	r1, #24
   dad0c:	4620      	mov	r0, r4
   dad0e:	f000 fdc5 	bl	db89c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dad12:	2000      	movs	r0, #0
   dad14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dad16 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dad16:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dad18:	2300      	movs	r3, #0
   dad1a:	6083      	str	r3, [r0, #8]
   dad1c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dad1e:	4604      	mov	r4, r0
   dad20:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dad22:	b12b      	cbz	r3, dad30 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dad24:	2202      	movs	r2, #2
   dad26:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dad28:	68eb      	ldr	r3, [r5, #12]
   dad2a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dad2c:	68ab      	ldr	r3, [r5, #8]
   dad2e:	60a3      	str	r3, [r4, #8]
	}
    }
   dad30:	4620      	mov	r0, r4
   dad32:	bd38      	pop	{r3, r4, r5, pc}

000dad34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   dad34:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dad36:	b570      	push	{r4, r5, r6, lr}
   dad38:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   dad3a:	d006      	beq.n	dad4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   dad3c:	2a03      	cmp	r2, #3
   dad3e:	d011      	beq.n	dad64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   dad40:	2a01      	cmp	r2, #1
   dad42:	d118      	bne.n	dad76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dad44:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dad46:	6003      	str	r3, [r0, #0]
	      break;
   dad48:	e015      	b.n	dad76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dad4a:	2014      	movs	r0, #20
   dad4c:	680e      	ldr	r6, [r1, #0]
   dad4e:	f7f9 f9a4 	bl	d409a <_Znwj>
   dad52:	4605      	mov	r5, r0
   dad54:	b120      	cbz	r0, dad60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dad56:	4631      	mov	r1, r6
   dad58:	f7ff ffdd 	bl	dad16 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dad5c:	7c33      	ldrb	r3, [r6, #16]
   dad5e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   dad60:	6025      	str	r5, [r4, #0]
   dad62:	e008      	b.n	dad76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dad64:	6804      	ldr	r4, [r0, #0]
   dad66:	b134      	cbz	r4, dad76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dad68:	4620      	mov	r0, r4
   dad6a:	f7f9 fab3 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   dad6e:	2114      	movs	r1, #20
   dad70:	4620      	mov	r0, r4
   dad72:	f000 fd93 	bl	db89c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   dad76:	2000      	movs	r0, #0
   dad78:	bd70      	pop	{r4, r5, r6, pc}
	...

000dad7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   dad7c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dad7e:	2300      	movs	r3, #0
   dad80:	b087      	sub	sp, #28
   dad82:	460c      	mov	r4, r1
   dad84:	f3bf 8f5f 	dmb	sy
   dad88:	e850 6f00 	ldrex	r6, [r0]
   dad8c:	e840 3200 	strex	r2, r3, [r0]
   dad90:	2a00      	cmp	r2, #0
   dad92:	d1f9      	bne.n	dad88 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   dad94:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dad98:	2e00      	cmp	r6, #0
   dad9a:	d03f      	beq.n	dae1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dad9c:	4618      	mov	r0, r3
   dad9e:	f7fe fd07 	bl	d97b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dada2:	4607      	mov	r7, r0
   dada4:	b120      	cbz	r0, dadb0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dada6:	4621      	mov	r1, r4
   dada8:	4630      	mov	r0, r6
   dadaa:	f7ff fe53 	bl	daa54 <_ZNKSt8functionIFvRKbEEclES1_>
   dadae:	e02e      	b.n	dae0e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dadb0:	4631      	mov	r1, r6
   dadb2:	a801      	add	r0, sp, #4
   dadb4:	f7ff ffaf 	bl	dad16 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dadb8:	7823      	ldrb	r3, [r4, #0]
   dadba:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dadbe:	2010      	movs	r0, #16
   dadc0:	f7f9 f96b 	bl	d409a <_Znwj>
   dadc4:	4605      	mov	r5, r0
   dadc6:	b1d0      	cbz	r0, dadfe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dadc8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dadca:	2014      	movs	r0, #20
   dadcc:	f7f9 f965 	bl	d409a <_Znwj>
   dadd0:	4604      	mov	r4, r0
   dadd2:	b178      	cbz	r0, dadf4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dadd4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dadd6:	4601      	mov	r1, r0
   dadd8:	a801      	add	r0, sp, #4
   dadda:	f7ff fcf8 	bl	da7ce <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadde:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   dade0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dade2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dade4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dade6:	9203      	str	r2, [sp, #12]
   dade8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dadea:	60e3      	str	r3, [r4, #12]
   dadec:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dadf0:	9204      	str	r2, [sp, #16]
   dadf2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dadf4:	4b0a      	ldr	r3, [pc, #40]	; (dae20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   dadf6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dadf8:	4b0a      	ldr	r3, [pc, #40]	; (dae24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dadfa:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dadfc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dadfe:	a801      	add	r0, sp, #4
   dae00:	f7f9 fa68 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dae04:	2200      	movs	r2, #0
   dae06:	4629      	mov	r1, r5
   dae08:	4807      	ldr	r0, [pc, #28]	; (dae28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   dae0a:	f7fe fcd9 	bl	d97c0 <application_thread_invoke>
   dae0e:	4630      	mov	r0, r6
   dae10:	f7f9 fa60 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dae14:	2110      	movs	r1, #16
   dae16:	4630      	mov	r0, r6
   dae18:	f000 fd40 	bl	db89c <_ZdlPvj>
        }
    }
   dae1c:	b007      	add	sp, #28
   dae1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dae20:	000daa67 	.word	0x000daa67
   dae24:	000dad35 	.word	0x000dad35
   dae28:	000db275 	.word	0x000db275

000dae2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dae2c:	b530      	push	{r4, r5, lr}
   dae2e:	b085      	sub	sp, #20
   dae30:	4604      	mov	r4, r0
   dae32:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dae34:	4668      	mov	r0, sp
   dae36:	4611      	mov	r1, r2
   dae38:	f7ff fdc9 	bl	da9ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dae3c:	b17c      	cbz	r4, dae5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   dae3e:	b224      	sxth	r4, r4
   dae40:	4628      	mov	r0, r5
   dae42:	b10d      	cbz	r5, dae48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   dae44:	f003 ff4e 	bl	dece4 <strdup>
   dae48:	9002      	str	r0, [sp, #8]
   dae4a:	a902      	add	r1, sp, #8
   dae4c:	4668      	mov	r0, sp
   dae4e:	f8ad 400c 	strh.w	r4, [sp, #12]
   dae52:	f7ff fe1f 	bl	daa94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dae56:	a802      	add	r0, sp, #8
   dae58:	f7ff fd7e 	bl	da958 <_ZN8particle5ErrorD1Ev>
   dae5c:	e01d      	b.n	dae9a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   dae5e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dae60:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dae64:	f04f 0201 	mov.w	r2, #1
   dae68:	e8d0 3f4f 	ldrexb	r3, [r0]
   dae6c:	42a3      	cmp	r3, r4
   dae6e:	d103      	bne.n	dae78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   dae70:	e8c0 2f41 	strexb	r1, r2, [r0]
   dae74:	2900      	cmp	r1, #0
   dae76:	d1f7      	bne.n	dae68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   dae78:	d002      	beq.n	dae80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   dae7a:	f88d 3008 	strb.w	r3, [sp, #8]
   dae7e:	e00c      	b.n	dae9a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   dae80:	f110 010c 	adds.w	r1, r0, #12
   dae84:	f04f 0301 	mov.w	r3, #1
   dae88:	bf18      	it	ne
   dae8a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dae8c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   dae90:	3004      	adds	r0, #4
   dae92:	f800 3c03 	strb.w	r3, [r0, #-3]
   dae96:	f7ff ff71 	bl	dad7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   dae9a:	a801      	add	r0, sp, #4
   dae9c:	f7f9 fc9c 	bl	d47d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   daea0:	b005      	add	sp, #20
   daea2:	bd30      	pop	{r4, r5, pc}

000daea4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   daea4:	4770      	bx	lr

000daea6 <_ZN9IPAddressD0Ev>:
   daea6:	b510      	push	{r4, lr}
   daea8:	2118      	movs	r1, #24
   daeaa:	4604      	mov	r4, r0
   daeac:	f000 fcf6 	bl	db89c <_ZdlPvj>
   daeb0:	4620      	mov	r0, r4
   daeb2:	bd10      	pop	{r4, pc}

000daeb4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   daeb4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   daeb6:	7d03      	ldrb	r3, [r0, #20]
   daeb8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   daeba:	b08d      	sub	sp, #52	; 0x34
   daebc:	460e      	mov	r6, r1
   daebe:	f100 0704 	add.w	r7, r0, #4
   daec2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   daec6:	d002      	beq.n	daece <_ZNK9IPAddress7printToER5Print+0x1a>
   daec8:	f100 0508 	add.w	r5, r0, #8
   daecc:	e018      	b.n	daf00 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   daece:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   daed0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   daed2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   daed6:	232f      	movs	r3, #47	; 0x2f
   daed8:	462a      	mov	r2, r5
   daeda:	200a      	movs	r0, #10
   daedc:	f7fe fb46 	bl	d956c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   daee0:	4628      	mov	r0, r5
   daee2:	f004 fc2f 	bl	df744 <strlen>
   daee6:	6833      	ldr	r3, [r6, #0]
   daee8:	4602      	mov	r2, r0
   daeea:	68db      	ldr	r3, [r3, #12]
   daeec:	4629      	mov	r1, r5
   daeee:	4630      	mov	r0, r6
   daef0:	4798      	blx	r3
   daef2:	e00f      	b.n	daf14 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   daef4:	b124      	cbz	r4, daf00 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   daef6:	212e      	movs	r1, #46	; 0x2e
   daef8:	4630      	mov	r0, r6
   daefa:	f7ff f971 	bl	da1e0 <_ZN5Print5printEc>
   daefe:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   daf00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   daf04:	220a      	movs	r2, #10
   daf06:	4630      	mov	r0, r6
   daf08:	f7ff f989 	bl	da21e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   daf0c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   daf0e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   daf10:	d1f0      	bne.n	daef4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   daf12:	4620      	mov	r0, r4
    }
    return n;
}
   daf14:	b00d      	add	sp, #52	; 0x34
   daf16:	bdf0      	pop	{r4, r5, r6, r7, pc}

000daf18 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   daf18:	b510      	push	{r4, lr}
   daf1a:	4b05      	ldr	r3, [pc, #20]	; (daf30 <_ZN9IPAddressC1Ev+0x18>)
   daf1c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   daf1e:	2211      	movs	r2, #17
   daf20:	f840 3b04 	str.w	r3, [r0], #4
   daf24:	2100      	movs	r1, #0
   daf26:	f003 fc3f 	bl	de7a8 <memset>
{
    clear();
}
   daf2a:	4620      	mov	r0, r4
   daf2c:	bd10      	pop	{r4, pc}
   daf2e:	bf00      	nop
   daf30:	000e0770 	.word	0x000e0770

000daf34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   daf34:	4603      	mov	r3, r0
   daf36:	4a07      	ldr	r2, [pc, #28]	; (daf54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   daf38:	b510      	push	{r4, lr}
   daf3a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   daf3e:	f101 0210 	add.w	r2, r1, #16
   daf42:	f851 4b04 	ldr.w	r4, [r1], #4
   daf46:	f843 4b04 	str.w	r4, [r3], #4
   daf4a:	4291      	cmp	r1, r2
   daf4c:	d1f9      	bne.n	daf42 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   daf4e:	780a      	ldrb	r2, [r1, #0]
   daf50:	701a      	strb	r2, [r3, #0]
}
   daf52:	bd10      	pop	{r4, pc}
   daf54:	000e0770 	.word	0x000e0770

000daf58 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   daf58:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   daf5a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   daf5e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   daf62:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   daf66:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   daf6a:	2304      	movs	r3, #4
   daf6c:	6041      	str	r1, [r0, #4]
   daf6e:	7503      	strb	r3, [r0, #20]
   daf70:	bd10      	pop	{r4, pc}

000daf72 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   daf72:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   daf74:	780d      	ldrb	r5, [r1, #0]
   daf76:	788b      	ldrb	r3, [r1, #2]
   daf78:	784a      	ldrb	r2, [r1, #1]
   daf7a:	78c9      	ldrb	r1, [r1, #3]
   daf7c:	9100      	str	r1, [sp, #0]
   daf7e:	4629      	mov	r1, r5
   daf80:	f7ff ffea 	bl	daf58 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   daf84:	b003      	add	sp, #12
   daf86:	bd30      	pop	{r4, r5, pc}

000daf88 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   daf88:	7441      	strb	r1, [r0, #17]
   daf8a:	4770      	bx	lr

000daf8c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   daf8c:	4770      	bx	lr

000daf8e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   daf8e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   daf90:	2100      	movs	r1, #0
   daf92:	7c00      	ldrb	r0, [r0, #16]
   daf94:	f7fe fbca 	bl	d972c <HAL_USB_USART_Receive_Data>
}
   daf98:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   daf9c:	bf28      	it	cs
   daf9e:	f04f 30ff 	movcs.w	r0, #4294967295
   dafa2:	bd08      	pop	{r3, pc}

000dafa4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   dafa4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dafa6:	2101      	movs	r1, #1
   dafa8:	7c00      	ldrb	r0, [r0, #16]
   dafaa:	f7fe fbbf 	bl	d972c <HAL_USB_USART_Receive_Data>
}
   dafae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dafb2:	bf28      	it	cs
   dafb4:	f04f 30ff 	movcs.w	r0, #4294967295
   dafb8:	bd08      	pop	{r3, pc}

000dafba <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   dafba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dafbc:	7c00      	ldrb	r0, [r0, #16]
   dafbe:	f7fe fbad 	bl	d971c <HAL_USB_USART_Available_Data_For_Write>
}
   dafc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dafc6:	bd08      	pop	{r3, pc}

000dafc8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   dafc8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dafca:	7c00      	ldrb	r0, [r0, #16]
   dafcc:	f7fe fb9e 	bl	d970c <HAL_USB_USART_Available_Data>
}
   dafd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dafd4:	bd08      	pop	{r3, pc}

000dafd6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   dafd6:	7c00      	ldrb	r0, [r0, #16]
   dafd8:	f7fe bbb8 	b.w	d974c <HAL_USB_USART_Flush_Data>

000dafdc <_ZN9USBSerialD0Ev>:
   dafdc:	b510      	push	{r4, lr}
   dafde:	2114      	movs	r1, #20
   dafe0:	4604      	mov	r4, r0
   dafe2:	f000 fc5b 	bl	db89c <_ZdlPvj>
   dafe6:	4620      	mov	r0, r4
   dafe8:	bd10      	pop	{r4, pc}

000dafea <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dafea:	b538      	push	{r3, r4, r5, lr}
   dafec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dafee:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   daff0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   daff2:	f7fe fb93 	bl	d971c <HAL_USB_USART_Available_Data_For_Write>
   daff6:	2800      	cmp	r0, #0
   daff8:	dc01      	bgt.n	daffe <_ZN9USBSerial5writeEh+0x14>
   daffa:	7c60      	ldrb	r0, [r4, #17]
   daffc:	b128      	cbz	r0, db00a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   daffe:	4629      	mov	r1, r5
   db000:	7c20      	ldrb	r0, [r4, #16]
   db002:	f7fe fb9b 	bl	d973c <HAL_USB_USART_Send_Data>
   db006:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   db00a:	bd38      	pop	{r3, r4, r5, pc}

000db00c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db00c:	b510      	push	{r4, lr}
   db00e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   db010:	2300      	movs	r3, #0
   db012:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   db014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db018:	60a3      	str	r3, [r4, #8]
   db01a:	4b05      	ldr	r3, [pc, #20]	; (db030 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db01c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   db01e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db020:	4608      	mov	r0, r1
{
  _serial = serial;
   db022:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   db024:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   db026:	4611      	mov	r1, r2
   db028:	f7fe fb60 	bl	d96ec <HAL_USB_USART_Init>
}
   db02c:	4620      	mov	r0, r4
   db02e:	bd10      	pop	{r4, pc}
   db030:	000e0784 	.word	0x000e0784

000db034 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db034:	2200      	movs	r2, #0
   db036:	7c00      	ldrb	r0, [r0, #16]
   db038:	f7fe bb60 	b.w	d96fc <HAL_USB_USART_Begin>

000db03c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db03c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db03e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db040:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db042:	2100      	movs	r1, #0
   db044:	f003 fbb0 	bl	de7a8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   db048:	4620      	mov	r0, r4
   db04a:	bd10      	pop	{r4, pc}

000db04c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   db04c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db04e:	4d0e      	ldr	r5, [pc, #56]	; (db088 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   db050:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db052:	a801      	add	r0, sp, #4
   db054:	f7ff fff2 	bl	db03c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db058:	6829      	ldr	r1, [r5, #0]
   db05a:	f011 0401 	ands.w	r4, r1, #1
   db05e:	d110      	bne.n	db082 <_Z16_fetch_usbserialv+0x36>
   db060:	4628      	mov	r0, r5
   db062:	f7f9 f820 	bl	d40a6 <__cxa_guard_acquire>
   db066:	b160      	cbz	r0, db082 <_Z16_fetch_usbserialv+0x36>
   db068:	aa01      	add	r2, sp, #4
   db06a:	4621      	mov	r1, r4
   db06c:	4807      	ldr	r0, [pc, #28]	; (db08c <_Z16_fetch_usbserialv+0x40>)
   db06e:	f7ff ffcd 	bl	db00c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db072:	4628      	mov	r0, r5
   db074:	f7f9 f81c 	bl	d40b0 <__cxa_guard_release>
   db078:	4a05      	ldr	r2, [pc, #20]	; (db090 <_Z16_fetch_usbserialv+0x44>)
   db07a:	4906      	ldr	r1, [pc, #24]	; (db094 <_Z16_fetch_usbserialv+0x48>)
   db07c:	4803      	ldr	r0, [pc, #12]	; (db08c <_Z16_fetch_usbserialv+0x40>)
   db07e:	f000 fbff 	bl	db880 <__aeabi_atexit>
	return _usbserial;
}
   db082:	4802      	ldr	r0, [pc, #8]	; (db08c <_Z16_fetch_usbserialv+0x40>)
   db084:	b007      	add	sp, #28
   db086:	bd30      	pop	{r4, r5, pc}
   db088:	2003e25c 	.word	0x2003e25c
   db08c:	2003e260 	.word	0x2003e260
   db090:	2003be9c 	.word	0x2003be9c
   db094:	000daf8d 	.word	0x000daf8d

000db098 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   db098:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
   db09a:	b510      	push	{r4, lr}
   db09c:	b90a      	cbnz	r2, db0a2 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
   db09e:	f000 fda1 	bl	dbbe4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db0a2:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
   db0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   db0a8:	4718      	bx	r3

000db0aa <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   db0aa:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   db0ac:	2300      	movs	r3, #0
   db0ae:	6083      	str	r3, [r0, #8]
   db0b0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   db0b2:	4604      	mov	r4, r0
   db0b4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   db0b6:	b12b      	cbz	r3, db0c4 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   db0b8:	2202      	movs	r2, #2
   db0ba:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   db0bc:	68eb      	ldr	r3, [r5, #12]
   db0be:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   db0c0:	68ab      	ldr	r3, [r5, #8]
   db0c2:	60a3      	str	r3, [r4, #8]
	}
    }
   db0c4:	4620      	mov	r0, r4
   db0c6:	bd38      	pop	{r3, r4, r5, pc}

000db0c8 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   db0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
   db0ca:	4b0d      	ldr	r3, [pc, #52]	; (db100 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
   db0cc:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
   db0d0:	4606      	mov	r6, r0
   db0d2:	460f      	mov	r7, r1
   db0d4:	461c      	mov	r4, r3
    delete handlers[pin];
   db0d6:	b135      	cbz	r5, db0e6 <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   db0d8:	4628      	mov	r0, r5
   db0da:	f7f9 f8fb 	bl	d42d4 <_ZNSt14_Function_baseD1Ev>
   db0de:	2110      	movs	r1, #16
   db0e0:	4628      	mov	r0, r5
   db0e2:	f000 fbdb 	bl	db89c <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
   db0e6:	2010      	movs	r0, #16
   db0e8:	f7f8 ffd7 	bl	d409a <_Znwj>
   db0ec:	4605      	mov	r5, r0
   db0ee:	b110      	cbz	r0, db0f6 <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
   db0f0:	4639      	mov	r1, r7
   db0f2:	f7ff ffda 	bl	db0aa <_ZNSt8functionIFvvEEC1ERKS1_>
   db0f6:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
   db0fa:	4628      	mov	r0, r5
   db0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db0fe:	bf00      	nop
   db100:	2003e274 	.word	0x2003e274

000db104 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   db104:	b5f0      	push	{r4, r5, r6, r7, lr}
   db106:	460c      	mov	r4, r1
   db108:	b085      	sub	sp, #20
   db10a:	4605      	mov	r5, r0
   db10c:	4617      	mov	r7, r2
   db10e:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
   db110:	f7fe f934 	bl	d937c <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
   db114:	4621      	mov	r1, r4
   db116:	4628      	mov	r0, r5
   db118:	f7ff ffd6 	bl	db0c8 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
   db11c:	4604      	mov	r4, r0
   db11e:	b1c8      	cbz	r0, db154 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
        HAL_InterruptExtraConfiguration extra = {0};
   db120:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db122:	2304      	movs	r3, #4
  if (priority >= 0) {
   db124:	428e      	cmp	r6, r1
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
   db126:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   db128:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   db12c:	bfa5      	ittet	ge
   db12e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   db132:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   db136:	460b      	movlt	r3, r1
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   db138:	ab03      	addge	r3, sp, #12
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db13a:	9300      	str	r3, [sp, #0]
   db13c:	4602      	mov	r2, r0
   db13e:	463b      	mov	r3, r7
   db140:	4907      	ldr	r1, [pc, #28]	; (db160 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x5c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   db142:	bfa8      	it	ge
   db144:	f88d 600d 	strbge.w	r6, [sp, #13]
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
   db148:	4628      	mov	r0, r5
   db14a:	f7fe f90f 	bl	d936c <HAL_Interrupts_Attach>
   db14e:	b108      	cbz	r0, db154 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
            return false;
   db150:	2000      	movs	r0, #0
   db152:	e002      	b.n	db15a <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x56>
        }
    }
    return handler!=NULL;
   db154:	1c20      	adds	r0, r4, #0
   db156:	bf18      	it	ne
   db158:	2001      	movne	r0, #1
}
   db15a:	b005      	add	sp, #20
   db15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db15e:	bf00      	nop
   db160:	000db099 	.word	0x000db099

000db164 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   db164:	4770      	bx	lr

000db166 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db166:	7441      	strb	r1, [r0, #17]
   db168:	4770      	bx	lr

000db16a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   db16a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   db16c:	7c00      	ldrb	r0, [r0, #16]
   db16e:	f7fe fa3d 	bl	d95ec <HAL_USART_Available_Data_For_Write>
}
   db172:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db176:	bd08      	pop	{r3, pc}

000db178 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   db178:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   db17a:	7c00      	ldrb	r0, [r0, #16]
   db17c:	f7fe fa0e 	bl	d959c <HAL_USART_Available_Data>
}
   db180:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db184:	bd08      	pop	{r3, pc}

000db186 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   db186:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   db188:	7c00      	ldrb	r0, [r0, #16]
   db18a:	f7fe fa17 	bl	d95bc <HAL_USART_Peek_Data>
}
   db18e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db192:	bf28      	it	cs
   db194:	f04f 30ff 	movcs.w	r0, #4294967295
   db198:	bd08      	pop	{r3, pc}

000db19a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   db19a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   db19c:	7c00      	ldrb	r0, [r0, #16]
   db19e:	f7fe fa05 	bl	d95ac <HAL_USART_Read_Data>
}
   db1a2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   db1a6:	bf28      	it	cs
   db1a8:	f04f 30ff 	movcs.w	r0, #4294967295
   db1ac:	bd08      	pop	{r3, pc}

000db1ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   db1ae:	7c00      	ldrb	r0, [r0, #16]
   db1b0:	f7fe ba0c 	b.w	d95cc <HAL_USART_Flush_Data>

000db1b4 <_ZN11USARTSerialD0Ev>:
   db1b4:	b510      	push	{r4, lr}
   db1b6:	2114      	movs	r1, #20
   db1b8:	4604      	mov	r4, r0
   db1ba:	f000 fb6f 	bl	db89c <_ZdlPvj>
   db1be:	4620      	mov	r0, r4
   db1c0:	bd10      	pop	{r4, pc}

000db1c2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db1c2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db1c4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   db1c6:	4604      	mov	r4, r0
   db1c8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db1ca:	b925      	cbnz	r5, db1d6 <_ZN11USARTSerial5writeEh+0x14>
   db1cc:	7c00      	ldrb	r0, [r0, #16]
   db1ce:	f7fe fa0d 	bl	d95ec <HAL_USART_Available_Data_For_Write>
   db1d2:	2800      	cmp	r0, #0
   db1d4:	dd05      	ble.n	db1e2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db1d6:	4631      	mov	r1, r6
   db1d8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db1da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db1de:	f7fe b9d5 	b.w	d958c <HAL_USART_Write_Data>
  }
  return 0;
}
   db1e2:	4628      	mov	r0, r5
   db1e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000db1e8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   db1e8:	b510      	push	{r4, lr}
   db1ea:	4604      	mov	r4, r0
   db1ec:	4608      	mov	r0, r1
   db1ee:	4611      	mov	r1, r2
   db1f0:	2200      	movs	r2, #0
   db1f2:	6062      	str	r2, [r4, #4]
   db1f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db1f8:	60a2      	str	r2, [r4, #8]
   db1fa:	4a05      	ldr	r2, [pc, #20]	; (db210 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   db1fc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   db1fe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   db200:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   db202:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   db204:	461a      	mov	r2, r3
   db206:	f7fe f9b9 	bl	d957c <HAL_USART_Init>
}
   db20a:	4620      	mov	r0, r4
   db20c:	bd10      	pop	{r4, pc}
   db20e:	bf00      	nop
   db210:	000e07b4 	.word	0x000e07b4

000db214 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   db214:	2300      	movs	r3, #0
   db216:	7c00      	ldrb	r0, [r0, #16]
   db218:	f7fe b9f0 	b.w	d95fc <HAL_USART_BeginConfig>

000db21c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   db21c:	2200      	movs	r2, #0
   db21e:	f7ff bff9 	b.w	db214 <_ZN11USARTSerial5beginEmm>

000db222 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   db222:	7c00      	ldrb	r0, [r0, #16]
   db224:	f7fe b9da 	b.w	d95dc <HAL_USART_Is_Enabled>

000db228 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db228:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db22a:	4d0c      	ldr	r5, [pc, #48]	; (db25c <_Z22__fetch_global_Serial1v+0x34>)
   db22c:	6829      	ldr	r1, [r5, #0]
   db22e:	f011 0401 	ands.w	r4, r1, #1
   db232:	d111      	bne.n	db258 <_Z22__fetch_global_Serial1v+0x30>
   db234:	4628      	mov	r0, r5
   db236:	f7f8 ff36 	bl	d40a6 <__cxa_guard_acquire>
   db23a:	b168      	cbz	r0, db258 <_Z22__fetch_global_Serial1v+0x30>
   db23c:	4a08      	ldr	r2, [pc, #32]	; (db260 <_Z22__fetch_global_Serial1v+0x38>)
   db23e:	4b09      	ldr	r3, [pc, #36]	; (db264 <_Z22__fetch_global_Serial1v+0x3c>)
   db240:	4809      	ldr	r0, [pc, #36]	; (db268 <_Z22__fetch_global_Serial1v+0x40>)
   db242:	4621      	mov	r1, r4
   db244:	f7ff ffd0 	bl	db1e8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   db248:	4628      	mov	r0, r5
   db24a:	f7f8 ff31 	bl	d40b0 <__cxa_guard_release>
   db24e:	4a07      	ldr	r2, [pc, #28]	; (db26c <_Z22__fetch_global_Serial1v+0x44>)
   db250:	4907      	ldr	r1, [pc, #28]	; (db270 <_Z22__fetch_global_Serial1v+0x48>)
   db252:	4805      	ldr	r0, [pc, #20]	; (db268 <_Z22__fetch_global_Serial1v+0x40>)
   db254:	f000 fb14 	bl	db880 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db258:	4803      	ldr	r0, [pc, #12]	; (db268 <_Z22__fetch_global_Serial1v+0x40>)
   db25a:	bd38      	pop	{r3, r4, r5, pc}
   db25c:	2003e39c 	.word	0x2003e39c
   db260:	2003e3a0 	.word	0x2003e3a0
   db264:	2003e318 	.word	0x2003e318
   db268:	2003e304 	.word	0x2003e304
   db26c:	2003be9c 	.word	0x2003be9c
   db270:	000db165 	.word	0x000db165

000db274 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   db274:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   db276:	6883      	ldr	r3, [r0, #8]
   db278:	4604      	mov	r4, r0
   db27a:	b90b      	cbnz	r3, db280 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   db27c:	f000 fcb2 	bl	dbbe4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   db280:	68c3      	ldr	r3, [r0, #12]
   db282:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db284:	68a3      	ldr	r3, [r4, #8]
   db286:	b11b      	cbz	r3, db290 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db288:	2203      	movs	r2, #3
   db28a:	4621      	mov	r1, r4
   db28c:	4620      	mov	r0, r4
   db28e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   db290:	4620      	mov	r0, r4
   db292:	2110      	movs	r1, #16
}
   db294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   db298:	f000 bb00 	b.w	db89c <_ZdlPvj>

000db29c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   db29c:	4770      	bx	lr

000db29e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   db29e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db2a0:	4606      	mov	r6, r0
   db2a2:	4615      	mov	r5, r2
   db2a4:	460c      	mov	r4, r1
   db2a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db2a8:	42bc      	cmp	r4, r7
   db2aa:	d006      	beq.n	db2ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   db2ac:	6833      	ldr	r3, [r6, #0]
   db2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   db2b2:	689b      	ldr	r3, [r3, #8]
   db2b4:	4630      	mov	r0, r6
   db2b6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   db2b8:	e7f6      	b.n	db2a8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   db2ba:	4628      	mov	r0, r5
   db2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db2be <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   db2be:	2200      	movs	r2, #0
   db2c0:	7c00      	ldrb	r0, [r0, #16]
   db2c2:	f7fe b9bb 	b.w	d963c <HAL_I2C_Write_Data>

000db2c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   db2c6:	2100      	movs	r1, #0
   db2c8:	7c00      	ldrb	r0, [r0, #16]
   db2ca:	f7fe b9bf 	b.w	d964c <HAL_I2C_Available_Data>

000db2ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   db2ce:	2100      	movs	r1, #0
   db2d0:	7c00      	ldrb	r0, [r0, #16]
   db2d2:	f7fe b9c3 	b.w	d965c <HAL_I2C_Read_Data>

000db2d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   db2d6:	2100      	movs	r1, #0
   db2d8:	7c00      	ldrb	r0, [r0, #16]
   db2da:	f7fe b9c7 	b.w	d966c <HAL_I2C_Peek_Data>

000db2de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   db2de:	2100      	movs	r1, #0
   db2e0:	7c00      	ldrb	r0, [r0, #16]
   db2e2:	f7fe b9cb 	b.w	d967c <HAL_I2C_Flush_Data>

000db2e6 <_ZN7TwoWireD0Ev>:
   db2e6:	b510      	push	{r4, lr}
   db2e8:	2114      	movs	r1, #20
   db2ea:	4604      	mov	r4, r0
   db2ec:	f000 fad6 	bl	db89c <_ZdlPvj>
   db2f0:	4620      	mov	r0, r4
   db2f2:	bd10      	pop	{r4, pc}

000db2f4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   db2f4:	b510      	push	{r4, lr}
   db2f6:	4604      	mov	r4, r0
   db2f8:	2300      	movs	r3, #0
   db2fa:	6063      	str	r3, [r4, #4]
   db2fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db300:	60a3      	str	r3, [r4, #8]
   db302:	4b04      	ldr	r3, [pc, #16]	; (db314 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   db304:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   db306:	4608      	mov	r0, r1
   db308:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   db30a:	4611      	mov	r1, r2
   db30c:	f7fe f9c6 	bl	d969c <HAL_I2C_Init>
}
   db310:	4620      	mov	r0, r4
   db312:	bd10      	pop	{r4, pc}
   db314:	000e07e4 	.word	0x000e07e4

000db318 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   db318:	2300      	movs	r3, #0
   db31a:	461a      	mov	r2, r3
   db31c:	4619      	mov	r1, r3
   db31e:	7c00      	ldrb	r0, [r0, #16]
   db320:	f7fe b974 	b.w	d960c <HAL_I2C_Begin>

000db324 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   db324:	b570      	push	{r4, r5, r6, lr}
   db326:	460c      	mov	r4, r1
   db328:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   db32a:	2514      	movs	r5, #20
   db32c:	4606      	mov	r6, r0
   db32e:	462a      	mov	r2, r5
   db330:	2100      	movs	r1, #0
   db332:	a801      	add	r0, sp, #4
   db334:	f003 fa38 	bl	de7a8 <memset>
   db338:	7823      	ldrb	r3, [r4, #0]
   db33a:	f88d 3008 	strb.w	r3, [sp, #8]
   db33e:	6863      	ldr	r3, [r4, #4]
   db340:	9303      	str	r3, [sp, #12]
   db342:	68e3      	ldr	r3, [r4, #12]
   db344:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   db346:	2200      	movs	r2, #0
   db348:	7a23      	ldrb	r3, [r4, #8]
   db34a:	7c30      	ldrb	r0, [r6, #16]
   db34c:	f8ad 5004 	strh.w	r5, [sp, #4]
   db350:	a901      	add	r1, sp, #4
   db352:	9305      	str	r3, [sp, #20]
   db354:	f7fe f9c2 	bl	d96dc <HAL_I2C_Request_Data_Ex>
}
   db358:	b006      	add	sp, #24
   db35a:	bd70      	pop	{r4, r5, r6, pc}

000db35c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   db35c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   db35e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db360:	f88d 1000 	strb.w	r1, [sp]
   db364:	f04f 0164 	mov.w	r1, #100	; 0x64
   db368:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   db36a:	bf18      	it	ne
   db36c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   db36e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   db370:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   db372:	f88d 3008 	strb.w	r3, [sp, #8]
   db376:	f7ff ffd5 	bl	db324 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   db37a:	b005      	add	sp, #20
   db37c:	f85d fb04 	ldr.w	pc, [sp], #4

000db380 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   db380:	2301      	movs	r3, #1
   db382:	f7ff bfeb 	b.w	db35c <_ZN7TwoWire11requestFromEhjh>

000db386 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   db386:	2200      	movs	r2, #0
   db388:	7c00      	ldrb	r0, [r0, #16]
   db38a:	f7fe b947 	b.w	d961c <HAL_I2C_Begin_Transmission>

000db38e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   db38e:	b2c9      	uxtb	r1, r1
   db390:	f7ff bff9 	b.w	db386 <_ZN7TwoWire17beginTransmissionEh>

000db394 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   db394:	2200      	movs	r2, #0
   db396:	7c00      	ldrb	r0, [r0, #16]
   db398:	f7fe b948 	b.w	d962c <HAL_I2C_End_Transmission>

000db39c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   db39c:	2101      	movs	r1, #1
   db39e:	f7ff bff9 	b.w	db394 <_ZN7TwoWire15endTransmissionEh>

000db3a2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   db3a2:	2100      	movs	r1, #0
   db3a4:	7c00      	ldrb	r0, [r0, #16]
   db3a6:	f7fe b971 	b.w	d968c <HAL_I2C_Is_Enabled>

000db3aa <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  HAL_I2C_Reset(_i2c, 0, NULL);
   db3aa:	2200      	movs	r2, #0
   db3ac:	4611      	mov	r1, r2
   db3ae:	7c00      	ldrb	r0, [r0, #16]
   db3b0:	f7fe b97c 	b.w	d96ac <HAL_I2C_Reset>

000db3b4 <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
   db3b4:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   db3b6:	2100      	movs	r1, #0
   db3b8:	7c00      	ldrb	r0, [r0, #16]
   db3ba:	f7fe f97f 	bl	d96bc <HAL_I2C_Acquire>
}
   db3be:	fab0 f080 	clz	r0, r0
   db3c2:	0940      	lsrs	r0, r0, #5
   db3c4:	bd08      	pop	{r3, pc}

000db3c6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   db3c6:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   db3c8:	2100      	movs	r1, #0
   db3ca:	7c00      	ldrb	r0, [r0, #16]
   db3cc:	f7fe f97e 	bl	d96cc <HAL_I2C_Release>
}
   db3d0:	fab0 f080 	clz	r0, r0
   db3d4:	0940      	lsrs	r0, r0, #5
   db3d6:	bd08      	pop	{r3, pc}

000db3d8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db3d8:	2200      	movs	r2, #0
   db3da:	4611      	mov	r1, r2
   db3dc:	6840      	ldr	r0, [r0, #4]
   db3de:	f7fe ba53 	b.w	d9888 <network_listening>

000db3e2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db3e2:	2200      	movs	r2, #0
   db3e4:	4611      	mov	r1, r2
   db3e6:	6840      	ldr	r0, [r0, #4]
   db3e8:	f7fe ba66 	b.w	d98b8 <network_get_listen_timeout>

000db3ec <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db3ec:	2200      	movs	r2, #0
   db3ee:	6840      	ldr	r0, [r0, #4]
   db3f0:	f7fe ba5a 	b.w	d98a8 <network_set_listen_timeout>

000db3f4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db3f4:	2200      	movs	r2, #0
   db3f6:	f081 0101 	eor.w	r1, r1, #1
   db3fa:	6840      	ldr	r0, [r0, #4]
   db3fc:	f7fe ba3c 	b.w	d9878 <network_listen>

000db400 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   db400:	2300      	movs	r3, #0
   db402:	461a      	mov	r2, r3
   db404:	2101      	movs	r1, #1
   db406:	6840      	ldr	r0, [r0, #4]
   db408:	f7fe ba2e 	b.w	d9868 <network_off>

000db40c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   db40c:	2300      	movs	r3, #0
   db40e:	461a      	mov	r2, r3
   db410:	4619      	mov	r1, r3
   db412:	6840      	ldr	r0, [r0, #4]
   db414:	f7fe ba20 	b.w	d9858 <network_on>

000db418 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   db418:	2200      	movs	r2, #0
   db41a:	4611      	mov	r1, r2
   db41c:	6840      	ldr	r0, [r0, #4]
   db41e:	f7fe ba13 	b.w	d9848 <network_ready>

000db422 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db422:	2200      	movs	r2, #0
   db424:	4611      	mov	r1, r2
   db426:	6840      	ldr	r0, [r0, #4]
   db428:	f7fe b9fe 	b.w	d9828 <network_connecting>

000db42c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db42c:	2200      	movs	r2, #0
   db42e:	2102      	movs	r1, #2
   db430:	6840      	ldr	r0, [r0, #4]
   db432:	f7fe ba01 	b.w	d9838 <network_disconnect>

000db436 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db436:	2300      	movs	r3, #0
   db438:	461a      	mov	r2, r3
   db43a:	6840      	ldr	r0, [r0, #4]
   db43c:	f7fe b9ec 	b.w	d9818 <network_connect>

000db440 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   db440:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db442:	4605      	mov	r5, r0
   db444:	b188      	cbz	r0, db46a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db446:	6804      	ldr	r4, [r0, #0]
   db448:	b14c      	cbz	r4, db45e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   db44a:	68a3      	ldr	r3, [r4, #8]
   db44c:	b11b      	cbz	r3, db456 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   db44e:	2203      	movs	r2, #3
   db450:	4621      	mov	r1, r4
   db452:	4620      	mov	r0, r4
   db454:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db456:	2110      	movs	r1, #16
   db458:	4620      	mov	r0, r4
   db45a:	f000 fa1f 	bl	db89c <_ZdlPvj>
   db45e:	4628      	mov	r0, r5
   db460:	2114      	movs	r1, #20
      }
   db462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db466:	f000 ba19 	b.w	db89c <_ZdlPvj>
   db46a:	bd38      	pop	{r3, r4, r5, pc}

000db46c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   db46c:	b110      	cbz	r0, db474 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   db46e:	6803      	ldr	r3, [r0, #0]
   db470:	685b      	ldr	r3, [r3, #4]
   db472:	4718      	bx	r3
   db474:	4770      	bx	lr

000db476 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   db476:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   db478:	6803      	ldr	r3, [r0, #0]
   db47a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   db47c:	b1bb      	cbz	r3, db4ae <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   db47e:	6858      	ldr	r0, [r3, #4]
   db480:	f7fe f814 	bl	d94ac <os_thread_is_current>
   db484:	b978      	cbnz	r0, db4a6 <_ZN6ThreadD1Ev+0x30>
   db486:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   db488:	7c5a      	ldrb	r2, [r3, #17]
   db48a:	b912      	cbnz	r2, db492 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   db48c:	6858      	ldr	r0, [r3, #4]
   db48e:	f7fe f81d 	bl	d94cc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   db492:	6823      	ldr	r3, [r4, #0]
   db494:	6858      	ldr	r0, [r3, #4]
   db496:	f7fe f821 	bl	d94dc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   db49a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   db49c:	2300      	movs	r3, #0
   db49e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   db4a0:	b128      	cbz	r0, db4ae <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   db4a2:	f7ff ffcd 	bl	db440 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db4a6:	6820      	ldr	r0, [r4, #0]
   db4a8:	b108      	cbz	r0, db4ae <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   db4aa:	f7ff ffc9 	bl	db440 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   db4ae:	4620      	mov	r0, r4
   db4b0:	bd10      	pop	{r4, pc}

000db4b2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   db4b2:	b538      	push	{r3, r4, r5, lr}
   db4b4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db4b6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   db4ba:	b108      	cbz	r0, db4c0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   db4bc:	f7f8 fdf1 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   db4c0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   db4c4:	b108      	cbz	r0, db4ca <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   db4c6:	f7fe f841 	bl	d954c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db4ca:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   db4ce:	b135      	cbz	r5, db4de <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   db4d0:	4628      	mov	r0, r5
   db4d2:	f7ff ffd0 	bl	db476 <_ZN6ThreadD1Ev>
   db4d6:	2104      	movs	r1, #4
   db4d8:	4628      	mov	r0, r5
   db4da:	f000 f9df 	bl	db89c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   db4de:	6820      	ldr	r0, [r4, #0]
   db4e0:	b108      	cbz	r0, db4e6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   db4e2:	f7ff ffc3 	bl	db46c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   db4e6:	4620      	mov	r0, r4
   db4e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000db4ec <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   db4ec:	b510      	push	{r4, lr}
   db4ee:	4b04      	ldr	r3, [pc, #16]	; (db500 <_ZN5spark9MeshClassD1Ev+0x14>)
   db4f0:	4604      	mov	r4, r0
   db4f2:	f840 3b08 	str.w	r3, [r0], #8
   db4f6:	f7ff ffdc 	bl	db4b2 <_ZN5spark11MeshPublishD1Ev>
   db4fa:	4620      	mov	r0, r4
   db4fc:	bd10      	pop	{r4, pc}
   db4fe:	bf00      	nop
   db500:	000e080c 	.word	0x000e080c

000db504 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   db504:	b538      	push	{r3, r4, r5, lr}
   db506:	4c0e      	ldr	r4, [pc, #56]	; (db540 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   db508:	4b0e      	ldr	r3, [pc, #56]	; (db544 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   db50a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   db50c:	2500      	movs	r5, #0
   db50e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   db510:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   db514:	6063      	str	r3, [r4, #4]
   db516:	60a5      	str	r5, [r4, #8]
   db518:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   db51c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   db520:	f7fe f80c 	bl	d953c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   db524:	4b08      	ldr	r3, [pc, #32]	; (db548 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   db526:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   db52a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   db52e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   db530:	4620      	mov	r0, r4
   db532:	4a06      	ldr	r2, [pc, #24]	; (db54c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   db534:	4906      	ldr	r1, [pc, #24]	; (db550 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   db536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   db53a:	f000 b9a1 	b.w	db880 <__aeabi_atexit>
   db53e:	bf00      	nop
   db540:	2003e424 	.word	0x2003e424
   db544:	000e0874 	.word	0x000e0874
   db548:	000e080c 	.word	0x000e080c
   db54c:	2003be9c 	.word	0x2003be9c
   db550:	000db4ed 	.word	0x000db4ed

000db554 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   db554:	2200      	movs	r2, #0
   db556:	4611      	mov	r1, r2
   db558:	6840      	ldr	r0, [r0, #4]
   db55a:	f7fe b995 	b.w	d9888 <network_listening>

000db55e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   db55e:	2200      	movs	r2, #0
   db560:	4611      	mov	r1, r2
   db562:	6840      	ldr	r0, [r0, #4]
   db564:	f7fe b9a8 	b.w	d98b8 <network_get_listen_timeout>

000db568 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   db568:	2200      	movs	r2, #0
   db56a:	6840      	ldr	r0, [r0, #4]
   db56c:	f7fe b99c 	b.w	d98a8 <network_set_listen_timeout>

000db570 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   db570:	2200      	movs	r2, #0
   db572:	f081 0101 	eor.w	r1, r1, #1
   db576:	6840      	ldr	r0, [r0, #4]
   db578:	f7fe b97e 	b.w	d9878 <network_listen>

000db57c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   db57c:	2300      	movs	r3, #0
   db57e:	461a      	mov	r2, r3
   db580:	4619      	mov	r1, r3
   db582:	6840      	ldr	r0, [r0, #4]
   db584:	f7fe b970 	b.w	d9868 <network_off>

000db588 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   db588:	2300      	movs	r3, #0
   db58a:	461a      	mov	r2, r3
   db58c:	4619      	mov	r1, r3
   db58e:	6840      	ldr	r0, [r0, #4]
   db590:	f7fe b962 	b.w	d9858 <network_on>

000db594 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   db594:	2200      	movs	r2, #0
   db596:	4611      	mov	r1, r2
   db598:	6840      	ldr	r0, [r0, #4]
   db59a:	f7fe b945 	b.w	d9828 <network_connecting>

000db59e <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   db59e:	2200      	movs	r2, #0
   db5a0:	2102      	movs	r1, #2
   db5a2:	6840      	ldr	r0, [r0, #4]
   db5a4:	f7fe b948 	b.w	d9838 <network_disconnect>

000db5a8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   db5a8:	2300      	movs	r3, #0
   db5aa:	461a      	mov	r2, r3
   db5ac:	6840      	ldr	r0, [r0, #4]
   db5ae:	f7fe b933 	b.w	d9818 <network_connect>
	...

000db5b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   db5b4:	4b02      	ldr	r3, [pc, #8]	; (db5c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   db5b6:	2204      	movs	r2, #4
   db5b8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   db5ba:	4a02      	ldr	r2, [pc, #8]	; (db5c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   db5bc:	601a      	str	r2, [r3, #0]
   db5be:	4770      	bx	lr
   db5c0:	2003e5f8 	.word	0x2003e5f8
   db5c4:	000e0840 	.word	0x000e0840

000db5c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   db5c8:	2300      	movs	r3, #0
   db5ca:	461a      	mov	r2, r3
   db5cc:	6840      	ldr	r0, [r0, #4]
   db5ce:	f7fe b923 	b.w	d9818 <network_connect>

000db5d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   db5d2:	2200      	movs	r2, #0
   db5d4:	2102      	movs	r1, #2
   db5d6:	6840      	ldr	r0, [r0, #4]
   db5d8:	f7fe b92e 	b.w	d9838 <network_disconnect>

000db5dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   db5dc:	2200      	movs	r2, #0
   db5de:	4611      	mov	r1, r2
   db5e0:	6840      	ldr	r0, [r0, #4]
   db5e2:	f7fe b921 	b.w	d9828 <network_connecting>

000db5e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   db5e6:	2200      	movs	r2, #0
   db5e8:	4611      	mov	r1, r2
   db5ea:	6840      	ldr	r0, [r0, #4]
   db5ec:	f7fe b92c 	b.w	d9848 <network_ready>

000db5f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   db5f0:	2300      	movs	r3, #0
   db5f2:	461a      	mov	r2, r3
   db5f4:	4619      	mov	r1, r3
   db5f6:	6840      	ldr	r0, [r0, #4]
   db5f8:	f7fe b92e 	b.w	d9858 <network_on>

000db5fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   db5fc:	2300      	movs	r3, #0
   db5fe:	461a      	mov	r2, r3
   db600:	4619      	mov	r1, r3
   db602:	6840      	ldr	r0, [r0, #4]
   db604:	f7fe b930 	b.w	d9868 <network_off>

000db608 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   db608:	2200      	movs	r2, #0
   db60a:	f081 0101 	eor.w	r1, r1, #1
   db60e:	6840      	ldr	r0, [r0, #4]
   db610:	f7fe b932 	b.w	d9878 <network_listen>

000db614 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   db614:	2200      	movs	r2, #0
   db616:	6840      	ldr	r0, [r0, #4]
   db618:	f7fe b946 	b.w	d98a8 <network_set_listen_timeout>

000db61c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   db61c:	2200      	movs	r2, #0
   db61e:	4611      	mov	r1, r2
   db620:	6840      	ldr	r0, [r0, #4]
   db622:	f7fe b949 	b.w	d98b8 <network_get_listen_timeout>

000db626 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   db626:	2200      	movs	r2, #0
   db628:	4611      	mov	r1, r2
   db62a:	6840      	ldr	r0, [r0, #4]
   db62c:	f7fe b92c 	b.w	d9888 <network_listening>

000db630 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   db630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db634:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   db636:	b095      	sub	sp, #84	; 0x54
   db638:	4616      	mov	r6, r2
   db63a:	460d      	mov	r5, r1
   db63c:	4607      	mov	r7, r0
    IPAddress addr;
   db63e:	f7ff fc6b 	bl	daf18 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   db642:	4621      	mov	r1, r4
   db644:	2220      	movs	r2, #32
   db646:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   db648:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   db64a:	f003 f8ad 	bl	de7a8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   db64e:	2340      	movs	r3, #64	; 0x40
   db650:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   db652:	4621      	mov	r1, r4
   db654:	466b      	mov	r3, sp
   db656:	aa0c      	add	r2, sp, #48	; 0x30
   db658:	4630      	mov	r0, r6
   db65a:	f7fd fe57 	bl	d930c <netdb_getaddrinfo>
    if (!r) {
   db65e:	4604      	mov	r4, r0
   db660:	2800      	cmp	r0, #0
   db662:	d144      	bne.n	db6ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db664:	4602      	mov	r2, r0
   db666:	2101      	movs	r1, #1
   db668:	6868      	ldr	r0, [r5, #4]
   db66a:	f7fe f8ed 	bl	d9848 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db66e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   db670:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db672:	4622      	mov	r2, r4
   db674:	6868      	ldr	r0, [r5, #4]
   db676:	f7fe f8e7 	bl	d9848 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db67a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   db67c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   db67e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db680:	2e00      	cmp	r6, #0
   db682:	d034      	beq.n	db6ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   db684:	2900      	cmp	r1, #0
   db686:	d132      	bne.n	db6ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   db688:	6873      	ldr	r3, [r6, #4]
   db68a:	2b02      	cmp	r3, #2
   db68c:	d002      	beq.n	db694 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   db68e:	2b0a      	cmp	r3, #10
   db690:	d009      	beq.n	db6a6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   db692:	e02a      	b.n	db6ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   db694:	f1b8 0f00 	cmp.w	r8, #0
   db698:	d027      	beq.n	db6ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   db69a:	6971      	ldr	r1, [r6, #20]
   db69c:	4638      	mov	r0, r7
   db69e:	3104      	adds	r1, #4
   db6a0:	f7ff fc67 	bl	daf72 <_ZN9IPAddressaSEPKh>
   db6a4:	e020      	b.n	db6e8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   db6a6:	f1b9 0f00 	cmp.w	r9, #0
   db6aa:	d01e      	beq.n	db6ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   db6ac:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   db6ae:	2211      	movs	r2, #17
   db6b0:	a801      	add	r0, sp, #4
   db6b2:	f003 f879 	bl	de7a8 <memset>
                    a.v = 6;
   db6b6:	2306      	movs	r3, #6
   db6b8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   db6bc:	ad01      	add	r5, sp, #4
   db6be:	f104 0308 	add.w	r3, r4, #8
   db6c2:	3418      	adds	r4, #24
   db6c4:	6818      	ldr	r0, [r3, #0]
   db6c6:	6859      	ldr	r1, [r3, #4]
   db6c8:	462a      	mov	r2, r5
   db6ca:	c203      	stmia	r2!, {r0, r1}
   db6cc:	3308      	adds	r3, #8
   db6ce:	42a3      	cmp	r3, r4
   db6d0:	4615      	mov	r5, r2
   db6d2:	d1f7      	bne.n	db6c4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   db6d4:	a901      	add	r1, sp, #4
   db6d6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   db6d8:	ad07      	add	r5, sp, #28
   db6da:	f7ff fc2b 	bl	daf34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db6de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db6e0:	1d3c      	adds	r4, r7, #4
   db6e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db6e4:	682b      	ldr	r3, [r5, #0]
   db6e6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   db6e8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   db6ea:	69f6      	ldr	r6, [r6, #28]
   db6ec:	e7c8      	b.n	db680 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   db6ee:	9800      	ldr	r0, [sp, #0]
   db6f0:	f7fd fe04 	bl	d92fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   db6f4:	4638      	mov	r0, r7
   db6f6:	b015      	add	sp, #84	; 0x54
   db6f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db6fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   db6fc:	4b02      	ldr	r3, [pc, #8]	; (db708 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   db6fe:	4a03      	ldr	r2, [pc, #12]	; (db70c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   db700:	601a      	str	r2, [r3, #0]
   db702:	2200      	movs	r2, #0
   db704:	605a      	str	r2, [r3, #4]
   db706:	4770      	bx	lr
   db708:	2003e600 	.word	0x2003e600
   db70c:	000e0874 	.word	0x000e0874

000db710 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   db710:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db712:	4e18      	ldr	r6, [pc, #96]	; (db774 <pinAvailable+0x64>)
   db714:	6831      	ldr	r1, [r6, #0]
   db716:	f011 0501 	ands.w	r5, r1, #1
   db71a:	4604      	mov	r4, r0
   db71c:	d10a      	bne.n	db734 <pinAvailable+0x24>
   db71e:	4630      	mov	r0, r6
   db720:	f7f8 fcc1 	bl	d40a6 <__cxa_guard_acquire>
   db724:	b130      	cbz	r0, db734 <pinAvailable+0x24>
   db726:	4629      	mov	r1, r5
   db728:	4813      	ldr	r0, [pc, #76]	; (db778 <pinAvailable+0x68>)
   db72a:	f7fe f9c1 	bl	d9ab0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   db72e:	4630      	mov	r0, r6
   db730:	f7f8 fcbe 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   db734:	4810      	ldr	r0, [pc, #64]	; (db778 <pinAvailable+0x68>)
   db736:	f7fe fa78 	bl	d9c2a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   db73a:	b128      	cbz	r0, db748 <pinAvailable+0x38>
   db73c:	f1a4 030b 	sub.w	r3, r4, #11
   db740:	2b02      	cmp	r3, #2
   db742:	d801      	bhi.n	db748 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   db744:	2000      	movs	r0, #0
   db746:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   db748:	f000 f874 	bl	db834 <_Z19__fetch_global_Wirev>
   db74c:	f7ff fe29 	bl	db3a2 <_ZN7TwoWire9isEnabledEv>
   db750:	b108      	cbz	r0, db756 <pinAvailable+0x46>
   db752:	2c01      	cmp	r4, #1
   db754:	d9f6      	bls.n	db744 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   db756:	f7ff fd67 	bl	db228 <_Z22__fetch_global_Serial1v>
   db75a:	f7ff fd62 	bl	db222 <_ZN11USARTSerial9isEnabledEv>
   db75e:	b118      	cbz	r0, db768 <pinAvailable+0x58>
   db760:	f1a4 0309 	sub.w	r3, r4, #9
   db764:	2b01      	cmp	r3, #1
   db766:	d9ed      	bls.n	db744 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   db768:	2c23      	cmp	r4, #35	; 0x23
   db76a:	bf8c      	ite	hi
   db76c:	2000      	movhi	r0, #0
   db76e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   db770:	bd70      	pop	{r4, r5, r6, pc}
   db772:	bf00      	nop
   db774:	2003bea0 	.word	0x2003bea0
   db778:	2003bea4 	.word	0x2003bea4

000db77c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db77c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   db77e:	b538      	push	{r3, r4, r5, lr}
   db780:	4604      	mov	r4, r0
   db782:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db784:	d80a      	bhi.n	db79c <pinMode+0x20>
   db786:	29ff      	cmp	r1, #255	; 0xff
   db788:	d008      	beq.n	db79c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db78a:	f7ff ffc1 	bl	db710 <pinAvailable>
   db78e:	b128      	cbz	r0, db79c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   db790:	4629      	mov	r1, r5
   db792:	4620      	mov	r0, r4
}
   db794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   db798:	f7fd bdd0 	b.w	d933c <HAL_Pin_Mode>
   db79c:	bd38      	pop	{r3, r4, r5, pc}

000db79e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db79e:	b538      	push	{r3, r4, r5, lr}
   db7a0:	4604      	mov	r4, r0
   db7a2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db7a4:	f7fd fdd2 	bl	d934c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db7a8:	28ff      	cmp	r0, #255	; 0xff
   db7aa:	d010      	beq.n	db7ce <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   db7ac:	2806      	cmp	r0, #6
   db7ae:	d804      	bhi.n	db7ba <digitalWrite+0x1c>
   db7b0:	234d      	movs	r3, #77	; 0x4d
   db7b2:	fa23 f000 	lsr.w	r0, r3, r0
   db7b6:	07c3      	lsls	r3, r0, #31
   db7b8:	d409      	bmi.n	db7ce <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db7ba:	4620      	mov	r0, r4
   db7bc:	f7ff ffa8 	bl	db710 <pinAvailable>
   db7c0:	b128      	cbz	r0, db7ce <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db7c2:	4629      	mov	r1, r5
   db7c4:	4620      	mov	r0, r4
}
   db7c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   db7ca:	f7fd bdc7 	b.w	d935c <HAL_GPIO_Write>
   db7ce:	bd38      	pop	{r3, r4, r5, pc}

000db7d0 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   db7d0:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   db7d2:	b510      	push	{r4, lr}
   db7d4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   db7d6:	bf9c      	itt	ls
   db7d8:	340e      	addls	r4, #14
   db7da:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db7dc:	4620      	mov	r0, r4
   db7de:	f7ff ff97 	bl	db710 <pinAvailable>
   db7e2:	b150      	cbz	r0, db7fa <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   db7e4:	2103      	movs	r1, #3
   db7e6:	4620      	mov	r0, r4
   db7e8:	f7fd fda0 	bl	d932c <HAL_Validate_Pin_Function>
   db7ec:	2803      	cmp	r0, #3
   db7ee:	d104      	bne.n	db7fa <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   db7f0:	4620      	mov	r0, r4
}
   db7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   db7f6:	f7fd bdc9 	b.w	d938c <HAL_ADC_Read>
}
   db7fa:	2000      	movs	r0, #0
   db7fc:	bd10      	pop	{r4, pc}
	...

000db800 <_Z17acquireWireBufferv>:
   db800:	b570      	push	{r4, r5, r6, lr}
   db802:	4604      	mov	r4, r0
   db804:	2514      	movs	r5, #20
   db806:	462a      	mov	r2, r5
   db808:	4e09      	ldr	r6, [pc, #36]	; (db830 <_Z17acquireWireBufferv+0x30>)
   db80a:	2100      	movs	r1, #0
   db80c:	f002 ffcc 	bl	de7a8 <memset>
   db810:	8025      	strh	r5, [r4, #0]
   db812:	2520      	movs	r5, #32
   db814:	4631      	mov	r1, r6
   db816:	60a5      	str	r5, [r4, #8]
   db818:	6125      	str	r5, [r4, #16]
   db81a:	4628      	mov	r0, r5
   db81c:	f000 f840 	bl	db8a0 <_ZnajRKSt9nothrow_t>
   db820:	4631      	mov	r1, r6
   db822:	6060      	str	r0, [r4, #4]
   db824:	4628      	mov	r0, r5
   db826:	f000 f83b 	bl	db8a0 <_ZnajRKSt9nothrow_t>
   db82a:	60e0      	str	r0, [r4, #12]
   db82c:	4620      	mov	r0, r4
   db82e:	bd70      	pop	{r4, r5, r6, pc}
   db830:	000e08a0 	.word	0x000e08a0

000db834 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   db834:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db836:	4d0e      	ldr	r5, [pc, #56]	; (db870 <_Z19__fetch_global_Wirev+0x3c>)
   db838:	6829      	ldr	r1, [r5, #0]
   db83a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   db83e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db840:	d113      	bne.n	db86a <_Z19__fetch_global_Wirev+0x36>
   db842:	4628      	mov	r0, r5
   db844:	f7f8 fc2f 	bl	d40a6 <__cxa_guard_acquire>
   db848:	b178      	cbz	r0, db86a <_Z19__fetch_global_Wirev+0x36>
   db84a:	a801      	add	r0, sp, #4
   db84c:	f7ff ffd8 	bl	db800 <_Z17acquireWireBufferv>
   db850:	aa01      	add	r2, sp, #4
   db852:	4621      	mov	r1, r4
   db854:	4807      	ldr	r0, [pc, #28]	; (db874 <_Z19__fetch_global_Wirev+0x40>)
   db856:	f7ff fd4d 	bl	db2f4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   db85a:	4628      	mov	r0, r5
   db85c:	f7f8 fc28 	bl	d40b0 <__cxa_guard_release>
   db860:	4a05      	ldr	r2, [pc, #20]	; (db878 <_Z19__fetch_global_Wirev+0x44>)
   db862:	4906      	ldr	r1, [pc, #24]	; (db87c <_Z19__fetch_global_Wirev+0x48>)
   db864:	4803      	ldr	r0, [pc, #12]	; (db874 <_Z19__fetch_global_Wirev+0x40>)
   db866:	f000 f80b 	bl	db880 <__aeabi_atexit>
	return wire;
}
   db86a:	4802      	ldr	r0, [pc, #8]	; (db874 <_Z19__fetch_global_Wirev+0x40>)
   db86c:	b007      	add	sp, #28
   db86e:	bd30      	pop	{r4, r5, pc}
   db870:	2003e60c 	.word	0x2003e60c
   db874:	2003e610 	.word	0x2003e610
   db878:	2003be9c 	.word	0x2003be9c
   db87c:	000db29d 	.word	0x000db29d

000db880 <__aeabi_atexit>:
   db880:	460b      	mov	r3, r1
   db882:	4601      	mov	r1, r0
   db884:	4618      	mov	r0, r3
   db886:	f002 be6f 	b.w	de568 <__cxa_atexit>
	...

000db88c <_ZSt15get_new_handlerv>:
   db88c:	4b02      	ldr	r3, [pc, #8]	; (db898 <_ZSt15get_new_handlerv+0xc>)
   db88e:	6818      	ldr	r0, [r3, #0]
   db890:	f3bf 8f5f 	dmb	sy
   db894:	4770      	bx	lr
   db896:	bf00      	nop
   db898:	2003e624 	.word	0x2003e624

000db89c <_ZdlPvj>:
   db89c:	f7f8 bbff 	b.w	d409e <_ZdlPv>

000db8a0 <_ZnajRKSt9nothrow_t>:
   db8a0:	f000 b800 	b.w	db8a4 <_ZnwjRKSt9nothrow_t>

000db8a4 <_ZnwjRKSt9nothrow_t>:
   db8a4:	b510      	push	{r4, lr}
   db8a6:	2800      	cmp	r0, #0
   db8a8:	bf14      	ite	ne
   db8aa:	4604      	movne	r4, r0
   db8ac:	2401      	moveq	r4, #1
   db8ae:	4620      	mov	r0, r4
   db8b0:	f7fe f842 	bl	d9938 <malloc>
   db8b4:	b920      	cbnz	r0, db8c0 <_ZnwjRKSt9nothrow_t+0x1c>
   db8b6:	f7ff ffe9 	bl	db88c <_ZSt15get_new_handlerv>
   db8ba:	b108      	cbz	r0, db8c0 <_ZnwjRKSt9nothrow_t+0x1c>
   db8bc:	4780      	blx	r0
   db8be:	e7f6      	b.n	db8ae <_ZnwjRKSt9nothrow_t+0xa>
   db8c0:	bd10      	pop	{r4, pc}

000db8c2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   db8c2:	68c3      	ldr	r3, [r0, #12]
   db8c4:	689a      	ldr	r2, [r3, #8]
   db8c6:	60c2      	str	r2, [r0, #12]
   db8c8:	b102      	cbz	r2, db8cc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
   db8ca:	6050      	str	r0, [r2, #4]
   db8cc:	6842      	ldr	r2, [r0, #4]
   db8ce:	605a      	str	r2, [r3, #4]
   db8d0:	680a      	ldr	r2, [r1, #0]
   db8d2:	4290      	cmp	r0, r2
   db8d4:	d101      	bne.n	db8da <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>
   db8d6:	600b      	str	r3, [r1, #0]
   db8d8:	e005      	b.n	db8e6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x24>
   db8da:	6842      	ldr	r2, [r0, #4]
   db8dc:	6891      	ldr	r1, [r2, #8]
   db8de:	4288      	cmp	r0, r1
   db8e0:	bf0c      	ite	eq
   db8e2:	6093      	streq	r3, [r2, #8]
   db8e4:	60d3      	strne	r3, [r2, #12]
   db8e6:	6098      	str	r0, [r3, #8]
   db8e8:	6043      	str	r3, [r0, #4]
   db8ea:	4770      	bx	lr

000db8ec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   db8ec:	6883      	ldr	r3, [r0, #8]
   db8ee:	68da      	ldr	r2, [r3, #12]
   db8f0:	6082      	str	r2, [r0, #8]
   db8f2:	b102      	cbz	r2, db8f6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
   db8f4:	6050      	str	r0, [r2, #4]
   db8f6:	6842      	ldr	r2, [r0, #4]
   db8f8:	605a      	str	r2, [r3, #4]
   db8fa:	680a      	ldr	r2, [r1, #0]
   db8fc:	4290      	cmp	r0, r2
   db8fe:	d101      	bne.n	db904 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>
   db900:	600b      	str	r3, [r1, #0]
   db902:	e005      	b.n	db910 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x24>
   db904:	6842      	ldr	r2, [r0, #4]
   db906:	68d1      	ldr	r1, [r2, #12]
   db908:	4288      	cmp	r0, r1
   db90a:	bf0c      	ite	eq
   db90c:	60d3      	streq	r3, [r2, #12]
   db90e:	6093      	strne	r3, [r2, #8]
   db910:	60d8      	str	r0, [r3, #12]
   db912:	6043      	str	r3, [r0, #4]
   db914:	4770      	bx	lr

000db916 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db916:	7803      	ldrb	r3, [r0, #0]
   db918:	b92b      	cbnz	r3, db926 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   db91a:	6843      	ldr	r3, [r0, #4]
   db91c:	685b      	ldr	r3, [r3, #4]
   db91e:	4298      	cmp	r0, r3
   db920:	d101      	bne.n	db926 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x10>
   db922:	68c3      	ldr	r3, [r0, #12]
   db924:	e00c      	b.n	db940 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   db926:	6883      	ldr	r3, [r0, #8]
   db928:	b11b      	cbz	r3, db932 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1c>
   db92a:	68da      	ldr	r2, [r3, #12]
   db92c:	b142      	cbz	r2, db940 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   db92e:	4613      	mov	r3, r2
   db930:	e7fb      	b.n	db92a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
   db932:	6843      	ldr	r3, [r0, #4]
   db934:	689a      	ldr	r2, [r3, #8]
   db936:	4282      	cmp	r2, r0
   db938:	d102      	bne.n	db940 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
   db93a:	4618      	mov	r0, r3
   db93c:	685b      	ldr	r3, [r3, #4]
   db93e:	e7f9      	b.n	db934 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1e>
   db940:	4618      	mov	r0, r3
   db942:	4770      	bx	lr

000db944 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
   db944:	68c3      	ldr	r3, [r0, #12]
   db946:	b123      	cbz	r3, db952 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0xe>
   db948:	4618      	mov	r0, r3
   db94a:	689b      	ldr	r3, [r3, #8]
   db94c:	2b00      	cmp	r3, #0
   db94e:	d1fb      	bne.n	db948 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x4>
   db950:	e00a      	b.n	db968 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x24>
   db952:	6843      	ldr	r3, [r0, #4]
   db954:	68da      	ldr	r2, [r3, #12]
   db956:	4282      	cmp	r2, r0
   db958:	d102      	bne.n	db960 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x1c>
   db95a:	4618      	mov	r0, r3
   db95c:	685b      	ldr	r3, [r3, #4]
   db95e:	e7f9      	b.n	db954 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x10>
   db960:	68c2      	ldr	r2, [r0, #12]
   db962:	4293      	cmp	r3, r2
   db964:	bf18      	it	ne
   db966:	4618      	movne	r0, r3
   db968:	4770      	bx	lr

000db96a <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db96a:	f7ff bfd4 	b.w	db916 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000db96e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   db96e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db972:	461f      	mov	r7, r3
   db974:	f103 0904 	add.w	r9, r3, #4
   db978:	2300      	movs	r3, #0
   db97a:	460c      	mov	r4, r1
   db97c:	604a      	str	r2, [r1, #4]
   db97e:	608b      	str	r3, [r1, #8]
   db980:	60cb      	str	r3, [r1, #12]
   db982:	700b      	strb	r3, [r1, #0]
   db984:	b168      	cbz	r0, db9a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
   db986:	4297      	cmp	r7, r2
   db988:	6091      	str	r1, [r2, #8]
   db98a:	d101      	bne.n	db990 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db98c:	6079      	str	r1, [r7, #4]
   db98e:	e00c      	b.n	db9aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x3c>
   db990:	68bb      	ldr	r3, [r7, #8]
   db992:	429a      	cmp	r2, r3
   db994:	bf08      	it	eq
   db996:	60b9      	streq	r1, [r7, #8]
   db998:	f04f 0801 	mov.w	r8, #1
   db99c:	f04f 0a00 	mov.w	sl, #0
   db9a0:	e017      	b.n	db9d2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   db9a2:	60d1      	str	r1, [r2, #12]
   db9a4:	68fb      	ldr	r3, [r7, #12]
   db9a6:	429a      	cmp	r2, r3
   db9a8:	d1f6      	bne.n	db998 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   db9aa:	60fc      	str	r4, [r7, #12]
   db9ac:	e7f4      	b.n	db998 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
   db9ae:	6866      	ldr	r6, [r4, #4]
   db9b0:	7832      	ldrb	r2, [r6, #0]
   db9b2:	2a00      	cmp	r2, #0
   db9b4:	d13a      	bne.n	dba2c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   db9b6:	6875      	ldr	r5, [r6, #4]
   db9b8:	68ab      	ldr	r3, [r5, #8]
   db9ba:	429e      	cmp	r6, r3
   db9bc:	d11f      	bne.n	db9fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
   db9be:	68eb      	ldr	r3, [r5, #12]
   db9c0:	b15b      	cbz	r3, db9da <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   db9c2:	781a      	ldrb	r2, [r3, #0]
   db9c4:	b94a      	cbnz	r2, db9da <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
   db9c6:	f886 8000 	strb.w	r8, [r6]
   db9ca:	f883 8000 	strb.w	r8, [r3]
   db9ce:	702a      	strb	r2, [r5, #0]
   db9d0:	462c      	mov	r4, r5
   db9d2:	687b      	ldr	r3, [r7, #4]
   db9d4:	429c      	cmp	r4, r3
   db9d6:	d1ea      	bne.n	db9ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
   db9d8:	e028      	b.n	dba2c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
   db9da:	68f3      	ldr	r3, [r6, #12]
   db9dc:	429c      	cmp	r4, r3
   db9de:	d104      	bne.n	db9ea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
   db9e0:	4649      	mov	r1, r9
   db9e2:	4630      	mov	r0, r6
   db9e4:	f7ff ff6d 	bl	db8c2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db9e8:	4634      	mov	r4, r6
   db9ea:	6863      	ldr	r3, [r4, #4]
   db9ec:	4649      	mov	r1, r9
   db9ee:	f883 8000 	strb.w	r8, [r3]
   db9f2:	4628      	mov	r0, r5
   db9f4:	f885 a000 	strb.w	sl, [r5]
   db9f8:	f7ff ff78 	bl	db8ec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db9fc:	e014      	b.n	dba28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
   db9fe:	b113      	cbz	r3, dba06 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
   dba00:	781a      	ldrb	r2, [r3, #0]
   dba02:	2a00      	cmp	r2, #0
   dba04:	d0df      	beq.n	db9c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
   dba06:	68b3      	ldr	r3, [r6, #8]
   dba08:	429c      	cmp	r4, r3
   dba0a:	d104      	bne.n	dba16 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
   dba0c:	4649      	mov	r1, r9
   dba0e:	4630      	mov	r0, r6
   dba10:	f7ff ff6c 	bl	db8ec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   dba14:	4634      	mov	r4, r6
   dba16:	6863      	ldr	r3, [r4, #4]
   dba18:	4649      	mov	r1, r9
   dba1a:	f883 8000 	strb.w	r8, [r3]
   dba1e:	4628      	mov	r0, r5
   dba20:	f885 a000 	strb.w	sl, [r5]
   dba24:	f7ff ff4d 	bl	db8c2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   dba28:	4625      	mov	r5, r4
   dba2a:	e7d1      	b.n	db9d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x62>
   dba2c:	2201      	movs	r2, #1
   dba2e:	701a      	strb	r2, [r3, #0]
   dba30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dba34 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
   dba34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dba38:	460f      	mov	r7, r1
   dba3a:	6881      	ldr	r1, [r0, #8]
   dba3c:	68c2      	ldr	r2, [r0, #12]
   dba3e:	4605      	mov	r5, r0
   dba40:	b909      	cbnz	r1, dba46 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x12>
   dba42:	4616      	mov	r6, r2
   dba44:	e029      	b.n	dba9a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x66>
   dba46:	4614      	mov	r4, r2
   dba48:	2a00      	cmp	r2, #0
   dba4a:	f000 80c5 	beq.w	dbbd8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a4>
   dba4e:	4613      	mov	r3, r2
   dba50:	6898      	ldr	r0, [r3, #8]
   dba52:	b108      	cbz	r0, dba58 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x24>
   dba54:	4603      	mov	r3, r0
   dba56:	e7fb      	b.n	dba50 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c>
   dba58:	42ab      	cmp	r3, r5
   dba5a:	68de      	ldr	r6, [r3, #12]
   dba5c:	d01d      	beq.n	dba9a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x66>
   dba5e:	4293      	cmp	r3, r2
   dba60:	604b      	str	r3, [r1, #4]
   dba62:	6099      	str	r1, [r3, #8]
   dba64:	d007      	beq.n	dba76 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x42>
   dba66:	685c      	ldr	r4, [r3, #4]
   dba68:	b106      	cbz	r6, dba6c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x38>
   dba6a:	6074      	str	r4, [r6, #4]
   dba6c:	6859      	ldr	r1, [r3, #4]
   dba6e:	608e      	str	r6, [r1, #8]
   dba70:	60da      	str	r2, [r3, #12]
   dba72:	68ea      	ldr	r2, [r5, #12]
   dba74:	6053      	str	r3, [r2, #4]
   dba76:	687a      	ldr	r2, [r7, #4]
   dba78:	4295      	cmp	r5, r2
   dba7a:	d101      	bne.n	dba80 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x4c>
   dba7c:	607b      	str	r3, [r7, #4]
   dba7e:	e005      	b.n	dba8c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x58>
   dba80:	686a      	ldr	r2, [r5, #4]
   dba82:	6891      	ldr	r1, [r2, #8]
   dba84:	428d      	cmp	r5, r1
   dba86:	bf0c      	ite	eq
   dba88:	6093      	streq	r3, [r2, #8]
   dba8a:	60d3      	strne	r3, [r2, #12]
   dba8c:	686a      	ldr	r2, [r5, #4]
   dba8e:	605a      	str	r2, [r3, #4]
   dba90:	7829      	ldrb	r1, [r5, #0]
   dba92:	781a      	ldrb	r2, [r3, #0]
   dba94:	7019      	strb	r1, [r3, #0]
   dba96:	702a      	strb	r2, [r5, #0]
   dba98:	e027      	b.n	dbaea <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb6>
   dba9a:	686c      	ldr	r4, [r5, #4]
   dba9c:	b106      	cbz	r6, dbaa0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x6c>
   dba9e:	6074      	str	r4, [r6, #4]
   dbaa0:	687b      	ldr	r3, [r7, #4]
   dbaa2:	429d      	cmp	r5, r3
   dbaa4:	d101      	bne.n	dbaaa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x76>
   dbaa6:	607e      	str	r6, [r7, #4]
   dbaa8:	e005      	b.n	dbab6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x82>
   dbaaa:	686b      	ldr	r3, [r5, #4]
   dbaac:	689a      	ldr	r2, [r3, #8]
   dbaae:	4295      	cmp	r5, r2
   dbab0:	bf0c      	ite	eq
   dbab2:	609e      	streq	r6, [r3, #8]
   dbab4:	60de      	strne	r6, [r3, #12]
   dbab6:	68bb      	ldr	r3, [r7, #8]
   dbab8:	429d      	cmp	r5, r3
   dbaba:	d109      	bne.n	dbad0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9c>
   dbabc:	68eb      	ldr	r3, [r5, #12]
   dbabe:	b90b      	cbnz	r3, dbac4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
   dbac0:	686b      	ldr	r3, [r5, #4]
   dbac2:	e004      	b.n	dbace <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9a>
   dbac4:	4633      	mov	r3, r6
   dbac6:	689a      	ldr	r2, [r3, #8]
   dbac8:	b10a      	cbz	r2, dbace <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9a>
   dbaca:	4613      	mov	r3, r2
   dbacc:	e7fb      	b.n	dbac6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x92>
   dbace:	60bb      	str	r3, [r7, #8]
   dbad0:	68fb      	ldr	r3, [r7, #12]
   dbad2:	429d      	cmp	r5, r3
   dbad4:	d109      	bne.n	dbaea <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb6>
   dbad6:	68ab      	ldr	r3, [r5, #8]
   dbad8:	b90b      	cbnz	r3, dbade <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xaa>
   dbada:	686b      	ldr	r3, [r5, #4]
   dbadc:	e004      	b.n	dbae8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb4>
   dbade:	4633      	mov	r3, r6
   dbae0:	68da      	ldr	r2, [r3, #12]
   dbae2:	b10a      	cbz	r2, dbae8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xb4>
   dbae4:	4613      	mov	r3, r2
   dbae6:	e7fb      	b.n	dbae0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
   dbae8:	60fb      	str	r3, [r7, #12]
   dbaea:	782b      	ldrb	r3, [r5, #0]
   dbaec:	2b00      	cmp	r3, #0
   dbaee:	d076      	beq.n	dbbde <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   dbaf0:	f107 0804 	add.w	r8, r7, #4
   dbaf4:	f04f 0900 	mov.w	r9, #0
   dbaf8:	f04f 0a01 	mov.w	sl, #1
   dbafc:	687b      	ldr	r3, [r7, #4]
   dbafe:	429e      	cmp	r6, r3
   dbb00:	d067      	beq.n	dbbd2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19e>
   dbb02:	b12e      	cbz	r6, dbb10 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   dbb04:	7833      	ldrb	r3, [r6, #0]
   dbb06:	2b01      	cmp	r3, #1
   dbb08:	d002      	beq.n	dbb10 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
   dbb0a:	2301      	movs	r3, #1
   dbb0c:	7033      	strb	r3, [r6, #0]
   dbb0e:	e066      	b.n	dbbde <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   dbb10:	68a0      	ldr	r0, [r4, #8]
   dbb12:	4286      	cmp	r6, r0
   dbb14:	d12c      	bne.n	dbb70 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x13c>
   dbb16:	68e0      	ldr	r0, [r4, #12]
   dbb18:	7803      	ldrb	r3, [r0, #0]
   dbb1a:	b93b      	cbnz	r3, dbb2c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xf8>
   dbb1c:	f880 a000 	strb.w	sl, [r0]
   dbb20:	4641      	mov	r1, r8
   dbb22:	4620      	mov	r0, r4
   dbb24:	7023      	strb	r3, [r4, #0]
   dbb26:	f7ff fecc 	bl	db8c2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   dbb2a:	68e0      	ldr	r0, [r4, #12]
   dbb2c:	6882      	ldr	r2, [r0, #8]
   dbb2e:	68c3      	ldr	r3, [r0, #12]
   dbb30:	b112      	cbz	r2, dbb38 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x104>
   dbb32:	7811      	ldrb	r1, [r2, #0]
   dbb34:	2901      	cmp	r1, #1
   dbb36:	d103      	bne.n	dbb40 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x10c>
   dbb38:	b373      	cbz	r3, dbb98 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   dbb3a:	7819      	ldrb	r1, [r3, #0]
   dbb3c:	2901      	cmp	r1, #1
   dbb3e:	d02b      	beq.n	dbb98 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   dbb40:	b113      	cbz	r3, dbb48 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x114>
   dbb42:	781b      	ldrb	r3, [r3, #0]
   dbb44:	2b01      	cmp	r3, #1
   dbb46:	d107      	bne.n	dbb58 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
   dbb48:	2301      	movs	r3, #1
   dbb4a:	7013      	strb	r3, [r2, #0]
   dbb4c:	2300      	movs	r3, #0
   dbb4e:	7003      	strb	r3, [r0, #0]
   dbb50:	4641      	mov	r1, r8
   dbb52:	f7ff fecb 	bl	db8ec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   dbb56:	68e0      	ldr	r0, [r4, #12]
   dbb58:	7823      	ldrb	r3, [r4, #0]
   dbb5a:	7003      	strb	r3, [r0, #0]
   dbb5c:	68c3      	ldr	r3, [r0, #12]
   dbb5e:	2201      	movs	r2, #1
   dbb60:	7022      	strb	r2, [r4, #0]
   dbb62:	b103      	cbz	r3, dbb66 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x132>
   dbb64:	701a      	strb	r2, [r3, #0]
   dbb66:	4641      	mov	r1, r8
   dbb68:	4620      	mov	r0, r4
   dbb6a:	f7ff feaa 	bl	db8c2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   dbb6e:	e030      	b.n	dbbd2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x19e>
   dbb70:	7803      	ldrb	r3, [r0, #0]
   dbb72:	b93b      	cbnz	r3, dbb84 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x150>
   dbb74:	f880 a000 	strb.w	sl, [r0]
   dbb78:	4641      	mov	r1, r8
   dbb7a:	4620      	mov	r0, r4
   dbb7c:	7023      	strb	r3, [r4, #0]
   dbb7e:	f7ff feb5 	bl	db8ec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   dbb82:	68a0      	ldr	r0, [r4, #8]
   dbb84:	68c2      	ldr	r2, [r0, #12]
   dbb86:	6883      	ldr	r3, [r0, #8]
   dbb88:	b112      	cbz	r2, dbb90 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15c>
   dbb8a:	7811      	ldrb	r1, [r2, #0]
   dbb8c:	2901      	cmp	r1, #1
   dbb8e:	d109      	bne.n	dbba4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x170>
   dbb90:	b113      	cbz	r3, dbb98 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
   dbb92:	7819      	ldrb	r1, [r3, #0]
   dbb94:	2901      	cmp	r1, #1
   dbb96:	d105      	bne.n	dbba4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x170>
   dbb98:	6863      	ldr	r3, [r4, #4]
   dbb9a:	f880 9000 	strb.w	r9, [r0]
   dbb9e:	4626      	mov	r6, r4
   dbba0:	461c      	mov	r4, r3
   dbba2:	e7ab      	b.n	dbafc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc8>
   dbba4:	b113      	cbz	r3, dbbac <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x178>
   dbba6:	781b      	ldrb	r3, [r3, #0]
   dbba8:	2b01      	cmp	r3, #1
   dbbaa:	d107      	bne.n	dbbbc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x188>
   dbbac:	2301      	movs	r3, #1
   dbbae:	7013      	strb	r3, [r2, #0]
   dbbb0:	2300      	movs	r3, #0
   dbbb2:	7003      	strb	r3, [r0, #0]
   dbbb4:	4641      	mov	r1, r8
   dbbb6:	f7ff fe84 	bl	db8c2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   dbbba:	68a0      	ldr	r0, [r4, #8]
   dbbbc:	7823      	ldrb	r3, [r4, #0]
   dbbbe:	7003      	strb	r3, [r0, #0]
   dbbc0:	6883      	ldr	r3, [r0, #8]
   dbbc2:	2201      	movs	r2, #1
   dbbc4:	7022      	strb	r2, [r4, #0]
   dbbc6:	b103      	cbz	r3, dbbca <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x196>
   dbbc8:	701a      	strb	r2, [r3, #0]
   dbbca:	4641      	mov	r1, r8
   dbbcc:	4620      	mov	r0, r4
   dbbce:	f7ff fe8d 	bl	db8ec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   dbbd2:	2e00      	cmp	r6, #0
   dbbd4:	d199      	bne.n	dbb0a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd6>
   dbbd6:	e002      	b.n	dbbde <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1aa>
   dbbd8:	6844      	ldr	r4, [r0, #4]
   dbbda:	460e      	mov	r6, r1
   dbbdc:	e75f      	b.n	dba9e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x6a>
   dbbde:	4628      	mov	r0, r5
   dbbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dbbe4 <_ZSt25__throw_bad_function_callv>:
   dbbe4:	b508      	push	{r3, lr}
   dbbe6:	f7fd fee7 	bl	d99b8 <abort>
	...

000dbbec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dbbec:	4b18      	ldr	r3, [pc, #96]	; (dbc50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dbbee:	681a      	ldr	r2, [r3, #0]
   dbbf0:	07d1      	lsls	r1, r2, #31
   dbbf2:	bf5c      	itt	pl
   dbbf4:	2201      	movpl	r2, #1
   dbbf6:	601a      	strpl	r2, [r3, #0]
   dbbf8:	4b16      	ldr	r3, [pc, #88]	; (dbc54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dbbfa:	681a      	ldr	r2, [r3, #0]
   dbbfc:	07d2      	lsls	r2, r2, #31
   dbbfe:	bf5c      	itt	pl
   dbc00:	2201      	movpl	r2, #1
   dbc02:	601a      	strpl	r2, [r3, #0]
   dbc04:	4b14      	ldr	r3, [pc, #80]	; (dbc58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dbc06:	681a      	ldr	r2, [r3, #0]
   dbc08:	07d0      	lsls	r0, r2, #31
   dbc0a:	bf5c      	itt	pl
   dbc0c:	2201      	movpl	r2, #1
   dbc0e:	601a      	strpl	r2, [r3, #0]
   dbc10:	4b12      	ldr	r3, [pc, #72]	; (dbc5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dbc12:	681a      	ldr	r2, [r3, #0]
   dbc14:	07d1      	lsls	r1, r2, #31
   dbc16:	bf5c      	itt	pl
   dbc18:	2201      	movpl	r2, #1
   dbc1a:	601a      	strpl	r2, [r3, #0]
   dbc1c:	4b10      	ldr	r3, [pc, #64]	; (dbc60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dbc1e:	681a      	ldr	r2, [r3, #0]
   dbc20:	07d2      	lsls	r2, r2, #31
   dbc22:	bf5c      	itt	pl
   dbc24:	2201      	movpl	r2, #1
   dbc26:	601a      	strpl	r2, [r3, #0]
   dbc28:	4b0e      	ldr	r3, [pc, #56]	; (dbc64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dbc2a:	681a      	ldr	r2, [r3, #0]
   dbc2c:	07d0      	lsls	r0, r2, #31
   dbc2e:	bf5c      	itt	pl
   dbc30:	2201      	movpl	r2, #1
   dbc32:	601a      	strpl	r2, [r3, #0]
   dbc34:	4b0c      	ldr	r3, [pc, #48]	; (dbc68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dbc36:	681a      	ldr	r2, [r3, #0]
   dbc38:	07d1      	lsls	r1, r2, #31
   dbc3a:	bf5c      	itt	pl
   dbc3c:	2201      	movpl	r2, #1
   dbc3e:	601a      	strpl	r2, [r3, #0]
   dbc40:	4b0a      	ldr	r3, [pc, #40]	; (dbc6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dbc42:	681a      	ldr	r2, [r3, #0]
   dbc44:	07d2      	lsls	r2, r2, #31
   dbc46:	bf5c      	itt	pl
   dbc48:	2201      	movpl	r2, #1
   dbc4a:	601a      	strpl	r2, [r3, #0]
   dbc4c:	4770      	bx	lr
   dbc4e:	bf00      	nop
   dbc50:	2003e644 	.word	0x2003e644
   dbc54:	2003e640 	.word	0x2003e640
   dbc58:	2003e63c 	.word	0x2003e63c
   dbc5c:	2003e638 	.word	0x2003e638
   dbc60:	2003e634 	.word	0x2003e634
   dbc64:	2003e630 	.word	0x2003e630
   dbc68:	2003e62c 	.word	0x2003e62c
   dbc6c:	2003e628 	.word	0x2003e628

000dbc70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dbc70:	4b24      	ldr	r3, [pc, #144]	; (dbd04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dbc72:	681a      	ldr	r2, [r3, #0]
   dbc74:	07d0      	lsls	r0, r2, #31
   dbc76:	bf5c      	itt	pl
   dbc78:	2201      	movpl	r2, #1
   dbc7a:	601a      	strpl	r2, [r3, #0]
   dbc7c:	4b22      	ldr	r3, [pc, #136]	; (dbd08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dbc7e:	681a      	ldr	r2, [r3, #0]
   dbc80:	07d1      	lsls	r1, r2, #31
   dbc82:	bf5c      	itt	pl
   dbc84:	2201      	movpl	r2, #1
   dbc86:	601a      	strpl	r2, [r3, #0]
   dbc88:	4b20      	ldr	r3, [pc, #128]	; (dbd0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dbc8a:	681a      	ldr	r2, [r3, #0]
   dbc8c:	07d2      	lsls	r2, r2, #31
   dbc8e:	bf5c      	itt	pl
   dbc90:	2201      	movpl	r2, #1
   dbc92:	601a      	strpl	r2, [r3, #0]
   dbc94:	4b1e      	ldr	r3, [pc, #120]	; (dbd10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dbc96:	681a      	ldr	r2, [r3, #0]
   dbc98:	07d0      	lsls	r0, r2, #31
   dbc9a:	bf5c      	itt	pl
   dbc9c:	2201      	movpl	r2, #1
   dbc9e:	601a      	strpl	r2, [r3, #0]
   dbca0:	4b1c      	ldr	r3, [pc, #112]	; (dbd14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dbca2:	681a      	ldr	r2, [r3, #0]
   dbca4:	07d1      	lsls	r1, r2, #31
   dbca6:	bf5c      	itt	pl
   dbca8:	2201      	movpl	r2, #1
   dbcaa:	601a      	strpl	r2, [r3, #0]
   dbcac:	4b1a      	ldr	r3, [pc, #104]	; (dbd18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dbcae:	681a      	ldr	r2, [r3, #0]
   dbcb0:	07d2      	lsls	r2, r2, #31
   dbcb2:	bf5c      	itt	pl
   dbcb4:	2201      	movpl	r2, #1
   dbcb6:	601a      	strpl	r2, [r3, #0]
   dbcb8:	4b18      	ldr	r3, [pc, #96]	; (dbd1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dbcba:	681a      	ldr	r2, [r3, #0]
   dbcbc:	07d0      	lsls	r0, r2, #31
   dbcbe:	bf5c      	itt	pl
   dbcc0:	2201      	movpl	r2, #1
   dbcc2:	601a      	strpl	r2, [r3, #0]
   dbcc4:	4b16      	ldr	r3, [pc, #88]	; (dbd20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dbcc6:	681a      	ldr	r2, [r3, #0]
   dbcc8:	07d1      	lsls	r1, r2, #31
   dbcca:	bf5c      	itt	pl
   dbccc:	2201      	movpl	r2, #1
   dbcce:	601a      	strpl	r2, [r3, #0]
   dbcd0:	4b14      	ldr	r3, [pc, #80]	; (dbd24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dbcd2:	681a      	ldr	r2, [r3, #0]
   dbcd4:	07d2      	lsls	r2, r2, #31
   dbcd6:	bf5c      	itt	pl
   dbcd8:	2201      	movpl	r2, #1
   dbcda:	601a      	strpl	r2, [r3, #0]
   dbcdc:	4b12      	ldr	r3, [pc, #72]	; (dbd28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dbcde:	681a      	ldr	r2, [r3, #0]
   dbce0:	07d0      	lsls	r0, r2, #31
   dbce2:	bf5c      	itt	pl
   dbce4:	2201      	movpl	r2, #1
   dbce6:	601a      	strpl	r2, [r3, #0]
   dbce8:	4b10      	ldr	r3, [pc, #64]	; (dbd2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dbcea:	681a      	ldr	r2, [r3, #0]
   dbcec:	07d1      	lsls	r1, r2, #31
   dbcee:	bf5c      	itt	pl
   dbcf0:	2201      	movpl	r2, #1
   dbcf2:	601a      	strpl	r2, [r3, #0]
   dbcf4:	4b0e      	ldr	r3, [pc, #56]	; (dbd30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dbcf6:	681a      	ldr	r2, [r3, #0]
   dbcf8:	07d2      	lsls	r2, r2, #31
   dbcfa:	bf5c      	itt	pl
   dbcfc:	2201      	movpl	r2, #1
   dbcfe:	601a      	strpl	r2, [r3, #0]
   dbd00:	4770      	bx	lr
   dbd02:	bf00      	nop
   dbd04:	2003e674 	.word	0x2003e674
   dbd08:	2003e670 	.word	0x2003e670
   dbd0c:	2003e66c 	.word	0x2003e66c
   dbd10:	2003e668 	.word	0x2003e668
   dbd14:	2003e664 	.word	0x2003e664
   dbd18:	2003e660 	.word	0x2003e660
   dbd1c:	2003e65c 	.word	0x2003e65c
   dbd20:	2003e658 	.word	0x2003e658
   dbd24:	2003e654 	.word	0x2003e654
   dbd28:	2003e650 	.word	0x2003e650
   dbd2c:	2003e64c 	.word	0x2003e64c
   dbd30:	2003e648 	.word	0x2003e648

000dbd34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dbd34:	4b24      	ldr	r3, [pc, #144]	; (dbdc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dbd36:	681a      	ldr	r2, [r3, #0]
   dbd38:	07d0      	lsls	r0, r2, #31
   dbd3a:	bf5c      	itt	pl
   dbd3c:	2201      	movpl	r2, #1
   dbd3e:	601a      	strpl	r2, [r3, #0]
   dbd40:	4b22      	ldr	r3, [pc, #136]	; (dbdcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dbd42:	681a      	ldr	r2, [r3, #0]
   dbd44:	07d1      	lsls	r1, r2, #31
   dbd46:	bf5c      	itt	pl
   dbd48:	2201      	movpl	r2, #1
   dbd4a:	601a      	strpl	r2, [r3, #0]
   dbd4c:	4b20      	ldr	r3, [pc, #128]	; (dbdd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dbd4e:	681a      	ldr	r2, [r3, #0]
   dbd50:	07d2      	lsls	r2, r2, #31
   dbd52:	bf5c      	itt	pl
   dbd54:	2201      	movpl	r2, #1
   dbd56:	601a      	strpl	r2, [r3, #0]
   dbd58:	4b1e      	ldr	r3, [pc, #120]	; (dbdd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dbd5a:	681a      	ldr	r2, [r3, #0]
   dbd5c:	07d0      	lsls	r0, r2, #31
   dbd5e:	bf5c      	itt	pl
   dbd60:	2201      	movpl	r2, #1
   dbd62:	601a      	strpl	r2, [r3, #0]
   dbd64:	4b1c      	ldr	r3, [pc, #112]	; (dbdd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dbd66:	681a      	ldr	r2, [r3, #0]
   dbd68:	07d1      	lsls	r1, r2, #31
   dbd6a:	bf5c      	itt	pl
   dbd6c:	2201      	movpl	r2, #1
   dbd6e:	601a      	strpl	r2, [r3, #0]
   dbd70:	4b1a      	ldr	r3, [pc, #104]	; (dbddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dbd72:	681a      	ldr	r2, [r3, #0]
   dbd74:	07d2      	lsls	r2, r2, #31
   dbd76:	bf5c      	itt	pl
   dbd78:	2201      	movpl	r2, #1
   dbd7a:	601a      	strpl	r2, [r3, #0]
   dbd7c:	4b18      	ldr	r3, [pc, #96]	; (dbde0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dbd7e:	681a      	ldr	r2, [r3, #0]
   dbd80:	07d0      	lsls	r0, r2, #31
   dbd82:	bf5c      	itt	pl
   dbd84:	2201      	movpl	r2, #1
   dbd86:	601a      	strpl	r2, [r3, #0]
   dbd88:	4b16      	ldr	r3, [pc, #88]	; (dbde4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dbd8a:	681a      	ldr	r2, [r3, #0]
   dbd8c:	07d1      	lsls	r1, r2, #31
   dbd8e:	bf5c      	itt	pl
   dbd90:	2201      	movpl	r2, #1
   dbd92:	601a      	strpl	r2, [r3, #0]
   dbd94:	4b14      	ldr	r3, [pc, #80]	; (dbde8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dbd96:	681a      	ldr	r2, [r3, #0]
   dbd98:	07d2      	lsls	r2, r2, #31
   dbd9a:	bf5c      	itt	pl
   dbd9c:	2201      	movpl	r2, #1
   dbd9e:	601a      	strpl	r2, [r3, #0]
   dbda0:	4b12      	ldr	r3, [pc, #72]	; (dbdec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dbda2:	681a      	ldr	r2, [r3, #0]
   dbda4:	07d0      	lsls	r0, r2, #31
   dbda6:	bf5c      	itt	pl
   dbda8:	2201      	movpl	r2, #1
   dbdaa:	601a      	strpl	r2, [r3, #0]
   dbdac:	4b10      	ldr	r3, [pc, #64]	; (dbdf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dbdae:	681a      	ldr	r2, [r3, #0]
   dbdb0:	07d1      	lsls	r1, r2, #31
   dbdb2:	bf5c      	itt	pl
   dbdb4:	2201      	movpl	r2, #1
   dbdb6:	601a      	strpl	r2, [r3, #0]
   dbdb8:	4b0e      	ldr	r3, [pc, #56]	; (dbdf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dbdba:	681a      	ldr	r2, [r3, #0]
   dbdbc:	07d2      	lsls	r2, r2, #31
   dbdbe:	bf5c      	itt	pl
   dbdc0:	2201      	movpl	r2, #1
   dbdc2:	601a      	strpl	r2, [r3, #0]
   dbdc4:	4770      	bx	lr
   dbdc6:	bf00      	nop
   dbdc8:	2003e6a4 	.word	0x2003e6a4
   dbdcc:	2003e6a0 	.word	0x2003e6a0
   dbdd0:	2003e69c 	.word	0x2003e69c
   dbdd4:	2003e698 	.word	0x2003e698
   dbdd8:	2003e694 	.word	0x2003e694
   dbddc:	2003e690 	.word	0x2003e690
   dbde0:	2003e68c 	.word	0x2003e68c
   dbde4:	2003e688 	.word	0x2003e688
   dbde8:	2003e684 	.word	0x2003e684
   dbdec:	2003e680 	.word	0x2003e680
   dbdf0:	2003e67c 	.word	0x2003e67c
   dbdf4:	2003e678 	.word	0x2003e678

000dbdf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dbdf8:	4b18      	ldr	r3, [pc, #96]	; (dbe5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dbdfa:	681a      	ldr	r2, [r3, #0]
   dbdfc:	07d1      	lsls	r1, r2, #31
   dbdfe:	bf5c      	itt	pl
   dbe00:	2201      	movpl	r2, #1
   dbe02:	601a      	strpl	r2, [r3, #0]
   dbe04:	4b16      	ldr	r3, [pc, #88]	; (dbe60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dbe06:	681a      	ldr	r2, [r3, #0]
   dbe08:	07d2      	lsls	r2, r2, #31
   dbe0a:	bf5c      	itt	pl
   dbe0c:	2201      	movpl	r2, #1
   dbe0e:	601a      	strpl	r2, [r3, #0]
   dbe10:	4b14      	ldr	r3, [pc, #80]	; (dbe64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dbe12:	681a      	ldr	r2, [r3, #0]
   dbe14:	07d0      	lsls	r0, r2, #31
   dbe16:	bf5c      	itt	pl
   dbe18:	2201      	movpl	r2, #1
   dbe1a:	601a      	strpl	r2, [r3, #0]
   dbe1c:	4b12      	ldr	r3, [pc, #72]	; (dbe68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dbe1e:	681a      	ldr	r2, [r3, #0]
   dbe20:	07d1      	lsls	r1, r2, #31
   dbe22:	bf5c      	itt	pl
   dbe24:	2201      	movpl	r2, #1
   dbe26:	601a      	strpl	r2, [r3, #0]
   dbe28:	4b10      	ldr	r3, [pc, #64]	; (dbe6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dbe2a:	681a      	ldr	r2, [r3, #0]
   dbe2c:	07d2      	lsls	r2, r2, #31
   dbe2e:	bf5c      	itt	pl
   dbe30:	2201      	movpl	r2, #1
   dbe32:	601a      	strpl	r2, [r3, #0]
   dbe34:	4b0e      	ldr	r3, [pc, #56]	; (dbe70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dbe36:	681a      	ldr	r2, [r3, #0]
   dbe38:	07d0      	lsls	r0, r2, #31
   dbe3a:	bf5c      	itt	pl
   dbe3c:	2201      	movpl	r2, #1
   dbe3e:	601a      	strpl	r2, [r3, #0]
   dbe40:	4b0c      	ldr	r3, [pc, #48]	; (dbe74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dbe42:	681a      	ldr	r2, [r3, #0]
   dbe44:	07d1      	lsls	r1, r2, #31
   dbe46:	bf5c      	itt	pl
   dbe48:	2201      	movpl	r2, #1
   dbe4a:	601a      	strpl	r2, [r3, #0]
   dbe4c:	4b0a      	ldr	r3, [pc, #40]	; (dbe78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dbe4e:	681a      	ldr	r2, [r3, #0]
   dbe50:	07d2      	lsls	r2, r2, #31
   dbe52:	bf5c      	itt	pl
   dbe54:	2201      	movpl	r2, #1
   dbe56:	601a      	strpl	r2, [r3, #0]
   dbe58:	4770      	bx	lr
   dbe5a:	bf00      	nop
   dbe5c:	2003e6c4 	.word	0x2003e6c4
   dbe60:	2003e6c0 	.word	0x2003e6c0
   dbe64:	2003e6bc 	.word	0x2003e6bc
   dbe68:	2003e6b8 	.word	0x2003e6b8
   dbe6c:	2003e6b4 	.word	0x2003e6b4
   dbe70:	2003e6b0 	.word	0x2003e6b0
   dbe74:	2003e6ac 	.word	0x2003e6ac
   dbe78:	2003e6a8 	.word	0x2003e6a8
   dbe7c:	00000000 	.word	0x00000000

000dbe80 <atan>:
   dbe80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbe84:	ec55 4b10 	vmov	r4, r5, d0
   dbe88:	4bd1      	ldr	r3, [pc, #836]	; (dc1d0 <atan+0x350>)
   dbe8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   dbe8e:	429e      	cmp	r6, r3
   dbe90:	46ab      	mov	fp, r5
   dbe92:	dd10      	ble.n	dbeb6 <atan+0x36>
   dbe94:	4bcf      	ldr	r3, [pc, #828]	; (dc1d4 <atan+0x354>)
   dbe96:	429e      	cmp	r6, r3
   dbe98:	f300 80b2 	bgt.w	dc000 <atan+0x180>
   dbe9c:	f000 80ad 	beq.w	dbffa <atan+0x17a>
   dbea0:	f1bb 0f00 	cmp.w	fp, #0
   dbea4:	f340 80fd 	ble.w	dc0a2 <atan+0x222>
   dbea8:	a5ad      	add	r5, pc, #692	; (adr r5, dc160 <atan+0x2e0>)
   dbeaa:	e9d5 4500 	ldrd	r4, r5, [r5]
   dbeae:	ec45 4b10 	vmov	d0, r4, r5
   dbeb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbeb6:	4bc8      	ldr	r3, [pc, #800]	; (dc1d8 <atan+0x358>)
   dbeb8:	429e      	cmp	r6, r3
   dbeba:	f300 80c0 	bgt.w	dc03e <atan+0x1be>
   dbebe:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dbec2:	429e      	cmp	r6, r3
   dbec4:	f340 80a8 	ble.w	dc018 <atan+0x198>
   dbec8:	f04f 3aff 	mov.w	sl, #4294967295
   dbecc:	4622      	mov	r2, r4
   dbece:	462b      	mov	r3, r5
   dbed0:	4620      	mov	r0, r4
   dbed2:	4629      	mov	r1, r5
   dbed4:	f001 fe0c 	bl	ddaf0 <__aeabi_dmul>
   dbed8:	4602      	mov	r2, r0
   dbeda:	460b      	mov	r3, r1
   dbedc:	4680      	mov	r8, r0
   dbede:	4689      	mov	r9, r1
   dbee0:	f001 fe06 	bl	ddaf0 <__aeabi_dmul>
   dbee4:	a3a0      	add	r3, pc, #640	; (adr r3, dc168 <atan+0x2e8>)
   dbee6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbeea:	4606      	mov	r6, r0
   dbeec:	460f      	mov	r7, r1
   dbeee:	f001 fdff 	bl	ddaf0 <__aeabi_dmul>
   dbef2:	a39f      	add	r3, pc, #636	; (adr r3, dc170 <atan+0x2f0>)
   dbef4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbef8:	f001 fc48 	bl	dd78c <__adddf3>
   dbefc:	4632      	mov	r2, r6
   dbefe:	463b      	mov	r3, r7
   dbf00:	f001 fdf6 	bl	ddaf0 <__aeabi_dmul>
   dbf04:	a39c      	add	r3, pc, #624	; (adr r3, dc178 <atan+0x2f8>)
   dbf06:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf0a:	f001 fc3f 	bl	dd78c <__adddf3>
   dbf0e:	4632      	mov	r2, r6
   dbf10:	463b      	mov	r3, r7
   dbf12:	f001 fded 	bl	ddaf0 <__aeabi_dmul>
   dbf16:	a39a      	add	r3, pc, #616	; (adr r3, dc180 <atan+0x300>)
   dbf18:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf1c:	f001 fc36 	bl	dd78c <__adddf3>
   dbf20:	4632      	mov	r2, r6
   dbf22:	463b      	mov	r3, r7
   dbf24:	f001 fde4 	bl	ddaf0 <__aeabi_dmul>
   dbf28:	a397      	add	r3, pc, #604	; (adr r3, dc188 <atan+0x308>)
   dbf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf2e:	f001 fc2d 	bl	dd78c <__adddf3>
   dbf32:	4632      	mov	r2, r6
   dbf34:	463b      	mov	r3, r7
   dbf36:	f001 fddb 	bl	ddaf0 <__aeabi_dmul>
   dbf3a:	a395      	add	r3, pc, #596	; (adr r3, dc190 <atan+0x310>)
   dbf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf40:	f001 fc24 	bl	dd78c <__adddf3>
   dbf44:	4642      	mov	r2, r8
   dbf46:	464b      	mov	r3, r9
   dbf48:	f001 fdd2 	bl	ddaf0 <__aeabi_dmul>
   dbf4c:	a392      	add	r3, pc, #584	; (adr r3, dc198 <atan+0x318>)
   dbf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf52:	4680      	mov	r8, r0
   dbf54:	4689      	mov	r9, r1
   dbf56:	4630      	mov	r0, r6
   dbf58:	4639      	mov	r1, r7
   dbf5a:	f001 fdc9 	bl	ddaf0 <__aeabi_dmul>
   dbf5e:	a390      	add	r3, pc, #576	; (adr r3, dc1a0 <atan+0x320>)
   dbf60:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf64:	f001 fc10 	bl	dd788 <__aeabi_dsub>
   dbf68:	4632      	mov	r2, r6
   dbf6a:	463b      	mov	r3, r7
   dbf6c:	f001 fdc0 	bl	ddaf0 <__aeabi_dmul>
   dbf70:	a38d      	add	r3, pc, #564	; (adr r3, dc1a8 <atan+0x328>)
   dbf72:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf76:	f001 fc07 	bl	dd788 <__aeabi_dsub>
   dbf7a:	4632      	mov	r2, r6
   dbf7c:	463b      	mov	r3, r7
   dbf7e:	f001 fdb7 	bl	ddaf0 <__aeabi_dmul>
   dbf82:	a38b      	add	r3, pc, #556	; (adr r3, dc1b0 <atan+0x330>)
   dbf84:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf88:	f001 fbfe 	bl	dd788 <__aeabi_dsub>
   dbf8c:	4632      	mov	r2, r6
   dbf8e:	463b      	mov	r3, r7
   dbf90:	f001 fdae 	bl	ddaf0 <__aeabi_dmul>
   dbf94:	a388      	add	r3, pc, #544	; (adr r3, dc1b8 <atan+0x338>)
   dbf96:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf9a:	f001 fbf5 	bl	dd788 <__aeabi_dsub>
   dbf9e:	4632      	mov	r2, r6
   dbfa0:	463b      	mov	r3, r7
   dbfa2:	f001 fda5 	bl	ddaf0 <__aeabi_dmul>
   dbfa6:	f1ba 3fff 	cmp.w	sl, #4294967295
   dbfaa:	4602      	mov	r2, r0
   dbfac:	460b      	mov	r3, r1
   dbfae:	d07c      	beq.n	dc0aa <atan+0x22a>
   dbfb0:	4640      	mov	r0, r8
   dbfb2:	4649      	mov	r1, r9
   dbfb4:	f001 fbea 	bl	dd78c <__adddf3>
   dbfb8:	4622      	mov	r2, r4
   dbfba:	462b      	mov	r3, r5
   dbfbc:	f001 fd98 	bl	ddaf0 <__aeabi_dmul>
   dbfc0:	4e86      	ldr	r6, [pc, #536]	; (dc1dc <atan+0x35c>)
   dbfc2:	4b87      	ldr	r3, [pc, #540]	; (dc1e0 <atan+0x360>)
   dbfc4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   dbfc8:	4456      	add	r6, sl
   dbfca:	449a      	add	sl, r3
   dbfcc:	e9da 2300 	ldrd	r2, r3, [sl]
   dbfd0:	f001 fbda 	bl	dd788 <__aeabi_dsub>
   dbfd4:	4622      	mov	r2, r4
   dbfd6:	462b      	mov	r3, r5
   dbfd8:	f001 fbd6 	bl	dd788 <__aeabi_dsub>
   dbfdc:	4602      	mov	r2, r0
   dbfde:	460b      	mov	r3, r1
   dbfe0:	e9d6 0100 	ldrd	r0, r1, [r6]
   dbfe4:	f001 fbd0 	bl	dd788 <__aeabi_dsub>
   dbfe8:	f1bb 0f00 	cmp.w	fp, #0
   dbfec:	db52      	blt.n	dc094 <atan+0x214>
   dbfee:	4604      	mov	r4, r0
   dbff0:	460d      	mov	r5, r1
   dbff2:	ec45 4b10 	vmov	d0, r4, r5
   dbff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbffa:	2c00      	cmp	r4, #0
   dbffc:	f43f af50 	beq.w	dbea0 <atan+0x20>
   dc000:	4622      	mov	r2, r4
   dc002:	462b      	mov	r3, r5
   dc004:	4620      	mov	r0, r4
   dc006:	4629      	mov	r1, r5
   dc008:	f001 fbc0 	bl	dd78c <__adddf3>
   dc00c:	4604      	mov	r4, r0
   dc00e:	460d      	mov	r5, r1
   dc010:	ec45 4b10 	vmov	d0, r4, r5
   dc014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc018:	a369      	add	r3, pc, #420	; (adr r3, dc1c0 <atan+0x340>)
   dc01a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc01e:	ee10 0a10 	vmov	r0, s0
   dc022:	4629      	mov	r1, r5
   dc024:	f001 fbb2 	bl	dd78c <__adddf3>
   dc028:	2200      	movs	r2, #0
   dc02a:	4b6e      	ldr	r3, [pc, #440]	; (dc1e4 <atan+0x364>)
   dc02c:	f001 fff0 	bl	de010 <__aeabi_dcmpgt>
   dc030:	2800      	cmp	r0, #0
   dc032:	f43f af49 	beq.w	dbec8 <atan+0x48>
   dc036:	ec45 4b10 	vmov	d0, r4, r5
   dc03a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc03e:	f000 f9cb 	bl	dc3d8 <fabs>
   dc042:	4b69      	ldr	r3, [pc, #420]	; (dc1e8 <atan+0x368>)
   dc044:	429e      	cmp	r6, r3
   dc046:	ec55 4b10 	vmov	r4, r5, d0
   dc04a:	dc3f      	bgt.n	dc0cc <atan+0x24c>
   dc04c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   dc050:	429e      	cmp	r6, r3
   dc052:	dc68      	bgt.n	dc126 <atan+0x2a6>
   dc054:	ee10 2a10 	vmov	r2, s0
   dc058:	ee10 0a10 	vmov	r0, s0
   dc05c:	462b      	mov	r3, r5
   dc05e:	4629      	mov	r1, r5
   dc060:	f001 fb94 	bl	dd78c <__adddf3>
   dc064:	2200      	movs	r2, #0
   dc066:	4b5f      	ldr	r3, [pc, #380]	; (dc1e4 <atan+0x364>)
   dc068:	f001 fb8e 	bl	dd788 <__aeabi_dsub>
   dc06c:	2200      	movs	r2, #0
   dc06e:	4606      	mov	r6, r0
   dc070:	460f      	mov	r7, r1
   dc072:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dc076:	4620      	mov	r0, r4
   dc078:	4629      	mov	r1, r5
   dc07a:	f001 fb87 	bl	dd78c <__adddf3>
   dc07e:	4602      	mov	r2, r0
   dc080:	460b      	mov	r3, r1
   dc082:	4630      	mov	r0, r6
   dc084:	4639      	mov	r1, r7
   dc086:	f001 fe5d 	bl	ddd44 <__aeabi_ddiv>
   dc08a:	f04f 0a00 	mov.w	sl, #0
   dc08e:	4604      	mov	r4, r0
   dc090:	460d      	mov	r5, r1
   dc092:	e71b      	b.n	dbecc <atan+0x4c>
   dc094:	4604      	mov	r4, r0
   dc096:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   dc09a:	ec45 4b10 	vmov	d0, r4, r5
   dc09e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc0a2:	a549      	add	r5, pc, #292	; (adr r5, dc1c8 <atan+0x348>)
   dc0a4:	e9d5 4500 	ldrd	r4, r5, [r5]
   dc0a8:	e7b2      	b.n	dc010 <atan+0x190>
   dc0aa:	4640      	mov	r0, r8
   dc0ac:	4649      	mov	r1, r9
   dc0ae:	f001 fb6d 	bl	dd78c <__adddf3>
   dc0b2:	4622      	mov	r2, r4
   dc0b4:	462b      	mov	r3, r5
   dc0b6:	f001 fd1b 	bl	ddaf0 <__aeabi_dmul>
   dc0ba:	4602      	mov	r2, r0
   dc0bc:	460b      	mov	r3, r1
   dc0be:	4620      	mov	r0, r4
   dc0c0:	4629      	mov	r1, r5
   dc0c2:	f001 fb61 	bl	dd788 <__aeabi_dsub>
   dc0c6:	4604      	mov	r4, r0
   dc0c8:	460d      	mov	r5, r1
   dc0ca:	e7a1      	b.n	dc010 <atan+0x190>
   dc0cc:	4b47      	ldr	r3, [pc, #284]	; (dc1ec <atan+0x36c>)
   dc0ce:	429e      	cmp	r6, r3
   dc0d0:	dc1d      	bgt.n	dc10e <atan+0x28e>
   dc0d2:	ee10 0a10 	vmov	r0, s0
   dc0d6:	2200      	movs	r2, #0
   dc0d8:	4b45      	ldr	r3, [pc, #276]	; (dc1f0 <atan+0x370>)
   dc0da:	4629      	mov	r1, r5
   dc0dc:	f001 fb54 	bl	dd788 <__aeabi_dsub>
   dc0e0:	2200      	movs	r2, #0
   dc0e2:	4606      	mov	r6, r0
   dc0e4:	460f      	mov	r7, r1
   dc0e6:	4b42      	ldr	r3, [pc, #264]	; (dc1f0 <atan+0x370>)
   dc0e8:	4620      	mov	r0, r4
   dc0ea:	4629      	mov	r1, r5
   dc0ec:	f001 fd00 	bl	ddaf0 <__aeabi_dmul>
   dc0f0:	2200      	movs	r2, #0
   dc0f2:	4b3c      	ldr	r3, [pc, #240]	; (dc1e4 <atan+0x364>)
   dc0f4:	f001 fb4a 	bl	dd78c <__adddf3>
   dc0f8:	4602      	mov	r2, r0
   dc0fa:	460b      	mov	r3, r1
   dc0fc:	4630      	mov	r0, r6
   dc0fe:	4639      	mov	r1, r7
   dc100:	f001 fe20 	bl	ddd44 <__aeabi_ddiv>
   dc104:	f04f 0a02 	mov.w	sl, #2
   dc108:	4604      	mov	r4, r0
   dc10a:	460d      	mov	r5, r1
   dc10c:	e6de      	b.n	dbecc <atan+0x4c>
   dc10e:	462b      	mov	r3, r5
   dc110:	ee10 2a10 	vmov	r2, s0
   dc114:	2000      	movs	r0, #0
   dc116:	4937      	ldr	r1, [pc, #220]	; (dc1f4 <atan+0x374>)
   dc118:	f001 fe14 	bl	ddd44 <__aeabi_ddiv>
   dc11c:	f04f 0a03 	mov.w	sl, #3
   dc120:	4604      	mov	r4, r0
   dc122:	460d      	mov	r5, r1
   dc124:	e6d2      	b.n	dbecc <atan+0x4c>
   dc126:	ee10 0a10 	vmov	r0, s0
   dc12a:	2200      	movs	r2, #0
   dc12c:	4b2d      	ldr	r3, [pc, #180]	; (dc1e4 <atan+0x364>)
   dc12e:	4629      	mov	r1, r5
   dc130:	f001 fb2a 	bl	dd788 <__aeabi_dsub>
   dc134:	2200      	movs	r2, #0
   dc136:	4606      	mov	r6, r0
   dc138:	460f      	mov	r7, r1
   dc13a:	4b2a      	ldr	r3, [pc, #168]	; (dc1e4 <atan+0x364>)
   dc13c:	4620      	mov	r0, r4
   dc13e:	4629      	mov	r1, r5
   dc140:	f001 fb24 	bl	dd78c <__adddf3>
   dc144:	4602      	mov	r2, r0
   dc146:	460b      	mov	r3, r1
   dc148:	4630      	mov	r0, r6
   dc14a:	4639      	mov	r1, r7
   dc14c:	f001 fdfa 	bl	ddd44 <__aeabi_ddiv>
   dc150:	f04f 0a01 	mov.w	sl, #1
   dc154:	4604      	mov	r4, r0
   dc156:	460d      	mov	r5, r1
   dc158:	e6b8      	b.n	dbecc <atan+0x4c>
   dc15a:	bf00      	nop
   dc15c:	f3af 8000 	nop.w
   dc160:	54442d18 	.word	0x54442d18
   dc164:	3ff921fb 	.word	0x3ff921fb
   dc168:	e322da11 	.word	0xe322da11
   dc16c:	3f90ad3a 	.word	0x3f90ad3a
   dc170:	24760deb 	.word	0x24760deb
   dc174:	3fa97b4b 	.word	0x3fa97b4b
   dc178:	a0d03d51 	.word	0xa0d03d51
   dc17c:	3fb10d66 	.word	0x3fb10d66
   dc180:	c54c206e 	.word	0xc54c206e
   dc184:	3fb745cd 	.word	0x3fb745cd
   dc188:	920083ff 	.word	0x920083ff
   dc18c:	3fc24924 	.word	0x3fc24924
   dc190:	5555550d 	.word	0x5555550d
   dc194:	3fd55555 	.word	0x3fd55555
   dc198:	2c6a6c2f 	.word	0x2c6a6c2f
   dc19c:	bfa2b444 	.word	0xbfa2b444
   dc1a0:	52defd9a 	.word	0x52defd9a
   dc1a4:	3fadde2d 	.word	0x3fadde2d
   dc1a8:	af749a6d 	.word	0xaf749a6d
   dc1ac:	3fb3b0f2 	.word	0x3fb3b0f2
   dc1b0:	fe231671 	.word	0xfe231671
   dc1b4:	3fbc71c6 	.word	0x3fbc71c6
   dc1b8:	9998ebc4 	.word	0x9998ebc4
   dc1bc:	3fc99999 	.word	0x3fc99999
   dc1c0:	8800759c 	.word	0x8800759c
   dc1c4:	7e37e43c 	.word	0x7e37e43c
   dc1c8:	54442d18 	.word	0x54442d18
   dc1cc:	bff921fb 	.word	0xbff921fb
   dc1d0:	440fffff 	.word	0x440fffff
   dc1d4:	7ff00000 	.word	0x7ff00000
   dc1d8:	3fdbffff 	.word	0x3fdbffff
   dc1dc:	000e08c8 	.word	0x000e08c8
   dc1e0:	000e08a8 	.word	0x000e08a8
   dc1e4:	3ff00000 	.word	0x3ff00000
   dc1e8:	3ff2ffff 	.word	0x3ff2ffff
   dc1ec:	40037fff 	.word	0x40037fff
   dc1f0:	3ff80000 	.word	0x3ff80000
   dc1f4:	bff00000 	.word	0xbff00000

000dc1f8 <ceil>:
   dc1f8:	ec51 0b10 	vmov	r0, r1, d0
   dc1fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dc200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc204:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dc208:	2d13      	cmp	r5, #19
   dc20a:	460c      	mov	r4, r1
   dc20c:	460f      	mov	r7, r1
   dc20e:	ee10 6a10 	vmov	r6, s0
   dc212:	dc22      	bgt.n	dc25a <ceil+0x62>
   dc214:	2d00      	cmp	r5, #0
   dc216:	db52      	blt.n	dc2be <ceil+0xc6>
   dc218:	4b3d      	ldr	r3, [pc, #244]	; (dc310 <ceil+0x118>)
   dc21a:	fa43 f805 	asr.w	r8, r3, r5
   dc21e:	ea01 0308 	and.w	r3, r1, r8
   dc222:	4303      	orrs	r3, r0
   dc224:	d01e      	beq.n	dc264 <ceil+0x6c>
   dc226:	a338      	add	r3, pc, #224	; (adr r3, dc308 <ceil+0x110>)
   dc228:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc22c:	f001 faae 	bl	dd78c <__adddf3>
   dc230:	2200      	movs	r2, #0
   dc232:	2300      	movs	r3, #0
   dc234:	f001 feec 	bl	de010 <__aeabi_dcmpgt>
   dc238:	b148      	cbz	r0, dc24e <ceil+0x56>
   dc23a:	2c00      	cmp	r4, #0
   dc23c:	dd04      	ble.n	dc248 <ceil+0x50>
   dc23e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dc242:	fa43 f505 	asr.w	r5, r3, r5
   dc246:	442f      	add	r7, r5
   dc248:	ea27 0408 	bic.w	r4, r7, r8
   dc24c:	2600      	movs	r6, #0
   dc24e:	4623      	mov	r3, r4
   dc250:	4632      	mov	r2, r6
   dc252:	ec43 2b10 	vmov	d0, r2, r3
   dc256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc25a:	2d33      	cmp	r5, #51	; 0x33
   dc25c:	dd06      	ble.n	dc26c <ceil+0x74>
   dc25e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dc262:	d03e      	beq.n	dc2e2 <ceil+0xea>
   dc264:	ec41 0b10 	vmov	d0, r0, r1
   dc268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc26c:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dc270:	f04f 38ff 	mov.w	r8, #4294967295
   dc274:	fa28 f803 	lsr.w	r8, r8, r3
   dc278:	ea10 0f08 	tst.w	r0, r8
   dc27c:	d0f2      	beq.n	dc264 <ceil+0x6c>
   dc27e:	a322      	add	r3, pc, #136	; (adr r3, dc308 <ceil+0x110>)
   dc280:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc284:	f001 fa82 	bl	dd78c <__adddf3>
   dc288:	2200      	movs	r2, #0
   dc28a:	2300      	movs	r3, #0
   dc28c:	f001 fec0 	bl	de010 <__aeabi_dcmpgt>
   dc290:	2800      	cmp	r0, #0
   dc292:	d0dc      	beq.n	dc24e <ceil+0x56>
   dc294:	2c00      	cmp	r4, #0
   dc296:	dd09      	ble.n	dc2ac <ceil+0xb4>
   dc298:	2d14      	cmp	r5, #20
   dc29a:	d031      	beq.n	dc300 <ceil+0x108>
   dc29c:	2301      	movs	r3, #1
   dc29e:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dc2a2:	fa03 f505 	lsl.w	r5, r3, r5
   dc2a6:	19ae      	adds	r6, r5, r6
   dc2a8:	bf28      	it	cs
   dc2aa:	18ff      	addcs	r7, r7, r3
   dc2ac:	463c      	mov	r4, r7
   dc2ae:	ea26 0608 	bic.w	r6, r6, r8
   dc2b2:	4623      	mov	r3, r4
   dc2b4:	4632      	mov	r2, r6
   dc2b6:	ec43 2b10 	vmov	d0, r2, r3
   dc2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc2be:	a312      	add	r3, pc, #72	; (adr r3, dc308 <ceil+0x110>)
   dc2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc2c4:	f001 fa62 	bl	dd78c <__adddf3>
   dc2c8:	2200      	movs	r2, #0
   dc2ca:	2300      	movs	r3, #0
   dc2cc:	f001 fea0 	bl	de010 <__aeabi_dcmpgt>
   dc2d0:	2800      	cmp	r0, #0
   dc2d2:	d0bc      	beq.n	dc24e <ceil+0x56>
   dc2d4:	2c00      	cmp	r4, #0
   dc2d6:	db0f      	blt.n	dc2f8 <ceil+0x100>
   dc2d8:	4326      	orrs	r6, r4
   dc2da:	d00b      	beq.n	dc2f4 <ceil+0xfc>
   dc2dc:	2600      	movs	r6, #0
   dc2de:	4c0d      	ldr	r4, [pc, #52]	; (dc314 <ceil+0x11c>)
   dc2e0:	e7b5      	b.n	dc24e <ceil+0x56>
   dc2e2:	ee10 2a10 	vmov	r2, s0
   dc2e6:	460b      	mov	r3, r1
   dc2e8:	f001 fa50 	bl	dd78c <__adddf3>
   dc2ec:	ec41 0b10 	vmov	d0, r0, r1
   dc2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc2f4:	4634      	mov	r4, r6
   dc2f6:	e7aa      	b.n	dc24e <ceil+0x56>
   dc2f8:	2600      	movs	r6, #0
   dc2fa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   dc2fe:	e7a6      	b.n	dc24e <ceil+0x56>
   dc300:	3701      	adds	r7, #1
   dc302:	e7d3      	b.n	dc2ac <ceil+0xb4>
   dc304:	f3af 8000 	nop.w
   dc308:	8800759c 	.word	0x8800759c
   dc30c:	7e37e43c 	.word	0x7e37e43c
   dc310:	000fffff 	.word	0x000fffff
   dc314:	3ff00000 	.word	0x3ff00000

000dc318 <cos>:
   dc318:	b500      	push	{lr}
   dc31a:	ec51 0b10 	vmov	r0, r1, d0
   dc31e:	4a2c      	ldr	r2, [pc, #176]	; (dc3d0 <cos+0xb8>)
   dc320:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc324:	4293      	cmp	r3, r2
   dc326:	b085      	sub	sp, #20
   dc328:	dd20      	ble.n	dc36c <cos+0x54>
   dc32a:	4a2a      	ldr	r2, [pc, #168]	; (dc3d4 <cos+0xbc>)
   dc32c:	4293      	cmp	r3, r2
   dc32e:	dd09      	ble.n	dc344 <cos+0x2c>
   dc330:	ee10 2a10 	vmov	r2, s0
   dc334:	460b      	mov	r3, r1
   dc336:	f001 fa27 	bl	dd788 <__aeabi_dsub>
   dc33a:	ec41 0b10 	vmov	d0, r0, r1
   dc33e:	b005      	add	sp, #20
   dc340:	f85d fb04 	ldr.w	pc, [sp], #4
   dc344:	4668      	mov	r0, sp
   dc346:	f000 f8af 	bl	dc4a8 <__ieee754_rem_pio2>
   dc34a:	f000 0003 	and.w	r0, r0, #3
   dc34e:	2801      	cmp	r0, #1
   dc350:	d028      	beq.n	dc3a4 <cos+0x8c>
   dc352:	2802      	cmp	r0, #2
   dc354:	d015      	beq.n	dc382 <cos+0x6a>
   dc356:	b360      	cbz	r0, dc3b2 <cos+0x9a>
   dc358:	2001      	movs	r0, #1
   dc35a:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc35e:	ed9d 0b00 	vldr	d0, [sp]
   dc362:	f001 f81d 	bl	dd3a0 <__kernel_sin>
   dc366:	ec51 0b10 	vmov	r0, r1, d0
   dc36a:	e7e6      	b.n	dc33a <cos+0x22>
   dc36c:	ed9f 1b16 	vldr	d1, [pc, #88]	; dc3c8 <cos+0xb0>
   dc370:	f000 fac2 	bl	dc8f8 <__kernel_cos>
   dc374:	ec51 0b10 	vmov	r0, r1, d0
   dc378:	ec41 0b10 	vmov	d0, r0, r1
   dc37c:	b005      	add	sp, #20
   dc37e:	f85d fb04 	ldr.w	pc, [sp], #4
   dc382:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc386:	ed9d 0b00 	vldr	d0, [sp]
   dc38a:	f000 fab5 	bl	dc8f8 <__kernel_cos>
   dc38e:	ec53 2b10 	vmov	r2, r3, d0
   dc392:	ee10 0a10 	vmov	r0, s0
   dc396:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dc39a:	ec41 0b10 	vmov	d0, r0, r1
   dc39e:	b005      	add	sp, #20
   dc3a0:	f85d fb04 	ldr.w	pc, [sp], #4
   dc3a4:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc3a8:	ed9d 0b00 	vldr	d0, [sp]
   dc3ac:	f000 fff8 	bl	dd3a0 <__kernel_sin>
   dc3b0:	e7ed      	b.n	dc38e <cos+0x76>
   dc3b2:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc3b6:	ed9d 0b00 	vldr	d0, [sp]
   dc3ba:	f000 fa9d 	bl	dc8f8 <__kernel_cos>
   dc3be:	ec51 0b10 	vmov	r0, r1, d0
   dc3c2:	e7ba      	b.n	dc33a <cos+0x22>
   dc3c4:	f3af 8000 	nop.w
	...
   dc3d0:	3fe921fb 	.word	0x3fe921fb
   dc3d4:	7fefffff 	.word	0x7fefffff

000dc3d8 <fabs>:
   dc3d8:	ec53 2b10 	vmov	r2, r3, d0
   dc3dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   dc3e0:	ec43 2b10 	vmov	d0, r2, r3
   dc3e4:	4770      	bx	lr
   dc3e6:	bf00      	nop

000dc3e8 <sin>:
   dc3e8:	b500      	push	{lr}
   dc3ea:	ec51 0b10 	vmov	r0, r1, d0
   dc3ee:	4a2c      	ldr	r2, [pc, #176]	; (dc4a0 <sin+0xb8>)
   dc3f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dc3f4:	4293      	cmp	r3, r2
   dc3f6:	b085      	sub	sp, #20
   dc3f8:	dd27      	ble.n	dc44a <sin+0x62>
   dc3fa:	4a2a      	ldr	r2, [pc, #168]	; (dc4a4 <sin+0xbc>)
   dc3fc:	4293      	cmp	r3, r2
   dc3fe:	dd09      	ble.n	dc414 <sin+0x2c>
   dc400:	ee10 2a10 	vmov	r2, s0
   dc404:	460b      	mov	r3, r1
   dc406:	f001 f9bf 	bl	dd788 <__aeabi_dsub>
   dc40a:	ec41 0b10 	vmov	d0, r0, r1
   dc40e:	b005      	add	sp, #20
   dc410:	f85d fb04 	ldr.w	pc, [sp], #4
   dc414:	4668      	mov	r0, sp
   dc416:	f000 f847 	bl	dc4a8 <__ieee754_rem_pio2>
   dc41a:	f000 0003 	and.w	r0, r0, #3
   dc41e:	2801      	cmp	r0, #1
   dc420:	d027      	beq.n	dc472 <sin+0x8a>
   dc422:	2802      	cmp	r0, #2
   dc424:	d01d      	beq.n	dc462 <sin+0x7a>
   dc426:	b368      	cbz	r0, dc484 <sin+0x9c>
   dc428:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc42c:	ed9d 0b00 	vldr	d0, [sp]
   dc430:	f000 fa62 	bl	dc8f8 <__kernel_cos>
   dc434:	ec53 2b10 	vmov	r2, r3, d0
   dc438:	ee10 0a10 	vmov	r0, s0
   dc43c:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   dc440:	ec41 0b10 	vmov	d0, r0, r1
   dc444:	b005      	add	sp, #20
   dc446:	f85d fb04 	ldr.w	pc, [sp], #4
   dc44a:	2000      	movs	r0, #0
   dc44c:	ed9f 1b12 	vldr	d1, [pc, #72]	; dc498 <sin+0xb0>
   dc450:	f000 ffa6 	bl	dd3a0 <__kernel_sin>
   dc454:	ec51 0b10 	vmov	r0, r1, d0
   dc458:	ec41 0b10 	vmov	d0, r0, r1
   dc45c:	b005      	add	sp, #20
   dc45e:	f85d fb04 	ldr.w	pc, [sp], #4
   dc462:	2001      	movs	r0, #1
   dc464:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc468:	ed9d 0b00 	vldr	d0, [sp]
   dc46c:	f000 ff98 	bl	dd3a0 <__kernel_sin>
   dc470:	e7e0      	b.n	dc434 <sin+0x4c>
   dc472:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc476:	ed9d 0b00 	vldr	d0, [sp]
   dc47a:	f000 fa3d 	bl	dc8f8 <__kernel_cos>
   dc47e:	ec51 0b10 	vmov	r0, r1, d0
   dc482:	e7c2      	b.n	dc40a <sin+0x22>
   dc484:	2001      	movs	r0, #1
   dc486:	ed9d 1b02 	vldr	d1, [sp, #8]
   dc48a:	ed9d 0b00 	vldr	d0, [sp]
   dc48e:	f000 ff87 	bl	dd3a0 <__kernel_sin>
   dc492:	ec51 0b10 	vmov	r0, r1, d0
   dc496:	e7b8      	b.n	dc40a <sin+0x22>
	...
   dc4a0:	3fe921fb 	.word	0x3fe921fb
   dc4a4:	7fefffff 	.word	0x7fefffff

000dc4a8 <__ieee754_rem_pio2>:
   dc4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc4ac:	ec53 2b10 	vmov	r2, r3, d0
   dc4b0:	4997      	ldr	r1, [pc, #604]	; (dc710 <__ieee754_rem_pio2+0x268>)
   dc4b2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
   dc4b6:	458b      	cmp	fp, r1
   dc4b8:	b08f      	sub	sp, #60	; 0x3c
   dc4ba:	f340 8087 	ble.w	dc5cc <__ieee754_rem_pio2+0x124>
   dc4be:	4995      	ldr	r1, [pc, #596]	; (dc714 <__ieee754_rem_pio2+0x26c>)
   dc4c0:	458b      	cmp	fp, r1
   dc4c2:	461c      	mov	r4, r3
   dc4c4:	4682      	mov	sl, r0
   dc4c6:	dc29      	bgt.n	dc51c <__ieee754_rem_pio2+0x74>
   dc4c8:	2c00      	cmp	r4, #0
   dc4ca:	4619      	mov	r1, r3
   dc4cc:	ee10 0a10 	vmov	r0, s0
   dc4d0:	a385      	add	r3, pc, #532	; (adr r3, dc6e8 <__ieee754_rem_pio2+0x240>)
   dc4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc4d6:	f340 81a5 	ble.w	dc824 <__ieee754_rem_pio2+0x37c>
   dc4da:	f001 f955 	bl	dd788 <__aeabi_dsub>
   dc4de:	4b8e      	ldr	r3, [pc, #568]	; (dc718 <__ieee754_rem_pio2+0x270>)
   dc4e0:	459b      	cmp	fp, r3
   dc4e2:	4604      	mov	r4, r0
   dc4e4:	460d      	mov	r5, r1
   dc4e6:	f000 8087 	beq.w	dc5f8 <__ieee754_rem_pio2+0x150>
   dc4ea:	a381      	add	r3, pc, #516	; (adr r3, dc6f0 <__ieee754_rem_pio2+0x248>)
   dc4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc4f0:	f001 f94a 	bl	dd788 <__aeabi_dsub>
   dc4f4:	4602      	mov	r2, r0
   dc4f6:	460b      	mov	r3, r1
   dc4f8:	e9ca 2300 	strd	r2, r3, [sl]
   dc4fc:	4620      	mov	r0, r4
   dc4fe:	4629      	mov	r1, r5
   dc500:	f001 f942 	bl	dd788 <__aeabi_dsub>
   dc504:	a37a      	add	r3, pc, #488	; (adr r3, dc6f0 <__ieee754_rem_pio2+0x248>)
   dc506:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc50a:	f001 f93d 	bl	dd788 <__aeabi_dsub>
   dc50e:	2501      	movs	r5, #1
   dc510:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc514:	4628      	mov	r0, r5
   dc516:	b00f      	add	sp, #60	; 0x3c
   dc518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc51c:	497f      	ldr	r1, [pc, #508]	; (dc71c <__ieee754_rem_pio2+0x274>)
   dc51e:	458b      	cmp	fp, r1
   dc520:	f340 8087 	ble.w	dc632 <__ieee754_rem_pio2+0x18a>
   dc524:	497e      	ldr	r1, [pc, #504]	; (dc720 <__ieee754_rem_pio2+0x278>)
   dc526:	458b      	cmp	fp, r1
   dc528:	dc5b      	bgt.n	dc5e2 <__ieee754_rem_pio2+0x13a>
   dc52a:	ea4f 552b 	mov.w	r5, fp, asr #20
   dc52e:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   dc532:	ebab 5705 	sub.w	r7, fp, r5, lsl #20
   dc536:	4610      	mov	r0, r2
   dc538:	4639      	mov	r1, r7
   dc53a:	ee10 6a10 	vmov	r6, s0
   dc53e:	f001 fd87 	bl	de050 <__aeabi_d2iz>
   dc542:	f001 fa6f 	bl	dda24 <__aeabi_i2d>
   dc546:	4680      	mov	r8, r0
   dc548:	4689      	mov	r9, r1
   dc54a:	4642      	mov	r2, r8
   dc54c:	464b      	mov	r3, r9
   dc54e:	4630      	mov	r0, r6
   dc550:	4639      	mov	r1, r7
   dc552:	e9cd 8908 	strd	r8, r9, [sp, #32]
   dc556:	f001 f917 	bl	dd788 <__aeabi_dsub>
   dc55a:	2200      	movs	r2, #0
   dc55c:	4b71      	ldr	r3, [pc, #452]	; (dc724 <__ieee754_rem_pio2+0x27c>)
   dc55e:	f001 fac7 	bl	ddaf0 <__aeabi_dmul>
   dc562:	4689      	mov	r9, r1
   dc564:	4680      	mov	r8, r0
   dc566:	f001 fd73 	bl	de050 <__aeabi_d2iz>
   dc56a:	f001 fa5b 	bl	dda24 <__aeabi_i2d>
   dc56e:	4606      	mov	r6, r0
   dc570:	460f      	mov	r7, r1
   dc572:	4632      	mov	r2, r6
   dc574:	463b      	mov	r3, r7
   dc576:	4640      	mov	r0, r8
   dc578:	4649      	mov	r1, r9
   dc57a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   dc57e:	f001 f903 	bl	dd788 <__aeabi_dsub>
   dc582:	2200      	movs	r2, #0
   dc584:	4b67      	ldr	r3, [pc, #412]	; (dc724 <__ieee754_rem_pio2+0x27c>)
   dc586:	f001 fab3 	bl	ddaf0 <__aeabi_dmul>
   dc58a:	2200      	movs	r2, #0
   dc58c:	2300      	movs	r3, #0
   dc58e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dc592:	f001 fd15 	bl	ddfc0 <__aeabi_dcmpeq>
   dc596:	2800      	cmp	r0, #0
   dc598:	f000 8170 	beq.w	dc87c <__ieee754_rem_pio2+0x3d4>
   dc59c:	2300      	movs	r3, #0
   dc59e:	4630      	mov	r0, r6
   dc5a0:	4639      	mov	r1, r7
   dc5a2:	2200      	movs	r2, #0
   dc5a4:	f001 fd0c 	bl	ddfc0 <__aeabi_dcmpeq>
   dc5a8:	2800      	cmp	r0, #0
   dc5aa:	bf14      	ite	ne
   dc5ac:	2301      	movne	r3, #1
   dc5ae:	2302      	moveq	r3, #2
   dc5b0:	4a5d      	ldr	r2, [pc, #372]	; (dc728 <__ieee754_rem_pio2+0x280>)
   dc5b2:	9201      	str	r2, [sp, #4]
   dc5b4:	2102      	movs	r1, #2
   dc5b6:	9100      	str	r1, [sp, #0]
   dc5b8:	462a      	mov	r2, r5
   dc5ba:	4651      	mov	r1, sl
   dc5bc:	a808      	add	r0, sp, #32
   dc5be:	f000 fadf 	bl	dcb80 <__kernel_rem_pio2>
   dc5c2:	2c00      	cmp	r4, #0
   dc5c4:	f2c0 814c 	blt.w	dc860 <__ieee754_rem_pio2+0x3b8>
   dc5c8:	4605      	mov	r5, r0
   dc5ca:	e006      	b.n	dc5da <__ieee754_rem_pio2+0x132>
   dc5cc:	ed80 0b00 	vstr	d0, [r0]
   dc5d0:	2500      	movs	r5, #0
   dc5d2:	2400      	movs	r4, #0
   dc5d4:	e9c0 4502 	strd	r4, r5, [r0, #8]
   dc5d8:	2500      	movs	r5, #0
   dc5da:	4628      	mov	r0, r5
   dc5dc:	b00f      	add	sp, #60	; 0x3c
   dc5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5e2:	ee10 0a10 	vmov	r0, s0
   dc5e6:	4619      	mov	r1, r3
   dc5e8:	f001 f8ce 	bl	dd788 <__aeabi_dsub>
   dc5ec:	2500      	movs	r5, #0
   dc5ee:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc5f2:	e9ca 0100 	strd	r0, r1, [sl]
   dc5f6:	e7f0      	b.n	dc5da <__ieee754_rem_pio2+0x132>
   dc5f8:	a33f      	add	r3, pc, #252	; (adr r3, dc6f8 <__ieee754_rem_pio2+0x250>)
   dc5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc5fe:	f001 f8c3 	bl	dd788 <__aeabi_dsub>
   dc602:	a33f      	add	r3, pc, #252	; (adr r3, dc700 <__ieee754_rem_pio2+0x258>)
   dc604:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc608:	460d      	mov	r5, r1
   dc60a:	4604      	mov	r4, r0
   dc60c:	f001 f8bc 	bl	dd788 <__aeabi_dsub>
   dc610:	4602      	mov	r2, r0
   dc612:	460b      	mov	r3, r1
   dc614:	e9ca 2300 	strd	r2, r3, [sl]
   dc618:	4629      	mov	r1, r5
   dc61a:	4620      	mov	r0, r4
   dc61c:	f001 f8b4 	bl	dd788 <__aeabi_dsub>
   dc620:	a337      	add	r3, pc, #220	; (adr r3, dc700 <__ieee754_rem_pio2+0x258>)
   dc622:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc626:	f001 f8af 	bl	dd788 <__aeabi_dsub>
   dc62a:	2501      	movs	r5, #1
   dc62c:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc630:	e7d3      	b.n	dc5da <__ieee754_rem_pio2+0x132>
   dc632:	f7ff fed1 	bl	dc3d8 <fabs>
   dc636:	ec57 6b10 	vmov	r6, r7, d0
   dc63a:	ee10 0a10 	vmov	r0, s0
   dc63e:	a332      	add	r3, pc, #200	; (adr r3, dc708 <__ieee754_rem_pio2+0x260>)
   dc640:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc644:	4639      	mov	r1, r7
   dc646:	f001 fa53 	bl	ddaf0 <__aeabi_dmul>
   dc64a:	2200      	movs	r2, #0
   dc64c:	4b37      	ldr	r3, [pc, #220]	; (dc72c <__ieee754_rem_pio2+0x284>)
   dc64e:	f001 f89d 	bl	dd78c <__adddf3>
   dc652:	f001 fcfd 	bl	de050 <__aeabi_d2iz>
   dc656:	4605      	mov	r5, r0
   dc658:	f001 f9e4 	bl	dda24 <__aeabi_i2d>
   dc65c:	a322      	add	r3, pc, #136	; (adr r3, dc6e8 <__ieee754_rem_pio2+0x240>)
   dc65e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc662:	e9cd 0104 	strd	r0, r1, [sp, #16]
   dc666:	f001 fa43 	bl	ddaf0 <__aeabi_dmul>
   dc66a:	4602      	mov	r2, r0
   dc66c:	460b      	mov	r3, r1
   dc66e:	4630      	mov	r0, r6
   dc670:	4639      	mov	r1, r7
   dc672:	f001 f889 	bl	dd788 <__aeabi_dsub>
   dc676:	a31e      	add	r3, pc, #120	; (adr r3, dc6f0 <__ieee754_rem_pio2+0x248>)
   dc678:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc67c:	4680      	mov	r8, r0
   dc67e:	4689      	mov	r9, r1
   dc680:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dc684:	f001 fa34 	bl	ddaf0 <__aeabi_dmul>
   dc688:	2d1f      	cmp	r5, #31
   dc68a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dc68e:	dc51      	bgt.n	dc734 <__ieee754_rem_pio2+0x28c>
   dc690:	4b27      	ldr	r3, [pc, #156]	; (dc730 <__ieee754_rem_pio2+0x288>)
   dc692:	1e6a      	subs	r2, r5, #1
   dc694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   dc698:	459b      	cmp	fp, r3
   dc69a:	d04b      	beq.n	dc734 <__ieee754_rem_pio2+0x28c>
   dc69c:	4602      	mov	r2, r0
   dc69e:	460b      	mov	r3, r1
   dc6a0:	4640      	mov	r0, r8
   dc6a2:	4649      	mov	r1, r9
   dc6a4:	f001 f870 	bl	dd788 <__aeabi_dsub>
   dc6a8:	4606      	mov	r6, r0
   dc6aa:	460f      	mov	r7, r1
   dc6ac:	e9ca 6700 	strd	r6, r7, [sl]
   dc6b0:	4632      	mov	r2, r6
   dc6b2:	463b      	mov	r3, r7
   dc6b4:	4640      	mov	r0, r8
   dc6b6:	4649      	mov	r1, r9
   dc6b8:	f001 f866 	bl	dd788 <__aeabi_dsub>
   dc6bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc6c0:	f001 f862 	bl	dd788 <__aeabi_dsub>
   dc6c4:	2c00      	cmp	r4, #0
   dc6c6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc6ca:	da86      	bge.n	dc5da <__ieee754_rem_pio2+0x132>
   dc6cc:	f107 4400 	add.w	r4, r7, #2147483648	; 0x80000000
   dc6d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dc6d4:	426d      	negs	r5, r5
   dc6d6:	f8ca 6000 	str.w	r6, [sl]
   dc6da:	f8ca 4004 	str.w	r4, [sl, #4]
   dc6de:	f8ca 0008 	str.w	r0, [sl, #8]
   dc6e2:	f8ca 300c 	str.w	r3, [sl, #12]
   dc6e6:	e778      	b.n	dc5da <__ieee754_rem_pio2+0x132>
   dc6e8:	54400000 	.word	0x54400000
   dc6ec:	3ff921fb 	.word	0x3ff921fb
   dc6f0:	1a626331 	.word	0x1a626331
   dc6f4:	3dd0b461 	.word	0x3dd0b461
   dc6f8:	1a600000 	.word	0x1a600000
   dc6fc:	3dd0b461 	.word	0x3dd0b461
   dc700:	2e037073 	.word	0x2e037073
   dc704:	3ba3198a 	.word	0x3ba3198a
   dc708:	6dc9c883 	.word	0x6dc9c883
   dc70c:	3fe45f30 	.word	0x3fe45f30
   dc710:	3fe921fb 	.word	0x3fe921fb
   dc714:	4002d97b 	.word	0x4002d97b
   dc718:	3ff921fb 	.word	0x3ff921fb
   dc71c:	413921fb 	.word	0x413921fb
   dc720:	7fefffff 	.word	0x7fefffff
   dc724:	41700000 	.word	0x41700000
   dc728:	000e0968 	.word	0x000e0968
   dc72c:	3fe00000 	.word	0x3fe00000
   dc730:	000e08e8 	.word	0x000e08e8
   dc734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc738:	4640      	mov	r0, r8
   dc73a:	4649      	mov	r1, r9
   dc73c:	f001 f824 	bl	dd788 <__aeabi_dsub>
   dc740:	ea4f 5b2b 	mov.w	fp, fp, asr #20
   dc744:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dc748:	ebc3 030b 	rsb	r3, r3, fp
   dc74c:	4606      	mov	r6, r0
   dc74e:	460f      	mov	r7, r1
   dc750:	2b10      	cmp	r3, #16
   dc752:	e9ca 6700 	strd	r6, r7, [sl]
   dc756:	ddab      	ble.n	dc6b0 <__ieee754_rem_pio2+0x208>
   dc758:	a35d      	add	r3, pc, #372	; (adr r3, dc8d0 <__ieee754_rem_pio2+0x428>)
   dc75a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc75e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dc762:	f001 f9c5 	bl	ddaf0 <__aeabi_dmul>
   dc766:	4606      	mov	r6, r0
   dc768:	460f      	mov	r7, r1
   dc76a:	4602      	mov	r2, r0
   dc76c:	460b      	mov	r3, r1
   dc76e:	4640      	mov	r0, r8
   dc770:	4649      	mov	r1, r9
   dc772:	f001 f809 	bl	dd788 <__aeabi_dsub>
   dc776:	e9cd 0106 	strd	r0, r1, [sp, #24]
   dc77a:	4602      	mov	r2, r0
   dc77c:	460b      	mov	r3, r1
   dc77e:	4640      	mov	r0, r8
   dc780:	4649      	mov	r1, r9
   dc782:	f001 f801 	bl	dd788 <__aeabi_dsub>
   dc786:	4632      	mov	r2, r6
   dc788:	463b      	mov	r3, r7
   dc78a:	f000 fffd 	bl	dd788 <__aeabi_dsub>
   dc78e:	a352      	add	r3, pc, #328	; (adr r3, dc8d8 <__ieee754_rem_pio2+0x430>)
   dc790:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc794:	4606      	mov	r6, r0
   dc796:	460f      	mov	r7, r1
   dc798:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dc79c:	f001 f9a8 	bl	ddaf0 <__aeabi_dmul>
   dc7a0:	4632      	mov	r2, r6
   dc7a2:	463b      	mov	r3, r7
   dc7a4:	f000 fff0 	bl	dd788 <__aeabi_dsub>
   dc7a8:	460b      	mov	r3, r1
   dc7aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dc7ae:	4602      	mov	r2, r0
   dc7b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dc7b4:	f000 ffe8 	bl	dd788 <__aeabi_dsub>
   dc7b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dc7bc:	ebc3 0b0b 	rsb	fp, r3, fp
   dc7c0:	4606      	mov	r6, r0
   dc7c2:	460f      	mov	r7, r1
   dc7c4:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
   dc7c8:	e9ca 6700 	strd	r6, r7, [sl]
   dc7cc:	dd76      	ble.n	dc8bc <__ieee754_rem_pio2+0x414>
   dc7ce:	a345      	add	r3, pc, #276	; (adr r3, dc8e4 <__ieee754_rem_pio2+0x43c>)
   dc7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc7d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dc7d8:	f001 f98a 	bl	ddaf0 <__aeabi_dmul>
   dc7dc:	4606      	mov	r6, r0
   dc7de:	460f      	mov	r7, r1
   dc7e0:	4602      	mov	r2, r0
   dc7e2:	460b      	mov	r3, r1
   dc7e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dc7e8:	f000 ffce 	bl	dd788 <__aeabi_dsub>
   dc7ec:	4602      	mov	r2, r0
   dc7ee:	460b      	mov	r3, r1
   dc7f0:	4680      	mov	r8, r0
   dc7f2:	4689      	mov	r9, r1
   dc7f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   dc7f8:	f000 ffc6 	bl	dd788 <__aeabi_dsub>
   dc7fc:	4632      	mov	r2, r6
   dc7fe:	463b      	mov	r3, r7
   dc800:	f000 ffc2 	bl	dd788 <__aeabi_dsub>
   dc804:	a339      	add	r3, pc, #228	; (adr r3, dc8ec <__ieee754_rem_pio2+0x444>)
   dc806:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc80a:	4606      	mov	r6, r0
   dc80c:	460f      	mov	r7, r1
   dc80e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dc812:	f001 f96d 	bl	ddaf0 <__aeabi_dmul>
   dc816:	4632      	mov	r2, r6
   dc818:	463b      	mov	r3, r7
   dc81a:	f000 ffb5 	bl	dd788 <__aeabi_dsub>
   dc81e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   dc822:	e73b      	b.n	dc69c <__ieee754_rem_pio2+0x1f4>
   dc824:	f000 ffb2 	bl	dd78c <__adddf3>
   dc828:	4b2d      	ldr	r3, [pc, #180]	; (dc8e0 <__ieee754_rem_pio2+0x438>)
   dc82a:	459b      	cmp	fp, r3
   dc82c:	4604      	mov	r4, r0
   dc82e:	460d      	mov	r5, r1
   dc830:	d026      	beq.n	dc880 <__ieee754_rem_pio2+0x3d8>
   dc832:	a325      	add	r3, pc, #148	; (adr r3, dc8c8 <__ieee754_rem_pio2+0x420>)
   dc834:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc838:	f000 ffa8 	bl	dd78c <__adddf3>
   dc83c:	4602      	mov	r2, r0
   dc83e:	460b      	mov	r3, r1
   dc840:	e9ca 2300 	strd	r2, r3, [sl]
   dc844:	4629      	mov	r1, r5
   dc846:	4620      	mov	r0, r4
   dc848:	f000 ff9e 	bl	dd788 <__aeabi_dsub>
   dc84c:	a31e      	add	r3, pc, #120	; (adr r3, dc8c8 <__ieee754_rem_pio2+0x420>)
   dc84e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc852:	f000 ff9b 	bl	dd78c <__adddf3>
   dc856:	f04f 35ff 	mov.w	r5, #4294967295
   dc85a:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc85e:	e6bc      	b.n	dc5da <__ieee754_rem_pio2+0x132>
   dc860:	f8da 2004 	ldr.w	r2, [sl, #4]
   dc864:	f8da 300c 	ldr.w	r3, [sl, #12]
   dc868:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   dc86c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   dc870:	4245      	negs	r5, r0
   dc872:	f8ca 2004 	str.w	r2, [sl, #4]
   dc876:	f8ca 300c 	str.w	r3, [sl, #12]
   dc87a:	e6ae      	b.n	dc5da <__ieee754_rem_pio2+0x132>
   dc87c:	2303      	movs	r3, #3
   dc87e:	e697      	b.n	dc5b0 <__ieee754_rem_pio2+0x108>
   dc880:	a313      	add	r3, pc, #76	; (adr r3, dc8d0 <__ieee754_rem_pio2+0x428>)
   dc882:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc886:	f000 ff81 	bl	dd78c <__adddf3>
   dc88a:	a313      	add	r3, pc, #76	; (adr r3, dc8d8 <__ieee754_rem_pio2+0x430>)
   dc88c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc890:	460d      	mov	r5, r1
   dc892:	4604      	mov	r4, r0
   dc894:	f000 ff7a 	bl	dd78c <__adddf3>
   dc898:	4602      	mov	r2, r0
   dc89a:	460b      	mov	r3, r1
   dc89c:	e9ca 2300 	strd	r2, r3, [sl]
   dc8a0:	4629      	mov	r1, r5
   dc8a2:	4620      	mov	r0, r4
   dc8a4:	f000 ff70 	bl	dd788 <__aeabi_dsub>
   dc8a8:	a30b      	add	r3, pc, #44	; (adr r3, dc8d8 <__ieee754_rem_pio2+0x430>)
   dc8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc8ae:	f000 ff6d 	bl	dd78c <__adddf3>
   dc8b2:	f04f 35ff 	mov.w	r5, #4294967295
   dc8b6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   dc8ba:	e68e      	b.n	dc5da <__ieee754_rem_pio2+0x132>
   dc8bc:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   dc8c0:	e6f6      	b.n	dc6b0 <__ieee754_rem_pio2+0x208>
   dc8c2:	bf00      	nop
   dc8c4:	f3af 8000 	nop.w
   dc8c8:	1a626331 	.word	0x1a626331
   dc8cc:	3dd0b461 	.word	0x3dd0b461
   dc8d0:	1a600000 	.word	0x1a600000
   dc8d4:	3dd0b461 	.word	0x3dd0b461
   dc8d8:	2e037073 	.word	0x2e037073
   dc8dc:	3ba3198a 	.word	0x3ba3198a
   dc8e0:	3ff921fb 	.word	0x3ff921fb
   dc8e4:	2e000000 	.word	0x2e000000
   dc8e8:	3ba3198a 	.word	0x3ba3198a
   dc8ec:	252049c1 	.word	0x252049c1
   dc8f0:	397b839a 	.word	0x397b839a
   dc8f4:	00000000 	.word	0x00000000

000dc8f8 <__kernel_cos>:
   dc8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc8fc:	ec57 6b10 	vmov	r6, r7, d0
   dc900:	ed2d 8b02 	vpush	{d8}
   dc904:	eeb0 8a41 	vmov.f32	s16, s2
   dc908:	eef0 8a61 	vmov.f32	s17, s3
   dc90c:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   dc910:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   dc914:	b083      	sub	sp, #12
   dc916:	da72      	bge.n	dc9fe <__kernel_cos+0x106>
   dc918:	ee10 0a10 	vmov	r0, s0
   dc91c:	4639      	mov	r1, r7
   dc91e:	f001 fb97 	bl	de050 <__aeabi_d2iz>
   dc922:	2800      	cmp	r0, #0
   dc924:	f000 80f6 	beq.w	dcb14 <__kernel_cos+0x21c>
   dc928:	4632      	mov	r2, r6
   dc92a:	463b      	mov	r3, r7
   dc92c:	4630      	mov	r0, r6
   dc92e:	4639      	mov	r1, r7
   dc930:	f001 f8de 	bl	ddaf0 <__aeabi_dmul>
   dc934:	a37c      	add	r3, pc, #496	; (adr r3, dcb28 <__kernel_cos+0x230>)
   dc936:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc93a:	4604      	mov	r4, r0
   dc93c:	460d      	mov	r5, r1
   dc93e:	f001 f8d7 	bl	ddaf0 <__aeabi_dmul>
   dc942:	a37b      	add	r3, pc, #492	; (adr r3, dcb30 <__kernel_cos+0x238>)
   dc944:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc948:	f000 ff20 	bl	dd78c <__adddf3>
   dc94c:	4622      	mov	r2, r4
   dc94e:	462b      	mov	r3, r5
   dc950:	f001 f8ce 	bl	ddaf0 <__aeabi_dmul>
   dc954:	a378      	add	r3, pc, #480	; (adr r3, dcb38 <__kernel_cos+0x240>)
   dc956:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc95a:	f000 ff15 	bl	dd788 <__aeabi_dsub>
   dc95e:	4622      	mov	r2, r4
   dc960:	462b      	mov	r3, r5
   dc962:	f001 f8c5 	bl	ddaf0 <__aeabi_dmul>
   dc966:	a376      	add	r3, pc, #472	; (adr r3, dcb40 <__kernel_cos+0x248>)
   dc968:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc96c:	f000 ff0e 	bl	dd78c <__adddf3>
   dc970:	4622      	mov	r2, r4
   dc972:	462b      	mov	r3, r5
   dc974:	f001 f8bc 	bl	ddaf0 <__aeabi_dmul>
   dc978:	a373      	add	r3, pc, #460	; (adr r3, dcb48 <__kernel_cos+0x250>)
   dc97a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc97e:	f000 ff03 	bl	dd788 <__aeabi_dsub>
   dc982:	4622      	mov	r2, r4
   dc984:	462b      	mov	r3, r5
   dc986:	f001 f8b3 	bl	ddaf0 <__aeabi_dmul>
   dc98a:	a371      	add	r3, pc, #452	; (adr r3, dcb50 <__kernel_cos+0x258>)
   dc98c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc990:	f000 fefc 	bl	dd78c <__adddf3>
   dc994:	4622      	mov	r2, r4
   dc996:	462b      	mov	r3, r5
   dc998:	f001 f8aa 	bl	ddaf0 <__aeabi_dmul>
   dc99c:	4682      	mov	sl, r0
   dc99e:	468b      	mov	fp, r1
   dc9a0:	2200      	movs	r2, #0
   dc9a2:	4b71      	ldr	r3, [pc, #452]	; (dcb68 <__kernel_cos+0x270>)
   dc9a4:	4620      	mov	r0, r4
   dc9a6:	4629      	mov	r1, r5
   dc9a8:	f001 f8a2 	bl	ddaf0 <__aeabi_dmul>
   dc9ac:	4652      	mov	r2, sl
   dc9ae:	4680      	mov	r8, r0
   dc9b0:	4689      	mov	r9, r1
   dc9b2:	465b      	mov	r3, fp
   dc9b4:	4620      	mov	r0, r4
   dc9b6:	4629      	mov	r1, r5
   dc9b8:	f001 f89a 	bl	ddaf0 <__aeabi_dmul>
   dc9bc:	ec53 2b18 	vmov	r2, r3, d8
   dc9c0:	4604      	mov	r4, r0
   dc9c2:	460d      	mov	r5, r1
   dc9c4:	4630      	mov	r0, r6
   dc9c6:	4639      	mov	r1, r7
   dc9c8:	f001 f892 	bl	ddaf0 <__aeabi_dmul>
   dc9cc:	4602      	mov	r2, r0
   dc9ce:	460b      	mov	r3, r1
   dc9d0:	4620      	mov	r0, r4
   dc9d2:	4629      	mov	r1, r5
   dc9d4:	f000 fed8 	bl	dd788 <__aeabi_dsub>
   dc9d8:	4602      	mov	r2, r0
   dc9da:	460b      	mov	r3, r1
   dc9dc:	4640      	mov	r0, r8
   dc9de:	4649      	mov	r1, r9
   dc9e0:	f000 fed2 	bl	dd788 <__aeabi_dsub>
   dc9e4:	4602      	mov	r2, r0
   dc9e6:	460b      	mov	r3, r1
   dc9e8:	2000      	movs	r0, #0
   dc9ea:	4960      	ldr	r1, [pc, #384]	; (dcb6c <__kernel_cos+0x274>)
   dc9ec:	f000 fecc 	bl	dd788 <__aeabi_dsub>
   dc9f0:	ec41 0b10 	vmov	d0, r0, r1
   dc9f4:	b003      	add	sp, #12
   dc9f6:	ecbd 8b02 	vpop	{d8}
   dc9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc9fe:	ee10 2a10 	vmov	r2, s0
   dca02:	ee10 0a10 	vmov	r0, s0
   dca06:	463b      	mov	r3, r7
   dca08:	4639      	mov	r1, r7
   dca0a:	f001 f871 	bl	ddaf0 <__aeabi_dmul>
   dca0e:	a346      	add	r3, pc, #280	; (adr r3, dcb28 <__kernel_cos+0x230>)
   dca10:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca14:	4604      	mov	r4, r0
   dca16:	460d      	mov	r5, r1
   dca18:	f001 f86a 	bl	ddaf0 <__aeabi_dmul>
   dca1c:	a344      	add	r3, pc, #272	; (adr r3, dcb30 <__kernel_cos+0x238>)
   dca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca22:	f000 feb3 	bl	dd78c <__adddf3>
   dca26:	4622      	mov	r2, r4
   dca28:	462b      	mov	r3, r5
   dca2a:	f001 f861 	bl	ddaf0 <__aeabi_dmul>
   dca2e:	a342      	add	r3, pc, #264	; (adr r3, dcb38 <__kernel_cos+0x240>)
   dca30:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca34:	f000 fea8 	bl	dd788 <__aeabi_dsub>
   dca38:	4622      	mov	r2, r4
   dca3a:	462b      	mov	r3, r5
   dca3c:	f001 f858 	bl	ddaf0 <__aeabi_dmul>
   dca40:	a33f      	add	r3, pc, #252	; (adr r3, dcb40 <__kernel_cos+0x248>)
   dca42:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca46:	f000 fea1 	bl	dd78c <__adddf3>
   dca4a:	4622      	mov	r2, r4
   dca4c:	462b      	mov	r3, r5
   dca4e:	f001 f84f 	bl	ddaf0 <__aeabi_dmul>
   dca52:	a33d      	add	r3, pc, #244	; (adr r3, dcb48 <__kernel_cos+0x250>)
   dca54:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca58:	f000 fe96 	bl	dd788 <__aeabi_dsub>
   dca5c:	4622      	mov	r2, r4
   dca5e:	462b      	mov	r3, r5
   dca60:	f001 f846 	bl	ddaf0 <__aeabi_dmul>
   dca64:	a33a      	add	r3, pc, #232	; (adr r3, dcb50 <__kernel_cos+0x258>)
   dca66:	e9d3 2300 	ldrd	r2, r3, [r3]
   dca6a:	f000 fe8f 	bl	dd78c <__adddf3>
   dca6e:	462b      	mov	r3, r5
   dca70:	4622      	mov	r2, r4
   dca72:	f001 f83d 	bl	ddaf0 <__aeabi_dmul>
   dca76:	4b3e      	ldr	r3, [pc, #248]	; (dcb70 <__kernel_cos+0x278>)
   dca78:	4599      	cmp	r9, r3
   dca7a:	4682      	mov	sl, r0
   dca7c:	468b      	mov	fp, r1
   dca7e:	dd8f      	ble.n	dc9a0 <__kernel_cos+0xa8>
   dca80:	4b3c      	ldr	r3, [pc, #240]	; (dcb74 <__kernel_cos+0x27c>)
   dca82:	4599      	cmp	r9, r3
   dca84:	dc3d      	bgt.n	dcb02 <__kernel_cos+0x20a>
   dca86:	2200      	movs	r2, #0
   dca88:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   dca8c:	2000      	movs	r0, #0
   dca8e:	4937      	ldr	r1, [pc, #220]	; (dcb6c <__kernel_cos+0x274>)
   dca90:	4690      	mov	r8, r2
   dca92:	4699      	mov	r9, r3
   dca94:	f000 fe78 	bl	dd788 <__aeabi_dsub>
   dca98:	e9cd 0100 	strd	r0, r1, [sp]
   dca9c:	2200      	movs	r2, #0
   dca9e:	4b32      	ldr	r3, [pc, #200]	; (dcb68 <__kernel_cos+0x270>)
   dcaa0:	4620      	mov	r0, r4
   dcaa2:	4629      	mov	r1, r5
   dcaa4:	f001 f824 	bl	ddaf0 <__aeabi_dmul>
   dcaa8:	4642      	mov	r2, r8
   dcaaa:	464b      	mov	r3, r9
   dcaac:	f000 fe6c 	bl	dd788 <__aeabi_dsub>
   dcab0:	4652      	mov	r2, sl
   dcab2:	4680      	mov	r8, r0
   dcab4:	4689      	mov	r9, r1
   dcab6:	465b      	mov	r3, fp
   dcab8:	4620      	mov	r0, r4
   dcaba:	4629      	mov	r1, r5
   dcabc:	f001 f818 	bl	ddaf0 <__aeabi_dmul>
   dcac0:	ec53 2b18 	vmov	r2, r3, d8
   dcac4:	4604      	mov	r4, r0
   dcac6:	460d      	mov	r5, r1
   dcac8:	4630      	mov	r0, r6
   dcaca:	4639      	mov	r1, r7
   dcacc:	f001 f810 	bl	ddaf0 <__aeabi_dmul>
   dcad0:	4602      	mov	r2, r0
   dcad2:	460b      	mov	r3, r1
   dcad4:	4620      	mov	r0, r4
   dcad6:	4629      	mov	r1, r5
   dcad8:	f000 fe56 	bl	dd788 <__aeabi_dsub>
   dcadc:	4602      	mov	r2, r0
   dcade:	460b      	mov	r3, r1
   dcae0:	4640      	mov	r0, r8
   dcae2:	4649      	mov	r1, r9
   dcae4:	f000 fe50 	bl	dd788 <__aeabi_dsub>
   dcae8:	4602      	mov	r2, r0
   dcaea:	460b      	mov	r3, r1
   dcaec:	e9dd 0100 	ldrd	r0, r1, [sp]
   dcaf0:	f000 fe4a 	bl	dd788 <__aeabi_dsub>
   dcaf4:	ec41 0b10 	vmov	d0, r0, r1
   dcaf8:	b003      	add	sp, #12
   dcafa:	ecbd 8b02 	vpop	{d8}
   dcafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcb02:	ed9f 7b15 	vldr	d7, [pc, #84]	; dcb58 <__kernel_cos+0x260>
   dcb06:	f04f 0800 	mov.w	r8, #0
   dcb0a:	ed8d 7b00 	vstr	d7, [sp]
   dcb0e:	f8df 9068 	ldr.w	r9, [pc, #104]	; dcb78 <__kernel_cos+0x280>
   dcb12:	e7c3      	b.n	dca9c <__kernel_cos+0x1a4>
   dcb14:	ed9f 0b12 	vldr	d0, [pc, #72]	; dcb60 <__kernel_cos+0x268>
   dcb18:	b003      	add	sp, #12
   dcb1a:	ecbd 8b02 	vpop	{d8}
   dcb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcb22:	bf00      	nop
   dcb24:	f3af 8000 	nop.w
   dcb28:	be8838d4 	.word	0xbe8838d4
   dcb2c:	bda8fae9 	.word	0xbda8fae9
   dcb30:	bdb4b1c4 	.word	0xbdb4b1c4
   dcb34:	3e21ee9e 	.word	0x3e21ee9e
   dcb38:	809c52ad 	.word	0x809c52ad
   dcb3c:	3e927e4f 	.word	0x3e927e4f
   dcb40:	19cb1590 	.word	0x19cb1590
   dcb44:	3efa01a0 	.word	0x3efa01a0
   dcb48:	16c15177 	.word	0x16c15177
   dcb4c:	3f56c16c 	.word	0x3f56c16c
   dcb50:	5555554c 	.word	0x5555554c
   dcb54:	3fa55555 	.word	0x3fa55555
   dcb58:	00000000 	.word	0x00000000
   dcb5c:	3fe70000 	.word	0x3fe70000
   dcb60:	00000000 	.word	0x00000000
   dcb64:	3ff00000 	.word	0x3ff00000
   dcb68:	3fe00000 	.word	0x3fe00000
   dcb6c:	3ff00000 	.word	0x3ff00000
   dcb70:	3fd33332 	.word	0x3fd33332
   dcb74:	3fe90000 	.word	0x3fe90000
   dcb78:	3fd20000 	.word	0x3fd20000
   dcb7c:	00000000 	.word	0x00000000

000dcb80 <__kernel_rem_pio2>:
   dcb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcb84:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   dcb88:	4c81      	ldr	r4, [pc, #516]	; (dcd90 <__kernel_rem_pio2+0x210>)
   dcb8a:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   dcb8c:	4d81      	ldr	r5, [pc, #516]	; (dcd94 <__kernel_rem_pio2+0x214>)
   dcb8e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   dcb92:	9407      	str	r4, [sp, #28]
   dcb94:	4626      	mov	r6, r4
   dcb96:	1ed4      	subs	r4, r2, #3
   dcb98:	fb85 7504 	smull	r7, r5, r5, r4
   dcb9c:	17e4      	asrs	r4, r4, #31
   dcb9e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   dcba2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   dcba6:	461d      	mov	r5, r3
   dcba8:	930a      	str	r3, [sp, #40]	; 0x28
   dcbaa:	1c63      	adds	r3, r4, #1
   dcbac:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   dcbb0:	3d01      	subs	r5, #1
   dcbb2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   dcbb6:	9306      	str	r3, [sp, #24]
   dcbb8:	462b      	mov	r3, r5
   dcbba:	940b      	str	r4, [sp, #44]	; 0x2c
   dcbbc:	9500      	str	r5, [sp, #0]
   dcbbe:	1b65      	subs	r5, r4, r5
   dcbc0:	18f4      	adds	r4, r6, r3
   dcbc2:	9003      	str	r0, [sp, #12]
   dcbc4:	9108      	str	r1, [sp, #32]
   dcbc6:	d416      	bmi.n	dcbf6 <__kernel_rem_pio2+0x76>
   dcbc8:	442c      	add	r4, r5
   dcbca:	3401      	adds	r4, #1
   dcbcc:	ae22      	add	r6, sp, #136	; 0x88
   dcbce:	9fa5      	ldr	r7, [sp, #660]	; 0x294
   dcbd0:	e008      	b.n	dcbe4 <__kernel_rem_pio2+0x64>
   dcbd2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   dcbd6:	f000 ff25 	bl	dda24 <__aeabi_i2d>
   dcbda:	3501      	adds	r5, #1
   dcbdc:	42a5      	cmp	r5, r4
   dcbde:	e8e6 0102 	strd	r0, r1, [r6], #8
   dcbe2:	d008      	beq.n	dcbf6 <__kernel_rem_pio2+0x76>
   dcbe4:	2d00      	cmp	r5, #0
   dcbe6:	daf4      	bge.n	dcbd2 <__kernel_rem_pio2+0x52>
   dcbe8:	3501      	adds	r5, #1
   dcbea:	2000      	movs	r0, #0
   dcbec:	2100      	movs	r1, #0
   dcbee:	42a5      	cmp	r5, r4
   dcbf0:	e8e6 0102 	strd	r0, r1, [r6], #8
   dcbf4:	d1f6      	bne.n	dcbe4 <__kernel_rem_pio2+0x64>
   dcbf6:	9b07      	ldr	r3, [sp, #28]
   dcbf8:	2b00      	cmp	r3, #0
   dcbfa:	f2c0 83c2 	blt.w	dd382 <__kernel_rem_pio2+0x802>
   dcbfe:	9b07      	ldr	r3, [sp, #28]
   dcc00:	f103 0b01 	add.w	fp, r3, #1
   dcc04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dcc06:	a922      	add	r1, sp, #136	; 0x88
   dcc08:	00db      	lsls	r3, r3, #3
   dcc0a:	461a      	mov	r2, r3
   dcc0c:	eb01 0903 	add.w	r9, r1, r3
   dcc10:	9304      	str	r3, [sp, #16]
   dcc12:	9b03      	ldr	r3, [sp, #12]
   dcc14:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   dcc18:	4619      	mov	r1, r3
   dcc1a:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   dcc1e:	eb01 0802 	add.w	r8, r1, r2
   dcc22:	9b00      	ldr	r3, [sp, #0]
   dcc24:	2b00      	cmp	r3, #0
   dcc26:	f2c0 818f 	blt.w	dcf48 <__kernel_rem_pio2+0x3c8>
   dcc2a:	9c03      	ldr	r4, [sp, #12]
   dcc2c:	464d      	mov	r5, r9
   dcc2e:	2600      	movs	r6, #0
   dcc30:	2700      	movs	r7, #0
   dcc32:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   dcc36:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   dcc3a:	f000 ff59 	bl	ddaf0 <__aeabi_dmul>
   dcc3e:	4602      	mov	r2, r0
   dcc40:	460b      	mov	r3, r1
   dcc42:	4630      	mov	r0, r6
   dcc44:	4639      	mov	r1, r7
   dcc46:	f000 fda1 	bl	dd78c <__adddf3>
   dcc4a:	4544      	cmp	r4, r8
   dcc4c:	4606      	mov	r6, r0
   dcc4e:	460f      	mov	r7, r1
   dcc50:	d1ef      	bne.n	dcc32 <__kernel_rem_pio2+0xb2>
   dcc52:	e8ea 6702 	strd	r6, r7, [sl], #8
   dcc56:	45da      	cmp	sl, fp
   dcc58:	f109 0908 	add.w	r9, r9, #8
   dcc5c:	d1e1      	bne.n	dcc22 <__kernel_rem_pio2+0xa2>
   dcc5e:	9907      	ldr	r1, [sp, #28]
   dcc60:	9804      	ldr	r0, [sp, #16]
   dcc62:	9c03      	ldr	r4, [sp, #12]
   dcc64:	9104      	str	r1, [sp, #16]
   dcc66:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   dcc6a:	3b02      	subs	r3, #2
   dcc6c:	009b      	lsls	r3, r3, #2
   dcc6e:	4420      	add	r0, r4
   dcc70:	1d1a      	adds	r2, r3, #4
   dcc72:	4683      	mov	fp, r0
   dcc74:	a80e      	add	r0, sp, #56	; 0x38
   dcc76:	4402      	add	r2, r0
   dcc78:	4403      	add	r3, r0
   dcc7a:	920d      	str	r2, [sp, #52]	; 0x34
   dcc7c:	930c      	str	r3, [sp, #48]	; 0x30
   dcc7e:	9a04      	ldr	r2, [sp, #16]
   dcc80:	a99a      	add	r1, sp, #616	; 0x268
   dcc82:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   dcc86:	2a00      	cmp	r2, #0
   dcc88:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   dcc8c:	dd29      	ble.n	dcce2 <__kernel_rem_pio2+0x162>
   dcc8e:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   dcc92:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   dcc96:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   dcc9a:	2200      	movs	r2, #0
   dcc9c:	4b3e      	ldr	r3, [pc, #248]	; (dcd98 <__kernel_rem_pio2+0x218>)
   dcc9e:	4620      	mov	r0, r4
   dcca0:	4629      	mov	r1, r5
   dcca2:	f000 ff25 	bl	ddaf0 <__aeabi_dmul>
   dcca6:	f001 f9d3 	bl	de050 <__aeabi_d2iz>
   dccaa:	f000 febb 	bl	dda24 <__aeabi_i2d>
   dccae:	2200      	movs	r2, #0
   dccb0:	4b3a      	ldr	r3, [pc, #232]	; (dcd9c <__kernel_rem_pio2+0x21c>)
   dccb2:	4606      	mov	r6, r0
   dccb4:	460f      	mov	r7, r1
   dccb6:	f000 ff1b 	bl	ddaf0 <__aeabi_dmul>
   dccba:	4602      	mov	r2, r0
   dccbc:	460b      	mov	r3, r1
   dccbe:	4620      	mov	r0, r4
   dccc0:	4629      	mov	r1, r5
   dccc2:	f000 fd61 	bl	dd788 <__aeabi_dsub>
   dccc6:	f001 f9c3 	bl	de050 <__aeabi_d2iz>
   dccca:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   dccce:	f849 0f04 	str.w	r0, [r9, #4]!
   dccd2:	4639      	mov	r1, r7
   dccd4:	4630      	mov	r0, r6
   dccd6:	f000 fd59 	bl	dd78c <__adddf3>
   dccda:	45d0      	cmp	r8, sl
   dccdc:	4604      	mov	r4, r0
   dccde:	460d      	mov	r5, r1
   dcce0:	d1db      	bne.n	dcc9a <__kernel_rem_pio2+0x11a>
   dcce2:	f8dd 9018 	ldr.w	r9, [sp, #24]
   dcce6:	ec45 4b10 	vmov	d0, r4, r5
   dccea:	4648      	mov	r0, r9
   dccec:	f000 fcb4 	bl	dd658 <scalbn>
   dccf0:	ec55 4b10 	vmov	r4, r5, d0
   dccf4:	2200      	movs	r2, #0
   dccf6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   dccfa:	ee10 0a10 	vmov	r0, s0
   dccfe:	4629      	mov	r1, r5
   dcd00:	f000 fef6 	bl	ddaf0 <__aeabi_dmul>
   dcd04:	ec41 0b10 	vmov	d0, r0, r1
   dcd08:	f000 fc16 	bl	dd538 <floor>
   dcd0c:	2200      	movs	r2, #0
   dcd0e:	ec51 0b10 	vmov	r0, r1, d0
   dcd12:	4b23      	ldr	r3, [pc, #140]	; (dcda0 <__kernel_rem_pio2+0x220>)
   dcd14:	f000 feec 	bl	ddaf0 <__aeabi_dmul>
   dcd18:	4602      	mov	r2, r0
   dcd1a:	460b      	mov	r3, r1
   dcd1c:	4620      	mov	r0, r4
   dcd1e:	4629      	mov	r1, r5
   dcd20:	f000 fd32 	bl	dd788 <__aeabi_dsub>
   dcd24:	460d      	mov	r5, r1
   dcd26:	4604      	mov	r4, r0
   dcd28:	f001 f992 	bl	de050 <__aeabi_d2iz>
   dcd2c:	4680      	mov	r8, r0
   dcd2e:	f000 fe79 	bl	dda24 <__aeabi_i2d>
   dcd32:	460b      	mov	r3, r1
   dcd34:	4602      	mov	r2, r0
   dcd36:	4629      	mov	r1, r5
   dcd38:	4620      	mov	r0, r4
   dcd3a:	f000 fd25 	bl	dd788 <__aeabi_dsub>
   dcd3e:	464b      	mov	r3, r9
   dcd40:	2b00      	cmp	r3, #0
   dcd42:	4606      	mov	r6, r0
   dcd44:	460f      	mov	r7, r1
   dcd46:	f340 80e5 	ble.w	dcf14 <__kernel_rem_pio2+0x394>
   dcd4a:	9a04      	ldr	r2, [sp, #16]
   dcd4c:	a90e      	add	r1, sp, #56	; 0x38
   dcd4e:	3a01      	subs	r2, #1
   dcd50:	f1c9 0318 	rsb	r3, r9, #24
   dcd54:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   dcd58:	fa45 f103 	asr.w	r1, r5, r3
   dcd5c:	fa01 f303 	lsl.w	r3, r1, r3
   dcd60:	a80e      	add	r0, sp, #56	; 0x38
   dcd62:	1aeb      	subs	r3, r5, r3
   dcd64:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   dcd68:	f1c9 0517 	rsb	r5, r9, #23
   dcd6c:	4488      	add	r8, r1
   dcd6e:	fa43 f505 	asr.w	r5, r3, r5
   dcd72:	2d00      	cmp	r5, #0
   dcd74:	dd41      	ble.n	dcdfa <__kernel_rem_pio2+0x27a>
   dcd76:	9b04      	ldr	r3, [sp, #16]
   dcd78:	2b00      	cmp	r3, #0
   dcd7a:	f108 0801 	add.w	r8, r8, #1
   dcd7e:	f340 82c9 	ble.w	dd314 <__kernel_rem_pio2+0x794>
   dcd82:	2200      	movs	r2, #0
   dcd84:	4614      	mov	r4, r2
   dcd86:	a90d      	add	r1, sp, #52	; 0x34
   dcd88:	9804      	ldr	r0, [sp, #16]
   dcd8a:	46ae      	mov	lr, r5
   dcd8c:	e012      	b.n	dcdb4 <__kernel_rem_pio2+0x234>
   dcd8e:	bf00      	nop
   dcd90:	000e0a70 	.word	0x000e0a70
   dcd94:	2aaaaaab 	.word	0x2aaaaaab
   dcd98:	3e700000 	.word	0x3e700000
   dcd9c:	41700000 	.word	0x41700000
   dcda0:	40200000 	.word	0x40200000
   dcda4:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
   dcda8:	b10b      	cbz	r3, dcdae <__kernel_rem_pio2+0x22e>
   dcdaa:	600d      	str	r5, [r1, #0]
   dcdac:	2401      	movs	r4, #1
   dcdae:	3201      	adds	r2, #1
   dcdb0:	4290      	cmp	r0, r2
   dcdb2:	dd0d      	ble.n	dcdd0 <__kernel_rem_pio2+0x250>
   dcdb4:	f851 3f04 	ldr.w	r3, [r1, #4]!
   dcdb8:	2c00      	cmp	r4, #0
   dcdba:	d0f3      	beq.n	dcda4 <__kernel_rem_pio2+0x224>
   dcdbc:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   dcdc0:	3201      	adds	r2, #1
   dcdc2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   dcdc6:	4290      	cmp	r0, r2
   dcdc8:	600b      	str	r3, [r1, #0]
   dcdca:	f04f 0401 	mov.w	r4, #1
   dcdce:	dcf1      	bgt.n	dcdb4 <__kernel_rem_pio2+0x234>
   dcdd0:	4675      	mov	r5, lr
   dcdd2:	9b06      	ldr	r3, [sp, #24]
   dcdd4:	2b00      	cmp	r3, #0
   dcdd6:	dd0e      	ble.n	dcdf6 <__kernel_rem_pio2+0x276>
   dcdd8:	2b01      	cmp	r3, #1
   dcdda:	f000 80a3 	beq.w	dcf24 <__kernel_rem_pio2+0x3a4>
   dcdde:	2b02      	cmp	r3, #2
   dcde0:	d109      	bne.n	dcdf6 <__kernel_rem_pio2+0x276>
   dcde2:	9b04      	ldr	r3, [sp, #16]
   dcde4:	1e5a      	subs	r2, r3, #1
   dcde6:	ab0e      	add	r3, sp, #56	; 0x38
   dcde8:	a90e      	add	r1, sp, #56	; 0x38
   dcdea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   dcdee:	f3c3 0315 	ubfx	r3, r3, #0, #22
   dcdf2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   dcdf6:	2d02      	cmp	r5, #2
   dcdf8:	d074      	beq.n	dcee4 <__kernel_rem_pio2+0x364>
   dcdfa:	2200      	movs	r2, #0
   dcdfc:	2300      	movs	r3, #0
   dcdfe:	4630      	mov	r0, r6
   dce00:	4639      	mov	r1, r7
   dce02:	f001 f8dd 	bl	ddfc0 <__aeabi_dcmpeq>
   dce06:	2800      	cmp	r0, #0
   dce08:	f000 8249 	beq.w	dd29e <__kernel_rem_pio2+0x71e>
   dce0c:	9a04      	ldr	r2, [sp, #16]
   dce0e:	9b07      	ldr	r3, [sp, #28]
   dce10:	1e50      	subs	r0, r2, #1
   dce12:	4283      	cmp	r3, r0
   dce14:	dc10      	bgt.n	dce38 <__kernel_rem_pio2+0x2b8>
   dce16:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   dce1a:	3b01      	subs	r3, #1
   dce1c:	aa0e      	add	r2, sp, #56	; 0x38
   dce1e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   dce20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dce24:	2200      	movs	r2, #0
   dce26:	f853 1904 	ldr.w	r1, [r3], #-4
   dce2a:	42a3      	cmp	r3, r4
   dce2c:	ea42 0201 	orr.w	r2, r2, r1
   dce30:	d1f9      	bne.n	dce26 <__kernel_rem_pio2+0x2a6>
   dce32:	2a00      	cmp	r2, #0
   dce34:	f040 80a4 	bne.w	dcf80 <__kernel_rem_pio2+0x400>
   dce38:	9b07      	ldr	r3, [sp, #28]
   dce3a:	aa0e      	add	r2, sp, #56	; 0x38
   dce3c:	3b01      	subs	r3, #1
   dce3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   dce42:	2b00      	cmp	r3, #0
   dce44:	f040 8264 	bne.w	dd310 <__kernel_rem_pio2+0x790>
   dce48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   dce4a:	2301      	movs	r3, #1
   dce4c:	f852 1904 	ldr.w	r1, [r2], #-4
   dce50:	3301      	adds	r3, #1
   dce52:	2900      	cmp	r1, #0
   dce54:	d0fa      	beq.n	dce4c <__kernel_rem_pio2+0x2cc>
   dce56:	9a04      	ldr	r2, [sp, #16]
   dce58:	18d3      	adds	r3, r2, r3
   dce5a:	f102 0a01 	add.w	sl, r2, #1
   dce5e:	459a      	cmp	sl, r3
   dce60:	9309      	str	r3, [sp, #36]	; 0x24
   dce62:	dc3c      	bgt.n	dcede <__kernel_rem_pio2+0x35e>
   dce64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dce66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dce68:	9909      	ldr	r1, [sp, #36]	; 0x24
   dce6a:	eb0a 0903 	add.w	r9, sl, r3
   dce6e:	9b04      	ldr	r3, [sp, #16]
   dce70:	4698      	mov	r8, r3
   dce72:	4490      	add	r8, r2
   dce74:	188b      	adds	r3, r1, r2
   dce76:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   dce7a:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   dce7c:	f109 39ff 	add.w	r9, r9, #4294967295
   dce80:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   dce84:	aa22      	add	r2, sp, #136	; 0x88
   dce86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   dce8a:	9304      	str	r3, [sp, #16]
   dce8c:	ab72      	add	r3, sp, #456	; 0x1c8
   dce8e:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   dce92:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   dce96:	f859 0f04 	ldr.w	r0, [r9, #4]!
   dce9a:	f000 fdc3 	bl	dda24 <__aeabi_i2d>
   dce9e:	9b00      	ldr	r3, [sp, #0]
   dcea0:	2b00      	cmp	r3, #0
   dcea2:	e8e8 0102 	strd	r0, r1, [r8], #8
   dcea6:	f04f 0600 	mov.w	r6, #0
   dceaa:	f04f 0700 	mov.w	r7, #0
   dceae:	db11      	blt.n	dced4 <__kernel_rem_pio2+0x354>
   dceb0:	9c03      	ldr	r4, [sp, #12]
   dceb2:	4645      	mov	r5, r8
   dceb4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   dceb8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   dcebc:	f000 fe18 	bl	ddaf0 <__aeabi_dmul>
   dcec0:	4602      	mov	r2, r0
   dcec2:	460b      	mov	r3, r1
   dcec4:	4630      	mov	r0, r6
   dcec6:	4639      	mov	r1, r7
   dcec8:	f000 fc60 	bl	dd78c <__adddf3>
   dcecc:	455c      	cmp	r4, fp
   dcece:	4606      	mov	r6, r0
   dced0:	460f      	mov	r7, r1
   dced2:	d1ef      	bne.n	dceb4 <__kernel_rem_pio2+0x334>
   dced4:	9b04      	ldr	r3, [sp, #16]
   dced6:	4598      	cmp	r8, r3
   dced8:	e8ea 6702 	strd	r6, r7, [sl], #8
   dcedc:	d1db      	bne.n	dce96 <__kernel_rem_pio2+0x316>
   dcede:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dcee0:	9304      	str	r3, [sp, #16]
   dcee2:	e6cc      	b.n	dcc7e <__kernel_rem_pio2+0xfe>
   dcee4:	4632      	mov	r2, r6
   dcee6:	463b      	mov	r3, r7
   dcee8:	2000      	movs	r0, #0
   dceea:	49b3      	ldr	r1, [pc, #716]	; (dd1b8 <__kernel_rem_pio2+0x638>)
   dceec:	f000 fc4c 	bl	dd788 <__aeabi_dsub>
   dcef0:	4606      	mov	r6, r0
   dcef2:	460f      	mov	r7, r1
   dcef4:	2c00      	cmp	r4, #0
   dcef6:	d080      	beq.n	dcdfa <__kernel_rem_pio2+0x27a>
   dcef8:	9806      	ldr	r0, [sp, #24]
   dcefa:	ed9f 0bab 	vldr	d0, [pc, #684]	; dd1a8 <__kernel_rem_pio2+0x628>
   dcefe:	f000 fbab 	bl	dd658 <scalbn>
   dcf02:	4630      	mov	r0, r6
   dcf04:	4639      	mov	r1, r7
   dcf06:	ec53 2b10 	vmov	r2, r3, d0
   dcf0a:	f000 fc3d 	bl	dd788 <__aeabi_dsub>
   dcf0e:	4606      	mov	r6, r0
   dcf10:	460f      	mov	r7, r1
   dcf12:	e772      	b.n	dcdfa <__kernel_rem_pio2+0x27a>
   dcf14:	d111      	bne.n	dcf3a <__kernel_rem_pio2+0x3ba>
   dcf16:	9b04      	ldr	r3, [sp, #16]
   dcf18:	aa0e      	add	r2, sp, #56	; 0x38
   dcf1a:	3b01      	subs	r3, #1
   dcf1c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   dcf20:	15ed      	asrs	r5, r5, #23
   dcf22:	e726      	b.n	dcd72 <__kernel_rem_pio2+0x1f2>
   dcf24:	9b04      	ldr	r3, [sp, #16]
   dcf26:	1e5a      	subs	r2, r3, #1
   dcf28:	ab0e      	add	r3, sp, #56	; 0x38
   dcf2a:	a90e      	add	r1, sp, #56	; 0x38
   dcf2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   dcf30:	f3c3 0316 	ubfx	r3, r3, #0, #23
   dcf34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   dcf38:	e75d      	b.n	dcdf6 <__kernel_rem_pio2+0x276>
   dcf3a:	2200      	movs	r2, #0
   dcf3c:	4b9f      	ldr	r3, [pc, #636]	; (dd1bc <__kernel_rem_pio2+0x63c>)
   dcf3e:	f001 f85d 	bl	ddffc <__aeabi_dcmpge>
   dcf42:	b958      	cbnz	r0, dcf5c <__kernel_rem_pio2+0x3dc>
   dcf44:	4605      	mov	r5, r0
   dcf46:	e758      	b.n	dcdfa <__kernel_rem_pio2+0x27a>
   dcf48:	2600      	movs	r6, #0
   dcf4a:	2700      	movs	r7, #0
   dcf4c:	e8ea 6702 	strd	r6, r7, [sl], #8
   dcf50:	45da      	cmp	sl, fp
   dcf52:	f109 0908 	add.w	r9, r9, #8
   dcf56:	f47f ae64 	bne.w	dcc22 <__kernel_rem_pio2+0xa2>
   dcf5a:	e680      	b.n	dcc5e <__kernel_rem_pio2+0xde>
   dcf5c:	9b04      	ldr	r3, [sp, #16]
   dcf5e:	2b00      	cmp	r3, #0
   dcf60:	f108 0801 	add.w	r8, r8, #1
   dcf64:	bfc8      	it	gt
   dcf66:	2502      	movgt	r5, #2
   dcf68:	f73f af0b 	bgt.w	dcd82 <__kernel_rem_pio2+0x202>
   dcf6c:	4632      	mov	r2, r6
   dcf6e:	463b      	mov	r3, r7
   dcf70:	2000      	movs	r0, #0
   dcf72:	4991      	ldr	r1, [pc, #580]	; (dd1b8 <__kernel_rem_pio2+0x638>)
   dcf74:	f000 fc08 	bl	dd788 <__aeabi_dsub>
   dcf78:	2502      	movs	r5, #2
   dcf7a:	4606      	mov	r6, r0
   dcf7c:	460f      	mov	r7, r1
   dcf7e:	e73c      	b.n	dcdfa <__kernel_rem_pio2+0x27a>
   dcf80:	a90e      	add	r1, sp, #56	; 0x38
   dcf82:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   dcf86:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   dcf8a:	9906      	ldr	r1, [sp, #24]
   dcf8c:	9000      	str	r0, [sp, #0]
   dcf8e:	3918      	subs	r1, #24
   dcf90:	4602      	mov	r2, r0
   dcf92:	9503      	str	r5, [sp, #12]
   dcf94:	9106      	str	r1, [sp, #24]
   dcf96:	b96b      	cbnz	r3, dcfb4 <__kernel_rem_pio2+0x434>
   dcf98:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   dcf9c:	3b01      	subs	r3, #1
   dcf9e:	a80e      	add	r0, sp, #56	; 0x38
   dcfa0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   dcfa4:	f853 0904 	ldr.w	r0, [r3], #-4
   dcfa8:	3a01      	subs	r2, #1
   dcfaa:	3918      	subs	r1, #24
   dcfac:	2800      	cmp	r0, #0
   dcfae:	d0f9      	beq.n	dcfa4 <__kernel_rem_pio2+0x424>
   dcfb0:	9200      	str	r2, [sp, #0]
   dcfb2:	9106      	str	r1, [sp, #24]
   dcfb4:	9806      	ldr	r0, [sp, #24]
   dcfb6:	ed9f 0b7c 	vldr	d0, [pc, #496]	; dd1a8 <__kernel_rem_pio2+0x628>
   dcfba:	f000 fb4d 	bl	dd658 <scalbn>
   dcfbe:	9b00      	ldr	r3, [sp, #0]
   dcfc0:	2b00      	cmp	r3, #0
   dcfc2:	ec55 4b10 	vmov	r4, r5, d0
   dcfc6:	f2c0 81c1 	blt.w	dd34c <__kernel_rem_pio2+0x7cc>
   dcfca:	00da      	lsls	r2, r3, #3
   dcfcc:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
   dcfd0:	a90e      	add	r1, sp, #56	; 0x38
   dcfd2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
   dcfd6:	eb08 0b02 	add.w	fp, r8, r2
   dcfda:	9206      	str	r2, [sp, #24]
   dcfdc:	3604      	adds	r6, #4
   dcfde:	f10b 0708 	add.w	r7, fp, #8
   dcfe2:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   dcfe6:	f000 fd1d 	bl	dda24 <__aeabi_i2d>
   dcfea:	4622      	mov	r2, r4
   dcfec:	462b      	mov	r3, r5
   dcfee:	f000 fd7f 	bl	ddaf0 <__aeabi_dmul>
   dcff2:	2200      	movs	r2, #0
   dcff4:	e967 0102 	strd	r0, r1, [r7, #-8]!
   dcff8:	4b71      	ldr	r3, [pc, #452]	; (dd1c0 <__kernel_rem_pio2+0x640>)
   dcffa:	4620      	mov	r0, r4
   dcffc:	4629      	mov	r1, r5
   dcffe:	f000 fd77 	bl	ddaf0 <__aeabi_dmul>
   dd002:	4547      	cmp	r7, r8
   dd004:	4604      	mov	r4, r0
   dd006:	460d      	mov	r5, r1
   dd008:	d1eb      	bne.n	dcfe2 <__kernel_rem_pio2+0x462>
   dd00a:	ac4a      	add	r4, sp, #296	; 0x128
   dd00c:	f8dd 901c 	ldr.w	r9, [sp, #28]
   dd010:	9404      	str	r4, [sp, #16]
   dd012:	f04f 0a00 	mov.w	sl, #0
   dd016:	f1b9 0f00 	cmp.w	r9, #0
   dd01a:	f2c0 812b 	blt.w	dd274 <__kernel_rem_pio2+0x6f4>
   dd01e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; dd1c4 <__kernel_rem_pio2+0x644>
   dd022:	465d      	mov	r5, fp
   dd024:	a362      	add	r3, pc, #392	; (adr r3, dd1b0 <__kernel_rem_pio2+0x630>)
   dd026:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd02a:	2600      	movs	r6, #0
   dd02c:	2700      	movs	r7, #0
   dd02e:	2400      	movs	r4, #0
   dd030:	e003      	b.n	dd03a <__kernel_rem_pio2+0x4ba>
   dd032:	45a2      	cmp	sl, r4
   dd034:	db10      	blt.n	dd058 <__kernel_rem_pio2+0x4d8>
   dd036:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   dd03a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   dd03e:	f000 fd57 	bl	ddaf0 <__aeabi_dmul>
   dd042:	4602      	mov	r2, r0
   dd044:	460b      	mov	r3, r1
   dd046:	4630      	mov	r0, r6
   dd048:	4639      	mov	r1, r7
   dd04a:	f000 fb9f 	bl	dd78c <__adddf3>
   dd04e:	3401      	adds	r4, #1
   dd050:	45a1      	cmp	r9, r4
   dd052:	4606      	mov	r6, r0
   dd054:	460f      	mov	r7, r1
   dd056:	daec      	bge.n	dd032 <__kernel_rem_pio2+0x4b2>
   dd058:	9b04      	ldr	r3, [sp, #16]
   dd05a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   dd05e:	f1ab 0b08 	sub.w	fp, fp, #8
   dd062:	e9c3 6700 	strd	r6, r7, [r3]
   dd066:	ab70      	add	r3, sp, #448	; 0x1c0
   dd068:	459b      	cmp	fp, r3
   dd06a:	f10a 0a01 	add.w	sl, sl, #1
   dd06e:	d1d2      	bne.n	dd016 <__kernel_rem_pio2+0x496>
   dd070:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   dd072:	9c04      	ldr	r4, [sp, #16]
   dd074:	2b03      	cmp	r3, #3
   dd076:	f200 808d 	bhi.w	dd194 <__kernel_rem_pio2+0x614>
   dd07a:	e8df f013 	tbh	[pc, r3, lsl #1]
   dd07e:	00dd      	.short	0x00dd
   dd080:	00a500a5 	.word	0x00a500a5
   dd084:	0004      	.short	0x0004
   dd086:	9b00      	ldr	r3, [sp, #0]
   dd088:	2b00      	cmp	r3, #0
   dd08a:	f340 815c 	ble.w	dd346 <__kernel_rem_pio2+0x7c6>
   dd08e:	9b00      	ldr	r3, [sp, #0]
   dd090:	f103 5b00 	add.w	fp, r3, #536870912	; 0x20000000
   dd094:	9b06      	ldr	r3, [sp, #24]
   dd096:	f10b 3bff 	add.w	fp, fp, #4294967295
   dd09a:	18e2      	adds	r2, r4, r3
   dd09c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   dd0a0:	e9d2 8900 	ldrd	r8, r9, [r2]
   dd0a4:	f103 0208 	add.w	r2, r3, #8
   dd0a8:	3310      	adds	r3, #16
   dd0aa:	eb04 0a02 	add.w	sl, r4, r2
   dd0ae:	18e5      	adds	r5, r4, r3
   dd0b0:	ed3a 7b02 	vldmdb	sl!, {d7}
   dd0b4:	4642      	mov	r2, r8
   dd0b6:	464b      	mov	r3, r9
   dd0b8:	ec51 0b17 	vmov	r0, r1, d7
   dd0bc:	ed8d 7b04 	vstr	d7, [sp, #16]
   dd0c0:	f000 fb64 	bl	dd78c <__adddf3>
   dd0c4:	4606      	mov	r6, r0
   dd0c6:	460f      	mov	r7, r1
   dd0c8:	4602      	mov	r2, r0
   dd0ca:	460b      	mov	r3, r1
   dd0cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   dd0d0:	f000 fb5a 	bl	dd788 <__aeabi_dsub>
   dd0d4:	464b      	mov	r3, r9
   dd0d6:	4642      	mov	r2, r8
   dd0d8:	f000 fb58 	bl	dd78c <__adddf3>
   dd0dc:	e965 0102 	strd	r0, r1, [r5, #-8]!
   dd0e0:	ab4c      	add	r3, sp, #304	; 0x130
   dd0e2:	429d      	cmp	r5, r3
   dd0e4:	46b0      	mov	r8, r6
   dd0e6:	46b9      	mov	r9, r7
   dd0e8:	e9ca 6700 	strd	r6, r7, [sl]
   dd0ec:	d1e0      	bne.n	dd0b0 <__kernel_rem_pio2+0x530>
   dd0ee:	9b00      	ldr	r3, [sp, #0]
   dd0f0:	2b01      	cmp	r3, #1
   dd0f2:	f340 8128 	ble.w	dd346 <__kernel_rem_pio2+0x7c6>
   dd0f6:	9b06      	ldr	r3, [sp, #24]
   dd0f8:	4423      	add	r3, r4
   dd0fa:	ed93 7b00 	vldr	d7, [r3]
   dd0fe:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   dd102:	f10b 0a10 	add.w	sl, fp, #16
   dd106:	ed8d 7b00 	vstr	d7, [sp]
   dd10a:	44a2      	add	sl, r4
   dd10c:	f10b 0b08 	add.w	fp, fp, #8
   dd110:	eb04 050b 	add.w	r5, r4, fp
   dd114:	46d0      	mov	r8, sl
   dd116:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   dd11a:	f8cd a010 	str.w	sl, [sp, #16]
   dd11e:	e975 9a02 	ldrd	r9, sl, [r5, #-8]!
   dd122:	e9dd 0100 	ldrd	r0, r1, [sp]
   dd126:	464a      	mov	r2, r9
   dd128:	4653      	mov	r3, sl
   dd12a:	f000 fb2f 	bl	dd78c <__adddf3>
   dd12e:	4606      	mov	r6, r0
   dd130:	460f      	mov	r7, r1
   dd132:	4602      	mov	r2, r0
   dd134:	460b      	mov	r3, r1
   dd136:	4648      	mov	r0, r9
   dd138:	4651      	mov	r1, sl
   dd13a:	f000 fb25 	bl	dd788 <__aeabi_dsub>
   dd13e:	e9dd 2300 	ldrd	r2, r3, [sp]
   dd142:	f000 fb23 	bl	dd78c <__adddf3>
   dd146:	e968 0102 	strd	r0, r1, [r8, #-8]!
   dd14a:	45c3      	cmp	fp, r8
   dd14c:	e9cd 6700 	strd	r6, r7, [sp]
   dd150:	e9c5 6700 	strd	r6, r7, [r5]
   dd154:	d1e3      	bne.n	dd11e <__kernel_rem_pio2+0x59e>
   dd156:	f8dd a010 	ldr.w	sl, [sp, #16]
   dd15a:	2000      	movs	r0, #0
   dd15c:	2100      	movs	r1, #0
   dd15e:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   dd162:	f000 fb13 	bl	dd78c <__adddf3>
   dd166:	45d3      	cmp	fp, sl
   dd168:	d1f9      	bne.n	dd15e <__kernel_rem_pio2+0x5de>
   dd16a:	9b03      	ldr	r3, [sp, #12]
   dd16c:	2b00      	cmp	r3, #0
   dd16e:	f000 80d3 	beq.w	dd318 <__kernel_rem_pio2+0x798>
   dd172:	6862      	ldr	r2, [r4, #4]
   dd174:	68e3      	ldr	r3, [r4, #12]
   dd176:	9f08      	ldr	r7, [sp, #32]
   dd178:	6825      	ldr	r5, [r4, #0]
   dd17a:	68a4      	ldr	r4, [r4, #8]
   dd17c:	603d      	str	r5, [r7, #0]
   dd17e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   dd182:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   dd186:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   dd18a:	607a      	str	r2, [r7, #4]
   dd18c:	60fb      	str	r3, [r7, #12]
   dd18e:	60bc      	str	r4, [r7, #8]
   dd190:	6138      	str	r0, [r7, #16]
   dd192:	6179      	str	r1, [r7, #20]
   dd194:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd196:	f003 0007 	and.w	r0, r3, #7
   dd19a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   dd19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd1a2:	bf00      	nop
   dd1a4:	f3af 8000 	nop.w
   dd1a8:	00000000 	.word	0x00000000
   dd1ac:	3ff00000 	.word	0x3ff00000
   dd1b0:	40000000 	.word	0x40000000
   dd1b4:	3ff921fb 	.word	0x3ff921fb
   dd1b8:	3ff00000 	.word	0x3ff00000
   dd1bc:	3fe00000 	.word	0x3fe00000
   dd1c0:	3e700000 	.word	0x3e700000
   dd1c4:	000e0a88 	.word	0x000e0a88
   dd1c8:	9d06      	ldr	r5, [sp, #24]
   dd1ca:	3508      	adds	r5, #8
   dd1cc:	4425      	add	r5, r4
   dd1ce:	2000      	movs	r0, #0
   dd1d0:	2100      	movs	r1, #0
   dd1d2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   dd1d6:	f000 fad9 	bl	dd78c <__adddf3>
   dd1da:	42a5      	cmp	r5, r4
   dd1dc:	d1f9      	bne.n	dd1d2 <__kernel_rem_pio2+0x652>
   dd1de:	9b03      	ldr	r3, [sp, #12]
   dd1e0:	2b00      	cmp	r3, #0
   dd1e2:	d04a      	beq.n	dd27a <__kernel_rem_pio2+0x6fa>
   dd1e4:	9e08      	ldr	r6, [sp, #32]
   dd1e6:	4602      	mov	r2, r0
   dd1e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd1ec:	e886 000c 	stmia.w	r6, {r2, r3}
   dd1f0:	460b      	mov	r3, r1
   dd1f2:	4602      	mov	r2, r0
   dd1f4:	e9d4 0100 	ldrd	r0, r1, [r4]
   dd1f8:	f000 fac6 	bl	dd788 <__aeabi_dsub>
   dd1fc:	9b00      	ldr	r3, [sp, #0]
   dd1fe:	2b00      	cmp	r3, #0
   dd200:	dd0d      	ble.n	dd21e <__kernel_rem_pio2+0x69e>
   dd202:	ad4c      	add	r5, sp, #304	; 0x130
   dd204:	2401      	movs	r4, #1
   dd206:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   dd20a:	f000 fabf 	bl	dd78c <__adddf3>
   dd20e:	9b00      	ldr	r3, [sp, #0]
   dd210:	3401      	adds	r4, #1
   dd212:	42a3      	cmp	r3, r4
   dd214:	daf7      	bge.n	dd206 <__kernel_rem_pio2+0x686>
   dd216:	9b03      	ldr	r3, [sp, #12]
   dd218:	2b00      	cmp	r3, #0
   dd21a:	f000 80a7 	beq.w	dd36c <__kernel_rem_pio2+0x7ec>
   dd21e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd222:	9908      	ldr	r1, [sp, #32]
   dd224:	4602      	mov	r2, r0
   dd226:	e9c1 2302 	strd	r2, r3, [r1, #8]
   dd22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd22c:	f003 0007 	and.w	r0, r3, #7
   dd230:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   dd234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd238:	9b06      	ldr	r3, [sp, #24]
   dd23a:	9d00      	ldr	r5, [sp, #0]
   dd23c:	3308      	adds	r3, #8
   dd23e:	2000      	movs	r0, #0
   dd240:	2100      	movs	r1, #0
   dd242:	441c      	add	r4, r3
   dd244:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   dd248:	3d01      	subs	r5, #1
   dd24a:	f000 fa9f 	bl	dd78c <__adddf3>
   dd24e:	1c6b      	adds	r3, r5, #1
   dd250:	d1f8      	bne.n	dd244 <__kernel_rem_pio2+0x6c4>
   dd252:	9b03      	ldr	r3, [sp, #12]
   dd254:	4602      	mov	r2, r0
   dd256:	2b00      	cmp	r3, #0
   dd258:	f000 808e 	beq.w	dd378 <__kernel_rem_pio2+0x7f8>
   dd25c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd260:	9908      	ldr	r1, [sp, #32]
   dd262:	e9c1 2300 	strd	r2, r3, [r1]
   dd266:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd268:	f003 0007 	and.w	r0, r3, #7
   dd26c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   dd270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd274:	2600      	movs	r6, #0
   dd276:	2700      	movs	r7, #0
   dd278:	e6ee      	b.n	dd058 <__kernel_rem_pio2+0x4d8>
   dd27a:	9b08      	ldr	r3, [sp, #32]
   dd27c:	4602      	mov	r2, r0
   dd27e:	e9c3 0100 	strd	r0, r1, [r3]
   dd282:	460b      	mov	r3, r1
   dd284:	e9d4 0100 	ldrd	r0, r1, [r4]
   dd288:	f000 fa7e 	bl	dd788 <__aeabi_dsub>
   dd28c:	9c00      	ldr	r4, [sp, #0]
   dd28e:	2c00      	cmp	r4, #0
   dd290:	4602      	mov	r2, r0
   dd292:	460b      	mov	r3, r1
   dd294:	dcb5      	bgt.n	dd202 <__kernel_rem_pio2+0x682>
   dd296:	9908      	ldr	r1, [sp, #32]
   dd298:	e9c1 2302 	strd	r2, r3, [r1, #8]
   dd29c:	e7c5      	b.n	dd22a <__kernel_rem_pio2+0x6aa>
   dd29e:	9b06      	ldr	r3, [sp, #24]
   dd2a0:	9503      	str	r5, [sp, #12]
   dd2a2:	4258      	negs	r0, r3
   dd2a4:	ec47 6b10 	vmov	d0, r6, r7
   dd2a8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   dd2ac:	f000 f9d4 	bl	dd658 <scalbn>
   dd2b0:	ec55 4b10 	vmov	r4, r5, d0
   dd2b4:	2200      	movs	r2, #0
   dd2b6:	4b38      	ldr	r3, [pc, #224]	; (dd398 <__kernel_rem_pio2+0x818>)
   dd2b8:	ee10 0a10 	vmov	r0, s0
   dd2bc:	4629      	mov	r1, r5
   dd2be:	f000 fe9d 	bl	ddffc <__aeabi_dcmpge>
   dd2c2:	2800      	cmp	r0, #0
   dd2c4:	d034      	beq.n	dd330 <__kernel_rem_pio2+0x7b0>
   dd2c6:	2200      	movs	r2, #0
   dd2c8:	4b34      	ldr	r3, [pc, #208]	; (dd39c <__kernel_rem_pio2+0x81c>)
   dd2ca:	4620      	mov	r0, r4
   dd2cc:	4629      	mov	r1, r5
   dd2ce:	f000 fc0f 	bl	ddaf0 <__aeabi_dmul>
   dd2d2:	f000 febd 	bl	de050 <__aeabi_d2iz>
   dd2d6:	4606      	mov	r6, r0
   dd2d8:	f000 fba4 	bl	dda24 <__aeabi_i2d>
   dd2dc:	2200      	movs	r2, #0
   dd2de:	4b2e      	ldr	r3, [pc, #184]	; (dd398 <__kernel_rem_pio2+0x818>)
   dd2e0:	f000 fc06 	bl	ddaf0 <__aeabi_dmul>
   dd2e4:	4602      	mov	r2, r0
   dd2e6:	460b      	mov	r3, r1
   dd2e8:	4620      	mov	r0, r4
   dd2ea:	4629      	mov	r1, r5
   dd2ec:	f000 fa4c 	bl	dd788 <__aeabi_dsub>
   dd2f0:	f000 feae 	bl	de050 <__aeabi_d2iz>
   dd2f4:	9904      	ldr	r1, [sp, #16]
   dd2f6:	9b06      	ldr	r3, [sp, #24]
   dd2f8:	460a      	mov	r2, r1
   dd2fa:	3318      	adds	r3, #24
   dd2fc:	3201      	adds	r2, #1
   dd2fe:	9306      	str	r3, [sp, #24]
   dd300:	460b      	mov	r3, r1
   dd302:	a90e      	add	r1, sp, #56	; 0x38
   dd304:	9200      	str	r2, [sp, #0]
   dd306:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   dd30a:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   dd30e:	e651      	b.n	dcfb4 <__kernel_rem_pio2+0x434>
   dd310:	2301      	movs	r3, #1
   dd312:	e5a0      	b.n	dce56 <__kernel_rem_pio2+0x2d6>
   dd314:	2400      	movs	r4, #0
   dd316:	e55c      	b.n	dcdd2 <__kernel_rem_pio2+0x252>
   dd318:	e9d4 6700 	ldrd	r6, r7, [r4]
   dd31c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   dd320:	9d08      	ldr	r5, [sp, #32]
   dd322:	e9c5 0104 	strd	r0, r1, [r5, #16]
   dd326:	e9c5 6700 	strd	r6, r7, [r5]
   dd32a:	e9c5 2302 	strd	r2, r3, [r5, #8]
   dd32e:	e731      	b.n	dd194 <__kernel_rem_pio2+0x614>
   dd330:	4629      	mov	r1, r5
   dd332:	4620      	mov	r0, r4
   dd334:	f000 fe8c 	bl	de050 <__aeabi_d2iz>
   dd338:	9a04      	ldr	r2, [sp, #16]
   dd33a:	9200      	str	r2, [sp, #0]
   dd33c:	a90e      	add	r1, sp, #56	; 0x38
   dd33e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   dd342:	e637      	b.n	dcfb4 <__kernel_rem_pio2+0x434>
   dd344:	ac4a      	add	r4, sp, #296	; 0x128
   dd346:	2000      	movs	r0, #0
   dd348:	2100      	movs	r1, #0
   dd34a:	e70e      	b.n	dd16a <__kernel_rem_pio2+0x5ea>
   dd34c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   dd34e:	2b03      	cmp	r3, #3
   dd350:	f63f af20 	bhi.w	dd194 <__kernel_rem_pio2+0x614>
   dd354:	a201      	add	r2, pc, #4	; (adr r2, dd35c <__kernel_rem_pio2+0x7dc>)
   dd356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   dd35a:	bf00      	nop
   dd35c:	000dd393 	.word	0x000dd393
   dd360:	000dd38b 	.word	0x000dd38b
   dd364:	000dd38b 	.word	0x000dd38b
   dd368:	000dd345 	.word	0x000dd345
   dd36c:	460b      	mov	r3, r1
   dd36e:	9908      	ldr	r1, [sp, #32]
   dd370:	4602      	mov	r2, r0
   dd372:	e9c1 2302 	strd	r2, r3, [r1, #8]
   dd376:	e758      	b.n	dd22a <__kernel_rem_pio2+0x6aa>
   dd378:	460b      	mov	r3, r1
   dd37a:	9908      	ldr	r1, [sp, #32]
   dd37c:	e9c1 2300 	strd	r2, r3, [r1]
   dd380:	e771      	b.n	dd266 <__kernel_rem_pio2+0x6e6>
   dd382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dd384:	00db      	lsls	r3, r3, #3
   dd386:	9304      	str	r3, [sp, #16]
   dd388:	e469      	b.n	dcc5e <__kernel_rem_pio2+0xde>
   dd38a:	2000      	movs	r0, #0
   dd38c:	2100      	movs	r1, #0
   dd38e:	ac4a      	add	r4, sp, #296	; 0x128
   dd390:	e725      	b.n	dd1de <__kernel_rem_pio2+0x65e>
   dd392:	2000      	movs	r0, #0
   dd394:	2100      	movs	r1, #0
   dd396:	e75c      	b.n	dd252 <__kernel_rem_pio2+0x6d2>
   dd398:	41700000 	.word	0x41700000
   dd39c:	3e700000 	.word	0x3e700000

000dd3a0 <__kernel_sin>:
   dd3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd3a4:	ec55 4b10 	vmov	r4, r5, d0
   dd3a8:	ed2d 8b02 	vpush	{d8}
   dd3ac:	eeb0 8a41 	vmov.f32	s16, s2
   dd3b0:	eef0 8a61 	vmov.f32	s17, s3
   dd3b4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   dd3b8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   dd3bc:	b083      	sub	sp, #12
   dd3be:	4682      	mov	sl, r0
   dd3c0:	da07      	bge.n	dd3d2 <__kernel_sin+0x32>
   dd3c2:	ee10 0a10 	vmov	r0, s0
   dd3c6:	4629      	mov	r1, r5
   dd3c8:	f000 fe42 	bl	de050 <__aeabi_d2iz>
   dd3cc:	2800      	cmp	r0, #0
   dd3ce:	f000 808e 	beq.w	dd4ee <__kernel_sin+0x14e>
   dd3d2:	4622      	mov	r2, r4
   dd3d4:	462b      	mov	r3, r5
   dd3d6:	4620      	mov	r0, r4
   dd3d8:	4629      	mov	r1, r5
   dd3da:	f000 fb89 	bl	ddaf0 <__aeabi_dmul>
   dd3de:	4606      	mov	r6, r0
   dd3e0:	460f      	mov	r7, r1
   dd3e2:	4602      	mov	r2, r0
   dd3e4:	460b      	mov	r3, r1
   dd3e6:	4620      	mov	r0, r4
   dd3e8:	4629      	mov	r1, r5
   dd3ea:	f000 fb81 	bl	ddaf0 <__aeabi_dmul>
   dd3ee:	a347      	add	r3, pc, #284	; (adr r3, dd50c <__kernel_sin+0x16c>)
   dd3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd3f4:	4680      	mov	r8, r0
   dd3f6:	4689      	mov	r9, r1
   dd3f8:	4630      	mov	r0, r6
   dd3fa:	4639      	mov	r1, r7
   dd3fc:	f000 fb78 	bl	ddaf0 <__aeabi_dmul>
   dd400:	a344      	add	r3, pc, #272	; (adr r3, dd514 <__kernel_sin+0x174>)
   dd402:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd406:	f000 f9bf 	bl	dd788 <__aeabi_dsub>
   dd40a:	4632      	mov	r2, r6
   dd40c:	463b      	mov	r3, r7
   dd40e:	f000 fb6f 	bl	ddaf0 <__aeabi_dmul>
   dd412:	a342      	add	r3, pc, #264	; (adr r3, dd51c <__kernel_sin+0x17c>)
   dd414:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd418:	f000 f9b8 	bl	dd78c <__adddf3>
   dd41c:	4632      	mov	r2, r6
   dd41e:	463b      	mov	r3, r7
   dd420:	f000 fb66 	bl	ddaf0 <__aeabi_dmul>
   dd424:	a33f      	add	r3, pc, #252	; (adr r3, dd524 <__kernel_sin+0x184>)
   dd426:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd42a:	f000 f9ad 	bl	dd788 <__aeabi_dsub>
   dd42e:	4632      	mov	r2, r6
   dd430:	463b      	mov	r3, r7
   dd432:	f000 fb5d 	bl	ddaf0 <__aeabi_dmul>
   dd436:	a33d      	add	r3, pc, #244	; (adr r3, dd52c <__kernel_sin+0x18c>)
   dd438:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd43c:	f000 f9a6 	bl	dd78c <__adddf3>
   dd440:	e9cd 0100 	strd	r0, r1, [sp]
   dd444:	f1ba 0f00 	cmp.w	sl, #0
   dd448:	d037      	beq.n	dd4ba <__kernel_sin+0x11a>
   dd44a:	2200      	movs	r2, #0
   dd44c:	4b2e      	ldr	r3, [pc, #184]	; (dd508 <__kernel_sin+0x168>)
   dd44e:	ec51 0b18 	vmov	r0, r1, d8
   dd452:	f000 fb4d 	bl	ddaf0 <__aeabi_dmul>
   dd456:	e9dd 2300 	ldrd	r2, r3, [sp]
   dd45a:	4682      	mov	sl, r0
   dd45c:	468b      	mov	fp, r1
   dd45e:	4640      	mov	r0, r8
   dd460:	4649      	mov	r1, r9
   dd462:	f000 fb45 	bl	ddaf0 <__aeabi_dmul>
   dd466:	4602      	mov	r2, r0
   dd468:	460b      	mov	r3, r1
   dd46a:	4650      	mov	r0, sl
   dd46c:	4659      	mov	r1, fp
   dd46e:	f000 f98b 	bl	dd788 <__aeabi_dsub>
   dd472:	4632      	mov	r2, r6
   dd474:	463b      	mov	r3, r7
   dd476:	f000 fb3b 	bl	ddaf0 <__aeabi_dmul>
   dd47a:	ec53 2b18 	vmov	r2, r3, d8
   dd47e:	f000 f983 	bl	dd788 <__aeabi_dsub>
   dd482:	a31f      	add	r3, pc, #124	; (adr r3, dd500 <__kernel_sin+0x160>)
   dd484:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd488:	4606      	mov	r6, r0
   dd48a:	460f      	mov	r7, r1
   dd48c:	4640      	mov	r0, r8
   dd48e:	4649      	mov	r1, r9
   dd490:	f000 fb2e 	bl	ddaf0 <__aeabi_dmul>
   dd494:	4602      	mov	r2, r0
   dd496:	460b      	mov	r3, r1
   dd498:	4630      	mov	r0, r6
   dd49a:	4639      	mov	r1, r7
   dd49c:	f000 f976 	bl	dd78c <__adddf3>
   dd4a0:	4602      	mov	r2, r0
   dd4a2:	460b      	mov	r3, r1
   dd4a4:	4620      	mov	r0, r4
   dd4a6:	4629      	mov	r1, r5
   dd4a8:	f000 f96e 	bl	dd788 <__aeabi_dsub>
   dd4ac:	ec41 0b10 	vmov	d0, r0, r1
   dd4b0:	b003      	add	sp, #12
   dd4b2:	ecbd 8b02 	vpop	{d8}
   dd4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd4ba:	4602      	mov	r2, r0
   dd4bc:	460b      	mov	r3, r1
   dd4be:	4630      	mov	r0, r6
   dd4c0:	4639      	mov	r1, r7
   dd4c2:	f000 fb15 	bl	ddaf0 <__aeabi_dmul>
   dd4c6:	a30e      	add	r3, pc, #56	; (adr r3, dd500 <__kernel_sin+0x160>)
   dd4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd4cc:	f000 f95c 	bl	dd788 <__aeabi_dsub>
   dd4d0:	4642      	mov	r2, r8
   dd4d2:	464b      	mov	r3, r9
   dd4d4:	f000 fb0c 	bl	ddaf0 <__aeabi_dmul>
   dd4d8:	4622      	mov	r2, r4
   dd4da:	462b      	mov	r3, r5
   dd4dc:	f000 f956 	bl	dd78c <__adddf3>
   dd4e0:	ec41 0b10 	vmov	d0, r0, r1
   dd4e4:	b003      	add	sp, #12
   dd4e6:	ecbd 8b02 	vpop	{d8}
   dd4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd4ee:	ec45 4b10 	vmov	d0, r4, r5
   dd4f2:	b003      	add	sp, #12
   dd4f4:	ecbd 8b02 	vpop	{d8}
   dd4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd4fc:	f3af 8000 	nop.w
   dd500:	55555549 	.word	0x55555549
   dd504:	3fc55555 	.word	0x3fc55555
   dd508:	3fe00000 	.word	0x3fe00000
   dd50c:	5acfd57c 	.word	0x5acfd57c
   dd510:	3de5d93a 	.word	0x3de5d93a
   dd514:	8a2b9ceb 	.word	0x8a2b9ceb
   dd518:	3e5ae5e6 	.word	0x3e5ae5e6
   dd51c:	57b1fe7d 	.word	0x57b1fe7d
   dd520:	3ec71de3 	.word	0x3ec71de3
   dd524:	19c161d5 	.word	0x19c161d5
   dd528:	3f2a01a0 	.word	0x3f2a01a0
   dd52c:	1110f8a6 	.word	0x1110f8a6
   dd530:	3f811111 	.word	0x3f811111
   dd534:	00000000 	.word	0x00000000

000dd538 <floor>:
   dd538:	ec51 0b10 	vmov	r0, r1, d0
   dd53c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   dd540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd544:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   dd548:	2d13      	cmp	r5, #19
   dd54a:	460c      	mov	r4, r1
   dd54c:	460f      	mov	r7, r1
   dd54e:	ee10 6a10 	vmov	r6, s0
   dd552:	dc1d      	bgt.n	dd590 <floor+0x58>
   dd554:	2d00      	cmp	r5, #0
   dd556:	db43      	blt.n	dd5e0 <floor+0xa8>
   dd558:	4b3d      	ldr	r3, [pc, #244]	; (dd650 <floor+0x118>)
   dd55a:	fa43 f805 	asr.w	r8, r3, r5
   dd55e:	ea01 0308 	and.w	r3, r1, r8
   dd562:	4303      	orrs	r3, r0
   dd564:	d019      	beq.n	dd59a <floor+0x62>
   dd566:	a338      	add	r3, pc, #224	; (adr r3, dd648 <floor+0x110>)
   dd568:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd56c:	f000 f90e 	bl	dd78c <__adddf3>
   dd570:	2200      	movs	r2, #0
   dd572:	2300      	movs	r3, #0
   dd574:	f000 fd4c 	bl	de010 <__aeabi_dcmpgt>
   dd578:	b120      	cbz	r0, dd584 <floor+0x4c>
   dd57a:	2c00      	cmp	r4, #0
   dd57c:	db49      	blt.n	dd612 <floor+0xda>
   dd57e:	ea27 0408 	bic.w	r4, r7, r8
   dd582:	2600      	movs	r6, #0
   dd584:	4623      	mov	r3, r4
   dd586:	4632      	mov	r2, r6
   dd588:	ec43 2b10 	vmov	d0, r2, r3
   dd58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd590:	2d33      	cmp	r5, #51	; 0x33
   dd592:	dd06      	ble.n	dd5a2 <floor+0x6a>
   dd594:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   dd598:	d032      	beq.n	dd600 <floor+0xc8>
   dd59a:	ec41 0b10 	vmov	d0, r0, r1
   dd59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd5a2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   dd5a6:	f04f 38ff 	mov.w	r8, #4294967295
   dd5aa:	fa28 f803 	lsr.w	r8, r8, r3
   dd5ae:	ea10 0f08 	tst.w	r0, r8
   dd5b2:	d0f2      	beq.n	dd59a <floor+0x62>
   dd5b4:	a324      	add	r3, pc, #144	; (adr r3, dd648 <floor+0x110>)
   dd5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5ba:	f000 f8e7 	bl	dd78c <__adddf3>
   dd5be:	2200      	movs	r2, #0
   dd5c0:	2300      	movs	r3, #0
   dd5c2:	f000 fd25 	bl	de010 <__aeabi_dcmpgt>
   dd5c6:	2800      	cmp	r0, #0
   dd5c8:	d0dc      	beq.n	dd584 <floor+0x4c>
   dd5ca:	2c00      	cmp	r4, #0
   dd5cc:	db27      	blt.n	dd61e <floor+0xe6>
   dd5ce:	463c      	mov	r4, r7
   dd5d0:	ea26 0608 	bic.w	r6, r6, r8
   dd5d4:	4623      	mov	r3, r4
   dd5d6:	4632      	mov	r2, r6
   dd5d8:	ec43 2b10 	vmov	d0, r2, r3
   dd5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd5e0:	a319      	add	r3, pc, #100	; (adr r3, dd648 <floor+0x110>)
   dd5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5e6:	f000 f8d1 	bl	dd78c <__adddf3>
   dd5ea:	2200      	movs	r2, #0
   dd5ec:	2300      	movs	r3, #0
   dd5ee:	f000 fd0f 	bl	de010 <__aeabi_dcmpgt>
   dd5f2:	2800      	cmp	r0, #0
   dd5f4:	d0c6      	beq.n	dd584 <floor+0x4c>
   dd5f6:	2c00      	cmp	r4, #0
   dd5f8:	db1c      	blt.n	dd634 <floor+0xfc>
   dd5fa:	2600      	movs	r6, #0
   dd5fc:	4634      	mov	r4, r6
   dd5fe:	e7c1      	b.n	dd584 <floor+0x4c>
   dd600:	ee10 2a10 	vmov	r2, s0
   dd604:	460b      	mov	r3, r1
   dd606:	f000 f8c1 	bl	dd78c <__adddf3>
   dd60a:	ec41 0b10 	vmov	d0, r0, r1
   dd60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dd612:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   dd616:	fa43 f505 	asr.w	r5, r3, r5
   dd61a:	442f      	add	r7, r5
   dd61c:	e7af      	b.n	dd57e <floor+0x46>
   dd61e:	2d14      	cmp	r5, #20
   dd620:	d010      	beq.n	dd644 <floor+0x10c>
   dd622:	2301      	movs	r3, #1
   dd624:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   dd628:	fa03 f505 	lsl.w	r5, r3, r5
   dd62c:	19ae      	adds	r6, r5, r6
   dd62e:	bf28      	it	cs
   dd630:	18ff      	addcs	r7, r7, r3
   dd632:	e7cc      	b.n	dd5ce <floor+0x96>
   dd634:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   dd638:	4b06      	ldr	r3, [pc, #24]	; (dd654 <floor+0x11c>)
   dd63a:	4332      	orrs	r2, r6
   dd63c:	bf18      	it	ne
   dd63e:	461c      	movne	r4, r3
   dd640:	2600      	movs	r6, #0
   dd642:	e79f      	b.n	dd584 <floor+0x4c>
   dd644:	3701      	adds	r7, #1
   dd646:	e7c2      	b.n	dd5ce <floor+0x96>
   dd648:	8800759c 	.word	0x8800759c
   dd64c:	7e37e43c 	.word	0x7e37e43c
   dd650:	000fffff 	.word	0x000fffff
   dd654:	bff00000 	.word	0xbff00000

000dd658 <scalbn>:
   dd658:	ec53 2b10 	vmov	r2, r3, d0
   dd65c:	b570      	push	{r4, r5, r6, lr}
   dd65e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   dd662:	4619      	mov	r1, r3
   dd664:	4605      	mov	r5, r0
   dd666:	bb14      	cbnz	r4, dd6ae <scalbn+0x56>
   dd668:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   dd66c:	4311      	orrs	r1, r2
   dd66e:	d02a      	beq.n	dd6c6 <scalbn+0x6e>
   dd670:	4619      	mov	r1, r3
   dd672:	2200      	movs	r2, #0
   dd674:	4b38      	ldr	r3, [pc, #224]	; (dd758 <scalbn+0x100>)
   dd676:	4e39      	ldr	r6, [pc, #228]	; (dd75c <scalbn+0x104>)
   dd678:	ee10 0a10 	vmov	r0, s0
   dd67c:	f000 fa38 	bl	ddaf0 <__aeabi_dmul>
   dd680:	42b5      	cmp	r5, r6
   dd682:	4602      	mov	r2, r0
   dd684:	460b      	mov	r3, r1
   dd686:	db1f      	blt.n	dd6c8 <scalbn+0x70>
   dd688:	f3c1 540a 	ubfx	r4, r1, #20, #11
   dd68c:	3c36      	subs	r4, #54	; 0x36
   dd68e:	442c      	add	r4, r5
   dd690:	f240 70fe 	movw	r0, #2046	; 0x7fe
   dd694:	4284      	cmp	r4, r0
   dd696:	dc1f      	bgt.n	dd6d8 <scalbn+0x80>
   dd698:	2c00      	cmp	r4, #0
   dd69a:	dd2d      	ble.n	dd6f8 <scalbn+0xa0>
   dd69c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   dd6a0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   dd6a4:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   dd6a8:	ec43 2b10 	vmov	d0, r2, r3
   dd6ac:	bd70      	pop	{r4, r5, r6, pc}
   dd6ae:	f240 70ff 	movw	r0, #2047	; 0x7ff
   dd6b2:	4284      	cmp	r4, r0
   dd6b4:	d1eb      	bne.n	dd68e <scalbn+0x36>
   dd6b6:	ee10 0a10 	vmov	r0, s0
   dd6ba:	4619      	mov	r1, r3
   dd6bc:	f000 f866 	bl	dd78c <__adddf3>
   dd6c0:	ec41 0b10 	vmov	d0, r0, r1
   dd6c4:	bd70      	pop	{r4, r5, r6, pc}
   dd6c6:	bd70      	pop	{r4, r5, r6, pc}
   dd6c8:	a31f      	add	r3, pc, #124	; (adr r3, dd748 <scalbn+0xf0>)
   dd6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd6ce:	f000 fa0f 	bl	ddaf0 <__aeabi_dmul>
   dd6d2:	ec41 0b10 	vmov	d0, r0, r1
   dd6d6:	bd70      	pop	{r4, r5, r6, pc}
   dd6d8:	ec43 2b11 	vmov	d1, r2, r3
   dd6dc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; dd750 <scalbn+0xf8>
   dd6e0:	f000 f840 	bl	dd764 <copysign>
   dd6e4:	a31a      	add	r3, pc, #104	; (adr r3, dd750 <scalbn+0xf8>)
   dd6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd6ea:	ec51 0b10 	vmov	r0, r1, d0
   dd6ee:	f000 f9ff 	bl	ddaf0 <__aeabi_dmul>
   dd6f2:	ec41 0b10 	vmov	d0, r0, r1
   dd6f6:	bd70      	pop	{r4, r5, r6, pc}
   dd6f8:	f114 0f35 	cmn.w	r4, #53	; 0x35
   dd6fc:	da13      	bge.n	dd726 <scalbn+0xce>
   dd6fe:	f24c 3150 	movw	r1, #50000	; 0xc350
   dd702:	428d      	cmp	r5, r1
   dd704:	ec43 2b11 	vmov	d1, r2, r3
   dd708:	dce8      	bgt.n	dd6dc <scalbn+0x84>
   dd70a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; dd748 <scalbn+0xf0>
   dd70e:	f000 f829 	bl	dd764 <copysign>
   dd712:	a30d      	add	r3, pc, #52	; (adr r3, dd748 <scalbn+0xf0>)
   dd714:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd718:	ec51 0b10 	vmov	r0, r1, d0
   dd71c:	f000 f9e8 	bl	ddaf0 <__aeabi_dmul>
   dd720:	ec41 0b10 	vmov	d0, r0, r1
   dd724:	bd70      	pop	{r4, r5, r6, pc}
   dd726:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   dd72a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   dd72e:	3436      	adds	r4, #54	; 0x36
   dd730:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   dd734:	4610      	mov	r0, r2
   dd736:	4619      	mov	r1, r3
   dd738:	2200      	movs	r2, #0
   dd73a:	4b09      	ldr	r3, [pc, #36]	; (dd760 <scalbn+0x108>)
   dd73c:	f000 f9d8 	bl	ddaf0 <__aeabi_dmul>
   dd740:	ec41 0b10 	vmov	d0, r0, r1
   dd744:	bd70      	pop	{r4, r5, r6, pc}
   dd746:	bf00      	nop
   dd748:	c2f8f359 	.word	0xc2f8f359
   dd74c:	01a56e1f 	.word	0x01a56e1f
   dd750:	8800759c 	.word	0x8800759c
   dd754:	7e37e43c 	.word	0x7e37e43c
   dd758:	43500000 	.word	0x43500000
   dd75c:	ffff3cb0 	.word	0xffff3cb0
   dd760:	3c900000 	.word	0x3c900000

000dd764 <copysign>:
   dd764:	ec53 2b10 	vmov	r2, r3, d0
   dd768:	ee11 0a90 	vmov	r0, s3
   dd76c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   dd770:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   dd774:	ea41 0300 	orr.w	r3, r1, r0
   dd778:	ec43 2b10 	vmov	d0, r2, r3
   dd77c:	4770      	bx	lr
   dd77e:	bf00      	nop

000dd780 <__aeabi_drsub>:
   dd780:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dd784:	e002      	b.n	dd78c <__adddf3>
   dd786:	bf00      	nop

000dd788 <__aeabi_dsub>:
   dd788:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dd78c <__adddf3>:
   dd78c:	b530      	push	{r4, r5, lr}
   dd78e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dd792:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dd796:	ea94 0f05 	teq	r4, r5
   dd79a:	bf08      	it	eq
   dd79c:	ea90 0f02 	teqeq	r0, r2
   dd7a0:	bf1f      	itttt	ne
   dd7a2:	ea54 0c00 	orrsne.w	ip, r4, r0
   dd7a6:	ea55 0c02 	orrsne.w	ip, r5, r2
   dd7aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dd7ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dd7b2:	f000 80e2 	beq.w	dd97a <__adddf3+0x1ee>
   dd7b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dd7ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dd7be:	bfb8      	it	lt
   dd7c0:	426d      	neglt	r5, r5
   dd7c2:	dd0c      	ble.n	dd7de <__adddf3+0x52>
   dd7c4:	442c      	add	r4, r5
   dd7c6:	ea80 0202 	eor.w	r2, r0, r2
   dd7ca:	ea81 0303 	eor.w	r3, r1, r3
   dd7ce:	ea82 0000 	eor.w	r0, r2, r0
   dd7d2:	ea83 0101 	eor.w	r1, r3, r1
   dd7d6:	ea80 0202 	eor.w	r2, r0, r2
   dd7da:	ea81 0303 	eor.w	r3, r1, r3
   dd7de:	2d36      	cmp	r5, #54	; 0x36
   dd7e0:	bf88      	it	hi
   dd7e2:	bd30      	pophi	{r4, r5, pc}
   dd7e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dd7e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dd7ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dd7f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dd7f4:	d002      	beq.n	dd7fc <__adddf3+0x70>
   dd7f6:	4240      	negs	r0, r0
   dd7f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dd7fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dd800:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dd804:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dd808:	d002      	beq.n	dd810 <__adddf3+0x84>
   dd80a:	4252      	negs	r2, r2
   dd80c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dd810:	ea94 0f05 	teq	r4, r5
   dd814:	f000 80a7 	beq.w	dd966 <__adddf3+0x1da>
   dd818:	f1a4 0401 	sub.w	r4, r4, #1
   dd81c:	f1d5 0e20 	rsbs	lr, r5, #32
   dd820:	db0d      	blt.n	dd83e <__adddf3+0xb2>
   dd822:	fa02 fc0e 	lsl.w	ip, r2, lr
   dd826:	fa22 f205 	lsr.w	r2, r2, r5
   dd82a:	1880      	adds	r0, r0, r2
   dd82c:	f141 0100 	adc.w	r1, r1, #0
   dd830:	fa03 f20e 	lsl.w	r2, r3, lr
   dd834:	1880      	adds	r0, r0, r2
   dd836:	fa43 f305 	asr.w	r3, r3, r5
   dd83a:	4159      	adcs	r1, r3
   dd83c:	e00e      	b.n	dd85c <__adddf3+0xd0>
   dd83e:	f1a5 0520 	sub.w	r5, r5, #32
   dd842:	f10e 0e20 	add.w	lr, lr, #32
   dd846:	2a01      	cmp	r2, #1
   dd848:	fa03 fc0e 	lsl.w	ip, r3, lr
   dd84c:	bf28      	it	cs
   dd84e:	f04c 0c02 	orrcs.w	ip, ip, #2
   dd852:	fa43 f305 	asr.w	r3, r3, r5
   dd856:	18c0      	adds	r0, r0, r3
   dd858:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dd85c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd860:	d507      	bpl.n	dd872 <__adddf3+0xe6>
   dd862:	f04f 0e00 	mov.w	lr, #0
   dd866:	f1dc 0c00 	rsbs	ip, ip, #0
   dd86a:	eb7e 0000 	sbcs.w	r0, lr, r0
   dd86e:	eb6e 0101 	sbc.w	r1, lr, r1
   dd872:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dd876:	d31b      	bcc.n	dd8b0 <__adddf3+0x124>
   dd878:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dd87c:	d30c      	bcc.n	dd898 <__adddf3+0x10c>
   dd87e:	0849      	lsrs	r1, r1, #1
   dd880:	ea5f 0030 	movs.w	r0, r0, rrx
   dd884:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dd888:	f104 0401 	add.w	r4, r4, #1
   dd88c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dd890:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dd894:	f080 809a 	bcs.w	dd9cc <__adddf3+0x240>
   dd898:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dd89c:	bf08      	it	eq
   dd89e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dd8a2:	f150 0000 	adcs.w	r0, r0, #0
   dd8a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dd8aa:	ea41 0105 	orr.w	r1, r1, r5
   dd8ae:	bd30      	pop	{r4, r5, pc}
   dd8b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dd8b4:	4140      	adcs	r0, r0
   dd8b6:	eb41 0101 	adc.w	r1, r1, r1
   dd8ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dd8be:	f1a4 0401 	sub.w	r4, r4, #1
   dd8c2:	d1e9      	bne.n	dd898 <__adddf3+0x10c>
   dd8c4:	f091 0f00 	teq	r1, #0
   dd8c8:	bf04      	itt	eq
   dd8ca:	4601      	moveq	r1, r0
   dd8cc:	2000      	moveq	r0, #0
   dd8ce:	fab1 f381 	clz	r3, r1
   dd8d2:	bf08      	it	eq
   dd8d4:	3320      	addeq	r3, #32
   dd8d6:	f1a3 030b 	sub.w	r3, r3, #11
   dd8da:	f1b3 0220 	subs.w	r2, r3, #32
   dd8de:	da0c      	bge.n	dd8fa <__adddf3+0x16e>
   dd8e0:	320c      	adds	r2, #12
   dd8e2:	dd08      	ble.n	dd8f6 <__adddf3+0x16a>
   dd8e4:	f102 0c14 	add.w	ip, r2, #20
   dd8e8:	f1c2 020c 	rsb	r2, r2, #12
   dd8ec:	fa01 f00c 	lsl.w	r0, r1, ip
   dd8f0:	fa21 f102 	lsr.w	r1, r1, r2
   dd8f4:	e00c      	b.n	dd910 <__adddf3+0x184>
   dd8f6:	f102 0214 	add.w	r2, r2, #20
   dd8fa:	bfd8      	it	le
   dd8fc:	f1c2 0c20 	rsble	ip, r2, #32
   dd900:	fa01 f102 	lsl.w	r1, r1, r2
   dd904:	fa20 fc0c 	lsr.w	ip, r0, ip
   dd908:	bfdc      	itt	le
   dd90a:	ea41 010c 	orrle.w	r1, r1, ip
   dd90e:	4090      	lslle	r0, r2
   dd910:	1ae4      	subs	r4, r4, r3
   dd912:	bfa2      	ittt	ge
   dd914:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dd918:	4329      	orrge	r1, r5
   dd91a:	bd30      	popge	{r4, r5, pc}
   dd91c:	ea6f 0404 	mvn.w	r4, r4
   dd920:	3c1f      	subs	r4, #31
   dd922:	da1c      	bge.n	dd95e <__adddf3+0x1d2>
   dd924:	340c      	adds	r4, #12
   dd926:	dc0e      	bgt.n	dd946 <__adddf3+0x1ba>
   dd928:	f104 0414 	add.w	r4, r4, #20
   dd92c:	f1c4 0220 	rsb	r2, r4, #32
   dd930:	fa20 f004 	lsr.w	r0, r0, r4
   dd934:	fa01 f302 	lsl.w	r3, r1, r2
   dd938:	ea40 0003 	orr.w	r0, r0, r3
   dd93c:	fa21 f304 	lsr.w	r3, r1, r4
   dd940:	ea45 0103 	orr.w	r1, r5, r3
   dd944:	bd30      	pop	{r4, r5, pc}
   dd946:	f1c4 040c 	rsb	r4, r4, #12
   dd94a:	f1c4 0220 	rsb	r2, r4, #32
   dd94e:	fa20 f002 	lsr.w	r0, r0, r2
   dd952:	fa01 f304 	lsl.w	r3, r1, r4
   dd956:	ea40 0003 	orr.w	r0, r0, r3
   dd95a:	4629      	mov	r1, r5
   dd95c:	bd30      	pop	{r4, r5, pc}
   dd95e:	fa21 f004 	lsr.w	r0, r1, r4
   dd962:	4629      	mov	r1, r5
   dd964:	bd30      	pop	{r4, r5, pc}
   dd966:	f094 0f00 	teq	r4, #0
   dd96a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dd96e:	bf06      	itte	eq
   dd970:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dd974:	3401      	addeq	r4, #1
   dd976:	3d01      	subne	r5, #1
   dd978:	e74e      	b.n	dd818 <__adddf3+0x8c>
   dd97a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dd97e:	bf18      	it	ne
   dd980:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dd984:	d029      	beq.n	dd9da <__adddf3+0x24e>
   dd986:	ea94 0f05 	teq	r4, r5
   dd98a:	bf08      	it	eq
   dd98c:	ea90 0f02 	teqeq	r0, r2
   dd990:	d005      	beq.n	dd99e <__adddf3+0x212>
   dd992:	ea54 0c00 	orrs.w	ip, r4, r0
   dd996:	bf04      	itt	eq
   dd998:	4619      	moveq	r1, r3
   dd99a:	4610      	moveq	r0, r2
   dd99c:	bd30      	pop	{r4, r5, pc}
   dd99e:	ea91 0f03 	teq	r1, r3
   dd9a2:	bf1e      	ittt	ne
   dd9a4:	2100      	movne	r1, #0
   dd9a6:	2000      	movne	r0, #0
   dd9a8:	bd30      	popne	{r4, r5, pc}
   dd9aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dd9ae:	d105      	bne.n	dd9bc <__adddf3+0x230>
   dd9b0:	0040      	lsls	r0, r0, #1
   dd9b2:	4149      	adcs	r1, r1
   dd9b4:	bf28      	it	cs
   dd9b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dd9ba:	bd30      	pop	{r4, r5, pc}
   dd9bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dd9c0:	bf3c      	itt	cc
   dd9c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dd9c6:	bd30      	popcc	{r4, r5, pc}
   dd9c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dd9cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dd9d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dd9d4:	f04f 0000 	mov.w	r0, #0
   dd9d8:	bd30      	pop	{r4, r5, pc}
   dd9da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dd9de:	bf1a      	itte	ne
   dd9e0:	4619      	movne	r1, r3
   dd9e2:	4610      	movne	r0, r2
   dd9e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dd9e8:	bf1c      	itt	ne
   dd9ea:	460b      	movne	r3, r1
   dd9ec:	4602      	movne	r2, r0
   dd9ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dd9f2:	bf06      	itte	eq
   dd9f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dd9f8:	ea91 0f03 	teqeq	r1, r3
   dd9fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dda00:	bd30      	pop	{r4, r5, pc}
   dda02:	bf00      	nop

000dda04 <__aeabi_ui2d>:
   dda04:	f090 0f00 	teq	r0, #0
   dda08:	bf04      	itt	eq
   dda0a:	2100      	moveq	r1, #0
   dda0c:	4770      	bxeq	lr
   dda0e:	b530      	push	{r4, r5, lr}
   dda10:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dda14:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dda18:	f04f 0500 	mov.w	r5, #0
   dda1c:	f04f 0100 	mov.w	r1, #0
   dda20:	e750      	b.n	dd8c4 <__adddf3+0x138>
   dda22:	bf00      	nop

000dda24 <__aeabi_i2d>:
   dda24:	f090 0f00 	teq	r0, #0
   dda28:	bf04      	itt	eq
   dda2a:	2100      	moveq	r1, #0
   dda2c:	4770      	bxeq	lr
   dda2e:	b530      	push	{r4, r5, lr}
   dda30:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dda34:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dda38:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dda3c:	bf48      	it	mi
   dda3e:	4240      	negmi	r0, r0
   dda40:	f04f 0100 	mov.w	r1, #0
   dda44:	e73e      	b.n	dd8c4 <__adddf3+0x138>
   dda46:	bf00      	nop

000dda48 <__aeabi_f2d>:
   dda48:	0042      	lsls	r2, r0, #1
   dda4a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dda4e:	ea4f 0131 	mov.w	r1, r1, rrx
   dda52:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dda56:	bf1f      	itttt	ne
   dda58:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dda5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dda60:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dda64:	4770      	bxne	lr
   dda66:	f092 0f00 	teq	r2, #0
   dda6a:	bf14      	ite	ne
   dda6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dda70:	4770      	bxeq	lr
   dda72:	b530      	push	{r4, r5, lr}
   dda74:	f44f 7460 	mov.w	r4, #896	; 0x380
   dda78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dda7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dda80:	e720      	b.n	dd8c4 <__adddf3+0x138>
   dda82:	bf00      	nop

000dda84 <__aeabi_ul2d>:
   dda84:	ea50 0201 	orrs.w	r2, r0, r1
   dda88:	bf08      	it	eq
   dda8a:	4770      	bxeq	lr
   dda8c:	b530      	push	{r4, r5, lr}
   dda8e:	f04f 0500 	mov.w	r5, #0
   dda92:	e00a      	b.n	ddaaa <__aeabi_l2d+0x16>

000dda94 <__aeabi_l2d>:
   dda94:	ea50 0201 	orrs.w	r2, r0, r1
   dda98:	bf08      	it	eq
   dda9a:	4770      	bxeq	lr
   dda9c:	b530      	push	{r4, r5, lr}
   dda9e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ddaa2:	d502      	bpl.n	ddaaa <__aeabi_l2d+0x16>
   ddaa4:	4240      	negs	r0, r0
   ddaa6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ddaaa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ddaae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ddab2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ddab6:	f43f aedc 	beq.w	dd872 <__adddf3+0xe6>
   ddaba:	f04f 0203 	mov.w	r2, #3
   ddabe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ddac2:	bf18      	it	ne
   ddac4:	3203      	addne	r2, #3
   ddac6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ddaca:	bf18      	it	ne
   ddacc:	3203      	addne	r2, #3
   ddace:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ddad2:	f1c2 0320 	rsb	r3, r2, #32
   ddad6:	fa00 fc03 	lsl.w	ip, r0, r3
   ddada:	fa20 f002 	lsr.w	r0, r0, r2
   ddade:	fa01 fe03 	lsl.w	lr, r1, r3
   ddae2:	ea40 000e 	orr.w	r0, r0, lr
   ddae6:	fa21 f102 	lsr.w	r1, r1, r2
   ddaea:	4414      	add	r4, r2
   ddaec:	e6c1      	b.n	dd872 <__adddf3+0xe6>
   ddaee:	bf00      	nop

000ddaf0 <__aeabi_dmul>:
   ddaf0:	b570      	push	{r4, r5, r6, lr}
   ddaf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ddaf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ddafa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ddafe:	bf1d      	ittte	ne
   ddb00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ddb04:	ea94 0f0c 	teqne	r4, ip
   ddb08:	ea95 0f0c 	teqne	r5, ip
   ddb0c:	f000 f8de 	bleq	ddccc <__aeabi_dmul+0x1dc>
   ddb10:	442c      	add	r4, r5
   ddb12:	ea81 0603 	eor.w	r6, r1, r3
   ddb16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ddb1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ddb1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ddb22:	bf18      	it	ne
   ddb24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ddb28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ddb2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ddb30:	d038      	beq.n	ddba4 <__aeabi_dmul+0xb4>
   ddb32:	fba0 ce02 	umull	ip, lr, r0, r2
   ddb36:	f04f 0500 	mov.w	r5, #0
   ddb3a:	fbe1 e502 	umlal	lr, r5, r1, r2
   ddb3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ddb42:	fbe0 e503 	umlal	lr, r5, r0, r3
   ddb46:	f04f 0600 	mov.w	r6, #0
   ddb4a:	fbe1 5603 	umlal	r5, r6, r1, r3
   ddb4e:	f09c 0f00 	teq	ip, #0
   ddb52:	bf18      	it	ne
   ddb54:	f04e 0e01 	orrne.w	lr, lr, #1
   ddb58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ddb5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ddb60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ddb64:	d204      	bcs.n	ddb70 <__aeabi_dmul+0x80>
   ddb66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ddb6a:	416d      	adcs	r5, r5
   ddb6c:	eb46 0606 	adc.w	r6, r6, r6
   ddb70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ddb74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ddb78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ddb7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ddb80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ddb84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ddb88:	bf88      	it	hi
   ddb8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ddb8e:	d81e      	bhi.n	ddbce <__aeabi_dmul+0xde>
   ddb90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ddb94:	bf08      	it	eq
   ddb96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ddb9a:	f150 0000 	adcs.w	r0, r0, #0
   ddb9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ddba2:	bd70      	pop	{r4, r5, r6, pc}
   ddba4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ddba8:	ea46 0101 	orr.w	r1, r6, r1
   ddbac:	ea40 0002 	orr.w	r0, r0, r2
   ddbb0:	ea81 0103 	eor.w	r1, r1, r3
   ddbb4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ddbb8:	bfc2      	ittt	gt
   ddbba:	ebd4 050c 	rsbsgt	r5, r4, ip
   ddbbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ddbc2:	bd70      	popgt	{r4, r5, r6, pc}
   ddbc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ddbc8:	f04f 0e00 	mov.w	lr, #0
   ddbcc:	3c01      	subs	r4, #1
   ddbce:	f300 80ab 	bgt.w	ddd28 <__aeabi_dmul+0x238>
   ddbd2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ddbd6:	bfde      	ittt	le
   ddbd8:	2000      	movle	r0, #0
   ddbda:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ddbde:	bd70      	pople	{r4, r5, r6, pc}
   ddbe0:	f1c4 0400 	rsb	r4, r4, #0
   ddbe4:	3c20      	subs	r4, #32
   ddbe6:	da35      	bge.n	ddc54 <__aeabi_dmul+0x164>
   ddbe8:	340c      	adds	r4, #12
   ddbea:	dc1b      	bgt.n	ddc24 <__aeabi_dmul+0x134>
   ddbec:	f104 0414 	add.w	r4, r4, #20
   ddbf0:	f1c4 0520 	rsb	r5, r4, #32
   ddbf4:	fa00 f305 	lsl.w	r3, r0, r5
   ddbf8:	fa20 f004 	lsr.w	r0, r0, r4
   ddbfc:	fa01 f205 	lsl.w	r2, r1, r5
   ddc00:	ea40 0002 	orr.w	r0, r0, r2
   ddc04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ddc08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ddc0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ddc10:	fa21 f604 	lsr.w	r6, r1, r4
   ddc14:	eb42 0106 	adc.w	r1, r2, r6
   ddc18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ddc1c:	bf08      	it	eq
   ddc1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ddc22:	bd70      	pop	{r4, r5, r6, pc}
   ddc24:	f1c4 040c 	rsb	r4, r4, #12
   ddc28:	f1c4 0520 	rsb	r5, r4, #32
   ddc2c:	fa00 f304 	lsl.w	r3, r0, r4
   ddc30:	fa20 f005 	lsr.w	r0, r0, r5
   ddc34:	fa01 f204 	lsl.w	r2, r1, r4
   ddc38:	ea40 0002 	orr.w	r0, r0, r2
   ddc3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ddc40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ddc44:	f141 0100 	adc.w	r1, r1, #0
   ddc48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ddc4c:	bf08      	it	eq
   ddc4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ddc52:	bd70      	pop	{r4, r5, r6, pc}
   ddc54:	f1c4 0520 	rsb	r5, r4, #32
   ddc58:	fa00 f205 	lsl.w	r2, r0, r5
   ddc5c:	ea4e 0e02 	orr.w	lr, lr, r2
   ddc60:	fa20 f304 	lsr.w	r3, r0, r4
   ddc64:	fa01 f205 	lsl.w	r2, r1, r5
   ddc68:	ea43 0302 	orr.w	r3, r3, r2
   ddc6c:	fa21 f004 	lsr.w	r0, r1, r4
   ddc70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ddc74:	fa21 f204 	lsr.w	r2, r1, r4
   ddc78:	ea20 0002 	bic.w	r0, r0, r2
   ddc7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ddc80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ddc84:	bf08      	it	eq
   ddc86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ddc8a:	bd70      	pop	{r4, r5, r6, pc}
   ddc8c:	f094 0f00 	teq	r4, #0
   ddc90:	d10f      	bne.n	ddcb2 <__aeabi_dmul+0x1c2>
   ddc92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ddc96:	0040      	lsls	r0, r0, #1
   ddc98:	eb41 0101 	adc.w	r1, r1, r1
   ddc9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ddca0:	bf08      	it	eq
   ddca2:	3c01      	subeq	r4, #1
   ddca4:	d0f7      	beq.n	ddc96 <__aeabi_dmul+0x1a6>
   ddca6:	ea41 0106 	orr.w	r1, r1, r6
   ddcaa:	f095 0f00 	teq	r5, #0
   ddcae:	bf18      	it	ne
   ddcb0:	4770      	bxne	lr
   ddcb2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ddcb6:	0052      	lsls	r2, r2, #1
   ddcb8:	eb43 0303 	adc.w	r3, r3, r3
   ddcbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ddcc0:	bf08      	it	eq
   ddcc2:	3d01      	subeq	r5, #1
   ddcc4:	d0f7      	beq.n	ddcb6 <__aeabi_dmul+0x1c6>
   ddcc6:	ea43 0306 	orr.w	r3, r3, r6
   ddcca:	4770      	bx	lr
   ddccc:	ea94 0f0c 	teq	r4, ip
   ddcd0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ddcd4:	bf18      	it	ne
   ddcd6:	ea95 0f0c 	teqne	r5, ip
   ddcda:	d00c      	beq.n	ddcf6 <__aeabi_dmul+0x206>
   ddcdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ddce0:	bf18      	it	ne
   ddce2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ddce6:	d1d1      	bne.n	ddc8c <__aeabi_dmul+0x19c>
   ddce8:	ea81 0103 	eor.w	r1, r1, r3
   ddcec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ddcf0:	f04f 0000 	mov.w	r0, #0
   ddcf4:	bd70      	pop	{r4, r5, r6, pc}
   ddcf6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ddcfa:	bf06      	itte	eq
   ddcfc:	4610      	moveq	r0, r2
   ddcfe:	4619      	moveq	r1, r3
   ddd00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ddd04:	d019      	beq.n	ddd3a <__aeabi_dmul+0x24a>
   ddd06:	ea94 0f0c 	teq	r4, ip
   ddd0a:	d102      	bne.n	ddd12 <__aeabi_dmul+0x222>
   ddd0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ddd10:	d113      	bne.n	ddd3a <__aeabi_dmul+0x24a>
   ddd12:	ea95 0f0c 	teq	r5, ip
   ddd16:	d105      	bne.n	ddd24 <__aeabi_dmul+0x234>
   ddd18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   ddd1c:	bf1c      	itt	ne
   ddd1e:	4610      	movne	r0, r2
   ddd20:	4619      	movne	r1, r3
   ddd22:	d10a      	bne.n	ddd3a <__aeabi_dmul+0x24a>
   ddd24:	ea81 0103 	eor.w	r1, r1, r3
   ddd28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ddd2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ddd30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ddd34:	f04f 0000 	mov.w	r0, #0
   ddd38:	bd70      	pop	{r4, r5, r6, pc}
   ddd3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ddd3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   ddd42:	bd70      	pop	{r4, r5, r6, pc}

000ddd44 <__aeabi_ddiv>:
   ddd44:	b570      	push	{r4, r5, r6, lr}
   ddd46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ddd4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ddd4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ddd52:	bf1d      	ittte	ne
   ddd54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ddd58:	ea94 0f0c 	teqne	r4, ip
   ddd5c:	ea95 0f0c 	teqne	r5, ip
   ddd60:	f000 f8a7 	bleq	ddeb2 <__aeabi_ddiv+0x16e>
   ddd64:	eba4 0405 	sub.w	r4, r4, r5
   ddd68:	ea81 0e03 	eor.w	lr, r1, r3
   ddd6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ddd70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ddd74:	f000 8088 	beq.w	dde88 <__aeabi_ddiv+0x144>
   ddd78:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ddd7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   ddd80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   ddd84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   ddd88:	ea4f 2202 	mov.w	r2, r2, lsl #8
   ddd8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   ddd90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   ddd94:	ea4f 2600 	mov.w	r6, r0, lsl #8
   ddd98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   ddd9c:	429d      	cmp	r5, r3
   ddd9e:	bf08      	it	eq
   ddda0:	4296      	cmpeq	r6, r2
   ddda2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   ddda6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dddaa:	d202      	bcs.n	dddb2 <__aeabi_ddiv+0x6e>
   dddac:	085b      	lsrs	r3, r3, #1
   dddae:	ea4f 0232 	mov.w	r2, r2, rrx
   dddb2:	1ab6      	subs	r6, r6, r2
   dddb4:	eb65 0503 	sbc.w	r5, r5, r3
   dddb8:	085b      	lsrs	r3, r3, #1
   dddba:	ea4f 0232 	mov.w	r2, r2, rrx
   dddbe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dddc2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dddc6:	ebb6 0e02 	subs.w	lr, r6, r2
   dddca:	eb75 0e03 	sbcs.w	lr, r5, r3
   dddce:	bf22      	ittt	cs
   dddd0:	1ab6      	subcs	r6, r6, r2
   dddd2:	4675      	movcs	r5, lr
   dddd4:	ea40 000c 	orrcs.w	r0, r0, ip
   dddd8:	085b      	lsrs	r3, r3, #1
   dddda:	ea4f 0232 	mov.w	r2, r2, rrx
   dddde:	ebb6 0e02 	subs.w	lr, r6, r2
   ddde2:	eb75 0e03 	sbcs.w	lr, r5, r3
   ddde6:	bf22      	ittt	cs
   ddde8:	1ab6      	subcs	r6, r6, r2
   dddea:	4675      	movcs	r5, lr
   dddec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dddf0:	085b      	lsrs	r3, r3, #1
   dddf2:	ea4f 0232 	mov.w	r2, r2, rrx
   dddf6:	ebb6 0e02 	subs.w	lr, r6, r2
   dddfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   dddfe:	bf22      	ittt	cs
   dde00:	1ab6      	subcs	r6, r6, r2
   dde02:	4675      	movcs	r5, lr
   dde04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dde08:	085b      	lsrs	r3, r3, #1
   dde0a:	ea4f 0232 	mov.w	r2, r2, rrx
   dde0e:	ebb6 0e02 	subs.w	lr, r6, r2
   dde12:	eb75 0e03 	sbcs.w	lr, r5, r3
   dde16:	bf22      	ittt	cs
   dde18:	1ab6      	subcs	r6, r6, r2
   dde1a:	4675      	movcs	r5, lr
   dde1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dde20:	ea55 0e06 	orrs.w	lr, r5, r6
   dde24:	d018      	beq.n	dde58 <__aeabi_ddiv+0x114>
   dde26:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dde2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dde2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dde32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dde36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dde3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dde3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dde42:	d1c0      	bne.n	dddc6 <__aeabi_ddiv+0x82>
   dde44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dde48:	d10b      	bne.n	dde62 <__aeabi_ddiv+0x11e>
   dde4a:	ea41 0100 	orr.w	r1, r1, r0
   dde4e:	f04f 0000 	mov.w	r0, #0
   dde52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dde56:	e7b6      	b.n	dddc6 <__aeabi_ddiv+0x82>
   dde58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dde5c:	bf04      	itt	eq
   dde5e:	4301      	orreq	r1, r0
   dde60:	2000      	moveq	r0, #0
   dde62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dde66:	bf88      	it	hi
   dde68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dde6c:	f63f aeaf 	bhi.w	ddbce <__aeabi_dmul+0xde>
   dde70:	ebb5 0c03 	subs.w	ip, r5, r3
   dde74:	bf04      	itt	eq
   dde76:	ebb6 0c02 	subseq.w	ip, r6, r2
   dde7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dde7e:	f150 0000 	adcs.w	r0, r0, #0
   dde82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dde86:	bd70      	pop	{r4, r5, r6, pc}
   dde88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dde8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dde90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dde94:	bfc2      	ittt	gt
   dde96:	ebd4 050c 	rsbsgt	r5, r4, ip
   dde9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dde9e:	bd70      	popgt	{r4, r5, r6, pc}
   ddea0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ddea4:	f04f 0e00 	mov.w	lr, #0
   ddea8:	3c01      	subs	r4, #1
   ddeaa:	e690      	b.n	ddbce <__aeabi_dmul+0xde>
   ddeac:	ea45 0e06 	orr.w	lr, r5, r6
   ddeb0:	e68d      	b.n	ddbce <__aeabi_dmul+0xde>
   ddeb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ddeb6:	ea94 0f0c 	teq	r4, ip
   ddeba:	bf08      	it	eq
   ddebc:	ea95 0f0c 	teqeq	r5, ip
   ddec0:	f43f af3b 	beq.w	ddd3a <__aeabi_dmul+0x24a>
   ddec4:	ea94 0f0c 	teq	r4, ip
   ddec8:	d10a      	bne.n	ddee0 <__aeabi_ddiv+0x19c>
   ddeca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ddece:	f47f af34 	bne.w	ddd3a <__aeabi_dmul+0x24a>
   dded2:	ea95 0f0c 	teq	r5, ip
   dded6:	f47f af25 	bne.w	ddd24 <__aeabi_dmul+0x234>
   ddeda:	4610      	mov	r0, r2
   ddedc:	4619      	mov	r1, r3
   ddede:	e72c      	b.n	ddd3a <__aeabi_dmul+0x24a>
   ddee0:	ea95 0f0c 	teq	r5, ip
   ddee4:	d106      	bne.n	ddef4 <__aeabi_ddiv+0x1b0>
   ddee6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ddeea:	f43f aefd 	beq.w	ddce8 <__aeabi_dmul+0x1f8>
   ddeee:	4610      	mov	r0, r2
   ddef0:	4619      	mov	r1, r3
   ddef2:	e722      	b.n	ddd3a <__aeabi_dmul+0x24a>
   ddef4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ddef8:	bf18      	it	ne
   ddefa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ddefe:	f47f aec5 	bne.w	ddc8c <__aeabi_dmul+0x19c>
   ddf02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ddf06:	f47f af0d 	bne.w	ddd24 <__aeabi_dmul+0x234>
   ddf0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ddf0e:	f47f aeeb 	bne.w	ddce8 <__aeabi_dmul+0x1f8>
   ddf12:	e712      	b.n	ddd3a <__aeabi_dmul+0x24a>

000ddf14 <__gedf2>:
   ddf14:	f04f 3cff 	mov.w	ip, #4294967295
   ddf18:	e006      	b.n	ddf28 <__cmpdf2+0x4>
   ddf1a:	bf00      	nop

000ddf1c <__ledf2>:
   ddf1c:	f04f 0c01 	mov.w	ip, #1
   ddf20:	e002      	b.n	ddf28 <__cmpdf2+0x4>
   ddf22:	bf00      	nop

000ddf24 <__cmpdf2>:
   ddf24:	f04f 0c01 	mov.w	ip, #1
   ddf28:	f84d cd04 	str.w	ip, [sp, #-4]!
   ddf2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ddf30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ddf34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ddf38:	bf18      	it	ne
   ddf3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ddf3e:	d01b      	beq.n	ddf78 <__cmpdf2+0x54>
   ddf40:	b001      	add	sp, #4
   ddf42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ddf46:	bf0c      	ite	eq
   ddf48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ddf4c:	ea91 0f03 	teqne	r1, r3
   ddf50:	bf02      	ittt	eq
   ddf52:	ea90 0f02 	teqeq	r0, r2
   ddf56:	2000      	moveq	r0, #0
   ddf58:	4770      	bxeq	lr
   ddf5a:	f110 0f00 	cmn.w	r0, #0
   ddf5e:	ea91 0f03 	teq	r1, r3
   ddf62:	bf58      	it	pl
   ddf64:	4299      	cmppl	r1, r3
   ddf66:	bf08      	it	eq
   ddf68:	4290      	cmpeq	r0, r2
   ddf6a:	bf2c      	ite	cs
   ddf6c:	17d8      	asrcs	r0, r3, #31
   ddf6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ddf72:	f040 0001 	orr.w	r0, r0, #1
   ddf76:	4770      	bx	lr
   ddf78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ddf7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ddf80:	d102      	bne.n	ddf88 <__cmpdf2+0x64>
   ddf82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ddf86:	d107      	bne.n	ddf98 <__cmpdf2+0x74>
   ddf88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ddf8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ddf90:	d1d6      	bne.n	ddf40 <__cmpdf2+0x1c>
   ddf92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ddf96:	d0d3      	beq.n	ddf40 <__cmpdf2+0x1c>
   ddf98:	f85d 0b04 	ldr.w	r0, [sp], #4
   ddf9c:	4770      	bx	lr
   ddf9e:	bf00      	nop

000ddfa0 <__aeabi_cdrcmple>:
   ddfa0:	4684      	mov	ip, r0
   ddfa2:	4610      	mov	r0, r2
   ddfa4:	4662      	mov	r2, ip
   ddfa6:	468c      	mov	ip, r1
   ddfa8:	4619      	mov	r1, r3
   ddfaa:	4663      	mov	r3, ip
   ddfac:	e000      	b.n	ddfb0 <__aeabi_cdcmpeq>
   ddfae:	bf00      	nop

000ddfb0 <__aeabi_cdcmpeq>:
   ddfb0:	b501      	push	{r0, lr}
   ddfb2:	f7ff ffb7 	bl	ddf24 <__cmpdf2>
   ddfb6:	2800      	cmp	r0, #0
   ddfb8:	bf48      	it	mi
   ddfba:	f110 0f00 	cmnmi.w	r0, #0
   ddfbe:	bd01      	pop	{r0, pc}

000ddfc0 <__aeabi_dcmpeq>:
   ddfc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   ddfc4:	f7ff fff4 	bl	ddfb0 <__aeabi_cdcmpeq>
   ddfc8:	bf0c      	ite	eq
   ddfca:	2001      	moveq	r0, #1
   ddfcc:	2000      	movne	r0, #0
   ddfce:	f85d fb08 	ldr.w	pc, [sp], #8
   ddfd2:	bf00      	nop

000ddfd4 <__aeabi_dcmplt>:
   ddfd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   ddfd8:	f7ff ffea 	bl	ddfb0 <__aeabi_cdcmpeq>
   ddfdc:	bf34      	ite	cc
   ddfde:	2001      	movcc	r0, #1
   ddfe0:	2000      	movcs	r0, #0
   ddfe2:	f85d fb08 	ldr.w	pc, [sp], #8
   ddfe6:	bf00      	nop

000ddfe8 <__aeabi_dcmple>:
   ddfe8:	f84d ed08 	str.w	lr, [sp, #-8]!
   ddfec:	f7ff ffe0 	bl	ddfb0 <__aeabi_cdcmpeq>
   ddff0:	bf94      	ite	ls
   ddff2:	2001      	movls	r0, #1
   ddff4:	2000      	movhi	r0, #0
   ddff6:	f85d fb08 	ldr.w	pc, [sp], #8
   ddffa:	bf00      	nop

000ddffc <__aeabi_dcmpge>:
   ddffc:	f84d ed08 	str.w	lr, [sp, #-8]!
   de000:	f7ff ffce 	bl	ddfa0 <__aeabi_cdrcmple>
   de004:	bf94      	ite	ls
   de006:	2001      	movls	r0, #1
   de008:	2000      	movhi	r0, #0
   de00a:	f85d fb08 	ldr.w	pc, [sp], #8
   de00e:	bf00      	nop

000de010 <__aeabi_dcmpgt>:
   de010:	f84d ed08 	str.w	lr, [sp, #-8]!
   de014:	f7ff ffc4 	bl	ddfa0 <__aeabi_cdrcmple>
   de018:	bf34      	ite	cc
   de01a:	2001      	movcc	r0, #1
   de01c:	2000      	movcs	r0, #0
   de01e:	f85d fb08 	ldr.w	pc, [sp], #8
   de022:	bf00      	nop

000de024 <__aeabi_dcmpun>:
   de024:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   de028:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   de02c:	d102      	bne.n	de034 <__aeabi_dcmpun+0x10>
   de02e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   de032:	d10a      	bne.n	de04a <__aeabi_dcmpun+0x26>
   de034:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   de038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   de03c:	d102      	bne.n	de044 <__aeabi_dcmpun+0x20>
   de03e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   de042:	d102      	bne.n	de04a <__aeabi_dcmpun+0x26>
   de044:	f04f 0000 	mov.w	r0, #0
   de048:	4770      	bx	lr
   de04a:	f04f 0001 	mov.w	r0, #1
   de04e:	4770      	bx	lr

000de050 <__aeabi_d2iz>:
   de050:	ea4f 0241 	mov.w	r2, r1, lsl #1
   de054:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   de058:	d215      	bcs.n	de086 <__aeabi_d2iz+0x36>
   de05a:	d511      	bpl.n	de080 <__aeabi_d2iz+0x30>
   de05c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   de060:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   de064:	d912      	bls.n	de08c <__aeabi_d2iz+0x3c>
   de066:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de06a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   de06e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   de072:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   de076:	fa23 f002 	lsr.w	r0, r3, r2
   de07a:	bf18      	it	ne
   de07c:	4240      	negne	r0, r0
   de07e:	4770      	bx	lr
   de080:	f04f 0000 	mov.w	r0, #0
   de084:	4770      	bx	lr
   de086:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   de08a:	d105      	bne.n	de098 <__aeabi_d2iz+0x48>
   de08c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   de090:	bf08      	it	eq
   de092:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   de096:	4770      	bx	lr
   de098:	f04f 0000 	mov.w	r0, #0
   de09c:	4770      	bx	lr
   de09e:	bf00      	nop

000de0a0 <__aeabi_d2uiz>:
   de0a0:	004a      	lsls	r2, r1, #1
   de0a2:	d211      	bcs.n	de0c8 <__aeabi_d2uiz+0x28>
   de0a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   de0a8:	d211      	bcs.n	de0ce <__aeabi_d2uiz+0x2e>
   de0aa:	d50d      	bpl.n	de0c8 <__aeabi_d2uiz+0x28>
   de0ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   de0b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   de0b4:	d40e      	bmi.n	de0d4 <__aeabi_d2uiz+0x34>
   de0b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de0ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   de0be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   de0c2:	fa23 f002 	lsr.w	r0, r3, r2
   de0c6:	4770      	bx	lr
   de0c8:	f04f 0000 	mov.w	r0, #0
   de0cc:	4770      	bx	lr
   de0ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   de0d2:	d102      	bne.n	de0da <__aeabi_d2uiz+0x3a>
   de0d4:	f04f 30ff 	mov.w	r0, #4294967295
   de0d8:	4770      	bx	lr
   de0da:	f04f 0000 	mov.w	r0, #0
   de0de:	4770      	bx	lr

000de0e0 <__aeabi_d2f>:
   de0e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   de0e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   de0e8:	bf24      	itt	cs
   de0ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   de0ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   de0f2:	d90d      	bls.n	de110 <__aeabi_d2f+0x30>
   de0f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   de0f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   de0fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   de100:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   de104:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   de108:	bf08      	it	eq
   de10a:	f020 0001 	biceq.w	r0, r0, #1
   de10e:	4770      	bx	lr
   de110:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   de114:	d121      	bne.n	de15a <__aeabi_d2f+0x7a>
   de116:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   de11a:	bfbc      	itt	lt
   de11c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   de120:	4770      	bxlt	lr
   de122:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   de126:	ea4f 5252 	mov.w	r2, r2, lsr #21
   de12a:	f1c2 0218 	rsb	r2, r2, #24
   de12e:	f1c2 0c20 	rsb	ip, r2, #32
   de132:	fa10 f30c 	lsls.w	r3, r0, ip
   de136:	fa20 f002 	lsr.w	r0, r0, r2
   de13a:	bf18      	it	ne
   de13c:	f040 0001 	orrne.w	r0, r0, #1
   de140:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   de144:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   de148:	fa03 fc0c 	lsl.w	ip, r3, ip
   de14c:	ea40 000c 	orr.w	r0, r0, ip
   de150:	fa23 f302 	lsr.w	r3, r3, r2
   de154:	ea4f 0343 	mov.w	r3, r3, lsl #1
   de158:	e7cc      	b.n	de0f4 <__aeabi_d2f+0x14>
   de15a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   de15e:	d107      	bne.n	de170 <__aeabi_d2f+0x90>
   de160:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   de164:	bf1e      	ittt	ne
   de166:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   de16a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   de16e:	4770      	bxne	lr
   de170:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   de174:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   de178:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   de17c:	4770      	bx	lr
   de17e:	bf00      	nop

000de180 <__aeabi_uldivmod>:
   de180:	b953      	cbnz	r3, de198 <__aeabi_uldivmod+0x18>
   de182:	b94a      	cbnz	r2, de198 <__aeabi_uldivmod+0x18>
   de184:	2900      	cmp	r1, #0
   de186:	bf08      	it	eq
   de188:	2800      	cmpeq	r0, #0
   de18a:	bf1c      	itt	ne
   de18c:	f04f 31ff 	movne.w	r1, #4294967295
   de190:	f04f 30ff 	movne.w	r0, #4294967295
   de194:	f000 b9a2 	b.w	de4dc <__aeabi_idiv0>
   de198:	f1ad 0c08 	sub.w	ip, sp, #8
   de19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   de1a0:	f000 f82a 	bl	de1f8 <__udivmoddi4>
   de1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
   de1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   de1ac:	b004      	add	sp, #16
   de1ae:	4770      	bx	lr

000de1b0 <__aeabi_d2ulz>:
   de1b0:	b5d0      	push	{r4, r6, r7, lr}
   de1b2:	2200      	movs	r2, #0
   de1b4:	4b0e      	ldr	r3, [pc, #56]	; (de1f0 <__aeabi_d2ulz+0x40>)
   de1b6:	4606      	mov	r6, r0
   de1b8:	460f      	mov	r7, r1
   de1ba:	f7ff fc99 	bl	ddaf0 <__aeabi_dmul>
   de1be:	f7ff ff6f 	bl	de0a0 <__aeabi_d2uiz>
   de1c2:	4604      	mov	r4, r0
   de1c4:	f7ff fc1e 	bl	dda04 <__aeabi_ui2d>
   de1c8:	2200      	movs	r2, #0
   de1ca:	4b0a      	ldr	r3, [pc, #40]	; (de1f4 <__aeabi_d2ulz+0x44>)
   de1cc:	f7ff fc90 	bl	ddaf0 <__aeabi_dmul>
   de1d0:	4602      	mov	r2, r0
   de1d2:	460b      	mov	r3, r1
   de1d4:	4630      	mov	r0, r6
   de1d6:	4639      	mov	r1, r7
   de1d8:	f7ff fad6 	bl	dd788 <__aeabi_dsub>
   de1dc:	f7ff ff60 	bl	de0a0 <__aeabi_d2uiz>
   de1e0:	4623      	mov	r3, r4
   de1e2:	2200      	movs	r2, #0
   de1e4:	ea42 0200 	orr.w	r2, r2, r0
   de1e8:	4610      	mov	r0, r2
   de1ea:	4619      	mov	r1, r3
   de1ec:	bdd0      	pop	{r4, r6, r7, pc}
   de1ee:	bf00      	nop
   de1f0:	3df00000 	.word	0x3df00000
   de1f4:	41f00000 	.word	0x41f00000

000de1f8 <__udivmoddi4>:
   de1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de1fc:	468c      	mov	ip, r1
   de1fe:	460e      	mov	r6, r1
   de200:	4604      	mov	r4, r0
   de202:	9d08      	ldr	r5, [sp, #32]
   de204:	2b00      	cmp	r3, #0
   de206:	d150      	bne.n	de2aa <__udivmoddi4+0xb2>
   de208:	428a      	cmp	r2, r1
   de20a:	4617      	mov	r7, r2
   de20c:	d96c      	bls.n	de2e8 <__udivmoddi4+0xf0>
   de20e:	fab2 fe82 	clz	lr, r2
   de212:	f1be 0f00 	cmp.w	lr, #0
   de216:	d00b      	beq.n	de230 <__udivmoddi4+0x38>
   de218:	f1ce 0420 	rsb	r4, lr, #32
   de21c:	fa20 f404 	lsr.w	r4, r0, r4
   de220:	fa01 f60e 	lsl.w	r6, r1, lr
   de224:	ea44 0c06 	orr.w	ip, r4, r6
   de228:	fa02 f70e 	lsl.w	r7, r2, lr
   de22c:	fa00 f40e 	lsl.w	r4, r0, lr
   de230:	ea4f 4917 	mov.w	r9, r7, lsr #16
   de234:	0c22      	lsrs	r2, r4, #16
   de236:	fbbc f0f9 	udiv	r0, ip, r9
   de23a:	fa1f f887 	uxth.w	r8, r7
   de23e:	fb09 c610 	mls	r6, r9, r0, ip
   de242:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   de246:	fb00 f308 	mul.w	r3, r0, r8
   de24a:	42b3      	cmp	r3, r6
   de24c:	d909      	bls.n	de262 <__udivmoddi4+0x6a>
   de24e:	19f6      	adds	r6, r6, r7
   de250:	f100 32ff 	add.w	r2, r0, #4294967295
   de254:	f080 8122 	bcs.w	de49c <__udivmoddi4+0x2a4>
   de258:	42b3      	cmp	r3, r6
   de25a:	f240 811f 	bls.w	de49c <__udivmoddi4+0x2a4>
   de25e:	3802      	subs	r0, #2
   de260:	443e      	add	r6, r7
   de262:	1af6      	subs	r6, r6, r3
   de264:	b2a2      	uxth	r2, r4
   de266:	fbb6 f3f9 	udiv	r3, r6, r9
   de26a:	fb09 6613 	mls	r6, r9, r3, r6
   de26e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   de272:	fb03 f808 	mul.w	r8, r3, r8
   de276:	45a0      	cmp	r8, r4
   de278:	d909      	bls.n	de28e <__udivmoddi4+0x96>
   de27a:	19e4      	adds	r4, r4, r7
   de27c:	f103 32ff 	add.w	r2, r3, #4294967295
   de280:	f080 810a 	bcs.w	de498 <__udivmoddi4+0x2a0>
   de284:	45a0      	cmp	r8, r4
   de286:	f240 8107 	bls.w	de498 <__udivmoddi4+0x2a0>
   de28a:	3b02      	subs	r3, #2
   de28c:	443c      	add	r4, r7
   de28e:	ebc8 0404 	rsb	r4, r8, r4
   de292:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   de296:	2100      	movs	r1, #0
   de298:	2d00      	cmp	r5, #0
   de29a:	d062      	beq.n	de362 <__udivmoddi4+0x16a>
   de29c:	fa24 f40e 	lsr.w	r4, r4, lr
   de2a0:	2300      	movs	r3, #0
   de2a2:	602c      	str	r4, [r5, #0]
   de2a4:	606b      	str	r3, [r5, #4]
   de2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de2aa:	428b      	cmp	r3, r1
   de2ac:	d907      	bls.n	de2be <__udivmoddi4+0xc6>
   de2ae:	2d00      	cmp	r5, #0
   de2b0:	d055      	beq.n	de35e <__udivmoddi4+0x166>
   de2b2:	2100      	movs	r1, #0
   de2b4:	e885 0041 	stmia.w	r5, {r0, r6}
   de2b8:	4608      	mov	r0, r1
   de2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de2be:	fab3 f183 	clz	r1, r3
   de2c2:	2900      	cmp	r1, #0
   de2c4:	f040 8090 	bne.w	de3e8 <__udivmoddi4+0x1f0>
   de2c8:	42b3      	cmp	r3, r6
   de2ca:	d302      	bcc.n	de2d2 <__udivmoddi4+0xda>
   de2cc:	4282      	cmp	r2, r0
   de2ce:	f200 80f8 	bhi.w	de4c2 <__udivmoddi4+0x2ca>
   de2d2:	1a84      	subs	r4, r0, r2
   de2d4:	eb66 0603 	sbc.w	r6, r6, r3
   de2d8:	2001      	movs	r0, #1
   de2da:	46b4      	mov	ip, r6
   de2dc:	2d00      	cmp	r5, #0
   de2de:	d040      	beq.n	de362 <__udivmoddi4+0x16a>
   de2e0:	e885 1010 	stmia.w	r5, {r4, ip}
   de2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de2e8:	b912      	cbnz	r2, de2f0 <__udivmoddi4+0xf8>
   de2ea:	2701      	movs	r7, #1
   de2ec:	fbb7 f7f2 	udiv	r7, r7, r2
   de2f0:	fab7 fe87 	clz	lr, r7
   de2f4:	f1be 0f00 	cmp.w	lr, #0
   de2f8:	d135      	bne.n	de366 <__udivmoddi4+0x16e>
   de2fa:	1bf3      	subs	r3, r6, r7
   de2fc:	ea4f 4817 	mov.w	r8, r7, lsr #16
   de300:	fa1f fc87 	uxth.w	ip, r7
   de304:	2101      	movs	r1, #1
   de306:	fbb3 f0f8 	udiv	r0, r3, r8
   de30a:	0c22      	lsrs	r2, r4, #16
   de30c:	fb08 3610 	mls	r6, r8, r0, r3
   de310:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   de314:	fb0c f300 	mul.w	r3, ip, r0
   de318:	42b3      	cmp	r3, r6
   de31a:	d907      	bls.n	de32c <__udivmoddi4+0x134>
   de31c:	19f6      	adds	r6, r6, r7
   de31e:	f100 32ff 	add.w	r2, r0, #4294967295
   de322:	d202      	bcs.n	de32a <__udivmoddi4+0x132>
   de324:	42b3      	cmp	r3, r6
   de326:	f200 80ce 	bhi.w	de4c6 <__udivmoddi4+0x2ce>
   de32a:	4610      	mov	r0, r2
   de32c:	1af6      	subs	r6, r6, r3
   de32e:	b2a2      	uxth	r2, r4
   de330:	fbb6 f3f8 	udiv	r3, r6, r8
   de334:	fb08 6613 	mls	r6, r8, r3, r6
   de338:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   de33c:	fb0c fc03 	mul.w	ip, ip, r3
   de340:	45a4      	cmp	ip, r4
   de342:	d907      	bls.n	de354 <__udivmoddi4+0x15c>
   de344:	19e4      	adds	r4, r4, r7
   de346:	f103 32ff 	add.w	r2, r3, #4294967295
   de34a:	d202      	bcs.n	de352 <__udivmoddi4+0x15a>
   de34c:	45a4      	cmp	ip, r4
   de34e:	f200 80b5 	bhi.w	de4bc <__udivmoddi4+0x2c4>
   de352:	4613      	mov	r3, r2
   de354:	ebcc 0404 	rsb	r4, ip, r4
   de358:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   de35c:	e79c      	b.n	de298 <__udivmoddi4+0xa0>
   de35e:	4629      	mov	r1, r5
   de360:	4628      	mov	r0, r5
   de362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de366:	f1ce 0120 	rsb	r1, lr, #32
   de36a:	fa06 f30e 	lsl.w	r3, r6, lr
   de36e:	fa07 f70e 	lsl.w	r7, r7, lr
   de372:	fa20 f901 	lsr.w	r9, r0, r1
   de376:	ea4f 4817 	mov.w	r8, r7, lsr #16
   de37a:	40ce      	lsrs	r6, r1
   de37c:	ea49 0903 	orr.w	r9, r9, r3
   de380:	fbb6 faf8 	udiv	sl, r6, r8
   de384:	ea4f 4419 	mov.w	r4, r9, lsr #16
   de388:	fb08 661a 	mls	r6, r8, sl, r6
   de38c:	fa1f fc87 	uxth.w	ip, r7
   de390:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   de394:	fb0a f20c 	mul.w	r2, sl, ip
   de398:	429a      	cmp	r2, r3
   de39a:	fa00 f40e 	lsl.w	r4, r0, lr
   de39e:	d90a      	bls.n	de3b6 <__udivmoddi4+0x1be>
   de3a0:	19db      	adds	r3, r3, r7
   de3a2:	f10a 31ff 	add.w	r1, sl, #4294967295
   de3a6:	f080 8087 	bcs.w	de4b8 <__udivmoddi4+0x2c0>
   de3aa:	429a      	cmp	r2, r3
   de3ac:	f240 8084 	bls.w	de4b8 <__udivmoddi4+0x2c0>
   de3b0:	f1aa 0a02 	sub.w	sl, sl, #2
   de3b4:	443b      	add	r3, r7
   de3b6:	1a9b      	subs	r3, r3, r2
   de3b8:	fa1f f989 	uxth.w	r9, r9
   de3bc:	fbb3 f1f8 	udiv	r1, r3, r8
   de3c0:	fb08 3311 	mls	r3, r8, r1, r3
   de3c4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   de3c8:	fb01 f60c 	mul.w	r6, r1, ip
   de3cc:	429e      	cmp	r6, r3
   de3ce:	d907      	bls.n	de3e0 <__udivmoddi4+0x1e8>
   de3d0:	19db      	adds	r3, r3, r7
   de3d2:	f101 32ff 	add.w	r2, r1, #4294967295
   de3d6:	d26b      	bcs.n	de4b0 <__udivmoddi4+0x2b8>
   de3d8:	429e      	cmp	r6, r3
   de3da:	d969      	bls.n	de4b0 <__udivmoddi4+0x2b8>
   de3dc:	3902      	subs	r1, #2
   de3de:	443b      	add	r3, r7
   de3e0:	1b9b      	subs	r3, r3, r6
   de3e2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   de3e6:	e78e      	b.n	de306 <__udivmoddi4+0x10e>
   de3e8:	f1c1 0e20 	rsb	lr, r1, #32
   de3ec:	fa22 f40e 	lsr.w	r4, r2, lr
   de3f0:	408b      	lsls	r3, r1
   de3f2:	4323      	orrs	r3, r4
   de3f4:	fa20 f70e 	lsr.w	r7, r0, lr
   de3f8:	fa06 f401 	lsl.w	r4, r6, r1
   de3fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   de400:	fa26 f60e 	lsr.w	r6, r6, lr
   de404:	433c      	orrs	r4, r7
   de406:	fbb6 f9fc 	udiv	r9, r6, ip
   de40a:	0c27      	lsrs	r7, r4, #16
   de40c:	fb0c 6619 	mls	r6, ip, r9, r6
   de410:	fa1f f883 	uxth.w	r8, r3
   de414:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   de418:	fb09 f708 	mul.w	r7, r9, r8
   de41c:	42b7      	cmp	r7, r6
   de41e:	fa02 f201 	lsl.w	r2, r2, r1
   de422:	fa00 fa01 	lsl.w	sl, r0, r1
   de426:	d908      	bls.n	de43a <__udivmoddi4+0x242>
   de428:	18f6      	adds	r6, r6, r3
   de42a:	f109 30ff 	add.w	r0, r9, #4294967295
   de42e:	d241      	bcs.n	de4b4 <__udivmoddi4+0x2bc>
   de430:	42b7      	cmp	r7, r6
   de432:	d93f      	bls.n	de4b4 <__udivmoddi4+0x2bc>
   de434:	f1a9 0902 	sub.w	r9, r9, #2
   de438:	441e      	add	r6, r3
   de43a:	1bf6      	subs	r6, r6, r7
   de43c:	b2a0      	uxth	r0, r4
   de43e:	fbb6 f4fc 	udiv	r4, r6, ip
   de442:	fb0c 6614 	mls	r6, ip, r4, r6
   de446:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   de44a:	fb04 f808 	mul.w	r8, r4, r8
   de44e:	45b8      	cmp	r8, r7
   de450:	d907      	bls.n	de462 <__udivmoddi4+0x26a>
   de452:	18ff      	adds	r7, r7, r3
   de454:	f104 30ff 	add.w	r0, r4, #4294967295
   de458:	d228      	bcs.n	de4ac <__udivmoddi4+0x2b4>
   de45a:	45b8      	cmp	r8, r7
   de45c:	d926      	bls.n	de4ac <__udivmoddi4+0x2b4>
   de45e:	3c02      	subs	r4, #2
   de460:	441f      	add	r7, r3
   de462:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   de466:	ebc8 0707 	rsb	r7, r8, r7
   de46a:	fba0 8902 	umull	r8, r9, r0, r2
   de46e:	454f      	cmp	r7, r9
   de470:	4644      	mov	r4, r8
   de472:	464e      	mov	r6, r9
   de474:	d314      	bcc.n	de4a0 <__udivmoddi4+0x2a8>
   de476:	d029      	beq.n	de4cc <__udivmoddi4+0x2d4>
   de478:	b365      	cbz	r5, de4d4 <__udivmoddi4+0x2dc>
   de47a:	ebba 0304 	subs.w	r3, sl, r4
   de47e:	eb67 0706 	sbc.w	r7, r7, r6
   de482:	fa07 fe0e 	lsl.w	lr, r7, lr
   de486:	40cb      	lsrs	r3, r1
   de488:	40cf      	lsrs	r7, r1
   de48a:	ea4e 0303 	orr.w	r3, lr, r3
   de48e:	e885 0088 	stmia.w	r5, {r3, r7}
   de492:	2100      	movs	r1, #0
   de494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de498:	4613      	mov	r3, r2
   de49a:	e6f8      	b.n	de28e <__udivmoddi4+0x96>
   de49c:	4610      	mov	r0, r2
   de49e:	e6e0      	b.n	de262 <__udivmoddi4+0x6a>
   de4a0:	ebb8 0402 	subs.w	r4, r8, r2
   de4a4:	eb69 0603 	sbc.w	r6, r9, r3
   de4a8:	3801      	subs	r0, #1
   de4aa:	e7e5      	b.n	de478 <__udivmoddi4+0x280>
   de4ac:	4604      	mov	r4, r0
   de4ae:	e7d8      	b.n	de462 <__udivmoddi4+0x26a>
   de4b0:	4611      	mov	r1, r2
   de4b2:	e795      	b.n	de3e0 <__udivmoddi4+0x1e8>
   de4b4:	4681      	mov	r9, r0
   de4b6:	e7c0      	b.n	de43a <__udivmoddi4+0x242>
   de4b8:	468a      	mov	sl, r1
   de4ba:	e77c      	b.n	de3b6 <__udivmoddi4+0x1be>
   de4bc:	3b02      	subs	r3, #2
   de4be:	443c      	add	r4, r7
   de4c0:	e748      	b.n	de354 <__udivmoddi4+0x15c>
   de4c2:	4608      	mov	r0, r1
   de4c4:	e70a      	b.n	de2dc <__udivmoddi4+0xe4>
   de4c6:	3802      	subs	r0, #2
   de4c8:	443e      	add	r6, r7
   de4ca:	e72f      	b.n	de32c <__udivmoddi4+0x134>
   de4cc:	45c2      	cmp	sl, r8
   de4ce:	d3e7      	bcc.n	de4a0 <__udivmoddi4+0x2a8>
   de4d0:	463e      	mov	r6, r7
   de4d2:	e7d1      	b.n	de478 <__udivmoddi4+0x280>
   de4d4:	4629      	mov	r1, r5
   de4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de4da:	bf00      	nop

000de4dc <__aeabi_idiv0>:
   de4dc:	4770      	bx	lr
   de4de:	bf00      	nop

000de4e0 <asctime>:
   de4e0:	4b09      	ldr	r3, [pc, #36]	; (de508 <asctime+0x28>)
   de4e2:	b570      	push	{r4, r5, r6, lr}
   de4e4:	681c      	ldr	r4, [r3, #0]
   de4e6:	6c25      	ldr	r5, [r4, #64]	; 0x40
   de4e8:	4606      	mov	r6, r0
   de4ea:	b93d      	cbnz	r5, de4fc <asctime+0x1c>
   de4ec:	201a      	movs	r0, #26
   de4ee:	f7fb fa23 	bl	d9938 <malloc>
   de4f2:	221a      	movs	r2, #26
   de4f4:	6420      	str	r0, [r4, #64]	; 0x40
   de4f6:	4629      	mov	r1, r5
   de4f8:	f000 f956 	bl	de7a8 <memset>
   de4fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   de4fe:	4630      	mov	r0, r6
   de500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   de504:	f000 b802 	b.w	de50c <asctime_r>
   de508:	2003be4c 	.word	0x2003be4c

000de50c <asctime_r>:
   de50c:	b510      	push	{r4, lr}
   de50e:	460c      	mov	r4, r1
   de510:	6941      	ldr	r1, [r0, #20]
   de512:	6903      	ldr	r3, [r0, #16]
   de514:	6982      	ldr	r2, [r0, #24]
   de516:	b086      	sub	sp, #24
   de518:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   de51c:	9104      	str	r1, [sp, #16]
   de51e:	6801      	ldr	r1, [r0, #0]
   de520:	9103      	str	r1, [sp, #12]
   de522:	6841      	ldr	r1, [r0, #4]
   de524:	9102      	str	r1, [sp, #8]
   de526:	6881      	ldr	r1, [r0, #8]
   de528:	9101      	str	r1, [sp, #4]
   de52a:	68c1      	ldr	r1, [r0, #12]
   de52c:	9100      	str	r1, [sp, #0]
   de52e:	4907      	ldr	r1, [pc, #28]	; (de54c <asctime_r+0x40>)
   de530:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   de534:	440b      	add	r3, r1
   de536:	4906      	ldr	r1, [pc, #24]	; (de550 <asctime_r+0x44>)
   de538:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   de53c:	440a      	add	r2, r1
   de53e:	4620      	mov	r0, r4
   de540:	4904      	ldr	r1, [pc, #16]	; (de554 <asctime_r+0x48>)
   de542:	f7fb fa11 	bl	d9968 <siprintf>
   de546:	4620      	mov	r0, r4
   de548:	b006      	add	sp, #24
   de54a:	bd10      	pop	{r4, pc}
   de54c:	000e0ad5 	.word	0x000e0ad5
   de550:	000e0ac0 	.word	0x000e0ac0
   de554:	000e0af9 	.word	0x000e0af9

000de558 <atoi>:
   de558:	220a      	movs	r2, #10
   de55a:	2100      	movs	r1, #0
   de55c:	f001 b9a8 	b.w	df8b0 <strtol>

000de560 <atol>:
   de560:	220a      	movs	r2, #10
   de562:	2100      	movs	r1, #0
   de564:	f001 b9a4 	b.w	df8b0 <strtol>

000de568 <__cxa_atexit>:
   de568:	b510      	push	{r4, lr}
   de56a:	4c05      	ldr	r4, [pc, #20]	; (de580 <__cxa_atexit+0x18>)
   de56c:	4613      	mov	r3, r2
   de56e:	b12c      	cbz	r4, de57c <__cxa_atexit+0x14>
   de570:	460a      	mov	r2, r1
   de572:	4601      	mov	r1, r0
   de574:	2002      	movs	r0, #2
   de576:	f3af 8000 	nop.w
   de57a:	bd10      	pop	{r4, pc}
   de57c:	4620      	mov	r0, r4
   de57e:	bd10      	pop	{r4, pc}
   de580:	00000000 	.word	0x00000000

000de584 <localtime>:
   de584:	b538      	push	{r3, r4, r5, lr}
   de586:	4b07      	ldr	r3, [pc, #28]	; (de5a4 <localtime+0x20>)
   de588:	681c      	ldr	r4, [r3, #0]
   de58a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   de58c:	4605      	mov	r5, r0
   de58e:	b91b      	cbnz	r3, de598 <localtime+0x14>
   de590:	2024      	movs	r0, #36	; 0x24
   de592:	f7fb f9d1 	bl	d9938 <malloc>
   de596:	63e0      	str	r0, [r4, #60]	; 0x3c
   de598:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   de59a:	4628      	mov	r0, r5
   de59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   de5a0:	f000 b802 	b.w	de5a8 <localtime_r>
   de5a4:	2003be4c 	.word	0x2003be4c

000de5a8 <localtime_r>:
   de5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de5ac:	460c      	mov	r4, r1
   de5ae:	4680      	mov	r8, r0
   de5b0:	f001 fcac 	bl	dff0c <__gettzinfo>
   de5b4:	4621      	mov	r1, r4
   de5b6:	4607      	mov	r7, r0
   de5b8:	4640      	mov	r0, r8
   de5ba:	f001 fcab 	bl	dff14 <gmtime_r>
   de5be:	6946      	ldr	r6, [r0, #20]
   de5c0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   de5c4:	07b3      	lsls	r3, r6, #30
   de5c6:	4604      	mov	r4, r0
   de5c8:	d105      	bne.n	de5d6 <localtime_r+0x2e>
   de5ca:	2264      	movs	r2, #100	; 0x64
   de5cc:	fb96 f3f2 	sdiv	r3, r6, r2
   de5d0:	fb02 6313 	mls	r3, r2, r3, r6
   de5d4:	b94b      	cbnz	r3, de5ea <localtime_r+0x42>
   de5d6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   de5da:	fb96 f3f5 	sdiv	r3, r6, r5
   de5de:	fb05 6513 	mls	r5, r5, r3, r6
   de5e2:	fab5 f385 	clz	r3, r5
   de5e6:	095b      	lsrs	r3, r3, #5
   de5e8:	e000      	b.n	de5ec <localtime_r+0x44>
   de5ea:	2301      	movs	r3, #1
   de5ec:	4a5f      	ldr	r2, [pc, #380]	; (de76c <localtime_r+0x1c4>)
   de5ee:	2530      	movs	r5, #48	; 0x30
   de5f0:	fb05 2503 	mla	r5, r5, r3, r2
   de5f4:	f001 faa6 	bl	dfb44 <__tz_lock>
   de5f8:	f001 faa6 	bl	dfb48 <_tzset_unlocked>
   de5fc:	4b5c      	ldr	r3, [pc, #368]	; (de770 <localtime_r+0x1c8>)
   de5fe:	681b      	ldr	r3, [r3, #0]
   de600:	b1f3      	cbz	r3, de640 <localtime_r+0x98>
   de602:	687b      	ldr	r3, [r7, #4]
   de604:	429e      	cmp	r6, r3
   de606:	d105      	bne.n	de614 <localtime_r+0x6c>
   de608:	6839      	ldr	r1, [r7, #0]
   de60a:	f8d8 3000 	ldr.w	r3, [r8]
   de60e:	69fa      	ldr	r2, [r7, #28]
   de610:	b941      	cbnz	r1, de624 <localtime_r+0x7c>
   de612:	e00a      	b.n	de62a <localtime_r+0x82>
   de614:	4630      	mov	r0, r6
   de616:	f001 f9ed 	bl	df9f4 <__tzcalc_limits>
   de61a:	2800      	cmp	r0, #0
   de61c:	d1f4      	bne.n	de608 <localtime_r+0x60>
   de61e:	f04f 33ff 	mov.w	r3, #4294967295
   de622:	e00d      	b.n	de640 <localtime_r+0x98>
   de624:	4293      	cmp	r3, r2
   de626:	db08      	blt.n	de63a <localtime_r+0x92>
   de628:	e001      	b.n	de62e <localtime_r+0x86>
   de62a:	4293      	cmp	r3, r2
   de62c:	da07      	bge.n	de63e <localtime_r+0x96>
   de62e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   de630:	4293      	cmp	r3, r2
   de632:	bfac      	ite	ge
   de634:	2300      	movge	r3, #0
   de636:	2301      	movlt	r3, #1
   de638:	e002      	b.n	de640 <localtime_r+0x98>
   de63a:	2300      	movs	r3, #0
   de63c:	e000      	b.n	de640 <localtime_r+0x98>
   de63e:	2301      	movs	r3, #1
   de640:	6223      	str	r3, [r4, #32]
   de642:	6a23      	ldr	r3, [r4, #32]
   de644:	2b01      	cmp	r3, #1
   de646:	bf0c      	ite	eq
   de648:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   de64a:	6a39      	ldrne	r1, [r7, #32]
   de64c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   de650:	203c      	movs	r0, #60	; 0x3c
   de652:	fb91 f6f3 	sdiv	r6, r1, r3
   de656:	fb03 1316 	mls	r3, r3, r6, r1
   de65a:	6861      	ldr	r1, [r4, #4]
   de65c:	fb93 f2f0 	sdiv	r2, r3, r0
   de660:	fb00 3012 	mls	r0, r0, r2, r3
   de664:	6823      	ldr	r3, [r4, #0]
   de666:	1a89      	subs	r1, r1, r2
   de668:	68a2      	ldr	r2, [r4, #8]
   de66a:	6061      	str	r1, [r4, #4]
   de66c:	1a1b      	subs	r3, r3, r0
   de66e:	1b92      	subs	r2, r2, r6
   de670:	2b3b      	cmp	r3, #59	; 0x3b
   de672:	6023      	str	r3, [r4, #0]
   de674:	60a2      	str	r2, [r4, #8]
   de676:	dd03      	ble.n	de680 <localtime_r+0xd8>
   de678:	3101      	adds	r1, #1
   de67a:	6061      	str	r1, [r4, #4]
   de67c:	3b3c      	subs	r3, #60	; 0x3c
   de67e:	e004      	b.n	de68a <localtime_r+0xe2>
   de680:	2b00      	cmp	r3, #0
   de682:	da03      	bge.n	de68c <localtime_r+0xe4>
   de684:	3901      	subs	r1, #1
   de686:	6061      	str	r1, [r4, #4]
   de688:	333c      	adds	r3, #60	; 0x3c
   de68a:	6023      	str	r3, [r4, #0]
   de68c:	6863      	ldr	r3, [r4, #4]
   de68e:	2b3b      	cmp	r3, #59	; 0x3b
   de690:	dd03      	ble.n	de69a <localtime_r+0xf2>
   de692:	3201      	adds	r2, #1
   de694:	60a2      	str	r2, [r4, #8]
   de696:	3b3c      	subs	r3, #60	; 0x3c
   de698:	e004      	b.n	de6a4 <localtime_r+0xfc>
   de69a:	2b00      	cmp	r3, #0
   de69c:	da03      	bge.n	de6a6 <localtime_r+0xfe>
   de69e:	3a01      	subs	r2, #1
   de6a0:	60a2      	str	r2, [r4, #8]
   de6a2:	333c      	adds	r3, #60	; 0x3c
   de6a4:	6063      	str	r3, [r4, #4]
   de6a6:	68a3      	ldr	r3, [r4, #8]
   de6a8:	2b17      	cmp	r3, #23
   de6aa:	dd22      	ble.n	de6f2 <localtime_r+0x14a>
   de6ac:	69e2      	ldr	r2, [r4, #28]
   de6ae:	3201      	adds	r2, #1
   de6b0:	61e2      	str	r2, [r4, #28]
   de6b2:	69a2      	ldr	r2, [r4, #24]
   de6b4:	3201      	adds	r2, #1
   de6b6:	2a06      	cmp	r2, #6
   de6b8:	bfc8      	it	gt
   de6ba:	2200      	movgt	r2, #0
   de6bc:	61a2      	str	r2, [r4, #24]
   de6be:	68e2      	ldr	r2, [r4, #12]
   de6c0:	3b18      	subs	r3, #24
   de6c2:	3201      	adds	r2, #1
   de6c4:	60a3      	str	r3, [r4, #8]
   de6c6:	6923      	ldr	r3, [r4, #16]
   de6c8:	60e2      	str	r2, [r4, #12]
   de6ca:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   de6ce:	428a      	cmp	r2, r1
   de6d0:	dd46      	ble.n	de760 <localtime_r+0x1b8>
   de6d2:	3301      	adds	r3, #1
   de6d4:	2b0c      	cmp	r3, #12
   de6d6:	bf0c      	ite	eq
   de6d8:	6963      	ldreq	r3, [r4, #20]
   de6da:	6123      	strne	r3, [r4, #16]
   de6dc:	eba2 0201 	sub.w	r2, r2, r1
   de6e0:	60e2      	str	r2, [r4, #12]
   de6e2:	bf01      	itttt	eq
   de6e4:	3301      	addeq	r3, #1
   de6e6:	2200      	moveq	r2, #0
   de6e8:	6122      	streq	r2, [r4, #16]
   de6ea:	6163      	streq	r3, [r4, #20]
   de6ec:	bf08      	it	eq
   de6ee:	61e2      	streq	r2, [r4, #28]
   de6f0:	e036      	b.n	de760 <localtime_r+0x1b8>
   de6f2:	2b00      	cmp	r3, #0
   de6f4:	da34      	bge.n	de760 <localtime_r+0x1b8>
   de6f6:	69e2      	ldr	r2, [r4, #28]
   de6f8:	3a01      	subs	r2, #1
   de6fa:	61e2      	str	r2, [r4, #28]
   de6fc:	69a2      	ldr	r2, [r4, #24]
   de6fe:	3a01      	subs	r2, #1
   de700:	bf48      	it	mi
   de702:	2206      	movmi	r2, #6
   de704:	61a2      	str	r2, [r4, #24]
   de706:	68e2      	ldr	r2, [r4, #12]
   de708:	3318      	adds	r3, #24
   de70a:	3a01      	subs	r2, #1
   de70c:	60e2      	str	r2, [r4, #12]
   de70e:	60a3      	str	r3, [r4, #8]
   de710:	bb32      	cbnz	r2, de760 <localtime_r+0x1b8>
   de712:	6923      	ldr	r3, [r4, #16]
   de714:	3b01      	subs	r3, #1
   de716:	d401      	bmi.n	de71c <localtime_r+0x174>
   de718:	6123      	str	r3, [r4, #16]
   de71a:	e01d      	b.n	de758 <localtime_r+0x1b0>
   de71c:	230b      	movs	r3, #11
   de71e:	6123      	str	r3, [r4, #16]
   de720:	6963      	ldr	r3, [r4, #20]
   de722:	1e5a      	subs	r2, r3, #1
   de724:	f012 0f03 	tst.w	r2, #3
   de728:	6162      	str	r2, [r4, #20]
   de72a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   de72e:	d105      	bne.n	de73c <localtime_r+0x194>
   de730:	2164      	movs	r1, #100	; 0x64
   de732:	fb93 f2f1 	sdiv	r2, r3, r1
   de736:	fb01 3212 	mls	r2, r1, r2, r3
   de73a:	b94a      	cbnz	r2, de750 <localtime_r+0x1a8>
   de73c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   de740:	fb93 f2f1 	sdiv	r2, r3, r1
   de744:	fb01 3312 	mls	r3, r1, r2, r3
   de748:	fab3 f383 	clz	r3, r3
   de74c:	095b      	lsrs	r3, r3, #5
   de74e:	e000      	b.n	de752 <localtime_r+0x1aa>
   de750:	2301      	movs	r3, #1
   de752:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   de756:	61e3      	str	r3, [r4, #28]
   de758:	6923      	ldr	r3, [r4, #16]
   de75a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   de75e:	60e3      	str	r3, [r4, #12]
   de760:	f001 f9f1 	bl	dfb46 <__tz_unlock>
   de764:	4620      	mov	r0, r4
   de766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de76a:	bf00      	nop
   de76c:	000e0cdc 	.word	0x000e0cdc
   de770:	2003e7e4 	.word	0x2003e7e4

000de774 <memcmp>:
   de774:	b510      	push	{r4, lr}
   de776:	3901      	subs	r1, #1
   de778:	4402      	add	r2, r0
   de77a:	4290      	cmp	r0, r2
   de77c:	d007      	beq.n	de78e <memcmp+0x1a>
   de77e:	f810 3b01 	ldrb.w	r3, [r0], #1
   de782:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   de786:	42a3      	cmp	r3, r4
   de788:	d0f7      	beq.n	de77a <memcmp+0x6>
   de78a:	1b18      	subs	r0, r3, r4
   de78c:	bd10      	pop	{r4, pc}
   de78e:	2000      	movs	r0, #0
   de790:	bd10      	pop	{r4, pc}

000de792 <memcpy>:
   de792:	b510      	push	{r4, lr}
   de794:	1e43      	subs	r3, r0, #1
   de796:	440a      	add	r2, r1
   de798:	4291      	cmp	r1, r2
   de79a:	d004      	beq.n	de7a6 <memcpy+0x14>
   de79c:	f811 4b01 	ldrb.w	r4, [r1], #1
   de7a0:	f803 4f01 	strb.w	r4, [r3, #1]!
   de7a4:	e7f8      	b.n	de798 <memcpy+0x6>
   de7a6:	bd10      	pop	{r4, pc}

000de7a8 <memset>:
   de7a8:	4402      	add	r2, r0
   de7aa:	4603      	mov	r3, r0
   de7ac:	4293      	cmp	r3, r2
   de7ae:	d002      	beq.n	de7b6 <memset+0xe>
   de7b0:	f803 1b01 	strb.w	r1, [r3], #1
   de7b4:	e7fa      	b.n	de7ac <memset+0x4>
   de7b6:	4770      	bx	lr

000de7b8 <validate_structure>:
   de7b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   de7ba:	6801      	ldr	r1, [r0, #0]
   de7bc:	293b      	cmp	r1, #59	; 0x3b
   de7be:	4604      	mov	r4, r0
   de7c0:	d911      	bls.n	de7e6 <validate_structure+0x2e>
   de7c2:	223c      	movs	r2, #60	; 0x3c
   de7c4:	4668      	mov	r0, sp
   de7c6:	f001 fb49 	bl	dfe5c <div>
   de7ca:	9a01      	ldr	r2, [sp, #4]
   de7cc:	6863      	ldr	r3, [r4, #4]
   de7ce:	9900      	ldr	r1, [sp, #0]
   de7d0:	2a00      	cmp	r2, #0
   de7d2:	440b      	add	r3, r1
   de7d4:	6063      	str	r3, [r4, #4]
   de7d6:	bfbb      	ittet	lt
   de7d8:	323c      	addlt	r2, #60	; 0x3c
   de7da:	f103 33ff 	addlt.w	r3, r3, #4294967295
   de7de:	6022      	strge	r2, [r4, #0]
   de7e0:	6022      	strlt	r2, [r4, #0]
   de7e2:	bfb8      	it	lt
   de7e4:	6063      	strlt	r3, [r4, #4]
   de7e6:	6861      	ldr	r1, [r4, #4]
   de7e8:	293b      	cmp	r1, #59	; 0x3b
   de7ea:	d911      	bls.n	de810 <validate_structure+0x58>
   de7ec:	223c      	movs	r2, #60	; 0x3c
   de7ee:	4668      	mov	r0, sp
   de7f0:	f001 fb34 	bl	dfe5c <div>
   de7f4:	9a01      	ldr	r2, [sp, #4]
   de7f6:	68a1      	ldr	r1, [r4, #8]
   de7f8:	9b00      	ldr	r3, [sp, #0]
   de7fa:	2a00      	cmp	r2, #0
   de7fc:	440b      	add	r3, r1
   de7fe:	60a3      	str	r3, [r4, #8]
   de800:	bfbb      	ittet	lt
   de802:	323c      	addlt	r2, #60	; 0x3c
   de804:	f103 33ff 	addlt.w	r3, r3, #4294967295
   de808:	6062      	strge	r2, [r4, #4]
   de80a:	6062      	strlt	r2, [r4, #4]
   de80c:	bfb8      	it	lt
   de80e:	60a3      	strlt	r3, [r4, #8]
   de810:	68a1      	ldr	r1, [r4, #8]
   de812:	2917      	cmp	r1, #23
   de814:	d911      	bls.n	de83a <validate_structure+0x82>
   de816:	2218      	movs	r2, #24
   de818:	4668      	mov	r0, sp
   de81a:	f001 fb1f 	bl	dfe5c <div>
   de81e:	9a01      	ldr	r2, [sp, #4]
   de820:	68e1      	ldr	r1, [r4, #12]
   de822:	9b00      	ldr	r3, [sp, #0]
   de824:	2a00      	cmp	r2, #0
   de826:	440b      	add	r3, r1
   de828:	60e3      	str	r3, [r4, #12]
   de82a:	bfbb      	ittet	lt
   de82c:	3218      	addlt	r2, #24
   de82e:	f103 33ff 	addlt.w	r3, r3, #4294967295
   de832:	60a2      	strge	r2, [r4, #8]
   de834:	60a2      	strlt	r2, [r4, #8]
   de836:	bfb8      	it	lt
   de838:	60e3      	strlt	r3, [r4, #12]
   de83a:	6921      	ldr	r1, [r4, #16]
   de83c:	290b      	cmp	r1, #11
   de83e:	d911      	bls.n	de864 <validate_structure+0xac>
   de840:	220c      	movs	r2, #12
   de842:	4668      	mov	r0, sp
   de844:	f001 fb0a 	bl	dfe5c <div>
   de848:	9a01      	ldr	r2, [sp, #4]
   de84a:	6961      	ldr	r1, [r4, #20]
   de84c:	9b00      	ldr	r3, [sp, #0]
   de84e:	2a00      	cmp	r2, #0
   de850:	440b      	add	r3, r1
   de852:	6163      	str	r3, [r4, #20]
   de854:	bfbb      	ittet	lt
   de856:	320c      	addlt	r2, #12
   de858:	f103 33ff 	addlt.w	r3, r3, #4294967295
   de85c:	6122      	strge	r2, [r4, #16]
   de85e:	6122      	strlt	r2, [r4, #16]
   de860:	bfb8      	it	lt
   de862:	6163      	strlt	r3, [r4, #20]
   de864:	6963      	ldr	r3, [r4, #20]
   de866:	0799      	lsls	r1, r3, #30
   de868:	d112      	bne.n	de890 <validate_structure+0xd8>
   de86a:	2164      	movs	r1, #100	; 0x64
   de86c:	fb93 f2f1 	sdiv	r2, r3, r1
   de870:	fb01 3212 	mls	r2, r1, r2, r3
   de874:	b972      	cbnz	r2, de894 <validate_structure+0xdc>
   de876:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   de87a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   de87e:	fb93 f2f1 	sdiv	r2, r3, r1
   de882:	fb01 3312 	mls	r3, r1, r2, r3
   de886:	2b00      	cmp	r3, #0
   de888:	bf14      	ite	ne
   de88a:	231c      	movne	r3, #28
   de88c:	231d      	moveq	r3, #29
   de88e:	e002      	b.n	de896 <validate_structure+0xde>
   de890:	231c      	movs	r3, #28
   de892:	e000      	b.n	de896 <validate_structure+0xde>
   de894:	231d      	movs	r3, #29
   de896:	68e2      	ldr	r2, [r4, #12]
   de898:	2a00      	cmp	r2, #0
   de89a:	dd06      	ble.n	de8aa <validate_structure+0xf2>
   de89c:	4f33      	ldr	r7, [pc, #204]	; (de96c <validate_structure+0x1b4>)
   de89e:	f04f 0e00 	mov.w	lr, #0
   de8a2:	2564      	movs	r5, #100	; 0x64
   de8a4:	f44f 76c8 	mov.w	r6, #400	; 0x190
   de8a8:	e039      	b.n	de91e <validate_structure+0x166>
   de8aa:	4f30      	ldr	r7, [pc, #192]	; (de96c <validate_structure+0x1b4>)
   de8ac:	260b      	movs	r6, #11
   de8ae:	2064      	movs	r0, #100	; 0x64
   de8b0:	f44f 75c8 	mov.w	r5, #400	; 0x190
   de8b4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   de8b8:	f1be 0f00 	cmp.w	lr, #0
   de8bc:	dc53      	bgt.n	de966 <validate_structure+0x1ae>
   de8be:	6921      	ldr	r1, [r4, #16]
   de8c0:	3901      	subs	r1, #1
   de8c2:	6121      	str	r1, [r4, #16]
   de8c4:	3101      	adds	r1, #1
   de8c6:	d118      	bne.n	de8fa <validate_structure+0x142>
   de8c8:	6963      	ldr	r3, [r4, #20]
   de8ca:	6126      	str	r6, [r4, #16]
   de8cc:	1e59      	subs	r1, r3, #1
   de8ce:	078a      	lsls	r2, r1, #30
   de8d0:	6161      	str	r1, [r4, #20]
   de8d2:	d10f      	bne.n	de8f4 <validate_structure+0x13c>
   de8d4:	fb91 f2f0 	sdiv	r2, r1, r0
   de8d8:	fb00 1112 	mls	r1, r0, r2, r1
   de8dc:	b961      	cbnz	r1, de8f8 <validate_structure+0x140>
   de8de:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   de8e2:	fb93 f2f5 	sdiv	r2, r3, r5
   de8e6:	fb05 3312 	mls	r3, r5, r2, r3
   de8ea:	2b00      	cmp	r3, #0
   de8ec:	bf14      	ite	ne
   de8ee:	231c      	movne	r3, #28
   de8f0:	231d      	moveq	r3, #29
   de8f2:	e002      	b.n	de8fa <validate_structure+0x142>
   de8f4:	231c      	movs	r3, #28
   de8f6:	e000      	b.n	de8fa <validate_structure+0x142>
   de8f8:	231d      	movs	r3, #29
   de8fa:	6922      	ldr	r2, [r4, #16]
   de8fc:	2a01      	cmp	r2, #1
   de8fe:	bf14      	ite	ne
   de900:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   de904:	461a      	moveq	r2, r3
   de906:	4472      	add	r2, lr
   de908:	60e2      	str	r2, [r4, #12]
   de90a:	e7d3      	b.n	de8b4 <validate_structure+0xfc>
   de90c:	428b      	cmp	r3, r1
   de90e:	da2a      	bge.n	de966 <validate_structure+0x1ae>
   de910:	4618      	mov	r0, r3
   de912:	3201      	adds	r2, #1
   de914:	1a09      	subs	r1, r1, r0
   de916:	2a0c      	cmp	r2, #12
   de918:	60e1      	str	r1, [r4, #12]
   de91a:	6122      	str	r2, [r4, #16]
   de91c:	d008      	beq.n	de930 <validate_structure+0x178>
   de91e:	6922      	ldr	r2, [r4, #16]
   de920:	68e1      	ldr	r1, [r4, #12]
   de922:	2a01      	cmp	r2, #1
   de924:	d0f2      	beq.n	de90c <validate_structure+0x154>
   de926:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   de92a:	4281      	cmp	r1, r0
   de92c:	dcf1      	bgt.n	de912 <validate_structure+0x15a>
   de92e:	e01a      	b.n	de966 <validate_structure+0x1ae>
   de930:	6963      	ldr	r3, [r4, #20]
   de932:	f8c4 e010 	str.w	lr, [r4, #16]
   de936:	1c5a      	adds	r2, r3, #1
   de938:	0791      	lsls	r1, r2, #30
   de93a:	6162      	str	r2, [r4, #20]
   de93c:	d10f      	bne.n	de95e <validate_structure+0x1a6>
   de93e:	fb92 f1f5 	sdiv	r1, r2, r5
   de942:	fb05 2211 	mls	r2, r5, r1, r2
   de946:	b962      	cbnz	r2, de962 <validate_structure+0x1aa>
   de948:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   de94c:	fb93 f2f6 	sdiv	r2, r3, r6
   de950:	fb06 3312 	mls	r3, r6, r2, r3
   de954:	2b00      	cmp	r3, #0
   de956:	bf14      	ite	ne
   de958:	231c      	movne	r3, #28
   de95a:	231d      	moveq	r3, #29
   de95c:	e7df      	b.n	de91e <validate_structure+0x166>
   de95e:	231c      	movs	r3, #28
   de960:	e7dd      	b.n	de91e <validate_structure+0x166>
   de962:	231d      	movs	r3, #29
   de964:	e7db      	b.n	de91e <validate_structure+0x166>
   de966:	b003      	add	sp, #12
   de968:	bdf0      	pop	{r4, r5, r6, r7, pc}
   de96a:	bf00      	nop
   de96c:	000e0cac 	.word	0x000e0cac

000de970 <mktime>:
   de970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de974:	4605      	mov	r5, r0
   de976:	f001 fac9 	bl	dff0c <__gettzinfo>
   de97a:	4681      	mov	r9, r0
   de97c:	4628      	mov	r0, r5
   de97e:	f7ff ff1b 	bl	de7b8 <validate_structure>
   de982:	e895 000c 	ldmia.w	r5, {r2, r3}
   de986:	213c      	movs	r1, #60	; 0x3c
   de988:	fb01 2303 	mla	r3, r1, r3, r2
   de98c:	68aa      	ldr	r2, [r5, #8]
   de98e:	68ec      	ldr	r4, [r5, #12]
   de990:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   de994:	fb08 3102 	mla	r1, r8, r2, r3
   de998:	692b      	ldr	r3, [r5, #16]
   de99a:	4aab      	ldr	r2, [pc, #684]	; (dec48 <mktime+0x2d8>)
   de99c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   de9a0:	3c01      	subs	r4, #1
   de9a2:	2b01      	cmp	r3, #1
   de9a4:	4414      	add	r4, r2
   de9a6:	696b      	ldr	r3, [r5, #20]
   de9a8:	dd11      	ble.n	de9ce <mktime+0x5e>
   de9aa:	079e      	lsls	r6, r3, #30
   de9ac:	d10f      	bne.n	de9ce <mktime+0x5e>
   de9ae:	2064      	movs	r0, #100	; 0x64
   de9b0:	fb93 f2f0 	sdiv	r2, r3, r0
   de9b4:	fb00 3212 	mls	r2, r0, r2, r3
   de9b8:	b942      	cbnz	r2, de9cc <mktime+0x5c>
   de9ba:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   de9be:	f44f 72c8 	mov.w	r2, #400	; 0x190
   de9c2:	fb96 f0f2 	sdiv	r0, r6, r2
   de9c6:	fb02 6210 	mls	r2, r2, r0, r6
   de9ca:	b902      	cbnz	r2, de9ce <mktime+0x5e>
   de9cc:	3401      	adds	r4, #1
   de9ce:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   de9d2:	3210      	adds	r2, #16
   de9d4:	f644 6020 	movw	r0, #20000	; 0x4e20
   de9d8:	4282      	cmp	r2, r0
   de9da:	61ec      	str	r4, [r5, #28]
   de9dc:	461f      	mov	r7, r3
   de9de:	f200 812e 	bhi.w	dec3e <mktime+0x2ce>
   de9e2:	2b46      	cmp	r3, #70	; 0x46
   de9e4:	dd22      	ble.n	dea2c <mktime+0xbc>
   de9e6:	2246      	movs	r2, #70	; 0x46
   de9e8:	f240 1c6d 	movw	ip, #365	; 0x16d
   de9ec:	2664      	movs	r6, #100	; 0x64
   de9ee:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   de9f2:	0790      	lsls	r0, r2, #30
   de9f4:	d110      	bne.n	dea18 <mktime+0xa8>
   de9f6:	fb92 f0f6 	sdiv	r0, r2, r6
   de9fa:	fb06 2010 	mls	r0, r6, r0, r2
   de9fe:	b970      	cbnz	r0, dea1e <mktime+0xae>
   dea00:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   dea04:	fb98 f0fe 	sdiv	r0, r8, lr
   dea08:	fb0e 8010 	mls	r0, lr, r0, r8
   dea0c:	2800      	cmp	r0, #0
   dea0e:	bf14      	ite	ne
   dea10:	4660      	movne	r0, ip
   dea12:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   dea16:	e004      	b.n	dea22 <mktime+0xb2>
   dea18:	f240 106d 	movw	r0, #365	; 0x16d
   dea1c:	e001      	b.n	dea22 <mktime+0xb2>
   dea1e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   dea22:	3201      	adds	r2, #1
   dea24:	4293      	cmp	r3, r2
   dea26:	4404      	add	r4, r0
   dea28:	d1e3      	bne.n	de9f2 <mktime+0x82>
   dea2a:	e044      	b.n	deab6 <mktime+0x146>
   dea2c:	d043      	beq.n	deab6 <mktime+0x146>
   dea2e:	2245      	movs	r2, #69	; 0x45
   dea30:	f240 1e6d 	movw	lr, #365	; 0x16d
   dea34:	2664      	movs	r6, #100	; 0x64
   dea36:	f44f 77c8 	mov.w	r7, #400	; 0x190
   dea3a:	429a      	cmp	r2, r3
   dea3c:	dd1a      	ble.n	dea74 <mktime+0x104>
   dea3e:	0790      	lsls	r0, r2, #30
   dea40:	d110      	bne.n	dea64 <mktime+0xf4>
   dea42:	fb92 f0f6 	sdiv	r0, r2, r6
   dea46:	fb06 2010 	mls	r0, r6, r0, r2
   dea4a:	b970      	cbnz	r0, dea6a <mktime+0xfa>
   dea4c:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   dea50:	fb9c f0f7 	sdiv	r0, ip, r7
   dea54:	fb07 c010 	mls	r0, r7, r0, ip
   dea58:	2800      	cmp	r0, #0
   dea5a:	bf14      	ite	ne
   dea5c:	4670      	movne	r0, lr
   dea5e:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   dea62:	e004      	b.n	dea6e <mktime+0xfe>
   dea64:	f240 106d 	movw	r0, #365	; 0x16d
   dea68:	e001      	b.n	dea6e <mktime+0xfe>
   dea6a:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   dea6e:	1a24      	subs	r4, r4, r0
   dea70:	3a01      	subs	r2, #1
   dea72:	e7e2      	b.n	dea3a <mktime+0xca>
   dea74:	2b45      	cmp	r3, #69	; 0x45
   dea76:	bfa8      	it	ge
   dea78:	2345      	movge	r3, #69	; 0x45
   dea7a:	079e      	lsls	r6, r3, #30
   dea7c:	461f      	mov	r7, r3
   dea7e:	d114      	bne.n	deaaa <mktime+0x13a>
   dea80:	2264      	movs	r2, #100	; 0x64
   dea82:	fb93 f3f2 	sdiv	r3, r3, r2
   dea86:	fb02 7313 	mls	r3, r2, r3, r7
   dea8a:	b98b      	cbnz	r3, deab0 <mktime+0x140>
   dea8c:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   dea90:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dea94:	fb90 f2f3 	sdiv	r2, r0, r3
   dea98:	fb03 0312 	mls	r3, r3, r2, r0
   dea9c:	2b00      	cmp	r3, #0
   dea9e:	f240 136d 	movw	r3, #365	; 0x16d
   deaa2:	bf08      	it	eq
   deaa4:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   deaa8:	e004      	b.n	deab4 <mktime+0x144>
   deaaa:	f240 136d 	movw	r3, #365	; 0x16d
   deaae:	e001      	b.n	deab4 <mktime+0x144>
   deab0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   deab4:	1ae4      	subs	r4, r4, r3
   deab6:	4865      	ldr	r0, [pc, #404]	; (dec4c <mktime+0x2dc>)
   deab8:	fb00 1804 	mla	r8, r0, r4, r1
   deabc:	f001 f842 	bl	dfb44 <__tz_lock>
   deac0:	f001 f842 	bl	dfb48 <_tzset_unlocked>
   deac4:	4b62      	ldr	r3, [pc, #392]	; (dec50 <mktime+0x2e0>)
   deac6:	681e      	ldr	r6, [r3, #0]
   deac8:	2e00      	cmp	r6, #0
   deaca:	f000 80a4 	beq.w	dec16 <mktime+0x2a6>
   deace:	6a2b      	ldr	r3, [r5, #32]
   dead0:	6968      	ldr	r0, [r5, #20]
   dead2:	2b01      	cmp	r3, #1
   dead4:	bfa8      	it	ge
   dead6:	2301      	movge	r3, #1
   dead8:	469a      	mov	sl, r3
   deada:	f8d9 3004 	ldr.w	r3, [r9, #4]
   deade:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   deae2:	4298      	cmp	r0, r3
   deae4:	d10d      	bne.n	deb02 <mktime+0x192>
   deae6:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   deaea:	f8d9 3020 	ldr.w	r3, [r9, #32]
   deaee:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   deaf2:	f8d9 101c 	ldr.w	r1, [r9, #28]
   deaf6:	1ad6      	subs	r6, r2, r3
   deaf8:	45b0      	cmp	r8, r6
   deafa:	eba1 0100 	sub.w	r1, r1, r0
   deafe:	da05      	bge.n	deb0c <mktime+0x19c>
   deb00:	e007      	b.n	deb12 <mktime+0x1a2>
   deb02:	f000 ff77 	bl	df9f4 <__tzcalc_limits>
   deb06:	2800      	cmp	r0, #0
   deb08:	d1ed      	bne.n	deae6 <mktime+0x176>
   deb0a:	e076      	b.n	debfa <mktime+0x28a>
   deb0c:	1a12      	subs	r2, r2, r0
   deb0e:	4590      	cmp	r8, r2
   deb10:	db73      	blt.n	debfa <mktime+0x28a>
   deb12:	f8d9 2000 	ldr.w	r2, [r9]
   deb16:	b112      	cbz	r2, deb1e <mktime+0x1ae>
   deb18:	4588      	cmp	r8, r1
   deb1a:	db77      	blt.n	dec0c <mktime+0x29c>
   deb1c:	e001      	b.n	deb22 <mktime+0x1b2>
   deb1e:	4588      	cmp	r8, r1
   deb20:	da07      	bge.n	deb32 <mktime+0x1c2>
   deb22:	45b0      	cmp	r8, r6
   deb24:	bfac      	ite	ge
   deb26:	2600      	movge	r6, #0
   deb28:	2601      	movlt	r6, #1
   deb2a:	f1ba 0f00 	cmp.w	sl, #0
   deb2e:	da04      	bge.n	deb3a <mktime+0x1ca>
   deb30:	e064      	b.n	debfc <mktime+0x28c>
   deb32:	f1ba 0f00 	cmp.w	sl, #0
   deb36:	db63      	blt.n	dec00 <mktime+0x290>
   deb38:	2601      	movs	r6, #1
   deb3a:	ea8a 0a06 	eor.w	sl, sl, r6
   deb3e:	f1ba 0f01 	cmp.w	sl, #1
   deb42:	d15b      	bne.n	debfc <mktime+0x28c>
   deb44:	1a1b      	subs	r3, r3, r0
   deb46:	b906      	cbnz	r6, deb4a <mktime+0x1da>
   deb48:	425b      	negs	r3, r3
   deb4a:	682a      	ldr	r2, [r5, #0]
   deb4c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   deb50:	441a      	add	r2, r3
   deb52:	602a      	str	r2, [r5, #0]
   deb54:	4628      	mov	r0, r5
   deb56:	4498      	add	r8, r3
   deb58:	f7ff fe2e 	bl	de7b8 <validate_structure>
   deb5c:	68eb      	ldr	r3, [r5, #12]
   deb5e:	ebb3 030a 	subs.w	r3, r3, sl
   deb62:	d04b      	beq.n	debfc <mktime+0x28c>
   deb64:	2b01      	cmp	r3, #1
   deb66:	dc03      	bgt.n	deb70 <mktime+0x200>
   deb68:	1c98      	adds	r0, r3, #2
   deb6a:	bfd8      	it	le
   deb6c:	2301      	movle	r3, #1
   deb6e:	e001      	b.n	deb74 <mktime+0x204>
   deb70:	f04f 33ff 	mov.w	r3, #4294967295
   deb74:	69ea      	ldr	r2, [r5, #28]
   deb76:	441c      	add	r4, r3
   deb78:	189b      	adds	r3, r3, r2
   deb7a:	d51d      	bpl.n	debb8 <mktime+0x248>
   deb7c:	1e7b      	subs	r3, r7, #1
   deb7e:	0799      	lsls	r1, r3, #30
   deb80:	d114      	bne.n	debac <mktime+0x23c>
   deb82:	2164      	movs	r1, #100	; 0x64
   deb84:	fb93 f2f1 	sdiv	r2, r3, r1
   deb88:	fb01 3312 	mls	r3, r1, r2, r3
   deb8c:	b98b      	cbnz	r3, debb2 <mktime+0x242>
   deb8e:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   deb92:	f44f 72c8 	mov.w	r2, #400	; 0x190
   deb96:	fb97 f3f2 	sdiv	r3, r7, r2
   deb9a:	fb02 7713 	mls	r7, r2, r3, r7
   deb9e:	2f00      	cmp	r7, #0
   deba0:	f240 136d 	movw	r3, #365	; 0x16d
   deba4:	bf18      	it	ne
   deba6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   debaa:	e024      	b.n	debf6 <mktime+0x286>
   debac:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   debb0:	e021      	b.n	debf6 <mktime+0x286>
   debb2:	f240 136d 	movw	r3, #365	; 0x16d
   debb6:	e01e      	b.n	debf6 <mktime+0x286>
   debb8:	07ba      	lsls	r2, r7, #30
   debba:	d114      	bne.n	debe6 <mktime+0x276>
   debbc:	2164      	movs	r1, #100	; 0x64
   debbe:	fb97 f2f1 	sdiv	r2, r7, r1
   debc2:	fb01 7212 	mls	r2, r1, r2, r7
   debc6:	b98a      	cbnz	r2, debec <mktime+0x27c>
   debc8:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   debcc:	f44f 71c8 	mov.w	r1, #400	; 0x190
   debd0:	fb97 f2f1 	sdiv	r2, r7, r1
   debd4:	fb01 7712 	mls	r7, r1, r2, r7
   debd8:	2f00      	cmp	r7, #0
   debda:	f240 126d 	movw	r2, #365	; 0x16d
   debde:	bf08      	it	eq
   debe0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   debe4:	e004      	b.n	debf0 <mktime+0x280>
   debe6:	f240 126d 	movw	r2, #365	; 0x16d
   debea:	e001      	b.n	debf0 <mktime+0x280>
   debec:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   debf0:	429a      	cmp	r2, r3
   debf2:	bfd8      	it	le
   debf4:	1a9b      	suble	r3, r3, r2
   debf6:	61eb      	str	r3, [r5, #28]
   debf8:	e000      	b.n	debfc <mktime+0x28c>
   debfa:	4656      	mov	r6, sl
   debfc:	2e01      	cmp	r6, #1
   debfe:	d10a      	bne.n	dec16 <mktime+0x2a6>
   dec00:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   dec04:	2601      	movs	r6, #1
   dec06:	eb08 0700 	add.w	r7, r8, r0
   dec0a:	e008      	b.n	dec1e <mktime+0x2ae>
   dec0c:	f1ba 0f00 	cmp.w	sl, #0
   dec10:	f04f 0600 	mov.w	r6, #0
   dec14:	da91      	bge.n	deb3a <mktime+0x1ca>
   dec16:	f8d9 0020 	ldr.w	r0, [r9, #32]
   dec1a:	eb08 0700 	add.w	r7, r8, r0
   dec1e:	f000 ff92 	bl	dfb46 <__tz_unlock>
   dec22:	3404      	adds	r4, #4
   dec24:	2307      	movs	r3, #7
   dec26:	fb94 f3f3 	sdiv	r3, r4, r3
   dec2a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dec2e:	1ae4      	subs	r4, r4, r3
   dec30:	bf48      	it	mi
   dec32:	3407      	addmi	r4, #7
   dec34:	622e      	str	r6, [r5, #32]
   dec36:	61ac      	str	r4, [r5, #24]
   dec38:	4638      	mov	r0, r7
   dec3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dec3e:	f04f 30ff 	mov.w	r0, #4294967295
   dec42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dec46:	bf00      	nop
   dec48:	000e0c7c 	.word	0x000e0c7c
   dec4c:	00015180 	.word	0x00015180
   dec50:	2003e7e4 	.word	0x2003e7e4

000dec54 <srand>:
   dec54:	b538      	push	{r3, r4, r5, lr}
   dec56:	4b12      	ldr	r3, [pc, #72]	; (deca0 <srand+0x4c>)
   dec58:	681c      	ldr	r4, [r3, #0]
   dec5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dec5c:	4605      	mov	r5, r0
   dec5e:	b9d3      	cbnz	r3, dec96 <srand+0x42>
   dec60:	2018      	movs	r0, #24
   dec62:	f7fa fe69 	bl	d9938 <malloc>
   dec66:	f243 330e 	movw	r3, #13070	; 0x330e
   dec6a:	63a0      	str	r0, [r4, #56]	; 0x38
   dec6c:	8003      	strh	r3, [r0, #0]
   dec6e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dec72:	8043      	strh	r3, [r0, #2]
   dec74:	f241 2334 	movw	r3, #4660	; 0x1234
   dec78:	8083      	strh	r3, [r0, #4]
   dec7a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dec7e:	80c3      	strh	r3, [r0, #6]
   dec80:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dec84:	8103      	strh	r3, [r0, #8]
   dec86:	2305      	movs	r3, #5
   dec88:	8143      	strh	r3, [r0, #10]
   dec8a:	230b      	movs	r3, #11
   dec8c:	8183      	strh	r3, [r0, #12]
   dec8e:	2201      	movs	r2, #1
   dec90:	2300      	movs	r3, #0
   dec92:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dec96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dec98:	2200      	movs	r2, #0
   dec9a:	611d      	str	r5, [r3, #16]
   dec9c:	615a      	str	r2, [r3, #20]
   dec9e:	bd38      	pop	{r3, r4, r5, pc}
   deca0:	2003be4c 	.word	0x2003be4c

000deca4 <strchr>:
   deca4:	b2c9      	uxtb	r1, r1
   deca6:	4603      	mov	r3, r0
   deca8:	f810 2b01 	ldrb.w	r2, [r0], #1
   decac:	b11a      	cbz	r2, decb6 <strchr+0x12>
   decae:	4291      	cmp	r1, r2
   decb0:	d1f9      	bne.n	deca6 <strchr+0x2>
   decb2:	4618      	mov	r0, r3
   decb4:	4770      	bx	lr
   decb6:	2900      	cmp	r1, #0
   decb8:	bf0c      	ite	eq
   decba:	4618      	moveq	r0, r3
   decbc:	2000      	movne	r0, #0
   decbe:	4770      	bx	lr

000decc0 <strcmp>:
   decc0:	f810 2b01 	ldrb.w	r2, [r0], #1
   decc4:	f811 3b01 	ldrb.w	r3, [r1], #1
   decc8:	2a01      	cmp	r2, #1
   decca:	bf28      	it	cs
   deccc:	429a      	cmpcs	r2, r3
   decce:	d0f7      	beq.n	decc0 <strcmp>
   decd0:	1ad0      	subs	r0, r2, r3
   decd2:	4770      	bx	lr

000decd4 <strcpy>:
   decd4:	4603      	mov	r3, r0
   decd6:	f811 2b01 	ldrb.w	r2, [r1], #1
   decda:	f803 2b01 	strb.w	r2, [r3], #1
   decde:	2a00      	cmp	r2, #0
   dece0:	d1f9      	bne.n	decd6 <strcpy+0x2>
   dece2:	4770      	bx	lr

000dece4 <strdup>:
   dece4:	4b02      	ldr	r3, [pc, #8]	; (decf0 <strdup+0xc>)
   dece6:	4601      	mov	r1, r0
   dece8:	6818      	ldr	r0, [r3, #0]
   decea:	f000 b803 	b.w	decf4 <_strdup_r>
   decee:	bf00      	nop
   decf0:	2003be4c 	.word	0x2003be4c

000decf4 <_strdup_r>:
   decf4:	b570      	push	{r4, r5, r6, lr}
   decf6:	4606      	mov	r6, r0
   decf8:	4608      	mov	r0, r1
   decfa:	460c      	mov	r4, r1
   decfc:	f000 fd22 	bl	df744 <strlen>
   ded00:	1c45      	adds	r5, r0, #1
   ded02:	4629      	mov	r1, r5
   ded04:	4630      	mov	r0, r6
   ded06:	f7fa fe5f 	bl	d99c8 <_malloc_r>
   ded0a:	4606      	mov	r6, r0
   ded0c:	b118      	cbz	r0, ded16 <_strdup_r+0x22>
   ded0e:	462a      	mov	r2, r5
   ded10:	4621      	mov	r1, r4
   ded12:	f7ff fd3e 	bl	de792 <memcpy>
   ded16:	4630      	mov	r0, r6
   ded18:	bd70      	pop	{r4, r5, r6, pc}

000ded1a <iso_year_adjust>:
   ded1a:	6941      	ldr	r1, [r0, #20]
   ded1c:	078b      	lsls	r3, r1, #30
   ded1e:	b510      	push	{r4, lr}
   ded20:	d10c      	bne.n	ded3c <iso_year_adjust+0x22>
   ded22:	2900      	cmp	r1, #0
   ded24:	f240 736c 	movw	r3, #1900	; 0x76c
   ded28:	bfa8      	it	ge
   ded2a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   ded2e:	440b      	add	r3, r1
   ded30:	2464      	movs	r4, #100	; 0x64
   ded32:	fb93 f2f4 	sdiv	r2, r3, r4
   ded36:	fb04 3312 	mls	r3, r4, r2, r3
   ded3a:	b983      	cbnz	r3, ded5e <iso_year_adjust+0x44>
   ded3c:	2900      	cmp	r1, #0
   ded3e:	f240 736c 	movw	r3, #1900	; 0x76c
   ded42:	bfa8      	it	ge
   ded44:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   ded48:	f44f 72c8 	mov.w	r2, #400	; 0x190
   ded4c:	440b      	add	r3, r1
   ded4e:	fb93 f1f2 	sdiv	r1, r3, r2
   ded52:	fb02 3311 	mls	r3, r2, r1, r3
   ded56:	fab3 f283 	clz	r2, r3
   ded5a:	0952      	lsrs	r2, r2, #5
   ded5c:	e000      	b.n	ded60 <iso_year_adjust+0x46>
   ded5e:	2201      	movs	r2, #1
   ded60:	6983      	ldr	r3, [r0, #24]
   ded62:	69c1      	ldr	r1, [r0, #28]
   ded64:	005b      	lsls	r3, r3, #1
   ded66:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   ded6a:	4413      	add	r3, r2
   ded6c:	2b21      	cmp	r3, #33	; 0x21
   ded6e:	dc0e      	bgt.n	ded8e <iso_year_adjust+0x74>
   ded70:	2b20      	cmp	r3, #32
   ded72:	da2f      	bge.n	dedd4 <iso_year_adjust+0xba>
   ded74:	2b0d      	cmp	r3, #13
   ded76:	dc02      	bgt.n	ded7e <iso_year_adjust+0x64>
   ded78:	2b0a      	cmp	r3, #10
   ded7a:	db05      	blt.n	ded88 <iso_year_adjust+0x6e>
   ded7c:	e02a      	b.n	dedd4 <iso_year_adjust+0xba>
   ded7e:	2b10      	cmp	r3, #16
   ded80:	db26      	blt.n	dedd0 <iso_year_adjust+0xb6>
   ded82:	2b11      	cmp	r3, #17
   ded84:	dd26      	ble.n	dedd4 <iso_year_adjust+0xba>
   ded86:	3b1c      	subs	r3, #28
   ded88:	2b01      	cmp	r3, #1
   ded8a:	d923      	bls.n	dedd4 <iso_year_adjust+0xba>
   ded8c:	e020      	b.n	dedd0 <iso_year_adjust+0xb6>
   ded8e:	f241 62c6 	movw	r2, #5830	; 0x16c6
   ded92:	4293      	cmp	r3, r2
   ded94:	dc0e      	bgt.n	dedb4 <iso_year_adjust+0x9a>
   ded96:	f241 62c2 	movw	r2, #5826	; 0x16c2
   ded9a:	4293      	cmp	r3, r2
   ded9c:	da16      	bge.n	dedcc <iso_year_adjust+0xb2>
   ded9e:	f241 62a2 	movw	r2, #5794	; 0x16a2
   deda2:	4293      	cmp	r3, r2
   deda4:	d012      	beq.n	dedcc <iso_year_adjust+0xb2>
   deda6:	db13      	blt.n	dedd0 <iso_year_adjust+0xb6>
   deda8:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   dedac:	3b12      	subs	r3, #18
   dedae:	2b02      	cmp	r3, #2
   dedb0:	d90c      	bls.n	dedcc <iso_year_adjust+0xb2>
   dedb2:	e00d      	b.n	dedd0 <iso_year_adjust+0xb6>
   dedb4:	f241 62d5 	movw	r2, #5845	; 0x16d5
   dedb8:	4293      	cmp	r3, r2
   dedba:	d007      	beq.n	dedcc <iso_year_adjust+0xb2>
   dedbc:	f241 62d7 	movw	r2, #5847	; 0x16d7
   dedc0:	4293      	cmp	r3, r2
   dedc2:	d003      	beq.n	dedcc <iso_year_adjust+0xb2>
   dedc4:	f241 62d3 	movw	r2, #5843	; 0x16d3
   dedc8:	4293      	cmp	r3, r2
   dedca:	d101      	bne.n	dedd0 <iso_year_adjust+0xb6>
   dedcc:	2001      	movs	r0, #1
   dedce:	bd10      	pop	{r4, pc}
   dedd0:	2000      	movs	r0, #0
   dedd2:	bd10      	pop	{r4, pc}
   dedd4:	f04f 30ff 	mov.w	r0, #4294967295
   dedd8:	bd10      	pop	{r4, pc}
	...

000deddc <strftime>:
   deddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dede0:	b093      	sub	sp, #76	; 0x4c
   dede2:	460e      	mov	r6, r1
   dede4:	461d      	mov	r5, r3
   dede6:	4607      	mov	r7, r0
   dede8:	4691      	mov	r9, r2
   dedea:	f000 fdf3 	bl	df9d4 <__get_current_time_locale>
   dedee:	2300      	movs	r3, #0
   dedf0:	9306      	str	r3, [sp, #24]
   dedf2:	461c      	mov	r4, r3
   dedf4:	1e73      	subs	r3, r6, #1
   dedf6:	9003      	str	r0, [sp, #12]
   dedf8:	9302      	str	r3, [sp, #8]
   dedfa:	f899 3000 	ldrb.w	r3, [r9]
   dedfe:	2b00      	cmp	r3, #0
   dee00:	f000 8492 	beq.w	df728 <strftime+0x94c>
   dee04:	2b25      	cmp	r3, #37	; 0x25
   dee06:	d008      	beq.n	dee1a <strftime+0x3e>
   dee08:	9a02      	ldr	r2, [sp, #8]
   dee0a:	4294      	cmp	r4, r2
   dee0c:	f080 8490 	bcs.w	df730 <strftime+0x954>
   dee10:	553b      	strb	r3, [r7, r4]
   dee12:	f109 0901 	add.w	r9, r9, #1
   dee16:	3401      	adds	r4, #1
   dee18:	e7ef      	b.n	dedfa <strftime+0x1e>
   dee1a:	f899 a001 	ldrb.w	sl, [r9, #1]
   dee1e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   dee22:	d007      	beq.n	dee34 <strftime+0x58>
   dee24:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dee28:	d004      	beq.n	dee34 <strftime+0x58>
   dee2a:	f109 0901 	add.w	r9, r9, #1
   dee2e:	f04f 0a00 	mov.w	sl, #0
   dee32:	e001      	b.n	dee38 <strftime+0x5c>
   dee34:	f109 0902 	add.w	r9, r9, #2
   dee38:	f899 3000 	ldrb.w	r3, [r9]
   dee3c:	3b31      	subs	r3, #49	; 0x31
   dee3e:	2b08      	cmp	r3, #8
   dee40:	d808      	bhi.n	dee54 <strftime+0x78>
   dee42:	4648      	mov	r0, r9
   dee44:	220a      	movs	r2, #10
   dee46:	a90a      	add	r1, sp, #40	; 0x28
   dee48:	f000 fdba 	bl	df9c0 <strtoul>
   dee4c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   dee50:	4680      	mov	r8, r0
   dee52:	e001      	b.n	dee58 <strftime+0x7c>
   dee54:	f04f 0800 	mov.w	r8, #0
   dee58:	f899 3000 	ldrb.w	r3, [r9]
   dee5c:	2b45      	cmp	r3, #69	; 0x45
   dee5e:	d001      	beq.n	dee64 <strftime+0x88>
   dee60:	2b4f      	cmp	r3, #79	; 0x4f
   dee62:	d101      	bne.n	dee68 <strftime+0x8c>
   dee64:	f109 0901 	add.w	r9, r9, #1
   dee68:	f899 0000 	ldrb.w	r0, [r9]
   dee6c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   dee70:	2b55      	cmp	r3, #85	; 0x55
   dee72:	f200 845d 	bhi.w	df730 <strftime+0x954>
   dee76:	e8df f013 	tbh	[pc, r3, lsl #1]
   dee7a:	044a      	.short	0x044a
   dee7c:	045b045b 	.word	0x045b045b
   dee80:	045b045b 	.word	0x045b045b
   dee84:	045b045b 	.word	0x045b045b
   dee88:	045b045b 	.word	0x045b045b
   dee8c:	045b045b 	.word	0x045b045b
   dee90:	045b045b 	.word	0x045b045b
   dee94:	045b045b 	.word	0x045b045b
   dee98:	045b045b 	.word	0x045b045b
   dee9c:	045b045b 	.word	0x045b045b
   deea0:	045b045b 	.word	0x045b045b
   deea4:	045b045b 	.word	0x045b045b
   deea8:	045b045b 	.word	0x045b045b
   deeac:	045b045b 	.word	0x045b045b
   deeb0:	006f045b 	.word	0x006f045b
   deeb4:	00d400a1 	.word	0x00d400a1
   deeb8:	045b011a 	.word	0x045b011a
   deebc:	01a0013f 	.word	0x01a0013f
   deec0:	022d0226 	.word	0x022d0226
   deec4:	045b045b 	.word	0x045b045b
   deec8:	0260045b 	.word	0x0260045b
   deecc:	045b045b 	.word	0x045b045b
   deed0:	045b0268 	.word	0x045b0268
   deed4:	031d0297 	.word	0x031d0297
   deed8:	033b0325 	.word	0x033b0325
   deedc:	03860343 	.word	0x03860343
   deee0:	03a000c6 	.word	0x03a000c6
   deee4:	045b041f 	.word	0x045b041f
   deee8:	045b045b 	.word	0x045b045b
   deeec:	045b045b 	.word	0x045b045b
   deef0:	0056045b 	.word	0x0056045b
   deef4:	00ba0089 	.word	0x00ba0089
   deef8:	010c010c 	.word	0x010c010c
   deefc:	0171045b 	.word	0x0171045b
   def00:	045b0089 	.word	0x045b0089
   def04:	0226023d 	.word	0x0226023d
   def08:	025d022d 	.word	0x025d022d
   def0c:	045b0262 	.word	0x045b0262
   def10:	045b0268 	.word	0x045b0268
   def14:	029c00be 	.word	0x029c00be
   def18:	032e031f 	.word	0x032e031f
   def1c:	037f045b 	.word	0x037f045b
   def20:	039200c2 	.word	0x039200c2
   def24:	03e7      	.short	0x03e7
   def26:	69ab      	ldr	r3, [r5, #24]
   def28:	9a03      	ldr	r2, [sp, #12]
   def2a:	3318      	adds	r3, #24
   def2c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   def30:	4640      	mov	r0, r8
   def32:	f000 fc07 	bl	df744 <strlen>
   def36:	f108 38ff 	add.w	r8, r8, #4294967295
   def3a:	193b      	adds	r3, r7, r4
   def3c:	4420      	add	r0, r4
   def3e:	4284      	cmp	r4, r0
   def40:	f000 83eb 	beq.w	df71a <strftime+0x93e>
   def44:	9a02      	ldr	r2, [sp, #8]
   def46:	4294      	cmp	r4, r2
   def48:	f080 83f2 	bcs.w	df730 <strftime+0x954>
   def4c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   def50:	f803 2b01 	strb.w	r2, [r3], #1
   def54:	3401      	adds	r4, #1
   def56:	e7f2      	b.n	def3e <strftime+0x162>
   def58:	69ab      	ldr	r3, [r5, #24]
   def5a:	9a03      	ldr	r2, [sp, #12]
   def5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   def60:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   def64:	4640      	mov	r0, r8
   def66:	f000 fbed 	bl	df744 <strlen>
   def6a:	f108 38ff 	add.w	r8, r8, #4294967295
   def6e:	193b      	adds	r3, r7, r4
   def70:	4420      	add	r0, r4
   def72:	4284      	cmp	r4, r0
   def74:	f000 83d1 	beq.w	df71a <strftime+0x93e>
   def78:	9a02      	ldr	r2, [sp, #8]
   def7a:	4294      	cmp	r4, r2
   def7c:	f080 83d8 	bcs.w	df730 <strftime+0x954>
   def80:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   def84:	f803 2b01 	strb.w	r2, [r3], #1
   def88:	3401      	adds	r4, #1
   def8a:	e7f2      	b.n	def72 <strftime+0x196>
   def8c:	692b      	ldr	r3, [r5, #16]
   def8e:	9a03      	ldr	r2, [sp, #12]
   def90:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   def94:	4640      	mov	r0, r8
   def96:	f000 fbd5 	bl	df744 <strlen>
   def9a:	f108 38ff 	add.w	r8, r8, #4294967295
   def9e:	193b      	adds	r3, r7, r4
   defa0:	4420      	add	r0, r4
   defa2:	4284      	cmp	r4, r0
   defa4:	f000 83b9 	beq.w	df71a <strftime+0x93e>
   defa8:	9a02      	ldr	r2, [sp, #8]
   defaa:	4294      	cmp	r4, r2
   defac:	f080 83c0 	bcs.w	df730 <strftime+0x954>
   defb0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   defb4:	f803 2b01 	strb.w	r2, [r3], #1
   defb8:	3401      	adds	r4, #1
   defba:	e7f2      	b.n	defa2 <strftime+0x1c6>
   defbc:	692b      	ldr	r3, [r5, #16]
   defbe:	9a03      	ldr	r2, [sp, #12]
   defc0:	330c      	adds	r3, #12
   defc2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   defc6:	4640      	mov	r0, r8
   defc8:	f000 fbbc 	bl	df744 <strlen>
   defcc:	f108 38ff 	add.w	r8, r8, #4294967295
   defd0:	193b      	adds	r3, r7, r4
   defd2:	4420      	add	r0, r4
   defd4:	4284      	cmp	r4, r0
   defd6:	f000 83a0 	beq.w	df71a <strftime+0x93e>
   defda:	9a02      	ldr	r2, [sp, #8]
   defdc:	4294      	cmp	r4, r2
   defde:	f080 83a7 	bcs.w	df730 <strftime+0x954>
   defe2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   defe6:	f803 2b01 	strb.w	r2, [r3], #1
   defea:	3401      	adds	r4, #1
   defec:	e7f2      	b.n	defd4 <strftime+0x1f8>
   defee:	9b03      	ldr	r3, [sp, #12]
   deff0:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   deff4:	e00a      	b.n	df00c <strftime+0x230>
   deff6:	9b03      	ldr	r3, [sp, #12]
   deff8:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   deffc:	e006      	b.n	df00c <strftime+0x230>
   deffe:	9b03      	ldr	r3, [sp, #12]
   df000:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   df004:	e002      	b.n	df00c <strftime+0x230>
   df006:	9b03      	ldr	r3, [sp, #12]
   df008:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   df00c:	4640      	mov	r0, r8
   df00e:	f000 fb99 	bl	df744 <strlen>
   df012:	f898 3000 	ldrb.w	r3, [r8]
   df016:	2b00      	cmp	r3, #0
   df018:	f000 837f 	beq.w	df71a <strftime+0x93e>
   df01c:	462b      	mov	r3, r5
   df01e:	4642      	mov	r2, r8
   df020:	e093      	b.n	df14a <strftime+0x36e>
   df022:	49b6      	ldr	r1, [pc, #728]	; (df2fc <strftime+0x520>)
   df024:	f8d5 b014 	ldr.w	fp, [r5, #20]
   df028:	458b      	cmp	fp, r1
   df02a:	bfac      	ite	ge
   df02c:	2100      	movge	r1, #0
   df02e:	2101      	movlt	r1, #1
   df030:	f1bb 0f00 	cmp.w	fp, #0
   df034:	db04      	blt.n	df040 <strftime+0x264>
   df036:	2064      	movs	r0, #100	; 0x64
   df038:	fb9b f0f0 	sdiv	r0, fp, r0
   df03c:	3013      	adds	r0, #19
   df03e:	e008      	b.n	df052 <strftime+0x276>
   df040:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   df044:	9107      	str	r1, [sp, #28]
   df046:	f000 ff05 	bl	dfe54 <abs>
   df04a:	9907      	ldr	r1, [sp, #28]
   df04c:	2364      	movs	r3, #100	; 0x64
   df04e:	fb90 f0f3 	sdiv	r0, r0, r3
   df052:	f1ba 0f00 	cmp.w	sl, #0
   df056:	d008      	beq.n	df06a <strftime+0x28e>
   df058:	2863      	cmp	r0, #99	; 0x63
   df05a:	dd09      	ble.n	df070 <strftime+0x294>
   df05c:	4ba8      	ldr	r3, [pc, #672]	; (df300 <strftime+0x524>)
   df05e:	4aa9      	ldr	r2, [pc, #676]	; (df304 <strftime+0x528>)
   df060:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   df064:	bf18      	it	ne
   df066:	4613      	movne	r3, r2
   df068:	e003      	b.n	df072 <strftime+0x296>
   df06a:	4ba6      	ldr	r3, [pc, #664]	; (df304 <strftime+0x528>)
   df06c:	4aa6      	ldr	r2, [pc, #664]	; (df308 <strftime+0x52c>)
   df06e:	e001      	b.n	df074 <strftime+0x298>
   df070:	4ba4      	ldr	r3, [pc, #656]	; (df304 <strftime+0x528>)
   df072:	4aa6      	ldr	r2, [pc, #664]	; (df30c <strftime+0x530>)
   df074:	9001      	str	r0, [sp, #4]
   df076:	f1b8 0f01 	cmp.w	r8, #1
   df07a:	bf98      	it	ls
   df07c:	f04f 0802 	movls.w	r8, #2
   df080:	ebc1 0108 	rsb	r1, r1, r8
   df084:	9100      	str	r1, [sp, #0]
   df086:	489d      	ldr	r0, [pc, #628]	; (df2fc <strftime+0x520>)
   df088:	49a1      	ldr	r1, [pc, #644]	; (df310 <strftime+0x534>)
   df08a:	4583      	cmp	fp, r0
   df08c:	bfb8      	it	lt
   df08e:	460b      	movlt	r3, r1
   df090:	e21e      	b.n	df4d0 <strftime+0x6f4>
   df092:	4aa0      	ldr	r2, [pc, #640]	; (df314 <strftime+0x538>)
   df094:	49a0      	ldr	r1, [pc, #640]	; (df318 <strftime+0x53c>)
   df096:	68eb      	ldr	r3, [r5, #12]
   df098:	2864      	cmp	r0, #100	; 0x64
   df09a:	bf08      	it	eq
   df09c:	460a      	moveq	r2, r1
   df09e:	1b31      	subs	r1, r6, r4
   df0a0:	1938      	adds	r0, r7, r4
   df0a2:	f7fa fc79 	bl	d9998 <sniprintf>
   df0a6:	2800      	cmp	r0, #0
   df0a8:	f280 8302 	bge.w	df6b0 <strftime+0x8d4>
   df0ac:	e340      	b.n	df730 <strftime+0x954>
   df0ae:	6968      	ldr	r0, [r5, #20]
   df0b0:	692b      	ldr	r3, [r5, #16]
   df0b2:	2800      	cmp	r0, #0
   df0b4:	f103 0b01 	add.w	fp, r3, #1
   df0b8:	eb07 0804 	add.w	r8, r7, r4
   df0bc:	ebc4 0a06 	rsb	sl, r4, r6
   df0c0:	68eb      	ldr	r3, [r5, #12]
   df0c2:	db05      	blt.n	df0d0 <strftime+0x2f4>
   df0c4:	2264      	movs	r2, #100	; 0x64
   df0c6:	fb90 f1f2 	sdiv	r1, r0, r2
   df0ca:	fb02 0011 	mls	r0, r2, r1, r0
   df0ce:	e00a      	b.n	df0e6 <strftime+0x30a>
   df0d0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   df0d4:	9307      	str	r3, [sp, #28]
   df0d6:	f000 febd 	bl	dfe54 <abs>
   df0da:	2264      	movs	r2, #100	; 0x64
   df0dc:	9b07      	ldr	r3, [sp, #28]
   df0de:	fb90 f1f2 	sdiv	r1, r0, r2
   df0e2:	fb01 0012 	mls	r0, r1, r2, r0
   df0e6:	4a8d      	ldr	r2, [pc, #564]	; (df31c <strftime+0x540>)
   df0e8:	9001      	str	r0, [sp, #4]
   df0ea:	9300      	str	r3, [sp, #0]
   df0ec:	4651      	mov	r1, sl
   df0ee:	465b      	mov	r3, fp
   df0f0:	4640      	mov	r0, r8
   df0f2:	f7fa fc51 	bl	d9998 <sniprintf>
   df0f6:	e7d6      	b.n	df0a6 <strftime+0x2ca>
   df0f8:	2325      	movs	r3, #37	; 0x25
   df0fa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   df0fe:	f1ba 0f00 	cmp.w	sl, #0
   df102:	d007      	beq.n	df114 <strftime+0x338>
   df104:	f1b8 0f05 	cmp.w	r8, #5
   df108:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   df10c:	bf98      	it	ls
   df10e:	f04f 0806 	movls.w	r8, #6
   df112:	e004      	b.n	df11e <strftime+0x342>
   df114:	232b      	movs	r3, #43	; 0x2b
   df116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   df11a:	f04f 080a 	mov.w	r8, #10
   df11e:	f1b8 0306 	subs.w	r3, r8, #6
   df122:	d102      	bne.n	df12a <strftime+0x34e>
   df124:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   df128:	e00a      	b.n	df140 <strftime+0x364>
   df12a:	4a7d      	ldr	r2, [pc, #500]	; (df320 <strftime+0x544>)
   df12c:	211e      	movs	r1, #30
   df12e:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   df132:	f7fa fc31 	bl	d9998 <sniprintf>
   df136:	2800      	cmp	r0, #0
   df138:	ddf4      	ble.n	df124 <strftime+0x348>
   df13a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   df13e:	4418      	add	r0, r3
   df140:	4978      	ldr	r1, [pc, #480]	; (df324 <strftime+0x548>)
   df142:	f7ff fdc7 	bl	decd4 <strcpy>
   df146:	462b      	mov	r3, r5
   df148:	aa0a      	add	r2, sp, #40	; 0x28
   df14a:	1b31      	subs	r1, r6, r4
   df14c:	1938      	adds	r0, r7, r4
   df14e:	f7ff fe45 	bl	deddc <strftime>
   df152:	2800      	cmp	r0, #0
   df154:	f340 82ec 	ble.w	df730 <strftime+0x954>
   df158:	4404      	add	r4, r0
   df15a:	e2de      	b.n	df71a <strftime+0x93e>
   df15c:	4628      	mov	r0, r5
   df15e:	f7ff fddc 	bl	ded1a <iso_year_adjust>
   df162:	4680      	mov	r8, r0
   df164:	6968      	ldr	r0, [r5, #20]
   df166:	2800      	cmp	r0, #0
   df168:	db05      	blt.n	df176 <strftime+0x39a>
   df16a:	2264      	movs	r2, #100	; 0x64
   df16c:	fb90 f1f2 	sdiv	r1, r0, r2
   df170:	fb02 0011 	mls	r0, r2, r1, r0
   df174:	e008      	b.n	df188 <strftime+0x3ac>
   df176:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   df17a:	f000 fe6b 	bl	dfe54 <abs>
   df17e:	2264      	movs	r2, #100	; 0x64
   df180:	fb90 f3f2 	sdiv	r3, r0, r2
   df184:	fb03 0012 	mls	r0, r3, r2, r0
   df188:	f1b8 0f00 	cmp.w	r8, #0
   df18c:	da06      	bge.n	df19c <strftime+0x3c0>
   df18e:	696a      	ldr	r2, [r5, #20]
   df190:	4b65      	ldr	r3, [pc, #404]	; (df328 <strftime+0x54c>)
   df192:	429a      	cmp	r2, r3
   df194:	bfb8      	it	lt
   df196:	f04f 0801 	movlt.w	r8, #1
   df19a:	e006      	b.n	df1aa <strftime+0x3ce>
   df19c:	d005      	beq.n	df1aa <strftime+0x3ce>
   df19e:	696a      	ldr	r2, [r5, #20]
   df1a0:	4b56      	ldr	r3, [pc, #344]	; (df2fc <strftime+0x520>)
   df1a2:	429a      	cmp	r2, r3
   df1a4:	bfb8      	it	lt
   df1a6:	f04f 38ff 	movlt.w	r8, #4294967295
   df1aa:	2364      	movs	r3, #100	; 0x64
   df1ac:	4440      	add	r0, r8
   df1ae:	fb90 f2f3 	sdiv	r2, r0, r3
   df1b2:	fb03 0012 	mls	r0, r3, r2, r0
   df1b6:	4418      	add	r0, r3
   df1b8:	e1f9      	b.n	df5ae <strftime+0x7d2>
   df1ba:	4b50      	ldr	r3, [pc, #320]	; (df2fc <strftime+0x520>)
   df1bc:	6969      	ldr	r1, [r5, #20]
   df1be:	9108      	str	r1, [sp, #32]
   df1c0:	4299      	cmp	r1, r3
   df1c2:	bfac      	ite	ge
   df1c4:	2300      	movge	r3, #0
   df1c6:	2301      	movlt	r3, #1
   df1c8:	4628      	mov	r0, r5
   df1ca:	9307      	str	r3, [sp, #28]
   df1cc:	f7ff fda5 	bl	ded1a <iso_year_adjust>
   df1d0:	9908      	ldr	r1, [sp, #32]
   df1d2:	2900      	cmp	r1, #0
   df1d4:	4683      	mov	fp, r0
   df1d6:	db04      	blt.n	df1e2 <strftime+0x406>
   df1d8:	2364      	movs	r3, #100	; 0x64
   df1da:	fb91 f3f3 	sdiv	r3, r1, r3
   df1de:	3313      	adds	r3, #19
   df1e0:	e008      	b.n	df1f4 <strftime+0x418>
   df1e2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   df1e6:	9108      	str	r1, [sp, #32]
   df1e8:	f000 fe34 	bl	dfe54 <abs>
   df1ec:	9908      	ldr	r1, [sp, #32]
   df1ee:	2364      	movs	r3, #100	; 0x64
   df1f0:	fb90 f3f3 	sdiv	r3, r0, r3
   df1f4:	6968      	ldr	r0, [r5, #20]
   df1f6:	2800      	cmp	r0, #0
   df1f8:	db06      	blt.n	df208 <strftime+0x42c>
   df1fa:	f04f 0e64 	mov.w	lr, #100	; 0x64
   df1fe:	fb90 fcfe 	sdiv	ip, r0, lr
   df202:	fb0e 001c 	mls	r0, lr, ip, r0
   df206:	e00d      	b.n	df224 <strftime+0x448>
   df208:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   df20c:	9109      	str	r1, [sp, #36]	; 0x24
   df20e:	9308      	str	r3, [sp, #32]
   df210:	f000 fe20 	bl	dfe54 <abs>
   df214:	f04f 0e64 	mov.w	lr, #100	; 0x64
   df218:	9909      	ldr	r1, [sp, #36]	; 0x24
   df21a:	9b08      	ldr	r3, [sp, #32]
   df21c:	fb90 fcfe 	sdiv	ip, r0, lr
   df220:	fb0c 001e 	mls	r0, ip, lr, r0
   df224:	f1bb 0f00 	cmp.w	fp, #0
   df228:	da08      	bge.n	df23c <strftime+0x460>
   df22a:	6969      	ldr	r1, [r5, #20]
   df22c:	4a3e      	ldr	r2, [pc, #248]	; (df328 <strftime+0x54c>)
   df22e:	4291      	cmp	r1, r2
   df230:	da0a      	bge.n	df248 <strftime+0x46c>
   df232:	f04f 0b01 	mov.w	fp, #1
   df236:	f8cd b01c 	str.w	fp, [sp, #28]
   df23a:	e005      	b.n	df248 <strftime+0x46c>
   df23c:	d004      	beq.n	df248 <strftime+0x46c>
   df23e:	4a2f      	ldr	r2, [pc, #188]	; (df2fc <strftime+0x520>)
   df240:	4291      	cmp	r1, r2
   df242:	bfb8      	it	lt
   df244:	f04f 3bff 	movlt.w	fp, #4294967295
   df248:	eb0b 0200 	add.w	r2, fp, r0
   df24c:	1c50      	adds	r0, r2, #1
   df24e:	d102      	bne.n	df256 <strftime+0x47a>
   df250:	3b01      	subs	r3, #1
   df252:	2263      	movs	r2, #99	; 0x63
   df254:	e003      	b.n	df25e <strftime+0x482>
   df256:	2a64      	cmp	r2, #100	; 0x64
   df258:	bf04      	itt	eq
   df25a:	3301      	addeq	r3, #1
   df25c:	2200      	moveq	r2, #0
   df25e:	2064      	movs	r0, #100	; 0x64
   df260:	fb00 2303 	mla	r3, r0, r3, r2
   df264:	9a07      	ldr	r2, [sp, #28]
   df266:	b142      	cbz	r2, df27a <strftime+0x49e>
   df268:	222d      	movs	r2, #45	; 0x2d
   df26a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   df26e:	f1b8 0f00 	cmp.w	r8, #0
   df272:	d013      	beq.n	df29c <strftime+0x4c0>
   df274:	f108 38ff 	add.w	r8, r8, #4294967295
   df278:	e010      	b.n	df29c <strftime+0x4c0>
   df27a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   df27e:	d110      	bne.n	df2a2 <strftime+0x4c6>
   df280:	f242 720f 	movw	r2, #9999	; 0x270f
   df284:	4293      	cmp	r3, r2
   df286:	d90c      	bls.n	df2a2 <strftime+0x4c6>
   df288:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   df28c:	f1b8 0f00 	cmp.w	r8, #0
   df290:	d1f0      	bne.n	df274 <strftime+0x498>
   df292:	aa12      	add	r2, sp, #72	; 0x48
   df294:	2125      	movs	r1, #37	; 0x25
   df296:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   df29a:	e00a      	b.n	df2b2 <strftime+0x4d6>
   df29c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   df2a0:	e000      	b.n	df2a4 <strftime+0x4c8>
   df2a2:	aa0a      	add	r2, sp, #40	; 0x28
   df2a4:	2125      	movs	r1, #37	; 0x25
   df2a6:	7011      	strb	r1, [r2, #0]
   df2a8:	f1ba 0f00 	cmp.w	sl, #0
   df2ac:	d101      	bne.n	df2b2 <strftime+0x4d6>
   df2ae:	1c50      	adds	r0, r2, #1
   df2b0:	e002      	b.n	df2b8 <strftime+0x4dc>
   df2b2:	2130      	movs	r1, #48	; 0x30
   df2b4:	1c90      	adds	r0, r2, #2
   df2b6:	7051      	strb	r1, [r2, #1]
   df2b8:	491c      	ldr	r1, [pc, #112]	; (df32c <strftime+0x550>)
   df2ba:	9307      	str	r3, [sp, #28]
   df2bc:	f7ff fd0a 	bl	decd4 <strcpy>
   df2c0:	9b07      	ldr	r3, [sp, #28]
   df2c2:	9300      	str	r3, [sp, #0]
   df2c4:	e1ad      	b.n	df622 <strftime+0x846>
   df2c6:	4a14      	ldr	r2, [pc, #80]	; (df318 <strftime+0x53c>)
   df2c8:	4912      	ldr	r1, [pc, #72]	; (df314 <strftime+0x538>)
   df2ca:	68ab      	ldr	r3, [r5, #8]
   df2cc:	286b      	cmp	r0, #107	; 0x6b
   df2ce:	bf08      	it	eq
   df2d0:	460a      	moveq	r2, r1
   df2d2:	e6e4      	b.n	df09e <strftime+0x2c2>
   df2d4:	68a9      	ldr	r1, [r5, #8]
   df2d6:	230c      	movs	r3, #12
   df2d8:	b131      	cbz	r1, df2e8 <strftime+0x50c>
   df2da:	4299      	cmp	r1, r3
   df2dc:	bf0e      	itee	eq
   df2de:	460b      	moveq	r3, r1
   df2e0:	fb91 f2f3 	sdivne	r2, r1, r3
   df2e4:	fb03 1312 	mlsne	r3, r3, r2, r1
   df2e8:	4a0a      	ldr	r2, [pc, #40]	; (df314 <strftime+0x538>)
   df2ea:	490b      	ldr	r1, [pc, #44]	; (df318 <strftime+0x53c>)
   df2ec:	2849      	cmp	r0, #73	; 0x49
   df2ee:	bf08      	it	eq
   df2f0:	460a      	moveq	r2, r1
   df2f2:	e6d4      	b.n	df09e <strftime+0x2c2>
   df2f4:	69eb      	ldr	r3, [r5, #28]
   df2f6:	4a0e      	ldr	r2, [pc, #56]	; (df330 <strftime+0x554>)
   df2f8:	3301      	adds	r3, #1
   df2fa:	e6d0      	b.n	df09e <strftime+0x2c2>
   df2fc:	fffff894 	.word	0xfffff894
   df300:	000e0d4b 	.word	0x000e0d4b
   df304:	000e06ec 	.word	0x000e06ec
   df308:	000e0d3c 	.word	0x000e0d3c
   df30c:	000e0d43 	.word	0x000e0d43
   df310:	000e054c 	.word	0x000e054c
   df314:	000e0d4d 	.word	0x000e0d4d
   df318:	000e0d5b 	.word	0x000e0d5b
   df31c:	000e0d51 	.word	0x000e0d51
   df320:	000e0d60 	.word	0x000e0d60
   df324:	000e0d64 	.word	0x000e0d64
   df328:	fffff895 	.word	0xfffff895
   df32c:	000e0d6c 	.word	0x000e0d6c
   df330:	000e0d70 	.word	0x000e0d70
   df334:	692b      	ldr	r3, [r5, #16]
   df336:	3301      	adds	r3, #1
   df338:	e13d      	b.n	df5b6 <strftime+0x7da>
   df33a:	686b      	ldr	r3, [r5, #4]
   df33c:	e13b      	b.n	df5b6 <strftime+0x7da>
   df33e:	9b02      	ldr	r3, [sp, #8]
   df340:	429c      	cmp	r4, r3
   df342:	f080 81f5 	bcs.w	df730 <strftime+0x954>
   df346:	230a      	movs	r3, #10
   df348:	e1e5      	b.n	df716 <strftime+0x93a>
   df34a:	68ab      	ldr	r3, [r5, #8]
   df34c:	9a03      	ldr	r2, [sp, #12]
   df34e:	2b0b      	cmp	r3, #11
   df350:	bfcc      	ite	gt
   df352:	23a4      	movgt	r3, #164	; 0xa4
   df354:	23a0      	movle	r3, #160	; 0xa0
   df356:	4413      	add	r3, r2
   df358:	f8d3 8004 	ldr.w	r8, [r3, #4]
   df35c:	4640      	mov	r0, r8
   df35e:	f000 f9f1 	bl	df744 <strlen>
   df362:	4bb2      	ldr	r3, [pc, #712]	; (df62c <strftime+0x850>)
   df364:	f8d3 e000 	ldr.w	lr, [r3]
   df368:	1939      	adds	r1, r7, r4
   df36a:	4642      	mov	r2, r8
   df36c:	4420      	add	r0, r4
   df36e:	4284      	cmp	r4, r0
   df370:	f000 81d3 	beq.w	df71a <strftime+0x93e>
   df374:	9b02      	ldr	r3, [sp, #8]
   df376:	429c      	cmp	r4, r3
   df378:	f080 81da 	bcs.w	df730 <strftime+0x954>
   df37c:	f899 3000 	ldrb.w	r3, [r9]
   df380:	2b50      	cmp	r3, #80	; 0x50
   df382:	f104 0401 	add.w	r4, r4, #1
   df386:	7813      	ldrb	r3, [r2, #0]
   df388:	d10a      	bne.n	df3a0 <strftime+0x5c4>
   df38a:	eb0e 0c03 	add.w	ip, lr, r3
   df38e:	f89c c001 	ldrb.w	ip, [ip, #1]
   df392:	f00c 0c03 	and.w	ip, ip, #3
   df396:	f1bc 0f01 	cmp.w	ip, #1
   df39a:	bf08      	it	eq
   df39c:	3320      	addeq	r3, #32
   df39e:	b2db      	uxtb	r3, r3
   df3a0:	f801 3b01 	strb.w	r3, [r1], #1
   df3a4:	3201      	adds	r2, #1
   df3a6:	e7e2      	b.n	df36e <strftime+0x592>
   df3a8:	686b      	ldr	r3, [r5, #4]
   df3aa:	9300      	str	r3, [sp, #0]
   df3ac:	4aa0      	ldr	r2, [pc, #640]	; (df630 <strftime+0x854>)
   df3ae:	68ab      	ldr	r3, [r5, #8]
   df3b0:	e139      	b.n	df626 <strftime+0x84a>
   df3b2:	6a2b      	ldr	r3, [r5, #32]
   df3b4:	2b00      	cmp	r3, #0
   df3b6:	db17      	blt.n	df3e8 <strftime+0x60c>
   df3b8:	f000 fbc4 	bl	dfb44 <__tz_lock>
   df3bc:	9b06      	ldr	r3, [sp, #24]
   df3be:	b91b      	cbnz	r3, df3c8 <strftime+0x5ec>
   df3c0:	f000 fbc2 	bl	dfb48 <_tzset_unlocked>
   df3c4:	2301      	movs	r3, #1
   df3c6:	9306      	str	r3, [sp, #24]
   df3c8:	f000 fda0 	bl	dff0c <__gettzinfo>
   df3cc:	6a2b      	ldr	r3, [r5, #32]
   df3ce:	2b00      	cmp	r3, #0
   df3d0:	bfd4      	ite	le
   df3d2:	2300      	movle	r3, #0
   df3d4:	2301      	movgt	r3, #1
   df3d6:	221c      	movs	r2, #28
   df3d8:	fb02 0003 	mla	r0, r2, r3, r0
   df3dc:	6a03      	ldr	r3, [r0, #32]
   df3de:	f1c3 0800 	rsb	r8, r3, #0
   df3e2:	f000 fbb0 	bl	dfb46 <__tz_unlock>
   df3e6:	e001      	b.n	df3ec <strftime+0x610>
   df3e8:	f04f 0800 	mov.w	r8, #0
   df3ec:	f8d5 e014 	ldr.w	lr, [r5, #20]
   df3f0:	4670      	mov	r0, lr
   df3f2:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   df3f6:	ea4f 71e0 	mov.w	r1, r0, asr #31
   df3fa:	f141 33ff 	adc.w	r3, r1, #4294967295
   df3fe:	2a00      	cmp	r2, #0
   df400:	f173 0b00 	sbcs.w	fp, r3, #0
   df404:	ebc4 0c06 	rsb	ip, r4, r6
   df408:	eb07 0a04 	add.w	sl, r7, r4
   df40c:	da03      	bge.n	df416 <strftime+0x63a>
   df40e:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   df412:	f141 33ff 	adc.w	r3, r1, #4294967295
   df416:	0891      	lsrs	r1, r2, #2
   df418:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   df41c:	109b      	asrs	r3, r3, #2
   df41e:	9104      	str	r1, [sp, #16]
   df420:	9305      	str	r3, [sp, #20]
   df422:	f10e 31ff 	add.w	r1, lr, #4294967295
   df426:	2364      	movs	r3, #100	; 0x64
   df428:	fb91 f1f3 	sdiv	r1, r1, r3
   df42c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   df430:	1a52      	subs	r2, r2, r1
   df432:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   df436:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   df43a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   df43e:	fb90 f1f1 	sdiv	r1, r0, r1
   df442:	1852      	adds	r2, r2, r1
   df444:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   df448:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   df44c:	f240 116d 	movw	r1, #365	; 0x16d
   df450:	fb01 fe0e 	mul.w	lr, r1, lr
   df454:	69e9      	ldr	r1, [r5, #28]
   df456:	eb12 020e 	adds.w	r2, r2, lr
   df45a:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   df45e:	1852      	adds	r2, r2, r1
   df460:	f04f 0e18 	mov.w	lr, #24
   df464:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   df468:	fba2 010e 	umull	r0, r1, r2, lr
   df46c:	fb0e 1103 	mla	r1, lr, r3, r1
   df470:	68ab      	ldr	r3, [r5, #8]
   df472:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   df476:	18c0      	adds	r0, r0, r3
   df478:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   df47c:	fba0 230e 	umull	r2, r3, r0, lr
   df480:	fb0e 3301 	mla	r3, lr, r1, r3
   df484:	6869      	ldr	r1, [r5, #4]
   df486:	1852      	adds	r2, r2, r1
   df488:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   df48c:	fba2 010e 	umull	r0, r1, r2, lr
   df490:	fb0e 1103 	mla	r1, lr, r3, r1
   df494:	682b      	ldr	r3, [r5, #0]
   df496:	4a67      	ldr	r2, [pc, #412]	; (df634 <strftime+0x858>)
   df498:	18c0      	adds	r0, r0, r3
   df49a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   df49e:	ebb0 0008 	subs.w	r0, r0, r8
   df4a2:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   df4a6:	e9cd 0100 	strd	r0, r1, [sp]
   df4aa:	4661      	mov	r1, ip
   df4ac:	4650      	mov	r0, sl
   df4ae:	f7fa fa73 	bl	d9998 <sniprintf>
   df4b2:	e5f8      	b.n	df0a6 <strftime+0x2ca>
   df4b4:	682b      	ldr	r3, [r5, #0]
   df4b6:	e07e      	b.n	df5b6 <strftime+0x7da>
   df4b8:	9b02      	ldr	r3, [sp, #8]
   df4ba:	429c      	cmp	r4, r3
   df4bc:	f080 8138 	bcs.w	df730 <strftime+0x954>
   df4c0:	2309      	movs	r3, #9
   df4c2:	e128      	b.n	df716 <strftime+0x93a>
   df4c4:	682b      	ldr	r3, [r5, #0]
   df4c6:	9301      	str	r3, [sp, #4]
   df4c8:	686b      	ldr	r3, [r5, #4]
   df4ca:	9300      	str	r3, [sp, #0]
   df4cc:	4a5a      	ldr	r2, [pc, #360]	; (df638 <strftime+0x85c>)
   df4ce:	68ab      	ldr	r3, [r5, #8]
   df4d0:	1b31      	subs	r1, r6, r4
   df4d2:	1938      	adds	r0, r7, r4
   df4d4:	e60d      	b.n	df0f2 <strftime+0x316>
   df4d6:	9b02      	ldr	r3, [sp, #8]
   df4d8:	429c      	cmp	r4, r3
   df4da:	f080 8129 	bcs.w	df730 <strftime+0x954>
   df4de:	69ab      	ldr	r3, [r5, #24]
   df4e0:	1c62      	adds	r2, r4, #1
   df4e2:	b90b      	cbnz	r3, df4e8 <strftime+0x70c>
   df4e4:	2337      	movs	r3, #55	; 0x37
   df4e6:	e000      	b.n	df4ea <strftime+0x70e>
   df4e8:	3330      	adds	r3, #48	; 0x30
   df4ea:	553b      	strb	r3, [r7, r4]
   df4ec:	4614      	mov	r4, r2
   df4ee:	e114      	b.n	df71a <strftime+0x93e>
   df4f0:	69eb      	ldr	r3, [r5, #28]
   df4f2:	69aa      	ldr	r2, [r5, #24]
   df4f4:	3307      	adds	r3, #7
   df4f6:	1a9b      	subs	r3, r3, r2
   df4f8:	2207      	movs	r2, #7
   df4fa:	fb93 f3f2 	sdiv	r3, r3, r2
   df4fe:	e05a      	b.n	df5b6 <strftime+0x7da>
   df500:	4628      	mov	r0, r5
   df502:	f7ff fc0a 	bl	ded1a <iso_year_adjust>
   df506:	69aa      	ldr	r2, [r5, #24]
   df508:	b10a      	cbz	r2, df50e <strftime+0x732>
   df50a:	1e53      	subs	r3, r2, #1
   df50c:	e000      	b.n	df510 <strftime+0x734>
   df50e:	2306      	movs	r3, #6
   df510:	2800      	cmp	r0, #0
   df512:	dc2f      	bgt.n	df574 <strftime+0x798>
   df514:	69ea      	ldr	r2, [r5, #28]
   df516:	d101      	bne.n	df51c <strftime+0x740>
   df518:	320a      	adds	r2, #10
   df51a:	e03b      	b.n	df594 <strftime+0x7b8>
   df51c:	1a9a      	subs	r2, r3, r2
   df51e:	696b      	ldr	r3, [r5, #20]
   df520:	f240 716b 	movw	r1, #1899	; 0x76b
   df524:	2b00      	cmp	r3, #0
   df526:	bfb4      	ite	lt
   df528:	4608      	movlt	r0, r1
   df52a:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   df52e:	4418      	add	r0, r3
   df530:	0781      	lsls	r1, r0, #30
   df532:	d107      	bne.n	df544 <strftime+0x768>
   df534:	4601      	mov	r1, r0
   df536:	f04f 0e64 	mov.w	lr, #100	; 0x64
   df53a:	fb90 f0fe 	sdiv	r0, r0, lr
   df53e:	fb0e 1110 	mls	r1, lr, r0, r1
   df542:	b981      	cbnz	r1, df566 <strftime+0x78a>
   df544:	2b00      	cmp	r3, #0
   df546:	f240 716b 	movw	r1, #1899	; 0x76b
   df54a:	bfa8      	it	ge
   df54c:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   df550:	4419      	add	r1, r3
   df552:	f44f 73c8 	mov.w	r3, #400	; 0x190
   df556:	fb91 f0f3 	sdiv	r0, r1, r3
   df55a:	fb03 1110 	mls	r1, r3, r0, r1
   df55e:	fab1 f181 	clz	r1, r1
   df562:	0949      	lsrs	r1, r1, #5
   df564:	e000      	b.n	df568 <strftime+0x78c>
   df566:	2101      	movs	r1, #1
   df568:	1a52      	subs	r2, r2, r1
   df56a:	2a05      	cmp	r2, #5
   df56c:	bfb4      	ite	lt
   df56e:	2335      	movlt	r3, #53	; 0x35
   df570:	2334      	movge	r3, #52	; 0x34
   df572:	e020      	b.n	df5b6 <strftime+0x7da>
   df574:	2301      	movs	r3, #1
   df576:	e01e      	b.n	df5b6 <strftime+0x7da>
   df578:	9b02      	ldr	r3, [sp, #8]
   df57a:	429c      	cmp	r4, r3
   df57c:	f080 80d8 	bcs.w	df730 <strftime+0x954>
   df580:	69ab      	ldr	r3, [r5, #24]
   df582:	3330      	adds	r3, #48	; 0x30
   df584:	e0c7      	b.n	df716 <strftime+0x93a>
   df586:	69aa      	ldr	r2, [r5, #24]
   df588:	b10a      	cbz	r2, df58e <strftime+0x7b2>
   df58a:	1e53      	subs	r3, r2, #1
   df58c:	e000      	b.n	df590 <strftime+0x7b4>
   df58e:	2306      	movs	r3, #6
   df590:	69ea      	ldr	r2, [r5, #28]
   df592:	3207      	adds	r2, #7
   df594:	1ad2      	subs	r2, r2, r3
   df596:	2307      	movs	r3, #7
   df598:	fb92 f3f3 	sdiv	r3, r2, r3
   df59c:	e00b      	b.n	df5b6 <strftime+0x7da>
   df59e:	6968      	ldr	r0, [r5, #20]
   df5a0:	2800      	cmp	r0, #0
   df5a2:	da03      	bge.n	df5ac <strftime+0x7d0>
   df5a4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   df5a8:	f000 fc54 	bl	dfe54 <abs>
   df5ac:	2364      	movs	r3, #100	; 0x64
   df5ae:	fb90 f2f3 	sdiv	r2, r0, r3
   df5b2:	fb02 0313 	mls	r3, r2, r3, r0
   df5b6:	4a21      	ldr	r2, [pc, #132]	; (df63c <strftime+0x860>)
   df5b8:	e571      	b.n	df09e <strftime+0x2c2>
   df5ba:	696b      	ldr	r3, [r5, #20]
   df5bc:	4a20      	ldr	r2, [pc, #128]	; (df640 <strftime+0x864>)
   df5be:	4293      	cmp	r3, r2
   df5c0:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   df5c4:	da05      	bge.n	df5d2 <strftime+0x7f6>
   df5c6:	232d      	movs	r3, #45	; 0x2d
   df5c8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   df5cc:	f1cb 0b00 	rsb	fp, fp, #0
   df5d0:	e008      	b.n	df5e4 <strftime+0x808>
   df5d2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   df5d6:	d10d      	bne.n	df5f4 <strftime+0x818>
   df5d8:	f242 730f 	movw	r3, #9999	; 0x270f
   df5dc:	459b      	cmp	fp, r3
   df5de:	d911      	bls.n	df604 <strftime+0x828>
   df5e0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   df5e4:	f1b8 0f00 	cmp.w	r8, #0
   df5e8:	d001      	beq.n	df5ee <strftime+0x812>
   df5ea:	f108 38ff 	add.w	r8, r8, #4294967295
   df5ee:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   df5f2:	e000      	b.n	df5f6 <strftime+0x81a>
   df5f4:	ab0a      	add	r3, sp, #40	; 0x28
   df5f6:	2225      	movs	r2, #37	; 0x25
   df5f8:	701a      	strb	r2, [r3, #0]
   df5fa:	f1ba 0f00 	cmp.w	sl, #0
   df5fe:	d108      	bne.n	df612 <strftime+0x836>
   df600:	1c58      	adds	r0, r3, #1
   df602:	e009      	b.n	df618 <strftime+0x83c>
   df604:	f1b8 0f00 	cmp.w	r8, #0
   df608:	d1f4      	bne.n	df5f4 <strftime+0x818>
   df60a:	2325      	movs	r3, #37	; 0x25
   df60c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   df610:	ab0a      	add	r3, sp, #40	; 0x28
   df612:	2230      	movs	r2, #48	; 0x30
   df614:	1c98      	adds	r0, r3, #2
   df616:	705a      	strb	r2, [r3, #1]
   df618:	490a      	ldr	r1, [pc, #40]	; (df644 <strftime+0x868>)
   df61a:	f7ff fb5b 	bl	decd4 <strcpy>
   df61e:	f8cd b000 	str.w	fp, [sp]
   df622:	4643      	mov	r3, r8
   df624:	aa0a      	add	r2, sp, #40	; 0x28
   df626:	1b31      	subs	r1, r6, r4
   df628:	1938      	adds	r0, r7, r4
   df62a:	e03e      	b.n	df6aa <strftime+0x8ce>
   df62c:	2003bde8 	.word	0x2003bde8
   df630:	000e0d7f 	.word	0x000e0d7f
   df634:	000e0d75 	.word	0x000e0d75
   df638:	000e0d7a 	.word	0x000e0d7a
   df63c:	000e0d5b 	.word	0x000e0d5b
   df640:	fffff894 	.word	0xfffff894
   df644:	000e0d6c 	.word	0x000e0d6c
   df648:	6a2b      	ldr	r3, [r5, #32]
   df64a:	2b00      	cmp	r3, #0
   df64c:	db65      	blt.n	df71a <strftime+0x93e>
   df64e:	f000 fa79 	bl	dfb44 <__tz_lock>
   df652:	9b06      	ldr	r3, [sp, #24]
   df654:	b91b      	cbnz	r3, df65e <strftime+0x882>
   df656:	f000 fa77 	bl	dfb48 <_tzset_unlocked>
   df65a:	2301      	movs	r3, #1
   df65c:	9306      	str	r3, [sp, #24]
   df65e:	f000 fc55 	bl	dff0c <__gettzinfo>
   df662:	6a2b      	ldr	r3, [r5, #32]
   df664:	2b00      	cmp	r3, #0
   df666:	bfd4      	ite	le
   df668:	2300      	movle	r3, #0
   df66a:	2301      	movgt	r3, #1
   df66c:	221c      	movs	r2, #28
   df66e:	fb02 0003 	mla	r0, r2, r3, r0
   df672:	eb07 0a04 	add.w	sl, r7, r4
   df676:	6a03      	ldr	r3, [r0, #32]
   df678:	f1c3 0800 	rsb	r8, r3, #0
   df67c:	f000 fa63 	bl	dfb46 <__tz_unlock>
   df680:	233c      	movs	r3, #60	; 0x3c
   df682:	fb98 f0f3 	sdiv	r0, r8, r3
   df686:	9307      	str	r3, [sp, #28]
   df688:	f000 fcdc 	bl	e0044 <labs>
   df68c:	9b07      	ldr	r3, [sp, #28]
   df68e:	fb90 f2f3 	sdiv	r2, r0, r3
   df692:	ebc4 0b06 	rsb	fp, r4, r6
   df696:	fb02 0013 	mls	r0, r2, r3, r0
   df69a:	4a28      	ldr	r2, [pc, #160]	; (df73c <strftime+0x960>)
   df69c:	9000      	str	r0, [sp, #0]
   df69e:	4659      	mov	r1, fp
   df6a0:	4650      	mov	r0, sl
   df6a2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   df6a6:	fb98 f3f3 	sdiv	r3, r8, r3
   df6aa:	f7fa f975 	bl	d9998 <sniprintf>
   df6ae:	e4fa      	b.n	df0a6 <strftime+0x2ca>
   df6b0:	4404      	add	r4, r0
   df6b2:	42a6      	cmp	r6, r4
   df6b4:	d831      	bhi.n	df71a <strftime+0x93e>
   df6b6:	e03b      	b.n	df730 <strftime+0x954>
   df6b8:	6a2b      	ldr	r3, [r5, #32]
   df6ba:	2b00      	cmp	r3, #0
   df6bc:	db2d      	blt.n	df71a <strftime+0x93e>
   df6be:	f000 fa41 	bl	dfb44 <__tz_lock>
   df6c2:	9b06      	ldr	r3, [sp, #24]
   df6c4:	b91b      	cbnz	r3, df6ce <strftime+0x8f2>
   df6c6:	f000 fa3f 	bl	dfb48 <_tzset_unlocked>
   df6ca:	2301      	movs	r3, #1
   df6cc:	9306      	str	r3, [sp, #24]
   df6ce:	6a2b      	ldr	r3, [r5, #32]
   df6d0:	4a1b      	ldr	r2, [pc, #108]	; (df740 <strftime+0x964>)
   df6d2:	2b00      	cmp	r3, #0
   df6d4:	bfd4      	ite	le
   df6d6:	2300      	movle	r3, #0
   df6d8:	2301      	movgt	r3, #1
   df6da:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   df6de:	4640      	mov	r0, r8
   df6e0:	f000 f830 	bl	df744 <strlen>
   df6e4:	f108 38ff 	add.w	r8, r8, #4294967295
   df6e8:	193b      	adds	r3, r7, r4
   df6ea:	4420      	add	r0, r4
   df6ec:	4284      	cmp	r4, r0
   df6ee:	d00b      	beq.n	df708 <strftime+0x92c>
   df6f0:	9a02      	ldr	r2, [sp, #8]
   df6f2:	4294      	cmp	r4, r2
   df6f4:	d205      	bcs.n	df702 <strftime+0x926>
   df6f6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   df6fa:	f803 2b01 	strb.w	r2, [r3], #1
   df6fe:	3401      	adds	r4, #1
   df700:	e7f4      	b.n	df6ec <strftime+0x910>
   df702:	f000 fa20 	bl	dfb46 <__tz_unlock>
   df706:	e013      	b.n	df730 <strftime+0x954>
   df708:	f000 fa1d 	bl	dfb46 <__tz_unlock>
   df70c:	e005      	b.n	df71a <strftime+0x93e>
   df70e:	9b02      	ldr	r3, [sp, #8]
   df710:	429c      	cmp	r4, r3
   df712:	d20d      	bcs.n	df730 <strftime+0x954>
   df714:	2325      	movs	r3, #37	; 0x25
   df716:	553b      	strb	r3, [r7, r4]
   df718:	3401      	adds	r4, #1
   df71a:	f899 3000 	ldrb.w	r3, [r9]
   df71e:	b11b      	cbz	r3, df728 <strftime+0x94c>
   df720:	f109 0901 	add.w	r9, r9, #1
   df724:	f7ff bb69 	b.w	dedfa <strftime+0x1e>
   df728:	b126      	cbz	r6, df734 <strftime+0x958>
   df72a:	2300      	movs	r3, #0
   df72c:	553b      	strb	r3, [r7, r4]
   df72e:	e001      	b.n	df734 <strftime+0x958>
   df730:	2000      	movs	r0, #0
   df732:	e000      	b.n	df736 <strftime+0x95a>
   df734:	4620      	mov	r0, r4
   df736:	b013      	add	sp, #76	; 0x4c
   df738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df73c:	000e0d89 	.word	0x000e0d89
   df740:	2003be50 	.word	0x2003be50

000df744 <strlen>:
   df744:	4603      	mov	r3, r0
   df746:	f813 2b01 	ldrb.w	r2, [r3], #1
   df74a:	2a00      	cmp	r2, #0
   df74c:	d1fb      	bne.n	df746 <strlen+0x2>
   df74e:	1a18      	subs	r0, r3, r0
   df750:	3801      	subs	r0, #1
   df752:	4770      	bx	lr

000df754 <strncmp>:
   df754:	b530      	push	{r4, r5, lr}
   df756:	b182      	cbz	r2, df77a <strncmp+0x26>
   df758:	1e45      	subs	r5, r0, #1
   df75a:	3901      	subs	r1, #1
   df75c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   df760:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   df764:	42a3      	cmp	r3, r4
   df766:	d106      	bne.n	df776 <strncmp+0x22>
   df768:	43ec      	mvns	r4, r5
   df76a:	4414      	add	r4, r2
   df76c:	42e0      	cmn	r0, r4
   df76e:	d001      	beq.n	df774 <strncmp+0x20>
   df770:	2b00      	cmp	r3, #0
   df772:	d1f3      	bne.n	df75c <strncmp+0x8>
   df774:	461c      	mov	r4, r3
   df776:	1b18      	subs	r0, r3, r4
   df778:	bd30      	pop	{r4, r5, pc}
   df77a:	4610      	mov	r0, r2
   df77c:	bd30      	pop	{r4, r5, pc}

000df77e <strncpy>:
   df77e:	b510      	push	{r4, lr}
   df780:	4603      	mov	r3, r0
   df782:	b142      	cbz	r2, df796 <strncpy+0x18>
   df784:	f811 4b01 	ldrb.w	r4, [r1], #1
   df788:	f803 4b01 	strb.w	r4, [r3], #1
   df78c:	3a01      	subs	r2, #1
   df78e:	2c00      	cmp	r4, #0
   df790:	d1f7      	bne.n	df782 <strncpy+0x4>
   df792:	441a      	add	r2, r3
   df794:	e000      	b.n	df798 <strncpy+0x1a>
   df796:	bd10      	pop	{r4, pc}
   df798:	4293      	cmp	r3, r2
   df79a:	d002      	beq.n	df7a2 <strncpy+0x24>
   df79c:	f803 4b01 	strb.w	r4, [r3], #1
   df7a0:	e7fa      	b.n	df798 <strncpy+0x1a>
   df7a2:	bd10      	pop	{r4, pc}

000df7a4 <_strtol_r>:
   df7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df7a8:	4680      	mov	r8, r0
   df7aa:	4840      	ldr	r0, [pc, #256]	; (df8ac <_strtol_r+0x108>)
   df7ac:	f8d0 9000 	ldr.w	r9, [r0]
   df7b0:	460f      	mov	r7, r1
   df7b2:	463d      	mov	r5, r7
   df7b4:	f815 4b01 	ldrb.w	r4, [r5], #1
   df7b8:	eb09 0004 	add.w	r0, r9, r4
   df7bc:	7840      	ldrb	r0, [r0, #1]
   df7be:	f000 0008 	and.w	r0, r0, #8
   df7c2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   df7c6:	b108      	cbz	r0, df7cc <_strtol_r+0x28>
   df7c8:	462f      	mov	r7, r5
   df7ca:	e7f2      	b.n	df7b2 <_strtol_r+0xe>
   df7cc:	2c2d      	cmp	r4, #45	; 0x2d
   df7ce:	d103      	bne.n	df7d8 <_strtol_r+0x34>
   df7d0:	1cbd      	adds	r5, r7, #2
   df7d2:	787c      	ldrb	r4, [r7, #1]
   df7d4:	2601      	movs	r6, #1
   df7d6:	e003      	b.n	df7e0 <_strtol_r+0x3c>
   df7d8:	2c2b      	cmp	r4, #43	; 0x2b
   df7da:	bf04      	itt	eq
   df7dc:	787c      	ldrbeq	r4, [r7, #1]
   df7de:	1cbd      	addeq	r5, r7, #2
   df7e0:	b113      	cbz	r3, df7e8 <_strtol_r+0x44>
   df7e2:	2b10      	cmp	r3, #16
   df7e4:	d10a      	bne.n	df7fc <_strtol_r+0x58>
   df7e6:	e05b      	b.n	df8a0 <_strtol_r+0xfc>
   df7e8:	2c30      	cmp	r4, #48	; 0x30
   df7ea:	d157      	bne.n	df89c <_strtol_r+0xf8>
   df7ec:	7828      	ldrb	r0, [r5, #0]
   df7ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   df7f2:	2858      	cmp	r0, #88	; 0x58
   df7f4:	d14d      	bne.n	df892 <_strtol_r+0xee>
   df7f6:	786c      	ldrb	r4, [r5, #1]
   df7f8:	2310      	movs	r3, #16
   df7fa:	3502      	adds	r5, #2
   df7fc:	2e00      	cmp	r6, #0
   df7fe:	bf14      	ite	ne
   df800:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   df804:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   df808:	2700      	movs	r7, #0
   df80a:	fbbc faf3 	udiv	sl, ip, r3
   df80e:	4638      	mov	r0, r7
   df810:	fb03 cc1a 	mls	ip, r3, sl, ip
   df814:	eb09 0e04 	add.w	lr, r9, r4
   df818:	f89e e001 	ldrb.w	lr, [lr, #1]
   df81c:	f01e 0f04 	tst.w	lr, #4
   df820:	d001      	beq.n	df826 <_strtol_r+0x82>
   df822:	3c30      	subs	r4, #48	; 0x30
   df824:	e00b      	b.n	df83e <_strtol_r+0x9a>
   df826:	f01e 0e03 	ands.w	lr, lr, #3
   df82a:	d01b      	beq.n	df864 <_strtol_r+0xc0>
   df82c:	f1be 0f01 	cmp.w	lr, #1
   df830:	bf0c      	ite	eq
   df832:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   df836:	f04f 0e57 	movne.w	lr, #87	; 0x57
   df83a:	ebce 0404 	rsb	r4, lr, r4
   df83e:	42a3      	cmp	r3, r4
   df840:	dd10      	ble.n	df864 <_strtol_r+0xc0>
   df842:	f1b7 3fff 	cmp.w	r7, #4294967295
   df846:	d00a      	beq.n	df85e <_strtol_r+0xba>
   df848:	4550      	cmp	r0, sl
   df84a:	d806      	bhi.n	df85a <_strtol_r+0xb6>
   df84c:	d101      	bne.n	df852 <_strtol_r+0xae>
   df84e:	4564      	cmp	r4, ip
   df850:	dc03      	bgt.n	df85a <_strtol_r+0xb6>
   df852:	fb03 4000 	mla	r0, r3, r0, r4
   df856:	2701      	movs	r7, #1
   df858:	e001      	b.n	df85e <_strtol_r+0xba>
   df85a:	f04f 37ff 	mov.w	r7, #4294967295
   df85e:	f815 4b01 	ldrb.w	r4, [r5], #1
   df862:	e7d7      	b.n	df814 <_strtol_r+0x70>
   df864:	1c7b      	adds	r3, r7, #1
   df866:	d10c      	bne.n	df882 <_strtol_r+0xde>
   df868:	2e00      	cmp	r6, #0
   df86a:	f04f 0322 	mov.w	r3, #34	; 0x22
   df86e:	bf14      	ite	ne
   df870:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   df874:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   df878:	f8c8 3000 	str.w	r3, [r8]
   df87c:	b92a      	cbnz	r2, df88a <_strtol_r+0xe6>
   df87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df882:	b106      	cbz	r6, df886 <_strtol_r+0xe2>
   df884:	4240      	negs	r0, r0
   df886:	b172      	cbz	r2, df8a6 <_strtol_r+0x102>
   df888:	b107      	cbz	r7, df88c <_strtol_r+0xe8>
   df88a:	1e69      	subs	r1, r5, #1
   df88c:	6011      	str	r1, [r2, #0]
   df88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df892:	2430      	movs	r4, #48	; 0x30
   df894:	2b00      	cmp	r3, #0
   df896:	d1b1      	bne.n	df7fc <_strtol_r+0x58>
   df898:	2308      	movs	r3, #8
   df89a:	e7af      	b.n	df7fc <_strtol_r+0x58>
   df89c:	230a      	movs	r3, #10
   df89e:	e7ad      	b.n	df7fc <_strtol_r+0x58>
   df8a0:	2c30      	cmp	r4, #48	; 0x30
   df8a2:	d0a3      	beq.n	df7ec <_strtol_r+0x48>
   df8a4:	e7aa      	b.n	df7fc <_strtol_r+0x58>
   df8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df8aa:	bf00      	nop
   df8ac:	2003bde8 	.word	0x2003bde8

000df8b0 <strtol>:
   df8b0:	4613      	mov	r3, r2
   df8b2:	460a      	mov	r2, r1
   df8b4:	4601      	mov	r1, r0
   df8b6:	4802      	ldr	r0, [pc, #8]	; (df8c0 <strtol+0x10>)
   df8b8:	6800      	ldr	r0, [r0, #0]
   df8ba:	f7ff bf73 	b.w	df7a4 <_strtol_r>
   df8be:	bf00      	nop
   df8c0:	2003be4c 	.word	0x2003be4c

000df8c4 <_strtoul_r>:
   df8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df8c8:	4680      	mov	r8, r0
   df8ca:	483c      	ldr	r0, [pc, #240]	; (df9bc <_strtoul_r+0xf8>)
   df8cc:	f8d0 9000 	ldr.w	r9, [r0]
   df8d0:	460e      	mov	r6, r1
   df8d2:	4635      	mov	r5, r6
   df8d4:	f815 4b01 	ldrb.w	r4, [r5], #1
   df8d8:	eb09 0004 	add.w	r0, r9, r4
   df8dc:	7840      	ldrb	r0, [r0, #1]
   df8de:	f000 0008 	and.w	r0, r0, #8
   df8e2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   df8e6:	b108      	cbz	r0, df8ec <_strtoul_r+0x28>
   df8e8:	462e      	mov	r6, r5
   df8ea:	e7f2      	b.n	df8d2 <_strtoul_r+0xe>
   df8ec:	2c2d      	cmp	r4, #45	; 0x2d
   df8ee:	d103      	bne.n	df8f8 <_strtoul_r+0x34>
   df8f0:	1cb5      	adds	r5, r6, #2
   df8f2:	7874      	ldrb	r4, [r6, #1]
   df8f4:	2701      	movs	r7, #1
   df8f6:	e003      	b.n	df900 <_strtoul_r+0x3c>
   df8f8:	2c2b      	cmp	r4, #43	; 0x2b
   df8fa:	bf04      	itt	eq
   df8fc:	7874      	ldrbeq	r4, [r6, #1]
   df8fe:	1cb5      	addeq	r5, r6, #2
   df900:	b113      	cbz	r3, df908 <_strtoul_r+0x44>
   df902:	2b10      	cmp	r3, #16
   df904:	d10a      	bne.n	df91c <_strtoul_r+0x58>
   df906:	e053      	b.n	df9b0 <_strtoul_r+0xec>
   df908:	2c30      	cmp	r4, #48	; 0x30
   df90a:	d14f      	bne.n	df9ac <_strtoul_r+0xe8>
   df90c:	7828      	ldrb	r0, [r5, #0]
   df90e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   df912:	2858      	cmp	r0, #88	; 0x58
   df914:	d145      	bne.n	df9a2 <_strtoul_r+0xde>
   df916:	786c      	ldrb	r4, [r5, #1]
   df918:	2310      	movs	r3, #16
   df91a:	3502      	adds	r5, #2
   df91c:	f04f 3cff 	mov.w	ip, #4294967295
   df920:	2600      	movs	r6, #0
   df922:	fbbc fcf3 	udiv	ip, ip, r3
   df926:	fb03 fa0c 	mul.w	sl, r3, ip
   df92a:	ea6f 0a0a 	mvn.w	sl, sl
   df92e:	4630      	mov	r0, r6
   df930:	eb09 0e04 	add.w	lr, r9, r4
   df934:	f89e e001 	ldrb.w	lr, [lr, #1]
   df938:	f01e 0f04 	tst.w	lr, #4
   df93c:	d001      	beq.n	df942 <_strtoul_r+0x7e>
   df93e:	3c30      	subs	r4, #48	; 0x30
   df940:	e00b      	b.n	df95a <_strtoul_r+0x96>
   df942:	f01e 0e03 	ands.w	lr, lr, #3
   df946:	d01a      	beq.n	df97e <_strtoul_r+0xba>
   df948:	f1be 0f01 	cmp.w	lr, #1
   df94c:	bf0c      	ite	eq
   df94e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   df952:	f04f 0e57 	movne.w	lr, #87	; 0x57
   df956:	ebce 0404 	rsb	r4, lr, r4
   df95a:	42a3      	cmp	r3, r4
   df95c:	dd0f      	ble.n	df97e <_strtoul_r+0xba>
   df95e:	2e00      	cmp	r6, #0
   df960:	db08      	blt.n	df974 <_strtoul_r+0xb0>
   df962:	4560      	cmp	r0, ip
   df964:	d806      	bhi.n	df974 <_strtoul_r+0xb0>
   df966:	d101      	bne.n	df96c <_strtoul_r+0xa8>
   df968:	4554      	cmp	r4, sl
   df96a:	dc03      	bgt.n	df974 <_strtoul_r+0xb0>
   df96c:	fb03 4000 	mla	r0, r3, r0, r4
   df970:	2601      	movs	r6, #1
   df972:	e001      	b.n	df978 <_strtoul_r+0xb4>
   df974:	f04f 36ff 	mov.w	r6, #4294967295
   df978:	f815 4b01 	ldrb.w	r4, [r5], #1
   df97c:	e7d8      	b.n	df930 <_strtoul_r+0x6c>
   df97e:	2e00      	cmp	r6, #0
   df980:	da07      	bge.n	df992 <_strtoul_r+0xce>
   df982:	2322      	movs	r3, #34	; 0x22
   df984:	f8c8 3000 	str.w	r3, [r8]
   df988:	f04f 30ff 	mov.w	r0, #4294967295
   df98c:	b92a      	cbnz	r2, df99a <_strtoul_r+0xd6>
   df98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df992:	b107      	cbz	r7, df996 <_strtoul_r+0xd2>
   df994:	4240      	negs	r0, r0
   df996:	b172      	cbz	r2, df9b6 <_strtoul_r+0xf2>
   df998:	b106      	cbz	r6, df99c <_strtoul_r+0xd8>
   df99a:	1e69      	subs	r1, r5, #1
   df99c:	6011      	str	r1, [r2, #0]
   df99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df9a2:	2430      	movs	r4, #48	; 0x30
   df9a4:	2b00      	cmp	r3, #0
   df9a6:	d1b9      	bne.n	df91c <_strtoul_r+0x58>
   df9a8:	2308      	movs	r3, #8
   df9aa:	e7b7      	b.n	df91c <_strtoul_r+0x58>
   df9ac:	230a      	movs	r3, #10
   df9ae:	e7b5      	b.n	df91c <_strtoul_r+0x58>
   df9b0:	2c30      	cmp	r4, #48	; 0x30
   df9b2:	d0ab      	beq.n	df90c <_strtoul_r+0x48>
   df9b4:	e7b2      	b.n	df91c <_strtoul_r+0x58>
   df9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df9ba:	bf00      	nop
   df9bc:	2003bde8 	.word	0x2003bde8

000df9c0 <strtoul>:
   df9c0:	4613      	mov	r3, r2
   df9c2:	460a      	mov	r2, r1
   df9c4:	4601      	mov	r1, r0
   df9c6:	4802      	ldr	r0, [pc, #8]	; (df9d0 <strtoul+0x10>)
   df9c8:	6800      	ldr	r0, [r0, #0]
   df9ca:	f7ff bf7b 	b.w	df8c4 <_strtoul_r>
   df9ce:	bf00      	nop
   df9d0:	2003be4c 	.word	0x2003be4c

000df9d4 <__get_current_time_locale>:
   df9d4:	4b04      	ldr	r3, [pc, #16]	; (df9e8 <__get_current_time_locale+0x14>)
   df9d6:	4a05      	ldr	r2, [pc, #20]	; (df9ec <__get_current_time_locale+0x18>)
   df9d8:	6818      	ldr	r0, [r3, #0]
   df9da:	4b05      	ldr	r3, [pc, #20]	; (df9f0 <__get_current_time_locale+0x1c>)
   df9dc:	2800      	cmp	r0, #0
   df9de:	bf14      	ite	ne
   df9e0:	4610      	movne	r0, r2
   df9e2:	4618      	moveq	r0, r3
   df9e4:	4770      	bx	lr
   df9e6:	bf00      	nop
   df9e8:	2003e6c8 	.word	0x2003e6c8
   df9ec:	2003e6cc 	.word	0x2003e6cc
   df9f0:	000e0ec4 	.word	0x000e0ec4

000df9f4 <__tzcalc_limits>:
   df9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df9f8:	4604      	mov	r4, r0
   df9fa:	f000 fa87 	bl	dff0c <__gettzinfo>
   df9fe:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dfa02:	429c      	cmp	r4, r3
   dfa04:	f340 8096 	ble.w	dfb34 <__tzcalc_limits+0x140>
   dfa08:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dfa0c:	18e3      	adds	r3, r4, r3
   dfa0e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dfa12:	109b      	asrs	r3, r3, #2
   dfa14:	f240 156d 	movw	r5, #365	; 0x16d
   dfa18:	fb05 3502 	mla	r5, r5, r2, r3
   dfa1c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dfa20:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dfa24:	fb92 f3f3 	sdiv	r3, r2, r3
   dfa28:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dfa2c:	442b      	add	r3, r5
   dfa2e:	18a5      	adds	r5, r4, r2
   dfa30:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dfa34:	fb95 f5f2 	sdiv	r5, r5, r2
   dfa38:	441d      	add	r5, r3
   dfa3a:	2364      	movs	r3, #100	; 0x64
   dfa3c:	fb94 f7f2 	sdiv	r7, r4, r2
   dfa40:	fb94 f6f3 	sdiv	r6, r4, r3
   dfa44:	fb02 4717 	mls	r7, r2, r7, r4
   dfa48:	fb03 4616 	mls	r6, r3, r6, r4
   dfa4c:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dfa50:	fab7 fe87 	clz	lr, r7
   dfa54:	9301      	str	r3, [sp, #4]
   dfa56:	f004 0303 	and.w	r3, r4, #3
   dfa5a:	6044      	str	r4, [r0, #4]
   dfa5c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dfa60:	4601      	mov	r1, r0
   dfa62:	9300      	str	r3, [sp, #0]
   dfa64:	f04f 0c07 	mov.w	ip, #7
   dfa68:	7a0b      	ldrb	r3, [r1, #8]
   dfa6a:	2b4a      	cmp	r3, #74	; 0x4a
   dfa6c:	d10e      	bne.n	dfa8c <__tzcalc_limits+0x98>
   dfa6e:	694b      	ldr	r3, [r1, #20]
   dfa70:	9a00      	ldr	r2, [sp, #0]
   dfa72:	18ec      	adds	r4, r5, r3
   dfa74:	b902      	cbnz	r2, dfa78 <__tzcalc_limits+0x84>
   dfa76:	b906      	cbnz	r6, dfa7a <__tzcalc_limits+0x86>
   dfa78:	b927      	cbnz	r7, dfa84 <__tzcalc_limits+0x90>
   dfa7a:	2b3b      	cmp	r3, #59	; 0x3b
   dfa7c:	bfd4      	ite	le
   dfa7e:	2300      	movle	r3, #0
   dfa80:	2301      	movgt	r3, #1
   dfa82:	e000      	b.n	dfa86 <__tzcalc_limits+0x92>
   dfa84:	2300      	movs	r3, #0
   dfa86:	4423      	add	r3, r4
   dfa88:	3b01      	subs	r3, #1
   dfa8a:	e03f      	b.n	dfb0c <__tzcalc_limits+0x118>
   dfa8c:	2b44      	cmp	r3, #68	; 0x44
   dfa8e:	d102      	bne.n	dfa96 <__tzcalc_limits+0xa2>
   dfa90:	694b      	ldr	r3, [r1, #20]
   dfa92:	442b      	add	r3, r5
   dfa94:	e03a      	b.n	dfb0c <__tzcalc_limits+0x118>
   dfa96:	9b00      	ldr	r3, [sp, #0]
   dfa98:	b92b      	cbnz	r3, dfaa6 <__tzcalc_limits+0xb2>
   dfa9a:	2e00      	cmp	r6, #0
   dfa9c:	bf0c      	ite	eq
   dfa9e:	46f0      	moveq	r8, lr
   dfaa0:	f04f 0801 	movne.w	r8, #1
   dfaa4:	e000      	b.n	dfaa8 <__tzcalc_limits+0xb4>
   dfaa6:	46f0      	mov	r8, lr
   dfaa8:	4b24      	ldr	r3, [pc, #144]	; (dfb3c <__tzcalc_limits+0x148>)
   dfaaa:	68cc      	ldr	r4, [r1, #12]
   dfaac:	2230      	movs	r2, #48	; 0x30
   dfaae:	fb02 3808 	mla	r8, r2, r8, r3
   dfab2:	f1a8 0a04 	sub.w	sl, r8, #4
   dfab6:	46a9      	mov	r9, r5
   dfab8:	2301      	movs	r3, #1
   dfaba:	42a3      	cmp	r3, r4
   dfabc:	da04      	bge.n	dfac8 <__tzcalc_limits+0xd4>
   dfabe:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dfac2:	3301      	adds	r3, #1
   dfac4:	44d9      	add	r9, fp
   dfac6:	e7f8      	b.n	dfaba <__tzcalc_limits+0xc6>
   dfac8:	f109 0304 	add.w	r3, r9, #4
   dfacc:	fb93 fbfc 	sdiv	fp, r3, ip
   dfad0:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dfad4:	2c01      	cmp	r4, #1
   dfad6:	ebca 0a03 	rsb	sl, sl, r3
   dfada:	694b      	ldr	r3, [r1, #20]
   dfadc:	bfb8      	it	lt
   dfade:	2401      	movlt	r4, #1
   dfae0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dfae4:	ebb3 0a0a 	subs.w	sl, r3, sl
   dfae8:	690b      	ldr	r3, [r1, #16]
   dfaea:	f104 34ff 	add.w	r4, r4, #4294967295
   dfaee:	f103 33ff 	add.w	r3, r3, #4294967295
   dfaf2:	bf48      	it	mi
   dfaf4:	f10a 0a07 	addmi.w	sl, sl, #7
   dfaf8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dfafc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dfb00:	4453      	add	r3, sl
   dfb02:	42a3      	cmp	r3, r4
   dfb04:	db01      	blt.n	dfb0a <__tzcalc_limits+0x116>
   dfb06:	3b07      	subs	r3, #7
   dfb08:	e7fb      	b.n	dfb02 <__tzcalc_limits+0x10e>
   dfb0a:	444b      	add	r3, r9
   dfb0c:	698c      	ldr	r4, [r1, #24]
   dfb0e:	4a0c      	ldr	r2, [pc, #48]	; (dfb40 <__tzcalc_limits+0x14c>)
   dfb10:	fb02 4303 	mla	r3, r2, r3, r4
   dfb14:	6a0c      	ldr	r4, [r1, #32]
   dfb16:	4423      	add	r3, r4
   dfb18:	f841 3f1c 	str.w	r3, [r1, #28]!
   dfb1c:	9b01      	ldr	r3, [sp, #4]
   dfb1e:	4299      	cmp	r1, r3
   dfb20:	d1a2      	bne.n	dfa68 <__tzcalc_limits+0x74>
   dfb22:	69c3      	ldr	r3, [r0, #28]
   dfb24:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dfb26:	4293      	cmp	r3, r2
   dfb28:	bfac      	ite	ge
   dfb2a:	2300      	movge	r3, #0
   dfb2c:	2301      	movlt	r3, #1
   dfb2e:	6003      	str	r3, [r0, #0]
   dfb30:	2001      	movs	r0, #1
   dfb32:	e000      	b.n	dfb36 <__tzcalc_limits+0x142>
   dfb34:	2000      	movs	r0, #0
   dfb36:	b003      	add	sp, #12
   dfb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfb3c:	000e0cdc 	.word	0x000e0cdc
   dfb40:	00015180 	.word	0x00015180

000dfb44 <__tz_lock>:
   dfb44:	4770      	bx	lr

000dfb46 <__tz_unlock>:
   dfb46:	4770      	bx	lr

000dfb48 <_tzset_unlocked>:
   dfb48:	4b01      	ldr	r3, [pc, #4]	; (dfb50 <_tzset_unlocked+0x8>)
   dfb4a:	6818      	ldr	r0, [r3, #0]
   dfb4c:	f000 b802 	b.w	dfb54 <_tzset_unlocked_r>
   dfb50:	2003be4c 	.word	0x2003be4c

000dfb54 <_tzset_unlocked_r>:
   dfb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfb58:	b08d      	sub	sp, #52	; 0x34
   dfb5a:	4607      	mov	r7, r0
   dfb5c:	f000 f9d6 	bl	dff0c <__gettzinfo>
   dfb60:	49b0      	ldr	r1, [pc, #704]	; (dfe24 <_tzset_unlocked_r+0x2d0>)
   dfb62:	4eb1      	ldr	r6, [pc, #708]	; (dfe28 <_tzset_unlocked_r+0x2d4>)
   dfb64:	4604      	mov	r4, r0
   dfb66:	4638      	mov	r0, r7
   dfb68:	f000 f9c8 	bl	dfefc <_getenv_r>
   dfb6c:	4605      	mov	r5, r0
   dfb6e:	b960      	cbnz	r0, dfb8a <_tzset_unlocked_r+0x36>
   dfb70:	4bae      	ldr	r3, [pc, #696]	; (dfe2c <_tzset_unlocked_r+0x2d8>)
   dfb72:	4aaf      	ldr	r2, [pc, #700]	; (dfe30 <_tzset_unlocked_r+0x2dc>)
   dfb74:	6018      	str	r0, [r3, #0]
   dfb76:	4baf      	ldr	r3, [pc, #700]	; (dfe34 <_tzset_unlocked_r+0x2e0>)
   dfb78:	6018      	str	r0, [r3, #0]
   dfb7a:	4baf      	ldr	r3, [pc, #700]	; (dfe38 <_tzset_unlocked_r+0x2e4>)
   dfb7c:	6830      	ldr	r0, [r6, #0]
   dfb7e:	601a      	str	r2, [r3, #0]
   dfb80:	605a      	str	r2, [r3, #4]
   dfb82:	f7f9 fee1 	bl	d9948 <free>
   dfb86:	6035      	str	r5, [r6, #0]
   dfb88:	e148      	b.n	dfe1c <_tzset_unlocked_r+0x2c8>
   dfb8a:	6831      	ldr	r1, [r6, #0]
   dfb8c:	b979      	cbnz	r1, dfbae <_tzset_unlocked_r+0x5a>
   dfb8e:	6830      	ldr	r0, [r6, #0]
   dfb90:	f7f9 feda 	bl	d9948 <free>
   dfb94:	4628      	mov	r0, r5
   dfb96:	f7ff fdd5 	bl	df744 <strlen>
   dfb9a:	1c41      	adds	r1, r0, #1
   dfb9c:	4638      	mov	r0, r7
   dfb9e:	f7f9 ff13 	bl	d99c8 <_malloc_r>
   dfba2:	6030      	str	r0, [r6, #0]
   dfba4:	b148      	cbz	r0, dfbba <_tzset_unlocked_r+0x66>
   dfba6:	4629      	mov	r1, r5
   dfba8:	f7ff f894 	bl	decd4 <strcpy>
   dfbac:	e005      	b.n	dfbba <_tzset_unlocked_r+0x66>
   dfbae:	f7ff f887 	bl	decc0 <strcmp>
   dfbb2:	2800      	cmp	r0, #0
   dfbb4:	f000 8132 	beq.w	dfe1c <_tzset_unlocked_r+0x2c8>
   dfbb8:	e7e9      	b.n	dfb8e <_tzset_unlocked_r+0x3a>
   dfbba:	782b      	ldrb	r3, [r5, #0]
   dfbbc:	4a9f      	ldr	r2, [pc, #636]	; (dfe3c <_tzset_unlocked_r+0x2e8>)
   dfbbe:	49a0      	ldr	r1, [pc, #640]	; (dfe40 <_tzset_unlocked_r+0x2ec>)
   dfbc0:	2b3a      	cmp	r3, #58	; 0x3a
   dfbc2:	bf08      	it	eq
   dfbc4:	3501      	addeq	r5, #1
   dfbc6:	ae0a      	add	r6, sp, #40	; 0x28
   dfbc8:	4633      	mov	r3, r6
   dfbca:	4628      	mov	r0, r5
   dfbcc:	f7f9 fed4 	bl	d9978 <siscanf>
   dfbd0:	2800      	cmp	r0, #0
   dfbd2:	f340 8123 	ble.w	dfe1c <_tzset_unlocked_r+0x2c8>
   dfbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dfbd8:	18ef      	adds	r7, r5, r3
   dfbda:	5ceb      	ldrb	r3, [r5, r3]
   dfbdc:	2b2d      	cmp	r3, #45	; 0x2d
   dfbde:	d103      	bne.n	dfbe8 <_tzset_unlocked_r+0x94>
   dfbe0:	3701      	adds	r7, #1
   dfbe2:	f04f 35ff 	mov.w	r5, #4294967295
   dfbe6:	e003      	b.n	dfbf0 <_tzset_unlocked_r+0x9c>
   dfbe8:	2b2b      	cmp	r3, #43	; 0x2b
   dfbea:	bf08      	it	eq
   dfbec:	3701      	addeq	r7, #1
   dfbee:	2501      	movs	r5, #1
   dfbf0:	f10d 0a20 	add.w	sl, sp, #32
   dfbf4:	f10d 0b1e 	add.w	fp, sp, #30
   dfbf8:	f04f 0800 	mov.w	r8, #0
   dfbfc:	9603      	str	r6, [sp, #12]
   dfbfe:	f8cd a008 	str.w	sl, [sp, #8]
   dfc02:	9601      	str	r6, [sp, #4]
   dfc04:	f8cd b000 	str.w	fp, [sp]
   dfc08:	4633      	mov	r3, r6
   dfc0a:	aa07      	add	r2, sp, #28
   dfc0c:	498d      	ldr	r1, [pc, #564]	; (dfe44 <_tzset_unlocked_r+0x2f0>)
   dfc0e:	f8ad 801e 	strh.w	r8, [sp, #30]
   dfc12:	4638      	mov	r0, r7
   dfc14:	f8ad 8020 	strh.w	r8, [sp, #32]
   dfc18:	f7f9 feae 	bl	d9978 <siscanf>
   dfc1c:	4540      	cmp	r0, r8
   dfc1e:	f340 80fd 	ble.w	dfe1c <_tzset_unlocked_r+0x2c8>
   dfc22:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dfc26:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dfc2a:	f8df 9224 	ldr.w	r9, [pc, #548]	; dfe50 <_tzset_unlocked_r+0x2fc>
   dfc2e:	213c      	movs	r1, #60	; 0x3c
   dfc30:	fb01 3302 	mla	r3, r1, r2, r3
   dfc34:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dfc38:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dfc3c:	fb01 3302 	mla	r3, r1, r2, r3
   dfc40:	435d      	muls	r5, r3
   dfc42:	6225      	str	r5, [r4, #32]
   dfc44:	4d7c      	ldr	r5, [pc, #496]	; (dfe38 <_tzset_unlocked_r+0x2e4>)
   dfc46:	4b7d      	ldr	r3, [pc, #500]	; (dfe3c <_tzset_unlocked_r+0x2e8>)
   dfc48:	602b      	str	r3, [r5, #0]
   dfc4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dfc4c:	497c      	ldr	r1, [pc, #496]	; (dfe40 <_tzset_unlocked_r+0x2ec>)
   dfc4e:	441f      	add	r7, r3
   dfc50:	464a      	mov	r2, r9
   dfc52:	4633      	mov	r3, r6
   dfc54:	4638      	mov	r0, r7
   dfc56:	f7f9 fe8f 	bl	d9978 <siscanf>
   dfc5a:	4540      	cmp	r0, r8
   dfc5c:	dc08      	bgt.n	dfc70 <_tzset_unlocked_r+0x11c>
   dfc5e:	682b      	ldr	r3, [r5, #0]
   dfc60:	606b      	str	r3, [r5, #4]
   dfc62:	4b72      	ldr	r3, [pc, #456]	; (dfe2c <_tzset_unlocked_r+0x2d8>)
   dfc64:	6a22      	ldr	r2, [r4, #32]
   dfc66:	601a      	str	r2, [r3, #0]
   dfc68:	4b72      	ldr	r3, [pc, #456]	; (dfe34 <_tzset_unlocked_r+0x2e0>)
   dfc6a:	f8c3 8000 	str.w	r8, [r3]
   dfc6e:	e0d5      	b.n	dfe1c <_tzset_unlocked_r+0x2c8>
   dfc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dfc72:	f8c5 9004 	str.w	r9, [r5, #4]
   dfc76:	18fd      	adds	r5, r7, r3
   dfc78:	5cfb      	ldrb	r3, [r7, r3]
   dfc7a:	2b2d      	cmp	r3, #45	; 0x2d
   dfc7c:	d103      	bne.n	dfc86 <_tzset_unlocked_r+0x132>
   dfc7e:	3501      	adds	r5, #1
   dfc80:	f04f 37ff 	mov.w	r7, #4294967295
   dfc84:	e003      	b.n	dfc8e <_tzset_unlocked_r+0x13a>
   dfc86:	2b2b      	cmp	r3, #43	; 0x2b
   dfc88:	bf08      	it	eq
   dfc8a:	3501      	addeq	r5, #1
   dfc8c:	2701      	movs	r7, #1
   dfc8e:	2300      	movs	r3, #0
   dfc90:	f8ad 301c 	strh.w	r3, [sp, #28]
   dfc94:	f8ad 301e 	strh.w	r3, [sp, #30]
   dfc98:	f8ad 3020 	strh.w	r3, [sp, #32]
   dfc9c:	930a      	str	r3, [sp, #40]	; 0x28
   dfc9e:	9603      	str	r6, [sp, #12]
   dfca0:	f8cd a008 	str.w	sl, [sp, #8]
   dfca4:	9601      	str	r6, [sp, #4]
   dfca6:	f8cd b000 	str.w	fp, [sp]
   dfcaa:	4633      	mov	r3, r6
   dfcac:	aa07      	add	r2, sp, #28
   dfcae:	4965      	ldr	r1, [pc, #404]	; (dfe44 <_tzset_unlocked_r+0x2f0>)
   dfcb0:	4628      	mov	r0, r5
   dfcb2:	f7f9 fe61 	bl	d9978 <siscanf>
   dfcb6:	2800      	cmp	r0, #0
   dfcb8:	dc04      	bgt.n	dfcc4 <_tzset_unlocked_r+0x170>
   dfcba:	6a23      	ldr	r3, [r4, #32]
   dfcbc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dfcc0:	63e3      	str	r3, [r4, #60]	; 0x3c
   dfcc2:	e00e      	b.n	dfce2 <_tzset_unlocked_r+0x18e>
   dfcc4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dfcc8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dfccc:	213c      	movs	r1, #60	; 0x3c
   dfcce:	fb01 3302 	mla	r3, r1, r2, r3
   dfcd2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dfcd6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dfcda:	fb01 3302 	mla	r3, r1, r2, r3
   dfcde:	435f      	muls	r7, r3
   dfce0:	63e7      	str	r7, [r4, #60]	; 0x3c
   dfce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dfce4:	4627      	mov	r7, r4
   dfce6:	441d      	add	r5, r3
   dfce8:	f04f 0900 	mov.w	r9, #0
   dfcec:	782b      	ldrb	r3, [r5, #0]
   dfcee:	2b2c      	cmp	r3, #44	; 0x2c
   dfcf0:	bf08      	it	eq
   dfcf2:	3501      	addeq	r5, #1
   dfcf4:	f895 8000 	ldrb.w	r8, [r5]
   dfcf8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dfcfc:	d126      	bne.n	dfd4c <_tzset_unlocked_r+0x1f8>
   dfcfe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dfd02:	9302      	str	r3, [sp, #8]
   dfd04:	ab09      	add	r3, sp, #36	; 0x24
   dfd06:	9300      	str	r3, [sp, #0]
   dfd08:	9603      	str	r6, [sp, #12]
   dfd0a:	9601      	str	r6, [sp, #4]
   dfd0c:	4633      	mov	r3, r6
   dfd0e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dfd12:	494d      	ldr	r1, [pc, #308]	; (dfe48 <_tzset_unlocked_r+0x2f4>)
   dfd14:	4628      	mov	r0, r5
   dfd16:	f7f9 fe2f 	bl	d9978 <siscanf>
   dfd1a:	2803      	cmp	r0, #3
   dfd1c:	d17e      	bne.n	dfe1c <_tzset_unlocked_r+0x2c8>
   dfd1e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dfd22:	1e4b      	subs	r3, r1, #1
   dfd24:	2b0b      	cmp	r3, #11
   dfd26:	d879      	bhi.n	dfe1c <_tzset_unlocked_r+0x2c8>
   dfd28:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dfd2c:	1e53      	subs	r3, r2, #1
   dfd2e:	2b04      	cmp	r3, #4
   dfd30:	d874      	bhi.n	dfe1c <_tzset_unlocked_r+0x2c8>
   dfd32:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dfd36:	2b06      	cmp	r3, #6
   dfd38:	d870      	bhi.n	dfe1c <_tzset_unlocked_r+0x2c8>
   dfd3a:	f887 8008 	strb.w	r8, [r7, #8]
   dfd3e:	60f9      	str	r1, [r7, #12]
   dfd40:	613a      	str	r2, [r7, #16]
   dfd42:	617b      	str	r3, [r7, #20]
   dfd44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dfd46:	eb05 0803 	add.w	r8, r5, r3
   dfd4a:	e02a      	b.n	dfda2 <_tzset_unlocked_r+0x24e>
   dfd4c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dfd50:	bf06      	itte	eq
   dfd52:	3501      	addeq	r5, #1
   dfd54:	4643      	moveq	r3, r8
   dfd56:	2344      	movne	r3, #68	; 0x44
   dfd58:	220a      	movs	r2, #10
   dfd5a:	a90b      	add	r1, sp, #44	; 0x2c
   dfd5c:	4628      	mov	r0, r5
   dfd5e:	9305      	str	r3, [sp, #20]
   dfd60:	f7ff fe2e 	bl	df9c0 <strtoul>
   dfd64:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dfd68:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dfd6c:	4545      	cmp	r5, r8
   dfd6e:	9b05      	ldr	r3, [sp, #20]
   dfd70:	d114      	bne.n	dfd9c <_tzset_unlocked_r+0x248>
   dfd72:	234d      	movs	r3, #77	; 0x4d
   dfd74:	f1b9 0f00 	cmp.w	r9, #0
   dfd78:	d107      	bne.n	dfd8a <_tzset_unlocked_r+0x236>
   dfd7a:	7223      	strb	r3, [r4, #8]
   dfd7c:	2303      	movs	r3, #3
   dfd7e:	60e3      	str	r3, [r4, #12]
   dfd80:	2302      	movs	r3, #2
   dfd82:	6123      	str	r3, [r4, #16]
   dfd84:	f8c4 9014 	str.w	r9, [r4, #20]
   dfd88:	e00b      	b.n	dfda2 <_tzset_unlocked_r+0x24e>
   dfd8a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dfd8e:	230b      	movs	r3, #11
   dfd90:	62a3      	str	r3, [r4, #40]	; 0x28
   dfd92:	2301      	movs	r3, #1
   dfd94:	62e3      	str	r3, [r4, #44]	; 0x2c
   dfd96:	2300      	movs	r3, #0
   dfd98:	6323      	str	r3, [r4, #48]	; 0x30
   dfd9a:	e002      	b.n	dfda2 <_tzset_unlocked_r+0x24e>
   dfd9c:	b280      	uxth	r0, r0
   dfd9e:	723b      	strb	r3, [r7, #8]
   dfda0:	6178      	str	r0, [r7, #20]
   dfda2:	2302      	movs	r3, #2
   dfda4:	f8ad 301c 	strh.w	r3, [sp, #28]
   dfda8:	2300      	movs	r3, #0
   dfdaa:	f8ad 301e 	strh.w	r3, [sp, #30]
   dfdae:	f8ad 3020 	strh.w	r3, [sp, #32]
   dfdb2:	930a      	str	r3, [sp, #40]	; 0x28
   dfdb4:	f898 3000 	ldrb.w	r3, [r8]
   dfdb8:	2b2f      	cmp	r3, #47	; 0x2f
   dfdba:	d10b      	bne.n	dfdd4 <_tzset_unlocked_r+0x280>
   dfdbc:	9603      	str	r6, [sp, #12]
   dfdbe:	f8cd a008 	str.w	sl, [sp, #8]
   dfdc2:	9601      	str	r6, [sp, #4]
   dfdc4:	f8cd b000 	str.w	fp, [sp]
   dfdc8:	4633      	mov	r3, r6
   dfdca:	aa07      	add	r2, sp, #28
   dfdcc:	491f      	ldr	r1, [pc, #124]	; (dfe4c <_tzset_unlocked_r+0x2f8>)
   dfdce:	4640      	mov	r0, r8
   dfdd0:	f7f9 fdd2 	bl	d9978 <siscanf>
   dfdd4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dfdd8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dfddc:	213c      	movs	r1, #60	; 0x3c
   dfdde:	fb01 3302 	mla	r3, r1, r2, r3
   dfde2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dfde6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dfdea:	fb01 3302 	mla	r3, r1, r2, r3
   dfdee:	61bb      	str	r3, [r7, #24]
   dfdf0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dfdf2:	f109 0901 	add.w	r9, r9, #1
   dfdf6:	f1b9 0f02 	cmp.w	r9, #2
   dfdfa:	4445      	add	r5, r8
   dfdfc:	f107 071c 	add.w	r7, r7, #28
   dfe00:	f47f af74 	bne.w	dfcec <_tzset_unlocked_r+0x198>
   dfe04:	6860      	ldr	r0, [r4, #4]
   dfe06:	f7ff fdf5 	bl	df9f4 <__tzcalc_limits>
   dfe0a:	4b08      	ldr	r3, [pc, #32]	; (dfe2c <_tzset_unlocked_r+0x2d8>)
   dfe0c:	6a22      	ldr	r2, [r4, #32]
   dfe0e:	601a      	str	r2, [r3, #0]
   dfe10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dfe12:	1a9b      	subs	r3, r3, r2
   dfe14:	4a07      	ldr	r2, [pc, #28]	; (dfe34 <_tzset_unlocked_r+0x2e0>)
   dfe16:	bf18      	it	ne
   dfe18:	2301      	movne	r3, #1
   dfe1a:	6013      	str	r3, [r2, #0]
   dfe1c:	b00d      	add	sp, #52	; 0x34
   dfe1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfe22:	bf00      	nop
   dfe24:	000e0fc0 	.word	0x000e0fc0
   dfe28:	2003e7e0 	.word	0x2003e7e0
   dfe2c:	2003e7e8 	.word	0x2003e7e8
   dfe30:	000e0fc3 	.word	0x000e0fc3
   dfe34:	2003e7e4 	.word	0x2003e7e4
   dfe38:	2003be50 	.word	0x2003be50
   dfe3c:	2003e7d3 	.word	0x2003e7d3
   dfe40:	000e0fc7 	.word	0x000e0fc7
   dfe44:	000e0fea 	.word	0x000e0fea
   dfe48:	000e0fd6 	.word	0x000e0fd6
   dfe4c:	000e0fe9 	.word	0x000e0fe9
   dfe50:	2003e7c8 	.word	0x2003e7c8

000dfe54 <abs>:
   dfe54:	2800      	cmp	r0, #0
   dfe56:	bfb8      	it	lt
   dfe58:	4240      	neglt	r0, r0
   dfe5a:	4770      	bx	lr

000dfe5c <div>:
   dfe5c:	2900      	cmp	r1, #0
   dfe5e:	b510      	push	{r4, lr}
   dfe60:	fb91 f4f2 	sdiv	r4, r1, r2
   dfe64:	fb02 1314 	mls	r3, r2, r4, r1
   dfe68:	db04      	blt.n	dfe74 <div+0x18>
   dfe6a:	2b00      	cmp	r3, #0
   dfe6c:	da07      	bge.n	dfe7e <div+0x22>
   dfe6e:	3401      	adds	r4, #1
   dfe70:	1a9b      	subs	r3, r3, r2
   dfe72:	e004      	b.n	dfe7e <div+0x22>
   dfe74:	2b00      	cmp	r3, #0
   dfe76:	bfc4      	itt	gt
   dfe78:	f104 34ff 	addgt.w	r4, r4, #4294967295
   dfe7c:	189b      	addgt	r3, r3, r2
   dfe7e:	6004      	str	r4, [r0, #0]
   dfe80:	6043      	str	r3, [r0, #4]
   dfe82:	bd10      	pop	{r4, pc}

000dfe84 <_findenv_r>:
   dfe84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfe88:	4607      	mov	r7, r0
   dfe8a:	468b      	mov	fp, r1
   dfe8c:	4690      	mov	r8, r2
   dfe8e:	f000 f8dd 	bl	e004c <__env_lock>
   dfe92:	4b19      	ldr	r3, [pc, #100]	; (dfef8 <_findenv_r+0x74>)
   dfe94:	681d      	ldr	r5, [r3, #0]
   dfe96:	469a      	mov	sl, r3
   dfe98:	b13d      	cbz	r5, dfeaa <_findenv_r+0x26>
   dfe9a:	465c      	mov	r4, fp
   dfe9c:	4623      	mov	r3, r4
   dfe9e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dfea2:	b142      	cbz	r2, dfeb6 <_findenv_r+0x32>
   dfea4:	2a3d      	cmp	r2, #61	; 0x3d
   dfea6:	461c      	mov	r4, r3
   dfea8:	d1f8      	bne.n	dfe9c <_findenv_r+0x18>
   dfeaa:	4638      	mov	r0, r7
   dfeac:	f000 f8cf 	bl	e004e <__env_unlock>
   dfeb0:	2000      	movs	r0, #0
   dfeb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfeb6:	ebcb 0404 	rsb	r4, fp, r4
   dfeba:	46a9      	mov	r9, r5
   dfebc:	f859 0b04 	ldr.w	r0, [r9], #4
   dfec0:	2800      	cmp	r0, #0
   dfec2:	d0f2      	beq.n	dfeaa <_findenv_r+0x26>
   dfec4:	4622      	mov	r2, r4
   dfec6:	4659      	mov	r1, fp
   dfec8:	f7ff fc44 	bl	df754 <strncmp>
   dfecc:	b988      	cbnz	r0, dfef2 <_findenv_r+0x6e>
   dfece:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dfed2:	191e      	adds	r6, r3, r4
   dfed4:	5d1b      	ldrb	r3, [r3, r4]
   dfed6:	2b3d      	cmp	r3, #61	; 0x3d
   dfed8:	d10b      	bne.n	dfef2 <_findenv_r+0x6e>
   dfeda:	f8da 3000 	ldr.w	r3, [sl]
   dfede:	1aed      	subs	r5, r5, r3
   dfee0:	10ad      	asrs	r5, r5, #2
   dfee2:	4638      	mov	r0, r7
   dfee4:	f8c8 5000 	str.w	r5, [r8]
   dfee8:	f000 f8b1 	bl	e004e <__env_unlock>
   dfeec:	1c70      	adds	r0, r6, #1
   dfeee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dfef2:	464d      	mov	r5, r9
   dfef4:	e7e1      	b.n	dfeba <_findenv_r+0x36>
   dfef6:	bf00      	nop
   dfef8:	2003be98 	.word	0x2003be98

000dfefc <_getenv_r>:
   dfefc:	b507      	push	{r0, r1, r2, lr}
   dfefe:	aa01      	add	r2, sp, #4
   dff00:	f7ff ffc0 	bl	dfe84 <_findenv_r>
   dff04:	b003      	add	sp, #12
   dff06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dff0c <__gettzinfo>:
   dff0c:	4800      	ldr	r0, [pc, #0]	; (dff10 <__gettzinfo+0x4>)
   dff0e:	4770      	bx	lr
   dff10:	2003be58 	.word	0x2003be58

000dff14 <gmtime_r>:
   dff14:	6802      	ldr	r2, [r0, #0]
   dff16:	4b47      	ldr	r3, [pc, #284]	; (e0034 <gmtime_r+0x120>)
   dff18:	b5f0      	push	{r4, r5, r6, r7, lr}
   dff1a:	fb92 f4f3 	sdiv	r4, r2, r3
   dff1e:	fb03 2214 	mls	r2, r3, r4, r2
   dff22:	2a00      	cmp	r2, #0
   dff24:	bfbc      	itt	lt
   dff26:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dff2a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dff2e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dff32:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dff36:	fb92 f3f0 	sdiv	r3, r2, r0
   dff3a:	fb00 2213 	mls	r2, r0, r3, r2
   dff3e:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dff42:	bfac      	ite	ge
   dff44:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dff48:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dff4c:	608b      	str	r3, [r1, #8]
   dff4e:	fb92 f3f0 	sdiv	r3, r2, r0
   dff52:	fb00 2213 	mls	r2, r0, r3, r2
   dff56:	604b      	str	r3, [r1, #4]
   dff58:	600a      	str	r2, [r1, #0]
   dff5a:	2307      	movs	r3, #7
   dff5c:	1ce2      	adds	r2, r4, #3
   dff5e:	fb92 f3f3 	sdiv	r3, r2, r3
   dff62:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dff66:	1ad3      	subs	r3, r2, r3
   dff68:	618b      	str	r3, [r1, #24]
   dff6a:	4b33      	ldr	r3, [pc, #204]	; (e0038 <gmtime_r+0x124>)
   dff6c:	4d33      	ldr	r5, [pc, #204]	; (e003c <gmtime_r+0x128>)
   dff6e:	fb94 f5f5 	sdiv	r5, r4, r5
   dff72:	fb03 4405 	mla	r4, r3, r5, r4
   dff76:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dff7a:	fbb4 f2f2 	udiv	r2, r4, r2
   dff7e:	4422      	add	r2, r4
   dff80:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dff84:	fbb4 f3f7 	udiv	r3, r4, r7
   dff88:	1ad2      	subs	r2, r2, r3
   dff8a:	482d      	ldr	r0, [pc, #180]	; (e0040 <gmtime_r+0x12c>)
   dff8c:	fbb4 f0f0 	udiv	r0, r4, r0
   dff90:	f648 6694 	movw	r6, #36500	; 0x8e94
   dff94:	1a13      	subs	r3, r2, r0
   dff96:	fbb3 f6f6 	udiv	r6, r3, r6
   dff9a:	4434      	add	r4, r6
   dff9c:	f240 126d 	movw	r2, #365	; 0x16d
   dffa0:	fbb3 f0f2 	udiv	r0, r3, r2
   dffa4:	fbb3 f3f7 	udiv	r3, r3, r7
   dffa8:	1ae3      	subs	r3, r4, r3
   dffaa:	fb02 3310 	mls	r3, r2, r0, r3
   dffae:	2499      	movs	r4, #153	; 0x99
   dffb0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dffb4:	3202      	adds	r2, #2
   dffb6:	fbb2 f2f4 	udiv	r2, r2, r4
   dffba:	2a0a      	cmp	r2, #10
   dffbc:	fb04 f402 	mul.w	r4, r4, r2
   dffc0:	f104 0602 	add.w	r6, r4, #2
   dffc4:	f04f 0405 	mov.w	r4, #5
   dffc8:	fbb6 f4f4 	udiv	r4, r6, r4
   dffcc:	bf34      	ite	cc
   dffce:	2602      	movcc	r6, #2
   dffd0:	f06f 0609 	mvncs.w	r6, #9
   dffd4:	4416      	add	r6, r2
   dffd6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dffda:	fb02 0505 	mla	r5, r2, r5, r0
   dffde:	1c5f      	adds	r7, r3, #1
   dffe0:	2e01      	cmp	r6, #1
   dffe2:	bf98      	it	ls
   dffe4:	3501      	addls	r5, #1
   dffe6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dffea:	eba7 0704 	sub.w	r7, r7, r4
   dffee:	d302      	bcc.n	dfff6 <gmtime_r+0xe2>
   dfff0:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dfff4:	e014      	b.n	e0020 <gmtime_r+0x10c>
   dfff6:	0782      	lsls	r2, r0, #30
   dfff8:	d105      	bne.n	e0006 <gmtime_r+0xf2>
   dfffa:	2464      	movs	r4, #100	; 0x64
   dfffc:	fbb0 f2f4 	udiv	r2, r0, r4
   e0000:	fb04 0212 	mls	r2, r4, r2, r0
   e0004:	b94a      	cbnz	r2, e001a <gmtime_r+0x106>
   e0006:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e000a:	fbb0 f4f2 	udiv	r4, r0, r2
   e000e:	fb02 0014 	mls	r0, r2, r4, r0
   e0012:	fab0 f280 	clz	r2, r0
   e0016:	0952      	lsrs	r2, r2, #5
   e0018:	e000      	b.n	e001c <gmtime_r+0x108>
   e001a:	2201      	movs	r2, #1
   e001c:	333b      	adds	r3, #59	; 0x3b
   e001e:	441a      	add	r2, r3
   e0020:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e0024:	2300      	movs	r3, #0
   e0026:	61ca      	str	r2, [r1, #28]
   e0028:	614d      	str	r5, [r1, #20]
   e002a:	610e      	str	r6, [r1, #16]
   e002c:	60cf      	str	r7, [r1, #12]
   e002e:	620b      	str	r3, [r1, #32]
   e0030:	4608      	mov	r0, r1
   e0032:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e0034:	00015180 	.word	0x00015180
   e0038:	fffdc54f 	.word	0xfffdc54f
   e003c:	00023ab1 	.word	0x00023ab1
   e0040:	00023ab0 	.word	0x00023ab0

000e0044 <labs>:
   e0044:	2800      	cmp	r0, #0
   e0046:	bfb8      	it	lt
   e0048:	4240      	neglt	r0, r0
   e004a:	4770      	bx	lr

000e004c <__env_lock>:
   e004c:	4770      	bx	lr

000e004e <__env_unlock>:
   e004e:	4770      	bx	lr

000e0050 <dynalib_user>:
   e0050:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e0060:	0000 0000                                   ....

000e0064 <_ZTVN8particle13__SPISettingsE>:
	...
   e006c:	41d9 000d                                   .A..

000e0070 <_ZTV5Timer>:
	...
   e0078:	4375 000d 43bd 000d 41cb 000d               uC...C...A..

000e0084 <_ZTVN8particle9LEDStatusE>:
	...
   e008c:	42a5 000d 42c1 000d 40bb 000d 6564 6166     .B...B...@..defa
   e009c:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   e00ac:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   e00bc:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   e00cc:	7325 6c25 2075 7325 4d20 444f 2545 3e64     %s%lu %s MODE%d>
   e00dc:	4400 7665 6369 2065 2000 4f4e 2054 7461     .Device . NOT at
   e00ec:	2000 6461 7264 7365 3a73 7830 5300 6163     . address:0x.Sca
   e00fc:	6e6e 6e69 2e67 2e2e 5500 6b6e 6f6e 6e77     nning....Unknown
   e010c:	6520 7272 726f 6120 2074 6461 7264 7365      error at addres
   e011c:	2073 7830 3000 4e00 206f 3249 2043 6564     s 0x.0.No I2C de
   e012c:	6976 6563 2073 6f66 6e75 0a64 6400 6e6f     vices found..don
   e013c:	0a65 5000 656c 7361 2065 6461 2064 6957     e..Please add Wi
   e014c:	6946 6320 6572 6564 746e 6169 736c 5200     Fi credentials.R
   e015c:	7365 7465 6974 676e 6920 206e 3036 7320     esetting in 60 s
   e016c:	6365 6e6f 7364 4100 7474 6d65 7470 6e69     econds.Attemptin
   e017c:	2067 6f74 6320 6e6f 656e 7463 7420 206f     g to connect to 
   e018c:	6957 6946 2e2e 002e 6957 6946 6e20 746f     WiFi....WiFi not
   e019c:	7220 6165 7964 2d20 7220 7365 7465 6974      ready - resetti
   e01ac:	676e 4300 6c65 756c 616c 2072 6572 6461     ng.Cellular read
   e01bc:	0079 7441 6574 706d 6974 676e 7420 206f     y.Attempting to 
   e01cc:	6f63 6e6e 6365 2074 6f74 5020 7261 6974     connect to Parti
   e01dc:	6c63 2e65 2e2e 5000 7261 6974 6c63 2065     cle....Particle 
   e01ec:	6f6e 2074 6f63 6e6e 6365 6574 2064 202d     not connected - 
   e01fc:	6572 6573 7474 6e69 0067 6150 7472 6369     resetting.Partic
   e020c:	656c 6320 6e6f 656e 7463 6465 7200 6165     le connected.rea
   e021c:	7964 6f54 6547 5274 7365 7465 6e41 5364     dyToGetResetAndS
   e022c:	6e65 5364 6e65 6f73 7372 7c00 4300 7061     endSensors.|.Cap
   e023c:	7574 6972 676e 7320 6e65 6f73 7372 6300     turing sensors.c
   e024c:	7061 7574 6572 5400 6d69 2065 4f4e 2054     apture.Time NOT 
   e025c:	7973 636e 6465 7600 7265 6973 6e6f 6400     synced.version.d
   e026c:	7665 6369 7365 6174 7574 0073 6c50 6775     evicestatus.Plug
   e027c:	7420 6568 6420 7665 6369 2065 6e69 6f74      the device into
   e028c:	7420 6568 4920 546f 4e20 646f 0065 6544      the IoT Node.De
   e029c:	6976 6563 6920 2073 6f6e 2074 6c70 6775     vice is not plug
   e02ac:	6567 2064 6e69 6f74 7420 6568 4920 546f     ged into the IoT
   e02bc:	6f4e 6564 5200 7365 7465 6974 676e 6920     Node.Resetting i
   e02cc:	206e 3031 7320 6365 6e6f 7364 5200 4354     n 10 seconds.RTC
   e02dc:	7320 6e79 2763 6465 7720 7469 2068 6c63      sync'ed with cl
   e02ec:	756f 0064 5452 2043 6f6e 2074 7973 636e     oud.RTC not sync
   e02fc:	6527 2064 6977 6874 6320 6f6c 6475 5500     'ed with cloud.U
   e030c:	706e 756c 6767 6465 5200 4354 4500 7078     nplugged.RTC.Exp
   e031c:	5200 4354 4520 5045 4f52 004d 4441 0043     .RTC EEPROM.ADC.
   e032c:	5246 4d41 4100 324d 3133 0035 504d 334c     FRAM.AM2315.MPL3
   e033c:	3131 0035 5354 324c 3935 0031               115.TSL2591.

000e0348 <_ZL15firmwareVersion>:
   e0348:	0000 0000                                   ....

000e034c <_ZTV4File>:
	...
   e0354:	50a5 000d 50f1 000d 50d9 000d 50d3 000d     .P...P...P...P..
   e0364:	5089 000d 50b3 000d 50ad 000d 50a7 000d     .P...P...P...P..
   e0374:	206f 4d57 6c50 676f 0073 3025 7536 742e     o WMPlogs.%06u.t
   e0384:	7478 7200 6d65 766f 6e69 2067 6c6f 2064     xt.removing old 
   e0394:	6f6c 2067 6966 656c 2520 0073 6b6d 6964     log file %s.mkdi
   e03a4:	2072 6166 6c69 6465 6600 6961 656c 2064     r failed.failed 
   e03b4:	6f74 6f20 6570 206e 6f6c 7367 6420 7269     to open logs dir
   e03c4:	6300 6572 7461 6e69 2067 6f6c 7367 6420     .creating logs d
   e03d4:	7269 2520 0073 7263 6165 6974 676e 6e20     ir %s.creating n
   e03e4:	7765 6c20 676f 6620 6c69 2065 3025 6434     ew log file %04d
   e03f4:	7700 6972 6574 7420 206f 6473 6320 7261     .write to sd car
   e0404:	2064 6166 6c69 6465 0000 0000               d failed....

000e0410 <_ZTV18SdCardPrintHandler>:
	...
   e0418:	5745 000d 5761 000d 5a75 000d a1ad 000d     EW..aW..uZ......

000e0428 <CSWTCH.22>:
   e0428:	0000 4348 0000 4396 0000 43c8 0000 43fa     ..HC...C...C...C
   e0438:	0000 4416                                   ...D

000e043c <_ZTV16Adafruit_TSL2591>:
	...
   e0444:	5e25 000d 5e71 000d 40bd 000d 6127 000d     %^..q^...@..'a..
   e0454:	5e29 000d 002c 2e25 6631 2500 332e 0066     )^..,.%.1f.%.3f.
   e0464:	2e25 6632 7600 6569 746e 206f 6e65 6b20     %.2f.viento en k
   e0474:	206d 6f70 2072 6f68 6172 7000 6c75 6167     m por hora.pulga
   e0484:	6164 2073 6564 6c20 756c 6976 0061 6964     das de lluvia.di
   e0494:	6572 6363 6f69 206e 6564 206c 6976 6e65     reccion del vien
   e04a4:	6f74 5400 6d65 6570 6172 7574 6172 4800     to.Temperatura.H
   e04b4:	6d75 6465 6461 5000 6572 6973 6e6f 4200     umedad.Presion.B
   e04c4:	7461 7265 6169 5300 6174 7472 6e69 2067     ateria.Starting 
   e04d4:	6441 6661 7572 7469 5420 4c53 3532 3139     Adafruit TSL2591
   e04e4:	5420 7365 2174 4600 756f 646e 6120 5420      Test!.Found a T
   e04f4:	4c53 3532 3139 7320 6e65 6f73 0072 6f4e     SL2591 sensor.No
   e0504:	7320 6e65 6f73 2072 6f66 6e75 2064 2e2e      sensor found ..
   e0514:	202e 6863 6365 206b 6f79 7275 7720 7269     . check your wir
   e0524:	6e69 3f67 2d00 2d2d 2d2d 2d2d 2d2d 2d2d     ing?.-----------
   e0534:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   e0544:	2d2d 2d2d 2d2d 2d2d 002d 6553 736e 726f     ---------.Sensor
   e0554:	203a 2020 2020 2020 4400 6972 6576 2072     :       .Driver 
   e0564:	6556 3a72 2020 0020 6e55 7169 6575 4920     Ver:   .Unique I
   e0574:	3a44 2020 2020 4d00 7861 5620 6c61 6575     D:    .Max Value
   e0584:	203a 2020 0020 6c20 7875 4d00 6e69 5620     :    . lux.Min V
   e0594:	6c61 6575 203a 2020 0020 6552 6f73 756c     alue:    .Resolu
   e05a4:	6974 6e6f 203a 2020 4700 6961 3a6e 2020     tion:   .Gain:  
   e05b4:	2020 2020 2020 0020 7831 2820 6f4c 2977            .1x (Low)
   e05c4:	3200 7835 2820 654d 6964 6d75 0029 3234     .25x (Medium).42
   e05d4:	7838 2820 6948 6867 0029 3839 3637 2078     8x (High).9876x 
   e05e4:	4d28 7861 0029 6954 696d 676e 203a 2020     (Max).Timing:   
   e05f4:	2020 2020 2000 736d 0000 0000                   . ms....

000e0600 <_ZTVN5spark13EthernetClassE>:
	...
   e0608:	9a37 000d 9a2d 000d 9a23 000d 9a19 000d     7...-...#.......
   e0618:	9a0d 000d 9a01 000d 99f5 000d 99ed 000d     ................
   e0628:	99e3 000d 99d9 000d b631 000d               ........1...

000e0634 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   e0634:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   e0644:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
   e0654:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
   e0664:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
   e0674:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
   e0684:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
   e0694:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
   e06a4:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
   e06b4:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
   e06c4:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   e06d4:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   e06e4:	736c 3d20 0020 0a0d 6c00 006e 6e66 6300     ls = ....ln.fn.c
   e06f4:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
   e0704:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
   e0714:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
   e0724:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
   e0734:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
   e0744:	6373 6974 656d 0000                         sctime..

000e074c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e0754:	a91d 000d a923 000d a967 000d a931 000d     ....#...g...1...
   e0764:	a91f 000d                                   ....

000e0768 <_ZTV9IPAddress>:
	...
   e0770:	aeb5 000d aea5 000d aea7 000d               ............

000e077c <_ZTV9USBSerial>:
	...
   e0784:	af8d 000d afdd 000d afeb 000d a1ad 000d     ................
   e0794:	afc9 000d af8f 000d afa5 000d afd7 000d     ................
   e07a4:	afbb 000d af89 000d                         ........

000e07ac <_ZTV11USARTSerial>:
	...
   e07b4:	b165 000d b1b5 000d b1c3 000d a1ad 000d     e...............
   e07c4:	b179 000d b19b 000d b187 000d b1af 000d     y...............
   e07d4:	b167 000d b16b 000d                         g...k...

000e07dc <_ZTV7TwoWire>:
	...
   e07e4:	b29d 000d b2e7 000d b2bf 000d b29f 000d     ................
   e07f4:	b2c7 000d b2cf 000d b2d7 000d b2df 000d     ................

000e0804 <_ZTVN5spark9MeshClassE>:
	...
   e080c:	b437 000d b42d 000d b423 000d b419 000d     7...-...#.......
   e081c:	b40d 000d b401 000d b3f5 000d b3ed 000d     ................
   e082c:	b3e3 000d b3d9 000d b631 000d               ........1...

000e0838 <_ZTVN5spark9WiFiClassE>:
	...
   e0840:	b5a9 000d b59f 000d b595 000d 42e7 000d     .............B..
   e0850:	b589 000d b57d 000d b571 000d b569 000d     ....}...q...i...
   e0860:	b55f 000d b555 000d b631 000d               _...U...1...

000e086c <_ZTVN5spark12NetworkClassE>:
	...
   e0874:	b5c9 000d b5d3 000d b5dd 000d b5e7 000d     ................
   e0884:	b5f1 000d b5fd 000d b609 000d b615 000d     ................
   e0894:	b61d 000d b627 000d b631 000d               ....'...1...

000e08a0 <_ZSt7nothrow>:
	...

000e08a8 <atanlo>:
   e08a8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   e08b8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000e08c8 <atanhi>:
   e08c8:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   e08d8:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000e08e8 <npio2_hw>:
   e08e8:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   e08f8:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   e0908:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   e0918:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   e0928:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   e0938:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   e0948:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   e0958:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000e0968 <two_over_pi>:
   e0968:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   e0978:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   e0988:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   e0998:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   e09a8:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   e09b8:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   e09c8:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   e09d8:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   e09e8:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   e09f8:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   e0a08:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   e0a18:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   e0a28:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   e0a38:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   e0a48:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   e0a58:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   e0a68:	e27b 0060 8c6b 00c0                         {.`.k...

000e0a70 <init_jk>:
   e0a70:	0002 0000 0003 0000 0004 0000 0006 0000     ................

000e0a80 <PIo2>:
   e0a80:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   e0a90:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   e0aa0:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   e0ab0:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000e0ac0 <day_name.4725>:
   e0ac0:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e0ad0:	6972 6153 4a74                                   riSat

000e0ad5 <mon_name.4726>:
   e0ad5:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e0ae5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e0af5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   e0b05:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   e0b15:	6425 000a                                   %d..

000e0b19 <_ctype_>:
   e0b19:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e0b29:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e0b39:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e0b49:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e0b59:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e0b69:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e0b79:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e0b89:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e0b99:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e0c1c <__sf_fake_stdin>:
	...

000e0c3c <__sf_fake_stdout>:
	...

000e0c5c <__sf_fake_stderr>:
	...

000e0c7c <_DAYS_BEFORE_MONTH>:
   e0c7c:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   e0c8c:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   e0c9c:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000e0cac <DAYS_IN_MONTH>:
   e0cac:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e0cbc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e0ccc:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e0cdc <__month_lengths>:
   e0cdc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e0cec:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e0cfc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e0d0c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e0d1c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e0d2c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e0d3c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   e0d4c:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
   e0d5c:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
   e0d6c:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
   e0d7c:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
   e0d8c:	6c33 2564 322e 646c 4c00 5f43 4954 454d     3ld%.2ld.LC_TIME
   e0d9c:	4a00 6e61 4600 6265 4d00 7261 4100 7270     .Jan.Feb.Mar.Apr
   e0dac:	4d00 7961 4a00 6e75 4a00 6c75 4100 6775     .May.Jun.Jul.Aug
   e0dbc:	5300 7065 4f00 7463 4e00 766f 4400 6365     .Sep.Oct.Nov.Dec
   e0dcc:	4a00 6e61 6175 7972 4600 6265 7572 7261     .January.Februar
   e0ddc:	0079 614d 6372 0068 7041 6972 006c 754a     y.March.April.Ju
   e0dec:	656e 4a00 6c75 0079 7541 7567 7473 5300     ne.July.August.S
   e0dfc:	7065 6574 626d 7265 4f00 7463 626f 7265     eptember.October
   e0e0c:	4e00 766f 6d65 6562 0072 6544 6563 626d     .November.Decemb
   e0e1c:	7265 5300 6e75 4d00 6e6f 5400 6575 5700     er.Sun.Mon.Tue.W
   e0e2c:	6465 5400 7568 4600 6972 5300 7461 5300     ed.Thu.Fri.Sat.S
   e0e3c:	6e75 6164 0079 6f4d 646e 7961 5400 6575     unday.Monday.Tue
   e0e4c:	6473 7961 5700 6465 656e 6473 7961 5400     sday.Wednesday.T
   e0e5c:	7568 7372 6164 0079 7246 6469 7961 5300     hursday.Friday.S
   e0e6c:	7461 7275 6164 0079 4825 253a 3a4d 5325     aturday.%H:%M:%S
   e0e7c:	2500 2f6d 6425 252f 0079 6125 2520 2062     .%m/%d/%y.%a %b 
   e0e8c:	6525 2520 3a48 4d25 253a 2053 5925 5000     %e %H:%M:%S %Y.P
   e0e9c:	004d 6125 2520 2062 6525 2520 3a48 4d25     M.%a %b %e %H:%M
   e0eac:	253a 2053 5a25 2520 0059 4925 253a 3a4d     :%S %Z %Y.%I:%M:
   e0ebc:	5325 2520 0070 0000                         %S %p...

000e0ec4 <_C_time_locale>:
   e0ec4:	0d9d 000e 0da1 000e 0da5 000e 0da9 000e     ................
   e0ed4:	0dad 000e 0db1 000e 0db5 000e 0db9 000e     ................
   e0ee4:	0dbd 000e 0dc1 000e 0dc5 000e 0dc9 000e     ................
   e0ef4:	0dcd 000e 0dd5 000e 0dde 000e 0de4 000e     ................
   e0f04:	0dad 000e 0dea 000e 0def 000e 0df4 000e     ................
   e0f14:	0dfb 000e 0e05 000e 0e0d 000e 0e16 000e     ................
   e0f24:	0e1f 000e 0e23 000e 0e27 000e 0e2b 000e     ....#...'...+...
   e0f34:	0e2f 000e 0e33 000e 0e37 000e 0e3b 000e     /...3...7...;...
   e0f44:	0e42 000e 0e49 000e 0e51 000e 0e5b 000e     B...I...Q...[...
   e0f54:	0e64 000e 0e6b 000e 0e74 000e 0e7d 000e     d...k...t...}...
   e0f64:	0e86 000e 032e 000e 0e9b 000e 0e9e 000e     ................
   e0f74:	0dcd 000e 0dd5 000e 0dde 000e 0de4 000e     ................
   e0f84:	0dad 000e 0dea 000e 0def 000e 0df4 000e     ................
   e0f94:	0dfb 000e 0e05 000e 0e0d 000e 0e16 000e     ................
   e0fa4:	0668 000e 0eb6 000e 06ec 000e 06ec 000e     h...............
   e0fb4:	06ec 000e 06ec 000e 06ec 000e 5a54 4700     ............TZ.G
   e0fc4:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   e0fd4:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   e0fe4:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   e0ff4:	3a6e 6825 2575 006e                         n:%hu%n.

000e0ffc <link_const_variable_data_end>:
   e0ffc:	000d4c99 	.word	0x000d4c99
   e1000:	000d5075 	.word	0x000d5075
   e1004:	000d5085 	.word	0x000d5085
   e1008:	000d5521 	.word	0x000d5521
   e100c:	000d5a93 	.word	0x000d5a93
   e1010:	000d5e21 	.word	0x000d5e21
   e1014:	000d6167 	.word	0x000d6167
   e1018:	000d616b 	.word	0x000d616b
   e101c:	000d6293 	.word	0x000d6293
   e1020:	000d6297 	.word	0x000d6297
   e1024:	000d629b 	.word	0x000d629b
   e1028:	000d6aa9 	.word	0x000d6aa9
   e102c:	000d6aad 	.word	0x000d6aad
   e1030:	000d6ab1 	.word	0x000d6ab1
   e1034:	000d6ae3 	.word	0x000d6ae3
   e1038:	000d7445 	.word	0x000d7445
   e103c:	000d7469 	.word	0x000d7469
   e1040:	000d746d 	.word	0x000d746d
   e1044:	000d7791 	.word	0x000d7791
   e1048:	000d7795 	.word	0x000d7795
   e104c:	000d7799 	.word	0x000d7799
   e1050:	000d7cd3 	.word	0x000d7cd3
   e1054:	000d7cd7 	.word	0x000d7cd7
   e1058:	000d7cdb 	.word	0x000d7cdb
   e105c:	000d7d81 	.word	0x000d7d81
   e1060:	000d7ee3 	.word	0x000d7ee3
   e1064:	000d8099 	.word	0x000d8099
   e1068:	000d8c61 	.word	0x000d8c61
   e106c:	000d91e3 	.word	0x000d91e3
   e1070:	000d92f7 	.word	0x000d92f7
   e1074:	000d9a41 	.word	0x000d9a41
   e1078:	000d9c61 	.word	0x000d9c61
   e107c:	000da185 	.word	0x000da185
   e1080:	000da471 	.word	0x000da471
   e1084:	000da7a9 	.word	0x000da7a9
   e1088:	000da7f1 	.word	0x000da7f1
   e108c:	000db505 	.word	0x000db505
   e1090:	000db5b5 	.word	0x000db5b5
   e1094:	000db6fd 	.word	0x000db6fd
   e1098:	000dbbed 	.word	0x000dbbed
   e109c:	000dbc71 	.word	0x000dbc71
   e10a0:	000dbd35 	.word	0x000dbd35
   e10a4:	000dbdf9 	.word	0x000dbdf9

000e10a8 <link_constructors_end>:
	...
